void altitude::ManeuverDrawRegion::assemble(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  double *v10;
  double *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double *v41;
  __int128 v42;
  double *v43;
  uint64_t v44;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  unint64_t v49;
  uint64_t v50;
  double *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  double *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  double *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v9 = *a1;
  v10 = (double *)a1[3];
  v11 = (double *)a1[4];
  v12 = 0xAAAAAAAAAAAAAAABLL * (v11 - v10);
  v13 = altitude::ManeuverDrawRegion::simplified(*(altitude::ManeuverDrawRegion **)(*a1 + 56), *(PolylineCoordinate **)(*a1 + 80), *a3, *((float *)a3 + 1));
  v16 = v13;
  v17 = v14;
  v18 = v15;
  v19 = a1[5];
  if ((unint64_t)v11 >= v19)
  {
    v21 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_114;
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v10) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_115;
      v24 = (char *)operator new(24 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = (double *)&v24[8 * (v11 - v10)];
    v26 = &v24[24 * v23];
    *v25 = v16;
    *((_QWORD *)v25 + 1) = v17;
    *((_QWORD *)v25 + 2) = v18;
    v20 = v25 + 3;
    if (v11 != v10)
    {
      do
      {
        v27 = *(_OWORD *)(v11 - 3);
        *(v25 - 1) = *(v11 - 1);
        *(_OWORD *)(v25 - 3) = v27;
        v25 -= 3;
        v11 -= 3;
      }
      while (v11 != v10);
      v11 = (double *)a1[3];
    }
    a1[3] = v25;
    a1[4] = v20;
    a1[5] = v26;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v11 = v13;
    *((_QWORD *)v11 + 1) = v14;
    v20 = v11 + 3;
    *((_QWORD *)v11 + 2) = v15;
  }
  v105 = a2;
  v106 = v12;
  a1[4] = v20;
  v28 = *(_QWORD *)(v9 + 56);
  v29 = v28 + 48 * *a3;
  v30 = *(_DWORD *)(v29 + 40);
  v31 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 >= v30 && *(_DWORD *)(v29 + 36) != v30)
  {
    while (1)
    {
      v46 = *(_QWORD *)(v9 + 80) + 24 * (int)v30;
      v47 = vsubq_f64(*(float64x2_t *)(v20 - 2), *(float64x2_t *)(v46 + 8));
      v48 = vmulq_f64(v47, v47);
      if (v48.f64[0] + (*(v20 - 3) - *(double *)v46) * (*(v20 - 3) - *(double *)v46) + v48.f64[1] <= 0.0)
        goto LABEL_28;
      v49 = a1[5];
      if ((unint64_t)v20 >= v49)
        break;
      v42 = *(_OWORD *)v46;
      v20[2] = *(double *)(v46 + 16);
      *(_OWORD *)v20 = v42;
      v43 = v20 + 3;
LABEL_27:
      a1[4] = v43;
      v31 = *(_DWORD *)a4;
      v20 = v43;
      v28 = *(_QWORD *)(v9 + 56);
LABEL_28:
      v44 = v28 + 48 * (int)v30;
      v30 = *(_DWORD *)(v44 + 40);
      if (v31 < v30 || *(_DWORD *)(v44 + 36) == v30)
        goto LABEL_23;
    }
    v50 = a4;
    v51 = (double *)a1[3];
    v52 = 0xAAAAAAAAAAAAAAABLL * (v20 - v51) + 1;
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_114;
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v51) >> 3);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0x555555555555555)
      v54 = 0xAAAAAAAAAAAAAAALL;
    else
      v54 = v52;
    if (v54)
    {
      if (v54 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_115;
      v55 = (char *)operator new(24 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[8 * (v20 - v51)];
    v57 = *(_OWORD *)v46;
    v58 = &v55[24 * v54];
    *((_QWORD *)v56 + 2) = *(_QWORD *)(v46 + 16);
    *(_OWORD *)v56 = v57;
    v43 = (double *)(v56 + 24);
    if (v20 == v51)
    {
      a1[3] = v56;
      a1[4] = v43;
      a1[5] = v58;
    }
    else
    {
      do
      {
        v59 = *(_OWORD *)(v20 - 3);
        *((double *)v56 - 1) = *(v20 - 1);
        *(_OWORD *)(v56 - 24) = v59;
        v56 -= 24;
        v20 -= 3;
      }
      while (v20 != v51);
      v20 = (double *)a1[3];
      a1[3] = v56;
      a1[4] = v43;
      a1[5] = v58;
      if (!v20)
        goto LABEL_50;
    }
    operator delete(v20);
LABEL_50:
    a4 = v50;
    goto LABEL_27;
  }
LABEL_23:
  v35 = altitude::ManeuverDrawRegion::simplified(*(altitude::ManeuverDrawRegion **)(*a1 + 56), *(PolylineCoordinate **)(*a1 + 80), v31, *(float *)(a4 + 4));
  v36 = v33;
  v37 = v34;
  if ((*(v20 - 3) - v35) * (*(v20 - 3) - v35)
     + (*(v20 - 2) - v33) * (*(v20 - 2) - v33)
     + (*(v20 - 1) - v34) * (*(v20 - 1) - v34) <= 0.0)
  {
    v40 = v106;
    v39 = a5;
    goto LABEL_69;
  }
  v38 = a1[5];
  v40 = v106;
  v39 = a5;
  if ((unint64_t)v20 < v38)
  {
    *v20 = v35;
    v20[1] = v33;
    v41 = v20 + 3;
    v20[2] = v34;
    goto LABEL_68;
  }
  v60 = (double *)a1[3];
  v61 = 0xAAAAAAAAAAAAAAABLL * (v20 - v60) + 1;
  if (v61 > 0xAAAAAAAAAAAAAAALL)
LABEL_114:
    abort();
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v60) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (!v63)
  {
    v64 = 0;
    goto LABEL_62;
  }
  if (v63 > 0xAAAAAAAAAAAAAAALL)
LABEL_115:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v64 = (char *)operator new(24 * v63);
LABEL_62:
  v65 = (double *)&v64[8 * (v20 - v60)];
  v66 = &v64[24 * v63];
  *v65 = v35;
  v65[1] = v36;
  v65[2] = v37;
  v41 = v65 + 3;
  if (v20 == v60)
  {
    a1[3] = v65;
    a1[4] = v41;
    a1[5] = v66;
  }
  else
  {
    do
    {
      v67 = *(_OWORD *)(v20 - 3);
      *(v65 - 1) = *(v20 - 1);
      *(_OWORD *)(v65 - 3) = v67;
      v65 -= 3;
      v20 -= 3;
    }
    while (v20 != v60);
    v20 = (double *)a1[3];
    a1[3] = v65;
    a1[4] = v41;
    a1[5] = v66;
    if (!v20)
      goto LABEL_68;
  }
  operator delete(v20);
LABEL_68:
  a1[4] = v41;
  v20 = v41;
LABEL_69:
  v68 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - a1[3]) >> 3);
  v69 = v68 - v40;
  if (v68 - v40 <= 1)
  {
    if (v68 - v40 == 1)
      a1[4] = v20 - 3;
    return;
  }
  v70 = *(unsigned int *)(v105 + 16);
  {
    v103 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v103, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  v73 = v72;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)v72 = 0u;
  *(_OWORD *)(v72 + 16) = 0u;
  *(_QWORD *)(v72 + 64) = 0;
  *(_QWORD *)(v72 + 72) = v70;
  *(_QWORD *)(v72 + 48) = v69;
  *(_QWORD *)(v72 + 56) = v40;
  v74 = *(uint64_t **)(v39 + 8);
  v75 = *(_QWORD *)(v39 + 16);
  if ((unint64_t)v74 < v75)
  {
    if (v74)
    {
      *v74 = v72;
      v73 = 0;
    }
    v76 = v74 + 1;
    goto LABEL_104;
  }
  v77 = ((uint64_t)v74 - *(_QWORD *)v39) >> 3;
  v78 = v77 + 1;
  if ((unint64_t)(v77 + 1) >> 61)
    abort();
  v79 = v75 - *(_QWORD *)v39;
  if (v79 >> 2 > v78)
    v78 = v79 >> 2;
  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
    v80 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v80 = v78;
  if (v80)
  {
    v81 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 24) + 16))(*(_QWORD *)(v39 + 24), 8 * v80, 8);
    v82 = (uint64_t *)(v81 + 8 * v77);
    v83 = v81 + 8 * v80;
    if (v81)
    {
      *v82 = v73;
      v73 = 0;
    }
  }
  else
  {
    v83 = 0;
    v82 = (uint64_t *)(8 * v77);
  }
  v76 = v82 + 1;
  v84 = *(char **)v39;
  v85 = *(char **)(v39 + 8);
  if (v85 != *(char **)v39)
  {
    v86 = (unint64_t)&v85[-*(_QWORD *)v39 - 8];
    if (v86 > 0x57
      && ((v87 = (v84 - v85 + 7) & 0xFFFFFFFFFFFFFFF8, &v85[v87] >= (char *)v82) || (char *)v82 + v87 >= v85))
    {
      v97 = (v86 >> 3) + 1;
      v88 = &v85[-8 * (v97 & 0x3FFFFFFFFFFFFFFCLL)];
      v98 = v82 - 2;
      v99 = v85 - 32;
      v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *(_OWORD *)v99;
        v101 = *((_OWORD *)v99 + 1);
        *(_OWORD *)v99 = 0uLL;
        *((_OWORD *)v99 + 1) = 0uLL;
        v99 -= 32;
        *((_OWORD *)v98 - 1) = v102;
        *(_OWORD *)v98 = v101;
        v98 -= 4;
        v100 -= 4;
      }
      while (v100);
      v82 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
      if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        v85 = *(char **)v39;
        v90 = *(char **)(v39 + 8);
        *(_QWORD *)v39 = v82;
        *(_QWORD *)(v39 + 8) = v76;
        v91 = *(_QWORD *)(v39 + 16);
        *(_QWORD *)(v39 + 16) = v83;
        if (v90 != v85)
        {
          do
          {
            v93 = *((_QWORD *)v90 - 1);
            v90 -= 8;
            v92 = v93;
            *(_QWORD *)v90 = 0;
            if (v93)
            {
              {
                v95 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v92, 80);
            }
          }
          while (v90 != v85);
          v39 = a5;
        }
        if (!v85)
          goto LABEL_104;
        goto LABEL_103;
      }
    }
    else
    {
      v88 = *(char **)(v39 + 8);
    }
    do
    {
      v89 = *((_QWORD *)v88 - 1);
      v88 -= 8;
      *(_QWORD *)v88 = 0;
      *--v82 = v89;
    }
    while (v88 != v84);
    goto LABEL_93;
  }
  *(_QWORD *)v39 = v82;
  *(_QWORD *)(v39 + 8) = v76;
  v91 = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(v39 + 16) = v83;
  if (v85)
LABEL_103:
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v39 + 24) + 40))(*(_QWORD *)(v39 + 24), v85, v91 - (_QWORD)v85);
LABEL_104:
  *(_QWORD *)(v39 + 8) = v76;
  if (v73)
  {
    {
      v104 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v104, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v73, 80);
  }
}

void sub_19F4E2194(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 80);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

double altitude::ManeuverDrawRegion::simplified(altitude::ManeuverDrawRegion *this, PolylineCoordinate *a2, unsigned int a3, float a4)
{
  float *v4;
  float *v5;

  v4 = (float *)((char *)this + 48 * a3);
  v5 = (float *)((char *)this + 48 * (unint64_t)(float)(ceilf(a4) + (float)a3));
  return (*(double *)&a2[3 * *((int *)v4 + 9)] * (float)(1.0 - v4[11]) + *(double *)&a2[3 * *((int *)v4 + 10)] * v4[11])
       * (1.0 - a4)
       + (*(double *)&a2[3 * *((int *)v5 + 9)] * (float)(1.0 - v5[11]) + *(double *)&a2[3 * *((int *)v5 + 10)] * v5[11])
       * a4;
}

uint64_t altitude::ManeuverDrawRegion::setAlpha(uint64_t this, float a2)
{
  *(float *)(this + 52) = a2;
  return this;
}

uint64_t CompletionAnimation::isDead(CompletionAnimation *this)
{
  return 1;
}

void CompletionAnimation::~CompletionAnimation(CompletionAnimation *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E428B388;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      return;
    v5 = 5;
    v2 = (_QWORD *)*((_QWORD *)this + 4);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E428B388;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_9;
    v5 = 5;
    v2 = (_QWORD *)*((_QWORD *)this + 4);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_9:
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F4E2324(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F4E23F4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D88B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D88B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0,std::allocator<altitude::ManeuverDrawRegion::fadeToAlpha(float)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 48) = 0;
  return result;
}

void std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6E28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6E28;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (altitude::ManeuverDrawRegion::*)(float),altitude::ManeuverDrawRegion*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(_QWORD *a1, double *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, float);
  _QWORD *v4;
  float v5;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, float))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, float))(*v4 + v3);
  v5 = *a2;
  return v3(v4, v5);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverManeuverPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverManeuverPasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void md::FlyoverRenderable::~FlyoverRenderable(md::FlyoverRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F280;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F280;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E426F838;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      return;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MapTileDataRenderable<md::MapTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F280;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F280;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E11D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E11D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E11A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E11A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoute::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::RouteDrawRegion::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  {
    v36 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  v8 = result;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 48) = a2 - a1;
  *(_QWORD *)(result + 56) = a1;
  v9 = *(uint64_t **)(a3 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)v9 < v10)
  {
    if (v9)
    {
      *v9 = result;
      v8 = 0;
    }
    v11 = v9 + 1;
    goto LABEL_33;
  }
  v12 = ((uint64_t)v9 - *(_QWORD *)a3) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    abort();
  v14 = v10 - *(_QWORD *)a3;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 24) + 16))(*(_QWORD *)(a3 + 24), 8 * v15, 8);
    v16 = (uint64_t *)(result + 8 * v12);
    v17 = result + 8 * v15;
    if (result)
    {
      *v16 = v8;
      v8 = 0;
    }
  }
  else
  {
    v17 = 0;
    v16 = (uint64_t *)(8 * v12);
  }
  v11 = v16 + 1;
  v18 = *(char **)a3;
  v19 = *(char **)(a3 + 8);
  if (v19 != *(char **)a3)
  {
    v20 = (unint64_t)&v19[-*(_QWORD *)a3 - 8];
    if (v20 > 0x57
      && ((v21 = (v18 - v19 + 7) & 0xFFFFFFFFFFFFFFF8, &v19[v21] >= (char *)v16) || (char *)v16 + v21 >= v19))
    {
      v30 = (v20 >> 3) + 1;
      v22 = &v19[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      v31 = v16 - 2;
      v32 = v19 - 32;
      v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *(_OWORD *)v32;
        v34 = *((_OWORD *)v32 + 1);
        *(_OWORD *)v32 = 0uLL;
        *((_OWORD *)v32 + 1) = 0uLL;
        v32 -= 32;
        *((_OWORD *)v31 - 1) = v35;
        *(_OWORD *)v31 = v34;
        v31 -= 4;
        v33 -= 4;
      }
      while (v33);
      v16 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v19 = *(char **)a3;
        v24 = *(char **)(a3 + 8);
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v11;
        v25 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v17;
        while (v24 != v19)
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *(_QWORD *)v24 = 0;
          if (v26)
          {
            {
              v28 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v28, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
          }
        }
        goto LABEL_31;
      }
    }
    else
    {
      v22 = *(char **)(a3 + 8);
    }
    do
    {
      v23 = *((_QWORD *)v22 - 1);
      v22 -= 8;
      *(_QWORD *)v22 = 0;
      *--v16 = v23;
    }
    while (v22 != v18);
    goto LABEL_22;
  }
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v11;
  v25 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v17;
LABEL_31:
  if (v19)
    result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a3 + 24) + 40))(*(_QWORD *)(a3 + 24), v19, v25 - (_QWORD)v19);
LABEL_33:
  *(_QWORD *)(a3 + 8) = v11;
  if (v8)
  {
    if ((v29 & 1) == 0)
    {
      {
        v37 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v37, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v8, 80);
  }
  return result;
}

void sub_19F4E2F2C(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 80);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void altitude::RouteDrawRegion::update(altitude::RouteDrawRegion *this, ResourceAccessor *a2)
{
  double v2;
  float64_t v3;
  float64_t v4;
  double v5;
  double v6;
  double v7;
  float64_t v8;
  double v9;
  altitude::RouteDrawRegion *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int64x2_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  char *v21;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  malloc_zone_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  geo::read_write_lock *v52;
  const char *v53;
  std::__shared_weak_count_vtbl **v54;
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  QuadTile *p_xIdx;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _DWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  __int128 v110;
  char *v111;
  char *v112;
  __int128 v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _DWORD *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  double v139;
  char *v140;
  char *v141;
  uint64_t *p_shared_owners;
  double *v143;
  _QWORD **v144;
  _QWORD **v145;
  char *v146;
  _QWORD *v147;
  _QWORD **v148;
  _QWORD **i;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  double v158;
  _BYTE *v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  double v169;
  double v170;
  gdc::GlobeTileGrid *v171;
  gdc::GlobeTileGrid *v172;
  gdc::GlobeTileGrid *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void (**v181)(ggl::BufferData *__hidden);
  char *v182;
  std::__shared_count v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unsigned __int8 v186;
  std::__shared_weak_count *v187;
  std::__shared_count v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unsigned __int8 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unsigned __int8 v195;
  unsigned __int8 v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  _QWORD *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  uint64_t *v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD **v243;
  _QWORD **v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  int v253;
  uint64_t v254;
  geo::read_write_lock *v255;
  const char *v256;
  malloc_zone_t *v257;
  int v258;
  uint64_t v259;
  geo::read_write_lock *v260;
  const char *v261;
  malloc_zone_t *v262;
  unsigned __int8 v263;
  int v264;
  uint64_t v265;
  geo::read_write_lock *v266;
  const char *v267;
  malloc_zone_t *v268;
  int v269;
  uint64_t v270;
  geo::read_write_lock *v271;
  const char *v272;
  malloc_zone_t *v273;
  double v274;
  uint64_t *v275;
  uint64_t *v276;
  altitude::RouteDrawRegion *v277;
  ResourceAccessor *j;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t **v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD **v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double v306;
  float v307;
  float v308;
  double v309;
  double v310;
  __int32 v311;
  float32_t v312;
  float32x2_t *v313;
  float32x2_t v314;
  float32_t v315;
  float32_t v316;
  float32_t v317;
  float32_t v318;
  float v319;
  float v320;
  double v321;
  double v322;
  __int32 v323;
  double v324;
  float32_t v325;
  float32x2_t *v326;
  float32x2_t v327;
  float32_t v328;
  float32_t v329;
  float32_t v330;
  int v336;
  int8x16_t v337;
  float64_t v338;
  float64_t v339;
  float64_t v340;
  float v341;
  float v342;
  float v343;
  float64_t v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  uint64_t v357;
  _WORD *v358;
  double v359;
  float v360;
  float v361;
  double v362;
  double v363;
  __int32 v364;
  float32_t v365;
  float32x2_t *v366;
  float32x2_t v367;
  float32_t v368;
  float32_t v369;
  float32_t v370;
  float v371;
  float v372;
  float v373;
  double v374;
  float v375;
  float v376;
  double v377;
  double v378;
  __int32 v379;
  float32_t v380;
  float32x2_t *v381;
  float32x2_t v382;
  float32_t v383;
  unsigned int v384;
  int8x16_t *v385;
  __int16 v386;
  uint64_t v387;
  uint64_t v388;
  __int16 v389;
  uint64_t v390;
  double v391;
  float v392;
  float v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  int v402;
  double v403;
  float32x2_t v404;
  float v405;
  uint64_t v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  uint64_t v417;
  uint64_t v418;
  float v419;
  float v420;
  float v421;
  double v422;
  float v423;
  double v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float32x2_t *v431;
  uint64_t v432;
  uint64_t v433;
  float v434;
  double v435;
  float v436;
  float v437;
  double v438;
  float v439;
  int v440;
  uint64_t v441;
  geo::read_write_lock *v442;
  const char *v443;
  malloc_zone_t *zone;
  uint64_t v445;
  geo::read_write_lock *v446;
  const char *v447;
  malloc_zone_t *v448;
  _Unwind_Exception *v449;
  std::__shared_weak_count_vtbl **__p;
  uint64_t *v451;
  uint64_t *v452;
  uint64_t **v454;
  altitude::RouteDrawRegion *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t **v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD **v465;
  _QWORD **v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  float64_t v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  std::__shared_weak_count *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t **v490;
  uint64_t v491;
  double v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  QuadTile *v496;
  QuadTile *v497;
  uint64_t v498;
  std::__shared_weak_count *v499;
  double v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  QuadTile *v504;
  double v505;
  uint64_t v506;
  _QWORD **v507;
  double v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  QuadTile *v515;
  std::__shared_weak_count *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  float64x2_t v521;
  double v522;
  double v523;
  std::__shared_weak_count *v524;
  double v525;
  double v526;
  double v527;
  double v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  double v532;
  double v533;
  QuadTile *v534;
  double v535;
  uint64_t *v536;
  double v537;
  float64x2_t v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  double v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;

  v10 = this;
  v559 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)v10 + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)v10 + 3) = *((_QWORD *)v10 + 2);
  *((_QWORD *)v10 + 6) = *((_QWORD *)v10 + 5);
  v12 = operator new();
  *(_QWORD *)v12 = &off_1E42AF288;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 32) = "";
  *(_DWORD *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 72) = 1065353216;
  v13 = 0uLL;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  v14 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v12 + 112) = v14;
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 16) = &off_1E42AF548;
  *(_BYTE *)(v12 + 136) = 1;
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 160) = "";
  *(_DWORD *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 200) = 1065353216;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(int64x2_t *)(v12 + 240) = v14;
  *(_QWORD *)(v12 + 256) = 0;
  *(_QWORD *)(v12 + 144) = &off_1E42AF548;
  *(_BYTE *)(v12 + 264) = 1;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  v15 = &unk_1ECE44000;
  v455 = v10;
  if ((v16 & 1) == 0)
  {
    v13 = 0uLL;
    v15 = (_QWORD *)&unk_1ECE44000;
    if (v440)
    {
      v441 = operator new();
      *(_QWORD *)(v441 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v441 + 24) = "GeoGL";
      *(_OWORD *)(v441 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v441 = &off_1E42B5668;
      *(_QWORD *)(v441 + 8) = "GeoGL";
      *(_OWORD *)(v441 + 72) = 0u;
      *(_OWORD *)(v441 + 88) = 0u;
      *(_OWORD *)(v441 + 104) = 0u;
      *(_OWORD *)(v441 + 120) = 0u;
      *(_OWORD *)(v441 + 136) = 0u;
      *(_OWORD *)(v441 + 152) = 0u;
      *(_OWORD *)(v441 + 168) = 0u;
      *(_OWORD *)(v441 + 184) = 0u;
      *(_OWORD *)(v441 + 200) = 0u;
      *(_OWORD *)(v441 + 216) = 0u;
      *(_OWORD *)(v441 + 232) = 0u;
      *(_QWORD *)(v441 + 248) = 0;
      *(_OWORD *)(v441 + 56) = 0u;
      v442 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v441 + 56), 0);
      if ((_DWORD)v442)
        geo::read_write_lock::logFailure(v442, (uint64_t)"initialization", v443);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v441 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v441 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v441;
      v15 = &unk_1ECE44000;
      v13 = 0uLL;
    }
  }
  *(_QWORD *)(v12 + 320) = v15[495];
  *(_OWORD *)(v12 + 328) = v13;
  *(_OWORD *)(v12 + 344) = v13;
  *(_QWORD *)(v12 + 360) = 0;
  *(_QWORD *)(v12 + 368) = 32;
  v17 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)(v12 + 352) = v17;
  *(_QWORD *)(v12 + 360) = v17;
  *(_QWORD *)(v12 + 384) = 0;
  *(_QWORD *)(v12 + 392) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  *(_BYTE *)(v12 + 400) = 1;
  v18 = operator new();
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_BYTE *)(v18 + 48) = 1;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  {
    v445 = operator new();
    *(_QWORD *)(v445 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v445 + 24) = "VectorKitLabels";
    *(_OWORD *)(v445 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v445 = &off_1E42B5668;
    *(_QWORD *)(v445 + 8) = "VectorKitLabels";
    *(_OWORD *)(v445 + 72) = 0u;
    *(_OWORD *)(v445 + 88) = 0u;
    *(_OWORD *)(v445 + 104) = 0u;
    *(_OWORD *)(v445 + 120) = 0u;
    *(_OWORD *)(v445 + 136) = 0u;
    *(_OWORD *)(v445 + 152) = 0u;
    *(_OWORD *)(v445 + 168) = 0u;
    *(_OWORD *)(v445 + 184) = 0u;
    *(_OWORD *)(v445 + 200) = 0u;
    *(_OWORD *)(v445 + 216) = 0u;
    *(_OWORD *)(v445 + 232) = 0u;
    *(_QWORD *)(v445 + 248) = 0;
    *(_OWORD *)(v445 + 56) = 0u;
    v446 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v445 + 56), 0);
    if ((_DWORD)v446)
      geo::read_write_lock::logFailure(v446, (uint64_t)"initialization", v447);
    v448 = malloc_create_zone(0, 0);
    *(_QWORD *)(v445 + 48) = v448;
    malloc_set_zone_name(v448, "VectorKitLabels");
    *(_QWORD *)(v445 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v445;
  }
  *(_QWORD *)(v18 + 80) = mdm::Allocator::instance(void)::alloc;
  v21 = *(char **)(v12 + 384);
  v20 = *(_QWORD *)(v12 + 392);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(char **)(v12 + 376);
    v24 = (v21 - v23) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
LABEL_360:
      abort();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
LABEL_358:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v18;
    get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))(v29 + 1);
    if (v21 == v23)
    {
      v39 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      v31 = v21 - v23 - 8;
      if (v31 < 0x78
        || &v21[-(v31 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v29
        && &v28[v21 - v23 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8] < v21)
      {
        goto LABEL_372;
      }
      v32 = (v31 >> 3) + 1;
      v33 = &v28[8 * v24 - 16];
      v34 = v21 - 32;
      v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *(_OWORD *)v34;
        v36 = *((_OWORD *)v34 + 1);
        *(_OWORD *)v34 = 0uLL;
        *((_OWORD *)v34 + 1) = 0uLL;
        v34 -= 32;
        *((_OWORD *)v33 - 1) = v37;
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v35 -= 4;
      }
      while (v35);
      v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
      v21 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_372:
        do
        {
          v38 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *(_QWORD *)v21 = 0;
          *--v29 = v38;
        }
        while (v21 != v23);
      }
      v39 = *(int64x2_t *)(v12 + 376);
    }
    *(_QWORD *)(v12 + 376) = v29;
    *(_QWORD *)(v12 + 384) = get_deleter;
    *(_QWORD *)(v12 + 392) = v30;
    v41 = (_QWORD *)v39.i64[1];
    v40 = (_QWORD *)v39.i64[0];
    v10 = v455;
    while (v41 != v40)
    {
      v44 = *--v41;
      v43 = v44;
      *v41 = 0;
      if (v44)
      {
        v45 = *(_QWORD **)(v43 + 56);
        if (v45)
        {
          v46 = *(_QWORD **)(v43 + 64);
          v42 = *(_QWORD *)(v43 + 56);
          if (v46 != v45)
          {
            do
            {
              v49 = *--v46;
              v48 = v49;
              *v46 = 0;
              if (v49)
              {
                {
                  v51 = operator new();
                  *(_QWORD *)(v51 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v51 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v51 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v51 = &off_1E42B5668;
                  *(_QWORD *)(v51 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v51 + 72) = 0u;
                  *(_OWORD *)(v51 + 88) = 0u;
                  *(_OWORD *)(v51 + 104) = 0u;
                  *(_OWORD *)(v51 + 120) = 0u;
                  *(_OWORD *)(v51 + 136) = 0u;
                  *(_OWORD *)(v51 + 152) = 0u;
                  *(_OWORD *)(v51 + 168) = 0u;
                  *(_OWORD *)(v51 + 184) = 0u;
                  *(_OWORD *)(v51 + 200) = 0u;
                  *(_OWORD *)(v51 + 216) = 0u;
                  *(_OWORD *)(v51 + 232) = 0u;
                  *(_QWORD *)(v51 + 248) = 0;
                  v503 = v51;
                  *(_OWORD *)(v51 + 56) = 0u;
                  v52 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v51 + 56), 0);
                  if ((_DWORD)v52)
                    geo::read_write_lock::logFailure(v52, (uint64_t)"initialization", v53);
                  v47 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v503 + 48) = v47;
                  malloc_set_zone_name(v47, "VectorKitLabels");
                  *(_QWORD *)(v503 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v503;
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v48, 80);
              }
            }
            while (v46 != v45);
            v42 = *(_QWORD *)(v43 + 56);
          }
          *(_QWORD *)(v43 + 64) = v45;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v43 + 80) + 40))(*(_QWORD *)(v43 + 80), v42, *(_QWORD *)(v43 + 72) - v42);
          v10 = v455;
        }
        MEMORY[0x1A1AF4E00](v43, 0x1020C4097AEC518);
      }
    }
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_QWORD *)v21 = v18;
    get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))(v21 + 8);
  }
  *(_QWORD *)(v12 + 384) = get_deleter;
  *(_QWORD *)v12 = &off_1E42924F0;
  v54 = (std::__shared_weak_count_vtbl **)operator new(8uLL);
  *v54 = (std::__shared_weak_count_vtbl *)v12;
  on_zero_shared = *(void (__cdecl **)(std::__shared_count *__hidden))(v12 + 376);
  v56 = *(_QWORD *)v10;
  v58 = *(char **)(*(_QWORD *)v10 + 152);
  v57 = *(char **)(*(_QWORD *)v10 + 160);
  __p = v54;
  if (v58 != v57)
  {
    v59 = v57 - v58 - 8;
    if (v59 >= 8)
    {
      v62 = 0;
      v63 = 0;
      v64 = (v59 >> 3) + 1;
      v61 = &v58[8 * (v64 & 0x3FFFFFFFFFFFFFFELL)];
      v65 = v58 + 8;
      v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v62 += *(_QWORD *)(*(v65 - 1) + 80);
        v63 += *(_QWORD *)(*v65 + 80);
        v65 += 2;
        v66 -= 2;
      }
      while (v66);
      v60 = v63 + v62;
      if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_54:
        v68 = *(_QWORD *)on_zero_shared;
        v69 = (_BYTE *)*((_QWORD *)v10 + 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v10 + 4) - (_QWORD)v69) >> 3) < v60)
        {
          if (v60 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_359;
          v10 = v455;
          v70 = (_BYTE *)*((_QWORD *)v455 + 3);
          v71 = (char *)operator new(24 * v60);
          v72 = &v71[24 * ((v70 - v69) / 24)];
          v73 = v72;
          if (v70 != v69)
          {
            v74 = &v71[24 * ((v70 - v69) / 24)];
            do
            {
              v73 = v74 - 24;
              v75 = *(_OWORD *)(v70 - 24);
              *((_QWORD *)v74 - 1) = *((_QWORD *)v70 - 1);
              *(_OWORD *)(v74 - 24) = v75;
              v70 -= 24;
              v74 -= 24;
            }
            while (v70 != v69);
          }
          *((_QWORD *)v455 + 2) = v73;
          *((_QWORD *)v455 + 3) = v72;
          *((_QWORD *)v455 + 4) = &v71[24 * v60];
          if (v69)
            operator delete(v69);
        }
        v76 = (_BYTE *)*((_QWORD *)v10 + 5);
        if (v60 <= (uint64_t)(*((_QWORD *)v10 + 7) - (_QWORD)v76) >> 3)
        {
LABEL_73:
          p_xIdx = *(QuadTile **)(*(_QWORD *)v10 + 152);
          v495 = v68 + 56;
          v496 = *(QuadTile **)(*(_QWORD *)v10 + 160);
          if (p_xIdx != v496)
          {
            v498 = 0;
            v91 = 0;
            v92 = 0;
            v93 = *(_QWORD *)(*(_QWORD *)&p_xIdx->_type + 56) - 1;
            while (1)
            {
              v94 = *(_QWORD **)&p_xIdx->_type;
              v504 = p_xIdx;
              v506 = v91;
              if (*(_QWORD *)(*(_QWORD *)&p_xIdx->_type + 56) - 1 != (int)v93)
              {
                altitude::RouteDrawRegion::append(v498, v91, v495);
                v92 = 0;
                v498 = v91;
              }
              v501 = v92;
              while (1)
              {
                v96 = v94[10];
                if (v96 <= v92)
                  break;
                v97 = v94[5];
                v98 = (v94[6] + ~v97) * v92 / (v96 - 1) + v97;
                v99 = (v94[6] + ~v97) * v92 / (v96 - 1) + v97;
                v100 = *(_QWORD *)(v56 + 80) + 24 * v99;
                v102 = (_QWORD *)*((_QWORD *)v10 + 3);
                v101 = *((_QWORD *)v10 + 4);
                if ((unint64_t)v102 >= v101)
                {
                  v105 = (_QWORD *)*((_QWORD *)v10 + 2);
                  v106 = 0xAAAAAAAAAAAAAAABLL * (v102 - v105) + 1;
                  if (v106 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_359;
                  v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (_QWORD)v105) >> 3);
                  if (2 * v107 > v106)
                    v106 = 2 * v107;
                  if (v107 >= 0x555555555555555)
                    v108 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v108 = v106;
                  if (v108)
                  {
                    if (v108 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_358;
                    v109 = (char *)operator new(24 * v108);
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v110 = *(_OWORD *)v100;
                  v111 = &v109[8 * (v102 - v105)];
                  *((_QWORD *)v111 + 2) = *(_QWORD *)(v100 + 16);
                  *(_OWORD *)v111 = v110;
                  v112 = v111;
                  if (v102 == v105)
                  {
                    v10 = v455;
                  }
                  else
                  {
                    v10 = v455;
                    do
                    {
                      v113 = *(_OWORD *)(v102 - 3);
                      *((_QWORD *)v112 - 1) = *(v102 - 1);
                      *(_OWORD *)(v112 - 24) = v113;
                      v112 -= 24;
                      v102 -= 3;
                    }
                    while (v102 != v105);
                    v102 = (_QWORD *)*((_QWORD *)v455 + 2);
                  }
                  v104 = v111 + 24;
                  *((_QWORD *)v10 + 2) = v112;
                  *((_QWORD *)v10 + 3) = v111 + 24;
                  *((_QWORD *)v10 + 4) = &v109[24 * v108];
                  if (v102)
                    operator delete(v102);
                }
                else
                {
                  v103 = *(_OWORD *)v100;
                  v102[2] = *(_QWORD *)(v100 + 16);
                  *(_OWORD *)v102 = v103;
                  v104 = v102 + 3;
                }
                *((_QWORD *)v10 + 3) = v104;
                *(float *)&v2 = *(double *)(*(_QWORD *)(v56 + 56) + 48 * v99 + 16);
                v115 = (char *)*((_QWORD *)v10 + 6);
                v114 = *((_QWORD *)v10 + 7);
                if ((unint64_t)v115 < v114)
                {
                  *(_DWORD *)v115 = v98;
                  *((_DWORD *)v115 + 1) = LODWORD(v2);
                  v95 = v115 + 8;
                  goto LABEL_80;
                }
                v116 = (char *)*((_QWORD *)v10 + 5);
                v117 = (v115 - v116) >> 3;
                v118 = v117 + 1;
                if ((unint64_t)(v117 + 1) >> 61)
                  goto LABEL_359;
                v119 = v114 - (_QWORD)v116;
                if (v119 >> 2 > v118)
                  v118 = v119 >> 2;
                if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
                  v120 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v120 = v118;
                if (v120)
                {
                  if (v120 >> 61)
                    goto LABEL_358;
                  v121 = operator new(8 * v120);
                }
                else
                {
                  v121 = 0;
                }
                v122 = &v121[8 * v117];
                *v122 = v98;
                v122[1] = LODWORD(v2);
                v10 = v455;
                if (v115 == v116)
                {
                  v116 = v115;
                  v124 = &v121[8 * v117];
                }
                else
                {
                  v123 = v115 - 8 - v116;
                  if (v123 < 0x58)
                  {
                    v124 = &v121[8 * v117];
                    do
                    {
LABEL_120:
                      v130 = *((_QWORD *)v115 - 1);
                      v115 -= 8;
                      *((_QWORD *)v124 - 1) = v130;
                      v124 -= 8;
                    }
                    while (v115 != v116);
                    v116 = (char *)*((_QWORD *)v455 + 5);
                    goto LABEL_122;
                  }
                  v124 = &v121[8 * v117];
                  if ((unint64_t)(v116 - v121) < 0x20)
                    goto LABEL_120;
                  v125 = (v123 >> 3) + 1;
                  v126 = &v121[8 * v117 - 16];
                  v127 = v115 - 16;
                  v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v129 = *(_OWORD *)v127;
                    *(v126 - 1) = *((_OWORD *)v127 - 1);
                    *v126 = v129;
                    v126 -= 2;
                    v127 -= 32;
                    v128 -= 4;
                  }
                  while (v128);
                  v124 = (char *)&v122[-2 * (v125 & 0x3FFFFFFFFFFFFFFCLL)];
                  v115 -= 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_120;
                }
LABEL_122:
                v131 = &v121[8 * v120];
                v95 = v122 + 2;
                *((_QWORD *)v455 + 5) = v124;
                *((_QWORD *)v455 + 6) = v122 + 2;
                *((_QWORD *)v455 + 7) = v131;
                if (v116)
                  operator delete(v116);
LABEL_80:
                *((_QWORD *)v10 + 6) = v95;
                ++v92;
              }
              v93 = v94[7];
              v91 = v506 - v501 + v96;
              p_xIdx = (QuadTile *)&v504->_xIdx;
              v92 = 1;
              if (&v504->_xIdx == (int *)v496)
                goto LABEL_125;
            }
          }
          v91 = 0;
          v498 = 0;
LABEL_125:
          altitude::RouteDrawRegion::append(v498, v91, v495);
          on_zero_shared = (*__p)[9].__on_zero_shared;
          get_deleter = (*__p)[9].__get_deleter;
          goto LABEL_126;
        }
        if (!(v60 >> 61))
        {
          v10 = v455;
          v77 = (_BYTE *)*((_QWORD *)v455 + 6);
          v78 = (char *)operator new(8 * v60);
          v79 = v77 - v76;
          v80 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
          v81 = v80;
          if (v77 == v76)
            goto LABEL_71;
          v82 = v77 - v76 - 8;
          if (v82 >= 0x58)
          {
            v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
            if ((unint64_t)(&v77[-(v79 & 0xFFFFFFFFFFFFFFF8)] - v78) >= 0x20)
            {
              v83 = v79 >> 3;
              v84 = (v82 >> 3) + 1;
              v85 = &v78[8 * v83 - 16];
              v86 = (__int128 *)(v77 - 16);
              v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v86;
                *((_OWORD *)v85 - 1) = *(v86 - 1);
                *(_OWORD *)v85 = v88;
                v85 -= 32;
                v86 -= 2;
                v87 -= 4;
              }
              while (v87);
              v81 = &v80[-8 * (v84 & 0x3FFFFFFFFFFFFFFCLL)];
              v77 -= 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_71:
                *((_QWORD *)v455 + 5) = v81;
                *((_QWORD *)v455 + 6) = v80;
                *((_QWORD *)v455 + 7) = &v78[8 * v60];
                if (v76)
                  operator delete(v76);
                goto LABEL_73;
              }
            }
          }
          else
          {
            v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
          }
          do
          {
            v89 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v81 - 1) = v89;
            v81 -= 8;
          }
          while (v77 != v76);
          goto LABEL_71;
        }
LABEL_359:
        abort();
      }
    }
    else
    {
      v60 = 0;
      v61 = *(char **)(*(_QWORD *)v10 + 152);
    }
    do
    {
      v67 = *(_QWORD *)v61;
      v61 += 8;
      v60 += *(_QWORD *)(v67 + 80);
    }
    while (v61 != v57);
    goto LABEL_54;
  }
LABEL_126:
  while ((char *)on_zero_shared != (char *)get_deleter)
  {
    v132 = *(uint64_t **)(*(_QWORD *)on_zero_shared + 56);
    v133 = *(uint64_t **)(*(_QWORD *)on_zero_shared + 64);
    if (v132 != v133)
    {
      v134 = *((_QWORD *)v10 + 5);
      v135 = *((_QWORD *)v10 + 2);
      do
      {
        *(_QWORD *)(*v132 + 72) = v134 + 8 * *(_QWORD *)(*v132 + 56);
        v136 = *v132++;
        *(_QWORD *)(v136 + 56) = v135 + 24 * *(_QWORD *)(v136 + 56);
      }
      while (v132 != v133);
    }
    on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))((char *)on_zero_shared + 8);
  }
  *(double *)&v137 = COERCE_DOUBLE(operator new());
  *(_QWORD *)v137 = &off_1E42AF4C8;
  *(_QWORD *)(v137 + 8) = 0;
  *(_QWORD *)(v137 + 16) = 0;
  *(_QWORD *)(v137 + 24) = 0;
  v138 = (std::__shared_weak_count *)operator new(8uLL);
  v139 = 0.0;
  v140 = 0;
  v141 = 0;
  v138->__vftable = *__p;
  *(_QWORD *)(v137 + 16) = &v138->__shared_owners_;
  *(_QWORD *)(v137 + 24) = &v138->__shared_owners_;
  *(_QWORD *)(v137 + 8) = v138;
  v505 = *(double *)&v137;
  *(_OWORD *)(v137 + 32) = 0u;
  v137 += 32;
  *(_QWORD *)(v137 + 48) = 0;
  *(_BYTE *)(v137 + 56) = 0;
  v497 = (QuadTile *)(v137 + 56);
  v499 = v138;
  *(_BYTE *)(v137 + 80) = 0;
  *(_OWORD *)(v137 + 16) = 0u;
  v490 = (uint64_t **)v137;
  *(_OWORD *)(v137 + 25) = 0u;
  p_shared_owners = (uint64_t *)v138;
  do
  {
    v502 = (std::__shared_weak_count *)p_shared_owners;
    v143 = (double *)*p_shared_owners;
    v143[1] = v505;
    v145 = (_QWORD **)*((_QWORD *)v143 + 47);
    v144 = (_QWORD **)*((_QWORD *)v143 + 48);
    v507 = v144;
    if (v145 != v144)
    {
      while (1)
      {
        v147 = *v145;
        v147[1] = **v145;
        v147[3] = v147[2];
        v147[5] = v147[4];
        v148 = (_QWORD **)v147[7];
        for (i = (_QWORD **)v147[8]; v148 != i; v147[5] = v150[5] + v147[5] - v150[4])
        {
          v150 = *v148++;
          v151 = v150[6];
          v152 = 10 * v151 - 12;
          v153 = v150[2] + 24 * v151;
          v150[1] = v152 + *v150;
          v150[3] = v153 - 30;
          v147[1] += v152;
          v147[3] = v150[3] + v147[3] - v150[2];
        }
        if (v140 >= v141)
          break;
        *(_QWORD *)v140 = v147;
        v146 = v140 + 8;
LABEL_138:
        ++v145;
        v140 = v146;
        if (v145 == v144)
          goto LABEL_134;
      }
      v154 = (int64_t)&v140[-*(_QWORD *)&v139];
      v155 = (uint64_t)&v140[-*(_QWORD *)&v139] >> 3;
      v156 = v155 + 1;
      if ((unint64_t)(v155 + 1) >> 61)
        goto LABEL_360;
      if ((uint64_t)&v141[-*(_QWORD *)&v139] >> 2 > v156)
        v156 = (uint64_t)&v141[-*(_QWORD *)&v139] >> 2;
      if ((unint64_t)&v141[-*(_QWORD *)&v139] >= 0x7FFFFFFFFFFFFFF8)
        v157 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v157 = v156;
      if (v157)
      {
        if (v157 >> 61)
          goto LABEL_358;
        v158 = v139;
        v159 = operator new(8 * v157);
        v139 = v158;
      }
      else
      {
        v159 = 0;
      }
      v160 = &v159[8 * v155];
      *v160 = v147;
      v146 = (char *)(v160 + 1);
      if (v140 != *(char **)&v139)
      {
        v161 = (unint64_t)&v140[-*(_QWORD *)&v139 - 8];
        if (v161 >= 0x168)
        {
          if (&v159[v154 - 8 - (v161 & 0xFFFFFFFFFFFFFFF8)] > &v159[v154 - 8])
          {
            v162 = v140;
          }
          else if (&v140[-(v161 & 0xFFFFFFFFFFFFFFF8) - 8] > v140 - 8)
          {
            v162 = v140;
          }
          else if ((unint64_t)(v140 - &v159[v154]) >= 0x20)
          {
            v164 = (v161 >> 3) + 1;
            v162 = &v140[-8 * (v164 & 0x3FFFFFFFFFFFFFFCLL)];
            v165 = &v159[8 * v155 - 16];
            v166 = v140 - 16;
            v167 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v168 = *(_OWORD *)v166;
              *(v165 - 1) = *((_OWORD *)v166 - 1);
              *v165 = v168;
              v165 -= 2;
              v166 -= 32;
              v167 -= 4;
            }
            while (v167);
            v160 -= v164 & 0x3FFFFFFFFFFFFFFCLL;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_156;
          }
          else
          {
            v162 = v140;
          }
        }
        else
        {
          v162 = v140;
        }
        do
        {
          v163 = *((_QWORD *)v162 - 1);
          v162 -= 8;
          *--v160 = v163;
        }
        while (v162 != *(char **)&v139);
      }
LABEL_156:
      v141 = &v159[8 * v157];
      if (v139 != 0.0)
        operator delete(*(void **)&v139);
      v139 = *(double *)&v160;
      v144 = v507;
      goto LABEL_138;
    }
LABEL_134:
    p_shared_owners = &v502->__shared_owners_;
  }
  while (v502 != v499);
  v169 = v505;
  if (*(_BYTE *)(*(_QWORD *)&v505 + 72))
  {
    v170 = v139;
    v171 = (gdc::GlobeTileGrid *)operator new();
    if (!*(_BYTE *)(*(_QWORD *)&v505 + 112))
    {
      v449 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
      _Unwind_Resume(v449);
    }
    v172 = v171;
    v173 = gdc::GlobeTileGrid::GlobeTileGrid(v171, v497);
    v174 = *(_QWORD *)(*(_QWORD *)&v505 + 80);
    *(_QWORD *)(*(_QWORD *)&v505 + 80) = v173;
    if (v174)
    {
      v175 = *(_QWORD *)(v174 + 2584);
      if (v175)
        MEMORY[0x1A1AF4DE8](v175, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v174, 0x1020C4007FF0C4BLL);
      v169 = v505;
      v172 = *(gdc::GlobeTileGrid **)(*(_QWORD *)&v505 + 80);
    }
    *((_QWORD *)v172 + 323) = operator new[]();
    gdc::GlobeTileGrid::endBuildingHeightRange(*(gdc::GlobeTileGrid **)(*(_QWORD *)&v169 + 80));
    v139 = v170;
  }
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = (uint64_t)&v140[-*(_QWORD *)&v139] >> 3;
  *(double *)&v494 = COERCE_DOUBLE(&v517);
  v181 = &off_1E42B5748;
  v493 = 257;
  v508 = v139;
  v492 = *(double *)&v180;
  v500 = 0.0;
  do
  {
    if (v177 == v180
      || (unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v139 + 8 * v177) + 8)
                          + v178
                          - **(_QWORD **)(*(_QWORD *)&v139 + 8 * v177)) >= 0x10000)
    {
      v182 = (char *)operator new(0xF8uLL);
      v183 = (std::__shared_count)0;
      v184 = (std::__shared_weak_count *)v182;
      *((_QWORD *)v182 + 1) = 0;
      v185 = (unint64_t *)(v182 + 8);
      *((_QWORD *)v182 + 2) = 0;
      *((_QWORD *)v182 + 3) = &off_1E42B5748;
      v497 = (QuadTile *)(v182 + 24);
      *(_QWORD *)v182 = &off_1E42DFC30;
      *((_QWORD *)v182 + 4) = 64;
      *((_DWORD *)v182 + 10) = 1;
      *((_QWORD *)v182 + 6) = 0;
      *((_QWORD *)v182 + 7) = 0;
      *((_QWORD *)v182 + 8) = 0;
      *((_QWORD *)v182 + 9) = v178 << 6;
      *((_OWORD *)v182 + 5) = 0u;
      *((_OWORD *)v182 + 6) = 0u;
      *((_QWORD *)v182 + 14) = 0;
      if ((v186 & 1) == 0)
      {
        v183 = (std::__shared_count)0;
        if (v253)
        {
          v254 = operator new();
          *(_QWORD *)(v254 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v254 + 24) = "GeoGL";
          *(_OWORD *)(v254 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v254 = &off_1E42B5668;
          *(_QWORD *)(v254 + 8) = "GeoGL";
          *(_OWORD *)(v254 + 72) = 0u;
          *(_OWORD *)(v254 + 88) = 0u;
          *(_OWORD *)(v254 + 104) = 0u;
          *(_OWORD *)(v254 + 120) = 0u;
          *(_OWORD *)(v254 + 136) = 0u;
          *(_OWORD *)(v254 + 152) = 0u;
          *(_OWORD *)(v254 + 168) = 0u;
          *(_OWORD *)(v254 + 184) = 0u;
          *(_OWORD *)(v254 + 200) = 0u;
          *(_OWORD *)(v254 + 216) = 0u;
          *(_OWORD *)(v254 + 232) = 0u;
          *(_QWORD *)(v254 + 248) = 0;
          *(_OWORD *)(v254 + 56) = 0u;
          v255 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v254 + 56), 0);
          if ((_DWORD)v255)
            geo::read_write_lock::logFailure(v255, (uint64_t)"initialization", v256);
          v257 = malloc_create_zone(0, 0);
          *(_QWORD *)(v254 + 48) = v257;
          malloc_set_zone_name(v257, "GeoGL");
          *(_QWORD *)(v254 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v254;
          v183 = (std::__shared_count)0;
        }
      }
      v184[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v184[5].__shared_owners_ = 0;
      *((std::__shared_count *)v184 + 11) = v183;
      v184[8].std::__shared_count = v183;
      v184[8].__shared_weak_owners_ = 0;
      v184[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      v184[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      *((std::__shared_count *)v184 + 10) = v183;
      LODWORD(v184[5].__shared_weak_owners_) = 0;
      v184[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7860;
      v184[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
      v184[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverRoute::defaultReflection;
      v502 = v184;
      v184[9].__shared_owners_ = (uint64_t)&unk_1E42B7880;
      v187 = (std::__shared_weak_count *)operator new(0xF8uLL);
      v188 = (std::__shared_count)0;
      v189 = v187;
      v187->__shared_owners_ = 0;
      v190 = (unint64_t *)&v187->__shared_owners_;
      v187->__shared_weak_owners_ = 0;
      v187[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
      v495 = (uint64_t)&v187[1];
      v187->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
      v187[1].__shared_owners_ = 2;
      LODWORD(v187[1].__shared_weak_owners_) = 257;
      v187[2].__vftable = 0;
      v187[2].__shared_owners_ = 0;
      v187[2].__shared_weak_owners_ = 0;
      v187[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v179);
      *(_OWORD *)&v187[3].__shared_owners_ = 0u;
      v187[4].std::__shared_count = 0u;
      v187[4].__shared_weak_owners_ = 0;
      if ((v191 & 1) == 0)
      {
        v188 = (std::__shared_count)0;
        if (v258)
        {
          v259 = operator new();
          *(_QWORD *)(v259 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v259 + 24) = "GeoGL";
          *(_OWORD *)(v259 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v259 = &off_1E42B5668;
          *(_QWORD *)(v259 + 8) = "GeoGL";
          *(_OWORD *)(v259 + 72) = 0u;
          *(_OWORD *)(v259 + 88) = 0u;
          *(_OWORD *)(v259 + 104) = 0u;
          *(_OWORD *)(v259 + 120) = 0u;
          *(_OWORD *)(v259 + 136) = 0u;
          *(_OWORD *)(v259 + 152) = 0u;
          *(_OWORD *)(v259 + 168) = 0u;
          *(_OWORD *)(v259 + 184) = 0u;
          *(_OWORD *)(v259 + 200) = 0u;
          *(_OWORD *)(v259 + 216) = 0u;
          *(_OWORD *)(v259 + 232) = 0u;
          *(_QWORD *)(v259 + 248) = 0;
          *(_OWORD *)(v259 + 56) = 0u;
          v260 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v259 + 56), 0);
          if ((_DWORD)v260)
            geo::read_write_lock::logFailure(v260, (uint64_t)"initialization", v261);
          v262 = malloc_create_zone(0, 0);
          *(_QWORD *)(v259 + 48) = v262;
          malloc_set_zone_name(v262, "GeoGL");
          *(_QWORD *)(v259 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v259;
          v188 = (std::__shared_count)0;
        }
      }
      v189[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
      v189[5].__shared_owners_ = 0;
      *((std::__shared_count *)v189 + 11) = v188;
      v189[8].std::__shared_count = v188;
      v189[8].__shared_weak_owners_ = 0;
      v189[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
      *((std::__shared_count *)v189 + 10) = v188;
      v189[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
      LODWORD(v189[5].__shared_weak_owners_) = 0;
      LODWORD(v189[10].__vftable) = 0;
      v189[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
      v189[1].__shared_owners_ = 2;
      v189[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
      v189[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
      v192 = operator new();
      do
        v193 = __ldxr(v185);
      while (__stxr(v193 + 1, v185));
      do
        v194 = __ldxr(v190);
      while (__stxr(v194 + 1, v190));
      if ((v195 & 1) == 0
      {
        if ((v263 & 1) == 0
        {
          ggl::MeshTyped<ggl::FlyoverRoute::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverRoute::defaultReflection;
        }
        ggl::MeshTyped<ggl::FlyoverRoute::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverRoute::Default>::attributesReflection(void)::r;
        *(_QWORD *)algn_1EE5761D0 = 1;
      }
      *(_QWORD *)(v192 + 32) = 0;
      *(_QWORD *)(v192 + 40) = 0;
      *(_DWORD *)(v192 + 48) = 0;
      *(_QWORD *)v192 = &off_1E42BBC08;
      *(_QWORD *)(v192 + 8) = "BatchType/Mesh";
      *(_QWORD *)(v192 + 16) = &unk_1E42BBC28;
      *(_QWORD *)(v192 + 24) = 0;
      *(_QWORD *)(v192 + 56) = &ggl::MeshTyped<ggl::FlyoverRoute::Default>::typedReflection(void)::r;
      *(_QWORD *)(v192 + 64) = 0;
      *(_QWORD *)(v192 + 72) = 0;
      *(_QWORD *)(v192 + 80) = 0;
      v197 = &unk_1ECE44000;
      if ((v196 & 1) == 0)
      {
        v197 = (_QWORD *)&unk_1ECE44000;
        if (v264)
        {
          v265 = operator new();
          *(_QWORD *)(v265 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v265 + 24) = "GeoGL";
          *(_OWORD *)(v265 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v265 = &off_1E42B5668;
          *(_QWORD *)(v265 + 8) = "GeoGL";
          *(_OWORD *)(v265 + 72) = 0u;
          *(_OWORD *)(v265 + 88) = 0u;
          *(_OWORD *)(v265 + 104) = 0u;
          *(_OWORD *)(v265 + 120) = 0u;
          *(_OWORD *)(v265 + 136) = 0u;
          *(_OWORD *)(v265 + 152) = 0u;
          *(_OWORD *)(v265 + 168) = 0u;
          *(_OWORD *)(v265 + 184) = 0u;
          *(_OWORD *)(v265 + 200) = 0u;
          *(_OWORD *)(v265 + 216) = 0u;
          *(_OWORD *)(v265 + 232) = 0u;
          *(_QWORD *)(v265 + 248) = 0;
          *(_OWORD *)(v265 + 56) = 0u;
          v266 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v265 + 56), 0);
          if ((_DWORD)v266)
            geo::read_write_lock::logFailure(v266, (uint64_t)"initialization", v267);
          v268 = malloc_create_zone(0, 0);
          *(_QWORD *)(v265 + 48) = v268;
          malloc_set_zone_name(v268, "GeoGL");
          *(_QWORD *)(v265 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v265;
          v197 = &unk_1ECE44000;
        }
      }
      v198 = v197[495];
      *(_QWORD *)(v192 + 120) = 0;
      *(_QWORD *)(v192 + 96) = 0;
      *(_QWORD *)(v192 + 104) = 0;
      *(_QWORD *)(v192 + 88) = v198;
      if ((v198 & 1) == 0)
      {
        v197 = (_QWORD *)&unk_1ECE44000;
        if (v269)
        {
          v270 = operator new();
          *(_QWORD *)(v270 + 16) = 0xA3D02C1100000005;
          *(_QWORD *)(v270 + 24) = "GeoGL";
          *(_OWORD *)(v270 + 32) = xmmword_19FFB2DE0;
          *(_QWORD *)v270 = &off_1E42B5668;
          *(_QWORD *)(v270 + 8) = "GeoGL";
          *(_OWORD *)(v270 + 72) = 0u;
          *(_OWORD *)(v270 + 88) = 0u;
          *(_OWORD *)(v270 + 104) = 0u;
          *(_OWORD *)(v270 + 120) = 0u;
          *(_OWORD *)(v270 + 136) = 0u;
          *(_OWORD *)(v270 + 152) = 0u;
          *(_OWORD *)(v270 + 168) = 0u;
          *(_OWORD *)(v270 + 184) = 0u;
          *(_OWORD *)(v270 + 200) = 0u;
          *(_OWORD *)(v270 + 216) = 0u;
          *(_OWORD *)(v270 + 232) = 0u;
          *(_QWORD *)(v270 + 248) = 0;
          *(_OWORD *)(v270 + 56) = 0u;
          v271 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v270 + 56), 0);
          if ((_DWORD)v271)
            geo::read_write_lock::logFailure(v271, (uint64_t)"initialization", v272);
          v273 = malloc_create_zone(0, 0);
          *(_QWORD *)(v270 + 48) = v273;
          malloc_set_zone_name(v273, "GeoGL");
          *(_QWORD *)(v270 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          ggl::Allocator::instance(void)::alloc = v270;
          v197 = &unk_1ECE44000;
        }
      }
      *(_QWORD *)(v192 + 128) = v197[495];
      *(_QWORD *)(v192 + 136) = 0;
      *(_QWORD *)(v192 + 112) = v192 + 120;
      *(_QWORD *)v192 = &off_1E42BD4F8;
      *(_QWORD *)(v192 + 16) = &unk_1E42BD518;
      v515 = v497;
      v516 = v502;
      do
        v199 = __ldxr(v185);
      while (__stxr(v199 + 1, v185));
      std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v192 + 64, (uint64_t *)&v515, &v517, 1uLL);
      v200 = v516;
      v139 = v508;
      if (v516)
      {
        v201 = (unint64_t *)&v516->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
          v139 = v508;
        }
      }
      do
        v203 = __ldxr(v190);
      while (__stxr(v203 + 1, v190));
      v204 = *(std::__shared_weak_count **)(v192 + 104);
      *(double *)(v192 + 96) = *(double *)&v495;
      *(_QWORD *)(v192 + 104) = v189;
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
          v139 = v508;
        }
      }
      *(_QWORD *)v192 = &off_1E42B61C0;
      *(_QWORD *)(v192 + 16) = &unk_1E42B61E0;
      do
        v207 = __ldaxr(v190);
      while (__stlxr(v207 - 1, v190));
      v208 = v505;
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
        v139 = v508;
      }
      do
        v209 = __ldaxr(v185);
      while (__stlxr(v209 - 1, v185));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
        v139 = v508;
      }
      v211 = *(uint64_t **)(*(_QWORD *)&v505 + 40);
      v210 = *(_QWORD *)(*(_QWORD *)&v505 + 48);
      if ((unint64_t)v211 >= v210)
      {
        v213 = *v490;
        v214 = (char *)v211 - (char *)*v490;
        v215 = v214 >> 3;
        v216 = (v214 >> 3) + 1;
        if (v216 >> 61)
          goto LABEL_360;
        v217 = v210 - (_QWORD)v213;
        if (v217 >> 2 > v216)
          v216 = v217 >> 2;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          *(double *)&v216 = 1.49166815e-154;
        v497 = (QuadTile *)v216;
        if (*(double *)&v216 == 0.0)
        {
          v218 = 0;
        }
        else
        {
          if (v216 >> 61)
            goto LABEL_358;
          v218 = operator new(8 * v216);
          v139 = v508;
        }
        v219 = (uint64_t *)&v218[8 * v215];
        *v219 = v192;
        v212 = v219 + 1;
        if (v211 == v213)
        {
          v213 = v211;
        }
        else
        {
          v220 = (char *)(v211 - 1) - (char *)v213;
          if (v220 < 0x58)
            goto LABEL_373;
          if ((unint64_t)((char *)v211 - &v218[v214]) < 0x20)
            goto LABEL_373;
          v221 = (v220 >> 3) + 1;
          v222 = &v218[8 * v215 - 16];
          v223 = v211 - 2;
          v224 = v221 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v225 = *(_OWORD *)v223;
            *(v222 - 1) = *((_OWORD *)v223 - 1);
            *v222 = v225;
            v222 -= 2;
            v223 -= 4;
            v224 -= 4;
          }
          while (v224);
          v219 -= v221 & 0x3FFFFFFFFFFFFFFCLL;
          v211 -= v221 & 0x3FFFFFFFFFFFFFFCLL;
          if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_373:
            do
            {
              v226 = *--v211;
              *--v219 = v226;
            }
            while (v211 != v213);
            v213 = *v490;
          }
        }
        *(_QWORD *)(*(_QWORD *)&v505 + 32) = v219;
        *(_QWORD *)(*(_QWORD *)&v505 + 40) = v212;
        *(_QWORD *)(*(_QWORD *)&v505 + 48) = &v218[8 * (_QWORD)v497];
        if (v213)
        {
          v227 = v213;
          v228 = v212;
          operator delete(v227);
          v212 = v228;
          v139 = v508;
        }
        v208 = v505;
      }
      else
      {
        *v211 = v192;
        v212 = v211 + 1;
      }
      *(double *)&v180 = v492;
      *(_QWORD *)(*(_QWORD *)&v208 + 40) = v212;
      if (v176 < v177)
      {
        v229 = 0;
        v230 = v176;
        do
        {
          v231 = *(_QWORD *)(*(_QWORD *)&v139 + 8 * v230);
          v232 = *(_QWORD *)(v231 + 32);
          v233 = v232 + v229;
          v234 = *(_QWORD *)(v231 + 40) + v229;
          *(_QWORD *)(v231 + 32) = v233;
          *(_QWORD *)(v231 + 40) = v234;
          v229 = v234 - v232;
          ++v230;
        }
        while (v177 != v230);
        v235 = 0;
        do
        {
          v236 = *(uint64_t **)(*(_QWORD *)&v139 + 8 * v176);
          v237 = *v236;
          v238 = *v236 + v235;
          v239 = v236[1] + v235;
          *v236 = v238;
          v236[1] = v239;
          v240 = v236[2];
          v241 = v240 + v229;
          v242 = v236[3] + v229;
          v236[2] = v241;
          v236[3] = v242;
          v236[11] = v192;
          v243 = (_QWORD **)v236[7];
          v244 = (_QWORD **)v236[8];
          if (v243 != v244)
          {
            v245 = v236[4];
            do
            {
              v246 = *v243++;
              v247 = v246[1] - *v246;
              *v246 = v238;
              v238 += v247;
              v248 = v246[3] - v246[2];
              v246[1] = v238;
              v246[2] = v241;
              v241 += v248;
              v249 = v246[5] - v246[4];
              v246[3] = v241;
              v246[4] = v245;
              v245 += v249;
              v246[5] = v245;
            }
            while (v243 != v244);
          }
          v235 = v239 - v237;
          v229 = v242 - v240;
          ++v176;
        }
        while (v176 != v177);
      }
      do
        v250 = __ldaxr(v190);
      while (__stlxr(v250 - 1, v190));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
        v139 = v508;
      }
      v181 = &off_1E42B5748;
      do
        v251 = __ldaxr(v185);
      while (__stlxr(v251 - 1, v185));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
        std::__shared_weak_count::__release_weak(v502);
        v139 = v508;
      }
      v179 = 0;
      v178 = 0;
      v176 = v177;
    }
    if (v177 < v180)
    {
      v252 = *(_QWORD **)(*(_QWORD *)&v139 + 8 * v177);
      v178 = v252[1] + v178 - *v252;
      v179 = v252[3] + v179 + v252[5] - (v252[2] + v252[4]);
    }
    ++v177;
  }
  while (v177 <= v180);
  if (v139 != 0.0)
    operator delete(*(void **)&v139);
  v274 = v505;
  **(_QWORD **)&v505 = &off_1E4292510;
  *(_OWORD *)(*(_QWORD *)&v505 + 128) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 144) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 160) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 176) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 192) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 208) = 0u;
  *(_OWORD *)(*(_QWORD *)&v505 + 224) = 0u;
  *(_QWORD *)(*(_QWORD *)&v505 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)&v505 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)&v505 + 200) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)&v505 + 240) = 0x3FF0000000000000;
  v275 = *(uint64_t **)(*(_QWORD *)&v505 + 8);
  v276 = *(uint64_t **)(*(_QWORD *)&v505 + 16);
  v277 = v455;
  for (j = a2; v275 != v276; *(double *)(v279 + 8) = v505)
    v279 = *v275++;
  v280 = *((_QWORD *)v455 + 8);
  *((double *)v455 + 8) = v505;
  if (v280)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
    v274 = *((double *)v455 + 8);
  }
  *(_QWORD *)(*(_QWORD *)&v274 + 56) = *((_QWORD *)v455 + 11);
  v281 = *((unsigned __int8 *)v455 + 104);
  if (!*((_BYTE *)v455 + 104))
    *(_QWORD *)(*((_QWORD *)v455 + 8) + 64) = *((_QWORD *)v455 + 12);
  v282 = *(_QWORD *)v455;
  v283 = *((_QWORD *)v455 + 8);
  *(_QWORD *)(v283 + 216) = *(_QWORD *)(*(_QWORD *)v455 + 128);
  *(_QWORD *)(v283 + 224) = *(_QWORD *)(v282 + 136);
  *(_QWORD *)(v283 + 232) = *(_QWORD *)(v282 + 144);
  v284 = *(uint64_t **)(v283 + 8);
  v451 = *(uint64_t **)(v283 + 16);
  if (v284 != v451)
  {
    do
    {
      v452 = v284;
      v285 = *v284;
      v287 = *(uint64_t ***)(*v284 + 376);
      v286 = *(uint64_t ***)(v285 + 384);
      v454 = v286;
      while (v287 != v286)
      {
        v462 = v287;
        v288 = *v287;
        v289 = **(_QWORD **)((*v287)[11] + 64);
        v290 = **v287;
        v291 = (*v287)[1];
        v292 = *(_QWORD *)(v289 + 8);
        v460 = v292 * v290;
        v461 = v289;
        v459 = v292 * v291;
        if (v292 * v291 == v292 * v290)
        {
          v464 = 0;
        }
        else if (j && *(_BYTE *)(v289 + 17) != 2)
        {
          v464 = (*((uint64_t (**)(ResourceAccessor *))j->var0 + 7))(j);
        }
        else
        {
          v464 = *(_QWORD *)(v289 + 72) + v292 * v290;
        }
        v293 = v288[2];
        v295 = v288[4];
        v294 = v288[5];
        if (v294 == v295)
        {
          v294 = v288[3];
        }
        else
        {
          if (v295 < v293)
            v293 = v288[4];
          if (v288[3] > v294)
            v294 = v288[3];
        }
        v296 = *(_QWORD *)(v288[11] + 96);
        v297 = *(_QWORD *)(v296 + 8);
        v457 = v297 * v293;
        v458 = v296;
        v456 = v297 * v294;
        if (v297 * v294 == v297 * v293)
        {
          v463 = 0;
        }
        else if (j && *(_BYTE *)(v296 + 17) != 2)
        {
          v463 = (*((uint64_t (**)(ResourceAccessor *))j->var0 + 7))(j);
        }
        else
        {
          v463 = *(_QWORD *)(v296 + 72) + v297 * v293;
        }
        v298 = (_QWORD **)v288[7];
        v465 = (_QWORD **)v288[8];
        if (v298 != v465)
        {
          v299 = v464;
          v300 = v463 + 2 * v288[2] - 2 * v293;
          while (1)
          {
            v466 = v298;
            v301 = *v298;
            v531 = 0uLL;
            v548 = 0uLL;
            v514 = 0uLL;
            v511 = 0uLL;
            v302 = v301[6];
            v491 = v302 - 1;
            if (v302 != 1)
              break;
LABEL_305:
            v298 = v466 + 1;
            v299 += ((*v466)[1] - **v466) << 6;
            v300 += 2 * ((*v466)[3] - (*v466)[2]);
            if (v466 + 1 == v465)
              goto LABEL_344;
          }
          v303 = 0;
          v304 = 0;
          v305 = 0;
          v489 = v302 - 2;
          while (2)
          {
            v336 = v305 == 0;
            if (v489 == v305)
              v336 |= 2u;
            v549 = v336;
            md::Ribbons::PolylineSegment::calculate((uint64_t)&v515, (uint64_t)v301, v305);
            if (v305)
            {
              v338 = v538.f64[0];
              v340 = v521.f64[1];
              v339 = v521.f64[0];
              v341 = 0.5;
              v342 = 2.0;
              v343 = 1.0;
              if (vabdd_f64(v521.f64[0], v538.f64[0]) >= 1.0e-10)
              {
                v345 = v522;
                v344 = v538.f64[1];
                v346 = v539;
              }
              else
              {
                v344 = v538.f64[1];
                v345 = v522;
                v346 = v539;
                if (vabdd_f64(v521.f64[1], v538.f64[1]) < 1.0e-10 && vabdd_f64(v522, v539) < 1.0e-10)
                {
                  v530 = v513;
                  v531 = v514;
                  v529 = v512;
                  v547 = v510;
                  v548 = v511;
                  v546 = v509;
                  v515 = (QuadTile *)v488;
                  v516 = v487;
                  v517 = v486;
                  v518 = v485;
                  v519 = v484;
                  v520 = v483;
                  v521.f64[0] = v3;
                  v521.f64[1] = v4;
                  v347 = v492;
                  v522 = v492;
                  v349 = *(double *)&v502;
                  v348 = v505;
                  v523 = v505;
                  v524 = v502;
                  v350 = v500;
                  v525 = v500;
                  v526 = v482;
                  v527 = v481;
                  v528 = v480;
                  v532 = v6;
                  v533 = v2;
                  v534 = v497;
                  v351 = *(double *)&v495;
                  v535 = *(double *)&v495;
                  v536 = v494;
                  v537 = *(double *)&v493;
                  v538.f64[0] = v8;
                  v538.f64[1] = v476;
                  v539 = v508;
                  v540 = v9;
                  v541 = v5;
                  v542 = v7;
                  v543 = v479;
                  v544 = v478;
                  v545 = v477;
                  v549 = (int)v181;
                  v550 = v475;
                  v551 = v474;
                  v552 = v473;
                  v553 = v472;
                  v554 = v471;
                  v555 = v469;
                  v556 = v468;
                  v557 = v467;
                  v338 = v8;
                  v352 = *(double *)&v497;
                  v340 = v4;
                  v353 = v2;
                  v354 = *(double *)&v494;
                  v339 = v3;
                  v355 = v6;
                  v356 = *(double *)&v493;
                  v558 = v470;
                  goto LABEL_327;
                }
              }
              v487 = v516;
              v488 = (uint64_t)v515;
              v485 = v518;
              v486 = v517;
              v483 = v520;
              v484 = v519;
              v348 = v523;
              v349 = *(double *)&v524;
              v350 = v525;
              v481 = v527;
              v482 = v526;
              v480 = v528;
              v512 = v529;
              v513 = v530;
              v514 = v531;
              v355 = v532;
              v353 = v533;
              v352 = *(double *)&v534;
              v351 = v535;
              v354 = *(double *)&v536;
              v356 = v537;
              v9 = v540;
              v5 = v541;
              v7 = v542;
              v479 = v543;
              v478 = v544;
              v476 = v344;
              v477 = v545;
              v511 = v548;
              v509 = v546;
              v510 = v547;
              LODWORD(v181) = v549;
              v475 = v550;
              v474 = v551;
              v473 = v552;
              v508 = v346;
              v347 = v345;
              v471 = v554;
              v472 = v553;
              v468 = v556;
              v469 = v555;
              v467 = v557;
              v470 = v558;
            }
            else
            {
              v487 = v516;
              v488 = (uint64_t)v515;
              v485 = v518;
              v486 = v517;
              v483 = v520;
              v484 = v519;
              v340 = v521.f64[1];
              v339 = v521.f64[0];
              v347 = v522;
              v348 = v523;
              v349 = *(double *)&v524;
              v350 = v525;
              v481 = v527;
              v482 = v526;
              v513 = v530;
              v514 = v531;
              v512 = v529;
              v355 = v532;
              v353 = v533;
              v352 = *(double *)&v534;
              v351 = v535;
              v354 = *(double *)&v536;
              v356 = v537;
              v338 = v538.f64[0];
              v508 = v539;
              v9 = v540;
              v5 = v541;
              v7 = v542;
              v479 = v543;
              v480 = v528;
              v478 = v544;
              v476 = v538.f64[1];
              v477 = v545;
              v510 = v547;
              v511 = v548;
              v337.i64[1] = *((_QWORD *)&v546 + 1);
              v509 = v546;
              LODWORD(v181) = v549;
              v474 = v551;
              v475 = v550;
              v472 = v553;
              v473 = v552;
              v468 = v556;
              v469 = v555;
              v467 = v557;
              v470 = v558;
              v471 = v554;
              v341 = 0.5;
              v342 = 2.0;
              v343 = 1.0;
            }
LABEL_327:
            v357 = *v301;
            v505 = v348;
            if ((v181 & 1) != 0)
            {
              v358 = (_WORD *)(v300 + 2 * v303);
              *v358 = v304 + v357;
              v358[1] = v304 + v357 + 1;
              v358[2] = v304 + v357 + 2;
              v358[3] = v304 + v357 + 1;
              v358[4] = v304 + v357 + 3;
              v358[5] = v304 + v357 + 2;
              v359 = v528;
              v360 = *(double *)&v529;
              if (v360 <= v342)
                v361 = v360 * v341;
              else
                v361 = v343;
              v362 = v526;
              v363 = v527;
              v364 = *(_DWORD *)(v301[9] + 8 * *((_QWORD *)&v531 + 1) + 4);
              v365 = v347 - *(double *)(v283 + 232);
              v366 = (float32x2_t *)(v299 + (v304 << 6));
              v367 = vcvt_f32_f64(vsubq_f64(v521, *(float64x2_t *)(v283 + 216)));
              *v366 = v367;
              v366[1].f32[0] = v365;
              v368 = v362;
              v369 = v363;
              v370 = v359;
              v366[4].f32[0] = v368;
              v366[4].f32[1] = v369;
              v366[5].f32[0] = v370;
              v366[5].f32[1] = -v361;
              v371 = v348;
              v372 = v349;
              v373 = v350;
              v366[2].f32[0] = v371;
              v366[2].f32[1] = v372;
              v366[3].f32[0] = v373;
              v366[7].i32[0] = v364;
              v366[8] = v367;
              v366[9].f32[0] = v365;
              v366[12].f32[0] = v368;
              v366[12].f32[1] = v369;
              v366[13].f32[0] = v370;
              v366[13].f32[1] = v361;
              v366[10].f32[0] = v371;
              v366[10].f32[1] = v372;
              v366[11].f32[0] = v373;
              v366[15].i32[0] = v364;
              v366[6] = 0;
              v366[14] = (float32x2_t)1065353216;
              LOWORD(v366) = v304 + 2 + v357;
              v358[6] = (_WORD)v366;
              v358[7] = (_WORD)v366 + 1;
              v358[8] = (_WORD)v366 + 2;
              v358[9] = (_WORD)v366 + 1;
              v358[10] = (_WORD)v366 + 3;
              v303 += 12;
              v358[11] = (_WORD)v366 + 2;
              v374 = v528;
              v375 = *(double *)&v529;
              if (v375 <= v342)
                v376 = v375 * v341;
              else
                v376 = v343;
              v377 = v526;
              v378 = v527;
              v379 = *(_DWORD *)(v301[9] + 8 * *((_QWORD *)&v531 + 1) + 4);
              v380 = v347 - *(double *)(v283 + 232);
              v381 = (float32x2_t *)(v299 + ((v304 + 2) << 6));
              v382 = vcvt_f32_f64(vsubq_f64(v521, *(float64x2_t *)(v283 + 216)));
              *v381 = v382;
              v381[1].f32[0] = v380;
              *(float *)&v377 = v377;
              *(float *)&v378 = v378;
              v383 = v374;
              v381[4].i32[0] = LODWORD(v377);
              v381[4].i32[1] = LODWORD(v378);
              v381[5].f32[0] = v383;
              v381[5].f32[1] = -v376;
              v381[2].f32[0] = v371;
              v381[2].f32[1] = v372;
              v381[3].f32[0] = v373;
              v381[6] = (float32x2_t)0x3F00000000000000;
              v381[7].i32[0] = v379;
              v381[8] = v382;
              v381[9].f32[0] = v380;
              v381[12].i32[0] = LODWORD(v377);
              v381[12].i32[1] = LODWORD(v378);
              v381[13].f32[0] = v383;
              v381[13].f32[1] = v376;
              v381[10].f32[0] = v371;
              v381[10].f32[1] = v372;
              v381[11].f32[0] = v373;
              v381[14] = (float32x2_t)0x3F0000003F800000;
              v304 += 4;
              v381[15].i32[0] = v379;
            }
            v384 = v304 + v357;
            v385 = (int8x16_t *)(v300 + 2 * v303);
            v385->i16[0] = v384;
            v385->i16[1] = v384 + 1;
            v386 = v384 + 2;
            v387 = v303 + 3;
            v385->i16[2] = v384 + 2;
            v388 = v303 + 4;
            v389 = v384 + 3;
            v390 = v303 + 5;
            *(double *)&v502 = v349;
            *(double *)&v497 = v352;
            v500 = v350;
            *(double *)&v494 = v354;
            *(double *)&v495 = v351;
            v492 = v347;
            *(double *)&v493 = v356;
            if ((v181 & 2) != 0)
            {
              v2 = v353;
              v6 = v355;
              *(_WORD *)(v300 + 2 * v387) = v384 + 1;
              *(_WORD *)(v300 + 2 * v388) = v389;
              *(_WORD *)(v300 + 2 * v390) = v386;
              v303 += 6;
              v306 = v545;
              v307 = *(double *)&v546;
              if (v307 <= v342)
                v308 = v307 * v341;
              else
                v308 = v343;
              v309 = v543;
              v310 = v544;
              v311 = *(_DWORD *)(v301[9] + 8 * *((_QWORD *)&v548 + 1) + 4);
              v312 = v508 - *(double *)(v283 + 232);
              v313 = (float32x2_t *)(v299 + (v304 << 6));
              v314 = vcvt_f32_f64(vsubq_f64(v538, *(float64x2_t *)(v283 + 216)));
              *v313 = v314;
              v313[1].f32[0] = v312;
              *(float *)&v309 = v309;
              *(float *)&v310 = v310;
              v315 = v306;
              v313[4].i32[0] = LODWORD(v309);
              v313[4].i32[1] = LODWORD(v310);
              v313[5].f32[0] = v315;
              v313[5].f32[1] = -v308;
              v316 = v9;
              v317 = v5;
              v318 = v7;
              v313[2].f32[0] = v316;
              v313[2].f32[1] = v317;
              v313[3].f32[0] = v318;
              v313[6] = (float32x2_t)0x3F00000000000000;
              v313[7].i32[0] = v311;
              v313[8] = v314;
              v313[9].f32[0] = v312;
              v313[12].i32[0] = LODWORD(v309);
              v313[12].i32[1] = LODWORD(v310);
              v313[13].f32[0] = v315;
              v313[13].f32[1] = v308;
              v313[10].f32[0] = v316;
              v313[10].f32[1] = v317;
              v313[11].f32[0] = v318;
              v313[14] = (float32x2_t)0x3F0000003F800000;
              v304 += 2;
              v313[15].i32[0] = v311;
            }
            else
            {
              *(_WORD *)(v300 + 2 * v387) = v386;
              *(_WORD *)(v300 + 2 * v388) = v389;
              *(_WORD *)(v300 + 2 * v390) = v384 + 5;
              v385->i16[6] = v389;
              v385->i16[7] = v384 + 4;
              v385[1].i16[0] = v384 + 5;
              v385[1].i16[1] = v384 + 5;
              v385[1].i16[2] = v384 + 6;
              v385[1].i16[3] = v384 + 7;
              v385[1].i16[4] = v386;
              v385[1].i16[5] = v384 + 5;
              v385[1].i16[6] = v384 + 7;
              v385[1].i16[7] = v386;
              *(int16x4_t *)v337.i8 = vadd_s16(vdup_n_s16(v384), (int16x4_t)0xB000A00080009);
              v385[2] = vqtbl1q_s8(v337, (int8x16_t)xmmword_19FFB3540);
              v391 = v545;
              v392 = *(double *)&v546;
              if (v392 <= v342)
                v393 = v392 * v341;
              else
                v393 = v343;
              v394 = v543;
              v395 = v544;
              v396 = -(v354 * v7 - v356 * v5);
              v397 = -(v9 * v356 - v351 * v7);
              v398 = -(v351 * v5 - v9 * v354);
              v399 = -(v353 * v7 - v352 * v5);
              v400 = -(v352 * v9 - v355 * v7);
              v401 = -(v355 * v5 - v353 * v9);
              v402 = *(_DWORD *)(v301[9] + 8 * *((_QWORD *)&v548 + 1) + 4);
              v403 = *(double *)&v547;
              v404 = vcvt_f32_f64(vsubq_f64(v538, *(float64x2_t *)(v283 + 216)));
              v405 = v508 - *(double *)(v283 + 232);
              v406 = v299 + (v304 << 6);
              *(float32x2_t *)v406 = v404;
              *(float *)(v406 + 8) = v405;
              v407 = v394;
              if (v403 <= 0.0)
              {
                v425 = v396;
                v426 = v397;
                *(float *)(v406 + 32) = v425;
                *(float *)(v406 + 36) = v426;
                v427 = v398;
                *(float *)(v406 + 40) = v427;
                v408 = v395;
                v411 = v9;
                v412 = v5;
                *(float *)(v406 + 16) = v411;
                *(float *)(v406 + 20) = v412;
                v409 = v391;
                v413 = v7;
                *(float *)(v406 + 24) = v413;
                *(_DWORD *)(v406 + 52) = 1056964608;
                *(_QWORD *)(v406 + 44) = 3204448256;
                *(_DWORD *)(v406 + 56) = v402;
                *(float32x2_t *)(v406 + 64) = v404;
                *(float *)(v406 + 72) = v405;
                *(float *)(v406 + 96) = v407;
                *(float *)(v406 + 100) = v408;
                *(float *)(v406 + 104) = v409;
                *(float *)(v406 + 108) = v393;
                *(float *)(v406 + 80) = v411;
                *(float *)(v406 + 84) = v412;
                *(float *)(v406 + 88) = v413;
                *(_QWORD *)(v406 + 112) = 0x3F0000003F800000;
                *(_DWORD *)(v406 + 120) = v402;
                *(float32x2_t *)(v406 + 512) = v404;
                *(float *)(v406 + 520) = v405;
                v428 = v399;
                v429 = v400;
                v430 = v401;
                *(float *)(v406 + 544) = v428;
                *(float *)(v406 + 548) = v429;
                *(float *)(v406 + 552) = v430;
                *(float *)(v406 + 528) = v411;
                *(float *)(v406 + 532) = v412;
                *(float *)(v406 + 536) = v413;
                *(_QWORD *)(v406 + 556) = 3204448256;
                *(_DWORD *)(v406 + 564) = 1056964608;
                *(_DWORD *)(v406 + 568) = v402;
                v417 = v304 + 9;
                v431 = (float32x2_t *)(v299 + ((v304 + 9) << 6));
                *v431 = v404;
                v431[1].f32[0] = v405;
                v431[2].f32[0] = v411;
                v431[2].f32[1] = v412;
                v431[3].f32[0] = v413;
                v431[4].f32[0] = v407;
                v431[4].f32[1] = v408;
                v422 = 1.0;
                v431[5].f32[0] = v409;
                v431[5].f32[1] = v393;
                v423 = 0.0;
                v424 = -0.5;
                v431[6].i32[0] = 1065353216;
              }
              else
              {
                v408 = v395;
                v409 = v391;
                *(float *)(v406 + 32) = v407;
                *(float *)(v406 + 36) = v408;
                v410 = -v393;
                *(float *)(v406 + 40) = v409;
                *(float *)(v406 + 44) = v410;
                v411 = v9;
                v412 = v5;
                v413 = v7;
                *(float *)(v406 + 16) = v411;
                *(float *)(v406 + 20) = v412;
                *(float *)(v406 + 24) = v413;
                *(_QWORD *)(v406 + 48) = 0x3F00000000000000;
                *(_DWORD *)(v406 + 56) = v402;
                *(float32x2_t *)(v406 + 64) = v404;
                *(float *)(v406 + 72) = v405;
                v414 = v396;
                v415 = v397;
                v416 = v398;
                *(float *)(v406 + 96) = v414;
                *(float *)(v406 + 100) = v415;
                *(float *)(v406 + 104) = v416;
                *(float *)(v406 + 80) = v411;
                *(float *)(v406 + 84) = v412;
                *(float *)(v406 + 88) = v413;
                *(_DWORD *)(v406 + 116) = 1056964608;
                *(_QWORD *)(v406 + 108) = 0x3F8000003F000000;
                *(_DWORD *)(v406 + 120) = v402;
                *(float32x2_t *)(v406 + 512) = v404;
                *(float *)(v406 + 520) = v405;
                *(float *)(v406 + 528) = v411;
                *(float *)(v406 + 532) = v412;
                *(float *)(v406 + 536) = v413;
                *(float *)(v406 + 544) = v407;
                *(float *)(v406 + 548) = v408;
                *(float *)(v406 + 552) = v409;
                *(float *)(v406 + 556) = v410;
                *(_QWORD *)(v406 + 560) = 0x3F00000000000000;
                *(_DWORD *)(v406 + 568) = v402;
                v417 = v304 + 9;
                v418 = v299 + ((v304 + 9) << 6);
                *(float32x2_t *)v418 = v404;
                *(float *)(v418 + 8) = v405;
                v419 = v399;
                v420 = v400;
                v421 = v401;
                *(float *)(v418 + 32) = v419;
                *(float *)(v418 + 36) = v420;
                *(float *)(v418 + 40) = v421;
                *(float *)(v418 + 16) = v411;
                *(float *)(v418 + 20) = v412;
                *(float *)(v418 + 24) = v413;
                v422 = 0.0;
                v423 = 1.0;
                v424 = 0.5;
                *(_QWORD *)(v418 + 44) = 0x3F8000003F000000;
              }
              v2 = v353;
              v6 = v355;
              v432 = v299 + (v417 << 6);
              *(_DWORD *)(v432 + 52) = 1056964608;
              *(_DWORD *)(v432 + 56) = v402;
              v433 = v299 + (v304 << 6);
              *(float32x2_t *)(v433 + 128) = v404;
              *(float *)(v433 + 136) = v405;
              v303 += 24;
              v434 = v424;
              *(float *)(v433 + 160) = v407;
              *(float *)(v433 + 164) = v408;
              *(float *)(v433 + 168) = v409;
              *(float *)(v433 + 144) = v411;
              *(float *)(v433 + 148) = v412;
              *(float *)(v433 + 152) = v413;
              *(_QWORD *)(v433 + 172) = 0x3F00000000000000;
              *(_DWORD *)(v433 + 180) = 1056964608;
              *(_DWORD *)(v433 + 184) = v402;
              *(float32x2_t *)(v433 + 192) = v404;
              *(float *)(v433 + 200) = v405;
              v435 = *((double *)&v546 + 1);
              v436 = *((double *)&v546 + 1) * v434;
              *(float *)(v433 + 224) = v407;
              *(float *)(v433 + 228) = v408;
              *(float *)(v433 + 232) = v409;
              *(float *)(v433 + 236) = v436;
              *(float *)(v433 + 208) = v411;
              *(float *)(v433 + 212) = v412;
              *(float *)(v433 + 216) = v413;
              v437 = v422 + v424 * (v435 + 1.0);
              v438 = v403 * 0.5;
              v439 = 0.5 - v438;
              *(float *)(v433 + 240) = v437;
              *(float *)(v433 + 244) = v439;
              *(_DWORD *)(v433 + 248) = v402;
              *(float32x2_t *)(v433 + 256) = v404;
              *(float *)(v433 + 264) = v405;
              *(float *)(v433 + 288) = v407;
              *(float *)(v433 + 292) = v408;
              *(float *)(v433 + 296) = v409;
              *(float *)(v433 + 300) = v434;
              *(float *)(v433 + 272) = v411;
              *(float *)(v433 + 276) = v412;
              *(float *)(v433 + 280) = v413;
              *(float *)(v433 + 304) = v423;
              *(float *)(v433 + 308) = v439;
              *(_DWORD *)(v433 + 312) = v402;
              *(float32x2_t *)(v433 + 320) = v404;
              *(float *)(v433 + 328) = v405;
              *(float *)(v433 + 352) = v407;
              *(float *)(v433 + 356) = v408;
              *(float *)(v433 + 360) = v409;
              *(float *)(v433 + 364) = v434;
              *(float *)(v433 + 336) = v411;
              *(float *)(v433 + 340) = v412;
              *(float *)(v433 + 344) = v413;
              *(float *)(v433 + 368) = v423;
              *(_DWORD *)(v433 + 372) = 1056964608;
              *(_DWORD *)(v433 + 376) = v402;
              *(float32x2_t *)(v433 + 384) = v404;
              *(float *)(v433 + 392) = v405;
              *(float *)(v433 + 416) = v407;
              *(float *)(v433 + 420) = v408;
              *(float *)(v433 + 424) = v409;
              *(float *)(v433 + 428) = v434;
              *(float *)(v433 + 400) = v411;
              *(float *)(v433 + 404) = v412;
              *(float *)(v433 + 408) = v413;
              *(float *)&v438 = v438 + 0.5;
              *(float *)(v433 + 432) = v423;
              *(_DWORD *)(v433 + 436) = LODWORD(v438);
              *(_DWORD *)(v433 + 440) = v402;
              *(float32x2_t *)(v433 + 448) = v404;
              *(float *)(v433 + 456) = v405;
              *(float *)(v433 + 480) = v407;
              *(float *)(v433 + 484) = v408;
              *(float *)(v433 + 488) = v409;
              *(float *)(v433 + 492) = v436;
              *(float *)(v433 + 464) = v411;
              *(float *)(v433 + 468) = v412;
              *(float *)(v433 + 472) = v413;
              *(float *)(v433 + 496) = v437;
              *(_DWORD *)(v433 + 500) = LODWORD(v438);
              *(_DWORD *)(v433 + 504) = v402;
              v304 += 10;
              if ((v549 & 2) == 0)
              {
LABEL_316:
                ++v305;
                v3 = v339;
                v4 = v340;
                v8 = v338;
                if (v491 == v305)
                  goto LABEL_305;
                continue;
              }
            }
            break;
          }
          v319 = *(double *)&v546;
          if (v319 <= v342)
            v320 = v319 * v341;
          else
            v320 = v343;
          v321 = v544;
          v322 = v545;
          v323 = *(_DWORD *)(v301[9] + 8 * *((_QWORD *)&v548 + 1) + 4);
          v324 = v543;
          v325 = v539 - *(double *)(v283 + 232);
          v326 = (float32x2_t *)(v299 + (v304 << 6));
          v327 = vcvt_f32_f64(vsubq_f64(v538, *(float64x2_t *)(v283 + 216)));
          *v326 = v327;
          v326[1].f32[0] = v325;
          *(float *)&v324 = v324;
          *(float *)&v321 = v321;
          *(float *)&v322 = v322;
          v326[4].i32[0] = LODWORD(v324);
          v326[4].i32[1] = LODWORD(v321);
          v326[5].i32[0] = LODWORD(v322);
          v326[5].f32[1] = -v320;
          v328 = v540;
          v329 = v541;
          v330 = v542;
          v326[2].f32[0] = v328;
          v326[2].f32[1] = v329;
          v326[3].f32[0] = v330;
          v326[7].i32[0] = v323;
          v326[8] = v327;
          v326[9].f32[0] = v325;
          v326[12].i32[0] = LODWORD(v324);
          v326[12].i32[1] = LODWORD(v321);
          v326[13].i32[0] = LODWORD(v322);
          v326[13].f32[1] = v320;
          v326[10].f32[0] = v328;
          v326[10].f32[1] = v329;
          v326[11].f32[0] = v330;
          v326[15].i32[0] = v323;
          v304 += 2;
          v326[6] = (float32x2_t)0x3F80000000000000;
          __asm { FMOV            V3.2S, #1.0 }
          v326[14] = _D3;
          goto LABEL_316;
        }
LABEL_344:
        j = a2;
        if (v463 && v456 != v457 && a2 && *(_BYTE *)(v458 + 17) != 2)
          (*((void (**)(ResourceAccessor *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2->var0 + 8))(a2, v463, v458, v457, v456, 1, 1);
        v277 = v455;
        if (v464 && v459 != v460 && a2 && *(_BYTE *)(v461 + 17) != 2)
          (*((void (**)(ResourceAccessor *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2->var0 + 8))(a2, v464, v461, v460, v459, 1, 1);
        v287 = v462 + 1;
        v286 = v454;
      }
      v284 = v452 + 1;
    }
    while (v452 + 1 != v451);
    v284 = *(uint64_t **)(*((_QWORD *)v277 + 8) + 8);
    v281 = *((unsigned __int8 *)v277 + 104);
  }
  *(_QWORD *)(*v284 + 48) = *((_QWORD *)v277 + 9);
  if (!v281)
    *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v277 + 8) + 8) + 176) = *((_QWORD *)v277 + 10);
  operator delete(__p);
}

void sub_19F4E5B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D42E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D42E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverRoutePasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverRoutePasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

BOOL md::LabelFeature::isFeatureFromTileSource(md::LabelFeature *this)
{
  return (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 64))(this) == 0;
}

uint64_t md::LabelFeature::externalFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::externalPointFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::externalLineFeature(md::LabelFeature *this)
{
  return 0;
}

void md::LineLabelFeature::populateFeatureInfo(md::LineLabelFeature *this, md::LabelFeatureInfo *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a2 + 16;
  if (!*((_QWORD *)a2 + 2))
  {
    std::mutex::lock((std::mutex *)((char *)this + 8));
    v5 = *((_QWORD *)this + 19);
    if (v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v4);
    std::mutex::unlock((std::mutex *)((char *)this + 8));
  }
  *((_DWORD *)a2 + 16) = -1431655765 * ((*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 4);
}

void sub_19F4E5C64(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::newPoint()
{
  return 0;
}

uint64_t md::LabelFeature::labelPointWithElevationUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

__n128 md::LineLabelFeature::secondaryLabelPoint@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *(_QWORD *)(a1 + 232);
  v4 = a1 + 232;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = *a2;
  v8 = v4;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v4 || v7 < *(_DWORD *)(v8 + 32))
  {
LABEL_12:
    v12 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_13;
  }
  v16 = *(_QWORD *)(v8 + 40);
  v12 = *(std::__shared_weak_count **)(v8 + 48);
  v20 = v16;
  v21 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (!v16)
  {
LABEL_13:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    if (!v12)
      return result;
    goto LABEL_14;
  }
  v19 = 0uLL;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v16 + 64))(v16, &v19);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = v19;
  *(__n128 *)(a3 + 24) = v19;
  *(_DWORD *)(a3 + 40) = 2139095039;
  *(_WORD *)(a3 + 44) = 256;
  *(_BYTE *)(a3 + 46) = 1;
  *(_BYTE *)(a3 + 48) = 1;
  if (!v12)
    return result;
LABEL_14:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return result;
}

void sub_19F4E5DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::featureID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::clientFeatureID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::businessID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LineLabelFeature::dedupingFeatureID(md::LineLabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::animationID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::incident(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::arWalkingFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::hasValidCustomFeatureAnnotation(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::trafficCamera(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::customFeatureAnnotation(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::positionMask(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::labelFeatureType(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::labelFeatureTrait(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::routeCoordinate()
{
  return 0;
}

float md::LineLabelFeature::minLabelSpacing(md::LineLabelFeature *this, int a2, const md::LabelLayoutContext *a3)
{
  char *v3;

  v3 = md::LineLabelFeature::roadMetricsForZ(this, a2, a3);
  if (v3)
    return *((float *)v3 + 18);
  else
    return 0.0;
}

uint64_t md::LabelFeature::isMuninLandmark(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isSummaryPOI(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueBuildingID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueLevelID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueComponentID(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::venueFloorOrdinal(md::LabelFeature *this)
{
  return 0;
}

void md::LabelFeature::venueLookInsideFloorOrdinal(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelFeature::venueComponentType(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::containsPoint()
{
  return 0;
}

uint64_t md::LineLabelFeature::publicShieldName(md::LineLabelFeature *this)
{
  if (*((_QWORD *)this + 44) == *((_QWORD *)this + 45))
    return 0;
  else
    return *((_QWORD *)this + 44);
}

uint64_t md::LabelFeature::viewProximity(md::LabelFeature *this)
{
  return *((unsigned __int8 *)this + 146);
}

uint64_t md::LabelFeature::setViewProximity(uint64_t result, char a2)
{
  *(_BYTE *)(result + 146) = a2;
  return result;
}

uint64_t md::LabelFeature::setFlexZone(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::styleForElementIndex(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isPickedStateStylable(md::LabelFeature *this)
{
  return 1;
}

void md::LineLabelFeature::removeTile(uint64_t a1, _QWORD *a2)
{
  md::LabelLineStore::removeRoadFeaturesInTile<geo::codec::VectorTile>(*(_QWORD *)(a1 + 192), a2);
}

{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  malloc_zone_t *zone;
  int v19;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;
  malloc_zone_t *v23;
  uint64_t v24;
  geo::read_write_lock *v25;
  const char *v26;
  malloc_zone_t *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 192);
  {
    v15 = operator new();
    *(_QWORD *)(v15 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v15 + 24) = "VectorKitLabels";
    *(_OWORD *)(v15 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v15 = &off_1E42B5668;
    *(_QWORD *)(v15 + 8) = "VectorKitLabels";
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(_OWORD *)(v15 + 136) = 0u;
    *(_OWORD *)(v15 + 152) = 0u;
    *(_OWORD *)(v15 + 168) = 0u;
    *(_OWORD *)(v15 + 184) = 0u;
    *(_OWORD *)(v15 + 200) = 0u;
    *(_OWORD *)(v15 + 216) = 0u;
    *(_OWORD *)(v15 + 232) = 0u;
    *(_QWORD *)(v15 + 248) = 0;
    *(_OWORD *)(v15 + 56) = 0u;
    v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
    if ((_DWORD)v16)
      geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v15 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v15;
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
  v6 = v5;
  *(_DWORD *)v5 = 10;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = a2[1];
  *(_QWORD *)(v5 + 24) = *a2;
  *(_QWORD *)(v5 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(v5 + 88) = 0;
  v10 = 0uLL;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  if ((v11 & 1) == 0)
  {
    v10 = 0uLL;
    if (v19)
    {
      v20 = operator new();
      *(_QWORD *)(v20 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v20 + 24) = "VectorKitLabels";
      *(_OWORD *)(v20 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v20 = &off_1E42B5668;
      *(_QWORD *)(v20 + 8) = "VectorKitLabels";
      *(_OWORD *)(v20 + 72) = 0u;
      *(_OWORD *)(v20 + 88) = 0u;
      *(_OWORD *)(v20 + 104) = 0u;
      *(_OWORD *)(v20 + 120) = 0u;
      *(_OWORD *)(v20 + 136) = 0u;
      *(_OWORD *)(v20 + 152) = 0u;
      *(_OWORD *)(v20 + 168) = 0u;
      *(_OWORD *)(v20 + 184) = 0u;
      *(_OWORD *)(v20 + 200) = 0u;
      *(_OWORD *)(v20 + 216) = 0u;
      *(_OWORD *)(v20 + 232) = 0u;
      *(_QWORD *)(v20 + 248) = 0;
      *(_OWORD *)(v20 + 56) = 0u;
      v21 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v20 + 56), 0);
      if ((_DWORD)v21)
        geo::read_write_lock::logFailure(v21, (uint64_t)"initialization", v22);
      v23 = malloc_create_zone(0, 0);
      *(_QWORD *)(v20 + 48) = v23;
      malloc_set_zone_name(v23, "VectorKitLabels");
      *(_QWORD *)(v20 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v20;
      v10 = 0uLL;
    }
  }
  *(_QWORD *)(v6 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = v10;
  *(_QWORD *)(v6 + 136) = 0;
  *(_WORD *)(v6 + 144) = 255;
  *(_DWORD *)(v6 + 148) = 0;
  *(_DWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  *(int64x2_t *)(v6 + 184) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v6 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_BYTE *)(v6 + 216) = 0;
  *(_DWORD *)(v6 + 220) = 0;
  *(_WORD *)(v6 + 224) = 256;
  *(_BYTE *)(v6 + 226) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  v28 = v6;
  std::mutex::lock((std::mutex *)(v3 + 16));
  v12 = *(uint64_t **)(v3 + 96);
  if ((unint64_t)v12 >= *(_QWORD *)(v3 + 104))
  {
    v13 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(v3 + 88, &v28);
    v6 = v28;
  }
  else
  {
    if (v12)
    {
      v28 = 0;
      *v12 = v6;
      v6 = 0;
    }
    v13 = v12 + 1;
  }
  *(_QWORD *)(v3 + 96) = v13;
  atomic_store(1u, (unsigned __int8 *)(v3 + 80));
  std::mutex::unlock((std::mutex *)(v3 + 16));
  v28 = 0;
  if (v6)
  {
    md::LabelLineStore::WorkUnit::~WorkUnit((md::LabelLineStore::WorkUnit *)v6);
    {
      v24 = operator new();
      *(_QWORD *)(v24 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v24 + 24) = "VectorKitLabels";
      *(_OWORD *)(v24 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v24 = &off_1E42B5668;
      *(_QWORD *)(v24 + 8) = "VectorKitLabels";
      *(_OWORD *)(v24 + 72) = 0u;
      *(_OWORD *)(v24 + 88) = 0u;
      *(_OWORD *)(v24 + 104) = 0u;
      *(_OWORD *)(v24 + 120) = 0u;
      *(_OWORD *)(v24 + 136) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_OWORD *)(v24 + 232) = 0u;
      *(_QWORD *)(v24 + 248) = 0;
      *(_OWORD *)(v24 + 56) = 0u;
      v25 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v24 + 56), 0);
      if ((_DWORD)v25)
        geo::read_write_lock::logFailure(v25, (uint64_t)"initialization", v26);
      v27 = malloc_create_zone(0, 0);
      *(_QWORD *)(v24 + 48) = v27;
      malloc_set_zone_name(v27, "VectorKitLabels");
      *(_QWORD *)(v24 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v24;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v6, 248);
  }
}

void sub_19F4E6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::LabelLineStore::WorkUnit *a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>::~unique_ptr[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::hasAnnotatedShieldText(md::LineLabelFeature *this)
{
  return 0;
}

uint64_t *std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), *(_QWORD *)v2, *(_QWORD *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v2, 0x1032C402ED93987);
  }
  return a1;
}

void md::LineLabelFeature::resolvedStyleAttributes(_QWORD *a1, const FeatureStyleAttributes *a2, int a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  unsigned __int8 v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned __int8 v23;
  int *v24;
  int v25;

  v8 = (char *)operator new(0x40uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E42DAB40;
  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v8 + 24), a2);
  *a1 = v9;
  a1[1] = v8;
  if (!a3)
  {
LABEL_11:
    if (!(_DWORD)a4)
      return;
    goto LABEL_12;
  }
  v10 = v8[57];
  v11 = *((_QWORD *)v8 + 3);
  if (!v8[57])
  {
LABEL_7:
    *(_QWORD *)(v11 + 8 * v10) = 0x100010025;
    v15 = v8[57] + 1;
    v8[57] = v15;
    qsort(*((void **)v8 + 3), v15, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    goto LABEL_11;
  }
  if (v10 >= 0x20)
  {
    v12 = 0;
    v16 = (int *)*((_QWORD *)v8 + 3);
    while (1)
    {
      v17 = *v16;
      v16 += 2;
      if (v17 == 65573)
        break;
      if (v10 == ++v12)
        goto LABEL_11;
    }
  }
  else
  {
    v12 = 0;
    v13 = (int *)*((_QWORD *)v8 + 3);
    while (1)
    {
      v14 = *v13;
      v13 += 2;
      if (v14 == 65573)
        break;
      if (v10 == ++v12)
        goto LABEL_7;
    }
  }
  *(_DWORD *)(v11 + 8 * v12 + 4) = 1;
  if ((_DWORD)a4)
  {
LABEL_12:
    v18 = v8[57];
    v19 = *((_QWORD *)v8 + 3);
    if (v8[57])
    {
      if (v18 >= 0x20)
      {
        v20 = 0;
        v24 = (int *)*((_QWORD *)v8 + 3);
        while (1)
        {
          v25 = *v24;
          v24 += 2;
          if (v25 == 65612)
            break;
          if (v18 == ++v20)
            return;
        }
      }
      else
      {
        v20 = 0;
        v21 = (int *)*((_QWORD *)v8 + 3);
        while (1)
        {
          v22 = *v21;
          v21 += 2;
          if (v22 == 65612)
            break;
          if (v18 == ++v20)
            goto LABEL_17;
        }
      }
      *(_DWORD *)(v19 + 8 * v20 + 4) = a4;
    }
    else
    {
LABEL_17:
      *(_QWORD *)(v19 + 8 * v18) = (a4 << 32) | 0x1004C;
      v23 = v8[57] + 1;
      v8[57] = v23;
      qsort(*((void **)v8 + 3), v23, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
  }
}

void sub_19F4E65D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F4E65F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

char *md::LineLabelFeature::roadMetricsForZ(md::LineLabelFeature *this, int a2, const md::LabelLayoutContext *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v15;
  char **v16;
  unsigned int v17;
  char **v19;
  float v20;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  double v28;
  float v29;
  double v30;
  double v31;
  float v32;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  int32x2_t v37;
  float32x2_t v38;
  double v39;
  double v41;
  double v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  double v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t *v56;
  unsigned int v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  int v68;
  float v69;
  __int128 v70;
  double v71;
  float64x2_t v72;

  v6 = *(_QWORD *)(*(uint64_t (**)(md::LineLabelFeature *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 552))(this, 0, 0, 0, 0);
  if (!v6)
    return 0;
  v7 = a2;
  v8 = (uint64_t **)((char *)this + 328);
  v9 = (uint64_t *)*((_QWORD *)this + 41);
  __asm { FMOV            V0.2D, #-1.0 }
  v70 = _Q0;
  __asm { FMOV            V10.2S, #-1.0 }
  if (!v9)
    goto LABEL_13;
  v15 = (uint64_t **)((char *)this + 328);
  v16 = (char **)*((_QWORD *)this + 41);
  do
  {
    v17 = *((unsigned __int8 *)v16 + 32);
    _CF = v17 >= a2;
    if (v17 >= a2)
      v19 = v16;
    else
      v19 = v16 + 1;
    if (_CF)
      v15 = (uint64_t **)v16;
    v16 = (char **)*v19;
  }
  while (*v19);
  if (v15 != v8 && *((unsigned __int8 *)v15 + 32) <= a2)
  {
    while (1)
    {
LABEL_55:
      while (1)
      {
        v61 = (char *)v9;
        v62 = *((unsigned __int8 *)v9 + 32);
        if (v62 <= v7)
          break;
        v9 = *(uint64_t **)v61;
        v8 = (uint64_t **)v61;
        if (!*(_QWORD *)v61)
          goto LABEL_59;
      }
      if (v62 >= v7)
        break;
      v9 = (uint64_t *)*((_QWORD *)v61 + 1);
      if (!v9)
      {
        v8 = (uint64_t **)(v61 + 8);
        goto LABEL_59;
      }
    }
  }
  else
  {
LABEL_13:
    v67 = _D10;
    v20 = *((float *)a3 + 10);
    md::LabelStyle::setZoom((md::LabelStyle *)v6, (float)a2);
    v21 = *(_QWORD *)(v6 + 264);
    if (!v21)
    {
      v22 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(v6);
      v21 = *v22;
      *(_QWORD *)(v6 + 264) = *v22;
    }
    v23 = *(double *)(v6 + 128);
    v24 = ldexp(1.0, a2);
    if ((*(uint64_t (**)(md::LineLabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0))
    {
      v25 = (*(uint64_t (**)(md::LineLabelFeature *, _QWORD))(*(_QWORD *)this + 472))(this, 0);
      if (*(char *)(v25 + 23) < 0)
        v26 = *(_QWORD *)(v25 + 8);
      else
        v26 = *(unsigned __int8 *)(v25 + 23);
      v29 = (double)v26 * 0.5;
      v28 = v29;
    }
    else
    {
      v28 = 0.0;
    }
    v30 = 0.00130208333 / v24;
    v31 = v28 / v23;
    v32 = 0.0;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 4);
    if (*((_QWORD *)this + 45) != *((_QWORD *)this + 44))
      v32 = *(float *)(v21 + 36) * (float)(v33 - 1);
    v34 = v30 * (float)(v32 + (float)((float)v33 * 15.0));
    v35 = v30 * 15.0;
    v68 = *(_DWORD *)(v21 + 44);
    v36 = fmax(v31 * 0.5, 3.0 / v23 * 0.5);
    v71 = v30;
    v66 = 3.0 / v23;
    if ((*(unsigned int (**)(md::LineLabelFeature *))(*(_QWORD *)this + 656))(this))
    {
      v38.i32[0] = *(_DWORD *)(v21 + 24);
      if (v38.f32[0] <= 0.0)
        v38.f32[0] = 300.0;
      *(float *)v37.i32 = fmaxf((float)((float)(*((float *)a3 + 267) + *((float *)a3 + 266)) * 0.375) / v20, 10.0);
      v69 = fminf(fmaxf(*(float *)(v21 + 32), 10.0), *(float *)v37.i32);
      v39 = v71 * v69;
      v38.i32[1] = *(_DWORD *)(v21 + 28);
      __asm { FMOV            V1.2S, #10.0 }
      v72 = vmulq_n_f64(vcvtq_f64_f32(vminnm_f32(vmaxnm_f32(v38, _D1), (float32x2_t)vdup_lane_s32(v37, 0))), v71);
      v41 = v35;
    }
    else
    {
      v69 = 0.0;
      __asm { FMOV            V0.2D, #1.0 }
      v72 = _Q0;
      v41 = 1.0;
      v39 = 1.0;
    }
    v43 = fmax(v36, v34);
    v44 = *(_DWORD *)(v21 + 8);
    v45 = ((unint64_t)*(unsigned __int8 *)(v21 + 56) << 40) | ((unint64_t)(int)*(float *)(v21 + 16) << 48) | ((unint64_t)(int)*(float *)(v21 + 20) << 56);
    if (((*(uint64_t (**)(md::LineLabelFeature *))(*(_QWORD *)this + 336))(this) & 1) != 0
      || *(_BYTE *)(v21 + 56))
    {
      v46 = v45 | *(unsigned __int8 *)(v21 + 60);
      if (*((_BYTE *)a3 + 14))
        v46 |= (unint64_t)*(unsigned __int8 *)(v21 + 59) << 8;
      v45 = v46 & 0xFFFFFF000000FFFFLL | ((unint64_t)*(unsigned __int8 *)(v21 + 58) << 16);
      v47 = (unint64_t)*(unsigned __int8 *)(v21 + 57) << 24;
    }
    else
    {
      v47 = 0;
    }
    v48 = fmax(v43, v35);
    v49 = 1.5 / v23;
    v50 = (*(uint64_t (**)(md::LineLabelFeature *))(*(_QWORD *)this + 648))(this);
    v51 = 0x100000000;
    if (!v50)
      v51 = 0;
    v52 = v45 | v47 | v51;
    if (*((_BYTE *)this + 143))
      v53 = v52 & 0xFFFFFFFFFFFFFF00 | 1;
    else
      v53 = v52;
    if (*(_BYTE *)(*((_QWORD *)this + 24) + 290))
    {
      v31 = v31 * 40075017.0;
      v34 = v34 * 40075017.0;
      v41 = v41 * 40075017.0;
      v49 = v49 * 40075017.0;
      v39 = v39 * 40075017.0;
      v72 = vmulq_f64(v72, (float64x2_t)vdupq_n_s64(0x41831BF848000000uLL));
      v48 = v48 * 40075017.0;
    }
    _D10 = v67;
    v54 = *v8;
    v55 = (uint64_t **)((char *)this + 328);
    v56 = (uint64_t *)((char *)this + 328);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v56 = v54;
          v57 = *((unsigned __int8 *)v54 + 32);
          if (v57 <= v7)
            break;
          v54 = (uint64_t *)*v56;
          v55 = (uint64_t **)v56;
          if (!*v56)
            goto LABEL_49;
        }
        if (v57 >= v7)
          break;
        v54 = (uint64_t *)v56[1];
        if (!v54)
        {
          v55 = (uint64_t **)(v56 + 1);
          goto LABEL_49;
        }
      }
    }
    else
    {
LABEL_49:
      v58 = (char *)v56;
      v56 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 42) + 16))(*((_QWORD *)this + 42), 136, 8);
      *((_BYTE *)v56 + 32) = v7;
      v56[16] = 0;
      *(_OWORD *)(v56 + 5) = v70;
      *(_OWORD *)(v56 + 7) = v70;
      *(_OWORD *)(v56 + 9) = v70;
      *(_OWORD *)(v56 + 11) = v70;
      v56[13] = 0xBFF0000000000000;
      v56[14] = v67;
      *((_DWORD *)v56 + 30) = -1;
      *(uint64_t *)((char *)v56 + 124) = 0;
      *v56 = 0;
      v56[1] = 0;
      v56[2] = (uint64_t)v58;
      *v55 = v56;
      v59 = v56;
      v60 = **((_QWORD **)this + 40);
      if (v60)
      {
        *((_QWORD *)this + 40) = v60;
        v59 = *v55;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 41), v59);
      ++*((_QWORD *)this + 43);
    }
    *(float64x2_t *)(v56 + 5) = v72;
    *((double *)v56 + 7) = v39;
    *((double *)v56 + 8) = v31;
    *((double *)v56 + 9) = v66;
    *((double *)v56 + 10) = v34;
    *((double *)v56 + 11) = v41;
    *((double *)v56 + 12) = v48;
    *((double *)v56 + 13) = v49;
    *((float *)v56 + 28) = v69;
    *((_DWORD *)v56 + 29) = v68;
    *((_DWORD *)v56 + 30) = v44;
    *(uint64_t *)((char *)v56 + 124) = v53;
    v9 = *v8;
    v61 = (char *)this + 328;
    if (*v8)
      goto LABEL_55;
LABEL_59:
    v63 = v61;
    v61 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 42) + 16))(*((_QWORD *)this + 42), 136, 8);
    v61[32] = v7;
    *((_QWORD *)v61 + 16) = 0;
    *(_OWORD *)(v61 + 40) = v70;
    *(_OWORD *)(v61 + 56) = v70;
    *(_OWORD *)(v61 + 72) = v70;
    *(_OWORD *)(v61 + 88) = v70;
    *((_QWORD *)v61 + 13) = 0xBFF0000000000000;
    *((_QWORD *)v61 + 14) = _D10;
    *((_DWORD *)v61 + 30) = -1;
    *(_QWORD *)(v61 + 124) = 0;
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    *((_QWORD *)v61 + 2) = v63;
    *v8 = (uint64_t *)v61;
    v64 = (uint64_t *)v61;
    v65 = **((_QWORD **)this + 40);
    if (v65)
    {
      *((_QWORD *)this + 40) = v65;
      v64 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 41), v64);
    ++*((_QWORD *)this + 43);
  }
  return v61 + 40;
}

void md::LineLabelFeature::~LineLabelFeature(md::LineLabelFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  md::SharedDeviceResources *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)this = off_1E4291C80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *((_QWORD *)this + 48);
    if (!v5)
      goto LABEL_16;
LABEL_6:
    v6 = *((_QWORD *)this + 49);
    v7 = v5;
    if (v6 == v5)
    {
LABEL_15:
      *((_QWORD *)this + 49) = v5;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 51) + 40))(*((_QWORD *)this + 51), v7, *((_QWORD *)this + 50) - v7);
      goto LABEL_16;
    }
    while (1)
    {
      if (*(char *)(v6 - 9) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 - 8) + 40))(*(_QWORD *)(v6 - 8), *(_QWORD *)(v6 - 32), *(_QWORD *)(v6 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v6 - 41) < 0)
LABEL_13:
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 - 40) + 40))(*(_QWORD *)(v6 - 40), *(_QWORD *)(v6 - 64), *(_QWORD *)(v6 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v6 - 41) < 0)
      {
        goto LABEL_13;
      }
      v6 -= 64;
      if (v6 == v5)
      {
        v7 = *((_QWORD *)this + 48);
        goto LABEL_15;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *((_QWORD *)this + 48);
  if (v5)
    goto LABEL_6;
LABEL_16:
  v8 = *((_QWORD *)this + 44);
  if (v8)
  {
    v9 = *((_QWORD *)this + 45);
    v10 = *((_QWORD *)this + 44);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v9 - 24) + 40))(*(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 48), *(_QWORD *)(v9 - 32) & 0x7FFFFFFFFFFFFFFFLL);
        v9 -= 48;
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 44);
    }
    *((_QWORD *)this + 45) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 47) + 40))(*((_QWORD *)this + 47), v10, *((_QWORD *)this + 46) - v10);
  }
  std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  v11 = (md::SharedDeviceResources *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v11)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v11);
    MEMORY[0x1A1AF4E00]();
  }
  v12 = *((_QWORD *)this + 34);
  if (v12)
  {
    v13 = *((_QWORD *)this + 35);
    v14 = *((_QWORD *)this + 34);
    if (v13 != v12)
    {
      do
        md::SharedDeviceResources::~SharedDeviceResources((md::SharedDeviceResources *)(v13 - 80));
      while (v13 != v12);
      v14 = *((_QWORD *)this + 34);
    }
    *((_QWORD *)this + 35) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 37) + 40))(*((_QWORD *)this + 37), v14, *((_QWORD *)this + 36) - v14);
  }
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,std::less<unsigned long>,true>,geo::StdAllocator<std::__value_type<unsigned long,std::shared_ptr<ggl::DeviceData>>,ggl::Allocator>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  md::LabelFeature::~LabelFeature(this);
}

uint64_t md::LineLabelFeature::styleIndexForAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (*a2)
  {
    v4 = *(_QWORD *)(a1 + 280);
    if (v4 != *(_QWORD *)(a1 + 272))
    {
      v5 = 0;
      v6 = 0;
      v4 = *(_QWORD *)(a1 + 272);
      do
      {
        if (!geo::codec::featureStyleAttributesCompare((uint64_t *)(v4 + v5), a2))
          return v6;
        ++v6;
        v4 = *(_QWORD *)(a1 + 272);
        v7 = *(_QWORD *)(a1 + 280);
        v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v4) >> 4);
        v5 += 80;
      }
      while (v6 < v8);
      if (v8 <= 0x64)
        goto LABEL_9;
      return 0xFFFFFFFFLL;
    }
    v8 = 0;
    v7 = *(_QWORD *)(a1 + 280);
LABEL_9:
    v9 = *(_QWORD *)(a1 + 288);
    if (v7 < v9)
    {
      if (v7)
      {
        v10 = a2[1];
        *(_QWORD *)v7 = *a2;
        *(_QWORD *)(v7 + 8) = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
      }
      v13 = v7 + 80;
      goto LABEL_35;
    }
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v4) >> 4);
    v15 = v14 + 1;
    if (v14 + 1 > 0x333333333333333)
      abort();
    v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v4) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x199999999999999)
      v15 = 0x333333333333333;
    if (v15)
    {
      v17 = 80 * v15;
      v18 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 296) + 16))(*(_QWORD *)(a1 + 296), 80 * v15, 8);
      v19 = v18 + 80 * v14;
      v15 = v18 + v17;
      if (v18)
      {
        v20 = a2[1];
        *(_QWORD *)v19 = *a2;
        *(_QWORD *)(v19 + 8) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (_OWORD *)(v18 + 80 * v14);
        v23[3] = 0u;
        v23[4] = 0u;
        v23[1] = 0u;
        v23[2] = 0u;
      }
    }
    else
    {
      v19 = 80 * v14;
    }
    v13 = v19 + 80;
    v24 = *(_QWORD *)(a1 + 272);
    v25 = *(_QWORD *)(a1 + 280);
    if (v25 == v24)
    {
      *(_QWORD *)(a1 + 272) = v19;
      *(_QWORD *)(a1 + 280) = v13;
      v28 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v15;
      if (!v25)
        goto LABEL_35;
    }
    else
    {
      do
      {
        v26 = *(_OWORD *)(v25 - 80);
        v25 -= 80;
        *(_OWORD *)(v19 - 80) = v26;
        v19 -= 80;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_OWORD *)(v19 + 16) = *(_OWORD *)(v25 + 16);
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_OWORD *)(v19 + 32) = *(_OWORD *)(v25 + 32);
        *(_QWORD *)(v25 + 32) = 0;
        *(_QWORD *)(v25 + 40) = 0;
        *(_OWORD *)(v19 + 48) = *(_OWORD *)(v25 + 48);
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_OWORD *)(v19 + 64) = *(_OWORD *)(v25 + 64);
        *(_QWORD *)(v25 + 64) = 0;
        *(_QWORD *)(v25 + 72) = 0;
      }
      while (v25 != v24);
      v25 = *(_QWORD *)(a1 + 272);
      v27 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 272) = v19;
      *(_QWORD *)(a1 + 280) = v13;
      v28 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v15;
      while (v27 != v25)
        md::SharedDeviceResources::~SharedDeviceResources((md::SharedDeviceResources *)(v27 - 80));
      if (!v25)
        goto LABEL_35;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), v25, v28 - v25);
LABEL_35:
    *(_QWORD *)(a1 + 280) = v13;
    return v8;
  }
  return 0xFFFFFFFFLL;
}

uint64_t std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = (a1[1] - *a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    abort();
  v5 = a1 + 3;
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v3)
    v3 = v6 >> 5;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0;
  v8 = 0x3FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v3;
  if (v8)
  {
    v10 = v8 << 6;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, v8 << 6, 8);
    v12 = v11 + (v2 << 6);
    v13 = v11 + v10;
    if (v11)
    {
      v14 = v11;
      *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
      if (*((char *)a2 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)(v11 + (v2 << 6)), *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v15 = *a2;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v12 = v15;
      }
      v16 = v14 + (v2 << 6);
      v17 = (_QWORD **)(v16 + 32);
      *(_QWORD *)(v16 + 56) = *((_QWORD *)a2 + 7);
      if (*((char *)a2 + 55) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v17, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
      }
      else
      {
        v18 = a2[2];
        *(_QWORD *)(v16 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)v17 = v18;
      }
    }
  }
  else
  {
    v13 = 0;
    v12 = v2 << 6;
  }
  v19 = v12 + 64;
  v21 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    v24 = a1[1];
  }
  else
  {
    do
    {
      v22 = *(_OWORD *)(v20 - 48);
      *(_OWORD *)(v12 - 64) = *(_OWORD *)(v20 - 64);
      *(_OWORD *)(v12 - 48) = v22;
      *(_QWORD *)(v20 - 56) = 0;
      *(_QWORD *)(v20 - 48) = 0;
      *(_QWORD *)(v20 - 64) = 0;
      v23 = *(_OWORD *)(v20 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(v20 - 32);
      *(_OWORD *)(v12 - 16) = v23;
      v12 -= 64;
      *(_QWORD *)(v20 - 24) = 0;
      *(_QWORD *)(v20 - 16) = 0;
      *(_QWORD *)(v20 - 32) = 0;
      v20 -= 64;
    }
    while (v20 != v21);
    v24 = *a1;
    v20 = a1[1];
  }
  *a1 = v12;
  a1[1] = v19;
  v25 = a1[2];
  a1[2] = v13;
  if (v20 != v24)
  {
    v26 = v20 - 32;
    while (1)
    {
      v27 = v26 - 32;
      if (*(char *)(v26 + 23) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), *(_QWORD *)v26, *(_QWORD *)(v26 + 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v26 - 9) < 0)
LABEL_26:
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v26 - 8) + 40))(*(_QWORD *)(v26 - 8), *(_QWORD *)(v26 - 32), *(_QWORD *)(v26 - 16) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v26 - 9) < 0)
      {
        goto LABEL_26;
      }
      v26 -= 64;
      if (v27 == v24)
      {
        v20 = v24;
        break;
      }
    }
  }
  if (v20)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v20, v25 - v20);
  return v19;
}

void sub_19F4E7290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), *(_QWORD *)v2, *(_QWORD *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  std::__split_buffer<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), *(_QWORD *)(i - 32), *(_QWORD *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), *(_QWORD *)(i - 64), *(_QWORD *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42819E8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42819E8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  __int16 v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(a2);
  v24 = *(_WORD *)(a1 + 8);
  v25 = *(_BYTE *)(a1 + 10);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (_BYTE *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v12[-v14] + 1;
      if (v15 >= 0x5555555555555556)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * (v11 - v14);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x2AAAAAAAAAAAAAAALL)
        v17 = 0x5555555555555555;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >= 0x5555555555555556)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = operator new(3 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v12[(_QWORD)v18 - v14];
      *(_WORD *)v19 = v24;
      v19[2] = v25;
      v13 = v19 + 3;
      if (v12 != (_BYTE *)v14)
      {
        do
        {
          v20 = *(_WORD *)(v12 - 3);
          v12 -= 3;
          v21 = v12[2];
          *(_WORD *)(v19 - 3) = v20;
          v19 -= 3;
          v19[2] = v21;
        }
        while (v12 != (_BYTE *)v14);
        v12 = (_BYTE *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)v18 + 3 * v17;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_WORD *)v12 = v24;
      v12[2] = v25;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + (((uint64_t)v5 - v4[7]) >> 2) + (((uint64_t)v5 - v4[7]) >> 3);
    *(_WORD *)v7 = v24;
    *(_BYTE *)(v7 + 2) = v25;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v27, &v28);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7C0654221E3B4567;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7C0654221E3B4567;
      if (*(_QWORD *)&v3 <= 0x7C0654221E3B4567uLL)
        v5 = 0x7C0654221E3B4567uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7C0654221E3B4567;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7C0654221E3B4567)
            {
              if (v7[2] == 0x7C0654221E3B4567)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7C0654221E3B4567)
          {
            if (v7[2] == 0x7C0654221E3B4567)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CommandBufferDescriptionCreation]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3D08;
  *(_QWORD *)(v11 + 8) = 0x7C0654221E3B4567;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7C0654221E3B4567uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7C0654221E3B4567;
  v15[1] = "md::ls::CommandBufferDescriptionCreation]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7C0654221E3B4567, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4E782C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 3 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 1);
  *(_WORD *)v14 = *(_WORD *)(v15 - 3);
  *(_BYTE *)(v14 + 2) = v16;
  a1[11] -= 3;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::RingIconLabelPart::~RingIconLabelPart(md::RingIconLabelPart *this)
{
  *(_QWORD *)this = off_1E4293080;
  if (*((char *)this + 655) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 82) + 40))(*((_QWORD *)this + 82), *((_QWORD *)this + 79), *((_QWORD *)this + 81) & 0x7FFFFFFFFFFFFFFFLL);
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4293080;
  if (*((char *)this + 655) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 82) + 40))(*((_QWORD *)this + 82), *((_QWORD *)this + 79), *((_QWORD *)this + 81) & 0x7FFFFFFFFFFFFFFFLL);
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::RingIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, this, 688);
}

uint64_t md::RingIconLabelPart::pushToRenderModel(uint64_t a1, uint64_t a2, float a3)
{
  if (*(_BYTE *)(a1 + 608))
    a3 = *(float *)(a1 + 612);
  (*(void (**)(_QWORD, uint64_t, float))(***(_QWORD ***)(a1 + 576) + 128))(**(_QWORD **)(a1 + 576), a2, a3);
  return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, a3);
}

uint64_t md::RingIconLabelPart::partType(md::RingIconLabelPart *this)
{
  return 8;
}

float md::CompositeLabelPart::calloutAnchorRect(md::CompositeLabelPart *this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;

  v2 = (uint64_t *)*((_QWORD *)this + 72);
  v3 = (uint64_t *)*((_QWORD *)this + 73);
  if (v2 == v3)
    return 3.4028e38;
  v5 = 3.4028e38;
  v6 = -3.4028e38;
  v7 = -3.4028e38;
  v8 = 3.4028e38;
  do
  {
    v9 = *v2++;
    v8 = fminf((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 664))(v9, a2), v8);
    v7 = fmaxf(v7, v10);
    v5 = fminf(v11, v5);
    v6 = fmaxf(v6, v12);
  }
  while (v2 != v3);
  return v8;
}

uint64_t md::RingIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v5 = (unsigned __int8 *)(a1 + 632);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

uint64_t md::CompositeLabelPart::publicName(md::CompositeLabelPart *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;

  v1 = (_QWORD *)*((_QWORD *)this + 72);
  v2 = (_QWORD *)*((_QWORD *)this + 73);
  if (v1 == v2)
    return 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 832))(*v1);
    if (result)
      break;
    if (++v1 == v2)
      return 0;
  }
  return result;
}

void md::RingIconLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "RingIcon");
}

double md::Ribbons::PolylineSegment::calculate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v16;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v26;
  double v27;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double result;

  v6 = (_OWORD *)(a1 + 264);
  if (a3)
  {
    v7 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)a1 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = *v6;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 280);
    v10 = *(_OWORD *)(a1 + 288);
    v11 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 136) = v11;
    *(_OWORD *)(a1 + 120) = v10;
  }
  else
  {
    md::Ribbons::PolylinePoint::calculate(a1, *(_QWORD *)(a2 + 48), *(double **)(a2 + 56), 0);
  }
  md::Ribbons::PolylinePoint::calculate(a1 + 168, *(_QWORD *)(a2 + 48), *(double **)(a2 + 56), a3 + 1);
  *(double *)_Q1.i64 = *(double *)(a1 + 224) - *(double *)(a1 + 56);
  v13 = *(float64x2_t *)(a1 + 232);
  v14 = *(float64x2_t *)(a1 + 64);
  *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vsubq_f64(v13, v14);
  v16 = vaddq_f64(v13, v14);
  _Q5.f64[1] = v16.f64[1];
  v16.f64[0] = *(double *)(a1 + 216) - *(double *)(a1 + 48);
  _Q3 = vaddq_f64(*(float64x2_t *)(a1 + 248), *(float64x2_t *)(a1 + 80));
  v18 = (float64x2_t)vzip1q_s64(_Q1, (int64x2_t)_Q3);
  v19.f64[0] = _Q5.f64[0];
  v19.f64[1] = _Q3.f64[1];
  v20 = vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16, v16), v18, v18), v19, v19));
  __asm { FMOV            V4.2D, #1.0 }
  v26 = vdivq_f64(_Q4, v20);
  v27 = (*(double *)(a1 + 216) - *(double *)(a1 + 48)) * v26.f64[0];
  *(double *)_Q1.i64 = *(double *)_Q1.i64 * v26.f64[0];
  *(double *)(a1 + 344) = v27;
  *(_QWORD *)(a1 + 352) = _Q1.i64[0];
  _Q4 = vmulq_f64(v26, _Q5);
  _Q2 = vmulq_laneq_f64(_Q3, v26, 1);
  v6[6] = _Q4;
  v6[7] = _Q2;
  __asm
  {
    FMLA            D5, D1, V2.D[1]
    FMLA            D3, D4, V4.D[1]
  }
  v19.f64[0] = vmlad_n_f64(-(_Q4.f64[1] * *(double *)_Q1.i64), v27, _Q2.f64[0]);
  _Q2.f64[0] = 1.0 / sqrt(_Q5.f64[0] * _Q5.f64[0] + _Q3.f64[0] * _Q3.f64[0] + v19.f64[0] * v19.f64[0]);
  _Q5.f64[0] = _Q2.f64[0] * _Q5.f64[0];
  _Q3.f64[0] = _Q2.f64[0] * _Q3.f64[0];
  *(float64_t *)(a1 + 392) = _Q5.f64[0];
  *(float64_t *)(a1 + 400) = _Q3.f64[0];
  _Q2.f64[0] = _Q2.f64[0] * v19.f64[0];
  *(float64_t *)(a1 + 408) = _Q2.f64[0];
  v19.f64[0] = *(float64_t *)(a1 + 96);
  v30 = *(double *)(a1 + 104);
  v31 = *(double *)(a1 + 112);
  v32 = _Q5.f64[0] * v19.f64[0] + v30 * _Q3.f64[0] + v31 * _Q2.f64[0];
  v33 = *(double *)(a1 + 264);
  v34 = *(double *)(a1 + 272);
  _Q3.f64[0] = v33 * _Q5.f64[0] + v34 * _Q3.f64[0];
  _Q5.f64[0] = *(float64_t *)(a1 + 280);
  _Q2.f64[0] = _Q3.f64[0] + _Q5.f64[0] * _Q2.f64[0];
  _Q3.f64[0] = vmlad_n_f64(v19.f64[0] * v27 + v30 * *(double *)_Q1.i64, v31, _Q4.f64[0]);
  result = vmlad_n_f64(v33 * v27 + v34 * *(double *)_Q1.i64, _Q5.f64[0], _Q4.f64[0]);
  *(double *)_Q1.i64 = 1.0 / fabs(v32);
  *(_QWORD *)(a1 + 120) = _Q1.i64[0];
  *(double *)(a1 + 128) = v32;
  _Q4.f64[0] = 1.0 / fabs(_Q2.f64[0]);
  *(float64_t *)(a1 + 288) = _Q4.f64[0];
  *(float64_t *)(a1 + 296) = _Q2.f64[0];
  *(float64_t *)(a1 + 136) = _Q3.f64[0];
  *(double *)(a1 + 144) = *(double *)_Q1.i64 * _Q3.f64[0];
  *(double *)(a1 + 304) = result;
  *(double *)(a1 + 312) = _Q4.f64[0] * result;
  return result;
}

double md::Ribbons::PolylinePoint::calculate(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double result;

  v4 = &a3[3 * a4];
  v5 = v4[1];
  v6 = v4[2];
  v7 = 1.0 / sqrt(*v4 * *v4 + v5 * v5 + v6 * v6);
  v8 = v7 * *v4;
  v9 = v7 * v5;
  v10 = v7 * v6;
  *(double *)(a1 + 72) = v8;
  *(double *)(a1 + 80) = v9;
  *(double *)(a1 + 88) = v10;
  if (a4)
  {
    if (a2 - 1 != a4)
    {
      v32 = &a3[3 * a4];
      v33 = v4[1];
      v34 = *v4 - *(v32 - 3);
      v35 = v33 - *(v32 - 2);
      v36 = v4[2];
      v37 = v36 - *(v32 - 1);
      v38 = sqrt(v34 * v34 + v35 * v35 + v37 * v37);
      v29 = v34 * (1.0 / v38);
      v30 = v35 * (1.0 / v38);
      v31 = v37 * (1.0 / v38);
      v39 = v32[3] - *v4;
      v40 = v32[4] - v33;
      v41 = v32[5] - v36;
      v42 = 1.0 / sqrt(v39 * v39 + v40 * v40 + v41 * v41);
      v19 = v42 * v39;
      v20 = v42 * v40;
      v28 = v42 * v41;
      *(_QWORD *)(a1 + 160) = a4;
      *(double *)(a1 + 152) = *(double *)(a1 + 152) + v38;
      *(double *)(a1 + 48) = *v4;
      *(double *)(a1 + 56) = v4[1];
      *(double *)(a1 + 64) = v4[2];
      *(double *)(a1 + 24) = -v29;
      *(double *)(a1 + 32) = -v30;
      *(double *)(a1 + 40) = -v31;
      v16 = -(v42 * v39);
      v17 = -(v42 * v40);
      v18 = -(v42 * v41);
      goto LABEL_7;
    }
    v11 = &a3[3 * a4];
    v12 = *v4 - *(v11 - 3);
    v13 = v4[1] - *(v11 - 2);
    v14 = v4[2] - *(v11 - 1);
    v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
    v16 = v12 * (1.0 / v15);
    v17 = v13 * (1.0 / v15);
    v18 = v14 * (1.0 / v15);
    *(double *)(a1 + 152) = v15 + *(double *)(a1 + 152);
    *(double *)(a1 + 48) = *v4;
    *(double *)(a1 + 56) = v4[1];
    *(double *)(a1 + 64) = v4[2];
    v19 = v16;
    v20 = v17;
    *(double *)(a1 + 24) = -v16;
    *(double *)(a1 + 32) = -v17;
    *(double *)(a1 + 40) = -v18;
  }
  else
  {
    v21 = a3[3] - *v4;
    v22 = a3[4] - v4[1];
    v23 = a3[5] - v4[2];
    v24 = 1.0 / sqrt(v21 * v21 + v22 * v22 + v23 * v23);
    v16 = v24 * v21;
    v17 = v24 * v22;
    v18 = v24 * v23;
    *(double *)(a1 + 48) = *v4;
    *(double *)(a1 + 56) = v4[1];
    *(double *)(a1 + 64) = v4[2];
    v25 = -(v24 * v21);
    v26 = -(v24 * v22);
    v27 = -(v24 * v23);
    v19 = v16;
    v20 = v17;
    *(double *)(a1 + 24) = v25;
    *(double *)(a1 + 32) = v26;
    *(double *)(a1 + 40) = v27;
  }
  v28 = v18;
  v29 = v16;
  v30 = v17;
  v31 = v18;
LABEL_7:
  *(double *)a1 = v16;
  *(double *)(a1 + 8) = v17;
  *(double *)(a1 + 16) = v18;
  v43 = -(v31 * v9 - v30 * v10);
  v44 = -(v29 * v10 - v31 * v8);
  v45 = -(v30 * v8 - v29 * v9);
  v46 = -(v28 * v9 - v20 * v10);
  v47 = -(v19 * v10 - v28 * v8);
  v48 = -(v20 * v8 - v19 * v9);
  v49 = v43 + v46;
  v50 = v44 + v47;
  v51 = v45 + v48;
  v52 = 1.0 / sqrt(v51 * v51 + v49 * v49 + v50 * v50);
  result = v52 * v51;
  *(double *)(a1 + 96) = v52 * v49;
  *(double *)(a1 + 104) = v52 * v50;
  *(double *)(a1 + 112) = result;
  return result;
}

void md::AnimatedTextureLabelPart::~AnimatedTextureLabelPart(md::AnimatedTextureLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::AnimatedTextureLabelPart::~AnimatedTextureLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::AnimatedTextureLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                           + 40))(mdm::Allocator::instance(void)::alloc, this, 792);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E42A01E8;
  md::LabelAnimator::~LabelAnimator((md::AnimatedTextureLabelPart *)((char *)this + 680));
  v2 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  *(_QWORD *)this = off_1E42AF8C0;
  free(*((void **)this + 59));
  free(*((void **)this + 60));
  free(*((void **)this + 62));
  free(*((void **)this + 29));
  free(*((void **)this + 30));
  free(*((void **)this + 32));
}

float md::AnimatedTextureLabelPart::updateWithStyle(md::AnimatedTextureLabelPart *this, LabelManager *a2)
{
  float result;

  result = *(float *)(**((_QWORD **)this + 4) + 172);
  *((float *)this + 194) = result;
  return result;
}

uint64_t md::AnimatedTextureLabelPart::layoutForStaging(float32x2_t *a1, uint64_t a2, __int32 *a3, __int32 *a4)
{
  uint64_t result;
  double v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  _OWORD *v17;
  float32x2_t v18;
  double *v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[80];
  _BYTE v34[48];

  result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)a1 + 344))(a1);
  if ((_DWORD)result == 37)
  {
    if (a1[80].i8[0])
    {
      v10 = *(float *)(*(_QWORD *)&a1[4] + 20);
      a1[22].f32[0] = v10;
      a1[14].i32[0] = *a3;
      a1[14].i32[1] = a3[1];
      a1[33].i8[6] = fabsf(v10 + -1.0) > 0.000001;
      v11 = *(_QWORD *)(a2 + 432);
      v12 = *(float *)(v11 + 464);
      a1[37].f32[0] = v12;
      LODWORD(v9) = *(_DWORD *)(v11 + 468);
      a1[37].i32[1] = LODWORD(v9);
      v13 = a1[36].f32[0];
      v14 = v13 * *(float *)&v9;
      v15 = a1[36].f32[1];
      *(float *)&v9 = -(float)((float)(v15 * *(float *)&v9) - (float)(v13 * v12));
      a1[11].i32[0] = LODWORD(v9);
      a1[11].f32[1] = v14 + (float)(v15 * v12);
      v16 = fabsf(*(float *)&v9 + -1.0);
      a1[33].i8[4] = v16 > 0.000001;
      a1[38].i32[0] = *a4;
      a1[38].i32[1] = a4[1];
      a1[35].i32[0] = *a3;
      a1[35].i32[1] = a3[1];
      a1[13].i32[0] = *a3;
      LODWORD(v16) = a3[1];
      a1[13].i32[1] = LODWORD(v16);
      md::CollisionObject::setupShapeData((uint64_t)&a1[9], v16, 0.000001, v9);
      a1[21].i32[0] = a1[97].i32[0];
      if (a1[70].i8[6])
      {
        v17 = (_OWORD *)a1[83];
        if (!v17)
        {
          v17 = (_OWORD *)operator new();
          v18 = a1[83];
          a1[83] = (float32x2_t)v17;
          if (v18)
          {
            MEMORY[0x1A1AF4E00](*(_QWORD *)&v18, 0x1000C40AE2C30F4);
            v17 = (_OWORD *)a1[83];
          }
        }
        v19 = (double *)a1[5];
        memset(&v33[40], 0, 40);
        memset(&v34[8], 0, 32);
        memset(&v33[8], 0, 32);
        *(_QWORD *)v33 = 0x3FF0000000000000;
        *(_QWORD *)&v33[40] = 0x3FF0000000000000;
        *(_QWORD *)v34 = 0x3FF0000000000000;
        *(_QWORD *)&v34[40] = 0x3FF0000000000000;
        *(_QWORD *)&v25 = 0;
        if (a1[38])
        {
          memset(&v33[8], 0, 32);
          *(_QWORD *)v33 = 0x3FF0000000000000;
          *(_QWORD *)&v33[40] = 0x3FF0000000000000;
          memset(&v33[48], 0, 32);
          v20 = vcvtq_f64_f32(a1[38]);
          *(_OWORD *)v34 = xmmword_19FFB32C0;
          *(float64x2_t *)&v34[16] = v20;
          *(_OWORD *)&v34[32] = xmmword_19FFB33A0;
        }
        if (v19)
        {
          gm::operator*<double,4,4,4>((double *)&v25, v19, (double *)v33);
        }
        else
        {
          v29 = *(_OWORD *)&v33[64];
          v30 = *(_OWORD *)v34;
          v31 = *(_OWORD *)&v34[16];
          v32 = *(_OWORD *)&v34[32];
          v25 = *(_OWORD *)v33;
          v26 = *(_OWORD *)&v33[16];
          v27 = *(_OWORD *)&v33[32];
          v28 = *(_OWORD *)&v33[48];
        }
        v21 = v26;
        *v17 = v25;
        v17[1] = v21;
        v22 = v28;
        v17[2] = v27;
        v17[3] = v22;
        v23 = v30;
        v17[4] = v29;
        v17[5] = v23;
        v24 = v32;
        v17[6] = v31;
        v17[7] = v24;
        a1[23] = (float32x2_t)v17;
      }
      return 37;
    }
    else
    {
      return 13;
    }
  }
  return result;
}

void md::AnimatedTextureLabelPart::updateForDisplay(int8x16_t *this)
{
  __int8 *v2;
  uint64_t v3;
  _DWORD *v4;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;

  this[40].i32[1] = this[40].i32[2];
  v2 = &this[19].i8[8];
  md::CollisionObject::resetWithRects((void **)&this[19].i64[1], 1u);
  if (this[40].i8[0])
  {
    v3 = this[30].u32[2];
    v4 = (_DWORD *)(this[29].i64[1] + 16 * v3);
    *v4 = this[39].i32[0];
    v4[1] = this[39].i32[1];
    v4[2] = this[39].i32[2];
    v4[3] = this[39].i32[3];
    v5 = *(int8x16_t *)v2;
    v6 = this[39];
    v7.i64[0] = this[39].i64[0];
    v7.i64[1] = *((_QWORD *)v2 + 1);
    v8.i64[0] = *(_QWORD *)v2;
    v8.i64[1] = this[39].i64[1];
    this[30].i32[2] = v3 + 1;
    *(int8x16_t *)v2 = vbslq_s8((int8x16_t)vcgtq_f32(v8, v7), v6, v5);
    this[48].i32[3] = this[48].i32[2];
  }
  else
  {
    v9 = std::__throw_bad_optional_access[abi:nn180100]();
    md::AnimatedTextureLabelPart::layoutForDisplay(v9);
  }
}

uint64_t md::AnimatedTextureLabelPart::layoutForDisplay(float32x2_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  BOOL v24;
  _OWORD *v25;
  double *v26;
  float64x2_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[80];
  _BYTE v43[48];

  v8 = *(float *)(a2 + 904);
  a1[67].f32[0] = v8;
  v9 = *(float *)(a2 + 908);
  a1[67].f32[1] = v9;
  v10 = a1[66].f32[0];
  v11 = v10 * v9;
  v12 = a1[66].f32[1];
  v13 = -(float)((float)(v12 * v9) - (float)(v10 * v8));
  v14 = v11 + (float)(v12 * v8);
  a1[41].f32[0] = v13;
  a1[41].f32[1] = v14;
  v15 = fabsf(v13 + -1.0);
  a1[63].i8[4] = v15 > 0.000001;
  v16 = a5->f32[0];
  a1[68].i32[0] = a5->i32[0];
  v17 = a5->f32[1];
  a1[68].f32[1] = v17;
  v18 = a1[89];
  v19 = a1[88];
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v18 - *(_QWORD *)&v19) >> 4) <= a1[70].u8[3])
  {
    if (*(_QWORD *)&v19 == *(_QWORD *)&v18 || !a1[96].i8[1])
      goto LABEL_15;
  }
  else
  {
    *(_QWORD *)&v19 += 144 * a1[70].u8[3];
  }
  if (v19)
  {
    v20 = *(_QWORD *)(*(_QWORD *)&v19 + 72);
    if (v20)
    {
      a1[84].f32[0] = fmaxf(fminf(*(float *)(*(_QWORD *)&v19 + 80)+ (float)(*(float *)(*(_QWORD *)v20 + 32 * *(unsigned int *)(v20 + 32) + 8)* (float)(*(float *)(*(_QWORD *)&v19 + 84) - *(float *)(*(_QWORD *)&v19 + 80))), 1.0), 0.0);
      a1[84].i8[4] = 1;
    }
    v21 = *(_QWORD *)(*(_QWORD *)&v19 + 88);
    if (v21)
    {
      v22 = (float)(*(float *)(*(_QWORD *)v21 + 32 * *(unsigned int *)(v21 + 32) + 8) + -0.5) * a1[80].f32[1];
      v23 = v14 * v22;
      v24 = v15 <= 0.000001;
      if (v15 <= 0.000001)
        v13 = 1.0;
      LODWORD(v15) = 0;
      if (v24)
        v23 = 0.0;
      a1[68].f32[0] = v16 + (float)(v22 * v13);
      a1[68].f32[1] = v17 + v23;
    }
  }
LABEL_15:
  v25 = (_OWORD *)a1[82];
  v26 = (double *)a1[6];
  memset(&v42[40], 0, 40);
  memset(&v43[8], 0, 32);
  memset(&v42[8], 0, 32);
  *(_QWORD *)v42 = 0x3FF0000000000000;
  *(_QWORD *)&v42[40] = 0x3FF0000000000000;
  *(_QWORD *)v43 = 0x3FF0000000000000;
  *(_QWORD *)&v43[40] = 0x3FF0000000000000;
  *(_QWORD *)&v34 = 0;
  if (a1[68])
  {
    memset(&v42[8], 0, 32);
    *(_QWORD *)v42 = 0x3FF0000000000000;
    *(_QWORD *)&v42[40] = 0x3FF0000000000000;
    memset(&v42[48], 0, 32);
    v27 = vcvtq_f64_f32(a1[68]);
    *(_OWORD *)v43 = xmmword_19FFB32C0;
    *(float64x2_t *)&v43[16] = v27;
    *(_OWORD *)&v43[32] = xmmword_19FFB33A0;
  }
  if (v26)
  {
    gm::operator*<double,4,4,4>((double *)&v34, v26, (double *)v42);
  }
  else
  {
    v38 = *(_OWORD *)&v42[64];
    v39 = *(_OWORD *)v43;
    v40 = *(_OWORD *)&v43[16];
    v41 = *(_OWORD *)&v43[32];
    v34 = *(_OWORD *)v42;
    v35 = *(_OWORD *)&v42[16];
    v36 = *(_OWORD *)&v42[32];
    v37 = *(_OWORD *)&v42[48];
  }
  v28 = v35;
  *v25 = v34;
  v25[1] = v28;
  v29 = v37;
  v25[2] = v36;
  v25[3] = v29;
  v30 = v39;
  v25[4] = v38;
  v25[5] = v30;
  v31 = v41;
  v25[6] = v40;
  v25[7] = v31;
  a1[53] = (float32x2_t)v25;
  *(float32x2_t *)&v31 = *a5;
  v32 = COERCE_DOUBLE(vadd_f32(*a5, *a4));
  *(double *)&a1[65] = v32;
  *(double *)&a1[43] = v32;
  md::CollisionObject::setupShapeData((uint64_t)&a1[39], v32, *(double *)&v31, v15);
  a1[51].i32[0] = a1[97].i32[1];
  return 37;
}

void md::AnimatedTextureLabelPart::pushToRenderModel(md::AnimatedTextureLabelPart *this, gdc::Registry **a2, float a3)
{
  float v4;
  uint64_t v5;
  int v6;
  gdc::Registry *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 676))
    a3 = *((float *)this + 168);
  v4 = *((float *)this + 196) * a3;
  if (v4 >= 0.0039062)
  {
    *((_WORD *)this + 295) = *((_WORD *)this + 279);
    v5 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v5 + 78))
      v6 = *(_DWORD *)(v5 + 72);
    else
      v6 = 0;
    *((_DWORD *)this + 152) = v6;
    *((_BYTE *)this + 586) = *((_BYTE *)this + 556);
    *((_BYTE *)this + 585) = 0;
    *((_BYTE *)this + 592) = *(_BYTE *)(v5 + 77) ^ 1;
    v7 = *a2;
    v8 = gdc::Registry::create(*a2);
    v13 = (char *)this + 584;
    v9 = (uint64_t *)gdc::Registry::storage<md::LabelRenderDescriptorComponent>((uint64_t)v7);
    gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v9, v8, &v13);
    LODWORD(v13) = 1;
    v10 = v14;
    v14[0] = &off_1E42D1E10;
    v14[1] = this;
    v15 = v14;
    v11 = (uint64_t *)gdc::Registry::storage<md::IconMeshDescriptor>((uint64_t)v7);
    gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::emplace(v11, v8, (uint64_t)&v13);
    if (v15 == v14)
    {
      v12 = 4;
      goto LABEL_11;
    }
    if (v15)
    {
      v12 = 5;
      v10 = v15;
LABEL_11:
      (*(void (**)(_QWORD *))(*v10 + 8 * v12))(v10);
    }
  }
  *((float *)this + 138) = fmaxf(fminf(v4, 1.0), 0.0);
}

void sub_19F4E8A3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F4E8A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  _QWORD *v13;
  uint64_t v15;

  if (a13 == v13)
  {
    v15 = 4;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
    v13 = a13;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
  _Unwind_Resume(exception_object);
}

uint64_t md::AnimatedTextureLabelPart::stagingModelMatrix(md::AnimatedTextureLabelPart *this)
{
  return *((_QWORD *)this + 83);
}

uint64_t md::AnimatedTextureLabelPart::modelMatrix(md::AnimatedTextureLabelPart *this)
{
  return *((_QWORD *)this + 82);
}

uint64_t md::AnimatedTextureLabelPart::checkResourcesReady(md::AnimatedTextureLabelPart *this, LabelManager *a2)
{
  if (*((_QWORD *)this + 72))
    return 37;
  else
    return 16;
}

void md::AnimatedTextureLabelPart::animate(md::AnimatedTextureLabelPart *this, __n128 a2)
{
  md::LabelAnimationTrack **v3;
  md::LabelAnimationTrack **v4;
  char v5;
  md::LabelAnimationTrack *v6;

  if (!*((_BYTE *)this + 768))
  {
    if (*((_BYTE *)this + 770))
    {
      if (a2.n128_f32[0] < 100.0 && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 86) + 1192) + 52) != 2)
        return;
      *((_BYTE *)this + 770) = 0;
    }
    *((float *)this + 175) = *((float *)this + 175) + a2.n128_f32[0];
    v3 = (md::LabelAnimationTrack **)*((_QWORD *)this + 92);
    v4 = (md::LabelAnimationTrack **)*((_QWORD *)this + 93);
    if (v3 == v4)
      goto LABEL_10;
    v5 = 0;
    do
    {
      a2.n128_u32[0] = *((_DWORD *)this + 175);
      md::LabelAnimationTrack::runAnimation(*v3, a2);
      v6 = *v3++;
      v5 |= *((_BYTE *)v6 + 40) == 0;
    }
    while (v3 != v4);
    if ((v5 & 1) == 0)
LABEL_10:
      *((_BYTE *)this + 768) = 1;
  }
}

BOOL md::AnimatedTextureLabelPart::isAnimating(md::AnimatedTextureLabelPart *this)
{
  return *((_BYTE *)this + 768) == 0;
}

void md::AnimatedTextureLabelPart::debugString(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t md::AnimatedTextureLabelPart::publicName(md::AnimatedTextureLabelPart *this)
{
  return 0;
}

uint64_t gdc::Registry::storage<md::LabelRenderDescriptorComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDBED3D0EB1B02542;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDBED3D0EB1B02542;
      if (*(_QWORD *)&v3 <= 0xDBED3D0EB1B02542)
        v5 = 0xDBED3D0EB1B02542 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDBED3D0EB1B02542;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDBED3D0EB1B02542)
            {
              if (v7[2] == 0xDBED3D0EB1B02542)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDBED3D0EB1B02542)
          {
            if (v7[2] == 0xDBED3D0EB1B02542)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::LabelRenderDescriptorComponent]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3D98;
  *(_QWORD *)(v11 + 8) = 0xDBED3D0EB1B02542;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDBED3D0EB1B02542, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDBED3D0EB1B02542;
  v15[1] = "md::LabelRenderDescriptorComponent]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDBED3D0EB1B02542, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4E8D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::IconMeshDescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC82ACB2A56DD1709;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC82ACB2A56DD1709;
      if (*(_QWORD *)&v3 <= 0xC82ACB2A56DD1709)
        v5 = 0xC82ACB2A56DD1709 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC82ACB2A56DD1709;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC82ACB2A56DD1709)
            {
              if (v7[2] == 0xC82ACB2A56DD1709)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC82ACB2A56DD1709)
          {
            if (v7[2] == 0xC82ACB2A56DD1709)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::IconMeshDescriptor]";
  *(_QWORD *)(v11 + 24) = 22;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3978;
  *(_QWORD *)(v11 + 8) = 0xC82ACB2A56DD1709;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC82ACB2A56DD1709, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC82ACB2A56DD1709;
  v15[1] = "md::IconMeshDescriptor]";
  v15[2] = 22;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC82ACB2A56DD1709, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F4E8FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;

  v44 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v44);
  if ((v6 & 1) != 0)
  {
    v12 = a1[12];
    v13 = a1[11];
    if (v13 < v12)
    {
      *(_DWORD *)v13 = *(_DWORD *)a3;
      v14 = v13 + 8;
      v15 = *(_QWORD *)(a3 + 32);
      if (v15)
      {
        if (v15 == a3 + 8)
        {
          *(_QWORD *)(v13 + 32) = v14;
          (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 24))(*(_QWORD *)(a3 + 32));
          goto LABEL_38;
        }
        v15 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v14);
      }
      *(_QWORD *)(v13 + 32) = v15;
LABEL_38:
      v30 = v13 + 40;
      a1[11] = v30;
LABEL_59:
      a1[11] = v30;
      v23 = a1[31];
      goto LABEL_60;
    }
    v16 = a1[10];
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v16) >> 3);
    if (v17 + 1 > 0x666666666666666)
      goto LABEL_65;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v16) >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= v17 + 1)
      v19 = v17 + 1;
    if (v18 >= 0x333333333333333)
      v20 = 0x666666666666666;
    else
      v20 = v19;
    v49 = a1 + 12;
    if (v20)
    {
      if (v20 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (uint64_t *)operator new(40 * v20);
    }
    else
    {
      v21 = 0;
    }
    v26 = &v21[5 * v17];
    v46 = v21;
    v47 = (uint64_t)v26;
    *(_QWORD *)&v48 = v26;
    *((_QWORD *)&v48 + 1) = &v21[5 * v20];
    *(_DWORD *)v26 = *(_DWORD *)a3;
    v27 = v26 + 1;
    v28 = *(_QWORD *)(a3 + 32);
    if (v28)
    {
      if (v28 == a3 + 8)
      {
        v21[5 * v17 + 4] = (uint64_t)v27;
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
        v26 = (uint64_t *)v47;
        v29 = (char *)v48;
        goto LABEL_40;
      }
      v21[5 * v17 + 4] = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v28 + 16))(v28, v27);
    }
    else
    {
      v21[5 * v17 + 4] = 0;
    }
    v29 = (char *)&v21[5 * v17];
LABEL_40:
    v30 = (uint64_t)(v29 + 40);
    *(_QWORD *)&v48 = v29 + 40;
    v32 = (char *)a1[10];
    v31 = (char *)a1[11];
    if (v31 == v32)
    {
      a1[10] = (uint64_t)v26;
      a1[11] = v30;
      a1[12] = *((_QWORD *)&v48 + 1);
LABEL_57:
      if (v31)
        operator delete(v31);
      goto LABEL_59;
    }
    v33 = 0;
    do
    {
      v34 = &v26[v33];
      v35 = &v31[v33 * 8];
      LODWORD(v26[v33 - 5]) = *(_DWORD *)&v31[v33 * 8 - 40];
      v36 = *(char **)&v31[v33 * 8 - 8];
      if (v36)
      {
        if (v35 - 32 == v36)
        {
          *(v34 - 1) = (uint64_t)(v34 - 4);
          (*(void (**)(_QWORD))(**((_QWORD **)v35 - 1) + 24))(*((_QWORD *)v35 - 1));
        }
        else
        {
          *(v34 - 1) = (uint64_t)v36;
          *((_QWORD *)v35 - 1) = 0;
        }
      }
      else
      {
        *(v34 - 1) = 0;
      }
      v33 -= 5;
    }
    while (&v31[v33 * 8] != v32);
    v37 = &v26[v33];
    v31 = (char *)a1[10];
    v38 = (char *)a1[11];
    a1[10] = (uint64_t)v37;
    v39 = v48;
    *(_OWORD *)(a1 + 11) = v48;
    v30 = v39;
    while (1)
    {
      if (v38 == v31)
        goto LABEL_57;
      v40 = (char *)*((_QWORD *)v38 - 1);
      if (v38 - 32 == v40)
        break;
      if (v40)
      {
        v41 = 5;
        goto LABEL_50;
      }
LABEL_51:
      v38 -= 40;
    }
    v40 = v38 - 32;
    v41 = 4;
LABEL_50:
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
    goto LABEL_51;
  }
  v7 = a1[10] + 40 * (((uint64_t)v5 - a1[7]) >> 3);
  *(_DWORD *)v7 = *(_DWORD *)a3;
  v8 = v7 + 8;
  v10 = (uint64_t *)(v7 + 32);
  v9 = *(_QWORD **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = 0;
  if (v9 == (_QWORD *)(v7 + 8))
  {
    v11 = 4;
    v9 = (_QWORD *)(v7 + 8);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_21:
  v22 = *(_QWORD *)(a3 + 32);
  if (v22)
  {
    if (v22 == a3 + 8)
    {
      *v10 = v8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 32) + 24))(*(_QWORD *)(a3 + 32), v8);
    }
    else
    {
      *v10 = v22;
      *(_QWORD *)(a3 + 32) = 0;
    }
  }
  else
  {
    *v10 = 0;
  }
  v23 = a1[31];
  if (v7 != a1[11])
  {
    v24 = (_QWORD *)a1[16];
    if (v24)
    {
      while (1)
      {
        v46 = &v44;
        v47 = 1;
        v45 = v23;
        v25 = v24[6];
        if (!v25)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v25 + 48))(v25, &v45, &v46);
        v24 = (_QWORD *)*v24;
        if (!v24)
          return;
      }
LABEL_64:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_65:
      abort();
    }
    return;
  }
LABEL_60:
  v42 = (_QWORD *)a1[22];
  if (v42)
  {
    while (1)
    {
      v46 = &v44;
      v47 = 1;
      v45 = v23;
      v43 = v42[6];
      if (!v43)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v43 + 48))(v43, &v45, &v46);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return;
    }
    goto LABEL_64;
  }
}

void sub_19F4E93B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<md::IconMeshDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F4E93C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::IconMeshDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v6 = v2 - 40;
        *(_QWORD *)(a1 + 16) = v2 - 40;
        v4 = *(_QWORD **)(v2 - 8);
        if (v4 != (_QWORD *)(v2 - 32))
          break;
        v4 = (_QWORD *)(v2 - 32);
        v5 = 4;
LABEL_4:
        (*(void (**)(void))(*v4 + 8 * v5))();
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_9;
      }
      if (v4)
      {
        v5 = 5;
        goto LABEL_4;
      }
      v2 -= 40;
    }
    while (v6 != v3);
  }
LABEL_9:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *v14 = *(_DWORD *)(v15 - 40);
  v16 = v14 + 2;
  v17 = *(_QWORD *)(v15 - 8);
  if (v17)
  {
    v18 = v15 - 32;
    if (v17 == v18)
    {
      v30 = v29;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v29);
    }
    else
    {
      v30 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  else
  {
    v30 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v29, v16);
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_20;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_20:
  v21 = a1[11];
  v22 = *(_QWORD **)(v21 - 8);
  if (v22 == (_QWORD *)(v21 - 32))
  {
    v23 = 4;
    v22 = (_QWORD *)(v21 - 32);
    goto LABEL_24;
  }
  if (v22)
  {
    v23 = 5;
LABEL_24:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  a1[11] = v21 - 40;
  v24 = (_QWORD *)a1[28];
  if (v24)
  {
    v25 = a1[31];
    do
    {
      v29[0] = &v27;
      v29[1] = 1;
      v28 = v25;
      v26 = v24[6];
      if (!v26)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v26 + 48))(v26, &v28, v29);
      v24 = (_QWORD *)*v24;
    }
    while (v24);
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<md::IconMeshDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 == v2)
    {
LABEL_11:
      a1[11] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = (void *)a1[10];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)a1[4];
  if (v8)
  {
    v9 = (_QWORD *)a1[5];
    v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  return a1;
}

void std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1E10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1E10;
  a2[1] = v2;
  return result;
}

double std::__function::__func<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0,std::allocator<md::AnimatedTextureLabelPart::pushToRenderModel(md::LabelRenderModel &,float)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v10;
  int v11;
  __int128 v12;
  double result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a3 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v4 + 552);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a3 + 52) = _D0;
  if (*(_BYTE *)(v4 + 640))
  {
    v10 = *(_DWORD *)(v4 + 636);
    v11 = *(_DWORD *)(v4 + 624);
    *(_QWORD *)&v12 = *(_QWORD *)(v4 + 628);
  }
  else
  {
    *(_QWORD *)&v12 = 0xFF7FFFFF7F7FFFFFLL;
    v10 = -8388609;
    v11 = 2139095039;
  }
  *((_QWORD *)&v12 + 1) = v12;
  *(_DWORD *)a3 = v11;
  *(_OWORD *)(a3 + 4) = v12;
  *(_DWORD *)(a3 + 20) = v10;
  *(_DWORD *)(a3 + 24) = v11;
  *(_DWORD *)(a3 + 28) = v10;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_19FFB3480;
  return result;
}

void gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::LabelRenderDescriptorComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::LabelAnimator::~LabelAnimator(md::LabelAnimator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        v6 = (uint64_t *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *v5;
          if (*v5)
          {
            v5[1] = v7;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v7, v5[2] - v7);
          }
          MEMORY[0x1A1AF4E00](v5, 0x1020C4034EA8E73);
        }
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v4, *((_QWORD *)this + 9) - v4);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = *((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        v12 = *(void **)(v9 - 144);
        v9 -= 144;
        v11 = v12;
        if (v12 != *(void **)(v9 + 16))
          free(v11);
      }
      while (v9 != v8);
      v10 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v10, *((_QWORD *)this + 5) - v10);
  }
}

uint64_t md::AnimatedTextureLabelPart::AnimatedTextureLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(a1 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(a1 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(a1 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(_BYTE *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(_QWORD *)a1 = off_1E42A01E8;
  *(_QWORD *)(a1 + 576) = a4;
  *(_DWORD *)(a1 + 584) = 1;
  *(_BYTE *)(a1 + 588) = 10;
  *(_DWORD *)(a1 + 590) = 16842752;
  *(_BYTE *)(a1 + 594) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_WORD *)(a1 + 612) = 258;
  *(_BYTE *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 644) = 0;
  v5 = (uint64_t *)(a1 + 656);
  *(_BYTE *)(a1 + 676) = 0;
  v6 = a1 + 680;
  *(_DWORD *)(a1 + 621) = 0;
  *(_QWORD *)(a1 + 614) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  md::LabelAnimator::LabelAnimator(a1 + 680, a2, a3);
  *(_DWORD *)(a1 + 784) = 1065353216;
  *(_QWORD *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 588) = 7;
  *(_WORD *)(a1 + 616) = 1;
  *(_BYTE *)(a1 + 584) = 2;
  *(_BYTE *)(a1 + 593) = 0;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 576);
  v7 = operator new();
  v8 = *v5;
  *v5 = v7;
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40AE2C30F4);
  md::LabelAnimator::setupAnimations(v6, 19, (_BYTE *)a1);
  return a1;
}

void sub_19F4E9DE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::LabelAnimator *v2;
  uint64_t *v3;
  md::LabelAnimator *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  md::LabelAnimator::~LabelAnimator(v4);
  v6 = *(_QWORD *)(v1 + 664);
  *(_QWORD *)(v1 + 664) = 0;
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1000C40AE2C30F4);
  v7 = *v3;
  *v3 = 0;
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1000C40AE2C30F4);
  *(_QWORD *)v1 = off_1E42AF8C0;
  free(*(void **)(v1 + 472));
  free(*(void **)(v1 + 480));
  free(*(void **)(v1 + 496));
  free(*(void **)(v1 + 232));
  free(*(void **)(v1 + 240));
  free(*(void **)(v1 + 256));
  _Unwind_Resume(a1);
}

void md::AnimatedTextureLabelPart::setMeshRectForStaging(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;

  v3 = (_OWORD *)(a1 + 624);
  if (!*(_BYTE *)(a1 + 640))
  {
    *v3 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 640) = 1;
LABEL_6:
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    if (*(_BYTE *)(a1 + 640))
    {
      v4 = *(_QWORD *)(a1 + 232);
      v5 = *(unsigned int *)(a1 + 248);
      *(_DWORD *)(a1 + 248) = v5 + 1;
      v6 = (_DWORD *)(v4 + 16 * v5);
      *v6 = *(_DWORD *)(a1 + 624);
      v6[1] = *(_DWORD *)(a1 + 628);
      v6[2] = *(_DWORD *)(a1 + 632);
      v6[3] = *(_DWORD *)(a1 + 636);
      v7.i64[0] = *(_QWORD *)(a1 + 624);
      v7.i64[1] = *(_QWORD *)(a1 + 80);
      v8.i64[0] = *(_QWORD *)(a1 + 72);
      v8.i64[1] = *(_QWORD *)(a1 + 632);
      *(int8x16_t *)(a1 + 72) = vbslq_s8((int8x16_t)vcgtq_f32(v8, v7), *(int8x16_t *)(a1 + 624), *(int8x16_t *)(a1 + 72));
    }
    else
    {
      v9 = std::__throw_bad_optional_access[abi:nn180100]();
      std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(v9);
    }
    return;
  }
  if (*(_QWORD *)v3 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 632) != *(_QWORD *)(a2 + 8))
  {
    *(_DWORD *)(a1 + 624) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 628) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 636) = *(_DWORD *)(a2 + 12);
    goto LABEL_6;
  }
}

uint64_t *std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = (uint64_t *)v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = v4[4];
        if (v8[4] >= v12)
          break;
      }
      v13 = (uint64_t **)v6;
      v14 = (uint64_t **)v6;
      if (!v7)
        goto LABEL_19;
      v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v14 = (uint64_t **)v8;
LABEL_19:
        v16 = (uint64_t *)operator new(0x30uLL);
        v17 = v16;
        v18 = v4[5];
        v16[4] = v4[4];
        v16[5] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v13 = v16;
        v21 = *(_QWORD *)*v5;
        if (v21)
        {
          *v5 = v21;
          v17 = *v13;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v17);
        ++v5[2];
      }
LABEL_25:
      v22 = (_QWORD *)v4[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v4[2];
          v11 = *v23 == (_QWORD)v4;
          v4 = v23;
        }
        while (!v11);
      }
      v4 = v23;
      if (v23 == a3)
        return result;
    }
    v13 = (uint64_t **)v6;
    v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v7;
          v15 = v7[4];
          if (v12 >= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 >= v12)
          goto LABEL_25;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

int8x8_t *md::mun::MuninNavigationGraph::MuninNavigationGraph(uint64_t *a1, _QWORD **a2)
{
  unint64_t v2;
  _QWORD *v3;
  int8x8_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  float v12;
  size_t prime;
  int8x8_t *v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  void **v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  int8x8_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  int8x8_t *v84;
  unint64_t *v85;
  int8x8_t *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;

  v3 = a2;
  v4 = (int8x8_t *)a1;
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v5 = a2 + 1;
  std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(a1, *a2, a2 + 1);
  *(_OWORD *)v4[3].i8 = 0u;
  *(_OWORD *)v4[5].i8 = 0u;
  v86 = v4 + 3;
  v4[7].i32[0] = 1065353216;
  v6 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v5)
  {
    v12 = 0.0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)v6[1];
      v9 = v6;
      if (v8)
      {
        do
        {
          v10 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v9[2];
          v11 = *v10 == (_QWORD)v9;
          v9 = v10;
        }
        while (!v11);
      }
      v7 += 0x63FB9AEB1FDCD759 * ((uint64_t)(*(_QWORD *)(v6[4] + 176) - *(_QWORD *)(v6[4] + 168)) >> 3);
      v6 = v10;
    }
    while (v10 != v5);
    v12 = (float)v7;
  }
  prime = vcvtps_u32_f32(v12);
  v84 = v4;
  if (prime == 1)
  {
    v85 = (unint64_t *)&v4[4];
    prime = 2;
LABEL_30:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v86, prime);
    goto LABEL_31;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v14 = v4;
    v15 = v4[4];
  }
  else
  {
    v14 = v4;
    v15 = 0;
  }
  v85 = (unint64_t *)&v14[4];
  if (prime > *(_QWORD *)&v15)
  {
    v4 = v84;
    goto LABEL_30;
  }
  if (prime < *(_QWORD *)&v15)
  {
    v16 = vcvtps_u32_f32((float)(unint64_t)v84[6] / *(float *)v84[7].i32);
    if (*(_QWORD *)&v15 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v15), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v16 = std::__next_prime(v16);
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
    }
    if (prime <= v16)
      prime = v16;
    v19 = prime >= *(_QWORD *)&v15;
    v4 = v84;
    if (v19)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = v84;
LABEL_31:
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v20 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v5)
    return v4;
  v21 = 0;
  v80 = v4 + 5;
  v78 = v3;
  do
  {
    v77 = v20;
    v22 = v20[4];
    v23 = *(_QWORD *)(v22 + 168);
    v24 = *(_QWORD *)(v22 + 176);
    if (v23 != v24)
    {
      if ((_QWORD *)*v3 != v5)
      {
        v79 = *(_QWORD *)(v22 + 176);
        while (1)
        {
          v90 = v21;
          v87 = *(_OWORD *)(v23 + 8);
          v88 = *(_QWORD *)(v23 + 24);
          v25 = (_QWORD *)*v3;
          if ((_QWORD *)*v3 != v5)
          {
            do
            {
              md::mun::MuninMetadata::neighborsWithinRadius(v25[4], (double *)&v87, (uint64_t)&v89, 0, 25.0);
              v26 = (_QWORD *)v25[1];
              if (v26)
              {
                do
                {
                  v27 = v26;
                  v26 = (_QWORD *)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  v27 = (_QWORD *)v25[2];
                  v11 = *v27 == (_QWORD)v25;
                  v25 = v27;
                }
                while (!v11);
              }
              v25 = v27;
            }
            while (v27 != v5);
            v21 = v89;
            v28 = v90;
            if (v89 != v90)
              break;
          }
LABEL_38:
          v23 += 1864;
          if (v23 == v24)
            goto LABEL_135;
        }
        v29 = 0x9DDFEA08EB382D69 * (((8 * v23) + 8) ^ HIDWORD(v23));
        v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v23) ^ (v29 >> 47) ^ v29);
        v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
        v81 = v89;
        v32 = v89;
        while (1)
        {
          v34 = *v32;
          if (*v32 == v23
            || *(_QWORD *)v34 == *(_QWORD *)v23
            || vabdd_f64(*(double *)(v34 + 72), *(double *)(v23 + 72)) > 4.0)
          {
            goto LABEL_52;
          }
          v35 = *v85;
          if (*v85)
          {
            v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              v2 = v31;
              if (v31 >= v35)
                v2 = v31 % v35;
            }
            else
            {
              v2 = v31 & (v35 - 1);
            }
            v37 = *(void ***)(*(_QWORD *)v86 + 8 * v2);
            if (v37)
            {
              v38 = (char *)*v37;
              if (*v37)
              {
                if (v36.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v40 = *((_QWORD *)v38 + 1);
                    if (v40 == v31)
                    {
                      if (*((_QWORD *)v38 + 2) == v23)
                        goto LABEL_114;
                    }
                    else if ((v40 & (v35 - 1)) != v2)
                    {
                      goto LABEL_76;
                    }
                    v38 = *(char **)v38;
                    if (!v38)
                      goto LABEL_76;
                  }
                }
                do
                {
                  v39 = *((_QWORD *)v38 + 1);
                  if (v39 == v31)
                  {
                    if (*((_QWORD *)v38 + 2) == v23)
                      goto LABEL_114;
                  }
                  else
                  {
                    if (v39 >= v35)
                      v39 %= v35;
                    if (v39 != v2)
                      break;
                  }
                  v38 = *(char **)v38;
                }
                while (v38);
              }
            }
          }
LABEL_76:
          v38 = (char *)operator new(0x68uLL);
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = v31;
          *((_QWORD *)v38 + 2) = v23;
          *((_QWORD *)v38 + 3) = v38 + 56;
          *((_QWORD *)v38 + 4) = v38 + 56;
          *((_QWORD *)v38 + 5) = v38 + 56;
          *((_QWORD *)v38 + 6) = 6;
          v41 = (float)(unint64_t)(*(_QWORD *)&v84[6] + 1);
          v42 = *(float *)v84[7].i32;
          if (!v35 || (float)(v42 * (float)v35) < v41)
          {
            v43 = (v35 & (v35 - 1)) != 0;
            if (v35 < 3)
              v43 = 1;
            v44 = v43 | (2 * v35);
            v45 = vcvtps_u32_f32(v41 / v42);
            if (v44 <= v45)
              v46 = v45;
            else
              v46 = v44;
            if (v46 == 1)
            {
              v46 = 2;
            }
            else if ((v46 & (v46 - 1)) != 0)
            {
              v46 = std::__next_prime(v46);
              v35 = *v85;
            }
            if (v46 > v35)
              goto LABEL_98;
            if (v46 < v35)
            {
              v47 = vcvtps_u32_f32((float)(unint64_t)v84[6] / *(float *)v84[7].i32);
              if (v35 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
              {
                v47 = std::__next_prime(v47);
              }
              else
              {
                v49 = 1 << -(char)__clz(v47 - 1);
                if (v47 >= 2)
                  v47 = v49;
              }
              if (v46 <= v47)
                v46 = v47;
              if (v46 < v35)
LABEL_98:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v86, v46);
            }
            v35 = *v85;
            v50 = *v85 - 1;
            if ((*v85 & v50) != 0)
            {
              if (v31 >= v35)
                v2 = v31 % v35;
              else
                v2 = v31;
            }
            else
            {
              v2 = v50 & v31;
            }
          }
          v51 = *v86;
          v52 = *(_QWORD **)(*(_QWORD *)v86 + 8 * v2);
          if (v52)
            break;
          *(int8x8_t *)v38 = *v80;
          *v80 = (int8x8_t)v38;
          *(_QWORD *)(*(_QWORD *)&v51 + 8 * v2) = v80;
          if (*(_QWORD *)v38)
          {
            v53 = *(_QWORD *)(*(_QWORD *)v38 + 8);
            if ((v35 & (v35 - 1)) != 0)
            {
              if (v53 >= v35)
                v53 %= v35;
            }
            else
            {
              v53 &= v35 - 1;
            }
            v52 = (_QWORD *)(*(_QWORD *)v86 + 8 * v53);
            goto LABEL_112;
          }
LABEL_113:
          ++*(_QWORD *)&v84[6];
LABEL_114:
          v54 = *((_QWORD *)v38 + 3);
          v33 = (_QWORD *)*((_QWORD *)v38 + 4);
          v55 = ((uint64_t)v33 - v54) >> 3;
          v56 = *((_QWORD *)v38 + 6);
          if (v56 >= v55 + 1)
            goto LABEL_51;
          v82 = *((_QWORD *)v38 + 5);
          v57 = (1 << -(char)__clz(v56 + 1));
          if (v56 >= 0xFFFFFFFFFFFFFFFELL)
            v57 = 1;
          if (v57 <= v55 + 1)
            v57 = v55 + 1;
          v83 = v57;
          v58 = (char *)malloc_type_malloc(8 * v57, 0x6004044C4A2DFuLL);
          v2 = (unint64_t)v58;
          v59 = (uint64_t *)*((_QWORD *)v38 + 3);
          v60 = (char *)*((_QWORD *)v38 + 4);
          if (v59 != (uint64_t *)v60)
          {
            v61 = v60 - (char *)v59 - 8;
            if (v61 < 0x18)
            {
              v62 = v58;
            }
            else
            {
              v62 = v58;
              if ((unint64_t)(v58 - (char *)v59) >= 0x20)
              {
                v63 = (v61 >> 3) + 1;
                v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                v62 = &v58[v64];
                v65 = (__int128 *)(v59 + 2);
                v66 = v58 + 16;
                v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v68 = *v65;
                  *(v66 - 1) = *(v65 - 1);
                  *v66 = v68;
                  v65 += 2;
                  v66 += 2;
                  v67 -= 4;
                }
                while (v67);
                if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_128;
                v59 = (uint64_t *)((char *)v59 + v64);
              }
            }
            do
            {
              v69 = *v59++;
              *(_QWORD *)v62 = v69;
              v62 += 8;
            }
            while (v59 != (uint64_t *)v60);
          }
LABEL_128:
          if (v54 != v82)
            free(*((void **)v38 + 3));
          v33 = (_QWORD *)(v2 + 8 * v55);
          *((_QWORD *)v38 + 3) = v2;
          *((_QWORD *)v38 + 4) = v33;
          *((_QWORD *)v38 + 6) = v83;
LABEL_51:
          *v33 = v34;
          *((_QWORD *)v38 + 4) += 8;
LABEL_52:
          if (++v32 == v28)
          {
            v3 = v78;
            v24 = v79;
            v21 = v81;
            goto LABEL_38;
          }
        }
        *(_QWORD *)v38 = *v52;
LABEL_112:
        *v52 = v38;
        goto LABEL_113;
      }
      v90 = v21;
      v70 = v24 - v23 - 1864;
      if (v70 < 0x748)
        goto LABEL_146;
      v71 = v70 / 0x748 + 1;
      v23 += 1864 * (v71 & 0x7FFFFFFFFFFFFELL);
      v72 = v71 & 0x7FFFFFFFFFFFFELL;
      do
        v72 -= 2;
      while (v72);
      if (v71 != (v71 & 0x7FFFFFFFFFFFFELL))
      {
LABEL_146:
        do
          v23 += 1864;
        while (v23 != v24);
      }
    }
LABEL_135:
    v73 = v77;
    v74 = (_QWORD *)v77[1];
    if (v74)
    {
      do
      {
        v75 = v74;
        v74 = (_QWORD *)*v74;
      }
      while (v74);
    }
    else
    {
      do
      {
        v75 = (_QWORD *)v73[2];
        v11 = *v75 == (_QWORD)v73;
        v73 = v75;
      }
      while (!v11);
    }
    v20 = v75;
    v4 = v84;
  }
  while (v75 != v5);
  if (v21)
    operator delete(v21);
  return v4;
}

void `anonymous namespace'::PriorityQueueWrapper<`anonymous namespace'::PointPathTrace,double>::emplace(double **a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  double *v19;
  __int128 v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double *v31;
  int v32;

  v9 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a1;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v9 - *a1);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = 24 * v15;
    v17 = (char *)operator new(24 * v15);
    v18 = &v17[24 * v12];
    *(double *)v18 = a4;
    v19 = (double *)&v17[v16];
    *((_QWORD *)v18 + 1) = a2;
    *((_QWORD *)v18 + 2) = a3;
    v10 = (double *)(v18 + 24);
    if (v9 != v11)
    {
      do
      {
        v20 = *(_OWORD *)(v9 - 3);
        *((double *)v18 - 1) = *(v9 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 24;
        v9 -= 3;
      }
      while (v9 != v11);
      v9 = v11;
    }
    *a1 = (double *)v18;
    a1[1] = v10;
    a1[2] = v19;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a4;
    v10 = v9 + 3;
    *((_QWORD *)v9 + 1) = a2;
    *((_QWORD *)v9 + 2) = a3;
  }
  a1[1] = v10;
  v21 = *a1;
  v22 = (char *)v10 - (char *)*a1;
  if (v22 >= 25)
  {
    v23 = (v22 / 0x18uLL - 2) >> 1;
    v24 = &v21[3 * v23];
    v25 = v10 - 3;
    v26 = *(v10 - 3);
    v27 = *v24;
    v28 = *((_QWORD *)v10 - 2);
    v29 = *v24 <= v26 ? -1 : 1;
    if (v29 >= 1)
    {
      v30 = *((_QWORD *)v10 - 1);
      do
      {
        v31 = v25;
        v25 = v24;
        *v31 = v27;
        *(_OWORD *)(v31 + 1) = *(_OWORD *)(v24 + 1);
        if (!v23)
          break;
        v23 = (v23 - 1) >> 1;
        v24 = &v21[3 * v23];
        v27 = *v24;
        v32 = *v24 <= v26 ? -1 : 1;
      }
      while (v32 > 0);
      *v25 = v26;
      *((_QWORD *)v25 + 1) = v28;
      *((_QWORD *)v25 + 2) = v30;
    }
  }
}

void md::RenderItemPool::~RenderItemPool(md::RenderItemPool *this)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD **)this;
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = *(_QWORD ***)this;
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = *(_QWORD ***)this;
  }
  free(v6);
}

void ggl::Batcher::~Batcher(ggl::Batcher *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 3);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 4);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v5, *((_QWORD *)this + 5) - v5);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6500;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D18B8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 456);
  v5 = *(std::__shared_weak_count **)(v1 + 464);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B7328;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1910;
  v12 = v10 + 1;
  ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE55E4F0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PrefilteredLine::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9210;
  v13 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v15 = ggl::BufferData::BufferData((uint64_t)&v13[1], qword_1EE55EB88, 2, 1, 6, 1);
  v13[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v16 = v3[8];
  *(_QWORD *)(v16 + 32) = v15;
  *(_QWORD *)(v16 + 40) = 0;
  v17 = v3[20];
  do
    v18 = __ldxr(v14);
  while (__stxr(v18 + 1, v14));
  v19 = *(std::__shared_weak_count **)(v17 + 40);
  *(_QWORD *)(v17 + 32) = v15;
  *(_QWORD *)(v17 + 40) = v13;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v3[8];
  *(_QWORD *)(v22 + 16) = v12;
  *(_QWORD *)(v22 + 24) = 0;
  v23 = v3[20];
  do
    v24 = __ldxr(v11);
  while (__stxr(v24 + 1, v11));
  v25 = *(std::__shared_weak_count **)(v23 + 24);
  *(_QWORD *)(v23 + 16) = v12;
  *(_QWORD *)(v23 + 24) = v10;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  do
    v28 = __ldaxr(v14);
  while (__stlxr(v28 - 1, v14));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v29 = __ldaxr(v11);
  while (__stlxr(v29 - 1, v11));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void sub_19F4EAF98(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::Fog::Skyfog>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Fog::Skyfog>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Fog::Skyfog>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PrefilteredLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1870;
  return result;
}

int64x2_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "3D Stroke";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6C50;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1828;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(std::__shared_weak_count **)(v1 + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BA670;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D00;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE559170, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::BuildingFlatStroke::Building::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9470;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlatStroke::Building>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D17E0;
  return result;
}

int64x2_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Shadow";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6308;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1798;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 440);
  v5 = *(std::__shared_weak_count **)(v1 + 448);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B69A8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1478;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE56B5C0, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::BuildingShadow::Shadow::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8F50;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingShadow::Shadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10RenderItemEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10RenderItemEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D60C8;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1750;
  return result;
}

int64x2_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Building";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__shared_ptr_emplace<ggl::RenderState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEA08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7160;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25DiffuseBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7160;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_11>,ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 184);
  v6 = *(std::__shared_weak_count **)(v2 + 192);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BB2E0;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v55 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v54 = a1;
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v14[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v17 = v14;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v20 = v18 + 1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v21 = v4[8];
  *(_QWORD *)(v21 + 32) = v13;
  *(_QWORD *)(v21 + 40) = 0;
  v22 = v4[20];
  do
    v23 = __ldxr(v12);
  while (__stxr(v23 + 1, v12));
  v24 = *(std::__shared_weak_count **)(v22 + 40);
  *(_QWORD *)(v22 + 32) = v13;
  *(_QWORD *)(v22 + 40) = v55;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v4[8];
  *(_QWORD *)(v27 + 48) = v16;
  *(_QWORD *)(v27 + 56) = 0;
  v28 = v4[20];
  do
    v29 = __ldxr(v15);
  while (__stxr(v29 + 1, v15));
  v30 = *(std::__shared_weak_count **)(v28 + 56);
  *(_QWORD *)(v28 + 48) = v16;
  *(_QWORD *)(v28 + 56) = v17;
  v31 = v17;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v20;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v20;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(uint64_t **)(v54 + 16);
  v41 = v4[8];
  v42 = *v40;
  v43 = v40[1];
  *(_QWORD *)(v41 + 96) = v42;
  *(_QWORD *)(v41 + 104) = 0;
  v44 = v4[20];
  if (v43)
  {
    v45 = (unint64_t *)(v43 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *(std::__shared_weak_count **)(v44 + 104);
  *(_QWORD *)(v44 + 96) = v42;
  *(_QWORD *)(v44 + 104) = v43;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v19);
  while (__stlxr(v50 - 1, v19));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v51 = __ldaxr(v15);
  while (__stlxr(v51 - 1, v15));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  do
    v52 = __ldaxr(v12);
  while (__stlxr(v52 - 1, v12));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  return v4;
}

void sub_19F4EC114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;
  unint64_t v15;

  do
    v14 = __ldaxr(v10);
  while (__stlxr(v14 - 1, v10));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v15 = __ldaxr(v12);
  while (__stlxr(v15 - 1, v12));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Gradient>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Building::Gradient>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Gradient>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Building::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Scale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Building::Scale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Scale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7118;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24FoggedDiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7118;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D16C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D16C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_10>,ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 168);
  v6 = *(std::__shared_weak_count **)(v2 + 176);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BB290;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4ECB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6C98;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18DiffuseBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6C98;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1678;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_9>,ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 136);
  v6 = *(std::__shared_weak_count **)(v2 + 144);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BA700;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4ED1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7238;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 264);
  v6 = *(std::__shared_weak_count **)(v2 + 272);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BB500;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v55 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v54 = a1;
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v14[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v17 = v14;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v20 = v18 + 1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v21 = v4[8];
  *(_QWORD *)(v21 + 32) = v13;
  *(_QWORD *)(v21 + 40) = 0;
  v22 = v4[20];
  do
    v23 = __ldxr(v12);
  while (__stxr(v23 + 1, v12));
  v24 = *(std::__shared_weak_count **)(v22 + 40);
  *(_QWORD *)(v22 + 32) = v13;
  *(_QWORD *)(v22 + 40) = v55;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v4[8];
  *(_QWORD *)(v27 + 48) = v16;
  *(_QWORD *)(v27 + 56) = 0;
  v28 = v4[20];
  do
    v29 = __ldxr(v15);
  while (__stxr(v29 + 1, v15));
  v30 = *(std::__shared_weak_count **)(v28 + 56);
  *(_QWORD *)(v28 + 48) = v16;
  *(_QWORD *)(v28 + 56) = v17;
  v31 = v17;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v20;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v20;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(uint64_t **)(v54 + 16);
  v41 = v4[8];
  v42 = *v40;
  v43 = v40[1];
  *(_QWORD *)(v41 + 96) = v42;
  *(_QWORD *)(v41 + 104) = 0;
  v44 = v4[20];
  if (v43)
  {
    v45 = (unint64_t *)(v43 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *(std::__shared_weak_count **)(v44 + 104);
  *(_QWORD *)(v44 + 96) = v42;
  *(_QWORD *)(v44 + 104) = v43;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v19);
  while (__stlxr(v50 - 1, v19));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v51 = __ldaxr(v15);
  while (__stlxr(v51 - 1, v15));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  do
    v52 = __ldaxr(v12);
  while (__stlxr(v52 - 1, v12));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  return v4;
}

void sub_19F4ED700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;
  unint64_t v15;

  do
    v14 = __ldaxr(v10);
  while (__stlxr(v14 - 1, v10));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v15 = __ldaxr(v12);
  while (__stlxr(v15 - 1, v12));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D71A8;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D15E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 248);
  v6 = *(std::__shared_weak_count **)(v2 + 256);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BB3D0;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4EDCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6D70;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D15A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 216);
  v6 = *(std::__shared_weak_count **)(v2 + 224);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BAA38;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4EE308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6DB8;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 152);
  v6 = *(std::__shared_weak_count **)(v2 + 160);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BAC08;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4EE928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6470;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 120);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42B6F68;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F4EEF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7040;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D14C8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 104);
  v5 = *(std::__shared_weak_count **)(v1 + 112);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BB100;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5565D8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6590;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1480;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 88);
  v5 = *(std::__shared_weak_count **)(v1 + 96);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B8620;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5565D8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6CE0;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1438;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BA838;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5565D8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D61A0;
  return result;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D13F0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6048;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1130;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE56E9B8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::BuildingFlat::Building::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8D50;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::BuildingFlat::Building>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::BuildingFlat::Building>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::BuildingFlat::Building>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF0D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF0D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E35F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E35F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E08E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E08E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E35B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E35B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::BuildingRenderResources::~BuildingRenderResources(md::BuildingRenderResources *this)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;

  v2 = (_QWORD *)*((_QWORD *)this + 108);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = (_QWORD **)*((_QWORD *)this + 108);
  *((_QWORD *)this + 109) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = (_QWORD **)*((_QWORD *)this + 108);
  }
  free(v6);
  v9 = (void *)*((_QWORD *)this + 105);
  if (v9)
  {
    *((_QWORD *)this + 106) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 101);
  if (v10)
  {
    v11 = *((_QWORD *)this + 102);
    v12 = *((_QWORD *)this + 101);
    if (v11 != v10)
    {
      v13 = *((_QWORD *)this + 102);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = *((_QWORD *)this + 101);
    }
    *((_QWORD *)this + 102) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 104) + 40))(*((_QWORD *)this + 104), v12, *((_QWORD *)this + 103) - v12);
  }
  v16 = (void *)*((_QWORD *)this + 98);
  if (v16)
  {
    *((_QWORD *)this + 99) = v16;
    operator delete(v16);
  }
  v17 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v17)
  {
    v18 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v17);
    MEMORY[0x1A1AF4E00](v18, 0x10A0C40D234DDC7);
  }
  v19 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v19)
  {
    v20 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v19);
    MEMORY[0x1A1AF4E00](v20, 0x10A0C40D234DDC7);
  }
  v21 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v21)
  {
    v22 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v21);
    MEMORY[0x1A1AF4E00](v22, 0x10A0C40D234DDC7);
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (!v23)
    goto LABEL_32;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    if (!v26)
      goto LABEL_38;
  }
  else
  {
LABEL_32:
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    if (!v26)
      goto LABEL_38;
  }
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_38:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 87);
  if (!v29)
    goto LABEL_42;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 85);
    if (!v32)
      goto LABEL_48;
  }
  else
  {
LABEL_42:
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 85);
    if (!v32)
      goto LABEL_48;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_48:
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  if (!v35)
    goto LABEL_52;
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
    if (!v38)
      goto LABEL_58;
  }
  else
  {
LABEL_52:
    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
    if (!v38)
      goto LABEL_58;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_58:
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
  if (!v41)
    goto LABEL_62;
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v44 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    if (!v44)
      goto LABEL_68;
  }
  else
  {
LABEL_62:
    v44 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
    if (!v44)
      goto LABEL_68;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_68:
  v47 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v47)
  {
    v48 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v47);
    MEMORY[0x1A1AF4E00](v48, 0x10A0C40D234DDC7);
  }
  v49 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v49)
  {
    v50 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v49);
    MEMORY[0x1A1AF4E00](v50, 0x10A0C40D234DDC7);
  }
  v51 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v51)
  {
    v52 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v51);
    MEMORY[0x1A1AF4E00](v52, 0x10A0C40D234DDC7);
  }
  v53 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v53)
  {
    v54 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v53);
    MEMORY[0x1A1AF4E00](v54, 0x10A0C40D234DDC7);
  }
  v55 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v55)
  {
    v56 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v55);
    MEMORY[0x1A1AF4E00](v56, 0x10A0C40D234DDC7);
  }
  v57 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v57)
  {
    v58 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v57);
    MEMORY[0x1A1AF4E00](v58, 0x10A0C40D234DDC7);
  }
  v59 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v59)
  {
    v60 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v59);
    MEMORY[0x1A1AF4E00](v60, 0x10A0C40D234DDC7);
  }
  v61 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v61)
  {
    v62 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v61);
    MEMORY[0x1A1AF4E00](v62, 0x10A0C40D234DDC7);
  }
  v63 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v63)
  {
    v64 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v63);
    MEMORY[0x1A1AF4E00](v64, 0x10A0C40D234DDC7);
  }
  v65 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v65)
  {
    v66 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v65);
    MEMORY[0x1A1AF4E00](v66, 0x10A0C40D234DDC7);
  }
  v67 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v67)
  {
    v68 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v67);
    MEMORY[0x1A1AF4E00](v68, 0x10A0C40D234DDC7);
  }
  v69 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v69)
  {
    v70 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v69);
    MEMORY[0x1A1AF4E00](v70, 0x10A0C40D234DDC7);
  }
  v71 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v71)
  {
    v72 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v71);
    MEMORY[0x1A1AF4E00](v72, 0x10A0C40D234DDC7);
  }
  v73 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v73)
  {
    v74 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v73);
    MEMORY[0x1A1AF4E00](v74, 0x10A0C40D234DDC7);
  }
  v75 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v75)
  {
    v76 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v75);
    MEMORY[0x1A1AF4E00](v76, 0x10A0C40D234DDC7);
  }
  v77 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v77)
  {
    v78 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v77);
    MEMORY[0x1A1AF4E00](v78, 0x10A0C40D234DDC7);
  }
  v79 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v79)
  {
    v80 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v79);
    MEMORY[0x1A1AF4E00](v80, 0x10A0C40D234DDC7);
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (!v81)
    goto LABEL_106;
  v82 = (unint64_t *)&v81->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
    v84 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
    if (!v84)
      goto LABEL_112;
  }
  else
  {
LABEL_106:
    v84 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
    if (!v84)
      goto LABEL_112;
  }
  v85 = (unint64_t *)&v84->__shared_owners_;
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
LABEL_112:
  v87 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  if (!v87)
    goto LABEL_116;
  v88 = (unint64_t *)&v87->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v90 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    if (!v90)
      goto LABEL_122;
  }
  else
  {
LABEL_116:
    v90 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    if (!v90)
      goto LABEL_122;
  }
  v91 = (unint64_t *)&v90->__shared_owners_;
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
LABEL_122:
  v93 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (!v93)
    goto LABEL_126;
  v94 = (unint64_t *)&v93->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    v96 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v96)
      goto LABEL_132;
  }
  else
  {
LABEL_126:
    v96 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (!v96)
      goto LABEL_132;
  }
  v97 = (unint64_t *)&v96->__shared_owners_;
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (!v98)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
LABEL_132:
  v99 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  if (!v99)
    goto LABEL_136;
  v100 = (unint64_t *)&v99->__shared_owners_;
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    v102 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    if (!v102)
      goto LABEL_142;
  }
  else
  {
LABEL_136:
    v102 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    if (!v102)
      goto LABEL_142;
  }
  v103 = (unint64_t *)&v102->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
LABEL_142:
  v105 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
  if (!v105)
    goto LABEL_146;
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    v108 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v108)
      goto LABEL_152;
  }
  else
  {
LABEL_146:
    v108 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (!v108)
      goto LABEL_152;
  }
  v109 = (unint64_t *)&v108->__shared_owners_;
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (!v110)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
LABEL_152:
  v111 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v111)
    goto LABEL_156;
  v112 = (unint64_t *)&v111->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
    v114 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v114)
      goto LABEL_162;
  }
  else
  {
LABEL_156:
    v114 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v114)
      goto LABEL_162;
  }
  v115 = (unint64_t *)&v114->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
  }
LABEL_162:
  v117 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (!v117)
    goto LABEL_166;
  v118 = (unint64_t *)&v117->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
    v120 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v120)
      goto LABEL_172;
  }
  else
  {
LABEL_166:
    v120 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v120)
      goto LABEL_172;
  }
  v121 = (unint64_t *)&v120->__shared_owners_;
  do
    v122 = __ldaxr(v121);
  while (__stlxr(v122 - 1, v121));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
  }
LABEL_172:
  v123 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v123)
    goto LABEL_176;
  v124 = (unint64_t *)&v123->__shared_owners_;
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    v126 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (!v126)
      goto LABEL_182;
  }
  else
  {
LABEL_176:
    v126 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (!v126)
      goto LABEL_182;
  }
  v127 = (unint64_t *)&v126->__shared_owners_;
  do
    v128 = __ldaxr(v127);
  while (__stlxr(v128 - 1, v127));
  if (!v128)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
LABEL_182:
  v129 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v129)
    goto LABEL_186;
  v130 = (unint64_t *)&v129->__shared_owners_;
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (!v131)
  {
    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
    std::__shared_weak_count::__release_weak(v129);
    v132 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v132)
      goto LABEL_192;
  }
  else
  {
LABEL_186:
    v132 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v132)
      goto LABEL_192;
  }
  v133 = (unint64_t *)&v132->__shared_owners_;
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 - 1, v133));
  if (!v134)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
  }
LABEL_192:
  v135 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v135)
    goto LABEL_196;
  v136 = (unint64_t *)&v135->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
    v138 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v138)
      goto LABEL_202;
  }
  else
  {
LABEL_196:
    v138 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v138)
      goto LABEL_202;
  }
  v139 = (unint64_t *)&v138->__shared_owners_;
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
  }
LABEL_202:
  v141 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v141)
    goto LABEL_206;
  v142 = (unint64_t *)&v141->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    v144 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v144)
      goto LABEL_212;
  }
  else
  {
LABEL_206:
    v144 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v144)
      goto LABEL_212;
  }
  v145 = (unint64_t *)&v144->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (!v146)
  {
    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
    std::__shared_weak_count::__release_weak(v144);
  }
LABEL_212:
  v147 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v147)
    goto LABEL_216;
  v148 = (unint64_t *)&v147->__shared_owners_;
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 - 1, v148));
  if (!v149)
  {
    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
    std::__shared_weak_count::__release_weak(v147);
    v150 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v150)
      goto LABEL_222;
  }
  else
  {
LABEL_216:
    v150 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v150)
      goto LABEL_222;
  }
  v151 = (unint64_t *)&v150->__shared_owners_;
  do
    v152 = __ldaxr(v151);
  while (__stlxr(v152 - 1, v151));
  if (!v152)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
LABEL_222:
  v153 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v153)
    goto LABEL_226;
  v154 = (unint64_t *)&v153->__shared_owners_;
  do
    v155 = __ldaxr(v154);
  while (__stlxr(v155 - 1, v154));
  if (!v155)
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
    v156 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v156)
      goto LABEL_232;
  }
  else
  {
LABEL_226:
    v156 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v156)
      goto LABEL_232;
  }
  v157 = (unint64_t *)&v156->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
LABEL_232:
  v159 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v159)
    goto LABEL_236;
  v160 = (unint64_t *)&v159->__shared_owners_;
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (!v161)
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
    v162 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v162)
      goto LABEL_242;
  }
  else
  {
LABEL_236:
    v162 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v162)
      goto LABEL_242;
  }
  v163 = (unint64_t *)&v162->__shared_owners_;
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 - 1, v163));
  if (!v164)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
LABEL_242:

}

void md::BuildingRenderResources::resetPools(md::BuildingRenderResources *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _OWORD *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  _QWORD *v212;
  uint64_t *v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _OWORD *v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _OWORD *v255;
  __int128 *v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  _OWORD *v281;
  __int128 *v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  _QWORD *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _OWORD *v306;
  __int128 *v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _OWORD *v332;
  __int128 *v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _OWORD *v358;
  __int128 *v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  _OWORD *v384;
  __int128 *v385;
  uint64_t v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  void *v395;
  _QWORD *v396;
  uint64_t v397;
  unint64_t v398;
  void (***v399)(void);
  void (**v400)(void);

  v2 = (uint64_t *)*((_QWORD *)this + 60);
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_499:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = 8 * v11;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v14 = (_QWORD *)(v13 + 8 * v8);
      v11 = v13 + v12;
      if (v13)
        *v14 = v6;
    }
    else
    {
      v14 = (_QWORD *)(8 * v8);
    }
    v16 = *v2;
    v15 = v2[1];
    v17 = v15 - *v2;
    if (v15 == *v2)
    {
      v19 = v14;
      goto LABEL_29;
    }
    v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      v19 = v14;
    }
    else
    {
      v19 = v14;
      if ((unint64_t)(v15 - (_QWORD)v14) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = v14 - 2;
        v22 = (__int128 *)(v15 - 16);
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v15 - 8);
      v15 -= 8;
      *--v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    v15 = *v2;
LABEL_29:
    v5 = v14 + 1;
    *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    v26 = v2[2];
    v2[2] = v11;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v15, v26 - v15);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v27 = v2[4];
  if (v27 != v2[5])
    v2[5] = v27;
LABEL_33:
  v28 = (uint64_t *)*((_QWORD *)this + 61);
  v29 = (uint64_t *)v28[4];
  v30 = (uint64_t *)v28[5];
  if (v29 == v30)
    goto LABEL_65;
  v31 = (_QWORD *)v28[1];
  while (2)
  {
    v32 = *v29;
    v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31)
        *v31 = v32;
      ++v31;
      goto LABEL_36;
    }
    v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_499;
    v35 = v33 - *v28;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = 8 * v37;
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 16))(v28[3], 8 * v37, 8);
      v40 = (_QWORD *)(v39 + 8 * v34);
      v37 = v39 + v38;
      if (v39)
        *v40 = v32;
    }
    else
    {
      v40 = (_QWORD *)(8 * v34);
    }
    v42 = *v28;
    v41 = v28[1];
    v43 = v41 - *v28;
    if (v41 == *v28)
    {
      v45 = v40;
      goto LABEL_61;
    }
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = v40;
      do
      {
LABEL_59:
        v51 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    v45 = v40;
    if ((unint64_t)(v41 - (_QWORD)v40) < 0x20)
      goto LABEL_59;
    v46 = (v44 >> 3) + 1;
    v47 = v40 - 2;
    v48 = (__int128 *)(v41 - 16);
    v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v41 = *v28;
LABEL_61:
    v31 = v40 + 1;
    *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    v52 = v28[2];
    v28[2] = v37;
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v41, v52 - v41);
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30)
      continue;
    break;
  }
  v53 = v28[4];
  if (v53 != v28[5])
    v28[5] = v53;
LABEL_65:
  v54 = (uint64_t *)*((_QWORD *)this + 62);
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 == v56)
    goto LABEL_97;
  v57 = (_QWORD *)v54[1];
  while (2)
  {
    v58 = *v55;
    v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57)
        *v57 = v58;
      ++v57;
      goto LABEL_68;
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_499;
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = 8 * v63;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v66 = (_QWORD *)(v65 + 8 * v60);
      v63 = v65 + v64;
      if (v65)
        *v66 = v58;
    }
    else
    {
      v66 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v66;
      goto LABEL_93;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v66;
      do
      {
LABEL_91:
        v77 = *(_QWORD *)(v67 - 8);
        v67 -= 8;
        *--v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    v71 = v66;
    if ((unint64_t)(v67 - (_QWORD)v66) < 0x20)
      goto LABEL_91;
    v72 = (v70 >> 3) + 1;
    v73 = v66 - 2;
    v74 = (__int128 *)(v67 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v67 = *v54;
LABEL_93:
    v57 = v66 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    v78 = v54[2];
    v54[2] = v63;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56)
      continue;
    break;
  }
  v79 = v54[4];
  if (v79 != v54[5])
    v54[5] = v79;
LABEL_97:
  v80 = (uint64_t *)*((_QWORD *)this + 63);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82)
    goto LABEL_129;
  v83 = (_QWORD *)v80[1];
  while (2)
  {
    v84 = *v81;
    v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83)
        *v83 = v84;
      ++v83;
      goto LABEL_100;
    }
    v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_499;
    v87 = v85 - *v80;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      v90 = 8 * v89;
      v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v92 = (_QWORD *)(v91 + 8 * v86);
      v89 = v91 + v90;
      if (v91)
        *v92 = v84;
    }
    else
    {
      v92 = (_QWORD *)(8 * v86);
    }
    v94 = *v80;
    v93 = v80[1];
    v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v92;
      goto LABEL_125;
    }
    v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v92;
      do
      {
LABEL_123:
        v103 = *(_QWORD *)(v93 - 8);
        v93 -= 8;
        *--v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    v97 = v92;
    if ((unint64_t)(v93 - (_QWORD)v92) < 0x20)
      goto LABEL_123;
    v98 = (v96 >> 3) + 1;
    v99 = v92 - 2;
    v100 = (__int128 *)(v93 - 16);
    v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v93 = *v80;
LABEL_125:
    v83 = v92 + 1;
    *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    v104 = v80[2];
    v80[2] = v89;
    if (v93)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v93, v104 - v93);
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82)
      continue;
    break;
  }
  v105 = v80[4];
  if (v105 != v80[5])
    v80[5] = v105;
LABEL_129:
  v106 = (uint64_t *)*((_QWORD *)this + 64);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108)
    goto LABEL_161;
  v109 = (_QWORD *)v106[1];
  while (2)
  {
    v110 = *v107;
    v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109)
        *v109 = v110;
      ++v109;
      goto LABEL_132;
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_499;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = 8 * v115;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (_QWORD *)(v117 + 8 * v112);
      v115 = v117 + v116;
      if (v117)
        *v118 = v110;
    }
    else
    {
      v118 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_157;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
      do
      {
LABEL_155:
        v129 = *(_QWORD *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    v123 = v118;
    if ((unint64_t)(v119 - (_QWORD)v118) < 0x20)
      goto LABEL_155;
    v124 = (v122 >> 3) + 1;
    v125 = v118 - 2;
    v126 = (__int128 *)(v119 - 16);
    v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v119 = *v106;
LABEL_157:
    v109 = v118 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    v130 = v106[2];
    v106[2] = v115;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108)
      continue;
    break;
  }
  v131 = v106[4];
  if (v131 != v106[5])
    v106[5] = v131;
LABEL_161:
  v132 = (uint64_t *)*((_QWORD *)this + 66);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134)
    goto LABEL_193;
  v135 = (_QWORD *)v132[1];
  while (2)
  {
    v136 = *v133;
    v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135)
        *v135 = v136;
      ++v135;
      goto LABEL_164;
    }
    v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61)
      goto LABEL_499;
    v139 = v137 - *v132;
    v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      v142 = 8 * v141;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v144 = (_QWORD *)(v143 + 8 * v138);
      v141 = v143 + v142;
      if (v143)
        *v144 = v136;
    }
    else
    {
      v144 = (_QWORD *)(8 * v138);
    }
    v146 = *v132;
    v145 = v132[1];
    v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v144;
      goto LABEL_189;
    }
    v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v144;
      do
      {
LABEL_187:
        v155 = *(_QWORD *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    v149 = v144;
    if ((unint64_t)(v145 - (_QWORD)v144) < 0x20)
      goto LABEL_187;
    v150 = (v148 >> 3) + 1;
    v151 = v144 - 2;
    v152 = (__int128 *)(v145 - 16);
    v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_187;
LABEL_188:
    v145 = *v132;
LABEL_189:
    v135 = v144 + 1;
    *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    v156 = v132[2];
    v132[2] = v141;
    if (v145)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v145, v156 - v145);
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134)
      continue;
    break;
  }
  v157 = v132[4];
  if (v157 != v132[5])
    v132[5] = v157;
LABEL_193:
  if (!*((_BYTE *)this + 772))
  {
    v236 = (uint64_t *)*((_QWORD *)this + 65);
    v237 = (uint64_t *)v236[4];
    v238 = (uint64_t *)v236[5];
    if (v237 == v238)
      goto LABEL_320;
    v239 = (_QWORD *)v236[1];
    while (1)
    {
      v240 = *v237;
      v241 = v236[2];
      if ((unint64_t)v239 >= v241)
        break;
      if (v239)
        *v239 = v240;
      ++v239;
LABEL_291:
      v236[1] = (uint64_t)v239;
      if (++v237 == v238)
      {
        v261 = v236[4];
        if (v261 != v236[5])
          v236[5] = v261;
LABEL_320:
        v262 = (uint64_t *)*((_QWORD *)this + 67);
        v263 = (uint64_t *)v262[4];
        v264 = (uint64_t *)v262[5];
        if (v263 == v264)
          goto LABEL_352;
        v265 = (_QWORD *)v262[1];
        while (2)
        {
          v266 = *v263;
          v267 = v262[2];
          if ((unint64_t)v265 < v267)
          {
            if (v265)
              *v265 = v266;
            ++v265;
            goto LABEL_323;
          }
          v268 = ((uint64_t)v265 - *v262) >> 3;
          if ((unint64_t)(v268 + 1) >> 61)
            goto LABEL_499;
          v269 = v267 - *v262;
          v270 = v269 >> 2;
          if (v269 >> 2 <= (unint64_t)(v268 + 1))
            v270 = v268 + 1;
          if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
            v271 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v271 = v270;
          if (v271)
          {
            v272 = 8 * v271;
            v273 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v262[3] + 16))(v262[3], 8 * v271, 8);
            v274 = (_QWORD *)(v273 + 8 * v268);
            v271 = v273 + v272;
            if (v273)
              *v274 = v266;
          }
          else
          {
            v274 = (_QWORD *)(8 * v268);
          }
          v276 = *v262;
          v275 = v262[1];
          v277 = v275 - *v262;
          if (v275 != *v262)
          {
            v278 = v277 - 8;
            if ((unint64_t)(v277 - 8) < 0x38)
            {
              v279 = v274;
            }
            else
            {
              v279 = v274;
              if ((unint64_t)(v275 - (_QWORD)v274) >= 0x20)
              {
                v280 = (v278 >> 3) + 1;
                v281 = v274 - 2;
                v282 = (__int128 *)(v275 - 16);
                v283 = v280 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v284 = *v282;
                  *(v281 - 1) = *(v282 - 1);
                  *v281 = v284;
                  v281 -= 2;
                  v282 -= 2;
                  v283 -= 4;
                }
                while (v283);
                v279 = &v274[-(v280 & 0x3FFFFFFFFFFFFFFCLL)];
                v275 -= 8 * (v280 & 0x3FFFFFFFFFFFFFFCLL);
                if (v280 == (v280 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_347:
                  v275 = *v262;
LABEL_348:
                  v265 = v274 + 1;
                  *v262 = (uint64_t)v279;
                  v262[1] = (uint64_t)(v274 + 1);
                  v286 = v262[2];
                  v262[2] = v271;
                  if (v275)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v262[3] + 40))(v262[3], v275, v286 - v275);
LABEL_323:
                  v262[1] = (uint64_t)v265;
                  if (++v263 == v264)
                  {
                    v287 = v262[4];
                    if (v287 != v262[5])
                      v262[5] = v287;
LABEL_352:
                    v210 = (uint64_t *)*((_QWORD *)this + 68);
                    v288 = (uint64_t *)v210[4];
                    v212 = v210 + 5;
                    v289 = (uint64_t *)v210[5];
                    if (v288 == v289)
                      goto LABEL_384;
                    v290 = (_QWORD *)v210[1];
                    while (2)
                    {
                      v291 = *v288;
                      v292 = v210[2];
                      if ((unint64_t)v290 < v292)
                      {
                        if (v290)
                          *v290 = v291;
                        ++v290;
                        goto LABEL_355;
                      }
                      v293 = ((uint64_t)v290 - *v210) >> 3;
                      if ((unint64_t)(v293 + 1) >> 61)
                        goto LABEL_499;
                      v294 = v292 - *v210;
                      v295 = v294 >> 2;
                      if (v294 >> 2 <= (unint64_t)(v293 + 1))
                        v295 = v293 + 1;
                      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
                        v296 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v296 = v295;
                      if (v296)
                      {
                        v297 = 8 * v296;
                        v298 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 16))(v210[3], 8 * v296, 8);
                        v299 = (_QWORD *)(v298 + 8 * v293);
                        v296 = v298 + v297;
                        if (v298)
                          *v299 = v291;
                      }
                      else
                      {
                        v299 = (_QWORD *)(8 * v293);
                      }
                      v301 = *v210;
                      v300 = v210[1];
                      v302 = v300 - *v210;
                      if (v300 != *v210)
                      {
                        v303 = v302 - 8;
                        if ((unint64_t)(v302 - 8) < 0x38)
                        {
                          v304 = v299;
                        }
                        else
                        {
                          v304 = v299;
                          if ((unint64_t)(v300 - (_QWORD)v299) >= 0x20)
                          {
                            v305 = (v303 >> 3) + 1;
                            v306 = v299 - 2;
                            v307 = (__int128 *)(v300 - 16);
                            v308 = v305 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v309 = *v307;
                              *(v306 - 1) = *(v307 - 1);
                              *v306 = v309;
                              v306 -= 2;
                              v307 -= 2;
                              v308 -= 4;
                            }
                            while (v308);
                            v304 = &v299[-(v305 & 0x3FFFFFFFFFFFFFFCLL)];
                            v300 -= 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v305 == (v305 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_379:
                              v300 = *v210;
LABEL_380:
                              v290 = v299 + 1;
                              *v210 = (uint64_t)v304;
                              v210[1] = (uint64_t)(v299 + 1);
                              v311 = v210[2];
                              v210[2] = v296;
                              if (v300)
                                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 40))(v210[3], v300, v311 - v300);
LABEL_355:
                              v210[1] = (uint64_t)v290;
                              if (++v288 == v289)
                              {
LABEL_382:
                                v312 = v210[4];
                                if (v312 != v210[5])
                                  *v212 = v312;
                                goto LABEL_384;
                              }
                              continue;
                            }
                          }
                        }
                        do
                        {
                          v310 = *(_QWORD *)(v300 - 8);
                          v300 -= 8;
                          *--v304 = v310;
                        }
                        while (v300 != v301);
                        goto LABEL_379;
                      }
                      break;
                    }
                    v304 = v299;
                    goto LABEL_380;
                  }
                  continue;
                }
              }
            }
            do
            {
              v285 = *(_QWORD *)(v275 - 8);
              v275 -= 8;
              *--v279 = v285;
            }
            while (v275 != v276);
            goto LABEL_347;
          }
          break;
        }
        v279 = v274;
        goto LABEL_348;
      }
    }
    v242 = ((uint64_t)v239 - *v236) >> 3;
    if ((unint64_t)(v242 + 1) >> 61)
      goto LABEL_499;
    v243 = v241 - *v236;
    v244 = v243 >> 2;
    if (v243 >> 2 <= (unint64_t)(v242 + 1))
      v244 = v242 + 1;
    if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8)
      v245 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v245 = v244;
    if (v245)
    {
      v246 = 8 * v245;
      v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236[3] + 16))(v236[3], 8 * v245, 8);
      v248 = (_QWORD *)(v247 + 8 * v242);
      v245 = v247 + v246;
      if (v247)
        *v248 = v240;
    }
    else
    {
      v248 = (_QWORD *)(8 * v242);
    }
    v250 = *v236;
    v249 = v236[1];
    v251 = v249 - *v236;
    if (v249 == *v236)
    {
      v253 = v248;
      goto LABEL_316;
    }
    v252 = v251 - 8;
    if ((unint64_t)(v251 - 8) < 0x38)
    {
      v253 = v248;
    }
    else
    {
      v253 = v248;
      if ((unint64_t)(v249 - (_QWORD)v248) >= 0x20)
      {
        v254 = (v252 >> 3) + 1;
        v255 = v248 - 2;
        v256 = (__int128 *)(v249 - 16);
        v257 = v254 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v258 = *v256;
          *(v255 - 1) = *(v256 - 1);
          *v255 = v258;
          v255 -= 2;
          v256 -= 2;
          v257 -= 4;
        }
        while (v257);
        v253 = &v248[-(v254 & 0x3FFFFFFFFFFFFFFCLL)];
        v249 -= 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
        if (v254 == (v254 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_315;
      }
    }
    do
    {
      v259 = *(_QWORD *)(v249 - 8);
      v249 -= 8;
      *--v253 = v259;
    }
    while (v249 != v250);
LABEL_315:
    v249 = *v236;
LABEL_316:
    v239 = v248 + 1;
    *v236 = (uint64_t)v253;
    v236[1] = (uint64_t)(v248 + 1);
    v260 = v236[2];
    v236[2] = v245;
    if (v249)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236[3] + 40))(v236[3], v249, v260 - v249);
    goto LABEL_291;
  }
  v158 = (uint64_t *)*((_QWORD *)this + 70);
  v159 = (uint64_t *)v158[4];
  v160 = (uint64_t *)v158[5];
  if (v159 == v160)
    goto LABEL_226;
  v161 = (_QWORD *)v158[1];
  while (2)
  {
    v162 = *v159;
    v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161)
        *v161 = v162;
      ++v161;
      goto LABEL_197;
    }
    v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61)
      goto LABEL_499;
    v165 = v163 - *v158;
    v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1))
      v166 = v164 + 1;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v167 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v167 = v166;
    if (v167)
    {
      v168 = 8 * v167;
      v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 16))(v158[3], 8 * v167, 8);
      v170 = (_QWORD *)(v169 + 8 * v164);
      v167 = v169 + v168;
      if (v169)
        *v170 = v162;
    }
    else
    {
      v170 = (_QWORD *)(8 * v164);
    }
    v172 = *v158;
    v171 = v158[1];
    v173 = v171 - *v158;
    if (v171 == *v158)
    {
      v175 = v170;
      goto LABEL_222;
    }
    v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      v175 = v170;
      do
      {
LABEL_220:
        v181 = *(_QWORD *)(v171 - 8);
        v171 -= 8;
        *--v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_221;
    }
    v175 = v170;
    if ((unint64_t)(v171 - (_QWORD)v170) < 0x20)
      goto LABEL_220;
    v176 = (v174 >> 3) + 1;
    v177 = v170 - 2;
    v178 = (__int128 *)(v171 - 16);
    v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      *v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v175 = &v170[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_220;
LABEL_221:
    v171 = *v158;
LABEL_222:
    v161 = v170 + 1;
    *v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v170 + 1);
    v182 = v158[2];
    v158[2] = v167;
    if (v171)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 40))(v158[3], v171, v182 - v171);
LABEL_197:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160)
      continue;
    break;
  }
  v183 = v158[4];
  if (v183 != v158[5])
    v158[5] = v183;
LABEL_226:
  v184 = (uint64_t *)*((_QWORD *)this + 72);
  v185 = (uint64_t *)v184[4];
  v186 = (uint64_t *)v184[5];
  if (v185 == v186)
    goto LABEL_258;
  v187 = (_QWORD *)v184[1];
  while (2)
  {
    v188 = *v185;
    v189 = v184[2];
    if ((unint64_t)v187 < v189)
    {
      if (v187)
        *v187 = v188;
      ++v187;
      goto LABEL_229;
    }
    v190 = ((uint64_t)v187 - *v184) >> 3;
    if ((unint64_t)(v190 + 1) >> 61)
      goto LABEL_499;
    v191 = v189 - *v184;
    v192 = v191 >> 2;
    if (v191 >> 2 <= (unint64_t)(v190 + 1))
      v192 = v190 + 1;
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
      v193 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    if (v193)
    {
      v194 = 8 * v193;
      v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 16))(v184[3], 8 * v193, 8);
      v196 = (_QWORD *)(v195 + 8 * v190);
      v193 = v195 + v194;
      if (v195)
        *v196 = v188;
    }
    else
    {
      v196 = (_QWORD *)(8 * v190);
    }
    v198 = *v184;
    v197 = v184[1];
    v199 = v197 - *v184;
    if (v197 == *v184)
    {
      v201 = v196;
      goto LABEL_254;
    }
    v200 = v199 - 8;
    if ((unint64_t)(v199 - 8) < 0x38)
    {
      v201 = v196;
      do
      {
LABEL_252:
        v207 = *(_QWORD *)(v197 - 8);
        v197 -= 8;
        *--v201 = v207;
      }
      while (v197 != v198);
      goto LABEL_253;
    }
    v201 = v196;
    if ((unint64_t)(v197 - (_QWORD)v196) < 0x20)
      goto LABEL_252;
    v202 = (v200 >> 3) + 1;
    v203 = v196 - 2;
    v204 = (__int128 *)(v197 - 16);
    v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v206 = *v204;
      *(v203 - 1) = *(v204 - 1);
      *v203 = v206;
      v203 -= 2;
      v204 -= 2;
      v205 -= 4;
    }
    while (v205);
    v201 = &v196[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
    v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
    if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_252;
LABEL_253:
    v197 = *v184;
LABEL_254:
    v187 = v196 + 1;
    *v184 = (uint64_t)v201;
    v184[1] = (uint64_t)(v196 + 1);
    v208 = v184[2];
    v184[2] = v193;
    if (v197)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 40))(v184[3], v197, v208 - v197);
LABEL_229:
    v184[1] = (uint64_t)v187;
    if (++v185 != v186)
      continue;
    break;
  }
  v209 = v184[4];
  if (v209 != v184[5])
    v184[5] = v209;
LABEL_258:
  v210 = (uint64_t *)*((_QWORD *)this + 73);
  v211 = (uint64_t *)v210[4];
  v212 = v210 + 5;
  v213 = (uint64_t *)v210[5];
  if (v211 != v213)
  {
    v214 = (_QWORD *)v210[1];
    while (1)
    {
      v215 = *v211;
      v216 = v210[2];
      if ((unint64_t)v214 >= v216)
        break;
      if (v214)
        *v214 = v215;
      ++v214;
LABEL_261:
      v210[1] = (uint64_t)v214;
      if (++v211 == v213)
        goto LABEL_382;
    }
    v217 = ((uint64_t)v214 - *v210) >> 3;
    if ((unint64_t)(v217 + 1) >> 61)
      goto LABEL_499;
    v218 = v216 - *v210;
    v219 = v218 >> 2;
    if (v218 >> 2 <= (unint64_t)(v217 + 1))
      v219 = v217 + 1;
    if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8)
      v220 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v220 = v219;
    if (v220)
    {
      v221 = 8 * v220;
      v222 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 16))(v210[3], 8 * v220, 8);
      v223 = (_QWORD *)(v222 + 8 * v217);
      v220 = v222 + v221;
      if (v222)
        *v223 = v215;
    }
    else
    {
      v223 = (_QWORD *)(8 * v217);
    }
    v225 = *v210;
    v224 = v210[1];
    v226 = v224 - *v210;
    if (v224 != *v210)
    {
      v227 = v226 - 8;
      if ((unint64_t)(v226 - 8) < 0x38)
      {
        v228 = v223;
      }
      else
      {
        v228 = v223;
        if ((unint64_t)(v224 - (_QWORD)v223) >= 0x20)
        {
          v229 = (v227 >> 3) + 1;
          v230 = v223 - 2;
          v231 = (__int128 *)(v224 - 16);
          v232 = v229 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v233 = *v231;
            *(v230 - 1) = *(v231 - 1);
            *v230 = v233;
            v230 -= 2;
            v231 -= 2;
            v232 -= 4;
          }
          while (v232);
          v228 = &v223[-(v229 & 0x3FFFFFFFFFFFFFFCLL)];
          v224 -= 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
          if (v229 == (v229 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_285:
            v224 = *v210;
LABEL_286:
            v214 = v223 + 1;
            *v210 = (uint64_t)v228;
            v210[1] = (uint64_t)(v223 + 1);
            v235 = v210[2];
            v210[2] = v220;
            if (v224)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 40))(v210[3], v224, v235 - v224);
            goto LABEL_261;
          }
        }
      }
      do
      {
        v234 = *(_QWORD *)(v224 - 8);
        v224 -= 8;
        *--v228 = v234;
      }
      while (v224 != v225);
      goto LABEL_285;
    }
    v228 = v223;
    goto LABEL_286;
  }
LABEL_384:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 93));
  if (!*((_BYTE *)this + 770))
    goto LABEL_418;
  v313 = (uint64_t *)*((_QWORD *)this + 74);
  v314 = (uint64_t *)v313[4];
  v315 = (uint64_t *)v313[5];
  if (v314 == v315)
    goto LABEL_417;
  v316 = (_QWORD *)v313[1];
  while (2)
  {
    v317 = *v314;
    v318 = v313[2];
    if ((unint64_t)v316 < v318)
    {
      if (v316)
        *v316 = v317;
      ++v316;
      goto LABEL_388;
    }
    v319 = ((uint64_t)v316 - *v313) >> 3;
    if ((unint64_t)(v319 + 1) >> 61)
      goto LABEL_499;
    v320 = v318 - *v313;
    v321 = v320 >> 2;
    if (v320 >> 2 <= (unint64_t)(v319 + 1))
      v321 = v319 + 1;
    if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8)
      v322 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v322 = v321;
    if (v322)
    {
      v323 = 8 * v322;
      v324 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v313[3] + 16))(v313[3], 8 * v322, 8);
      v325 = (_QWORD *)(v324 + 8 * v319);
      v322 = v324 + v323;
      if (v324)
        *v325 = v317;
    }
    else
    {
      v325 = (_QWORD *)(8 * v319);
    }
    v327 = *v313;
    v326 = v313[1];
    v328 = v326 - *v313;
    if (v326 == *v313)
    {
      v330 = v325;
      goto LABEL_413;
    }
    v329 = v328 - 8;
    if ((unint64_t)(v328 - 8) < 0x38)
    {
      v330 = v325;
      do
      {
LABEL_411:
        v336 = *(_QWORD *)(v326 - 8);
        v326 -= 8;
        *--v330 = v336;
      }
      while (v326 != v327);
      goto LABEL_412;
    }
    v330 = v325;
    if ((unint64_t)(v326 - (_QWORD)v325) < 0x20)
      goto LABEL_411;
    v331 = (v329 >> 3) + 1;
    v332 = v325 - 2;
    v333 = (__int128 *)(v326 - 16);
    v334 = v331 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v335 = *v333;
      *(v332 - 1) = *(v333 - 1);
      *v332 = v335;
      v332 -= 2;
      v333 -= 2;
      v334 -= 4;
    }
    while (v334);
    v330 = &v325[-(v331 & 0x3FFFFFFFFFFFFFFCLL)];
    v326 -= 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
    if (v331 != (v331 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_411;
LABEL_412:
    v326 = *v313;
LABEL_413:
    v316 = v325 + 1;
    *v313 = (uint64_t)v330;
    v313[1] = (uint64_t)(v325 + 1);
    v337 = v313[2];
    v313[2] = v322;
    if (v326)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v313[3] + 40))(v313[3], v326, v337 - v326);
LABEL_388:
    v313[1] = (uint64_t)v316;
    if (++v314 != v315)
      continue;
    break;
  }
  v338 = v313[4];
  if (v338 != v313[5])
    v313[5] = v338;
LABEL_417:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 94));
LABEL_418:
  if (!*((_BYTE *)this + 768))
    goto LABEL_451;
  v339 = (uint64_t *)*((_QWORD *)this + 59);
  v340 = (uint64_t *)v339[4];
  v341 = (uint64_t *)v339[5];
  if (v340 == v341)
    goto LABEL_451;
  v342 = (_QWORD *)v339[1];
  while (2)
  {
    v343 = *v340;
    v344 = v339[2];
    if ((unint64_t)v342 < v344)
    {
      if (v342)
        *v342 = v343;
      ++v342;
      goto LABEL_422;
    }
    v345 = ((uint64_t)v342 - *v339) >> 3;
    if ((unint64_t)(v345 + 1) >> 61)
      goto LABEL_499;
    v346 = v344 - *v339;
    v347 = v346 >> 2;
    if (v346 >> 2 <= (unint64_t)(v345 + 1))
      v347 = v345 + 1;
    if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8)
      v348 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v348 = v347;
    if (v348)
    {
      v349 = 8 * v348;
      v350 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v339[3] + 16))(v339[3], 8 * v348, 8);
      v351 = (_QWORD *)(v350 + 8 * v345);
      v348 = v350 + v349;
      if (v350)
        *v351 = v343;
    }
    else
    {
      v351 = (_QWORD *)(8 * v345);
    }
    v353 = *v339;
    v352 = v339[1];
    v354 = v352 - *v339;
    if (v352 == *v339)
    {
      v356 = v351;
      goto LABEL_447;
    }
    v355 = v354 - 8;
    if ((unint64_t)(v354 - 8) < 0x38)
    {
      v356 = v351;
      do
      {
LABEL_445:
        v362 = *(_QWORD *)(v352 - 8);
        v352 -= 8;
        *--v356 = v362;
      }
      while (v352 != v353);
      goto LABEL_446;
    }
    v356 = v351;
    if ((unint64_t)(v352 - (_QWORD)v351) < 0x20)
      goto LABEL_445;
    v357 = (v355 >> 3) + 1;
    v358 = v351 - 2;
    v359 = (__int128 *)(v352 - 16);
    v360 = v357 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v361 = *v359;
      *(v358 - 1) = *(v359 - 1);
      *v358 = v361;
      v358 -= 2;
      v359 -= 2;
      v360 -= 4;
    }
    while (v360);
    v356 = &v351[-(v357 & 0x3FFFFFFFFFFFFFFCLL)];
    v352 -= 8 * (v357 & 0x3FFFFFFFFFFFFFFCLL);
    if (v357 != (v357 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_445;
LABEL_446:
    v352 = *v339;
LABEL_447:
    v342 = v351 + 1;
    *v339 = (uint64_t)v356;
    v339[1] = (uint64_t)(v351 + 1);
    v363 = v339[2];
    v339[2] = v348;
    if (v352)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v339[3] + 40))(v339[3], v352, v363 - v352);
LABEL_422:
    v339[1] = (uint64_t)v342;
    if (++v340 != v341)
      continue;
    break;
  }
  v364 = v339[4];
  if (v364 != v339[5])
    v339[5] = v364;
LABEL_451:
  if (!*((_BYTE *)this + 769))
    goto LABEL_485;
  v365 = (uint64_t *)*((_QWORD *)this + 75);
  v366 = (uint64_t *)v365[4];
  v367 = (uint64_t *)v365[5];
  if (v366 == v367)
    goto LABEL_484;
  v368 = (_QWORD *)v365[1];
  while (2)
  {
    v369 = *v366;
    v370 = v365[2];
    if ((unint64_t)v368 < v370)
    {
      if (v368)
        *v368 = v369;
      ++v368;
      goto LABEL_455;
    }
    v371 = ((uint64_t)v368 - *v365) >> 3;
    if ((unint64_t)(v371 + 1) >> 61)
      goto LABEL_499;
    v372 = v370 - *v365;
    v373 = v372 >> 2;
    if (v372 >> 2 <= (unint64_t)(v371 + 1))
      v373 = v371 + 1;
    if ((unint64_t)v372 >= 0x7FFFFFFFFFFFFFF8)
      v374 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v374 = v373;
    if (v374)
    {
      v375 = 8 * v374;
      v376 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v365[3] + 16))(v365[3], 8 * v374, 8);
      v377 = (_QWORD *)(v376 + 8 * v371);
      v374 = v376 + v375;
      if (v376)
        *v377 = v369;
    }
    else
    {
      v377 = (_QWORD *)(8 * v371);
    }
    v379 = *v365;
    v378 = v365[1];
    v380 = v378 - *v365;
    if (v378 == *v365)
    {
      v382 = v377;
      goto LABEL_480;
    }
    v381 = v380 - 8;
    if ((unint64_t)(v380 - 8) < 0x38)
    {
      v382 = v377;
      do
      {
LABEL_478:
        v388 = *(_QWORD *)(v378 - 8);
        v378 -= 8;
        *--v382 = v388;
      }
      while (v378 != v379);
      goto LABEL_479;
    }
    v382 = v377;
    if ((unint64_t)(v378 - (_QWORD)v377) < 0x20)
      goto LABEL_478;
    v383 = (v381 >> 3) + 1;
    v384 = v377 - 2;
    v385 = (__int128 *)(v378 - 16);
    v386 = v383 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v387 = *v385;
      *(v384 - 1) = *(v385 - 1);
      *v384 = v387;
      v384 -= 2;
      v385 -= 2;
      v386 -= 4;
    }
    while (v386);
    v382 = &v377[-(v383 & 0x3FFFFFFFFFFFFFFCLL)];
    v378 -= 8 * (v383 & 0x3FFFFFFFFFFFFFFCLL);
    if (v383 != (v383 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_478;
LABEL_479:
    v378 = *v365;
LABEL_480:
    v368 = v377 + 1;
    *v365 = (uint64_t)v382;
    v365[1] = (uint64_t)(v377 + 1);
    v389 = v365[2];
    v365[2] = v374;
    if (v378)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v365[3] + 40))(v365[3], v378, v389 - v378);
LABEL_455:
    v365[1] = (uint64_t)v368;
    if (++v366 != v367)
      continue;
    break;
  }
  v390 = v365[4];
  if (v390 != v365[5])
    v365[5] = v390;
LABEL_484:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*((uint64_t **)this + 92));
LABEL_485:
  v391 = *((_QWORD *)this + 102);
  v392 = *((_QWORD *)this + 101);
  if (v391 != v392)
  {
    v393 = *((_QWORD *)this + 102);
    do
    {
      v395 = *(void **)(v393 - 24);
      v393 -= 24;
      v394 = v395;
      if (v395)
      {
        *(_QWORD *)(v391 - 16) = v394;
        operator delete(v394);
      }
      v391 = v393;
    }
    while (v393 != v392);
  }
  *((_QWORD *)this + 102) = v392;
  *((_QWORD *)this + 99) = *((_QWORD *)this + 98);
  v396 = (_QWORD *)*((_QWORD *)this + 108);
  if (v396)
  {
    do
    {
      if (v396[1])
      {
        v398 = 0;
        v399 = (void (***)(void))(v396 + 2);
        do
        {
          v400 = *v399;
          v399 += 15;
          (*v400)();
          ++v398;
        }
        while (v398 < v396[1]);
      }
      v396[1] = 0;
      v396 = (_QWORD *)*v396;
    }
    while (v396);
    v397 = *((_QWORD *)this + 108);
  }
  else
  {
    v397 = 0;
  }
  *((_QWORD *)this + 109) = v397;
}

void ggl::OcclusionLine::OcclusionLinePipelineState::~OcclusionLinePipelineState(ggl::OcclusionLine::OcclusionLinePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::OcclusionLine::OcclusionLinePipelineState::OcclusionLinePipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  ggl::OcclusionLineShader *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v25 = a2;
    v26 = a3;
    a2 = v25;
    a3 = v26;
    a4 = v17;
    if ((_DWORD)v18)
    {
      if ((v19 & 1) == 0)
      {
        if ((_DWORD)v18)
        {
          if ((v22 & 1) == 0
          {
            if ((v24 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::attributesReflection(void)::r;
            unk_1ECE43AA8 = 1;
          }
          ggl::OcclusionLine::OcclusionLinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4>::typedReflection(void)::r;
          unk_1EE57B810 = &ggl::OcclusionLine::pipelineDataOcclusionLinePipelineDeviceStructs(void)::ref;
          qword_1EE57B818 = 0;
          if ((v23 & 1) == 0
          {
            ggl::OcclusionLine::pipelineDataOcclusionLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::OcclusionLine::View::reflection(void)::reflection;
          }
          qword_1EE57B820 = (uint64_t)&ggl::OcclusionLine::pipelineDataOcclusionLinePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57B828 = xmmword_19FFB3350;
        }
      }
      ggl::OcclusionLine::OcclusionLinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::OcclusionLine::OcclusionLinePipelineSetup::typedReflection(void)::ref;
      ggl::OcclusionLineShader::typedReflection(v18);
      qword_1ECE310A8 = (uint64_t)&ggl::OcclusionLineShader::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57B888 = 0;
        qword_1EE57B890 = (uint64_t)"";
        dword_1EE57B898 = 0;
        qword_1EE57B8A0 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeBinding_0(void)::attr;
        unk_1EE57B8A8 = 1;
      }
      qword_1ECE310B0 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE310B8 = 1;
      qword_1ECE310C0 = 0;
      unk_1ECE310C8 = 0;
      qword_1ECE310D0 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineDeviceStructBinding(void)::ref;
      unk_1ECE310D8 = 0;
      if ((v21 & 1) == 0
      {
        ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57B858 = 0;
        qword_1EE57B860 = (uint64_t)"view";
        dword_1EE57B868 = 3;
        qword_1EE57B870 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantViewBinding(void)::reflection;
        unk_1EE57B878 = 3;
      }
      qword_1ECE310E0 = (uint64_t)&ggl::OcclusionLine::pipelineStateOcclusionLinePipelineConstantStructBinding(void)::ref;
      unk_1ECE310E8 = 1;
      a4 = v17;
      a2 = v25;
      a3 = v26;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v29 = *(_OWORD *)a3;
  *(_OWORD *)&v29[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v27 = *a4;
  v28 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::OcclusionLine::OcclusionLinePipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v27;
  *(_OWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v29;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v29[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B6710;
  return a1;
}

void ggl::OcclusionLine::OcclusionLinePipelineSetup::~OcclusionLinePipelineSetup(ggl::OcclusionLine::OcclusionLinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::OcclusionLine::OcclusionLinePipelineSetup::constantDataIsEnabled(ggl::OcclusionLine::OcclusionLinePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::OcclusionLine::OcclusionLinePipelineSetup::textureIsEnabled(ggl::OcclusionLine::OcclusionLinePipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::OcclusionLine::OcclusionLinePipelineSetup::OcclusionLinePipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B66E0;
  v11 = (uint64_t *)a1[8];
  v12 = *a4;
  v13 = a4[1];
  *v11 = *a4;
  v11[1] = 0;
  v14 = (_QWORD *)a1[20];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v14[1];
  *v14 = v12;
  v14[1] = v13;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void md::MapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint8x8_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint8x8_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint8x8_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  uint8x8_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int8x8_t *v80;
  int8x8_t v81;
  uint8x8_t v82;
  unint64_t v83;
  int8x8_t v84;
  uint8x8_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int8x8_t v95;
  uint8x8_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint8x8_t v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int8x8_t v120;
  uint8x8_t v121;
  unint64_t v122;
  uint64_t v123;
  int8x8_t v124;
  uint8x8_t v125;
  uint64_t v126;
  uint64_t **v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint8x8_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int8x8_t v147;
  uint8x8_t v148;
  uint64_t v149;
  int8x8_t v150;
  uint8x8_t v151;
  uint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t **v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int8x8_t v163;
  uint8x8_t v164;
  uint64_t v165;
  uint64_t **v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int8x8_t v173;
  uint8x8_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint8x8_t v181;
  uint64_t v182;
  uint64_t **v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint8x8_t v187;
  uint64_t v188;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int8x8_t v197;
  uint8x8_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int8x8_t v206;
  uint8x8_t v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int8x8_t v215;
  uint8x8_t v216;
  uint64_t v217;
  uint64_t **v218;
  uint64_t *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int8x8_t v224;
  uint8x8_t v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int8x8_t v233;
  uint8x8_t v234;
  uint64_t v235;
  uint64_t **v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int8x8_t v265;
  uint8x8_t v266;
  uint64_t v267;
  uint64_t **v268;
  uint64_t *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int8x8_t v276;
  uint8x8_t v277;
  uint64_t v278;
  int8x8_t v279;
  uint8x8_t v280;
  uint64_t v281;
  uint64_t **v282;
  uint64_t *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t **v287;
  uint64_t *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int8x8_t v292;
  uint8x8_t v293;
  uint64_t v294;
  uint64_t **v295;
  uint64_t *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;

  v4 = *(uint64_t **)(a2 + 1128);
  v5 = *v4;
  v6 = v4[1];
  v7 = *v4;
  if (*v4 != v6)
  {
    v7 = *v4;
    while (*(_BYTE *)v7)
    {
      v7 += 16;
      if (v7 == v6)
        goto LABEL_31;
    }
  }
  if (v7 != v6)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      v8 = (int8x8_t)a3[1];
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = 6;
          if (*(_QWORD *)&v8 <= 6uLL)
            v10 = 6u % a3[1];
        }
        else
        {
          v10 = (v8.i8[0] - 1) & 6;
        }
        v11 = *(uint64_t ***)(*a3 + 8 * v10);
        if (v11)
        {
          v12 = *v11;
          if (v12)
          {
            if (v9.u32[0] < 2uLL)
            {
              v13 = *(_QWORD *)&v8 - 1;
              while (1)
              {
                v15 = v12[1];
                if (v15 == 6)
                {
                  if (*((_WORD *)v12 + 8) == 6)
                    goto LABEL_29;
                }
                else if ((v15 & v13) != v10)
                {
                  goto LABEL_31;
                }
                v12 = (uint64_t *)*v12;
                if (!v12)
                  goto LABEL_31;
              }
            }
            do
            {
              v14 = v12[1];
              if (v14 == 6)
              {
                if (*((_WORD *)v12 + 8) == 6)
                {
LABEL_29:
                  if (*((_BYTE *)v12 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v12 + 18) = (*((unsigned __int16 *)v12 + 10) << 16) | 1;
                    v5 = *v4;
                    v6 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v14 >= *(_QWORD *)&v8)
                  v14 %= *(_QWORD *)&v8;
                if (v14 != v10)
                  break;
              }
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
        }
      }
    }
  }
LABEL_31:
  if (v5 != v6)
  {
    v16 = v5;
    do
    {
      if (!*(_BYTE *)v16)
      {
        if (v16 == v6)
          break;
        if (!*(_QWORD *)(v16 + 8))
          break;
        v17 = (int8x8_t)a3[1];
        if (!*(_QWORD *)&v17)
          break;
        v18 = (uint8x8_t)vcnt_s8(v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v19 = 26;
          if (*(_QWORD *)&v17 <= 0x1AuLL)
            v19 = 0x1Au % a3[1];
        }
        else
        {
          v19 = (v17.i32[0] - 1) & 0x1ALL;
        }
        v20 = *(uint64_t ***)(*a3 + 8 * v19);
        if (!v20)
          break;
        v21 = *v20;
        if (!v21)
          break;
        if (v18.u32[0] < 2uLL)
        {
          v22 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v24 = v21[1];
            if (v24 == 26)
            {
              if (*((_WORD *)v21 + 8) == 26)
                goto LABEL_59;
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_61;
            }
            v21 = (uint64_t *)*v21;
            if (!v21)
              goto LABEL_61;
          }
        }
        while (1)
        {
          v23 = v21[1];
          if (v23 == 26)
          {
            if (*((_WORD *)v21 + 8) == 26)
            {
LABEL_59:
              if (*((_BYTE *)v21 + 18) == 2)
              {
                *(_DWORD *)((char *)v21 + 18) = (*((unsigned __int16 *)v21 + 10) << 16) | 1;
                v5 = *v4;
                v6 = v4[1];
              }
              goto LABEL_61;
            }
          }
          else
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
            if (v23 != v19)
              goto LABEL_61;
          }
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_61;
        }
      }
      v16 += 16;
    }
    while (v16 != v6);
  }
LABEL_61:
  if (v5 == v6)
    goto LABEL_91;
  v25 = v5;
  while (*(_BYTE *)v25 != 32)
  {
    v25 += 16;
    if (v25 == v6)
      goto LABEL_91;
  }
  if (v25 != v6)
  {
    if (*(_QWORD *)(v25 + 8))
    {
      v26 = (int8x8_t)a3[1];
      if (v26)
      {
        v27 = (uint8x8_t)vcnt_s8(v26);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          v28 = 64;
          if (*(_QWORD *)&v26 <= 0x40uLL)
            v28 = 0x40u % a3[1];
        }
        else
        {
          v28 = (v26.i8[0] - 1) & 0x40;
        }
        v29 = *(uint64_t ***)(*a3 + 8 * v28);
        if (v29)
        {
          v30 = *v29;
          if (v30)
          {
            if (v27.u32[0] < 2uLL)
            {
              v31 = *(_QWORD *)&v26 - 1;
              while (1)
              {
                v33 = v30[1];
                if (v33 == 64)
                {
                  if (*((_WORD *)v30 + 8) == 64)
                    goto LABEL_89;
                }
                else if ((v33 & v31) != v28)
                {
                  goto LABEL_91;
                }
                v30 = (uint64_t *)*v30;
                if (!v30)
                  goto LABEL_91;
              }
            }
            do
            {
              v32 = v30[1];
              if (v32 == 64)
              {
                if (*((_WORD *)v30 + 8) == 64)
                {
LABEL_89:
                  if (*((_BYTE *)v30 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v30 + 18) = (*((unsigned __int16 *)v30 + 10) << 16) | 1;
                    v5 = *v4;
                    v6 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v32 >= *(_QWORD *)&v26)
                  v32 %= *(_QWORD *)&v26;
                if (v32 != v28)
                  break;
              }
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
      }
    }
  }
LABEL_91:
  if (v5 != v6)
  {
    v34 = v5;
    do
    {
      if (*(_BYTE *)v34 == 33)
      {
        if (v34 == v6)
          break;
        if (!*(_QWORD *)(v34 + 8))
          break;
        v35 = (int8x8_t)a3[1];
        if (!*(_QWORD *)&v35)
          break;
        v36 = (uint8x8_t)vcnt_s8(v35);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          v37 = 73;
          if (*(_QWORD *)&v35 <= 0x49uLL)
            v37 = 0x49u % a3[1];
        }
        else
        {
          v37 = (v35.i32[0] - 1) & 0x49;
        }
        v38 = *(uint64_t ***)(*a3 + 8 * v37);
        if (!v38)
          break;
        v39 = *v38;
        if (!v39)
          break;
        if (v36.u32[0] < 2uLL)
        {
          v40 = *(_QWORD *)&v35 - 1;
          while (1)
          {
            v42 = v39[1];
            if (v42 == 73)
            {
              if (*((_WORD *)v39 + 8) == 73)
                goto LABEL_119;
            }
            else if ((v42 & v40) != v37)
            {
              goto LABEL_121;
            }
            v39 = (uint64_t *)*v39;
            if (!v39)
              goto LABEL_121;
          }
        }
        while (1)
        {
          v41 = v39[1];
          if (v41 == 73)
          {
            if (*((_WORD *)v39 + 8) == 73)
            {
LABEL_119:
              if (*((_BYTE *)v39 + 18) == 2)
              {
                *(_DWORD *)((char *)v39 + 18) = (*((unsigned __int16 *)v39 + 10) << 16) | 1;
                v5 = *v4;
                v6 = v4[1];
              }
              goto LABEL_121;
            }
          }
          else
          {
            if (v41 >= *(_QWORD *)&v35)
              v41 %= *(_QWORD *)&v35;
            if (v41 != v37)
              goto LABEL_121;
          }
          v39 = (uint64_t *)*v39;
          if (!v39)
            goto LABEL_121;
        }
      }
      v34 += 16;
    }
    while (v34 != v6);
  }
LABEL_121:
  if (v5 == v6)
    goto LABEL_153;
  v43 = v5;
  while (*(_BYTE *)v43 != 33)
  {
    v43 += 16;
    if (v43 == v6)
      goto LABEL_153;
  }
  if (v43 != v6)
  {
    if (*(_QWORD *)(v43 + 8))
    {
      v44 = (int8x8_t)a3[1];
      if (v44)
      {
        v45 = (uint8x8_t)vcnt_s8(v44);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          v46 = 80;
          if (*(_QWORD *)&v44 <= 0x50uLL)
            v46 = 0x50u % a3[1];
        }
        else
        {
          v46 = (v44.i32[0] - 1) & 0x50;
        }
        v47 = *(uint64_t ***)(*a3 + 8 * v46);
        if (v47)
        {
          v48 = *v47;
          if (v48)
          {
            if (v45.u32[0] < 2uLL)
            {
              v49 = *(_QWORD *)&v44 - 1;
              while (1)
              {
                v51 = v48[1];
                if (v51 == 80)
                {
                  if (*((_WORD *)v48 + 8) == 80)
                    goto LABEL_149;
                }
                else if ((v51 & v49) != v46)
                {
                  goto LABEL_153;
                }
                v48 = (uint64_t *)*v48;
                if (!v48)
                  goto LABEL_153;
              }
            }
            while (1)
            {
              v50 = v48[1];
              if (v50 == 80)
              {
                if (*((_WORD *)v48 + 8) == 80)
                {
LABEL_149:
                  if (*((_BYTE *)v48 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v48 + 18) = (*((unsigned __int16 *)v48 + 10) << 16) | 1;
                    v5 = *v4;
                    v6 = v4[1];
                  }
                  goto LABEL_153;
                }
              }
              else
              {
                if (v50 >= *(_QWORD *)&v44)
                  v50 %= *(_QWORD *)&v44;
                if (v50 != v46)
                  goto LABEL_153;
              }
              v48 = (uint64_t *)*v48;
              if (!v48)
                goto LABEL_153;
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_153:
    if (v5 == v6)
      goto LABEL_154;
    if (*(_BYTE *)v5 == 33)
      break;
    v5 += 16;
  }
  if (v5 != v6)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v58 = (int8x8_t)a3[1];
      if (v58)
      {
        v59 = (uint8x8_t)vcnt_s8(v58);
        v59.i16[0] = vaddlv_u8(v59);
        if (v59.u32[0] > 1uLL)
        {
          v60 = 68;
          if (*(_QWORD *)&v58 <= 0x44uLL)
            v60 = 0x44u % a3[1];
        }
        else
        {
          v60 = (v58.i32[0] - 1) & 0x44;
        }
        v66 = *(uint64_t ***)(*a3 + 8 * v60);
        if (v66)
        {
          v67 = *v66;
          if (v67)
          {
            if (v59.u32[0] < 2uLL)
            {
              v68 = *(_QWORD *)&v58 - 1;
              while (1)
              {
                v70 = v67[1];
                if (v70 == 68)
                {
                  if (*((_WORD *)v67 + 8) == 68)
                    goto LABEL_235;
                }
                else if ((v70 & v68) != v60)
                {
                  goto LABEL_154;
                }
                v67 = (uint64_t *)*v67;
                if (!v67)
                  goto LABEL_154;
              }
            }
            do
            {
              v69 = v67[1];
              if (v69 == 68)
              {
                if (*((_WORD *)v67 + 8) == 68)
                {
LABEL_235:
                  if (*((_BYTE *)v67 + 18) == 2)
                    *(_DWORD *)((char *)v67 + 18) = (*((unsigned __int16 *)v67 + 10) << 16) | 1;
                  break;
                }
              }
              else
              {
                if (v69 >= *(_QWORD *)&v58)
                  v69 %= *(_QWORD *)&v58;
                if (v69 != v60)
                  break;
              }
              v67 = (uint64_t *)*v67;
            }
            while (v67);
          }
        }
      }
    }
  }
LABEL_154:
  v52 = *v4;
  v53 = v4[1];
  v54 = *v4;
  if (*v4 == v53)
  {
LABEL_159:
    if (v54 == v53)
      goto LABEL_207;
    if (!*(_QWORD *)(v54 + 8))
      goto LABEL_207;
    v55 = (int8x8_t)a3[1];
    if (!*(_QWORD *)&v55)
      goto LABEL_207;
    v56 = (uint8x8_t)vcnt_s8(v55);
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.u32[0] > 1uLL)
    {
      v57 = 48;
      if (*(_QWORD *)&v55 <= 0x30uLL)
        v57 = 0x30u % a3[1];
    }
    else
    {
      v57 = (v55.i8[0] - 1) & 0x30;
    }
    v61 = *(uint64_t ***)(*a3 + 8 * v57);
    if (!v61)
      goto LABEL_207;
    v62 = *v61;
    if (!v62)
      goto LABEL_207;
    if (v56.u32[0] < 2uLL)
    {
      v63 = *(_QWORD *)&v55 - 1;
      while (1)
      {
        v65 = v62[1];
        if (v65 == 48)
        {
          if (*((_WORD *)v62 + 8) == 48)
            goto LABEL_205;
        }
        else if ((v65 & v63) != v57)
        {
          goto LABEL_207;
        }
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_207;
      }
    }
    while (1)
    {
      v64 = v62[1];
      if (v64 == 48)
      {
        if (*((_WORD *)v62 + 8) == 48)
        {
LABEL_205:
          if (*((_BYTE *)v62 + 18) == 2)
          {
            *(_DWORD *)((char *)v62 + 18) = (*((unsigned __int16 *)v62 + 10) << 16) | 1;
            v52 = *v4;
            v53 = v4[1];
          }
          goto LABEL_207;
        }
      }
      else
      {
        if (v64 >= *(_QWORD *)&v55)
          v64 %= *(_QWORD *)&v55;
        if (v64 != v57)
          goto LABEL_207;
      }
      v62 = (uint64_t *)*v62;
      if (!v62)
        goto LABEL_207;
    }
  }
  v54 = *v4;
  do
  {
    if (*(_BYTE *)v54 == 33)
      goto LABEL_159;
    v54 += 16;
  }
  while (v54 != v53);
LABEL_207:
  if (v52 == v53)
    goto LABEL_241;
  v71 = v52;
  while (*(_BYTE *)v71 != 33)
  {
    v71 += 16;
    if (v71 == v53)
      goto LABEL_241;
  }
  if (v71 != v53)
  {
    if (*(_QWORD *)(v71 + 8))
    {
      v72 = (int8x8_t)a3[1];
      if (v72)
      {
        v73 = (uint8x8_t)vcnt_s8(v72);
        v73.i16[0] = vaddlv_u8(v73);
        if (v73.u32[0] > 1uLL)
        {
          v74 = 70;
          if (*(_QWORD *)&v72 <= 0x46uLL)
            v74 = 0x46u % a3[1];
        }
        else
        {
          v74 = (v72.i32[0] - 1) & 0x46;
        }
        v75 = *(uint64_t ***)(*a3 + 8 * v74);
        if (v75)
        {
          v76 = *v75;
          if (v76)
          {
            if (v73.u32[0] < 2uLL)
            {
              v77 = *(_QWORD *)&v72 - 1;
              while (1)
              {
                v79 = v76[1];
                if (v79 == 70)
                {
                  if (*((_WORD *)v76 + 8) == 70)
                    goto LABEL_237;
                }
                else if ((v79 & v77) != v74)
                {
                  goto LABEL_241;
                }
                v76 = (uint64_t *)*v76;
                if (!v76)
                  goto LABEL_241;
              }
            }
            while (1)
            {
              v78 = v76[1];
              if (v78 == 70)
              {
                if (*((_WORD *)v76 + 8) == 70)
                {
LABEL_237:
                  if (*((_BYTE *)v76 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v76 + 18) = (*((unsigned __int16 *)v76 + 10) << 16) | 1;
                    v52 = *v4;
                    v53 = v4[1];
                  }
                  goto LABEL_241;
                }
              }
              else
              {
                if (v78 >= *(_QWORD *)&v72)
                  v78 %= *(_QWORD *)&v72;
                if (v78 != v74)
                  goto LABEL_241;
              }
              v76 = (uint64_t *)*v76;
              if (!v76)
                goto LABEL_241;
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_241:
    if (v52 == v53)
      goto LABEL_242;
    if (*(_BYTE *)v52 == 34)
      break;
    v52 += 16;
  }
  if (v52 != v53)
  {
    if (*(_QWORD *)(v52 + 8))
    {
      v84 = (int8x8_t)a3[1];
      if (v84)
      {
        v85 = (uint8x8_t)vcnt_s8(v84);
        v85.i16[0] = vaddlv_u8(v85);
        if (v85.u32[0] > 1uLL)
        {
          v86 = 66;
          if (*(_QWORD *)&v84 <= 0x42uLL)
            v86 = 0x42u % a3[1];
        }
        else
        {
          v86 = (v84.i32[0] - 1) & 0x42;
        }
        v103 = *(uint64_t ***)(*a3 + 8 * v86);
        if (v103)
        {
          v104 = *v103;
          if (v104)
          {
            if (v85.u32[0] < 2uLL)
            {
              v105 = *(_QWORD *)&v84 - 1;
              while (1)
              {
                v107 = v104[1];
                if (v107 == 66)
                {
                  if (*((_WORD *)v104 + 8) == 66)
                    goto LABEL_416;
                }
                else if ((v107 & v105) != v86)
                {
                  goto LABEL_242;
                }
                v104 = (uint64_t *)*v104;
                if (!v104)
                  goto LABEL_242;
              }
            }
            do
            {
              v106 = v104[1];
              if (v106 == 66)
              {
                if (*((_WORD *)v104 + 8) == 66)
                {
LABEL_416:
                  if (*((_BYTE *)v104 + 18) == 2)
                    *(_DWORD *)((char *)v104 + 18) = (*((unsigned __int16 *)v104 + 10) << 16) | 1;
                  break;
                }
              }
              else
              {
                if (v106 >= *(_QWORD *)&v84)
                  v106 %= *(_QWORD *)&v84;
                if (v106 != v86)
                  break;
              }
              v104 = (uint64_t *)*v104;
            }
            while (v104);
          }
        }
      }
    }
  }
LABEL_242:
  v80 = *(int8x8_t **)(a2 + 1120);
  v81 = v80[2];
  if (!*(_QWORD *)&v81)
    goto LABEL_267;
  v82 = (uint8x8_t)vcnt_s8(v81);
  v82.i16[0] = vaddlv_u8(v82);
  if (v82.u32[0] > 1uLL)
  {
    v83 = 0xC74495586E0C32F6;
    if (*(_QWORD *)&v81 <= 0xC74495586E0C32F6)
      v83 = 0xC74495586E0C32F6 % *(_QWORD *)&v81;
  }
  else
  {
    v83 = (*(_QWORD *)&v81 - 1) & 0xC74495586E0C32F6;
  }
  v87 = *(_QWORD **)(*(_QWORD *)&v80[1] + 8 * v83);
  if (!v87 || (v88 = (_QWORD *)*v87) == 0)
  {
LABEL_267:
    v92 = 0;
    goto LABEL_268;
  }
  if (v82.u32[0] < 2uLL)
  {
    v89 = *(_QWORD *)&v81 - 1;
    while (1)
    {
      v91 = v88[1];
      if (v91 == 0xC74495586E0C32F6)
      {
        if (v88[2] == 0xC74495586E0C32F6)
          goto LABEL_299;
      }
      else if ((v91 & v89) != v83)
      {
        goto LABEL_267;
      }
      v88 = (_QWORD *)*v88;
      if (!v88)
        goto LABEL_267;
    }
  }
  while (1)
  {
    v90 = v88[1];
    if (v90 == 0xC74495586E0C32F6)
      break;
    if (v90 >= *(_QWORD *)&v81)
      v90 %= *(_QWORD *)&v81;
    if (v90 != v83)
      goto LABEL_267;
LABEL_257:
    v88 = (_QWORD *)*v88;
    if (!v88)
      goto LABEL_267;
  }
  if (v88[2] != 0xC74495586E0C32F6)
    goto LABEL_257;
LABEL_299:
  v92 = v88[5];
LABEL_268:
  v93 = *v4;
  v94 = v4[1];
  if (*v4 != v94)
  {
    while (*(_BYTE *)v93 != 34)
    {
      v93 += 16;
      if (v93 == v94)
        goto LABEL_274;
    }
  }
  if (v93 == v94 || !*(_QWORD *)(v93 + 8))
  {
LABEL_274:
    if (!v92 || !*(_BYTE *)(v92 + 56) || !*(_BYTE *)(v92 + 392) || fabsf(*(float *)(v92 + 356)) <= 0.0001)
      goto LABEL_344;
  }
  v95 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v95)
    goto LABEL_344;
  v96 = (uint8x8_t)vcnt_s8(v95);
  v96.i16[0] = vaddlv_u8(v96);
  v97 = v96.u32[0];
  if (v96.u32[0] > 1uLL)
  {
    v98 = 65;
    if (*(_QWORD *)&v95 <= 0x41uLL)
      v98 = 0x41u % a3[1];
  }
  else
  {
    v98 = (v95.i32[0] - 1) & 0x41;
  }
  v99 = *(uint64_t ***)(*a3 + 8 * v98);
  if (!v99)
    goto LABEL_322;
  v100 = *v99;
  if (!v100)
    goto LABEL_322;
  if (v96.u32[0] < 2uLL)
  {
    while (1)
    {
      v102 = v100[1];
      if (v102 == 65)
      {
        if (*((_WORD *)v100 + 8) == 65)
          goto LABEL_318;
      }
      else if ((v102 & (*(_QWORD *)&v95 - 1)) != v98)
      {
        goto LABEL_320;
      }
      v100 = (uint64_t *)*v100;
      if (!v100)
        goto LABEL_320;
    }
  }
  while (2)
  {
    v101 = v100[1];
    if (v101 != 65)
    {
      if (v101 >= *(_QWORD *)&v95)
        v101 %= *(_QWORD *)&v95;
      if (v101 != v98)
        goto LABEL_320;
      goto LABEL_288;
    }
    if (*((_WORD *)v100 + 8) != 65)
    {
LABEL_288:
      v100 = (uint64_t *)*v100;
      if (!v100)
        goto LABEL_320;
      continue;
    }
    break;
  }
LABEL_318:
  if (*((_BYTE *)v100 + 18) == 2)
  {
    *(_DWORD *)((char *)v100 + 18) = (*((unsigned __int16 *)v100 + 10) << 16) | 1;
    v95 = (int8x8_t)a3[1];
  }
LABEL_320:
  if (!*(_QWORD *)&v95)
    goto LABEL_344;
  v108 = (uint8x8_t)vcnt_s8(v95);
  v108.i16[0] = vaddlv_u8(v108);
  v97 = v108.u32[0];
LABEL_322:
  if (v97 > 1)
  {
    v109 = 47;
    if (*(_QWORD *)&v95 <= 0x2FuLL)
      v109 = 0x2Fu % v95.u8[0];
  }
  else
  {
    v109 = (v95.i32[0] - 1) & 0x2FLL;
  }
  v110 = *(uint64_t ***)(*a3 + 8 * v109);
  if (v110)
  {
    v111 = *v110;
    if (v111)
    {
      if (v97 < 2)
      {
        v112 = *(_QWORD *)&v95 - 1;
        while (1)
        {
          v114 = v111[1];
          if (v114 == 47)
          {
            if (*((_WORD *)v111 + 8) == 47)
              goto LABEL_342;
          }
          else if ((v114 & v112) != v109)
          {
            goto LABEL_344;
          }
          v111 = (uint64_t *)*v111;
          if (!v111)
            goto LABEL_344;
        }
      }
      do
      {
        v113 = v111[1];
        if (v113 == 47)
        {
          if (*((_WORD *)v111 + 8) == 47)
          {
LABEL_342:
            if (*((_BYTE *)v111 + 18) == 2)
              *(_DWORD *)((char *)v111 + 18) = (*((unsigned __int16 *)v111 + 10) << 16) | 1;
            break;
          }
        }
        else
        {
          if (v113 >= *(_QWORD *)&v95)
            v113 %= *(_QWORD *)&v95;
          if (v113 != v109)
            break;
        }
        v111 = (uint64_t *)*v111;
      }
      while (v111);
    }
  }
LABEL_344:
  v115 = *v4;
  v116 = v4[1];
  v117 = *v4;
  if (*v4 != v116)
  {
    v117 = *v4;
    while (*(_BYTE *)v117 != 13)
    {
      v117 += 16;
      if (v117 == v116)
        goto LABEL_352;
    }
  }
  if (v117 != v116 && *(_QWORD *)(v117 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x36u);
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xEu);
    goto LABEL_444;
  }
LABEL_352:
  v118 = *v4;
  if (v115 != v116)
  {
    v118 = *v4;
    while (*(_BYTE *)v118 != 1)
    {
      v118 += 16;
      if (v118 == v116)
        goto LABEL_369;
    }
  }
  if (v118 == v116 || !*(_QWORD *)(v118 + 8))
    goto LABEL_369;
  v119 = *v4;
  if (v115 != v116)
  {
    v119 = *v4;
    while (*(_BYTE *)v119 != 24)
    {
      v119 += 16;
      if (v119 == v116)
        goto LABEL_369;
    }
  }
  if (v119 == v116 || !*(_QWORD *)(v119 + 8))
  {
LABEL_369:
    if (v115 != v116)
    {
      while (*(_BYTE *)v115 != 1)
      {
        v115 += 16;
        if (v115 == v116)
          goto LABEL_444;
      }
    }
    if (v115 != v116)
    {
      if (*(_QWORD *)(v115 + 8))
      {
        v124 = (int8x8_t)a3[1];
        if (v124)
        {
          v125 = (uint8x8_t)vcnt_s8(v124);
          v125.i16[0] = vaddlv_u8(v125);
          if (v125.u32[0] > 1uLL)
          {
            v126 = 14;
            if (*(_QWORD *)&v124 <= 0xEuLL)
              v126 = 0xEu % a3[1];
          }
          else
          {
            v126 = (v124.i8[0] - 1) & 0xE;
          }
          v127 = *(uint64_t ***)(*a3 + 8 * v126);
          if (v127)
          {
            v128 = *v127;
            if (v128)
            {
              if (v125.u32[0] < 2uLL)
              {
                v129 = *(_QWORD *)&v124 - 1;
                while (1)
                {
                  v131 = v128[1];
                  if (v131 == 14)
                  {
                    if (*((_WORD *)v128 + 8) == 14)
                      goto LABEL_414;
                  }
                  else if ((v131 & v129) != v126)
                  {
                    goto LABEL_444;
                  }
                  v128 = (uint64_t *)*v128;
                  if (!v128)
                    goto LABEL_444;
                }
              }
              while (1)
              {
                v130 = v128[1];
                if (v130 == 14)
                {
                  if (*((_WORD *)v128 + 8) == 14)
                  {
LABEL_414:
                    if (*((_BYTE *)v128 + 18) == 2)
                      *(_DWORD *)((char *)v128 + 18) = (*((unsigned __int16 *)v128 + 10) << 16) | 1;
                    goto LABEL_444;
                  }
                }
                else
                {
                  if (v130 >= *(_QWORD *)&v124)
                    v130 %= *(_QWORD *)&v124;
                  if (v130 != v126)
                    goto LABEL_444;
                }
                v128 = (uint64_t *)*v128;
                if (!v128)
                  goto LABEL_444;
              }
            }
          }
        }
      }
    }
    goto LABEL_444;
  }
  v120 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v120)
    goto LABEL_444;
  v121 = (uint8x8_t)vcnt_s8(v120);
  v121.i16[0] = vaddlv_u8(v121);
  v122 = v121.u32[0];
  if (v121.u32[0] > 1uLL)
  {
    v123 = 54;
    if (*(_QWORD *)&v120 <= 0x36uLL)
      v123 = 0x36u % a3[1];
  }
  else
  {
    v123 = (v120.i32[0] - 1) & 0x36;
  }
  v132 = *(uint64_t ***)(*a3 + 8 * v123);
  if (!v132)
    goto LABEL_422;
  v133 = *v132;
  if (!v133)
    goto LABEL_422;
  if (v121.u32[0] < 2uLL)
  {
    while (1)
    {
      v135 = v133[1];
      if (v135 == 54)
      {
        if (*((_WORD *)v133 + 8) == 54)
          goto LABEL_418;
      }
      else if ((v135 & (*(_QWORD *)&v120 - 1)) != v123)
      {
        goto LABEL_420;
      }
      v133 = (uint64_t *)*v133;
      if (!v133)
        goto LABEL_420;
    }
  }
  while (2)
  {
    v134 = v133[1];
    if (v134 != 54)
    {
      if (v134 >= *(_QWORD *)&v120)
        v134 %= *(_QWORD *)&v120;
      if (v134 != v123)
        goto LABEL_420;
      goto LABEL_403;
    }
    if (*((_WORD *)v133 + 8) != 54)
    {
LABEL_403:
      v133 = (uint64_t *)*v133;
      if (!v133)
        goto LABEL_420;
      continue;
    }
    break;
  }
LABEL_418:
  if (*((_BYTE *)v133 + 18) == 2)
  {
    *(_DWORD *)((char *)v133 + 18) = (*((unsigned __int16 *)v133 + 10) << 16) | 1;
    v120 = (int8x8_t)a3[1];
  }
LABEL_420:
  if (!*(_QWORD *)&v120)
    goto LABEL_444;
  v136 = (uint8x8_t)vcnt_s8(v120);
  v136.i16[0] = vaddlv_u8(v136);
  v122 = v136.u32[0];
LABEL_422:
  if (v122 > 1)
  {
    v137 = 60;
    if (*(_QWORD *)&v120 <= 0x3CuLL)
      v137 = 0x3Cu % v120.u8[0];
  }
  else
  {
    v137 = (v120.i8[0] - 1) & 0x3C;
  }
  v138 = *(uint64_t ***)(*a3 + 8 * v137);
  if (v138)
  {
    v139 = *v138;
    if (v139)
    {
      if (v122 < 2)
      {
        v140 = *(_QWORD *)&v120 - 1;
        while (1)
        {
          v142 = v139[1];
          if (v142 == 60)
          {
            if (*((_WORD *)v139 + 8) == 60)
              goto LABEL_442;
          }
          else if ((v142 & v140) != v137)
          {
            goto LABEL_444;
          }
          v139 = (uint64_t *)*v139;
          if (!v139)
            goto LABEL_444;
        }
      }
      do
      {
        v141 = v139[1];
        if (v141 == 60)
        {
          if (*((_WORD *)v139 + 8) == 60)
          {
LABEL_442:
            if (*((_BYTE *)v139 + 18) == 2)
              *(_DWORD *)((char *)v139 + 18) = (*((unsigned __int16 *)v139 + 10) << 16) | 1;
            break;
          }
        }
        else
        {
          if (v141 >= *(_QWORD *)&v120)
            v141 %= *(_QWORD *)&v120;
          if (v141 != v137)
            break;
        }
        v139 = (uint64_t *)*v139;
      }
      while (v139);
    }
  }
LABEL_444:
  v143 = *v4;
  v144 = v4[1];
  v145 = *v4;
  if (*v4 != v144)
  {
    v145 = *v4;
    while (*(_BYTE *)v145 != 25)
    {
      v145 += 16;
      if (v145 == v144)
        goto LABEL_461;
    }
  }
  if (v145 == v144 || !*(_QWORD *)(v145 + 8))
    goto LABEL_461;
  v146 = *v4;
  if (v143 != v144)
  {
    v146 = *v4;
    while (*(_BYTE *)v146 != 28)
    {
      v146 += 16;
      if (v146 == v144)
        goto LABEL_461;
    }
  }
  if (v146 == v144 || !*(_QWORD *)(v146 + 8))
  {
LABEL_461:
    v150 = (int8x8_t)a3[1];
    if (v150)
    {
      v151 = (uint8x8_t)vcnt_s8(v150);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] > 1uLL)
      {
        v152 = 20;
        if (*(_QWORD *)&v150 <= 0x14uLL)
          v152 = 0x14u % a3[1];
      }
      else
      {
        v152 = (v150.i32[0] - 1) & 0x14;
      }
      v153 = *(uint64_t ***)(*a3 + 8 * v152);
      if (v153)
      {
        v154 = *v153;
        if (v154)
        {
          if (v151.u32[0] < 2uLL)
          {
            v155 = *(_QWORD *)&v150 - 1;
            while (1)
            {
              v157 = v154[1];
              if (v157 == 20)
              {
                if (*((_WORD *)v154 + 8) == 20)
                  goto LABEL_529;
              }
              else if ((v157 & v155) != v152)
              {
                goto LABEL_531;
              }
              v154 = (uint64_t *)*v154;
              if (!v154)
                goto LABEL_531;
            }
          }
          while (1)
          {
            v156 = v154[1];
            if (v156 == 20)
            {
              if (*((_WORD *)v154 + 8) == 20)
                goto LABEL_529;
            }
            else
            {
              if (v156 >= *(_QWORD *)&v150)
                v156 %= *(_QWORD *)&v150;
              if (v156 != v152)
                goto LABEL_531;
            }
            v154 = (uint64_t *)*v154;
            if (!v154)
              goto LABEL_531;
          }
        }
      }
    }
    goto LABEL_531;
  }
  v147 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v147)
    goto LABEL_504;
  v148 = (uint8x8_t)vcnt_s8(v147);
  v148.i16[0] = vaddlv_u8(v148);
  if (v148.u32[0] > 1uLL)
  {
    v149 = 24;
    if (*(_QWORD *)&v147 <= 0x18uLL)
      v149 = 0x18u % a3[1];
  }
  else
  {
    v149 = (v147.i8[0] - 1) & 0x18;
  }
  v158 = *(uint64_t ***)(*a3 + 8 * v149);
  if (!v158)
    goto LABEL_504;
  v159 = *v158;
  if (!v159)
    goto LABEL_504;
  if (v148.u32[0] < 2uLL)
  {
    v160 = *(_QWORD *)&v147 - 1;
    while (1)
    {
      v162 = v159[1];
      if (v162 == 24)
      {
        if (*((_WORD *)v159 + 8) == 24)
          goto LABEL_500;
      }
      else if ((v162 & v160) != v149)
      {
        goto LABEL_504;
      }
      v159 = (uint64_t *)*v159;
      if (!v159)
        goto LABEL_504;
    }
  }
  while (2)
  {
    v161 = v159[1];
    if (v161 != 24)
    {
      if (v161 >= *(_QWORD *)&v147)
        v161 %= *(_QWORD *)&v147;
      if (v161 != v149)
        goto LABEL_504;
      goto LABEL_489;
    }
    if (*((_WORD *)v159 + 8) != 24)
    {
LABEL_489:
      v159 = (uint64_t *)*v159;
      if (!v159)
        goto LABEL_504;
      continue;
    }
    break;
  }
LABEL_500:
  if (*((_BYTE *)v159 + 18) == 2)
  {
    *(_DWORD *)((char *)v159 + 18) = (*((unsigned __int16 *)v159 + 10) << 16) | 1;
    v143 = *v4;
    v144 = v4[1];
  }
  while (1)
  {
LABEL_504:
    if (v143 == v144)
      goto LABEL_531;
    if (*(_BYTE *)v143 == 39)
      break;
    v143 += 16;
  }
  if (v143 != v144)
  {
    if (*(_QWORD *)(v143 + 8))
    {
      v163 = (int8x8_t)a3[1];
      if (v163)
      {
        v164 = (uint8x8_t)vcnt_s8(v163);
        v164.i16[0] = vaddlv_u8(v164);
        if (v164.u32[0] > 1uLL)
        {
          v165 = 74;
          if (*(_QWORD *)&v163 <= 0x4AuLL)
            v165 = 0x4Au % a3[1];
        }
        else
        {
          v165 = (v163.i32[0] - 1) & 0x4ALL;
        }
        v166 = *(uint64_t ***)(*a3 + 8 * v165);
        if (v166)
        {
          v154 = *v166;
          if (v154)
          {
            if (v164.u32[0] < 2uLL)
            {
              v167 = *(_QWORD *)&v163 - 1;
              while (1)
              {
                v169 = v154[1];
                if (v169 == 74)
                {
                  if (*((_WORD *)v154 + 8) == 74)
                    goto LABEL_529;
                }
                else if ((v169 & v167) != v165)
                {
                  goto LABEL_531;
                }
                v154 = (uint64_t *)*v154;
                if (!v154)
                  goto LABEL_531;
              }
            }
            do
            {
              v168 = v154[1];
              if (v168 == 74)
              {
                if (*((_WORD *)v154 + 8) == 74)
                {
LABEL_529:
                  if (*((_BYTE *)v154 + 18) == 2)
                    *(_DWORD *)((char *)v154 + 18) = (*((unsigned __int16 *)v154 + 10) << 16) | 1;
                  break;
                }
              }
              else
              {
                if (v168 >= *(_QWORD *)&v163)
                  v168 %= *(_QWORD *)&v163;
                if (v168 != v165)
                  break;
              }
              v154 = (uint64_t *)*v154;
            }
            while (v154);
          }
        }
      }
    }
  }
LABEL_531:
  v170 = *v4;
  v171 = v4[1];
  v172 = *v4;
  if (*v4 != v171)
  {
    v172 = *v4;
    while (*(_BYTE *)v172 != 2)
    {
      v172 += 16;
      if (v172 == v171)
        goto LABEL_538;
    }
  }
  if (v172 == v171 || !*(_QWORD *)(v172 + 8))
  {
LABEL_538:
    if (v170 != v171)
    {
      while (*(_BYTE *)v170 != 4)
      {
        v170 += 16;
        if (v170 == v171)
          goto LABEL_615;
      }
    }
    if (v170 == v171 || !*(_QWORD *)(v170 + 8))
      goto LABEL_615;
  }
  v173 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v173)
    goto LABEL_615;
  v174 = (uint8x8_t)vcnt_s8(v173);
  v174.i16[0] = vaddlv_u8(v174);
  v175 = v174.u32[0];
  if (v174.u32[0] > 1uLL)
  {
    v176 = 3;
    if (*(_QWORD *)&v173 <= 3uLL)
      v176 = 3u % a3[1];
  }
  else
  {
    v176 = (v173.i8[0] - 1) & 3;
  }
  v177 = *(uint64_t ***)(*a3 + 8 * v176);
  if (!v177)
    goto LABEL_569;
  v178 = *v177;
  if (!v178)
    goto LABEL_569;
  if (v174.u32[0] < 2uLL)
  {
    while (1)
    {
      v180 = v178[1];
      if (v180 == 3)
      {
        if (*((_WORD *)v178 + 8) == 3)
          goto LABEL_565;
      }
      else if ((v180 & (*(_QWORD *)&v173 - 1)) != v176)
      {
        goto LABEL_567;
      }
      v178 = (uint64_t *)*v178;
      if (!v178)
        goto LABEL_567;
    }
  }
  while (2)
  {
    v179 = v178[1];
    if (v179 != 3)
    {
      if (v179 >= *(_QWORD *)&v173)
        v179 %= *(_QWORD *)&v173;
      if (v179 != v176)
        goto LABEL_567;
      goto LABEL_554;
    }
    if (*((_WORD *)v178 + 8) != 3)
    {
LABEL_554:
      v178 = (uint64_t *)*v178;
      if (!v178)
        goto LABEL_567;
      continue;
    }
    break;
  }
LABEL_565:
  if (*((_BYTE *)v178 + 18) == 2)
  {
    *(_DWORD *)((char *)v178 + 18) = (*((unsigned __int16 *)v178 + 10) << 16) | 1;
    v173 = (int8x8_t)a3[1];
  }
LABEL_567:
  if (!*(_QWORD *)&v173)
    goto LABEL_615;
  v181 = (uint8x8_t)vcnt_s8(v173);
  v181.i16[0] = vaddlv_u8(v181);
  v175 = v181.u32[0];
LABEL_569:
  if (v175 > 1)
  {
    v182 = 52;
    if (*(_QWORD *)&v173 <= 0x34uLL)
      v182 = 0x34u % v173.u8[0];
  }
  else
  {
    v182 = (v173.i32[0] - 1) & 0x34;
  }
  v183 = *(uint64_t ***)(*a3 + 8 * v182);
  if (!v183)
    goto LABEL_593;
  v184 = *v183;
  if (!v184)
    goto LABEL_593;
  if (v175 < 2)
  {
    while (1)
    {
      v186 = v184[1];
      if (v186 == 52)
      {
        if (*((_WORD *)v184 + 8) == 52)
          goto LABEL_589;
      }
      else if ((v186 & (*(_QWORD *)&v173 - 1)) != v182)
      {
        goto LABEL_591;
      }
      v184 = (uint64_t *)*v184;
      if (!v184)
        goto LABEL_591;
    }
  }
  while (2)
  {
    v185 = v184[1];
    if (v185 != 52)
    {
      if (v185 >= *(_QWORD *)&v173)
        v185 %= *(_QWORD *)&v173;
      if (v185 != v182)
        goto LABEL_591;
      goto LABEL_578;
    }
    if (*((_WORD *)v184 + 8) != 52)
    {
LABEL_578:
      v184 = (uint64_t *)*v184;
      if (!v184)
        goto LABEL_591;
      continue;
    }
    break;
  }
LABEL_589:
  if (*((_BYTE *)v184 + 18) == 2)
  {
    *(_DWORD *)((char *)v184 + 18) = (*((unsigned __int16 *)v184 + 10) << 16) | 1;
    v173 = (int8x8_t)a3[1];
  }
LABEL_591:
  if (!*(_QWORD *)&v173)
    goto LABEL_615;
  v187 = (uint8x8_t)vcnt_s8(v173);
  v187.i16[0] = vaddlv_u8(v187);
  v175 = v187.u32[0];
LABEL_593:
  if (v175 > 1)
  {
    v188 = 53;
    if (*(_QWORD *)&v173 <= 0x35uLL)
      v188 = 0x35u % v173.u8[0];
  }
  else
  {
    v188 = (v173.i32[0] - 1) & 0x35;
  }
  v189 = *(uint64_t ***)(*a3 + 8 * v188);
  if (v189)
  {
    v190 = *v189;
    if (v190)
    {
      if (v175 < 2)
      {
        v191 = *(_QWORD *)&v173 - 1;
        while (1)
        {
          v193 = v190[1];
          if (v193 == 53)
          {
            if (*((_WORD *)v190 + 8) == 53)
              goto LABEL_613;
          }
          else if ((v193 & v191) != v188)
          {
            goto LABEL_615;
          }
          v190 = (uint64_t *)*v190;
          if (!v190)
            goto LABEL_615;
        }
      }
      do
      {
        v192 = v190[1];
        if (v192 == 53)
        {
          if (*((_WORD *)v190 + 8) == 53)
          {
LABEL_613:
            if (*((_BYTE *)v190 + 18) == 2)
              *(_DWORD *)((char *)v190 + 18) = (*((unsigned __int16 *)v190 + 10) << 16) | 1;
            break;
          }
        }
        else
        {
          if (v192 >= *(_QWORD *)&v173)
            v192 %= *(_QWORD *)&v173;
          if (v192 != v188)
            break;
        }
        v190 = (uint64_t *)*v190;
      }
      while (v190);
    }
  }
LABEL_615:
  v194 = *v4;
  v195 = v4[1];
  v196 = *v4;
  if (*v4 != v195)
  {
    v196 = *v4;
    while (*(_BYTE *)v196 != 36)
    {
      v196 += 16;
      if (v196 == v195)
        goto LABEL_645;
    }
  }
  if (v196 != v195)
  {
    if (*(_QWORD *)(v196 + 8))
    {
      v197 = (int8x8_t)a3[1];
      if (v197)
      {
        v198 = (uint8x8_t)vcnt_s8(v197);
        v198.i16[0] = vaddlv_u8(v198);
        if (v198.u32[0] > 1uLL)
        {
          v199 = 69;
          if (*(_QWORD *)&v197 <= 0x45uLL)
            v199 = 0x45u % a3[1];
        }
        else
        {
          v199 = (v197.i32[0] - 1) & 0x45;
        }
        v200 = *(uint64_t ***)(*a3 + 8 * v199);
        if (v200)
        {
          v201 = *v200;
          if (v201)
          {
            if (v198.u32[0] < 2uLL)
            {
              v202 = *(_QWORD *)&v197 - 1;
              while (1)
              {
                v204 = v201[1];
                if (v204 == 69)
                {
                  if (*((_WORD *)v201 + 8) == 69)
                    goto LABEL_643;
                }
                else if ((v204 & v202) != v199)
                {
                  goto LABEL_645;
                }
                v201 = (uint64_t *)*v201;
                if (!v201)
                  goto LABEL_645;
              }
            }
            do
            {
              v203 = v201[1];
              if (v203 == 69)
              {
                if (*((_WORD *)v201 + 8) == 69)
                {
LABEL_643:
                  if (*((_BYTE *)v201 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v201 + 18) = (*((unsigned __int16 *)v201 + 10) << 16) | 1;
                    v194 = *v4;
                    v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v203 >= *(_QWORD *)&v197)
                  v203 %= *(_QWORD *)&v197;
                if (v203 != v199)
                  break;
              }
              v201 = (uint64_t *)*v201;
            }
            while (v201);
          }
        }
      }
    }
  }
LABEL_645:
  if (v194 != v195)
  {
    v205 = v194;
    do
    {
      if (*(_BYTE *)v205 == 5)
      {
        if (v205 == v195)
          break;
        if (!*(_QWORD *)(v205 + 8))
          break;
        v206 = (int8x8_t)a3[1];
        if (!*(_QWORD *)&v206)
          break;
        v207 = (uint8x8_t)vcnt_s8(v206);
        v207.i16[0] = vaddlv_u8(v207);
        if (v207.u32[0] > 1uLL)
        {
          v208 = 11;
          if (*(_QWORD *)&v206 <= 0xBuLL)
            v208 = 0xBu % a3[1];
        }
        else
        {
          v208 = (v206.i32[0] - 1) & 0xBLL;
        }
        v209 = *(uint64_t ***)(*a3 + 8 * v208);
        if (!v209)
          break;
        v210 = *v209;
        if (!v210)
          break;
        if (v207.u32[0] < 2uLL)
        {
          v211 = *(_QWORD *)&v206 - 1;
          while (1)
          {
            v213 = v210[1];
            if (v213 == 11)
            {
              if (*((_WORD *)v210 + 8) == 11)
                goto LABEL_673;
            }
            else if ((v213 & v211) != v208)
            {
              goto LABEL_675;
            }
            v210 = (uint64_t *)*v210;
            if (!v210)
              goto LABEL_675;
          }
        }
        while (1)
        {
          v212 = v210[1];
          if (v212 == 11)
          {
            if (*((_WORD *)v210 + 8) == 11)
            {
LABEL_673:
              if (*((_BYTE *)v210 + 18) == 2)
              {
                *(_DWORD *)((char *)v210 + 18) = (*((unsigned __int16 *)v210 + 10) << 16) | 1;
                v194 = *v4;
                v195 = v4[1];
              }
              goto LABEL_675;
            }
          }
          else
          {
            if (v212 >= *(_QWORD *)&v206)
              v212 %= *(_QWORD *)&v206;
            if (v212 != v208)
              goto LABEL_675;
          }
          v210 = (uint64_t *)*v210;
          if (!v210)
            goto LABEL_675;
        }
      }
      v205 += 16;
    }
    while (v205 != v195);
  }
LABEL_675:
  if (v194 == v195)
    goto LABEL_705;
  v214 = v194;
  while (*(_BYTE *)v214 != 5)
  {
    v214 += 16;
    if (v214 == v195)
      goto LABEL_705;
  }
  if (v214 != v195)
  {
    if (*(_QWORD *)(v214 + 8))
    {
      v215 = (int8x8_t)a3[1];
      if (v215)
      {
        v216 = (uint8x8_t)vcnt_s8(v215);
        v216.i16[0] = vaddlv_u8(v216);
        if (v216.u32[0] > 1uLL)
        {
          v217 = 12;
          if (*(_QWORD *)&v215 <= 0xCuLL)
            v217 = 0xCu % a3[1];
        }
        else
        {
          v217 = (v215.i8[0] - 1) & 0xC;
        }
        v218 = *(uint64_t ***)(*a3 + 8 * v217);
        if (v218)
        {
          v219 = *v218;
          if (v219)
          {
            if (v216.u32[0] < 2uLL)
            {
              v220 = *(_QWORD *)&v215 - 1;
              while (1)
              {
                v222 = v219[1];
                if (v222 == 12)
                {
                  if (*((_WORD *)v219 + 8) == 12)
                    goto LABEL_703;
                }
                else if ((v222 & v220) != v217)
                {
                  goto LABEL_705;
                }
                v219 = (uint64_t *)*v219;
                if (!v219)
                  goto LABEL_705;
              }
            }
            do
            {
              v221 = v219[1];
              if (v221 == 12)
              {
                if (*((_WORD *)v219 + 8) == 12)
                {
LABEL_703:
                  if (*((_BYTE *)v219 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v219 + 18) = (*((unsigned __int16 *)v219 + 10) << 16) | 1;
                    v194 = *v4;
                    v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v221 >= *(_QWORD *)&v215)
                  v221 %= *(_QWORD *)&v215;
                if (v221 != v217)
                  break;
              }
              v219 = (uint64_t *)*v219;
            }
            while (v219);
          }
        }
      }
    }
  }
LABEL_705:
  if (v194 != v195)
  {
    v223 = v194;
    do
    {
      if (*(_BYTE *)v223 == 5)
      {
        if (v223 == v195)
          break;
        if (!*(_QWORD *)(v223 + 8))
          break;
        v224 = (int8x8_t)a3[1];
        if (!*(_QWORD *)&v224)
          break;
        v225 = (uint8x8_t)vcnt_s8(v224);
        v225.i16[0] = vaddlv_u8(v225);
        if (v225.u32[0] > 1uLL)
        {
          v226 = 71;
          if (*(_QWORD *)&v224 <= 0x47uLL)
            v226 = 0x47u % a3[1];
        }
        else
        {
          v226 = (v224.i32[0] - 1) & 0x47;
        }
        v227 = *(uint64_t ***)(*a3 + 8 * v226);
        if (!v227)
          break;
        v228 = *v227;
        if (!v228)
          break;
        if (v225.u32[0] < 2uLL)
        {
          v229 = *(_QWORD *)&v224 - 1;
          while (1)
          {
            v231 = v228[1];
            if (v231 == 71)
            {
              if (*((_WORD *)v228 + 8) == 71)
                goto LABEL_733;
            }
            else if ((v231 & v229) != v226)
            {
              goto LABEL_735;
            }
            v228 = (uint64_t *)*v228;
            if (!v228)
              goto LABEL_735;
          }
        }
        while (1)
        {
          v230 = v228[1];
          if (v230 == 71)
          {
            if (*((_WORD *)v228 + 8) == 71)
            {
LABEL_733:
              if (*((_BYTE *)v228 + 18) == 2)
              {
                *(_DWORD *)((char *)v228 + 18) = (*((unsigned __int16 *)v228 + 10) << 16) | 1;
                v194 = *v4;
                v195 = v4[1];
              }
              goto LABEL_735;
            }
          }
          else
          {
            if (v230 >= *(_QWORD *)&v224)
              v230 %= *(_QWORD *)&v224;
            if (v230 != v226)
              goto LABEL_735;
          }
          v228 = (uint64_t *)*v228;
          if (!v228)
            goto LABEL_735;
        }
      }
      v223 += 16;
    }
    while (v223 != v195);
  }
LABEL_735:
  if (v194 == v195)
    goto LABEL_765;
  v232 = v194;
  while (*(_BYTE *)v232 != 5)
  {
    v232 += 16;
    if (v232 == v195)
      goto LABEL_765;
  }
  if (v232 != v195)
  {
    if (*(_QWORD *)(v232 + 8))
    {
      v233 = (int8x8_t)a3[1];
      if (v233)
      {
        v234 = (uint8x8_t)vcnt_s8(v233);
        v234.i16[0] = vaddlv_u8(v234);
        if (v234.u32[0] > 1uLL)
        {
          v235 = 72;
          if (*(_QWORD *)&v233 <= 0x48uLL)
            v235 = 0x48u % a3[1];
        }
        else
        {
          v235 = (v233.i32[0] - 1) & 0x48;
        }
        v236 = *(uint64_t ***)(*a3 + 8 * v235);
        if (v236)
        {
          v237 = *v236;
          if (v237)
          {
            if (v234.u32[0] < 2uLL)
            {
              v238 = *(_QWORD *)&v233 - 1;
              while (1)
              {
                v240 = v237[1];
                if (v240 == 72)
                {
                  if (*((_WORD *)v237 + 8) == 72)
                    goto LABEL_763;
                }
                else if ((v240 & v238) != v235)
                {
                  goto LABEL_765;
                }
                v237 = (uint64_t *)*v237;
                if (!v237)
                  goto LABEL_765;
              }
            }
            do
            {
              v239 = v237[1];
              if (v239 == 72)
              {
                if (*((_WORD *)v237 + 8) == 72)
                {
LABEL_763:
                  if (*((_BYTE *)v237 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v237 + 18) = (*((unsigned __int16 *)v237 + 10) << 16) | 1;
                    v194 = *v4;
                    v195 = v4[1];
                  }
                  break;
                }
              }
              else
              {
                if (v239 >= *(_QWORD *)&v233)
                  v239 %= *(_QWORD *)&v233;
                if (v239 != v235)
                  break;
              }
              v237 = (uint64_t *)*v237;
            }
            while (v237);
          }
        }
      }
    }
  }
LABEL_765:
  if (v194 != v195)
  {
    v241 = v194;
    while (*(_BYTE *)v241 != 8)
    {
      v241 += 16;
      if (v241 == v195)
        goto LABEL_773;
    }
    if (v241 != v195 && *(_QWORD *)(v241 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 2u);
      v194 = *v4;
      v195 = v4[1];
    }
  }
LABEL_773:
  if (v194 != v195)
  {
    v242 = v194;
    while (*(_BYTE *)v242 != 9)
    {
      v242 += 16;
      if (v242 == v195)
        goto LABEL_781;
    }
    if (v242 != v195 && *(_QWORD *)(v242 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x12u);
      v194 = *v4;
      v195 = v4[1];
    }
  }
LABEL_781:
  if (v194 == v195)
    goto LABEL_791;
  v243 = v194;
  while (*(_BYTE *)v243 != 9)
  {
    v243 += 16;
    if (v243 == v195)
      goto LABEL_791;
  }
  if (v243 != v195 && *(_QWORD *)(v243 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x16u);
    v194 = *v4;
    v195 = v4[1];
  }
LABEL_791:
  while (v194 != v195)
  {
    if (*(_BYTE *)v194 == 9)
    {
      if (v194 != v195 && *(_QWORD *)(v194 + 8))
        std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x17u);
      break;
    }
    v194 += 16;
  }
  v244 = *v4;
  v245 = v4[1];
  v246 = *v4;
  if (*v4 != v245)
  {
    v246 = *v4;
    while (*(_BYTE *)v246 != 9)
    {
      v246 += 16;
      if (v246 == v245)
        goto LABEL_800;
    }
  }
  if (v246 != v245 && *(_QWORD *)(v246 + 8))
  {
    std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x18u);
    v244 = *v4;
    v245 = v4[1];
  }
LABEL_800:
  if (v244 != v245)
  {
    v247 = v244;
    while (*(_BYTE *)v247 != 9)
    {
      v247 += 16;
      if (v247 == v245)
        goto LABEL_811;
    }
    if (v247 != v245 && *(_QWORD *)(v247 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x13u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_811:
  if (v244 != v245)
  {
    v248 = v244;
    while (*(_BYTE *)v248 != 9)
    {
      v248 += 16;
      if (v248 == v245)
        goto LABEL_819;
    }
    if (v248 != v245 && *(_QWORD *)(v248 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x14u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_819:
  if (v244 != v245)
  {
    v249 = v244;
    while (*(_BYTE *)v249 != 9)
    {
      v249 += 16;
      if (v249 == v245)
        goto LABEL_827;
    }
    if (v249 != v245 && *(_QWORD *)(v249 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xDu);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_827:
  if (v244 != v245)
  {
    v250 = v244;
    while (*(_BYTE *)v250 != 9)
    {
      v250 += 16;
      if (v250 == v245)
        goto LABEL_835;
    }
    if (v250 != v245 && *(_QWORD *)(v250 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x19u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_835:
  if (v244 != v245)
  {
    v251 = v244;
    while (*(_BYTE *)v251 != 9)
    {
      v251 += 16;
      if (v251 == v245)
        goto LABEL_843;
    }
    if (v251 != v245 && *(_QWORD *)(v251 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Au);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_843:
  if (v244 != v245)
  {
    v252 = v244;
    while (*(_BYTE *)v252 != 9)
    {
      v252 += 16;
      if (v252 == v245)
        goto LABEL_851;
    }
    if (v252 != v245 && *(_QWORD *)(v252 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x42u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_851:
  if (v244 != v245)
  {
    v253 = v244;
    while (*(_BYTE *)v253 != 9)
    {
      v253 += 16;
      if (v253 == v245)
        goto LABEL_859;
    }
    if (v253 != v245 && *(_QWORD *)(v253 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x49u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_859:
  if (v244 != v245)
  {
    v254 = v244;
    while (*(_BYTE *)v254 != 9)
    {
      v254 += 16;
      if (v254 == v245)
        goto LABEL_867;
    }
    if (v254 != v245 && *(_QWORD *)(v254 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x50u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_867:
  if (v244 != v245)
  {
    v255 = v244;
    while (*(_BYTE *)v255 != 9)
    {
      v255 += 16;
      if (v255 == v245)
        goto LABEL_875;
    }
    if (v255 != v245 && *(_QWORD *)(v255 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x1Bu);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_875:
  if (v244 != v245)
  {
    v256 = v244;
    while (*(_BYTE *)v256 != 9)
    {
      v256 += 16;
      if (v256 == v245)
        goto LABEL_883;
    }
    if (v256 != v245 && *(_QWORD *)(v256 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x4Au);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_883:
  if (v244 != v245)
  {
    v257 = v244;
    while (*(_BYTE *)v257 != 9)
    {
      v257 += 16;
      if (v257 == v245)
        goto LABEL_891;
    }
    if (v257 != v245 && *(_QWORD *)(v257 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x25u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_891:
  if (v244 != v245)
  {
    v258 = v244;
    while (*(_BYTE *)v258 != 9)
    {
      v258 += 16;
      if (v258 == v245)
        goto LABEL_899;
    }
    if (v258 != v245 && *(_QWORD *)(v258 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0x26u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_899:
  if (v244 != v245)
  {
    v259 = v244;
    while (*(_BYTE *)v259 != 10)
    {
      v259 += 16;
      if (v259 == v245)
        goto LABEL_907;
    }
    if (v259 != v245 && *(_QWORD *)(v259 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 1u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_907:
  if (v244 != v245)
  {
    v260 = v244;
    while (*(_BYTE *)v260 != 14)
    {
      v260 += 16;
      if (v260 == v245)
        goto LABEL_915;
    }
    if (v260 != v245 && *(_QWORD *)(v260 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 8u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_915:
  if (v244 != v245)
  {
    v261 = v244;
    while (*(_BYTE *)v261 != 14)
    {
      v261 += 16;
      if (v261 == v245)
        goto LABEL_923;
    }
    if (v261 != v245 && *(_QWORD *)(v261 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 9u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_923:
  if (v244 != v245)
  {
    v262 = v244;
    while (*(_BYTE *)v262 != 14)
    {
      v262 += 16;
      if (v262 == v245)
        goto LABEL_931;
    }
    if (v262 != v245 && *(_QWORD *)(v262 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 0xAu);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_931:
  if (v244 != v245)
  {
    v263 = v244;
    while (*(_BYTE *)v263 != 14)
    {
      v263 += 16;
      if (v263 == v245)
        goto LABEL_939;
    }
    if (v263 != v245 && *(_QWORD *)(v263 + 8))
    {
      std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(a3, 7u);
      v244 = *v4;
      v245 = v4[1];
    }
  }
LABEL_939:
  if (v244 == v245)
    goto LABEL_971;
  v264 = v244;
  while (*(_BYTE *)v264 != 18)
  {
    v264 += 16;
    if (v264 == v245)
      goto LABEL_971;
  }
  if (v264 != v245)
  {
    if (*(_QWORD *)(v264 + 8))
    {
      v265 = (int8x8_t)a3[1];
      if (v265)
      {
        v266 = (uint8x8_t)vcnt_s8(v265);
        v266.i16[0] = vaddlv_u8(v266);
        if (v266.u32[0] > 1uLL)
        {
          v267 = 35;
          if (*(_QWORD *)&v265 <= 0x23uLL)
            v267 = 0x23u % a3[1];
        }
        else
        {
          v267 = (v265.i32[0] - 1) & 0x23;
        }
        v268 = *(uint64_t ***)(*a3 + 8 * v267);
        if (v268)
        {
          v269 = *v268;
          if (v269)
          {
            if (v266.u32[0] < 2uLL)
            {
              v270 = *(_QWORD *)&v265 - 1;
              while (1)
              {
                v272 = v269[1];
                if (v272 == 35)
                {
                  if (*((_WORD *)v269 + 8) == 35)
                    goto LABEL_967;
                }
                else if ((v272 & v270) != v267)
                {
                  goto LABEL_971;
                }
                v269 = (uint64_t *)*v269;
                if (!v269)
                  goto LABEL_971;
              }
            }
            while (1)
            {
              v271 = v269[1];
              if (v271 == 35)
              {
                if (*((_WORD *)v269 + 8) == 35)
                {
LABEL_967:
                  if (*((_BYTE *)v269 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v269 + 18) = (*((unsigned __int16 *)v269 + 10) << 16) | 1;
                    v244 = *v4;
                    v245 = v4[1];
                  }
                  goto LABEL_971;
                }
              }
              else
              {
                if (v271 >= *(_QWORD *)&v265)
                  v271 %= *(_QWORD *)&v265;
                if (v271 != v267)
                  goto LABEL_971;
              }
              v269 = (uint64_t *)*v269;
              if (!v269)
                goto LABEL_971;
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_971:
    if (v244 == v245)
      goto LABEL_972;
    if (*(_BYTE *)v244 == 19)
      break;
    v244 += 16;
  }
  if (v244 != v245)
  {
    if (*(_QWORD *)(v244 + 8))
    {
      v279 = (int8x8_t)a3[1];
      if (v279)
      {
        v280 = (uint8x8_t)vcnt_s8(v279);
        v280.i16[0] = vaddlv_u8(v280);
        if (v280.u32[0] > 1uLL)
        {
          v281 = 40;
          if (*(_QWORD *)&v279 <= 0x28uLL)
            v281 = 0x28u % a3[1];
        }
        else
        {
          v281 = (v279.i32[0] - 1) & 0x28;
        }
        v287 = *(uint64_t ***)(*a3 + 8 * v281);
        if (v287)
        {
          v288 = *v287;
          if (v288)
          {
            if (v280.u32[0] < 2uLL)
            {
              v289 = *(_QWORD *)&v279 - 1;
              while (1)
              {
                v291 = v288[1];
                if (v291 == 40)
                {
                  if (*((_WORD *)v288 + 8) == 40)
                    goto LABEL_1052;
                }
                else if ((v291 & v289) != v281)
                {
                  goto LABEL_972;
                }
                v288 = (uint64_t *)*v288;
                if (!v288)
                  goto LABEL_972;
              }
            }
            do
            {
              v290 = v288[1];
              if (v290 == 40)
              {
                if (*((_WORD *)v288 + 8) == 40)
                {
LABEL_1052:
                  if (*((_BYTE *)v288 + 18) == 2)
                    *(_DWORD *)((char *)v288 + 18) = (*((unsigned __int16 *)v288 + 10) << 16) | 1;
                  break;
                }
              }
              else
              {
                if (v290 >= *(_QWORD *)&v279)
                  v290 %= *(_QWORD *)&v279;
                if (v290 != v281)
                  break;
              }
              v288 = (uint64_t *)*v288;
            }
            while (v288);
          }
        }
      }
    }
  }
LABEL_972:
  v273 = *v4;
  v274 = v4[1];
  v275 = *v4;
  if (*v4 != v274)
  {
    v275 = *v4;
    while (*(_BYTE *)v275 != 19)
    {
      v275 += 16;
      if (v275 == v274)
        goto LABEL_1027;
    }
  }
  if (v275 != v274)
  {
    if (*(_QWORD *)(v275 + 8))
    {
      v276 = (int8x8_t)a3[1];
      if (v276)
      {
        v277 = (uint8x8_t)vcnt_s8(v276);
        v277.i16[0] = vaddlv_u8(v277);
        if (v277.u32[0] > 1uLL)
        {
          v278 = 63;
          if (*(_QWORD *)&v276 <= 0x3FuLL)
            v278 = 0x3Fu % a3[1];
        }
        else
        {
          v278 = (v276.i8[0] - 1) & 0x3F;
        }
        v282 = *(uint64_t ***)(*a3 + 8 * v278);
        if (v282)
        {
          v283 = *v282;
          if (v283)
          {
            if (v277.u32[0] < 2uLL)
            {
              v284 = *(_QWORD *)&v276 - 1;
              while (1)
              {
                v286 = v283[1];
                if (v286 == 63)
                {
                  if (*((_WORD *)v283 + 8) == 63)
                    goto LABEL_1023;
                }
                else if ((v286 & v284) != v278)
                {
                  goto LABEL_1027;
                }
                v283 = (uint64_t *)*v283;
                if (!v283)
                  goto LABEL_1027;
              }
            }
            while (1)
            {
              v285 = v283[1];
              if (v285 == 63)
              {
                if (*((_WORD *)v283 + 8) == 63)
                {
LABEL_1023:
                  if (*((_BYTE *)v283 + 18) == 2)
                  {
                    *(_DWORD *)((char *)v283 + 18) = (*((unsigned __int16 *)v283 + 10) << 16) | 1;
                    v273 = *v4;
                    v274 = v4[1];
                  }
                  goto LABEL_1027;
                }
              }
              else
              {
                if (v285 >= *(_QWORD *)&v276)
                  v285 %= *(_QWORD *)&v276;
                if (v285 != v278)
                  goto LABEL_1027;
              }
              v283 = (uint64_t *)*v283;
              if (!v283)
                goto LABEL_1027;
            }
          }
        }
      }
    }
  }
  while (1)
  {
LABEL_1027:
    if (v273 == v274)
      return;
    if (*(_BYTE *)v273 == 21)
      break;
    v273 += 16;
  }
  if (v273 != v274)
  {
    if (*(_QWORD *)(v273 + 8))
    {
      v292 = (int8x8_t)a3[1];
      if (v292)
      {
        v293 = (uint8x8_t)vcnt_s8(v292);
        v293.i16[0] = vaddlv_u8(v293);
        if (v293.u32[0] > 1uLL)
        {
          v294 = 51;
          if (*(_QWORD *)&v292 <= 0x33uLL)
            v294 = 0x33u % a3[1];
        }
        else
        {
          v294 = (v292.i32[0] - 1) & 0x33;
        }
        v295 = *(uint64_t ***)(*a3 + 8 * v294);
        if (v295)
        {
          v296 = *v295;
          if (v296)
          {
            if (v293.u32[0] < 2uLL)
            {
              v297 = *(_QWORD *)&v292 - 1;
              while (1)
              {
                v299 = v296[1];
                if (v299 == 51)
                {
                  if (*((_WORD *)v296 + 8) == 51)
                    goto LABEL_1054;
                }
                else if ((v299 & v297) != v294)
                {
                  return;
                }
                v296 = (uint64_t *)*v296;
                if (!v296)
                  return;
              }
            }
            do
            {
              v298 = v296[1];
              if (v298 == 51)
              {
                if (*((_WORD *)v296 + 8) == 51)
                {
LABEL_1054:
                  if (*((_BYTE *)v296 + 18) == 2)
                    *(_DWORD *)((char *)v296 + 18) = (*((unsigned __int16 *)v296 + 10) << 16) | 1;
                  return;
                }
              }
              else
              {
                if (v298 >= *(_QWORD *)&v292)
                  v298 %= *(_QWORD *)&v292;
                if (v298 != v294)
                  return;
              }
              v296 = (uint64_t *)*v296;
            }
            while (v296);
          }
        }
      }
    }
  }
}

void std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_WORD *std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D8B88;
  result[4] = *(_WORD *)(a1 + 8);
  *((_BYTE *)result + 10) = *(_BYTE *)(a1 + 10);
  return result;
}

uint64_t std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone(uint64_t result, uint64_t a2)
{
  __int16 v2;

  *(_QWORD *)a2 = &off_1E42D8B88;
  v2 = *(_WORD *)(result + 8);
  *(_BYTE *)(a2 + 10) = *(_BYTE *)(result + 10);
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

BOOL std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::operator()(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = *a2;
  v3 = 1;
  if (*a2 > (uint64_t)0xEC9B77B4222D22FELL)
  {
    if (v2 == 0xEC9B77B4222D22FFLL || v2 == 0x7F1D62124B97A26)
    {
      v4 = a1 + 8;
      return *v4 != 0;
    }
  }
  else
  {
    if (v2 == 0xA5031243356EEB30)
    {
      v4 = a1 + 10;
      return *v4 != 0;
    }
    if (v2 == 0xEA624BC935BAF297)
    {
      v4 = a1 + 9;
      return *v4 != 0;
    }
  }
  return v3;
}

void std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__erase_unique<md::MapDataType>(uint64_t *a1, unsigned __int16 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 **v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;

  v2 = a1[1];
  if (v2)
  {
    v3 = a2;
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *a1;
    v7 = *(unsigned __int16 ***)(*a1 + 8 * v5);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        v9 = v2 - 1;
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            v10 = *((_QWORD *)v8 + 1);
            if (v10 == a2)
            {
              if (v8[8] == a2)
                goto LABEL_22;
            }
            else if ((v10 & v9) != v5)
            {
              return;
            }
            v8 = *(unsigned __int16 **)v8;
            if (!v8)
              return;
          }
        }
        do
        {
          v11 = *((_QWORD *)v8 + 1);
          if (v11 == a2)
          {
            if (v8[8] == a2)
            {
LABEL_22:
              if (v4.u32[0] > 1uLL)
              {
                if (v2 <= a2)
                  v3 = a2 % v2;
              }
              else
              {
                v3 = v9 & a2;
              }
              v12 = *(unsigned __int16 **)(v6 + 8 * v3);
              do
              {
                v13 = (uint64_t *)v12;
                v12 = *(unsigned __int16 **)v12;
              }
              while (v12 != v8);
              if (v13 == a1 + 2)
                goto LABEL_39;
              v14 = v13[1];
              if (v4.u32[0] > 1uLL)
              {
                if (v14 >= v2)
                  v14 %= v2;
              }
              else
              {
                v14 &= v9;
              }
              if (v14 != v3)
              {
LABEL_39:
                if (!*(_QWORD *)v8)
                  goto LABEL_40;
                v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
                if (v4.u32[0] > 1uLL)
                {
                  if (v15 >= v2)
                    v15 %= v2;
                }
                else
                {
                  v15 &= v9;
                }
                if (v15 != v3)
LABEL_40:
                  *(_QWORD *)(v6 + 8 * v3) = 0;
              }
              v16 = *(unsigned __int16 **)v8;
              if (*(_QWORD *)v8)
              {
                v17 = *((_QWORD *)v16 + 1);
                if (v4.u32[0] > 1uLL)
                {
                  if (v17 >= v2)
                    v17 %= v2;
                }
                else
                {
                  v17 &= v9;
                }
                if (v17 != v3)
                {
                  *(_QWORD *)(*a1 + 8 * v17) = v13;
                  v16 = *(unsigned __int16 **)v8;
                }
              }
              *v13 = (uint64_t)v16;
              *(_QWORD *)v8 = 0;
              --a1[3];
              operator delete(v8);
              return;
            }
          }
          else
          {
            if (v11 >= v2)
              v11 %= v2;
            if (v11 != v5)
              return;
          }
          v8 = *(unsigned __int16 **)v8;
        }
        while (v8);
      }
    }
  }
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB0A8;
  return result;
}

uint64_t std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<ecs2::ExecutionTaskDescriptor>,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor const*,ecs2::ExecutionTaskDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  const std::string::value_type **v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v8 = a1 + v6;
      *(_WORD *)(a3 + v6) = *(_WORD *)(a1 + v6);
      ecs2::ExecutionTaskFunction::ExecutionTaskFunction((_QWORD *)(a3 + v6 + 8), (_QWORD *)(a1 + v6 + 8));
      v9 = (const std::string::value_type **)(a1 + v6 + 104);
      if (*(char *)(a1 + v6 + 127) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a3 + v6 + 104), *v9, *(_QWORD *)(v8 + 112));
      }
      else
      {
        v7 = *(_OWORD *)v9;
        *(_QWORD *)(a3 + v6 + 120) = *(_QWORD *)(v8 + 120);
        *(_OWORD *)(a3 + v6 + 104) = v7;
      }
      v6 += 128;
    }
    while (v8 + 128 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_19F4F57C8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (_QWORD *)v2[12];
  if (v4 == v2 + 9)
  {
    v5 = 4;
    v4 = v2 + 9;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)v2[8];
  if (v6 == v2 + 5)
  {
    v7 = 4;
    v6 = v2 + 5;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (_QWORD *)v2[4];
  if (v8 == v1)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
    v1 = (_QWORD *)v2[4];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v9))(v1);
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t ecs2::ModuleBucketDescriptor::ModuleBucketDescriptor(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(a1 + 8), (const ecs2::ModuleBucketExecutionDescriptor *)(a2 + 8));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>((_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 6);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>((_QWORD *)(a1 + 104), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 6);
  return a1;
}

void sub_19F4F58E8(_Unwind_Exception *a1)
{
  ecs2::ModuleBucketExecutionDescriptor *v1;
  uint64_t v2;
  void **v3;
  void **v5;
  void **v6;
  void *v7;
  void **v8;
  uint64_t v9;

  v5 = (void **)*v3;
  if (!*v3)
  {
LABEL_14:
    ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(v1);
    _Unwind_Resume(a1);
  }
  v6 = *(void ***)(v2 + 88);
  v7 = *v3;
  if (v6 == v5)
  {
LABEL_13:
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v7);
    goto LABEL_14;
  }
  while (1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*(v6 - 3));
    v8 = (void **)*(v6 - 4);
    if (v6 - 7 == v8)
    {
      v8 = v6 - 7;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_6;
      v9 = 5;
    }
    (*((void (**)(void))*v8 + v9))();
LABEL_6:
    v6 -= 8;
    if (v6 == v5)
    {
      v7 = *v3;
      goto LABEL_13;
    }
  }
}

void **ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  uint64_t v11;

  v2 = (void **)a1[3];
  if (v2)
  {
    v3 = (void **)a1[4];
    v4 = a1[3];
    if (v3 == v2)
    {
LABEL_13:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_14;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v5 = (void **)*(v3 - 4);
      if (v3 - 7 == v5)
      {
        v5 = v3 - 7;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*((void (**)(void))*v5 + v6))();
LABEL_6:
      v3 -= 8;
      if (v3 == v2)
      {
        v4 = a1[3];
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  v7 = (void **)*a1;
  if (*a1)
  {
    v8 = (void **)a1[1];
    v9 = *a1;
    if (v8 == v7)
    {
LABEL_26:
      a1[1] = v7;
      operator delete(v9);
      return a1;
    }
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
        operator delete(*(v8 - 3));
      v10 = (void **)*(v8 - 4);
      if (v8 - 7 == v10)
      {
        v10 = v8 - 7;
        v11 = 4;
      }
      else
      {
        if (!v10)
          goto LABEL_19;
        v11 = 5;
      }
      (*((void (**)(void))*v10 + v11))();
LABEL_19:
      v8 -= 8;
      if (v8 == v7)
      {
        v9 = *a1;
        goto LABEL_26;
      }
    }
  }
  return a1;
}

void ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(ecs2::ModuleBucketExecutionDescriptor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_16;
  v3 = (_QWORD *)*((_QWORD *)this + 7);
  v4 = (void *)*((_QWORD *)this + 6);
  if (v3 == v2)
    goto LABEL_15;
  v5 = v3 - 4;
  do
  {
    v7 = (_QWORD *)v5[3];
    if (v5 == v7)
    {
      v7 = v5;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
    v9 = (void *)*(v5 - 3);
    if (v9)
    {
      *(v5 - 2) = v9;
      operator delete(v9);
    }
    v10 = (void *)*(v5 - 6);
    if (v10)
    {
      *(v5 - 5) = v10;
      operator delete(v10);
    }
    v6 = v5 - 6;
    v5 -= 10;
  }
  while (v6 != v2);
  v4 = (void *)*((_QWORD *)this + 6);
LABEL_15:
  *((_QWORD *)this + 7) = v2;
  operator delete(v4);
LABEL_16:
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *((_QWORD *)this + 4);
    v13 = (void *)*((_QWORD *)this + 3);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 4);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v11;
    operator delete(v13);
  }
  v17 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return;
  v18 = *((_QWORD *)this + 1);
  v19 = *(void **)this;
  if (v18 == v17)
    goto LABEL_46;
  v20 = v18 - 56;
  while (2)
  {
    if (*(char *)(v20 + 55) < 0)
      operator delete(*(void **)(v20 + 32));
    v24 = *(_QWORD **)(v20 + 24);
    if ((_QWORD *)v20 == v24)
    {
      v24 = (_QWORD *)v20;
      v25 = 4;
LABEL_36:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
    else if (v24)
    {
      v25 = 5;
      goto LABEL_36;
    }
    v26 = *(_QWORD **)(v20 - 8);
    if ((_QWORD *)(v20 - 32) == v26)
    {
      v26 = (_QWORD *)(v20 - 32);
      v27 = 4;
LABEL_41:
      (*(void (**)(void))(*v26 + 8 * v27))();
    }
    else if (v26)
    {
      v27 = 5;
      goto LABEL_41;
    }
    v21 = *(_QWORD **)(v20 - 40);
    if ((_QWORD *)(v20 - 64) == v21)
    {
      v21 = (_QWORD *)(v20 - 64);
      v22 = 4;
      goto LABEL_28;
    }
    if (v21)
    {
      v22 = 5;
LABEL_28:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
    v23 = v20 - 72;
    v20 -= 128;
    if (v23 != v17)
      continue;
    break;
  }
  v19 = *(void **)this;
LABEL_46:
  *((_QWORD *)this + 1) = v17;
  operator delete(v19);
}

void ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(void **this)
{
  ecs2::ExecutionTaskDescriptor *v2;
  uint64_t v3;
  ecs2::ExecutionTaskDescriptor *v4;
  uint64_t v5;
  ecs2::ExecutionTaskDescriptor *v6;
  uint64_t v7;

  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = (ecs2::ExecutionTaskDescriptor *)this[12];
  if (v2 == (ecs2::ExecutionTaskDescriptor *)(this + 9))
  {
    v3 = 4;
    v2 = (ecs2::ExecutionTaskDescriptor *)(this + 9);
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_8:
  v4 = (ecs2::ExecutionTaskDescriptor *)this[8];
  if (v4 == (ecs2::ExecutionTaskDescriptor *)(this + 5))
  {
    v5 = 4;
    v4 = (ecs2::ExecutionTaskDescriptor *)(this + 5);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_13:
  v6 = (ecs2::ExecutionTaskDescriptor *)this[4];
  if (v6 == (ecs2::ExecutionTaskDescriptor *)(this + 1))
  {
    v7 = 4;
    v6 = (ecs2::ExecutionTaskDescriptor *)(this + 1);
  }
  else
  {
    if (!v6)
      return;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
}

ecs2::ModuleBucketExecutionDescriptor *ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor(ecs2::ModuleBucketExecutionDescriptor *this, const ecs2::ModuleBucketExecutionDescriptor *a2)
{
  ecs2::ModuleBucketExecutionDescriptor *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type **v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  ecs2::ModuleBucketExecutionDescriptor *v49;

  v3 = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  v49 = v3;
  if (v5 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      abort();
    v7 = v6 >> 7;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)v3 = v8;
    *((_QWORD *)v3 + 1) = v8;
    *((_QWORD *)v3 + 2) = &v8[128 * v7];
    do
    {
      v11 = v4 + v9;
      *(_WORD *)&v8[v9] = *(_WORD *)(v4 + v9);
      ecs2::ExecutionTaskFunction::ExecutionTaskFunction(&v8[v9 + 8], (_QWORD *)(v4 + v9 + 8));
      v12 = (std::string *)&v8[v9 + 104];
      v13 = (const std::string::value_type **)(v4 + v9 + 104);
      if (*(char *)(v4 + v9 + 127) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(v4 + v9 + 112));
      }
      else
      {
        v10 = *(_OWORD *)v13;
        *(_QWORD *)&v8[v9 + 120] = *(_QWORD *)(v11 + 120);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v10;
      }
      v9 += 128;
    }
    while (v11 + 128 != v5);
    *((_QWORD *)v3 + 1) = &v8[v9];
  }
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  v14 = *((_QWORD *)a2 + 3);
  v15 = *((_QWORD *)a2 + 4);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
    if (v17 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v18 = (char *)operator new(v16);
    v19 = 0;
    *((_QWORD *)v3 + 3) = v18;
    *((_QWORD *)v3 + 4) = v18;
    *((_QWORD *)v3 + 5) = &v18[24 * v17];
    do
    {
      v21 = v14 + v19;
      v22 = &v18[v19];
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      v24 = *(_BYTE **)(v14 + v19);
      v23 = *(_BYTE **)(v14 + v19 + 8);
      v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0)
          abort();
        v26 = (char *)operator new(v23 - v24);
        *(_QWORD *)v22 = v26;
        *((_QWORD *)v22 + 1) = v26;
        v20 = &v26[8 * (v25 >> 3)];
        *((_QWORD *)v22 + 2) = v20;
        memcpy(v26, v24, v25);
        *((_QWORD *)v22 + 1) = v20;
      }
      v19 += 24;
    }
    while (v21 + 24 != v15);
    v3 = v49;
    *((_QWORD *)v49 + 4) = &v18[v19];
  }
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = 0;
  v27 = *((_QWORD *)a2 + 6);
  v28 = *((_QWORD *)a2 + 7);
  v29 = v28 - v27;
  if (v28 != v27)
  {
    v30 = 0xCCCCCCCCCCCCCCCDLL * (v29 >> 4);
    if (v30 >= 0x333333333333334)
      abort();
    v31 = (char *)operator new(v29);
    v32 = 0;
    *((_QWORD *)v49 + 6) = v31;
    *((_QWORD *)v49 + 7) = v31;
    *((_QWORD *)v49 + 8) = &v31[80 * v30];
    while (1)
    {
      v34 = &v31[v32];
      *(_QWORD *)&v31[v32 + 8] = 0;
      v35 = v27 + v32;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 2) = 0;
      v37 = *(_BYTE **)(v27 + v32);
      v36 = *(_BYTE **)(v27 + v32 + 8);
      v38 = v36 - v37;
      if (v36 != v37)
      {
        if (v38 < 0)
          abort();
        v39 = (char *)operator new(v36 - v37);
        *(_QWORD *)v34 = v39;
        *((_QWORD *)v34 + 1) = v39;
        v40 = &v39[2 * (v38 >> 1)];
        *((_QWORD *)v34 + 2) = v40;
        memcpy(v39, v37, v38);
        *((_QWORD *)v34 + 1) = v40;
      }
      *((_QWORD *)v34 + 3) = 0;
      *((_QWORD *)v34 + 4) = 0;
      *((_QWORD *)v34 + 5) = 0;
      v42 = *(_BYTE **)(v35 + 24);
      v41 = *(_BYTE **)(v35 + 32);
      v43 = v41 - v42;
      if (v41 != v42)
      {
        if (v43 < 0)
          abort();
        v44 = (char *)operator new(v41 - v42);
        *((_QWORD *)v34 + 3) = v44;
        *((_QWORD *)v34 + 4) = v44;
        v45 = &v44[2 * (v43 >> 1)];
        *((_QWORD *)v34 + 5) = v45;
        memcpy(v44, v42, v43);
        *((_QWORD *)v34 + 4) = v45;
      }
      v46 = &v31[v32];
      v47 = v27 + v32;
      v33 = *(_QWORD *)(v27 + v32 + 72);
      if (v33)
      {
        if (v47 + 48 == v33)
        {
          *(_QWORD *)&v31[v32 + 72] = v46 + 48;
          (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 72) + 24))(*(_QWORD *)(v47 + 72));
          goto LABEL_22;
        }
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      }
      *((_QWORD *)v46 + 9) = v33;
LABEL_22:
      v32 += 80;
      if (v27 + v32 == v28)
      {
        v3 = v49;
        *((_QWORD *)v49 + 7) = &v31[v32];
        return v3;
      }
    }
  }
  return v3;
}

void sub_19F4F6064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](a9);
  std::vector<ecs2::ExecutionTaskDescriptor>::~vector[abi:nn180100](a10);
  _Unwind_Resume(a1);
}

void std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type **v13;

  if (a4)
  {
    if (a4 >> 58)
      abort();
    v7 = a4 << 6;
    v8 = (char *)operator new(a4 << 6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v7];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = a2 + v9;
        *(_WORD *)&v8[v9] = *(_WORD *)(a2 + v9);
        v11 = *(_QWORD *)(a2 + v9 + 32);
        if (v11)
        {
          if (v10 + 8 == v11)
          {
            *(_QWORD *)&v8[v9 + 32] = &v8[v9 + 8];
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 24))(v11, &v8[v9 + 8]);
            goto LABEL_12;
          }
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        }
        *(_QWORD *)&v8[v9 + 32] = v11;
LABEL_12:
        v12 = (std::string *)&v8[v9 + 40];
        v13 = (const std::string::value_type **)(a2 + v9 + 40);
        if (*(char *)(v10 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(a2 + v9 + 48));
        }
        else
        {
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
          *(_QWORD *)&v8[v9 + 56] = *(_QWORD *)(a2 + v9 + 56);
        }
        v9 += 64;
        if (v10 + 64 == a3)
        {
          v8 += v9;
          break;
        }
      }
    }
    a1[1] = v8;
  }
}

void sub_19F4F62BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(v4 + 32);
  if (v6 == v3)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v3 = *(_QWORD **)(v4 + 32);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v7))(v3);
LABEL_6:
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<ecs2::ExecutionTaskDescriptor>::~vector[abi:nn180100](void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_23;
  v5 = (uint64_t)v3 - 56;
  do
  {
    if (*(char *)(v5 + 55) < 0)
      operator delete(*(void **)(v5 + 32));
    v9 = *(_QWORD **)(v5 + 24);
    if ((_QWORD *)v5 == v9)
    {
      v9 = (_QWORD *)v5;
      v10 = 4;
    }
    else
    {
      if (!v9)
        goto LABEL_14;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_14:
    v11 = *(_QWORD **)(v5 - 8);
    if ((_QWORD *)(v5 - 32) == v11)
    {
      v11 = (_QWORD *)(v5 - 32);
      v12 = 4;
    }
    else
    {
      if (!v11)
        goto LABEL_19;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_19:
    v6 = *(_QWORD **)(v5 - 40);
    if ((_QWORD *)(v5 - 64) == v6)
    {
      v6 = (_QWORD *)(v5 - 64);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v8 = (void *)(v5 - 72);
    v5 -= 128;
  }
  while (v8 != v2);
  v4 = *a1;
LABEL_23:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

_QWORD *ecs2::ExecutionTaskFunction::ExecutionTaskFunction(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[3] = 0;
  }
  v5 = a2[7];
  if (!v5)
    goto LABEL_9;
  if ((_QWORD *)v5 != a2 + 4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_9:
    a1[7] = v5;
    goto LABEL_11;
  }
  a1[7] = a1 + 4;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[7] + 24))(a2[7], a1 + 4);
LABEL_11:
  v6 = a2[11];
  if (v6)
  {
    if ((_QWORD *)v6 == a2 + 8)
    {
      a1[11] = a1 + 8;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
      return a1;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  a1[11] = v6;
  return a1;
}

void sub_19F4F656C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[7];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  v6 = (_QWORD *)v1[3];
  if (v6 == v1)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v7))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282EB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282EB8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282F00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282F00;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1},std::allocator<md::ita::OnLayoutEndTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::OnLayoutEndTask>(md::ita::OnLayoutEndTask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276000;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276000;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>,std::allocator<ecs2::ForwardToExecute<md::ita::OnLayoutEndTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = ***(uint64_t ****)(a1 + 8);
  if (v12 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v12 != 0x22D45F5AAD4BF408)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0x22D45F5AAD4BF408);
    v12 = v13 - 5;
  }
  v15 = (uint64_t (***)(_QWORD))v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = (**v15)(v15);
  v21 = (void *)MEMORY[0x1A1AF555C]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 80))(v11, v20);
  objc_autoreleasePoolPop(v21);
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42830F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42830F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283140;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283140;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutTask>(md::ita::LegacyLayoutTask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276120;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276120;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = ***(uint64_t ****)(a1 + 8);
  if (v12 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v12 != 0x22D45F5AAD4BF408)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0x22D45F5AAD4BF408);
    v12 = v13 - 5;
  }
  v15 = (uint64_t (***)(_QWORD))v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = (**v15)(v15);
  v21 = (void *)MEMORY[0x1A1AF555C]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, v20);
  objc_autoreleasePoolPop(v21);
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284DA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284DA8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284DF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284DF0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1},std::allocator<md::ita::ReserveStencilRangeTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ReserveStencilRangeTask>(md::ita::ReserveStencilRangeTask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276F78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276F78;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_BYTE *std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v31;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = ***(uint64_t ****)(a1 + 8);
  v47 = a1;
  if (v12 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v12 != 0x22D45F5AAD4BF408)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0x22D45F5AAD4BF408);
    v12 = v13 - 5;
  }
  v15 = (uint64_t (***)(_QWORD))v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = (**v15)(v15);
  v21 = (unsigned __int8 *)v11[8];
  v11[9] = v21;
  v22 = (_QWORD *)v11[5];
  v48 = (_QWORD *)v11[6];
  v49 = v20;
  if (v22 != v48)
  {
    while (1)
    {
      if (*v22)
      {
        (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v22 + 32))(&v50, *v22, v49);
        v24 = v50;
        v25 = v51;
        if (v50 == v51)
        {
          if (!v50)
            goto LABEL_25;
        }
        else
        {
          do
          {
            v26 = *v22;
            v28 = (unsigned __int8 *)v11[8];
            v27 = v11[9];
            v29 = v28;
            if (v28 != (unsigned __int8 *)v27)
            {
              v29 = (unsigned __int8 *)v11[8];
              while (*v24 != *v29 || v24[1] != v29[1])
              {
                v29 += 16;
                if (v29 == (unsigned __int8 *)v27)
                  goto LABEL_39;
              }
            }
            if (v29 == (unsigned __int8 *)v27)
            {
LABEL_39:
              v31 = *(unsigned __int16 *)v24;
              v29 = (unsigned __int8 *)v11[8];
              if (v28 != (unsigned __int8 *)v27)
              {
                v29 = (unsigned __int8 *)v11[8];
                while (*v29 != v31 || v29[1] != v31 >> 8)
                {
                  v29 += 16;
                  if (v29 == (unsigned __int8 *)v27)
                    goto LABEL_48;
                }
              }
              if (v29 == (unsigned __int8 *)v27)
              {
LABEL_48:
                v33 = v11[10];
                if (v27 >= v33)
                {
                  v35 = (uint64_t)(v27 - (_QWORD)v28) >> 4;
                  v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 60)
                    abort();
                  v37 = v33 - (_QWORD)v28;
                  if (v37 >> 3 > v36)
                    v36 = v37 >> 3;
                  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
                    v38 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v38 = v36;
                  if (v38)
                  {
                    if (v38 >> 60)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v39 = (char *)operator new(16 * v38);
                  }
                  else
                  {
                    v39 = 0;
                  }
                  v40 = &v39[16 * v35];
                  *(_WORD *)v40 = v31;
                  *((_QWORD *)v40 + 1) = 0;
                  v41 = v40;
                  if (v28 != (unsigned __int8 *)v27)
                  {
                    do
                    {
                      *((_OWORD *)v41 - 1) = *(_OWORD *)(v27 - 16);
                      v41 -= 16;
                      v27 -= 16;
                    }
                    while ((unsigned __int8 *)v27 != v28);
                    v28 = (unsigned __int8 *)v11[8];
                  }
                  v34 = v40 + 16;
                  v11[8] = v41;
                  v11[9] = v40 + 16;
                  v11[10] = &v39[16 * v38];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_WORD *)v27 = v31;
                  *(_QWORD *)(v27 + 8) = 0;
                  v34 = (char *)(v27 + 16);
                }
                v11[9] = v34;
                v29 = (unsigned __int8 *)(v34 - 16);
              }
            }
            *((_QWORD *)v29 + 1) = v26;
            v24 += 2;
          }
          while (v24 != v25);
          v24 = v50;
          if (!v50)
            goto LABEL_25;
        }
        v51 = v24;
        operator delete(v24);
      }
LABEL_25:
      if (++v22 == v48)
      {
        v23 = v11[8];
        v21 = (unsigned __int8 *)v11[9];
        goto LABEL_69;
      }
    }
  }
  v23 = (unint64_t)v21;
LABEL_69:
  v42 = 126 - 2 * __clz((uint64_t)&v21[-v23] >> 4);
  if (v21 == (unsigned __int8 *)v23)
    v43 = 0;
  else
    v43 = v42;
  result = (_BYTE *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(v23, v21, v43, 1);
  v46 = v11[8];
  v45 = v11[9];
  while (v46 != v45)
  {
    result = *(_BYTE **)(v46 + 8);
    if (result)
    {
      if (result[32])
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, v49, v46);
    }
    v46 += 16;
  }
  *(_QWORD *)(v47 + 8) = 0;
  return result;
}

void sub_19F4F7088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284268;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284268;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42842B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42842B0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1},std::allocator<md::ita::LegacyLayoutStartTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::LegacyLayoutStartTask>(md::ita::LegacyLayoutStartTask &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42769D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42769D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>,std::allocator<ecs2::ForwardToExecute<md::ita::LegacyLayoutStartTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  md::LayoutContext *v20;
  float v21;
  uint64_t v22;
  void *v23;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = ***(uint64_t ****)(a1 + 8);
  if (v12 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v12 != 0x22D45F5AAD4BF408)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0x22D45F5AAD4BF408);
    v12 = v13 - 5;
  }
  v15 = (uint64_t (***)(_QWORD))v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = (md::LayoutContext *)(**v15)(v15);
  v21 = md::LayoutContext::frameState(v20);
  if (!*(_BYTE *)(v22 + 117))
  {
    v23 = (void *)MEMORY[0x1A1AF555C](v21);
    (*(void (**)(uint64_t, md::LayoutContext *))(*(_QWORD *)v11 + 72))(v11, v20);
    objc_autoreleasePoolPop(v23);
  }
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t VKAnimationCurveLinear_block_invoke(double a1)
{
  int v1;

  v1 = LODWORD(a1);
  if (_ZZUb_E9onceToken[0] != -1)
    dispatch_once(_ZZUb_E9onceToken, &__block_literal_global_7);
  LODWORD(a1) = v1;
  return objc_msgSend((id)_ZZUb_E14timingFunction, "_solveForInput:", a1);
}

void VKAnimationCurveLinear_block_invoke_2()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3058]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_ZZUb_E14timingFunction;
  _ZZUb_E14timingFunction = v0;

}

uint64_t VKAnimationCurveEaseIn_block_invoke_3(double a1)
{
  int v1;

  v1 = LODWORD(a1);
  if (_ZZUb1_E9onceToken != -1)
    dispatch_once(&_ZZUb1_E9onceToken, &__block_literal_global_9);
  LODWORD(a1) = v1;
  return objc_msgSend((id)_ZZUb1_E14timingFunction, "_solveForInput:", a1);
}

void VKAnimationCurveEaseIn_block_invoke_4()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3040]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_ZZUb1_E14timingFunction;
  _ZZUb1_E14timingFunction = v0;

}

uint64_t VKAnimationCurveEaseInOut_block_invoke_7(double a1)
{
  int v1;

  v1 = LODWORD(a1);
  if (_ZZUb5_E9onceToken != -1)
    dispatch_once(&_ZZUb5_E9onceToken, &__block_literal_global_13);
  LODWORD(a1) = v1;
  return objc_msgSend((id)_ZZUb5_E14timingFunction, "_solveForInput:", a1);
}

void VKAnimationCurveEaseInOut_block_invoke_8()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3048]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_ZZUb5_E14timingFunction;
  _ZZUb5_E14timingFunction = v0;

}

float VKAnimationCurveCubicEaseOut_block_invoke_9(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)((float)(1.0 - a1) * (float)(1.0 - a1)));
}

void VKAnimationCurveElasticEaseOut_block_invoke_10(float a1)
{
  if (a1 != 0.0 && a1 != 1.0)
  {
    exp2f(a1 * -10.0);
    sinf((float)(a1 * 20.944) + -1.5708);
  }
}

float VKAnimationCurveExponentialEaseIn_block_invoke_11(float a1)
{
  return (float)(expf(a1 * 9.2104) * 0.0001) + -0.0001;
}

float VKAnimationCurveExponentialEaseInOut_block_invoke_12(float a1)
{
  float v1;
  float v2;
  float v3;

  if ((float)(a1 + a1) >= 1.0)
  {
    v1 = expf(18.421 - (float)(a1 * 18.421));
    v2 = 1.0;
    v3 = -0.00005;
  }
  else
  {
    v1 = expf(a1 * 18.421);
    v2 = -0.00005;
    v3 = 0.00005;
  }
  return v2 + (float)(v1 * v3);
}

float VKAnimationCurveExponentialEaseOut_block_invoke_13(float a1)
{
  return (float)(expf(9.2104 - (float)(a1 * 9.2104)) * -0.0001) + 1.0001;
}

uint64_t VKAnimationCurveDefaultSpring_block_invoke_14(float a1)
{
  if (_ZZUb12_E9onceToken != -1)
    dispatch_once(&_ZZUb12_E9onceToken, &__block_literal_global_20);
  return (*(uint64_t (**)(float))(_ZZUb12_E14timingFunction + 16))(a1);
}

void VKAnimationCurveDefaultSpring_block_invoke_15()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[4];
  __int128 v3;
  int v4;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __VKAnimationCurveSpring_block_invoke;
  v2[3] = &__block_descriptor_52_e8_f12__0f8l;
  v3 = xmmword_19FFB3600;
  v4 = 1058262331;
  v0 = objc_msgSend(v2, "copy");
  v1 = (void *)_ZZUb12_E14timingFunction;
  _ZZUb12_E14timingFunction = v0;

}

uint64_t VKAnimationCurveDefaultCameraSpring_block_invoke_16(float a1)
{
  if (_ZZUb14_E9onceToken[0] != -1)
    dispatch_once(_ZZUb14_E9onceToken, &__block_literal_global_22);
  return (*(uint64_t (**)(float))(_ZZUb14_E14timingFunction + 16))(a1);
}

void VKAnimationCurveDefaultCameraSpring_block_invoke_17()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[5];
  int v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __VKAnimationCurveSpring_block_invoke_2;
  v2[3] = &__block_descriptor_44_e8_f12__0f8l;
  v3 = 1094972813;
  v2[4] = 0x4143F58D3F800000;
  v0 = objc_msgSend(v2, "copy");
  v1 = (void *)_ZZUb14_E14timingFunction;
  _ZZUb14_E14timingFunction = v0;

}

void sub_19F4F7904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4F79F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F4F7A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F4F7B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F4F7BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id VKAnimationCurveForCAMediaTimingFunction(void *a1)
{
  id v1;
  id v2;
  void *v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __VKAnimationCurveForCAMediaTimingFunction_block_invoke;
  v5[3] = &unk_1E42EB630;
  v6 = v1;
  v2 = v1;
  v3 = (void *)objc_msgSend(v5, "copy");

  return v3;
}

void sub_19F4F8200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void md::ARWalkingManeuverLabelPart::~ARWalkingManeuverLabelPart(md::ARWalkingManeuverLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingManeuverLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, this, 1232);
}

uint64_t md::ARWalkingManeuverLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  _QWORD *v6;
  uint64_t result;
  __n128 v8;
  __n128 v9;
  double v10;
  float *v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 1224));
  v20 = 0;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, float32x2_t *, uint64_t *))(*v6 + 80))(v6, a2, a3, &v20);
  if ((_DWORD)result == 37)
  {
    v11 = (float *)v6[3];
    if (v11[20] >= v11[18] && v11[21] >= v11[19])
    {
      v12 = *(float *)(*(_QWORD *)(a1 + 32) + 20);
      *(float *)(a1 + 176) = v12;
      *(_DWORD *)(a1 + 112) = a3->i32[0];
      *(_DWORD *)(a1 + 116) = a3->i32[1];
      *(_BYTE *)(a1 + 270) = fabsf(v12 + -1.0) > 0.000001;
      v13 = *(_QWORD *)(a2 + 432);
      v14 = *(float *)(v13 + 464);
      *(float *)(a1 + 296) = v14;
      v15 = *(float *)(v13 + 468);
      *(float *)(a1 + 300) = v15;
      v16 = *(float *)(a1 + 288);
      v17 = v16 * v15;
      v18 = *(float *)(a1 + 292);
      *(float *)&v10 = -(float)((float)(v18 * v15) - (float)(v16 * v14));
      *(_DWORD *)(a1 + 88) = LODWORD(v10);
      *(float *)(a1 + 92) = v17 + (float)(v18 * v14);
      v8.n128_f64[0] = fabsf(*(float *)&v10 + -1.0);
      v9.n128_u64[0] = 0x3EB0C6F7A0B5ED8DLL;
      *(_BYTE *)(a1 + 268) = v8.n128_f64[0] > 0.000001;
      if (!*(_BYTE *)(a1 + 1224))
      {
        v19 = *(_QWORD *)(**(_QWORD **)(**(_QWORD **)(a1 + 576) + 576) + 24);
        v9.n128_u32[0] = 1034594987;
        v8.n128_f32[0] = (float)(*(float *)(v19 + 84) - *(float *)(v19 + 76)) * 0.083333;
        *(_DWORD *)(a1 + 956) = v8.n128_u32[0];
      }
      result = md::StackLabelPart::layoutForStaging(a1, a2, a3, (float32x2_t *)(a1 + 952), v8, v9, v10);
      if ((_DWORD)result == 37)
      {
        if (*(_BYTE *)(a1 + 566))
        {
          md::ARWalkingManeuverLabelPart::updateLocalState(a1, (_OWORD *)(a1 + 696), *(_QWORD *)(a2 + 432), (double *)(*(_QWORD *)(a1 + 16) + 592), *(float *)(*(_QWORD *)(a1 + 32) + 24), *(float *)(*(_QWORD *)(a1 + 32) + 20));
          *(_QWORD *)(a1 + 184) = a1 + 696;
        }
        return 37;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

double md::ARWalkingManeuverLabelPart::prepareForDisplay(md::ARWalkingManeuverLabelPart *this, LabelManager *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  double result;

  v3 = (uint64_t *)*((_QWORD *)this + 72);
  v4 = (uint64_t *)*((_QWORD *)this + 73);
  while (v3 != v4)
  {
    v6 = *v3++;
    (*(void (**)(uint64_t, LabelManager *))(*(_QWORD *)v6 + 104))(v6, a2);
  }
  result = *((double *)this + 119);
  *((double *)this + 152) = result;
  return result;
}

uint64_t md::ARWalkingManeuverLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, uint64_t a4)
{
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v8 = a1 + 960;
  md::ARWalkingManeuverLabelPart::updateLocalState(a1, (_OWORD *)(a1 + 960), a2 + 440, (double *)(*(_QWORD *)(a1 + 16) + 408), *(float *)(*(_QWORD *)(a1 + 32) + 72), *(float *)(*(_QWORD *)(a1 + 32) + 68));
  v9 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
  *(float *)(a1 + 416) = v9;
  *(_DWORD *)(a1 + 352) = *(_DWORD *)a4;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a4 + 4);
  *(_BYTE *)(a1 + 510) = fabsf(v9 + -1.0) > 0.000001;
  v10 = *(float *)(a2 + 904);
  *(float *)(a1 + 536) = v10;
  v11 = *(float *)(a2 + 908);
  *(float *)(a1 + 540) = v11;
  v12 = *(float *)(a1 + 528);
  v13 = v12 * v11;
  v14 = *(float *)(a1 + 532);
  v15 = -(float)((float)(v14 * v11) - (float)(v12 * v10));
  *(float *)(a1 + 328) = v15;
  *(float *)(a1 + 332) = v13 + (float)(v14 * v10);
  *(_BYTE *)(a1 + 508) = fabsf(v15 + -1.0) > 0.000001;
  *(_QWORD *)(a1 + 424) = v8;
  return md::StackLabelPart::layoutForDisplay((float32x2_t *)a1, a2, a3, (float *)a4, (float *)(a1 + 1216));
}

uint64_t md::ARWalkingManeuverLabelPart::stagingModelMatrix(md::ARWalkingManeuverLabelPart *this)
{
  return (uint64_t)this + 696;
}

uint64_t md::ARWalkingManeuverLabelPart::modelMatrix(md::ARWalkingManeuverLabelPart *this)
{
  return (uint64_t)this + 960;
}

uint64_t md::StackLabelPart::partType(md::StackLabelPart *this)
{
  return 2;
}

double md::ARWalkingManeuverLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3620;
  strcpy(v3, "ARWalkingManeuverLabelPart");
  return *(double *)"aneuverLabelPart";
}

void md::ARWalkingManeuverLabelPart::updateLocalState(uint64_t a1, _OWORD *a2, uint64_t a3, double *a4, double a5, double a6)
{
  void *v12;
  int v13;
  float v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  double v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "arDebugStylingBaseScalingFactor");
  v13 = *(unsigned __int8 *)(a1 + 1225);
  v15 = v14;
  if (objc_msgSend(v12, "arForceLabelsViewOriented"))
    v13 = 4;
  generateRotationMatrixMeshPositioningMode((double *)&v61, *(_QWORD *)(a1 + 16) + 152, a3, a4, 8, 0, v13);
  v16 = v15 * (a5 * a6);
  v17 = v16 * *(double *)(a3 + 320);
  v49 = v61;
  v52 = v63;
  v55 = v65;
  v50 = v62;
  v53 = v64;
  v56 = v66;
  v51 = 0;
  v54 = 0;
  v57 = 0;
  v58 = *(_OWORD *)a4;
  v59 = *((_QWORD *)a4 + 2);
  v60 = 0x3FF0000000000000;
  v42 = 0u;
  v44 = 0;
  v47 = 0u;
  v46 = 0u;
  v43 = 0u;
  v41 = 0u;
  v40 = 0u;
  v48 = 0x3FF0000000000000;
  v39 = v17;
  *(double *)&v42 = v17;
  v45 = v17;
  gm::operator*<double,4,4,4>((double *)&v31, (double *)&v49, &v39);
  v18 = v31;
  a2[8] = v31;
  v19 = v32;
  a2[9] = v32;
  v20 = v33;
  a2[10] = v33;
  v21 = v34;
  a2[11] = v34;
  v22 = v35;
  a2[12] = v35;
  v23 = v36;
  a2[13] = v36;
  v24 = v37;
  a2[14] = v37;
  v25 = v38;
  a2[15] = v38;
  if (*(_BYTE *)(a1 + 1224))
  {
    generateRotationMatrixMeshPositioningMode((double *)&v61, *(_QWORD *)(a1 + 16) + 152, a3, a4, 8, 1, v13);
    v26 = v16 * *(double *)(a3 + 320);
    v49 = v61;
    v52 = v63;
    v55 = v65;
    v50 = v62;
    v53 = v64;
    v56 = v66;
    v51 = 0;
    v54 = 0;
    v57 = 0;
    v58 = *(_OWORD *)a4;
    v59 = *((_QWORD *)a4 + 2);
    v60 = 0x3FF0000000000000;
    v42 = 0u;
    v44 = 0;
    v47 = 0u;
    v46 = 0u;
    v43 = 0u;
    v41 = 0u;
    v40 = 0u;
    v48 = 0x3FF0000000000000;
    v39 = v26;
    *(double *)&v42 = v26;
    v45 = v26;
    gm::operator*<double,4,4,4>((double *)&v31, (double *)&v49, &v39);
    v27 = v32;
    *a2 = v31;
    a2[1] = v27;
    v28 = v34;
    a2[2] = v33;
    a2[3] = v28;
    v29 = v36;
    a2[4] = v35;
    a2[5] = v29;
    v30 = v38;
    a2[6] = v37;
    a2[7] = v30;
  }
  else
  {
    *a2 = v18;
    a2[1] = v19;
    a2[2] = v20;
    a2[3] = v21;
    a2[4] = v22;
    a2[5] = v23;
    a2[6] = v24;
    a2[7] = v25;
  }

}

void sub_19F4F89A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::MuninMapEngineConfiguration::~MuninMapEngineConfiguration(md::MuninMapEngineConfiguration *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E429CEB0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E429CEB0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

double md::MuninMapEngineConfiguration::createPassList@<D0>(md::FrameGraphResourceRegistry *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  double result;

  v5 = operator new();
  md::PassList::PassList((md::PassList *)v5, a1);
  *(_QWORD *)v5 = &off_1E428E0E8;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 153) = 0u;
  *(_DWORD *)(v5 + 176) = 12;
  *(_QWORD *)(v5 + 180) = 0;
  *(_DWORD *)(v5 + 188) = 0;
  *(_DWORD *)(v5 + 208) = 12;
  *(_QWORD *)(v5 + 192) = 1;
  *(_QWORD *)(v5 + 200) = 0x1A00000001;
  *(_QWORD *)(v5 + 212) = 0;
  *(_DWORD *)(v5 + 220) = 0;
  *(_QWORD *)(v5 + 224) = 1;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v5 + 232) = 1;
  *a2 = v5;
  return result;
}

void sub_19F4F8B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C4051B6CCAFLL);
  _Unwind_Resume(a1);
}

void md::MuninMapEngineConfiguration::createRenderLayers(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t (**v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (***v120)();
  uint64_t v121;
  uint64_t (***v122)();
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  __int128 *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  __int128 *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  md::mun::MuninRenderResources *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _WORD *v195;
  _WORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  _WORD *v206;
  _WORD *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  unsigned __int8 v212;
  unsigned __int8 v213;
  float *v214;
  id v215;
  double v216;
  float v217;
  uint64_t (***v218)();
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _WORD *v222;
  _WORD *v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  geo::read_write_lock *v240;
  const char *v241;
  malloc_zone_t *zone;
  uint64_t v243;
  geo::read_write_lock *v244;
  const char *v245;
  malloc_zone_t *v246;
  uint64_t v247;
  geo::read_write_lock *v248;
  const char *v249;
  malloc_zone_t *v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  malloc_zone_t *v254;
  uint64_t v255;
  geo::read_write_lock *v256;
  const char *v257;
  malloc_zone_t *v258;
  uint64_t v259;
  geo::read_write_lock *v260;
  const char *v261;
  malloc_zone_t *v262;
  _QWORD *v263;
  _QWORD *v264;
  id v265;
  uint64_t v266;
  uint64_t v267;
  md::mun::MuninRenderResources **v268;
  id v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count *v274;
  std::__shared_weak_count *v275;
  std::__shared_weak_count *v276;
  _QWORD v277[3];
  _QWORD *v278;
  _QWORD v279[3];
  _QWORD *v280;
  uint64_t (**v281)();
  std::__shared_weak_count *v282;
  uint64_t (***v283)();
  uint64_t (**v284)();
  uint64_t v285;
  uint64_t (*v286)(uint64_t);
  uint64_t (***v287)();
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count *v291;
  uint64_t (**v292)();
  uint64_t v293;
  uint64_t (***v294)();
  uint64_t v295;

  v295 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x28uLL);
  a3[1] = (char *)v6 + 40;
  a3[2] = (char *)v6 + 40;
  *v6 = 0u;
  v6[1] = 0u;
  *((_QWORD *)v6 + 4) = 0;
  *a3 = v6;
  v264 = a3;
  v7 = *(_QWORD *)(a2 + 856);
  v8 = *(_QWORD *)(a1 + 1120);
  v9 = *(_QWORD *)(v8 + 16);
  if ((v9 & (v9 - 1)) != 0)
  {
    v11 = 0x3F812BA5755E8568;
    if (v9 <= 0x3F812BA5755E8568)
      v11 = 0x3F812BA5755E8568 % v9;
    v10 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  else
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8 * ((v9 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  v269 = *(id *)(v10[5] + 128);
  v12 = *(int8x8_t *)(v8 + 16);
  if (!*(_QWORD *)&v12)
    goto LABEL_31;
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v12 <= 0x20A1ED17D78F322BuLL)
      v14 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v12;
  }
  else
  {
    v14 = (*(_QWORD *)&v12 - 1) & 0x20A1ED17D78F322BLL;
  }
  v15 = *(_QWORD **)(*(_QWORD *)(v8 + 8) + 8 * v14);
  if (!v15 || (v16 = (_QWORD *)*v15) == 0)
  {
LABEL_31:
    v266 = 0;
    goto LABEL_32;
  }
  if (v13.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == 0x20A1ED17D78F322BLL)
      {
        if (v16[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_243;
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_31;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v18 = v16[1];
    if (v18 == 0x20A1ED17D78F322BLL)
      break;
    if (v18 >= *(_QWORD *)&v12)
      v18 %= *(_QWORD *)&v12;
    if (v18 != v14)
      goto LABEL_31;
LABEL_21:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_31;
  }
  if (v16[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_21;
LABEL_243:
  v266 = v16[5];
LABEL_32:
  v20 = operator new();
  v267 = a1;
  v21 = *(_QWORD *)(a1 + 112);
  v265 = v269;
  v22 = (char *)operator new(0x26uLL);
  *(_DWORD *)v22 = 50331648;
  *(_OWORD *)(v22 + 4) = xmmword_19FFB3630;
  *(_OWORD *)(v22 + 20) = xmmword_19FFB3640;
  *((_WORD *)v22 + 18) = 3;
  *(_QWORD *)v20 = off_1E428C468;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  v23 = (char *)operator new(0x26uLL);
  v24 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v22;
  *((_OWORD *)v23 + 1) = v24;
  *(_QWORD *)(v23 + 30) = *(_QWORD *)(v22 + 30);
  *(_QWORD *)(v20 + 16) = v23 + 38;
  *(_QWORD *)(v20 + 24) = v23 + 38;
  *(_WORD *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 34) = 1;
  *(_QWORD *)v20 = off_1E429E2A8;
  *(_QWORD *)(v20 + 8) = v23;
  *(_QWORD *)(v20 + 40) = v7;
  operator delete(v22);
  *(_QWORD *)v20 = &off_1E42AB990;
  v25 = v265;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_QWORD *)(v20 + 48) = v25;
  *(_QWORD *)(v20 + 56) = v21;
  *(_OWORD *)(v20 + 80) = 0u;
  v270 = v20;
  v268 = (md::mun::MuninRenderResources **)(v20 + 64);
  v26 = operator new();
  v27 = objc_msgSend(v25, "device");
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)(v26 + 64) = v27;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 184) = 0u;
  *(_QWORD *)(v26 + 200) = 0;
  *(_QWORD *)(v26 + 208) = 32;
  v28 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v28 = 0;
  v28[1] = 0;
  *(_OWORD *)(v26 + 216) = 0u;
  *(_QWORD *)(v26 + 192) = v28;
  *(_QWORD *)(v26 + 200) = v28;
  *(_OWORD *)(v26 + 232) = 0u;
  *(_OWORD *)(v26 + 248) = 0u;
  *(_OWORD *)(v26 + 264) = 0u;
  *(_OWORD *)(v26 + 280) = 0u;
  *(_OWORD *)(v26 + 296) = 0u;
  *(_OWORD *)(v26 + 312) = 0u;
  *(_OWORD *)(v26 + 328) = 0u;
  *(_QWORD *)(v26 + 344) = 0;
  v29 = operator new();
  *(_DWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)v29 = &off_1E42B5DE8;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 36) = 65537;
  *(_DWORD *)(v29 + 44) = 0;
  *(_QWORD *)(v29 + 48) = 1;
  *(_WORD *)(v29 + 56) = 0;
  *(_BYTE *)(v29 + 58) = 3;
  *(_QWORD *)(v29 + 67) = 0;
  *(_QWORD *)(v29 + 59) = 0;
  *(_BYTE *)(v29 + 75) = 0;
  *(_QWORD *)(v29 + 132) = 0;
  *(_QWORD *)(v29 + 124) = 0;
  *(_WORD *)(v29 + 188) = 257;
  *(_QWORD *)(v29 + 192) = 0;
  *(_QWORD *)(v29 + 200) = 0;
  *(_BYTE *)(v29 + 208) = 0;
  v30 = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(v26 + 72) = v29;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = operator new();
  *(_DWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)v31 = &off_1E42B5DE8;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 36) = 1793;
  *(_DWORD *)(v31 + 44) = 0;
  *(_QWORD *)(v31 + 48) = 1;
  *(_WORD *)(v31 + 56) = 0;
  *(_BYTE *)(v31 + 58) = 3;
  *(_QWORD *)(v31 + 67) = 0;
  *(_QWORD *)(v31 + 59) = 0;
  *(_BYTE *)(v31 + 75) = 0;
  *(_QWORD *)(v31 + 132) = 0;
  *(_QWORD *)(v31 + 124) = 0;
  *(_WORD *)(v31 + 188) = 257;
  *(_QWORD *)(v31 + 192) = 0;
  *(_QWORD *)(v31 + 200) = 0;
  *(_BYTE *)(v31 + 208) = 0;
  v32 = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v26 + 80) = v31;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v271 = v25;
  v272 = v7;
  v33 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v33->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E07C8;
  ggl::BufferData::BufferData((uint64_t)&v33[1], 32, 0, 0, 7, 4);
  v33[9].__shared_weak_owners_ = (uint64_t)"quad vertex data";
  v33[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::VSCommon::vertexReflection;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8520;
  v33[9].__shared_owners_ = (uint64_t)&unk_1E42B8540;
  v35 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v35[1], 2, 1, 0, 7, 6);
  LODWORD(v35[10].__vftable) = 0;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v35[1].__shared_owners_ = 2;
  v35[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v35[9].__shared_weak_owners_ = (uint64_t)"quad index data";
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v26 + 64) + 8) + 24))(v279);
  v284 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v285 = 3321888768;
  v286 = ___ZN2md3mun20MuninRenderResourcesC2EPKNS_6DeviceE_block_invoke;
  v287 = (uint64_t (***)())&__block_descriptor_64_ea8_32c72_ZTSNSt3__110shared_ptrIN3ggl15VertexDataTypedINS1_8VSCommon6VertexEEEEE48c51_ZTSNSt3__110shared_ptrIN3ggl14IndexDataTypedItEEEE_e30_v16__0__ResourceAccessor_____8l;
  v288 = v33 + 1;
  v289 = v33;
  do
    v37 = __ldxr(p_shared_owners);
  while (__stxr(v37 + 1, p_shared_owners));
  v290 = v35 + 1;
  v291 = v35;
  do
    v38 = __ldxr(v36);
  while (__stxr(v38 + 1, v36));
  v294 = 0;
  v292 = &off_1E42C7118;
  v293 = MEMORY[0x1A1AF5730](&v284);
  v294 = &v292;
  v281 = 0;
  v282 = 0;
  (*(void (**)(_QWORD, uint64_t (***)(), uint64_t (***)()))(*(_QWORD *)v279[0] + 16))(v279[0], &v292, &v281);
  v39 = v282;
  if (v282)
  {
    v40 = (unint64_t *)&v282->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v294;
  if (v294 == &v292)
  {
    v43 = 4;
    v42 = &v292;
LABEL_49:
    (*v42)[v43]();
  }
  else if (v294)
  {
    v43 = 5;
    goto LABEL_49;
  }
  if (v279[0])
  {
    v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v279[0] + 24))(v279[0]);
    v45 = (uint64_t (**)())v279[0];
    v279[0] = 0;
    v292 = v45;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v44 + 48))(v44, &v292);
    v46 = v292;
    v292 = 0;
    if (v46)
      (*((void (**)(uint64_t (**)()))*v46 + 1))(v46);
    v47 = v279[0];
    v279[0] = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  v48 = operator new();
  v49 = v48;
  v275 = v33 + 1;
  v276 = v33;
  do
    v50 = __ldxr(p_shared_owners);
  while (__stxr(v50 + 1, p_shared_owners));
  v273 = v35 + 1;
  v274 = v35;
  do
    v51 = __ldxr(v36);
  while (__stxr(v51 + 1, v36));
  ggl::VSCommon::Mesh::Mesh(v48, (uint64_t)"screen quad mesh", (uint64_t *)&v275, (uint64_t *)&v273);
  v52 = (_QWORD *)operator new();
  *v52 = &off_1E42E7D78;
  v52[1] = 0;
  v52[2] = 0;
  v52[3] = v49;
  v53 = *(std::__shared_weak_count **)(v26 + 96);
  *(_QWORD *)(v26 + 88) = v49;
  *(_QWORD *)(v26 + 96) = v52;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v274;
  if (v274)
  {
    v57 = (unint64_t *)&v274->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v276;
  if (v276)
  {
    v60 = (unint64_t *)&v276->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = operator new(0xE8uLL);
  v62[1] = 0;
  v62[2] = 0;
  *v62 = &off_1E42E2780;
  v63 = ggl::BufferData::BufferData((uint64_t)(v62 + 3), qword_1EE5664B8, 2, 1, 6, 1);
  v62[28] = ggl::VSView::Shared::reflection(void)::reflection;
  v62[3] = &off_1E42B9A90;
  v64 = *(std::__shared_weak_count **)(v26 + 176);
  *(_QWORD *)(v26 + 168) = v63;
  *(_QWORD *)(v26 + 176) = v62;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = operator new();
  *(_DWORD *)(v67 + 32) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 24) = 0;
  *(_QWORD *)v67 = &off_1E42B5DE8;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 36) = 768;
  *(_DWORD *)(v67 + 44) = 0;
  *(_QWORD *)(v67 + 48) = 1;
  *(_WORD *)(v67 + 56) = 0;
  *(_BYTE *)(v67 + 58) = 3;
  *(_QWORD *)(v67 + 67) = 0;
  *(_QWORD *)(v67 + 59) = 0;
  *(_BYTE *)(v67 + 75) = 0;
  *(_QWORD *)(v67 + 132) = 0;
  *(_QWORD *)(v67 + 124) = 0;
  *(_WORD *)(v67 + 188) = 257;
  *(_QWORD *)(v67 + 192) = 0;
  *(_QWORD *)(v67 + 200) = 0;
  *(_BYTE *)(v67 + 208) = 0;
  v68 = *(_QWORD *)(v26 + 136);
  *(_QWORD *)(v26 + 136) = v67;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = operator new();
  *(_DWORD *)(v69 + 24) = 1065353216;
  *(_QWORD *)(v69 + 12) = 0;
  *(_QWORD *)(v69 + 4) = 0;
  *(_BYTE *)v69 = -1;
  *(_BYTE *)(v69 + 20) = 1;
  *(_BYTE *)(v69 + 28) = -1;
  *(_DWORD *)(v69 + 32) = 255;
  v70 = *(_QWORD *)(v26 + 104);
  *(_QWORD *)(v26 + 104) = v69;
  if (v70)
    MEMORY[0x1A1AF4E00](v70, 0x1000C4049ECCB0CLL);
  v71 = operator new();
  *(_QWORD *)v71 = &off_1E42B59B0;
  v72 = *(_QWORD *)(v26 + 136);
  *(_QWORD *)(v71 + 16) = "Munin view mesh";
  *(_QWORD *)(v71 + 24) = v72;
  *(_QWORD *)(v71 + 32) = 0;
  *(_DWORD *)(v71 + 40) = 0;
  *(_QWORD *)(v71 + 48) = 0;
  *(_DWORD *)(v71 + 56) = 1065353216;
  *(_OWORD *)(v71 + 64) = 0u;
  *(_OWORD *)(v71 + 80) = 0u;
  *(int64x2_t *)(v71 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v71 + 112) = 0;
  v73 = *(_QWORD *)(v26 + 184);
  *(_QWORD *)(v26 + 184) = v71;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v78 = (uint64_t *)operator new();
  v292 = &off_1E42D4018;
  v293 = v26;
  v294 = &v292;
  v281 = &off_1E42D7748;
  v283 = &v281;
  v78[1] = 0;
  v78[2] = 0;
  *v78 = 0;
  v79 = &unk_1ECE44000;
  {
    v239 = operator new();
    *(_QWORD *)(v239 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v239 + 24) = "GeoGL";
    *(_OWORD *)(v239 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v239 = &off_1E42B5668;
    *(_QWORD *)(v239 + 8) = "GeoGL";
    *(_OWORD *)(v239 + 72) = 0u;
    *(_OWORD *)(v239 + 88) = 0u;
    *(_OWORD *)(v239 + 104) = 0u;
    *(_OWORD *)(v239 + 120) = 0u;
    *(_OWORD *)(v239 + 136) = 0u;
    *(_OWORD *)(v239 + 152) = 0u;
    *(_OWORD *)(v239 + 168) = 0u;
    *(_OWORD *)(v239 + 184) = 0u;
    *(_OWORD *)(v239 + 200) = 0u;
    *(_OWORD *)(v239 + 216) = 0u;
    *(_OWORD *)(v239 + 232) = 0u;
    *(_QWORD *)(v239 + 248) = 0;
    *(_OWORD *)(v239 + 56) = 0u;
    v240 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v239 + 56), 0);
    if ((_DWORD)v240)
      geo::read_write_lock::logFailure(v240, (uint64_t)"initialization", v241);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v239 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v239 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v239;
  }
  v81 = ggl::Allocator::instance(void)::alloc;
  v78[4] = 0;
  v78[3] = v81;
  v78[5] = 0;
  v78[6] = 0;
  {
    v243 = operator new();
    *(_QWORD *)(v243 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v243 + 24) = "GeoGL";
    *(_OWORD *)(v243 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v243 = &off_1E42B5668;
    *(_QWORD *)(v243 + 8) = "GeoGL";
    *(_OWORD *)(v243 + 72) = 0u;
    *(_OWORD *)(v243 + 88) = 0u;
    *(_OWORD *)(v243 + 104) = 0u;
    *(_OWORD *)(v243 + 120) = 0u;
    *(_OWORD *)(v243 + 136) = 0u;
    *(_OWORD *)(v243 + 152) = 0u;
    *(_OWORD *)(v243 + 168) = 0u;
    *(_OWORD *)(v243 + 184) = 0u;
    *(_OWORD *)(v243 + 200) = 0u;
    *(_OWORD *)(v243 + 216) = 0u;
    *(_OWORD *)(v243 + 232) = 0u;
    *(_QWORD *)(v243 + 248) = 0;
    *(_OWORD *)(v243 + 56) = 0u;
    v244 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v243 + 56), 0);
    if ((_DWORD)v244)
      geo::read_write_lock::logFailure(v244, (uint64_t)"initialization", v245);
    v246 = malloc_create_zone(0, 0);
    *(_QWORD *)(v243 + 48) = v246;
    malloc_set_zone_name(v246, "GeoGL");
    *(_QWORD *)(v243 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v243;
  }
  v78[7] = ggl::Allocator::instance(void)::alloc;
  v82 = (uint64_t)v294;
  if (v294)
  {
    if (v294 != &v292)
    {
      v82 = (*v294)[2]();
      goto LABEL_90;
    }
    v78[11] = (uint64_t)(v78 + 8);
    ((void (*)(uint64_t (***)(), uint64_t *))v292[3])(&v292, v78 + 8);
  }
  else
  {
LABEL_90:
    v78[11] = v82;
  }
  v83 = (uint64_t)v283;
  if (v283)
  {
    if (v283 != &v281)
    {
      v83 = ((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t))(*v283)[2])(v283, v74, v75, v76, v77);
      goto LABEL_95;
    }
    v78[15] = (uint64_t)(v78 + 12);
    ((void (*)(uint64_t, _QWORD *))v281[3])((uint64_t)&v281, v78 + 12);
  }
  else
  {
LABEL_95:
    v78[15] = v83;
  }
  v78[16] = 2000;
  v84 = *v78;
  if ((unint64_t)(v78[2] - *v78) <= 0x31F)
  {
    v85 = v78[1];
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[3] + 16))(v78[3], 800, 8);
    v87 = v85 - v84;
    v88 = v86 + ((v85 - v84) & 0xFFFFFFFFFFFFFFF8);
    v89 = *v78;
    v74 = v78[1];
    v90 = v74 - *v78;
    if (v74 == *v78)
    {
      v92 = v86 + ((v85 - v84) & 0xFFFFFFFFFFFFFFF8);
      v79 = (_QWORD *)&unk_1ECE44000;
    }
    else
    {
      v91 = v90 - 8;
      v79 = (_QWORD *)&unk_1ECE44000;
      if ((unint64_t)(v90 - 8) < 0x58)
      {
        v92 = v88;
        goto LABEL_106;
      }
      v92 = v88;
      if (v74 - (v87 & 0xFFFFFFFFFFFFFFF8) - v86 < 0x20)
        goto LABEL_270;
      v93 = v87 >> 3;
      v94 = (v91 >> 3) + 1;
      v95 = (_OWORD *)(v86 + 8 * v93 - 16);
      v96 = (__int128 *)(v74 - 16);
      v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98 = *v96;
        *(v95 - 1) = *(v96 - 1);
        *v95 = v98;
        v95 -= 2;
        v96 -= 2;
        v97 -= 4;
      }
      while (v97);
      v92 = v88 - 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v74 -= 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_270:
        do
        {
LABEL_106:
          v99 = *(_QWORD *)(v74 - 8);
          v74 -= 8;
          *(_QWORD *)(v92 - 8) = v99;
          v92 -= 8;
        }
        while (v74 != v89);
      }
      v74 = *v78;
    }
    *v78 = v92;
    v78[1] = v88;
    v100 = v78[2];
    v78[2] = v86 + 800;
    if (v74)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[3] + 40))(v78[3], v74, v100 - v74);
  }
  v101 = v78[4];
  if ((unint64_t)(v78[6] - v101) <= 0x31F)
  {
    v102 = v78[5];
    v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[7] + 16))(v78[7], 800, 8);
    v104 = v102 - v101;
    v105 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
    v106 = v78[4];
    v74 = v78[5];
    v107 = v74 - v106;
    if (v74 == v106)
    {
      v109 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
      v79 = (_QWORD *)&unk_1ECE44000;
    }
    else
    {
      v108 = v107 - 8;
      v79 = &unk_1ECE44000;
      if ((unint64_t)(v107 - 8) < 0x58)
      {
        v109 = v105;
        goto LABEL_119;
      }
      v109 = v105;
      if (v74 - (v104 & 0xFFFFFFFFFFFFFFF8) - v103 < 0x20)
        goto LABEL_271;
      v110 = v104 >> 3;
      v111 = (v108 >> 3) + 1;
      v112 = (_OWORD *)(v103 + 8 * v110 - 16);
      v113 = (__int128 *)(v74 - 16);
      v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v115 = *v113;
        *(v112 - 1) = *(v113 - 1);
        *v112 = v115;
        v112 -= 2;
        v113 -= 2;
        v114 -= 4;
      }
      while (v114);
      v109 = v105 - 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
      v74 -= 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
      if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_271:
        do
        {
LABEL_119:
          v116 = *(_QWORD *)(v74 - 8);
          v74 -= 8;
          *(_QWORD *)(v109 - 8) = v116;
          v109 -= 8;
        }
        while (v74 != v106);
      }
      v74 = v78[4];
    }
    v78[4] = v109;
    v78[5] = v105;
    v117 = v78[6];
    v78[6] = v103 + 800;
    if (v74)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v78[7] + 40))(v78[7], v74, v117 - v74);
  }
  v118 = *(_QWORD *)(v26 + 232);
  *(_QWORD *)(v26 + 232) = v78;
  if (v118)
  {
    v119 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v118);
    MEMORY[0x1A1AF4E00](v119, 0x10A0C40D234DDC7);
  }
  v120 = v283;
  if (v283 == &v281)
  {
    v121 = 4;
    v120 = &v281;
LABEL_129:
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t))(*v120)[v121])(v120, v74, v75, v76, v77);
  }
  else if (v283)
  {
    v121 = 5;
    goto LABEL_129;
  }
  v122 = v294;
  if (v294 == &v292)
  {
    v123 = 4;
    v122 = &v292;
LABEL_134:
    ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t))(*v122)[v123])(v122, v74, v75, v76, v77);
  }
  else if (v294)
  {
    v123 = 5;
    goto LABEL_134;
  }
  v128 = (uint64_t *)operator new();
  v279[0] = &off_1E42D4060;
  v279[1] = v26;
  v280 = v279;
  v277[0] = &off_1E42D7700;
  v278 = v277;
  v128[1] = 0;
  v128[2] = 0;
  *v128 = 0;
  {
    v247 = operator new();
    *(_QWORD *)(v247 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v247 + 24) = "GeoGL";
    *(_OWORD *)(v247 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v247 = &off_1E42B5668;
    *(_QWORD *)(v247 + 8) = "GeoGL";
    *(_OWORD *)(v247 + 72) = 0u;
    *(_OWORD *)(v247 + 88) = 0u;
    *(_OWORD *)(v247 + 104) = 0u;
    *(_OWORD *)(v247 + 120) = 0u;
    *(_OWORD *)(v247 + 136) = 0u;
    *(_OWORD *)(v247 + 152) = 0u;
    *(_OWORD *)(v247 + 168) = 0u;
    *(_OWORD *)(v247 + 184) = 0u;
    *(_OWORD *)(v247 + 200) = 0u;
    *(_OWORD *)(v247 + 216) = 0u;
    *(_OWORD *)(v247 + 232) = 0u;
    *(_QWORD *)(v247 + 248) = 0;
    *(_OWORD *)(v247 + 56) = 0u;
    v248 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v247 + 56), 0);
    if ((_DWORD)v248)
      geo::read_write_lock::logFailure(v248, (uint64_t)"initialization", v249);
    v250 = malloc_create_zone(0, 0);
    *(_QWORD *)(v247 + 48) = v250;
    malloc_set_zone_name(v250, "GeoGL");
    *(_QWORD *)(v247 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    v79 = &unk_1ECE44000;
    ggl::Allocator::instance(void)::alloc = v247;
  }
  v130 = v79[495];
  v128[4] = 0;
  v128[3] = v130;
  v128[5] = 0;
  v128[6] = 0;
  {
    v251 = operator new();
    *(_QWORD *)(v251 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v251 + 24) = "GeoGL";
    *(_OWORD *)(v251 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v251 = &off_1E42B5668;
    *(_QWORD *)(v251 + 8) = "GeoGL";
    *(_OWORD *)(v251 + 72) = 0u;
    *(_OWORD *)(v251 + 88) = 0u;
    *(_OWORD *)(v251 + 104) = 0u;
    *(_OWORD *)(v251 + 120) = 0u;
    *(_OWORD *)(v251 + 136) = 0u;
    *(_OWORD *)(v251 + 152) = 0u;
    *(_OWORD *)(v251 + 168) = 0u;
    *(_OWORD *)(v251 + 184) = 0u;
    *(_OWORD *)(v251 + 200) = 0u;
    *(_OWORD *)(v251 + 216) = 0u;
    *(_OWORD *)(v251 + 232) = 0u;
    *(_QWORD *)(v251 + 248) = 0;
    *(_OWORD *)(v251 + 56) = 0u;
    v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
    if ((_DWORD)v252)
      geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
    v254 = malloc_create_zone(0, 0);
    *(_QWORD *)(v251 + 48) = v254;
    malloc_set_zone_name(v254, "GeoGL");
    *(_QWORD *)(v251 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    v79 = &unk_1ECE44000;
    ggl::Allocator::instance(void)::alloc = v251;
  }
  v128[7] = v79[495];
  v131 = (uint64_t)v280;
  if (v280)
  {
    if (v280 != v279)
    {
      v131 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v280 + 16))(v280, v124, v125, v126, v127);
      goto LABEL_140;
    }
    v128[11] = (uint64_t)(v128 + 8);
    (*(void (**)(_QWORD *, uint64_t *))(v279[0] + 24))(v279, v128 + 8);
  }
  else
  {
LABEL_140:
    v128[11] = v131;
  }
  v132 = (uint64_t)v278;
  v263 = v128 + 8;
  if (v278)
  {
    if (v278 != v277)
    {
      v132 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v278 + 16))(v278, v124, v125, v126, v127);
      goto LABEL_145;
    }
    v128[15] = (uint64_t)(v128 + 12);
    (*(void (**)(uint64_t, _QWORD *))(v277[0] + 24))((uint64_t)v277, v128 + 12);
  }
  else
  {
LABEL_145:
    v128[15] = v132;
  }
  v128[16] = 2000;
  v133 = *v128;
  if ((unint64_t)(v128[2] - *v128) <= 0x31F)
  {
    v134 = v128[1];
    v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[3] + 16))(v128[3], 800, 8);
    v136 = v134 - v133;
    v137 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
    v138 = *v128;
    v124 = v128[1];
    v139 = v124 - *v128;
    if (v124 == *v128)
    {
      v141 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v140 = v139 - 8;
      if ((unint64_t)(v139 - 8) < 0x58)
      {
        v141 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_156;
      }
      v141 = v135 + ((v134 - v133) & 0xFFFFFFFFFFFFFFF8);
      if (v124 - (v136 & 0xFFFFFFFFFFFFFFF8) - v135 < 0x20)
        goto LABEL_272;
      v142 = v136 >> 3;
      v143 = (v140 >> 3) + 1;
      v144 = (_OWORD *)(v135 + 8 * v142 - 16);
      v145 = (__int128 *)(v124 - 16);
      v146 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v147 = *v145;
        *(v144 - 1) = *(v145 - 1);
        *v144 = v147;
        v144 -= 2;
        v145 -= 2;
        v146 -= 4;
      }
      while (v146);
      v141 = v137 - 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v124 -= 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
LABEL_156:
          v148 = *(_QWORD *)(v124 - 8);
          v124 -= 8;
          *(_QWORD *)(v141 - 8) = v148;
          v141 -= 8;
        }
        while (v124 != v138);
      }
      v124 = *v128;
    }
    *v128 = v141;
    v128[1] = v137;
    v149 = v128[2];
    v128[2] = v135 + 800;
    if (v124)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[3] + 40))(v128[3], v124, v149 - v124);
  }
  v150 = v128[4];
  if ((unint64_t)(v128[6] - v150) <= 0x31F)
  {
    v151 = v128[5];
    v152 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[7] + 16))(v128[7], 800, 8);
    v153 = v151 - v150;
    v154 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
    v155 = v128[4];
    v124 = v128[5];
    v156 = v124 - v155;
    if (v124 == v155)
    {
      v158 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v157 = v156 - 8;
      if ((unint64_t)(v156 - 8) < 0x58)
      {
        v158 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_169;
      }
      v158 = v152 + ((v151 - v150) & 0xFFFFFFFFFFFFFFF8);
      if (v124 - (v153 & 0xFFFFFFFFFFFFFFF8) - v152 < 0x20)
        goto LABEL_273;
      v159 = v153 >> 3;
      v160 = (v157 >> 3) + 1;
      v161 = (_OWORD *)(v152 + 8 * v159 - 16);
      v162 = (__int128 *)(v124 - 16);
      v163 = v160 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v164 = *v162;
        *(v161 - 1) = *(v162 - 1);
        *v161 = v164;
        v161 -= 2;
        v162 -= 2;
        v163 -= 4;
      }
      while (v163);
      v158 = v154 - 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
      v124 -= 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
      if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_273:
        do
        {
LABEL_169:
          v165 = *(_QWORD *)(v124 - 8);
          v124 -= 8;
          *(_QWORD *)(v158 - 8) = v165;
          v158 -= 8;
        }
        while (v124 != v155);
      }
      v124 = v128[4];
    }
    v128[4] = v158;
    v128[5] = v154;
    v166 = v128[6];
    v128[6] = v152 + 800;
    if (v124)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[7] + 40))(v128[7], v124, v166 - v124);
  }
  v167 = *(_QWORD *)(v26 + 256);
  *(_QWORD *)(v26 + 256) = v128;
  if (v167)
  {
    v168 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v167);
    MEMORY[0x1A1AF4E00](v168, 0x10A0C40D234DDC7);
  }
  v169 = v278;
  if (v278 == v277)
  {
    v170 = 4;
    v169 = v277;
LABEL_179:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v169 + 8 * v170))(v169, v124, v125, v126, v127);
  }
  else if (v278)
  {
    v170 = 5;
    goto LABEL_179;
  }
  v171 = v280;
  if (v280 == v279)
  {
    v172 = 4;
    v171 = v279;
LABEL_184:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v171 + 8 * v172))(v171, v124, v125, v126, v127);
  }
  else if (v280)
  {
    v172 = 5;
    goto LABEL_184;
  }
  v173 = operator new(0xE8uLL);
  v173[1] = 0;
  v173[2] = 0;
  *v173 = &off_1E42E0E58;
  v174 = ggl::BufferData::BufferData((uint64_t)(v173 + 3), qword_1EE54B530, 2, 1, 6, 1);
  v173[28] = ggl::VSTextured::Style::reflection(void)::reflection;
  v173[3] = &off_1E42B8BB0;
  v175 = *(std::__shared_weak_count **)(v26 + 272);
  *(_QWORD *)(v26 + 264) = v174;
  *(_QWORD *)(v26 + 272) = v173;
  if (v175)
  {
    v176 = (unint64_t *)&v175->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v291;
  if (v291)
  {
    v179 = (unint64_t *)&v291->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v289;
  if (v289)
  {
    v182 = (unint64_t *)&v289->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  do
    v184 = __ldaxr(v36);
  while (__stlxr(v184 - 1, v36));
  if (!v184)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  do
    v185 = __ldaxr(p_shared_owners);
  while (__stlxr(v185 - 1, p_shared_owners));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  v186 = *v268;
  *v268 = (md::mun::MuninRenderResources *)v26;
  if (v186)
  {
    md::mun::MuninRenderResources::~MuninRenderResources(v186);
    MEMORY[0x1A1AF4E00](v187, 0x1060C4034511607, v188, v189, v190);
  }

  v191 = *((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v270;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = v272;
  v193 = operator new();
  v194 = *(_QWORD *)(v267 + 120);
  v195 = operator new(2uLL);
  *v195 = 256;
  *(_QWORD *)v193 = off_1E428C468;
  *(_QWORD *)(v193 + 8) = 0;
  *(_QWORD *)(v193 + 16) = 0;
  *(_QWORD *)(v193 + 24) = 0;
  v196 = operator new(2uLL);
  *(_QWORD *)(v193 + 8) = v196;
  *v196++ = *v195;
  *(_QWORD *)(v193 + 16) = v196;
  *(_QWORD *)(v193 + 24) = v196;
  *(_WORD *)(v193 + 32) = 0;
  *(_BYTE *)(v193 + 34) = 2;
  *(_QWORD *)v193 = off_1E429E2A8;
  *(_QWORD *)(v193 + 40) = v272;
  operator delete(v195);
  *(_QWORD *)v193 = &off_1E42ABD68;
  *(_QWORD *)(v193 + 48) = v272;
  *(_QWORD *)(v193 + 56) = v194;
  *(_OWORD *)(v193 + 80) = 0u;
  *(_OWORD *)(v193 + 96) = 0u;
  *(_OWORD *)(v193 + 112) = 0u;
  *(_OWORD *)(v193 + 128) = 0u;
  *(_QWORD *)(v193 + 144) = 0;
  *(_QWORD *)(v193 + 152) = 0x3FF0000000000000;
  *(_OWORD *)(v193 + 160) = 0u;
  *(_OWORD *)(v193 + 176) = 0u;
  *(_OWORD *)(v193 + 192) = 0u;
  *(_OWORD *)(v193 + 208) = 0u;
  *(_QWORD *)(v193 + 224) = 0x3FF0000000000000;
  *(_OWORD *)(v193 + 232) = 0u;
  *(_OWORD *)(v193 + 248) = 0u;
  *(_OWORD *)(v193 + 264) = 0u;
  *(_QWORD *)(v193 + 280) = 0;
  *(_QWORD *)(v193 + 288) = 0x3FF0000000000000;
  *(_QWORD *)(v193 + 64) = 0;
  *(_QWORD *)(v193 + 72) = 0;
  *(_OWORD *)(v193 + 296) = 0u;
  *(_OWORD *)(v193 + 312) = 0u;
  *(_OWORD *)(v193 + 328) = 0u;
  *(_OWORD *)(v193 + 344) = 0u;
  *(_QWORD *)(v193 + 360) = 0;
  v197 = operator new();
  *(_DWORD *)(v197 + 32) = 0;
  *(_QWORD *)(v197 + 16) = 0;
  *(_QWORD *)(v197 + 24) = 0;
  *(_QWORD *)v197 = &off_1E42B5DE8;
  *(_QWORD *)(v197 + 8) = 0;
  *(_QWORD *)(v197 + 36) = 65537;
  *(_DWORD *)(v197 + 44) = 0;
  *(_QWORD *)(v197 + 48) = 1;
  *(_WORD *)(v197 + 56) = 0;
  *(_BYTE *)(v197 + 58) = 3;
  *(_QWORD *)(v197 + 67) = 0;
  *(_QWORD *)(v197 + 59) = 0;
  *(_BYTE *)(v197 + 75) = 0;
  *(_QWORD *)(v197 + 132) = 0;
  *(_QWORD *)(v197 + 124) = 0;
  *(_WORD *)(v197 + 188) = 257;
  *(_QWORD *)(v197 + 192) = 0;
  *(_QWORD *)(v197 + 200) = 0;
  *(_BYTE *)(v197 + 208) = 0;
  v198 = *(_QWORD *)(v193 + 296);
  *(_QWORD *)(v193 + 296) = v197;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = operator new();
  *(_DWORD *)(v199 + 32) = 0;
  *(_QWORD *)(v199 + 16) = 0;
  *(_QWORD *)(v199 + 24) = 0;
  *(_QWORD *)v199 = &off_1E42B5DE8;
  *(_QWORD *)(v199 + 8) = 0;
  *(_QWORD *)(v199 + 36) = 65537;
  *(_DWORD *)(v199 + 44) = 0;
  *(_QWORD *)(v199 + 48) = 1;
  *(_WORD *)(v199 + 56) = 0;
  *(_BYTE *)(v199 + 58) = 3;
  *(_QWORD *)(v199 + 67) = 0;
  *(_QWORD *)(v199 + 59) = 0;
  *(_BYTE *)(v199 + 75) = 0;
  *(_QWORD *)(v199 + 132) = 0;
  *(_QWORD *)(v199 + 124) = 0;
  *(_WORD *)(v199 + 188) = 257;
  *(_QWORD *)(v199 + 192) = 0;
  *(_QWORD *)(v199 + 200) = 0;
  *(_BYTE *)(v199 + 208) = 0;
  v200 = *(_QWORD *)(v193 + 304);
  *(_QWORD *)(v193 + 304) = v199;
  if (v200)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
    v199 = *(_QWORD *)(v193 + 304);
  }
  *(_BYTE *)(v199 + 58) = 0;
  v201 = operator new();
  *(_DWORD *)(v201 + 32) = 0;
  *(_QWORD *)(v201 + 16) = 0;
  *(_QWORD *)(v201 + 24) = 0;
  *(_QWORD *)v201 = &off_1E42B5DE8;
  *(_QWORD *)(v201 + 8) = 0;
  *(_QWORD *)(v201 + 36) = 65537;
  *(_DWORD *)(v201 + 44) = 0;
  *(_QWORD *)(v201 + 48) = 1;
  *(_WORD *)(v201 + 56) = 0;
  *(_BYTE *)(v201 + 58) = 3;
  *(_QWORD *)(v201 + 67) = 0;
  *(_QWORD *)(v201 + 59) = 0;
  *(_BYTE *)(v201 + 75) = 0;
  *(_QWORD *)(v201 + 132) = 0;
  *(_QWORD *)(v201 + 124) = 0;
  *(_WORD *)(v201 + 188) = 257;
  *(_QWORD *)(v201 + 192) = 0;
  *(_QWORD *)(v201 + 200) = 0;
  *(_BYTE *)(v201 + 208) = 0;
  v202 = *(_QWORD *)(v193 + 312);
  *(_QWORD *)(v193 + 312) = v201;
  if (v202)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
    v201 = *(_QWORD *)(v193 + 312);
  }
  *(_BYTE *)(v201 + 58) = 1;
  v203 = *((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 2) = v193;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = operator new();
  v205 = md::LabelsLogic::labelManagerForWorldType(v266, 2u);
  v206 = operator new(2uLL);
  *v206 = 512;
  *(_QWORD *)v204 = off_1E428C468;
  *(_QWORD *)(v204 + 8) = 0;
  *(_QWORD *)(v204 + 16) = 0;
  *(_QWORD *)(v204 + 24) = 0;
  v207 = operator new(2uLL);
  *(_QWORD *)(v204 + 8) = v207;
  *v207++ = *v206;
  *(_QWORD *)(v204 + 16) = v207;
  *(_QWORD *)(v204 + 24) = v207;
  *(_WORD *)(v204 + 32) = 0;
  *(_BYTE *)(v204 + 34) = 3;
  *(_QWORD *)v204 = off_1E429E2A8;
  *(_QWORD *)(v204 + 40) = v272;
  operator delete(v206);
  *(_QWORD *)v204 = &off_1E4290778;
  *(_QWORD *)(v204 + 48) = *(_QWORD *)v205;
  v208 = *((_QWORD *)v205 + 1);
  *(_QWORD *)(v204 + 56) = v208;
  if (v208)
  {
    v209 = (unint64_t *)(v208 + 8);
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 1, v209));
  }
  v211 = operator new();
  *(_QWORD *)v211 = 0;
  *(_QWORD *)(v211 + 8) = 0;
  {
    v255 = operator new();
    *(_QWORD *)(v255 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v255 + 24) = "VectorKitLabels";
    *(_OWORD *)(v255 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v255 = &off_1E42B5668;
    *(_QWORD *)(v255 + 8) = "VectorKitLabels";
    *(_OWORD *)(v255 + 72) = 0u;
    *(_OWORD *)(v255 + 88) = 0u;
    *(_OWORD *)(v255 + 104) = 0u;
    *(_OWORD *)(v255 + 120) = 0u;
    *(_OWORD *)(v255 + 136) = 0u;
    *(_OWORD *)(v255 + 152) = 0u;
    *(_OWORD *)(v255 + 168) = 0u;
    *(_OWORD *)(v255 + 184) = 0u;
    *(_OWORD *)(v255 + 200) = 0u;
    *(_OWORD *)(v255 + 216) = 0u;
    *(_OWORD *)(v255 + 232) = 0u;
    *(_QWORD *)(v255 + 248) = 0;
    *(_OWORD *)(v255 + 56) = 0u;
    v256 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v255 + 56), 0);
    if ((_DWORD)v256)
      geo::read_write_lock::logFailure(v256, (uint64_t)"initialization", v257);
    v258 = malloc_create_zone(0, 0);
    *(_QWORD *)(v255 + 48) = v258;
    malloc_set_zone_name(v258, "VectorKitLabels");
    *(_QWORD *)(v255 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v255;
    v192 = v272;
  }
  *(_QWORD *)(v211 + 16) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v211 + 24) = 0;
  {
    v259 = operator new();
    *(_QWORD *)(v259 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v259 + 24) = "VectorKitLabels";
    *(_OWORD *)(v259 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v259 = &off_1E42B5668;
    *(_QWORD *)(v259 + 8) = "VectorKitLabels";
    *(_OWORD *)(v259 + 72) = 0u;
    *(_OWORD *)(v259 + 88) = 0u;
    *(_OWORD *)(v259 + 104) = 0u;
    *(_OWORD *)(v259 + 120) = 0u;
    *(_OWORD *)(v259 + 136) = 0u;
    *(_OWORD *)(v259 + 152) = 0u;
    *(_OWORD *)(v259 + 168) = 0u;
    *(_OWORD *)(v259 + 184) = 0u;
    *(_OWORD *)(v259 + 200) = 0u;
    *(_OWORD *)(v259 + 216) = 0u;
    *(_OWORD *)(v259 + 232) = 0u;
    *(_QWORD *)(v259 + 248) = 0;
    *(_OWORD *)(v259 + 56) = 0u;
    v260 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v259 + 56), 0);
    if ((_DWORD)v260)
      geo::read_write_lock::logFailure(v260, (uint64_t)"initialization", v261);
    v262 = malloc_create_zone(0, 0);
    *(_QWORD *)(v259 + 48) = v262;
    malloc_set_zone_name(v262, "VectorKitLabels");
    *(_QWORD *)(v259 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v259;
    v192 = v272;
  }
  *(_QWORD *)(v211 + 32) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v211 + 40) = 0;
  *(_DWORD *)(v211 + 48) = 1065353216;
  *(_QWORD *)(v211 + 56) = 100;
  *(_OWORD *)(v211 + 64) = 0u;
  *(_OWORD *)(v211 + 80) = 0u;
  *(_DWORD *)(v211 + 96) = 1065353216;
  *(_QWORD *)(v211 + 104) = v211 + 104;
  *(_QWORD *)(v211 + 112) = v211 + 104;
  *(_QWORD *)(v211 + 120) = 0;
  *(_QWORD *)(v204 + 64) = v211;
  *(_DWORD *)(v204 + 72) = 0;
  v214 = *(float **)(v204 + 48);
  v215 = *(id *)(v192 + 104);
  objc_msgSend(v215, "contentScale", v263, v264, v265, v26 + 72);
  v217 = v216;
  if (v214[886] != v217)
  {
    v214[886] = v217;
    v284 = &off_1E42C96C8;
    v285 = (uint64_t)v214;
    v286 = (uint64_t (*)(uint64_t))LODWORD(v217);
    v287 = &v284;
    md::LabelManager::queueCommand((md::LabelManager *)v214, 3, 1, &v284);
    v218 = v287;
    if (v287 == &v284)
    {
      v219 = 4;
      v218 = &v284;
LABEL_228:
      (*v218)[v219]();
    }
    else if (v287)
    {
      v219 = 5;
      goto LABEL_228;
    }
  }

  v220 = *((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 3) = v204;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = operator new();
  v222 = operator new(2uLL);
  *v222 = 4;
  *(_QWORD *)v221 = off_1E428C468;
  *(_QWORD *)(v221 + 8) = 0;
  *(_QWORD *)(v221 + 16) = 0;
  *(_QWORD *)(v221 + 24) = 0;
  v223 = operator new(2uLL);
  *(_QWORD *)(v221 + 8) = v223;
  *v223++ = *v222;
  *(_QWORD *)(v221 + 16) = v223;
  *(_QWORD *)(v221 + 24) = v223;
  *(_WORD *)(v221 + 32) = 0;
  *(_BYTE *)(v221 + 34) = 4;
  *(_QWORD *)v221 = off_1E429E2A8;
  *(_QWORD *)(v221 + 40) = v272;
  operator delete(v222);
  *(_QWORD *)v221 = &off_1E42A2000;
  *(_OWORD *)(v221 + 48) = 0u;
  *(_OWORD *)(v221 + 64) = 0u;
  *(_OWORD *)(v221 + 80) = 0u;
  *(_OWORD *)(v221 + 96) = 0u;
  *(_OWORD *)(v221 + 112) = 0u;
  *(_OWORD *)(v221 + 128) = 0u;
  v224 = operator new(0xE8uLL);
  v224[1] = 0;
  v224[2] = 0;
  *v224 = &off_1E42E2D68;
  v225 = ggl::BufferData::BufferData((uint64_t)(v224 + 3), qword_1EE562BB0, 2, 1, 6, 1);
  v224[28] = ggl::Textured::Style::reflection(void)::reflection;
  v224[3] = &off_1E42B9F50;
  v226 = *(std::__shared_weak_count **)(v221 + 88);
  *(_QWORD *)(v221 + 80) = v225;
  *(_QWORD *)(v221 + 88) = v224;
  if (v226)
  {
    v227 = (unint64_t *)&v226->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = *(_QWORD **)(v221 + 80);
  v230 = v229[1];
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v229[9] = _Q0;
  if (v229[8] > v230)
    v230 = v229[8];
  v229[7] = 0;
  v229[8] = v230;
  v236 = operator new();
  *(_DWORD *)(v236 + 32) = 0;
  *(_QWORD *)(v236 + 16) = 0;
  *(_QWORD *)(v236 + 24) = 0;
  *(_QWORD *)v236 = &off_1E42B5DE8;
  *(_QWORD *)(v236 + 8) = 0;
  *(_QWORD *)(v236 + 36) = 65537;
  *(_DWORD *)(v236 + 44) = 0;
  *(_QWORD *)(v236 + 48) = 1;
  *(_WORD *)(v236 + 56) = 0;
  *(_BYTE *)(v236 + 58) = 3;
  *(_QWORD *)(v236 + 67) = 0;
  *(_QWORD *)(v236 + 59) = 0;
  *(_BYTE *)(v236 + 75) = 0;
  *(_QWORD *)(v236 + 132) = 0;
  *(_QWORD *)(v236 + 124) = 0;
  *(_WORD *)(v236 + 188) = 257;
  *(_QWORD *)(v236 + 192) = 0;
  *(_QWORD *)(v236 + 200) = 0;
  *(_BYTE *)(v236 + 208) = 0;
  v237 = *(_QWORD *)(v221 + 120);
  *(_QWORD *)(v221 + 120) = v236;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)v6 + 4);
  *((_QWORD *)v6 + 4) = v221;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);

}

void sub_19F4FAB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, _Unwind_Exception *exception_object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;

  v40 = *(_QWORD **)(v39 - 168);
  if (v40 == v38)
  {
    v41 = 4;
    v40 = (_QWORD *)(v39 - 192);
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_6:

  v42 = (uint64_t *)v37[8];
  v37[8] = 0;
  if (v42)
    std::default_delete<md::MuninLabelTileCache>::operator()[abi:nn180100](v42);
  v43 = (std::__shared_weak_count *)v37[7];
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *v37 = off_1E428C468;
  v46 = (void *)v37[1];
  if (v46)
  {
    v37[2] = v46;
    operator delete(v46);
  }
  MEMORY[0x1A1AF4E00](v37, 0x10A1C40E41433FALL);

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a10);
  _Unwind_Resume(a1);
}

void sub_19F4FBB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::MuninMapEngineConfiguration::didBecomeActive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    goto LABEL_45;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v3 <= 0x2FED70A4459DFCA1uLL)
      v7 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  v8 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v7);
  if (!v8)
    goto LABEL_26;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x2FED70A4459DFCA1)
      {
        if (v9[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x2FED70A4459DFCA1)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v12 = v9[5];
  if (v12)
  {
    md::StyleLogic::setMapMode(v12, 5, 0.0);
    v2 = *(int8x8_t **)(a2 + 1120);
    v3 = v2[2];
  }
LABEL_24:
  if (v3)
  {
    v13 = (uint8x8_t)vcnt_s8(v3);
    v13.i16[0] = vaddlv_u8(v13);
    v6 = v13.u32[0];
LABEL_26:
    if (v6 > 1)
    {
      v14 = 0x20A1ED17D78F322BLL;
      if (*(_QWORD *)&v3 <= 0x20A1ED17D78F322BuLL)
        v14 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v3;
    }
    else
    {
      v14 = (*(_QWORD *)&v3 - 1) & 0x20A1ED17D78F322BLL;
    }
    v15 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v14);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (v16)
      {
        if (v6 < 2)
        {
          v17 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == 0x20A1ED17D78F322BLL)
            {
              if (v16[2] == 0x20A1ED17D78F322BLL)
                goto LABEL_47;
            }
            else if ((v19 & v17) != v14)
            {
              goto LABEL_45;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_45;
          }
        }
        do
        {
          v18 = v16[1];
          if (v18 == 0x20A1ED17D78F322BLL)
          {
            if (v16[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_47:
              v20 = v16[5];
              goto LABEL_46;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v3)
              v18 %= *(_QWORD *)&v3;
            if (v18 != v14)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_45:
  v20 = 0;
LABEL_46:
  md::LabelsLogic::setWorldType(v20, 2u);
}

uint64_t md::MapEngineConfiguration::shouldRebuildCurrentMode(md::MapEngineConfiguration *this, md::MapEngine *a2)
{
  return 0;
}

_QWORD *std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unsigned int *md::createFeatureAttributeSet(gss::Allocator *a1, uint64_t *a2)
{
  gss::Allocator *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *result;
  uint64_t *v53;
  uint64_t v54;

  v3 = a1;
  v4 = gss::Allocator::instance(a1);
  v5 = *a2;
  v54 = v4;
  if (*a2)
  {
    v53 = (uint64_t *)v3;
    v6 = *(unsigned __int8 *)(v5 + 32) + (unint64_t)*(unsigned __int8 *)(v5 + 33);
    if (v6)
    {
      v7 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 8 * v6, 4);
      v8 = v7 + 8 * v6;
      v5 = *a2;
      v9 = v7;
      if (*(_BYTE *)(*a2 + 33))
      {
LABEL_4:
        v10 = 0;
        v11 = v9;
        while (1)
        {
          v12 = (int *)(*(_QWORD *)v5 + 8 * v10);
          v14 = *v12;
          v13 = v12[1];
          if (v11 >= v8)
            break;
          if (v11)
          {
            *(_DWORD *)v11 = v14;
            *(_WORD *)(v11 + 4) = v13;
          }
          v11 += 8;
LABEL_6:
          ++v10;
          v5 = *a2;
          if (v10 >= *(unsigned __int8 *)(*a2 + 33))
            goto LABEL_37;
        }
        v15 = (uint64_t)(v11 - v9) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v17 = v8 - v9;
        if ((uint64_t)(v8 - v9) >> 2 > v16)
          v16 = (uint64_t)(v8 - v9) >> 2;
        if (v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, 8 * v18, 4);
          v20 = v19 + 8 * v15;
          v8 = v19 + 8 * v18;
          if (v19)
          {
            *(_DWORD *)v20 = v14;
            *(_WORD *)(v20 + 4) = v13;
          }
        }
        else
        {
          v8 = 0;
          v20 = 8 * v15;
        }
        v21 = v20;
        if (v11 != v9)
        {
          v22 = v11 - v9 - 8;
          if (v22 < 0x138
            || v20 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8) > v20 - 8
            || v11 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8) > v11 - 8
            || v11 - v20 < 0x20)
          {
            v23 = v11;
            v21 = v20;
          }
          else
          {
            v25 = (v22 >> 3) + 1;
            v23 = v11 - 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
            v26 = (_OWORD *)(v20 - 16);
            v27 = (__int128 *)(v11 - 16);
            v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *v27;
              *(v26 - 1) = *(v27 - 1);
              *v26 = v29;
              v26 -= 2;
              v27 -= 2;
              v28 -= 4;
            }
            while (v28);
            v21 = v20 - 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
            if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_24;
          }
          do
          {
            v24 = *(_QWORD *)(v23 - 8);
            v23 -= 8;
            *(_QWORD *)(v21 - 8) = v24;
            v21 -= 8;
          }
          while (v23 != v9);
        }
LABEL_24:
        v11 = v20 + 8;
        if (v9)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 40))(v54, v9, v17);
        v9 = v21;
        goto LABEL_6;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      if (*(_BYTE *)(v5 + 33))
        goto LABEL_4;
    }
    v11 = v9;
LABEL_37:
    if (*(_BYTE *)(v5 + 32))
    {
      v30 = 0;
      while (1)
      {
        v31 = *(_QWORD *)(v5 + 24) + 12 * v30;
        v32 = *(_DWORD *)v31;
        v33 = *(_WORD *)(v31 + 4);
        if (v11 >= v8)
          break;
        if (v11)
        {
          *(_DWORD *)v11 = v32;
          *(_WORD *)(v11 + 4) = v33;
        }
        v11 += 8;
LABEL_40:
        ++v30;
        v5 = *a2;
        if (v30 >= *(unsigned __int8 *)(*a2 + 32))
          goto LABEL_68;
      }
      v34 = (uint64_t)(v11 - v9) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        abort();
      v36 = v8 - v9;
      if ((uint64_t)(v8 - v9) >> 2 > v35)
        v35 = (uint64_t)(v8 - v9) >> 2;
      if (v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, 8 * v37, 4);
        v39 = v38 + 8 * v34;
        v8 = v38 + 8 * v37;
        if (v38)
        {
          *(_DWORD *)v39 = v32;
          *(_WORD *)(v39 + 4) = v33;
        }
      }
      else
      {
        v8 = 0;
        v39 = 8 * v34;
      }
      v40 = v39;
      if (v11 != v9)
      {
        v41 = v11 - v9 - 8;
        if (v41 < 0x138
          || v39 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8) > v39 - 8
          || v11 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8) > v11 - 8
          || v11 - v39 < 0x20)
        {
          v42 = v11;
          v40 = v39;
        }
        else
        {
          v44 = (v41 >> 3) + 1;
          v42 = v11 - 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = (_OWORD *)(v39 - 16);
          v46 = (__int128 *)(v11 - 16);
          v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *v46;
            *(v45 - 1) = *(v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 2;
            v47 -= 4;
          }
          while (v47);
          v40 = v39 - 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_58;
        }
        do
        {
          v43 = *(_QWORD *)(v42 - 8);
          v42 -= 8;
          *(_QWORD *)(v40 - 8) = v43;
          v40 -= 8;
        }
        while (v42 != v9);
      }
LABEL_58:
      v11 = v39 + 8;
      if (v9)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 40))(v54, v9, v36);
      v9 = v40;
      goto LABEL_40;
    }
LABEL_68:
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v54;
    *v53 = 0;
    v49 = v11 - v9;
    if (v11 == v9)
    {
      v3 = (gss::Allocator *)v53;
    }
    else
    {
      if (v49 < 0)
        abort();
      v50 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v11 - v9, 4);
      v51 = 0;
      v3 = (gss::Allocator *)v53;
      *v53 = v50;
      v53[1] = v50;
      v53[2] = v50 + 8 * (v49 >> 3);
      do
      {
        if (v50 + v51)
          *(_QWORD *)(v50 + v51) = *(_QWORD *)(v9 + v51);
        v51 += 8;
      }
      while (v9 + v51 != v11);
      v53[1] = v50 + v51;
      v11 = v9;
    }
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v8 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 3) = v4;
  }
  result = gss::FeatureAttributeSet::sort(v3);
  if (v11)
    return (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v54 + 40))(v54, v11, v8 - v9);
  return result;
}

void sub_19F4FC2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *v10;
  if (*v10)
  {
    *v11 = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v14 + 40))(*v14, v17, *v12 - v17);
  }
  if (v15)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a10 + 40))(a10, v15, v13 - v15);
  _Unwind_Resume(exception_object);
}

void md::createFeatureAttributeSet(md *this, const GEOStyleAttributes *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t i;
  uint64_t v8;
  void *v9;
  int v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  const GEOStyleAttributes *v32;

  v32 = a2;
  v3 = gss::Allocator::instance(v32);
  v31 = v3;
  if (!v32)
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 3) = v3;
    goto LABEL_42;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  for (i = 0; i < -[GEOStyleAttributes attributesCount](v32, "attributesCount", v31); ++i)
  {
    -[GEOStyleAttributes attributeAtIndex:](v32, "attributeAtIndex:", i);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "key");
    v11 = objc_msgSend(v9, "value");
    v12 = v11;
    if ((unint64_t)v5 >= v4)
    {
      v13 = (v5 - v6) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      if ((uint64_t)(v4 - (_QWORD)v6) >> 2 > v14)
        v14 = (uint64_t)(v4 - (_QWORD)v6) >> 2;
      if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, 8 * v15, 4);
        v17 = v16 + 8 * v13;
        v15 = v16 + 8 * v15;
        if (v16)
        {
          *(_DWORD *)v17 = v10;
          *(_WORD *)(v17 + 4) = v12;
        }
        v18 = v5 - v6;
        if (v5 != v6)
        {
LABEL_19:
          v19 = v18 - 8;
          if (v19 < 0x138
            || v17 - 8 - (v19 & 0xFFFFFFFFFFFFFFF8) > v17 - 8
            || &v5[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8
            || (unint64_t)&v5[-v17] < 0x20)
          {
            v20 = v5;
            v21 = v17;
          }
          else
          {
            v23 = (v19 >> 3) + 1;
            v20 = &v5[-8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
            v24 = (_OWORD *)(v17 - 16);
            v25 = (__int128 *)(v5 - 16);
            v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v27 = *v25;
              *(v24 - 1) = *(v25 - 1);
              *v24 = v27;
              v24 -= 2;
              v25 -= 2;
              v26 -= 4;
            }
            while (v26);
            v21 = v17 - 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
            if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_22;
          }
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *(_QWORD *)(v21 - 8) = v22;
            v21 -= 8;
          }
          while (v20 != v6);
LABEL_22:
          v5 = v6;
          v6 = (char *)v21;
          v8 = v17 + 8;
          if (v5)
            goto LABEL_23;
LABEL_26:
          v4 = v15;
          v3 = v31;
          goto LABEL_4;
        }
      }
      else
      {
        v17 = 8 * v13;
        v18 = v5 - v6;
        if (v5 != v6)
          goto LABEL_19;
      }
      v6 = (char *)v17;
      v8 = v17 + 8;
      if (v5)
      {
LABEL_23:
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v31 + 40))(v31, v5, v4 - (_QWORD)v5);
        v4 = v15;
        v3 = v31;
        goto LABEL_4;
      }
      goto LABEL_26;
    }
    v3 = v31;
    if (v5)
    {
      *(_DWORD *)v5 = v10;
      *((_WORD *)v5 + 2) = v11;
    }
    v8 = (uint64_t)(v5 + 8);
LABEL_4:

    v5 = (char *)v8;
  }
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *(_QWORD *)this = 0;
  v28 = v5 - v6;
  if (v5 != v6)
  {
    if (v28 < 0)
      abort();
    v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5 - v6, 4);
    *(_QWORD *)this = v29;
    *((_QWORD *)this + 1) = v29;
    *((_QWORD *)this + 2) = &v29[v28 >> 3];
    v30 = v6;
    do
    {
      if (v29)
        *v29 = *(_QWORD *)v30;
      v30 += 8;
      ++v29;
    }
    while (v30 != v5);
    *((_QWORD *)this + 1) = v29;
    v5 = v6;
  }
LABEL_42:
  gss::FeatureAttributeSet::sort(this);
  if (v5)
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v3 + 40))(v3, v5, v4 - (_QWORD)v6);

}

void sub_19F4FC64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a9 + 40))(a9, v10, v11 - v10);

  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::~ARMeshRenderLayer(md::ARMeshRenderLayer *this)
{
  md::ARMeshRenderLayer::~ARMeshRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;

  *(_QWORD *)this = &off_1E42923A0;
  v2 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v8)
      goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v11 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v11)
  {
    v12 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v11);
    MEMORY[0x1A1AF4E00](v12, 0x10A0C40D234DDC7);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 51);
  if (v13)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  v15 = (void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v15)
    operator delete(v15);
  v16 = (_QWORD *)*((_QWORD *)this + 46);
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = (void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v18)
    operator delete(v18);
  md::ARMeshRenderResources::~ARMeshRenderResources((md::ARMeshRenderLayer *)((char *)this + 64));
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v22 = (void *)*((_QWORD *)this + 1);
  if (v22)
  {
    *((_QWORD *)this + 2) = v22;
    operator delete(v22);
  }
}

void md::ARMeshRenderLayer::layout(uint64_t **this, const md::LayoutContext *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v186;
  float64_t *v187;
  float64_t *v188;
  md::ARMeshRenderLayer *v189;
  unint64_t v190;
  uint64_t *v191;
  unint64_t *v192;
  _QWORD *v193;
  unint64_t v194;
  uint8x8_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  _QWORD **v204;
  _QWORD *v205;
  uint64_t v206;
  md::ARMeshRenderLayer *v207;
  unint64_t v208;
  unint64_t v209;
  float v210;
  float v211;
  _BOOL8 v213;
  unint64_t v214;
  unint64_t v215;
  size_t prime;
  unint64_t v217;
  uint8x8_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t *v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t *v240;
  unint64_t *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t HasARLighting;
  _QWORD *v249;
  uint64_t v250;
  unint64_t *v251;
  uint64_t *v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v256;
  _QWORD *v257;
  int8x8_t v258;
  uint8x8_t v259;
  uint64_t v260;
  _UNKNOWN **v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t i;
  uint64_t v270;
  uint64_t j;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t k;
  uint64_t v311;
  uint64_t m;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t n;
  uint64_t v352;
  uint64_t ii;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t *v385;
  uint64_t *v386;
  uint64_t v387;
  unint64_t *v388;
  uint64_t *v389;
  _QWORD *v390;
  unint64_t *v391;
  uint64_t *v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  _QWORD *v396;
  unint64_t *v397;
  uint64_t *v398;
  uint64_t v399;
  _UNKNOWN **v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  BOOL v425;
  uint64_t *v426;
  void *v427;
  uint64_t v428;
  float v429;
  float v430;
  float v431;
  unint64_t *v432;
  uint64_t *v433;
  uint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  BOOL v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  float v463;
  float v464;
  float v465;
  _QWORD *v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  BOOL v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  BOOL v502;
  uint64_t *v503;
  void *v504;
  uint64_t v505;
  float v506;
  float v507;
  float v508;
  _QWORD *v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  BOOL v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  BOOL v540;
  _QWORD *v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  BOOL v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  BOOL v572;
  int8x8_t *v573;
  _OWORD *v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t *v583;
  unint64_t *v584;
  _QWORD *v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  float32x4_t *v589;
  uint64_t v590;
  double v591;
  double v592;
  double v593;
  double v594;
  double v595;
  double v596;
  double v597;
  double v598;
  double v599;
  double v600;
  double v601;
  double v602;
  double v603;
  double v604;
  double v605;
  double v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t v612;
  unint64_t v613;
  float32x4_t *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v619;
  _QWORD *v620;
  int8x8_t v621;
  uint8x8_t v622;
  uint64_t v623;
  unint64_t *v624;
  uint64_t *v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  float32x4_t *v632;
  double v633;
  double v634;
  double v635;
  double v636;
  double v637;
  double v638;
  double v639;
  double v640;
  double v641;
  double v642;
  double v643;
  double v644;
  double v645;
  double v646;
  double v647;
  double v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t v661;
  BOOL v662;
  _QWORD *v663;
  _QWORD *v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  _QWORD *v674;
  float64_t v676;
  unint64_t *v677;
  unint64_t v678;
  uint64_t v679;
  _QWORD *v680;
  _QWORD *v681;
  _QWORD *v682;
  uint64_t *v683;
  unint64_t *v684;
  uint64_t *v685;
  uint64_t *v686;
  _QWORD *v687;
  uint64_t *v688;
  unint64_t *v689;
  uint64_t v690;
  uint64_t v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  uint64_t *v699;
  uint64_t v700;
  float *v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  float64x2_t v712;
  unint64_t *v713;
  unint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *p_shared_owners;
  unint64_t v717;
  uint64_t *v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  unint64_t v723;
  unint64_t v724;
  float *v725;
  float *v726;
  unint64_t *v727;
  unint64_t *v728;
  uint64_t *v729;
  unint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t v745;
  BOOL v746;
  float64_t *v747;
  float64_t v748;
  float64_t v749;
  unint64_t *v750;
  unint64_t v751;
  std::__shared_weak_count *v752;
  unint64_t *v753;
  unint64_t v754;
  uint64_t v755;
  float v756;
  unint64_t v760;
  _WORD *v761;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t *v769;
  BOOL v770;
  uint64_t v772;
  unint64_t v773;
  uint64_t *v774;
  unint64_t v776;
  unint64_t v777;
  unint64_t v778;
  float *v779;
  uint64_t v780;
  unint64_t v781;
  BOOL v782;
  float *v783;
  float *v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t *v787;
  BOOL v788;
  float *v789;
  uint64_t v790;
  unint64_t v794;
  _WORD *v795;
  unint64_t v797;
  unint64_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t *v801;
  BOOL v802;
  uint64_t v804;
  unint64_t v805;
  uint64_t *v806;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t *v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  uint64_t *v815;
  BOOL v816;
  float *v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t *v820;
  float *v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t *v834;
  uint64_t v835;
  float *v836;
  uint64_t v837;
  unint64_t v841;
  _WORD *v842;
  unint64_t v844;
  unint64_t v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  BOOL v849;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  unint64_t v855;
  unint64_t v856;
  unint64_t v857;
  uint64_t *v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  BOOL v863;
  float *v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  _QWORD *v872;
  uint64_t v873;
  uint64_t *v874;
  unint64_t *v875;
  _QWORD *v876;
  uint64_t v878;
  _QWORD *HasTransformInstanceDeviceData;
  _QWORD *v880;
  uint64_t v881;
  _QWORD *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  _QWORD *v886;
  _QWORD *v887;
  uint64_t v889;
  _QWORD *HasTransformConstant;
  _QWORD *v891;
  uint64_t v892;
  _QWORD *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  _QWORD *v897;
  _QWORD *v898;
  uint64_t v900;
  _QWORD *v901;
  int8x8_t v902;
  uint8x8_t v903;
  uint64_t v904;
  _QWORD **v905;
  _DWORD *v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  unint64_t v917;
  unint64_t v918;
  uint64_t v919;
  unint64_t v920;
  unint64_t v921;
  uint64_t v922;
  BOOL v923;
  _QWORD *v924;
  _QWORD *v925;
  unint64_t *v926;
  uint64_t *v927;
  _DWORD *v928;
  _QWORD **v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  unint64_t v940;
  unint64_t v941;
  uint64_t v942;
  unint64_t v943;
  unint64_t v944;
  uint64_t v945;
  BOOL v946;
  unint64_t *v947;
  uint64_t *v948;
  uint64_t v949;
  unint64_t *v950;
  uint64_t *v951;
  uint64_t v952;
  unint64_t *v953;
  uint64_t *v954;
  uint64_t v955;
  unint64_t *v956;
  uint64_t *v957;
  uint64_t v958;
  _QWORD *v959;
  _QWORD *v960;
  uint64_t v961;
  unint64_t v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v982;
  unint64_t v983;
  uint64_t v984;
  unint64_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v992;
  unint64_t v993;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v1000;
  double *v1001;
  _QWORD *v1002;
  uint64_t v1003;
  _QWORD *v1004;
  uint64_t v1005;
  uint64_t *v1006;
  unint64_t *v1007;
  _QWORD *v1008;
  uint64_t v1010;
  _QWORD *v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  uint64_t v1014;
  _QWORD *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  _QWORD *v1019;
  _QWORD *v1020;
  uint64_t v1022;
  _QWORD *v1023;
  _QWORD *v1024;
  _QWORD *v1025;
  uint64_t v1026;
  _QWORD *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  _QWORD *v1031;
  _QWORD *v1032;
  uint64_t v1034;
  _QWORD *v1035;
  _QWORD *v1036;
  _QWORD *v1037;
  uint64_t v1038;
  _QWORD *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  _QWORD *v1043;
  _QWORD *v1044;
  uint64_t v1046;
  uint64_t v1047;
  _QWORD *v1048;
  uint64_t v1049;
  uint64_t v1050;
  const ggl::Texture *v1051;
  const ggl::Texture **v1052;
  const ggl::Texture *v1053;
  const ggl::Texture *v1054;
  uint64_t v1055;
  _QWORD **v1056;
  unint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  unint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  BOOL v1073;
  unint64_t *v1074;
  uint64_t *v1075;
  _QWORD **v1076;
  uint64_t v1077;
  unint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  unint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  BOOL v1094;
  unint64_t *v1095;
  uint64_t *v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  _QWORD *v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  unint64_t *v1104;
  uint64_t *v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  _QWORD *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t *v1113;
  uint64_t *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  _QWORD *v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  _QWORD *v1122;
  _QWORD *v1123;
  uint64_t v1124;
  _QWORD *v1125;
  uint64_t v1126;
  uint64_t *v1127;
  unint64_t *v1128;
  _QWORD *v1129;
  _QWORD *v1130;
  uint64_t v1132;
  _QWORD *v1133;
  _QWORD *v1134;
  _QWORD *v1135;
  uint64_t v1136;
  _QWORD *v1137;
  uint64_t v1138;
  uint64_t v1139;
  _QWORD *v1140;
  _QWORD *v1141;
  const ggl::Texture *v1142;
  unint64_t *v1143;
  uint64_t *v1144;
  uint64_t v1145;
  const ggl::Texture *v1146;
  unint64_t *v1147;
  uint64_t *v1148;
  _QWORD *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  _QWORD *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t *v1156;
  uint64_t v1157;
  uint64_t jj;
  _QWORD *v1159;
  unint64_t v1160;
  unint64_t v1161;
  uint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unint64_t v1180;
  unint64_t v1181;
  unint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  uint64_t v1185;
  BOOL v1186;
  uint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  BOOL v1190;
  _QWORD *v1191;
  unint64_t v1192;
  unint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1201;
  unint64_t v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  unint64_t v1207;
  uint64_t v1208;
  unint64_t v1210;
  unint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  uint64_t v1215;
  BOOL v1216;
  uint64_t v1217;
  unint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1227;
  unint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  unint64_t v1236;
  unint64_t v1237;
  uint64_t v1238;
  unint64_t v1239;
  unint64_t v1240;
  uint64_t v1241;
  BOOL v1242;
  _QWORD *v1243;
  unint64_t v1244;
  unint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  unint64_t v1262;
  unint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  uint64_t v1267;
  BOOL v1268;
  uint64_t v1269;
  unint64_t v1270;
  unint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1279;
  unint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  unint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  BOOL v1294;
  uint64_t v1295;
  unint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  uint64_t v1300;
  unint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  uint64_t v1305;
  uint64_t v1307;
  unint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  uint64_t v1314;
  unint64_t v1316;
  unint64_t v1317;
  unint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  BOOL v1322;
  _QWORD *v1323;
  uint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  BOOL v1327;
  uint64_t v1328;
  unint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  unint64_t v1337;
  uint64_t v1338;
  uint64_t v1340;
  unint64_t v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  uint64_t v1347;
  unint64_t v1349;
  unint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  BOOL v1355;
  _QWORD *v1356;
  uint64_t v1357;
  unint64_t v1358;
  uint64_t v1359;
  BOOL v1360;
  uint64_t v1361;
  unint64_t v1362;
  unint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  uint64_t v1371;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  uint64_t v1380;
  unint64_t v1382;
  unint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  unint64_t v1386;
  uint64_t v1387;
  BOOL v1388;
  _QWORD *v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  BOOL v1393;
  uint64_t v1394;
  unint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  uint64_t v1399;
  unint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  uint64_t v1404;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  unint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  BOOL v1421;
  _QWORD *v1422;
  uint64_t v1423;
  unint64_t v1424;
  uint64_t v1425;
  BOOL v1426;
  _QWORD *v1427;
  unint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  unint64_t v1446;
  unint64_t v1447;
  uint64_t v1448;
  unint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  BOOL v1452;
  uint64_t v1453;
  unint64_t v1454;
  unint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  unint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1463;
  unint64_t v1464;
  uint64_t v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  unint64_t v1469;
  uint64_t v1470;
  unint64_t v1472;
  unint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  uint64_t v1477;
  BOOL v1478;
  uint64_t *v1479;
  unint64_t v1480;
  unint64_t v1481;
  uint64_t v1482;
  unint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1492;
  uint64_t v1493;
  unint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1499;
  uint64_t v1500;
  unint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  uint64_t *v1511;
  unint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  unint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t v1524;
  uint64_t v1525;
  unint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1531;
  uint64_t v1532;
  unint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unint64_t v1538;
  unint64_t v1539;
  uint64_t v1540;
  unint64_t v1541;
  uint64_t v1542;
  uint64_t *v1543;
  unint64_t v1544;
  unint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  unint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  uint64_t v1556;
  uint64_t v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1563;
  uint64_t v1564;
  unint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  unint64_t v1570;
  unint64_t v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  unint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  unint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  unint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1586;
  unint64_t v1587;
  uint64_t v1588;
  unint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  unint64_t v1592;
  uint64_t v1593;
  uint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  unint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  uint64_t v1602;
  unint64_t v1604;
  uint64_t v1605;
  unint64_t v1606;
  uint64_t v1607;
  _QWORD *v1608;
  unint64_t v1609;
  unint64_t v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  unint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  unint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t v1629;
  unint64_t v1630;
  uint64_t v1631;
  unint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  unint64_t v1635;
  uint64_t v1636;
  unint64_t v1638;
  uint64_t v1639;
  unint64_t v1640;
  uint64_t v1641;
  _QWORD *v1642;
  unint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  unint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  unint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1654;
  unint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  uint64_t v1661;
  uint64_t v1663;
  unint64_t v1664;
  uint64_t v1665;
  unint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  unint64_t v1669;
  uint64_t v1670;
  unint64_t v1672;
  uint64_t v1673;
  unint64_t v1674;
  uint64_t v1675;
  _QWORD *v1676;
  uint64_t *v1677;
  unint64_t v1678;
  unint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  unint64_t v1694;
  uint64_t v1695;
  uint64_t v1697;
  uint64_t v1698;
  unint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  unint64_t v1704;
  unint64_t v1705;
  uint64_t v1706;
  unint64_t v1707;
  uint64_t v1708;
  uint64_t *v1709;
  unint64_t v1710;
  unint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1720;
  unint64_t v1721;
  uint64_t v1722;
  unint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  unint64_t v1726;
  uint64_t v1727;
  uint64_t v1729;
  uint64_t v1730;
  unint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  unint64_t v1736;
  unint64_t v1737;
  uint64_t v1738;
  unint64_t v1739;
  uint64_t v1740;
  uint64_t *v1741;
  unint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  unint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1752;
  unint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  unint64_t v1758;
  uint64_t v1759;
  uint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  unint64_t v1768;
  unint64_t v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  uint64_t *v1773;
  unint64_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1784;
  unint64_t v1785;
  uint64_t v1786;
  unint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  uint64_t v1793;
  uint64_t v1794;
  unint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  unint64_t v1800;
  unint64_t v1801;
  uint64_t v1802;
  unint64_t v1803;
  uint64_t v1804;
  uint64_t *v1805;
  unint64_t v1806;
  unint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  unint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1816;
  unint64_t v1817;
  uint64_t v1818;
  unint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  unint64_t v1822;
  uint64_t v1823;
  uint64_t v1825;
  uint64_t v1826;
  unint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  unint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  unint64_t v1835;
  uint64_t v1836;
  uint64_t *v1837;
  unint64_t v1838;
  unint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1848;
  unint64_t v1849;
  uint64_t v1850;
  unint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  unint64_t v1854;
  uint64_t v1855;
  uint64_t v1857;
  uint64_t v1858;
  unint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  unint64_t v1864;
  unint64_t v1865;
  uint64_t v1866;
  unint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  uint64_t v1870;
  uint64_t v1871;
  unint64_t v1872;
  unint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  unint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  uint64_t v1882;
  unint64_t v1883;
  uint64_t v1884;
  unint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  unint64_t v1888;
  uint64_t v1889;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  unint64_t v1897;
  uint64_t v1898;
  unint64_t v1900;
  unint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  uint64_t v1905;
  _QWORD *v1906;
  uint64_t v1907;
  unint64_t v1908;
  uint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  unint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1920;
  unint64_t v1921;
  uint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  unint64_t v1926;
  uint64_t v1927;
  uint64_t v1929;
  unint64_t v1930;
  uint64_t v1931;
  unint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  unint64_t v1935;
  uint64_t v1936;
  _QWORD *v1938;
  unint64_t v1939;
  unint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  uint64_t v1949;
  unint64_t v1950;
  uint64_t v1951;
  unint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  unint64_t v1955;
  uint64_t v1956;
  uint64_t v1958;
  unint64_t v1959;
  uint64_t v1960;
  unint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  unint64_t v1964;
  uint64_t v1965;
  unint64_t v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  unint64_t v1972;
  unint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t v1976;
  unint64_t v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1982;
  unint64_t v1983;
  uint64_t v1984;
  unint64_t v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  uint64_t v1989;
  uint64_t v1991;
  unint64_t v1992;
  uint64_t v1993;
  unint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  unint64_t v1997;
  uint64_t v1998;
  unint64_t v2000;
  unint64_t v2001;
  unint64_t v2002;
  uint64_t v2003;
  unint64_t v2004;
  uint64_t v2005;
  _QWORD *v2006;
  uint64_t v2007;
  unint64_t v2008;
  uint64_t v2009;
  unint64_t v2010;
  unint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  unint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2020;
  unint64_t v2021;
  uint64_t v2022;
  unint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  unint64_t v2026;
  uint64_t v2027;
  uint64_t v2029;
  unint64_t v2030;
  uint64_t v2031;
  unint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  _QWORD *v2038;
  unint64_t v2039;
  unint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  unint64_t v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2049;
  unint64_t v2050;
  uint64_t v2051;
  unint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  unint64_t v2055;
  uint64_t v2056;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  unint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  unint64_t v2064;
  uint64_t v2065;
  unint64_t v2067;
  uint64_t v2068;
  unint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  unint64_t v2072;
  unint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  unint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2082;
  unint64_t v2083;
  uint64_t v2084;
  unint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  unint64_t v2088;
  uint64_t v2089;
  uint64_t v2091;
  unint64_t v2092;
  uint64_t v2093;
  unint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  unint64_t v2097;
  uint64_t v2098;
  unint64_t v2100;
  unint64_t v2101;
  unint64_t v2102;
  uint64_t v2103;
  unint64_t v2104;
  uint64_t v2105;
  _QWORD *v2106;
  uint64_t v2107;
  unint64_t v2108;
  uint64_t v2109;
  unint64_t v2110;
  unint64_t v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  unint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2120;
  unint64_t v2121;
  uint64_t v2122;
  unint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  unint64_t v2126;
  uint64_t v2127;
  uint64_t v2129;
  unint64_t v2130;
  uint64_t v2131;
  unint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  unint64_t v2135;
  uint64_t v2136;
  _QWORD *v2138;
  unint64_t v2139;
  unint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  unint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2149;
  unint64_t v2150;
  uint64_t v2151;
  unint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  unint64_t v2155;
  uint64_t v2156;
  uint64_t v2158;
  unint64_t v2159;
  uint64_t v2160;
  unint64_t v2161;
  uint64_t v2162;
  uint64_t v2163;
  unint64_t v2164;
  uint64_t v2165;
  unint64_t v2167;
  uint64_t v2168;
  unint64_t v2169;
  uint64_t v2170;
  uint64_t *v2171;
  unint64_t v2172;
  unint64_t v2173;
  uint64_t v2174;
  unint64_t v2175;
  uint64_t v2176;
  uint64_t v2177;
  unint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  unint64_t v2181;
  uint64_t v2182;
  uint64_t v2184;
  unint64_t v2185;
  uint64_t v2186;
  unint64_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  unint64_t v2190;
  uint64_t v2191;
  uint64_t v2193;
  uint64_t v2194;
  unint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  unint64_t v2200;
  uint64_t v2201;
  unint64_t v2202;
  uint64_t v2203;
  unint64_t v2204;
  uint64_t v2205;
  _QWORD *v2206;
  uint64_t v2207;
  unint64_t v2208;
  uint64_t v2209;
  uint64_t *v2210;
  unint64_t v2211;
  unint64_t v2212;
  uint64_t v2213;
  unint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  unint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  unint64_t v2220;
  uint64_t v2221;
  uint64_t v2223;
  unint64_t v2224;
  uint64_t v2225;
  unint64_t v2226;
  uint64_t v2227;
  uint64_t v2228;
  unint64_t v2229;
  uint64_t v2230;
  uint64_t v2232;
  uint64_t v2233;
  unint64_t v2234;
  uint64_t v2235;
  uint64_t v2236;
  uint64_t v2237;
  unint64_t v2239;
  uint64_t v2240;
  unint64_t v2241;
  uint64_t v2242;
  unint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  uint64_t v2246;
  unint64_t v2247;
  uint64_t v2248;
  _QWORD *v2249;
  unint64_t v2250;
  unint64_t v2251;
  uint64_t v2252;
  unint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  unint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  unint64_t v2259;
  uint64_t v2260;
  uint64_t v2262;
  unint64_t v2263;
  uint64_t v2264;
  unint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  unint64_t v2268;
  uint64_t v2269;
  uint64_t v2271;
  uint64_t v2272;
  unint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  unint64_t v2278;
  uint64_t v2279;
  unint64_t v2280;
  uint64_t v2281;
  unint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  unint64_t v2286;
  uint64_t v2287;
  uint64_t *v2288;
  unint64_t v2289;
  unint64_t v2290;
  uint64_t v2291;
  unint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  unint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  unint64_t v2298;
  uint64_t v2299;
  uint64_t v2301;
  unint64_t v2302;
  uint64_t v2303;
  unint64_t v2304;
  uint64_t v2305;
  uint64_t v2306;
  unint64_t v2307;
  uint64_t v2308;
  uint64_t v2310;
  unint64_t v2311;
  uint64_t v2312;
  unint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  unint64_t v2316;
  uint64_t v2317;
  unint64_t v2319;
  uint64_t v2320;
  unint64_t v2321;
  uint64_t v2322;
  unint64_t v2323;
  uint64_t v2324;
  uint64_t v2325;
  uint64_t v2326;
  unint64_t v2327;
  uint64_t v2328;
  _QWORD *v2329;
  uint64_t v2330;
  unint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  unint64_t v2334;
  unint64_t v2335;
  uint64_t v2336;
  unint64_t v2337;
  uint64_t v2338;
  uint64_t v2339;
  unint64_t v2340;
  uint64_t v2341;
  uint64_t v2342;
  unint64_t v2343;
  uint64_t v2344;
  uint64_t v2346;
  unint64_t v2347;
  uint64_t v2348;
  unint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  unint64_t v2352;
  uint64_t v2353;
  uint64_t v2355;
  uint64_t v2356;
  unint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  uint64_t v2360;
  uint64_t v2362;
  uint64_t v2363;
  unint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  unint64_t v2368;
  uint64_t v2369;
  unint64_t v2370;
  uint64_t v2371;
  unint64_t v2372;
  uint64_t v2373;
  uint64_t *v2374;
  uint64_t v2375;
  unint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  unint64_t v2379;
  unint64_t v2380;
  uint64_t v2381;
  unint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  unint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  unint64_t v2388;
  uint64_t v2389;
  uint64_t v2391;
  unint64_t v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  unint64_t v2397;
  uint64_t v2398;
  uint64_t v2400;
  uint64_t v2401;
  unint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  unint64_t v2413;
  uint64_t v2414;
  unint64_t v2415;
  uint64_t v2416;
  unint64_t v2417;
  uint64_t v2418;
  uint64_t *v2419;
  uint64_t v2420;
  unint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  unint64_t v2424;
  unint64_t v2425;
  uint64_t v2426;
  unint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  unint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  unint64_t v2433;
  uint64_t v2434;
  uint64_t v2436;
  unint64_t v2437;
  uint64_t v2438;
  unint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  unint64_t v2442;
  uint64_t v2443;
  uint64_t v2445;
  uint64_t v2446;
  unint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2452;
  uint64_t v2453;
  unint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  unint64_t v2458;
  uint64_t v2459;
  unint64_t v2460;
  uint64_t v2461;
  unint64_t v2462;
  uint64_t v2463;
  uint64_t *v2464;
  uint64_t v2465;
  unint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  unint64_t v2469;
  unint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  unint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2479;
  unint64_t v2480;
  uint64_t v2481;
  unint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  unint64_t v2485;
  uint64_t v2486;
  uint64_t v2488;
  uint64_t v2489;
  unint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2495;
  uint64_t v2496;
  unint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  unint64_t v2501;
  unint64_t v2502;
  uint64_t v2503;
  unint64_t v2504;
  uint64_t v2505;
  uint64_t *v2506;
  unint64_t v2507;
  unint64_t v2508;
  uint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  unint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2517;
  unint64_t v2518;
  uint64_t v2519;
  unint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  unint64_t v2523;
  uint64_t v2524;
  uint64_t v2526;
  uint64_t v2527;
  unint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2533;
  uint64_t v2534;
  unint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  unint64_t v2539;
  unint64_t v2540;
  uint64_t v2541;
  unint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  unint64_t v2545;
  unint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  unint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2555;
  unint64_t v2556;
  uint64_t v2557;
  unint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  unint64_t v2561;
  uint64_t v2562;
  uint64_t v2564;
  unint64_t v2565;
  uint64_t v2566;
  unint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  unint64_t v2570;
  uint64_t v2571;
  uint64_t v2573;
  uint64_t v2574;
  unint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  unint64_t v2579;
  uint64_t v2580;
  unint64_t v2581;
  uint64_t v2582;
  unint64_t v2583;
  uint64_t v2584;
  uint64_t *v2585;
  uint64_t v2586;
  unint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  unint64_t v2590;
  unint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  unint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2600;
  unint64_t v2601;
  uint64_t v2602;
  unint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  unint64_t v2606;
  uint64_t v2607;
  uint64_t v2609;
  unint64_t v2610;
  uint64_t v2611;
  unint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  unint64_t v2615;
  uint64_t v2616;
  uint64_t v2618;
  uint64_t v2619;
  unint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  unint64_t v2624;
  uint64_t v2625;
  unint64_t v2626;
  uint64_t v2627;
  unint64_t v2628;
  uint64_t v2629;
  uint64_t *v2630;
  uint64_t v2631;
  unint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  unint64_t v2635;
  unint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t v2639;
  unint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  uint64_t v2643;
  uint64_t v2645;
  unint64_t v2646;
  uint64_t v2647;
  unint64_t v2648;
  uint64_t v2649;
  uint64_t v2650;
  unint64_t v2651;
  uint64_t v2652;
  uint64_t v2654;
  uint64_t v2655;
  unint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2661;
  uint64_t v2662;
  unint64_t v2663;
  uint64_t v2664;
  uint64_t v2665;
  uint64_t v2666;
  unint64_t v2667;
  unint64_t v2668;
  uint64_t v2669;
  unint64_t v2670;
  uint64_t v2671;
  uint64_t *v2672;
  unint64_t v2673;
  unint64_t v2674;
  uint64_t v2675;
  uint64_t v2676;
  uint64_t v2677;
  unint64_t v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2683;
  unint64_t v2684;
  uint64_t v2685;
  unint64_t v2686;
  uint64_t v2687;
  uint64_t v2688;
  unint64_t v2689;
  uint64_t v2690;
  uint64_t v2692;
  uint64_t v2693;
  unint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2699;
  uint64_t v2700;
  unint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  unint64_t v2705;
  unint64_t v2706;
  uint64_t v2707;
  unint64_t v2708;
  uint64_t v2709;
  uint64_t v2710;
  unint64_t v2711;
  unint64_t v2712;
  uint64_t v2713;
  uint64_t v2714;
  uint64_t v2715;
  unint64_t v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2721;
  unint64_t v2722;
  uint64_t v2723;
  unint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  unint64_t v2727;
  uint64_t v2728;
  uint64_t v2730;
  unint64_t v2731;
  uint64_t v2732;
  unint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  unint64_t v2736;
  uint64_t v2737;
  uint64_t v2739;
  uint64_t v2740;
  unint64_t v2741;
  uint64_t v2742;
  uint64_t v2743;
  uint64_t v2744;
  unint64_t v2745;
  uint64_t v2746;
  unint64_t v2747;
  uint64_t v2748;
  unint64_t v2749;
  uint64_t v2750;
  uint64_t *v2751;
  uint64_t v2752;
  unint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  unint64_t v2756;
  unint64_t v2757;
  uint64_t v2758;
  uint64_t v2759;
  uint64_t v2760;
  unint64_t v2761;
  uint64_t v2762;
  uint64_t v2763;
  uint64_t v2764;
  uint64_t v2766;
  unint64_t v2767;
  uint64_t v2768;
  unint64_t v2769;
  uint64_t v2770;
  uint64_t v2771;
  unint64_t v2772;
  uint64_t v2773;
  uint64_t v2775;
  unint64_t v2776;
  uint64_t v2777;
  unint64_t v2778;
  uint64_t v2779;
  uint64_t v2780;
  unint64_t v2781;
  uint64_t v2782;
  uint64_t v2784;
  uint64_t v2785;
  unint64_t v2786;
  uint64_t v2787;
  uint64_t v2788;
  uint64_t v2789;
  unint64_t v2790;
  uint64_t v2791;
  unint64_t v2792;
  uint64_t v2793;
  unint64_t v2794;
  uint64_t v2795;
  uint64_t *v2796;
  uint64_t v2797;
  unint64_t v2798;
  uint64_t v2799;
  uint64_t v2800;
  unint64_t v2801;
  unint64_t v2802;
  uint64_t v2803;
  uint64_t v2804;
  uint64_t v2805;
  unint64_t v2806;
  uint64_t v2807;
  uint64_t v2808;
  uint64_t v2809;
  uint64_t v2811;
  unint64_t v2812;
  uint64_t v2813;
  unint64_t v2814;
  uint64_t v2815;
  uint64_t v2816;
  unint64_t v2817;
  uint64_t v2818;
  uint64_t v2820;
  uint64_t v2821;
  unint64_t v2822;
  uint64_t v2823;
  uint64_t v2824;
  uint64_t v2825;
  uint64_t v2827;
  uint64_t v2828;
  unint64_t v2829;
  uint64_t v2830;
  uint64_t v2831;
  uint64_t v2832;
  unint64_t v2833;
  unint64_t v2834;
  uint64_t v2835;
  unint64_t v2836;
  uint64_t v2837;
  uint64_t *v2838;
  unint64_t v2839;
  unint64_t v2840;
  uint64_t v2841;
  uint64_t v2842;
  uint64_t v2843;
  unint64_t v2844;
  uint64_t v2845;
  uint64_t v2846;
  uint64_t v2847;
  uint64_t v2849;
  unint64_t v2850;
  uint64_t v2851;
  unint64_t v2852;
  uint64_t v2853;
  uint64_t v2854;
  unint64_t v2855;
  uint64_t v2856;
  uint64_t v2858;
  uint64_t v2859;
  unint64_t v2860;
  uint64_t v2861;
  uint64_t v2862;
  uint64_t v2863;
  uint64_t v2865;
  uint64_t v2866;
  unint64_t v2867;
  uint64_t v2868;
  uint64_t v2869;
  uint64_t v2870;
  unint64_t v2871;
  unint64_t v2872;
  uint64_t v2873;
  unint64_t v2874;
  uint64_t v2875;
  uint64_t v2876;
  unint64_t v2877;
  unint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t v2881;
  unint64_t v2882;
  uint64_t v2883;
  uint64_t v2884;
  uint64_t v2885;
  uint64_t v2887;
  unint64_t v2888;
  uint64_t v2889;
  unint64_t v2890;
  uint64_t v2891;
  uint64_t v2892;
  unint64_t v2893;
  uint64_t v2894;
  uint64_t v2896;
  unint64_t v2897;
  uint64_t v2898;
  unint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  unint64_t v2902;
  uint64_t v2903;
  uint64_t v2905;
  uint64_t v2906;
  unint64_t v2907;
  uint64_t v2908;
  uint64_t v2909;
  uint64_t v2910;
  unint64_t v2911;
  uint64_t v2912;
  unint64_t v2913;
  uint64_t v2914;
  unint64_t v2915;
  uint64_t v2916;
  uint64_t *v2917;
  uint64_t v2918;
  unint64_t v2919;
  uint64_t v2920;
  uint64_t v2921;
  unint64_t v2922;
  unint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  uint64_t v2926;
  unint64_t v2927;
  uint64_t v2928;
  uint64_t v2929;
  uint64_t v2930;
  uint64_t v2932;
  unint64_t v2933;
  uint64_t v2934;
  unint64_t v2935;
  uint64_t v2936;
  uint64_t v2937;
  unint64_t v2938;
  uint64_t v2939;
  uint64_t v2941;
  unint64_t v2942;
  uint64_t v2943;
  unint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  unint64_t v2947;
  uint64_t v2948;
  uint64_t v2950;
  uint64_t v2951;
  unint64_t v2952;
  uint64_t v2953;
  uint64_t v2954;
  uint64_t v2955;
  unint64_t v2956;
  uint64_t v2957;
  unint64_t v2958;
  uint64_t v2959;
  unint64_t v2960;
  uint64_t v2961;
  uint64_t *v2962;
  uint64_t v2963;
  unint64_t v2964;
  uint64_t v2965;
  uint64_t v2966;
  _QWORD *v2967;
  _QWORD *v2968;
  uint64_t v2969;
  _QWORD *v2970;
  uint64_t v2971;
  uint64_t v2972;
  uint64_t v2973;
  uint64_t v2974;
  uint64_t v2975;
  _QWORD *v2976;
  uint64_t v2977;
  uint64_t v2978;
  const ggl::Texture *v2979;
  const ggl::Texture *v2980;
  float64_t v2981;
  uint64_t v2983;
  const ggl::Texture *v2984;
  uint64_t v2985;
  md::ARMeshRenderLayer *v2986;
  unint64_t *v2987;
  unint64_t *v2988;
  unint64_t v2989;
  _BYTE v2990[32];
  _OWORD v2991[8];
  double v2992[16];
  uint64_t v2993;
  __int128 v2994;
  __int128 v2995;
  __int128 v2996;
  __int128 v2997;
  __int128 v2998;
  __int128 v2999;
  __int128 v3000;
  uint64_t v3001;
  float64x2_t v3002;
  float64x2_t v3003;
  float64x2_t v3004;
  float64x2_t v3005;
  float64x2_t v3006;
  float64x2_t v3007;
  float64x2_t v3008;
  float64x2_t v3009;

  ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[54]);
  v2986 = (md::ARMeshRenderLayer *)this;
  v3 = this[9];
  v4 = (uint64_t *)v3[4];
  v5 = (uint64_t *)v3[5];
  if (v4 == v5)
    goto LABEL_33;
  v6 = (_QWORD *)v3[1];
  do
  {
    v7 = *v4;
    v8 = v3[2];
    if ((unint64_t)v6 < v8)
    {
      if (v6)
        *v6 = v7;
      ++v6;
      goto LABEL_4;
    }
    v9 = ((uint64_t)v6 - *v3) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
LABEL_3103:
      abort();
    v10 = v8 - *v3;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = 8 * v12;
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 16))(v3[3], 8 * v12, 8);
      v15 = (_QWORD *)(v14 + 8 * v9);
      v12 = v14 + v13;
      if (v14)
        *v15 = v7;
    }
    else
    {
      v15 = (_QWORD *)(8 * v9);
    }
    v17 = *v3;
    v16 = v3[1];
    v18 = v16 - *v3;
    if (v16 == *v3)
    {
      v20 = v15;
      goto LABEL_29;
    }
    v19 = v18 - 8;
    if ((unint64_t)(v18 - 8) < 0x38)
    {
      v20 = v15;
    }
    else
    {
      v20 = v15;
      if ((unint64_t)(v16 - (_QWORD)v15) >= 0x20)
      {
        v21 = (v19 >> 3) + 1;
        v22 = v15 - 2;
        v23 = (__int128 *)(v16 - 16);
        v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 4;
        }
        while (v24);
        v20 = &v15[-(v21 & 0x3FFFFFFFFFFFFFFCLL)];
        v16 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v26 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *--v20 = v26;
    }
    while (v16 != v17);
LABEL_28:
    v16 = *v3;
LABEL_29:
    v6 = v15 + 1;
    *v3 = (uint64_t)v20;
    v3[1] = (uint64_t)(v15 + 1);
    v27 = v3[2];
    v3[2] = v12;
    if (v16)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 40))(v3[3], v16, v27 - v16);
LABEL_4:
    v3[1] = (uint64_t)v6;
    ++v4;
  }
  while (v4 != v5);
  v28 = v3[4];
  if (v28 != v3[5])
    v3[5] = v28;
LABEL_33:
  v29 = (uint64_t *)*((_QWORD *)v2986 + 10);
  v30 = (uint64_t *)v29[4];
  v31 = (uint64_t *)v29[5];
  if (v30 == v31)
    goto LABEL_65;
  v32 = (_QWORD *)v29[1];
  while (2)
  {
    v33 = *v30;
    v34 = v29[2];
    if ((unint64_t)v32 < v34)
    {
      if (v32)
        *v32 = v33;
      ++v32;
      goto LABEL_36;
    }
    v35 = ((uint64_t)v32 - *v29) >> 3;
    if ((unint64_t)(v35 + 1) >> 61)
      goto LABEL_3103;
    v36 = v34 - *v29;
    v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    if (v38)
    {
      v39 = 8 * v38;
      v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[3] + 16))(v29[3], 8 * v38, 8);
      v41 = (_QWORD *)(v40 + 8 * v35);
      v38 = v40 + v39;
      if (v40)
        *v41 = v33;
    }
    else
    {
      v41 = (_QWORD *)(8 * v35);
    }
    v43 = *v29;
    v42 = v29[1];
    v44 = v42 - *v29;
    if (v42 == *v29)
    {
      v46 = v41;
      goto LABEL_61;
    }
    v45 = v44 - 8;
    if ((unint64_t)(v44 - 8) < 0x38)
    {
      v46 = v41;
      do
      {
LABEL_59:
        v52 = *(_QWORD *)(v42 - 8);
        v42 -= 8;
        *--v46 = v52;
      }
      while (v42 != v43);
      goto LABEL_60;
    }
    v46 = v41;
    if ((unint64_t)(v42 - (_QWORD)v41) < 0x20)
      goto LABEL_59;
    v47 = (v45 >> 3) + 1;
    v48 = v41 - 2;
    v49 = (__int128 *)(v42 - 16);
    v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *v49;
      *(v48 - 1) = *(v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 2;
      v50 -= 4;
    }
    while (v50);
    v46 = &v41[-(v47 & 0x3FFFFFFFFFFFFFFCLL)];
    v42 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v42 = *v29;
LABEL_61:
    v32 = v41 + 1;
    *v29 = (uint64_t)v46;
    v29[1] = (uint64_t)(v41 + 1);
    v53 = v29[2];
    v29[2] = v38;
    if (v42)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[3] + 40))(v29[3], v42, v53 - v42);
LABEL_36:
    v29[1] = (uint64_t)v32;
    if (++v30 != v31)
      continue;
    break;
  }
  v54 = v29[4];
  if (v54 != v29[5])
    v29[5] = v54;
LABEL_65:
  v55 = (uint64_t *)*((_QWORD *)v2986 + 8);
  v56 = (uint64_t *)v55[4];
  v57 = (uint64_t *)v55[5];
  if (v56 != v57)
  {
    v58 = (_QWORD *)v55[1];
    while (1)
    {
      v59 = *v56;
      v60 = v55[2];
      if ((unint64_t)v58 >= v60)
        break;
      if (v58)
        *v58 = v59;
      ++v58;
LABEL_68:
      v55[1] = (uint64_t)v58;
      if (++v56 == v57)
      {
        v80 = v55[4];
        if (v80 != v55[5])
          v55[5] = v80;
        goto LABEL_97;
      }
    }
    v61 = ((uint64_t)v58 - *v55) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      goto LABEL_3103;
    v62 = v60 - *v55;
    v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1))
      v63 = v61 + 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
    {
      v65 = 8 * v64;
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[3] + 16))(v55[3], 8 * v64, 8);
      v67 = (_QWORD *)(v66 + 8 * v61);
      v64 = v66 + v65;
      if (v66)
        *v67 = v59;
    }
    else
    {
      v67 = (_QWORD *)(8 * v61);
    }
    v69 = *v55;
    v68 = v55[1];
    v70 = v68 - *v55;
    if (v68 != *v55)
    {
      v71 = v70 - 8;
      if ((unint64_t)(v70 - 8) < 0x38)
      {
        v72 = v67;
      }
      else
      {
        v72 = v67;
        if ((unint64_t)(v68 - (_QWORD)v67) >= 0x20)
        {
          v73 = (v71 >> 3) + 1;
          v74 = v67 - 2;
          v75 = (__int128 *)(v68 - 16);
          v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *v75;
            *(v74 - 1) = *(v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 2;
            v76 -= 4;
          }
          while (v76);
          v72 = &v67[-(v73 & 0x3FFFFFFFFFFFFFFCLL)];
          v68 -= 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
          if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_92:
            v68 = *v55;
LABEL_93:
            v58 = v67 + 1;
            *v55 = (uint64_t)v72;
            v55[1] = (uint64_t)(v67 + 1);
            v79 = v55[2];
            v55[2] = v64;
            if (v68)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[3] + 40))(v55[3], v68, v79 - v68);
            goto LABEL_68;
          }
        }
      }
      do
      {
        v78 = *(_QWORD *)(v68 - 8);
        v68 -= 8;
        *--v72 = v78;
      }
      while (v68 != v69);
      goto LABEL_92;
    }
    v72 = v67;
    goto LABEL_93;
  }
LABEL_97:
  v2981 = *(double *)(*((_QWORD *)v2986 + 5) + 24);
  v81 = *(_QWORD **)(*(_QWORD *)&v2981 + 8);
  v82 = v81[3];
  v83 = v81[4];
  v84 = v83 - v82;
  if (v83 == v82)
    goto LABEL_104;
  v85 = 0;
  v86 = v84 >> 3;
  while (1)
  {
    v87 = *(_QWORD *)(v82 + 8 * v85);
    if (!*(_BYTE *)v87)
    {
      v88 = *(_QWORD *)(v87 + 8);
      v89 = v81[15];
      if (v88 < (v81[16] - v89) >> 3)
        break;
    }
    if (++v85 >= v86)
      goto LABEL_104;
  }
  v90 = *(_QWORD *)(v89 + 8 * v88);
  if (!v90)
LABEL_104:
    v2969 = 0;
  else
    v2969 = *(_QWORD *)(*(_QWORD *)(v90 + 24) + 56);
  v2987 = (unint64_t *)v2990;
  v2988 = (unint64_t *)v2990;
  v2989 = 4;
  v91 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*((_QWORD *)v2986 + 55));
  v92 = *(unint64_t **)(v91 + 56);
  v93 = *(unint64_t **)(v91 + 64);
  v94 = (unint64_t *)v2990;
  if (v92 != v93)
  {
    while (2)
    {
      v95 = *v92;
      v96 = v94 - v2987;
      if (v2989 < v96 + 1)
      {
        v97 = (1 << -(char)__clz(v2989 + 1));
        if (v2989 >= 0xFFFFFFFFFFFFFFFELL)
          v98 = 1;
        else
          v98 = v97;
        if (v98 <= v96 + 1)
          v99 = v96 + 1;
        else
          v99 = v98;
        v100 = (char *)malloc_type_malloc(8 * v99, 0x100004000313F17uLL);
        v101 = (unint64_t *)v100;
        v102 = v2987;
        if (v2987 != v2988)
        {
          v103 = (char *)v2988 - (char *)v2987 - 8;
          if (v103 < 0x18)
          {
            v104 = v100;
            goto LABEL_124;
          }
          v104 = v100;
          if ((unint64_t)(v100 - (char *)v2987) < 0x20)
          {
            do
            {
LABEL_124:
              v111 = *v102++;
              *(_QWORD *)v104 = v111;
              v104 += 8;
            }
            while (v102 != v2988);
          }
          else
          {
            v105 = (v103 >> 3) + 1;
            v106 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            v104 = &v100[v106 * 8];
            v107 = (__int128 *)(v2987 + 2);
            v108 = v100 + 16;
            v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v110 = *v107;
              *(v108 - 1) = *(v107 - 1);
              *v108 = v110;
              v107 += 2;
              v108 += 2;
              v109 -= 4;
            }
            while (v109);
            if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v102 = &v2987[v106];
              goto LABEL_124;
            }
          }
        }
        if (v2987 != (unint64_t *)v2990)
          free(v2987);
        v94 = &v101[v96];
        v2987 = v101;
        v2988 = v94;
        v2989 = v99;
      }
      *v94 = v95;
      v94 = ++v2988;
      if (++v92 == v93)
        break;
      continue;
    }
  }
  v112 = v2987;
  v113 = *((_QWORD *)v2986 + 55);
  if (v2987 != v94)
  {
    do
    {
      v114 = *v112++;
      gdc::Registry::destroy(v113, v114);
    }
    while (v112 != v94);
    v113 = *((_QWORD *)v2986 + 55);
  }
  v115 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v113);
  v116 = (_QWORD *)gdc::Registry::storage<arComponents::MeshComponent>(v113);
  v117 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v113);
  v118 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v113);
  v119 = gdc::Registry::storage<arComponents::StandardPipeline>(v113);
  v120 = (_QWORD *)v119;
  v122 = v115[7];
  v121 = v115[8];
  if (v116[8] - v116[7] >= (unint64_t)(v121 - v122))
    v123 = v115 + 4;
  else
    v123 = v116 + 4;
  if (v117[8] - v117[7] < v123[4] - v123[3])
    v123 = v117 + 4;
  v2972 = v119 + 32;
  if (v118[8] - v118[7] < v123[4] - v123[3])
    v123 = v118 + 4;
  if (*(_QWORD *)(v119 + 64) - *(_QWORD *)(v119 + 56) >= v123[4] - v123[3])
    v124 = v123;
  else
    v124 = (_QWORD *)(v119 + 32);
  if (v115 + 4 == v124 && v122 != v121)
  {
    do
    {
      v2334 = *(unsigned int *)(v122 + 4);
      v2335 = v2334 >> 7;
      v2336 = v116[4];
      v2337 = (v116[5] - v2336) >> 3;
      if (v2334 >> 7 < v2337)
      {
        v2338 = *(_QWORD *)(v2336 + 8 * v2335);
        if (v2338)
        {
          v2339 = v2334 & 0x7F;
          v2340 = *(unsigned __int16 *)(v2338 + 2 * v2339);
          v2342 = v116[7];
          v2341 = v116[8];
          v2343 = (v2341 - v2342) >> 3;
          if (v2343 > v2340)
          {
            v2344 = v2342 + 8 * v2340;
            if (v2344 != v2341 && *(_DWORD *)(v2344 + 4) == (_DWORD)v2334)
            {
              v2346 = v117[4];
              v2347 = (v117[5] - v2346) >> 3;
              if (v2335 < v2347)
              {
                v2348 = *(_QWORD *)(v2346 + 8 * v2335);
                if (v2348)
                {
                  v2349 = *(unsigned __int16 *)(v2348 + 2 * v2339);
                  v2351 = v117[7];
                  v2350 = v117[8];
                  v2352 = (v2350 - v2351) >> 3;
                  if (v2352 > v2349)
                  {
                    v2353 = v2351 + 8 * v2349;
                    if (v2353 != v2350 && *(_DWORD *)(v2353 + 4) == (_DWORD)v2334)
                    {
                      v2355 = v118[4];
                      if (v2335 < (v118[5] - v2355) >> 3)
                      {
                        v2356 = *(_QWORD *)(v2355 + 8 * v2335);
                        if (v2356)
                        {
                          v2357 = *(unsigned __int16 *)(v2356 + 2 * v2339);
                          v2359 = v118[7];
                          v2358 = v118[8];
                          if (v2357 < (v2358 - v2359) >> 3)
                          {
                            v2360 = v2359 + 8 * v2357;
                            if (v2360 != v2358 && *(_DWORD *)(v2360 + 4) == (_DWORD)v2334)
                            {
                              v2362 = v120[4];
                              if (v2335 < (v120[5] - v2362) >> 3)
                              {
                                v2363 = *(_QWORD *)(v2362 + 8 * v2335);
                                if (v2363)
                                {
                                  v2364 = *(unsigned __int16 *)(v2363 + 2 * v2339);
                                  v2366 = v120[7];
                                  v2365 = v120[8];
                                  if (v2364 < (v2365 - v2366) >> 3)
                                  {
                                    v2367 = v2366 + 8 * v2364;
                                    if (v2367 != v2365 && *(_DWORD *)(v2367 + 4) == (_DWORD)v2334)
                                    {
                                      v2368 = *(_QWORD *)v122;
                                      v2369 = HIDWORD(*(_QWORD *)v122);
                                      v2370 = *(_QWORD *)v122 >> 39;
                                      if (v2370 < v2337
                                        && (v2371 = *(_QWORD *)(v2336 + 8 * v2370)) != 0
                                        && (v2372 = *(unsigned __int16 *)(v2371 + 2 * (HIDWORD(v2368) & 0x7F)),
                                            v2343 > v2372)
                                        && (v2373 = v2342 + 8 * v2372, v2373 != v2341)
                                        && *(_DWORD *)(v2373 + 4) == (_DWORD)v2369)
                                      {
                                        v2374 = (uint64_t *)(v116[10] + 16 * v2372);
                                      }
                                      else
                                      {
                                        v2374 = (uint64_t *)v116[11];
                                      }
                                      if (v2370 < v2347
                                        && (v2375 = *(_QWORD *)(v2346 + 8 * v2370)) != 0
                                        && (v2376 = *(unsigned __int16 *)(v2375 + 2 * (HIDWORD(v2368) & 0x7F)),
                                            v2352 > v2376)
                                        && (v2377 = v2351 + 8 * v2376, v2377 != v2350)
                                        && *(_DWORD *)(v2377 + 4) == (_DWORD)v2369)
                                      {
                                        v2333 = v117[10] + 24 * v2376;
                                      }
                                      else
                                      {
                                        v2333 = v117[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2368, v2374, v2333);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v122 += 8;
    }
    while (v122 != v121);
  }
  if (v116 + 4 == v124)
  {
    v262 = v116[7];
    v263 = v116[8];
    if (v262 != v263)
    {
      v264 = (uint64_t *)v116[10];
      do
      {
        v2469 = *(unsigned int *)(v262 + 4);
        v2470 = v2469 >> 7;
        v2471 = v115[4];
        if (v2469 >> 7 < (v115[5] - v2471) >> 3)
        {
          v2472 = *(_QWORD *)(v2471 + 8 * v2470);
          if (v2472)
          {
            v2473 = v2469 & 0x7F;
            v2474 = *(unsigned __int16 *)(v2472 + 2 * v2473);
            v2476 = v115[7];
            v2475 = v115[8];
            if (v2474 < (v2475 - v2476) >> 3)
            {
              v2477 = v2476 + 8 * v2474;
              if (v2477 != v2475 && *(_DWORD *)(v2477 + 4) == (_DWORD)v2469)
              {
                v2479 = v117[4];
                v2480 = (v117[5] - v2479) >> 3;
                if (v2470 < v2480)
                {
                  v2481 = *(_QWORD *)(v2479 + 8 * v2470);
                  if (v2481)
                  {
                    v2482 = *(unsigned __int16 *)(v2481 + 2 * v2473);
                    v2484 = v117[7];
                    v2483 = v117[8];
                    v2485 = (v2483 - v2484) >> 3;
                    if (v2485 > v2482)
                    {
                      v2486 = v2484 + 8 * v2482;
                      if (v2486 != v2483 && *(_DWORD *)(v2486 + 4) == (_DWORD)v2469)
                      {
                        v2488 = v118[4];
                        if (v2470 < (v118[5] - v2488) >> 3)
                        {
                          v2489 = *(_QWORD *)(v2488 + 8 * v2470);
                          if (v2489)
                          {
                            v2490 = *(unsigned __int16 *)(v2489 + 2 * v2473);
                            v2491 = v118[7];
                            v2492 = v118[8];
                            if (v2490 < (v2492 - v2491) >> 3)
                            {
                              v2493 = v2491 + 8 * v2490;
                              if (v2493 != v2492 && *(_DWORD *)(v2493 + 4) == (_DWORD)v2469)
                              {
                                v2495 = v120[4];
                                if (v2470 < (v120[5] - v2495) >> 3)
                                {
                                  v2496 = *(_QWORD *)(v2495 + 8 * v2470);
                                  if (v2496)
                                  {
                                    v2497 = *(unsigned __int16 *)(v2496 + 2 * v2473);
                                    v2499 = v120[7];
                                    v2498 = v120[8];
                                    if (v2497 < (v2498 - v2499) >> 3)
                                    {
                                      v2500 = v2499 + 8 * v2497;
                                      if (v2500 != v2498 && *(_DWORD *)(v2500 + 4) == (_DWORD)v2469)
                                      {
                                        v2501 = *(_QWORD *)v262;
                                        v2502 = *(_QWORD *)v262 >> 39;
                                        if (v2502 < v2480
                                          && (v2503 = *(_QWORD *)(v2479 + 8 * v2502)) != 0
                                          && (v2504 = *(unsigned __int16 *)(v2503 + 2 * (HIDWORD(v2501) & 0x7F)),
                                              v2485 > v2504)
                                          && (v2505 = v2484 + 8 * v2504, v2505 != v2483)
                                          && *(_DWORD *)(v2505 + 4) == HIDWORD(v2501))
                                        {
                                          v2468 = v117[10] + 24 * v2504;
                                        }
                                        else
                                        {
                                          v2468 = v117[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2501, v264, v2468);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v264 += 2;
        v262 += 8;
      }
      while (v262 != v263);
    }
  }
  if (v117 + 4 == v124)
  {
    v265 = v117[7];
    v266 = v117[8];
    if (v265 != v266)
    {
      v267 = v117[10];
      do
      {
        v2507 = *(unsigned int *)(v265 + 4);
        v2508 = v2507 >> 7;
        v2509 = v115[4];
        if (v2507 >> 7 < (v115[5] - v2509) >> 3)
        {
          v2510 = *(_QWORD *)(v2509 + 8 * v2508);
          if (v2510)
          {
            v2511 = v2507 & 0x7F;
            v2512 = *(unsigned __int16 *)(v2510 + 2 * v2511);
            v2514 = v115[7];
            v2513 = v115[8];
            if (v2512 < (v2513 - v2514) >> 3)
            {
              v2515 = v2514 + 8 * v2512;
              if (v2515 != v2513 && *(_DWORD *)(v2515 + 4) == (_DWORD)v2507)
              {
                v2517 = v116[4];
                v2518 = (v116[5] - v2517) >> 3;
                if (v2508 < v2518)
                {
                  v2519 = *(_QWORD *)(v2517 + 8 * v2508);
                  if (v2519)
                  {
                    v2520 = *(unsigned __int16 *)(v2519 + 2 * v2511);
                    v2522 = v116[7];
                    v2521 = v116[8];
                    v2523 = (v2521 - v2522) >> 3;
                    if (v2523 > v2520)
                    {
                      v2524 = v2522 + 8 * v2520;
                      if (v2524 != v2521 && *(_DWORD *)(v2524 + 4) == (_DWORD)v2507)
                      {
                        v2526 = v118[4];
                        if (v2508 < (v118[5] - v2526) >> 3)
                        {
                          v2527 = *(_QWORD *)(v2526 + 8 * v2508);
                          if (v2527)
                          {
                            v2528 = *(unsigned __int16 *)(v2527 + 2 * v2511);
                            v2529 = v118[7];
                            v2530 = v118[8];
                            if (v2528 < (v2530 - v2529) >> 3)
                            {
                              v2531 = v2529 + 8 * v2528;
                              if (v2531 != v2530 && *(_DWORD *)(v2531 + 4) == (_DWORD)v2507)
                              {
                                v2533 = v120[4];
                                if (v2508 < (v120[5] - v2533) >> 3)
                                {
                                  v2534 = *(_QWORD *)(v2533 + 8 * v2508);
                                  if (v2534)
                                  {
                                    v2535 = *(unsigned __int16 *)(v2534 + 2 * v2511);
                                    v2537 = v120[7];
                                    v2536 = v120[8];
                                    if (v2535 < (v2536 - v2537) >> 3)
                                    {
                                      v2538 = v2537 + 8 * v2535;
                                      if (v2538 != v2536 && *(_DWORD *)(v2538 + 4) == (_DWORD)v2507)
                                      {
                                        v2539 = *(_QWORD *)v265;
                                        v2540 = *(_QWORD *)v265 >> 39;
                                        if (v2540 < v2518
                                          && (v2541 = *(_QWORD *)(v2517 + 8 * v2540)) != 0
                                          && (v2542 = *(unsigned __int16 *)(v2541 + 2 * (HIDWORD(v2539) & 0x7F)),
                                              v2523 > v2542)
                                          && (v2543 = v2522 + 8 * v2542, v2543 != v2521)
                                          && *(_DWORD *)(v2543 + 4) == HIDWORD(v2539))
                                        {
                                          v2506 = (uint64_t *)(v116[10] + 16 * v2542);
                                        }
                                        else
                                        {
                                          v2506 = (uint64_t *)v116[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2539, v2506, v267);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v267 += 24;
        v265 += 8;
      }
      while (v265 != v266);
    }
  }
  if (v118 + 4 == v124)
  {
    v268 = v118[7];
    for (i = v118[8]; v268 != i; v268 += 8)
    {
      v2545 = *(unsigned int *)(v268 + 4);
      v2546 = v2545 >> 7;
      v2547 = v115[4];
      if (v2545 >> 7 < (v115[5] - v2547) >> 3)
      {
        v2548 = *(_QWORD *)(v2547 + 8 * v2546);
        if (v2548)
        {
          v2549 = v2545 & 0x7F;
          v2550 = *(unsigned __int16 *)(v2548 + 2 * v2549);
          v2552 = v115[7];
          v2551 = v115[8];
          if (v2550 < (v2551 - v2552) >> 3)
          {
            v2553 = v2552 + 8 * v2550;
            if (v2553 != v2551 && *(_DWORD *)(v2553 + 4) == (_DWORD)v2545)
            {
              v2555 = v116[4];
              v2556 = (v116[5] - v2555) >> 3;
              if (v2546 < v2556)
              {
                v2557 = *(_QWORD *)(v2555 + 8 * v2546);
                if (v2557)
                {
                  v2558 = *(unsigned __int16 *)(v2557 + 2 * v2549);
                  v2560 = v116[7];
                  v2559 = v116[8];
                  v2561 = (v2559 - v2560) >> 3;
                  if (v2561 > v2558)
                  {
                    v2562 = v2560 + 8 * v2558;
                    if (v2562 != v2559 && *(_DWORD *)(v2562 + 4) == (_DWORD)v2545)
                    {
                      v2564 = v117[4];
                      v2565 = (v117[5] - v2564) >> 3;
                      if (v2546 < v2565)
                      {
                        v2566 = *(_QWORD *)(v2564 + 8 * v2546);
                        if (v2566)
                        {
                          v2567 = *(unsigned __int16 *)(v2566 + 2 * v2549);
                          v2569 = v117[7];
                          v2568 = v117[8];
                          v2570 = (v2568 - v2569) >> 3;
                          if (v2570 > v2567)
                          {
                            v2571 = v2569 + 8 * v2567;
                            if (v2571 != v2568 && *(_DWORD *)(v2571 + 4) == (_DWORD)v2545)
                            {
                              v2573 = v120[4];
                              if (v2546 < (v120[5] - v2573) >> 3)
                              {
                                v2574 = *(_QWORD *)(v2573 + 8 * v2546);
                                if (v2574)
                                {
                                  v2575 = *(unsigned __int16 *)(v2574 + 2 * v2549);
                                  v2577 = v120[7];
                                  v2576 = v120[8];
                                  if (v2575 < (v2576 - v2577) >> 3)
                                  {
                                    v2578 = v2577 + 8 * v2575;
                                    if (v2578 != v2576 && *(_DWORD *)(v2578 + 4) == (_DWORD)v2545)
                                    {
                                      v2579 = *(_QWORD *)v268;
                                      v2580 = HIDWORD(*(_QWORD *)v268);
                                      v2581 = *(_QWORD *)v268 >> 39;
                                      if (v2581 < v2556
                                        && (v2582 = *(_QWORD *)(v2555 + 8 * v2581)) != 0
                                        && (v2583 = *(unsigned __int16 *)(v2582 + 2 * (HIDWORD(v2579) & 0x7F)),
                                            v2561 > v2583)
                                        && (v2584 = v2560 + 8 * v2583, v2584 != v2559)
                                        && *(_DWORD *)(v2584 + 4) == (_DWORD)v2580)
                                      {
                                        v2585 = (uint64_t *)(v116[10] + 16 * v2583);
                                      }
                                      else
                                      {
                                        v2585 = (uint64_t *)v116[11];
                                      }
                                      if (v2581 < v2565
                                        && (v2586 = *(_QWORD *)(v2564 + 8 * v2581)) != 0
                                        && (v2587 = *(unsigned __int16 *)(v2586 + 2 * (HIDWORD(v2579) & 0x7F)),
                                            v2570 > v2587)
                                        && (v2588 = v2569 + 8 * v2587, v2588 != v2568)
                                        && *(_DWORD *)(v2588 + 4) == (_DWORD)v2580)
                                      {
                                        v2544 = v117[10] + 24 * v2587;
                                      }
                                      else
                                      {
                                        v2544 = v117[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2579, v2585, v2544);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_QWORD *)v2972 == v124)
  {
    v270 = v120[7];
    for (j = v120[8]; v270 != j; v270 += 8)
    {
      v2590 = *(unsigned int *)(v270 + 4);
      v2591 = v2590 >> 7;
      v2592 = v115[4];
      if (v2590 >> 7 < (v115[5] - v2592) >> 3)
      {
        v2593 = *(_QWORD *)(v2592 + 8 * v2591);
        if (v2593)
        {
          v2594 = v2590 & 0x7F;
          v2595 = *(unsigned __int16 *)(v2593 + 2 * v2594);
          v2597 = v115[7];
          v2596 = v115[8];
          if (v2595 < (v2596 - v2597) >> 3)
          {
            v2598 = v2597 + 8 * v2595;
            if (v2598 != v2596 && *(_DWORD *)(v2598 + 4) == (_DWORD)v2590)
            {
              v2600 = v116[4];
              v2601 = (v116[5] - v2600) >> 3;
              if (v2591 < v2601)
              {
                v2602 = *(_QWORD *)(v2600 + 8 * v2591);
                if (v2602)
                {
                  v2603 = *(unsigned __int16 *)(v2602 + 2 * v2594);
                  v2605 = v116[7];
                  v2604 = v116[8];
                  v2606 = (v2604 - v2605) >> 3;
                  if (v2606 > v2603)
                  {
                    v2607 = v2605 + 8 * v2603;
                    if (v2607 != v2604 && *(_DWORD *)(v2607 + 4) == (_DWORD)v2590)
                    {
                      v2609 = v117[4];
                      v2610 = (v117[5] - v2609) >> 3;
                      if (v2591 < v2610)
                      {
                        v2611 = *(_QWORD *)(v2609 + 8 * v2591);
                        if (v2611)
                        {
                          v2612 = *(unsigned __int16 *)(v2611 + 2 * v2594);
                          v2614 = v117[7];
                          v2613 = v117[8];
                          v2615 = (v2613 - v2614) >> 3;
                          if (v2615 > v2612)
                          {
                            v2616 = v2614 + 8 * v2612;
                            if (v2616 != v2613 && *(_DWORD *)(v2616 + 4) == (_DWORD)v2590)
                            {
                              v2618 = v118[4];
                              if (v2591 < (v118[5] - v2618) >> 3)
                              {
                                v2619 = *(_QWORD *)(v2618 + 8 * v2591);
                                if (v2619)
                                {
                                  v2620 = *(unsigned __int16 *)(v2619 + 2 * v2594);
                                  v2622 = v118[7];
                                  v2621 = v118[8];
                                  if (v2620 < (v2621 - v2622) >> 3)
                                  {
                                    v2623 = v2622 + 8 * v2620;
                                    if (v2623 != v2621 && *(_DWORD *)(v2623 + 4) == (_DWORD)v2590)
                                    {
                                      v2624 = *(_QWORD *)v270;
                                      v2625 = HIDWORD(*(_QWORD *)v270);
                                      v2626 = *(_QWORD *)v270 >> 39;
                                      if (v2626 < v2601
                                        && (v2627 = *(_QWORD *)(v2600 + 8 * v2626)) != 0
                                        && (v2628 = *(unsigned __int16 *)(v2627 + 2 * (HIDWORD(v2624) & 0x7F)),
                                            v2606 > v2628)
                                        && (v2629 = v2605 + 8 * v2628, v2629 != v2604)
                                        && *(_DWORD *)(v2629 + 4) == (_DWORD)v2625)
                                      {
                                        v2630 = (uint64_t *)(v116[10] + 16 * v2628);
                                      }
                                      else
                                      {
                                        v2630 = (uint64_t *)v116[11];
                                      }
                                      if (v2626 < v2610
                                        && (v2631 = *(_QWORD *)(v2609 + 8 * v2626)) != 0
                                        && (v2632 = *(unsigned __int16 *)(v2631 + 2 * (HIDWORD(v2624) & 0x7F)),
                                            v2615 > v2632)
                                        && (v2633 = v2614 + 8 * v2632, v2633 != v2613)
                                        && *(_DWORD *)(v2633 + 4) == (_DWORD)v2625)
                                      {
                                        v2589 = v117[10] + 24 * v2632;
                                      }
                                      else
                                      {
                                        v2589 = v117[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2624, v2630, v2589);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v126 = *((_QWORD *)v2986 + 55);
  v127 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v126);
  v128 = (_QWORD *)gdc::Registry::storage<arComponents::MeshDataComponent>(v126);
  v129 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v126);
  v130 = gdc::Registry::storage<arComponents::StandardPipeline>(v126);
  v131 = (_QWORD *)v130;
  v132 = v130 + 32;
  v134 = v127[7];
  v133 = v127[8];
  if (v128[8] - v128[7] >= (unint64_t)(v133 - v134))
    v135 = v127 + 4;
  else
    v135 = v128 + 4;
  if (v129[8] - v129[7] < v135[4] - v135[3])
    v135 = v129 + 4;
  if (*(_QWORD *)(v130 + 64) - *(_QWORD *)(v130 + 56) >= v135[4] - v135[3])
    v136 = v135;
  else
    v136 = (_QWORD *)(v130 + 32);
  if (v127 + 4 == v136 && v134 != v133)
  {
    do
    {
      v1480 = *(unsigned int *)(v134 + 4);
      v1481 = v1480 >> 7;
      v1482 = v128[4];
      v1483 = (v128[5] - v1482) >> 3;
      if (v1480 >> 7 < v1483)
      {
        v1484 = *(_QWORD *)(v1482 + 8 * v1481);
        if (v1484)
        {
          v1485 = v1480 & 0x7F;
          v1486 = *(unsigned __int16 *)(v1484 + 2 * v1485);
          v1488 = v128[7];
          v1487 = v128[8];
          v1489 = (v1487 - v1488) >> 3;
          if (v1489 > v1486)
          {
            v1490 = v1488 + 8 * v1486;
            if (v1490 != v1487 && *(_DWORD *)(v1490 + 4) == (_DWORD)v1480)
            {
              v1492 = v129[4];
              if (v1481 < (v129[5] - v1492) >> 3)
              {
                v1493 = *(_QWORD *)(v1492 + 8 * v1481);
                if (v1493)
                {
                  v1494 = *(unsigned __int16 *)(v1493 + 2 * v1485);
                  v1495 = v129[7];
                  v1496 = v129[8];
                  if (v1494 < (v1496 - v1495) >> 3)
                  {
                    v1497 = v1495 + 8 * v1494;
                    if (v1497 != v1496 && *(_DWORD *)(v1497 + 4) == (_DWORD)v1480)
                    {
                      v1499 = v131[4];
                      if (v1481 < (v131[5] - v1499) >> 3)
                      {
                        v1500 = *(_QWORD *)(v1499 + 8 * v1481);
                        if (v1500)
                        {
                          v1501 = *(unsigned __int16 *)(v1500 + 2 * v1485);
                          v1503 = v131[7];
                          v1502 = v131[8];
                          if (v1501 < (v1502 - v1503) >> 3)
                          {
                            v1504 = v1503 + 8 * v1501;
                            if (v1504 != v1502 && *(_DWORD *)(v1504 + 4) == (_DWORD)v1480)
                            {
                              v1506 = *(_QWORD *)v134;
                              v1507 = *(_QWORD *)v134 >> 39;
                              if (v1507 < v1483
                                && (v1508 = *(_QWORD *)(v1482 + 8 * v1507)) != 0
                                && (v1509 = *(unsigned __int16 *)(v1508 + 2 * (HIDWORD(v1506) & 0x7F)), v1489 > v1509)
                                && (v1510 = v1488 + 8 * v1509, v1510 != v1487)
                                && *(_DWORD *)(v1510 + 4) == HIDWORD(v1506))
                              {
                                v1479 = (uint64_t *)(v128[10] + 8 * v1509);
                              }
                              else
                              {
                                v1479 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1506, *v1479);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v134 += 8;
    }
    while (v134 != v133);
  }
  if (v128 + 4 == v136)
  {
    v272 = v128[7];
    v273 = v128[8];
    if (v272 != v273)
    {
      v274 = (uint64_t *)v128[10];
      do
      {
        v275 = *(unsigned int *)(v272 + 4);
        v276 = v275 >> 7;
        v277 = v127[4];
        if (v275 >> 7 < (v127[5] - v277) >> 3)
        {
          v278 = *(_QWORD *)(v277 + 8 * v276);
          if (v278)
          {
            v279 = v275 & 0x7F;
            v280 = *(unsigned __int16 *)(v278 + 2 * v279);
            v282 = v127[7];
            v281 = v127[8];
            if (v280 < (v281 - v282) >> 3)
            {
              v283 = v282 + 8 * v280;
              if (v283 != v281 && *(_DWORD *)(v283 + 4) == (_DWORD)v275)
              {
                v285 = v129[4];
                if (v276 < (v129[5] - v285) >> 3)
                {
                  v286 = *(_QWORD *)(v285 + 8 * v276);
                  if (v286)
                  {
                    v287 = *(unsigned __int16 *)(v286 + 2 * v279);
                    v289 = v129[7];
                    v288 = v129[8];
                    if (v287 < (v288 - v289) >> 3)
                    {
                      v290 = v289 + 8 * v287;
                      if (v290 != v288 && *(_DWORD *)(v290 + 4) == (_DWORD)v275)
                      {
                        v292 = v131[4];
                        if (v276 < (v131[5] - v292) >> 3)
                        {
                          v293 = *(_QWORD *)(v292 + 8 * v276);
                          if (v293)
                          {
                            v294 = *(unsigned __int16 *)(v293 + 2 * v279);
                            v296 = v131[7];
                            v295 = v131[8];
                            if (v294 < (v295 - v296) >> 3)
                            {
                              v297 = v296 + 8 * v294;
                              if (v297 != v295 && *(_DWORD *)(v297 + 4) == (_DWORD)v275)
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, *(_QWORD *)v272, *v274);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v274;
        v272 += 8;
      }
      while (v272 != v273);
    }
  }
  if (v129 + 4 == v136)
  {
    v299 = v129[7];
    v300 = v129[8];
    while (v299 != v300)
    {
      v1678 = *(unsigned int *)(v299 + 4);
      v1679 = v1678 >> 7;
      v1680 = v127[4];
      if (v1678 >> 7 < (v127[5] - v1680) >> 3)
      {
        v1681 = *(_QWORD *)(v1680 + 8 * v1679);
        if (v1681)
        {
          v1682 = v1678 & 0x7F;
          v1683 = *(unsigned __int16 *)(v1681 + 2 * v1682);
          v1685 = v127[7];
          v1684 = v127[8];
          if (v1683 < (v1684 - v1685) >> 3)
          {
            v1686 = v1685 + 8 * v1683;
            if (v1686 != v1684 && *(_DWORD *)(v1686 + 4) == (_DWORD)v1678)
            {
              v1688 = v128[4];
              v1689 = (v128[5] - v1688) >> 3;
              if (v1679 < v1689)
              {
                v1690 = *(_QWORD *)(v1688 + 8 * v1679);
                if (v1690)
                {
                  v1691 = *(unsigned __int16 *)(v1690 + 2 * v1682);
                  v1693 = v128[7];
                  v1692 = v128[8];
                  v1694 = (v1692 - v1693) >> 3;
                  if (v1694 > v1691)
                  {
                    v1695 = v1693 + 8 * v1691;
                    if (v1695 != v1692 && *(_DWORD *)(v1695 + 4) == (_DWORD)v1678)
                    {
                      v1697 = v131[4];
                      if (v1679 < (v131[5] - v1697) >> 3)
                      {
                        v1698 = *(_QWORD *)(v1697 + 8 * v1679);
                        if (v1698)
                        {
                          v1699 = *(unsigned __int16 *)(v1698 + 2 * v1682);
                          v1701 = v131[7];
                          v1700 = v131[8];
                          if (v1699 < (v1700 - v1701) >> 3)
                          {
                            v1702 = v1701 + 8 * v1699;
                            if (v1702 != v1700 && *(_DWORD *)(v1702 + 4) == (_DWORD)v1678)
                            {
                              v1704 = *(_QWORD *)v299;
                              v1705 = *(_QWORD *)v299 >> 39;
                              if (v1705 < v1689
                                && (v1706 = *(_QWORD *)(v1688 + 8 * v1705)) != 0
                                && (v1707 = *(unsigned __int16 *)(v1706 + 2 * (HIDWORD(v1704) & 0x7F)), v1694 > v1707)
                                && (v1708 = v1693 + 8 * v1707, v1708 != v1692)
                                && *(_DWORD *)(v1708 + 4) == HIDWORD(v1704))
                              {
                                v1677 = (uint64_t *)(v128[10] + 8 * v1707);
                              }
                              else
                              {
                                v1677 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1704, *v1677);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v299 += 8;
    }
  }
  if ((_QWORD *)v132 == v136)
  {
    v301 = v131[7];
    v302 = v131[8];
    while (v301 != v302)
    {
      v1710 = *(unsigned int *)(v301 + 4);
      v1711 = v1710 >> 7;
      v1712 = v127[4];
      if (v1710 >> 7 < (v127[5] - v1712) >> 3)
      {
        v1713 = *(_QWORD *)(v1712 + 8 * v1711);
        if (v1713)
        {
          v1714 = v1710 & 0x7F;
          v1715 = *(unsigned __int16 *)(v1713 + 2 * v1714);
          v1717 = v127[7];
          v1716 = v127[8];
          if (v1715 < (v1716 - v1717) >> 3)
          {
            v1718 = v1717 + 8 * v1715;
            if (v1718 != v1716 && *(_DWORD *)(v1718 + 4) == (_DWORD)v1710)
            {
              v1720 = v128[4];
              v1721 = (v128[5] - v1720) >> 3;
              if (v1711 < v1721)
              {
                v1722 = *(_QWORD *)(v1720 + 8 * v1711);
                if (v1722)
                {
                  v1723 = *(unsigned __int16 *)(v1722 + 2 * v1714);
                  v1725 = v128[7];
                  v1724 = v128[8];
                  v1726 = (v1724 - v1725) >> 3;
                  if (v1726 > v1723)
                  {
                    v1727 = v1725 + 8 * v1723;
                    if (v1727 != v1724 && *(_DWORD *)(v1727 + 4) == (_DWORD)v1710)
                    {
                      v1729 = v129[4];
                      if (v1711 < (v129[5] - v1729) >> 3)
                      {
                        v1730 = *(_QWORD *)(v1729 + 8 * v1711);
                        if (v1730)
                        {
                          v1731 = *(unsigned __int16 *)(v1730 + 2 * v1714);
                          v1733 = v129[7];
                          v1732 = v129[8];
                          if (v1731 < (v1732 - v1733) >> 3)
                          {
                            v1734 = v1733 + 8 * v1731;
                            if (v1734 != v1732 && *(_DWORD *)(v1734 + 4) == (_DWORD)v1710)
                            {
                              v1736 = *(_QWORD *)v301;
                              v1737 = *(_QWORD *)v301 >> 39;
                              if (v1737 < v1721
                                && (v1738 = *(_QWORD *)(v1720 + 8 * v1737)) != 0
                                && (v1739 = *(unsigned __int16 *)(v1738 + 2 * (HIDWORD(v1736) & 0x7F)), v1726 > v1739)
                                && (v1740 = v1725 + 8 * v1739, v1740 != v1724)
                                && *(_DWORD *)(v1740 + 4) == HIDWORD(v1736))
                              {
                                v1709 = (uint64_t *)(v128[10] + 8 * v1739);
                              }
                              else
                              {
                                v1709 = (uint64_t *)v128[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1736, *v1709);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v301 += 8;
    }
  }
  v138 = *((_QWORD *)v2986 + 55);
  v139 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v138);
  v140 = (_QWORD *)gdc::Registry::storage<arComponents::MeshComponent>(v138);
  v141 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v138);
  v142 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v138);
  v143 = gdc::Registry::storage<arComponents::OcclusionPipeline>(v138);
  v144 = (_QWORD *)v143;
  v146 = v139[7];
  v145 = v139[8];
  if (v140[8] - v140[7] >= (unint64_t)(v145 - v146))
    v147 = v139 + 4;
  else
    v147 = v140 + 4;
  if (v141[8] - v141[7] < v147[4] - v147[3])
    v147 = v141 + 4;
  v2973 = v143 + 32;
  if (v142[8] - v142[7] < v147[4] - v147[3])
    v147 = v142 + 4;
  if (*(_QWORD *)(v143 + 64) - *(_QWORD *)(v143 + 56) >= v147[4] - v147[3])
    v148 = v147;
  else
    v148 = (_QWORD *)(v143 + 32);
  if (v139 + 4 == v148 && v146 != v145)
  {
    do
    {
      v2379 = *(unsigned int *)(v146 + 4);
      v2380 = v2379 >> 7;
      v2381 = v140[4];
      v2382 = (v140[5] - v2381) >> 3;
      if (v2379 >> 7 < v2382)
      {
        v2383 = *(_QWORD *)(v2381 + 8 * v2380);
        if (v2383)
        {
          v2384 = v2379 & 0x7F;
          v2385 = *(unsigned __int16 *)(v2383 + 2 * v2384);
          v2387 = v140[7];
          v2386 = v140[8];
          v2388 = (v2386 - v2387) >> 3;
          if (v2388 > v2385)
          {
            v2389 = v2387 + 8 * v2385;
            if (v2389 != v2386 && *(_DWORD *)(v2389 + 4) == (_DWORD)v2379)
            {
              v2391 = v141[4];
              v2392 = (v141[5] - v2391) >> 3;
              if (v2380 < v2392)
              {
                v2393 = *(_QWORD *)(v2391 + 8 * v2380);
                if (v2393)
                {
                  v2394 = *(unsigned __int16 *)(v2393 + 2 * v2384);
                  v2396 = v141[7];
                  v2395 = v141[8];
                  v2397 = (v2395 - v2396) >> 3;
                  if (v2397 > v2394)
                  {
                    v2398 = v2396 + 8 * v2394;
                    if (v2398 != v2395 && *(_DWORD *)(v2398 + 4) == (_DWORD)v2379)
                    {
                      v2400 = v142[4];
                      if (v2380 < (v142[5] - v2400) >> 3)
                      {
                        v2401 = *(_QWORD *)(v2400 + 8 * v2380);
                        if (v2401)
                        {
                          v2402 = *(unsigned __int16 *)(v2401 + 2 * v2384);
                          v2404 = v142[7];
                          v2403 = v142[8];
                          if (v2402 < (v2403 - v2404) >> 3)
                          {
                            v2405 = v2404 + 8 * v2402;
                            if (v2405 != v2403 && *(_DWORD *)(v2405 + 4) == (_DWORD)v2379)
                            {
                              v2407 = v144[4];
                              if (v2380 < (v144[5] - v2407) >> 3)
                              {
                                v2408 = *(_QWORD *)(v2407 + 8 * v2380);
                                if (v2408)
                                {
                                  v2409 = *(unsigned __int16 *)(v2408 + 2 * v2384);
                                  v2411 = v144[7];
                                  v2410 = v144[8];
                                  if (v2409 < (v2410 - v2411) >> 3)
                                  {
                                    v2412 = v2411 + 8 * v2409;
                                    if (v2412 != v2410 && *(_DWORD *)(v2412 + 4) == (_DWORD)v2379)
                                    {
                                      v2413 = *(_QWORD *)v146;
                                      v2414 = HIDWORD(*(_QWORD *)v146);
                                      v2415 = *(_QWORD *)v146 >> 39;
                                      if (v2415 < v2382
                                        && (v2416 = *(_QWORD *)(v2381 + 8 * v2415)) != 0
                                        && (v2417 = *(unsigned __int16 *)(v2416 + 2 * (HIDWORD(v2413) & 0x7F)),
                                            v2388 > v2417)
                                        && (v2418 = v2387 + 8 * v2417, v2418 != v2386)
                                        && *(_DWORD *)(v2418 + 4) == (_DWORD)v2414)
                                      {
                                        v2419 = (uint64_t *)(v140[10] + 16 * v2417);
                                      }
                                      else
                                      {
                                        v2419 = (uint64_t *)v140[11];
                                      }
                                      if (v2415 < v2392
                                        && (v2420 = *(_QWORD *)(v2391 + 8 * v2415)) != 0
                                        && (v2421 = *(unsigned __int16 *)(v2420 + 2 * (HIDWORD(v2413) & 0x7F)),
                                            v2397 > v2421)
                                        && (v2422 = v2396 + 8 * v2421, v2422 != v2395)
                                        && *(_DWORD *)(v2422 + 4) == (_DWORD)v2414)
                                      {
                                        v2378 = v141[10] + 24 * v2421;
                                      }
                                      else
                                      {
                                        v2378 = v141[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2413, v2419, v2378);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v146 += 8;
    }
    while (v146 != v145);
  }
  if (v140 + 4 == v148)
  {
    v303 = v140[7];
    v304 = v140[8];
    if (v303 != v304)
    {
      v305 = (uint64_t *)v140[10];
      do
      {
        v2635 = *(unsigned int *)(v303 + 4);
        v2636 = v2635 >> 7;
        v2637 = v139[4];
        if (v2635 >> 7 < (v139[5] - v2637) >> 3)
        {
          v2638 = *(_QWORD *)(v2637 + 8 * v2636);
          if (v2638)
          {
            v2639 = v2635 & 0x7F;
            v2640 = *(unsigned __int16 *)(v2638 + 2 * v2639);
            v2642 = v139[7];
            v2641 = v139[8];
            if (v2640 < (v2641 - v2642) >> 3)
            {
              v2643 = v2642 + 8 * v2640;
              if (v2643 != v2641 && *(_DWORD *)(v2643 + 4) == (_DWORD)v2635)
              {
                v2645 = v141[4];
                v2646 = (v141[5] - v2645) >> 3;
                if (v2636 < v2646)
                {
                  v2647 = *(_QWORD *)(v2645 + 8 * v2636);
                  if (v2647)
                  {
                    v2648 = *(unsigned __int16 *)(v2647 + 2 * v2639);
                    v2650 = v141[7];
                    v2649 = v141[8];
                    v2651 = (v2649 - v2650) >> 3;
                    if (v2651 > v2648)
                    {
                      v2652 = v2650 + 8 * v2648;
                      if (v2652 != v2649 && *(_DWORD *)(v2652 + 4) == (_DWORD)v2635)
                      {
                        v2654 = v142[4];
                        if (v2636 < (v142[5] - v2654) >> 3)
                        {
                          v2655 = *(_QWORD *)(v2654 + 8 * v2636);
                          if (v2655)
                          {
                            v2656 = *(unsigned __int16 *)(v2655 + 2 * v2639);
                            v2657 = v142[7];
                            v2658 = v142[8];
                            if (v2656 < (v2658 - v2657) >> 3)
                            {
                              v2659 = v2657 + 8 * v2656;
                              if (v2659 != v2658 && *(_DWORD *)(v2659 + 4) == (_DWORD)v2635)
                              {
                                v2661 = v144[4];
                                if (v2636 < (v144[5] - v2661) >> 3)
                                {
                                  v2662 = *(_QWORD *)(v2661 + 8 * v2636);
                                  if (v2662)
                                  {
                                    v2663 = *(unsigned __int16 *)(v2662 + 2 * v2639);
                                    v2665 = v144[7];
                                    v2664 = v144[8];
                                    if (v2663 < (v2664 - v2665) >> 3)
                                    {
                                      v2666 = v2665 + 8 * v2663;
                                      if (v2666 != v2664 && *(_DWORD *)(v2666 + 4) == (_DWORD)v2635)
                                      {
                                        v2667 = *(_QWORD *)v303;
                                        v2668 = *(_QWORD *)v303 >> 39;
                                        if (v2668 < v2646
                                          && (v2669 = *(_QWORD *)(v2645 + 8 * v2668)) != 0
                                          && (v2670 = *(unsigned __int16 *)(v2669 + 2 * (HIDWORD(v2667) & 0x7F)),
                                              v2651 > v2670)
                                          && (v2671 = v2650 + 8 * v2670, v2671 != v2649)
                                          && *(_DWORD *)(v2671 + 4) == HIDWORD(v2667))
                                        {
                                          v2634 = v141[10] + 24 * v2670;
                                        }
                                        else
                                        {
                                          v2634 = v141[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2667, v305, v2634);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v305 += 2;
        v303 += 8;
      }
      while (v303 != v304);
    }
  }
  if (v141 + 4 == v148)
  {
    v306 = v141[7];
    v307 = v141[8];
    if (v306 != v307)
    {
      v308 = v141[10];
      do
      {
        v2673 = *(unsigned int *)(v306 + 4);
        v2674 = v2673 >> 7;
        v2675 = v139[4];
        if (v2673 >> 7 < (v139[5] - v2675) >> 3)
        {
          v2676 = *(_QWORD *)(v2675 + 8 * v2674);
          if (v2676)
          {
            v2677 = v2673 & 0x7F;
            v2678 = *(unsigned __int16 *)(v2676 + 2 * v2677);
            v2680 = v139[7];
            v2679 = v139[8];
            if (v2678 < (v2679 - v2680) >> 3)
            {
              v2681 = v2680 + 8 * v2678;
              if (v2681 != v2679 && *(_DWORD *)(v2681 + 4) == (_DWORD)v2673)
              {
                v2683 = v140[4];
                v2684 = (v140[5] - v2683) >> 3;
                if (v2674 < v2684)
                {
                  v2685 = *(_QWORD *)(v2683 + 8 * v2674);
                  if (v2685)
                  {
                    v2686 = *(unsigned __int16 *)(v2685 + 2 * v2677);
                    v2688 = v140[7];
                    v2687 = v140[8];
                    v2689 = (v2687 - v2688) >> 3;
                    if (v2689 > v2686)
                    {
                      v2690 = v2688 + 8 * v2686;
                      if (v2690 != v2687 && *(_DWORD *)(v2690 + 4) == (_DWORD)v2673)
                      {
                        v2692 = v142[4];
                        if (v2674 < (v142[5] - v2692) >> 3)
                        {
                          v2693 = *(_QWORD *)(v2692 + 8 * v2674);
                          if (v2693)
                          {
                            v2694 = *(unsigned __int16 *)(v2693 + 2 * v2677);
                            v2695 = v142[7];
                            v2696 = v142[8];
                            if (v2694 < (v2696 - v2695) >> 3)
                            {
                              v2697 = v2695 + 8 * v2694;
                              if (v2697 != v2696 && *(_DWORD *)(v2697 + 4) == (_DWORD)v2673)
                              {
                                v2699 = v144[4];
                                if (v2674 < (v144[5] - v2699) >> 3)
                                {
                                  v2700 = *(_QWORD *)(v2699 + 8 * v2674);
                                  if (v2700)
                                  {
                                    v2701 = *(unsigned __int16 *)(v2700 + 2 * v2677);
                                    v2703 = v144[7];
                                    v2702 = v144[8];
                                    if (v2701 < (v2702 - v2703) >> 3)
                                    {
                                      v2704 = v2703 + 8 * v2701;
                                      if (v2704 != v2702 && *(_DWORD *)(v2704 + 4) == (_DWORD)v2673)
                                      {
                                        v2705 = *(_QWORD *)v306;
                                        v2706 = *(_QWORD *)v306 >> 39;
                                        if (v2706 < v2684
                                          && (v2707 = *(_QWORD *)(v2683 + 8 * v2706)) != 0
                                          && (v2708 = *(unsigned __int16 *)(v2707 + 2 * (HIDWORD(v2705) & 0x7F)),
                                              v2689 > v2708)
                                          && (v2709 = v2688 + 8 * v2708, v2709 != v2687)
                                          && *(_DWORD *)(v2709 + 4) == HIDWORD(v2705))
                                        {
                                          v2672 = (uint64_t *)(v140[10] + 16 * v2708);
                                        }
                                        else
                                        {
                                          v2672 = (uint64_t *)v140[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2705, v2672, v308);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v308 += 24;
        v306 += 8;
      }
      while (v306 != v307);
    }
  }
  if (v142 + 4 == v148)
  {
    v309 = v142[7];
    for (k = v142[8]; v309 != k; v309 += 8)
    {
      v2711 = *(unsigned int *)(v309 + 4);
      v2712 = v2711 >> 7;
      v2713 = v139[4];
      if (v2711 >> 7 < (v139[5] - v2713) >> 3)
      {
        v2714 = *(_QWORD *)(v2713 + 8 * v2712);
        if (v2714)
        {
          v2715 = v2711 & 0x7F;
          v2716 = *(unsigned __int16 *)(v2714 + 2 * v2715);
          v2718 = v139[7];
          v2717 = v139[8];
          if (v2716 < (v2717 - v2718) >> 3)
          {
            v2719 = v2718 + 8 * v2716;
            if (v2719 != v2717 && *(_DWORD *)(v2719 + 4) == (_DWORD)v2711)
            {
              v2721 = v140[4];
              v2722 = (v140[5] - v2721) >> 3;
              if (v2712 < v2722)
              {
                v2723 = *(_QWORD *)(v2721 + 8 * v2712);
                if (v2723)
                {
                  v2724 = *(unsigned __int16 *)(v2723 + 2 * v2715);
                  v2726 = v140[7];
                  v2725 = v140[8];
                  v2727 = (v2725 - v2726) >> 3;
                  if (v2727 > v2724)
                  {
                    v2728 = v2726 + 8 * v2724;
                    if (v2728 != v2725 && *(_DWORD *)(v2728 + 4) == (_DWORD)v2711)
                    {
                      v2730 = v141[4];
                      v2731 = (v141[5] - v2730) >> 3;
                      if (v2712 < v2731)
                      {
                        v2732 = *(_QWORD *)(v2730 + 8 * v2712);
                        if (v2732)
                        {
                          v2733 = *(unsigned __int16 *)(v2732 + 2 * v2715);
                          v2735 = v141[7];
                          v2734 = v141[8];
                          v2736 = (v2734 - v2735) >> 3;
                          if (v2736 > v2733)
                          {
                            v2737 = v2735 + 8 * v2733;
                            if (v2737 != v2734 && *(_DWORD *)(v2737 + 4) == (_DWORD)v2711)
                            {
                              v2739 = v144[4];
                              if (v2712 < (v144[5] - v2739) >> 3)
                              {
                                v2740 = *(_QWORD *)(v2739 + 8 * v2712);
                                if (v2740)
                                {
                                  v2741 = *(unsigned __int16 *)(v2740 + 2 * v2715);
                                  v2743 = v144[7];
                                  v2742 = v144[8];
                                  if (v2741 < (v2742 - v2743) >> 3)
                                  {
                                    v2744 = v2743 + 8 * v2741;
                                    if (v2744 != v2742 && *(_DWORD *)(v2744 + 4) == (_DWORD)v2711)
                                    {
                                      v2745 = *(_QWORD *)v309;
                                      v2746 = HIDWORD(*(_QWORD *)v309);
                                      v2747 = *(_QWORD *)v309 >> 39;
                                      if (v2747 < v2722
                                        && (v2748 = *(_QWORD *)(v2721 + 8 * v2747)) != 0
                                        && (v2749 = *(unsigned __int16 *)(v2748 + 2 * (HIDWORD(v2745) & 0x7F)),
                                            v2727 > v2749)
                                        && (v2750 = v2726 + 8 * v2749, v2750 != v2725)
                                        && *(_DWORD *)(v2750 + 4) == (_DWORD)v2746)
                                      {
                                        v2751 = (uint64_t *)(v140[10] + 16 * v2749);
                                      }
                                      else
                                      {
                                        v2751 = (uint64_t *)v140[11];
                                      }
                                      if (v2747 < v2731
                                        && (v2752 = *(_QWORD *)(v2730 + 8 * v2747)) != 0
                                        && (v2753 = *(unsigned __int16 *)(v2752 + 2 * (HIDWORD(v2745) & 0x7F)),
                                            v2736 > v2753)
                                        && (v2754 = v2735 + 8 * v2753, v2754 != v2734)
                                        && *(_DWORD *)(v2754 + 4) == (_DWORD)v2746)
                                      {
                                        v2710 = v141[10] + 24 * v2753;
                                      }
                                      else
                                      {
                                        v2710 = v141[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2745, v2751, v2710);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_QWORD *)v2973 == v148)
  {
    v311 = v144[7];
    for (m = v144[8]; v311 != m; v311 += 8)
    {
      v2756 = *(unsigned int *)(v311 + 4);
      v2757 = v2756 >> 7;
      v2758 = v139[4];
      if (v2756 >> 7 < (v139[5] - v2758) >> 3)
      {
        v2759 = *(_QWORD *)(v2758 + 8 * v2757);
        if (v2759)
        {
          v2760 = v2756 & 0x7F;
          v2761 = *(unsigned __int16 *)(v2759 + 2 * v2760);
          v2763 = v139[7];
          v2762 = v139[8];
          if (v2761 < (v2762 - v2763) >> 3)
          {
            v2764 = v2763 + 8 * v2761;
            if (v2764 != v2762 && *(_DWORD *)(v2764 + 4) == (_DWORD)v2756)
            {
              v2766 = v140[4];
              v2767 = (v140[5] - v2766) >> 3;
              if (v2757 < v2767)
              {
                v2768 = *(_QWORD *)(v2766 + 8 * v2757);
                if (v2768)
                {
                  v2769 = *(unsigned __int16 *)(v2768 + 2 * v2760);
                  v2771 = v140[7];
                  v2770 = v140[8];
                  v2772 = (v2770 - v2771) >> 3;
                  if (v2772 > v2769)
                  {
                    v2773 = v2771 + 8 * v2769;
                    if (v2773 != v2770 && *(_DWORD *)(v2773 + 4) == (_DWORD)v2756)
                    {
                      v2775 = v141[4];
                      v2776 = (v141[5] - v2775) >> 3;
                      if (v2757 < v2776)
                      {
                        v2777 = *(_QWORD *)(v2775 + 8 * v2757);
                        if (v2777)
                        {
                          v2778 = *(unsigned __int16 *)(v2777 + 2 * v2760);
                          v2780 = v141[7];
                          v2779 = v141[8];
                          v2781 = (v2779 - v2780) >> 3;
                          if (v2781 > v2778)
                          {
                            v2782 = v2780 + 8 * v2778;
                            if (v2782 != v2779 && *(_DWORD *)(v2782 + 4) == (_DWORD)v2756)
                            {
                              v2784 = v142[4];
                              if (v2757 < (v142[5] - v2784) >> 3)
                              {
                                v2785 = *(_QWORD *)(v2784 + 8 * v2757);
                                if (v2785)
                                {
                                  v2786 = *(unsigned __int16 *)(v2785 + 2 * v2760);
                                  v2788 = v142[7];
                                  v2787 = v142[8];
                                  if (v2786 < (v2787 - v2788) >> 3)
                                  {
                                    v2789 = v2788 + 8 * v2786;
                                    if (v2789 != v2787 && *(_DWORD *)(v2789 + 4) == (_DWORD)v2756)
                                    {
                                      v2790 = *(_QWORD *)v311;
                                      v2791 = HIDWORD(*(_QWORD *)v311);
                                      v2792 = *(_QWORD *)v311 >> 39;
                                      if (v2792 < v2767
                                        && (v2793 = *(_QWORD *)(v2766 + 8 * v2792)) != 0
                                        && (v2794 = *(unsigned __int16 *)(v2793 + 2 * (HIDWORD(v2790) & 0x7F)),
                                            v2772 > v2794)
                                        && (v2795 = v2771 + 8 * v2794, v2795 != v2770)
                                        && *(_DWORD *)(v2795 + 4) == (_DWORD)v2791)
                                      {
                                        v2796 = (uint64_t *)(v140[10] + 16 * v2794);
                                      }
                                      else
                                      {
                                        v2796 = (uint64_t *)v140[11];
                                      }
                                      if (v2792 < v2776
                                        && (v2797 = *(_QWORD *)(v2775 + 8 * v2792)) != 0
                                        && (v2798 = *(unsigned __int16 *)(v2797 + 2 * (HIDWORD(v2790) & 0x7F)),
                                            v2781 > v2798)
                                        && (v2799 = v2780 + 8 * v2798, v2799 != v2779)
                                        && *(_DWORD *)(v2799 + 4) == (_DWORD)v2791)
                                      {
                                        v2755 = v141[10] + 24 * v2798;
                                      }
                                      else
                                      {
                                        v2755 = v141[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2790, v2796, v2755);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v150 = *((_QWORD *)v2986 + 55);
  v151 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v150);
  v152 = (_QWORD *)gdc::Registry::storage<arComponents::MeshDataComponent>(v150);
  v153 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v150);
  v154 = gdc::Registry::storage<arComponents::OcclusionPipeline>(v150);
  v155 = (_QWORD *)v154;
  v156 = v154 + 32;
  v158 = v151[7];
  v157 = v151[8];
  if (v152[8] - v152[7] >= (unint64_t)(v157 - v158))
    v159 = v151 + 4;
  else
    v159 = v152 + 4;
  if (v153[8] - v153[7] < v159[4] - v159[3])
    v159 = v153 + 4;
  if (*(_QWORD *)(v154 + 64) - *(_QWORD *)(v154 + 56) >= v159[4] - v159[3])
    v160 = v159;
  else
    v160 = (_QWORD *)(v154 + 32);
  if (v151 + 4 == v160 && v158 != v157)
  {
    do
    {
      v1512 = *(unsigned int *)(v158 + 4);
      v1513 = v1512 >> 7;
      v1514 = v152[4];
      v1515 = (v152[5] - v1514) >> 3;
      if (v1512 >> 7 < v1515)
      {
        v1516 = *(_QWORD *)(v1514 + 8 * v1513);
        if (v1516)
        {
          v1517 = v1512 & 0x7F;
          v1518 = *(unsigned __int16 *)(v1516 + 2 * v1517);
          v1520 = v152[7];
          v1519 = v152[8];
          v1521 = (v1519 - v1520) >> 3;
          if (v1521 > v1518)
          {
            v1522 = v1520 + 8 * v1518;
            if (v1522 != v1519 && *(_DWORD *)(v1522 + 4) == (_DWORD)v1512)
            {
              v1524 = v153[4];
              if (v1513 < (v153[5] - v1524) >> 3)
              {
                v1525 = *(_QWORD *)(v1524 + 8 * v1513);
                if (v1525)
                {
                  v1526 = *(unsigned __int16 *)(v1525 + 2 * v1517);
                  v1527 = v153[7];
                  v1528 = v153[8];
                  if (v1526 < (v1528 - v1527) >> 3)
                  {
                    v1529 = v1527 + 8 * v1526;
                    if (v1529 != v1528 && *(_DWORD *)(v1529 + 4) == (_DWORD)v1512)
                    {
                      v1531 = v155[4];
                      if (v1513 < (v155[5] - v1531) >> 3)
                      {
                        v1532 = *(_QWORD *)(v1531 + 8 * v1513);
                        if (v1532)
                        {
                          v1533 = *(unsigned __int16 *)(v1532 + 2 * v1517);
                          v1535 = v155[7];
                          v1534 = v155[8];
                          if (v1533 < (v1534 - v1535) >> 3)
                          {
                            v1536 = v1535 + 8 * v1533;
                            if (v1536 != v1534 && *(_DWORD *)(v1536 + 4) == (_DWORD)v1512)
                            {
                              v1538 = *(_QWORD *)v158;
                              v1539 = *(_QWORD *)v158 >> 39;
                              if (v1539 < v1515
                                && (v1540 = *(_QWORD *)(v1514 + 8 * v1539)) != 0
                                && (v1541 = *(unsigned __int16 *)(v1540 + 2 * (HIDWORD(v1538) & 0x7F)), v1521 > v1541)
                                && (v1542 = v1520 + 8 * v1541, v1542 != v1519)
                                && *(_DWORD *)(v1542 + 4) == HIDWORD(v1538))
                              {
                                v1511 = (uint64_t *)(v152[10] + 8 * v1541);
                              }
                              else
                              {
                                v1511 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1538, *v1511);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v158 += 8;
    }
    while (v158 != v157);
  }
  if (v152 + 4 == v160)
  {
    v313 = v152[7];
    v314 = v152[8];
    if (v313 != v314)
    {
      v315 = (uint64_t *)v152[10];
      do
      {
        v316 = *(unsigned int *)(v313 + 4);
        v317 = v316 >> 7;
        v318 = v151[4];
        if (v316 >> 7 < (v151[5] - v318) >> 3)
        {
          v319 = *(_QWORD *)(v318 + 8 * v317);
          if (v319)
          {
            v320 = v316 & 0x7F;
            v321 = *(unsigned __int16 *)(v319 + 2 * v320);
            v323 = v151[7];
            v322 = v151[8];
            if (v321 < (v322 - v323) >> 3)
            {
              v324 = v323 + 8 * v321;
              if (v324 != v322 && *(_DWORD *)(v324 + 4) == (_DWORD)v316)
              {
                v326 = v153[4];
                if (v317 < (v153[5] - v326) >> 3)
                {
                  v327 = *(_QWORD *)(v326 + 8 * v317);
                  if (v327)
                  {
                    v328 = *(unsigned __int16 *)(v327 + 2 * v320);
                    v330 = v153[7];
                    v329 = v153[8];
                    if (v328 < (v329 - v330) >> 3)
                    {
                      v331 = v330 + 8 * v328;
                      if (v331 != v329 && *(_DWORD *)(v331 + 4) == (_DWORD)v316)
                      {
                        v333 = v155[4];
                        if (v317 < (v155[5] - v333) >> 3)
                        {
                          v334 = *(_QWORD *)(v333 + 8 * v317);
                          if (v334)
                          {
                            v335 = *(unsigned __int16 *)(v334 + 2 * v320);
                            v337 = v155[7];
                            v336 = v155[8];
                            if (v335 < (v336 - v337) >> 3)
                            {
                              v338 = v337 + 8 * v335;
                              if (v338 != v336 && *(_DWORD *)(v338 + 4) == (_DWORD)v316)
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, *(_QWORD *)v313, *v315);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v315;
        v313 += 8;
      }
      while (v313 != v314);
    }
  }
  if (v153 + 4 == v160)
  {
    v340 = v153[7];
    v341 = v153[8];
    while (v340 != v341)
    {
      v1742 = *(unsigned int *)(v340 + 4);
      v1743 = v1742 >> 7;
      v1744 = v151[4];
      if (v1742 >> 7 < (v151[5] - v1744) >> 3)
      {
        v1745 = *(_QWORD *)(v1744 + 8 * v1743);
        if (v1745)
        {
          v1746 = v1742 & 0x7F;
          v1747 = *(unsigned __int16 *)(v1745 + 2 * v1746);
          v1749 = v151[7];
          v1748 = v151[8];
          if (v1747 < (v1748 - v1749) >> 3)
          {
            v1750 = v1749 + 8 * v1747;
            if (v1750 != v1748 && *(_DWORD *)(v1750 + 4) == (_DWORD)v1742)
            {
              v1752 = v152[4];
              v1753 = (v152[5] - v1752) >> 3;
              if (v1743 < v1753)
              {
                v1754 = *(_QWORD *)(v1752 + 8 * v1743);
                if (v1754)
                {
                  v1755 = *(unsigned __int16 *)(v1754 + 2 * v1746);
                  v1757 = v152[7];
                  v1756 = v152[8];
                  v1758 = (v1756 - v1757) >> 3;
                  if (v1758 > v1755)
                  {
                    v1759 = v1757 + 8 * v1755;
                    if (v1759 != v1756 && *(_DWORD *)(v1759 + 4) == (_DWORD)v1742)
                    {
                      v1761 = v155[4];
                      if (v1743 < (v155[5] - v1761) >> 3)
                      {
                        v1762 = *(_QWORD *)(v1761 + 8 * v1743);
                        if (v1762)
                        {
                          v1763 = *(unsigned __int16 *)(v1762 + 2 * v1746);
                          v1765 = v155[7];
                          v1764 = v155[8];
                          if (v1763 < (v1764 - v1765) >> 3)
                          {
                            v1766 = v1765 + 8 * v1763;
                            if (v1766 != v1764 && *(_DWORD *)(v1766 + 4) == (_DWORD)v1742)
                            {
                              v1768 = *(_QWORD *)v340;
                              v1769 = *(_QWORD *)v340 >> 39;
                              if (v1769 < v1753
                                && (v1770 = *(_QWORD *)(v1752 + 8 * v1769)) != 0
                                && (v1771 = *(unsigned __int16 *)(v1770 + 2 * (HIDWORD(v1768) & 0x7F)), v1758 > v1771)
                                && (v1772 = v1757 + 8 * v1771, v1772 != v1756)
                                && *(_DWORD *)(v1772 + 4) == HIDWORD(v1768))
                              {
                                v1741 = (uint64_t *)(v152[10] + 8 * v1771);
                              }
                              else
                              {
                                v1741 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1768, *v1741);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v340 += 8;
    }
  }
  if ((_QWORD *)v156 == v160)
  {
    v342 = v155[7];
    v343 = v155[8];
    while (v342 != v343)
    {
      v1774 = *(unsigned int *)(v342 + 4);
      v1775 = v1774 >> 7;
      v1776 = v151[4];
      if (v1774 >> 7 < (v151[5] - v1776) >> 3)
      {
        v1777 = *(_QWORD *)(v1776 + 8 * v1775);
        if (v1777)
        {
          v1778 = v1774 & 0x7F;
          v1779 = *(unsigned __int16 *)(v1777 + 2 * v1778);
          v1781 = v151[7];
          v1780 = v151[8];
          if (v1779 < (v1780 - v1781) >> 3)
          {
            v1782 = v1781 + 8 * v1779;
            if (v1782 != v1780 && *(_DWORD *)(v1782 + 4) == (_DWORD)v1774)
            {
              v1784 = v152[4];
              v1785 = (v152[5] - v1784) >> 3;
              if (v1775 < v1785)
              {
                v1786 = *(_QWORD *)(v1784 + 8 * v1775);
                if (v1786)
                {
                  v1787 = *(unsigned __int16 *)(v1786 + 2 * v1778);
                  v1789 = v152[7];
                  v1788 = v152[8];
                  v1790 = (v1788 - v1789) >> 3;
                  if (v1790 > v1787)
                  {
                    v1791 = v1789 + 8 * v1787;
                    if (v1791 != v1788 && *(_DWORD *)(v1791 + 4) == (_DWORD)v1774)
                    {
                      v1793 = v153[4];
                      if (v1775 < (v153[5] - v1793) >> 3)
                      {
                        v1794 = *(_QWORD *)(v1793 + 8 * v1775);
                        if (v1794)
                        {
                          v1795 = *(unsigned __int16 *)(v1794 + 2 * v1778);
                          v1797 = v153[7];
                          v1796 = v153[8];
                          if (v1795 < (v1796 - v1797) >> 3)
                          {
                            v1798 = v1797 + 8 * v1795;
                            if (v1798 != v1796 && *(_DWORD *)(v1798 + 4) == (_DWORD)v1774)
                            {
                              v1800 = *(_QWORD *)v342;
                              v1801 = *(_QWORD *)v342 >> 39;
                              if (v1801 < v1785
                                && (v1802 = *(_QWORD *)(v1784 + 8 * v1801)) != 0
                                && (v1803 = *(unsigned __int16 *)(v1802 + 2 * (HIDWORD(v1800) & 0x7F)), v1790 > v1803)
                                && (v1804 = v1789 + 8 * v1803, v1804 != v1788)
                                && *(_DWORD *)(v1804 + 4) == HIDWORD(v1800))
                              {
                                v1773 = (uint64_t *)(v152[10] + 8 * v1803);
                              }
                              else
                              {
                                v1773 = (uint64_t *)v152[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1800, *v1773);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v342 += 8;
    }
  }
  v162 = *((_QWORD *)v2986 + 55);
  v163 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v162);
  v164 = (_QWORD *)gdc::Registry::storage<arComponents::MeshComponent>(v162);
  v165 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v162);
  v166 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v162);
  v167 = gdc::Registry::storage<arComponents::ShadowPipeline>(v162);
  v168 = (_QWORD *)v167;
  v170 = v163[7];
  v169 = v163[8];
  if (v164[8] - v164[7] >= (unint64_t)(v169 - v170))
    v171 = v163 + 4;
  else
    v171 = v164 + 4;
  if (v165[8] - v165[7] < v171[4] - v171[3])
    v171 = v165 + 4;
  v2974 = v167 + 32;
  if (v166[8] - v166[7] < v171[4] - v171[3])
    v171 = v166 + 4;
  if (*(_QWORD *)(v167 + 64) - *(_QWORD *)(v167 + 56) >= v171[4] - v171[3])
    v172 = v171;
  else
    v172 = (_QWORD *)(v167 + 32);
  if (v163 + 4 == v172 && v170 != v169)
  {
    do
    {
      v2424 = *(unsigned int *)(v170 + 4);
      v2425 = v2424 >> 7;
      v2426 = v164[4];
      v2427 = (v164[5] - v2426) >> 3;
      if (v2424 >> 7 < v2427)
      {
        v2428 = *(_QWORD *)(v2426 + 8 * v2425);
        if (v2428)
        {
          v2429 = v2424 & 0x7F;
          v2430 = *(unsigned __int16 *)(v2428 + 2 * v2429);
          v2432 = v164[7];
          v2431 = v164[8];
          v2433 = (v2431 - v2432) >> 3;
          if (v2433 > v2430)
          {
            v2434 = v2432 + 8 * v2430;
            if (v2434 != v2431 && *(_DWORD *)(v2434 + 4) == (_DWORD)v2424)
            {
              v2436 = v165[4];
              v2437 = (v165[5] - v2436) >> 3;
              if (v2425 < v2437)
              {
                v2438 = *(_QWORD *)(v2436 + 8 * v2425);
                if (v2438)
                {
                  v2439 = *(unsigned __int16 *)(v2438 + 2 * v2429);
                  v2441 = v165[7];
                  v2440 = v165[8];
                  v2442 = (v2440 - v2441) >> 3;
                  if (v2442 > v2439)
                  {
                    v2443 = v2441 + 8 * v2439;
                    if (v2443 != v2440 && *(_DWORD *)(v2443 + 4) == (_DWORD)v2424)
                    {
                      v2445 = v166[4];
                      if (v2425 < (v166[5] - v2445) >> 3)
                      {
                        v2446 = *(_QWORD *)(v2445 + 8 * v2425);
                        if (v2446)
                        {
                          v2447 = *(unsigned __int16 *)(v2446 + 2 * v2429);
                          v2449 = v166[7];
                          v2448 = v166[8];
                          if (v2447 < (v2448 - v2449) >> 3)
                          {
                            v2450 = v2449 + 8 * v2447;
                            if (v2450 != v2448 && *(_DWORD *)(v2450 + 4) == (_DWORD)v2424)
                            {
                              v2452 = v168[4];
                              if (v2425 < (v168[5] - v2452) >> 3)
                              {
                                v2453 = *(_QWORD *)(v2452 + 8 * v2425);
                                if (v2453)
                                {
                                  v2454 = *(unsigned __int16 *)(v2453 + 2 * v2429);
                                  v2456 = v168[7];
                                  v2455 = v168[8];
                                  if (v2454 < (v2455 - v2456) >> 3)
                                  {
                                    v2457 = v2456 + 8 * v2454;
                                    if (v2457 != v2455 && *(_DWORD *)(v2457 + 4) == (_DWORD)v2424)
                                    {
                                      v2458 = *(_QWORD *)v170;
                                      v2459 = HIDWORD(*(_QWORD *)v170);
                                      v2460 = *(_QWORD *)v170 >> 39;
                                      if (v2460 < v2427
                                        && (v2461 = *(_QWORD *)(v2426 + 8 * v2460)) != 0
                                        && (v2462 = *(unsigned __int16 *)(v2461 + 2 * (HIDWORD(v2458) & 0x7F)),
                                            v2433 > v2462)
                                        && (v2463 = v2432 + 8 * v2462, v2463 != v2431)
                                        && *(_DWORD *)(v2463 + 4) == (_DWORD)v2459)
                                      {
                                        v2464 = (uint64_t *)(v164[10] + 16 * v2462);
                                      }
                                      else
                                      {
                                        v2464 = (uint64_t *)v164[11];
                                      }
                                      if (v2460 < v2437
                                        && (v2465 = *(_QWORD *)(v2436 + 8 * v2460)) != 0
                                        && (v2466 = *(unsigned __int16 *)(v2465 + 2 * (HIDWORD(v2458) & 0x7F)),
                                            v2442 > v2466)
                                        && (v2467 = v2441 + 8 * v2466, v2467 != v2440)
                                        && *(_DWORD *)(v2467 + 4) == (_DWORD)v2459)
                                      {
                                        v2423 = v165[10] + 24 * v2466;
                                      }
                                      else
                                      {
                                        v2423 = v165[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2458, v2464, v2423);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v170 += 8;
    }
    while (v170 != v169);
  }
  if (v164 + 4 == v172)
  {
    v344 = v164[7];
    v345 = v164[8];
    if (v344 != v345)
    {
      v346 = (uint64_t *)v164[10];
      do
      {
        v2801 = *(unsigned int *)(v344 + 4);
        v2802 = v2801 >> 7;
        v2803 = v163[4];
        if (v2801 >> 7 < (v163[5] - v2803) >> 3)
        {
          v2804 = *(_QWORD *)(v2803 + 8 * v2802);
          if (v2804)
          {
            v2805 = v2801 & 0x7F;
            v2806 = *(unsigned __int16 *)(v2804 + 2 * v2805);
            v2808 = v163[7];
            v2807 = v163[8];
            if (v2806 < (v2807 - v2808) >> 3)
            {
              v2809 = v2808 + 8 * v2806;
              if (v2809 != v2807 && *(_DWORD *)(v2809 + 4) == (_DWORD)v2801)
              {
                v2811 = v165[4];
                v2812 = (v165[5] - v2811) >> 3;
                if (v2802 < v2812)
                {
                  v2813 = *(_QWORD *)(v2811 + 8 * v2802);
                  if (v2813)
                  {
                    v2814 = *(unsigned __int16 *)(v2813 + 2 * v2805);
                    v2816 = v165[7];
                    v2815 = v165[8];
                    v2817 = (v2815 - v2816) >> 3;
                    if (v2817 > v2814)
                    {
                      v2818 = v2816 + 8 * v2814;
                      if (v2818 != v2815 && *(_DWORD *)(v2818 + 4) == (_DWORD)v2801)
                      {
                        v2820 = v166[4];
                        if (v2802 < (v166[5] - v2820) >> 3)
                        {
                          v2821 = *(_QWORD *)(v2820 + 8 * v2802);
                          if (v2821)
                          {
                            v2822 = *(unsigned __int16 *)(v2821 + 2 * v2805);
                            v2823 = v166[7];
                            v2824 = v166[8];
                            if (v2822 < (v2824 - v2823) >> 3)
                            {
                              v2825 = v2823 + 8 * v2822;
                              if (v2825 != v2824 && *(_DWORD *)(v2825 + 4) == (_DWORD)v2801)
                              {
                                v2827 = v168[4];
                                if (v2802 < (v168[5] - v2827) >> 3)
                                {
                                  v2828 = *(_QWORD *)(v2827 + 8 * v2802);
                                  if (v2828)
                                  {
                                    v2829 = *(unsigned __int16 *)(v2828 + 2 * v2805);
                                    v2831 = v168[7];
                                    v2830 = v168[8];
                                    if (v2829 < (v2830 - v2831) >> 3)
                                    {
                                      v2832 = v2831 + 8 * v2829;
                                      if (v2832 != v2830 && *(_DWORD *)(v2832 + 4) == (_DWORD)v2801)
                                      {
                                        v2833 = *(_QWORD *)v344;
                                        v2834 = *(_QWORD *)v344 >> 39;
                                        if (v2834 < v2812
                                          && (v2835 = *(_QWORD *)(v2811 + 8 * v2834)) != 0
                                          && (v2836 = *(unsigned __int16 *)(v2835 + 2 * (HIDWORD(v2833) & 0x7F)),
                                              v2817 > v2836)
                                          && (v2837 = v2816 + 8 * v2836, v2837 != v2815)
                                          && *(_DWORD *)(v2837 + 4) == HIDWORD(v2833))
                                        {
                                          v2800 = v165[10] + 24 * v2836;
                                        }
                                        else
                                        {
                                          v2800 = v165[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2833, v346, v2800);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v346 += 2;
        v344 += 8;
      }
      while (v344 != v345);
    }
  }
  if (v165 + 4 == v172)
  {
    v347 = v165[7];
    v348 = v165[8];
    if (v347 != v348)
    {
      v349 = v165[10];
      do
      {
        v2839 = *(unsigned int *)(v347 + 4);
        v2840 = v2839 >> 7;
        v2841 = v163[4];
        if (v2839 >> 7 < (v163[5] - v2841) >> 3)
        {
          v2842 = *(_QWORD *)(v2841 + 8 * v2840);
          if (v2842)
          {
            v2843 = v2839 & 0x7F;
            v2844 = *(unsigned __int16 *)(v2842 + 2 * v2843);
            v2846 = v163[7];
            v2845 = v163[8];
            if (v2844 < (v2845 - v2846) >> 3)
            {
              v2847 = v2846 + 8 * v2844;
              if (v2847 != v2845 && *(_DWORD *)(v2847 + 4) == (_DWORD)v2839)
              {
                v2849 = v164[4];
                v2850 = (v164[5] - v2849) >> 3;
                if (v2840 < v2850)
                {
                  v2851 = *(_QWORD *)(v2849 + 8 * v2840);
                  if (v2851)
                  {
                    v2852 = *(unsigned __int16 *)(v2851 + 2 * v2843);
                    v2854 = v164[7];
                    v2853 = v164[8];
                    v2855 = (v2853 - v2854) >> 3;
                    if (v2855 > v2852)
                    {
                      v2856 = v2854 + 8 * v2852;
                      if (v2856 != v2853 && *(_DWORD *)(v2856 + 4) == (_DWORD)v2839)
                      {
                        v2858 = v166[4];
                        if (v2840 < (v166[5] - v2858) >> 3)
                        {
                          v2859 = *(_QWORD *)(v2858 + 8 * v2840);
                          if (v2859)
                          {
                            v2860 = *(unsigned __int16 *)(v2859 + 2 * v2843);
                            v2861 = v166[7];
                            v2862 = v166[8];
                            if (v2860 < (v2862 - v2861) >> 3)
                            {
                              v2863 = v2861 + 8 * v2860;
                              if (v2863 != v2862 && *(_DWORD *)(v2863 + 4) == (_DWORD)v2839)
                              {
                                v2865 = v168[4];
                                if (v2840 < (v168[5] - v2865) >> 3)
                                {
                                  v2866 = *(_QWORD *)(v2865 + 8 * v2840);
                                  if (v2866)
                                  {
                                    v2867 = *(unsigned __int16 *)(v2866 + 2 * v2843);
                                    v2869 = v168[7];
                                    v2868 = v168[8];
                                    if (v2867 < (v2868 - v2869) >> 3)
                                    {
                                      v2870 = v2869 + 8 * v2867;
                                      if (v2870 != v2868 && *(_DWORD *)(v2870 + 4) == (_DWORD)v2839)
                                      {
                                        v2871 = *(_QWORD *)v347;
                                        v2872 = *(_QWORD *)v347 >> 39;
                                        if (v2872 < v2850
                                          && (v2873 = *(_QWORD *)(v2849 + 8 * v2872)) != 0
                                          && (v2874 = *(unsigned __int16 *)(v2873 + 2 * (HIDWORD(v2871) & 0x7F)),
                                              v2855 > v2874)
                                          && (v2875 = v2854 + 8 * v2874, v2875 != v2853)
                                          && *(_DWORD *)(v2875 + 4) == HIDWORD(v2871))
                                        {
                                          v2838 = (uint64_t *)(v164[10] + 16 * v2874);
                                        }
                                        else
                                        {
                                          v2838 = (uint64_t *)v164[11];
                                        }
                                        md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2871, v2838, v349);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v349 += 24;
        v347 += 8;
      }
      while (v347 != v348);
    }
  }
  if (v166 + 4 == v172)
  {
    v350 = v166[7];
    for (n = v166[8]; v350 != n; v350 += 8)
    {
      v2877 = *(unsigned int *)(v350 + 4);
      v2878 = v2877 >> 7;
      v2879 = v163[4];
      if (v2877 >> 7 < (v163[5] - v2879) >> 3)
      {
        v2880 = *(_QWORD *)(v2879 + 8 * v2878);
        if (v2880)
        {
          v2881 = v2877 & 0x7F;
          v2882 = *(unsigned __int16 *)(v2880 + 2 * v2881);
          v2884 = v163[7];
          v2883 = v163[8];
          if (v2882 < (v2883 - v2884) >> 3)
          {
            v2885 = v2884 + 8 * v2882;
            if (v2885 != v2883 && *(_DWORD *)(v2885 + 4) == (_DWORD)v2877)
            {
              v2887 = v164[4];
              v2888 = (v164[5] - v2887) >> 3;
              if (v2878 < v2888)
              {
                v2889 = *(_QWORD *)(v2887 + 8 * v2878);
                if (v2889)
                {
                  v2890 = *(unsigned __int16 *)(v2889 + 2 * v2881);
                  v2892 = v164[7];
                  v2891 = v164[8];
                  v2893 = (v2891 - v2892) >> 3;
                  if (v2893 > v2890)
                  {
                    v2894 = v2892 + 8 * v2890;
                    if (v2894 != v2891 && *(_DWORD *)(v2894 + 4) == (_DWORD)v2877)
                    {
                      v2896 = v165[4];
                      v2897 = (v165[5] - v2896) >> 3;
                      if (v2878 < v2897)
                      {
                        v2898 = *(_QWORD *)(v2896 + 8 * v2878);
                        if (v2898)
                        {
                          v2899 = *(unsigned __int16 *)(v2898 + 2 * v2881);
                          v2901 = v165[7];
                          v2900 = v165[8];
                          v2902 = (v2900 - v2901) >> 3;
                          if (v2902 > v2899)
                          {
                            v2903 = v2901 + 8 * v2899;
                            if (v2903 != v2900 && *(_DWORD *)(v2903 + 4) == (_DWORD)v2877)
                            {
                              v2905 = v168[4];
                              if (v2878 < (v168[5] - v2905) >> 3)
                              {
                                v2906 = *(_QWORD *)(v2905 + 8 * v2878);
                                if (v2906)
                                {
                                  v2907 = *(unsigned __int16 *)(v2906 + 2 * v2881);
                                  v2909 = v168[7];
                                  v2908 = v168[8];
                                  if (v2907 < (v2908 - v2909) >> 3)
                                  {
                                    v2910 = v2909 + 8 * v2907;
                                    if (v2910 != v2908 && *(_DWORD *)(v2910 + 4) == (_DWORD)v2877)
                                    {
                                      v2911 = *(_QWORD *)v350;
                                      v2912 = HIDWORD(*(_QWORD *)v350);
                                      v2913 = *(_QWORD *)v350 >> 39;
                                      if (v2913 < v2888
                                        && (v2914 = *(_QWORD *)(v2887 + 8 * v2913)) != 0
                                        && (v2915 = *(unsigned __int16 *)(v2914 + 2 * (HIDWORD(v2911) & 0x7F)),
                                            v2893 > v2915)
                                        && (v2916 = v2892 + 8 * v2915, v2916 != v2891)
                                        && *(_DWORD *)(v2916 + 4) == (_DWORD)v2912)
                                      {
                                        v2917 = (uint64_t *)(v164[10] + 16 * v2915);
                                      }
                                      else
                                      {
                                        v2917 = (uint64_t *)v164[11];
                                      }
                                      if (v2913 < v2897
                                        && (v2918 = *(_QWORD *)(v2896 + 8 * v2913)) != 0
                                        && (v2919 = *(unsigned __int16 *)(v2918 + 2 * (HIDWORD(v2911) & 0x7F)),
                                            v2902 > v2919)
                                        && (v2920 = v2901 + 8 * v2919, v2920 != v2900)
                                        && *(_DWORD *)(v2920 + 4) == (_DWORD)v2912)
                                      {
                                        v2876 = v165[10] + 24 * v2919;
                                      }
                                      else
                                      {
                                        v2876 = v165[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2911, v2917, v2876);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_QWORD *)v2974 == v172)
  {
    v352 = v168[7];
    for (ii = v168[8]; v352 != ii; v352 += 8)
    {
      v2922 = *(unsigned int *)(v352 + 4);
      v2923 = v2922 >> 7;
      v2924 = v163[4];
      if (v2922 >> 7 < (v163[5] - v2924) >> 3)
      {
        v2925 = *(_QWORD *)(v2924 + 8 * v2923);
        if (v2925)
        {
          v2926 = v2922 & 0x7F;
          v2927 = *(unsigned __int16 *)(v2925 + 2 * v2926);
          v2929 = v163[7];
          v2928 = v163[8];
          if (v2927 < (v2928 - v2929) >> 3)
          {
            v2930 = v2929 + 8 * v2927;
            if (v2930 != v2928 && *(_DWORD *)(v2930 + 4) == (_DWORD)v2922)
            {
              v2932 = v164[4];
              v2933 = (v164[5] - v2932) >> 3;
              if (v2923 < v2933)
              {
                v2934 = *(_QWORD *)(v2932 + 8 * v2923);
                if (v2934)
                {
                  v2935 = *(unsigned __int16 *)(v2934 + 2 * v2926);
                  v2937 = v164[7];
                  v2936 = v164[8];
                  v2938 = (v2936 - v2937) >> 3;
                  if (v2938 > v2935)
                  {
                    v2939 = v2937 + 8 * v2935;
                    if (v2939 != v2936 && *(_DWORD *)(v2939 + 4) == (_DWORD)v2922)
                    {
                      v2941 = v165[4];
                      v2942 = (v165[5] - v2941) >> 3;
                      if (v2923 < v2942)
                      {
                        v2943 = *(_QWORD *)(v2941 + 8 * v2923);
                        if (v2943)
                        {
                          v2944 = *(unsigned __int16 *)(v2943 + 2 * v2926);
                          v2946 = v165[7];
                          v2945 = v165[8];
                          v2947 = (v2945 - v2946) >> 3;
                          if (v2947 > v2944)
                          {
                            v2948 = v2946 + 8 * v2944;
                            if (v2948 != v2945 && *(_DWORD *)(v2948 + 4) == (_DWORD)v2922)
                            {
                              v2950 = v166[4];
                              if (v2923 < (v166[5] - v2950) >> 3)
                              {
                                v2951 = *(_QWORD *)(v2950 + 8 * v2923);
                                if (v2951)
                                {
                                  v2952 = *(unsigned __int16 *)(v2951 + 2 * v2926);
                                  v2954 = v166[7];
                                  v2953 = v166[8];
                                  if (v2952 < (v2953 - v2954) >> 3)
                                  {
                                    v2955 = v2954 + 8 * v2952;
                                    if (v2955 != v2953 && *(_DWORD *)(v2955 + 4) == (_DWORD)v2922)
                                    {
                                      v2956 = *(_QWORD *)v352;
                                      v2957 = HIDWORD(*(_QWORD *)v352);
                                      v2958 = *(_QWORD *)v352 >> 39;
                                      if (v2958 < v2933
                                        && (v2959 = *(_QWORD *)(v2932 + 8 * v2958)) != 0
                                        && (v2960 = *(unsigned __int16 *)(v2959 + 2 * (HIDWORD(v2956) & 0x7F)),
                                            v2938 > v2960)
                                        && (v2961 = v2937 + 8 * v2960, v2961 != v2936)
                                        && *(_DWORD *)(v2961 + 4) == (_DWORD)v2957)
                                      {
                                        v2962 = (uint64_t *)(v164[10] + 16 * v2960);
                                      }
                                      else
                                      {
                                        v2962 = (uint64_t *)v164[11];
                                      }
                                      if (v2958 < v2942
                                        && (v2963 = *(_QWORD *)(v2941 + 8 * v2958)) != 0
                                        && (v2964 = *(unsigned __int16 *)(v2963 + 2 * (HIDWORD(v2956) & 0x7F)),
                                            v2947 > v2964)
                                        && (v2965 = v2946 + 8 * v2964, v2965 != v2945)
                                        && *(_DWORD *)(v2965 + 4) == (_DWORD)v2957)
                                      {
                                        v2921 = v165[10] + 24 * v2964;
                                      }
                                      else
                                      {
                                        v2921 = v165[11];
                                      }
                                      md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(v2986, v2956, v2962, v2921);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v174 = *((_QWORD *)v2986 + 55);
  v175 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v174);
  v176 = (_QWORD *)gdc::Registry::storage<arComponents::MeshDataComponent>(v174);
  v177 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v174);
  v178 = gdc::Registry::storage<arComponents::ShadowPipeline>(v174);
  v179 = (_QWORD *)v178;
  v180 = v178 + 32;
  v182 = v175[7];
  v181 = v175[8];
  if (v176[8] - v176[7] >= (unint64_t)(v181 - v182))
    v183 = v175 + 4;
  else
    v183 = v176 + 4;
  if (v177[8] - v177[7] < v183[4] - v183[3])
    v183 = v177 + 4;
  if (*(_QWORD *)(v178 + 64) - *(_QWORD *)(v178 + 56) >= v183[4] - v183[3])
    v184 = v183;
  else
    v184 = (_QWORD *)(v178 + 32);
  if (v175 + 4 == v184 && v182 != v181)
  {
    do
    {
      v1544 = *(unsigned int *)(v182 + 4);
      v1545 = v1544 >> 7;
      v1546 = v176[4];
      v1547 = (v176[5] - v1546) >> 3;
      if (v1544 >> 7 < v1547)
      {
        v1548 = *(_QWORD *)(v1546 + 8 * v1545);
        if (v1548)
        {
          v1549 = v1544 & 0x7F;
          v1550 = *(unsigned __int16 *)(v1548 + 2 * v1549);
          v1552 = v176[7];
          v1551 = v176[8];
          v1553 = (v1551 - v1552) >> 3;
          if (v1553 > v1550)
          {
            v1554 = v1552 + 8 * v1550;
            if (v1554 != v1551 && *(_DWORD *)(v1554 + 4) == (_DWORD)v1544)
            {
              v1556 = v177[4];
              if (v1545 < (v177[5] - v1556) >> 3)
              {
                v1557 = *(_QWORD *)(v1556 + 8 * v1545);
                if (v1557)
                {
                  v1558 = *(unsigned __int16 *)(v1557 + 2 * v1549);
                  v1559 = v177[7];
                  v1560 = v177[8];
                  if (v1558 < (v1560 - v1559) >> 3)
                  {
                    v1561 = v1559 + 8 * v1558;
                    if (v1561 != v1560 && *(_DWORD *)(v1561 + 4) == (_DWORD)v1544)
                    {
                      v1563 = v179[4];
                      if (v1545 < (v179[5] - v1563) >> 3)
                      {
                        v1564 = *(_QWORD *)(v1563 + 8 * v1545);
                        if (v1564)
                        {
                          v1565 = *(unsigned __int16 *)(v1564 + 2 * v1549);
                          v1567 = v179[7];
                          v1566 = v179[8];
                          if (v1565 < (v1566 - v1567) >> 3)
                          {
                            v1568 = v1567 + 8 * v1565;
                            if (v1568 != v1566 && *(_DWORD *)(v1568 + 4) == (_DWORD)v1544)
                            {
                              v1570 = *(_QWORD *)v182;
                              v1571 = *(_QWORD *)v182 >> 39;
                              if (v1571 < v1547
                                && (v1572 = *(_QWORD *)(v1546 + 8 * v1571)) != 0
                                && (v1573 = *(unsigned __int16 *)(v1572 + 2 * (HIDWORD(v1570) & 0x7F)), v1553 > v1573)
                                && (v1574 = v1552 + 8 * v1573, v1574 != v1551)
                                && *(_DWORD *)(v1574 + 4) == HIDWORD(v1570))
                              {
                                v1543 = (uint64_t *)(v176[10] + 8 * v1573);
                              }
                              else
                              {
                                v1543 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1570, *v1543);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v182 += 8;
    }
    while (v182 != v181);
  }
  if (v176 + 4 == v184)
  {
    v354 = v176[7];
    v355 = v176[8];
    if (v354 != v355)
    {
      v356 = (uint64_t *)v176[10];
      do
      {
        v357 = *(unsigned int *)(v354 + 4);
        v358 = v357 >> 7;
        v359 = v175[4];
        if (v357 >> 7 < (v175[5] - v359) >> 3)
        {
          v360 = *(_QWORD *)(v359 + 8 * v358);
          if (v360)
          {
            v361 = v357 & 0x7F;
            v362 = *(unsigned __int16 *)(v360 + 2 * v361);
            v364 = v175[7];
            v363 = v175[8];
            if (v362 < (v363 - v364) >> 3)
            {
              v365 = v364 + 8 * v362;
              if (v365 != v363 && *(_DWORD *)(v365 + 4) == (_DWORD)v357)
              {
                v367 = v177[4];
                if (v358 < (v177[5] - v367) >> 3)
                {
                  v368 = *(_QWORD *)(v367 + 8 * v358);
                  if (v368)
                  {
                    v369 = *(unsigned __int16 *)(v368 + 2 * v361);
                    v371 = v177[7];
                    v370 = v177[8];
                    if (v369 < (v370 - v371) >> 3)
                    {
                      v372 = v371 + 8 * v369;
                      if (v372 != v370 && *(_DWORD *)(v372 + 4) == (_DWORD)v357)
                      {
                        v374 = v179[4];
                        if (v358 < (v179[5] - v374) >> 3)
                        {
                          v375 = *(_QWORD *)(v374 + 8 * v358);
                          if (v375)
                          {
                            v376 = *(unsigned __int16 *)(v375 + 2 * v361);
                            v378 = v179[7];
                            v377 = v179[8];
                            if (v376 < (v377 - v378) >> 3)
                            {
                              v379 = v378 + 8 * v376;
                              if (v379 != v377 && *(_DWORD *)(v379 + 4) == (_DWORD)v357)
                                md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, *(_QWORD *)v354, *v356);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v356;
        v354 += 8;
      }
      while (v354 != v355);
    }
  }
  if (v177 + 4 == v184)
  {
    v381 = v177[7];
    v382 = v177[8];
    while (v381 != v382)
    {
      v1806 = *(unsigned int *)(v381 + 4);
      v1807 = v1806 >> 7;
      v1808 = v175[4];
      if (v1806 >> 7 < (v175[5] - v1808) >> 3)
      {
        v1809 = *(_QWORD *)(v1808 + 8 * v1807);
        if (v1809)
        {
          v1810 = v1806 & 0x7F;
          v1811 = *(unsigned __int16 *)(v1809 + 2 * v1810);
          v1813 = v175[7];
          v1812 = v175[8];
          if (v1811 < (v1812 - v1813) >> 3)
          {
            v1814 = v1813 + 8 * v1811;
            if (v1814 != v1812 && *(_DWORD *)(v1814 + 4) == (_DWORD)v1806)
            {
              v1816 = v176[4];
              v1817 = (v176[5] - v1816) >> 3;
              if (v1807 < v1817)
              {
                v1818 = *(_QWORD *)(v1816 + 8 * v1807);
                if (v1818)
                {
                  v1819 = *(unsigned __int16 *)(v1818 + 2 * v1810);
                  v1821 = v176[7];
                  v1820 = v176[8];
                  v1822 = (v1820 - v1821) >> 3;
                  if (v1822 > v1819)
                  {
                    v1823 = v1821 + 8 * v1819;
                    if (v1823 != v1820 && *(_DWORD *)(v1823 + 4) == (_DWORD)v1806)
                    {
                      v1825 = v179[4];
                      if (v1807 < (v179[5] - v1825) >> 3)
                      {
                        v1826 = *(_QWORD *)(v1825 + 8 * v1807);
                        if (v1826)
                        {
                          v1827 = *(unsigned __int16 *)(v1826 + 2 * v1810);
                          v1829 = v179[7];
                          v1828 = v179[8];
                          if (v1827 < (v1828 - v1829) >> 3)
                          {
                            v1830 = v1829 + 8 * v1827;
                            if (v1830 != v1828 && *(_DWORD *)(v1830 + 4) == (_DWORD)v1806)
                            {
                              v1832 = *(_QWORD *)v381;
                              v1833 = *(_QWORD *)v381 >> 39;
                              if (v1833 < v1817
                                && (v1834 = *(_QWORD *)(v1816 + 8 * v1833)) != 0
                                && (v1835 = *(unsigned __int16 *)(v1834 + 2 * (HIDWORD(v1832) & 0x7F)), v1822 > v1835)
                                && (v1836 = v1821 + 8 * v1835, v1836 != v1820)
                                && *(_DWORD *)(v1836 + 4) == HIDWORD(v1832))
                              {
                                v1805 = (uint64_t *)(v176[10] + 8 * v1835);
                              }
                              else
                              {
                                v1805 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1832, *v1805);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v381 += 8;
    }
  }
  if ((_QWORD *)v180 == v184)
  {
    v383 = v179[7];
    v384 = v179[8];
    while (v383 != v384)
    {
      v1838 = *(unsigned int *)(v383 + 4);
      v1839 = v1838 >> 7;
      v1840 = v175[4];
      if (v1838 >> 7 < (v175[5] - v1840) >> 3)
      {
        v1841 = *(_QWORD *)(v1840 + 8 * v1839);
        if (v1841)
        {
          v1842 = v1838 & 0x7F;
          v1843 = *(unsigned __int16 *)(v1841 + 2 * v1842);
          v1845 = v175[7];
          v1844 = v175[8];
          if (v1843 < (v1844 - v1845) >> 3)
          {
            v1846 = v1845 + 8 * v1843;
            if (v1846 != v1844 && *(_DWORD *)(v1846 + 4) == (_DWORD)v1838)
            {
              v1848 = v176[4];
              v1849 = (v176[5] - v1848) >> 3;
              if (v1839 < v1849)
              {
                v1850 = *(_QWORD *)(v1848 + 8 * v1839);
                if (v1850)
                {
                  v1851 = *(unsigned __int16 *)(v1850 + 2 * v1842);
                  v1853 = v176[7];
                  v1852 = v176[8];
                  v1854 = (v1852 - v1853) >> 3;
                  if (v1854 > v1851)
                  {
                    v1855 = v1853 + 8 * v1851;
                    if (v1855 != v1852 && *(_DWORD *)(v1855 + 4) == (_DWORD)v1838)
                    {
                      v1857 = v177[4];
                      if (v1839 < (v177[5] - v1857) >> 3)
                      {
                        v1858 = *(_QWORD *)(v1857 + 8 * v1839);
                        if (v1858)
                        {
                          v1859 = *(unsigned __int16 *)(v1858 + 2 * v1842);
                          v1861 = v177[7];
                          v1860 = v177[8];
                          if (v1859 < (v1860 - v1861) >> 3)
                          {
                            v1862 = v1861 + 8 * v1859;
                            if (v1862 != v1860 && *(_DWORD *)(v1862 + 4) == (_DWORD)v1838)
                            {
                              v1864 = *(_QWORD *)v383;
                              v1865 = *(_QWORD *)v383 >> 39;
                              if (v1865 < v1849
                                && (v1866 = *(_QWORD *)(v1848 + 8 * v1865)) != 0
                                && (v1867 = *(unsigned __int16 *)(v1866 + 2 * (HIDWORD(v1864) & 0x7F)), v1854 > v1867)
                                && (v1868 = v1853 + 8 * v1867, v1868 != v1852)
                                && *(_DWORD *)(v1868 + 4) == HIDWORD(v1864))
                              {
                                v1837 = (uint64_t *)(v176[10] + 8 * v1867);
                              }
                              else
                              {
                                v1837 = (uint64_t *)v176[11];
                              }
                              md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(v2986, v1864, *v1837);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v383 += 8;
    }
  }
  v186 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineIdentifier>(*((_QWORD *)v2986 + 55));
  v187 = (float64_t *)v186[7];
  v188 = (float64_t *)v186[8];
  v189 = v2986;
  if (v187 == v188)
    goto LABEL_323;
  v190 = *((_QWORD *)v2986 + 45);
  if (!v190)
    goto LABEL_323;
  v191 = (uint64_t *)((char *)v2986 + 352);
  v192 = (unint64_t *)v186[10];
  v193 = (_QWORD *)((char *)v2986 + 368);
  while (2)
  {
    v3002.f64[0] = *v187;
    if (!v190)
      goto LABEL_321;
    v194 = *v192;
    v195 = (uint8x8_t)vcnt_s8((int8x8_t)v190);
    v195.i16[0] = vaddlv_u8(v195);
    v196 = v195.u32[0];
    if (v195.u32[0] > 1uLL)
    {
      v197 = *v192;
      if (v194 >= v190)
        v197 = v194 % v190;
    }
    else
    {
      v197 = v194 & (v190 - 1);
    }
    v198 = *(_QWORD **)(*v191 + 8 * v197);
    if (!v198)
      goto LABEL_321;
    v199 = (_QWORD *)*v198;
    if (!*v198)
      goto LABEL_321;
    v200 = v190 - 1;
    if (v195.u32[0] < 2uLL)
    {
      while (1)
      {
        v201 = v199[1];
        if (v201 == v194)
        {
          if (v199[2] == v194)
            goto LABEL_259;
        }
        else if ((v201 & v200) != v197)
        {
          goto LABEL_321;
        }
        v199 = (_QWORD *)*v199;
        if (!v199)
          goto LABEL_321;
      }
    }
    while (2)
    {
      v202 = v199[1];
      if (v202 != v194)
      {
        if (v202 >= v190)
          v202 %= v190;
        if (v202 != v197)
          goto LABEL_321;
        goto LABEL_253;
      }
      if (v199[2] != v194)
      {
LABEL_253:
        v199 = (_QWORD *)*v199;
        if (!v199)
          goto LABEL_321;
        continue;
      }
      break;
    }
LABEL_259:
    if (v195.u32[0] > 1uLL)
    {
      v203 = *v192;
      if (v194 >= v190)
        v203 = v194 % v190;
    }
    else
    {
      v203 = v200 & v194;
    }
    v204 = *(_QWORD ***)(*v191 + 8 * v203);
    if (v204)
    {
      v205 = *v204;
      if (*v204)
      {
        if (v195.u32[0] < 2uLL)
        {
          while (1)
          {
            v206 = v205[1];
            if (v206 == v194)
            {
              if (v205[2] == v194)
                goto LABEL_271;
            }
            else if ((v206 & v200) != v203)
            {
              goto LABEL_279;
            }
            v205 = (_QWORD *)*v205;
            if (!v205)
              goto LABEL_279;
          }
        }
        do
        {
          v208 = v205[1];
          if (v208 == v194)
          {
            if (v205[2] == v194)
            {
LABEL_271:
              v207 = v2986;
              goto LABEL_320;
            }
          }
          else
          {
            if (v208 >= v190)
              v208 %= v190;
            if (v208 != v203)
              break;
          }
          v205 = (_QWORD *)*v205;
        }
        while (v205);
      }
    }
LABEL_279:
    v205 = operator new(0x30uLL);
    *v205 = 0;
    v205[1] = v194;
    v209 = v192[2];
    *((_OWORD *)v205 + 1) = *(_OWORD *)v192;
    v210 = (float)(unint64_t)(*((_QWORD *)v2986 + 47) + 1);
    v205[4] = v209;
    v205[5] = 0;
    v211 = *((float *)v2986 + 96);
    if ((float)(v211 * (float)v190) < v210)
    {
      v213 = v190 < 3 || v196 > 1;
      v214 = v213 | (2 * v190);
      v215 = vcvtps_u32_f32(v210 / v211);
      if (v214 <= v215)
        prime = v215;
      else
        prime = v214;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v190 = *((_QWORD *)v2986 + 45);
      }
      if (prime > v190)
        goto LABEL_294;
      if (prime < v190)
      {
        v217 = vcvtps_u32_f32((float)*((unint64_t *)v2986 + 47) / *((float *)v2986 + 96));
        if (v190 < 3 || (v218 = (uint8x8_t)vcnt_s8((int8x8_t)v190), v218.i16[0] = vaddlv_u8(v218), v218.u32[0] > 1uLL))
        {
          v217 = std::__next_prime(v217);
        }
        else
        {
          v219 = 1 << -(char)__clz(v217 - 1);
          if (v217 >= 2)
            v217 = v219;
        }
        if (prime <= v217)
          prime = v217;
        if (prime < v190)
LABEL_294:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v191, prime);
      }
      v190 = *((_QWORD *)v2986 + 45);
      if ((v190 & (v190 - 1)) != 0)
      {
        if (v194 >= v190)
          v203 = v194 % v190;
        else
          v203 = v194;
      }
      else
      {
        v203 = (v190 - 1) & v194;
      }
    }
    v220 = *v191;
    v221 = *(_QWORD **)(*v191 + 8 * v203);
    if (v221)
    {
      *v205 = *v221;
      goto LABEL_318;
    }
    *v205 = *v193;
    *v193 = v205;
    *(_QWORD *)(v220 + 8 * v203) = v193;
    if (*v205)
    {
      v222 = *(_QWORD *)(*v205 + 8);
      if ((v190 & (v190 - 1)) != 0)
      {
        if (v222 >= v190)
          v222 %= v190;
      }
      else
      {
        v222 &= v190 - 1;
      }
      v221 = (_QWORD *)(*v191 + 8 * v222);
LABEL_318:
      *v221 = v205;
    }
    v207 = v2986;
    ++*((_QWORD *)v2986 + 47);
LABEL_320:
    (**(void (***)(_QWORD, _QWORD, float64x2_t *))v205[5])(v205[5], *((_QWORD *)v207 + 55), &v3002);
LABEL_321:
    ++v187;
    v189 = v2986;
    if (v187 != v188)
    {
      v192 += 3;
      v190 = *((_QWORD *)v2986 + 45);
      continue;
    }
    break;
  }
LABEL_323:
  v223 = *((_QWORD *)v189 + 55);
  v224 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v223);
  v225 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v223);
  v226 = gdc::Registry::storage<md::pipelineECS::HasUVMapping>(v223);
  v227 = (_QWORD *)v226;
  v228 = v226 + 32;
  v230 = (unint64_t *)v224[7];
  v229 = (uint64_t *)v224[8];
  if (v225[8] - v225[7] >= (unint64_t)((char *)v229 - (char *)v230))
    v231 = v224 + 4;
  else
    v231 = v225 + 4;
  if (*(_QWORD *)(v226 + 64) - *(_QWORD *)(v226 + 56) >= v231[4] - v231[3])
    v232 = v231;
  else
    v232 = (_QWORD *)(v226 + 32);
  if (v224 + 4 == v232 && v230 != (unint64_t *)v229)
  {
    while (2)
    {
      v510 = *((unsigned int *)v230 + 1);
      v511 = v510 >> 7;
      v512 = v225[4];
      v513 = (v225[5] - v512) >> 3;
      if (v510 >> 7 >= v513)
        goto LABEL_601;
      v514 = *(_QWORD *)(v512 + 8 * v511);
      if (!v514)
        goto LABEL_601;
      v515 = *(unsigned __int16 *)(v514 + 2 * (v510 & 0x7F));
      v517 = v225[7];
      v516 = v225[8];
      v518 = (v516 - v517) >> 3;
      if (v518 <= v515)
        goto LABEL_601;
      v519 = v517 + 8 * v515;
      if (v519 == v516 || *(_DWORD *)(v519 + 4) != (_DWORD)v510)
        goto LABEL_601;
      v521 = v227[4];
      v522 = (v227[5] - v521) >> 3;
      if (v511 >= v522)
        goto LABEL_601;
      v523 = *(_QWORD *)(v521 + 8 * v511);
      if (!v523)
        goto LABEL_601;
      v524 = *(unsigned __int16 *)(v523 + 2 * (v510 & 0x7F));
      v526 = v227[7];
      v525 = v227[8];
      v527 = (v525 - v526) >> 3;
      if (v527 <= v524)
        goto LABEL_601;
      v528 = v526 + 8 * v524;
      if (v528 == v525 || *(_DWORD *)(v528 + 4) != (_DWORD)v510)
      {
LABEL_601:
        if (++v230 == (unint64_t *)v229)
          goto LABEL_334;
        continue;
      }
      break;
    }
    v530 = *v230;
    v531 = HIDWORD(*v230);
    v532 = *v230 >> 39;
    if (v532 >= v513
      || (v533 = *(_QWORD *)(v512 + 8 * v532)) == 0
      || (v534 = *(unsigned __int16 *)(v533 + 2 * (HIDWORD(v530) & 0x7F)), v518 <= v534)
      || ((v535 = v517 + 8 * v534, v535 != v516) ? (v536 = *(_DWORD *)(v535 + 4) == (_DWORD)v531) : (v536 = 0), !v536))
    {
      if (v532 < v522)
        goto LABEL_626;
      goto LABEL_599;
    }
    if (v532 >= v522)
      goto LABEL_599;
LABEL_626:
    v537 = *(_QWORD *)(v521 + 8 * v532);
    if (v537
      && (v538 = *(unsigned __int16 *)(v537 + 2 * (HIDWORD(v530) & 0x7F)), v527 > v538)
      && ((v539 = v526 + 8 * v538, v539 != v525) ? (v540 = *(_DWORD *)(v539 + 4) == (_DWORD)v531) : (v540 = 0), v540))
    {
      v509 = (_QWORD *)(v227[10] + 8 * v538);
    }
    else
    {
LABEL_599:
      v509 = (_QWORD *)v227[11];
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*v509 + 8))(*v509);
    goto LABEL_601;
  }
LABEL_334:
  if (v225 + 4 == v232)
  {
    v385 = (unint64_t *)v225[7];
    v386 = (uint64_t *)v225[8];
    if (v385 != (unint64_t *)v386)
    {
      v387 = v225[10];
      do
      {
        v1192 = *((unsigned int *)v385 + 1);
        v1193 = v1192 >> 7;
        v1194 = v224[4];
        if (v1192 >> 7 < (v224[5] - v1194) >> 3)
        {
          v1195 = *(_QWORD *)(v1194 + 8 * v1193);
          if (v1195)
          {
            v1196 = *(unsigned __int16 *)(v1195 + 2 * (v1192 & 0x7F));
            v1198 = v224[7];
            v1197 = v224[8];
            if (v1196 < (v1197 - v1198) >> 3)
            {
              v1199 = v1198 + 8 * v1196;
              if (v1199 != v1197 && *(_DWORD *)(v1199 + 4) == (_DWORD)v1192)
              {
                v1201 = v227[4];
                v1202 = (v227[5] - v1201) >> 3;
                if (v1193 < v1202)
                {
                  v1203 = *(_QWORD *)(v1201 + 8 * v1193);
                  if (v1203)
                  {
                    v1204 = *(unsigned __int16 *)(v1203 + 2 * (v1192 & 0x7F));
                    v1206 = v227[7];
                    v1205 = v227[8];
                    v1207 = (v1205 - v1206) >> 3;
                    if (v1207 > v1204)
                    {
                      v1208 = v1206 + 8 * v1204;
                      if (v1208 != v1205 && *(_DWORD *)(v1208 + 4) == (_DWORD)v1192)
                      {
                        v1210 = *v385;
                        v1211 = *v385 >> 39;
                        if (v1211 < v1202
                          && (v1212 = *(_QWORD *)(v1201 + 8 * v1211)) != 0
                          && (v1213 = *(unsigned __int16 *)(v1212 + 2 * (HIDWORD(v1210) & 0x7F)), v1207 > v1213)
                          && ((v1214 = HIDWORD(v1210), v1215 = v1206 + 8 * v1213, v1215 != v1205)
                            ? (v1216 = *(_DWORD *)(v1215 + 4) == (_DWORD)v1214)
                            : (v1216 = 0),
                              v1216))
                        {
                          v1191 = (_QWORD *)(v227[10] + 8 * v1213);
                        }
                        else
                        {
                          v1191 = (_QWORD *)v227[11];
                        }
                        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v1191 + 8))(*v1191, v387);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v387 += 8;
        ++v385;
      }
      while (v385 != (unint64_t *)v386);
    }
  }
  if ((_QWORD *)v228 == v232)
  {
    v388 = (unint64_t *)v227[7];
    v389 = (uint64_t *)v227[8];
    if (v388 != (unint64_t *)v389)
    {
      v390 = (_QWORD *)v227[10];
      do
      {
        v1218 = *((unsigned int *)v388 + 1);
        v1219 = v1218 >> 7;
        v1220 = v224[4];
        if (v1218 >> 7 < (v224[5] - v1220) >> 3)
        {
          v1221 = *(_QWORD *)(v1220 + 8 * v1219);
          if (v1221)
          {
            v1222 = *(unsigned __int16 *)(v1221 + 2 * (v1218 & 0x7F));
            v1224 = v224[7];
            v1223 = v224[8];
            if (v1222 < (v1223 - v1224) >> 3)
            {
              v1225 = v1224 + 8 * v1222;
              if (v1225 != v1223 && *(_DWORD *)(v1225 + 4) == (_DWORD)v1218)
              {
                v1227 = v225[4];
                v1228 = (v225[5] - v1227) >> 3;
                if (v1219 < v1228)
                {
                  v1229 = *(_QWORD *)(v1227 + 8 * v1219);
                  if (v1229)
                  {
                    v1230 = *(unsigned __int16 *)(v1229 + 2 * (v1218 & 0x7F));
                    v1232 = v225[7];
                    v1231 = v225[8];
                    v1233 = (v1231 - v1232) >> 3;
                    if (v1233 > v1230)
                    {
                      v1234 = v1232 + 8 * v1230;
                      if (v1234 != v1231 && *(_DWORD *)(v1234 + 4) == (_DWORD)v1218)
                      {
                        v1236 = *v388;
                        v1237 = *v388 >> 39;
                        if (v1237 < v1228
                          && (v1238 = *(_QWORD *)(v1227 + 8 * v1237)) != 0
                          && (v1239 = *(unsigned __int16 *)(v1238 + 2 * (HIDWORD(v1236) & 0x7F)), v1233 > v1239)
                          && ((v1240 = HIDWORD(v1236), v1241 = v1232 + 8 * v1239, v1241 != v1231)
                            ? (v1242 = *(_DWORD *)(v1241 + 4) == (_DWORD)v1240)
                            : (v1242 = 0),
                              v1242))
                        {
                          v1217 = v225[10] + 8 * v1239;
                        }
                        else
                        {
                          v1217 = v225[11];
                        }
                        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v390 + 8))(*v390, v1217);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v390;
        ++v388;
      }
      while (v388 != (unint64_t *)v389);
    }
  }
  v234 = *((_QWORD *)v2986 + 55);
  v235 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v234);
  v236 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v234);
  v237 = gdc::Registry::storage<md::pipelineECS::HasUVScale>(v234);
  v238 = (_QWORD *)v237;
  v239 = v237 + 32;
  v241 = (unint64_t *)v235[7];
  v240 = (uint64_t *)v235[8];
  if (v236[8] - v236[7] >= (unint64_t)((char *)v240 - (char *)v241))
    v242 = v235 + 4;
  else
    v242 = v236 + 4;
  if (*(_QWORD *)(v237 + 64) - *(_QWORD *)(v237 + 56) >= v242[4] - v242[3])
    v243 = v242;
  else
    v243 = (_QWORD *)(v237 + 32);
  if (v235 + 4 == v243 && v241 != (unint64_t *)v240)
  {
    while (2)
    {
      v542 = *((unsigned int *)v241 + 1);
      v543 = v542 >> 7;
      v544 = v236[4];
      v545 = (v236[5] - v544) >> 3;
      if (v542 >> 7 >= v545)
        goto LABEL_638;
      v546 = *(_QWORD *)(v544 + 8 * v543);
      if (!v546)
        goto LABEL_638;
      v547 = *(unsigned __int16 *)(v546 + 2 * (v542 & 0x7F));
      v549 = v236[7];
      v548 = v236[8];
      v550 = (v548 - v549) >> 3;
      if (v550 <= v547)
        goto LABEL_638;
      v551 = v549 + 8 * v547;
      if (v551 == v548 || *(_DWORD *)(v551 + 4) != (_DWORD)v542)
        goto LABEL_638;
      v553 = v238[4];
      v554 = (v238[5] - v553) >> 3;
      if (v543 >= v554)
        goto LABEL_638;
      v555 = *(_QWORD *)(v553 + 8 * v543);
      if (!v555)
        goto LABEL_638;
      v556 = *(unsigned __int16 *)(v555 + 2 * (v542 & 0x7F));
      v558 = v238[7];
      v557 = v238[8];
      v559 = (v557 - v558) >> 3;
      if (v559 <= v556)
        goto LABEL_638;
      v560 = v558 + 8 * v556;
      if (v560 == v557 || *(_DWORD *)(v560 + 4) != (_DWORD)v542)
      {
LABEL_638:
        if (++v241 == (unint64_t *)v240)
          goto LABEL_347;
        continue;
      }
      break;
    }
    v562 = *v241;
    v563 = HIDWORD(*v241);
    v564 = *v241 >> 39;
    if (v564 >= v545
      || (v565 = *(_QWORD *)(v544 + 8 * v564)) == 0
      || (v566 = *(unsigned __int16 *)(v565 + 2 * (HIDWORD(v562) & 0x7F)), v550 <= v566)
      || ((v567 = v549 + 8 * v566, v567 != v548) ? (v568 = *(_DWORD *)(v567 + 4) == (_DWORD)v563) : (v568 = 0), !v568))
    {
      if (v564 < v554)
        goto LABEL_663;
      goto LABEL_636;
    }
    if (v564 >= v554)
      goto LABEL_636;
LABEL_663:
    v569 = *(_QWORD *)(v553 + 8 * v564);
    if (v569
      && (v570 = *(unsigned __int16 *)(v569 + 2 * (HIDWORD(v562) & 0x7F)), v559 > v570)
      && ((v571 = v558 + 8 * v570, v571 != v557) ? (v572 = *(_DWORD *)(v571 + 4) == (_DWORD)v563) : (v572 = 0), v572))
    {
      v541 = (_QWORD *)(v238[10] + 8 * v570);
    }
    else
    {
LABEL_636:
      v541 = (_QWORD *)v238[11];
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*v541 + 8))(*v541);
    goto LABEL_638;
  }
LABEL_347:
  if (v236 + 4 == v243)
  {
    v391 = (unint64_t *)v236[7];
    v392 = (uint64_t *)v236[8];
    if (v391 != (unint64_t *)v392)
    {
      v393 = v236[10];
      do
      {
        v1244 = *((unsigned int *)v391 + 1);
        v1245 = v1244 >> 7;
        v1246 = v235[4];
        if (v1244 >> 7 < (v235[5] - v1246) >> 3)
        {
          v1247 = *(_QWORD *)(v1246 + 8 * v1245);
          if (v1247)
          {
            v1248 = *(unsigned __int16 *)(v1247 + 2 * (v1244 & 0x7F));
            v1250 = v235[7];
            v1249 = v235[8];
            if (v1248 < (v1249 - v1250) >> 3)
            {
              v1251 = v1250 + 8 * v1248;
              if (v1251 != v1249 && *(_DWORD *)(v1251 + 4) == (_DWORD)v1244)
              {
                v1253 = v238[4];
                v1254 = (v238[5] - v1253) >> 3;
                if (v1245 < v1254)
                {
                  v1255 = *(_QWORD *)(v1253 + 8 * v1245);
                  if (v1255)
                  {
                    v1256 = *(unsigned __int16 *)(v1255 + 2 * (v1244 & 0x7F));
                    v1258 = v238[7];
                    v1257 = v238[8];
                    v1259 = (v1257 - v1258) >> 3;
                    if (v1259 > v1256)
                    {
                      v1260 = v1258 + 8 * v1256;
                      if (v1260 != v1257 && *(_DWORD *)(v1260 + 4) == (_DWORD)v1244)
                      {
                        v1262 = *v391;
                        v1263 = *v391 >> 39;
                        if (v1263 < v1254
                          && (v1264 = *(_QWORD *)(v1253 + 8 * v1263)) != 0
                          && (v1265 = *(unsigned __int16 *)(v1264 + 2 * (HIDWORD(v1262) & 0x7F)), v1259 > v1265)
                          && ((v1266 = HIDWORD(v1262), v1267 = v1258 + 8 * v1265, v1267 != v1257)
                            ? (v1268 = *(_DWORD *)(v1267 + 4) == (_DWORD)v1266)
                            : (v1268 = 0),
                              v1268))
                        {
                          v1243 = (_QWORD *)(v238[10] + 8 * v1265);
                        }
                        else
                        {
                          v1243 = (_QWORD *)v238[11];
                        }
                        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v1243 + 8))(*v1243, v393);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v393 += 8;
        ++v391;
      }
      while (v391 != (unint64_t *)v392);
    }
  }
  if ((_QWORD *)v239 == v243)
  {
    v394 = (unint64_t *)v238[7];
    v395 = (uint64_t *)v238[8];
    if (v394 != (unint64_t *)v395)
    {
      v396 = (_QWORD *)v238[10];
      do
      {
        v1270 = *((unsigned int *)v394 + 1);
        v1271 = v1270 >> 7;
        v1272 = v235[4];
        if (v1270 >> 7 < (v235[5] - v1272) >> 3)
        {
          v1273 = *(_QWORD *)(v1272 + 8 * v1271);
          if (v1273)
          {
            v1274 = *(unsigned __int16 *)(v1273 + 2 * (v1270 & 0x7F));
            v1276 = v235[7];
            v1275 = v235[8];
            if (v1274 < (v1275 - v1276) >> 3)
            {
              v1277 = v1276 + 8 * v1274;
              if (v1277 != v1275 && *(_DWORD *)(v1277 + 4) == (_DWORD)v1270)
              {
                v1279 = v236[4];
                v1280 = (v236[5] - v1279) >> 3;
                if (v1271 < v1280)
                {
                  v1281 = *(_QWORD *)(v1279 + 8 * v1271);
                  if (v1281)
                  {
                    v1282 = *(unsigned __int16 *)(v1281 + 2 * (v1270 & 0x7F));
                    v1284 = v236[7];
                    v1283 = v236[8];
                    v1285 = (v1283 - v1284) >> 3;
                    if (v1285 > v1282)
                    {
                      v1286 = v1284 + 8 * v1282;
                      if (v1286 != v1283 && *(_DWORD *)(v1286 + 4) == (_DWORD)v1270)
                      {
                        v1288 = *v394;
                        v1289 = *v394 >> 39;
                        if (v1289 < v1280
                          && (v1290 = *(_QWORD *)(v1279 + 8 * v1289)) != 0
                          && (v1291 = *(unsigned __int16 *)(v1290 + 2 * (HIDWORD(v1288) & 0x7F)), v1285 > v1291)
                          && ((v1292 = HIDWORD(v1288), v1293 = v1284 + 8 * v1291, v1293 != v1283)
                            ? (v1294 = *(_DWORD *)(v1293 + 4) == (_DWORD)v1292)
                            : (v1294 = 0),
                              v1294))
                        {
                          v1269 = v236[10] + 8 * v1291;
                        }
                        else
                        {
                          v1269 = v236[11];
                        }
                        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v396 + 8))(*v396, v1269);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v396;
        ++v394;
      }
      while (v394 != (unint64_t *)v395);
    }
  }
  v245 = *((_QWORD *)v2986 + 55);
  v246 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v245);
  v247 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v245);
  HasARLighting = gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(v245);
  v249 = (_QWORD *)HasARLighting;
  v250 = HasARLighting + 32;
  v251 = (unint64_t *)v246[7];
  v252 = (uint64_t *)v246[8];
  if (v247[8] - v247[7] >= (unint64_t)((char *)v252 - (char *)v251))
    v253 = v246 + 4;
  else
    v253 = v247 + 4;
  if (*(_QWORD *)(HasARLighting + 64) - *(_QWORD *)(HasARLighting + 56) >= v253[4] - v253[3])
    v254 = v253;
  else
    v254 = (_QWORD *)(HasARLighting + 32);
  if (v246 + 4 == v254 && v251 != (unint64_t *)v252)
  {
    v261 = &off_1E426D000;
    do
    {
      v471 = *((unsigned int *)v251 + 1);
      v472 = v471 >> 7;
      v473 = v247[4];
      v474 = (v247[5] - v473) >> 3;
      if (v471 >> 7 < v474)
      {
        v475 = *(_QWORD *)(v473 + 8 * v472);
        if (v475)
        {
          v476 = *(unsigned __int16 *)(v475 + 2 * (v471 & 0x7F));
          v478 = v247[7];
          v477 = v247[8];
          v479 = (v477 - v478) >> 3;
          if (v479 > v476)
          {
            v480 = v478 + 8 * v476;
            if (v480 != v477 && *(_DWORD *)(v480 + 4) == (_DWORD)v471)
            {
              v482 = v249[4];
              v483 = (v249[5] - v482) >> 3;
              if (v472 < v483)
              {
                v484 = *(_QWORD *)(v482 + 8 * v472);
                if (v484)
                {
                  v485 = *(unsigned __int16 *)(v484 + 2 * (v471 & 0x7F));
                  v487 = v249[7];
                  v486 = v249[8];
                  v488 = (v486 - v487) >> 3;
                  if (v488 > v485)
                  {
                    v489 = v487 + 8 * v485;
                    if (v489 != v486 && *(_DWORD *)(v489 + 4) == (_DWORD)v471)
                    {
                      v491 = *v251;
                      v492 = HIDWORD(*v251);
                      v493 = *v251 >> 39;
                      if (v493 < v474
                        && (v494 = *(_QWORD *)(v473 + 8 * v493)) != 0
                        && (v495 = *(unsigned __int16 *)(v494 + 2 * (HIDWORD(v491) & 0x7F)), v479 > v495)
                        && ((v496 = v478 + 8 * v495, v496 != v477)
                          ? (v497 = *(_DWORD *)(v496 + 4) == (_DWORD)v492)
                          : (v497 = 0),
                            v497))
                      {
                        v498 = v247[10] + 8 * v495;
                      }
                      else
                      {
                        v498 = v247[11];
                      }
                      v2975 = v498;
                      if (v493 < v483
                        && (v499 = *(_QWORD *)(v482 + 8 * v493)) != 0
                        && (v500 = *(unsigned __int16 *)(v499 + 2 * (HIDWORD(v491) & 0x7F)), v488 > v500)
                        && ((v501 = v487 + 8 * v500, v501 != v486)
                          ? (v502 = *(_DWORD *)(v501 + 4) == (_DWORD)v492)
                          : (v502 = 0),
                            v502))
                      {
                        v503 = (uint64_t *)(v249[10] + 8 * v500);
                      }
                      else
                      {
                        v503 = (uint64_t *)v249[11];
                      }
                      objc_msgSend(v261[132], "sharedSettings");
                      v504 = (void *)objc_claimAutoreleasedReturnValue();
                      v505 = *v503;
                      objc_msgSend(v504, "arDebugStylingPOIEnvMapIntensity");
                      v507 = v506;
                      objc_msgSend(v504, "arDebugStylingPOILightIntensity");
                      (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v505 + 8))(v505, v2975, v507, v508);

                      v261 = &off_1E426D000;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v251;
    }
    while (v251 != (unint64_t *)v252);
  }
  if (v247 + 4 == v254)
  {
    v397 = (unint64_t *)v247[7];
    v398 = (uint64_t *)v247[8];
    if (v397 != (unint64_t *)v398)
    {
      v399 = v247[10];
      v400 = &off_1E426D000;
      do
      {
        v401 = *((unsigned int *)v397 + 1);
        v402 = v401 >> 7;
        v403 = v246[4];
        if (v401 >> 7 < (v246[5] - v403) >> 3)
        {
          v404 = *(_QWORD *)(v403 + 8 * v402);
          if (v404)
          {
            v405 = *(unsigned __int16 *)(v404 + 2 * (v401 & 0x7F));
            v407 = v246[7];
            v406 = v246[8];
            if (v405 < (v406 - v407) >> 3)
            {
              v408 = v407 + 8 * v405;
              if (v408 != v406 && *(_DWORD *)(v408 + 4) == (_DWORD)v401)
              {
                v410 = v249[4];
                v411 = (v249[5] - v410) >> 3;
                if (v402 < v411)
                {
                  v412 = *(_QWORD *)(v410 + 8 * v402);
                  if (v412)
                  {
                    v413 = *(unsigned __int16 *)(v412 + 2 * (v401 & 0x7F));
                    v415 = v249[7];
                    v414 = v249[8];
                    v416 = (v414 - v415) >> 3;
                    if (v416 > v413)
                    {
                      v417 = v415 + 8 * v413;
                      if (v417 != v414 && *(_DWORD *)(v417 + 4) == (_DWORD)v401)
                      {
                        v419 = *v397;
                        v420 = *v397 >> 39;
                        if (v420 < v411
                          && (v421 = *(_QWORD *)(v410 + 8 * v420)) != 0
                          && (v422 = *(unsigned __int16 *)(v421 + 2 * (HIDWORD(v419) & 0x7F)), v416 > v422)
                          && ((v423 = HIDWORD(v419), v424 = v415 + 8 * v422, v424 != v414)
                            ? (v425 = *(_DWORD *)(v424 + 4) == (_DWORD)v423)
                            : (v425 = 0),
                              v425))
                        {
                          v426 = (uint64_t *)(v249[10] + 8 * v422);
                        }
                        else
                        {
                          v426 = (uint64_t *)v249[11];
                        }
                        objc_msgSend(v400[132], "sharedSettings");
                        v427 = (void *)objc_claimAutoreleasedReturnValue();
                        v428 = *v426;
                        objc_msgSend(v427, "arDebugStylingPOIEnvMapIntensity");
                        v430 = v429;
                        objc_msgSend(v427, "arDebugStylingPOILightIntensity");
                        (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v428 + 8))(v428, v399, v430, v431);

                        v400 = &off_1E426D000;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v399 += 8;
        ++v397;
      }
      while (v397 != (unint64_t *)v398);
    }
  }
  if ((_QWORD *)v250 == v254)
  {
    v432 = (unint64_t *)v249[7];
    v433 = (uint64_t *)v249[8];
    if (v432 != (unint64_t *)v433)
    {
      v434 = (uint64_t *)v249[10];
      do
      {
        v435 = *((unsigned int *)v432 + 1);
        v436 = v435 >> 7;
        v437 = v246[4];
        if (v435 >> 7 < (v246[5] - v437) >> 3)
        {
          v438 = *(_QWORD *)(v437 + 8 * v436);
          if (v438)
          {
            v439 = *(unsigned __int16 *)(v438 + 2 * (v435 & 0x7F));
            v441 = v246[7];
            v440 = v246[8];
            if (v439 < (v440 - v441) >> 3)
            {
              v442 = v441 + 8 * v439;
              if (v442 != v440 && *(_DWORD *)(v442 + 4) == (_DWORD)v435)
              {
                v444 = v247[4];
                v445 = (v247[5] - v444) >> 3;
                if (v436 < v445)
                {
                  v446 = *(_QWORD *)(v444 + 8 * v436);
                  if (v446)
                  {
                    v447 = *(unsigned __int16 *)(v446 + 2 * (v435 & 0x7F));
                    v449 = v247[7];
                    v448 = v247[8];
                    v450 = (v448 - v449) >> 3;
                    if (v450 > v447)
                    {
                      v451 = v449 + 8 * v447;
                      if (v451 != v448 && *(_DWORD *)(v451 + 4) == (_DWORD)v435)
                      {
                        v453 = *v432;
                        v454 = *v432 >> 39;
                        if (v454 < v445
                          && (v455 = *(_QWORD *)(v444 + 8 * v454)) != 0
                          && (v456 = *(unsigned __int16 *)(v455 + 2 * (HIDWORD(v453) & 0x7F)), v450 > v456)
                          && ((v457 = HIDWORD(v453), v458 = v449 + 8 * v456, v458 != v448)
                            ? (v459 = *(_DWORD *)(v458 + 4) == (_DWORD)v457)
                            : (v459 = 0),
                              v459))
                        {
                          v460 = v247[10] + 8 * v456;
                        }
                        else
                        {
                          v460 = v247[11];
                        }
                        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                        v461 = (void *)objc_claimAutoreleasedReturnValue();
                        v462 = *v434;
                        objc_msgSend(v461, "arDebugStylingPOIEnvMapIntensity");
                        v464 = v463;
                        objc_msgSend(v461, "arDebugStylingPOILightIntensity");
                        (*(void (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v462 + 8))(v462, v460, v464, v465);

                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v434;
        ++v432;
      }
      while (v432 != (unint64_t *)v433);
    }
  }
  v256 = *((_QWORD *)v2986 + 55);
  v257 = (_QWORD *)*((_QWORD *)a2 + 1);
  v258 = (int8x8_t)v257[1];
  if (!*(_QWORD *)&v258)
    goto LABEL_676;
  v259 = (uint8x8_t)vcnt_s8(v258);
  v259.i16[0] = vaddlv_u8(v259);
  if (v259.u32[0] > 1uLL)
  {
    v260 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v258 <= 0x1AF456233693CD46uLL)
      v260 = 0x1AF456233693CD46uLL % *(_QWORD *)&v258;
  }
  else
  {
    v260 = (*(_QWORD *)&v258 - 1) & 0x1AF456233693CD46;
  }
  v466 = *(_QWORD **)(*v257 + 8 * v260);
  if (!v466)
    goto LABEL_675;
  v467 = (_QWORD *)*v466;
  if (!v467)
    goto LABEL_675;
  if (v259.u32[0] < 2uLL)
  {
    v468 = *(_QWORD *)&v258 - 1;
    while (1)
    {
      v470 = v467[1];
      if (v470 == 0x1AF456233693CD46)
      {
        if (v467[2] == 0x1AF456233693CD46)
          goto LABEL_673;
      }
      else if ((v470 & v468) != v260)
      {
        goto LABEL_675;
      }
      v467 = (_QWORD *)*v467;
      if (!v467)
        goto LABEL_675;
    }
  }
  while (2)
  {
    v469 = v467[1];
    if (v469 != 0x1AF456233693CD46)
    {
      if (v469 >= *(_QWORD *)&v258)
        v469 %= *(_QWORD *)&v258;
      if (v469 != v260)
        goto LABEL_675;
      goto LABEL_552;
    }
    if (v467[2] != 0x1AF456233693CD46)
    {
LABEL_552:
      v467 = (_QWORD *)*v467;
      if (!v467)
        goto LABEL_675;
      continue;
    }
    break;
  }
LABEL_673:
  v573 = (int8x8_t *)v467[5];
  if (*(_QWORD *)&v573[1] == 0x1AF456233693CD46)
  {
    v258 = v573[4];
    goto LABEL_676;
  }
LABEL_675:
  v258 = 0;
LABEL_676:
  v574 = (_OWORD *)(*(_QWORD *)&v258 + 808);
  v575 = v574[5];
  v2991[4] = v574[4];
  v2991[5] = v575;
  v576 = v574[7];
  v2991[6] = v574[6];
  v2991[7] = v576;
  v577 = v574[1];
  v2991[0] = *v574;
  v2991[1] = v577;
  v578 = v574[3];
  v2991[2] = v574[2];
  v2991[3] = v578;
  v579 = gdc::Registry::storage<arComponents::WorldTransform>(v256);
  v580 = (_QWORD *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(v256);
  v582 = v580[7];
  v581 = v580[8];
  v584 = *(unint64_t **)(v579 + 56);
  v583 = *(uint64_t **)(v579 + 64);
  v2967 = (_QWORD *)v579;
  if (v581 - v582 >= (unint64_t)((char *)v583 - (char *)v584))
    v585 = (_QWORD *)(v579 + 32);
  else
    v585 = v580 + 4;
  v2970 = v585;
  v2976 = v580 + 4;
  if ((_QWORD *)(v579 + 32) == v585 && v584 != (unint64_t *)v583)
  {
    v586 = v580[4];
    v587 = (v580[5] - v586) >> 3;
    v588 = (v581 - v582) >> 3;
    v589 = (float32x4_t *)v580[11];
    v2966 = v580[10];
    v2968 = v580;
    v590 = v2967[10] + 40;
    do
    {
      v607 = *((unsigned int *)v584 + 1);
      if (v607 >> 7 < v587)
      {
        v608 = *(_QWORD *)(v586 + 8 * (v607 >> 7));
        if (v608)
        {
          v609 = *(unsigned __int16 *)(v608 + 2 * (v607 & 0x7F));
          if (v588 > v609)
          {
            v610 = v582 + 8 * v609;
            if (v610 != v581 && *(_DWORD *)(v610 + 4) == (_DWORD)v607)
            {
              v612 = *v584;
              v613 = *v584 >> 39;
              v614 = v589;
              if (v613 < v587)
              {
                v615 = *(_QWORD *)(v586 + 8 * v613);
                v614 = v589;
                if (v615)
                {
                  v616 = *(unsigned __int16 *)(v615 + 2 * (HIDWORD(v612) & 0x7F));
                  v614 = v589;
                  if (v588 > v616)
                  {
                    v617 = v582 + 8 * v616;
                    if (*(_DWORD *)(v617 + 4) != HIDWORD(v612) || v617 == v581)
                      v614 = v589;
                    else
                      v614 = (float32x4_t *)(v2966 + (v616 << 6));
                  }
                }
              }
              v591 = *(double *)(v590 - 16);
              v592 = *(double *)(v590 - 8);
              v593 = *(double *)v590;
              v594 = *(double *)(v590 + 8);
              v595 = v592 + v592;
              v596 = (v592 + v592) * v592;
              v597 = (v593 + v593) * v593;
              v598 = v591 + v591;
              v599 = (v591 + v591) * v592;
              v600 = (v593 + v593) * v594;
              v601 = *(double *)v590 * (v591 + v591);
              v602 = v594 * v595;
              v603 = v594 * v595 + v601;
              v604 = 1.0 - (v591 + v591) * v591;
              v605 = v595 * *(double *)v590;
              v606 = v594 * v598;
              v3002.f64[0] = 1.0 - (v596 + v597);
              v3002.f64[1] = v600 + v599;
              v3004.f64[0] = v599 - v600;
              v3004.f64[1] = v604 - v597;
              v3006.f64[0] = v603;
              v3006.f64[1] = v605 - v606;
              v3003.f64[0] = v601 - v602;
              v3005 = (float64x2_t)COERCE_UNSIGNED_INT64(v606 + v605);
              v3007.f64[0] = v604 - v596;
              v3003.f64[1] = 0.0;
              v3007.f64[1] = 0.0;
              v3008 = *(float64x2_t *)(v590 - 40);
              v3009.f64[0] = *(float64_t *)(v590 - 24);
              v3009.f64[1] = 1.0;
              v2999 = 0u;
              v3000 = 0u;
              v2997 = 0u;
              v2998 = 0u;
              v2995 = 0u;
              v2996 = 0u;
              v2994 = 0u;
              v3001 = 0x3FF0000000000000;
              v2993 = *(_QWORD *)(v590 + 16);
              *(_QWORD *)&v2996 = *(_QWORD *)(v590 + 24);
              *((_QWORD *)&v2998 + 1) = *(_QWORD *)(v590 + 32);
              gm::operator*<double,4,4,4>(v2992, v3002.f64, (double *)&v2993);
              gm::operator*<double,4,4,4>(v3002.f64, (double *)v2991, v2992);
              *v614 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3002), v3003);
              v614[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3004), v3005);
              v614[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3006), v3007);
              v614[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3008), v3009);
              v580 = v2968;
            }
          }
        }
      }
      ++v584;
      v590 += 80;
    }
    while (v584 != (unint64_t *)v583);
  }
  if (v2976 == v2970)
  {
    v624 = (unint64_t *)v580[7];
    v625 = (uint64_t *)v580[8];
    if (v624 != (unint64_t *)v625)
    {
      v626 = v2967[4];
      v627 = (v2967[5] - v626) >> 3;
      v629 = v2967[7];
      v628 = v2967[8];
      v630 = (v628 - v629) >> 3;
      v631 = v2967[11];
      v2977 = v2967[10];
      v632 = (float32x4_t *)(v580[10] + 32);
      do
      {
        v650 = *((unsigned int *)v624 + 1);
        if (v650 >> 7 < v627)
        {
          v651 = *(_QWORD *)(v626 + 8 * (v650 >> 7));
          if (v651)
          {
            v652 = *(unsigned __int16 *)(v651 + 2 * (v650 & 0x7F));
            if (v630 > v652)
            {
              v653 = v629 + 8 * v652;
              if (v653 != v628 && *(_DWORD *)(v653 + 4) == (_DWORD)v650)
              {
                v655 = *v624;
                v656 = *v624 >> 39;
                v657 = v631;
                if (v656 < v627)
                {
                  v658 = *(_QWORD *)(v626 + 8 * v656);
                  v657 = v631;
                  if (v658)
                  {
                    v659 = *(unsigned __int16 *)(v658 + 2 * (HIDWORD(v655) & 0x7F));
                    v657 = v631;
                    if (v630 > v659)
                    {
                      v660 = HIDWORD(v655);
                      v661 = v629 + 8 * v659;
                      v662 = *(_DWORD *)(v661 + 4) != (_DWORD)v660 || v661 == v628;
                      v657 = v2977 + 80 * v659;
                      if (v662)
                        v657 = v631;
                    }
                  }
                }
                v633 = *(double *)(v657 + 24);
                v634 = *(double *)(v657 + 32);
                v635 = *(double *)(v657 + 40);
                v636 = *(double *)(v657 + 48);
                v637 = v634 + v634;
                v638 = (v634 + v634) * v634;
                v639 = (v635 + v635) * v635;
                v640 = v633 + v633;
                v641 = (v633 + v633) * v634;
                v642 = (v635 + v635) * v636;
                v643 = v635 * (v633 + v633);
                v644 = v636 * v637;
                v645 = v636 * v637 + v643;
                v646 = 1.0 - (v633 + v633) * v633;
                v647 = v637 * v635;
                v648 = v636 * v640;
                v3002.f64[0] = 1.0 - (v638 + v639);
                v3002.f64[1] = v642 + v641;
                v3004.f64[0] = v641 - v642;
                v3004.f64[1] = v646 - v639;
                v3006.f64[0] = v645;
                v3006.f64[1] = v647 - v648;
                v3003.f64[0] = v643 - v644;
                v3005 = (float64x2_t)COERCE_UNSIGNED_INT64(v648 + v647);
                v3007.f64[0] = v646 - v638;
                v3003.f64[1] = 0.0;
                v3007.f64[1] = 0.0;
                v3008 = *(float64x2_t *)v657;
                v3009.f64[0] = *(float64_t *)(v657 + 16);
                v3009.f64[1] = 1.0;
                v2999 = 0u;
                v3000 = 0u;
                v2997 = 0u;
                v2998 = 0u;
                v2995 = 0u;
                v2996 = 0u;
                v2994 = 0u;
                v3001 = 0x3FF0000000000000;
                v649 = *(_QWORD *)(v657 + 64);
                v2993 = *(_QWORD *)(v657 + 56);
                *(_QWORD *)&v2996 = v649;
                *((_QWORD *)&v2998 + 1) = *(_QWORD *)(v657 + 72);
                gm::operator*<double,4,4,4>(v2992, v3002.f64, (double *)&v2993);
                gm::operator*<double,4,4,4>(v3002.f64, (double *)v2991, v2992);
                v632[-2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3002), v3003);
                v632[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3004), v3005);
                *v632 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3006), v3007);
                v632[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3008), v3009);
              }
            }
          }
        }
        ++v624;
        v632 += 4;
      }
      while (v624 != (unint64_t *)v625);
    }
  }
  v619 = *((_QWORD *)v2986 + 55);
  v620 = (_QWORD *)*((_QWORD *)a2 + 1);
  v621 = (int8x8_t)v620[1];
  if (v621)
  {
    v622 = (uint8x8_t)vcnt_s8(v621);
    v622.i16[0] = vaddlv_u8(v622);
    if (v622.u32[0] > 1uLL)
    {
      v623 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v621 <= 0x3070CB6B3C7F21D3uLL)
        v623 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v621;
    }
    else
    {
      v623 = (*(_QWORD *)&v621 - 1) & 0x3070CB6B3C7F21D3;
    }
    v663 = *(_QWORD **)(*v620 + 8 * v623);
    if (v663)
    {
      v664 = (_QWORD *)*v663;
      if (v664)
      {
        if (v622.u32[0] < 2uLL)
        {
          v665 = *(_QWORD *)&v621 - 1;
          while (1)
          {
            v667 = v664[1];
            if (v667 == 0x3070CB6B3C7F21D3)
            {
              if (v664[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_743;
            }
            else if ((v667 & v665) != v623)
            {
              goto LABEL_743;
            }
            v664 = (_QWORD *)*v664;
            if (!v664)
              goto LABEL_743;
          }
        }
        do
        {
          v666 = v664[1];
          if (v666 == 0x3070CB6B3C7F21D3)
          {
            if (v664[2] == 0x3070CB6B3C7F21D3)
              break;
          }
          else
          {
            if (v666 >= *(_QWORD *)&v621)
              v666 %= *(_QWORD *)&v621;
            if (v666 != v623)
              break;
          }
          v664 = (_QWORD *)*v664;
        }
        while (v664);
      }
    }
  }
LABEL_743:
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v3002);
  v668 = (_QWORD *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(v619);
  v669 = gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(v619);
  v670 = (_QWORD *)v669;
  v671 = v669 + 32;
  v673 = v668[7];
  v672 = v668[8];
  if (*(_QWORD *)(v669 + 64) - *(_QWORD *)(v669 + 56) >= (unint64_t)(v672 - v673))
    v674 = v668 + 4;
  else
    v674 = (_QWORD *)(v669 + 32);
  if (v668 + 4 == v674 && v673 != v672)
  {
    v703 = v668[10];
    do
    {
      v704 = *(unsigned int *)(v673 + 4);
      v705 = v670[4];
      if (v704 >> 7 < (v670[5] - v705) >> 3)
      {
        v706 = *(_QWORD *)(v705 + 8 * (v704 >> 7));
        if (v706)
        {
          v707 = *(unsigned __int16 *)(v706 + 2 * (v704 & 0x7F));
          v709 = v670[7];
          v708 = v670[8];
          if (v707 < (v708 - v709) >> 3)
          {
            v710 = v709 + 8 * v707;
            if (v710 != v708 && *(_DWORD *)(v710 + 4) == (_DWORD)v704)
            {
              v712 = v3002;
              if (*(_QWORD *)&v3002.f64[1])
              {
                v713 = (unint64_t *)(*(_QWORD *)&v3002.f64[1] + 8);
                do
                  v714 = __ldxr(v713);
                while (__stxr(v714 + 1, v713));
              }
              v715 = *(std::__shared_weak_count **)(v703 + 8);
              *(float64x2_t *)v703 = v712;
              if (v715)
              {
                p_shared_owners = (unint64_t *)&v715->__shared_owners_;
                do
                  v717 = __ldaxr(p_shared_owners);
                while (__stlxr(v717 - 1, p_shared_owners));
                if (!v717)
                {
                  ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
                  std::__shared_weak_count::__release_weak(v715);
                }
              }
            }
          }
        }
      }
      v703 += 16;
      v673 += 8;
    }
    while (v673 != v672);
  }
  if ((_QWORD *)v671 == v674)
  {
    v728 = (unint64_t *)v670[7];
    v729 = (uint64_t *)v670[8];
    while (1)
    {
      if (v728 == (unint64_t *)v729)
        goto LABEL_752;
      v730 = *((unsigned int *)v728 + 1);
      v731 = v668[4];
      v732 = (v668[5] - v731) >> 3;
      if (v730 >> 7 < v732)
      {
        v733 = *(_QWORD *)(v731 + 8 * (v730 >> 7));
        if (v733)
        {
          v734 = *(unsigned __int16 *)(v733 + 2 * (v730 & 0x7F));
          v736 = v668[7];
          v735 = v668[8];
          v737 = (v735 - v736) >> 3;
          if (v737 > v734)
          {
            v738 = v736 + 8 * v734;
            if (v738 != v735 && *(_DWORD *)(v738 + 4) == (_DWORD)v730)
              break;
          }
        }
      }
LABEL_788:
      ++v728;
    }
    v740 = *v728;
    v741 = *v728 >> 39;
    if (v741 < v732
      && (v742 = *(_QWORD *)(v731 + 8 * v741)) != 0
      && (v743 = *(unsigned __int16 *)(v742 + 2 * (HIDWORD(v740) & 0x7F)), v737 > v743)
      && ((v744 = HIDWORD(v740), v745 = v736 + 8 * v743, v745 != v735)
        ? (v746 = *(_DWORD *)(v745 + 4) == (_DWORD)v744)
        : (v746 = 0),
          v746))
    {
      v747 = (float64_t *)(v668[10] + 16 * v743);
      v748 = v3002.f64[1];
      v749 = v3002.f64[0];
      if (!*(_QWORD *)&v3002.f64[1])
        goto LABEL_808;
    }
    else
    {
      v747 = (float64_t *)v668[11];
      v748 = v3002.f64[1];
      v749 = v3002.f64[0];
      if (!*(_QWORD *)&v3002.f64[1])
        goto LABEL_808;
    }
    v750 = (unint64_t *)(*(_QWORD *)&v748 + 8);
    do
      v751 = __ldxr(v750);
    while (__stxr(v751 + 1, v750));
LABEL_808:
    v752 = (std::__shared_weak_count *)*((_QWORD *)v747 + 1);
    *v747 = v749;
    v747[1] = v748;
    if (v752)
    {
      v753 = (unint64_t *)&v752->__shared_owners_;
      do
        v754 = __ldaxr(v753);
      while (__stlxr(v754 - 1, v753));
      if (!v754)
      {
        ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
        std::__shared_weak_count::__release_weak(v752);
      }
    }
    goto LABEL_788;
  }
LABEL_752:
  v676 = v3002.f64[1];
  if (*(_QWORD *)&v3002.f64[1])
  {
    v677 = (unint64_t *)(*(_QWORD *)&v3002.f64[1] + 8);
    do
      v678 = __ldaxr(v677);
    while (__stlxr(v678 - 1, v677));
    if (!v678)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v676 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v676));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v676);
    }
  }
  v679 = *((_QWORD *)v2986 + 55);
  v680 = (_QWORD *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(v679);
  v681 = (_QWORD *)gdc::Registry::storage<arComponents::StyleColor>(v679);
  v682 = (_QWORD *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v679);
  v684 = (unint64_t *)v681[7];
  v683 = (uint64_t *)v681[8];
  v686 = (uint64_t *)v680[7];
  v685 = (uint64_t *)v680[8];
  if ((char *)v683 - (char *)v684 >= (unint64_t)((char *)v685 - (char *)v686))
    v687 = v680 + 4;
  else
    v687 = v681 + 4;
  v689 = (unint64_t *)v682[7];
  v688 = (uint64_t *)v682[8];
  v690 = (char *)v688 - (char *)v689;
  if ((unint64_t)((char *)v688 - (char *)v689) < v687[4] - v687[3])
    v687 = v682 + 4;
  if (v680 + 4 == v687 && v686 != v685)
  {
    v718 = (uint64_t *)v680[10];
    v719 = v681[4];
    v720 = (v681[5] - v719) >> 3;
    v721 = ((char *)v683 - (char *)v684) >> 3;
    v722 = v682[4];
    v723 = (v682[5] - v722) >> 3;
    v724 = v690 >> 3;
    v725 = (float *)v681[11];
    v2978 = v681[10];
    v726 = (float *)v682[11];
    v2971 = v682[10];
    v727 = (unint64_t *)v680[7];
    do
    {
      v765 = *((unsigned int *)v727 + 1);
      v766 = v765 >> 7;
      if (v765 >> 7 < v720)
      {
        v767 = *(_QWORD *)(v719 + 8 * v766);
        if (v767)
        {
          v768 = *(unsigned __int16 *)(v767 + 2 * (v765 & 0x7F));
          if (v721 > v768)
          {
            v769 = (uint64_t *)&v684[v768];
            v770 = v769 != v683 && *((_DWORD *)v769 + 1) == (_DWORD)v765;
            if (v770 && v766 < v723)
            {
              v772 = *(_QWORD *)(v722 + 8 * v766);
              if (v772)
              {
                v773 = *(unsigned __int16 *)(v772 + 2 * (v765 & 0x7F));
                if (v724 > v773)
                {
                  v774 = (uint64_t *)&v689[v773];
                  if (v774 != v688 && *((_DWORD *)v774 + 1) == (_DWORD)v765)
                  {
                    v776 = *v727;
                    v777 = HIDWORD(*v727);
                    v778 = *v727 >> 39;
                    v779 = v725;
                    if (v778 < v720)
                    {
                      v780 = *(_QWORD *)(v719 + 8 * v778);
                      v779 = v725;
                      if (v780)
                      {
                        v781 = *(unsigned __int16 *)(v780 + 2 * (HIDWORD(v776) & 0x7F));
                        v779 = v725;
                        if (v721 > v781)
                        {
                          v782 = HIDWORD(v684[v781]) != (_DWORD)v777 || &v684[v781] == (unint64_t *)v683;
                          v783 = (float *)(v2978 + 16 * v781);
                          if (v782)
                            v779 = v725;
                          else
                            v779 = v783;
                        }
                      }
                    }
                    v784 = v726;
                    if (v778 < v723)
                    {
                      v785 = *(_QWORD *)(v722 + 8 * v778);
                      v784 = v726;
                      if (v785)
                      {
                        v786 = *(unsigned __int16 *)(v785 + 2 * (HIDWORD(v776) & 0x7F));
                        v784 = v726;
                        if (v724 > v786)
                        {
                          v787 = (uint64_t *)&v689[v786];
                          v788 = *((_DWORD *)v787 + 1) != (_DWORD)v777 || v787 == v688;
                          v789 = (float *)(v2971 + 4 * v786);
                          if (v788)
                            v784 = v726;
                          else
                            v784 = v789;
                        }
                      }
                    }
                    v755 = *v718;
                    v756 = *v784;
                    _S1 = *v779;
                    _S2 = *((_DWORD *)v779 + 1);
                    _S3 = *((_DWORD *)v779 + 2);
                    v760 = *(_QWORD *)(*v718 + 8);
                    v761 = *(_WORD **)(*v718 + 72);
                    _S0 = v779[3] * v756;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    *v761 = LOWORD(_S1);
                    v761[1] = _S2;
                    v761[2] = _S3;
                    v761[3] = LOWORD(_S0);
                    if (*(_QWORD *)(v755 + 64) > v760)
                      v760 = *(_QWORD *)(v755 + 64);
                    *(_QWORD *)(v755 + 56) = 0;
                    *(_QWORD *)(v755 + 64) = v760;
                  }
                }
              }
            }
          }
        }
      }
      ++v718;
      ++v727;
    }
    while (v727 != (unint64_t *)v685);
  }
  if (v681 + 4 == v687 && v684 != (unint64_t *)v683)
  {
    v692 = v680[4];
    v693 = (v680[5] - v692) >> 3;
    v694 = v685 - v686;
    v695 = v682[4];
    v696 = (v682[5] - v695) >> 3;
    v697 = v690 >> 3;
    v698 = v680[10];
    v699 = (uint64_t *)v680[11];
    v700 = v682[10];
    v701 = (float *)v682[11];
    v702 = v681[10] + 8;
    do
    {
      v797 = *((unsigned int *)v684 + 1);
      v798 = v797 >> 7;
      if (v797 >> 7 < v693)
      {
        v799 = *(_QWORD *)(v692 + 8 * v798);
        if (v799)
        {
          v800 = *(unsigned __int16 *)(v799 + 2 * (v797 & 0x7F));
          if (v694 > v800)
          {
            v801 = &v686[v800];
            v802 = v801 != v685 && *((_DWORD *)v801 + 1) == (_DWORD)v797;
            if (v802 && v798 < v696)
            {
              v804 = *(_QWORD *)(v695 + 8 * v798);
              if (v804)
              {
                v805 = *(unsigned __int16 *)(v804 + 2 * (v797 & 0x7F));
                if (v697 > v805)
                {
                  v806 = (uint64_t *)&v689[v805];
                  if (v806 != v688 && *((_DWORD *)v806 + 1) == (_DWORD)v797)
                  {
                    v808 = *v684;
                    v809 = HIDWORD(*v684);
                    v810 = *v684 >> 39;
                    v811 = v699;
                    if (v810 < v693)
                    {
                      v812 = *(_QWORD *)(v692 + 8 * v810);
                      v811 = v699;
                      if (v812)
                      {
                        v813 = *(unsigned __int16 *)(v812 + 2 * (HIDWORD(v808) & 0x7F));
                        v811 = v699;
                        if (v694 > v813)
                        {
                          v814 = 8 * v813;
                          v815 = &v686[v813];
                          v816 = *((_DWORD *)v815 + 1) != (_DWORD)v809 || v815 == v685;
                          v811 = (uint64_t *)(v698 + v814);
                          if (v816)
                            v811 = v699;
                        }
                      }
                    }
                    v817 = v701;
                    if (v810 < v696)
                    {
                      v818 = *(_QWORD *)(v695 + 8 * v810);
                      v817 = v701;
                      if (v818)
                      {
                        v819 = *(unsigned __int16 *)(v818 + 2 * (HIDWORD(v808) & 0x7F));
                        v817 = v701;
                        if (v697 > v819)
                        {
                          v820 = (uint64_t *)&v689[v819];
                          if (*((_DWORD *)v820 + 1) != (_DWORD)v809 || v820 == v688)
                            v817 = v701;
                          else
                            v817 = (float *)(v700 + 4 * v819);
                        }
                      }
                    }
                    v790 = *v811;
                    _S1 = *(_DWORD *)(v702 - 8);
                    _S2 = *(_DWORD *)(v702 - 4);
                    _S3 = *(_DWORD *)v702;
                    v794 = *(_QWORD *)(*v811 + 8);
                    v795 = *(_WORD **)(*v811 + 72);
                    _S0 = *(float *)(v702 + 4) * *v817;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    *v795 = _S1;
                    v795[1] = _S2;
                    v795[2] = _S3;
                    v795[3] = LOWORD(_S0);
                    if (*(_QWORD *)(v790 + 64) > v794)
                      v794 = *(_QWORD *)(v790 + 64);
                    *(_QWORD *)(v790 + 56) = 0;
                    *(_QWORD *)(v790 + 64) = v794;
                  }
                }
              }
            }
          }
        }
      }
      ++v684;
      v702 += 16;
    }
    while (v684 != (unint64_t *)v683);
  }
  if (v682 + 4 == v687 && v689 != (unint64_t *)v688)
  {
    v822 = (float *)v682[10];
    v823 = v680[4];
    v824 = (v680[5] - v823) >> 3;
    v826 = v680[7];
    v825 = v680[8];
    v827 = (v825 - v826) >> 3;
    v828 = v681[4];
    v829 = (v681[5] - v828) >> 3;
    v831 = v681[7];
    v830 = v681[8];
    v832 = (v830 - v831) >> 3;
    v833 = v680[10];
    v834 = (uint64_t *)v680[11];
    v835 = v681[10];
    v836 = (float *)v681[11];
    do
    {
      v844 = *((unsigned int *)v689 + 1);
      v845 = v844 >> 7;
      if (v844 >> 7 < v824)
      {
        v846 = *(_QWORD *)(v823 + 8 * v845);
        if (v846)
        {
          v847 = *(unsigned __int16 *)(v846 + 2 * (v844 & 0x7F));
          if (v827 > v847)
          {
            v848 = v826 + 8 * v847;
            v849 = v848 != v825 && *(_DWORD *)(v848 + 4) == (_DWORD)v844;
            if (v849 && v845 < v829)
            {
              v851 = *(_QWORD *)(v828 + 8 * v845);
              if (v851)
              {
                v852 = *(unsigned __int16 *)(v851 + 2 * (v844 & 0x7F));
                if (v832 > v852)
                {
                  v853 = v831 + 8 * v852;
                  if (v853 != v830 && *(_DWORD *)(v853 + 4) == (_DWORD)v844)
                  {
                    v855 = *v689;
                    v856 = HIDWORD(*v689);
                    v857 = *v689 >> 39;
                    v858 = v834;
                    if (v857 < v824)
                    {
                      v859 = *(_QWORD *)(v823 + 8 * v857);
                      v858 = v834;
                      if (v859)
                      {
                        v860 = *(unsigned __int16 *)(v859 + 2 * (HIDWORD(v855) & 0x7F));
                        v858 = v834;
                        if (v827 > v860)
                        {
                          v861 = 8 * v860;
                          v862 = v826 + 8 * v860;
                          v863 = *(_DWORD *)(v862 + 4) != (_DWORD)v856 || v862 == v825;
                          v858 = (uint64_t *)(v833 + v861);
                          if (v863)
                            v858 = v834;
                        }
                      }
                    }
                    v864 = v836;
                    if (v857 < v829)
                    {
                      v865 = *(_QWORD *)(v828 + 8 * v857);
                      v864 = v836;
                      if (v865)
                      {
                        v866 = *(unsigned __int16 *)(v865 + 2 * (HIDWORD(v855) & 0x7F));
                        v864 = v836;
                        if (v832 > v866)
                        {
                          v867 = v831 + 8 * v866;
                          if (*(_DWORD *)(v867 + 4) != (_DWORD)v856 || v867 == v830)
                            v864 = v836;
                          else
                            v864 = (float *)(v835 + 16 * v866);
                        }
                      }
                    }
                    v837 = *v858;
                    _S1 = *v864;
                    _S2 = *((_DWORD *)v864 + 1);
                    _S3 = *((_DWORD *)v864 + 2);
                    v841 = *(_QWORD *)(*v858 + 8);
                    v842 = *(_WORD **)(*v858 + 72);
                    _S0 = v864[3] * *v822;
                    __asm
                    {
                      FCVT            H0, S0
                      FCVT            H3, S3
                      FCVT            H2, S2
                      FCVT            H1, S1
                    }
                    *v842 = LOWORD(_S1);
                    v842[1] = _S2;
                    v842[2] = _S3;
                    v842[3] = LOWORD(_S0);
                    if (*(_QWORD *)(v837 + 64) > v841)
                      v841 = *(_QWORD *)(v837 + 64);
                    *(_QWORD *)(v837 + 56) = 0;
                    *(_QWORD *)(v837 + 64) = v841;
                  }
                }
              }
            }
          }
        }
      }
      ++v822;
      ++v689;
    }
    while (v689 != (unint64_t *)v688);
  }
  v869 = *((_QWORD *)v2986 + 55);
  v870 = (_QWORD *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(v869);
  v871 = gdc::Registry::storage<arComponents::ViewConstantDataComponent>(v869);
  v872 = (_QWORD *)v871;
  v873 = v871 + 32;
  v875 = (unint64_t *)v870[7];
  v874 = (uint64_t *)v870[8];
  if (*(_QWORD *)(v871 + 64) - *(_QWORD *)(v871 + 56) >= (unint64_t)((char *)v874 - (char *)v875))
    v876 = v870 + 4;
  else
    v876 = (_QWORD *)(v871 + 32);
  if (v870 + 4 == v876 && v875 != (unint64_t *)v874)
  {
    v905 = (_QWORD **)v870[10];
    do
    {
      v907 = *((unsigned int *)v875 + 1);
      v908 = v872[4];
      v909 = (v872[5] - v908) >> 3;
      if (v907 >> 7 < v909)
      {
        v910 = *(_QWORD *)(v908 + 8 * (v907 >> 7));
        if (v910)
        {
          v911 = *(unsigned __int16 *)(v910 + 2 * (v907 & 0x7F));
          v913 = v872[7];
          v912 = v872[8];
          v914 = (v912 - v913) >> 3;
          if (v914 > v911)
          {
            v915 = v913 + 8 * v911;
            if (v915 != v912 && *(_DWORD *)(v915 + 4) == (_DWORD)v907)
            {
              v917 = *v875;
              v918 = *v875 >> 39;
              if (v918 < v909
                && (v919 = *(_QWORD *)(v908 + 8 * v918)) != 0
                && (v920 = *(unsigned __int16 *)(v919 + 2 * (HIDWORD(v917) & 0x7F)), v914 > v920)
                && ((v921 = HIDWORD(v917), v922 = v913 + 8 * v920, v922 != v912)
                  ? (v923 = *(_DWORD *)(v922 + 4) == (_DWORD)v921)
                  : (v923 = 0),
                    v923))
              {
                v906 = (_DWORD *)(v872[10] + (v920 << 6));
              }
              else
              {
                v906 = (_DWORD *)v872[11];
              }
              applyViewConstantData(gdc::Registry *)::$_0::operator()(*v905, v906);
            }
          }
        }
      }
      ++v905;
      ++v875;
    }
    while (v875 != (unint64_t *)v874);
  }
  if ((_QWORD *)v873 == v876)
  {
    v926 = (unint64_t *)v872[7];
    v927 = (uint64_t *)v872[8];
    if (v926 != (unint64_t *)v927)
    {
      v928 = (_DWORD *)v872[10];
      do
      {
        v930 = *((unsigned int *)v926 + 1);
        v931 = v870[4];
        v932 = (v870[5] - v931) >> 3;
        if (v930 >> 7 < v932)
        {
          v933 = *(_QWORD *)(v931 + 8 * (v930 >> 7));
          if (v933)
          {
            v934 = *(unsigned __int16 *)(v933 + 2 * (v930 & 0x7F));
            v936 = v870[7];
            v935 = v870[8];
            v937 = (v935 - v936) >> 3;
            if (v937 > v934)
            {
              v938 = v936 + 8 * v934;
              if (v938 != v935 && *(_DWORD *)(v938 + 4) == (_DWORD)v930)
              {
                v940 = *v926;
                v941 = *v926 >> 39;
                if (v941 < v932
                  && (v942 = *(_QWORD *)(v931 + 8 * v941)) != 0
                  && (v943 = *(unsigned __int16 *)(v942 + 2 * (HIDWORD(v940) & 0x7F)), v937 > v943)
                  && ((v944 = HIDWORD(v940), v945 = v936 + 8 * v943, v945 != v935)
                    ? (v946 = *(_DWORD *)(v945 + 4) == (_DWORD)v944)
                    : (v946 = 0),
                      v946))
                {
                  v929 = (_QWORD **)(v870[10] + 8 * v943);
                }
                else
                {
                  v929 = (_QWORD **)v870[11];
                }
                applyViewConstantData(gdc::Registry *)::$_0::operator()(*v929, v928);
              }
            }
          }
        }
        v928 += 16;
        ++v926;
      }
      while (v926 != (unint64_t *)v927);
    }
  }
  v878 = *((_QWORD *)v2986 + 55);
  HasTransformInstanceDeviceData = (_QWORD *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(v878);
  v880 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v878);
  v881 = gdc::Registry::storage<arComponents::MeshRenderableComponent>(v878);
  v882 = (_QWORD *)v881;
  v883 = v881 + 32;
  v885 = HasTransformInstanceDeviceData[7];
  v884 = HasTransformInstanceDeviceData[8];
  if (v880[8] - v880[7] >= (unint64_t)(v884 - v885))
    v886 = HasTransformInstanceDeviceData + 4;
  else
    v886 = v880 + 4;
  if (*(_QWORD *)(v881 + 64) - *(_QWORD *)(v881 + 56) >= v886[4] - v886[3])
    v887 = v886;
  else
    v887 = (_QWORD *)(v881 + 32);
  if (HasTransformInstanceDeviceData + 4 == v887 && v885 != v884)
  {
    v924 = (_QWORD *)HasTransformInstanceDeviceData[10];
    do
    {
      v964 = *(unsigned int *)(v885 + 4);
      v965 = v964 >> 7;
      v966 = v880[4];
      v967 = (v880[5] - v966) >> 3;
      if (v964 >> 7 < v967)
      {
        v968 = *(_QWORD *)(v966 + 8 * v965);
        if (v968)
        {
          v969 = *(unsigned __int16 *)(v968 + 2 * (v964 & 0x7F));
          v971 = v880[7];
          v970 = v880[8];
          if ((v970 - v971) >> 3 > v969)
          {
            v972 = v971 + 8 * v969;
            if (v972 != v970 && *(_DWORD *)(v972 + 4) == (_DWORD)v964)
            {
              v974 = v882[4];
              v975 = (v882[5] - v974) >> 3;
              if (v965 < v975)
              {
                v976 = *(_QWORD *)(v974 + 8 * v965);
                if (v976)
                {
                  v977 = *(unsigned __int16 *)(v976 + 2 * (v964 & 0x7F));
                  v979 = v882[7];
                  v978 = v882[8];
                  if ((v978 - v979) >> 3 > v977)
                  {
                    v980 = v979 + 8 * v977;
                    if (v980 != v978 && *(_DWORD *)(v980 + 4) == (_DWORD)v964)
                      (**(void (***)(_QWORD))*v924)(*v924);
                  }
                }
              }
            }
          }
        }
      }
      ++v924;
      v885 += 8;
    }
    while (v885 != v884);
  }
  if (v880 + 4 == v887)
  {
    v947 = (unint64_t *)v880[7];
    v948 = (uint64_t *)v880[8];
    if (v947 != (unint64_t *)v948)
    {
      v949 = v880[10];
      while (2)
      {
        v1296 = *((unsigned int *)v947 + 1);
        v1297 = v1296 >> 7;
        v1298 = HasTransformInstanceDeviceData[4];
        v1299 = (HasTransformInstanceDeviceData[5] - v1298) >> 3;
        if (v1296 >> 7 >= v1299)
          goto LABEL_1399;
        v1300 = *(_QWORD *)(v1298 + 8 * v1297);
        if (!v1300)
          goto LABEL_1399;
        v1301 = *(unsigned __int16 *)(v1300 + 2 * (v1296 & 0x7F));
        v1303 = HasTransformInstanceDeviceData[7];
        v1302 = HasTransformInstanceDeviceData[8];
        v1304 = (v1302 - v1303) >> 3;
        if (v1304 <= v1301)
          goto LABEL_1399;
        v1305 = v1303 + 8 * v1301;
        if (v1305 == v1302 || *(_DWORD *)(v1305 + 4) != (_DWORD)v1296)
          goto LABEL_1399;
        v1307 = v882[4];
        v1308 = (v882[5] - v1307) >> 3;
        if (v1297 >= v1308)
          goto LABEL_1399;
        v1309 = *(_QWORD *)(v1307 + 8 * v1297);
        if (!v1309)
          goto LABEL_1399;
        v1310 = *(unsigned __int16 *)(v1309 + 2 * (v1296 & 0x7F));
        v1312 = v882[7];
        v1311 = v882[8];
        v1313 = (v1311 - v1312) >> 3;
        if (v1313 <= v1310)
          goto LABEL_1399;
        v1314 = v1312 + 8 * v1310;
        if (v1314 == v1311 || *(_DWORD *)(v1314 + 4) != (_DWORD)v1296)
          goto LABEL_1399;
        v1316 = *v947;
        v1317 = HIDWORD(*v947);
        v1318 = *v947 >> 39;
        if (v1318 >= v1299
          || (v1319 = *(_QWORD *)(v1298 + 8 * v1318)) == 0
          || (v1320 = *(unsigned __int16 *)(v1319 + 2 * (HIDWORD(v1316) & 0x7F)), v1304 <= v1320)
          || ((v1321 = v1303 + 8 * v1320, v1321 != v1302)
            ? (v1322 = *(_DWORD *)(v1321 + 4) == (_DWORD)v1317)
            : (v1322 = 0),
              !v1322))
        {
          v1323 = (_QWORD *)HasTransformInstanceDeviceData[11];
          if (v1318 < v1308)
            goto LABEL_1424;
          goto LABEL_1397;
        }
        v1323 = (_QWORD *)(HasTransformInstanceDeviceData[10] + 8 * v1320);
        if (v1318 >= v1308)
          goto LABEL_1397;
LABEL_1424:
        v1324 = *(_QWORD *)(v1307 + 8 * v1318);
        if (v1324
          && (v1325 = *(unsigned __int16 *)(v1324 + 2 * (HIDWORD(v1316) & 0x7F)), v1313 > v1325)
          && ((v1326 = v1312 + 8 * v1325, v1326 != v1311)
            ? (v1327 = *(_DWORD *)(v1326 + 4) == (_DWORD)v1317)
            : (v1327 = 0),
              v1327))
        {
          v1295 = v882[10] + 224 * v1325;
        }
        else
        {
LABEL_1397:
          v1295 = v882[11];
        }
        (**(void (***)(_QWORD, uint64_t, uint64_t))*v1323)(*v1323, v949, v1295);
LABEL_1399:
        v949 += 8;
        if (++v947 == (unint64_t *)v948)
          break;
        continue;
      }
    }
  }
  if ((_QWORD *)v883 == v887)
  {
    v950 = (unint64_t *)v882[7];
    v951 = (uint64_t *)v882[8];
    if (v950 != (unint64_t *)v951)
    {
      v952 = v882[10];
      while (2)
      {
        v1329 = *((unsigned int *)v950 + 1);
        v1330 = v1329 >> 7;
        v1331 = HasTransformInstanceDeviceData[4];
        v1332 = (HasTransformInstanceDeviceData[5] - v1331) >> 3;
        if (v1329 >> 7 >= v1332)
          goto LABEL_1436;
        v1333 = *(_QWORD *)(v1331 + 8 * v1330);
        if (!v1333)
          goto LABEL_1436;
        v1334 = *(unsigned __int16 *)(v1333 + 2 * (v1329 & 0x7F));
        v1336 = HasTransformInstanceDeviceData[7];
        v1335 = HasTransformInstanceDeviceData[8];
        v1337 = (v1335 - v1336) >> 3;
        if (v1337 <= v1334)
          goto LABEL_1436;
        v1338 = v1336 + 8 * v1334;
        if (v1338 == v1335 || *(_DWORD *)(v1338 + 4) != (_DWORD)v1329)
          goto LABEL_1436;
        v1340 = v880[4];
        v1341 = (v880[5] - v1340) >> 3;
        if (v1330 >= v1341)
          goto LABEL_1436;
        v1342 = *(_QWORD *)(v1340 + 8 * v1330);
        if (!v1342)
          goto LABEL_1436;
        v1343 = *(unsigned __int16 *)(v1342 + 2 * (v1329 & 0x7F));
        v1345 = v880[7];
        v1344 = v880[8];
        v1346 = (v1344 - v1345) >> 3;
        if (v1346 <= v1343)
          goto LABEL_1436;
        v1347 = v1345 + 8 * v1343;
        if (v1347 == v1344 || *(_DWORD *)(v1347 + 4) != (_DWORD)v1329)
          goto LABEL_1436;
        v1349 = *v950;
        v1350 = HIDWORD(*v950);
        v1351 = *v950 >> 39;
        if (v1351 >= v1332
          || (v1352 = *(_QWORD *)(v1331 + 8 * v1351)) == 0
          || (v1353 = *(unsigned __int16 *)(v1352 + 2 * (HIDWORD(v1349) & 0x7F)), v1337 <= v1353)
          || ((v1354 = v1336 + 8 * v1353, v1354 != v1335)
            ? (v1355 = *(_DWORD *)(v1354 + 4) == (_DWORD)v1350)
            : (v1355 = 0),
              !v1355))
        {
          v1356 = (_QWORD *)HasTransformInstanceDeviceData[11];
          if (v1351 < v1341)
            goto LABEL_1461;
          goto LABEL_1434;
        }
        v1356 = (_QWORD *)(HasTransformInstanceDeviceData[10] + 8 * v1353);
        if (v1351 >= v1341)
          goto LABEL_1434;
LABEL_1461:
        v1357 = *(_QWORD *)(v1340 + 8 * v1351);
        if (v1357
          && (v1358 = *(unsigned __int16 *)(v1357 + 2 * (HIDWORD(v1349) & 0x7F)), v1346 > v1358)
          && ((v1359 = v1345 + 8 * v1358, v1359 != v1344)
            ? (v1360 = *(_DWORD *)(v1359 + 4) == (_DWORD)v1350)
            : (v1360 = 0),
              v1360))
        {
          v1328 = v880[10] + 8 * v1358;
        }
        else
        {
LABEL_1434:
          v1328 = v880[11];
        }
        (**(void (***)(_QWORD, uint64_t, uint64_t))*v1356)(*v1356, v1328, v952);
LABEL_1436:
        v952 += 224;
        if (++v950 == (unint64_t *)v951)
          break;
        continue;
      }
    }
  }
  v889 = *((_QWORD *)v2986 + 55);
  HasTransformConstant = (_QWORD *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(v889);
  v891 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v889);
  v892 = gdc::Registry::storage<arComponents::TransformConstantDataComponent>(v889);
  v893 = (_QWORD *)v892;
  v894 = v892 + 32;
  v896 = HasTransformConstant[7];
  v895 = HasTransformConstant[8];
  if (v891[8] - v891[7] >= (unint64_t)(v895 - v896))
    v897 = HasTransformConstant + 4;
  else
    v897 = v891 + 4;
  if (*(_QWORD *)(v892 + 64) - *(_QWORD *)(v892 + 56) >= v897[4] - v897[3])
    v898 = v897;
  else
    v898 = (_QWORD *)(v892 + 32);
  if (HasTransformConstant + 4 == v898 && v896 != v895)
  {
    v925 = (_QWORD *)HasTransformConstant[10];
    do
    {
      v982 = *(unsigned int *)(v896 + 4);
      v983 = v982 >> 7;
      v984 = v891[4];
      v985 = (v891[5] - v984) >> 3;
      if (v982 >> 7 < v985)
      {
        v986 = *(_QWORD *)(v984 + 8 * v983);
        if (v986)
        {
          v987 = *(unsigned __int16 *)(v986 + 2 * (v982 & 0x7F));
          v989 = v891[7];
          v988 = v891[8];
          if ((v988 - v989) >> 3 > v987)
          {
            v990 = v989 + 8 * v987;
            if (v990 != v988 && *(_DWORD *)(v990 + 4) == (_DWORD)v982)
            {
              v992 = v893[4];
              v993 = (v893[5] - v992) >> 3;
              if (v983 < v993)
              {
                v994 = *(_QWORD *)(v992 + 8 * v983);
                if (v994)
                {
                  v995 = *(unsigned __int16 *)(v994 + 2 * (v982 & 0x7F));
                  v997 = v893[7];
                  v996 = v893[8];
                  if ((v996 - v997) >> 3 > v995)
                  {
                    v998 = v997 + 8 * v995;
                    if (v998 != v996 && *(_DWORD *)(v998 + 4) == (_DWORD)v982)
                      (**(void (***)(_QWORD))*v925)(*v925);
                  }
                }
              }
            }
          }
        }
      }
      ++v925;
      v896 += 8;
    }
    while (v896 != v895);
  }
  if (v891 + 4 == v898)
  {
    v953 = (unint64_t *)v891[7];
    v954 = (uint64_t *)v891[8];
    if (v953 != (unint64_t *)v954)
    {
      v955 = v891[10];
      while (2)
      {
        v1362 = *((unsigned int *)v953 + 1);
        v1363 = v1362 >> 7;
        v1364 = HasTransformConstant[4];
        v1365 = (HasTransformConstant[5] - v1364) >> 3;
        if (v1362 >> 7 >= v1365)
          goto LABEL_1473;
        v1366 = *(_QWORD *)(v1364 + 8 * v1363);
        if (!v1366)
          goto LABEL_1473;
        v1367 = *(unsigned __int16 *)(v1366 + 2 * (v1362 & 0x7F));
        v1369 = HasTransformConstant[7];
        v1368 = HasTransformConstant[8];
        v1370 = (v1368 - v1369) >> 3;
        if (v1370 <= v1367)
          goto LABEL_1473;
        v1371 = v1369 + 8 * v1367;
        if (v1371 == v1368 || *(_DWORD *)(v1371 + 4) != (_DWORD)v1362)
          goto LABEL_1473;
        v1373 = v893[4];
        v1374 = (v893[5] - v1373) >> 3;
        if (v1363 >= v1374)
          goto LABEL_1473;
        v1375 = *(_QWORD *)(v1373 + 8 * v1363);
        if (!v1375)
          goto LABEL_1473;
        v1376 = *(unsigned __int16 *)(v1375 + 2 * (v1362 & 0x7F));
        v1378 = v893[7];
        v1377 = v893[8];
        v1379 = (v1377 - v1378) >> 3;
        if (v1379 <= v1376)
          goto LABEL_1473;
        v1380 = v1378 + 8 * v1376;
        if (v1380 == v1377 || *(_DWORD *)(v1380 + 4) != (_DWORD)v1362)
          goto LABEL_1473;
        v1382 = *v953;
        v1383 = HIDWORD(*v953);
        v1384 = *v953 >> 39;
        if (v1384 >= v1365
          || (v1385 = *(_QWORD *)(v1364 + 8 * v1384)) == 0
          || (v1386 = *(unsigned __int16 *)(v1385 + 2 * (HIDWORD(v1382) & 0x7F)), v1370 <= v1386)
          || ((v1387 = v1369 + 8 * v1386, v1387 != v1368)
            ? (v1388 = *(_DWORD *)(v1387 + 4) == (_DWORD)v1383)
            : (v1388 = 0),
              !v1388))
        {
          v1389 = (_QWORD *)HasTransformConstant[11];
          if (v1384 < v1374)
            goto LABEL_1498;
          goto LABEL_1471;
        }
        v1389 = (_QWORD *)(HasTransformConstant[10] + 8 * v1386);
        if (v1384 >= v1374)
          goto LABEL_1471;
LABEL_1498:
        v1390 = *(_QWORD *)(v1373 + 8 * v1384);
        if (v1390
          && (v1391 = *(unsigned __int16 *)(v1390 + 2 * (HIDWORD(v1382) & 0x7F)), v1379 > v1391)
          && ((v1392 = v1378 + 8 * v1391, v1392 != v1377)
            ? (v1393 = *(_DWORD *)(v1392 + 4) == (_DWORD)v1383)
            : (v1393 = 0),
              v1393))
        {
          v1361 = v893[10] + 16 * v1391;
        }
        else
        {
LABEL_1471:
          v1361 = v893[11];
        }
        (**(void (***)(_QWORD, uint64_t, uint64_t))*v1389)(*v1389, v955, v1361);
LABEL_1473:
        v955 += 8;
        if (++v953 == (unint64_t *)v954)
          break;
        continue;
      }
    }
  }
  if ((_QWORD *)v894 == v898)
  {
    v956 = (unint64_t *)v893[7];
    v957 = (uint64_t *)v893[8];
    if (v956 != (unint64_t *)v957)
    {
      v958 = v893[10];
      while (2)
      {
        v1395 = *((unsigned int *)v956 + 1);
        v1396 = v1395 >> 7;
        v1397 = HasTransformConstant[4];
        v1398 = (HasTransformConstant[5] - v1397) >> 3;
        if (v1395 >> 7 >= v1398)
          goto LABEL_1510;
        v1399 = *(_QWORD *)(v1397 + 8 * v1396);
        if (!v1399)
          goto LABEL_1510;
        v1400 = *(unsigned __int16 *)(v1399 + 2 * (v1395 & 0x7F));
        v1402 = HasTransformConstant[7];
        v1401 = HasTransformConstant[8];
        v1403 = (v1401 - v1402) >> 3;
        if (v1403 <= v1400)
          goto LABEL_1510;
        v1404 = v1402 + 8 * v1400;
        if (v1404 == v1401 || *(_DWORD *)(v1404 + 4) != (_DWORD)v1395)
          goto LABEL_1510;
        v1406 = v891[4];
        v1407 = (v891[5] - v1406) >> 3;
        if (v1396 >= v1407)
          goto LABEL_1510;
        v1408 = *(_QWORD *)(v1406 + 8 * v1396);
        if (!v1408)
          goto LABEL_1510;
        v1409 = *(unsigned __int16 *)(v1408 + 2 * (v1395 & 0x7F));
        v1411 = v891[7];
        v1410 = v891[8];
        v1412 = (v1410 - v1411) >> 3;
        if (v1412 <= v1409)
          goto LABEL_1510;
        v1413 = v1411 + 8 * v1409;
        if (v1413 == v1410 || *(_DWORD *)(v1413 + 4) != (_DWORD)v1395)
          goto LABEL_1510;
        v1415 = *v956;
        v1416 = HIDWORD(*v956);
        v1417 = *v956 >> 39;
        if (v1417 >= v1398
          || (v1418 = *(_QWORD *)(v1397 + 8 * v1417)) == 0
          || (v1419 = *(unsigned __int16 *)(v1418 + 2 * (HIDWORD(v1415) & 0x7F)), v1403 <= v1419)
          || ((v1420 = v1402 + 8 * v1419, v1420 != v1401)
            ? (v1421 = *(_DWORD *)(v1420 + 4) == (_DWORD)v1416)
            : (v1421 = 0),
              !v1421))
        {
          v1422 = (_QWORD *)HasTransformConstant[11];
          if (v1417 < v1407)
            goto LABEL_1535;
          goto LABEL_1508;
        }
        v1422 = (_QWORD *)(HasTransformConstant[10] + 8 * v1419);
        if (v1417 >= v1407)
          goto LABEL_1508;
LABEL_1535:
        v1423 = *(_QWORD *)(v1406 + 8 * v1417);
        if (v1423
          && (v1424 = *(unsigned __int16 *)(v1423 + 2 * (HIDWORD(v1415) & 0x7F)), v1412 > v1424)
          && ((v1425 = v1411 + 8 * v1424, v1425 != v1410)
            ? (v1426 = *(_DWORD *)(v1425 + 4) == (_DWORD)v1416)
            : (v1426 = 0),
              v1426))
        {
          v1394 = v891[10] + 8 * v1424;
        }
        else
        {
LABEL_1508:
          v1394 = v891[11];
        }
        (**(void (***)(_QWORD, uint64_t, uint64_t))*v1422)(*v1422, v1394, v958);
LABEL_1510:
        v958 += 16;
        if (++v956 == (unint64_t *)v957)
          break;
        continue;
      }
    }
  }
  v900 = *((_QWORD *)v2986 + 55);
  v901 = (_QWORD *)*((_QWORD *)a2 + 1);
  v902 = (int8x8_t)v901[1];
  if (!*(_QWORD *)&v902)
    goto LABEL_1077;
  v903 = (uint8x8_t)vcnt_s8(v902);
  v903.i16[0] = vaddlv_u8(v903);
  if (v903.u32[0] > 1uLL)
  {
    v904 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v902 <= 0x1AF456233693CD46uLL)
      v904 = 0x1AF456233693CD46uLL % *(_QWORD *)&v902;
  }
  else
  {
    v904 = (*(_QWORD *)&v902 - 1) & 0x1AF456233693CD46;
  }
  v959 = *(_QWORD **)(*v901 + 8 * v904);
  if (!v959)
    goto LABEL_1077;
  v960 = (_QWORD *)*v959;
  if (!v960)
    goto LABEL_1077;
  if (v903.u32[0] < 2uLL)
  {
    v961 = *(_QWORD *)&v902 - 1;
    while (1)
    {
      v963 = v960[1];
      if (v963 == 0x1AF456233693CD46)
      {
        if (v960[2] == 0x1AF456233693CD46)
          goto LABEL_1075;
      }
      else if ((v963 & v961) != v904)
      {
        goto LABEL_1077;
      }
      v960 = (_QWORD *)*v960;
      if (!v960)
        goto LABEL_1077;
    }
  }
  while (2)
  {
    v962 = v960[1];
    if (v962 != 0x1AF456233693CD46)
    {
      if (v962 >= *(_QWORD *)&v902)
        v962 %= *(_QWORD *)&v902;
      if (v962 != v904)
        goto LABEL_1077;
      goto LABEL_1028;
    }
    if (v960[2] != 0x1AF456233693CD46)
    {
LABEL_1028:
      v960 = (_QWORD *)*v960;
      if (!v960)
        goto LABEL_1077;
      continue;
    }
    break;
  }
LABEL_1075:
  v1000 = v960[5];
  if (*(_QWORD *)(v1000 + 8) == 0x1AF456233693CD46)
  {
    v1001 = *(double **)(v1000 + 32);
    goto LABEL_1078;
  }
LABEL_1077:
  v1001 = 0;
LABEL_1078:
  v1002 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(*((_QWORD *)v2986 + 55));
  v1003 = gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(v900);
  v1004 = (_QWORD *)v1003;
  v1005 = v1003 + 32;
  v1007 = (unint64_t *)v1002[7];
  v1006 = (uint64_t *)v1002[8];
  if (*(_QWORD *)(v1003 + 64) - *(_QWORD *)(v1003 + 56) >= (unint64_t)((char *)v1006 - (char *)v1007))
    v1008 = v1002 + 4;
  else
    v1008 = (_QWORD *)(v1003 + 32);
  if (v1002 + 4 == v1008 && v1007 != (unint64_t *)v1006)
  {
    v1055 = v1002[10];
    do
    {
      v1057 = *((unsigned int *)v1007 + 1);
      v1058 = v1004[4];
      v1059 = (v1004[5] - v1058) >> 3;
      if (v1057 >> 7 < v1059)
      {
        v1060 = *(_QWORD *)(v1058 + 8 * (v1057 >> 7));
        if (v1060)
        {
          v1061 = *(unsigned __int16 *)(v1060 + 2 * (v1057 & 0x7F));
          v1063 = v1004[7];
          v1062 = v1004[8];
          v1064 = (v1062 - v1063) >> 3;
          if (v1064 > v1061)
          {
            v1065 = v1063 + 8 * v1061;
            if (v1065 != v1062 && *(_DWORD *)(v1065 + 4) == (_DWORD)v1057)
            {
              v1067 = *v1007;
              v1068 = *v1007 >> 39;
              if (v1068 < v1059
                && (v1069 = *(_QWORD *)(v1058 + 8 * v1068)) != 0
                && (v1070 = *(unsigned __int16 *)(v1069 + 2 * (HIDWORD(v1067) & 0x7F)), v1064 > v1070)
                && ((v1071 = HIDWORD(v1067), v1072 = v1063 + 8 * v1070, v1072 != v1062)
                  ? (v1073 = *(_DWORD *)(v1072 + 4) == (_DWORD)v1071)
                  : (v1073 = 0),
                    v1073))
              {
                v1056 = (_QWORD **)(v1004[10] + 8 * v1070);
              }
              else
              {
                v1056 = (_QWORD **)v1004[11];
              }
              applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(v1001, v1055, *v1056);
            }
          }
        }
      }
      v1055 += 80;
      ++v1007;
    }
    while (v1007 != (unint64_t *)v1006);
  }
  if ((_QWORD *)v1005 == v1008)
  {
    v1074 = (unint64_t *)v1004[7];
    v1075 = (uint64_t *)v1004[8];
    if (v1074 != (unint64_t *)v1075)
    {
      v1076 = (_QWORD **)v1004[10];
      do
      {
        v1078 = *((unsigned int *)v1074 + 1);
        v1079 = v1002[4];
        v1080 = (v1002[5] - v1079) >> 3;
        if (v1078 >> 7 < v1080)
        {
          v1081 = *(_QWORD *)(v1079 + 8 * (v1078 >> 7));
          if (v1081)
          {
            v1082 = *(unsigned __int16 *)(v1081 + 2 * (v1078 & 0x7F));
            v1084 = v1002[7];
            v1083 = v1002[8];
            v1085 = (v1083 - v1084) >> 3;
            if (v1085 > v1082)
            {
              v1086 = v1084 + 8 * v1082;
              if (v1086 != v1083 && *(_DWORD *)(v1086 + 4) == (_DWORD)v1078)
              {
                v1088 = *v1074;
                v1089 = *v1074 >> 39;
                if (v1089 < v1080
                  && (v1090 = *(_QWORD *)(v1079 + 8 * v1089)) != 0
                  && (v1091 = *(unsigned __int16 *)(v1090 + 2 * (HIDWORD(v1088) & 0x7F)), v1085 > v1091)
                  && ((v1092 = HIDWORD(v1088), v1093 = v1084 + 8 * v1091, v1093 != v1083)
                    ? (v1094 = *(_DWORD *)(v1093 + 4) == (_DWORD)v1092)
                    : (v1094 = 0),
                      v1094))
                {
                  v1077 = v1002[10] + 80 * v1091;
                }
                else
                {
                  v1077 = v1002[11];
                }
                applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(v1001, v1077, *v1076);
              }
            }
          }
        }
        ++v1076;
        ++v1074;
      }
      while (v1074 != (unint64_t *)v1075);
    }
  }
  v1010 = *((_QWORD *)v2986 + 55);
  v2983 = *((_QWORD *)v2986 + 56);
  v1011 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v1010);
  v1012 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1010);
  v1013 = (_QWORD *)gdc::Registry::storage<md::pipelineECS::HasAlbedo>(v1010);
  v1014 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v1010);
  v1015 = (_QWORD *)v1014;
  v1016 = v1014 + 32;
  v1017 = v1011[7];
  v1018 = v1011[8];
  if (v1012[8] - v1012[7] >= (unint64_t)(v1018 - v1017))
    v1019 = v1011 + 4;
  else
    v1019 = v1012 + 4;
  if (v1013[8] - v1013[7] < v1019[4] - v1019[3])
    v1019 = v1013 + 4;
  if (*(_QWORD *)(v1014 + 64) - *(_QWORD *)(v1014 + 56) >= v1019[4] - v1019[3])
    v1020 = v1019;
  else
    v1020 = (_QWORD *)(v1014 + 32);
  if (v1011 + 4 == v1020 && v1017 != v1018)
  {
    do
    {
      v1575 = *(unsigned int *)(v1017 + 4);
      v1576 = v1575 >> 7;
      v1577 = v1012[4];
      v1578 = (v1012[5] - v1577) >> 3;
      if (v1575 >> 7 < v1578)
      {
        v1579 = *(_QWORD *)(v1577 + 8 * v1576);
        if (v1579)
        {
          v1580 = v1575 & 0x7F;
          v1581 = *(unsigned __int16 *)(v1579 + 2 * v1580);
          v1583 = v1012[7];
          v1582 = v1012[8];
          if ((v1582 - v1583) >> 3 > v1581)
          {
            v1584 = v1583 + 8 * v1581;
            if (v1584 != v1582 && *(_DWORD *)(v1584 + 4) == (_DWORD)v1575)
            {
              v1586 = v1013[4];
              v1587 = (v1013[5] - v1586) >> 3;
              if (v1576 < v1587)
              {
                v1588 = *(_QWORD *)(v1586 + 8 * v1576);
                if (v1588)
                {
                  v1589 = *(unsigned __int16 *)(v1588 + 2 * v1580);
                  v1591 = v1013[7];
                  v1590 = v1013[8];
                  v1592 = (v1590 - v1591) >> 3;
                  if (v1592 > v1589)
                  {
                    v1593 = v1591 + 8 * v1589;
                    if (v1593 != v1590 && *(_DWORD *)(v1593 + 4) == (_DWORD)v1575)
                    {
                      v1595 = v1015[4];
                      v1596 = (v1015[5] - v1595) >> 3;
                      if (v1576 < v1596)
                      {
                        v1597 = *(_QWORD *)(v1595 + 8 * v1576);
                        if (v1597)
                        {
                          v1598 = *(unsigned __int16 *)(v1597 + 2 * v1580);
                          v1600 = v1015[7];
                          v1599 = v1015[8];
                          v1601 = (v1599 - v1600) >> 3;
                          if (v1601 > v1598)
                          {
                            v1602 = v1600 + 8 * v1598;
                            if (v1602 != v1599 && *(_DWORD *)(v1602 + 4) == (_DWORD)v1575)
                            {
                              v1604 = *(_QWORD *)v1017 >> 39;
                              if (v1604 < v1587
                                && (v1605 = *(_QWORD *)(v1586 + 8 * v1604)) != 0
                                && (v1606 = *(unsigned __int16 *)(v1605 + 2 * (HIDWORD(*(_QWORD *)v1017) & 0x7FLL)),
                                    v1592 > v1606)
                                && (v1607 = v1591 + 8 * v1606, v1607 != v1590)
                                && *(_DWORD *)(v1607 + 4) == HIDWORD(*(_QWORD *)v1017))
                              {
                                v1608 = (_QWORD *)(v1013[10] + 8 * v1606);
                              }
                              else
                              {
                                v1608 = (_QWORD *)v1013[11];
                              }
                              (**(void (***)(_QWORD))*v1608)(*v1608);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1017 += 8;
    }
    while (v1017 != v1018);
  }
  if (v1012 + 4 == v1020)
  {
    v1095 = (unint64_t *)v1012[7];
    v1096 = (uint64_t *)v1012[8];
    if (v1095 != (unint64_t *)v1096)
    {
      v1097 = v1012[10];
      do
      {
        v1872 = *((unsigned int *)v1095 + 1);
        v1873 = v1872 >> 7;
        v1874 = v1011[4];
        if (v1872 >> 7 < (v1011[5] - v1874) >> 3)
        {
          v1875 = *(_QWORD *)(v1874 + 8 * v1873);
          if (v1875)
          {
            v1876 = v1872 & 0x7F;
            v1877 = *(unsigned __int16 *)(v1875 + 2 * v1876);
            v1879 = v1011[7];
            v1878 = v1011[8];
            if (v1877 < (v1878 - v1879) >> 3)
            {
              v1880 = v1879 + 8 * v1877;
              if (v1880 != v1878 && *(_DWORD *)(v1880 + 4) == (_DWORD)v1872)
              {
                v1882 = v1013[4];
                v1883 = (v1013[5] - v1882) >> 3;
                if (v1873 < v1883)
                {
                  v1884 = *(_QWORD *)(v1882 + 8 * v1873);
                  if (v1884)
                  {
                    v1885 = *(unsigned __int16 *)(v1884 + 2 * v1876);
                    v1887 = v1013[7];
                    v1886 = v1013[8];
                    v1888 = (v1886 - v1887) >> 3;
                    if (v1888 > v1885)
                    {
                      v1889 = v1887 + 8 * v1885;
                      if (v1889 != v1886 && *(_DWORD *)(v1889 + 4) == (_DWORD)v1872)
                      {
                        v1891 = v1015[4];
                        v1892 = (v1015[5] - v1891) >> 3;
                        if (v1873 < v1892)
                        {
                          v1893 = *(_QWORD *)(v1891 + 8 * v1873);
                          if (v1893)
                          {
                            v1894 = *(unsigned __int16 *)(v1893 + 2 * v1876);
                            v1896 = v1015[7];
                            v1895 = v1015[8];
                            v1897 = (v1895 - v1896) >> 3;
                            if (v1897 > v1894)
                            {
                              v1898 = v1896 + 8 * v1894;
                              if (v1898 != v1895 && *(_DWORD *)(v1898 + 4) == (_DWORD)v1872)
                              {
                                v1900 = *v1095;
                                v1901 = HIDWORD(*v1095);
                                v1902 = *v1095 >> 39;
                                if (v1902 < v1883
                                  && (v1903 = *(_QWORD *)(v1882 + 8 * v1902)) != 0
                                  && (v1904 = *(unsigned __int16 *)(v1903 + 2 * (HIDWORD(v1900) & 0x7F)), v1888 > v1904)
                                  && (v1905 = v1887 + 8 * v1904, v1905 != v1886)
                                  && *(_DWORD *)(v1905 + 4) == (_DWORD)v1901)
                                {
                                  v1906 = (_QWORD *)(v1013[10] + 8 * v1904);
                                }
                                else
                                {
                                  v1906 = (_QWORD *)v1013[11];
                                }
                                if (v1902 < v1892
                                  && (v1907 = *(_QWORD *)(v1891 + 8 * v1902)) != 0
                                  && (v1908 = *(unsigned __int16 *)(v1907 + 2 * (HIDWORD(v1900) & 0x7F)), v1897 > v1908)
                                  && (v1909 = v1896 + 8 * v1908, v1909 != v1895)
                                  && *(_DWORD *)(v1909 + 4) == (_DWORD)v1901)
                                {
                                  v1869 = (uint64_t *)(v1015[10] + 48 * v1908);
                                }
                                else
                                {
                                  v1869 = (uint64_t *)v1015[11];
                                }
                                v1870 = *v1869;
                                if (v1870)
                                  v1871 = v1870;
                                else
                                  v1871 = v2983;
                                (**(void (***)(_QWORD, uint64_t, uint64_t))*v1906)(*v1906, v1097, v1871);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1097 += 8;
        ++v1095;
      }
      while (v1095 != (unint64_t *)v1096);
    }
  }
  if (v1013 + 4 == v1020)
  {
    v1098 = v1013[7];
    v1099 = v1013[8];
    if (v1098 != v1099)
    {
      v1100 = (_QWORD *)v1013[10];
      do
      {
        v1910 = *(unsigned int *)(v1098 + 4);
        v1911 = v1910 >> 7;
        v1912 = v1011[4];
        if (v1910 >> 7 < (v1011[5] - v1912) >> 3)
        {
          v1913 = *(_QWORD *)(v1912 + 8 * v1911);
          if (v1913)
          {
            v1914 = v1910 & 0x7F;
            v1915 = *(unsigned __int16 *)(v1913 + 2 * v1914);
            v1917 = v1011[7];
            v1916 = v1011[8];
            if (v1915 < (v1916 - v1917) >> 3)
            {
              v1918 = v1917 + 8 * v1915;
              if (v1918 != v1916 && *(_DWORD *)(v1918 + 4) == (_DWORD)v1910)
              {
                v1920 = v1012[4];
                v1921 = (v1012[5] - v1920) >> 3;
                if (v1911 < v1921)
                {
                  v1922 = *(_QWORD *)(v1920 + 8 * v1911);
                  if (v1922)
                  {
                    v1923 = *(unsigned __int16 *)(v1922 + 2 * v1914);
                    v1925 = v1012[7];
                    v1924 = v1012[8];
                    v1926 = (v1924 - v1925) >> 3;
                    if (v1926 > v1923)
                    {
                      v1927 = v1925 + 8 * v1923;
                      if (v1927 != v1924 && *(_DWORD *)(v1927 + 4) == (_DWORD)v1910)
                      {
                        v1929 = v1015[4];
                        v1930 = (v1015[5] - v1929) >> 3;
                        if (v1911 < v1930)
                        {
                          v1931 = *(_QWORD *)(v1929 + 8 * v1911);
                          if (v1931)
                          {
                            v1932 = *(unsigned __int16 *)(v1931 + 2 * v1914);
                            v1934 = v1015[7];
                            v1933 = v1015[8];
                            v1935 = (v1933 - v1934) >> 3;
                            if (v1935 > v1932)
                            {
                              v1936 = v1934 + 8 * v1932;
                              if (v1936 != v1933 && *(_DWORD *)(v1936 + 4) == (_DWORD)v1910)
                                (**(void (***)(_QWORD))*v1100)(*v1100);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1100;
        v1098 += 8;
      }
      while (v1098 != v1099);
    }
  }
  if ((_QWORD *)v1016 == v1020)
  {
    v1101 = v1015[7];
    v1102 = v1015[8];
    if (v1101 != v1102)
    {
      v1103 = v1015[10];
      do
      {
        v1939 = *(unsigned int *)(v1101 + 4);
        v1940 = v1939 >> 7;
        v1941 = v1011[4];
        if (v1939 >> 7 < (v1011[5] - v1941) >> 3)
        {
          v1942 = *(_QWORD *)(v1941 + 8 * v1940);
          if (v1942)
          {
            v1943 = v1939 & 0x7F;
            v1944 = *(unsigned __int16 *)(v1942 + 2 * v1943);
            v1946 = v1011[7];
            v1945 = v1011[8];
            if (v1944 < (v1945 - v1946) >> 3)
            {
              v1947 = v1946 + 8 * v1944;
              if (v1947 != v1945 && *(_DWORD *)(v1947 + 4) == (_DWORD)v1939)
              {
                v1949 = v1012[4];
                v1950 = (v1012[5] - v1949) >> 3;
                if (v1940 < v1950)
                {
                  v1951 = *(_QWORD *)(v1949 + 8 * v1940);
                  if (v1951)
                  {
                    v1952 = *(unsigned __int16 *)(v1951 + 2 * v1943);
                    v1954 = v1012[7];
                    v1953 = v1012[8];
                    v1955 = (v1953 - v1954) >> 3;
                    if (v1955 > v1952)
                    {
                      v1956 = v1954 + 8 * v1952;
                      if (v1956 != v1953 && *(_DWORD *)(v1956 + 4) == (_DWORD)v1939)
                      {
                        v1958 = v1013[4];
                        v1959 = (v1013[5] - v1958) >> 3;
                        if (v1940 < v1959)
                        {
                          v1960 = *(_QWORD *)(v1958 + 8 * v1940);
                          if (v1960)
                          {
                            v1961 = *(unsigned __int16 *)(v1960 + 2 * v1943);
                            v1963 = v1013[7];
                            v1962 = v1013[8];
                            v1964 = (v1962 - v1963) >> 3;
                            if (v1964 > v1961)
                            {
                              v1965 = v1963 + 8 * v1961;
                              if (v1965 != v1962 && *(_DWORD *)(v1965 + 4) == (_DWORD)v1939)
                              {
                                v1967 = *(_QWORD *)v1101 >> 39;
                                if (v1967 < v1959
                                  && (v1968 = *(_QWORD *)(v1958 + 8 * v1967)) != 0
                                  && (v1969 = *(unsigned __int16 *)(v1968 + 2 * (HIDWORD(*(_QWORD *)v1101) & 0x7FLL)),
                                      v1964 > v1969)
                                  && (v1970 = v1963 + 8 * v1969, v1970 != v1962)
                                  && *(_DWORD *)(v1970 + 4) == HIDWORD(*(_QWORD *)v1101))
                                {
                                  v1938 = (_QWORD *)(v1013[10] + 8 * v1969);
                                }
                                else
                                {
                                  v1938 = (_QWORD *)v1013[11];
                                }
                                (**(void (***)(_QWORD))*v1938)(*v1938);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1103 += 48;
        v1101 += 8;
      }
      while (v1101 != v1102);
    }
  }
  v1022 = *((_QWORD *)v2986 + 55);
  v1023 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v1022);
  v1024 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1022);
  v1025 = (_QWORD *)gdc::Registry::storage<md::pipelineECS::HasUVMapping>(v1022);
  v1026 = gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v1022);
  v1027 = (_QWORD *)v1026;
  v1028 = v1026 + 32;
  v1030 = v1023[7];
  v1029 = v1023[8];
  if (v1024[8] - v1024[7] >= (unint64_t)(v1029 - v1030))
    v1031 = v1023 + 4;
  else
    v1031 = v1024 + 4;
  if (v1025[8] - v1025[7] < v1031[4] - v1031[3])
    v1031 = v1025 + 4;
  if (*(_QWORD *)(v1026 + 64) - *(_QWORD *)(v1026 + 56) >= v1031[4] - v1031[3])
    v1032 = v1031;
  else
    v1032 = (_QWORD *)(v1026 + 32);
  if (v1023 + 4 == v1032 && v1030 != v1029)
  {
    do
    {
      v1609 = *(unsigned int *)(v1030 + 4);
      v1610 = v1609 >> 7;
      v1611 = v1024[4];
      v1612 = (v1024[5] - v1611) >> 3;
      if (v1609 >> 7 < v1612)
      {
        v1613 = *(_QWORD *)(v1611 + 8 * v1610);
        if (v1613)
        {
          v1614 = v1609 & 0x7F;
          v1615 = *(unsigned __int16 *)(v1613 + 2 * v1614);
          v1617 = v1024[7];
          v1616 = v1024[8];
          if ((v1616 - v1617) >> 3 > v1615)
          {
            v1618 = v1617 + 8 * v1615;
            if (v1618 != v1616 && *(_DWORD *)(v1618 + 4) == (_DWORD)v1609)
            {
              v1620 = v1025[4];
              v1621 = (v1025[5] - v1620) >> 3;
              if (v1610 < v1621)
              {
                v1622 = *(_QWORD *)(v1620 + 8 * v1610);
                if (v1622)
                {
                  v1623 = *(unsigned __int16 *)(v1622 + 2 * v1614);
                  v1625 = v1025[7];
                  v1624 = v1025[8];
                  v1626 = (v1624 - v1625) >> 3;
                  if (v1626 > v1623)
                  {
                    v1627 = v1625 + 8 * v1623;
                    if (v1627 != v1624 && *(_DWORD *)(v1627 + 4) == (_DWORD)v1609)
                    {
                      v1629 = v1027[4];
                      v1630 = (v1027[5] - v1629) >> 3;
                      if (v1610 < v1630)
                      {
                        v1631 = *(_QWORD *)(v1629 + 8 * v1610);
                        if (v1631)
                        {
                          v1632 = *(unsigned __int16 *)(v1631 + 2 * v1614);
                          v1634 = v1027[7];
                          v1633 = v1027[8];
                          v1635 = (v1633 - v1634) >> 3;
                          if (v1635 > v1632)
                          {
                            v1636 = v1634 + 8 * v1632;
                            if (v1636 != v1633 && *(_DWORD *)(v1636 + 4) == (_DWORD)v1609)
                            {
                              v1638 = *(_QWORD *)v1030 >> 39;
                              if (v1638 < v1621
                                && (v1639 = *(_QWORD *)(v1620 + 8 * v1638)) != 0
                                && (v1640 = *(unsigned __int16 *)(v1639 + 2 * (HIDWORD(*(_QWORD *)v1030) & 0x7FLL)),
                                    v1626 > v1640)
                                && (v1641 = v1625 + 8 * v1640, v1641 != v1624)
                                && *(_DWORD *)(v1641 + 4) == HIDWORD(*(_QWORD *)v1030))
                              {
                                v1642 = (_QWORD *)(v1025[10] + 8 * v1640);
                              }
                              else
                              {
                                v1642 = (_QWORD *)v1025[11];
                              }
                              (**(void (***)(_QWORD))*v1642)(*v1642);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1030 += 8;
    }
    while (v1030 != v1029);
  }
  if (v1024 + 4 == v1032)
  {
    v1104 = (unint64_t *)v1024[7];
    v1105 = (uint64_t *)v1024[8];
    if (v1104 != (unint64_t *)v1105)
    {
      v1106 = v1024[10];
      do
      {
        v1972 = *((unsigned int *)v1104 + 1);
        v1973 = v1972 >> 7;
        v1974 = v1023[4];
        if (v1972 >> 7 < (v1023[5] - v1974) >> 3)
        {
          v1975 = *(_QWORD *)(v1974 + 8 * v1973);
          if (v1975)
          {
            v1976 = v1972 & 0x7F;
            v1977 = *(unsigned __int16 *)(v1975 + 2 * v1976);
            v1979 = v1023[7];
            v1978 = v1023[8];
            if (v1977 < (v1978 - v1979) >> 3)
            {
              v1980 = v1979 + 8 * v1977;
              if (v1980 != v1978 && *(_DWORD *)(v1980 + 4) == (_DWORD)v1972)
              {
                v1982 = v1025[4];
                v1983 = (v1025[5] - v1982) >> 3;
                if (v1973 < v1983)
                {
                  v1984 = *(_QWORD *)(v1982 + 8 * v1973);
                  if (v1984)
                  {
                    v1985 = *(unsigned __int16 *)(v1984 + 2 * v1976);
                    v1987 = v1025[7];
                    v1986 = v1025[8];
                    v1988 = (v1986 - v1987) >> 3;
                    if (v1988 > v1985)
                    {
                      v1989 = v1987 + 8 * v1985;
                      if (v1989 != v1986 && *(_DWORD *)(v1989 + 4) == (_DWORD)v1972)
                      {
                        v1991 = v1027[4];
                        v1992 = (v1027[5] - v1991) >> 3;
                        if (v1973 < v1992)
                        {
                          v1993 = *(_QWORD *)(v1991 + 8 * v1973);
                          if (v1993)
                          {
                            v1994 = *(unsigned __int16 *)(v1993 + 2 * v1976);
                            v1996 = v1027[7];
                            v1995 = v1027[8];
                            v1997 = (v1995 - v1996) >> 3;
                            if (v1997 > v1994)
                            {
                              v1998 = v1996 + 8 * v1994;
                              if (v1998 != v1995 && *(_DWORD *)(v1998 + 4) == (_DWORD)v1972)
                              {
                                v2000 = *v1104;
                                v2001 = HIDWORD(*v1104);
                                v2002 = *v1104 >> 39;
                                if (v2002 < v1983
                                  && (v2003 = *(_QWORD *)(v1982 + 8 * v2002)) != 0
                                  && (v2004 = *(unsigned __int16 *)(v2003 + 2 * (HIDWORD(v2000) & 0x7F)), v1988 > v2004)
                                  && (v2005 = v1987 + 8 * v2004, v2005 != v1986)
                                  && *(_DWORD *)(v2005 + 4) == (_DWORD)v2001)
                                {
                                  v2006 = (_QWORD *)(v1025[10] + 8 * v2004);
                                }
                                else
                                {
                                  v2006 = (_QWORD *)v1025[11];
                                }
                                if (v2002 < v1992
                                  && (v2007 = *(_QWORD *)(v1991 + 8 * v2002)) != 0
                                  && (v2008 = *(unsigned __int16 *)(v2007 + 2 * (HIDWORD(v2000) & 0x7F)), v1997 > v2008)
                                  && (v2009 = v1996 + 8 * v2008, v2009 != v1995)
                                  && *(_DWORD *)(v2009 + 4) == (_DWORD)v2001)
                                {
                                  v1971 = v1027[10] + 16 * v2008;
                                }
                                else
                                {
                                  v1971 = v1027[11];
                                }
                                (**(void (***)(_QWORD, uint64_t, uint64_t))*v2006)(*v2006, v1106, v1971);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1106 += 8;
        ++v1104;
      }
      while (v1104 != (unint64_t *)v1105);
    }
  }
  if (v1025 + 4 == v1032)
  {
    v1107 = v1025[7];
    v1108 = v1025[8];
    if (v1107 != v1108)
    {
      v1109 = (_QWORD *)v1025[10];
      do
      {
        v2010 = *(unsigned int *)(v1107 + 4);
        v2011 = v2010 >> 7;
        v2012 = v1023[4];
        if (v2010 >> 7 < (v1023[5] - v2012) >> 3)
        {
          v2013 = *(_QWORD *)(v2012 + 8 * v2011);
          if (v2013)
          {
            v2014 = v2010 & 0x7F;
            v2015 = *(unsigned __int16 *)(v2013 + 2 * v2014);
            v2017 = v1023[7];
            v2016 = v1023[8];
            if (v2015 < (v2016 - v2017) >> 3)
            {
              v2018 = v2017 + 8 * v2015;
              if (v2018 != v2016 && *(_DWORD *)(v2018 + 4) == (_DWORD)v2010)
              {
                v2020 = v1024[4];
                v2021 = (v1024[5] - v2020) >> 3;
                if (v2011 < v2021)
                {
                  v2022 = *(_QWORD *)(v2020 + 8 * v2011);
                  if (v2022)
                  {
                    v2023 = *(unsigned __int16 *)(v2022 + 2 * v2014);
                    v2025 = v1024[7];
                    v2024 = v1024[8];
                    v2026 = (v2024 - v2025) >> 3;
                    if (v2026 > v2023)
                    {
                      v2027 = v2025 + 8 * v2023;
                      if (v2027 != v2024 && *(_DWORD *)(v2027 + 4) == (_DWORD)v2010)
                      {
                        v2029 = v1027[4];
                        v2030 = (v1027[5] - v2029) >> 3;
                        if (v2011 < v2030)
                        {
                          v2031 = *(_QWORD *)(v2029 + 8 * v2011);
                          if (v2031)
                          {
                            v2032 = *(unsigned __int16 *)(v2031 + 2 * v2014);
                            v2034 = v1027[7];
                            v2033 = v1027[8];
                            v2035 = (v2033 - v2034) >> 3;
                            if (v2035 > v2032)
                            {
                              v2036 = v2034 + 8 * v2032;
                              if (v2036 != v2033 && *(_DWORD *)(v2036 + 4) == (_DWORD)v2010)
                                (**(void (***)(_QWORD))*v1109)(*v1109);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1109;
        v1107 += 8;
      }
      while (v1107 != v1108);
    }
  }
  if ((_QWORD *)v1028 == v1032)
  {
    v1110 = v1027[7];
    v1111 = v1027[8];
    if (v1110 != v1111)
    {
      v1112 = v1027[10];
      do
      {
        v2039 = *(unsigned int *)(v1110 + 4);
        v2040 = v2039 >> 7;
        v2041 = v1023[4];
        if (v2039 >> 7 < (v1023[5] - v2041) >> 3)
        {
          v2042 = *(_QWORD *)(v2041 + 8 * v2040);
          if (v2042)
          {
            v2043 = v2039 & 0x7F;
            v2044 = *(unsigned __int16 *)(v2042 + 2 * v2043);
            v2046 = v1023[7];
            v2045 = v1023[8];
            if (v2044 < (v2045 - v2046) >> 3)
            {
              v2047 = v2046 + 8 * v2044;
              if (v2047 != v2045 && *(_DWORD *)(v2047 + 4) == (_DWORD)v2039)
              {
                v2049 = v1024[4];
                v2050 = (v1024[5] - v2049) >> 3;
                if (v2040 < v2050)
                {
                  v2051 = *(_QWORD *)(v2049 + 8 * v2040);
                  if (v2051)
                  {
                    v2052 = *(unsigned __int16 *)(v2051 + 2 * v2043);
                    v2054 = v1024[7];
                    v2053 = v1024[8];
                    v2055 = (v2053 - v2054) >> 3;
                    if (v2055 > v2052)
                    {
                      v2056 = v2054 + 8 * v2052;
                      if (v2056 != v2053 && *(_DWORD *)(v2056 + 4) == (_DWORD)v2039)
                      {
                        v2058 = v1025[4];
                        v2059 = (v1025[5] - v2058) >> 3;
                        if (v2040 < v2059)
                        {
                          v2060 = *(_QWORD *)(v2058 + 8 * v2040);
                          if (v2060)
                          {
                            v2061 = *(unsigned __int16 *)(v2060 + 2 * v2043);
                            v2063 = v1025[7];
                            v2062 = v1025[8];
                            v2064 = (v2062 - v2063) >> 3;
                            if (v2064 > v2061)
                            {
                              v2065 = v2063 + 8 * v2061;
                              if (v2065 != v2062 && *(_DWORD *)(v2065 + 4) == (_DWORD)v2039)
                              {
                                v2067 = *(_QWORD *)v1110 >> 39;
                                if (v2067 < v2059
                                  && (v2068 = *(_QWORD *)(v2058 + 8 * v2067)) != 0
                                  && (v2069 = *(unsigned __int16 *)(v2068 + 2 * (HIDWORD(*(_QWORD *)v1110) & 0x7FLL)),
                                      v2064 > v2069)
                                  && (v2070 = v2063 + 8 * v2069, v2070 != v2062)
                                  && *(_DWORD *)(v2070 + 4) == HIDWORD(*(_QWORD *)v1110))
                                {
                                  v2038 = (_QWORD *)(v1025[10] + 8 * v2069);
                                }
                                else
                                {
                                  v2038 = (_QWORD *)v1025[11];
                                }
                                (**(void (***)(_QWORD))*v2038)(*v2038);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1112 += 16;
        v1110 += 8;
      }
      while (v1110 != v1111);
    }
  }
  v1034 = *((_QWORD *)v2986 + 55);
  v1035 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v1034);
  v1036 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1034);
  v1037 = (_QWORD *)gdc::Registry::storage<md::pipelineECS::HasUVScale>(v1034);
  v1038 = gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v1034);
  v1039 = (_QWORD *)v1038;
  v1040 = v1038 + 32;
  v1042 = v1035[7];
  v1041 = v1035[8];
  if (v1036[8] - v1036[7] >= (unint64_t)(v1041 - v1042))
    v1043 = v1035 + 4;
  else
    v1043 = v1036 + 4;
  if (v1037[8] - v1037[7] < v1043[4] - v1043[3])
    v1043 = v1037 + 4;
  if (*(_QWORD *)(v1038 + 64) - *(_QWORD *)(v1038 + 56) >= v1043[4] - v1043[3])
    v1044 = v1043;
  else
    v1044 = (_QWORD *)(v1038 + 32);
  if (v1035 + 4 == v1044 && v1042 != v1041)
  {
    do
    {
      v1643 = *(unsigned int *)(v1042 + 4);
      v1644 = v1643 >> 7;
      v1645 = v1036[4];
      v1646 = (v1036[5] - v1645) >> 3;
      if (v1643 >> 7 < v1646)
      {
        v1647 = *(_QWORD *)(v1645 + 8 * v1644);
        if (v1647)
        {
          v1648 = v1643 & 0x7F;
          v1649 = *(unsigned __int16 *)(v1647 + 2 * v1648);
          v1651 = v1036[7];
          v1650 = v1036[8];
          if ((v1650 - v1651) >> 3 > v1649)
          {
            v1652 = v1651 + 8 * v1649;
            if (v1652 != v1650 && *(_DWORD *)(v1652 + 4) == (_DWORD)v1643)
            {
              v1654 = v1037[4];
              v1655 = (v1037[5] - v1654) >> 3;
              if (v1644 < v1655)
              {
                v1656 = *(_QWORD *)(v1654 + 8 * v1644);
                if (v1656)
                {
                  v1657 = *(unsigned __int16 *)(v1656 + 2 * v1648);
                  v1659 = v1037[7];
                  v1658 = v1037[8];
                  v1660 = (v1658 - v1659) >> 3;
                  if (v1660 > v1657)
                  {
                    v1661 = v1659 + 8 * v1657;
                    if (v1661 != v1658 && *(_DWORD *)(v1661 + 4) == (_DWORD)v1643)
                    {
                      v1663 = v1039[4];
                      v1664 = (v1039[5] - v1663) >> 3;
                      if (v1644 < v1664)
                      {
                        v1665 = *(_QWORD *)(v1663 + 8 * v1644);
                        if (v1665)
                        {
                          v1666 = *(unsigned __int16 *)(v1665 + 2 * v1648);
                          v1668 = v1039[7];
                          v1667 = v1039[8];
                          v1669 = (v1667 - v1668) >> 3;
                          if (v1669 > v1666)
                          {
                            v1670 = v1668 + 8 * v1666;
                            if (v1670 != v1667 && *(_DWORD *)(v1670 + 4) == (_DWORD)v1643)
                            {
                              v1672 = *(_QWORD *)v1042 >> 39;
                              if (v1672 < v1655
                                && (v1673 = *(_QWORD *)(v1654 + 8 * v1672)) != 0
                                && (v1674 = *(unsigned __int16 *)(v1673 + 2 * (HIDWORD(*(_QWORD *)v1042) & 0x7FLL)),
                                    v1660 > v1674)
                                && (v1675 = v1659 + 8 * v1674, v1675 != v1658)
                                && *(_DWORD *)(v1675 + 4) == HIDWORD(*(_QWORD *)v1042))
                              {
                                v1676 = (_QWORD *)(v1037[10] + 8 * v1674);
                              }
                              else
                              {
                                v1676 = (_QWORD *)v1037[11];
                              }
                              (**(void (***)(_QWORD))*v1676)(*v1676);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v1042 += 8;
    }
    while (v1042 != v1041);
  }
  if (v1036 + 4 == v1044)
  {
    v1113 = (unint64_t *)v1036[7];
    v1114 = (uint64_t *)v1036[8];
    if (v1113 != (unint64_t *)v1114)
    {
      v1115 = v1036[10];
      do
      {
        v2072 = *((unsigned int *)v1113 + 1);
        v2073 = v2072 >> 7;
        v2074 = v1035[4];
        if (v2072 >> 7 < (v1035[5] - v2074) >> 3)
        {
          v2075 = *(_QWORD *)(v2074 + 8 * v2073);
          if (v2075)
          {
            v2076 = v2072 & 0x7F;
            v2077 = *(unsigned __int16 *)(v2075 + 2 * v2076);
            v2079 = v1035[7];
            v2078 = v1035[8];
            if (v2077 < (v2078 - v2079) >> 3)
            {
              v2080 = v2079 + 8 * v2077;
              if (v2080 != v2078 && *(_DWORD *)(v2080 + 4) == (_DWORD)v2072)
              {
                v2082 = v1037[4];
                v2083 = (v1037[5] - v2082) >> 3;
                if (v2073 < v2083)
                {
                  v2084 = *(_QWORD *)(v2082 + 8 * v2073);
                  if (v2084)
                  {
                    v2085 = *(unsigned __int16 *)(v2084 + 2 * v2076);
                    v2087 = v1037[7];
                    v2086 = v1037[8];
                    v2088 = (v2086 - v2087) >> 3;
                    if (v2088 > v2085)
                    {
                      v2089 = v2087 + 8 * v2085;
                      if (v2089 != v2086 && *(_DWORD *)(v2089 + 4) == (_DWORD)v2072)
                      {
                        v2091 = v1039[4];
                        v2092 = (v1039[5] - v2091) >> 3;
                        if (v2073 < v2092)
                        {
                          v2093 = *(_QWORD *)(v2091 + 8 * v2073);
                          if (v2093)
                          {
                            v2094 = *(unsigned __int16 *)(v2093 + 2 * v2076);
                            v2096 = v1039[7];
                            v2095 = v1039[8];
                            v2097 = (v2095 - v2096) >> 3;
                            if (v2097 > v2094)
                            {
                              v2098 = v2096 + 8 * v2094;
                              if (v2098 != v2095 && *(_DWORD *)(v2098 + 4) == (_DWORD)v2072)
                              {
                                v2100 = *v1113;
                                v2101 = HIDWORD(*v1113);
                                v2102 = *v1113 >> 39;
                                if (v2102 < v2083
                                  && (v2103 = *(_QWORD *)(v2082 + 8 * v2102)) != 0
                                  && (v2104 = *(unsigned __int16 *)(v2103 + 2 * (HIDWORD(v2100) & 0x7F)), v2088 > v2104)
                                  && (v2105 = v2087 + 8 * v2104, v2105 != v2086)
                                  && *(_DWORD *)(v2105 + 4) == (_DWORD)v2101)
                                {
                                  v2106 = (_QWORD *)(v1037[10] + 8 * v2104);
                                }
                                else
                                {
                                  v2106 = (_QWORD *)v1037[11];
                                }
                                if (v2102 < v2092
                                  && (v2107 = *(_QWORD *)(v2091 + 8 * v2102)) != 0
                                  && (v2108 = *(unsigned __int16 *)(v2107 + 2 * (HIDWORD(v2100) & 0x7F)), v2097 > v2108)
                                  && (v2109 = v2096 + 8 * v2108, v2109 != v2095)
                                  && *(_DWORD *)(v2109 + 4) == (_DWORD)v2101)
                                {
                                  v2071 = v1039[10] + 8 * v2108;
                                }
                                else
                                {
                                  v2071 = v1039[11];
                                }
                                (**(void (***)(_QWORD, uint64_t, uint64_t))*v2106)(*v2106, v1115, v2071);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1115 += 8;
        ++v1113;
      }
      while (v1113 != (unint64_t *)v1114);
    }
  }
  if (v1037 + 4 == v1044)
  {
    v1116 = v1037[7];
    v1117 = v1037[8];
    if (v1116 != v1117)
    {
      v1118 = (_QWORD *)v1037[10];
      do
      {
        v2110 = *(unsigned int *)(v1116 + 4);
        v2111 = v2110 >> 7;
        v2112 = v1035[4];
        if (v2110 >> 7 < (v1035[5] - v2112) >> 3)
        {
          v2113 = *(_QWORD *)(v2112 + 8 * v2111);
          if (v2113)
          {
            v2114 = v2110 & 0x7F;
            v2115 = *(unsigned __int16 *)(v2113 + 2 * v2114);
            v2117 = v1035[7];
            v2116 = v1035[8];
            if (v2115 < (v2116 - v2117) >> 3)
            {
              v2118 = v2117 + 8 * v2115;
              if (v2118 != v2116 && *(_DWORD *)(v2118 + 4) == (_DWORD)v2110)
              {
                v2120 = v1036[4];
                v2121 = (v1036[5] - v2120) >> 3;
                if (v2111 < v2121)
                {
                  v2122 = *(_QWORD *)(v2120 + 8 * v2111);
                  if (v2122)
                  {
                    v2123 = *(unsigned __int16 *)(v2122 + 2 * v2114);
                    v2125 = v1036[7];
                    v2124 = v1036[8];
                    v2126 = (v2124 - v2125) >> 3;
                    if (v2126 > v2123)
                    {
                      v2127 = v2125 + 8 * v2123;
                      if (v2127 != v2124 && *(_DWORD *)(v2127 + 4) == (_DWORD)v2110)
                      {
                        v2129 = v1039[4];
                        v2130 = (v1039[5] - v2129) >> 3;
                        if (v2111 < v2130)
                        {
                          v2131 = *(_QWORD *)(v2129 + 8 * v2111);
                          if (v2131)
                          {
                            v2132 = *(unsigned __int16 *)(v2131 + 2 * v2114);
                            v2134 = v1039[7];
                            v2133 = v1039[8];
                            v2135 = (v2133 - v2134) >> 3;
                            if (v2135 > v2132)
                            {
                              v2136 = v2134 + 8 * v2132;
                              if (v2136 != v2133 && *(_DWORD *)(v2136 + 4) == (_DWORD)v2110)
                                (**(void (***)(_QWORD))*v1118)(*v1118);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1118;
        v1116 += 8;
      }
      while (v1116 != v1117);
    }
  }
  if ((_QWORD *)v1040 == v1044)
  {
    v1119 = v1039[7];
    v1120 = v1039[8];
    if (v1119 != v1120)
    {
      v1121 = v1039[10];
      do
      {
        v2139 = *(unsigned int *)(v1119 + 4);
        v2140 = v2139 >> 7;
        v2141 = v1035[4];
        if (v2139 >> 7 < (v1035[5] - v2141) >> 3)
        {
          v2142 = *(_QWORD *)(v2141 + 8 * v2140);
          if (v2142)
          {
            v2143 = v2139 & 0x7F;
            v2144 = *(unsigned __int16 *)(v2142 + 2 * v2143);
            v2146 = v1035[7];
            v2145 = v1035[8];
            if (v2144 < (v2145 - v2146) >> 3)
            {
              v2147 = v2146 + 8 * v2144;
              if (v2147 != v2145 && *(_DWORD *)(v2147 + 4) == (_DWORD)v2139)
              {
                v2149 = v1036[4];
                v2150 = (v1036[5] - v2149) >> 3;
                if (v2140 < v2150)
                {
                  v2151 = *(_QWORD *)(v2149 + 8 * v2140);
                  if (v2151)
                  {
                    v2152 = *(unsigned __int16 *)(v2151 + 2 * v2143);
                    v2154 = v1036[7];
                    v2153 = v1036[8];
                    v2155 = (v2153 - v2154) >> 3;
                    if (v2155 > v2152)
                    {
                      v2156 = v2154 + 8 * v2152;
                      if (v2156 != v2153 && *(_DWORD *)(v2156 + 4) == (_DWORD)v2139)
                      {
                        v2158 = v1037[4];
                        v2159 = (v1037[5] - v2158) >> 3;
                        if (v2140 < v2159)
                        {
                          v2160 = *(_QWORD *)(v2158 + 8 * v2140);
                          if (v2160)
                          {
                            v2161 = *(unsigned __int16 *)(v2160 + 2 * v2143);
                            v2163 = v1037[7];
                            v2162 = v1037[8];
                            v2164 = (v2162 - v2163) >> 3;
                            if (v2164 > v2161)
                            {
                              v2165 = v2163 + 8 * v2161;
                              if (v2165 != v2162 && *(_DWORD *)(v2165 + 4) == (_DWORD)v2139)
                              {
                                v2167 = *(_QWORD *)v1119 >> 39;
                                if (v2167 < v2159
                                  && (v2168 = *(_QWORD *)(v2158 + 8 * v2167)) != 0
                                  && (v2169 = *(unsigned __int16 *)(v2168 + 2 * (HIDWORD(*(_QWORD *)v1119) & 0x7FLL)),
                                      v2164 > v2169)
                                  && (v2170 = v2163 + 8 * v2169, v2170 != v2162)
                                  && *(_DWORD *)(v2170 + 4) == HIDWORD(*(_QWORD *)v1119))
                                {
                                  v2138 = (_QWORD *)(v1037[10] + 8 * v2169);
                                }
                                else
                                {
                                  v2138 = (_QWORD *)v1037[11];
                                }
                                (**(void (***)(_QWORD))*v2138)(*v2138);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1121 += 8;
        v1119 += 8;
      }
      while (v1119 != v1120);
    }
  }
  v1046 = *((_QWORD *)v2986 + 63);
  v1047 = *((_QWORD *)v2986 + 55);
  v2984 = (const ggl::Texture *)*((_QWORD *)v2986 + 58);
  v1048 = (_QWORD *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v1047);
  v1049 = v1048[7];
  v1050 = v1048[8];
  if (v1049 == v1050)
  {
    v1054 = 0;
    v1053 = 0;
  }
  else
  {
    v1051 = 0;
    v1052 = (const ggl::Texture **)(v1048[10] + 8);
    do
    {
      v1054 = *v1052;
      if (!*((_QWORD *)*v1052 + 3))
      {
        ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(v1046 + 80), *v1052, *(v1052 - 1));
        v1054 = *v1052;
      }
      v1053 = *(v1052 - 1);

      v1049 += 8;
      v1052 += 3;
      v1051 = v1053;
    }
    while (v1049 != v1050);
  }
  v1122 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>(v1047);
  v1123 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1047);
  v1124 = gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(v1047);
  v1125 = (_QWORD *)v1124;
  v1126 = v1124 + 32;
  v1128 = (unint64_t *)v1122[7];
  v1127 = (uint64_t *)v1122[8];
  if (v1123[8] - v1123[7] >= (unint64_t)((char *)v1127 - (char *)v1128))
    v1129 = v1122 + 4;
  else
    v1129 = v1123 + 4;
  if (*(_QWORD *)(v1124 + 64) - *(_QWORD *)(v1124 + 56) >= v1129[4] - v1129[3])
    v1130 = v1129;
  else
    v1130 = (_QWORD *)(v1124 + 32);
  if (v1122 + 4 == v1130 && v1128 != (unint64_t *)v1127)
  {
    if (v1054)
      v1142 = v1054;
    else
      v1142 = v2984;
    while (2)
    {
      v1160 = *((unsigned int *)v1128 + 1);
      v1161 = v1160 >> 7;
      v1162 = v1123[4];
      v1163 = (v1123[5] - v1162) >> 3;
      if (v1160 >> 7 >= v1163)
        goto LABEL_1250;
      v1164 = *(_QWORD *)(v1162 + 8 * v1161);
      if (!v1164)
        goto LABEL_1250;
      v1165 = *(unsigned __int16 *)(v1164 + 2 * (v1160 & 0x7F));
      v1167 = v1123[7];
      v1166 = v1123[8];
      v1168 = (v1166 - v1167) >> 3;
      if (v1168 <= v1165)
        goto LABEL_1250;
      v1169 = v1167 + 8 * v1165;
      if (v1169 == v1166 || *(_DWORD *)(v1169 + 4) != (_DWORD)v1160)
        goto LABEL_1250;
      v1171 = v1125[4];
      v1172 = (v1125[5] - v1171) >> 3;
      if (v1161 >= v1172)
        goto LABEL_1250;
      v1173 = *(_QWORD *)(v1171 + 8 * v1161);
      if (!v1173)
        goto LABEL_1250;
      v1174 = *(unsigned __int16 *)(v1173 + 2 * (v1160 & 0x7F));
      v1176 = v1125[7];
      v1175 = v1125[8];
      v1177 = (v1175 - v1176) >> 3;
      if (v1177 <= v1174)
        goto LABEL_1250;
      v1178 = v1176 + 8 * v1174;
      if (v1178 == v1175 || *(_DWORD *)(v1178 + 4) != (_DWORD)v1160)
        goto LABEL_1250;
      v1180 = *v1128;
      v1181 = HIDWORD(*v1128);
      v1182 = *v1128 >> 39;
      if (v1182 >= v1163
        || (v1183 = *(_QWORD *)(v1162 + 8 * v1182)) == 0
        || (v1184 = *(unsigned __int16 *)(v1183 + 2 * (HIDWORD(v1180) & 0x7F)), v1168 <= v1184)
        || ((v1185 = v1167 + 8 * v1184, v1185 != v1166)
          ? (v1186 = *(_DWORD *)(v1185 + 4) == (_DWORD)v1181)
          : (v1186 = 0),
            !v1186))
      {
        if (v1182 < v1172)
          goto LABEL_1275;
        goto LABEL_1248;
      }
      if (v1182 >= v1172)
        goto LABEL_1248;
LABEL_1275:
      v1187 = *(_QWORD *)(v1171 + 8 * v1182);
      if (v1187
        && (v1188 = *(unsigned __int16 *)(v1187 + 2 * (HIDWORD(v1180) & 0x7F)), v1177 > v1188)
        && ((v1189 = v1176 + 8 * v1188, v1189 != v1175)
          ? (v1190 = *(_DWORD *)(v1189 + 4) == (_DWORD)v1181)
          : (v1190 = 0),
            v1190))
      {
        v1159 = (_QWORD *)(v1125[10] + 8 * v1188);
      }
      else
      {
LABEL_1248:
        v1159 = (_QWORD *)v1125[11];
      }
      v2979 = v1142;
      (**(void (***)(_QWORD))*v1159)(*v1159);
      v1142 = v2979;
LABEL_1250:
      if (++v1128 == (unint64_t *)v1127)
        break;
      continue;
    }
  }
  if (v1123 + 4 == v1130)
  {
    v1143 = (unint64_t *)v1123[7];
    v1144 = (uint64_t *)v1123[8];
    if (v1143 != (unint64_t *)v1144)
    {
      v1145 = v1123[10];
      if (v1054)
        v1146 = v1054;
      else
        v1146 = v2984;
      do
      {
        v1428 = *((unsigned int *)v1143 + 1);
        v1429 = v1428 >> 7;
        v1430 = v1122[4];
        if (v1428 >> 7 < (v1122[5] - v1430) >> 3)
        {
          v1431 = *(_QWORD *)(v1430 + 8 * v1429);
          if (v1431)
          {
            v1432 = *(unsigned __int16 *)(v1431 + 2 * (v1428 & 0x7F));
            v1434 = v1122[7];
            v1433 = v1122[8];
            if (v1432 < (v1433 - v1434) >> 3)
            {
              v1435 = v1434 + 8 * v1432;
              if (v1435 != v1433 && *(_DWORD *)(v1435 + 4) == (_DWORD)v1428)
              {
                v1437 = v1125[4];
                v1438 = (v1125[5] - v1437) >> 3;
                if (v1429 < v1438)
                {
                  v1439 = *(_QWORD *)(v1437 + 8 * v1429);
                  if (v1439)
                  {
                    v1440 = *(unsigned __int16 *)(v1439 + 2 * (v1428 & 0x7F));
                    v1442 = v1125[7];
                    v1441 = v1125[8];
                    v1443 = (v1441 - v1442) >> 3;
                    if (v1443 > v1440)
                    {
                      v1444 = v1442 + 8 * v1440;
                      if (v1444 != v1441 && *(_DWORD *)(v1444 + 4) == (_DWORD)v1428)
                      {
                        v1446 = *v1143;
                        v1447 = *v1143 >> 39;
                        if (v1447 < v1438
                          && (v1448 = *(_QWORD *)(v1437 + 8 * v1447)) != 0
                          && (v1449 = *(unsigned __int16 *)(v1448 + 2 * (HIDWORD(v1446) & 0x7F)), v1443 > v1449)
                          && ((v1450 = HIDWORD(v1446), v1451 = v1442 + 8 * v1449, v1451 != v1441)
                            ? (v1452 = *(_DWORD *)(v1451 + 4) == (_DWORD)v1450)
                            : (v1452 = 0),
                              v1452))
                        {
                          v1427 = (_QWORD *)(v1125[10] + 8 * v1449);
                        }
                        else
                        {
                          v1427 = (_QWORD *)v1125[11];
                        }
                        v2980 = v1146;
                        (**(void (***)(_QWORD, uint64_t, const ggl::Texture *))*v1427)(*v1427, v1145, v1146);
                        v1146 = v2980;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1145 += 8;
        ++v1143;
      }
      while (v1143 != (unint64_t *)v1144);
    }
  }
  if ((_QWORD *)v1126 == v1130)
  {
    v1147 = (unint64_t *)v1125[7];
    v1148 = (uint64_t *)v1125[8];
    if (v1147 != (unint64_t *)v1148)
    {
      v1149 = (_QWORD *)v1125[10];
      if (!v1054)
        v1054 = v2984;
      do
      {
        v1454 = *((unsigned int *)v1147 + 1);
        v1455 = v1454 >> 7;
        v1456 = v1122[4];
        if (v1454 >> 7 < (v1122[5] - v1456) >> 3)
        {
          v1457 = *(_QWORD *)(v1456 + 8 * v1455);
          if (v1457)
          {
            v1458 = *(unsigned __int16 *)(v1457 + 2 * (v1454 & 0x7F));
            v1460 = v1122[7];
            v1459 = v1122[8];
            if (v1458 < (v1459 - v1460) >> 3)
            {
              v1461 = v1460 + 8 * v1458;
              if (v1461 != v1459 && *(_DWORD *)(v1461 + 4) == (_DWORD)v1454)
              {
                v1463 = v1123[4];
                v1464 = (v1123[5] - v1463) >> 3;
                if (v1455 < v1464)
                {
                  v1465 = *(_QWORD *)(v1463 + 8 * v1455);
                  if (v1465)
                  {
                    v1466 = *(unsigned __int16 *)(v1465 + 2 * (v1454 & 0x7F));
                    v1468 = v1123[7];
                    v1467 = v1123[8];
                    v1469 = (v1467 - v1468) >> 3;
                    if (v1469 > v1466)
                    {
                      v1470 = v1468 + 8 * v1466;
                      if (v1470 != v1467 && *(_DWORD *)(v1470 + 4) == (_DWORD)v1454)
                      {
                        v1472 = *v1147;
                        v1473 = *v1147 >> 39;
                        if (v1473 < v1464
                          && (v1474 = *(_QWORD *)(v1463 + 8 * v1473)) != 0
                          && (v1475 = *(unsigned __int16 *)(v1474 + 2 * (HIDWORD(v1472) & 0x7F)), v1469 > v1475)
                          && ((v1476 = HIDWORD(v1472), v1477 = v1468 + 8 * v1475, v1477 != v1467)
                            ? (v1478 = *(_DWORD *)(v1477 + 4) == (_DWORD)v1476)
                            : (v1478 = 0),
                              v1478))
                        {
                          v1453 = v1123[10] + 8 * v1475;
                        }
                        else
                        {
                          v1453 = v1123[11];
                        }
                        (**(void (***)(_QWORD, uint64_t, const ggl::Texture *))*v1149)(*v1149, v1453, v1054);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1149;
        ++v1147;
      }
      while (v1147 != (unint64_t *)v1148);
    }
  }

  v2993 = v2969;
  v1132 = *((_QWORD *)v2986 + 55);
  v1133 = (_QWORD *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v1132);
  v1134 = (_QWORD *)gdc::Registry::storage<arComponents::RenderOrder>(v1132);
  v1135 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(v1132);
  v1136 = gdc::Registry::storage<arComponents::IsVisible>(v1132);
  v1137 = (_QWORD *)v1136;
  v1138 = v1133[7];
  v1139 = v1133[8];
  if (v1134[8] - v1134[7] >= (unint64_t)(v1139 - v1138))
    v1140 = v1133 + 4;
  else
    v1140 = v1134 + 4;
  if (v1135[8] - v1135[7] < v1140[4] - v1140[3])
    v1140 = v1135 + 4;
  v2985 = v1136 + 32;
  if (*(_QWORD *)(v1136 + 64) - *(_QWORD *)(v1136 + 56) >= v1140[4] - v1140[3])
    v1141 = v1140;
  else
    v1141 = (_QWORD *)(v1136 + 32);
  if (v1133 + 4 == v1141)
  {
    *(_QWORD *)&v3002.f64[0] = &v2993;
    *(_QWORD *)&v3002.f64[1] = v2986;
    v3003.f64[0] = v2981;
    if (v1138 != v1139)
    {
      v1150 = v1133[10];
      do
      {
        v2172 = *(unsigned int *)(v1138 + 4);
        v2173 = v2172 >> 7;
        v2174 = v1134[4];
        v2175 = (v1134[5] - v2174) >> 3;
        if (v2172 >> 7 < v2175)
        {
          v2176 = *(_QWORD *)(v2174 + 8 * v2173);
          if (v2176)
          {
            v2177 = v2172 & 0x7F;
            v2178 = *(unsigned __int16 *)(v2176 + 2 * v2177);
            v2180 = v1134[7];
            v2179 = v1134[8];
            v2181 = (v2179 - v2180) >> 3;
            if (v2181 > v2178)
            {
              v2182 = v2180 + 8 * v2178;
              if (v2182 != v2179 && *(_DWORD *)(v2182 + 4) == (_DWORD)v2172)
              {
                v2184 = v1135[4];
                v2185 = (v1135[5] - v2184) >> 3;
                if (v2173 < v2185)
                {
                  v2186 = *(_QWORD *)(v2184 + 8 * v2173);
                  if (v2186)
                  {
                    v2187 = *(unsigned __int16 *)(v2186 + 2 * v2177);
                    v2189 = v1135[7];
                    v2188 = v1135[8];
                    v2190 = (v2188 - v2189) >> 3;
                    if (v2190 > v2187)
                    {
                      v2191 = v2189 + 8 * v2187;
                      if (v2191 != v2188 && *(_DWORD *)(v2191 + 4) == (_DWORD)v2172)
                      {
                        v2193 = v1137[4];
                        if (v2173 < (v1137[5] - v2193) >> 3)
                        {
                          v2194 = *(_QWORD *)(v2193 + 8 * v2173);
                          if (v2194)
                          {
                            v2195 = *(unsigned __int16 *)(v2194 + 2 * v2177);
                            v2197 = v1137[7];
                            v2196 = v1137[8];
                            if (v2195 < (v2196 - v2197) >> 3)
                            {
                              v2198 = v2197 + 8 * v2195;
                              if (v2198 != v2196 && *(_DWORD *)(v2198 + 4) == (_DWORD)v2172)
                              {
                                v2200 = *(_QWORD *)v1138;
                                v2201 = HIDWORD(*(_QWORD *)v1138);
                                v2202 = *(_QWORD *)v1138 >> 39;
                                if (v2202 < v2175
                                  && (v2203 = *(_QWORD *)(v2174 + 8 * v2202)) != 0
                                  && (v2204 = *(unsigned __int16 *)(v2203 + 2 * (HIDWORD(v2200) & 0x7F)), v2181 > v2204)
                                  && (v2205 = v2180 + 8 * v2204, v2205 != v2179)
                                  && *(_DWORD *)(v2205 + 4) == (_DWORD)v2201)
                                {
                                  v2206 = (_QWORD *)(v1134[10] + 8 * v2204);
                                }
                                else
                                {
                                  v2206 = (_QWORD *)v1134[11];
                                }
                                if (v2202 < v2185
                                  && (v2207 = *(_QWORD *)(v2184 + 8 * v2202)) != 0
                                  && (v2208 = *(unsigned __int16 *)(v2207 + 2 * (HIDWORD(v2200) & 0x7F)), v2190 > v2208)
                                  && (v2209 = v2189 + 8 * v2208, v2209 != v2188)
                                  && *(_DWORD *)(v2209 + 4) == (_DWORD)v2201)
                                {
                                  v2171 = (uint64_t *)(v1135[10] + 8 * v2208);
                                }
                                else
                                {
                                  v2171 = (uint64_t *)v1135[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v3002, v2200, v1150, v2206, v2171);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1150 += 224;
        v1138 += 8;
      }
      while (v1138 != v1139);
    }
  }
  if (v1134 + 4 == v1141)
  {
    *(_QWORD *)&v3002.f64[0] = &v2993;
    *(_QWORD *)&v3002.f64[1] = v2986;
    v3003.f64[0] = v2981;
    v1151 = v1134[7];
    v1152 = v1134[8];
    if (v1151 != v1152)
    {
      v1153 = (_QWORD *)v1134[10];
      do
      {
        v2211 = *(unsigned int *)(v1151 + 4);
        v2212 = v2211 >> 7;
        v2213 = v1133[4];
        v2214 = (v1133[5] - v2213) >> 3;
        if (v2211 >> 7 < v2214)
        {
          v2215 = *(_QWORD *)(v2213 + 8 * v2212);
          if (v2215)
          {
            v2216 = v2211 & 0x7F;
            v2217 = *(unsigned __int16 *)(v2215 + 2 * v2216);
            v2219 = v1133[7];
            v2218 = v1133[8];
            v2220 = (v2218 - v2219) >> 3;
            if (v2220 > v2217)
            {
              v2221 = v2219 + 8 * v2217;
              if (v2221 != v2218 && *(_DWORD *)(v2221 + 4) == (_DWORD)v2211)
              {
                v2223 = v1135[4];
                v2224 = (v1135[5] - v2223) >> 3;
                if (v2212 < v2224)
                {
                  v2225 = *(_QWORD *)(v2223 + 8 * v2212);
                  if (v2225)
                  {
                    v2226 = *(unsigned __int16 *)(v2225 + 2 * v2216);
                    v2228 = v1135[7];
                    v2227 = v1135[8];
                    v2229 = (v2227 - v2228) >> 3;
                    if (v2229 > v2226)
                    {
                      v2230 = v2228 + 8 * v2226;
                      if (v2230 != v2227 && *(_DWORD *)(v2230 + 4) == (_DWORD)v2211)
                      {
                        v2232 = v1137[4];
                        if (v2212 < (v1137[5] - v2232) >> 3)
                        {
                          v2233 = *(_QWORD *)(v2232 + 8 * v2212);
                          if (v2233)
                          {
                            v2234 = *(unsigned __int16 *)(v2233 + 2 * v2216);
                            v2236 = v1137[7];
                            v2235 = v1137[8];
                            if (v2234 < (v2235 - v2236) >> 3)
                            {
                              v2237 = v2236 + 8 * v2234;
                              if (v2237 != v2235 && *(_DWORD *)(v2237 + 4) == (_DWORD)v2211)
                              {
                                v2239 = *(_QWORD *)v1151;
                                v2240 = HIDWORD(*(_QWORD *)v1151);
                                v2241 = *(_QWORD *)v1151 >> 39;
                                if (v2241 < v2214
                                  && (v2242 = *(_QWORD *)(v2213 + 8 * v2241)) != 0
                                  && (v2243 = *(unsigned __int16 *)(v2242 + 2 * (HIDWORD(v2239) & 0x7F)), v2220 > v2243)
                                  && (v2244 = v2219 + 8 * v2243, v2244 != v2218)
                                  && *(_DWORD *)(v2244 + 4) == (_DWORD)v2240)
                                {
                                  v2245 = v1133[10] + 224 * v2243;
                                }
                                else
                                {
                                  v2245 = v1133[11];
                                }
                                if (v2241 < v2224
                                  && (v2246 = *(_QWORD *)(v2223 + 8 * v2241)) != 0
                                  && (v2247 = *(unsigned __int16 *)(v2246 + 2 * (HIDWORD(v2239) & 0x7F)), v2229 > v2247)
                                  && (v2248 = v2228 + 8 * v2247, v2248 != v2227)
                                  && *(_DWORD *)(v2248 + 4) == (_DWORD)v2240)
                                {
                                  v2210 = (uint64_t *)(v1135[10] + 8 * v2247);
                                }
                                else
                                {
                                  v2210 = (uint64_t *)v1135[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v3002, v2239, v2245, v1153, v2210);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1153;
        v1151 += 8;
      }
      while (v1151 != v1152);
    }
  }
  if (v1135 + 4 == v1141)
  {
    *(_QWORD *)&v3002.f64[0] = &v2993;
    *(_QWORD *)&v3002.f64[1] = v2986;
    v3003.f64[0] = v2981;
    v1154 = v1135[7];
    v1155 = v1135[8];
    if (v1154 != v1155)
    {
      v1156 = (uint64_t *)v1135[10];
      do
      {
        v2250 = *(unsigned int *)(v1154 + 4);
        v2251 = v2250 >> 7;
        v2252 = v1133[4];
        v2253 = (v1133[5] - v2252) >> 3;
        if (v2250 >> 7 < v2253)
        {
          v2254 = *(_QWORD *)(v2252 + 8 * v2251);
          if (v2254)
          {
            v2255 = v2250 & 0x7F;
            v2256 = *(unsigned __int16 *)(v2254 + 2 * v2255);
            v2258 = v1133[7];
            v2257 = v1133[8];
            v2259 = (v2257 - v2258) >> 3;
            if (v2259 > v2256)
            {
              v2260 = v2258 + 8 * v2256;
              if (v2260 != v2257 && *(_DWORD *)(v2260 + 4) == (_DWORD)v2250)
              {
                v2262 = v1134[4];
                v2263 = (v1134[5] - v2262) >> 3;
                if (v2251 < v2263)
                {
                  v2264 = *(_QWORD *)(v2262 + 8 * v2251);
                  if (v2264)
                  {
                    v2265 = *(unsigned __int16 *)(v2264 + 2 * v2255);
                    v2267 = v1134[7];
                    v2266 = v1134[8];
                    v2268 = (v2266 - v2267) >> 3;
                    if (v2268 > v2265)
                    {
                      v2269 = v2267 + 8 * v2265;
                      if (v2269 != v2266 && *(_DWORD *)(v2269 + 4) == (_DWORD)v2250)
                      {
                        v2271 = v1137[4];
                        if (v2251 < (v1137[5] - v2271) >> 3)
                        {
                          v2272 = *(_QWORD *)(v2271 + 8 * v2251);
                          if (v2272)
                          {
                            v2273 = *(unsigned __int16 *)(v2272 + 2 * v2255);
                            v2275 = v1137[7];
                            v2274 = v1137[8];
                            if (v2273 < (v2274 - v2275) >> 3)
                            {
                              v2276 = v2275 + 8 * v2273;
                              if (v2276 != v2274 && *(_DWORD *)(v2276 + 4) == (_DWORD)v2250)
                              {
                                v2278 = *(_QWORD *)v1154;
                                v2279 = HIDWORD(*(_QWORD *)v1154);
                                v2280 = *(_QWORD *)v1154 >> 39;
                                if (v2280 < v2253
                                  && (v2281 = *(_QWORD *)(v2252 + 8 * v2280)) != 0
                                  && (v2282 = *(unsigned __int16 *)(v2281 + 2 * (HIDWORD(v2278) & 0x7F)), v2259 > v2282)
                                  && (v2283 = v2258 + 8 * v2282, v2283 != v2257)
                                  && *(_DWORD *)(v2283 + 4) == (_DWORD)v2279)
                                {
                                  v2284 = v1133[10] + 224 * v2282;
                                }
                                else
                                {
                                  v2284 = v1133[11];
                                }
                                if (v2280 < v2263
                                  && (v2285 = *(_QWORD *)(v2262 + 8 * v2280)) != 0
                                  && (v2286 = *(unsigned __int16 *)(v2285 + 2 * (HIDWORD(v2278) & 0x7F)), v2268 > v2286)
                                  && (v2287 = v2267 + 8 * v2286, v2287 != v2266)
                                  && *(_DWORD *)(v2287 + 4) == (_DWORD)v2279)
                                {
                                  v2249 = (_QWORD *)(v1134[10] + 8 * v2286);
                                }
                                else
                                {
                                  v2249 = (_QWORD *)v1134[11];
                                }
                                md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v3002, v2278, v2284, v2249, v1156);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1156;
        v1154 += 8;
      }
      while (v1154 != v1155);
    }
  }
  if ((_QWORD *)v2985 == v1141)
  {
    *(_QWORD *)&v3002.f64[0] = &v2993;
    *(_QWORD *)&v3002.f64[1] = v2986;
    v3003.f64[0] = v2981;
    v1157 = v1137[7];
    for (jj = v1137[8]; v1157 != jj; v1157 += 8)
    {
      v2289 = *(unsigned int *)(v1157 + 4);
      v2290 = v2289 >> 7;
      v2291 = v1133[4];
      v2292 = (v1133[5] - v2291) >> 3;
      if (v2289 >> 7 < v2292)
      {
        v2293 = *(_QWORD *)(v2291 + 8 * v2290);
        if (v2293)
        {
          v2294 = v2289 & 0x7F;
          v2295 = *(unsigned __int16 *)(v2293 + 2 * v2294);
          v2297 = v1133[7];
          v2296 = v1133[8];
          v2298 = (v2296 - v2297) >> 3;
          if (v2298 > v2295)
          {
            v2299 = v2297 + 8 * v2295;
            if (v2299 != v2296 && *(_DWORD *)(v2299 + 4) == (_DWORD)v2289)
            {
              v2301 = v1134[4];
              v2302 = (v1134[5] - v2301) >> 3;
              if (v2290 < v2302)
              {
                v2303 = *(_QWORD *)(v2301 + 8 * v2290);
                if (v2303)
                {
                  v2304 = *(unsigned __int16 *)(v2303 + 2 * v2294);
                  v2306 = v1134[7];
                  v2305 = v1134[8];
                  v2307 = (v2305 - v2306) >> 3;
                  if (v2307 > v2304)
                  {
                    v2308 = v2306 + 8 * v2304;
                    if (v2308 != v2305 && *(_DWORD *)(v2308 + 4) == (_DWORD)v2289)
                    {
                      v2310 = v1135[4];
                      v2311 = (v1135[5] - v2310) >> 3;
                      if (v2290 < v2311)
                      {
                        v2312 = *(_QWORD *)(v2310 + 8 * v2290);
                        if (v2312)
                        {
                          v2313 = *(unsigned __int16 *)(v2312 + 2 * v2294);
                          v2315 = v1135[7];
                          v2314 = v1135[8];
                          v2316 = (v2314 - v2315) >> 3;
                          if (v2316 > v2313)
                          {
                            v2317 = v2315 + 8 * v2313;
                            if (v2317 != v2314 && *(_DWORD *)(v2317 + 4) == (_DWORD)v2289)
                            {
                              v2319 = *(_QWORD *)v1157;
                              v2320 = HIDWORD(*(_QWORD *)v1157);
                              v2321 = *(_QWORD *)v1157 >> 39;
                              if (v2321 < v2292
                                && (v2322 = *(_QWORD *)(v2291 + 8 * v2321)) != 0
                                && (v2323 = *(unsigned __int16 *)(v2322 + 2 * (HIDWORD(v2319) & 0x7F)), v2298 > v2323)
                                && (v2324 = v2297 + 8 * v2323, v2324 != v2296)
                                && *(_DWORD *)(v2324 + 4) == (_DWORD)v2320)
                              {
                                v2325 = v1133[10] + 224 * v2323;
                              }
                              else
                              {
                                v2325 = v1133[11];
                              }
                              if (v2321 < v2302
                                && (v2326 = *(_QWORD *)(v2301 + 8 * v2321)) != 0
                                && (v2327 = *(unsigned __int16 *)(v2326 + 2 * (HIDWORD(v2319) & 0x7F)), v2307 > v2327)
                                && (v2328 = v2306 + 8 * v2327, v2328 != v2305)
                                && *(_DWORD *)(v2328 + 4) == (_DWORD)v2320)
                              {
                                v2329 = (_QWORD *)(v1134[10] + 8 * v2327);
                              }
                              else
                              {
                                v2329 = (_QWORD *)v1134[11];
                              }
                              if (v2321 < v2311
                                && (v2330 = *(_QWORD *)(v2310 + 8 * v2321)) != 0
                                && (v2331 = *(unsigned __int16 *)(v2330 + 2 * (HIDWORD(v2319) & 0x7F)), v2316 > v2331)
                                && (v2332 = v2315 + 8 * v2331, v2332 != v2314)
                                && *(_DWORD *)(v2332 + 4) == (_DWORD)v2320)
                              {
                                v2288 = (uint64_t *)(v1135[10] + 8 * v2331);
                              }
                              else
                              {
                                v2288 = (uint64_t *)v1135[11];
                              }
                              md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()((uint64_t)&v3002, v2319, v2325, v2329, v2288);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v2987 != (unint64_t *)v2990)
    free(v2987);
}

void sub_19F504DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  if (a19 != a21)
    free(a19);
  _Unwind_Resume(exception_object);
}

unint64_t md::ARMeshRenderLayer::clearScene(ggl::MetalDevice **this, uint64_t a2, uint64_t a3, ggl::TextureCube *a4)
{
  return detachEnvironmentTexture(this[55], this[55], this[58], a4);
}

_QWORD *md::ARMeshRenderLayer::prune(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD **v13;

  v1 = result;
  v2 = (_QWORD *)result[54];
  v4 = (_QWORD **)*v2;
  v3 = (_QWORD **)v2[1];
  if ((_QWORD **)*v2 != v3)
  {
    do
    {
      result = *v4;
      if (*v4)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v3 = (_QWORD **)v2[1];
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = (_QWORD **)*v2;
  }
  v2[1] = v4;
  v5 = (_QWORD *)v1[9];
  v7 = (_QWORD **)*v5;
  v6 = (_QWORD **)v5[1];
  if ((_QWORD **)*v5 != v6)
  {
    do
    {
      result = *v7;
      if (*v7)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v6 = (_QWORD **)v5[1];
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = (_QWORD **)*v5;
  }
  v5[1] = v7;
  v8 = (_QWORD *)v1[10];
  v10 = (_QWORD **)*v8;
  v9 = (_QWORD **)v8[1];
  if ((_QWORD **)*v8 != v9)
  {
    do
    {
      result = *v10;
      if (*v10)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v9 = (_QWORD **)v8[1];
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = (_QWORD **)*v8;
  }
  v8[1] = v10;
  v11 = (_QWORD *)v1[8];
  v13 = (_QWORD **)*v11;
  v12 = (_QWORD **)v11[1];
  if ((_QWORD **)*v11 != v12)
  {
    do
    {
      result = *v13;
      if (*v13)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        v12 = (_QWORD **)v11[1];
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = (_QWORD **)*v11;
  }
  v11[1] = v13;
  return result;
}

uint64_t md::ARMeshRenderLayer::layoutWithoutStyles(md::ARMeshRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARMeshRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 16))(this, a2);
}

unint64_t detachEnvironmentTexture(ggl::MetalDevice *a1, gdc::Registry *a2, gdc::Registry *a3, ggl::TextureCube *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t result;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[2];

  v7 = (_QWORD *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>((uint64_t)a1);
  v8 = v7[7];
  v9 = v7[8];
  if (v8 != v9)
  {
    v10 = v7[10];
    do
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11 && *(_QWORD *)(v11 + 24))
      {
        v12 = *(std::__shared_weak_count **)(v11 + 16);
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        ++*(_DWORD *)(v11 + 32);
      }
      v10 += 24;
      v8 += 8;
    }
    while (v8 != v9);
  }
  v15 = (_QWORD *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>((uint64_t)a1);
  v16 = v15;
  if (!v15[29] || (v17 = (_QWORD *)v15[28]) == 0)
  {
LABEL_17:
    v16[8] = v16[7];
    v22 = v16[10];
    for (i = v16[11]; i != v22; i -= 24)
    {
      v25 = *(std::__shared_weak_count **)(i - 8);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v24 = *(void **)(i - 24);

    }
    v16[11] = v22;
    v28 = (_QWORD *)gdc::Registry::storage<arComponents::ContextEntity>((uint64_t)a2);
    v29 = (_QWORD *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>((uint64_t)a2);
    result = gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>((uint64_t)a2);
    v31 = (_QWORD *)result;
    v32 = result + 32;
    v34 = (unint64_t *)v28[7];
    v33 = (uint64_t *)v28[8];
    if (v29[8] - v29[7] >= (unint64_t)((char *)v33 - (char *)v34))
      v35 = v28 + 4;
    else
      v35 = v29 + 4;
    if (*(_QWORD *)(result + 64) - *(_QWORD *)(result + 56) >= v35[4] - v35[3])
      v36 = v35;
    else
      v36 = (_QWORD *)(result + 32);
    if (v28 + 4 != v36 || v34 == (unint64_t *)v33)
    {
LABEL_36:
      if (v29 + 4 == v36)
      {
        v38 = (unint64_t *)v29[7];
        v39 = (uint64_t *)v29[8];
        if (v38 != (unint64_t *)v39)
        {
          v40 = v29[10];
          do
          {
            v76 = *((unsigned int *)v38 + 1);
            v77 = v76 >> 7;
            v78 = v28[4];
            if (v76 >> 7 < (v28[5] - v78) >> 3)
            {
              v79 = *(_QWORD *)(v78 + 8 * v77);
              if (v79)
              {
                v80 = *(unsigned __int16 *)(v79 + 2 * (v76 & 0x7F));
                v82 = v28[7];
                v81 = v28[8];
                if (v80 < (v81 - v82) >> 3)
                {
                  v83 = v82 + 8 * v80;
                  if (v83 != v81 && *(_DWORD *)(v83 + 4) == (_DWORD)v76)
                  {
                    v85 = v31[4];
                    v86 = (v31[5] - v85) >> 3;
                    if (v77 < v86)
                    {
                      v87 = *(_QWORD *)(v85 + 8 * v77);
                      if (v87)
                      {
                        v88 = *(unsigned __int16 *)(v87 + 2 * (v76 & 0x7F));
                        v90 = v31[7];
                        v89 = v31[8];
                        v91 = (v89 - v90) >> 3;
                        if (v91 > v88)
                        {
                          v92 = v90 + 8 * v88;
                          if (v92 != v89 && *(_DWORD *)(v92 + 4) == (_DWORD)v76)
                          {
                            v94 = *v38;
                            v95 = *v38 >> 39;
                            if (v95 < v86
                              && (v96 = *(_QWORD *)(v85 + 8 * v95)) != 0
                              && (v97 = *(unsigned __int16 *)(v96 + 2 * (HIDWORD(v94) & 0x7F)), v91 > v97)
                              && ((v98 = HIDWORD(v94), v99 = v90 + 8 * v97, v99 != v89)
                                ? (v100 = *(_DWORD *)(v99 + 4) == (_DWORD)v98)
                                : (v100 = 0),
                                  v100))
                            {
                              v75 = (_QWORD *)(v31[10] + 8 * v97);
                            }
                            else
                            {
                              v75 = (_QWORD *)v31[11];
                            }
                            result = (**(uint64_t (***)(_QWORD, uint64_t, gdc::Registry *))*v75)(*v75, v40, a3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v40 += 8;
            ++v38;
          }
          while (v38 != (unint64_t *)v39);
        }
      }
      if ((_QWORD *)v32 == v36)
      {
        v41 = (unint64_t *)v31[7];
        v42 = (uint64_t *)v31[8];
        if (v41 != (unint64_t *)v42)
        {
          v43 = (_QWORD *)v31[10];
          do
          {
            v102 = *((unsigned int *)v41 + 1);
            v103 = v102 >> 7;
            v104 = v28[4];
            if (v102 >> 7 < (v28[5] - v104) >> 3)
            {
              v105 = *(_QWORD *)(v104 + 8 * v103);
              if (v105)
              {
                v106 = *(unsigned __int16 *)(v105 + 2 * (v102 & 0x7F));
                v108 = v28[7];
                v107 = v28[8];
                if (v106 < (v107 - v108) >> 3)
                {
                  v109 = v108 + 8 * v106;
                  if (v109 != v107 && *(_DWORD *)(v109 + 4) == (_DWORD)v102)
                  {
                    v111 = v29[4];
                    v112 = (v29[5] - v111) >> 3;
                    if (v103 < v112)
                    {
                      v113 = *(_QWORD *)(v111 + 8 * v103);
                      if (v113)
                      {
                        v114 = *(unsigned __int16 *)(v113 + 2 * (v102 & 0x7F));
                        v116 = v29[7];
                        v115 = v29[8];
                        v117 = (v115 - v116) >> 3;
                        if (v117 > v114)
                        {
                          v118 = v116 + 8 * v114;
                          if (v118 != v115 && *(_DWORD *)(v118 + 4) == (_DWORD)v102)
                          {
                            v120 = *v41;
                            v121 = *v41 >> 39;
                            if (v121 < v112
                              && (v122 = *(_QWORD *)(v111 + 8 * v121)) != 0
                              && (v123 = *(unsigned __int16 *)(v122 + 2 * (HIDWORD(v120) & 0x7F)), v117 > v123)
                              && ((v124 = HIDWORD(v120), v125 = v116 + 8 * v123, v125 != v115)
                                ? (v126 = *(_DWORD *)(v125 + 4) == (_DWORD)v124)
                                : (v126 = 0),
                                  v126))
                            {
                              v101 = v29[10] + 8 * v123;
                            }
                            else
                            {
                              v101 = v29[11];
                            }
                            result = (**(uint64_t (***)(_QWORD, uint64_t, gdc::Registry *))*v43)(*v43, v101, a3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v43;
            ++v41;
          }
          while (v41 != (unint64_t *)v42);
        }
      }
      return result;
    }
    while (1)
    {
      v45 = *((unsigned int *)v34 + 1);
      v46 = v45 >> 7;
      v47 = v29[4];
      v48 = (v29[5] - v47) >> 3;
      if (v45 >> 7 >= v48)
        goto LABEL_45;
      v49 = *(_QWORD *)(v47 + 8 * v46);
      if (!v49)
        goto LABEL_45;
      v50 = *(unsigned __int16 *)(v49 + 2 * (v45 & 0x7F));
      v52 = v29[7];
      v51 = v29[8];
      result = (v51 - v52) >> 3;
      if (result <= v50)
        goto LABEL_45;
      v53 = v52 + 8 * v50;
      if (v53 == v51 || *(_DWORD *)(v53 + 4) != (_DWORD)v45)
        goto LABEL_45;
      v55 = v31[4];
      v56 = (v31[5] - v55) >> 3;
      if (v46 >= v56)
        goto LABEL_45;
      v57 = *(_QWORD *)(v55 + 8 * v46);
      if (!v57)
        goto LABEL_45;
      v58 = *(unsigned __int16 *)(v57 + 2 * (v45 & 0x7F));
      v60 = v31[7];
      v59 = v31[8];
      v61 = (v59 - v60) >> 3;
      if (v61 <= v58)
        goto LABEL_45;
      v62 = v60 + 8 * v58;
      if (v62 == v59 || *(_DWORD *)(v62 + 4) != (_DWORD)v45)
        goto LABEL_45;
      v64 = *v34;
      v65 = HIDWORD(*v34);
      v66 = *v34 >> 39;
      if (v66 < v48
        && (v67 = *(_QWORD *)(v47 + 8 * v66)) != 0
        && (v68 = *(unsigned __int16 *)(v67 + 2 * (HIDWORD(v64) & 0x7F)), result > v68)
        && ((v69 = v52 + 8 * v68, v69 != v51) ? (v70 = *(_DWORD *)(v69 + 4) == (_DWORD)v65) : (v70 = 0), v70))
      {
        if (v66 >= v56)
          goto LABEL_43;
      }
      else if (v66 >= v56)
      {
        goto LABEL_43;
      }
      v71 = *(_QWORD *)(v55 + 8 * v66);
      if (v71)
      {
        v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v64) & 0x7F));
        if (v61 > v72)
        {
          v73 = v60 + 8 * v72;
          if (v73 != v59 && *(_DWORD *)(v73 + 4) == (_DWORD)v65)
          {
            v44 = (_QWORD *)(v31[10] + 8 * v72);
            goto LABEL_44;
          }
        }
      }
LABEL_43:
      v44 = (_QWORD *)v31[11];
LABEL_44:
      result = (**(uint64_t (***)(_QWORD))*v44)(*v44);
LABEL_45:
      if (++v34 == (unint64_t *)v33)
        goto LABEL_36;
    }
  }
  v18 = v15[31];
  v19 = v15[7];
  v20 = (v15[8] - v19) >> 3;
  while (1)
  {
    v129[0] = v19;
    v129[1] = v20;
    v128 = v18;
    v21 = v17[6];
    if (!v21)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, &v128, v129);
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_17;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v127);
}

uint64_t gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB98AEFC198486853;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB98AEFC198486853;
      if (*(_QWORD *)&v3 <= 0xB98AEFC198486853)
        v5 = 0xB98AEFC198486853 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB98AEFC198486853;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB98AEFC198486853)
            {
              if (v7[2] == 0xB98AEFC198486853)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB98AEFC198486853)
          {
            if (v7[2] == 0xB98AEFC198486853)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AREnvironmentProbeTexture]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B22C8;
  *(_QWORD *)(v11 + 8) = 0xB98AEFC198486853;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB98AEFC198486853, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB98AEFC198486853;
  v15[1] = "arComponents::AREnvironmentProbeTexture]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB98AEFC198486853, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50585C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ContextEntity>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1D46EE08B2FE26F2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1D46EE08B2FE26F2;
      if (*(_QWORD *)&v3 <= 0x1D46EE08B2FE26F2uLL)
        v5 = 0x1D46EE08B2FE26F2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1D46EE08B2FE26F2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1D46EE08B2FE26F2)
            {
              if (v7[2] == 0x1D46EE08B2FE26F2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1D46EE08B2FE26F2)
          {
            if (v7[2] == 0x1D46EE08B2FE26F2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ContextEntity]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1908;
  *(_QWORD *)(v11 + 8) = 0x1D46EE08B2FE26F2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1D46EE08B2FE26F2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1D46EE08B2FE26F2;
  v15[1] = "arComponents::ContextEntity]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1D46EE08B2FE26F2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F505A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::PipelineInstanceToUse>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9E3ED38A72A73EF5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9E3ED38A72A73EF5;
      if (*(_QWORD *)&v3 <= 0x9E3ED38A72A73EF5)
        v5 = 0x9E3ED38A72A73EF5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9E3ED38A72A73EF5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9E3ED38A72A73EF5)
            {
              if (v7[2] == 0x9E3ED38A72A73EF5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9E3ED38A72A73EF5)
          {
            if (v7[2] == 0x9E3ED38A72A73EF5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::PipelineInstanceToUse]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B20E8;
  *(_QWORD *)(v11 + 8) = 0x9E3ED38A72A73EF5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9E3ED38A72A73EF5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9E3ED38A72A73EF5;
  v15[1] = "arComponents::PipelineInstanceToUse]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9E3ED38A72A73EF5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F505CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3B6041BC66626A0FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3B6041BC66626A0FLL;
      if (*(_QWORD *)&v3 <= 0x3B6041BC66626A0FuLL)
        v5 = 0x3B6041BC66626A0FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3B6041BC66626A0FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3B6041BC66626A0FLL)
            {
              if (v7[2] == 0x3B6041BC66626A0FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3B6041BC66626A0FLL)
          {
            if (v7[2] == 0x3B6041BC66626A0FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::SupportsEnvironmentTexture]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B35E8;
  *(_QWORD *)(v11 + 8) = 0x3B6041BC66626A0FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3B6041BC66626A0FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3B6041BC66626A0FLL;
  v15[1] = "md::pipelineECS::SupportsEnvironmentTexture]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3B6041BC66626A0FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F505ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::SupportsEnvironmentTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineInstanceToUse>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::ContextEntity>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ContextEntity>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ContextEntity>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ContextEntity>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AREnvironmentProbeTexture>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AREnvironmentProbeTexture>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v33 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  objc_storeStrong((id *)(v14 + 24 * v7), *(id *)(v15 - 24));
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(v14 + 24 * v7 + 8) = v17;
  v20 = v14 + 24 * v7;
  v21 = *(std::__shared_weak_count **)(v20 + 16);
  *(_QWORD *)(v20 + 16) = v16;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = a1[11];
  v25 = *(std::__shared_weak_count **)(v24 - 8);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  a1[11] = v24 - 24;
  v28 = (_QWORD *)a1[28];
  if (!v28)
    return 1;
  v29 = a1[31];
  while (1)
  {
    v35[0] = &v33;
    v35[1] = 1;
    v34 = v29;
    v30 = v28[6];
    if (!v30)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, &v34, v35);
    v28 = (_QWORD *)*v28;
    if (!v28)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::contains(v31, v32);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AREnvironmentProbeTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,arComponents::AREnvironmentProbeTexture>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v3 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v5 = *(void **)(v3 - 24);
        v3 -= 24;

      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)*a1;
  if (*a1)
  {
    v11 = (_QWORD *)a1[1];
    v12 = (_QWORD *)*a1;
    if (v11 != v10)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          MEMORY[0x1A1AF4E00](v13, 0x1000C40104B78CFLL);
      }
      while (v11 != v10);
      v12 = (_QWORD *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

uint64_t gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x191A1E6102D25134;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x191A1E6102D25134;
      if (*(_QWORD *)&v3 <= 0x191A1E6102D25134uLL)
        v5 = 0x191A1E6102D25134uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x191A1E6102D25134;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x191A1E6102D25134)
            {
              if (v7[2] == 0x191A1E6102D25134)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x191A1E6102D25134)
          {
            if (v7[2] == 0x191A1E6102D25134)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::QueuedForDeletionAfterLayout]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2598;
  *(_QWORD *)(v11 + 8) = 0x191A1E6102D25134;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x191A1E6102D25134uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x191A1E6102D25134;
  v15[1] = "arComponents::QueuedForDeletionAfterLayout]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x191A1E6102D25134, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5068CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MeshRenderableComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x675E87F739E21A6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x675E87F739E21A6;
      if (*(_QWORD *)&v3 <= 0x675E87F739E21A6uLL)
        v5 = 0x675E87F739E21A6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x675E87F739E21A6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x675E87F739E21A6)
            {
              if (v7[2] == 0x675E87F739E21A6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x675E87F739E21A6)
          {
            if (v7[2] == 0x675E87F739E21A6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::MeshRenderableComponent]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2238;
  *(_QWORD *)(v11 + 8) = 0x675E87F739E21A6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x675E87F739E21A6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x675E87F739E21A6;
  v15[1] = "arComponents::MeshRenderableComponent]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x675E87F739E21A6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F506AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RenderOrder>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x72E34259225F8C3ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x72E34259225F8C3ELL;
      if (*(_QWORD *)&v3 <= 0x72E34259225F8C3EuLL)
        v5 = 0x72E34259225F8C3EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x72E34259225F8C3ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x72E34259225F8C3ELL)
            {
              if (v7[2] == 0x72E34259225F8C3ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x72E34259225F8C3ELL)
          {
            if (v7[2] == 0x72E34259225F8C3ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RenderOrder]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B17B8;
  *(_QWORD *)(v11 + 8) = 0x72E34259225F8C3ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x72E34259225F8C3EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x72E34259225F8C3ELL;
  v15[1] = "arComponents::RenderOrder]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x72E34259225F8C3ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F506D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARMeshRenderLayer::layoutRenderables(md::LayoutContext const&,ggl::CommandBuffer *,md::PassList &)::$_0::operator()(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ggl::RenderItem *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = **(_QWORD **)a1;
  v12 = (_QWORD *)gdc::Registry::storage<arComponents::CommandBufferLocation>(*(_QWORD *)(v10 + 440));
  v13 = v12[4];
  if (a2 >> 39 < (v12[5] - v13) >> 3)
  {
    v14 = *(_QWORD *)(v13 + 8 * (a2 >> 39));
    if (v14)
    {
      v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(a2) & 0x7F));
      v17 = v12[7];
      v16 = v12[8];
      if (v15 < (v16 - v17) >> 3)
      {
        v18 = v17 + 8 * v15;
        if (v18 != v16 && *(_DWORD *)(v18 + 4) == HIDWORD(a2))
        {
          v20 = v12[10];
          v21 = (unsigned __int8 *)(v20 + 2 * v15);
          if (v21 != (unsigned __int8 *)v12[11] && v20 != 0)
          {
            v23 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
            v24 = v23[3];
            v25 = v23[4];
            v26 = v25 - v24;
            if (v25 == v24)
              goto LABEL_20;
            v27 = 0;
            v28 = v26 >> 3;
            while (1)
            {
              v29 = *(unsigned __int8 **)(v24 + 8 * v27);
              if (*v29 == *v21)
              {
                v30 = *((_QWORD *)v29 + 1);
                v31 = v23[15];
                if (v30 < (v23[16] - v31) >> 3)
                  break;
              }
              if (++v27 >= v28)
                goto LABEL_20;
            }
            v32 = *(_QWORD *)(v31 + 8 * v30);
            if (!v32 || (v11 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8 * v21[1])) == 0)
LABEL_20:
              v11 = **(_QWORD **)a1;
          }
        }
      }
    }
  }
  v33 = (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a3 + 216) + 96) + 48)
       - *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a3 + 216) + 96) + 40)) >> 1;
  v34 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v10 + 432));
  *((_QWORD *)v34 + 6) = *a4;
  v35 = *a5;
  v36 = **(_QWORD **)(a3 + 216);
  *((_QWORD *)v34 + 3) = v10 + 136;
  *((_QWORD *)v34 + 4) = v35;
  v37 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 16);
  *((_QWORD *)v34 + 8) = v36;
  *((_QWORD *)v34 + 9) = 0;
  *((_QWORD *)v34 + 10) = v33;
  *((_QWORD *)v34 + 11) = 0;
  *((_QWORD *)v34 + 12) = 1;
  *((_QWORD *)v34 + 13) = v37;
  return ggl::CommandBuffer::pushRenderItem(v11, v34);
}

uint64_t gdc::Registry::storage<arComponents::CommandBufferLocation>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4F42F084E69A322;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4F42F084E69A322;
      if (*(_QWORD *)&v3 <= 0x4F42F084E69A322uLL)
        v5 = 0x4F42F084E69A322uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4F42F084E69A322;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4F42F084E69A322)
            {
              if (v7[2] == 0x4F42F084E69A322)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4F42F084E69A322)
          {
            if (v7[2] == 0x4F42F084E69A322)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CommandBufferLocation]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B20B8;
  *(_QWORD *)(v11 + 8) = 0x4F42F084E69A322;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4F42F084E69A322uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4F42F084E69A322;
  v15[1] = "arComponents::CommandBufferLocation]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4F42F084E69A322, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5070C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(a1[11] - 2);
  a1[11] -= 2;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CommandBufferLocation>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RenderOrder>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RenderOrder>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RenderOrder>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RenderOrder>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v27 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 224 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  md::MeshRenderable::operator=(v14, a1[11] - 224);
  v15 = a1[11];
  *(_QWORD *)(v15 - 224) = &off_1E428F838;
  if (*(_BYTE *)(v15 - 48))
  {
    v16 = *(std::__shared_weak_count **)(v15 - 64);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19 = *(std::__shared_weak_count **)(v15 - 184);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  a1[11] = v15 - 224;
  v22 = (_QWORD *)a1[28];
  if (!v22)
    return 1;
  v23 = a1[31];
  while (1)
  {
    v29[0] = &v27;
    v29[1] = 1;
    v28 = v23;
    v24 = v22[6];
    if (!v24)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v24 + 48))(v24, &v28, v29);
    v22 = (_QWORD *)*v22;
    if (!v22)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::contains(v25, v26);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t md::MeshRenderable::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  __int128 v30;

  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 124) == *(unsigned __int8 *)(a2 + 124))
  {
    if (*(_BYTE *)(a1 + 124))
    {
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    }
  }
  else if (*(_BYTE *)(a1 + 124))
  {
    *(_BYTE *)(a1 + 124) = 0;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 100);
    *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 100) = v13;
    *(_BYTE *)(a1 + 124) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 140) == *(unsigned __int8 *)(a2 + 140))
  {
    if (*(_BYTE *)(a1 + 140))
    {
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    }
  }
  else if (*(_BYTE *)(a1 + 140))
  {
    *(_BYTE *)(a1 + 140) = 0;
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v14;
    *(_BYTE *)(a1 + 140) = 1;
  }
  v15 = *(_DWORD *)(a2 + 144);
  *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v15;
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(_BYTE *)(a1 + 176))
    {
      v17 = *(_QWORD *)(a2 + 152);
      v16 = *(_QWORD *)(a2 + 160);
      if (v16)
      {
        v18 = (unint64_t *)(v16 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 160);
      *(_QWORD *)(a1 + 152) = v17;
      *(_QWORD *)(a1 + 160) = v16;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    }
  }
  else if (*(_BYTE *)(a1 + 176))
  {
    v23 = *(std::__shared_weak_count **)(a1 + 160);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *(_BYTE *)(a1 + 176) = 0;
  }
  else
  {
    v26 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = 1;
  }
  v29 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v29;
  if (*(unsigned __int8 *)(a1 + 193) == *(unsigned __int8 *)(a2 + 193))
  {
    if (*(_BYTE *)(a1 + 193))
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  }
  else if (*(_BYTE *)(a1 + 193))
  {
    *(_BYTE *)(a1 + 193) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_BYTE *)(a1 + 193) = 1;
  }
  v30 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 196) = v30;
  return a1;
}

_QWORD *gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (!v2)
    goto LABEL_19;
  v3 = a1[11];
  v4 = (void *)a1[10];
  if (v3 == v2)
    goto LABEL_18;
  v5 = a1[11];
  do
  {
    *(_QWORD *)(v5 - 224) = &off_1E428F838;
    v5 -= 224;
    if (!*(_BYTE *)(v5 + 176))
      goto LABEL_10;
    v6 = *(std::__shared_weak_count **)(v3 - 64);
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = *(std::__shared_weak_count **)(v3 - 184);
      if (!v9)
        goto LABEL_4;
    }
    else
    {
LABEL_10:
      v9 = *(std::__shared_weak_count **)(v3 - 184);
      if (!v9)
        goto LABEL_4;
    }
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_4:
    v3 = v5;
  }
  while (v5 != v2);
  v4 = (void *)a1[10];
LABEL_18:
  a1[11] = v2;
  operator delete(v4);
LABEL_19:
  v12 = (void *)a1[7];
  if (v12)
  {
    a1[8] = v12;
    operator delete(v12);
  }
  v13 = (_QWORD *)a1[4];
  if (v13)
  {
    v14 = (_QWORD *)a1[5];
    v15 = (void *)a1[4];
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          MEMORY[0x1A1AF4E00](v16, 0x1000C40104B78CFLL);
      }
      while (v14 != v13);
      v15 = (void *)a1[4];
    }
    a1[5] = v13;
    operator delete(v15);
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasUVScale>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB41DC12BDB54AE20;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB41DC12BDB54AE20;
      if (*(_QWORD *)&v3 <= 0xB41DC12BDB54AE20)
        v5 = 0xB41DC12BDB54AE20 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB41DC12BDB54AE20;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB41DC12BDB54AE20)
            {
              if (v7[2] == 0xB41DC12BDB54AE20)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB41DC12BDB54AE20)
          {
            if (v7[2] == 0xB41DC12BDB54AE20)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasUVScale]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3528;
  *(_QWORD *)(v11 + 8) = 0xB41DC12BDB54AE20;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB41DC12BDB54AE20, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB41DC12BDB54AE20;
  v15[1] = "md::pipelineECS::HasUVScale]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB41DC12BDB54AE20, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F507C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC0EA819B6DB55095;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC0EA819B6DB55095;
      if (*(_QWORD *)&v3 <= 0xC0EA819B6DB55095)
        v5 = 0xC0EA819B6DB55095 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC0EA819B6DB55095;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC0EA819B6DB55095)
            {
              if (v7[2] == 0xC0EA819B6DB55095)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC0EA819B6DB55095)
          {
            if (v7[2] == 0xC0EA819B6DB55095)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AlbedoTextureUVScale]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1EA8;
  *(_QWORD *)(v11 + 8) = 0xC0EA819B6DB55095;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC0EA819B6DB55095, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC0EA819B6DB55095;
  v15[1] = "arComponents::AlbedoTextureUVScale]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC0EA819B6DB55095, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F507E60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVScale>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasUVMapping>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x643B34C49CDDA18CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x643B34C49CDDA18CLL;
      if (*(_QWORD *)&v3 <= 0x643B34C49CDDA18CuLL)
        v5 = 0x643B34C49CDDA18CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x643B34C49CDDA18CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x643B34C49CDDA18CLL)
            {
              if (v7[2] == 0x643B34C49CDDA18CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x643B34C49CDDA18CLL)
          {
            if (v7[2] == 0x643B34C49CDDA18CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasUVMapping]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3558;
  *(_QWORD *)(v11 + 8) = 0x643B34C49CDDA18CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x643B34C49CDDA18CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x643B34C49CDDA18CLL;
  v15[1] = "md::pipelineECS::HasUVMapping]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x643B34C49CDDA18CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F508374(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC92CCE45D2E7F01;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC92CCE45D2E7F01;
      if (*(_QWORD *)&v3 <= 0xDC92CCE45D2E7F01)
        v5 = 0xDC92CCE45D2E7F01 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC92CCE45D2E7F01;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC92CCE45D2E7F01)
            {
              if (v7[2] == 0xDC92CCE45D2E7F01)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC92CCE45D2E7F01)
          {
            if (v7[2] == 0xDC92CCE45D2E7F01)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AlbedoTextureUVMapping]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2178;
  *(_QWORD *)(v11 + 8) = 0xDC92CCE45D2E7F01;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC92CCE45D2E7F01, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC92CCE45D2E7F01;
  v15[1] = "arComponents::AlbedoTextureUVMapping]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC92CCE45D2E7F01, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50859C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVMapping>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasUVMapping>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasAlbedo>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC7C4F4CB9AB24850;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC7C4F4CB9AB24850;
      if (*(_QWORD *)&v3 <= 0xC7C4F4CB9AB24850)
        v5 = 0xC7C4F4CB9AB24850 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC7C4F4CB9AB24850;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC7C4F4CB9AB24850)
            {
              if (v7[2] == 0xC7C4F4CB9AB24850)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC7C4F4CB9AB24850)
          {
            if (v7[2] == 0xC7C4F4CB9AB24850)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasAlbedo]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3648;
  *(_QWORD *)(v11 + 8) = 0xC7C4F4CB9AB24850;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC7C4F4CB9AB24850, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC7C4F4CB9AB24850;
  v15[1] = "md::pipelineECS::HasAlbedo]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC7C4F4CB9AB24850, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F508AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AlbedoTextureComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6CFD195DCBD616C9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6CFD195DCBD616C9;
      if (*(_QWORD *)&v3 <= 0x6CFD195DCBD616C9uLL)
        v5 = 0x6CFD195DCBD616C9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6CFD195DCBD616C9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6CFD195DCBD616C9)
            {
              if (v7[2] == 0x6CFD195DCBD616C9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6CFD195DCBD616C9)
          {
            if (v7[2] == 0x6CFD195DCBD616C9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::AlbedoTextureComponent]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2148;
  *(_QWORD *)(v11 + 8) = 0x6CFD195DCBD616C9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6CFD195DCBD616C9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6CFD195DCBD616C9;
  v15[1] = "arComponents::AlbedoTextureComponent]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6CFD195DCBD616C9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F508CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AlbedoTextureComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AlbedoTextureComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v38 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = (_QWORD *)(v14 + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  *v15 = *(_QWORD *)(v16 - 48);
  v17 = v15 + 1;
  v19 = *(_QWORD *)(v16 - 40);
  v18 = *(_QWORD *)(v16 - 32);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *v17 = v19;
  v22 = v14 + 48 * v7;
  v23 = *(std::__shared_weak_count **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = v18;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(id *)(v16 - 16);
  v27 = v14 + 48 * v7;
  v28 = *(void **)(v27 + 32);
  *(_QWORD *)(v27 + 32) = v26;

  v29 = a1[11];
  *(_QWORD *)(v29 - 24) = &off_1E42B5430;

  v30 = *(std::__shared_weak_count **)(v29 - 32);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  a1[11] = v29 - 48;
  v33 = (_QWORD *)a1[28];
  if (!v33)
    return 1;
  v34 = a1[31];
  while (1)
  {
    v40[0] = &v38;
    v40[1] = 1;
    v39 = v34;
    v35 = v33[6];
    if (!v35)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v35 + 48))(v35, &v39, v40);
    v33 = (_QWORD *)*v33;
    if (!v33)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::contains(v36, v37);
}

BOOL gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5430;

  return a1;
}

void geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5430;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *geo::sparse_map<gdc::Entity,arComponents::AlbedoTextureComponent>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        *(_QWORD *)(v3 - 24) = &off_1E42B5430;

        v5 = *(std::__shared_weak_count **)(v3 - 32);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasAlbedo>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDAF4167A62E7598BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDAF4167A62E7598BLL;
      if (*(_QWORD *)&v3 <= 0xDAF4167A62E7598BLL)
        v5 = 0xDAF4167A62E7598BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDAF4167A62E7598BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDAF4167A62E7598BLL)
            {
              if (v7[2] == 0xDAF4167A62E7598BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDAF4167A62E7598BLL)
          {
            if (v7[2] == 0xDAF4167A62E7598BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>]";
  *(_QWORD *)(v11 + 24) = 71;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B28C8;
  *(_QWORD *)(v11 + 8) = 0xDAF4167A62E7598BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDAF4167A62E7598BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDAF4167A62E7598BLL;
  v15[1] = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>]";
  v15[2] = 71;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDAF4167A62E7598BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5094AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void applyCameraViewConstant(gdc::Registry *,md::LayoutContext const&)::$_0::operator()(double *a1, uint64_t a2, _QWORD *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  float32x2_t *v29;
  float32_t v30;
  double v31[16];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  float64x2_t v41;
  double v42;
  uint64_t v43;
  float64x2_t v44;
  double v45;
  uint64_t v46;
  float64x2_t v47;
  double v48;
  uint64_t v49;
  float64x2_t v50;
  double v51;
  uint64_t v52;

  v5 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 40);
  v7 = v5 + v5;
  v8 = (v5 + v5) * v5;
  v9 = (v6 + v6) * v6;
  v11 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v12 = (v10 + v10) * v5;
  v13 = *(double *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = (v6 + v6) * v13;
  v16 = v12 - v15;
  v17 = v6 * (v10 + v10);
  v41.f64[0] = 1.0 - (v8 + v9);
  v41.f64[1] = v15 + v12;
  v18 = 1.0 - (v10 + v10) * v10;
  v44.f64[0] = v16;
  v44.f64[1] = v18 - v9;
  v19 = v13 * v7;
  v20 = v13 * v7 + v17;
  v21 = v7 * v6;
  v22 = v13 * (v10 + v10);
  v47.f64[0] = v20;
  v47.f64[1] = v21 - v22;
  v42 = v17 - v19;
  v45 = v22 + v21;
  v48 = v18 - v8;
  v43 = 0;
  v46 = 0;
  v49 = 0;
  v50 = *(float64x2_t *)a2;
  v51 = v11;
  v52 = 0x3FF0000000000000;
  v35 = 0u;
  v37 = 0u;
  v39 = 0u;
  v38 = 0u;
  v36 = 0u;
  v34 = 0u;
  v33 = 0u;
  v40 = 0x3FF0000000000000;
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v32 = v14;
  *(_QWORD *)&v35 = v23;
  *((_QWORD *)&v37 + 1) = v24;
  gm::operator*<double,4,4,4>(v31, v41.f64, (double *)&v32);
  gm::Matrix<double,4,4>::inverted<int,void>(v41.f64, v31);
  v25 = a1[62];
  v26 = a1[63];
  v27 = a1[64];
  v28 = a3[1];
  v29 = (float32x2_t *)a3[9];
  v30 = v51 + v42 * v25 + v45 * v26 + v48 * v27;
  *v29 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v50, v41, v25), v44, v26), v47, v27));
  v29[1].f32[0] = v30;
  if (a3[8] > v28)
    v28 = a3[8];
  a3[7] = 0;
  a3[8] = v28;
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCEC9FB27CDC26A5FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCEC9FB27CDC26A5FLL;
      if (*(_QWORD *)&v3 <= 0xCEC9FB27CDC26A5FLL)
        v5 = 0xCEC9FB27CDC26A5FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCEC9FB27CDC26A5FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCEC9FB27CDC26A5FLL)
            {
              if (v7[2] == 0xCEC9FB27CDC26A5FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCEC9FB27CDC26A5FLL)
          {
            if (v7[2] == 0xCEC9FB27CDC26A5FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasTransformConstantData]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B35B8;
  *(_QWORD *)(v11 + 8) = 0xCEC9FB27CDC26A5FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCEC9FB27CDC26A5FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCEC9FB27CDC26A5FLL;
  v15[1] = "md::pipelineECS::HasTransformConstantData]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCEC9FB27CDC26A5FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5099D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::TransformConstantDataComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x763E4B3D3FAB91E9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x763E4B3D3FAB91E9;
      if (*(_QWORD *)&v3 <= 0x763E4B3D3FAB91E9uLL)
        v5 = 0x763E4B3D3FAB91E9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x763E4B3D3FAB91E9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x763E4B3D3FAB91E9)
            {
              if (v7[2] == 0x763E4B3D3FAB91E9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x763E4B3D3FAB91E9)
          {
            if (v7[2] == 0x763E4B3D3FAB91E9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::TransformConstantDataComponent]";
  *(_QWORD *)(v11 + 24) = 44;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2628;
  *(_QWORD *)(v11 + 8) = 0x763E4B3D3FAB91E9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x763E4B3D3FAB91E9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x763E4B3D3FAB91E9;
  v15[1] = "arComponents::TransformConstantDataComponent]";
  v15[2] = 44;
  gdc::Registry::_registerStorageDataSignals(a1, 0x763E4B3D3FAB91E9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F509BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v32 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v14[1];
  *v14 = v17;
  v14[1] = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[11];
  v24 = *(std::__shared_weak_count **)(v23 - 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  a1[11] = v23 - 16;
  v27 = (_QWORD *)a1[28];
  if (!v27)
    return 1;
  v28 = a1[31];
  while (1)
  {
    v34[0] = &v32;
    v34[1] = 1;
    v33 = v28;
    v29 = v27[6];
    if (!v29)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v29 + 48))(v29, &v33, v34);
    v27 = (_QWORD *)*v27;
    if (!v27)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::contains(v30, v31);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformConstantData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA87D3DFF83E23FACLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA87D3DFF83E23FACLL;
      if (*(_QWORD *)&v3 <= 0xA87D3DFF83E23FACLL)
        v5 = 0xA87D3DFF83E23FACLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA87D3DFF83E23FACLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA87D3DFF83E23FACLL)
            {
              if (v7[2] == 0xA87D3DFF83E23FACLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA87D3DFF83E23FACLL)
          {
            if (v7[2] == 0xA87D3DFF83E23FACLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasTransformInstanceDeviceDataFeature]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3618;
  *(_QWORD *)(v11 + 8) = 0xA87D3DFF83E23FACLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA87D3DFF83E23FACLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA87D3DFF83E23FACLL;
  v15[1] = "md::pipelineECS::HasTransformInstanceDeviceDataFeature]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA87D3DFF83E23FACLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50A1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasTransformInstanceDeviceDataFeature>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8619CDD24E91309ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8619CDD24E91309ELL;
      if (*(_QWORD *)&v3 <= 0x8619CDD24E91309ELL)
        v5 = 0x8619CDD24E91309ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8619CDD24E91309ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8619CDD24E91309ELL)
            {
              if (v7[2] == 0x8619CDD24E91309ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8619CDD24E91309ELL)
          {
            if (v7[2] == 0x8619CDD24E91309ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2868;
  *(_QWORD *)(v11 + 8) = 0x8619CDD24E91309ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8619CDD24E91309ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8619CDD24E91309ELL;
  v15[1] = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8619CDD24E91309ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50A57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ViewConstantDataComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCB308D90549F69A2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCB308D90549F69A2;
      if (*(_QWORD *)&v3 <= 0xCB308D90549F69A2)
        v5 = 0xCB308D90549F69A2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCB308D90549F69A2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCB308D90549F69A2)
            {
              if (v7[2] == 0xCB308D90549F69A2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCB308D90549F69A2)
          {
            if (v7[2] == 0xCB308D90549F69A2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ViewConstantDataComponent]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2328;
  *(_QWORD *)(v11 + 8) = 0xCB308D90549F69A2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCB308D90549F69A2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCB308D90549F69A2;
  v15[1] = "arComponents::ViewConstantDataComponent]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCB308D90549F69A2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50A7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *applyViewConstantData(gdc::Registry *)::$_0::operator()(_QWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = result[8];
  v2 = (_DWORD *)result[9];
  *v2 = *a2;
  v2[1] = a2[1];
  v2[2] = a2[2];
  v2[3] = a2[3];
  v2[4] = a2[4];
  v2[5] = a2[5];
  v2[6] = a2[6];
  v2[7] = a2[7];
  v2[8] = a2[8];
  v2[9] = a2[9];
  v2[10] = a2[10];
  v2[11] = a2[11];
  v2[12] = a2[12];
  v2[13] = a2[13];
  v2[14] = a2[14];
  v4 = result[1];
  v2[15] = a2[15];
  if (v3 <= v4)
    v5 = v4;
  else
    v5 = v3;
  result[7] = 0;
  result[8] = v5;
  return result;
}

void gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_DWORD *)(a1[10] + (v7 << 6));
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 16);
  v15 -= 16;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  v14[13] = v15[13];
  v14[14] = v15[14];
  v14[15] = v15[15];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x88C1B8F0562DF3D9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x88C1B8F0562DF3D9;
      if (*(_QWORD *)&v3 <= 0x88C1B8F0562DF3D9)
        v5 = 0x88C1B8F0562DF3D9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x88C1B8F0562DF3D9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x88C1B8F0562DF3D9)
            {
              if (v7[2] == 0x88C1B8F0562DF3D9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x88C1B8F0562DF3D9)
          {
            if (v7[2] == 0x88C1B8F0562DF3D9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B28F8;
  *(_QWORD *)(v11 + 8) = 0x88C1B8F0562DF3D9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x88C1B8F0562DF3D9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x88C1B8F0562DF3D9;
  v15[1] = "arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0x88C1B8F0562DF3D9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50ADC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::StyleColor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4213A85274C86D76;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4213A85274C86D76;
      if (*(_QWORD *)&v3 <= 0x4213A85274C86D76uLL)
        v5 = 0x4213A85274C86D76uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4213A85274C86D76;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4213A85274C86D76)
            {
              if (v7[2] == 0x4213A85274C86D76)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4213A85274C86D76)
          {
            if (v7[2] == 0x4213A85274C86D76)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::StyleColor]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1758;
  *(_QWORD *)(v11 + 8) = 0x4213A85274C86D76;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4213A85274C86D76uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4213A85274C86D76;
  v15[1] = "arComponents::StyleColor]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4213A85274C86D76, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50AFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::VisibilityAlpha>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBD9C607E106B8732;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBD9C607E106B8732;
      if (*(_QWORD *)&v3 <= 0xBD9C607E106B8732)
        v5 = 0xBD9C607E106B8732 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBD9C607E106B8732;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBD9C607E106B8732)
            {
              if (v7[2] == 0xBD9C607E106B8732)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBD9C607E106B8732)
          {
            if (v7[2] == 0xBD9C607E106B8732)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::VisibilityAlpha]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1BD8;
  *(_QWORD *)(v11 + 8) = 0xBD9C607E106B8732;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBD9C607E106B8732, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBD9C607E106B8732;
  v15[1] = "arComponents::VisibilityAlpha]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBD9C607E106B8732, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50B210(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::VisibilityAlpha>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::StyleColor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StyleColor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_DWORD *)a1[11];
  v16 = *(v15 - 4);
  v15 -= 4;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::StyleColor>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::StyleColor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCA5457B5B9B18C94;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCA5457B5B9B18C94;
      if (*(_QWORD *)&v3 <= 0xCA5457B5B9B18C94)
        v5 = 0xCA5457B5B9B18C94 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCA5457B5B9B18C94;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCA5457B5B9B18C94)
            {
              if (v7[2] == 0xCA5457B5B9B18C94)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCA5457B5B9B18C94)
          {
            if (v7[2] == 0xCA5457B5B9B18C94)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::NeedsTransformConstantDataUpdate]";
  *(_QWORD *)(v11 + 24) = 46;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2688;
  *(_QWORD *)(v11 + 8) = 0xCA5457B5B9B18C94;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCA5457B5B9B18C94, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCA5457B5B9B18C94;
  v15[1] = "arComponents::NeedsTransformConstantDataUpdate]";
  v15[2] = 46;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCA5457B5B9B18C94, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50B8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsTransformConstantDataUpdate>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x27BFFACF4E4CE977;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x27BFFACF4E4CE977;
      if (*(_QWORD *)&v3 <= 0x27BFFACF4E4CE977uLL)
        v5 = 0x27BFFACF4E4CE977uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x27BFFACF4E4CE977;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x27BFFACF4E4CE977)
            {
              if (v7[2] == 0x27BFFACF4E4CE977)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x27BFFACF4E4CE977)
          {
            if (v7[2] == 0x27BFFACF4E4CE977)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::pipelineECS::HasARLightingSetup]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3588;
  *(_QWORD *)(v11 + 8) = 0x27BFFACF4E4CE977;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x27BFFACF4E4CE977uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x27BFFACF4E4CE977;
  v15[1] = "md::pipelineECS::HasARLightingSetup]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x27BFFACF4E4CE977, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50BC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::pipelineECS::HasARLightingSetup>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::PipelineIdentifier>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x10DAC80543D1165FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x10DAC80543D1165FLL;
      if (*(_QWORD *)&v3 <= 0x10DAC80543D1165FuLL)
        v5 = 0x10DAC80543D1165FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x10DAC80543D1165FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x10DAC80543D1165FLL)
            {
              if (v7[2] == 0x10DAC80543D1165FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x10DAC80543D1165FLL)
          {
            if (v7[2] == 0x10DAC80543D1165FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::PipelineIdentifier]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1D58;
  *(_QWORD *)(v11 + 8) = 0x10DAC80543D1165FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x10DAC80543D1165FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x10DAC80543D1165FLL;
  v15[1] = "arComponents::PipelineIdentifier]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x10DAC80543D1165FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50BFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1BF1779BE1E06867;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1BF1779BE1E06867;
      if (*(_QWORD *)&v3 <= 0x1BF1779BE1E06867uLL)
        v5 = 0x1BF1779BE1E06867uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1BF1779BE1E06867;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1BF1779BE1E06867)
            {
              if (v7[2] == 0x1BF1779BE1E06867)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1BF1779BE1E06867)
          {
            if (v7[2] == 0x1BF1779BE1E06867)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::TransitionToRenderRegistry]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2358;
  *(_QWORD *)(v11 + 8) = 0x1BF1779BE1E06867;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1BF1779BE1E06867uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1BF1779BE1E06867;
  v15[1] = "arComponents::TransitionToRenderRegistry]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1BF1779BE1E06867, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50C374(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void (**v40)(md::MeshRenderable *__hidden);
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  uint64_t v51;
  std::__shared_weak_count *v52;
  char v53;
  char v54;
  uint64_t v55;
  __int16 v56;
  _BYTE v57[28];
  void (**v58)(md::MeshRenderable *__hidden);
  _BYTE v59[24];
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _BYTE v63[48];
  __int128 v64;
  _BYTE v65[22];
  uint64_t v66;
  std::__shared_weak_count *v67;
  char v68;
  unsigned __int8 v69;
  uint64_t v70;
  __int16 v71;
  _BYTE v72[28];

  v58 = &off_1E428F838;
  v59[0] = 0;
  *(_QWORD *)&v59[8] = 0;
  *(_QWORD *)&v59[16] = 0;
  v5 = (std::__shared_weak_count *)a1[7];
  v60 = a1[6];
  v61 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  LOBYTE(v62) = 0;
  v63[0] = 0;
  v63[8] = 1;
  *(_OWORD *)&v63[12] = xmmword_19FFB3470;
  *(_QWORD *)&v63[28] = 0x80000000800000;
  v63[36] = 0;
  BYTE12(v64) = 0;
  v65[0] = 0;
  v65[12] = 0;
  *(_DWORD *)&v65[16] = 65537;
  *(_WORD *)&v65[20] = 0;
  LOBYTE(v66) = 0;
  v69 = 0;
  LOBYTE(v70) = 0;
  BYTE4(v70) = 0;
  v71 = 0;
  v72[0] = 0;
  v72[4] = 0;
  do
    v8 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v8 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v72[12] = v8;
  *(_QWORD *)&v72[20] = a3;
  *(_OWORD *)&v59[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v58);
  v9 = a1[55];
  v40 = &off_1E428F838;
  v41 = *(_OWORD *)v59;
  v42 = *(_QWORD *)&v59[16];
  v43 = v60;
  v44 = v61;
  if (v61)
  {
    v10 = (unint64_t *)&v61->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v48 = *(_OWORD *)&v63[32];
  v49 = v64;
  *(_OWORD *)v50 = *(_OWORD *)v65;
  v45 = v62;
  v46 = *(_OWORD *)v63;
  *(_QWORD *)&v50[14] = *(_QWORD *)&v65[14];
  v47 = *(_OWORD *)&v63[16];
  LOBYTE(v51) = 0;
  v54 = 0;
  v12 = v69;
  if (v69)
  {
    v51 = v66;
    v52 = v67;
    if (v67)
    {
      v13 = (unint64_t *)&v67->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v53 = v68;
    v54 = 1;
  }
  v55 = v70;
  v56 = 0;
  if (HIBYTE(v71))
  {
    LOBYTE(v56) = v71;
    HIBYTE(v56) = 1;
  }
  *(_OWORD *)v57 = *(_OWORD *)v72;
  *(_OWORD *)&v57[12] = *(_OWORD *)&v72[12];
  *(_QWORD *)&v38 = 0xA3C8162527B8C964;
  *((_QWORD *)&v38 + 1) = "arComponents::ShadowPipeline]";
  v39 = 28;
  v36 = a2;
  v37 = 10;
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v15, a2);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v9);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v16, a2, (uint64_t)&v40);
  v17 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v9);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v17, a2, &v38);
  v18 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v9);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v18, a2, &v37);
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
  v20 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v9);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v20, a2, &v36);
  v21 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, a2);
  v22 = (uint64_t *)gdc::Registry::storage<arComponents::ShadowPipeline>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v22, a2);
  v40 = &off_1E428F838;
  if (v12)
  {
    v23 = v52;
    if (v52)
    {
      v24 = (unint64_t *)&v52->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v29, a2);
  v58 = &off_1E428F838;
  if (!v69)
    goto LABEL_32;
  v30 = v67;
  if (!v67)
    goto LABEL_32;
  v31 = (unint64_t *)&v67->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v61;
    if (!v61)
      return;
  }
  else
  {
LABEL_32:
    v33 = v61;
    if (!v61)
      return;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F50C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a43);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>();
}

uint64_t gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x58A2A58D4856FF1DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x58A2A58D4856FF1DLL;
      if (*(_QWORD *)&v3 <= 0x58A2A58D4856FF1DuLL)
        v5 = 0x58A2A58D4856FF1DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x58A2A58D4856FF1DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x58A2A58D4856FF1DLL)
            {
              if (v7[2] == 0x58A2A58D4856FF1DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x58A2A58D4856FF1DLL)
          {
            if (v7[2] == 0x58A2A58D4856FF1DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::PendingCommonComponentsSetup]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2568;
  *(_QWORD *)(v11 + 8) = 0x58A2A58D4856FF1DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x58A2A58D4856FF1DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x58A2A58D4856FF1DLL;
  v15[1] = "arComponents::PendingCommonComponentsSetup]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x58A2A58D4856FF1DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50CA70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;

  v71 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v71);
  if ((v6 & 1) != 0)
  {
    v11 = a1[11];
    v12 = a1[12];
    if (v11 >= v12)
    {
      v27 = a1[10];
      v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v27) >> 5);
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) > 0x124924924924924)
        goto LABEL_75;
      v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - v27) >> 5);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x92492492492492)
        v31 = 0x124924924924924;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0x124924924924924)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v32 = (char *)operator new(224 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[224 * v28];
      *(_QWORD *)v33 = &off_1E428F838;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)(a3 + 8);
      v34 = *(_QWORD *)(a3 + 32);
      *((_QWORD *)v33 + 3) = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v33 + 4) = v34;
      v35 = *(_QWORD *)(a3 + 40);
      *((_QWORD *)v33 + 5) = v35;
      if (v35)
      {
        v36 = (unint64_t *)(v35 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = *(_OWORD *)(a3 + 128);
      *((_OWORD *)v33 + 7) = *(_OWORD *)(a3 + 112);
      *((_OWORD *)v33 + 8) = v38;
      *(_QWORD *)(v33 + 142) = *(_QWORD *)(a3 + 142);
      v39 = *(_OWORD *)(a3 + 64);
      *((_OWORD *)v33 + 3) = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v33 + 4) = v39;
      v40 = *(_OWORD *)(a3 + 96);
      *((_OWORD *)v33 + 5) = *(_OWORD *)(a3 + 80);
      *((_OWORD *)v33 + 6) = v40;
      v33[152] = 0;
      v33[176] = 0;
      if (*(_BYTE *)(a3 + 176))
      {
        v41 = *(_QWORD *)(a3 + 160);
        *((_QWORD *)v33 + 19) = *(_QWORD *)(a3 + 152);
        *((_QWORD *)v33 + 20) = v41;
        if (v41)
        {
          v42 = (unint64_t *)(v41 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v33[168] = *(_BYTE *)(a3 + 168);
        v33[176] = 1;
      }
      *((_QWORD *)v33 + 23) = *(_QWORD *)(a3 + 184);
      *((_WORD *)v33 + 96) = 0;
      if (*(_BYTE *)(a3 + 193))
      {
        v33[192] = *(_BYTE *)(a3 + 192);
        v33[193] = 1;
      }
      v44 = &v32[224 * v31];
      *(_OWORD *)(v33 + 196) = *(_OWORD *)(a3 + 196);
      *((_OWORD *)v33 + 13) = *(_OWORD *)(a3 + 208);
      v26 = (uint64_t)(v33 + 224);
      v45 = (char *)a1[10];
      v46 = (char *)a1[11];
      if (v46 == v45)
      {
        a1[10] = (uint64_t)v33;
        a1[11] = v26;
        a1[12] = (uint64_t)v44;
      }
      else
      {
        v47 = &v32[224 * v28];
        do
        {
          *((_QWORD *)v47 - 28) = &off_1E428F838;
          v47 -= 224;
          v49 = *(_OWORD *)(v46 - 216);
          *((_QWORD *)v47 + 3) = *((_QWORD *)v46 - 25);
          *(_OWORD *)(v47 + 8) = v49;
          *((_QWORD *)v47 + 4) = *((_QWORD *)v46 - 24);
          v50 = *((_QWORD *)v46 - 23);
          *((_QWORD *)v47 + 5) = v50;
          if (v50)
          {
            v51 = (unint64_t *)(v50 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          v53 = *((_OWORD *)v46 - 11);
          v54 = *((_OWORD *)v46 - 9);
          *((_OWORD *)v33 - 10) = *((_OWORD *)v46 - 10);
          *((_OWORD *)v33 - 9) = v54;
          *((_OWORD *)v33 - 11) = v53;
          v55 = *((_OWORD *)v46 - 8);
          v56 = *((_OWORD *)v46 - 7);
          v57 = *((_OWORD *)v46 - 6);
          *(_QWORD *)(v33 - 82) = *(_QWORD *)(v46 - 82);
          *((_OWORD *)v33 - 7) = v56;
          *((_OWORD *)v33 - 6) = v57;
          *((_OWORD *)v33 - 8) = v55;
          *(v33 - 72) = 0;
          *(v33 - 48) = 0;
          if (*(v46 - 48))
          {
            *((_QWORD *)v33 - 9) = *((_QWORD *)v46 - 9);
            v58 = *((_QWORD *)v46 - 8);
            *((_QWORD *)v33 - 8) = v58;
            if (v58)
            {
              v59 = (unint64_t *)(v58 + 8);
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            *(v33 - 56) = *(v46 - 56);
            *(v33 - 48) = 1;
          }
          *((_QWORD *)v33 - 5) = *((_QWORD *)v46 - 5);
          *((_WORD *)v33 - 16) = 0;
          if (*(v46 - 31))
          {
            *(v33 - 32) = *(v46 - 32);
            *(v33 - 31) = 1;
          }
          v48 = *(_OWORD *)(v46 - 28);
          *((_OWORD *)v33 - 1) = *((_OWORD *)v46 - 1);
          *(_OWORD *)(v33 - 28) = v48;
          v46 -= 224;
          v33 = v47;
        }
        while (v46 != v45);
        v46 = (char *)a1[10];
        v61 = (char *)a1[11];
        a1[10] = (uint64_t)v47;
        a1[11] = v26;
        a1[12] = (uint64_t)v44;
        if (v61 != v46)
        {
          v62 = v61;
          do
          {
            *((_QWORD *)v62 - 28) = &off_1E428F838;
            v62 -= 224;
            if (v62[176])
            {
              v63 = (std::__shared_weak_count *)*((_QWORD *)v61 - 8);
              if (v63)
              {
                p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(p_shared_owners);
                while (__stlxr(v65 - 1, p_shared_owners));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
            }
            v66 = (std::__shared_weak_count *)*((_QWORD *)v61 - 23);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v61 = v62;
          }
          while (v62 != v46);
        }
      }
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_QWORD *)v11 = &off_1E428F838;
      v13 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v11 + 8) = v13;
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(a3 + 32);
      v14 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v11 + 40) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(a3 + 48);
      v18 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v11 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v11 + 80) = v18;
      *(_OWORD *)(v11 + 48) = v17;
      v19 = *(_OWORD *)(a3 + 96);
      v20 = *(_OWORD *)(a3 + 112);
      v21 = *(_OWORD *)(a3 + 128);
      *(_QWORD *)(v11 + 142) = *(_QWORD *)(a3 + 142);
      *(_OWORD *)(v11 + 112) = v20;
      *(_OWORD *)(v11 + 128) = v21;
      *(_OWORD *)(v11 + 96) = v19;
      *(_BYTE *)(v11 + 152) = 0;
      *(_BYTE *)(v11 + 176) = 0;
      if (*(_BYTE *)(a3 + 176))
      {
        *(_QWORD *)(v11 + 152) = *(_QWORD *)(a3 + 152);
        v22 = *(_QWORD *)(a3 + 160);
        *(_QWORD *)(v11 + 160) = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        *(_BYTE *)(v11 + 168) = *(_BYTE *)(a3 + 168);
        *(_BYTE *)(v11 + 176) = 1;
      }
      *(_QWORD *)(v11 + 184) = *(_QWORD *)(a3 + 184);
      *(_WORD *)(v11 + 192) = 0;
      if (*(_BYTE *)(a3 + 193))
      {
        *(_BYTE *)(v11 + 192) = *(_BYTE *)(a3 + 192);
        *(_BYTE *)(v11 + 193) = 1;
      }
      v25 = *(_OWORD *)(a3 + 196);
      *(_OWORD *)(v11 + 208) = *(_OWORD *)(a3 + 208);
      *(_OWORD *)(v11 + 196) = v25;
      v26 = v11 + 224;
    }
    a1[11] = v26;
    v8 = a1[31];
  }
  else
  {
    v7 = md::MeshRenderable::operator=(a1[10] + 224 * (((uint64_t)v5 - a1[7]) >> 3), a3);
    v8 = a1[31];
    if (v7 != a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v73 = &v71;
          v74 = 1;
          v72 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v72, &v73);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_74:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_75:
        abort();
      }
      return;
    }
  }
  v69 = (_QWORD *)a1[22];
  if (v69)
  {
    while (1)
    {
      v73 = &v71;
      v74 = 1;
      v72 = v8;
      v70 = v69[6];
      if (!v70)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v70 + 48))(v70, &v72, &v73);
      v69 = (_QWORD *)*v69;
      if (!v69)
        return;
    }
    goto LABEL_74;
  }
}

void gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v25 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v25);
  if ((v6 & 1) != 0)
  {
    v13 = (_QWORD *)a1[11];
    v12 = a1[12];
    if ((unint64_t)v13 >= v12)
    {
      v16 = (_QWORD *)a1[10];
      v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v16) + 1;
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_30;
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v16) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * (v13 - v16)];
      *(_OWORD *)v21 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      v15 = v21 + 24;
      if (v13 != v16)
      {
        do
        {
          v22 = *(_OWORD *)(v13 - 3);
          *((_QWORD *)v21 - 1) = *(v13 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v13 -= 3;
        }
        while (v13 != v16);
        v13 = (_QWORD *)a1[10];
      }
      a1[10] = (uint64_t)v21;
      a1[11] = (uint64_t)v15;
      a1[12] = (uint64_t)&v20[24 * v19];
      if (v13)
        operator delete(v13);
    }
    else
    {
      v14 = *a3;
      v13[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)v13 = v14;
      v15 = v13 + 3;
    }
    a1[11] = (uint64_t)v15;
    v9 = a1[31];
  }
  else
  {
    v7 = a1[10] + 24 * (((uint64_t)v5 - a1[7]) >> 3);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    v9 = a1[31];
    if (v7 != a1[11])
    {
      v10 = (_QWORD *)a1[16];
      if (v10)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v26, &v27);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)a1[22];
  if (v23)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v9;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v26, &v27);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBADB2FF16CCDF7F4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBADB2FF16CCDF7F4;
      if (*(_QWORD *)&v3 <= 0xBADB2FF16CCDF7F4)
        v5 = 0xBADB2FF16CCDF7F4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBADB2FF16CCDF7F4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBADB2FF16CCDF7F4)
            {
              if (v7[2] == 0xBADB2FF16CCDF7F4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBADB2FF16CCDF7F4)
          {
            if (v7[2] == 0xBADB2FF16CCDF7F4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::PendingPipelineSpecificComponentsSetup]";
  *(_QWORD *)(v11 + 24) = 52;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B26B8;
  *(_QWORD *)(v11 + 8) = 0xBADB2FF16CCDF7F4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBADB2FF16CCDF7F4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBADB2FF16CCDF7F4;
  v15[1] = "arComponents::PendingPipelineSpecificComponentsSetup]";
  v15[2] = 52;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBADB2FF16CCDF7F4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50D3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RebuildPipelineSetup>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAC35728C5B9C6C04;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAC35728C5B9C6C04;
      if (*(_QWORD *)&v3 <= 0xAC35728C5B9C6C04)
        v5 = 0xAC35728C5B9C6C04 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAC35728C5B9C6C04;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAC35728C5B9C6C04)
            {
              if (v7[2] == 0xAC35728C5B9C6C04)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAC35728C5B9C6C04)
          {
            if (v7[2] == 0xAC35728C5B9C6C04)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RebuildPipelineSetup]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1F98;
  *(_QWORD *)(v11 + 8) = 0xAC35728C5B9C6C04;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAC35728C5B9C6C04, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAC35728C5B9C6C04;
  v15[1] = "arComponents::RebuildPipelineSetup]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAC35728C5B9C6C04, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50D610(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RebuildPipelineSetup>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingPipelineSpecificComponentsSetup>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::PendingCommonComponentsSetup>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::ShadowPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57[2];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void (**v61)(md::MeshRenderable *__hidden);
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[22];
  uint64_t v72;
  std::__shared_weak_count *v73;
  char v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[28];
  void (**v79)(md::MeshRenderable *__hidden);
  _BYTE v80[24];
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _BYTE v84[48];
  __int128 v85;
  _BYTE v86[22];
  uint64_t v87;
  std::__shared_weak_count *v88;
  char v89;
  char v90;
  uint64_t v91;
  __int16 v92;
  _BYTE v93[28];

  v8 = (*(_QWORD *)(*(_QWORD *)(*a3 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 40))
     / *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 8);
  v9 = operator new();
  v10 = v9;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = 0;
  }
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v8;
  v16 = (_OWORD *)(v9 + 16);
  *(_BYTE *)(v9 + 32) = 3;
  *(_OWORD *)(v9 + 36) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 52) = *(_QWORD *)(a4 + 16);
  *(_WORD *)(v9 + 60) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v79 = &off_1E428F838;
  v80[0] = 0;
  *(_QWORD *)&v80[8] = 0;
  *(_QWORD *)&v80[16] = 0;
  v19 = (std::__shared_weak_count *)a1[7];
  v81 = a1[6];
  v82 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LOBYTE(v83) = 0;
  v84[0] = 0;
  v84[8] = 1;
  *(_OWORD *)&v84[12] = xmmword_19FFB3470;
  *(_QWORD *)&v84[28] = 0x80000000800000;
  v84[36] = 0;
  BYTE12(v85) = 0;
  v86[0] = 0;
  v86[12] = 0;
  *(_DWORD *)&v86[16] = 65537;
  *(_WORD *)&v86[20] = 0;
  LOBYTE(v87) = 0;
  v90 = 0;
  LOBYTE(v91) = 0;
  BYTE4(v91) = 0;
  v92 = 0;
  v93[0] = 0;
  v93[4] = 0;
  do
    v22 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v22 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v93[12] = v22;
  *(_QWORD *)&v93[20] = v10;
  *(_OWORD *)&v80[8] = *v16;
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v79);
  v23 = a1[55];
  v61 = &off_1E428F838;
  v62 = *(_OWORD *)v80;
  v63 = *(_QWORD *)&v80[16];
  v64 = v81;
  v65 = v82;
  if (v82)
  {
    v24 = (unint64_t *)&v82->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v70 = v85;
  *(_OWORD *)v71 = *(_OWORD *)v86;
  *(_QWORD *)&v71[14] = *(_QWORD *)&v86[14];
  v66 = v83;
  v67 = *(_OWORD *)v84;
  v68 = *(_OWORD *)&v84[16];
  v69 = *(_OWORD *)&v84[32];
  LOBYTE(v72) = 0;
  v75 = 0;
  if (v90)
  {
    v72 = v87;
    v73 = v88;
    if (v88)
    {
      v26 = (unint64_t *)&v88->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v74 = v89;
    v75 = 1;
  }
  v76 = v91;
  v77 = 0;
  if (HIBYTE(v92))
  {
    LOBYTE(v77) = v92;
    HIBYTE(v77) = 1;
  }
  *(_OWORD *)v78 = *(_OWORD *)v93;
  *(_OWORD *)&v78[12] = *(_OWORD *)&v93[12];
  *(_QWORD *)&v59 = 0xA3C8162527B8C964;
  *((_QWORD *)&v59 + 1) = "arComponents::ShadowPipeline]";
  v60 = 28;
  v58 = 10;
  v28 = *a3;
  v29 = (std::__shared_weak_count *)a3[1];
  v57[0] = v28;
  v57[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v56 = a2;
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v32, a2);
  v33 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v33, a2, (uint64_t)&v61);
  v34 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v23);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v34, a2, &v59);
  v35 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v23);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v35, a2, &v58);
  v36 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v36, a2, v57);
  v37 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v37, a2);
  v38 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v23);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v38, a2, &v56);
  v39 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v39, a2);
  v40 = (uint64_t *)gdc::Registry::storage<arComponents::ShadowPipeline>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v40, a2);
  if (v29)
  {
    v41 = (unint64_t *)&v29->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v61 = &off_1E428F838;
  if (v75)
  {
    v43 = v73;
    if (v73)
    {
      v44 = (unint64_t *)&v73->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  v46 = v65;
  if (v65)
  {
    v47 = (unint64_t *)&v65->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v49, a2);
  v79 = &off_1E428F838;
  if (!v90)
    goto LABEL_52;
  v50 = v88;
  if (!v88)
    goto LABEL_52;
  v51 = (unint64_t *)&v88->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = v82;
    if (!v82)
      return;
  }
  else
  {
LABEL_52:
    v53 = v82;
    if (!v82)
      return;
  }
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_19F50DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a44);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  v54 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v54);
  if ((v6 & 1) != 0)
  {
    v19 = (char *)a1[11];
    v18 = a1[12];
    if ((unint64_t)v19 >= v18)
    {
      v28 = (char *)a1[10];
      v29 = (v19 - v28) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        goto LABEL_68;
      v31 = v18 - (_QWORD)v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v33 = (char *)operator new(16 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[16 * v29];
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      v35 = *a3;
      v36 = a3[1];
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        *((_QWORD *)v34 + 1) = v36;
        v28 = (char *)a1[10];
        v19 = (char *)a1[11];
      }
      v39 = &v33[16 * v32];
      *(_QWORD *)v34 = v35;
      v27 = v34 + 16;
      if (v19 == v28)
      {
        a1[10] = (uint64_t)v34;
        a1[11] = (uint64_t)v27;
        a1[12] = (uint64_t)v39;
      }
      else
      {
        do
        {
          v42 = v34;
          *((_QWORD *)v34 - 2) = 0;
          *((_QWORD *)v34 - 1) = 0;
          v34 -= 16;
          v43 = *((_QWORD *)v19 - 2);
          v44 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          if (v44)
          {
            v45 = (unint64_t *)(v44 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v47 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
            *((_QWORD *)v42 - 2) = v43;
            *((_QWORD *)v42 - 1) = v44;
            if (v47)
            {
              p_shared_owners = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          else
          {
            *((_QWORD *)v42 - 2) = v43;
            *((_QWORD *)v42 - 1) = 0;
          }
        }
        while (v19 != v28);
        v28 = (char *)a1[10];
        v50 = (char *)a1[11];
        a1[10] = (uint64_t)v34;
        a1[11] = (uint64_t)v27;
        a1[12] = (uint64_t)v39;
        while (v50 != v28)
        {
          v51 = (std::__shared_weak_count *)*((_QWORD *)v50 - 1);
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v50 -= 16;
        }
      }
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      v20 = *a3;
      v21 = a3[1];
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v24 = (std::__shared_weak_count *)*((_QWORD *)v19 + 1);
        *(_QWORD *)v19 = v20;
        *((_QWORD *)v19 + 1) = v21;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = v19 + 16;
      }
      else
      {
        *(_QWORD *)v19 = v20;
        *((_QWORD *)v19 + 1) = 0;
        v27 = v19 + 16;
      }
    }
    a1[11] = (uint64_t)v27;
    v15 = a1[31];
  }
  else
  {
    v7 = (_QWORD *)(a1[10] + 2 * ((_QWORD)v5 - a1[7]));
    v9 = *a3;
    v8 = a3[1];
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)v7[1];
    *v7 = v9;
    v7[1] = v8;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = a1[31];
    if (v7 != (_QWORD *)a1[11])
    {
      v16 = (_QWORD *)a1[16];
      if (v16)
      {
        while (1)
        {
          v56 = &v54;
          v57 = 1;
          v55 = v15;
          v17 = v16[6];
          if (!v17)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v17 + 48))(v17, &v55, &v56);
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
LABEL_67:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_68:
        abort();
      }
      return;
    }
  }
  v40 = (_QWORD *)a1[22];
  if (v40)
  {
    while (1)
    {
      v56 = &v54;
      v57 = 1;
      v55 = v15;
      v41 = v40[6];
      if (!v41)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v41 + 48))(v41, &v55, &v56);
      v40 = (_QWORD *)*v40;
      if (!v40)
        return;
    }
    goto LABEL_67;
  }
}

void gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::OcclusionPipeline>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2E1ED5CD904AAD01;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2E1ED5CD904AAD01;
      if (*(_QWORD *)&v3 <= 0x2E1ED5CD904AAD01uLL)
        v5 = 0x2E1ED5CD904AAD01uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2E1ED5CD904AAD01;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2E1ED5CD904AAD01)
            {
              if (v7[2] == 0x2E1ED5CD904AAD01)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2E1ED5CD904AAD01)
          {
            if (v7[2] == 0x2E1ED5CD904AAD01)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::OcclusionPipeline]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1C98;
  *(_QWORD *)(v11 + 8) = 0x2E1ED5CD904AAD01;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2E1ED5CD904AAD01uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2E1ED5CD904AAD01;
  v15[1] = "arComponents::OcclusionPipeline]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2E1ED5CD904AAD01, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F50E578(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void (**v40)(md::MeshRenderable *__hidden);
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  uint64_t v51;
  std::__shared_weak_count *v52;
  char v53;
  char v54;
  uint64_t v55;
  __int16 v56;
  _BYTE v57[28];
  void (**v58)(md::MeshRenderable *__hidden);
  _BYTE v59[24];
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _BYTE v63[48];
  __int128 v64;
  _BYTE v65[22];
  uint64_t v66;
  std::__shared_weak_count *v67;
  char v68;
  unsigned __int8 v69;
  uint64_t v70;
  __int16 v71;
  _BYTE v72[28];

  v58 = &off_1E428F838;
  v59[0] = 0;
  *(_QWORD *)&v59[8] = 0;
  *(_QWORD *)&v59[16] = 0;
  v5 = (std::__shared_weak_count *)a1[7];
  v60 = a1[6];
  v61 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  LOBYTE(v62) = 0;
  v63[0] = 0;
  v63[8] = 1;
  *(_OWORD *)&v63[12] = xmmword_19FFB3470;
  *(_QWORD *)&v63[28] = 0x80000000800000;
  v63[36] = 0;
  BYTE12(v64) = 0;
  v65[0] = 0;
  v65[12] = 0;
  *(_DWORD *)&v65[16] = 65537;
  *(_WORD *)&v65[20] = 0;
  LOBYTE(v66) = 0;
  v69 = 0;
  LOBYTE(v70) = 0;
  BYTE4(v70) = 0;
  v71 = 0;
  v72[0] = 0;
  v72[4] = 0;
  do
    v8 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v8 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v72[12] = v8;
  *(_QWORD *)&v72[20] = a3;
  *(_OWORD *)&v59[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v58);
  v9 = a1[55];
  v40 = &off_1E428F838;
  v41 = *(_OWORD *)v59;
  v42 = *(_QWORD *)&v59[16];
  v43 = v60;
  v44 = v61;
  if (v61)
  {
    v10 = (unint64_t *)&v61->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v48 = *(_OWORD *)&v63[32];
  v49 = v64;
  *(_OWORD *)v50 = *(_OWORD *)v65;
  v45 = v62;
  v46 = *(_OWORD *)v63;
  *(_QWORD *)&v50[14] = *(_QWORD *)&v65[14];
  v47 = *(_OWORD *)&v63[16];
  LOBYTE(v51) = 0;
  v54 = 0;
  v12 = v69;
  if (v69)
  {
    v51 = v66;
    v52 = v67;
    if (v67)
    {
      v13 = (unint64_t *)&v67->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v53 = v68;
    v54 = 1;
  }
  v55 = v70;
  v56 = 0;
  if (HIBYTE(v71))
  {
    LOBYTE(v56) = v71;
    HIBYTE(v56) = 1;
  }
  *(_OWORD *)v57 = *(_OWORD *)v72;
  *(_OWORD *)&v57[12] = *(_OWORD *)&v72[12];
  *(_QWORD *)&v38 = 0x2E1ED5CD904AAD01;
  *((_QWORD *)&v38 + 1) = "arComponents::OcclusionPipeline]";
  v39 = 31;
  v36 = a2;
  v37 = 10;
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v15, a2);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v9);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v16, a2, (uint64_t)&v40);
  v17 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v9);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v17, a2, &v38);
  v18 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v9);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v18, a2, &v37);
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
  v20 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v9);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v20, a2, &v36);
  v21 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, a2);
  v22 = (uint64_t *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v22, a2);
  v40 = &off_1E428F838;
  if (v12)
  {
    v23 = v52;
    if (v52)
    {
      v24 = (unint64_t *)&v52->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v29, a2);
  v58 = &off_1E428F838;
  if (!v69)
    goto LABEL_32;
  v30 = v67;
  if (!v67)
    goto LABEL_32;
  v31 = (unint64_t *)&v67->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v61;
    if (!v61)
      return;
  }
  else
  {
LABEL_32:
    v33 = v61;
    if (!v61)
      return;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F50E968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a43);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::OcclusionPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57[2];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void (**v61)(md::MeshRenderable *__hidden);
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[22];
  uint64_t v72;
  std::__shared_weak_count *v73;
  char v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[28];
  void (**v79)(md::MeshRenderable *__hidden);
  _BYTE v80[24];
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _BYTE v84[48];
  __int128 v85;
  _BYTE v86[22];
  uint64_t v87;
  std::__shared_weak_count *v88;
  char v89;
  char v90;
  uint64_t v91;
  __int16 v92;
  _BYTE v93[28];

  v8 = (*(_QWORD *)(*(_QWORD *)(*a3 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 40))
     / *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 8);
  v9 = operator new();
  v10 = v9;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = 0;
  }
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v8;
  v16 = (_OWORD *)(v9 + 16);
  *(_BYTE *)(v9 + 32) = 3;
  *(_OWORD *)(v9 + 36) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 52) = *(_QWORD *)(a4 + 16);
  *(_WORD *)(v9 + 60) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v79 = &off_1E428F838;
  v80[0] = 0;
  *(_QWORD *)&v80[8] = 0;
  *(_QWORD *)&v80[16] = 0;
  v19 = (std::__shared_weak_count *)a1[7];
  v81 = a1[6];
  v82 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LOBYTE(v83) = 0;
  v84[0] = 0;
  v84[8] = 1;
  *(_OWORD *)&v84[12] = xmmword_19FFB3470;
  *(_QWORD *)&v84[28] = 0x80000000800000;
  v84[36] = 0;
  BYTE12(v85) = 0;
  v86[0] = 0;
  v86[12] = 0;
  *(_DWORD *)&v86[16] = 65537;
  *(_WORD *)&v86[20] = 0;
  LOBYTE(v87) = 0;
  v90 = 0;
  LOBYTE(v91) = 0;
  BYTE4(v91) = 0;
  v92 = 0;
  v93[0] = 0;
  v93[4] = 0;
  do
    v22 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v22 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v93[12] = v22;
  *(_QWORD *)&v93[20] = v10;
  *(_OWORD *)&v80[8] = *v16;
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v79);
  v23 = a1[55];
  v61 = &off_1E428F838;
  v62 = *(_OWORD *)v80;
  v63 = *(_QWORD *)&v80[16];
  v64 = v81;
  v65 = v82;
  if (v82)
  {
    v24 = (unint64_t *)&v82->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v70 = v85;
  *(_OWORD *)v71 = *(_OWORD *)v86;
  *(_QWORD *)&v71[14] = *(_QWORD *)&v86[14];
  v66 = v83;
  v67 = *(_OWORD *)v84;
  v68 = *(_OWORD *)&v84[16];
  v69 = *(_OWORD *)&v84[32];
  LOBYTE(v72) = 0;
  v75 = 0;
  if (v90)
  {
    v72 = v87;
    v73 = v88;
    if (v88)
    {
      v26 = (unint64_t *)&v88->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v74 = v89;
    v75 = 1;
  }
  v76 = v91;
  v77 = 0;
  if (HIBYTE(v92))
  {
    LOBYTE(v77) = v92;
    HIBYTE(v77) = 1;
  }
  *(_OWORD *)v78 = *(_OWORD *)v93;
  *(_OWORD *)&v78[12] = *(_OWORD *)&v93[12];
  *(_QWORD *)&v59 = 0x2E1ED5CD904AAD01;
  *((_QWORD *)&v59 + 1) = "arComponents::OcclusionPipeline]";
  v60 = 31;
  v58 = 10;
  v28 = *a3;
  v29 = (std::__shared_weak_count *)a3[1];
  v57[0] = v28;
  v57[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v56 = a2;
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v32, a2);
  v33 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v33, a2, (uint64_t)&v61);
  v34 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v23);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v34, a2, &v59);
  v35 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v23);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v35, a2, &v58);
  v36 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v36, a2, v57);
  v37 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v37, a2);
  v38 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v23);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v38, a2, &v56);
  v39 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v39, a2);
  v40 = (uint64_t *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v40, a2);
  if (v29)
  {
    v41 = (unint64_t *)&v29->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v61 = &off_1E428F838;
  if (v75)
  {
    v43 = v73;
    if (v73)
    {
      v44 = (unint64_t *)&v73->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  v46 = v65;
  if (v65)
  {
    v47 = (unint64_t *)&v65->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v49, a2);
  v79 = &off_1E428F838;
  if (!v90)
    goto LABEL_52;
  v50 = v88;
  if (!v88)
    goto LABEL_52;
  v51 = (unint64_t *)&v88->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = v82;
    if (!v82)
      return;
  }
  else
  {
LABEL_52:
    v53 = v82;
    if (!v82)
      return;
  }
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_19F50EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a44);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::OcclusionPipeline>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ARMeshRenderLayer::processMeshDataForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshDataComponent const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void (**v40)(md::MeshRenderable *__hidden);
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  uint64_t v51;
  std::__shared_weak_count *v52;
  char v53;
  char v54;
  uint64_t v55;
  __int16 v56;
  _BYTE v57[28];
  void (**v58)(md::MeshRenderable *__hidden);
  _BYTE v59[24];
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _BYTE v63[48];
  __int128 v64;
  _BYTE v65[22];
  uint64_t v66;
  std::__shared_weak_count *v67;
  char v68;
  unsigned __int8 v69;
  uint64_t v70;
  __int16 v71;
  _BYTE v72[28];

  v58 = &off_1E428F838;
  v59[0] = 0;
  *(_QWORD *)&v59[8] = 0;
  *(_QWORD *)&v59[16] = 0;
  v5 = (std::__shared_weak_count *)a1[7];
  v60 = a1[6];
  v61 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  LOBYTE(v62) = 0;
  v63[0] = 0;
  v63[8] = 1;
  *(_OWORD *)&v63[12] = xmmword_19FFB3470;
  *(_QWORD *)&v63[28] = 0x80000000800000;
  v63[36] = 0;
  BYTE12(v64) = 0;
  v65[0] = 0;
  v65[12] = 0;
  *(_DWORD *)&v65[16] = 65537;
  *(_WORD *)&v65[20] = 0;
  LOBYTE(v66) = 0;
  v69 = 0;
  LOBYTE(v70) = 0;
  BYTE4(v70) = 0;
  v71 = 0;
  v72[0] = 0;
  v72[4] = 0;
  do
    v8 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v8 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v72[12] = v8;
  *(_QWORD *)&v72[20] = a3;
  *(_OWORD *)&v59[8] = *(_OWORD *)(a3 + 16);
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v58);
  v9 = a1[55];
  v40 = &off_1E428F838;
  v41 = *(_OWORD *)v59;
  v42 = *(_QWORD *)&v59[16];
  v43 = v60;
  v44 = v61;
  if (v61)
  {
    v10 = (unint64_t *)&v61->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v48 = *(_OWORD *)&v63[32];
  v49 = v64;
  *(_OWORD *)v50 = *(_OWORD *)v65;
  v45 = v62;
  v46 = *(_OWORD *)v63;
  *(_QWORD *)&v50[14] = *(_QWORD *)&v65[14];
  v47 = *(_OWORD *)&v63[16];
  LOBYTE(v51) = 0;
  v54 = 0;
  v12 = v69;
  if (v69)
  {
    v51 = v66;
    v52 = v67;
    if (v67)
    {
      v13 = (unint64_t *)&v67->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v53 = v68;
    v54 = 1;
  }
  v55 = v70;
  v56 = 0;
  if (HIBYTE(v71))
  {
    LOBYTE(v56) = v71;
    HIBYTE(v56) = 1;
  }
  *(_OWORD *)v57 = *(_OWORD *)v72;
  *(_OWORD *)&v57[12] = *(_OWORD *)&v72[12];
  *(_QWORD *)&v38 = 0x5BD3262791F15BBDLL;
  *((_QWORD *)&v38 + 1) = "arComponents::StandardPipeline]";
  v39 = 30;
  v36 = a2;
  v37 = 10;
  v15 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v15, a2);
  v16 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v9);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v16, a2, (uint64_t)&v40);
  v17 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v9);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v17, a2, &v38);
  v18 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v9);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v18, a2, &v37);
  v19 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
  v20 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v9);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v20, a2, &v36);
  v21 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, a2);
  v22 = (uint64_t *)gdc::Registry::storage<arComponents::StandardPipeline>(v9);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v22, a2);
  v40 = &off_1E428F838;
  if (v12)
  {
    v23 = v52;
    if (v52)
    {
      v24 = (unint64_t *)&v52->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v29, a2);
  v58 = &off_1E428F838;
  if (!v69)
    goto LABEL_32;
  v30 = v67;
  if (!v67)
    goto LABEL_32;
  v31 = (unint64_t *)&v67->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v61;
    if (!v61)
      return;
  }
  else
  {
LABEL_32:
    v33 = v61;
    if (!v61)
      return;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_19F50F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a43);
  _Unwind_Resume(a1);
}

void md::ARMeshRenderLayer::processMeshesForPipeline<arComponents::StandardPipeline>(void)::{lambda(gdc::Entity,arComponents::WorldTransform const&,arComponents::MeshComponent const&,arComponents::Boundary const&)#1}::operator()(_QWORD *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57[2];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void (**v61)(md::MeshRenderable *__hidden);
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[22];
  uint64_t v72;
  std::__shared_weak_count *v73;
  char v74;
  char v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[28];
  void (**v79)(md::MeshRenderable *__hidden);
  _BYTE v80[24];
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _BYTE v84[48];
  __int128 v85;
  _BYTE v86[22];
  uint64_t v87;
  std::__shared_weak_count *v88;
  char v89;
  char v90;
  uint64_t v91;
  __int16 v92;
  _BYTE v93[28];

  v8 = (*(_QWORD *)(*(_QWORD *)(*a3 + 96) + 48) - *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 40))
     / *(_QWORD *)(*(_QWORD *)(*a3 + 96) + 8);
  v9 = operator new();
  v10 = v9;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = 0;
  }
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v8;
  v16 = (_OWORD *)(v9 + 16);
  *(_BYTE *)(v9 + 32) = 3;
  *(_OWORD *)(v9 + 36) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 52) = *(_QWORD *)(a4 + 16);
  *(_WORD *)(v9 + 60) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v79 = &off_1E428F838;
  v80[0] = 0;
  *(_QWORD *)&v80[8] = 0;
  *(_QWORD *)&v80[16] = 0;
  v19 = (std::__shared_weak_count *)a1[7];
  v81 = a1[6];
  v82 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LOBYTE(v83) = 0;
  v84[0] = 0;
  v84[8] = 1;
  *(_OWORD *)&v84[12] = xmmword_19FFB3470;
  *(_QWORD *)&v84[28] = 0x80000000800000;
  v84[36] = 0;
  BYTE12(v85) = 0;
  v86[0] = 0;
  v86[12] = 0;
  *(_DWORD *)&v86[16] = 65537;
  *(_WORD *)&v86[20] = 0;
  LOBYTE(v87) = 0;
  v90 = 0;
  LOBYTE(v91) = 0;
  BYTE4(v91) = 0;
  v92 = 0;
  v93[0] = 0;
  v93[4] = 0;
  do
    v22 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v22 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)&v93[12] = v22;
  *(_QWORD *)&v93[20] = v10;
  *(_OWORD *)&v80[8] = *v16;
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v79);
  v23 = a1[55];
  v61 = &off_1E428F838;
  v62 = *(_OWORD *)v80;
  v63 = *(_QWORD *)&v80[16];
  v64 = v81;
  v65 = v82;
  if (v82)
  {
    v24 = (unint64_t *)&v82->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v70 = v85;
  *(_OWORD *)v71 = *(_OWORD *)v86;
  *(_QWORD *)&v71[14] = *(_QWORD *)&v86[14];
  v66 = v83;
  v67 = *(_OWORD *)v84;
  v68 = *(_OWORD *)&v84[16];
  v69 = *(_OWORD *)&v84[32];
  LOBYTE(v72) = 0;
  v75 = 0;
  if (v90)
  {
    v72 = v87;
    v73 = v88;
    if (v88)
    {
      v26 = (unint64_t *)&v88->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v74 = v89;
    v75 = 1;
  }
  v76 = v91;
  v77 = 0;
  if (HIBYTE(v92))
  {
    LOBYTE(v77) = v92;
    HIBYTE(v77) = 1;
  }
  *(_OWORD *)v78 = *(_OWORD *)v93;
  *(_OWORD *)&v78[12] = *(_OWORD *)&v93[12];
  *(_QWORD *)&v59 = 0x5BD3262791F15BBDLL;
  *((_QWORD *)&v59 + 1) = "arComponents::StandardPipeline]";
  v60 = 30;
  v58 = 10;
  v28 = *a3;
  v29 = (std::__shared_weak_count *)a3[1];
  v57[0] = v28;
  v57[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v56 = a2;
  v32 = (uint64_t *)gdc::Registry::storage<arComponents::PendingCommonComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v32, a2);
  v33 = (uint64_t *)gdc::Registry::storage<arComponents::MeshRenderableComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshRenderableComponent>::emplace(v33, a2, (uint64_t)&v61);
  v34 = (uint64_t *)gdc::Registry::storage<arComponents::PipelineIdentifier>(v23);
  gdc::ComponentStorageWrapper<arComponents::PipelineIdentifier>::emplace(v34, a2, &v59);
  v35 = (uint64_t *)gdc::Registry::storage<arComponents::RenderOrder>(v23);
  gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v35, a2, &v58);
  v36 = (uint64_t *)gdc::Registry::storage<arComponents::MeshComponent>(v23);
  gdc::ComponentStorageWrapper<arComponents::MeshComponent>::emplace(v36, a2, v57);
  v37 = (uint64_t *)gdc::Registry::storage<arComponents::PendingPipelineSpecificComponentsSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v37, a2);
  v38 = (uint64_t *)gdc::Registry::storage<arComponents::ContextEntity>(v23);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v38, a2, &v56);
  v39 = (uint64_t *)gdc::Registry::storage<arComponents::RebuildPipelineSetup>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v39, a2);
  v40 = (uint64_t *)gdc::Registry::storage<arComponents::StandardPipeline>(v23);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v40, a2);
  if (v29)
  {
    v41 = (unint64_t *)&v29->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v61 = &off_1E428F838;
  if (v75)
  {
    v43 = v73;
    if (v73)
    {
      v44 = (unint64_t *)&v73->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  v46 = v65;
  if (v65)
  {
    v47 = (unint64_t *)&v65->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (_QWORD *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(a1[55]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v49, a2);
  v79 = &off_1E428F838;
  if (!v90)
    goto LABEL_52;
  v50 = v88;
  if (!v88)
    goto LABEL_52;
  v51 = (unint64_t *)&v88->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = v82;
    if (!v82)
      return;
  }
  else
  {
LABEL_52:
    v53 = v82;
    if (!v82)
      return;
  }
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_19F50F944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  md::MeshRenderable::~MeshRenderable((md::MeshRenderable *)&a44);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::ARMeshRenderResources::~ARMeshRenderResources(md::ARMeshRenderResources *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *((_QWORD *)this + 9) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 12));
    *((_QWORD *)this + 12) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v12)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v12)
      goto LABEL_23;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_23:
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    v16 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v15);
    MEMORY[0x1A1AF4E00](v16, 0x10A0C40D234DDC7);
  }
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
  {
    v18 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v17);
    MEMORY[0x1A1AF4E00](v18, 0x10A0C40D234DDC7);
  }
  v19 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    v20 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v19);
    MEMORY[0x1A1AF4E00](v20, 0x10A0C40D234DDC7);
  }
}

md::ARMeshRenderLayer *md::ARMeshRenderLayer::ARMeshRenderLayer(md::ARMeshRenderLayer *this, id *a2, VKSharedResources *a3, gdc::Registry *a4)
{
  VKSharedResources *v7;
  _DWORD *v8;
  _DWORD *v9;
  __int128 *v10;
  uint64_t *v11;
  VKSharedResources *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  unsigned __int8 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  char *v109;
  unsigned __int8 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unint64_t *v117;
  unint64_t v118;
  int8x16_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int32x4_t v145;
  int8x16_t v146;
  int32x4_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int16x8_t v162;
  int32x4_t v163;
  int16x8_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int16x8_t v171;
  int32x4_t v172;
  int16x8_t v173;
  int32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int32x4_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int32x4_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  char *v201;
  unsigned __int8 v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unint64_t *v209;
  unint64_t v210;
  int8x16_t v211;
  int16x8_t v212;
  int32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int16x8_t v216;
  int32x4_t v217;
  int8x16_t v218;
  int32x4_t v219;
  int8x16_t v220;
  int32x4_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int16x8_t v228;
  int32x4_t v229;
  int8x16_t v230;
  int16x8_t v231;
  int32x4_t v232;
  int8x16_t v233;
  int32x4_t v234;
  int8x16_t v235;
  int32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int16x8_t v250;
  int32x4_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int16x8_t v265;
  int32x4_t v266;
  int16x8_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t *v283;
  unsigned __int8 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _OWORD *v300;
  __int128 *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _OWORD *v318;
  __int128 *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t *v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _OWORD *v347;
  __int128 *v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _OWORD *v365;
  __int128 *v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t *v377;
  unsigned __int8 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _OWORD *v394;
  __int128 *v395;
  uint64_t v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _OWORD *v412;
  __int128 *v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  __n128 IcoSphereCached;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t *v443;
  unint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  ggl::ARMeshShader *v470;
  unsigned __int8 v471;
  unsigned __int8 v472;
  unsigned __int8 v473;
  unsigned __int8 v474;
  ggl::ARDepthMeshShader *v475;
  unsigned __int8 v476;
  unsigned __int8 v477;
  unsigned __int8 v478;
  unsigned __int8 v479;
  ggl::ARGroundShadowShader *v480;
  unsigned __int8 v481;
  unsigned __int8 v482;
  unsigned __int8 v483;
  unsigned __int8 v484;
  uint64_t v485;
  geo::read_write_lock *v486;
  const char *v487;
  malloc_zone_t *zone;
  uint64_t v489;
  geo::read_write_lock *v490;
  const char *v491;
  malloc_zone_t *v492;
  uint64_t v493;
  geo::read_write_lock *v494;
  const char *v495;
  malloc_zone_t *v496;
  uint64_t v497;
  geo::read_write_lock *v498;
  const char *v499;
  malloc_zone_t *v500;
  uint64_t v501;
  geo::read_write_lock *v502;
  const char *v503;
  malloc_zone_t *v504;
  uint64_t v505;
  geo::read_write_lock *v506;
  const char *v507;
  malloc_zone_t *v508;
  unsigned __int8 v509;
  unsigned __int8 v510;
  unsigned __int8 v511;
  unsigned __int8 v512;
  unsigned __int8 v513;
  unsigned __int8 v514;
  unsigned __int8 v515;
  unsigned __int8 v516;
  unsigned __int8 v517;
  unsigned __int8 v518;
  unsigned __int8 v519;
  unsigned __int8 v520;
  gdc::Registry *v521;
  id v522;
  VKSharedResources *v523;
  __int128 v524;
  __int128 v525;
  _QWORD v526[3];
  _QWORD *v527;
  _QWORD v528[3];
  _QWORD *v529;
  _QWORD v530[3];
  _QWORD *v531;
  _QWORD v532[3];
  _QWORD *v533;
  _QWORD v534[3];
  _QWORD *v535;
  _QWORD v536[3];
  _QWORD *v537;
  _QWORD v538[3];
  _QWORD *v539;
  _QWORD v540[3];
  _QWORD *v541;
  uint64_t v542;

  v542 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = operator new(4uLL);
  *v8 = 83887872;
  *(_QWORD *)this = off_1E428C468;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v9 = operator new(4uLL);
  *(_QWORD *)this = off_1E429E2A8;
  *((_QWORD *)this + 1) = v9;
  *v9++ = *v8;
  *((_QWORD *)this + 2) = v9;
  *((_QWORD *)this + 3) = v9;
  *((_WORD *)this + 16) = 0;
  *((_BYTE *)this + 34) = 2;
  *((_QWORD *)this + 5) = a2;
  operator delete(v8);
  *(_QWORD *)this = &off_1E42923A0;
  md::InstanceData::identity((md::ARMeshRenderLayer *)((char *)this + 48));
  v521 = a4;
  v522 = a2[13];
  v10 = (__int128 *)objc_msgSend(v522, "format", (char *)this + 48, v7);
  v11 = (uint64_t *)((char *)this + 64);
  v12 = v7;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 17) = &off_1E42B5DE8;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)((char *)this + 172) = 1793;
  *((_DWORD *)this + 45) = 0;
  *((_QWORD *)this + 23) = 1;
  *((_WORD *)this + 96) = 0;
  *((_BYTE *)this + 194) = 3;
  *(_QWORD *)((char *)this + 203) = 0;
  *(_QWORD *)((char *)this + 195) = 0;
  *((_BYTE *)this + 211) = 0;
  *(_QWORD *)((char *)this + 268) = 0;
  *(_QWORD *)((char *)this + 260) = 0;
  *((_WORD *)this + 162) = 257;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 0;
  v523 = v12;
  v13 = -[VKSharedResources shaderLibrary](v12, "shaderLibrary");
  v14 = *(_QWORD *)(v13 + 80);
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = (char *)operator new(0x198uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = &off_1E42E4700;
  v524 = *v10;
  v525 = v10[1];
  if ((v20 & 1) == 0)
  {
    if ((_DWORD)v470)
    {
      if ((v471 & 1) == 0)
      {
        if ((_DWORD)v470)
        {
          if ((v509 & 1) == 0
          {
            if ((v518 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE37150 = 1;
          }
          ggl::ARMesh::ARMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          if ((v510 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARMeshPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1EE589F78 = (uint64_t)&ggl::ARMesh::pipelineDataARMeshPipelineDeviceStructs(void)::ref;
          unk_1EE589F80 = 1;
          if ((v511 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58A308 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE58A310 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
            unk_1EE58A318 = ggl::ARMesh::UVMapping::reflection(void)::reflection;
            qword_1EE58A320 = (uint64_t)ggl::ARMesh::UVScale::reflection(void)::reflection;
            unk_1EE58A328 = ggl::ARMesh::ARLightingSetup::reflection(void)::reflection;
            qword_1EE58A330 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
          }
          qword_1EE589F88 = (uint64_t)&ggl::ARMesh::pipelineDataARMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE589F90 = xmmword_19FFB3650;
        }
      }
      ggl::ARMesh::ARMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARMeshPipelineSetup::typedReflection(void)::ref;
      ggl::ARMeshShader::typedReflection(v470);
      qword_1EE589F20 = (uint64_t)&ggl::ARMeshShader::typedReflection(void)::ref;
      if ((v472 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58A128 = 0;
        qword_1EE58A130 = (uint64_t)"";
        dword_1EE58A138 = 0;
        qword_1EE58A140 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE58A148 = 1;
      }
      qword_1EE589F28 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EE589F30 = 1;
      qword_1EE589F38 = 0;
      unk_1EE589F40 = 2;
      if ((v473 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARMeshPipelineDeviceStructBinding(void)::ref = 0;
        unk_1EE58A160 = 0;
        qword_1EE58A168 = (uint64_t)"instanceTransform";
        dword_1EE58A170 = 2;
        qword_1EE58A178 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1EE58A180 = 0;
      }
      qword_1EE589F48 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EE589F50 = 1;
      if ((v474 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58A1A0 = 0;
        qword_1EE58A1A8 = (uint64_t)"view";
        dword_1EE58A1B0 = 3;
        qword_1EE58A1B8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE58A1C0 = xmmword_19FFB35A0;
        qword_1EE58A1D0 = 1;
        unk_1EE58A1D8 = "transform";
        dword_1EE58A1E0 = 3;
        qword_1EE58A1E8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE58A1F0 = xmmword_19FFB3660;
        qword_1EE58A200 = 2;
        unk_1EE58A208 = "cameraView";
        dword_1EE58A210 = 3;
        qword_1EE58A218 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantCameraViewBinding(void)::reflection;
        unk_1EE58A220 = xmmword_19FFB3040;
        qword_1EE58A230 = 3;
        unk_1EE58A238 = "uvMapping";
        dword_1EE58A240 = 3;
        qword_1EE58A248 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantUvMappingBinding(void)::reflection;
        *(_OWORD *)algn_1EE58A250 = xmmword_19FFB3050;
        qword_1EE58A260 = 4;
        unk_1EE58A268 = "uvScale";
        dword_1EE58A270 = 3;
        qword_1EE58A278 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantUvScaleBinding(void)::reflection;
        unk_1EE58A280 = xmmword_19FFB3670;
        qword_1EE58A290 = 5;
        unk_1EE58A298 = "arLightingSetup";
        dword_1EE58A2A0 = 3;
        qword_1EE58A2A8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantArLightingSetupBinding(void)::reflection;
        xmmword_1EE58A2B0 = xmmword_19FFB3680;
        qword_1EE58A2C0 = 6;
        unk_1EE58A2C8 = "styleColor";
        dword_1EE58A2D0 = 3;
        qword_1EE58A2D8 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantStyleColorBinding(void)::reflection;
        unk_1EE58A2E0 = 1;
      }
      qword_1EE589F58 = (uint64_t)&ggl::ARMesh::pipelineStateARMeshPipelineConstantStructBinding(void)::ref;
      unk_1EE589F60 = 7;
    }
  }
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    *((_DWORD *)v19 + 14) = 0;
    *((_QWORD *)v19 + 5) = 0;
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 3) = &off_1E42B6760;
    *((_QWORD *)v19 + 4) = 0;
    *((_QWORD *)v19 + 8) = &ggl::ARMesh::ARMeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v19 + 9) = v15;
    *((_QWORD *)v19 + 10) = v16;
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
  }
  else
  {
    *((_DWORD *)v19 + 14) = 0;
    *((_QWORD *)v19 + 5) = 0;
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 3) = &off_1E42B6760;
    *((_QWORD *)v19 + 4) = 0;
    *((_QWORD *)v19 + 8) = &ggl::ARMesh::ARMeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v19 + 9) = v15;
    *((_QWORD *)v19 + 10) = 0;
  }
  v19[136] = 0;
  *(_OWORD *)(v19 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v19 + 156) = 0;
  *(_QWORD *)(v19 + 172) = 0;
  *(_QWORD *)(v19 + 164) = 0;
  v19[184] = 0;
  *(_OWORD *)(v19 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v19 + 204) = 0;
  *(_QWORD *)(v19 + 220) = 0;
  *(_QWORD *)(v19 + 212) = 0;
  v19[232] = 0;
  *(_OWORD *)(v19 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v19 + 252) = 0;
  *(_QWORD *)(v19 + 268) = 0;
  *(_QWORD *)(v19 + 260) = 0;
  v24 = v525;
  *(_OWORD *)(v19 + 280) = v524;
  *(_OWORD *)(v19 + 296) = v24;
  v19[312] = 0;
  *((_QWORD *)v19 + 48) = 0;
  v25 = 0uLL;
  *((_OWORD *)v19 + 22) = 0u;
  *((_OWORD *)v19 + 23) = 0u;
  *((_OWORD *)v19 + 20) = 0u;
  *((_OWORD *)v19 + 21) = 0u;
  *((_QWORD *)v19 + 49) = 0x100000001;
  v19[400] = 0;
  v19[88] = 1;
  *(_WORD *)(v19 + 89) = v540[0];
  v19[91] = BYTE2(v540[0]);
  *(_OWORD *)(v19 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v19 + 27) = 7;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 15) = 0;
  *((_DWORD *)v19 + 32) = 0;
  v19[132] = 15;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v25 = 0uLL;
    }
  }
  *((_QWORD *)v19 + 45) = 0;
  *(_OWORD *)(v19 + 329) = v25;
  *(_OWORD *)(v19 + 345) = v25;
  v28 = vceqzq_s8(*(int8x16_t *)(v19 + 328));
  v29 = vmovl_high_s8(v28);
  v30 = vmovl_s16(*(int16x4_t *)v29.i8);
  v31.i64[0] = v30.u32[0];
  v31.i64[1] = v30.u32[1];
  v32 = v31;
  v33 = vmovl_s8(*(int8x8_t *)v28.i8);
  v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v31.i64[0] = v34.u32[0];
  v31.i64[1] = v34.u32[1];
  v35 = v31;
  v36 = vmovl_high_s16(v29);
  v31.i64[0] = v36.u32[0];
  v31.i64[1] = v36.u32[1];
  v37 = v31;
  v38 = vmovl_high_s16(v33);
  v31.i64[0] = v38.u32[0];
  v31.i64[1] = v38.u32[1];
  v39 = v31;
  v31.i64[0] = v30.u32[2];
  v31.i64[1] = v30.u32[3];
  v40 = v31;
  v31.i64[0] = v34.u32[2];
  v31.i64[1] = v34.u32[3];
  v41 = v31;
  v31.i64[0] = v36.u32[2];
  v31.i64[1] = v36.u32[3];
  v42 = v31;
  v31.i64[0] = v38.u32[2];
  v31.i64[1] = v38.u32[3];
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v31);
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v42);
  v45 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v41);
  v46 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v37);
  v47 = vceqzq_s8(*(int8x16_t *)(v19 + 344));
  v48 = vmovl_high_s8(v47);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v31.i64[0] = v49.u32[0];
  v31.i64[1] = v49.u32[1];
  v50 = v31;
  v51 = vmovl_s8(*(int8x8_t *)v47.i8);
  v52 = vmovl_s16(*(int16x4_t *)v51.i8);
  v31.i64[0] = v52.u32[0];
  v31.i64[1] = v52.u32[1];
  v53 = v31;
  v54 = vmovl_high_s16(v48);
  v31.i64[0] = v54.u32[0];
  v31.i64[1] = v54.u32[1];
  v55 = v31;
  v56 = vmovl_high_s16(v51);
  v31.i64[0] = v56.u32[0];
  v31.i64[1] = v56.u32[1];
  v57 = v31;
  v31.i64[0] = v49.u32[2];
  v31.i64[1] = v49.u32[3];
  v58 = v31;
  v31.i64[0] = v52.u32[2];
  v31.i64[1] = v52.u32[3];
  v59 = v31;
  v31.i64[0] = v54.u32[2];
  v31.i64[1] = v54.u32[3];
  v60 = v31;
  v31.i64[0] = v56.u32[2];
  v31.i64[1] = v56.u32[3];
  v61 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v60);
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v50), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v32));
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v53), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v35));
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v55), v46);
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v57), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v39));
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v58), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v40));
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v59), v45);
  v68 = vorrq_s8(v61, v44);
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v31), v43);
  v70 = vceqzq_s8(*(int8x16_t *)(v19 + 360));
  v71 = vmovl_high_s8(v70);
  v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v31.i64[0] = v72.i32[0];
  v31.i64[1] = v72.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v31);
  v74 = vceqzq_s8(*(int8x16_t *)(v19 + 376));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v31.i64[0] = v76.i32[0];
  v31.i64[1] = v76.i32[1];
  v77 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v31), v73), v62);
  v78 = vmovl_s8(*(int8x8_t *)v70.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v31.i64[0] = v79.i32[0];
  v31.i64[1] = v79.i32[1];
  v80 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v31);
  v81 = vmovl_s8(*(int8x8_t *)v74.i8);
  v82 = vmovl_s16(*(int16x4_t *)v81.i8);
  v31.i64[0] = v82.i32[0];
  v31.i64[1] = v82.i32[1];
  v83 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v31), v80), v63);
  v84 = vmovl_high_s16(v71);
  v31.i64[0] = v84.i32[0];
  v31.i64[1] = v84.i32[1];
  v85 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v31);
  v86 = vmovl_high_s16(v75);
  v31.i64[0] = v86.i32[0];
  v31.i64[1] = v86.i32[1];
  v87 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v31), v85), v64);
  v88 = vmovl_high_s16(v78);
  v31.i64[0] = v88.i32[0];
  v31.i64[1] = v88.i32[1];
  v89 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v31);
  v90 = vmovl_high_s16(v81);
  v31.i64[0] = v90.i32[0];
  v31.i64[1] = v90.i32[1];
  v91 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v31), v89), v65);
  v31.i64[0] = v72.i32[2];
  v31.i64[1] = v72.i32[3];
  v92 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v31);
  v31.i64[0] = v76.i32[2];
  v31.i64[1] = v76.i32[3];
  v93 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v31), v92), v66);
  v31.i64[0] = v79.i32[2];
  v31.i64[1] = v79.i32[3];
  v94 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v31);
  v31.i64[0] = v82.i32[2];
  v31.i64[1] = v82.i32[3];
  v95 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v31), v94), v67);
  v31.i64[0] = v84.i32[2];
  v31.i64[1] = v84.i32[3];
  v96 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v31);
  v31.i64[0] = v86.i32[2];
  v31.i64[1] = v86.i32[3];
  v97 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v31), v96), v68);
  v31.i64[0] = v88.i32[2];
  v31.i64[1] = v88.i32[3];
  v98 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v31);
  v31.i64[0] = v90.i32[2];
  v31.i64[1] = v90.i32[3];
  *((_QWORD *)v19 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v83, v77), vorrq_s8(v91, v87)), (int64x2_t)vorrq_s8(vorrq_s8(v95, v93), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v31), v98), v69), v97))));
  *((_QWORD *)v19 + 3) = &off_1E42BC078;
  v19[312] = 1;
  v99 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = v19 + 24;
  *((_QWORD *)this + 12) = v19;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v16)
  {
    v102 = (unint64_t *)&v16->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v104 = *(_QWORD *)(v13 + 80);
  v106 = *(_QWORD *)(v104 + 56);
  v105 = *(std::__shared_weak_count **)(v104 + 64);
  if (v105)
  {
    v107 = (unint64_t *)&v105->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  v540[0] = 0;
  v109 = (char *)operator new(0x198uLL);
  *((_QWORD *)v109 + 1) = 0;
  *((_QWORD *)v109 + 2) = 0;
  *(_QWORD *)v109 = &off_1E42E4770;
  v524 = *v10;
  v525 = v10[1];
  if ((v110 & 1) == 0)
  {
    if ((_DWORD)v475)
    {
      if ((v476 & 1) == 0)
      {
        if ((_DWORD)v475)
        {
          if ((v512 & 1) == 0
          {
            if ((v519 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE37150 = 1;
          }
          ggl::ARMesh::ARDepthMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          if ((v513 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARDepthMeshPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1EE58A008 = (uint64_t)&ggl::ARMesh::pipelineDataARDepthMeshPipelineDeviceStructs(void)::ref;
          unk_1EE58A010 = 1;
          if ((v514 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARDepthMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58A468 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE58A470 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
          }
          qword_1EE58A018 = (uint64_t)&ggl::ARMesh::pipelineDataARDepthMeshPipelineConstantStructs(void)::ref;
          unk_1EE58A020 = xmmword_19FFB3410;
        }
      }
      ggl::ARMesh::ARDepthMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARDepthMeshPipelineSetup::typedReflection(void)::ref;
      ggl::ARDepthMeshShader::typedReflection(v475);
      qword_1EE589FB0 = (uint64_t)&ggl::ARDepthMeshShader::typedReflection(void)::ref;
      if ((v477 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58A348 = 0;
        qword_1EE58A350 = (uint64_t)"";
        dword_1EE58A358 = 0;
        qword_1EE58A360 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE58A368 = 1;
      }
      qword_1EE589FB8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EE589FC0 = 1;
      qword_1EE589FC8 = 0;
      unk_1EE589FD0 = 0;
      if ((v478 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceStructBinding(void)::ref = 0;
        unk_1EE58A380 = 0;
        qword_1EE58A388 = (uint64_t)"instanceTransform";
        dword_1EE58A390 = 2;
        qword_1EE58A398 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1EE58A3A0 = 0;
      }
      qword_1EE589FD8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EE589FE0 = 1;
      if ((v479 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58A3C0 = 0;
        qword_1EE58A3C8 = (uint64_t)"view";
        dword_1EE58A3D0 = 3;
        qword_1EE58A3D8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE58A3E0 = xmmword_19FFB35A0;
        qword_1EE58A3F0 = 1;
        unk_1EE58A3F8 = "transform";
        dword_1EE58A400 = 3;
        qword_1EE58A408 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE58A410 = xmmword_19FFB3660;
        qword_1EE58A420 = 2;
        unk_1EE58A428 = "cameraView";
        dword_1EE58A430 = 3;
        qword_1EE58A438 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantCameraViewBinding(void)::reflection;
        unk_1EE58A440 = 1;
      }
      qword_1EE589FE8 = (uint64_t)&ggl::ARMesh::pipelineStateARDepthMeshPipelineConstantStructBinding(void)::ref;
      unk_1EE589FF0 = 3;
    }
  }
  if (v105)
  {
    v111 = (unint64_t *)&v105->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
    *((_DWORD *)v109 + 14) = 0;
    *((_QWORD *)v109 + 5) = 0;
    *((_QWORD *)v109 + 6) = 0;
    *((_QWORD *)v109 + 3) = &off_1E42B6760;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 8) = &ggl::ARMesh::ARDepthMeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v109 + 9) = v106;
    *((_QWORD *)v109 + 10) = v105;
    do
      v113 = __ldxr(v111);
    while (__stxr(v113 + 1, v111));
  }
  else
  {
    *((_DWORD *)v109 + 14) = 0;
    *((_QWORD *)v109 + 5) = 0;
    *((_QWORD *)v109 + 6) = 0;
    *((_QWORD *)v109 + 3) = &off_1E42B6760;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 8) = &ggl::ARMesh::ARDepthMeshPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v109 + 9) = v106;
    *((_QWORD *)v109 + 10) = 0;
  }
  v109[136] = 0;
  v114 = v524;
  *(_OWORD *)(v109 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v109 + 156) = 0;
  *(_QWORD *)(v109 + 172) = 0;
  *(_QWORD *)(v109 + 164) = 0;
  v109[184] = 0;
  *(_OWORD *)(v109 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v109 + 204) = 0;
  *(_QWORD *)(v109 + 220) = 0;
  *(_QWORD *)(v109 + 212) = 0;
  v109[232] = 0;
  *(_OWORD *)(v109 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v109 + 252) = 0;
  *(_QWORD *)(v109 + 268) = 0;
  *(_QWORD *)(v109 + 260) = 0;
  v115 = v525;
  *(_OWORD *)(v109 + 280) = v114;
  *(_OWORD *)(v109 + 296) = v115;
  v109[312] = 0;
  *((_QWORD *)v109 + 48) = 0;
  v116 = 0uLL;
  *((_OWORD *)v109 + 22) = 0u;
  *((_OWORD *)v109 + 23) = 0u;
  *((_OWORD *)v109 + 20) = 0u;
  *((_OWORD *)v109 + 21) = 0u;
  *((_QWORD *)v109 + 49) = 0x100000001;
  v109[400] = 0;
  v109[88] = 0;
  *(_WORD *)(v109 + 89) = v538[0];
  v109[91] = BYTE2(v538[0]);
  *(_OWORD *)(v109 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v109 + 108) = v540[0];
  *(_QWORD *)(v109 + 124) = 0;
  *(_QWORD *)(v109 + 116) = 0;
  v109[132] = 0;
  if (v105)
  {
    v117 = (unint64_t *)&v105->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
      v116 = 0uLL;
    }
  }
  *((_QWORD *)v109 + 45) = 0;
  *(_OWORD *)(v109 + 329) = v116;
  *(_OWORD *)(v109 + 345) = v116;
  v119 = vceqzq_s8(*(int8x16_t *)(v109 + 328));
  v120 = vmovl_high_s8(v119);
  v121 = vmovl_s16(*(int16x4_t *)v120.i8);
  v122.i64[0] = v121.u32[0];
  v122.i64[1] = v121.u32[1];
  v123 = v122;
  v124 = vmovl_s8(*(int8x8_t *)v119.i8);
  v125 = vmovl_s16(*(int16x4_t *)v124.i8);
  v122.i64[0] = v125.u32[0];
  v122.i64[1] = v125.u32[1];
  v126 = v122;
  v127 = vmovl_high_s16(v120);
  v122.i64[0] = v127.u32[0];
  v122.i64[1] = v127.u32[1];
  v128 = v122;
  v129 = vmovl_high_s16(v124);
  v122.i64[0] = v129.u32[0];
  v122.i64[1] = v129.u32[1];
  v130 = v122;
  v122.i64[0] = v121.u32[2];
  v122.i64[1] = v121.u32[3];
  v131 = v122;
  v122.i64[0] = v125.u32[2];
  v122.i64[1] = v125.u32[3];
  v132 = v122;
  v122.i64[0] = v127.u32[2];
  v122.i64[1] = v127.u32[3];
  v133 = v122;
  v122.i64[0] = v129.u32[2];
  v122.i64[1] = v129.u32[3];
  v134 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v122);
  v135 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v133);
  v136 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v132);
  v137 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v128);
  v138 = vceqzq_s8(*(int8x16_t *)(v109 + 344));
  v139 = vmovl_high_s8(v138);
  v140 = vmovl_s16(*(int16x4_t *)v139.i8);
  v122.i64[0] = v140.u32[0];
  v122.i64[1] = v140.u32[1];
  v141 = v122;
  v142 = vmovl_s8(*(int8x8_t *)v138.i8);
  v143 = vmovl_s16(*(int16x4_t *)v142.i8);
  v122.i64[0] = v143.u32[0];
  v122.i64[1] = v143.u32[1];
  v144 = v122;
  v145 = vmovl_high_s16(v139);
  v122.i64[0] = v145.u32[0];
  v122.i64[1] = v145.u32[1];
  v146 = v122;
  v147 = vmovl_high_s16(v142);
  v122.i64[0] = v147.u32[0];
  v122.i64[1] = v147.u32[1];
  v148 = v122;
  v122.i64[0] = v140.u32[2];
  v122.i64[1] = v140.u32[3];
  v149 = v122;
  v122.i64[0] = v143.u32[2];
  v122.i64[1] = v143.u32[3];
  v150 = v122;
  v122.i64[0] = v145.u32[2];
  v122.i64[1] = v145.u32[3];
  v151 = v122;
  v122.i64[0] = v147.u32[2];
  v122.i64[1] = v147.u32[3];
  v152 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v151);
  v153 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v141), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v123));
  v154 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v144), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v126));
  v155 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v146), v137);
  v156 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v148), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v130));
  v157 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v149), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v131));
  v158 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v150), v136);
  v159 = vorrq_s8(v152, v135);
  v160 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v122), v134);
  v161 = vceqzq_s8(*(int8x16_t *)(v109 + 360));
  v162 = vmovl_s8(*(int8x8_t *)v161.i8);
  v163 = vmovl_high_s16(v162);
  v164 = vmovl_high_s8(v161);
  v165 = vmovl_high_s16(v164);
  v166 = vmovl_s16(*(int16x4_t *)v162.i8);
  v167 = vmovl_s16(*(int16x4_t *)v164.i8);
  v122.i64[0] = v166.i32[0];
  v122.i64[1] = v166.i32[1];
  v168 = v122;
  v122.i64[0] = v167.i32[0];
  v122.i64[1] = v167.i32[1];
  v169 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v122);
  v170 = vceqzq_s8(*(int8x16_t *)(v109 + 376));
  v171 = vmovl_high_s8(v170);
  v172 = vmovl_s16(*(int16x4_t *)v171.i8);
  v122.i64[0] = v172.i32[0];
  v122.i64[1] = v172.i32[1];
  v173 = vmovl_s8(*(int8x8_t *)v170.i8);
  v174 = vmovl_s16(*(int16x4_t *)v173.i8);
  v175 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v122), v169), v153);
  v122.i64[0] = v174.i32[0];
  v122.i64[1] = v174.i32[1];
  v176 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v122), vbicq_s8((int8x16_t)xmmword_19FFB3170, v168));
  v122.i64[0] = v165.i32[0];
  v122.i64[1] = v165.i32[1];
  v177 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v122);
  v178 = vmovl_high_s16(v171);
  v179 = vorrq_s8(v176, v154);
  v122.i64[0] = v178.i32[0];
  v122.i64[1] = v178.i32[1];
  v180 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v122), v177);
  v122.i64[0] = v163.i32[0];
  v122.i64[1] = v163.i32[1];
  v181 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v122);
  v182 = vmovl_high_s16(v173);
  v122.i64[0] = v182.i32[0];
  v122.i64[1] = v182.i32[1];
  v183 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v122), v181), v156);
  v122.i64[0] = v167.i32[2];
  v122.i64[1] = v167.i32[3];
  v184 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v122);
  v122.i64[0] = v172.i32[2];
  v122.i64[1] = v172.i32[3];
  v185 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v122), v184), v157);
  v122.i64[0] = v166.i32[2];
  v122.i64[1] = v166.i32[3];
  v186 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v122);
  v122.i64[0] = v174.i32[2];
  v122.i64[1] = v174.i32[3];
  v187 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v122), v186), v158);
  v122.i64[0] = v165.i32[2];
  v122.i64[1] = v165.i32[3];
  v188 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v122);
  v122.i64[0] = v178.i32[2];
  v122.i64[1] = v178.i32[3];
  v189 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v122), v188), v159);
  v122.i64[0] = v163.i32[2];
  v122.i64[1] = v163.i32[3];
  v190 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v122);
  v122.i64[0] = v182.i32[2];
  v122.i64[1] = v182.i32[3];
  *((_QWORD *)v109 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v179, v175), vorrq_s8(v183, vorrq_s8(v180, v155))), (int64x2_t)vorrq_s8(vorrq_s8(v187, v185), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v122), v190), v160), v189))));
  *((_QWORD *)v109 + 3) = &off_1E42BC118;
  v109[312] = 1;
  v191 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v109 + 24;
  *((_QWORD *)this + 14) = v109;
  if (v191)
  {
    v192 = (unint64_t *)&v191->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  if (v105)
  {
    v194 = (unint64_t *)&v105->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v196 = *(_QWORD *)(v13 + 80);
  v198 = *(_QWORD *)(v196 + 80);
  v197 = *(std::__shared_weak_count **)(v196 + 88);
  if (v197)
  {
    v199 = (unint64_t *)&v197->__shared_owners_;
    do
      v200 = __ldxr(v199);
    while (__stxr(v200 + 1, v199));
  }
  v201 = (char *)operator new(0x198uLL);
  *((_QWORD *)v201 + 1) = 0;
  *((_QWORD *)v201 + 2) = 0;
  *(_QWORD *)v201 = &off_1E42E4738;
  v524 = *v10;
  v525 = v10[1];
  if ((v202 & 1) == 0)
  {
    if ((_DWORD)v480)
    {
      if ((v481 & 1) == 0)
      {
        if ((_DWORD)v480)
        {
          if ((v515 & 1) == 0
          {
            if ((v520 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedVboReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE37150 = 1;
          }
          ggl::ARMesh::ARShadowPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedVbo>::typedReflection(void)::r;
          if ((v516 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARShadowPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          }
          qword_1EE58A098 = (uint64_t)&ggl::ARMesh::pipelineDataARShadowPipelineDeviceStructs(void)::ref;
          unk_1EE58A0A0 = 1;
          if ((v517 & 1) == 0
          {
            ggl::ARMesh::pipelineDataARShadowPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE58A5D8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE58A5E0 = (uint64_t)ggl::ARMesh::CameraView::reflection(void)::reflection;
            unk_1EE58A5E8 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
          }
          qword_1EE58A0A8 = (uint64_t)&ggl::ARMesh::pipelineDataARShadowPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE58A0B0 = xmmword_19FFB3690;
        }
      }
      ggl::ARMesh::ARShadowPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ARMesh::ARShadowPipelineSetup::typedReflection(void)::ref;
      ggl::ARGroundShadowShader::typedReflection(v480);
      qword_1EE58A040 = (uint64_t)&ggl::ARGroundShadowShader::typedReflection(void)::ref;
      if ((v482 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARShadowPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58A488 = 0;
        qword_1EE58A490 = (uint64_t)"";
        dword_1EE58A498 = 0;
        qword_1EE58A4A0 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineAttributeBinding_0(void)::attr;
        unk_1EE58A4A8 = 1;
      }
      qword_1EE58A048 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineAttributeStructBinding(void)::attr;
      unk_1EE58A050 = 1;
      qword_1EE58A058 = 0;
      unk_1EE58A060 = 0;
      if ((v483 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARShadowPipelineDeviceStructBinding(void)::ref = 0;
        unk_1EE58A4C0 = 0;
        qword_1EE58A4C8 = (uint64_t)"instanceTransform";
        dword_1EE58A4D0 = 2;
        qword_1EE58A4D8 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1EE58A4E0 = 0;
      }
      qword_1EE58A068 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineDeviceStructBinding(void)::ref;
      unk_1EE58A070 = 1;
      if ((v484 & 1) == 0
      {
        ggl::ARMesh::pipelineStateARShadowPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58A500 = 0;
        qword_1EE58A508 = (uint64_t)"view";
        dword_1EE58A510 = 3;
        qword_1EE58A518 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantViewBinding(void)::reflection;
        unk_1EE58A520 = xmmword_19FFB35A0;
        qword_1EE58A530 = 1;
        unk_1EE58A538 = "transform";
        dword_1EE58A540 = 3;
        qword_1EE58A548 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE58A550 = xmmword_19FFB3660;
        qword_1EE58A560 = 2;
        unk_1EE58A568 = "cameraView";
        dword_1EE58A570 = 3;
        qword_1EE58A578 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantCameraViewBinding(void)::reflection;
        unk_1EE58A580 = xmmword_19FFB3040;
        qword_1EE58A590 = 3;
        unk_1EE58A598 = "styleColor";
        dword_1EE58A5A0 = 3;
        qword_1EE58A5A8 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantStyleColorBinding(void)::reflection;
        unk_1EE58A5B0 = 1;
      }
      qword_1EE58A078 = (uint64_t)&ggl::ARMesh::pipelineStateARShadowPipelineConstantStructBinding(void)::ref;
      unk_1EE58A080 = 4;
    }
  }
  if (v197)
  {
    v203 = (unint64_t *)&v197->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
    *((_DWORD *)v201 + 14) = 0;
    *((_QWORD *)v201 + 5) = 0;
    *((_QWORD *)v201 + 6) = 0;
    *((_QWORD *)v201 + 3) = &off_1E42B6760;
    *((_QWORD *)v201 + 4) = 0;
    *((_QWORD *)v201 + 8) = &ggl::ARMesh::ARShadowPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v201 + 9) = v198;
    *((_QWORD *)v201 + 10) = v197;
    do
      v205 = __ldxr(v203);
    while (__stxr(v205 + 1, v203));
  }
  else
  {
    *((_DWORD *)v201 + 14) = 0;
    *((_QWORD *)v201 + 5) = 0;
    *((_QWORD *)v201 + 6) = 0;
    *((_QWORD *)v201 + 3) = &off_1E42B6760;
    *((_QWORD *)v201 + 4) = 0;
    *((_QWORD *)v201 + 8) = &ggl::ARMesh::ARShadowPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v201 + 9) = v198;
    *((_QWORD *)v201 + 10) = 0;
  }
  v201[136] = 0;
  v206 = v524;
  *(_OWORD *)(v201 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v201 + 156) = 0;
  *(_QWORD *)(v201 + 172) = 0;
  *(_QWORD *)(v201 + 164) = 0;
  v201[184] = 0;
  *(_OWORD *)(v201 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v201 + 204) = 0;
  *(_QWORD *)(v201 + 220) = 0;
  *(_QWORD *)(v201 + 212) = 0;
  v201[232] = 0;
  *(_OWORD *)(v201 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v201 + 252) = 0;
  *(_QWORD *)(v201 + 268) = 0;
  *(_QWORD *)(v201 + 260) = 0;
  v207 = v525;
  *(_OWORD *)(v201 + 280) = v206;
  *(_OWORD *)(v201 + 296) = v207;
  v201[312] = 0;
  *((_QWORD *)v201 + 48) = 0;
  v208 = 0uLL;
  *((_OWORD *)v201 + 22) = 0u;
  *((_OWORD *)v201 + 23) = 0u;
  *((_OWORD *)v201 + 20) = 0u;
  *((_OWORD *)v201 + 21) = 0u;
  *((_QWORD *)v201 + 49) = 0x100000001;
  v201[400] = 0;
  v201[88] = 1;
  *(_WORD *)(v201 + 89) = v540[0];
  v201[91] = BYTE2(v540[0]);
  *(_OWORD *)(v201 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v201 + 27) = 7;
  *((_QWORD *)v201 + 14) = 0;
  *((_QWORD *)v201 + 15) = 0;
  *((_DWORD *)v201 + 32) = 0;
  v201[132] = 15;
  if (v197)
  {
    v209 = (unint64_t *)&v197->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
      v208 = 0uLL;
    }
  }
  *((_QWORD *)v201 + 45) = 0;
  *(_OWORD *)(v201 + 329) = v208;
  *(_OWORD *)(v201 + 345) = v208;
  v211 = vceqzq_s8(*(int8x16_t *)(v201 + 328));
  v212 = vmovl_s8(*(int8x8_t *)v211.i8);
  v213 = vmovl_high_s16(v212);
  v214.i64[0] = v213.u32[2];
  v214.i64[1] = v213.u32[3];
  v215 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v214);
  v216 = vmovl_high_s8(v211);
  v217 = vmovl_high_s16(v216);
  v214.i64[0] = v217.u32[2];
  v214.i64[1] = v217.u32[3];
  v218 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v214);
  v219 = vmovl_s16(*(int16x4_t *)v212.i8);
  v214.i64[0] = v219.u32[2];
  v214.i64[1] = v219.u32[3];
  v220 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v214);
  v221 = vmovl_s16(*(int16x4_t *)v216.i8);
  v214.i64[0] = v221.u32[2];
  v214.i64[1] = v221.u32[3];
  v222 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v214);
  v214.i64[0] = v213.u32[0];
  v214.i64[1] = v213.u32[1];
  v223 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v214);
  v214.i64[0] = v217.u32[0];
  v214.i64[1] = v217.u32[1];
  v224 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v214);
  v214.i64[0] = v219.u32[0];
  v214.i64[1] = v219.u32[1];
  v225 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v214);
  v214.i64[0] = v221.u32[0];
  v214.i64[1] = v221.u32[1];
  v226 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v214);
  v227 = vceqzq_s8(*(int8x16_t *)(v201 + 344));
  v228 = vmovl_s8(*(int8x8_t *)v227.i8);
  v229 = vmovl_high_s16(v228);
  v214.i64[0] = v229.u32[2];
  v214.i64[1] = v229.u32[3];
  v230 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v214);
  v231 = vmovl_high_s8(v227);
  v232 = vmovl_high_s16(v231);
  v214.i64[0] = v232.u32[2];
  v214.i64[1] = v232.u32[3];
  v233 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v214);
  v234 = vmovl_s16(*(int16x4_t *)v228.i8);
  v214.i64[0] = v234.u32[2];
  v214.i64[1] = v234.u32[3];
  v235 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v214);
  v236 = vmovl_s16(*(int16x4_t *)v231.i8);
  v214.i64[0] = v236.u32[2];
  v214.i64[1] = v236.u32[3];
  v237 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v214);
  v214.i64[0] = v229.u32[0];
  v214.i64[1] = v229.u32[1];
  v238 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v214);
  v214.i64[0] = v232.u32[0];
  v214.i64[1] = v232.u32[1];
  v239 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v214);
  v214.i64[0] = v234.u32[0];
  v214.i64[1] = v234.u32[1];
  v240 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v214);
  v214.i64[0] = v236.u32[0];
  v214.i64[1] = v236.u32[1];
  v241 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v214), v226);
  v242 = vorrq_s8(v240, v225);
  v243 = vorrq_s8(v239, v224);
  v244 = vorrq_s8(v238, v223);
  v245 = vorrq_s8(v237, v222);
  v246 = vorrq_s8(v235, v220);
  v247 = vorrq_s8(v233, v218);
  v248 = vorrq_s8(v230, v215);
  v249 = vceqzq_s8(*(int8x16_t *)(v201 + 360));
  v250 = vmovl_s8(*(int8x8_t *)v249.i8);
  v251 = vmovl_high_s16(v250);
  v252 = vmovl_high_s8(v249);
  v253 = vmovl_high_s16(v252);
  v254 = vmovl_s16(*(int16x4_t *)v250.i8);
  v255 = vmovl_s16(*(int16x4_t *)v252.i8);
  v214.i64[0] = v255.i32[0];
  v214.i64[1] = v255.i32[1];
  v256 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v214);
  v214.i64[0] = v254.i32[0];
  v214.i64[1] = v254.i32[1];
  v257 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v214);
  v214.i64[0] = v253.i32[0];
  v214.i64[1] = v253.i32[1];
  v258 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v214);
  v214.i64[0] = v251.i32[0];
  v214.i64[1] = v251.i32[1];
  v259 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v214);
  v214.i64[0] = v251.i32[2];
  v214.i64[1] = v251.i32[3];
  v260 = v214;
  v214.i64[0] = v253.i32[2];
  v214.i64[1] = v253.i32[3];
  v261 = v214;
  v214.i64[0] = v254.i32[2];
  v214.i64[1] = v254.i32[3];
  v262 = v214;
  v214.i64[0] = v255.i32[2];
  v214.i64[1] = v255.i32[3];
  v263 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v214);
  v264 = vceqzq_s8(*(int8x16_t *)(v201 + 376));
  v265 = vmovl_high_s8(v264);
  v266 = vmovl_s16(*(int16x4_t *)v265.i8);
  v267 = vmovl_s8(*(int8x8_t *)v264.i8);
  v268 = vmovl_s16(*(int16x4_t *)v267.i8);
  v269 = vmovl_high_s16(v265);
  v270 = vmovl_high_s16(v267);
  v214.i64[0] = v270.i32[2];
  v214.i64[1] = v270.i32[3];
  v271 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v214);
  v214.i64[0] = v269.i32[2];
  v214.i64[1] = v269.i32[3];
  v272 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v214);
  v214.i64[0] = v268.i32[2];
  v214.i64[1] = v268.i32[3];
  v273 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v214);
  v214.i64[0] = v266.i32[2];
  v214.i64[1] = v266.i32[3];
  v274 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v214);
  v214.i64[0] = v270.i32[0];
  v214.i64[1] = v270.i32[1];
  v275 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v214);
  v214.i64[0] = v269.i32[0];
  v214.i64[1] = v269.i32[1];
  v276 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v214);
  v214.i64[0] = v268.i32[0];
  v214.i64[1] = v268.i32[1];
  v277 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v214);
  v214.i64[0] = v266.i32[0];
  v214.i64[1] = v266.i32[1];
  *((_QWORD *)v201 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v277, v257), v242), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v214), v256), v241)), vorrq_s8(vorrq_s8(vorrq_s8(v275, v259), v244), vorrq_s8(vorrq_s8(v276, v258), v243))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v273, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v262)), v246), vorrq_s8(vorrq_s8(v274, v263), v245)), vorrq_s8(vorrq_s8(vorrq_s8(v271, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v260)),
                                                v248),
                                              vorrq_s8(vorrq_s8(v272, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v261)), v247)))));
  *((_QWORD *)v201 + 3) = &off_1E42BC0C8;
  v201[312] = 1;
  v278 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = v201 + 24;
  *((_QWORD *)this + 16) = v201;
  if (v278)
  {
    v279 = (unint64_t *)&v278->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  if (v197)
  {
    v281 = (unint64_t *)&v197->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  *((_BYTE *)this + 194) = 3;
  *((_BYTE *)this + 192) = 1;
  v283 = (uint64_t *)operator new();
  v540[0] = &off_1E42D08B0;
  v540[1] = (char *)this + 64;
  v541 = v540;
  v538[0] = &off_1E42D08F8;
  v539 = v538;
  v283[1] = 0;
  v283[2] = 0;
  *v283 = 0;
  {
    v485 = operator new();
    *(_QWORD *)(v485 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v485 + 24) = "GeoGL";
    *(_OWORD *)(v485 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v485 = &off_1E42B5668;
    *(_QWORD *)(v485 + 8) = "GeoGL";
    *(_OWORD *)(v485 + 72) = 0u;
    *(_OWORD *)(v485 + 88) = 0u;
    *(_OWORD *)(v485 + 104) = 0u;
    *(_OWORD *)(v485 + 120) = 0u;
    *(_OWORD *)(v485 + 136) = 0u;
    *(_OWORD *)(v485 + 152) = 0u;
    *(_OWORD *)(v485 + 168) = 0u;
    *(_OWORD *)(v485 + 184) = 0u;
    *(_OWORD *)(v485 + 200) = 0u;
    *(_OWORD *)(v485 + 216) = 0u;
    *(_OWORD *)(v485 + 232) = 0u;
    *(_QWORD *)(v485 + 248) = 0;
    *(_OWORD *)(v485 + 56) = 0u;
    v486 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v485 + 56), 0);
    if ((_DWORD)v486)
      geo::read_write_lock::logFailure(v486, (uint64_t)"initialization", v487);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v485 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v485 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v485;
  }
  v285 = ggl::Allocator::instance(void)::alloc;
  v283[4] = 0;
  v283[3] = v285;
  v283[5] = 0;
  v283[6] = 0;
  {
    v489 = operator new();
    *(_QWORD *)(v489 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v489 + 24) = "GeoGL";
    *(_OWORD *)(v489 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v489 = &off_1E42B5668;
    *(_QWORD *)(v489 + 8) = "GeoGL";
    *(_OWORD *)(v489 + 72) = 0u;
    *(_OWORD *)(v489 + 88) = 0u;
    *(_OWORD *)(v489 + 104) = 0u;
    *(_OWORD *)(v489 + 120) = 0u;
    *(_OWORD *)(v489 + 136) = 0u;
    *(_OWORD *)(v489 + 152) = 0u;
    *(_OWORD *)(v489 + 168) = 0u;
    *(_OWORD *)(v489 + 184) = 0u;
    *(_OWORD *)(v489 + 200) = 0u;
    *(_OWORD *)(v489 + 216) = 0u;
    *(_OWORD *)(v489 + 232) = 0u;
    *(_QWORD *)(v489 + 248) = 0;
    *(_OWORD *)(v489 + 56) = 0u;
    v490 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v489 + 56), 0);
    if ((_DWORD)v490)
      geo::read_write_lock::logFailure(v490, (uint64_t)"initialization", v491);
    v492 = malloc_create_zone(0, 0);
    *(_QWORD *)(v489 + 48) = v492;
    malloc_set_zone_name(v492, "GeoGL");
    *(_QWORD *)(v489 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v489;
  }
  v283[7] = ggl::Allocator::instance(void)::alloc;
  v286 = (uint64_t)v541;
  if (!v541)
    goto LABEL_84;
  if (v541 != v540)
  {
    v286 = (*(uint64_t (**)(void))(*v541 + 16))();
LABEL_84:
    v283[11] = v286;
    goto LABEL_86;
  }
  v283[11] = (uint64_t)(v283 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v540[0] + 24))(v540, v283 + 8);
LABEL_86:
  v287 = (uint64_t)v539;
  if (!v539)
  {
LABEL_89:
    v283[15] = v287;
    goto LABEL_91;
  }
  if (v539 != v538)
  {
    v287 = (*(uint64_t (**)(void))(*v539 + 16))();
    goto LABEL_89;
  }
  v283[15] = (uint64_t)(v283 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v538[0] + 24))((uint64_t)v538, v283 + 12);
LABEL_91:
  v283[16] = 8000;
  v288 = *v283;
  if ((unint64_t)(v283[2] - *v283) >> 6 > 0x7C)
    goto LABEL_104;
  v289 = v283[1];
  v290 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283[3] + 16))(v283[3], 8000, 8);
  v291 = v289 - v288;
  v292 = v290 + ((v289 - v288) & 0xFFFFFFFFFFFFFFF8);
  v294 = *v283;
  v293 = v283[1];
  v295 = v293 - *v283;
  if (v293 == *v283)
  {
    v297 = v290 + ((v289 - v288) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_102;
  }
  v296 = v295 - 8;
  if ((unint64_t)(v295 - 8) >= 0x58)
  {
    v297 = v290 + ((v289 - v288) & 0xFFFFFFFFFFFFFFF8);
    if (v293 - (v291 & 0xFFFFFFFFFFFFFFF8) - v290 >= 0x20)
    {
      v298 = v291 >> 3;
      v299 = (v296 >> 3) + 1;
      v300 = (_OWORD *)(v290 + 8 * v298 - 16);
      v301 = (__int128 *)(v293 - 16);
      v302 = v299 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v303 = *v301;
        *(v300 - 1) = *(v301 - 1);
        *v300 = v303;
        v300 -= 2;
        v301 -= 2;
        v302 -= 4;
      }
      while (v302);
      v297 = v292 - 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
      v293 -= 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
      if (v299 == (v299 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_101;
    }
  }
  else
  {
    v297 = v290 + ((v289 - v288) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v304 = *(_QWORD *)(v293 - 8);
    v293 -= 8;
    *(_QWORD *)(v297 - 8) = v304;
    v297 -= 8;
  }
  while (v293 != v294);
LABEL_101:
  v293 = *v283;
LABEL_102:
  *v283 = v297;
  v283[1] = v292;
  v305 = v283[2];
  v283[2] = v290 + 8000;
  if (v293)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283[3] + 40))(v283[3], v293, v305 - v293);
LABEL_104:
  v306 = v283[4];
  if ((unint64_t)(v283[6] - v306) >> 6 > 0x7C)
    goto LABEL_117;
  v307 = v283[5];
  v308 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283[7] + 16))(v283[7], 8000, 8);
  v309 = v307 - v306;
  v310 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
  v312 = v283[4];
  v311 = v283[5];
  v313 = v311 - v312;
  if (v311 == v312)
  {
    v315 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_115;
  }
  v314 = v313 - 8;
  if ((unint64_t)(v313 - 8) >= 0x58)
  {
    v315 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
    if (v311 - (v309 & 0xFFFFFFFFFFFFFFF8) - v308 >= 0x20)
    {
      v316 = v309 >> 3;
      v317 = (v314 >> 3) + 1;
      v318 = (_OWORD *)(v308 + 8 * v316 - 16);
      v319 = (__int128 *)(v311 - 16);
      v320 = v317 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v321 = *v319;
        *(v318 - 1) = *(v319 - 1);
        *v318 = v321;
        v318 -= 2;
        v319 -= 2;
        v320 -= 4;
      }
      while (v320);
      v315 = v310 - 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
      v311 -= 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
      if (v317 == (v317 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_114;
    }
  }
  else
  {
    v315 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v322 = *(_QWORD *)(v311 - 8);
    v311 -= 8;
    *(_QWORD *)(v315 - 8) = v322;
    v315 -= 8;
  }
  while (v311 != v312);
LABEL_114:
  v311 = v283[4];
LABEL_115:
  v283[4] = v315;
  v283[5] = v310;
  v323 = v283[6];
  v283[6] = v308 + 8000;
  if (v311)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v283[7] + 40))(v283[7], v311, v323 - v311);
LABEL_117:
  v324 = *v11;
  *v11 = (uint64_t)v283;
  if (v324)
  {
    v325 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v324);
    MEMORY[0x1A1AF4E00](v325, 0x10A0C40D234DDC7);
  }
  v326 = v539;
  if (v539 == v538)
  {
    v327 = 4;
    v326 = v538;
  }
  else
  {
    if (!v539)
      goto LABEL_124;
    v327 = 5;
  }
  (*(void (**)(void))(*v326 + 8 * v327))();
LABEL_124:
  v328 = v541;
  if (v541 == v540)
  {
    v329 = 4;
    v328 = v540;
    goto LABEL_128;
  }
  if (v541)
  {
    v329 = 5;
LABEL_128:
    (*(void (**)(void))(*v328 + 8 * v329))();
  }
  v330 = (uint64_t *)operator new();
  v536[0] = &off_1E42D0940;
  v536[1] = (char *)this + 64;
  v537 = v536;
  v534[0] = &off_1E42D0988;
  v535 = v534;
  v330[1] = 0;
  v330[2] = 0;
  *v330 = 0;
  {
    v493 = operator new();
    *(_QWORD *)(v493 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v493 + 24) = "GeoGL";
    *(_OWORD *)(v493 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v493 = &off_1E42B5668;
    *(_QWORD *)(v493 + 8) = "GeoGL";
    *(_OWORD *)(v493 + 72) = 0u;
    *(_OWORD *)(v493 + 88) = 0u;
    *(_OWORD *)(v493 + 104) = 0u;
    *(_OWORD *)(v493 + 120) = 0u;
    *(_OWORD *)(v493 + 136) = 0u;
    *(_OWORD *)(v493 + 152) = 0u;
    *(_OWORD *)(v493 + 168) = 0u;
    *(_OWORD *)(v493 + 184) = 0u;
    *(_OWORD *)(v493 + 200) = 0u;
    *(_OWORD *)(v493 + 216) = 0u;
    *(_OWORD *)(v493 + 232) = 0u;
    *(_QWORD *)(v493 + 248) = 0;
    *(_OWORD *)(v493 + 56) = 0u;
    v494 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v493 + 56), 0);
    if ((_DWORD)v494)
      geo::read_write_lock::logFailure(v494, (uint64_t)"initialization", v495);
    v496 = malloc_create_zone(0, 0);
    *(_QWORD *)(v493 + 48) = v496;
    malloc_set_zone_name(v496, "GeoGL");
    *(_QWORD *)(v493 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v493;
  }
  v332 = ggl::Allocator::instance(void)::alloc;
  v330[4] = 0;
  v330[3] = v332;
  v330[5] = 0;
  v330[6] = 0;
  {
    v497 = operator new();
    *(_QWORD *)(v497 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v497 + 24) = "GeoGL";
    *(_OWORD *)(v497 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v497 = &off_1E42B5668;
    *(_QWORD *)(v497 + 8) = "GeoGL";
    *(_OWORD *)(v497 + 72) = 0u;
    *(_OWORD *)(v497 + 88) = 0u;
    *(_OWORD *)(v497 + 104) = 0u;
    *(_OWORD *)(v497 + 120) = 0u;
    *(_OWORD *)(v497 + 136) = 0u;
    *(_OWORD *)(v497 + 152) = 0u;
    *(_OWORD *)(v497 + 168) = 0u;
    *(_OWORD *)(v497 + 184) = 0u;
    *(_OWORD *)(v497 + 200) = 0u;
    *(_OWORD *)(v497 + 216) = 0u;
    *(_OWORD *)(v497 + 232) = 0u;
    *(_QWORD *)(v497 + 248) = 0;
    *(_OWORD *)(v497 + 56) = 0u;
    v498 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v497 + 56), 0);
    if ((_DWORD)v498)
      geo::read_write_lock::logFailure(v498, (uint64_t)"initialization", v499);
    v500 = malloc_create_zone(0, 0);
    *(_QWORD *)(v497 + 48) = v500;
    malloc_set_zone_name(v500, "GeoGL");
    *(_QWORD *)(v497 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v497;
  }
  v330[7] = ggl::Allocator::instance(void)::alloc;
  v333 = (uint64_t)v537;
  if (!v537)
    goto LABEL_134;
  if (v537 != v536)
  {
    v333 = (*(uint64_t (**)(void))(*v537 + 16))();
LABEL_134:
    v330[11] = v333;
    goto LABEL_136;
  }
  v330[11] = (uint64_t)(v330 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v536[0] + 24))(v536, v330 + 8);
LABEL_136:
  v334 = (uint64_t)v535;
  if (!v535)
  {
LABEL_139:
    v330[15] = v334;
    goto LABEL_141;
  }
  if (v535 != v534)
  {
    v334 = (*(uint64_t (**)(void))(*v535 + 16))();
    goto LABEL_139;
  }
  v330[15] = (uint64_t)(v330 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v534[0] + 24))((uint64_t)v534, v330 + 12);
LABEL_141:
  v330[16] = 8000;
  v335 = *v330;
  if ((unint64_t)(v330[2] - *v330) >> 6 > 0x7C)
    goto LABEL_154;
  v336 = v330[1];
  v337 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v330[3] + 16))(v330[3], 8000, 8);
  v338 = v336 - v335;
  v339 = v337 + ((v336 - v335) & 0xFFFFFFFFFFFFFFF8);
  v341 = *v330;
  v340 = v330[1];
  v342 = v340 - *v330;
  if (v340 == *v330)
  {
    v344 = v337 + ((v336 - v335) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_152;
  }
  v343 = v342 - 8;
  if ((unint64_t)(v342 - 8) >= 0x58)
  {
    v344 = v337 + ((v336 - v335) & 0xFFFFFFFFFFFFFFF8);
    if (v340 - (v338 & 0xFFFFFFFFFFFFFFF8) - v337 >= 0x20)
    {
      v345 = v338 >> 3;
      v346 = (v343 >> 3) + 1;
      v347 = (_OWORD *)(v337 + 8 * v345 - 16);
      v348 = (__int128 *)(v340 - 16);
      v349 = v346 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v350 = *v348;
        *(v347 - 1) = *(v348 - 1);
        *v347 = v350;
        v347 -= 2;
        v348 -= 2;
        v349 -= 4;
      }
      while (v349);
      v344 = v339 - 8 * (v346 & 0x3FFFFFFFFFFFFFFCLL);
      v340 -= 8 * (v346 & 0x3FFFFFFFFFFFFFFCLL);
      if (v346 == (v346 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_151;
    }
  }
  else
  {
    v344 = v337 + ((v336 - v335) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v351 = *(_QWORD *)(v340 - 8);
    v340 -= 8;
    *(_QWORD *)(v344 - 8) = v351;
    v344 -= 8;
  }
  while (v340 != v341);
LABEL_151:
  v340 = *v330;
LABEL_152:
  *v330 = v344;
  v330[1] = v339;
  v352 = v330[2];
  v330[2] = v337 + 8000;
  if (v340)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v330[3] + 40))(v330[3], v340, v352 - v340);
LABEL_154:
  v353 = v330[4];
  if ((unint64_t)(v330[6] - v353) >> 6 > 0x7C)
    goto LABEL_167;
  v354 = v330[5];
  v355 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v330[7] + 16))(v330[7], 8000, 8);
  v356 = v354 - v353;
  v357 = v355 + ((v354 - v353) & 0xFFFFFFFFFFFFFFF8);
  v359 = v330[4];
  v358 = v330[5];
  v360 = v358 - v359;
  if (v358 == v359)
  {
    v362 = v355 + ((v354 - v353) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_165;
  }
  v361 = v360 - 8;
  if ((unint64_t)(v360 - 8) >= 0x58)
  {
    v362 = v355 + ((v354 - v353) & 0xFFFFFFFFFFFFFFF8);
    if (v358 - (v356 & 0xFFFFFFFFFFFFFFF8) - v355 >= 0x20)
    {
      v363 = v356 >> 3;
      v364 = (v361 >> 3) + 1;
      v365 = (_OWORD *)(v355 + 8 * v363 - 16);
      v366 = (__int128 *)(v358 - 16);
      v367 = v364 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v368 = *v366;
        *(v365 - 1) = *(v366 - 1);
        *v365 = v368;
        v365 -= 2;
        v366 -= 2;
        v367 -= 4;
      }
      while (v367);
      v362 = v357 - 8 * (v364 & 0x3FFFFFFFFFFFFFFCLL);
      v358 -= 8 * (v364 & 0x3FFFFFFFFFFFFFFCLL);
      if (v364 == (v364 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_164;
    }
  }
  else
  {
    v362 = v355 + ((v354 - v353) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v369 = *(_QWORD *)(v358 - 8);
    v358 -= 8;
    *(_QWORD *)(v362 - 8) = v369;
    v362 -= 8;
  }
  while (v358 != v359);
LABEL_164:
  v358 = v330[4];
LABEL_165:
  v330[4] = v362;
  v330[5] = v357;
  v370 = v330[6];
  v330[6] = v355 + 8000;
  if (v358)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v330[7] + 40))(v330[7], v358, v370 - v358);
LABEL_167:
  v371 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v330;
  if (v371)
  {
    v372 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v371);
    MEMORY[0x1A1AF4E00](v372, 0x10A0C40D234DDC7);
  }
  v373 = v535;
  if (v535 == v534)
  {
    v374 = 4;
    v373 = v534;
  }
  else
  {
    if (!v535)
      goto LABEL_174;
    v374 = 5;
  }
  (*(void (**)(void))(*v373 + 8 * v374))();
LABEL_174:
  v375 = v537;
  if (v537 == v536)
  {
    v376 = 4;
    v375 = v536;
    goto LABEL_178;
  }
  if (v537)
  {
    v376 = 5;
LABEL_178:
    (*(void (**)(void))(*v375 + 8 * v376))();
  }
  v377 = (uint64_t *)operator new();
  v532[0] = &off_1E42D09D0;
  v532[1] = (char *)this + 64;
  v533 = v532;
  v530[0] = &off_1E42D0A18;
  v531 = v530;
  v377[1] = 0;
  v377[2] = 0;
  *v377 = 0;
  {
    v501 = operator new();
    *(_QWORD *)(v501 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v501 + 24) = "GeoGL";
    *(_OWORD *)(v501 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v501 = &off_1E42B5668;
    *(_QWORD *)(v501 + 8) = "GeoGL";
    *(_OWORD *)(v501 + 72) = 0u;
    *(_OWORD *)(v501 + 88) = 0u;
    *(_OWORD *)(v501 + 104) = 0u;
    *(_OWORD *)(v501 + 120) = 0u;
    *(_OWORD *)(v501 + 136) = 0u;
    *(_OWORD *)(v501 + 152) = 0u;
    *(_OWORD *)(v501 + 168) = 0u;
    *(_OWORD *)(v501 + 184) = 0u;
    *(_OWORD *)(v501 + 200) = 0u;
    *(_OWORD *)(v501 + 216) = 0u;
    *(_OWORD *)(v501 + 232) = 0u;
    *(_QWORD *)(v501 + 248) = 0;
    *(_OWORD *)(v501 + 56) = 0u;
    v502 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v501 + 56), 0);
    if ((_DWORD)v502)
      geo::read_write_lock::logFailure(v502, (uint64_t)"initialization", v503);
    v504 = malloc_create_zone(0, 0);
    *(_QWORD *)(v501 + 48) = v504;
    malloc_set_zone_name(v504, "GeoGL");
    *(_QWORD *)(v501 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v501;
  }
  v379 = ggl::Allocator::instance(void)::alloc;
  v377[4] = 0;
  v377[3] = v379;
  v377[5] = 0;
  v377[6] = 0;
  {
    v505 = operator new();
    *(_QWORD *)(v505 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v505 + 24) = "GeoGL";
    *(_OWORD *)(v505 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v505 = &off_1E42B5668;
    *(_QWORD *)(v505 + 8) = "GeoGL";
    *(_OWORD *)(v505 + 72) = 0u;
    *(_OWORD *)(v505 + 88) = 0u;
    *(_OWORD *)(v505 + 104) = 0u;
    *(_OWORD *)(v505 + 120) = 0u;
    *(_OWORD *)(v505 + 136) = 0u;
    *(_OWORD *)(v505 + 152) = 0u;
    *(_OWORD *)(v505 + 168) = 0u;
    *(_OWORD *)(v505 + 184) = 0u;
    *(_OWORD *)(v505 + 200) = 0u;
    *(_OWORD *)(v505 + 216) = 0u;
    *(_OWORD *)(v505 + 232) = 0u;
    *(_QWORD *)(v505 + 248) = 0;
    *(_OWORD *)(v505 + 56) = 0u;
    v506 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v505 + 56), 0);
    if ((_DWORD)v506)
      geo::read_write_lock::logFailure(v506, (uint64_t)"initialization", v507);
    v508 = malloc_create_zone(0, 0);
    *(_QWORD *)(v505 + 48) = v508;
    malloc_set_zone_name(v508, "GeoGL");
    *(_QWORD *)(v505 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v505;
  }
  v377[7] = ggl::Allocator::instance(void)::alloc;
  v380 = (uint64_t)v533;
  if (!v533)
    goto LABEL_184;
  if (v533 != v532)
  {
    v380 = (*(uint64_t (**)(void))(*v533 + 16))();
LABEL_184:
    v377[11] = v380;
    goto LABEL_186;
  }
  v377[11] = (uint64_t)(v377 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v532[0] + 24))((uint64_t)v532, v377 + 8);
LABEL_186:
  v381 = (uint64_t)v531;
  if (!v531)
  {
LABEL_189:
    v377[15] = v381;
    goto LABEL_191;
  }
  if (v531 != v530)
  {
    v381 = (*(uint64_t (**)(void))(*v531 + 16))();
    goto LABEL_189;
  }
  v377[15] = (uint64_t)(v377 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v530[0] + 24))((uint64_t)v530, v377 + 12);
LABEL_191:
  v377[16] = 8000;
  v382 = *v377;
  if ((unint64_t)(v377[2] - *v377) >> 6 > 0x7C)
    goto LABEL_204;
  v383 = v377[1];
  v384 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v377[3] + 16))(v377[3], 8000, 8);
  v385 = v383 - v382;
  v386 = v384 + ((v383 - v382) & 0xFFFFFFFFFFFFFFF8);
  v388 = *v377;
  v387 = v377[1];
  v389 = v387 - *v377;
  if (v387 == *v377)
  {
    v391 = v384 + ((v383 - v382) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_202;
  }
  v390 = v389 - 8;
  if ((unint64_t)(v389 - 8) >= 0x58)
  {
    v391 = v384 + ((v383 - v382) & 0xFFFFFFFFFFFFFFF8);
    if (v387 - (v385 & 0xFFFFFFFFFFFFFFF8) - v384 >= 0x20)
    {
      v392 = v385 >> 3;
      v393 = (v390 >> 3) + 1;
      v394 = (_OWORD *)(v384 + 8 * v392 - 16);
      v395 = (__int128 *)(v387 - 16);
      v396 = v393 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v397 = *v395;
        *(v394 - 1) = *(v395 - 1);
        *v394 = v397;
        v394 -= 2;
        v395 -= 2;
        v396 -= 4;
      }
      while (v396);
      v391 = v386 - 8 * (v393 & 0x3FFFFFFFFFFFFFFCLL);
      v387 -= 8 * (v393 & 0x3FFFFFFFFFFFFFFCLL);
      if (v393 == (v393 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_201;
    }
  }
  else
  {
    v391 = v384 + ((v383 - v382) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v398 = *(_QWORD *)(v387 - 8);
    v387 -= 8;
    *(_QWORD *)(v391 - 8) = v398;
    v391 -= 8;
  }
  while (v387 != v388);
LABEL_201:
  v387 = *v377;
LABEL_202:
  *v377 = v391;
  v377[1] = v386;
  v399 = v377[2];
  v377[2] = v384 + 8000;
  if (v387)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v377[3] + 40))(v377[3], v387, v399 - v387);
LABEL_204:
  v400 = v377[4];
  if ((unint64_t)(v377[6] - v400) >> 6 > 0x7C)
    goto LABEL_217;
  v401 = v377[5];
  v402 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v377[7] + 16))(v377[7], 8000, 8);
  v403 = v401 - v400;
  v404 = v402 + ((v401 - v400) & 0xFFFFFFFFFFFFFFF8);
  v406 = v377[4];
  v405 = v377[5];
  v407 = v405 - v406;
  if (v405 == v406)
  {
    v409 = v402 + ((v401 - v400) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_215;
  }
  v408 = v407 - 8;
  if ((unint64_t)(v407 - 8) >= 0x58)
  {
    v409 = v402 + ((v401 - v400) & 0xFFFFFFFFFFFFFFF8);
    if (v405 - (v403 & 0xFFFFFFFFFFFFFFF8) - v402 >= 0x20)
    {
      v410 = v403 >> 3;
      v411 = (v408 >> 3) + 1;
      v412 = (_OWORD *)(v402 + 8 * v410 - 16);
      v413 = (__int128 *)(v405 - 16);
      v414 = v411 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v415 = *v413;
        *(v412 - 1) = *(v413 - 1);
        *v412 = v415;
        v412 -= 2;
        v413 -= 2;
        v414 -= 4;
      }
      while (v414);
      v409 = v404 - 8 * (v411 & 0x3FFFFFFFFFFFFFFCLL);
      v405 -= 8 * (v411 & 0x3FFFFFFFFFFFFFFCLL);
      if (v411 == (v411 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_214;
    }
  }
  else
  {
    v409 = v402 + ((v401 - v400) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v416 = *(_QWORD *)(v405 - 8);
    v405 -= 8;
    *(_QWORD *)(v409 - 8) = v416;
    v409 -= 8;
  }
  while (v405 != v406);
LABEL_214:
  v405 = v377[4];
LABEL_215:
  v377[4] = v409;
  v377[5] = v404;
  v417 = v377[6];
  v377[6] = v402 + 8000;
  if (v405)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v377[7] + 40))(v377[7], v405, v417 - v405);
LABEL_217:
  v418 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v377;
  if (v418)
  {
    v419 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v418);
    MEMORY[0x1A1AF4E00](v419, 0x10A0C40D234DDC7);
  }
  v420 = v531;
  if (v531 == v530)
  {
    v421 = 4;
    v420 = v530;
  }
  else
  {
    if (!v531)
      goto LABEL_224;
    v421 = 5;
  }
  (*(void (**)(void))(*v420 + 8 * v421))();
LABEL_224:
  v422 = v533;
  if (v533 == v532)
  {
    v423 = 4;
    v422 = v532;
    goto LABEL_228;
  }
  if (v533)
  {
    v423 = 5;
LABEL_228:
    (*(void (**)(void))(*v422 + 8 * v423))();
  }
  IcoSphereCached = md::ARMeshRenderResources::generateIcoSphereCached((md::ARMeshRenderResources *)&v524, 1u);
  v425 = (std::__shared_weak_count *)*((_QWORD *)&v524 + 1);
  if (*((_QWORD *)&v524 + 1))
  {
    v426 = (unint64_t *)(*((_QWORD *)&v524 + 1) + 8);
    do
      v427 = __ldaxr(v426);
    while (__stlxr(v427 - 1, v426));
    if (!v427)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v425->__on_zero_shared)(v425, IcoSphereCached);
      std::__shared_weak_count::__release_weak(v425);
    }
  }

  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 1065353216;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_DWORD *)this + 106) = 1065353216;
  v428 = (uint64_t *)((char *)this + 432);
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = v521;
  -[VKSharedResources textureManager](v523, "textureManager");
  v429 = v524;
  *((_QWORD *)this + 56) = *(_QWORD *)v524;
  v430 = *(_QWORD *)(v429 + 8);
  *((_QWORD *)this + 57) = v430;
  if (v430)
  {
    v431 = (unint64_t *)(v430 + 8);
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
  }
  v433 = (std::__shared_weak_count *)*((_QWORD *)&v524 + 1);
  if (*((_QWORD *)&v524 + 1))
  {
    v434 = (unint64_t *)(*((_QWORD *)&v524 + 1) + 8);
    do
      v435 = __ldaxr(v434);
    while (__stlxr(v435 - 1, v434));
    if (!v435)
    {
      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
      std::__shared_weak_count::__release_weak(v433);
    }
  }
  -[VKSharedResources textureManager](v523, "textureManager");
  v436 = v524;
  *((_QWORD *)this + 58) = *(_QWORD *)(v524 + 48);
  v437 = *(_QWORD *)(v436 + 56);
  *((_QWORD *)this + 59) = v437;
  if (v437)
  {
    v438 = (unint64_t *)(v437 + 8);
    do
      v439 = __ldxr(v438);
    while (__stxr(v439 + 1, v438));
  }
  v440 = (std::__shared_weak_count *)*((_QWORD *)&v524 + 1);
  if (*((_QWORD *)&v524 + 1))
  {
    v441 = (unint64_t *)(*((_QWORD *)&v524 + 1) + 8);
    do
      v442 = __ldaxr(v441);
    while (__stlxr(v442 - 1, v441));
    if (!v442)
    {
      ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
      std::__shared_weak_count::__release_weak(v440);
    }
  }
  v443 = (uint64_t *)((char *)this + 480);
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = -[VKSharedResources device](v523, "device");
  v444 = (unint64_t *)operator new();
  v528[0] = &off_1E42CE420;
  v529 = v528;
  v526[0] = &off_1E42D60C8;
  v527 = v526;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v444, (uint64_t)v528, (uint64_t)v526);
  v445 = *v428;
  *v428 = (uint64_t)v444;
  if (v445)
  {
    v446 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v445);
    MEMORY[0x1A1AF4E00](v446, 0x10A0C40D234DDC7);
  }
  v447 = v527;
  if (v527 == v526)
  {
    v448 = 4;
    v447 = v526;
  }
  else
  {
    if (!v527)
      goto LABEL_257;
    v448 = 5;
  }
  (*(void (**)(void))(*v447 + 8 * v448))();
LABEL_257:
  v449 = v529;
  if (v529 == v528)
  {
    v450 = 4;
    v449 = v528;
  }
  else
  {
    if (!v529)
      goto LABEL_262;
    v450 = 5;
  }
  (*(void (**)(void))(*v449 + 8 * v450))();
LABEL_262:
  v451 = *((_QWORD *)this + 9);
  v452 = (_QWORD *)operator new();
  *v452 = &off_1E429BF58;
  v452[1] = &unk_1E429BFD8;
  v452[2] = &unk_1E429BFF0;
  v452[3] = &unk_1E429C008;
  v452[4] = &unk_1E429C020;
  v452[5] = &unk_1E429C040;
  v452[6] = &unk_1E429C060;
  v452[7] = &unk_1E429C078;
  v452[8] = &unk_1E429C098;
  v452[9] = v451;
  v453 = *v443;
  *v443 = (uint64_t)v452;
  if (v453)
    (*(void (**)(uint64_t))(*(_QWORD *)v453 + 16))(v453);
  v454 = *((_QWORD *)this + 10);
  v455 = (_QWORD *)operator new();
  *v455 = &off_1E429D6B0;
  v455[1] = &unk_1E429D6E8;
  v455[2] = &unk_1E429D700;
  v455[3] = v454;
  v456 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = v455;
  if (v456)
    (*(void (**)(uint64_t))(*(_QWORD *)v456 + 16))(v456);
  v457 = *v11;
  v458 = operator new();
  *(_QWORD *)v458 = &off_1E4297A80;
  *(_QWORD *)(v458 + 8) = &unk_1E4297AB8;
  *(_QWORD *)(v458 + 16) = &unk_1E4297AD0;
  *(_QWORD *)(v458 + 24) = v457;
  *(_WORD *)(v458 + 32) = 1280;
  v459 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = v458;
  if (v459)
    (*(void (**)(uint64_t))(*(_QWORD *)v459 + 16))(v459);
  v460 = *v443;
  *(_QWORD *)&v524 = 0x5BD3262791F15BBDLL;
  *((_QWORD *)&v524 + 1) = "arComponents::StandardPipeline]";
  *(_QWORD *)&v525 = 30;
  v461 = std::__hash_table<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>((uint64_t)this + 352, 0x5BD3262791F15BBDuLL, (uint64_t)&v524);
  v462 = v460 + 48;
  if (!v460)
    v462 = 0;
  v461[5] = v462;
  v463 = *((_QWORD *)this + 61);
  *(_QWORD *)&v524 = 0x2E1ED5CD904AAD01;
  *((_QWORD *)&v524 + 1) = "arComponents::OcclusionPipeline]";
  *(_QWORD *)&v525 = 31;
  v464 = std::__hash_table<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>((uint64_t)this + 352, 0x2E1ED5CD904AAD01uLL, (uint64_t)&v524);
  v465 = v463 + 16;
  if (!v463)
    v465 = 0;
  v464[5] = v465;
  v466 = *((_QWORD *)this + 62);
  *(_QWORD *)&v524 = 0xA3C8162527B8C964;
  *((_QWORD *)&v524 + 1) = "arComponents::ShadowPipeline]";
  *(_QWORD *)&v525 = 28;
  v467 = std::__hash_table<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>((uint64_t)this + 352, 0xA3C8162527B8C964, (uint64_t)&v524);
  v468 = v466 + 16;
  if (!v466)
    v468 = 0;
  v467[5] = v468;

  return this;
}

void sub_19F512F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;

  v22 = (_QWORD *)v20[11];
  if (v22 == v17)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
    {
      v24 = *v19;
      if (*v19)
        goto LABEL_16;
      goto LABEL_5;
    }
    v23 = 5;
    v17 = (_QWORD *)v20[11];
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v23))(v17);
  v24 = *v19;
  if (*v19)
  {
LABEL_16:
    v20[5] = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[7] + 40))(v20[7], v24, v20[6] - v24);
    v25 = *v20;
    if (!*v20)
    {
LABEL_7:
      v26 = (unint64_t *)STACK[0x2D8];
      if ((unint64_t *)STACK[0x2D8] == &STACK[0x2C0])
      {
        v27 = 4;
        v26 = &STACK[0x2C0];
      }
      else
      {
        if (!v26)
          goto LABEL_12;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_12:
      v28 = (unint64_t *)STACK[0x2F8];
      if ((unint64_t *)STACK[0x2F8] == &STACK[0x2E0])
      {
        v29 = 4;
        v28 = &STACK[0x2E0];
      }
      else
      {
        if (!v28)
          goto LABEL_21;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v20, 0x10A0C40D234DDC7);
      v16[17] = &off_1E42B8A10;
      v30 = v16[18];
      if (v30)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, v16[20]);
        v16[20] = 3735927469;
      }
      v31 = (std::__shared_weak_count *)v16[19];
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)v16[16];
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)v16[14];
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v16[12];
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v16[10];
      v16[10] = 0;
      if (v43)
      {
        v44 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
        MEMORY[0x1A1AF4E00](v44, 0x10A0C40D234DDC7);
      }
      v45 = v16[9];
      v16[9] = 0;
      if (v45)
      {
        v46 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v45);
        MEMORY[0x1A1AF4E00](v46, 0x10A0C40D234DDC7);
      }
      v47 = *v18;
      *v18 = 0;
      if (v47)
      {
        v48 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v47);
        MEMORY[0x1A1AF4E00](v48, 0x10A0C40D234DDC7);
      }

      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a9);
      *v16 = off_1E428C468;
      v49 = (void *)v16[1];
      if (v49)
      {
        v16[2] = v49;
        operator delete(v49);
      }

      _Unwind_Resume(a1);
    }
LABEL_6:
    v20[1] = v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[3] + 40))(v20[3], v25, v20[2] - v25);
    goto LABEL_7;
  }
LABEL_5:
  v25 = *v20;
  if (!*v20)
    goto LABEL_7;
  goto LABEL_6;
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,md::pipelineECS::ImplementsSetup *>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(_QWORD *)(a3 + 16);
  v10[5] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F513974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CE420;
  return result;
}

void std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CE420;
}

int64x2_t std::__function::__func<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0,std::allocator<md::ARMeshRenderLayer::ARMeshRenderLayer(md::CartographicRenderer &,VKSharedResources *,gdc::Registry *)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "3D Object";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>::~DeviceDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::InstanceData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DADE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::InstanceData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DADE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::InstanceData>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19F513D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F513F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke_1631()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;

}

void altitude::HeightFallbackRequest::~HeightFallbackRequest(altitude::HeightFallbackRequest *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5DC0;
  karo::SizedArray<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,8>::~SizedArray((_QWORD *)this + 38);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5DC0;
  karo::SizedArray<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,8>::~SizedArray((_QWORD *)this + 38);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::HeightFallbackRequest::jobStep(altitude::HeightFallbackRequest *this)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int i;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  BOOL v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *__p;
  char *v70;
  uint64_t v71;
  const void *v72[2];
  char v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  void *v78[2];
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int16 v85;
  int v86;
  int v87;
  char v88;
  QuadTile v89;
  char *v90;
  char *v91;
  unint64_t v92;

  *((double *)this + 34) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v2 = *((_QWORD *)this + 38);
  if (v2)
  {
    v3 = 0;
    for (i = 0; i < v2; v3 = ++i)
    {
      v5 = *((_QWORD *)this + 55);
      v6 = (char *)(v5 + 16 * v3);
      v7 = (uint64_t *)((char *)this + 16 * v3 + 312);
      if (v2 <= 8)
        v6 = (char *)this + 16 * v3 + 312;
      v8 = *(_QWORD *)v6;
      v9 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v10 = *(std::__shared_weak_count **)(v8 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        if (!v9)
          goto LABEL_33;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v2 = *((_QWORD *)this + 38);
        v5 = *((_QWORD *)this + 55);
      }
      else if (!v9)
      {
        goto LABEL_3;
      }
      v14 = (uint64_t *)(v5 + 16 * v3);
      if (v2 <= 8)
        v15 = v7;
      else
        v15 = v14;
      v16 = v91;
      if ((unint64_t)v91 < v92)
      {
        *(_QWORD *)v91 = 0;
        v16[1] = 0;
        v17 = *v15;
        v18 = v15[1];
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          v21 = (std::__shared_weak_count *)v16[1];
          *v16 = v17;
          v16[1] = v18;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        else
        {
          *v16 = v17;
          v16[1] = 0;
        }
        v91 = (char *)(v16 + 2);
        if (!v10)
          goto LABEL_3;
LABEL_29:
        v24 = (unint64_t *)&v10->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_33:
        v26 = (unint64_t *)&v10->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        goto LABEL_3;
      }
      v91 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(&v90, *v15, v15[1]);
      if (v10)
        goto LABEL_29;
LABEL_3:
      v2 = *((_QWORD *)this + 38);
    }
  }
  v28 = *((_DWORD *)this + 52);
  v29 = v28 - *((_DWORD *)this + 56);
  if (v29 <= 1)
    v29 = 1;
  v30 = 0x14 / (v29 + 1);
  if (v30 <= 2)
    v31 = 2;
  else
    v31 = v30;
  if (v28 >= 0x1F)
    v32 = 31;
  else
    v32 = *((_DWORD *)this + 52);
  v33 = ~(-1 << v32) - *((_DWORD *)this + 53);
  v34 = *((_DWORD *)this + 54);
  v89._type = -1;
  v89._level = v28;
  v89._yIdx = v33;
  v89._xIdx = v34;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v35 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v35 & 2) == 0)
  {
    v36 = *((_QWORD *)this + 36);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v75 = v36;
      v76 = v37;
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    else
    {
      v75 = *((_QWORD *)this + 36);
      v76 = 0;
    }
    v79 = 0;
    *(_OWORD *)v78 = 0u;
    v77 = 0u;
    v80 = -1;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0x3FF0000000000000;
    v85 = 255;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    if (v37)
    {
      v42 = (unint64_t *)&v37->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v75, &v89, v31 + 1, 0, 0.0);
    v73 = 9;
    v71 = 0;
    strcpy((char *)v72, "/fallback");
    v44 = *((_QWORD *)this + 1);
    __p = 0;
    v70 = 0;
    altitude::HeightMeshBuilder::createGlobeElement((uint64_t *)&v74, (uint64_t)&v75, v72, v44, (uint64_t)&v90, (uint64_t **)&__p);
    v45 = v74;
    v74 = 0uLL;
    v46 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    *(_OWORD *)((char *)this + 248) = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (char *)__p;
    if (__p)
    {
      v53 = v70;
      if (v70 != __p)
      {
        do
        {
          v54 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v53 -= 16;
        }
        while (v53 != v52);
        v52 = (char *)__p;
      }
      operator delete(v52);
    }
    if (v73 < 0)
      operator delete((void *)v72[0]);
    *((double *)this + 35) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v57 = (*((_DWORD *)this + 40) & 2) == 0;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    *((_BYTE *)this + 188) = v57;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if (v78[0])
    {
      v78[1] = v78[0];
      operator delete(v78[0]);
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = v76;
    if (v76)
    {
      v62 = (unint64_t *)&v76->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  v64 = v90;
  if (v90)
  {
    v65 = v91;
    if (v91 != v90)
    {
      do
      {
        v66 = (std::__shared_weak_count *)*((_QWORD *)v65 - 1);
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v65 -= 16;
      }
      while (v65 != v64);
      v64 = v90;
    }
    operator delete(v64);
  }
}

uint64_t altitude::HeightFallbackRequest::succeeded(altitude::HeightFallbackRequest *this)
{
  return *((unsigned __int8 *)this + 188);
}

uint64_t altitude::HeightFallbackRequest::getHeightElement@<X0>(altitude::HeightFallbackRequest *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = (*(uint64_t (**)(altitude::HeightFallbackRequest *))(*(_QWORD *)this + 40))(this);
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 32);
    *a2 = *((_QWORD *)this + 31);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

char *std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v10 = a1[2] - v3;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v13 + 1) = a3;
    v3 = *a1;
    v4 = a1[1];
  }
  v16 = &v12[16 * v11];
  *(_QWORD *)v13 = a2;
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *a1 = v13;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    do
    {
      v19 = v13;
      *((_QWORD *)v13 - 2) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v13 -= 16;
      v20 = *((_QWORD *)v4 - 2);
      v21 = *((_QWORD *)v4 - 1);
      v4 -= 16;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v24 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        *((_QWORD *)v19 - 2) = v20;
        *((_QWORD *)v19 - 1) = v21;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
        *((_QWORD *)v19 - 2) = v20;
        *((_QWORD *)v19 - 1) = 0;
      }
    }
    while (v4 != v3);
    v3 = *a1;
    v27 = a1[1];
    *a1 = v13;
    a1[1] = v17;
    a1[2] = v16;
    while (v27 != v3)
    {
      v28 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v27 -= 16;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

_QWORD *karo::SizedArray<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,8>::~SizedArray(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v2 = a1[17];
  if (v2)
  {
    v3 = a1[18];
    v4 = (void *)a1[17];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[17];
    }
    a1[18] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[16];
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[14];
    if (!v11)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    v11 = (std::__shared_weak_count *)a1[14];
    if (!v11)
      goto LABEL_22;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  v14 = (std::__shared_weak_count *)a1[12];
  if (!v14)
    goto LABEL_26;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[10];
    if (!v17)
      goto LABEL_32;
  }
  else
  {
LABEL_26:
    v17 = (std::__shared_weak_count *)a1[10];
    if (!v17)
      goto LABEL_32;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_32:
  v20 = (std::__shared_weak_count *)a1[8];
  if (!v20)
    goto LABEL_36;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[6];
    if (!v23)
      goto LABEL_42;
  }
  else
  {
LABEL_36:
    v23 = (std::__shared_weak_count *)a1[6];
    if (!v23)
      goto LABEL_42;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_42:
  v26 = (std::__shared_weak_count *)a1[4];
  if (!v26)
    goto LABEL_46;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)a1[2];
    if (!v29)
      return a1;
  }
  else
  {
LABEL_46:
    v29 = (std::__shared_weak_count *)a1[2];
    if (!v29)
      return a1;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  return a1;
}

void md::WorldSpaceLabelPart::~WorldSpaceLabelPart(md::WorldSpaceLabelPart *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E42984E8;
  v2 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42984E8;
  v2 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v4 + 24) = "VectorKitLabels";
    *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v4 = &off_1E42B5668;
    *(_QWORD *)(v4 + 8) = "VectorKitLabels";
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_QWORD *)(v4 + 248) = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v4 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v4;
  }
  (*(void (**)(uint64_t, md::WorldSpaceLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, this, 648);
}

uint64_t md::WorldSpaceLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7)
{
  _QWORD *v8;
  _QWORD *v9;
  __n128 v10;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  int8x16_t v18;
  _QWORD *v19;
  int8x16_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  _DWORD *v26;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  __n128 v31;

  v8 = *(_QWORD **)(a1 + 576);
  v9 = *(_QWORD **)(a1 + 584);
  v10 = (__n128)xmmword_19FFB2E30;
  if (v8 == v9)
  {
    v15 = 37;
LABEL_11:
    v18 = (int8x16_t)v10;
    goto LABEL_12;
  }
  while (1)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)*v8 + 80))(*v8, a2, a3, a4, a5, a6, a7, v10);
    if ((_DWORD)v14 != 37)
      break;
    if (++v8 == v9)
    {
      v15 = 37;
      goto LABEL_7;
    }
  }
  v15 = v14;
LABEL_7:
  v10 = (__n128)xmmword_19FFB2E30;
  v16 = *(_QWORD ***)(a1 + 576);
  v17 = *(_QWORD ***)(a1 + 584);
  if (v16 == v17)
    goto LABEL_11;
  v10 = (__n128)xmmword_19FFB2E30;
  v18 = (int8x16_t)xmmword_19FFB2E30;
  do
  {
    v28 = v18;
    v30 = (int8x16_t)v10;
    v19 = *v16++;
    v20 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*v19 + 248))(v19);
    v21.i64[0] = v20->i64[0];
    v21.i64[1] = v28.i64[1];
    v22.i64[0] = v28.i64[0];
    v22.i64[1] = v20->i64[1];
    v18 = vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *v20, v28);
    v23 = v19[3];
    v21.i64[0] = *(_QWORD *)(v23 + 72);
    v21.i64[1] = v30.i64[1];
    v22.i64[0] = v30.i64[0];
    v22.i64[1] = *(_QWORD *)(v23 + 80);
    v10 = (__n128)vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *(int8x16_t *)(v23 + 72), v30);
  }
  while (v16 != v17);
LABEL_12:
  v24 = *(void **)(a1 + 232);
  v29 = v18;
  v31 = v10;
  if (v24)
  {
    free(v24);
    v18 = v29;
    v10 = v31;
    *(_QWORD *)(a1 + 232) = 0;
  }
  v25 = *(void **)(a1 + 240);
  if (v25)
  {
    free(v25);
    v18 = v29;
    v10 = v31;
    *(_QWORD *)(a1 + 240) = 0;
  }
  *(__n128 *)(a1 + 72) = v10;
  *(int8x16_t *)(a1 + 152) = v18;
  if (*(_BYTE *)(a1 + 565))
    *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if ((_DWORD)v15 == 37)
  {
    v26 = (_DWORD *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 248))(**(_QWORD **)(a1 + 576));
    *(_DWORD *)(a1 + 152) = *v26;
    *(_DWORD *)(a1 + 156) = v26[1];
    *(_DWORD *)(a1 + 160) = v26[2];
    *(_DWORD *)(a1 + 164) = v26[3];
  }
  return v15;
}

uint64_t md::WorldSpaceLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4, _DWORD *a5, __n128 a6, int8x16_t a7, float32x4_t a8)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t result;
  _DWORD *v23;
  _OWORD v24[6];
  __n128 v25;
  int8x16_t v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  if (*(_BYTE *)(a1 + 565))
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(float *)(v14 + 72);
    v16 = *(float *)(v14 + 68);
    generateRotationMatrixMeshPositioningMode((double *)&v49, v13 + 152, a2 + 440, (double *)(v13 + 408), *(unsigned __int8 *)(a1 + 633), 1, *(unsigned __int8 *)(a1 + 632));
    v17 = v16 * v15 * *(double *)(a2 + 760);
    v37 = v49;
    v40 = v51;
    v43 = v53;
    v38 = v50;
    v41 = v52;
    v44 = v54;
    v39 = 0;
    v42 = 0;
    v45 = 0;
    v46 = *(_OWORD *)(v13 + 408);
    v47 = *(_QWORD *)(v13 + 424);
    v48 = 0x3FF0000000000000;
    v30 = 0u;
    v32 = 0;
    v35 = 0u;
    v34 = 0u;
    v31 = 0u;
    v29 = 0u;
    v28 = 0u;
    v36 = 0x3FF0000000000000;
    v27 = v17;
    *(double *)&v30 = v17;
    v33 = v17;
    gm::operator*<double,4,4,4>((double *)v24, (double *)&v37, &v27);
    v18 = *(_QWORD *)(a1 + 640);
    v19 = v24[1];
    *(_OWORD *)v18 = v24[0];
    *(_OWORD *)(v18 + 16) = v19;
    v20 = v24[3];
    *(_OWORD *)(v18 + 32) = v24[2];
    *(_OWORD *)(v18 + 48) = v20;
    v21 = v24[5];
    *(_OWORD *)(v18 + 64) = v24[4];
    *(_OWORD *)(v18 + 80) = v21;
    a6 = v25;
    a7 = v26;
    *(__n128 *)(v18 + 96) = v25;
    *(int8x16_t *)(v18 + 112) = a7;
  }
  result = md::CompositeLabelPart::layoutForDisplay((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result == 37)
  {
    v23 = *(_DWORD **)(**(_QWORD **)(a1 + 576) + 24);
    *(_DWORD *)(a1 + 392) = v23[98];
    *(_DWORD *)(a1 + 396) = v23[99];
    *(_DWORD *)(a1 + 400) = v23[100];
    *(_DWORD *)(a1 + 404) = v23[101];
  }
  return result;
}

uint64_t md::WorldSpaceLabelPart::modelMatrix(md::WorldSpaceLabelPart *this)
{
  return *((_QWORD *)this + 80);
}

uint64_t md::CompositeLabelPart::partType(md::CompositeLabelPart *this)
{
  return 1;
}

uint64_t md::WorldSpaceLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;

  if ((_DWORD)a3
    && !*(_BYTE *)(a1 + 634)
    && *(unsigned __int8 *)(**(_QWORD **)(a1 + 32) + 253) != *(unsigned __int8 *)(a1 + 631))
  {
    return 1;
  }
  v7 = *(_QWORD *)(a1 + 576);
  v8 = *(_QWORD *)(a1 + 584);
  if (v7 == v8)
    return 0;
  v9 = v7 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 - 8) + 760))(*(_QWORD *)(v9 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v11 = v9 == v8;
    v9 += 8;
  }
  while (!v11);
  return result;
}

uint64_t md::WorldSpaceLabelPart::debugCompositeClassName@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  const void **v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  unint64_t v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18 = v6;
  *(uint64_t *)((char *)&v18 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v18 + *(_QWORD *)(v18 - 24));
  std::ios_base::init(v8, &v19);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v18 = v3 + 24;
  v26[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v19 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v18, (uint64_t)"WorldSpaceLabelPart", 19);
  if ((v25 & 0x10) != 0)
  {
    v11 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) < v22)
    {
      *((_QWORD *)&v24 + 1) = v22;
      v11 = v22;
    }
    v12 = (const void **)&v21;
  }
  else
  {
    if ((v25 & 8) == 0)
    {
      v10 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    v12 = (const void **)v20;
    v11 = v20[2];
  }
  v13 = *v12;
  v10 = v11 - (_QWORD)*v12;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    *((_QWORD *)a1 + 1) = v10;
    *((_QWORD *)a1 + 2) = v15 | 0x8000000000000000;
    *(_QWORD *)a1 = v16;
    a1 = v16;
    goto LABEL_15;
  }
  a1[23] = v10;
  if (v10)
LABEL_15:
    memmove(a1, v13, v10);
LABEL_16:
  a1[v10] = 0;
  v18 = *v5;
  *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = v5[3];
  v19 = v9 + 16;
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v26);
}

void sub_19F515478(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F5154A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

md::CompositeLabelPart *md::WorldSpaceLabelPart::WorldSpaceLabelPart(md::CompositeLabelPart *this, md::LabelPart *a2, uint64_t a3, char a4, char a5)
{
  BOOL *v8;
  float *v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  char v17;
  char v18;

  *((_DWORD *)this + 2) = 1065353216;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2E30;
  *((_QWORD *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 136) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 152) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 168) = xmmword_19FFB3480;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_19FFB3580;
  *(_OWORD *)((char *)this + 296) = xmmword_19FFB3590;
  *(_OWORD *)((char *)this + 312) = xmmword_19FFB2E30;
  *((_QWORD *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 376) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 392) = xmmword_19FFB2E30;
  *(_OWORD *)((char *)this + 408) = xmmword_19FFB3480;
  *((_BYTE *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_19FFB3580;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((_BYTE *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  v8 = (BOOL *)this + 565;
  *(_DWORD *)((char *)this + 565) = 0;
  *(_QWORD *)this = off_1E4294028;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 74) = 0;
  v9 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v10 & 1) == 0)
  {
    v17 = a4;
    v18 = a5;
    v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    a4 = v17;
    a5 = v18;
    if (v15)
    {
      v16 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v9 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      a4 = v17;
      a5 = v18;
    }
  }
  *((_QWORD *)this + 75) = *((_QWORD *)v9 + 299);
  *((_BYTE *)this + 608) = 0;
  *((_BYTE *)this + 616) = 0;
  *(_QWORD *)this = off_1E42984E8;
  *((_DWORD *)this + 157) = 1;
  *((_BYTE *)this + 632) = a4;
  *((_BYTE *)this + 633) = 9;
  *((_BYTE *)this + 634) = a5;
  *((_QWORD *)this + 80) = 0;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  v11 = *((unsigned __int8 *)this + 632);
  if (v11 == 6)
  {
    if (!*(_BYTE *)(a3 + 164))
    {
      *((_BYTE *)this + 632) = 0;
      *((_BYTE *)this + 565) = 0;
      return this;
    }
    *v8 = 1;
  }
  else
  {
    *v8 = v11 != 0;
    if (!v11)
      return this;
  }
  v12 = operator new();
  v13 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = v12;
  if (v13)
    MEMORY[0x1A1AF4E00](v13, 0x1000C40AE2C30F4);
  (*(void (**)(md::LabelPart *, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0);
  (*(void (**)(md::LabelPart *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *((_QWORD *)this + 80));
  return this;
}

void sub_19F515758(_Unwind_Exception *a1)
{
  md::CompositeLabelPart *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 80);
  *((_QWORD *)v1 + 80) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::ARPushDebugDrawItemsLogic::~ARPushDebugDrawItemsLogic(md::ARPushDebugDrawItemsLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v16, a1);
  v5 = operator new();
  v6 = v16;
  v7 = v17;
  v16 = 0;
  v17 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v18;
  v8 = v19;
  *(_QWORD *)(v5 + 16) = v18;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v20;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v18 = 0;
    v19 = 0;
  }
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  *(_QWORD *)(v5 + 56) = v23;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v25;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v23 = 0;
    v24 = 0;
  }
  *(_OWORD *)(v5 + 80) = v26;
  *(_QWORD *)(v5 + 96) = v27;
  v26 = 0uLL;
  *(_OWORD *)(v5 + 104) = v28;
  *(_QWORD *)(v5 + 120) = v29;
  v27 = 0;
  v28 = 0uLL;
  v29 = 0;
  v4[2] = "md::ARPushDebugDrawItemsContext]";
  v4[3] = 31;
  v4[4] = v5;
  *v4 = &off_1E42B1338;
  v4[1] = 0xBB644C924C2E1F27;
  *a2 = v4;
  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&v16);
}

void sub_19F5159B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::DebugDrawContext::~DebugDrawContext((md::DebugDrawContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xBB644C924C2E1F27 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v5 <= 0x61AAF6FADEFBCCACuLL)
      v7 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x61AAF6FADEFBCCACLL)
      {
        if (v9[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

double md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::ARPushDebugDrawItemsLogic::runBeforeLayout(uint64_t a1, int a2, int a3, md::DebugDrawContext *this)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t (**v22)();
  unint64_t *v23;
  uint64_t *v24;
  uint64_t (**v25)();
  uint64_t (**v26)();
  uint64_t *v28;
  unint64_t *v29;
  _QWORD *v30;
  _QWORD *result;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  __int128 *v58;
  char v59;
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  float32x2_t *v66;
  unint64_t *v67;
  uint64_t *v68;
  double *v69;
  uint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t *v76;
  uint64_t *v77;
  __int128 *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 **v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v134;
  uint64_t v135;
  int v136;
  char v137;
  double *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  BOOL v165;
  float32x2_t *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  BOOL v170;
  double *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  BOOL v203;
  float32x2_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  __int128 **v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  BOOL v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t *v270;
  uint64_t v271;
  int v272;
  char v273;
  unint64_t v274;
  __int128 **v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  BOOL v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v308;
  uint64_t v309;
  int v310;
  char v311;
  _Unwind_Exception *v312;
  _Unwind_Exception *v313;
  _QWORD *v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t (**v319)();
  _QWORD *v320;
  _QWORD *v321;
  uint64_t (**v322)();
  uint64_t v323;
  _QWORD *v324;
  _BYTE v326[32];
  __int128 v327;
  int v328;
  int v329;
  uint64_t v330;
  char v331;
  char v332;

  md::DebugDrawContext::clearDebugDrawContext(this);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v5);
  v7 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v5);
  v8 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v5);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v9);
  v11 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>(v9);
  v323 = a1;
  v324 = (_QWORD *)gdc::Registry::storage<arComponents::MapTileDataComponent>(v9);
  v12 = *(_QWORD *)(a1 + 120);
  v13 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(v12);
  v14 = (_QWORD *)gdc::Registry::storage<arComponents::WorldBounds>(v12);
  v15 = v7 + 4;
  v16 = v8 + 4;
  v18 = (unint64_t *)v6[7];
  v17 = (uint64_t *)v6[8];
  if (v7[8] - v7[7] >= (unint64_t)((char *)v17 - (char *)v18))
    v19 = v6 + 4;
  else
    v19 = v7 + 4;
  if (v8[8] - v8[7] >= v19[4] - v19[3])
    v20 = v19;
  else
    v20 = v8 + 4;
  if (v6 + 4 == v20)
  {
    *(_QWORD *)v326 = this;
    if (v18 != (unint64_t *)v17)
    {
      v63 = v6[10];
      do
      {
        v139 = *((unsigned int *)v18 + 1);
        v140 = v139 >> 7;
        v141 = v7[4];
        v142 = (v7[5] - v141) >> 3;
        if (v139 >> 7 < v142)
        {
          v143 = *(_QWORD *)(v141 + 8 * v140);
          if (v143)
          {
            v144 = *(unsigned __int16 *)(v143 + 2 * (v139 & 0x7F));
            v146 = v7[7];
            v145 = v7[8];
            v147 = (v145 - v146) >> 3;
            if (v147 > v144)
            {
              v148 = v146 + 8 * v144;
              if (v148 != v145 && *(_DWORD *)(v148 + 4) == (_DWORD)v139)
              {
                v150 = v8[4];
                v151 = (v8[5] - v150) >> 3;
                if (v140 < v151)
                {
                  v152 = *(_QWORD *)(v150 + 8 * v140);
                  if (v152)
                  {
                    v153 = *(unsigned __int16 *)(v152 + 2 * (v139 & 0x7F));
                    v155 = v8[7];
                    v154 = v8[8];
                    v156 = (v154 - v155) >> 3;
                    if (v156 > v153)
                    {
                      v157 = v155 + 8 * v153;
                      if (v157 != v154 && *(_DWORD *)(v157 + 4) == (_DWORD)v139)
                      {
                        v320 = v16;
                        v159 = *v18;
                        v160 = HIDWORD(*v18);
                        v161 = *v18 >> 39;
                        if (v161 < v142
                          && (v162 = *(_QWORD *)(v141 + 8 * v161)) != 0
                          && (v163 = *(unsigned __int16 *)(v162 + 2 * (HIDWORD(v159) & 0x7F)), v147 > v163)
                          && ((v164 = v146 + 8 * v163, v164 != v145)
                            ? (v165 = *(_DWORD *)(v164 + 4) == (_DWORD)v160)
                            : (v165 = 0),
                              v165))
                        {
                          v166 = (float32x2_t *)(v7[10] + 24 * v163);
                        }
                        else
                        {
                          v166 = (float32x2_t *)v7[11];
                        }
                        v314 = v15;
                        v316 = v20;
                        if (v161 < v151
                          && (v167 = *(_QWORD *)(v150 + 8 * v161)) != 0
                          && (v168 = *(unsigned __int16 *)(v167 + 2 * (HIDWORD(v159) & 0x7F)), v156 > v168)
                          && ((v169 = v155 + 8 * v168, v169 != v154)
                            ? (v170 = *(_DWORD *)(v169 + 4) == (_DWORD)v160)
                            : (v170 = 0),
                              v170))
                        {
                          v138 = (double *)(v8[10] + 80 * v168);
                        }
                        else
                        {
                          v138 = (double *)v8[11];
                        }
                        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((_QWORD **)v326, v63, v166, v138);
                        v20 = v316;
                        v16 = v320;
                        v15 = v314;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v63 += 6;
        ++v18;
      }
      while (v18 != (unint64_t *)v17);
    }
  }
  if (v15 == v20)
  {
    *(_QWORD *)v326 = this;
    v64 = (unint64_t *)v7[7];
    v65 = (uint64_t *)v7[8];
    if (v64 != (unint64_t *)v65)
    {
      v66 = (float32x2_t *)v7[10];
      do
      {
        v172 = *((unsigned int *)v64 + 1);
        v173 = v172 >> 7;
        v174 = v6[4];
        v175 = (v6[5] - v174) >> 3;
        if (v172 >> 7 < v175)
        {
          v176 = *(_QWORD *)(v174 + 8 * v173);
          if (v176)
          {
            v177 = *(unsigned __int16 *)(v176 + 2 * (v172 & 0x7F));
            v179 = v6[7];
            v178 = v6[8];
            v180 = (v178 - v179) >> 3;
            if (v180 > v177)
            {
              v181 = v179 + 8 * v177;
              if (v181 != v178 && *(_DWORD *)(v181 + 4) == (_DWORD)v172)
              {
                v183 = v8[4];
                v184 = (v8[5] - v183) >> 3;
                if (v173 < v184)
                {
                  v185 = *(_QWORD *)(v183 + 8 * v173);
                  if (v185)
                  {
                    v186 = *(unsigned __int16 *)(v185 + 2 * (v172 & 0x7F));
                    v188 = v8[7];
                    v187 = v8[8];
                    v189 = (v187 - v188) >> 3;
                    if (v189 > v186)
                    {
                      v190 = v188 + 8 * v186;
                      if (v190 != v187 && *(_DWORD *)(v190 + 4) == (_DWORD)v172)
                      {
                        v321 = v16;
                        v192 = *v64;
                        v193 = HIDWORD(*v64);
                        v194 = *v64 >> 39;
                        if (v194 < v175
                          && (v195 = *(_QWORD *)(v174 + 8 * v194)) != 0
                          && (v196 = *(unsigned __int16 *)(v195 + 2 * (HIDWORD(v192) & 0x7F)), v180 > v196)
                          && ((v197 = v179 + 8 * v196, v197 != v178)
                            ? (v198 = *(_DWORD *)(v197 + 4) == (_DWORD)v193)
                            : (v198 = 0),
                              v198))
                        {
                          v199 = v6[10] + 6 * v196;
                        }
                        else
                        {
                          v199 = v6[11];
                        }
                        v317 = v20;
                        if (v194 < v184
                          && (v200 = *(_QWORD *)(v183 + 8 * v194)) != 0
                          && (v201 = *(unsigned __int16 *)(v200 + 2 * (HIDWORD(v192) & 0x7F)), v189 > v201)
                          && ((v202 = v188 + 8 * v201, v202 != v187)
                            ? (v203 = *(_DWORD *)(v202 + 4) == (_DWORD)v193)
                            : (v203 = 0),
                              v203))
                        {
                          v171 = (double *)(v8[10] + 80 * v201);
                        }
                        else
                        {
                          v171 = (double *)v8[11];
                        }
                        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((_QWORD **)v326, v199, v66, v171);
                        v20 = v317;
                        v16 = v321;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v66 += 3;
        ++v64;
      }
      while (v64 != (unint64_t *)v65);
    }
  }
  if (v16 == v20)
  {
    *(_QWORD *)v326 = this;
    v67 = (unint64_t *)v8[7];
    v68 = (uint64_t *)v8[8];
    if (v67 != (unint64_t *)v68)
    {
      v69 = (double *)v8[10];
      do
      {
        v205 = *((unsigned int *)v67 + 1);
        v206 = v205 >> 7;
        v207 = v6[4];
        v208 = (v6[5] - v207) >> 3;
        if (v205 >> 7 >= v208)
          goto LABEL_206;
        v209 = *(_QWORD *)(v207 + 8 * v206);
        if (!v209)
          goto LABEL_206;
        v210 = *(unsigned __int16 *)(v209 + 2 * (v205 & 0x7F));
        v212 = v6[7];
        v211 = v6[8];
        v213 = (v211 - v212) >> 3;
        if (v213 <= v210)
          goto LABEL_206;
        v214 = v212 + 8 * v210;
        if (v214 == v211 || *(_DWORD *)(v214 + 4) != (_DWORD)v205)
          goto LABEL_206;
        v216 = v7[4];
        v217 = (v7[5] - v216) >> 3;
        if (v206 >= v217)
          goto LABEL_206;
        v218 = *(_QWORD *)(v216 + 8 * v206);
        if (!v218)
          goto LABEL_206;
        v219 = *(unsigned __int16 *)(v218 + 2 * (v205 & 0x7F));
        v221 = v7[7];
        v220 = v7[8];
        v222 = (v220 - v221) >> 3;
        if (v222 <= v219)
          goto LABEL_206;
        v223 = v221 + 8 * v219;
        if (v223 == v220 || *(_DWORD *)(v223 + 4) != (_DWORD)v205)
          goto LABEL_206;
        v225 = *v67;
        v226 = HIDWORD(*v67);
        v227 = *v67 >> 39;
        if (v227 < v208
          && (v228 = *(_QWORD *)(v207 + 8 * v227)) != 0
          && (v229 = *(unsigned __int16 *)(v228 + 2 * (HIDWORD(v225) & 0x7F)), v213 > v229)
          && ((v230 = v212 + 8 * v229, v230 != v211) ? (v231 = *(_DWORD *)(v230 + 4) == (_DWORD)v226) : (v231 = 0), v231))
        {
          v232 = v6[10] + 6 * v229;
          if (v227 >= v217)
            goto LABEL_204;
        }
        else
        {
          v232 = v6[11];
          if (v227 >= v217)
            goto LABEL_204;
        }
        v233 = *(_QWORD *)(v216 + 8 * v227);
        if (v233)
        {
          v234 = *(unsigned __int16 *)(v233 + 2 * (HIDWORD(v225) & 0x7F));
          if (v222 > v234)
          {
            v235 = v221 + 8 * v234;
            if (v235 != v220 && *(_DWORD *)(v235 + 4) == (_DWORD)v226)
            {
              v204 = (float32x2_t *)(v7[10] + 24 * v234);
              goto LABEL_205;
            }
          }
        }
LABEL_204:
        v204 = (float32x2_t *)v7[11];
LABEL_205:
        _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE((_QWORD **)v326, v232, v204, v69);
LABEL_206:
        v69 += 10;
        ++v67;
      }
      while (v67 != (unint64_t *)v68);
    }
  }
  v21 = v324;
  v22 = (uint64_t (**)())(v324 + 4);
  v23 = (unint64_t *)v10[7];
  v24 = (uint64_t *)v10[8];
  if (v11[8] - v11[7] >= (unint64_t)((char *)v24 - (char *)v23))
    v25 = (uint64_t (**)())(v10 + 4);
  else
    v25 = (uint64_t (**)())(v11 + 4);
  if (v324[8] - v324[7] >= (unint64_t)((char *)v25[4] - (char *)v25[3]))
    v26 = v25;
  else
    v26 = (uint64_t (**)())(v324 + 4);
  if (v10 + 4 == v26 && v23 != (unint64_t *)v24)
  {
    v39 = (_DWORD *)(v10[10] + 2);
    while (1)
    {
      v102 = *((unsigned int *)v23 + 1);
      v103 = v102 >> 7;
      v104 = v11[4];
      v105 = (v11[5] - v104) >> 3;
      if (v102 >> 7 < v105)
      {
        v106 = *(_QWORD *)(v104 + 8 * v103);
        if (v106)
        {
          v107 = *(unsigned __int16 *)(v106 + 2 * (v102 & 0x7F));
          v109 = v11[7];
          v108 = v11[8];
          v110 = (v108 - v109) >> 3;
          if (v110 > v107)
          {
            v111 = v109 + 8 * v107;
            if (v111 != v108 && *(_DWORD *)(v111 + 4) == (_DWORD)v102)
            {
              v113 = v324[4];
              v114 = (v324[5] - v113) >> 3;
              if (v103 < v114)
              {
                v115 = *(_QWORD *)(v113 + 8 * v103);
                if (v115)
                {
                  v116 = *(unsigned __int16 *)(v115 + 2 * (v102 & 0x7F));
                  v118 = v324[7];
                  v117 = v324[8];
                  v119 = (v117 - v118) >> 3;
                  if (v119 > v116)
                  {
                    v120 = v118 + 8 * v116;
                    if (v120 != v117 && *(_DWORD *)(v120 + 4) == (_DWORD)v102)
                      break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_92:
      ++v23;
      v39 = (_DWORD *)((char *)v39 + 6);
      if (v23 == (unint64_t *)v24)
        goto LABEL_21;
    }
    v122 = *v23;
    v123 = HIDWORD(*v23);
    v124 = *v23 >> 39;
    if (v124 < v105
      && (v125 = *(_QWORD *)(v104 + 8 * v124)) != 0
      && (v126 = *(unsigned __int16 *)(v125 + 2 * (HIDWORD(v122) & 0x7F)), v110 > v126)
      && ((v127 = v109 + 8 * v126, v127 != v108) ? (v128 = *(_DWORD *)(v127 + 4) == (_DWORD)v123) : (v128 = 0), v128))
    {
      v129 = v11[10] + 168 * v126;
      if (v124 >= v114)
        goto LABEL_126;
    }
    else
    {
      v129 = v11[11];
      if (v124 >= v114)
        goto LABEL_126;
    }
    v130 = *(_QWORD *)(v113 + 8 * v124);
    if (v130)
    {
      v131 = *(unsigned __int16 *)(v130 + 2 * (HIDWORD(v122) & 0x7F));
      if (v119 > v131)
      {
        v132 = v118 + 8 * v131;
        if (v132 != v117 && *(_DWORD *)(v132 + 4) == (_DWORD)v123)
        {
          v134 = (uint64_t *)(v324[10] + 8 * v131);
LABEL_127:
          v319 = v22;
          v135 = *v134;
          if (*((_BYTE *)v39 - 2))
          {
            v315 = v135 + 168;
            v101 = (__int128 **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v129);
            *(_DWORD *)v326 = *v39;
            v326[4] = 0;
            v326[8] = 0;
            v326[12] = 1;
            md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v315, *v101, v101[1], (int *)v326);
          }
          else
          {
            v136 = *(_DWORD *)(v129 + 20);
            *(_DWORD *)v326 = *(_DWORD *)v129;
            *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v129 + 4), vrev64q_s32(*(int32x4_t *)(v129 + 4)));
            *(_DWORD *)&v326[20] = v136;
            v328 = 0;
            v137 = *((_BYTE *)v39 - 1);
            LODWORD(v330) = *v39;
            BYTE4(v330) = 0;
            v331 = 0;
            v332 = v137;
            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v135 + 168, (uint64_t)v326, (int *)&v330);
            if (v328 != -1)
              ((void (*)(uint64_t *, _BYTE *))off_1E42F68A0[v328])(&v330, v326);
          }
          v22 = v319;
          goto LABEL_92;
        }
      }
    }
LABEL_126:
    v134 = (uint64_t *)v324[11];
    goto LABEL_127;
  }
LABEL_21:
  if (v11 + 4 == v26)
  {
    v71 = (unint64_t *)v11[7];
    v70 = (uint64_t *)v11[8];
    if (v71 != (unint64_t *)v70)
    {
      v72 = v11[10];
      while (1)
      {
        v238 = *((unsigned int *)v71 + 1);
        v239 = v238 >> 7;
        v240 = v10[4];
        v241 = (v10[5] - v240) >> 3;
        if (v238 >> 7 < v241)
        {
          v242 = *(_QWORD *)(v240 + 8 * v239);
          if (v242)
          {
            v243 = *(unsigned __int16 *)(v242 + 2 * (v238 & 0x7F));
            v245 = v10[7];
            v244 = v10[8];
            v246 = (v244 - v245) >> 3;
            if (v246 > v243)
            {
              v247 = v245 + 8 * v243;
              if (v247 != v244 && *(_DWORD *)(v247 + 4) == (_DWORD)v238)
              {
                v249 = v21[4];
                v250 = (v21[5] - v249) >> 3;
                if (v239 < v250)
                {
                  v251 = *(_QWORD *)(v249 + 8 * v239);
                  if (v251)
                  {
                    v252 = *(unsigned __int16 *)(v251 + 2 * (v238 & 0x7F));
                    v254 = v21[7];
                    v253 = v21[8];
                    v255 = (v253 - v254) >> 3;
                    if (v255 > v252)
                    {
                      v256 = v254 + 8 * v252;
                      if (v256 != v253 && *(_DWORD *)(v256 + 4) == (_DWORD)v238)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_243:
        v72 += 168;
        if (++v71 == (unint64_t *)v70)
          goto LABEL_22;
      }
      v258 = *v71;
      v259 = HIDWORD(*v71);
      v260 = *v71 >> 39;
      if (v260 < v241
        && (v261 = *(_QWORD *)(v240 + 8 * v260)) != 0
        && (v262 = *(unsigned __int16 *)(v261 + 2 * (HIDWORD(v258) & 0x7F)), v246 > v262)
        && ((v263 = v245 + 8 * v262, v263 != v244) ? (v264 = *(_DWORD *)(v263 + 4) == (_DWORD)v259) : (v264 = 0), v264))
      {
        v265 = v10[10] + 6 * v262;
        if (v260 >= v250)
          goto LABEL_277;
      }
      else
      {
        v265 = v10[11];
        if (v260 >= v250)
          goto LABEL_277;
      }
      v266 = *(_QWORD *)(v249 + 8 * v260);
      if (v266)
      {
        v267 = *(unsigned __int16 *)(v266 + 2 * (HIDWORD(v258) & 0x7F));
        if (v255 > v267)
        {
          v268 = v254 + 8 * v267;
          if (v268 != v253 && *(_DWORD *)(v268 + 4) == (_DWORD)v259)
          {
            v270 = (uint64_t *)(v324[10] + 8 * v267);
LABEL_278:
            v322 = v22;
            v271 = *v270;
            if (*(_BYTE *)v265)
            {
              v318 = v271 + 168;
              v237 = (__int128 **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v72);
              *(_DWORD *)v326 = *(_DWORD *)(v265 + 2);
              v326[4] = 0;
              v326[8] = 0;
              v326[12] = 1;
              md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v318, *v237, v237[1], (int *)v326);
              v21 = v324;
            }
            else
            {
              v272 = *(_DWORD *)(v72 + 20);
              *(_DWORD *)v326 = *(_DWORD *)v72;
              *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v72 + 4), vrev64q_s32(*(int32x4_t *)(v72 + 4)));
              *(_DWORD *)&v326[20] = v272;
              v328 = 0;
              v273 = *(_BYTE *)(v265 + 1);
              LODWORD(v330) = *(_DWORD *)(v265 + 2);
              BYTE4(v330) = 0;
              v331 = 0;
              v332 = v273;
              md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v271 + 168, (uint64_t)v326, (int *)&v330);
              v21 = v324;
              if (v328 != -1)
                ((void (*)(uint64_t *, _BYTE *))off_1E42F68A0[v328])(&v330, v326);
            }
            v22 = v322;
            goto LABEL_243;
          }
        }
      }
LABEL_277:
      v270 = (uint64_t *)v324[11];
      goto LABEL_278;
    }
  }
LABEL_22:
  if (v22 == v26)
  {
    v73 = (unint64_t *)v21[7];
    v74 = (uint64_t *)v21[8];
    if (v73 != (unint64_t *)v74)
    {
      v75 = (uint64_t *)v21[10];
      v26 = off_1E42F68A0;
      while (1)
      {
        v276 = *((unsigned int *)v73 + 1);
        v277 = v276 >> 7;
        v278 = v10[4];
        v279 = (v10[5] - v278) >> 3;
        if (v276 >> 7 < v279)
        {
          v280 = *(_QWORD *)(v278 + 8 * v277);
          if (v280)
          {
            v281 = *(unsigned __int16 *)(v280 + 2 * (v276 & 0x7F));
            v283 = v10[7];
            v282 = v10[8];
            v284 = (v282 - v283) >> 3;
            if (v284 > v281)
            {
              v285 = v283 + 8 * v281;
              if (v285 != v282 && *(_DWORD *)(v285 + 4) == (_DWORD)v276)
              {
                v287 = v11[4];
                v288 = (v11[5] - v287) >> 3;
                if (v277 < v288)
                {
                  v289 = *(_QWORD *)(v287 + 8 * v277);
                  if (v289)
                  {
                    v290 = *(unsigned __int16 *)(v289 + 2 * (v276 & 0x7F));
                    v292 = v11[7];
                    v291 = v11[8];
                    v293 = (v291 - v292) >> 3;
                    if (v293 > v290)
                    {
                      v294 = v292 + 8 * v290;
                      if (v294 != v291 && *(_DWORD *)(v294 + 4) == (_DWORD)v276)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_282:
        ++v75;
        if (++v73 == (unint64_t *)v74)
          goto LABEL_23;
      }
      v296 = *v73;
      v297 = HIDWORD(*v73);
      v298 = *v73 >> 39;
      if (v298 < v279
        && (v299 = *(_QWORD *)(v278 + 8 * v298)) != 0
        && (v300 = *(unsigned __int16 *)(v299 + 2 * (HIDWORD(v296) & 0x7F)), v284 > v300)
        && ((v301 = v283 + 8 * v300, v301 != v282) ? (v302 = *(_DWORD *)(v301 + 4) == (_DWORD)v297) : (v302 = 0), v302))
      {
        v303 = v10[10] + 6 * v300;
        if (v298 >= v288)
          goto LABEL_316;
      }
      else
      {
        v303 = v10[11];
        if (v298 >= v288)
          goto LABEL_316;
      }
      v304 = *(_QWORD *)(v287 + 8 * v298);
      if (v304)
      {
        v305 = *(unsigned __int16 *)(v304 + 2 * (HIDWORD(v296) & 0x7F));
        if (v293 > v305)
        {
          v306 = v292 + 8 * v305;
          if (v306 != v291 && *(_DWORD *)(v306 + 4) == (_DWORD)v297)
          {
            v308 = v11[10] + 168 * v305;
            goto LABEL_317;
          }
        }
      }
LABEL_316:
      v308 = v11[11];
LABEL_317:
      v309 = *v75;
      if (*(_BYTE *)v303)
      {
        v274 = v309 + 168;
        v275 = (__int128 **)arComponents::LocalBounds::debugEdges((arComponents::LocalBounds *)v308);
        *(_DWORD *)v326 = *(_DWORD *)(v303 + 2);
        v326[4] = 0;
        v326[8] = 0;
        v326[12] = 1;
        md::DebugDrawContext::addTileLocalLines((uint64_t *)this, v274, *v275, v275[1], (int *)v326);
      }
      else
      {
        v310 = *(_DWORD *)(v308 + 20);
        *(_DWORD *)v326 = *(_DWORD *)v308;
        *(int32x4_t *)&v326[4] = vuzp2q_s32(*(int32x4_t *)(v308 + 4), vrev64q_s32(*(int32x4_t *)(v308 + 4)));
        *(_DWORD *)&v326[20] = v310;
        v328 = 0;
        v311 = *(_BYTE *)(v303 + 1);
        LODWORD(v330) = *(_DWORD *)(v303 + 2);
        BYTE4(v330) = 0;
        v331 = 0;
        v332 = v311;
        md::DebugDrawContext::addTileLocalDebugShape((uint64_t)this, v309 + 168, (uint64_t)v326, (int *)&v330);
        if (v328 != -1)
          ((void (*)(uint64_t *, _BYTE *))off_1E42F68A0[v328])(&v330, v326);
      }
      goto LABEL_282;
    }
  }
LABEL_23:
  v29 = (unint64_t *)v13[7];
  v28 = (uint64_t *)v13[8];
  if (v14[8] - v14[7] >= (unint64_t)((char *)v28 - (char *)v29))
    v30 = v13 + 4;
  else
    v30 = v14 + 4;
  if (v13 + 4 == v30 && v29 != (unint64_t *)v28)
  {
    v40 = (_DWORD *)(v13[10] + 2);
    do
    {
      v41 = *((unsigned int *)v29 + 1);
      v42 = v14[4];
      v43 = (v14[5] - v42) >> 3;
      if (v41 >> 7 < v43)
      {
        v44 = *(_QWORD *)(v42 + 8 * (v41 >> 7));
        if (v44)
        {
          v45 = *(unsigned __int16 *)(v44 + 2 * (v41 & 0x7F));
          v47 = v14[7];
          v46 = v14[8];
          v48 = (v46 - v47) >> 3;
          if (v48 > v45)
          {
            v49 = v47 + 8 * v45;
            if (v49 != v46 && *(_DWORD *)(v49 + 4) == (_DWORD)v41)
            {
              if ((v51 = *v29, v52 = *v29 >> 39, v52 < v43)
                && (v53 = *(_QWORD *)(v42 + 8 * v52)) != 0
                && (v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(v51) & 0x7F)), v48 > v54)
                && ((v55 = HIDWORD(v51), v56 = v47 + 8 * v54, v56 != v46)
                  ? (v57 = *(_DWORD *)(v56 + 4) == (_DWORD)v55)
                  : (v57 = 0),
                    v57))
              {
                v58 = (__int128 *)(v14[10] + 48 * v54);
              }
              else
              {
                v58 = (__int128 *)v14[11];
              }
              v59 = *((_BYTE *)v40 - 1);
              v60 = *v40;
              v61 = *v58;
              v62 = v58[2];
              *(_OWORD *)&v326[16] = v58[1];
              v327 = v62;
              *(_OWORD *)v326 = v61;
              v329 = 0;
              LODWORD(v330) = v60;
              BYTE4(v330) = 0;
              v331 = 0;
              v332 = v59;
              md::DebugDrawContext::addWorldDebugShape(this, (uint64_t)v326, (int *)&v330);
              if (v329 != -1)
                ((void (*)(uint64_t *, _BYTE *))off_1E42F6900[v329])(&v330, v326);
            }
          }
        }
      }
      ++v29;
      v40 = (_DWORD *)((char *)v40 + 6);
    }
    while (v29 != (unint64_t *)v28);
  }
  if (v14 + 4 == v30)
  {
    v76 = (unint64_t *)v14[7];
    v77 = (uint64_t *)v14[8];
    if (v76 != (unint64_t *)v77)
    {
      v78 = (__int128 *)v14[10];
      do
      {
        v79 = *((unsigned int *)v76 + 1);
        v80 = v13[4];
        v81 = (v13[5] - v80) >> 3;
        if (v79 >> 7 < v81)
        {
          v82 = *(_QWORD *)(v80 + 8 * (v79 >> 7));
          if (v82)
          {
            v83 = *(unsigned __int16 *)(v82 + 2 * (v79 & 0x7F));
            v85 = v13[7];
            v84 = v13[8];
            v86 = (v84 - v85) >> 3;
            if (v86 > v83)
            {
              v87 = v85 + 8 * v83;
              if (v87 != v84 && *(_DWORD *)(v87 + 4) == (_DWORD)v79)
              {
                if ((v89 = *v76, v90 = *v76 >> 39, v90 < v81)
                  && (v91 = *(_QWORD *)(v80 + 8 * v90)) != 0
                  && (v92 = *(unsigned __int16 *)(v91 + 2 * (HIDWORD(v89) & 0x7F)), v86 > v92)
                  && ((v93 = HIDWORD(v89), v94 = v85 + 8 * v92, v94 != v84)
                    ? (v95 = *(_DWORD *)(v94 + 4) == (_DWORD)v93)
                    : (v95 = 0),
                      v95))
                {
                  v96 = v13[10] + 6 * v92;
                }
                else
                {
                  v96 = v13[11];
                }
                v97 = *(_BYTE *)(v96 + 1);
                v98 = *(_DWORD *)(v96 + 2);
                v99 = *v78;
                v100 = v78[2];
                *(_OWORD *)&v326[16] = v78[1];
                v327 = v100;
                *(_OWORD *)v326 = v99;
                v329 = 0;
                LODWORD(v330) = v98;
                BYTE4(v330) = 0;
                v331 = 0;
                v332 = v97;
                md::DebugDrawContext::addWorldDebugShape(this, (uint64_t)v326, (int *)&v330);
                if (v329 != -1)
                  ((void (*)(uint64_t *, _BYTE *))off_1E42F6900[v329])(&v330, v326);
              }
            }
          }
        }
        v78 += 3;
        ++v76;
      }
      while (v76 != (unint64_t *)v77);
    }
  }
  result = (_QWORD *)gdc::Registry::storage<arComponents::NeedsDebugDraw>(*(_QWORD *)(v323 + 120));
  v33 = result;
  if (result[29])
  {
    v34 = (_QWORD *)result[28];
    if (v34)
    {
      v35 = result[31];
      v36 = result[7];
      v37 = (result[8] - v36) >> 3;
      do
      {
        *(_QWORD *)v326 = v36;
        *(_QWORD *)&v326[8] = v37;
        v330 = v35;
        v38 = v34[6];
        if (!v38)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          v313 = v312;
          if (v328 != -1)
            ((void (*)(uint64_t *, _BYTE *))v26[v328])(&v330, v326);
          _Unwind_Resume(v313);
        }
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v38 + 48))(v38, &v330, v326);
        v34 = (_QWORD *)*v34;
      }
      while (v34);
    }
  }
  v33[8] = v33[7];
  v33[11] = v33[10];
  return result;
}

void md::Logic<md::ARPushDebugDrawItemsLogic,md::ARPushDebugDrawItemsContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::LocalBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2805F57CABD6715CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2805F57CABD6715CLL;
      if (*(_QWORD *)&v3 <= 0x2805F57CABD6715CuLL)
        v5 = 0x2805F57CABD6715CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2805F57CABD6715CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2805F57CABD6715CLL)
            {
              if (v7[2] == 0x2805F57CABD6715CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2805F57CABD6715CLL)
          {
            if (v7[2] == 0x2805F57CABD6715CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::LocalBounds]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1788;
  *(_QWORD *)(v11 + 8) = 0x2805F57CABD6715CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2805F57CABD6715CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2805F57CABD6715CLL;
  v15[1] = "arComponents::LocalBounds]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2805F57CABD6715CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5173B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::MapTileDataComponent>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8D7BED96DFFA474FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8D7BED96DFFA474FLL;
      if (*(_QWORD *)&v3 <= 0x8D7BED96DFFA474FLL)
        v5 = 0x8D7BED96DFFA474FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8D7BED96DFFA474FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8D7BED96DFFA474FLL)
            {
              if (v7[2] == 0x8D7BED96DFFA474FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8D7BED96DFFA474FLL)
          {
            if (v7[2] == 0x8D7BED96DFFA474FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::MapTileDataComponent]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1F38;
  *(_QWORD *)(v11 + 8) = 0x8D7BED96DFFA474FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8D7BED96DFFA474FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8D7BED96DFFA474FLL;
  v15[1] = "arComponents::MapTileDataComponent]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8D7BED96DFFA474FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F5175E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::WorldBounds>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE50E89C80204E03FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE50E89C80204E03FLL;
      if (*(_QWORD *)&v3 <= 0xE50E89C80204E03FLL)
        v5 = 0xE50E89C80204E03FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE50E89C80204E03FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE50E89C80204E03FLL)
            {
              if (v7[2] == 0xE50E89C80204E03FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE50E89C80204E03FLL)
          {
            if (v7[2] == 0xE50E89C80204E03FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::WorldBounds]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1818;
  *(_QWORD *)(v11 + 8) = 0xE50E89C80204E03FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE50E89C80204E03FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE50E89C80204E03FLL;
  v15[1] = "arComponents::WorldBounds]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE50E89C80204E03FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F517808(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md25ARPushDebugDrawItemsLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_35ARApplyWorldTransformUpdatesContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_27ARPushDebugDrawItemsContextEENK3__0clENS5_6EntityERN12arComponents14NeedsDebugDrawERNSI_8BoundaryERNSI_14WorldTransformE(_QWORD **a1, uint64_t a2, float32x2_t *a3, double *a4)
{
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  float64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  float64_t v16;
  float64_t v17;
  double v18;
  uint64_t v19;
  __n128 v20;
  int64x2_t *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  double v25[16];
  _OWORD v26[3];
  int64x2_t v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  __int128 v40;
  int64x2_t v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = vcvtq_f64_f32(a3[1]);
  v26[0] = vcvtq_f64_f32(*a3);
  v26[1] = v6;
  v26[2] = vcvtq_f64_f32(a3[2]);
  v7 = a4[4];
  v6.f64[0] = a4[5];
  v8 = v7 + v7;
  v9 = (v7 + v7) * v7;
  v10 = (v6.f64[0] + v6.f64[0]) * v6.f64[0];
  v12 = *((_QWORD *)a4 + 2);
  v11 = a4[3];
  v13 = (v11 + v11) * v7;
  v14 = a4[6];
  v15 = *((_QWORD *)a4 + 7);
  v16 = (v6.f64[0] + v6.f64[0]) * v14;
  v17 = v6.f64[0] * (v11 + v11);
  v18 = 1.0 - (v11 + v11) * v11;
  v6.f64[0] = v8 * v6.f64[0];
  *(double *)v39.i64 = 1.0 - (v9 + v10);
  *(double *)&v39.i64[1] = v16 + v13;
  *(double *)v41.i64 = v13 - v16;
  *(double *)&v41.i64[1] = v18 - v10;
  v44 = v14 * v8 + v17;
  v45 = v6.f64[0] - v14 * (v11 + v11);
  v40 = COERCE_UNSIGNED_INT64(v17 - v14 * v8);
  v42 = v14 * (v11 + v11) + v6.f64[0];
  v46 = v18 - v9;
  v43 = 0;
  v47 = 0;
  v48 = *(_OWORD *)a4;
  v49 = v12;
  v50 = 0x3FF0000000000000;
  v33 = 0u;
  v35 = 0u;
  v37 = 0u;
  v36 = 0u;
  v34 = 0u;
  v32 = 0u;
  v31 = 0u;
  v38 = 0x3FF0000000000000;
  v19 = *((_QWORD *)a4 + 8);
  v6.f64[0] = a4[9];
  v30 = v15;
  *(_QWORD *)&v33 = v19;
  *((_QWORD *)&v35 + 1) = *(_QWORD *)&v6.f64[0];
  gm::operator*<double,4,4,4>(v25, (double *)v39.i64, (double *)&v30);
  v27 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v28 = xmmword_19FFB2E00;
  v29 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v39.i64[0] = (uint64_t)&off_1E42D8A68;
  v39.i64[1] = (uint64_t)&v27;
  *(_QWORD *)&v40 = v25;
  *((_QWORD *)&v40 + 1) = &v39;
  v20.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v26, (uint64_t)&v39);
  v21 = (int64x2_t *)*((_QWORD *)&v40 + 1);
  if (*((int64x2_t **)&v40 + 1) == &v39)
  {
    v22 = 4;
    v21 = &v39;
  }
  else
  {
    if (!*((_QWORD *)&v40 + 1))
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(__n128))(v21->i64[0] + 8 * v22))(v20);
LABEL_6:
  v23 = *a1;
  v39 = v27;
  v40 = v28;
  v41 = v29;
  DWORD2(v48) = 0;
  v24 = *(_BYTE *)(a2 + 1);
  LODWORD(v30) = *(_DWORD *)(a2 + 2);
  BYTE4(v30) = 0;
  LOBYTE(v31) = 0;
  BYTE4(v31) = v24;
  md::DebugDrawContext::addWorldDebugShape(v23, (uint64_t)&v39, (int *)&v30);
  if (DWORD2(v48) != -1)
    ((void (*)(uint64_t *, int64x2_t *))off_1E42F6900[DWORD2(v48)])(&v30, &v39);
}

void sub_19F517A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v39;

  v39 = *(unsigned int *)(v37 - 88);
  if ((_DWORD)v39 != -1)
    ((void (*)(char *, uint64_t))off_1E42F6900[v39])(&a37, v37 - 192);
  _Unwind_Resume(exception_object);
}

void **arComponents::LocalBounds::debugEdges(arComponents::LocalBounds *this)
{
  void **v1;
  arComponents::LocalBounds *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *__ptr32 *v17;
  char *__ptr32 *v18;
  unint64_t v19;
  __int32 *v20;
  char *v21;
  uint64_t v22;
  float32x4_t v23;
  __int32 v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  __int32 *v28;
  float32x4_t v29;
  __int32 v30;
  float *v31;
  char v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  char v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  int *v55;
  __int128 *v56;
  uint64_t v57;
  float32x4_t v58;
  int v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  BOOL v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  void *v91;
  int v92;
  void **v93;
  unint64_t v94;
  char *v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  float *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  float32x4_t v114;
  __int32 v115;
  uint64_t v116;
  int v117;
  float32x4_t v118;
  __int32 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  int v130;

  v1 = (void **)((char *)this + 104);
  if (*((_BYTE *)this + 128))
    return v1;
  v3 = this;
  v93 = (void **)((char *)this + 104);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = (char *)this + 4;
  v8 = 0uLL;
  v9 = xmmword_19FFB3590;
  v10 = xmmword_19FFB36A0;
  v11 = xmmword_19FFB36B0;
  v12 = xmmword_19FFB36C0;
  v13 = xmmword_19FFB36D0;
  v14 = xmmword_19FFB36E0;
  v15 = xmmword_19FFB36F0;
  v16 = xmmword_19FFB3700;
  v17 = &off_19FFB1000;
  v18 = &off_19FFB1000;
  v96 = (char *)this + 4;
  do
  {
    v19 = v6;
    v20 = (__int32 *)((char *)v3 + 8 * v6);
    v101 = v9;
    v102 = v9;
    v103 = v10;
    v104 = v11;
    v105 = v12;
    v106 = v13;
    v107 = v14;
    v108 = v15;
    v109 = v16;
    v110 = 0x3E8483EDBF7746EDLL;
    v111 = 0;
    v21 = (char *)&v101 + 12 * v19;
    v22 = *(_QWORD *)v21;
    v23.i32[0] = *v20;
    v24 = v20[1];
    v117 = *((_DWORD *)v21 + 2);
    v116 = v22;
    v101 = v9;
    v102 = v9;
    v103 = v10;
    v104 = v11;
    v105 = v12;
    v106 = v13;
    v107 = v14;
    v108 = v15;
    v109 = v16;
    v110 = 0x3E8483EDBF7746EDLL;
    v111 = 0;
    v23.i32[1] = *(_DWORD *)v21;
    v23.i64[1] = *(_QWORD *)(v21 + 4);
    v118 = vnegq_f32(v23);
    v119 = v24;
    v25 = v19 + 1;
    v94 = v19 + 1;
    if (v19 <= 0xB)
    {
      do
      {
        v26 = 0;
        v101 = v9;
        v102 = v9;
        v103 = v10;
        v104 = v11;
        v105 = v12;
        v106 = v13;
        v107 = v14;
        v108 = v15;
        v109 = v16;
        v110 = 0x3E8483EDBF7746EDLL;
        v27 = (char *)&v101 + 12 * v25;
        v112 = *(_QWORD *)v27;
        v28 = (__int32 *)((char *)v3 + 8 * v25);
        v111 = 0;
        v29.i32[0] = *v28;
        v30 = v28[1];
        v113 = *((_DWORD *)v27 + 2);
        v101 = v9;
        v102 = v9;
        v103 = v10;
        v104 = v11;
        v105 = v12;
        v106 = v13;
        v107 = v14;
        v108 = v15;
        v109 = v16;
        v110 = 0x3E8483EDBF7746EDLL;
        v111 = 0;
        v29.i32[1] = *(_DWORD *)v27;
        v29.i64[1] = *(_QWORD *)(v27 + 4);
        v114 = vnegq_f32(v29);
        v115 = v30;
        v31 = (float *)&v116;
        do
        {
          v32 = 0;
          v33 = 0;
          v99 = v26;
          v34 = (float *)((unint64_t)(&v116 + 2 * v26) | 0xC);
          v100 = v34;
          do
          {
            v36 = v32;
            v37 = (float *)(&v112 + 2 * v33);
            v38 = v37[1];
            v39 = v37[2];
            v41 = v31[1];
            v40 = v31[2];
            v42 = -(float)((float)(v38 * v40) - (float)(v39 * v41));
            v43 = -(float)((float)(*v31 * v39) - (float)(*v37 * v40));
            v44 = -(float)((float)(*v37 * v41) - (float)(*v31 * v38));
            v45 = (float)((float)(v42 * v42) + (float)(v43 * v43)) + (float)(v44 * v44);
            if (v45 >= 0.00000011921)
            {
              v46 = 0;
              v47 = 0;
              v48 = v37[3];
              v49 = -(float)((float)(*v34 * *v37) - (float)(v48 * *v31));
              v50 = -(float)((float)(*v34 * v38) - (float)(v48 * v41));
              v51 = -(float)((float)(*v34 * v39) - (float)(v48 * v40));
              v52 = v51 * v43;
              v53 = -(float)((float)(v50 * v42) - (float)(v49 * v43));
              v54 = v25;
              v55 = (int *)v7;
              do
              {
                if (v4 != v46 && v54)
                {
                  v120 = v9;
                  v121 = v9;
                  v122 = v10;
                  v123 = v11;
                  v124 = v12;
                  v125 = v13;
                  v126 = v14;
                  v127 = v15;
                  v128 = v16;
                  v129 = 0x3E8483EDBF7746EDLL;
                  v130 = 0;
                  v56 = &v101 + v47;
                  v57 = *(_QWORD *)((char *)&v120 + v46);
                  v58.i32[0] = *(v55 - 1);
                  v59 = *v55;
                  *((_DWORD *)v56 + 2) = *(_DWORD *)((char *)&v120 + v46 + 8);
                  *(_QWORD *)v56 = v57;
                  v120 = v9;
                  v121 = v9;
                  v122 = v10;
                  v123 = v11;
                  v124 = v12;
                  v125 = v13;
                  v126 = v14;
                  v127 = v15;
                  v128 = v16;
                  v129 = 0x3E8483EDBF7746EDLL;
                  v130 = 0;
                  v58.i32[1] = *(_DWORD *)((char *)&v120 + v46);
                  v47 += 2;
                  v58.i64[1] = *(_QWORD *)((char *)&v120 + v46 + 4);
                  *(__int128 *)((char *)v56 + 12) = (__int128)vnegq_f32(v58);
                  *((_DWORD *)v56 + 7) = v59;
                }
                v46 += 12;
                v55 += 2;
                --v54;
              }
              while (v46 != 156);
              v60 = 0;
              v61 = 1.0 / v45;
              v62 = (float)-(float)((float)(v49 * v44) - (float)(v51 * v42)) * v61;
              v63 = (float)-(float)(v52 - (float)(v50 * v44)) * v61;
              v64 = v53 * v61;
              v65 = -3.4028e38;
              v66 = 3.4028e38;
              while (1)
              {
                v67 = *(float *)((char *)&v101 + v60);
                v68 = *(float *)((char *)&v101 + v60 + 4);
                v69 = *(float *)((char *)&v101 + v60 + 8);
                v70 = (float)((float)(v67 * v42) + (float)(v68 * v43)) + (float)(v69 * v44);
                v71 = (float)((float)(*(float *)((char *)&v101 + v60 + 12) + (float)(v67 * v63)) + (float)(v68 * v62))
                    + (float)(v69 * v64);
                v72 = v70 <= 0.0;
                if (v70 == 0.0)
                {
                  if (v71 < 0.0)
                    break;
                }
                else
                {
                  v73 = (float)-v71 / v70;
                  if (v72)
                    v66 = fminf(v73, v66);
                  else
                    v65 = fmaxf(v65, v73);
                }
                if (v65 > v66)
                  break;
                v60 += 16;
                if (v60 == 352)
                {
                  if (v65 != -3.4028e38 && v66 != 3.4028e38)
                  {
                    v74 = v63 + (float)(v65 * v42);
                    v75 = (float)(v65 * v44) + v64;
                    v76 = v63 + (float)(v66 * v42);
                    v77 = *(float32x2_t *)(v17 + 732);
                    v78 = *(float32x2_t *)(v18 + 380);
                    v79 = vmla_n_f32(vmul_n_f32(v77, v74), v78, v62 + (float)(v65 * v43));
                    v80 = vsub_f32(vmla_n_f32(vmul_n_f32(v77, v76), v78, v62 + (float)(v66 * v43)), v79);
                    v81 = -(float)((float)(v65 * v44) - (float)(v66 * v44));
                    v82 = (char *)*((_QWORD *)&v8 + 1);
                    if (*((_QWORD *)&v8 + 1) < (unint64_t)v5)
                    {
                      **((_QWORD **)&v8 + 1) = v79;
                      *(float *)(*((_QWORD *)&v8 + 1) + 8) = v75;
                      *(float32x2_t *)(*((_QWORD *)&v8 + 1) + 12) = v80;
                      v35 = *((_QWORD *)&v8 + 1) + 24;
                      *(float *)(*((_QWORD *)&v8 + 1) + 20) = v81;
                    }
                    else
                    {
                      v83 = (char *)v8;
                      v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v8 + 1) - v8) >> 3);
                      v85 = v84 + 1;
                      if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
                        abort();
                      if (0x5555555555555556 * ((uint64_t)&v5[-v8] >> 3) > v85)
                        v85 = 0x5555555555555556 * ((uint64_t)&v5[-v8] >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-v8] >> 3) >= 0x555555555555555)
                        v86 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v86 = v85;
                      if (v86)
                      {
                        if (v86 > 0xAAAAAAAAAAAAAAALL)
                          std::__throw_bad_array_new_length[abi:nn180100]();
                        v87 = (char *)operator new(24 * v86);
                        v10 = xmmword_19FFB36A0;
                        v9 = xmmword_19FFB3590;
                        v12 = xmmword_19FFB36C0;
                        v11 = xmmword_19FFB36B0;
                        v14 = xmmword_19FFB36E0;
                        v13 = xmmword_19FFB36D0;
                        v16 = xmmword_19FFB3700;
                        v15 = xmmword_19FFB36F0;
                      }
                      else
                      {
                        v87 = 0;
                      }
                      v88 = &v87[24 * v84];
                      *(float32x2_t *)v88 = v79;
                      *((float *)v88 + 2) = v75;
                      *(float32x2_t *)(v88 + 12) = v80;
                      *((float *)v88 + 5) = v81;
                      v89 = v88;
                      if (v82 != v83)
                      {
                        do
                        {
                          v90 = *(_OWORD *)(v82 - 24);
                          *((_QWORD *)v89 - 1) = *((_QWORD *)v82 - 1);
                          *(_OWORD *)(v89 - 24) = v90;
                          v89 -= 24;
                          v82 -= 24;
                        }
                        while (v82 != v83);
                        v82 = v83;
                      }
                      v5 = &v87[24 * v86];
                      v35 = (uint64_t)(v88 + 24);
                      *(_QWORD *)&v8 = v89;
                      if (v82)
                      {
                        v97 = v89;
                        operator delete(v82);
                        *(_QWORD *)&v8 = v97;
                        v16 = xmmword_19FFB3700;
                        v15 = xmmword_19FFB36F0;
                        v14 = xmmword_19FFB36E0;
                        v13 = xmmword_19FFB36D0;
                        v12 = xmmword_19FFB36C0;
                        v11 = xmmword_19FFB36B0;
                        v10 = xmmword_19FFB36A0;
                        v9 = xmmword_19FFB3590;
                      }
                      v7 = v96;
                      v17 = &off_19FFB1000;
                      v18 = &off_19FFB1000;
                      v34 = v100;
                    }
                    *((_QWORD *)&v8 + 1) = v35;
                  }
                  break;
                }
              }
            }
            v32 = 1;
            v33 = 1;
          }
          while ((v36 & 1) == 0);
          v31 = (float *)(&v116 + 2 * v99 + 2);
          v26 = 1;
        }
        while (v99 != 1);
        ++v25;
        v3 = this;
      }
      while (v25 != 13);
    }
    v4 += 12;
    v6 = v94;
  }
  while (v94 != 13);
  if (!*((_BYTE *)v3 + 128))
  {
LABEL_52:
    *(_OWORD *)((char *)v3 + 104) = v8;
    *((_QWORD *)v3 + 15) = v5;
    *((_BYTE *)v3 + 128) = 1;
    return v93;
  }
  v1 = v93;
  v91 = *v93;
  if (!*v93)
  {
    *(_OWORD *)((char *)v3 + 104) = v8;
    *((_QWORD *)v3 + 15) = v5;
    return v1;
  }
  *((_QWORD *)v3 + 14) = v91;
  v98 = v8;
  operator delete(v91);
  v92 = *((unsigned __int8 *)v3 + 128);
  *(_OWORD *)((char *)v3 + 104) = v98;
  *((_QWORD *)v3 + 15) = v5;
  if (!v92)
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_52;
  }
  return v1;
}

void sub_19F5180E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void gdc::ComponentStorageWrapper<arComponents::WorldBounds>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = (_QWORD *)a1[11];
  v16 = *(v15 - 6);
  v15 -= 6;
  *v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::WorldBounds>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<arComponents::WorldBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<arComponents::MapTileDataComponent>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LocalBounds>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::LocalBounds>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::LocalBounds>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::LocalBounds>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LocalBounds>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void **v22;
  int v23;
  _BYTE *v24;
  int v25;
  void *v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  int v37;
  void **v38;
  void **v39;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v49 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      v9 = a1[7];
      v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        v10 = HIDWORD(a2);
        v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == (_DWORD)v10)
        {
          v14 = a1[10];
          v15 = v14 + 168 * v7;
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
          v16 = a1[11];
          v17 = *(_OWORD *)(v16 - 168);
          v18 = *(_OWORD *)(v16 - 136);
          *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 - 152);
          *(_OWORD *)(v15 + 32) = v18;
          *(_OWORD *)v15 = v17;
          v19 = *(_OWORD *)(v16 - 120);
          v20 = *(_OWORD *)(v16 - 104);
          v21 = *(_OWORD *)(v16 - 88);
          *(_QWORD *)(v15 + 96) = *(_QWORD *)(v16 - 72);
          *(_OWORD *)(v15 + 64) = v20;
          *(_OWORD *)(v15 + 80) = v21;
          *(_OWORD *)(v15 + 48) = v19;
          v22 = (void **)(v15 + 104);
          v25 = *(unsigned __int8 *)(v15 + 128);
          v24 = (_BYTE *)(v15 + 128);
          v23 = v25;
          if (v25 == *(unsigned __int8 *)(v16 - 40))
          {
            if (v22 != (void **)(v16 - 64) && v23 != 0)
              std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>((uint64_t)v22, *(char **)(v16 - 64), *(char **)(v16 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 - 56) - *(_QWORD *)(v16 - 64)) >> 3));
          }
          else if (v23)
          {
            v27 = *v22;
            if (*v22)
            {
              *(_QWORD *)(v14 + 168 * v7 + 112) = v27;
              operator delete(v27);
            }
            *v24 = 0;
          }
          else
          {
            *v22 = 0;
            v22[1] = 0;
            v22[2] = 0;
            v29 = *(_BYTE **)(v16 - 64);
            v28 = *(_BYTE **)(v16 - 56);
            v30 = v28 - v29;
            if (v28 != v29)
            {
              if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) >= 0xAAAAAAAAAAAAAABLL)
                goto LABEL_49;
              v31 = v14 + 168 * v7;
              v32 = (_QWORD *)(v31 + 112);
              v48 = (_QWORD *)(v31 + 120);
              v33 = (char *)operator new(v30);
              *v22 = v33;
              *v32 = v33;
              *v48 = &v33[8 * (v30 >> 3)];
              memcpy(v33, v29, 24 * ((v30 - 24) / 0x18uLL) + 24);
              *v32 = &v33[24 * ((v30 - 24) / 0x18uLL) + 24];
            }
            *v24 = 1;
          }
          v34 = v14 + 168 * v7;
          v37 = *(unsigned __int8 *)(v34 + 160);
          v36 = (_BYTE *)(v34 + 160);
          v35 = v37;
          v38 = (void **)(v36 - 24);
          v39 = (void **)(v16 - 32);
          if (v37 == *(unsigned __int8 *)(v16 - 8))
          {
            if (v38 != v39 && v35 != 0)
              std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v36 - 24), *(_QWORD *)(v16 - 32), *(char **)(v16 - 24), (uint64_t)(*(_QWORD *)(v16 - 24) - *(_QWORD *)(v16 - 32)) >> 4);
          }
          else if (v35)
          {
            v41 = *v38;
            if (*v38)
            {
              *(_QWORD *)(v14 + 168 * v7 + 144) = v41;
              operator delete(v41);
            }
            *v36 = 0;
          }
          else
          {
            *v38 = 0;
            *((_QWORD *)v36 - 2) = 0;
            *((_QWORD *)v36 - 1) = 0;
            if (v38 != v39)
              std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)(v36 - 24), *(_QWORD *)(v16 - 32), *(char **)(v16 - 24), (uint64_t)(*(_QWORD *)(v16 - 24) - *(_QWORD *)(v16 - 32)) >> 4);
            *v36 = 1;
          }
          v42 = a1[11];
          if (*(_BYTE *)(v42 - 8))
          {
            v43 = *(void **)(v42 - 32);
            if (v43)
            {
              *(_QWORD *)(v42 - 24) = v43;
              operator delete(v43);
            }
          }
          if (*(_BYTE *)(v42 - 40))
          {
            v44 = *(void **)(v42 - 64);
            if (v44)
            {
              *(_QWORD *)(v42 - 56) = v44;
              operator delete(v44);
            }
          }
          a1[11] = v42 - 168;
          v45 = (_QWORD *)a1[28];
          if (!v45)
            return 1;
          v46 = a1[31];
          while (1)
          {
            v51[0] = &v49;
            v51[1] = 1;
            v50 = v46;
            v47 = v45[6];
            if (!v47)
              break;
            (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v47 + 48))(v47, &v50, v51);
            v45 = (_QWORD *)*v45;
            if (!v45)
              return 1;
          }
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_49:
          abort();
        }
      }
    }
  }
  return 0;
}

void sub_19F5187A0(_Unwind_Exception *exception_object)
{
  void **v1;
  unsigned int v2;
  uint64_t v3;
  void *v5;

  v5 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v3 + 168 * v2 + 144) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LocalBounds>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

char *std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  char *i;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_44;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_44:
      abort();
    v13 = 16 * v12;
    result = (char *)operator new(16 * v12);
    v14 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v15 = &v14[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    v16 = v15 - v14;
    v17 = (_QWORD *)(a1 + 8);
    goto LABEL_43;
  }
  v18 = *(char **)(a1 + 8);
  v17 = (_QWORD *)(a1 + 8);
  v14 = v18;
  v19 = v18 - result;
  v20 = (v18 - result) >> 4;
  if (v20 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      v25 = result;
    }
    else
    {
      v24 = (unint64_t)&a3[-a2 - 16];
      if (v24 >= 0x90)
      {
        v37 = (v24 & 0xFFFFFFFFFFFFFFF0) + 16;
        if ((unint64_t)result >= a2 + v37 || (unint64_t)&result[v37] <= a2)
        {
          v40 = (v24 >> 4) + 1;
          v41 = 16 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
          v25 = &result[v41];
          v42 = (__int128 *)(a2 + 32);
          v43 = result + 32;
          v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *(v42 - 2);
            v45 = *(v42 - 1);
            v48 = *v42;
            v47 = v42[1];
            v42 += 4;
            *(v43 - 2) = v46;
            *(v43 - 1) = v45;
            *v43 = v48;
            v43[1] = v47;
            v43 += 4;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
          v6 = (char *)(a2 + v41);
        }
        else
        {
          v25 = result;
        }
      }
      else
      {
        v25 = result;
      }
      do
      {
        *(_QWORD *)v25 = *(_QWORD *)v6;
        *((_QWORD *)v25 + 1) = *((_QWORD *)v6 + 1);
        v25 += 16;
        v6 += 16;
      }
      while (v6 != a3);
    }
LABEL_42:
    v16 = v25 - result;
    v14 = result;
    goto LABEL_43;
  }
  v21 = (char *)(a2 + 16 * v20);
  if (v14 != result)
  {
    v22 = v19 - 16;
    if ((unint64_t)(v19 - 16) >= 0x90)
    {
      v26 = v19 & 0xFFFFFFFFFFFFFFF0;
      if ((unint64_t)result < a2 + v26 && (unint64_t)&result[v26] > a2)
      {
        v23 = result;
      }
      else
      {
        v28 = (v22 >> 4) + 1;
        v29 = 16 * (v28 & 0x1FFFFFFFFFFFFFFCLL);
        v23 = &result[v29];
        v30 = (__int128 *)(a2 + 32);
        v31 = result + 32;
        v32 = v28 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(v30 - 2);
          v33 = *(v30 - 1);
          v36 = *v30;
          v35 = v30[1];
          v30 += 4;
          *(v31 - 2) = v34;
          *(v31 - 1) = v33;
          *v31 = v36;
          v31[1] = v35;
          v31 += 4;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
        v6 = (char *)(a2 + v29);
      }
    }
    else
    {
      v23 = result;
    }
    do
    {
      *(_QWORD *)v23 = *(_QWORD *)v6;
      *((_QWORD *)v23 + 1) = *((_QWORD *)v6 + 1);
      v6 += 16;
      v23 += 16;
    }
    while (v6 != v21);
  }
LABEL_34:
  for (i = v14; v21 != a3; i += 16)
  {
    v39 = *(_OWORD *)v21;
    v21 += 16;
    *(_OWORD *)i = v39;
  }
  v16 = i - v14;
LABEL_43:
  *v17 = &v14[v16];
  return result;
}

char *std::vector<gm::LineSegment<float,3>>::__assign_with_size[abi:nn180100]<gm::LineSegment<float,3>*,gm::LineSegment<float,3>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *i;
  __int128 v22;
  char *v23;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = *(char **)(a1 + 8);
    v17 = (_QWORD *)(a1 + 8);
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v23 = result;
      if (a2 != a3)
      {
        do
        {
          *(_DWORD *)v23 = *(_DWORD *)v6;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
          *((_DWORD *)v23 + 3) = *((_DWORD *)v6 + 3);
          *((_DWORD *)v23 + 4) = *((_DWORD *)v6 + 4);
          *((_DWORD *)v23 + 5) = *((_DWORD *)v6 + 5);
          v23 += 24;
          v6 += 24;
        }
        while (v6 != a3);
      }
      v16 = v23 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_DWORD *)result + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *((_DWORD *)result + 3) = *((_DWORD *)v6 + 3);
          *((_DWORD *)result + 4) = *((_DWORD *)v6 + 4);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      for (i = v14; v20 != a3; v20 += 24)
      {
        v22 = *(_OWORD *)v20;
        *((_QWORD *)i + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)i = v22;
        i += 24;
      }
      v16 = i - v14;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_24;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_24:
      abort();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = (_QWORD *)(a1 + 8);
  }
  *v17 = &v14[v16];
  return result;
}

_QWORD *geo::sparse_map<gdc::Entity,arComponents::LocalBounds>::~sparse_map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        if (*(_BYTE *)(v3 - 8))
        {
          v5 = *(void **)(v3 - 32);
          if (v5)
          {
            *(_QWORD *)(v3 - 24) = v5;
            operator delete(v5);
          }
        }
        if (*(_BYTE *)(v3 - 40))
        {
          v6 = *(void **)(v3 - 64);
          if (v6)
          {
            *(_QWORD *)(v3 - 56) = v6;
            operator delete(v6);
          }
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v7 = (void *)a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)*a1;
  if (*a1)
  {
    v9 = (_QWORD *)a1[1];
    v10 = (_QWORD *)*a1;
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x1A1AF4E00](v11, 0x1000C40104B78CFLL);
      }
      while (v9 != v8);
      v10 = (_QWORD *)*a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void md::DebugDrawContext::~DebugDrawContext(md::DebugDrawContext *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  char v38;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = (void *)*((_QWORD *)this + 13);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            v8 = *(_QWORD *)(v3 - 16);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v7 - 16) = v9;
                operator delete(v9);
              }
              v7 = v8;
            }
            while (v8 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    operator delete(v4);
  }
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    v12 = *((_QWORD *)this + 11);
    v13 = (void *)*((_QWORD *)this + 10);
    if (v12 != v11)
    {
      do
      {
        v15 = *(_QWORD *)(v12 - 24);
        if (v15)
        {
          v16 = *(_QWORD *)(v12 - 16);
          v14 = *(void **)(v12 - 24);
          if (v16 != v15)
          {
            do
            {
              v17 = v16 - 112;
              v18 = *(unsigned int *)(v16 - 8);
              if ((_DWORD)v18 != -1)
                ((void (*)(char *, uint64_t))off_1E42F6900[v18])(&v37, v16 - 112);
              *(_DWORD *)(v16 - 8) = -1;
              v16 -= 112;
            }
            while (v17 != v15);
            v14 = *(void **)(v12 - 24);
          }
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v14);
        }
        v12 -= 40;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v11;
    operator delete(v13);
  }
  v19 = (_QWORD *)*((_QWORD *)this + 7);
  if (v19)
  {
    do
    {
      v21 = (_QWORD *)*v19;
      v22 = v19[3];
      if (v22)
      {
        v23 = v19[4];
        v20 = (void *)v19[3];
        if (v23 != v22)
        {
          do
          {
            v25 = *(_QWORD *)(v23 - 24);
            if (v25)
            {
              v26 = *(_QWORD *)(v23 - 16);
              v24 = *(void **)(v23 - 24);
              if (v26 != v25)
              {
                do
                {
                  v27 = v26 - 56;
                  v28 = *(unsigned int *)(v26 - 4);
                  if ((_DWORD)v28 != -1)
                    ((void (*)(char *, uint64_t))off_1E42F68A0[v28])(&v38, v26 - 56);
                  *(_DWORD *)(v26 - 4) = -1;
                  v26 -= 56;
                }
                while (v27 != v25);
                v24 = *(void **)(v23 - 24);
              }
              *(_QWORD *)(v23 - 16) = v25;
              operator delete(v24);
            }
            v23 -= 40;
          }
          while (v23 != v22);
          v20 = (void *)v19[3];
        }
        v19[4] = v22;
        operator delete(v20);
      }
      operator delete(v19);
      v19 = v21;
    }
    while (v21);
  }
  v29 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v29)
    operator delete(v29);
  v30 = (_QWORD *)*((_QWORD *)this + 2);
  if (v30)
  {
    do
    {
      v33 = (_QWORD *)*v30;
      v34 = v30[3];
      if (v34)
      {
        v35 = v30[4];
        v32 = (void *)v30[3];
        if (v35 != v34)
        {
          do
          {
            v36 = *(void **)(v35 - 24);
            if (v36)
            {
              *(_QWORD *)(v35 - 16) = v36;
              operator delete(v36);
            }
            v35 -= 40;
          }
          while (v35 != v34);
          v32 = (void *)v30[3];
        }
        v30[4] = v34;
        operator delete(v32);
      }
      operator delete(v30);
      v30 = v33;
    }
    while (v33);
  }
  v31 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v31)
    operator delete(v31);
}

_QWORD *gdc::ManagedObjectHolder<md::ARPushDebugDrawItemsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v2;

  *a1 = &off_1E42B1338;
  v2 = (md::DebugDrawContext *)a1[4];
  if (v2)
  {
    md::DebugDrawContext::~DebugDrawContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARPushDebugDrawItemsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::DebugDrawContext *v1;

  *a1 = &off_1E42B1338;
  v1 = (md::DebugDrawContext *)a1[4];
  if (v1)
  {
    md::DebugDrawContext::~DebugDrawContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARPushDebugDrawItemsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t ggl::crc32::compute<29ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  return ggl::crc32::crc32Table[v25 ^ a1[27]] ^ ~(v25 >> 8);
}

uint64_t ggl::crc32::compute<31ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  v13 = ggl::crc32::crc32Table[v12 ^ a1[14]] ^ (v12 >> 8);
  v14 = ggl::crc32::crc32Table[v13 ^ a1[15]] ^ (v13 >> 8);
  v15 = ggl::crc32::crc32Table[v14 ^ a1[16]] ^ (v14 >> 8);
  v16 = ggl::crc32::crc32Table[v15 ^ a1[17]] ^ (v15 >> 8);
  v17 = ggl::crc32::crc32Table[v16 ^ a1[18]] ^ (v16 >> 8);
  v18 = ggl::crc32::crc32Table[v17 ^ a1[19]] ^ (v17 >> 8);
  v19 = ggl::crc32::crc32Table[v18 ^ a1[20]] ^ (v18 >> 8);
  v20 = ggl::crc32::crc32Table[v19 ^ a1[21]] ^ (v19 >> 8);
  v21 = ggl::crc32::crc32Table[v20 ^ a1[22]] ^ (v20 >> 8);
  v22 = ggl::crc32::crc32Table[v21 ^ a1[23]] ^ (v21 >> 8);
  v23 = ggl::crc32::crc32Table[v22 ^ a1[24]] ^ (v22 >> 8);
  v24 = ggl::crc32::crc32Table[v23 ^ a1[25]] ^ (v23 >> 8);
  v25 = ggl::crc32::crc32Table[v24 ^ a1[26]] ^ (v24 >> 8);
  v26 = ggl::crc32::crc32Table[v25 ^ a1[27]] ^ (v25 >> 8);
  v27 = ggl::crc32::crc32Table[v26 ^ a1[28]] ^ (v26 >> 8);
  return ggl::crc32::crc32Table[v27 ^ a1[29]] ^ ~(v27 >> 8);
}

uint64_t ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::SpecularLandmarkShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::SpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57D168 = &ggl::SpecularLandmark::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1EE57D170 = 0;
          if ((v95 & 1) == 0
          {
            ggl::SpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE57D1A0 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57D1A8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57D1B0 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57D1B8 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57D1C0 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57D1C8 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57D178 = (uint64_t)&ggl::SpecularLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1EE57D180 = xmmword_19FFB3710;
        }
      }
      ggl::SpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularLandmark::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::SpecularLandmarkShader::typedReflection(v90);
      qword_1ECE31530 = (uint64_t)&ggl::SpecularLandmarkShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57D330 = 0;
        qword_1EE57D338 = (uint64_t)"";
        dword_1EE57D340 = 0;
        qword_1EE57D348 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1EE57D350 = 3;
      }
      qword_1ECE31538 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31540 = 1;
      qword_1ECE31548 = 0;
      unk_1ECE31550 = 1;
      qword_1ECE31558 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31560 = 0;
      if ((v93 & 1) == 0
      {
        ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57D1E0 = 0;
        qword_1EE57D1E8 = (uint64_t)"skyfog";
        dword_1EE57D1F0 = 3;
        qword_1EE57D1F8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57D200 = xmmword_19FFB3720;
        qword_1EE57D210 = 1;
        unk_1EE57D218 = "view";
        dword_1EE57D220 = 3;
        qword_1EE57D228 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1EE57D230 = vdupq_n_s64(2uLL);
        qword_1EE57D240 = 2;
        unk_1EE57D248 = "scale";
        dword_1EE57D250 = 3;
        qword_1EE57D258 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57D260 = xmmword_19FFB3730;
        qword_1EE57D270 = 3;
        unk_1EE57D278 = "style";
        dword_1EE57D280 = 3;
        qword_1EE57D288 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57D290 = xmmword_19FFB3740;
        qword_1EE57D2A0 = 4;
        unk_1EE57D2A8 = "gradient";
        dword_1EE57D2B0 = 3;
        qword_1EE57D2B8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57D2C0 = xmmword_19FFB3670;
        qword_1EE57D2D0 = 5;
        unk_1EE57D2D8 = "lightConfig";
        dword_1EE57D2E0 = 3;
        qword_1EE57D2E8 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57D2F0 = xmmword_19FFB3750;
        qword_1EE57D300 = 6;
        unk_1EE57D308 = "fade";
        dword_1EE57D310 = 3;
        qword_1EE57D318 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57D320 = 2;
      }
      qword_1ECE31568 = (uint64_t)&ggl::SpecularLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1ECE31570 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::SpecularLandmark::LandmarkPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B8AD0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::SpecularLandmark::LandmarkPipelineSetup::~LandmarkPipelineSetup(ggl::SpecularLandmark::LandmarkPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SpecularLandmark::LandmarkPipelineSetup::constantDataIsEnabled(ggl::SpecularLandmark::LandmarkPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::SpecularLandmark::LandmarkPipelineSetup::textureIsEnabled(ggl::SpecularLandmark::LandmarkPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19F519F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F51A228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_19F51A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19F51A6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F51A8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19F51A9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F51AA38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F51AC2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void altitude::C3mmRequestManager::~C3mmRequestManager(altitude::C3mmRequestManager *this)
{
  altitude::C3mmRequestManager::~C3mmRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42C5300;
  v2 = (_QWORD *)((char *)this + 104);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 13));
  *((_QWORD *)this + 12) = v2;
  *((_QWORD *)this + 14) = 0;
  *v2 = 0;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 21));
  v3 = *((_QWORD *)this + 21);
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 21) = 0;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 13));
  *(_QWORD *)this = off_1E42C3150;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::C3mmRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[8];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[9];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F51AF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[8] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::clearRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[8] + 16))(v5[8]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F51B12C(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::C3mmRequestManager::createRequest@<X0>(_QWORD *result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a3)
  {
    v7 = result;
    v8 = operator new();
    v9 = v7[4];
    v10 = v7[17];
    v11 = karo::Job::Job(v8, v9);
    *(_BYTE *)(v11 + 176) = 0;
    *(_QWORD *)(v11 + 180) = 0xFFFFFFFF00000000;
    *(_QWORD *)v11 = &off_1E42C4480;
    v12 = a2[1];
    *(_OWORD *)(v11 + 188) = *a2;
    *(_OWORD *)(v11 + 204) = v12;
    v13 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v11 + 224) = *(_QWORD *)a3;
    *(_QWORD *)(v11 + 232) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_QWORD *)(v8 + 240) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(v8 + 248) = *(_DWORD *)(a3 + 24);
    *(_QWORD *)(v8 + 256) = v10;
    *a4 = v8;
    result = (_QWORD *)operator new();
    *result = &off_1E42E8718;
    result[1] = 0;
    result[2] = 0;
    result[3] = v8;
    a4[1] = (uint64_t)result;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

void sub_19F51B2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 64);
      v12 = *(_DWORD *)(v8 + 68);
      v13 = *(_BYTE *)(v8 + 72);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 80;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F51B480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F51B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v35, a1, a2, a3);
    v16 = v35;
    v15 = v36;
    *a4 = v35;
    a4[1] = (uint64_t *)v15;
    v17 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v35, (unsigned int *)a2);
    v18 = *v17;
    if (!*v17)
    {
      v19 = v17;
      v18 = (uint64_t)operator new(0x50uLL);
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 48) = v20;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      v21 = v35;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v21;
      *v19 = v18;
      v22 = (_QWORD *)**v8;
      v23 = (uint64_t *)v18;
      if (v22)
      {
        *v8 = v22;
        v23 = (uint64_t *)*v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v23);
      ++a1[10];
    }
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = *(std::__shared_weak_count **)(v18 + 72);
    *(_QWORD *)(v18 + 64) = v16;
    *(_QWORD *)(v18 + 72) = v15;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = a1[6];
    if (v29)
    {
      v30 = *a4;
      v31 = (std::__shared_weak_count *)a4[1];
      v35 = v30;
      v36 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        karo::JobManager::queueJob(v29, &v35);
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        karo::JobManager::queueJob(v29, &v35);
      }
    }
  }
  else
  {
    v12 = v9[8];
    v11 = v9[9];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

void sub_19F51B7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(uint64_t a1, unsigned int *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_DWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = a2[4];
  v5 = a2[5];
  v8 = a2[6];
  v7 = a2[7];
  v10 = *a2;
  v9 = a2[1];
  v11 = v2;
  v12 = a2[2];
  do
  {
    while (1)
    {
      v13 = *((_DWORD *)v3 + 12);
      if (v13 == v6 && *((_DWORD *)v3 + 13) == v5 && *((_DWORD *)v3 + 14) == v8 && v7 == *((_DWORD *)v3 + 15))
        break;
      if (v13 < v6)
        goto LABEL_3;
      if (v13 > v6)
        goto LABEL_21;
      v17 = *((_DWORD *)v3 + 13);
      if (v17 < v5)
        goto LABEL_3;
      if (v17 > v5)
        goto LABEL_21;
      v18 = *((_DWORD *)v3 + 14);
      if (v18 < v8)
        goto LABEL_3;
      if (v18 > v8)
        goto LABEL_21;
      v15 = *((_DWORD *)v3 + 15) >= v7;
LABEL_19:
      if (v15)
        goto LABEL_21;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_22;
    }
    v14 = *((_DWORD *)v3 + 8);
    v15 = v14 >= v10;
    if (v14 != v10)
      goto LABEL_19;
    v16 = *((_DWORD *)v3 + 9);
    v15 = v16 >= v9;
    if (v16 != v9)
      goto LABEL_19;
    if (*((_DWORD *)v3 + 10) < v12)
      goto LABEL_3;
LABEL_21:
    v11 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2)
    return v2;
  v19 = v11[12];
  if (v6 != v19 || v5 != v11[13] || v8 != v11[14] || v11[15] != v7)
  {
    if (v6 < v19)
      return v2;
    if (v6 > v19)
      return v11;
    v23 = v11[13];
    if (v5 < v23)
      return v2;
    if (v5 > v23)
      return v11;
    v24 = v11[14];
    if (v8 < v24)
      return v2;
    if (v8 > v24)
      return v11;
    v21 = v7 >= v11[15];
    goto LABEL_38;
  }
  v20 = v11[8];
  v21 = v10 >= v20;
  if (v10 != v20 || (v22 = v11[9], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21)
      return v2;
    return v11;
  }
  if (v12 >= v11[10])
    return v11;
  return v2;
}

uint64_t *std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[4];
    v7 = a3[5];
    v8 = a3[6];
    v9 = a3[7];
    v10 = *a3;
    v11 = a3[1];
    v12 = a3[2];
    while (1)
    {
      v13 = v4;
      v14 = *((_DWORD *)v4 + 12);
      if (v6 == v14 && v7 == *((_DWORD *)v13 + 13) && v8 == *((_DWORD *)v13 + 14) && *((_DWORD *)v13 + 15) == v9)
      {
        v15 = *((_DWORD *)v13 + 8);
        v16 = v10 >= v15;
        if (v10 == v15 && (v17 = *((_DWORD *)v13 + 9), v16 = v11 >= v17, v11 == v17))
        {
          if (v12 >= *((_DWORD *)v13 + 10))
            goto LABEL_25;
        }
        else if (v16)
        {
          goto LABEL_25;
        }
LABEL_3:
        v4 = (uint64_t *)*v13;
        result = v13;
        if (!*v13)
          goto LABEL_40;
      }
      else
      {
        if (v6 < v14)
          goto LABEL_3;
        if (v6 <= v14)
        {
          v18 = *((_DWORD *)v13 + 13);
          if (v7 < v18)
            goto LABEL_3;
          if (v7 <= v18)
          {
            v19 = *((_DWORD *)v13 + 14);
            if (v8 < v19 || v8 <= v19 && v9 < *((_DWORD *)v13 + 15))
              goto LABEL_3;
          }
        }
        if (v6 != v14 || *((_DWORD *)v13 + 13) != v7 || *((_DWORD *)v13 + 14) != v8)
        {
LABEL_32:
          if (v14 >= v6)
          {
            if (v14 > v6)
              goto LABEL_40;
            v23 = *((_DWORD *)v13 + 13);
            if (v23 >= v7)
            {
              if (v23 > v7)
                goto LABEL_40;
              v24 = *((_DWORD *)v13 + 14);
              if (v24 >= v8 && (v24 > v8 || *((_DWORD *)v13 + 15) >= v9))
                goto LABEL_40;
            }
          }
          goto LABEL_39;
        }
LABEL_25:
        if (v9 != *((_DWORD *)v13 + 15))
          goto LABEL_32;
        v20 = *((_DWORD *)v13 + 8);
        v21 = v20 >= v10;
        if (v20 == v10)
        {
          v22 = *((_DWORD *)v13 + 9);
          v21 = v22 >= v11;
          if (v22 == v11)
            v21 = *((_DWORD *)v13 + 10) >= v12;
        }
        if (v21)
        {
LABEL_40:
          *a2 = v13;
          return result;
        }
LABEL_39:
        result = v13 + 1;
        v4 = (uint64_t *)v13[1];
        if (!v4)
          goto LABEL_40;
      }
    }
  }
  *a2 = result;
  return result;
}

uint64_t std::shared_ptr<karo::Job>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,altitude::C3mmRequestArgs>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 8);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_19F51BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t karo::Job::waitToFinish(karo::Job *this, unsigned int a2)
{
  int v4;
  NSObject *v5;
  int v6;
  timespec v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(*((pthread_mutex_t **)this + 17));
  if (a2)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v4 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v4 & 1) == 0)
    {
      v8.tv_sec = a2 / 0x3E8uLL;
      v8.tv_nsec = 1000000 * (a2 - 1000 * (a2 / 0x3E8));
      pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 18), *((pthread_mutex_t **)this + 17), &v8);
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v5 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *((_DWORD *)this + 5);
      LODWORD(v8.tv_sec) = 67109120;
      HIDWORD(v8.tv_sec) = v6;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Should not wait indefinitely on job: %u", (uint8_t *)&v8, 8u);
    }

  }
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 17));
}

_QWORD *std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  void (***v29)(char *);
  void (**v30)(char *);
  BOOL v31;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = 24 * v6;
  v10 = (char *)operator new(24 * v6);
  v11 = &v10[24 * v3];
  *(_QWORD *)v11 = &off_1E42C2D08;
  *((_QWORD *)v11 + 1) = a2;
  *((_QWORD *)v11 + 2) = a3;
  if (a3)
  {
    v12 = (unint64_t *)(a3 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (a2)
  {
    v14 = (unsigned int *)(a2 + 128);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = &v10[v9];
  v17 = v11 + 24;
  v18 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v11;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19)
      return v17;
    goto LABEL_30;
  }
  v20 = &v10[24 * v3];
  do
  {
    *((_QWORD *)v20 - 3) = &off_1E42C2D08;
    v20 -= 24;
    v21 = *((_QWORD *)v19 - 2);
    v22 = *((_QWORD *)v19 - 1);
    *((_QWORD *)v20 + 1) = v21;
    *((_QWORD *)v20 + 2) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v21 = *((_QWORD *)v11 - 2);
    }
    if (v21)
    {
      v25 = (unsigned int *)(v21 + 128);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    v19 -= 24;
    v11 = v20;
  }
  while (v19 != v18);
  v19 = (char *)*a1;
  v27 = (char *)a1[1];
  *a1 = v20;
  a1[1] = v17;
  a1[2] = v16;
  if (v27 != v19)
  {
    v28 = v27 - 24;
    v29 = (void (***)(char *))(v27 - 24);
    do
    {
      v30 = *v29;
      v29 -= 3;
      (*v30)(v28);
      v31 = v28 == v19;
      v28 = (char *)v29;
    }
    while (!v31);
  }
  if (v19)
LABEL_30:
    operator delete(v19);
  return v17;
}

void std::__shared_ptr_pointer<altitude::C3mmAreaLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3mmAreaLoadJob>,std::allocator<altitude::C3mmAreaLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::C3mmAreaLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3mmAreaLoadJob>,std::allocator<altitude::C3mmAreaLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::C3mmAreaLoadJob::~C3mmAreaLoadJob(altitude::C3mmAreaLoadJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4480;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4480;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::C3mmAreaLoadJob::jobStep(altitude::C3mmAreaLoadJob *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  pthread_mutex_t **v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint32_t v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  std::mutex *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  NSObject *v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  float v47;
  double v48;
  double v49;
  float v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  void *v58;
  _BOOL4 v59;
  NSObject *v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  char RootBounds;
  int ***v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  float v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  float v79;
  uint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  int v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _DWORD *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  void *v145;
  NSObject *v146;
  NSObject *v147;
  const char *v148;
  char *v149;
  char *shared_owners;
  unint64_t *v151;
  unint64_t v152;
  NSObject *v153;
  NSObject *v154;
  std::__shared_weak_count *v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  char v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD v184[2];
  void (**v185)(karo::AsyncFileLoader::FileObject *__hidden);
  uint64_t v186;
  std::__shared_weak_count *v187;
  pthread_mutex_t **v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  int v191;
  _QWORD v192[2];
  __int128 v193;
  unint64_t v194;
  _QWORD v195[2];
  __int128 v196;
  unint64_t v197;
  _QWORD v198[2];
  __int128 v199;
  unint64_t v200;
  _QWORD v201[2];
  __int128 v202;
  unint64_t v203;
  int **v204[2];
  __int128 v205;
  unint64_t v206;
  char **v207[2];
  std::__shared_weak_count *v208;
  char **v209;
  __int128 v210;
  unint64_t v211;
  __int128 v212;
  unint64_t v213;
  uint8_t v214[32];
  _BYTE buf[24];
  uint64_t v216;

  v2 = (char *)this + 188;
  v216 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v3 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v3 & 2) != 0)
      goto LABEL_326;
    v4 = *((_QWORD *)this + 32);
    v5 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
    v6 = atomic_load((unsigned int *)this + 4);
    (*(void (**)(void (***__return_ptr)(karo::AsyncFileLoader::FileObject *__hidden), uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(&v185, v4, v2, v5, v6, 0xFFFFFFFFLL, 1);
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v185) == 4)
      break;
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v185))
    {
      v155 = v187;
      v184[0] = v186;
      v184[1] = v187;
      if (v187)
      {
        p_shared_owners = (unint64_t *)&v187->__shared_owners_;
        do
          v157 = __ldxr(p_shared_owners);
        while (__stxr(v157 + 1, p_shared_owners));
        karo::Job::addBlockingSubJob((uint64_t *)this, v184, 1, 0);
        do
          v158 = __ldaxr(p_shared_owners);
        while (__stlxr(v158 - 1, p_shared_owners));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v184, 1, 0);
      }
      v185 = &off_1E42C2C18;
      v159 = v189;
      if (v189)
      {
        v160 = (unint64_t *)&v189->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      v185 = &off_1E42C2D08;
      if (v186)
      {
        v162 = (unsigned int *)(v186 + 128);
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
      }
      v164 = v187;
      if (v187)
      {
        v165 = (unint64_t *)&v187->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      return;
    }
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v10 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = *((_DWORD *)this + 52);
      v11 = *((_DWORD *)this + 53);
      v13 = *((_DWORD *)this + 51);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v11;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v13;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Failed to load file %u %u %u", buf, 0x14u);
    }

    (*(void (**)(altitude::C3mmAreaLoadJob *))(*(_QWORD *)this + 16))(this);
LABEL_36:
    v185 = &off_1E42C2C18;
    v28 = v189;
    if (v189)
    {
      v29 = (unint64_t *)&v189->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v185 = &off_1E42C2D08;
    if (v186)
    {
      v31 = (unsigned int *)(v186 + 128);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
    }
    v33 = v187;
    if (v187)
    {
      v34 = (unint64_t *)&v187->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  v7 = v188;
  pthread_mutex_lock(v188[19]);
  v8 = *((_DWORD *)v7 + 40);
  pthread_mutex_unlock(v7[19]);
  if ((v8 & 1) != 0)
    v9 = (*(uint64_t (**)(pthread_mutex_t **))&(*v188)->__opaque[48])(v188);
  else
    v9 = 0;
  v14 = (*(unsigned int (**)(pthread_mutex_t **))&(*v188)->__opaque[40])(v188);
  v16 = *((_QWORD *)this + 28);
  v17 = *((_QWORD *)this + 30);
  v18 = *((_DWORD *)this + 62);
  v190 = v17;
  v191 = v18;
  if (v14 < 6 || *(_BYTE *)v9 != 67 || *(_BYTE *)(v9 + 1) != 51 || *(_BYTE *)(v9 + 2) != 77 || *(_BYTE *)(v9 + 3) != 77)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v20 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
LABEL_28:
    *(_WORD *)buf = 0;
    v21 = v20;
    v22 = "Invalid c3mm file!";
    v23 = 2;
    goto LABEL_29;
  }
  v19 = *(unsigned __int16 *)(v9 + 4);
  if (v19 == 2)
  {
    if (v14 <= 0xB)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v36 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v214 = 134218240;
        *(_QWORD *)&v214[4] = v14;
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 12;
        _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "Invalid c3mm file, size (%zu) is less than header size (%d)", v214, 0x12u);
      }

      goto LABEL_31;
    }
    v177 = *(_DWORD *)(v9 + 8);
    v42 = *(unsigned __int16 *)(v9 + 6);
    std::mutex::lock((std::mutex *)(v16 + 208));
    *(_WORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = v42;
    v44 = *(_DWORD **)(v16 + 120);
    v43 = *(_DWORD **)(v16 + 128);
    if (v44 != v43)
      goto LABEL_63;
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = v14;
    *(_QWORD *)&buf[16] = 12;
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v41 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v214 = 0;
        _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_ERROR, "Meta levels are not defined", v214, 2u);
      }
      goto LABEL_149;
    }
    v44 = *(_DWORD **)(v16 + 120);
    v43 = *(_DWORD **)(v16 + 128);
    if (v44 == v43)
    {
LABEL_65:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v45 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v214 = 0;
        _os_log_impl(&dword_19F029000, v45, OS_LOG_TYPE_ERROR, "No meta level for file index", v214, 2u);
      }

      v44 = 0;
    }
    else
    {
LABEL_63:
      while (*v44 != (_DWORD)v17)
      {
        v44 += 3;
        if (v44 == v43)
          goto LABEL_65;
      }
    }
    v46 = (std::__shared_weak_count *)operator new(0x50uLL);
    v46->__shared_owners_ = 0;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5E68;
    *(_OWORD *)&v46[1].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v46[2].__shared_owners_ = 0u;
    v46[3].__vftable = 0;
    v46[1].std::__shared_count = 0u;
    v208 = v46 + 1;
    v209 = (char **)v46;
    if (v44)
    {
      if (v177)
      {
        v51 = 0;
        v176 = 0;
        v52 = 12;
        v179 = v177;
        while (1)
        {
          v53 = v52;
          if (v52 < v14)
          {
            v53 = v52 + 1;
            v179 = *(_BYTE *)(v9 + v52);
          }
          v54 = v53 + 4;
          if (v53 + 4 <= v14)
          {
            LODWORD(v175) = *(_DWORD *)(v9 + v53);
            v53 += 4;
          }
          v55 = v53 + 1;
          if (v53 + 1 <= v14)
            v176 = *(unsigned __int8 *)(v9 + v53++);
          if (v53 + 4 > v14)
          {
LABEL_150:
            v56 = 0;
            goto LABEL_242;
          }
          v183 = v53 + 4;
          v181 = v51;
          v56 = 0;
          if (v52 >= v14 || v54 > v14 || v55 > v14)
            goto LABEL_242;
          v57 = *(unsigned int *)(v9 + v53);
          v58 = (void *)(v9 + v183);
          memset(v214, 0, 24);
          v178 = (v175 - 10);
          if (v176 == 1)
          {
            std::vector<unsigned char>::resize((uint64_t)v214, v57);
            v59 = lzma_decompress_bytes();
            v58 = *(void **)v214;
            if (!v59)
              goto LABEL_91;
            if (*(_QWORD *)&v214[8] - *(_QWORD *)v214 != v57)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v60 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v212) = 0;
                _os_log_impl(&dword_19F029000, v60, OS_LOG_TYPE_ERROR, "Mismatching c3mm data size", (uint8_t *)&v212, 2u);
              }

LABEL_91:
              v61 = 1;
              v52 = v183;
              goto LABEL_126;
            }
          }
          else
          {
            v57 = (v175 - 10);
          }
          *(_QWORD *)&v212 = v58;
          *((_QWORD *)&v212 + 1) = v57;
          v213 = 0;
          switch(v179)
          {
            case 0:
              v210 = v212;
              v211 = v213;
              v207[0] = (char **)v208;
              v207[1] = v209;
              if (v209)
              {
                v62 = (unint64_t *)(v209 + 1);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
              v65 = (int ***)v207;
              goto LABEL_121;
            case 1:
              v205 = v212;
              v206 = v213;
              v204[0] = (int **)v208;
              v204[1] = (int **)v209;
              if (v209)
              {
                v69 = (unint64_t *)(v209 + 1);
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
              }
              v65 = v204;
              goto LABEL_121;
            case 2:
              v75 = *(float *)&v212;
              v202 = v212;
              v203 = v213;
              v76 = (uint64_t)v208;
              v201[0] = v208;
              v201[1] = v209;
              if (v209)
              {
                v77 = (unint64_t *)(v209 + 1);
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
              }
              v65 = (int ***)v201;
              goto LABEL_121;
            case 3:
                goto LABEL_122;
              goto LABEL_110;
            case 5:
              v79 = *(float *)&v212;
              v199 = v212;
              v200 = v213;
              v80 = (uint64_t *)v208;
              v198[0] = v208;
              v198[1] = v209;
              if (v209)
              {
                v81 = (unint64_t *)(v209 + 1);
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
              }
              v65 = (int ***)v198;
              goto LABEL_121;
            case 6:
              v196 = v212;
              v197 = v213;
              v66 = &v208->__vftable;
              v195[0] = v208;
              v195[1] = v209;
              if (v209)
              {
                v67 = (unint64_t *)(v209 + 1);
                do
                  v68 = __ldxr(v67);
                while (__stxr(v68 + 1, v67));
              }
              v65 = (int ***)v195;
LABEL_121:
              std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v65);
              if ((RootBounds & 1) != 0)
                goto LABEL_122;
              goto LABEL_110;
            case 7:
              v193 = v212;
              v194 = v213;
              v71 = (uint64_t)v208;
              v192[0] = v208;
              v192[1] = v209;
              if (v209)
              {
                v72 = (unint64_t *)(v209 + 1);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v192);
              if (v74)
                goto LABEL_122;
LABEL_110:
              v61 = 1;
              v52 = v183;
              break;
            default:
LABEL_122:
              v61 = 0;
              if (v183 + v178 >= v14)
                v52 = v14;
              else
                v52 = v183 + v178;
              break;
          }
          v58 = *(void **)v214;
LABEL_126:
          if (v58)
          {
            v83 = v58;
            v84 = v61;
            operator delete(v83);
            v61 = v84;
          }
          if (v61)
            goto LABEL_150;
          v51 = v181 + 1;
          if (v181 + 1 == v177)
          {
            LODWORD(v17) = v190;
            break;
          }
        }
      }
      if (!(_DWORD)v17)
      {
        v149 = (char *)v208->__vftable;
        shared_owners = (char *)v208->__shared_owners_;
        if ((char *)v208->__vftable != shared_owners)
        {
          do
          {
            std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>((uint64_t *)(v16 + 16), (unsigned int *)v149, (uint64_t)v149);
            v149 += 24;
          }
          while (v149 != shared_owners);
        }
      }
      karo::media::C3mmArea::insertFile(v16, &v190, (uint64_t *)&v208);
      v56 = 1;
LABEL_242:
      v46 = (std::__shared_weak_count *)v209;
      if (!v209)
      {
LABEL_247:
        std::mutex::unlock((std::mutex *)(v16 + 208));
        if ((v56 & 1) != 0)
          goto LABEL_313;
        goto LABEL_31;
      }
    }
    else
    {
      v56 = 0;
    }
    v151 = (unint64_t *)&v46->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    goto LABEL_247;
  }
  if (v19 != 1)
  {
LABEL_31:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v24 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v26 = *((_DWORD *)this + 52);
      v25 = *((_DWORD *)this + 53);
      v27 = *((_DWORD *)this + 51);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v25;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v27;
      _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "Error reading meta data loaded from %u %u %u", buf, 0x14u);
    }

    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 32) + 120))(*((_QWORD *)this + 32), v2);
    (*(void (**)(altitude::C3mmAreaLoadJob *))(*(_QWORD *)this + 16))(this);
    goto LABEL_36;
  }
  if (v14 <= 0x1A)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v20 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 27;
    v21 = v20;
    v22 = "Invalid c3mm file, size (%zu) is less than header size (%d)";
    v23 = 18;
LABEL_29:
    _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, v22, buf, v23);
LABEL_30:

    goto LABEL_31;
  }
  v15.i32[0] = *(_DWORD *)v9;
  if (vmovn_s16((int16x8_t)vmovl_u8(v15)).u32[0] != 1296905027)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v20 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    goto LABEL_28;
  }
  v37 = (std::mutex *)(v16 + 208);
  std::mutex::lock((std::mutex *)(v16 + 208));
  v39 = *(_DWORD *)(v9 + 6);
  v40 = *(unsigned __int8 *)(v9 + 10);
  *(_WORD *)v16 = *(_WORD *)(v9 + 4);
  *(_DWORD *)(v16 + 4) = v39;
  *(_DWORD *)(v16 + 44) = v40;
  if (v40 >= 2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v41 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_ERROR, "Invalid file type!", buf, 2u);
    }
LABEL_149:

    std::mutex::unlock((std::mutex *)(v16 + 208));
    goto LABEL_31;
  }
  v85 = *(_QWORD *)(v9 + 11);
  v86 = *(_DWORD *)(v9 + 19);
  v87 = *(unsigned int *)(v9 + 23);
  memset(v214, 0, 24);
  v88 = v9 + 27;
  v89 = v14 - 27;
  if (v86 != (_DWORD)v87)
  {
    v90 = v87;
    std::vector<unsigned char>::resize((uint64_t)v214, v87);
    if (!lzma_decompress_bytes())
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v153 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v153, OS_LOG_TYPE_ERROR, "Failed to load c3mm lzma chunk!", buf, 2u);
      }
      goto LABEL_263;
    }
    v88 = *(_QWORD *)v214;
    v89 = v90;
  }
  *(_QWORD *)&v212 = v88;
  *((_QWORD *)&v212 + 1) = v89;
  v213 = 0;
  if ((_DWORD)v17 || !v89)
  {
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v37 = (std::mutex *)(v16 + 208);
      v153 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v153, OS_LOG_TYPE_ERROR, "Failed to load C3MM data section", buf, 2u);
      }
    }
    else
    {
LABEL_153:
      v92 = *(_QWORD *)(v16 + 72);
      v37 = (std::mutex *)(v16 + 208);
      if (v17 < (unint64_t)((*(_QWORD *)(v16 + 80) - v92) >> 5))
      {
        *(_QWORD *)(v92 + 32 * v17) = v85;
        v93 = 1;
        goto LABEL_284;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v153 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v153, OS_LOG_TYPE_ERROR, "C3MM file index is missing", buf, 2u);
      }
    }
LABEL_263:

    goto LABEL_283;
  }
  v91 = 0;
  while (2)
  {
    v95 = v91 + 5;
    if (v91 + 5 > v89)
    {
      v93 = 0;
      v37 = (std::mutex *)(v16 + 208);
      goto LABEL_284;
    }
    v180 = v91 + 5;
    v182 = v89;
    v96 = *(unsigned __int8 *)(v212 + v91);
    v213 = v95;
    v97 = v212 + v95;
    v98 = (_DWORD *)(v212 + v95 - 4);
    v94 = (*v98 - 5);
    *(_QWORD *)&v210 = v212 + v95;
    *((_QWORD *)&v210 + 1) = v94;
    v211 = 0;
    switch(v96)
    {
      case 0:
        if (!(_DWORD)v94)
          goto LABEL_156;
        v99 = 0;
        v175 = v212 + v95 - 4;
        while (2)
        {
          *(_DWORD *)&buf[12] = 0;
          v100 = v99 + 4;
          if (v99 + 4 > v94)
          {
            v101 = v99 + 4;
          }
          else
          {
            v38 = *(unsigned int *)(v97 + v99);
            v101 = v99 + 8;
            v99 += 4;
          }
          v102 = v101;
          if (v101 <= v94)
          {
            v177 = *(_DWORD *)((char *)v98 + v101);
            v102 = v101 + 4;
            v99 = v101;
          }
          v103 = v102;
          if (v102 <= v94)
          {
            LODWORD(v178) = *(_DWORD *)((char *)v98 + v102);
            v103 = v102 + 4;
            v99 = v102;
          }
          if (v103 <= v94)
          {
            LODWORD(v183) = *(_DWORD *)((char *)v98 + v103);
            v99 = v103;
          }
          if (v99 + 1 > v94)
          {
            v211 = v99;
          }
          else
          {
            if (v100 <= v94 && v101 <= v94 && v102 <= v94 && v103 <= v94)
            {
              v104 = *(unsigned __int8 *)(v97 + v99);
              *(_DWORD *)buf = v38;
              *(_DWORD *)&buf[4] = v177;
              *(_DWORD *)&buf[8] = v178;
              *(_DWORD *)&buf[16] = v183;
              *(_DWORD *)&buf[20] = v104;
              if (v104 < 2)
              {
                v105 = v99 + 1;
                v106 = *(_DWORD *)(v16 + 96);
                v107 = v38;
                if (v38 < v106)
                  v106 = v38;
                *(_DWORD *)(v16 + 96) = v106;
                std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>((uint64_t *)(v16 + 16), (unsigned int *)buf, (uint64_t)buf);
                v99 = v105;
                v38 = v107;
                v98 = (_DWORD *)v175;
                if (v105 >= v94)
                  goto LABEL_156;
                continue;
              }
              v211 = v99 + 1;
              v37 = (std::mutex *)(v16 + 208);
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v154 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v205) = 0;
                _os_log_impl(&dword_19F029000, v154, OS_LOG_TYPE_ERROR, "Unknown structure type in root!", (uint8_t *)&v205, 2u);
              }

LABEL_277:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v146 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (!os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
                goto LABEL_282;
              *(_WORD *)buf = 0;
              v147 = v146;
              v148 = "Failed to load C3MM root index";
LABEL_281:
              _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_ERROR, v148, buf, 2u);
              goto LABEL_282;
            }
            v211 = v99 + 1;
          }
          break;
        }
        v37 = (std::mutex *)(v16 + 208);
        goto LABEL_277;
      case 1:
        {
          v94 = 0;
          v180 = v213;
          v182 = *((_QWORD *)&v212 + 1);
LABEL_156:
          v89 = v182;
          if (v180 + v94 >= v182)
            v91 = v182;
          else
            v91 = v180 + v94;
          v213 = v91;
          if (v182 <= v180 + v94)
            goto LABEL_153;
          continue;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v37 = (std::mutex *)(v16 + 208);
        v146 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v147 = v146;
          v148 = "Failed to load C3MM data section";
          goto LABEL_281;
        }
LABEL_282:

LABEL_283:
        v93 = 0;
LABEL_284:
        if (*(_QWORD *)v214)
          operator delete(*(void **)v214);
        std::mutex::unlock(v37);
        if (!v93)
          goto LABEL_31;
LABEL_313:
        v185 = &off_1E42C2C18;
        v167 = v189;
        if (v189)
        {
          v168 = (unint64_t *)&v189->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        v185 = &off_1E42C2D08;
        if (v186)
        {
          v170 = (unsigned int *)(v186 + 128);
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
        }
        v172 = v187;
        if (v187)
        {
          v173 = (unint64_t *)&v187->__shared_owners_;
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 - 1, v173));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
          }
        }
LABEL_326:
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        return;
      case 2:
        if (!(_DWORD)v94)
          goto LABEL_156;
        v108 = 0;
        v109 = v94;
        v183 = v94;
        while (2)
        {
          v111 = v108 + 4;
          if (v111 > v109)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v37 = (std::mutex *)(v16 + 208);
            v146 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (!os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
              goto LABEL_282;
            *(_WORD *)buf = 0;
            v147 = v146;
            v148 = "Failed to load C3MM file index";
            goto LABEL_281;
          }
          v211 = v111;
          v112 = *(_DWORD *)(v210 + v111 - 4);
          v114 = *(char **)(v16 + 56);
          v113 = *(_QWORD *)(v16 + 64);
          if ((unint64_t)v114 >= v113)
          {
            v116 = *(char **)(v16 + 48);
            v117 = v114 - v116;
            v118 = (v114 - v116) >> 2;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 62)
              break;
            v120 = v113 - (_QWORD)v116;
            if (v120 >> 1 > v119)
              v119 = v120 >> 1;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              v177 = (_DWORD)v114 - (_DWORD)v116;
              LODWORD(v178) = v112;
              if (v121 >> 62)
                goto LABEL_329;
              v122 = v121;
              v123 = operator new(4 * v121);
              v121 = v122;
              v112 = v178;
              v117 = v114 - v116;
            }
            else
            {
              v123 = 0;
            }
            v124 = &v123[4 * v118];
            *v124 = v112;
            v115 = v124 + 1;
            if (v114 != v116)
            {
              v125 = v114 - 4 - v116;
              if (v125 < 0x2C)
                goto LABEL_332;
              if ((unint64_t)(v114 - &v123[v117]) < 0x20)
                goto LABEL_332;
              v126 = (v125 >> 2) + 1;
              v38 = (uint64_t)&v123[4 * v118 - 16];
              v127 = v114 - 16;
              v128 = v126 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v129 = *(_OWORD *)v127;
                *(_OWORD *)(v38 - 16) = *((_OWORD *)v127 - 1);
                *(_OWORD *)v38 = v129;
                v38 -= 32;
                v127 -= 32;
                v128 -= 8;
              }
              while (v128);
              v124 -= v126 & 0x7FFFFFFFFFFFFFF8;
              v114 -= 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
              if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_332:
                do
                {
                  v130 = *((_DWORD *)v114 - 1);
                  v114 -= 4;
                  *--v124 = v130;
                }
                while (v114 != v116);
              }
            }
            *(_QWORD *)(v16 + 48) = v124;
            *(_QWORD *)(v16 + 56) = v115;
            *(_QWORD *)(v16 + 64) = &v123[4 * v121];
            if (v116)
              operator delete(v116);
          }
          else
          {
            *(_DWORD *)v114 = v112;
            v115 = v114 + 4;
          }
          *(_QWORD *)(v16 + 56) = v115;
          v132 = *(char **)(v16 + 80);
          v131 = *(_QWORD *)(v16 + 88);
          if ((unint64_t)v132 < v131)
          {
            *(_OWORD *)v132 = 0u;
            *((_OWORD *)v132 + 1) = 0u;
            v110 = v132 + 32;
            goto LABEL_186;
          }
          v133 = *(char **)(v16 + 72);
          v134 = (v132 - v133) >> 5;
          v135 = v134 + 1;
          if (!((unint64_t)(v134 + 1) >> 59))
          {
            v136 = v131 - (_QWORD)v133;
            if (v136 >> 4 > v135)
              v135 = v136 >> 4;
            if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFE0)
              v137 = 0x7FFFFFFFFFFFFFFLL;
            else
              v137 = v135;
            if (!v137)
            {
              v138 = 0;
              goto LABEL_220;
            }
            if (!(v137 >> 59))
            {
              v138 = (char *)operator new(32 * v137);
LABEL_220:
              v139 = &v138[32 * v134];
              v140 = &v138[32 * v137];
              *(_OWORD *)v139 = 0u;
              *((_OWORD *)v139 + 1) = 0u;
              v110 = v139 + 32;
              if (v132 == v133)
              {
                *(_QWORD *)(v16 + 72) = v139;
                *(_QWORD *)(v16 + 80) = v110;
                *(_QWORD *)(v16 + 88) = v140;
              }
              else
              {
                v141 = 0;
                do
                {
                  v142 = &v139[v141];
                  v143 = &v132[v141];
                  *((_QWORD *)v142 - 4) = *(_QWORD *)&v132[v141 - 32];
                  *((_QWORD *)v142 - 2) = 0;
                  *((_QWORD *)v142 - 1) = 0;
                  *(_OWORD *)(v142 - 24) = *(_OWORD *)&v132[v141 - 24];
                  v38 = *(_QWORD *)&v132[v141 - 8];
                  *((_QWORD *)v142 - 1) = v38;
                  *((_QWORD *)v143 - 3) = 0;
                  *((_QWORD *)v143 - 2) = 0;
                  *((_QWORD *)v143 - 1) = 0;
                  v141 -= 32;
                }
                while (&v132[v141] != v133);
                v132 = *(char **)(v16 + 72);
                v144 = *(char **)(v16 + 80);
                *(_QWORD *)(v16 + 72) = &v139[v141];
                *(_QWORD *)(v16 + 80) = v110;
                *(_QWORD *)(v16 + 88) = v140;
                while (v144 != v132)
                {
                  v145 = (void *)*((_QWORD *)v144 - 3);
                  if (v145)
                  {
                    *((_QWORD *)v144 - 2) = v145;
                    operator delete(v145);
                  }
                  v144 -= 32;
                }
              }
              if (v132)
                operator delete(v132);
LABEL_186:
              *(_QWORD *)(v16 + 80) = v110;
              v109 = *((_QWORD *)&v210 + 1);
              v108 = v211;
              v94 = v183;
              if (v211 >= *((_QWORD *)&v210 + 1))
                goto LABEL_156;
              continue;
            }
LABEL_329:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          break;
        }
        abort();
      case 3:
          goto LABEL_156;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v37 = (std::mutex *)(v16 + 208);
        v146 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
          goto LABEL_282;
        *(_WORD *)buf = 0;
        v147 = v146;
        v148 = "Failed to load C3MM object tree";
        goto LABEL_281;
      default:
        goto LABEL_156;
    }
  }
}

void sub_19F51D7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (STACK[0x200])
    operator delete((void *)STACK[0x200]);
  std::mutex::unlock(a9);
  karo::AsyncFileLoader::FileObject::~FileObject((karo::AsyncFileLoader::FileObject *)&a24);
  _Unwind_Resume(a1);
}

BOOL altitude::C3mmAreaLoadJob::succeeded(pthread_mutex_t **this)
{
  _BOOL8 v2;

  pthread_mutex_lock(this[19]);
  v2 = ((_DWORD)this[20] & 2) == 0;
  pthread_mutex_unlock(this[19]);
  return v2;
}

void sub_19F51D978(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[9];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void altitude::C3mmRequestManager::requestC3mmArea(_QWORD *a1, _QWORD *a2, _DWORD *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2[17])
  {
    v17 = a4;
    v18 = a5;
    if (a5)
    {
      p_shared_owners = (unint64_t *)&a5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v19 = *a6;
    v20 = *((_DWORD *)a6 + 2);
    (*(void (**)(_QWORD *, _DWORD *, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(*a2 + 80))(a2, a3, 0, 4294967294, 60, 0, &v17);
    v10 = v18;
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v13 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = a3[5];
      v14 = a3[6];
      v16 = a3[4];
      LODWORD(v17) = 67109632;
      HIDWORD(v17) = v15;
      LOWORD(v18) = 1024;
      *(_DWORD *)((char *)&v18 + 2) = v14;
      HIWORD(v18) = 1024;
      LODWORD(v19) = v16;
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, "Missing loader! Unable to fetch request %u %u %u", (uint8_t *)&v17, 0x14u);
    }

    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_1E42C2D08;
  }
}

void sub_19F51DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL altitude::C3mmRequestManager::loadMetaData(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, uint64_t a5)
{
  __n128 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __n128 v22;
  float64x2_t *v23;
  uint64_t v24;
  float64x2_t v25;
  char TriggerMetaData;
  char *v32;
  void *v33;
  char *v34;
  void (***v35)(char *);
  void (**v36)(char *);
  void *v37;
  void *v38;
  unsigned int *v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int32 v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int32 v74;
  _BOOL8 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t *v81;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t Entry;
  unsigned int v90;
  unsigned int v91;
  std::mutex *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int *v98;
  unsigned int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  int Status;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  NSObject *v118;
  unsigned int *v119;
  unsigned int v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unsigned __int16 *v124;
  double v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  double v131;
  uint64_t v132;
  __int128 v133;
  void *v134[2];
  void *v135[2];
  __int128 v136;
  void *v137[2];
  void *v138[2];
  __int128 v139;
  void *v140[2];
  uint64_t v141;
  uint64_t v142;
  int v143;
  void (**v144)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  void *v150[2];
  void *v151[2];
  __int128 v152;
  void *v153[2];
  void *v154[2];
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  uint64_t v158;
  int v159;
  void *__p;
  char *v161;
  uint64_t v162;
  _OWORD v163[2];
  __int128 v164;
  double v165;
  void (**v166)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t v169;
  unsigned int v170;
  uint8_t buf[16];
  _BYTE v172[32];
  float64x2_t v173;
  double v174;
  double v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  if (a4)
  {
    v164 = 0u;
    memset(v163, 0, sizeof(v163));
    v165 = 1.0;
    altitude::Tile::computeGeocentricBoundsFromTileIndex(a2, (uint64_t)v163, (uint64_t)&v166, 0.0, 10000.0);
    v11 = *(double *)&v164;
    v12 = v11 + v11;
    v13 = (v11 + v11) * v11;
    v14 = (*((double *)&v164 + 1) + *((double *)&v164 + 1)) * *((double *)&v164 + 1);
    v15 = *((double *)&v163[1] + 1);
    v16 = (v15 + v15) * *(double *)&v164;
    v17 = (*((double *)&v164 + 1) + *((double *)&v164 + 1)) * v165;
    v18 = v16 - v17;
    v125 = 1.0 - (v13 + v14);
    v126 = v17 + v16;
    v19 = 1.0 - (v15 + v15) * v15;
    *(double *)&v128 = v18;
    *((double *)&v128 + 1) = v19 - v14;
    v20 = *((double *)&v164 + 1) * (v15 + v15);
    v21 = v165 * (v15 + v15);
    *(double *)&v130 = v165 * v12 + v20;
    *((double *)&v130 + 1) = v12 * *((double *)&v164 + 1) - v21;
    v127 = COERCE_UNSIGNED_INT64(v20 - v165 * v12);
    *(double *)&v129 = v21 + v12 * *((double *)&v164 + 1);
    v131 = v19 - v13;
    *((_QWORD *)&v129 + 1) = 0;
    v132 = 0;
    v133 = v163[0];
    v134[0] = *(void **)&v163[1];
    v134[1] = (void *)0x3FF0000000000000;
    *(int64x2_t *)buf = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(_OWORD *)v172 = xmmword_19FFB2E00;
    *(int64x2_t *)&v172[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)&v173.f64[0] = &off_1E42D8A68;
    *(_QWORD *)&v173.f64[1] = buf;
    v174 = COERCE_DOUBLE(&v125);
    v175 = COERCE_DOUBLE(&v173);
    v22.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v166, (uint64_t)&v173);
    v23 = *(float64x2_t **)&v175;
    if (*(float64x2_t **)&v175 == &v173)
    {
      v24 = 4;
      v23 = &v173;
    }
    else
    {
      if (v175 == 0.0)
        goto LABEL_7;
      v24 = 5;
    }
    (*(void (**)(__n128))(*(_QWORD *)&v23->f64[0] + 8 * v24))(v22);
LABEL_7:
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    v130 = 0u;
    v125 = 0.0;
    v126 = COERCE_DOUBLE(&off_1E42C4428);
    v131 = 0.0;
    *(_OWORD *)v134 = 0u;
    *(_OWORD *)v135 = 0u;
    v136 = 0u;
    *(_OWORD *)v137 = 0u;
    *(_OWORD *)v138 = 0u;
    v139 = 0u;
    *(_OWORD *)v140 = 0u;
    v143 = 0;
    v141 = 0;
    v142 = 0xFFFFFFFFLL;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    v144 = &off_1E42C4428;
    v149 = 0;
    *(_OWORD *)v150 = 0u;
    *(_OWORD *)v151 = 0u;
    v152 = 0u;
    *(_OWORD *)v153 = 0u;
    *(_OWORD *)v154 = 0u;
    v155 = 0u;
    *(_OWORD *)v156 = 0u;
    v157 = 0;
    v158 = 0xFFFFFFFFLL;
    v159 = 0;
    v162 = 0;
    __p = 0;
    v161 = 0;
    v25 = vsubq_f64(*(float64x2_t *)&v172[8], *(float64x2_t *)buf);
    __asm { FMOV            V5.2D, #0.5 }
    v173 = vmlaq_f64(*(float64x2_t *)buf, _Q5, v25);
    v174 = *(double *)v172 + (*(double *)&v172[24] - *(double *)v172) * 0.5;
    v175 = sqrt(vaddvq_f64(vmulq_f64(v25, v25))+ (*(double *)&v172[24] - *(double *)v172) * (*(double *)&v172[24] - *(double *)v172))* 0.5;
    altitude::TriggerManager::cullTriggers(*(_QWORD *)(a1 + 120), (altitude::TriggerManager::Trigger **)&v125, &v173, *a2 + 1);
    TriggerMetaData = altitude::C3mmRequestManager::loadTriggerMetaData(a1, (unint64_t *)&v125, a5);
    v32 = (char *)__p;
    if (__p)
    {
      v33 = __p;
      if (v161 != __p)
      {
        v34 = v161 - 240;
        v35 = (void (***)(char *))(v161 - 240);
        do
        {
          v36 = *v35;
          v35 -= 30;
          (*v36)(v34);
          _ZF = v34 == v32;
          v34 = (char *)v35;
        }
        while (!_ZF);
        v33 = __p;
      }
      v161 = v32;
      operator delete(v33);
    }
    v144 = &off_1E42C4428;
    if (v149)
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
    if (SHIBYTE(v157) < 0)
    {
      operator delete(v156[0]);
      if ((SHIBYTE(v155) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v154[0]) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_47;
      }
    }
    else if ((SHIBYTE(v155) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v154[1]);
    if ((SHIBYTE(v154[0]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v152) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v153[0]);
    if ((SHIBYTE(v152) & 0x80000000) == 0)
    {
LABEL_20:
      v37 = v150[0];
      if (!v150[0])
        goto LABEL_22;
      goto LABEL_21;
    }
LABEL_48:
    operator delete(v151[1]);
    v37 = v150[0];
    if (!v150[0])
    {
LABEL_22:
      v126 = COERCE_DOUBLE(&off_1E42C4428);
      if (v131 != 0.0)
        (*(void (**)(double))(**(_QWORD **)&v131 + 8))(COERCE_DOUBLE(*(_QWORD *)&v131));
      if (SHIBYTE(v141) < 0)
      {
        operator delete(v140[0]);
        if ((SHIBYTE(v139) & 0x80000000) == 0)
        {
LABEL_26:
          if ((SHIBYTE(v138[0]) & 0x80000000) == 0)
            goto LABEL_27;
          goto LABEL_52;
        }
      }
      else if ((SHIBYTE(v139) & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v138[1]);
      if ((SHIBYTE(v138[0]) & 0x80000000) == 0)
      {
LABEL_27:
        if ((SHIBYTE(v136) & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_53;
      }
LABEL_52:
      operator delete(v137[0]);
      if ((SHIBYTE(v136) & 0x80000000) == 0)
      {
LABEL_28:
        v38 = v134[0];
        if (!v134[0])
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_53:
      operator delete(v135[1]);
      v38 = v134[0];
      if (!v134[0])
      {
LABEL_30:
        if ((TriggerMetaData & 1) == 0)
        {
LABEL_116:
          v75 = 0;
          goto LABEL_128;
        }
        goto LABEL_31;
      }
LABEL_29:
      v134[1] = v38;
      operator delete(v38);
      goto LABEL_30;
    }
LABEL_21:
    v150[1] = v37;
    operator delete(v37);
    goto LABEL_22;
  }
LABEL_31:
  if (*(_QWORD *)(a1 + 112) > (unint64_t)*(unsigned int *)(a1 + 164))
  {
    v39 = *(unsigned int **)(a1 + 96);
    if (v39 != (unsigned int *)(a1 + 104))
    {
      while (1)
      {
        v40 = *(_DWORD *)(a1 + 156);
        v41 = atomic_load(v39 + 15);
        v42 = v40 - v41;
        v43 = v42 >= 0 ? v42 : -v42;
        v44 = (unsigned int *)*((_QWORD *)v39 + 1);
        if (v43 >= 0x15)
          break;
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = *(unsigned int **)v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (unsigned int *)*((_QWORD *)v39 + 2);
            _ZF = *(_QWORD *)v45 == (_QWORD)v39;
            v39 = v45;
          }
          while (!_ZF);
        }
        v39 = v45;
        if (v45 == (unsigned int *)(a1 + 104))
          goto LABEL_69;
      }
      if (v44)
      {
        do
        {
          v46 = v44;
          v44 = *(unsigned int **)v44;
        }
        while (v44);
      }
      else
      {
        v47 = v39;
        do
        {
          v46 = (unsigned int *)*((_QWORD *)v47 + 2);
          _ZF = *(_QWORD *)v46 == (_QWORD)v47;
          v47 = v46;
        }
        while (!_ZF);
      }
      if (*(unsigned int **)(a1 + 96) == v39)
        *(_QWORD *)(a1 + 96) = v46;
      v48 = *(uint64_t **)(a1 + 104);
      --*(_QWORD *)(a1 + 112);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v48, (uint64_t *)v39);
      v49 = (std::__shared_weak_count *)*((_QWORD *)v39 + 6);
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(p_shared_owners);
        while (__stlxr(v51 - 1, p_shared_owners));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      operator delete(v39);
    }
  }
LABEL_69:
  v52 = *(_DWORD *)(a1 + 156) + 1;
  *(_DWORD *)(a1 + 156) = v52;
  v53 = *(_QWORD *)(a1 + 144);
  v56 = *(uint64_t **)(v53 + 56);
  v54 = (uint64_t *)(v53 + 56);
  v55 = v56;
  v57 = *a2;
  if (!v56)
  {
    v67 = 0;
    v62 = a2[3];
    goto LABEL_89;
  }
  v59 = a2[1];
  v58 = a2[2];
  v60 = v54;
  v61 = v55;
  v62 = a2[3];
  do
  {
    v63 = *((_DWORD *)v61 + 8);
    if (v63 < v57)
    {
LABEL_71:
      ++v61;
      goto LABEL_72;
    }
    if (v63 > v57)
      goto LABEL_75;
    v64 = *((_DWORD *)v61 + 9);
    if (v64 < v59)
      goto LABEL_71;
    if (v64 > v59)
      goto LABEL_75;
    v65 = *((_DWORD *)v61 + 10);
    if (v65 < v58)
      goto LABEL_71;
    if (v65 > v58)
    {
LABEL_75:
      v60 = v61;
    }
    else if (*((_DWORD *)v61 + 11) < v62)
    {
      ++v61;
    }
    else
    {
      v60 = v61;
    }
LABEL_72:
    v61 = (uint64_t *)*v61;
  }
  while (v61);
  if (v60 == v54
    || (v66 = *((_DWORD *)v60 + 8), v57 < v66)
    || v57 <= v66
    && ((v95 = *((_DWORD *)v60 + 9), v59 < v95)
     || v59 <= v95 && ((v96 = *((_DWORD *)v60 + 10), v58 < v96) || v58 <= v96 && v62 < *((_DWORD *)v60 + 11))))
  {
    v67 = 0;
  }
  else
  {
    v67 = (uint64_t *)v60[6];
  }
LABEL_89:
  v10.n128_u64[0] = *(_QWORD *)(a2 + 1);
  while (2)
  {
    if (!v67)
    {
      if (!v57)
        goto LABEL_116;
      v67 = 0;
      --v57;
      v10.n128_u64[0] = (unint64_t)vshr_n_u32((uint32x2_t)v10.n128_u64[0], 1uLL);
      v62 >>= 1;
      if (!v55)
        continue;
      v68 = v54;
      v67 = v55;
LABEL_97:
      v69 = *((_DWORD *)v67 + 8);
      if (v69 >= v57)
      {
        if (v69 > v57)
          goto LABEL_99;
        v70 = *((_DWORD *)v67 + 9);
        if (v70 >= v10.n128_u32[0])
        {
          if (v70 > v10.n128_u32[0])
            goto LABEL_99;
          v71 = *((_DWORD *)v67 + 10);
          if (v71 >= v10.n128_u32[1])
          {
            if (v71 <= v10.n128_u32[1])
            {
              if (*((_DWORD *)v67 + 11) < v62)
                ++v67;
              else
                v68 = v67;
LABEL_96:
              v67 = (uint64_t *)*v67;
              if (!v67)
              {
                if (v68 != v54)
                {
                  v67 = 0;
                  v72 = *((_DWORD *)v68 + 8);
                  if (v57 >= v72)
                  {
                    if (v57 > v72
                      || (v67 = 0, v73 = *((_DWORD *)v68 + 9), v10.n128_u32[0] >= v73)
                      && (v10.n128_u32[0] > v73
                       || (v67 = 0, v74 = *((_DWORD *)v68 + 10), v10.n128_u32[1] >= v74)
                       && (v10.n128_u32[1] > v74 || (v67 = 0, v62 >= *((_DWORD *)v68 + 11)))))
                    {
                      v67 = (uint64_t *)v68[6];
                    }
                  }
                }
                continue;
              }
              goto LABEL_97;
            }
LABEL_99:
            v68 = v67;
            goto LABEL_96;
          }
        }
      }
      ++v67;
      goto LABEL_96;
    }
    break;
  }
  v76 = *(_QWORD *)(a1 + 104);
  if (!v76)
    goto LABEL_127;
  v77 = *((_DWORD *)v67 + 42);
  v78 = a1 + 104;
  do
  {
    v79 = *(_DWORD *)(v76 + 32);
    v80 = v79 < v77;
    if (v79 >= v77)
      v81 = (uint64_t *)v76;
    else
      v81 = (uint64_t *)(v76 + 8);
    if (!v80)
      v78 = v76;
    v76 = *v81;
  }
  while (*v81);
  if (v78 == a1 + 104 || *(_DWORD *)(v78 + 32) > v77)
  {
LABEL_127:
    v75 = 1;
    goto LABEL_128;
  }
  atomic_store(v52, (unsigned int *)(v78 + 60));
  v84 = *(_QWORD *)(v78 + 40);
  v83 = *(std::__shared_weak_count **)(v78 + 48);
  v124 = (unsigned __int16 *)v84;
  if (v83)
  {
    v85 = (unint64_t *)&v83->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  if (!v84)
    goto LABEL_157;
  v88 = *((_DWORD *)v67 + 42);
  v87 = *((_DWORD *)v67 + 43);
  if (*(_QWORD *)(v84 + 120) == *(_QWORD *)(v84 + 128) && !*(_BYTE *)(v84 + 40))
    goto LABEL_155;
  v173 = *(float64x2_t *)a2;
  v163[0] = 0uLL;
  LODWORD(v163[1]) = 1;
  WORD2(v163[1]) = 0;
  Entry = karo::media::C3mmArea::getEntry((unsigned __int16 *)v84, &v173, (uint64_t)v163);
  v91 = v90;
  v169 = Entry;
  v170 = v90;
  if (!(_DWORD)Entry)
    goto LABEL_156;
  LODWORD(v126) = 0;
  v127 = 0uLL;
  HIDWORD(v125) = v88;
  v92 = (std::mutex *)(v84 + 208);
  HIDWORD(v126) = v87;
  std::mutex::lock(v92);
  v93 = *v124;
  std::mutex::unlock(v92);
  if (v93 < 2)
  {
    LODWORD(v126) = Entry;
    v94 = 14;
  }
  else
  {
    *(_QWORD *)&v127 = Entry;
    *((_QWORD *)&v127 + 1) = v91;
    v94 = 52;
  }
  LODWORD(v125) = v94;
  altitude::C3mmRequestManager::requestC3mmArea(&v166, (_QWORD *)a1, &v125, (uint64_t)v124, v83, (uint64_t *)&v169);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v166) == 4)
  {
    v97 = karo::media::C3mmArea::getEntry(v124, &v173, (uint64_t)v163);
    v166 = &off_1E42C2D08;
    if (v167)
    {
      v98 = (unsigned int *)(v167 + 128);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
    }
    v100 = v168;
    if (v168)
    {
      v101 = (unint64_t *)&v168->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v97)
    {
LABEL_155:
      v75 = 0;
      goto LABEL_158;
    }
LABEL_156:
    v10 = (__n128)v163[0];
    *(_OWORD *)a3 = v163[0];
    *(_QWORD *)(a3 + 14) = *(_QWORD *)((char *)v163 + 14);
LABEL_157:
    v75 = 1;
  }
  else
  {
    Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v166);
    v75 = Status == 0;
    if (Status)
    {
      if (a5)
      {
        v106 = *(_QWORD *)(a5 + 8);
        if (v106)
        {
          v107 = (unsigned int *)(v106 + 128);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
        }
        v109 = v167;
        v110 = v168;
        if (v168)
        {
          v111 = (unint64_t *)&v168->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v113 = *(std::__shared_weak_count **)(a5 + 16);
        *(_QWORD *)(a5 + 8) = v109;
        *(_QWORD *)(a5 + 16) = v110;
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
          v109 = *(_QWORD *)(a5 + 8);
        }
        if (v109)
        {
          v116 = (unsigned int *)(v109 + 128);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 + 1, v116));
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v118 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = DWORD1(v127);
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = DWORD2(v127);
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)v172 = v127;
        _os_log_impl(&dword_19F029000, v118, OS_LOG_TYPE_ERROR, "Failed to load %u %u %u", buf, 0x14u);
      }

    }
    v166 = &off_1E42C2D08;
    if (v167)
    {
      v119 = (unsigned int *)(v167 + 128);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
    }
    v121 = v168;
    if (v168)
    {
      v122 = (unint64_t *)&v168->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
  }
LABEL_158:
  if (v83)
  {
    v103 = (unint64_t *)&v83->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v83->__on_zero_shared)(v83, v10);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
LABEL_128:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 168));
  return v75;
}

void sub_19F51E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)(v10 - 256));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 168));
  _Unwind_Resume(a1);
}

uint64_t altitude::C3mmRequestManager::loadTriggerMetaData(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  unsigned int *v17;
  int v18;
  BOOL v19;
  uint64_t **v20;
  std::__shared_weak_count *v21;
  char *v22;
  pthread_mutex_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v28;
  const char *v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  float **v33;
  unint64_t v34;
  float *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  const char *v41;
  float *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  _DWORD *v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t **v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  _DWORD *v78;
  int v79;
  std::mutex *v80;
  unsigned int v81;
  int v82;
  unsigned __int16 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  std::mutex *i;
  char *v89;
  uint64_t **v90;
  int v91;
  char *v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  int v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  void **v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  NSObject *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  float *v124;
  const char *v125;
  float *v126;
  float *v127;
  const char *v128;
  float *v129;
  unint64_t v130;
  __int128 v131;
  int8x16_t v132;
  int8x16_t v133;
  float *v134;
  float *v135;
  float *v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unsigned __int16 *v182;
  unsigned int v183;
  uint64_t v184;
  unsigned __int16 *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD **v190;
  uint64_t *v191;
  uint64_t *v192;
  char *v193;
  uint64_t v194;
  _QWORD *v195;
  unsigned int *v196;
  unsigned int v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::mutex *v204;
  uint64_t v205;
  char v206;
  unint64_t *v207;
  unint64_t v208;
  __n128 v209;
  unsigned int *v210;
  uint64_t v211;
  uint64_t v212;
  void (**v213)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  unsigned int v217;
  unsigned __int16 *v218;
  std::__shared_weak_count *v219;
  __int128 buf;
  pthread_mutexattr_t v221;
  __int128 v222;
  uint64_t v223;
  float32x4x3_t v224;
  float32x4x3_t v225;

  v5 = a1;
  v223 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  v7 = *a2;
  if (*a2)
  {
    v8 = 0;
    v210 = (unsigned int *)(v5 + 104);
    v209 = v6;
    v206 = 1;
    v207 = a2;
    v212 = v5;
    v205 = a3;
    while (1)
    {
      v9 = v7 <= 2 ? (uint64_t)&a2[30 * v8 + 1] : a2[61] + 240 * v8;
      v10 = *(_DWORD *)(v9 + 228);
      v11 = v210;
      v12 = *(uint64_t **)v210;
      v13 = *(_QWORD *)v210;
      v211 = v9;
      if (*(_QWORD *)v210)
      {
        do
        {
          v14 = *(_DWORD *)(v13 + 32);
          v15 = v14 < v10;
          if (v14 >= v10)
            v16 = (uint64_t *)v13;
          else
            v16 = (uint64_t *)(v13 + 8);
          if (!v15)
            v11 = (unsigned int *)v13;
          v13 = *v16;
        }
        while (*v16);
        if (v11 != v210 && (int)v11[8] <= v10)
        {
          atomic_store(*(_DWORD *)(v5 + 156), v11 + 15);
          v12 = *(uint64_t **)(v5 + 104);
          v10 = *(_DWORD *)(v9 + 228);
        }
        if (v12)
        {
          v17 = v210;
          do
          {
            v18 = *((_DWORD *)v12 + 8);
            v19 = v18 < v10;
            if (v18 >= v10)
              v20 = (uint64_t **)v12;
            else
              v20 = (uint64_t **)(v12 + 1);
            if (!v19)
              v17 = (unsigned int *)v12;
            v12 = *v20;
          }
          while (*v20);
          if (v17 != v210 && (int)v17[8] <= v10)
            break;
        }
      }
      v21 = 0;
      v218 = 0;
      v219 = 0;
      if (v10)
        goto LABEL_28;
LABEL_3:
      ++v8;
      v7 = *a2;
      if (v8 >= *a2)
        goto LABEL_276;
    }
    atomic_store(*(_DWORD *)(v5 + 156), v17 + 15);
    v55 = (unsigned __int16 *)*((_QWORD *)v17 + 5);
    v21 = (std::__shared_weak_count *)*((_QWORD *)v17 + 6);
    v218 = v55;
    v219 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v57 = __ldxr(p_shared_owners);
      while (__stxr(v57 + 1, p_shared_owners));
    }
    v58 = *(_DWORD *)(v9 + 228);
    if (!v58)
      goto LABEL_270;
    if (v55)
    {
      if (!*((_BYTE *)v55 + 40))
        goto LABEL_100;
LABEL_270:
      if (v21)
      {
        v201 = (unint64_t *)&v21->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      goto LABEL_3;
    }
LABEL_28:
    v22 = (char *)operator new(0x128uLL);
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = &off_1E42E5E30;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    *(_OWORD *)(v22 + 120) = 0u;
    *(_OWORD *)(v22 + 136) = 0u;
    *(_OWORD *)(v22 + 152) = 0u;
    *(_OWORD *)(v22 + 168) = 0u;
    *(_OWORD *)(v22 + 184) = 0u;
    *(_OWORD *)(v22 + 200) = 0u;
    *(_OWORD *)(v22 + 216) = 0u;
    *(_OWORD *)(v22 + 232) = 0u;
    *(_OWORD *)(v22 + 248) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 264) = 0u;
    *(_OWORD *)(v22 + 280) = 0u;
    *((_DWORD *)v22 + 8) = 1140850688;
    *((_QWORD *)v22 + 7) = 0;
    *((_QWORD *)v22 + 6) = 0;
    *((_QWORD *)v22 + 5) = v22 + 48;
    *(_OWORD *)(v22 + 68) = 0u;
    *(_OWORD *)(v22 + 84) = 0u;
    *(_OWORD *)(v22 + 100) = 0u;
    *(_QWORD *)(v22 + 116) = 0x186A000000000;
    *((_QWORD *)v22 + 23) = 0;
    *((_QWORD *)v22 + 22) = 0;
    *((_OWORD *)v22 + 8) = 0u;
    *((_OWORD *)v22 + 9) = 0u;
    *((_QWORD *)v22 + 20) = 0;
    *((_QWORD *)v22 + 21) = v22 + 176;
    pthread_mutexattr_init(&v221);
    pthread_mutexattr_settype(&v221, 2);
    v23 = (pthread_mutex_t *)operator new();
    pthread_mutex_init(v23, &v221);
    pthread_mutexattr_destroy(&v221);
    *((_QWORD *)v22 + 24) = v23;
    *((_QWORD *)v22 + 25) = -1;
    *((_QWORD *)v22 + 26) = 0;
    *((_QWORD *)v22 + 27) = 0;
    *((_QWORD *)v22 + 28) = 0;
    *((_QWORD *)v22 + 29) = 850045863;
    v24.i64[1] = v209.n128_i64[1];
    v25.i64[1] = 0;
    *((_OWORD *)v22 + 15) = 0u;
    *((_OWORD *)v22 + 16) = 0u;
    *((_OWORD *)v22 + 17) = 0u;
    *((_QWORD *)v22 + 36) = 0;
    v218 = (unsigned __int16 *)(v22 + 24);
    v219 = (std::__shared_weak_count *)v22;
    if (v21)
    {
      v26 = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v209);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v28 = *(const char **)(v9 + 104);
    v29 = *(const char **)(v9 + 112);
    if (v29 == v28)
    {
LABEL_51:
      v43 = v9;
      v44 = *(_DWORD *)(v9 + 228);
      v45 = *(_DWORD *)(v43 + 224);
      v46 = (uint64_t **)v210;
      v47 = (uint64_t **)v210;
      v48 = *(uint64_t **)v210;
      if (*(_QWORD *)v210)
      {
        while (1)
        {
          while (1)
          {
            v47 = (uint64_t **)v48;
            v49 = *((_DWORD *)v48 + 8);
            if (v49 <= v44)
              break;
            v48 = *v47;
            v46 = v47;
            if (!*v47)
              goto LABEL_58;
          }
          if (v49 >= v44)
            break;
          v48 = v47[1];
          if (!v48)
          {
            v46 = v47 + 1;
            goto LABEL_58;
          }
        }
        v50 = v47;
        v54 = v218;
        v53 = v219;
        if (!v219)
          goto LABEL_72;
      }
      else
      {
LABEL_58:
        v50 = operator new(0x40uLL);
        *((_DWORD *)v50 + 8) = v44;
        *((_QWORD *)v50 + 5) = 0;
        *((_QWORD *)v50 + 6) = 0;
        *((_DWORD *)v50 + 15) = 0;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
        *((_QWORD *)v50 + 2) = v47;
        *v46 = (uint64_t *)v50;
        v51 = **(_QWORD **)(v5 + 96);
        v52 = (uint64_t *)v50;
        if (v51)
        {
          *(_QWORD *)(v5 + 96) = v51;
          v52 = *v46;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v52);
        ++*(_QWORD *)(v5 + 112);
        v54 = v218;
        v53 = v219;
        if (!v219)
          goto LABEL_72;
      }
      v59 = (unint64_t *)&v53->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
LABEL_72:
      v61 = (std::__shared_weak_count *)*((_QWORD *)v50 + 6);
      *((_QWORD *)v50 + 5) = v54;
      *((_QWORD *)v50 + 6) = v53;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (uint64_t **)v210;
      v65 = *(uint64_t **)v210;
      v66 = (uint64_t **)v210;
      if (*(_QWORD *)v210)
      {
        v67 = *(uint64_t **)v210;
        do
        {
          while (1)
          {
            v64 = (uint64_t **)v67;
            v68 = *((_DWORD *)v67 + 8);
            if (v68 <= v44)
              break;
            v67 = *v64;
            v66 = v64;
            if (!*v64)
              goto LABEL_85;
          }
          if (v68 >= v44)
          {
            v71 = v64;
            goto LABEL_88;
          }
          v67 = v64[1];
        }
        while (v67);
        v66 = v64 + 1;
      }
LABEL_85:
      v71 = operator new(0x40uLL);
      v71[8] = v44;
      *((_QWORD *)v71 + 5) = 0;
      *((_QWORD *)v71 + 6) = 0;
      v71[15] = 0;
      *(_QWORD *)v71 = 0;
      *((_QWORD *)v71 + 1) = 0;
      *((_QWORD *)v71 + 2) = v64;
      *v66 = (uint64_t *)v71;
      v69 = **(_QWORD **)(v5 + 96);
      v70 = (uint64_t *)v71;
      if (v69)
      {
        *(_QWORD *)(v5 + 96) = v69;
        v70 = *v66;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v70);
      v65 = *(uint64_t **)(v5 + 104);
      ++*(_QWORD *)(v5 + 112);
LABEL_88:
      v71[14] = v45;
      v72 = *(_DWORD *)(v5 + 156);
      v73 = (uint64_t **)v210;
LABEL_90:
      v74 = v73;
      if (v65)
      {
        do
        {
          v73 = (uint64_t **)v65;
          v75 = *((_DWORD *)v65 + 8);
          if (v75 > v44)
          {
            v65 = *v73;
            goto LABEL_90;
          }
          if (v75 >= v44)
          {
            v78 = v73;
            goto LABEL_99;
          }
          v65 = v73[1];
        }
        while (v65);
        v74 = v73 + 1;
      }
      v78 = operator new(0x40uLL);
      v78[8] = v44;
      *((_QWORD *)v78 + 5) = 0;
      *((_QWORD *)v78 + 6) = 0;
      v78[15] = 0;
      *(_QWORD *)v78 = 0;
      *((_QWORD *)v78 + 1) = 0;
      *((_QWORD *)v78 + 2) = v73;
      *v74 = (uint64_t *)v78;
      v76 = **(_QWORD **)(v5 + 96);
      v77 = (uint64_t *)v78;
      if (v76)
      {
        *(_QWORD *)(v5 + 96) = v76;
        v77 = *v74;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 104), v77);
      ++*(_QWORD *)(v5 + 112);
LABEL_99:
      v9 = v211;
      atomic_store(v72, v78 + 15);
      v58 = *(_DWORD *)(v9 + 228);
      v55 = v218;
LABEL_100:
      v217 = 0;
      v216 = 0;
      v79 = *(_DWORD *)(v9 + 232);
      v221 = (pthread_mutexattr_t)0;
      v222 = 0u;
      HIDWORD(v221.__sig) = v58;
      *(_DWORD *)&v221.__opaque[4] = v79;
      v80 = (std::mutex *)(v55 + 104);
      std::mutex::lock((std::mutex *)(v55 + 104));
      v81 = *v218;
      std::mutex::unlock(v80);
      v208 = v8;
      if (v81 < 2)
      {
        *(_DWORD *)v221.__opaque = v216;
        v82 = 14;
      }
      else
      {
        *(_QWORD *)&v222 = v216;
        *((_QWORD *)&v222 + 1) = v217;
        v82 = 52;
      }
      LODWORD(v221.__sig) = v82;
      v83 = v218;
      altitude::C3mmRequestManager::requestC3mmArea(&v213, (_QWORD *)v5, &v221, (uint64_t)v218, v219, &v216);
      if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v213) == 4)
      {
        v84 = *(_QWORD *)(v9 + 72);
        *((_DWORD *)v83 + 2) = *(_DWORD *)(v84 + 20);
        v85 = *(_QWORD *)(v5 + 144);
        if ((_DWORD *)(v85 + 176) == std::__tree<altitude::TileKey>::find<altitude::TileKey>(v85 + 168, (unsigned int *)&v221))
        {
          v86 = *(_QWORD *)(v5 + 128);
          if (v86)
          {
            *((_QWORD *)v83 + 22) = *(_QWORD *)(v211 + 228);
            v87 = (char *)(v83 + 88);
            i = (std::mutex *)(v86 + 104);
            std::mutex::lock((std::mutex *)(v86 + 104));
            if (*((_QWORD *)v83 + 24) != *((_QWORD *)v83 + 23))
            {
              v90 = (uint64_t **)(v86 + 88);
              v89 = *(char **)(v86 + 88);
              v91 = *(_DWORD *)v87;
              if (v89)
              {
                while (1)
                {
                  while (1)
                  {
                    v92 = v89;
                    v105 = *((_DWORD *)v89 + 8);
                    if (v91 >= v105)
                      break;
                    v89 = *(char **)v92;
                    v90 = (uint64_t **)v92;
                    if (!*(_QWORD *)v92)
                      goto LABEL_132;
                  }
                  if (v105 >= v91)
                    break;
                  v89 = (char *)*((_QWORD *)v92 + 1);
                  if (!v89)
                  {
                    v90 = (uint64_t **)(v92 + 8);
                    goto LABEL_132;
                  }
                }
              }
              else
              {
                v92 = (char *)(v86 + 88);
LABEL_132:
                v106 = v92;
                v92 = (char *)operator new(0x48uLL);
                *((_DWORD *)v92 + 8) = v91;
                *((_QWORD *)v92 + 5) = -1;
                *((_QWORD *)v92 + 7) = 0;
                *((_QWORD *)v92 + 8) = 0;
                *((_QWORD *)v92 + 6) = 0;
                *(_QWORD *)v92 = 0;
                *((_QWORD *)v92 + 1) = 0;
                *((_QWORD *)v92 + 2) = v106;
                *v90 = (uint64_t *)v92;
                v107 = **(_QWORD **)(v86 + 80);
                v108 = (uint64_t *)v92;
                if (v107)
                {
                  *(_QWORD *)(v86 + 80) = v107;
                  v108 = *v90;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v86 + 88), v108);
                ++*(_QWORD *)(v86 + 96);
              }
              *((_QWORD *)v92 + 5) = *(_QWORD *)v87;
              if (v92 + 40 != v87)
              {
                v204 = (std::mutex *)(v86 + 104);
                v109 = (void **)(v92 + 48);
                v110 = (char *)*((_QWORD *)v92 + 6);
                v111 = (char *)*((_QWORD *)v83 + 23);
                v112 = (char *)*((_QWORD *)v83 + 24);
                v113 = (v112 - v111) >> 4;
                v114 = *((_QWORD *)v92 + 8);
                if (v113 <= (v114 - (uint64_t)v110) >> 4)
                {
                  v137 = (char *)*((_QWORD *)v92 + 7);
                  v138 = (v137 - v110) >> 4;
                  if (v138 >= v113)
                  {
                    if (v111 != v112)
                    {
                      do
                      {
                        v148 = *(_QWORD *)v111;
                        v147 = *((_QWORD *)v111 + 1);
                        if (v147)
                        {
                          v149 = (unint64_t *)(v147 + 8);
                          do
                            v150 = __ldxr(v149);
                          while (__stxr(v150 + 1, v149));
                        }
                        v151 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
                        *(_QWORD *)v110 = v148;
                        *((_QWORD *)v110 + 1) = v147;
                        if (v151)
                        {
                          v152 = (unint64_t *)&v151->__shared_owners_;
                          do
                            v153 = __ldaxr(v152);
                          while (__stlxr(v153 - 1, v152));
                          if (!v153)
                          {
                            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                            std::__shared_weak_count::__release_weak(v151);
                          }
                        }
                        v111 += 16;
                        v110 += 16;
                      }
                      while (v111 != v112);
                      v137 = (char *)*((_QWORD *)v92 + 7);
                    }
                    for (i = v204; v137 != v110; v137 -= 16)
                    {
                      v186 = (std::__shared_weak_count *)*((_QWORD *)v137 - 1);
                      if (v186)
                      {
                        v187 = (unint64_t *)&v186->__shared_owners_;
                        do
                          v188 = __ldaxr(v187);
                        while (__stlxr(v188 - 1, v187));
                        if (!v188)
                        {
                          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                          std::__shared_weak_count::__release_weak(v186);
                        }
                      }
                    }
                    *((_QWORD *)v92 + 7) = v110;
                  }
                  else
                  {
                    v139 = &v111[16 * v138];
                    if (v137 != v110)
                    {
                      do
                      {
                        v141 = *(_QWORD *)v111;
                        v140 = *((_QWORD *)v111 + 1);
                        if (v140)
                        {
                          v142 = (unint64_t *)(v140 + 8);
                          do
                            v143 = __ldxr(v142);
                          while (__stxr(v143 + 1, v142));
                        }
                        v144 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
                        *(_QWORD *)v110 = v141;
                        *((_QWORD *)v110 + 1) = v140;
                        if (v144)
                        {
                          v145 = (unint64_t *)&v144->__shared_owners_;
                          do
                            v146 = __ldaxr(v145);
                          while (__stlxr(v146 - 1, v145));
                          if (!v146)
                          {
                            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                            std::__shared_weak_count::__release_weak(v144);
                          }
                        }
                        v111 += 16;
                        v110 += 16;
                      }
                      while (v111 != v139);
                      v110 = (char *)*((_QWORD *)v92 + 7);
                    }
                    v162 = v110;
                    i = v204;
                    if (v139 != v112)
                    {
                      v162 = v110;
                      do
                      {
                        *(_QWORD *)v162 = *(_QWORD *)v139;
                        v163 = *((_QWORD *)v139 + 1);
                        *((_QWORD *)v162 + 1) = v163;
                        if (v163)
                        {
                          v164 = (unint64_t *)(v163 + 8);
                          do
                            v165 = __ldxr(v164);
                          while (__stxr(v165 + 1, v164));
                        }
                        v139 += 16;
                        v162 += 16;
                      }
                      while (v139 != v112);
                    }
                    *((_QWORD *)v92 + 7) = v162;
                  }
                }
                else
                {
                  if (v110)
                  {
                    v115 = (char *)*((_QWORD *)v92 + 7);
                    v116 = (void *)*((_QWORD *)v92 + 6);
                    if (v115 != v110)
                    {
                      do
                      {
                        v117 = (std::__shared_weak_count *)*((_QWORD *)v115 - 1);
                        if (v117)
                        {
                          v118 = (unint64_t *)&v117->__shared_owners_;
                          do
                            v119 = __ldaxr(v118);
                          while (__stlxr(v119 - 1, v118));
                          if (!v119)
                          {
                            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                            std::__shared_weak_count::__release_weak(v117);
                          }
                        }
                        v115 -= 16;
                      }
                      while (v115 != v110);
                      v116 = *v109;
                    }
                    *((_QWORD *)v92 + 7) = v110;
                    operator delete(v116);
                    v114 = 0;
                    *v109 = 0;
                    *((_QWORD *)v92 + 7) = 0;
                    *((_QWORD *)v92 + 8) = 0;
                  }
                  if (v112 - v111 < 0)
                    goto LABEL_277;
                  v154 = v114 >> 3;
                  if (v114 >> 3 <= v113)
                    v154 = (v112 - v111) >> 4;
                  v155 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
                  v156 = 0xFFFFFFFFFFFFFFFLL;
                  if (!v155)
                    v156 = v154;
                  if (v156 >> 60)
LABEL_277:
                    abort();
                  v157 = 2 * v156;
                  v158 = operator new(16 * v156);
                  *((_QWORD *)v92 + 6) = v158;
                  *((_QWORD *)v92 + 7) = v158;
                  *((_QWORD *)v92 + 8) = &v158[v157];
                  while (v111 != v112)
                  {
                    *v158 = *(_QWORD *)v111;
                    v159 = *((_QWORD *)v111 + 1);
                    v158[1] = v159;
                    if (v159)
                    {
                      v160 = (unint64_t *)(v159 + 8);
                      do
                        v161 = __ldxr(v160);
                      while (__stxr(v161 + 1, v160));
                    }
                    v111 += 16;
                    v158 += 2;
                  }
                  *((_QWORD *)v92 + 7) = v158;
                  i = (std::mutex *)(v86 + 104);
                }
              }
            }
            std::mutex::unlock(i);
            v83 = v218;
          }
          v166 = (unsigned __int16 *)*((_QWORD *)v83 + 2);
          if (v166 != v83 + 12)
          {
            do
            {
              v167 = *(_QWORD *)(v166 + 14);
              v168 = *((_DWORD *)v166 + 9);
              *(_QWORD *)&buf = v167;
              *((_QWORD *)&buf + 1) = v168;
              v169 = *(_DWORD *)(v84 + 16);
              v170 = *(_QWORD *)(v212 + 144);
              v173 = *(uint64_t **)(v170 + 56);
              v171 = (uint64_t *)(v170 + 56);
              v172 = v173;
              if (!v173)
                goto LABEL_243;
              v174 = HIDWORD(v167);
              v175 = v167;
              v176 = v171;
              do
              {
                while (1)
                {
                  v177 = *((_DWORD *)v172 + 8);
                  if (v177 >= v175)
                  {
                    if (v177 > v175)
                      break;
                    v178 = *((_DWORD *)v172 + 9);
                    if (v178 >= v174 && (v178 > v174 || *((_DWORD *)v172 + 10) >= v168))
                      break;
                  }
                  v172 = (uint64_t *)v172[1];
                  if (!v172)
                    goto LABEL_231;
                }
                v176 = v172;
                v172 = (uint64_t *)*v172;
              }
              while (v172);
LABEL_231:
              if (v176 == v171
                || (v179 = *((_DWORD *)v176 + 8), v175 < v179)
                || v175 <= v179
                && ((v180 = *((_DWORD *)v176 + 9), v174 < v180)
                 || v174 <= v180
                 && ((v183 = *((_DWORD *)v176 + 10), v168 < v183) || v168 <= v183 && *((_DWORD *)v176 + 11)))
                || (v181 = v176[6]) == 0
                || *(_DWORD *)(v181 + 24) < v169)
              {
LABEL_243:
                v184 = operator new();
                *(_DWORD *)(altitude::RootTileData::RootTileData(v184, &buf, *((_DWORD *)v166 + 12), (__int128 *)(v211 + 152), (__int128 *)(v211 + 128), 1, 1, (__int128 *)(v211 + 176), (__int128 *)(v211 + 200), *(_DWORD *)(v211 + 228), *(_DWORD *)(v211 + 232), *(_BYTE *)(v84 + 72), *(_WORD *)(v84 + 73), HIBYTE(*(_WORD *)(v84 + 73)), *(_DWORD *)(v84 + 76), *v83, *((_DWORD *)v83 + 1))+ 24) = v169;
                altitude::TileManager::addRootTileData(*(_QWORD *)(v212 + 144), v184);
                v182 = (unsigned __int16 *)*((_QWORD *)v166 + 1);
                if (v182)
                {
                  do
                  {
LABEL_244:
                    v185 = v182;
                    v182 = *(unsigned __int16 **)v182;
                  }
                  while (v182);
                  goto LABEL_219;
                }
              }
              else
              {
                v182 = (unsigned __int16 *)*((_QWORD *)v166 + 1);
                if (v182)
                  goto LABEL_244;
              }
              do
              {
                v185 = (unsigned __int16 *)*((_QWORD *)v166 + 2);
                v37 = *(_QWORD *)v185 == (_QWORD)v166;
                v166 = v185;
              }
              while (!v37);
LABEL_219:
              v166 = v185;
            }
            while (v185 != v83 + 12);
          }
          v5 = v212;
          v189 = *(_QWORD *)(v212 + 144);
          v190 = (_QWORD **)(v189 + 168);
          v191 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(v189 + 168, &buf, (unsigned int *)&v221);
          a3 = v205;
          if (!*v191)
          {
            v192 = v191;
            v193 = (char *)operator new(0x40uLL);
            *(pthread_mutexattr_t *)(v193 + 28) = v221;
            *(_OWORD *)(v193 + 44) = v222;
            v194 = buf;
            *(_QWORD *)v193 = 0;
            *((_QWORD *)v193 + 1) = 0;
            *((_QWORD *)v193 + 2) = v194;
            *v192 = (uint64_t)v193;
            v195 = (_QWORD *)**v190;
            if (v195)
            {
              *v190 = v195;
              v193 = (char *)*v192;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v189 + 176), (uint64_t *)v193);
            ++*(_QWORD *)(v189 + 184);
          }
          *((_BYTE *)v83 + 40) = 1;
        }
      }
      else
      {
        if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v213))
        {
          *((_BYTE *)v83 + 40) = 1;
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v120 = (id)GEOGetVectorKitVKDefaultLog_log;
          a2 = v207;
          v8 = v208;
          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
          {
            v121 = (_QWORD *)(v9 + 128);
            if (*(char *)(v9 + 151) < 0)
              v121 = (_QWORD *)*v121;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v121;
            _os_log_impl(&dword_19F029000, v120, OS_LOG_TYPE_ERROR, "Failed to load file %s", (uint8_t *)&buf, 0xCu);
          }

          goto LABEL_261;
        }
        if (a3)
        {
          v93 = *(_QWORD *)(a3 + 8);
          a2 = v207;
          v8 = v208;
          if (v93)
          {
            v94 = (unsigned int *)(v93 + 128);
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
          }
          v96 = v214;
          v97 = v215;
          if (v215)
          {
            v98 = (unint64_t *)&v215->__shared_owners_;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          v100 = *(std::__shared_weak_count **)(a3 + 16);
          *(_QWORD *)(a3 + 8) = v96;
          *(_QWORD *)(a3 + 16) = v97;
          if (v100)
          {
            v101 = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
            v96 = *(_QWORD *)(a3 + 8);
          }
          if (v96)
          {
            v103 = (unsigned int *)(v96 + 128);
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 + 1, v103));
          }
          v206 = 0;
          goto LABEL_261;
        }
        v206 = 0;
      }
      a2 = v207;
      v8 = v208;
LABEL_261:
      v213 = &off_1E42C2D08;
      if (v214)
      {
        v196 = (unsigned int *)(v214 + 128);
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
      }
      v198 = v215;
      if (v215)
      {
        v199 = (unint64_t *)&v215->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
          std::__shared_weak_count::__release_weak(v198);
        }
      }
      v21 = v219;
      goto LABEL_270;
    }
    v30 = (v29 - v28) >> 1;
    v31 = v218;
    v33 = (float **)(v218 + 60);
    v32 = *((_QWORD *)v218 + 15);
    *v218 = 2;
    v34 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v31 + 16) - v32) >> 2);
    if (v30 <= v34)
    {
      if (v30 < v34)
        *((_QWORD *)v31 + 16) = v32 + 12 * v30;
    }
    else
    {
      std::vector<karo::media::C3mmLevel>::__append((uint64_t)v33, v30 - v34);
      v28 = *(const char **)(v211 + 104);
      v29 = *(const char **)(v211 + 112);
      v30 = (v29 - v28) >> 1;
    }
    if (v29 == v28)
    {
LABEL_50:
      *((_BYTE *)v31 + 100) = *(_BYTE *)(v211 + 80);
      *(_OWORD *)(v31 + 52) = *(_OWORD *)(v211 + 84);
      v9 = v211;
      goto LABEL_51;
    }
    v35 = *v33;
    if (v30 <= 1)
      v36 = 1;
    else
      v36 = v30;
    if (v36 <= 7 || ((_DWORD)v36 ? (v37 = (v36 - 1) >> 32 == 0) : (v37 = 0), !v37))
    {
      v38 = 0;
      v39 = 0;
LABEL_48:
      v40 = v39 + 1;
      do
      {
        v41 = &v28[2 * v38];
        v42 = &v35[3 * v38];
        *(_QWORD *)v42 = *(unsigned __int8 *)v41;
        *((_DWORD *)v42 + 2) = *((unsigned __int8 *)v41 + 1);
        v38 = v40++;
      }
      while (v30 > v38);
      goto LABEL_50;
    }
    if (v36 >= 0x10)
    {
      v38 = v36 & 0xFFFFFFFFFFFFFFF0;
      v128 = v28;
      v129 = *v33;
      v130 = v36 & 0xFFFFFFFFFFFFFFF0;
      v131 = 0u;
      do
      {
        *(int8x16x2_t *)v24.i8 = vld2q_s8(v128);
        v128 += 32;
        v132 = vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3790);
        v133 = vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3790);
        v134 = v129;
        vst3q_f32(v134, *(float32x4x3_t *)(&v131 - 1));
        v134 += 12;
        v225.val[0] = (float32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3780);
        v225.val[2] = (float32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3780);
        v225.val[1] = 0u;
        vst3q_f32(v134, v225);
        v225.val[0] = (float32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3770);
        v225.val[2] = (float32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3770);
        v225.val[1] = 0u;
        v135 = v129 + 24;
        vst3q_f32(v135, v225);
        v225.val[0] = (float32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3760);
        v225.val[2] = (float32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3760);
        v225.val[1] = 0u;
        v136 = v129 + 36;
        vst3q_f32(v136, v225);
        v129 += 48;
        v130 -= 16;
      }
      while (v130);
      v209 = (__n128)v132;
      if (v36 == v38)
        goto LABEL_50;
      v39 = v36 & 0xFFFFFFF0;
      if ((v36 & 8) == 0)
        goto LABEL_48;
    }
    else
    {
      v38 = 0;
    }
    v122 = v38;
    v38 = v36 & 0xFFFFFFFFFFFFFFF8;
    v123 = v122 - (v36 & 0xFFFFFFFFFFFFFFF8);
    v124 = &v35[3 * v122];
    v125 = &v28[2 * v122];
    do
    {
      v24 = (int8x16_t)vld2_s8(v125);
      v125 += 16;
      v224.val[0] = (float32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3790);
      v224.val[2] = (float32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3790);
      v224.val[1] = 0u;
      v126 = v124 + 24;
      vst3q_f32(v124, v224);
      v127 = v124 + 12;
      v224.val[0] = (float32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_19FFB3780);
      v224.val[2] = (float32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_19FFB3780);
      v224.val[1] = 0u;
      vst3q_f32(v127, v224);
      v124 = v126;
      v123 += 8;
    }
    while (v123);
    v39 = v36 & 0xFFFFFFF8;
    if (v36 == v38)
      goto LABEL_50;
    goto LABEL_48;
  }
  v206 = 1;
LABEL_276:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 168));
  return v206 & 1;
}

void sub_19F51F7C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)(v1 - 200));
  v3 = *(_QWORD *)(v1 - 208);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 168));
  _Unwind_Resume(a1);
}

_QWORD *karo::SizedArray<altitude::TriggerManager::Trigger,2>::~SizedArray(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  v2 = (void (***)(_QWORD))a1[61];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[62];
    v4 = (void *)a1[61];
    if (v3 != v2)
    {
      v5 = v3 - 30;
      v6 = v3 - 30;
      do
      {
        v7 = *v6;
        v6 -= 30;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[61];
    }
    a1[62] = v2;
    operator delete(v4);
  }
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)(a1 + 31));
  altitude::TriggerManager::Trigger::~Trigger((altitude::TriggerManager::Trigger *)(a1 + 1));
  return a1;
}

void std::vector<karo::media::C3mmLevel>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

_DWORD *std::__tree<altitude::TileKey>::find<altitude::TileKey>(uint64_t a1, unsigned int *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_DWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = a2[4];
  v5 = a2[5];
  v8 = a2[6];
  v7 = a2[7];
  v10 = *a2;
  v9 = a2[1];
  v11 = v2;
  v12 = a2[2];
  do
  {
    while (1)
    {
      v13 = *((_DWORD *)v3 + 11);
      if (v13 == v6 && *((_DWORD *)v3 + 12) == v5 && *((_DWORD *)v3 + 13) == v8 && v7 == *((_DWORD *)v3 + 14))
        break;
      if (v13 < v6)
        goto LABEL_3;
      if (v13 > v6)
        goto LABEL_21;
      v17 = *((_DWORD *)v3 + 12);
      if (v17 < v5)
        goto LABEL_3;
      if (v17 > v5)
        goto LABEL_21;
      v18 = *((_DWORD *)v3 + 13);
      if (v18 < v8)
        goto LABEL_3;
      if (v18 > v8)
        goto LABEL_21;
      v15 = *((_DWORD *)v3 + 14) >= v7;
LABEL_19:
      if (v15)
        goto LABEL_21;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_22;
    }
    v14 = *((_DWORD *)v3 + 7);
    v15 = v14 >= v10;
    if (v14 != v10)
      goto LABEL_19;
    v16 = *((_DWORD *)v3 + 8);
    v15 = v16 >= v9;
    if (v16 != v9)
      goto LABEL_19;
    if (*((_DWORD *)v3 + 9) < v12)
      goto LABEL_3;
LABEL_21:
    v11 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_22:
  if (v11 == v2)
    return v2;
  v19 = v11[11];
  if (v6 != v19 || v5 != v11[12] || v8 != v11[13] || v11[14] != v7)
  {
    if (v6 < v19)
      return v2;
    if (v6 > v19)
      return v11;
    v23 = v11[12];
    if (v5 < v23)
      return v2;
    if (v5 > v23)
      return v11;
    v24 = v11[13];
    if (v8 < v24)
      return v2;
    if (v8 > v24)
      return v11;
    v21 = v7 >= v11[14];
    goto LABEL_38;
  }
  v20 = v11[7];
  v21 = v10 >= v20;
  if (v10 != v20 || (v22 = v11[8], v21 = v9 >= v22, v9 != v22))
  {
LABEL_38:
    if (!v21)
      return v2;
    return v11;
  }
  if (v12 >= v11[9])
    return v11;
  return v2;
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<karo::media::C3mmArea>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  std::mutex::~mutex((std::mutex *)(a1 + 232));
  v2 = *(_QWORD *)(a1 + 208);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 216);
    v4 = *(void **)(a1 + 208);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v4);
  }
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 192));
  v8 = *(_QWORD *)(a1 + 192);
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40FA0F61DDLL);
  *(_QWORD *)(a1 + 192) = 0;
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*(_QWORD **)(a1 + 176));
  v9 = *(void **)(a1 + 144);
  if (v9)
  {
    *(_QWORD *)(a1 + 152) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD *)(a1 + 96);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 104);
    v12 = *(void **)(a1 + 96);
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 24);
        if (v13)
        {
          *(_QWORD *)(v11 - 16) = v13;
          operator delete(v13);
        }
        v11 -= 32;
      }
      while (v11 != v10);
      v12 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v10;
    operator delete(v12);
  }
  v14 = *(void **)(a1 + 72);
  if (v14)
  {
    *(_QWORD *)(a1 + 80) = v14;
    operator delete(v14);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
}

uint64_t ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v101 = a2;
    v102 = a3;
    a2 = v101;
    a3 = v102;
    a4 = v89;
    if (v90)
    {
      if ((v91 & 1) == 0
      {
        if ((v95 & 1) == 0
        {
          if ((v99 & 1) == 0
          {
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
          }
          ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
          unk_1ECE43B18 = 1;
        }
        ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1EE580098 = &ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
        qword_1EE5800A0 = 0;
        if ((v96 & 1) == 0
        {
          ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          unk_1EE5800D0 = ggl::Tile::View::reflection(void)::reflection;
          qword_1EE5800D8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1EE5800E0 = ggl::Building::Style::reflection(void)::reflection;
          qword_1EE5800E8 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1EE5800F0 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1EE5800F8 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1EE5800A8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
        unk_1EE5800B0 = xmmword_19FFB37A0;
      }
      ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref = (uint64_t)"FoggedSpecularBuildingTopShader";
        if ((v97 & 1) == 0
        {
          v100 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
          qword_1ECE42A10 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1ECE42A18 = ggl::foggedSpecularBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42A20 = 1;
          unk_1ECE42A28 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42A30 = 6;
          unk_1ECE42A38 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42A40 = 0;
          unk_1ECE42A48 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref = v100;
          *(_DWORD *)algn_1ECE42A0C = 0;
          qword_1ECE42A50 = 0;
          unk_1ECE42A58 = &ggl::foggedSpecularBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42A68 = 0;
          unk_1ECE42A70 = 0;
          qword_1ECE42A60 = 0;
        }
        qword_1ECE3BBB0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BBB8 = ggl::crc32::compute<38ul>("FoggedSpecularBuildingTopShaderVertex");
        if ((v98 & 1) == 0
        {
          ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref = 0x113B913CCLL;
          qword_1ECE430E8 = (uint64_t)"FoggedSpecularBuildingTopShader";
          unk_1ECE430F0 = 0;
          qword_1ECE430F8 = 0;
          unk_1ECE43100 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43108 = 4;
          unk_1ECE43110 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43118 = 0;
          unk_1ECE43120 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43128 = 0;
          unk_1ECE43130 = &ggl::foggedSpecularBuildingTopShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43140 = 0;
          unk_1ECE43148 = 0;
          qword_1ECE43138 = 0;
        }
        qword_1ECE3BBC0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BBC8 = 330896332;
        qword_1ECE3BBD0 = (uint64_t)ggl::foggedSpecularBuildingTopShaderShaderConstants(void)::ref;
        unk_1ECE3BBD8 = 7;
        qword_1ECE3BBE0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderTextures(void)::ref;
        unk_1ECE3BBE8 = 0;
        qword_1ECE3BBF0 = (uint64_t)&ggl::foggedSpecularBuildingTopShaderShaderSamplers(void)::ref;
        unk_1ECE3BBF8 = 0;
      }
      qword_1ECE31D20 = (uint64_t)&ggl::FoggedSpecularBuildingTopShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE580260 = 0;
        qword_1EE580268 = (uint64_t)"";
        dword_1EE580270 = 0;
        qword_1EE580278 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE580280 = 1;
      }
      qword_1ECE31D28 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31D30 = 1;
      qword_1ECE31D38 = 0;
      unk_1ECE31D40 = 0;
      qword_1ECE31D48 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31D50 = 0;
      if ((v94 & 1) == 0
      {
        ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580110 = 0;
        qword_1EE580118 = (uint64_t)"skyfog";
        dword_1EE580120 = 3;
        qword_1EE580128 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1EE580130 = xmmword_19FFB3720;
        qword_1EE580140 = 1;
        unk_1EE580148 = "view";
        dword_1EE580150 = 3;
        qword_1EE580158 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE580160 = vdupq_n_s64(2uLL);
        qword_1EE580170 = 2;
        unk_1EE580178 = "scale";
        dword_1EE580180 = 3;
        qword_1EE580188 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1EE580190 = xmmword_19FFB3730;
        qword_1EE5801A0 = 3;
        unk_1EE5801A8 = "style";
        dword_1EE5801B0 = 3;
        qword_1EE5801B8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5801C0 = xmmword_19FFB3740;
        qword_1EE5801D0 = 4;
        unk_1EE5801D8 = "gradient";
        dword_1EE5801E0 = 3;
        qword_1EE5801E8 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1EE5801F0 = xmmword_19FFB3670;
        qword_1EE580200 = 5;
        unk_1EE580208 = "lightConfig";
        dword_1EE580210 = 3;
        qword_1EE580218 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE580220 = xmmword_19FFB3750;
        qword_1EE580230 = 6;
        unk_1EE580238 = "fade";
        dword_1EE580240 = 3;
        qword_1EE580248 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantFadeBinding(void)::reflection;
        unk_1EE580250 = 2;
      }
      qword_1ECE31D58 = (uint64_t)&ggl::FoggedSpecularBuildingTop::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31D60 = 7;
      a4 = v89;
      a2 = v101;
      a3 = v102;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v105 = *(_OWORD *)a3;
  *(_OWORD *)&v105[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v103 = *a4;
  v104 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v103;
  *(_OWORD *)(a1 + 272) = v104;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v105;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v105[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BB400;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

uint64_t geo::_retain_ptr<NSLocale * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5470;

  return a1;
}

void geo::_retain_ptr<NSLocale * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5470;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelValueFormatter::formatElevation(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6)
{
  id v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[2];

  v17[0] = a4;
  v17[1] = a5;
  v10 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "initWithDoubleValue:unit:", a6);

  v12 = *a2;
  v16 = v11;
  v13 = v16;
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3AD8], "feet");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "measurementByConvertingToUnit:", v14);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  md::LabelValueFormatter::FormatMeasurement(a1, (uint64_t)a2, v13, a3, 1, (int *)v17);

}

void sub_19F52096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::LabelValueFormatter::FormatMeasurement(_QWORD *a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, int *a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;

  v30 = a3;
  if (a4 == 1)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    v12 = v11;
    if (*(_QWORD *)(a2 + 16))
      objc_msgSend(v11, "setLocale:");
    if (*((_BYTE *)a6 + 4))
      objc_msgSend(v12, "setMinimumFractionDigits:", *a6);
    objc_msgSend(v12, "setMaximumFractionDigits:", a6[2]);
    objc_msgSend(v12, "setNumberStyle:", 1);
    if (!*((_BYTE *)a6 + 12))
      objc_msgSend(v12, "setUsesGroupingSeparator:", 0);
    v13 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v30, "doubleValue");
    objc_msgSend(v13, "numberWithDouble:");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringFromNumber:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
LABEL_9:
      v16 = (const char *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String");
      goto LABEL_21;
    }
  }
  else
  {
    v17 = objc_alloc_init(MEMORY[0x1E0CB3760]);
    v18 = v17;
    if (*(_QWORD *)(a2 + 16))
      objc_msgSend(v17, "setLocale:");
    objc_msgSend(v18, "setUnitOptions:", a5);
    if (a4 > 4)
      v19 = 1;
    else
      v19 = qword_19FFB8878[(char)a4];
    objc_msgSend(v18, "setUnitStyle:", v19);
    if (*((_BYTE *)a6 + 4))
    {
      v20 = *a6;
      objc_msgSend(v18, "numberFormatter");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setMinimumFractionDigits:", v20);

    }
    v22 = a6[2];
    objc_msgSend(v18, "numberFormatter");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setMaximumFractionDigits:", v22);

    if (!*((_BYTE *)a6 + 12))
    {
      objc_msgSend(v18, "numberFormatter");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "setUsesGroupingSeparator:", 0);

    }
    objc_msgSend(v18, "stringFromMeasurement:", v30);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      goto LABEL_9;
  }
  v16 = "";
LABEL_21:
  v25 = strlen(v16);
  if (v25 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v27 = v25 | 7;
    v28 = v27 + 1;
    v29 = operator new(v27 + 1);
    a1[1] = v26;
    a1[2] = v28 | 0x8000000000000000;
    *a1 = v29;
    a1 = v29;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v25;
    if (!v25)
      goto LABEL_29;
  }
  memmove(a1, v16, v26);
LABEL_29:
  *((_BYTE *)a1 + v26) = 0;

}

void sub_19F520C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void md::LabelValueFormatter::formatDateTime(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, double a5)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;

  v10 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v21 = v10;
  if (*(_QWORD *)(a2 + 16))
    objc_msgSend(v10, "setLocale:");
  if (*(_QWORD *)(a2 + 32))
    objc_msgSend(v21, "setTimeZone:");
  if (a3 > 4)
    v11 = 1;
  else
    v11 = qword_19FFB88A0[a3];
  objc_msgSend(v21, "setDateStyle:", v11);
  if (a4 > 4)
    v12 = 1;
  else
    v12 = qword_19FFB88A0[a4];
  objc_msgSend(v21, "setTimeStyle:", v12);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a5 * 60.0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringFromDate:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    v15 = (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
  else
    v15 = "";
  v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    a1[1] = v17;
    a1[2] = v19 | 0x8000000000000000;
    *a1 = v20;
    a1 = v20;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v16;
    if (!v16)
      goto LABEL_22;
  }
  memmove(a1, v15, v17);
LABEL_22:
  *((_BYTE *)a1 + v17) = 0;

}

void sub_19F520E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::layout2DBuildings(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *i;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t *v36;
  int8x8_t v37;
  uint8x8_t v38;
  _QWORD *v39;
  uint64_t v40;
  id *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t j;
  id v59;
  uint64_t *v60;
  _QWORD *v61;
  float v62;
  __int128 *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  int32x2_t v74;
  _QWORD *v75;
  int32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  float v81;
  int v82;
  int v83;
  int v84;
  int v85;
  float v86;
  float v87;
  uint64_t v88;
  __n128 v89;
  __n128 v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  char v94;
  char v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  float *v104;
  float v105;
  BOOL v106;
  int v107;
  char v108;
  char v109;
  BOOL v110;
  char v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  ggl::PipelineSetup *v121;
  ggl::PipelineSetup **v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  ggl::PipelineSetup **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  ggl::PipelineSetup **v146;
  uint64_t v147;
  ggl::PipelineSetup **v148;
  __int128 *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  ggl::PipelineSetup **v156;
  __int128 *v157;
  uint64_t v158;
  __int128 v159;
  ggl::PipelineSetup *v160;
  ggl::PipelineSetup *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  __int128 *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  __int128 *v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  int v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  float *v239;
  float v240;
  int v242;
  char v243;
  char v244;
  uint64_t v245;
  __int128 *v246;
  _QWORD *v247;
  _QWORD *v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  float v253;
  unsigned int v254;
  float v255;
  float v256;
  float v257;
  float v258;
  uint16x4_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float *v263;
  unint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  float *v270;
  uint64_t v271;
  float *v272;
  float v273;
  unsigned int v274;
  float v275;
  float v276;
  _QWORD *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  float v285;
  float32x4_t *v286;
  uint64_t v287;
  uint64_t *v288;
  std::__shared_weak_count *v289;
  uint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t *v307;
  unsigned __int8 v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  int v321;
  __int128 v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _OWORD *v340;
  __int128 *v341;
  uint64_t v342;
  __int128 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t *v348;
  unsigned __int8 v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  int v362;
  __int128 v363;
  uint64_t v364;
  _QWORD *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _OWORD *v381;
  __int128 *v382;
  uint64_t v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t *v392;
  unsigned __int8 v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  int v406;
  __int128 v407;
  uint64_t v408;
  _QWORD *v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _OWORD *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *k;
  unint64_t v432;
  _BYTE *v433;
  _QWORD *v434;
  uint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  _QWORD *v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  float v445;
  unint64_t *v446;
  uint64_t v447;
  std::__shared_weak_count *v448;
  _QWORD *v449;
  uint64_t v450;
  float32x4_t v451;
  uint64_t v452;
  uint64_t v453;
  char v454;
  uint64_t v455;
  float v456;
  uint64_t *v458;
  double v459;
  double v460;
  double v461;
  double v462;
  uint16x4_t v463;
  uint64_t v464;
  int64x2_t v465;
  float v466;
  uint64_t v467;
  char v468;
  int v469;
  ggl::PipelineSetup *v470;
  unsigned int v471;
  unsigned int v472;
  id v473;
  _OWORD v475[4];
  char v476;
  _BYTE v477[24];
  _BYTE *v478;
  _BYTE v479[24];
  _BYTE *v480;
  _BYTE v481[24];
  _BYTE *v482;
  _BYTE v483[36];
  __int128 v484;
  __int128 v485;
  int v486;
  _QWORD v487[3];
  _QWORD *v488;
  uint64_t v489;

  v489 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(a4 + 8);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_26;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v9 <= 0x401D4CCE847AB1D1uLL)
      v11 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x401D4CCE847AB1D1;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_26;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_26;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x401D4CCE847AB1D1)
      {
        if (v13[2] == 0x401D4CCE847AB1D1)
          goto LABEL_22;
      }
      else if ((v15 & (*(_QWORD *)&v9 - 1)) != v11)
      {
        goto LABEL_26;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == 0x401D4CCE847AB1D1)
      break;
    if (v14 >= *(_QWORD *)&v9)
      v14 %= *(_QWORD *)&v9;
    if (v14 != v11)
      goto LABEL_26;
LABEL_11:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_26;
  }
  if (v13[2] != 0x401D4CCE847AB1D1)
    goto LABEL_11;
LABEL_22:
  v16 = v13[5];
  if (*(_QWORD *)(v16 + 8) == 0x401D4CCE847AB1D1)
  {
    v17 = *(_QWORD *)(v16 + 32);
    if (v17)
    {
      if (*(_BYTE *)(v17 + 16))
      {
        v444 = *(_QWORD *)(v17 + 8);
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  v444 = 0;
LABEL_27:
  if (a5 != 1 || v444)
  {
    v19 = *a2;
    v18 = a2[1];
    if (v18 != *a2)
    {
      if (!*(_QWORD *)&v9)
        goto LABEL_53;
      v20 = (uint8x8_t)vcnt_s8(v9);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
          v21 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
      }
      else
      {
        v21 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
      }
      v22 = *(_QWORD **)(*v8 + 8 * v21);
      if (!v22)
        goto LABEL_53;
      v23 = (_QWORD *)*v22;
      if (!v23)
        goto LABEL_53;
      if (v20.u32[0] < 2uLL)
      {
        v24 = *(_QWORD *)&v9 - 1;
        while (1)
        {
          v26 = v23[1];
          if (v26 == 0x1AF456233693CD46)
          {
            if (v23[2] == 0x1AF456233693CD46)
              goto LABEL_51;
          }
          else if ((v26 & v24) != v21)
          {
            goto LABEL_53;
          }
          v23 = (_QWORD *)*v23;
          if (!v23)
            goto LABEL_53;
        }
      }
      while (1)
      {
        v25 = v23[1];
        if (v25 == 0x1AF456233693CD46)
          break;
        if (v25 >= *(_QWORD *)&v9)
          v25 %= *(_QWORD *)&v9;
        if (v25 != v21)
          goto LABEL_53;
LABEL_40:
        v23 = (_QWORD *)*v23;
        if (!v23)
          goto LABEL_53;
      }
      if (v23[2] != 0x1AF456233693CD46)
        goto LABEL_40;
LABEL_51:
      v27 = v23[5];
      if (*(_QWORD *)(v27 + 8) != 0x1AF456233693CD46)
      {
LABEL_53:
        v450 = 0;
        goto LABEL_54;
      }
      v450 = *(_QWORD *)(v27 + 32);
LABEL_54:
      v28 = 0.0;
      v29 = 3.4028e38;
      do
      {
        v30 = *(_QWORD *)(*v19 + 384);
        v31 = *(uint64_t **)(v30 + 720);
        for (i = *(uint64_t **)(v30 + 728); v31 != i; v31 += 3)
        {
          v33 = *v31;
          v34 = v31[1];
          if (*v31 != v34)
          {
            do
            {
              v35 = *(id *)(v33 + 8);
              v29 = fminf(*(float *)(objc_msgSend(v35, "origin") + 8), v29);
              v28 = fmaxf(v28, *(float *)(objc_msgSend(v35, "maxPoint") + 8));

              v33 += 24;
            }
            while (v33 != v34);
          }
        }
        ++v19;
      }
      while (v19 != v18);
      v36 = *(uint64_t **)(a4 + 8);
      v37 = (int8x8_t)v36[1];
      if (!*(_QWORD *)&v37)
      {
        v439 = 0;
        v41 = 0;
        v39 = a1;
        goto LABEL_109;
      }
      v38 = (uint8x8_t)vcnt_s8(v37);
      v38.i16[0] = vaddlv_u8(v38);
      v39 = a1;
      if (v38.u32[0] > 1uLL)
      {
        v40 = 0x4927EB92E562CC46;
        if (*(_QWORD *)&v37 <= 0x4927EB92E562CC46uLL)
          v40 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v37;
      }
      else
      {
        v40 = (*(_QWORD *)&v37 - 1) & 0x4927EB92E562CC46;
      }
      v42 = *v36;
      v43 = *(_QWORD **)(v42 + 8 * v40);
      if (!v43)
        goto LABEL_85;
      v44 = (_QWORD *)*v43;
      if (!v44)
        goto LABEL_85;
      if (v38.u32[0] < 2uLL)
      {
        while (1)
        {
          v46 = v44[1];
          if (v46 == 0x4927EB92E562CC46)
          {
            if (v44[2] == 0x4927EB92E562CC46)
              goto LABEL_83;
          }
          else if ((v46 & (*(_QWORD *)&v37 - 1)) != v40)
          {
            goto LABEL_85;
          }
          v44 = (_QWORD *)*v44;
          if (!v44)
            goto LABEL_85;
        }
      }
      while (2)
      {
        v45 = v44[1];
        if (v45 != 0x4927EB92E562CC46)
        {
          if (v45 >= *(_QWORD *)&v37)
            v45 %= *(_QWORD *)&v37;
          if (v45 != v40)
            goto LABEL_85;
          goto LABEL_72;
        }
        if (v44[2] != 0x4927EB92E562CC46)
        {
LABEL_72:
          v44 = (_QWORD *)*v44;
          if (!v44)
            goto LABEL_85;
          continue;
        }
        break;
      }
LABEL_83:
      v47 = v44[5];
      if (*(_QWORD *)(v47 + 8) == 0x4927EB92E562CC46)
      {
        v439 = *(_QWORD *)(v47 + 32);
        goto LABEL_86;
      }
LABEL_85:
      v439 = 0;
LABEL_86:
      if (v38.u32[0] > 1uLL)
      {
        v48 = 0xA60DDA5A69582425;
        if (*(_QWORD *)&v37 <= 0xA60DDA5A69582425)
          v48 = 0xA60DDA5A69582425 % *(_QWORD *)&v37;
      }
      else
      {
        v48 = (*(_QWORD *)&v37 - 1) & 0xA60DDA5A69582425;
      }
      v49 = *(_QWORD **)(v42 + 8 * v48);
      if (!v49)
        goto LABEL_108;
      v50 = (_QWORD *)*v49;
      if (!v50)
        goto LABEL_108;
      if (v38.u32[0] < 2uLL)
      {
        v51 = *(_QWORD *)&v37 - 1;
        while (1)
        {
          v53 = v50[1];
          if (v53 == 0xA60DDA5A69582425)
          {
            if (v50[2] == 0xA60DDA5A69582425)
              goto LABEL_106;
          }
          else if ((v53 & v51) != v48)
          {
            goto LABEL_108;
          }
          v50 = (_QWORD *)*v50;
          if (!v50)
            goto LABEL_108;
        }
      }
      while (2)
      {
        v52 = v50[1];
        if (v52 != 0xA60DDA5A69582425)
        {
          if (v52 >= *(_QWORD *)&v37)
            v52 %= *(_QWORD *)&v37;
          if (v52 != v48)
            goto LABEL_108;
          goto LABEL_95;
        }
        if (v50[2] != 0xA60DDA5A69582425)
        {
LABEL_95:
          v50 = (_QWORD *)*v50;
          if (!v50)
            goto LABEL_108;
          continue;
        }
        break;
      }
LABEL_106:
      v54 = v50[5];
      if (*(_QWORD *)(v54 + 8) == 0xA60DDA5A69582425)
      {
        v41 = *(id **)(v54 + 32);
        goto LABEL_109;
      }
LABEL_108:
      v41 = 0;
LABEL_109:
      v449 = v39 + 52;
      if (v39[55])
      {
        v55 = (_QWORD *)v39[54];
        if (v55)
        {
          do
          {
            v56 = (_QWORD *)*v55;
            operator delete(v55);
            v55 = v56;
          }
          while (v56);
        }
        v39[54] = 0;
        v57 = v39[53];
        if (v57)
        {
          for (j = 0; j != v57; ++j)
            *(_QWORD *)(*v449 + 8 * j) = 0;
        }
        v39[55] = 0;
      }
      v59 = *v41;
      v443 = objc_msgSend(v59, "alphaAtlas");

      v60 = *a2;
      v438 = (uint64_t)a2[1];
      v61 = v39 + 52;
      if (*a2 != (uint64_t *)v438)
      {
        v62 = 1.0;
        v63 = &v485;
        v64 = (int)fmaxf(*(float *)(v450 + 3080) + *(float *)(v450 + 3076), 1.0);
        if (v64 >= 0x17)
          v65 = 23;
        else
          v65 = v64;
        v445 = 1.0 / (float)(v28 - v29);
        v465 = vdupq_n_s64(1uLL);
        v472 = v65;
        while (1)
        {
          v440 = v60;
          v66 = *(_QWORD *)(*v60 + 384);
          v452 = *v60;
          v447 = *(_QWORD *)(*v60 + 216);
          v448 = *(std::__shared_weak_count **)(*v60 + 224);
          if (v448)
          {
            p_shared_owners = (unint64_t *)&v448->__shared_owners_;
            do
              v68 = __ldxr(p_shared_owners);
            while (__stxr(v68 + 1, p_shared_owners));
          }
          if ((*(_BYTE *)(v447 + 16) & 2) == 0)
          {
            v69 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v69 != -1)
            {
              *(_QWORD *)&v484 = v487;
              *(_QWORD *)v483 = &v484;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v483, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          v70 = *(_OWORD **)(v447 + 72);
          v71 = v70[1];
          v475[0] = *v70;
          v475[1] = v71;
          v72 = v70[3];
          v475[2] = v70[2];
          v475[3] = v72;
          v471 = ggl::CullingGrid::intersectedCellsForView((float *)v475, 0.0);
          v73 = *(unsigned __int8 *)(v66 + 169);
          md::featureIdPredicate((uint64_t)v487, a5, 0, *(_BYTE *)(v66 + 169), v444, v439, (uint64_t)v61);
          v75 = *(_QWORD **)(v66 + 720);
          v441 = *(_QWORD **)(v66 + 728);
          if (v75 != v441)
          {
            v456 = *(float *)(v452 + 412);
            v74.i32[0] = 931135616;
            v466 = *(float *)(v452 + 404);
            v76 = vdupq_lane_s32(v74, 0);
            *(float *)&v76.i32[3] = v466 * 0.000015259;
            v451 = (float32x4_t)v76;
            v446 = (unint64_t *)&v448->__shared_owners_;
            v453 = v73 - 0x61C8864680B583EBLL;
            v454 = v73;
            while (1)
            {
              v442 = v75;
              v77 = *v75;
              v455 = v75[1];
              if (*v75 != v455)
                break;
LABEL_130:
              v75 = v442 + 3;
              if (v442 + 3 == v441)
                goto LABEL_577;
            }
            while (2)
            {
              v464 = v77;
              v473 = *(id *)(v77 + 8);
              v78 = objc_msgSend(v473, "origin");
              v79 = *(_DWORD *)v78;
              v80 = *(_DWORD *)(v78 + 4);
              v81 = *(float *)(v78 + 8);
              objc_msgSend(v473, "size");
              v83 = v82;
              v85 = v84;
              v87 = v86;
              v88 = objc_msgSend(v473, "styleQueriesForPointyRoofs:selected:", 0, a5 == 1);
              v89.n128_u32[0] = 953267991;
              v90.n128_f32[0] = v466;
              if (v466 <= 0.0001)
              {
LABEL_571:
                for (k = *(_QWORD **)(objc_msgSend(v473, "featureIds", v438) + 16); k; k = (_QWORD *)*k)
                {
                  v432 = k[2];
                  v433 = operator new(0x20uLL);
                  v433[24] = v454;
                  *(_QWORD *)v433 = 0;
                  *((_QWORD *)v433 + 1) = (v453 + (v432 << 6) + (v432 >> 2)) ^ v432;
                  *((_QWORD *)v433 + 2) = v432;
                  if ((std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique(v61, (uint64_t)v433) & 1) == 0)operator delete(v433);
                }

                v77 = v464 + 24;
                if (v464 + 24 == v455)
                  goto LABEL_130;
                continue;
              }
              break;
            }
            v91 = v88;
            v92 = *(uint64_t **)v88;
            v93 = *(uint64_t **)(v88 + 8);
            if (*(uint64_t **)v88 != v93)
            {
              v94 = 0;
              while (1)
              {
                v96 = *v92;
                v97 = (std::__shared_weak_count *)v92[1];
                *(_QWORD *)v483 = *v92;
                *(_QWORD *)&v483[8] = v97;
                if (v97)
                {
                  v98 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v99 = __ldxr(v98);
                  while (__stxr(v99 + 1, v98));
                  *((_QWORD *)&v484 + 1) = v97;
                  do
                    v100 = __ldxr(v98);
                  while (__stxr(v100 + 1, v98));
                }
                else
                {
                  *((_QWORD *)&v484 + 1) = 0;
                }
                *(_QWORD *)&v484 = v96;
                *(_QWORD *)v63 = 0;
                *((_QWORD *)v63 + 1) = 0;
                *((_BYTE *)v63 + 16) = 0;
                if (v96)
                  LODWORD(v96) = (*(uint64_t (**)(uint64_t, __int128 *, __n128, __n128))(*(_QWORD *)v96 + 48))(v96, v63, v89, v90);
                LOBYTE(v486) = v96;
                if (v97)
                {
                  v101 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128, __n128))v97->__on_zero_shared)(v97, v89, v90);
                    std::__shared_weak_count::__release_weak(v97);
                  }
                  LODWORD(v96) = v486;
                }
                if ((_DWORD)v96)
                {
                  v103 = *(_QWORD *)(v484 + 24);
                  v104 = *(float **)v103;
                  if (*(_QWORD *)v103
                    && (v105 = *v104, LODWORD(v104) = *v104 == 1.0, *(_BYTE *)(v103 + 10))
                    && (v105 != 0.0 ? (v106 = v105 == 1.0) : (v106 = 1), !v106)
                    || (v107 = *(unsigned __int8 *)(v103 + v104 + 11), v105 = 0.0, v107 == 2))
                  {
                    v483[0] = 1;
                    v476 = 1;
                    v108 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v65, 0, v483);
                    v109 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v65, 1, &v476);
                    v89.n128_u32[0] = 1.0;
                    v110 = v105 < 1.0;
                    v62 = 1.0;
                    if (v110)
                      v109 = v108;
                    if (v109)
                    {
LABEL_166:
                      v94 = 1;
                      v111 = 1;
                      if (!(_BYTE)v486)
                        goto LABEL_171;
LABEL_170:
                      (*(void (**)(_QWORD))(*(_QWORD *)v484 + 56))(v484);
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    v62 = 1.0;
                    if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v484 + 24), 0x5Bu, v65, v107, 0))goto LABEL_166;
                  }
                }
                v111 = 0;
                if ((_BYTE)v486)
                  goto LABEL_170;
LABEL_171:
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v485 + 1);
                if (!*((_QWORD *)&v485 + 1))
                  goto LABEL_175;
                v113 = (unint64_t *)(*((_QWORD *)&v485 + 1) + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                  v115 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
                  if (*((_QWORD *)&v484 + 1))
                  {
LABEL_176:
                    v116 = (unint64_t *)&v115->__shared_owners_;
                    do
                      v117 = __ldaxr(v116);
                    while (__stlxr(v117 - 1, v116));
                    if (!v117)
                    {
                      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                      std::__shared_weak_count::__release_weak(v115);
                    }
                  }
                }
                else
                {
LABEL_175:
                  v115 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
                  if (*((_QWORD *)&v484 + 1))
                    goto LABEL_176;
                }
                v92 += 2;
                if (v92 == v93)
                  v95 = 1;
                else
                  v95 = v111;
                if ((v95 & 1) != 0)
                  goto LABEL_183;
              }
            }
            v94 = 0;
LABEL_183:
            if (a5 == 1)
            {
              v61 = v449;
              if ((v94 & 1) == 0 || !objc_msgSend(v473, "hasFeatureId:", v444))
                goto LABEL_571;
            }
            else
            {
              v61 = v449;
              if ((v94 & 1) == 0)
                goto LABEL_571;
            }
            v118 = a1;
            v119 = *(_QWORD *)(a1[49] + 480);
            v120 = *(_QWORD *)(v119 + 8);
            if (v120 != *(_QWORD *)v119)
            {
              v121 = *(ggl::PipelineSetup **)(v120 - 8);
              *(_QWORD *)(v119 + 8) = v120 - 8;
              v122 = *(ggl::PipelineSetup ***)(v119 + 40);
              v123 = *(_QWORD *)(v119 + 48);
              v124 = (unint64_t *)&v448->__shared_owners_;
              v470 = v121;
              if ((unint64_t)v122 < v123)
              {
                if (v122)
                  *v122 = v121;
                goto LABEL_196;
              }
              v128 = *(_QWORD *)(v119 + 32);
              v129 = ((uint64_t)v122 - v128) >> 3;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_593;
              v131 = v123 - v128;
              if (v131 >> 2 > v130)
                v130 = v131 >> 2;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              if (v132)
              {
                v133 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v119 + 56) + 16))(*(_QWORD *)(v119 + 56), 8 * v132, 8);
                v134 = (ggl::PipelineSetup **)(v133 + 8 * v129);
                v135 = v133 + 8 * v132;
                if (v133)
                  *v134 = v470;
              }
              else
              {
                v135 = 0;
                v134 = (ggl::PipelineSetup **)(8 * v129);
              }
              v143 = *(_QWORD *)(v119 + 32);
              v142 = *(_QWORD *)(v119 + 40);
              v144 = v142 - v143;
              if (v142 != v143)
              {
                v145 = v144 - 8;
                if ((unint64_t)(v144 - 8) < 0x38)
                {
                  v146 = v134;
                }
                else
                {
                  v146 = v134;
                  if ((unint64_t)(v142 - (_QWORD)v134) >= 0x20)
                  {
                    v147 = (v145 >> 3) + 1;
                    v148 = v134 - 2;
                    v149 = (__int128 *)(v142 - 16);
                    v150 = v147 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v151 = *v149;
                      *((_OWORD *)v148 - 1) = *(v149 - 1);
                      *(_OWORD *)v148 = v151;
                      v148 -= 4;
                      v149 -= 2;
                      v150 -= 4;
                    }
                    while (v150);
                    v146 = &v134[-(v147 & 0x3FFFFFFFFFFFFFFCLL)];
                    v142 -= 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v147 == (v147 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_237;
                  }
                }
                do
                {
                  v160 = *(ggl::PipelineSetup **)(v142 - 8);
                  v142 -= 8;
                  *--v146 = v160;
                }
                while (v142 != v143);
                goto LABEL_237;
              }
LABEL_231:
              v146 = v134;
LABEL_238:
              v127 = v134 + 1;
              *(_QWORD *)(v119 + 32) = v146;
              *(_QWORD *)(v119 + 40) = v134 + 1;
              v162 = *(_QWORD *)(v119 + 48);
              *(_QWORD *)(v119 + 48) = v135;
              if (v142)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v119 + 56) + 40))(*(_QWORD *)(v119 + 56), v142, v162 - v142);
LABEL_240:
              *(_QWORD *)(v119 + 40) = v127;
              *(_QWORD *)&v484 = v470;
              v163 = *(_QWORD *)(v119 + 120);
              if (!v163)
                goto LABEL_591;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v163 + 48))(v163, &v484);
              v164 = (_QWORD *)*((_QWORD *)v470 + 8);
              *v164 = v447;
              v164[1] = 0;
              v165 = (_QWORD *)*((_QWORD *)v470 + 20);
              if (v448)
              {
                do
                  v166 = __ldxr(v124);
                while (__stxr(v166 + 1, v124));
              }
              v167 = (std::__shared_weak_count *)v165[1];
              *v165 = v447;
              v165[1] = v448;
              if (v167)
              {
                v168 = (unint64_t *)&v167->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              v170 = *(_QWORD **)(*((_QWORD *)v470 + 8) + 16);
              v171 = v170[1];
              if (v171)
                v172 = v170[9];
              else
                v172 = 0;
              v173 = (float)(v81 - v29) * v445;
              v174 = v87 * v445;
              *(_DWORD *)(v172 + 128) = v79;
              *(_DWORD *)(v172 + 132) = v80;
              *(float *)(v172 + 136) = v173;
              *(_DWORD *)(v172 + 144) = v83;
              *(_DWORD *)(v172 + 148) = v85;
              *(float *)(v172 + 152) = v174;
              if (v172 && v171)
              {
                if (v170[8] > v171)
                  v171 = v170[8];
                v170[7] = 0;
                v170[8] = v171;
              }
              v175 = a1[49];
              if (!*(_BYTE *)(v175 + 768))
              {
                v467 = 0;
                v188 = 0;
                goto LABEL_324;
              }
              v176 = *(_QWORD *)(v175 + 472);
              v177 = *(_QWORD *)(v176 + 8);
              if (v177 != *(_QWORD *)v176)
              {
                v467 = *(_QWORD *)(v177 - 8);
                *(_QWORD *)(v176 + 8) = v177 - 8;
                v178 = *(uint64_t **)(v176 + 40);
                v179 = *(_QWORD *)(v176 + 48);
                if ((unint64_t)v178 >= v179)
                {
                  v180 = *(_QWORD *)(v176 + 32);
                  v181 = ((uint64_t)v178 - v180) >> 3;
                  v182 = v181 + 1;
                  if ((unint64_t)(v181 + 1) >> 61)
                    goto LABEL_594;
                  v183 = v179 - v180;
                  if (v183 >> 2 > v182)
                    v182 = v183 >> 2;
                  if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
                    v184 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v184 = v182;
                  if (v184)
                  {
                    v185 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v176 + 56) + 16))(*(_QWORD *)(v176 + 56), 8 * v184, 8);
                    v186 = (uint64_t *)(v185 + 8 * v181);
                    v187 = v185 + 8 * v184;
                    if (v185)
                      *v186 = v467;
                  }
                  else
                  {
                    v187 = 0;
                    v186 = (uint64_t *)(8 * v181);
                  }
                  v199 = *(_QWORD *)(v176 + 32);
                  v198 = *(_QWORD *)(v176 + 40);
                  v200 = v198 - v199;
                  if (v198 != v199)
                  {
                    v201 = v200 - 8;
                    if ((unint64_t)(v200 - 8) < 0x38)
                    {
                      v202 = v186;
                    }
                    else
                    {
                      v202 = v186;
                      if ((unint64_t)(v198 - (_QWORD)v186) >= 0x20)
                      {
                        v203 = (v201 >> 3) + 1;
                        v204 = v186 - 2;
                        v205 = (__int128 *)(v198 - 16);
                        v206 = v203 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v207 = *v205;
                          *((_OWORD *)v204 - 1) = *(v205 - 1);
                          *(_OWORD *)v204 = v207;
                          v204 -= 4;
                          v205 -= 2;
                          v206 -= 4;
                        }
                        while (v206);
                        v202 = &v186[-(v203 & 0x3FFFFFFFFFFFFFFCLL)];
                        v198 -= 8 * (v203 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v203 == (v203 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_305;
                      }
                    }
                    do
                    {
                      v216 = *(_QWORD *)(v198 - 8);
                      v198 -= 8;
                      *--v202 = v216;
                    }
                    while (v198 != v199);
                    goto LABEL_305;
                  }
LABEL_299:
                  v202 = v186;
LABEL_306:
                  v191 = v186 + 1;
                  *(_QWORD *)(v176 + 32) = v202;
                  *(_QWORD *)(v176 + 40) = v186 + 1;
                  v218 = *(_QWORD *)(v176 + 48);
                  *(_QWORD *)(v176 + 48) = v187;
                  if (v198)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v176 + 56) + 40))(*(_QWORD *)(v176 + 56), v198, v218 - v198);
LABEL_308:
                  *(_QWORD *)(v176 + 40) = v191;
                  *(_QWORD *)&v484 = v467;
                  v219 = *(_QWORD *)(v176 + 120);
                  if (!v219)
                  {
LABEL_591:
                    std::__throw_bad_function_call[abi:nn180100]();
                    __break(1u);
                  }
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v219 + 48))(v219, &v484);
                  v220 = *(_QWORD **)(v467 + 64);
                  *v220 = v447;
                  v220[1] = 0;
                  v221 = *(_QWORD **)(v467 + 160);
                  if (v448)
                  {
                    do
                      v222 = __ldxr(v446);
                    while (__stxr(v222 + 1, v446));
                  }
                  v223 = (std::__shared_weak_count *)v221[1];
                  *v221 = v447;
                  v221[1] = v448;
                  if (v223)
                  {
                    v224 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  **(_QWORD **)(v467 + 96) = *(_QWORD *)(v443 + 24);
                  v188 = *(_QWORD **)(*(_QWORD *)(v467 + 64) + 16);
                  v226 = v188[1];
                  if (v226)
                    v227 = v188[9];
                  else
                    v227 = 0;
                  *(_DWORD *)(v227 + 288) = 1084227584;
                  *(_DWORD *)(v227 + 304) = v79;
                  *(_DWORD *)(v227 + 308) = v80;
                  *(float *)(v227 + 312) = v173;
                  *(_DWORD *)(v227 + 320) = v83;
                  *(_DWORD *)(v227 + 324) = v85;
                  *(float *)(v227 + 328) = v174;
                  if (v227 && v226)
                  {
                    if (v188[8] > v226)
                      v226 = v188[8];
                    v188[7] = 0;
                    v188[8] = v226;
                  }
LABEL_324:
                  v229 = *(uint64_t **)v91;
                  v228 = *(uint64_t **)(v91 + 8);
                  if (*(uint64_t **)v91 == v228)
                  {
                    v287 = a1[49];
                    goto LABEL_411;
                  }
                  v468 = 0;
                  v230 = 0;
                  v458 = *(uint64_t **)(v91 + 8);
                  while (2)
                  {
                    v231 = *v229;
                    v232 = (std::__shared_weak_count *)v229[1];
                    *(_QWORD *)v483 = *v229;
                    *(_QWORD *)&v483[8] = v232;
                    if (v232)
                    {
                      v233 = (unint64_t *)&v232->__shared_owners_;
                      do
                        v234 = __ldxr(v233);
                      while (__stxr(v234 + 1, v233));
                      *((_QWORD *)&v484 + 1) = v232;
                      do
                        v235 = __ldxr(v233);
                      while (__stxr(v235 + 1, v233));
                    }
                    else
                    {
                      *((_QWORD *)&v484 + 1) = 0;
                    }
                    *(_QWORD *)&v484 = v231;
                    *(_QWORD *)v63 = 0;
                    *((_QWORD *)v63 + 1) = 0;
                    *((_BYTE *)v63 + 16) = 0;
                    if (v231)
                      LODWORD(v231) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v231 + 48))(v231, v63);
                    LOBYTE(v486) = v231;
                    if (v232)
                    {
                      v236 = (unint64_t *)&v232->__shared_owners_;
                      do
                        v237 = __ldaxr(v236);
                      while (__stlxr(v237 - 1, v236));
                      if (!v237)
                      {
                        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                        std::__shared_weak_count::__release_weak(v232);
                      }
                      LODWORD(v231) = v486;
                    }
                    if ((_DWORD)v231)
                    {
                      v238 = *(_QWORD *)(v484 + 24);
                      v239 = *(float **)v238;
                      v469 = v230;
                      if (*(_QWORD *)v238)
                      {
                        v240 = *v239;
                        LODWORD(v239) = *v239 == v62;
                        if (*(_BYTE *)(v238 + 10))
                        {
                          if (v240 != 0.0 && v240 != v62)
                            goto LABEL_351;
                        }
                      }
                      v242 = *(unsigned __int8 *)(v238 + v239 + 11);
                      v240 = 0.0;
                      if (v242 == 2)
                      {
LABEL_351:
                        v483[0] = 1;
                        v476 = 1;
                        v243 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v238, 0x5Bu, v65, 0, v483);
                        v244 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v238, 0x5Bu, v65, 1, &v476);
                        if (v240 < v62)
                          v244 = v243;
                      }
                      else
                      {
                        v244 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v238, 0x5Bu, v65, v242, 0);
                      }
                      v230 = v469;
                      if (v244)
                      {
                        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v483, *(_QWORD *)(v484 + 24), 0xA0u, v65, 2u, 0);
                        v245 = a3;
                        v246 = v63;
                        v247 = v188;
                        v248 = v170;
                        v249 = *(unsigned __int16 *)v483;
                        v250 = *(unsigned __int16 *)&v483[2];
                        v251 = *(unsigned __int16 *)&v483[4];
                        v252 = *(unsigned __int16 *)&v483[6];
                        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v483, *(_QWORD *)(v484 + 24), 0xA3u, v65, 2u, 0);
                        v253 = v29;
                        LOWORD(v62) = *(_WORD *)&v483[2];
                        LOWORD(v29) = *(_WORD *)v483;
                        LOWORD(v254) = *(_WORD *)&v483[6];
                        LOWORD(v174) = *(_WORD *)&v483[4];
                        v255 = (float)((float)((float)v254 * 0.000015259)
                                     + (float)((float)-(float)((float)((float)v254 * 0.000015259)
                                                             - (float)((float)v252 * 0.000015259))
                                             * v456))
                             * v466;
                        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v483, *(_QWORD *)(v484 + 24), 0x5Du, v65, 2u, 0);
                        v256 = (float)LODWORD(v174) * 0.000015259;
                        v257 = (float)((float)LODWORD(v29) * 0.000015259)
                             + (float)((float)-(float)((float)((float)LODWORD(v29) * 0.000015259)
                                                     - (float)((float)v249 * 0.000015259))
                                     * v456);
                        v174 = (float)((float)LODWORD(v62) * 0.000015259)
                             + (float)((float)-(float)((float)((float)LODWORD(v62) * 0.000015259)
                                                     - (float)((float)v250 * 0.000015259))
                                     * v456);
                        v258 = v256 + (float)((float)-(float)(v256 - (float)((float)v251 * 0.000015259)) * v456);
                        v259 = *(uint16x4_t *)v483;
                        v170 = v248;
                        v260 = v248[1];
                        if (v260)
                        {
                          v261 = v248[9];
                          v230 = v469;
                          v262 = v469;
                          v263 = (float *)(v261 + 16 * v469);
                          *v263 = v257;
                          v263[1] = v174;
                          v263[2] = v258;
                          v263[3] = v255;
                          v118 = a1;
                          v29 = v253;
                          v188 = v247;
                          if (v261)
                          {
                            v63 = v246;
                            if (v170[8] > v260)
                              v260 = v170[8];
                            v170[7] = 0;
                            v170[8] = v260;
LABEL_373:
                            a3 = v245;
                            v468 |= v255 < 0.9999;
                            v228 = v458;
                            if (!*(_BYTE *)(v118[49] + 768))
                              goto LABEL_406;
                            v463 = v259;
                            v271 = *(_QWORD *)(v484 + 24);
                            v272 = *(float **)v271;
                            v461 = *(double *)(v452 + 56);
                            v462 = *(double *)(v450 + 3768);
                            v459 = *(double *)(v450 + 1368);
                            v460 = *(double *)(v452 + 72);
                            if (*(_QWORD *)v271)
                            {
                              v273 = *v272;
                              LODWORD(v272) = *v272 == 1.0;
                              if (*(_BYTE *)(v271 + 10))
                              {
                                if (v273 != 0.0 && v273 != 1.0)
                                  goto LABEL_379;
                              }
                            }
                            v274 = *(unsigned __int8 *)(v271 + v272 + 11);
                            v273 = 0.0;
                            if (v274 == 2)
                            {
LABEL_379:
                              v483[0] = 1;
                              v476 = 1;
                              v275 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v271, 0x61u, v472, 0, v483);
                              v276 = v275
                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v271, 0x61u, v472, 1u, &v476)- v275)* v273);
                            }
                            else
                            {
                              v276 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v271, 0x61u, v472, v274, 0);
                            }
                            v268 = v188[1];
                            v29 = v253;
                            v230 = v469;
                            v284 = v268 ? v188[9] : 0;
                            v285 = v462 * 1.75 * v276 / (v459 * (v460 - v461));
                            *(float *)(v284 + 4 * v262 + 256) = v285;
                            v286 = (float32x4_t *)(v284 + 16 * v262);
                            v286->f32[0] = v257;
                            v286->f32[1] = v174;
                            v286->f32[2] = v258;
                            v286->f32[3] = v255;
                            v286[8] = vmulq_f32(v451, vcvtq_f32_u32(vmovl_u16(v463)));
                            if (v284)
                            {
                              v62 = 1.0;
                              v65 = v472;
                              if (!v268)
                                goto LABEL_386;
LABEL_383:
                              if (v188[8] > v268)
                                v268 = v188[8];
                              v188[7] = 0;
                              v188[8] = v268;
LABEL_386:
                              if ((_BYTE)v486)
                                goto LABEL_387;
                            }
                            else
                            {
LABEL_406:
                              v62 = 1.0;
                              v65 = v472;
                              if ((_BYTE)v486)
                                goto LABEL_387;
                            }
                            goto LABEL_388;
                          }
                        }
                        else
                        {
                          v230 = v469;
                          v262 = v469;
                          v270 = (float *)(16 * v469);
                          *v270 = v257;
                          v270[1] = v174;
                          v270[2] = v258;
                          v270[3] = v255;
                          v118 = a1;
                          v29 = v253;
                          v188 = v247;
                        }
                        v63 = v246;
                        goto LABEL_373;
                      }
                    }
                    v264 = v170[1];
                    if (v264)
                    {
                      v265 = v230;
                      v266 = (_QWORD *)(v170[9] + 16 * v230);
                      *v266 = 0;
                      v266[1] = 0;
                      if (v170[8] > v264)
                        v264 = v170[8];
                      v170[7] = 0;
                      v170[8] = v264;
                    }
                    else
                    {
                      v265 = v230;
                      v267 = (_QWORD *)(16 * v230);
                      *v267 = 0;
                      v267[1] = 0;
                    }
                    if (*(_BYTE *)(v118[49] + 768))
                    {
                      v268 = v188[1];
                      if (v268)
                        v269 = v188[9];
                      else
                        v269 = 0;
                      *(_DWORD *)(v269 + 4 * v265 + 256) = 0;
                      v277 = (_QWORD *)(v269 + 16 * v265);
                      *v277 = 0;
                      v277[1] = 0;
                      v277[16] = 0;
                      v277[17] = 0;
                      v468 = 1;
                      if (v269 && v268)
                        goto LABEL_383;
                      goto LABEL_386;
                    }
                    v468 = 1;
                    if ((_BYTE)v486)
LABEL_387:
                      (*(void (**)(_QWORD))(*(_QWORD *)v484 + 56))(v484);
LABEL_388:
                    v278 = (std::__shared_weak_count *)*((_QWORD *)&v485 + 1);
                    if (!*((_QWORD *)&v485 + 1))
                      goto LABEL_392;
                    v279 = (unint64_t *)(*((_QWORD *)&v485 + 1) + 8);
                    do
                      v280 = __ldaxr(v279);
                    while (__stlxr(v280 - 1, v279));
                    if (!v280)
                    {
                      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                      std::__shared_weak_count::__release_weak(v278);
                      v281 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
                      if (*((_QWORD *)&v484 + 1))
                      {
LABEL_393:
                        v282 = (unint64_t *)&v281->__shared_owners_;
                        do
                          v283 = __ldaxr(v282);
                        while (__stlxr(v283 - 1, v282));
                        if (!v283)
                        {
                          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                          std::__shared_weak_count::__release_weak(v281);
                        }
                      }
                    }
                    else
                    {
LABEL_392:
                      v281 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
                      if (*((_QWORD *)&v484 + 1))
                        goto LABEL_393;
                    }
                    ++v230;
                    v229 += 2;
                    if (v229 != v228)
                      continue;
                    break;
                  }
                  v287 = v118[49];
                  if ((v468 & 1) != 0)
                  {
                    v288 = (uint64_t *)(v287 + 56);
                    goto LABEL_412;
                  }
LABEL_411:
                  v288 = (uint64_t *)(v287 + 40);
LABEL_412:
                  v290 = *v288;
                  v289 = (std::__shared_weak_count *)v288[1];
                  if (v289)
                  {
                    v291 = (unint64_t *)&v289->__shared_owners_;
                    do
                      v292 = __ldxr(v291);
                    while (__stxr(v292 + 1, v291));
                  }
                  if (!v290 || **(_QWORD **)(v290 + 40) != *((_QWORD *)v470 + 1))
                  {
                    v293 = (std::__shared_weak_count *)*((_QWORD *)v470 + 3);
                    *((_QWORD *)v470 + 2) = 0;
                    *((_QWORD *)v470 + 3) = 0;
                    if (v293)
                    {
                      v294 = (unint64_t *)&v293->__shared_owners_;
                      do
                        v295 = __ldaxr(v294);
                      while (__stlxr(v295 - 1, v294));
                      goto LABEL_430;
                    }
                    goto LABEL_431;
                  }
                  v296 = *((_QWORD *)v470 + 2);
                  if (v296 && v296 != v290)
                    ggl::PipelineSetup::resetData((uint64_t)v470);
                  if (v289)
                  {
                    v297 = (unint64_t *)&v289->__shared_owners_;
                    do
                      v298 = __ldxr(v297);
                    while (__stxr(v298 + 1, v297));
                  }
                  v293 = (std::__shared_weak_count *)*((_QWORD *)v470 + 3);
                  *((_QWORD *)v470 + 2) = v290;
                  *((_QWORD *)v470 + 3) = v289;
                  if (!v293)
                    goto LABEL_431;
                  v299 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v295 = __ldaxr(v299);
                  while (__stlxr(v295 - 1, v299));
LABEL_430:
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                    std::__shared_weak_count::__release_weak(v293);
                    if (v289)
                    {
LABEL_432:
                      v300 = (unint64_t *)&v289->__shared_owners_;
                      do
                        v301 = __ldaxr(v300);
                      while (__stlxr(v301 - 1, v300));
                      if (!v301)
                      {
                        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                        std::__shared_weak_count::__release_weak(v289);
                      }
                    }
                  }
                  else
                  {
LABEL_431:
                    if (v289)
                      goto LABEL_432;
                  }
                  memset(&v483[4], 0, 32);
                  v302 = v118[49];
                  v303 = *(_QWORD *)(v302 + 624);
                  v304 = *(_DWORD *)(v302 + 776);
                  v305 = objc_msgSend(v473, "fillMeshes", v438);
                  v306 = *(uint64_t **)v305;
                  v307 = *(uint64_t **)(v305 + 8);
                  if (*(uint64_t **)v305 != v307)
                  {
                    v308 = 0;
                    while (1)
                    {
                      v310 = a1[49];
                      v311 = (uint64_t)v488;
                      if (!v488)
                        goto LABEL_444;
                      if (v488 != v487)
                        break;
                      v482 = v481;
                      (*(void (**)(_QWORD *, _BYTE *))(v487[0] + 24))(v487, v481);
LABEL_446:
                      v312 = (uint64_t *)objc_msgSend(v473, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v310 + 784, v308, v471, v481);
                      v313 = v482;
                      if (v482 == v481)
                      {
                        v313 = v481;
                        v314 = 4;
                      }
                      else
                      {
                        if (!v482)
                          goto LABEL_451;
                        v314 = 5;
                      }
                      (*(void (**)(void))(*v313 + 8 * v314))();
LABEL_451:
                      v315 = a1[49];
                      v316 = *v306;
                      v484 = *(_OWORD *)v483;
                      v485 = *(_OWORD *)&v483[16];
                      v486 = *(_DWORD *)&v483[32];
                      v317 = *(_QWORD **)(v315 + 872);
                      v318 = v317[1];
                      if (v318 == *(_QWORD *)(v315 + 880))
                      {
                        v317 = (_QWORD *)*v317;
                        if (!v317)
                        {
                          v317 = malloc_type_malloc(120 * v318 + 16, 0xB644C221uLL);
                          *v317 = 0;
                          v317[1] = 0;
                          **(_QWORD **)(v315 + 872) = v317;
                        }
                        *(_QWORD *)(v315 + 872) = v317;
                        v318 = v317[1];
                      }
                      v319 = &v317[15 * v318];
                      v319[2] = &off_1E42B59B0;
                      v320 = v319 + 2;
                      v317[1] = v318 + 1;
                      v320[2] = "";
                      v320[3] = v303;
                      v320[4] = v470;
                      *((_DWORD *)v320 + 10) = v304;
                      v320[6] = 0;
                      *((_DWORD *)v320 + 14) = 1065353216;
                      v321 = v486;
                      v322 = v485;
                      *(_OWORD *)((char *)v320 + 60) = v484;
                      *((_DWORD *)v320 + 23) = v321;
                      *(_OWORD *)((char *)v320 + 76) = v322;
                      *((int64x2_t *)v320 + 6) = vdupq_n_s64(1uLL);
                      v320[14] = 0;
                      v320[8] = v316;
                      v323 = *v312;
                      v320[11] = *v312;
                      v320[12] = (v312[1] - v323) >> 4;
                      v324 = *(_QWORD **)(a3 + 80);
                      v325 = *(_QWORD *)(a3 + 88);
                      if ((unint64_t)v324 >= v325)
                      {
                        v326 = *(_QWORD *)(a3 + 72);
                        v327 = ((uint64_t)v324 - v326) >> 3;
                        v328 = v327 + 1;
                        if ((unint64_t)(v327 + 1) >> 61)
                          abort();
                        v329 = v325 - v326;
                        if (v329 >> 2 > v328)
                          v328 = v329 >> 2;
                        if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
                          v330 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v330 = v328;
                        if (v330)
                        {
                          v331 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v330, 8);
                          v332 = (_QWORD *)(v331 + 8 * v327);
                          v333 = v331 + 8 * v330;
                          if (v331)
                            *v332 = v320;
                        }
                        else
                        {
                          v333 = 0;
                          v332 = (_QWORD *)(8 * v327);
                        }
                        v65 = v472;
                        v335 = *(_QWORD *)(a3 + 72);
                        v334 = *(_QWORD *)(a3 + 80);
                        v336 = v334 - v335;
                        if (v334 != v335)
                        {
                          v337 = v336 - 8;
                          if ((unint64_t)(v336 - 8) < 0x38)
                          {
                            v338 = v332;
                          }
                          else
                          {
                            v338 = v332;
                            if ((unint64_t)(v334 - (_QWORD)v332) >= 0x20)
                            {
                              v339 = (v337 >> 3) + 1;
                              v340 = v332 - 2;
                              v341 = (__int128 *)(v334 - 16);
                              v342 = v339 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v343 = *v341;
                                *(v340 - 1) = *(v341 - 1);
                                *v340 = v343;
                                v340 -= 2;
                                v341 -= 2;
                                v342 -= 4;
                              }
                              while (v342);
                              v338 = &v332[-(v339 & 0x3FFFFFFFFFFFFFFCLL)];
                              v334 -= 8 * (v339 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v339 == (v339 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_478:
                                v334 = *(_QWORD *)(a3 + 72);
LABEL_479:
                                v309 = v332 + 1;
                                *(_QWORD *)(a3 + 72) = v338;
                                *(_QWORD *)(a3 + 80) = v332 + 1;
                                v345 = *(_QWORD *)(a3 + 88);
                                *(_QWORD *)(a3 + 88) = v333;
                                if (v334)
                                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v334, v345 - v334);
                                goto LABEL_440;
                              }
                            }
                          }
                          do
                          {
                            v344 = *(_QWORD *)(v334 - 8);
                            v334 -= 8;
                            *--v338 = v344;
                          }
                          while (v334 != v335);
                          goto LABEL_478;
                        }
                        v338 = v332;
                        goto LABEL_479;
                      }
                      v65 = v472;
                      if (v324)
                        *v324 = v320;
                      v309 = v324 + 1;
LABEL_440:
                      *(_QWORD *)(a3 + 80) = v309;
                      ++v308;
                      v306 += 2;
                      if (v306 == v307)
                        goto LABEL_481;
                    }
                    v311 = (*(uint64_t (**)(void))(*v488 + 16))();
LABEL_444:
                    v482 = (_BYTE *)v311;
                    goto LABEL_446;
                  }
LABEL_481:
                  v346 = objc_msgSend(v473, "fillMeshesForPointyRoofs");
                  v347 = *(uint64_t **)v346;
                  v348 = *(uint64_t **)(v346 + 8);
                  if (*(uint64_t **)v346 != v348)
                  {
                    v349 = 0;
                    while (1)
                    {
                      v351 = a1[49];
                      v352 = (uint64_t)v488;
                      if (!v488)
                        goto LABEL_488;
                      if (v488 != v487)
                        break;
                      v480 = v479;
                      (*(void (**)(_QWORD *, _BYTE *))(v487[0] + 24))(v487, v479);
LABEL_490:
                      v353 = (uint64_t *)objc_msgSend(v473, "commitRangesToPointyRoofTopRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v351 + 784, v349, v471, v479);
                      v354 = v480;
                      if (v480 == v479)
                      {
                        v354 = v479;
                        v355 = 4;
                      }
                      else
                      {
                        if (!v480)
                          goto LABEL_495;
                        v355 = 5;
                      }
                      (*(void (**)(void))(*v354 + 8 * v355))();
LABEL_495:
                      v356 = a1[49];
                      v357 = *v347;
                      v484 = *(_OWORD *)v483;
                      v485 = *(_OWORD *)&v483[16];
                      v486 = *(_DWORD *)&v483[32];
                      v358 = *(_QWORD **)(v356 + 872);
                      v359 = v358[1];
                      if (v359 == *(_QWORD *)(v356 + 880))
                      {
                        v358 = (_QWORD *)*v358;
                        if (!v358)
                        {
                          v358 = malloc_type_malloc(120 * v359 + 16, 0xB644C221uLL);
                          *v358 = 0;
                          v358[1] = 0;
                          **(_QWORD **)(v356 + 872) = v358;
                        }
                        *(_QWORD *)(v356 + 872) = v358;
                        v359 = v358[1];
                      }
                      v360 = &v358[15 * v359];
                      v360[2] = &off_1E42B59B0;
                      v361 = v360 + 2;
                      v358[1] = v359 + 1;
                      v361[2] = "";
                      v361[3] = v303;
                      v361[4] = v470;
                      *((_DWORD *)v361 + 10) = v304;
                      v361[6] = 0;
                      *((_DWORD *)v361 + 14) = 1065353216;
                      v362 = v486;
                      v363 = v485;
                      *(_OWORD *)((char *)v361 + 60) = v484;
                      *((_DWORD *)v361 + 23) = v362;
                      *(_OWORD *)((char *)v361 + 76) = v363;
                      *((int64x2_t *)v361 + 6) = vdupq_n_s64(1uLL);
                      v361[14] = 0;
                      v361[8] = v357;
                      v364 = *v353;
                      v361[11] = *v353;
                      v361[12] = (v353[1] - v364) >> 4;
                      v365 = *(_QWORD **)(a3 + 80);
                      v366 = *(_QWORD *)(a3 + 88);
                      if ((unint64_t)v365 >= v366)
                      {
                        v367 = *(_QWORD *)(a3 + 72);
                        v368 = ((uint64_t)v365 - v367) >> 3;
                        v369 = v368 + 1;
                        if ((unint64_t)(v368 + 1) >> 61)
                          abort();
                        v370 = v366 - v367;
                        if (v370 >> 2 > v369)
                          v369 = v370 >> 2;
                        if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFF8)
                          v371 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v371 = v369;
                        if (v371)
                        {
                          v372 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v371, 8);
                          v373 = (_QWORD *)(v372 + 8 * v368);
                          v374 = v372 + 8 * v371;
                          if (v372)
                            *v373 = v361;
                        }
                        else
                        {
                          v374 = 0;
                          v373 = (_QWORD *)(8 * v368);
                        }
                        v65 = v472;
                        v376 = *(_QWORD *)(a3 + 72);
                        v375 = *(_QWORD *)(a3 + 80);
                        v377 = v375 - v376;
                        if (v375 != v376)
                        {
                          v378 = v377 - 8;
                          if ((unint64_t)(v377 - 8) < 0x38)
                          {
                            v379 = v373;
                          }
                          else
                          {
                            v379 = v373;
                            if ((unint64_t)(v375 - (_QWORD)v373) >= 0x20)
                            {
                              v380 = (v378 >> 3) + 1;
                              v381 = v373 - 2;
                              v382 = (__int128 *)(v375 - 16);
                              v383 = v380 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v384 = *v382;
                                *(v381 - 1) = *(v382 - 1);
                                *v381 = v384;
                                v381 -= 2;
                                v382 -= 2;
                                v383 -= 4;
                              }
                              while (v383);
                              v379 = &v373[-(v380 & 0x3FFFFFFFFFFFFFFCLL)];
                              v375 -= 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v380 == (v380 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_522:
                                v375 = *(_QWORD *)(a3 + 72);
LABEL_523:
                                v350 = v373 + 1;
                                *(_QWORD *)(a3 + 72) = v379;
                                *(_QWORD *)(a3 + 80) = v373 + 1;
                                v386 = *(_QWORD *)(a3 + 88);
                                *(_QWORD *)(a3 + 88) = v374;
                                if (v375)
                                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v375, v386 - v375);
                                goto LABEL_484;
                              }
                            }
                          }
                          do
                          {
                            v385 = *(_QWORD *)(v375 - 8);
                            v375 -= 8;
                            *--v379 = v385;
                          }
                          while (v375 != v376);
                          goto LABEL_522;
                        }
                        v379 = v373;
                        goto LABEL_523;
                      }
                      v65 = v472;
                      if (v365)
                        *v365 = v361;
                      v350 = v365 + 1;
LABEL_484:
                      *(_QWORD *)(a3 + 80) = v350;
                      ++v349;
                      v347 += 2;
                      if (v347 == v348)
                        goto LABEL_525;
                    }
                    v352 = (*(uint64_t (**)(void))(*v488 + 16))();
LABEL_488:
                    v480 = (_BYTE *)v352;
                    goto LABEL_490;
                  }
LABEL_525:
                  v387 = a1[49];
                  if (!*(_BYTE *)(v387 + 768)
                    || (v388 = *(_QWORD *)(v387 + 608),
                        v389 = *(_DWORD *)(v387 + 776),
                        v390 = objc_msgSend(v473, "strokeMeshes"),
                        v391 = *(uint64_t **)v390,
                        v392 = *(uint64_t **)(v390 + 8),
                        *(uint64_t **)v390 == v392))
                  {
LABEL_570:
                    v61 = v449;
                    goto LABEL_571;
                  }
                  v393 = 0;
                  while (2)
                  {
                    v395 = a1[49];
                    v396 = (uint64_t)v488;
                    if (v488)
                    {
                      if (v488 != v487)
                      {
                        v396 = (*(uint64_t (**)(void))(*v488 + 16))();
                        goto LABEL_533;
                      }
                      v478 = v477;
                      (*(void (**)(_QWORD *, _BYTE *))(v487[0] + 24))(v487, v477);
                    }
                    else
                    {
LABEL_533:
                      v478 = (_BYTE *)v396;
                    }
                    v397 = (uint64_t *)objc_msgSend(v473, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v395 + 784, v393, v471, v477);
                    v398 = v478;
                    if (v478 == v477)
                    {
                      v398 = v477;
                      v399 = 4;
LABEL_539:
                      (*(void (**)(void))(*v398 + 8 * v399))();
                    }
                    else if (v478)
                    {
                      v399 = 5;
                      goto LABEL_539;
                    }
                    v400 = a1[49];
                    v401 = *v391;
                    v484 = *(_OWORD *)v483;
                    v485 = *(_OWORD *)&v483[16];
                    v486 = *(_DWORD *)&v483[32];
                    v402 = *(_QWORD **)(v400 + 872);
                    v403 = v402[1];
                    if (v403 == *(_QWORD *)(v400 + 880))
                    {
                      v402 = (_QWORD *)*v402;
                      if (!v402)
                      {
                        v402 = malloc_type_malloc(120 * v403 + 16, 0xB644C221uLL);
                        *v402 = 0;
                        v402[1] = 0;
                        **(_QWORD **)(v400 + 872) = v402;
                      }
                      *(_QWORD *)(v400 + 872) = v402;
                      v403 = v402[1];
                    }
                    v404 = &v402[15 * v403];
                    v404[2] = &off_1E42B59B0;
                    v405 = v404 + 2;
                    v402[1] = v403 + 1;
                    v405[2] = "";
                    v405[3] = v388;
                    v405[4] = v467;
                    *((_DWORD *)v405 + 10) = v389;
                    v405[6] = 1;
                    *((_DWORD *)v405 + 14) = 1065353216;
                    v406 = v486;
                    v407 = v485;
                    *(_OWORD *)((char *)v405 + 60) = v484;
                    *((_DWORD *)v405 + 23) = v406;
                    *(_OWORD *)((char *)v405 + 76) = v407;
                    *((int64x2_t *)v405 + 6) = v465;
                    v405[14] = 0;
                    v405[8] = v401;
                    v408 = *v397;
                    v405[11] = *v397;
                    v405[12] = (v397[1] - v408) >> 4;
                    v409 = *(_QWORD **)(a3 + 80);
                    v410 = *(_QWORD *)(a3 + 88);
                    if ((unint64_t)v409 < v410)
                    {
                      v65 = v472;
                      if (v409)
                        *v409 = v405;
                      v394 = v409 + 1;
                      goto LABEL_529;
                    }
                    v411 = *(_QWORD *)(a3 + 72);
                    v412 = ((uint64_t)v409 - v411) >> 3;
                    v413 = v412 + 1;
                    if ((unint64_t)(v412 + 1) >> 61)
                      abort();
                    v414 = v410 - v411;
                    if (v414 >> 2 > v413)
                      v413 = v414 >> 2;
                    if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8)
                      v415 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v415 = v413;
                    if (v415)
                    {
                      v416 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v415, 8);
                      v417 = (_QWORD *)(v416 + 8 * v412);
                      v418 = v416 + 8 * v415;
                      if (v416)
                        *v417 = v405;
                    }
                    else
                    {
                      v418 = 0;
                      v417 = (_QWORD *)(8 * v412);
                    }
                    v65 = v472;
                    v420 = *(_QWORD *)(a3 + 72);
                    v419 = *(_QWORD *)(a3 + 80);
                    v421 = v419 - v420;
                    if (v419 != v420)
                    {
                      v422 = v421 - 8;
                      if ((unint64_t)(v421 - 8) < 0x38)
                      {
                        v423 = v417;
                      }
                      else
                      {
                        v423 = v417;
                        if ((unint64_t)(v419 - (_QWORD)v417) >= 0x20)
                        {
                          v424 = (v422 >> 3) + 1;
                          v425 = v417 - 2;
                          v426 = (__int128 *)(v419 - 16);
                          v427 = v424 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v428 = *v426;
                            *(v425 - 1) = *(v426 - 1);
                            *v425 = v428;
                            v425 -= 2;
                            v426 -= 2;
                            v427 -= 4;
                          }
                          while (v427);
                          v423 = &v417[-(v424 & 0x3FFFFFFFFFFFFFFCLL)];
                          v419 -= 8 * (v424 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v424 == (v424 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_567:
                            v419 = *(_QWORD *)(a3 + 72);
LABEL_568:
                            v394 = v417 + 1;
                            *(_QWORD *)(a3 + 72) = v423;
                            *(_QWORD *)(a3 + 80) = v417 + 1;
                            v430 = *(_QWORD *)(a3 + 88);
                            *(_QWORD *)(a3 + 88) = v418;
                            if (v419)
                              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v419, v430 - v419);
LABEL_529:
                            *(_QWORD *)(a3 + 80) = v394;
                            ++v393;
                            v391 += 2;
                            if (v391 == v392)
                              goto LABEL_570;
                            continue;
                          }
                        }
                      }
                      do
                      {
                        v429 = *(_QWORD *)(v419 - 8);
                        v419 -= 8;
                        *--v423 = v429;
                      }
                      while (v419 != v420);
                      goto LABEL_567;
                    }
                    break;
                  }
                  v423 = v417;
                  goto LABEL_568;
                }
LABEL_271:
                if (v178)
                  *v178 = v467;
                v191 = v178 + 1;
                goto LABEL_308;
              }
              v189 = *(_QWORD *)(v176 + 88);
              if (!v189)
                goto LABEL_591;
              v467 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 48))(v189);
              v178 = *(uint64_t **)(v176 + 40);
              v190 = *(_QWORD *)(v176 + 48);
              if ((unint64_t)v178 < v190)
                goto LABEL_271;
              v192 = *(_QWORD *)(v176 + 32);
              v193 = ((uint64_t)v178 - v192) >> 3;
              v194 = v193 + 1;
              if ((unint64_t)(v193 + 1) >> 61)
LABEL_594:
                abort();
              v195 = v190 - v192;
              if (v195 >> 2 > v194)
                v194 = v195 >> 2;
              if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
                v196 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v196 = v194;
              if (v196)
              {
                v197 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v176 + 56) + 16))(*(_QWORD *)(v176 + 56), 8 * v196, 8);
                v186 = (uint64_t *)(v197 + 8 * v193);
                v187 = v197 + 8 * v196;
                if (v197)
                  *v186 = v467;
              }
              else
              {
                v187 = 0;
                v186 = (uint64_t *)(8 * v193);
              }
              v208 = *(_QWORD *)(v176 + 32);
              v198 = *(_QWORD *)(v176 + 40);
              v209 = v198 - v208;
              if (v198 == v208)
                goto LABEL_299;
              v210 = v209 - 8;
              if ((unint64_t)(v209 - 8) < 0x38)
              {
                v202 = v186;
              }
              else
              {
                v202 = v186;
                if ((unint64_t)(v198 - (_QWORD)v186) >= 0x20)
                {
                  v211 = (v210 >> 3) + 1;
                  v212 = v186 - 2;
                  v213 = (__int128 *)(v198 - 16);
                  v214 = v211 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v215 = *v213;
                    *((_OWORD *)v212 - 1) = *(v213 - 1);
                    *(_OWORD *)v212 = v215;
                    v212 -= 4;
                    v213 -= 2;
                    v214 -= 4;
                  }
                  while (v214);
                  v202 = &v186[-(v211 & 0x3FFFFFFFFFFFFFFCLL)];
                  v198 -= 8 * (v211 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v211 == (v211 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_305;
                }
              }
              do
              {
                v217 = *(_QWORD *)(v198 - 8);
                v198 -= 8;
                *--v202 = v217;
              }
              while (v198 != v208);
LABEL_305:
              v198 = *(_QWORD *)(v176 + 32);
              goto LABEL_306;
            }
            v125 = *(_QWORD *)(v119 + 88);
            v124 = (unint64_t *)&v448->__shared_owners_;
            if (!v125)
              goto LABEL_591;
            v470 = (ggl::PipelineSetup *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 48))(v125);
            v122 = *(ggl::PipelineSetup ***)(v119 + 40);
            v126 = *(_QWORD *)(v119 + 48);
            if ((unint64_t)v122 < v126)
            {
              if (v122)
                *v122 = v470;
LABEL_196:
              v127 = v122 + 1;
              goto LABEL_240;
            }
            v136 = *(_QWORD *)(v119 + 32);
            v137 = ((uint64_t)v122 - v136) >> 3;
            v138 = v137 + 1;
            if ((unint64_t)(v137 + 1) >> 61)
LABEL_593:
              abort();
            v139 = v126 - v136;
            if (v139 >> 2 > v138)
              v138 = v139 >> 2;
            if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
              v140 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v140 = v138;
            if (v140)
            {
              v141 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v119 + 56) + 16))(*(_QWORD *)(v119 + 56), 8 * v140, 8);
              v134 = (ggl::PipelineSetup **)(v141 + 8 * v137);
              v135 = v141 + 8 * v140;
              if (v141)
                *v134 = v470;
            }
            else
            {
              v135 = 0;
              v134 = (ggl::PipelineSetup **)(8 * v137);
            }
            v152 = *(_QWORD *)(v119 + 32);
            v142 = *(_QWORD *)(v119 + 40);
            v153 = v142 - v152;
            if (v142 == v152)
              goto LABEL_231;
            v154 = v153 - 8;
            if ((unint64_t)(v153 - 8) < 0x38)
            {
              v146 = v134;
            }
            else
            {
              v146 = v134;
              if ((unint64_t)(v142 - (_QWORD)v134) >= 0x20)
              {
                v155 = (v154 >> 3) + 1;
                v156 = v134 - 2;
                v157 = (__int128 *)(v142 - 16);
                v158 = v155 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v159 = *v157;
                  *((_OWORD *)v156 - 1) = *(v157 - 1);
                  *(_OWORD *)v156 = v159;
                  v156 -= 4;
                  v157 -= 2;
                  v158 -= 4;
                }
                while (v158);
                v146 = &v134[-(v155 & 0x3FFFFFFFFFFFFFFCLL)];
                v142 -= 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
                if (v155 == (v155 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_237;
              }
            }
            do
            {
              v161 = *(ggl::PipelineSetup **)(v142 - 8);
              v142 -= 8;
              *--v146 = v161;
            }
            while (v142 != v152);
LABEL_237:
            v142 = *(_QWORD *)(v119 + 32);
            goto LABEL_238;
          }
LABEL_577:
          v434 = v488;
          if (v488 == v487)
            break;
          if (v488)
          {
            v435 = 5;
LABEL_581:
            (*(void (**)(void))(*v434 + 8 * v435))();
          }
          if (v448)
          {
            v436 = (unint64_t *)&v448->__shared_owners_;
            do
              v437 = __ldaxr(v436);
            while (__stlxr(v437 - 1, v436));
            if (!v437)
            {
              ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
              std::__shared_weak_count::__release_weak(v448);
            }
          }
          v60 = v440 + 1;
          if (v440 + 1 == (uint64_t *)v438)
            return;
        }
        v434 = v487;
        v435 = 4;
        goto LABEL_581;
      }
    }
  }
}

void sub_19F5231CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F5231DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

_BYTE *md::featureIdPredicate(uint64_t a1, int a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *result;
  uint64_t (**v15)();
  uint64_t (*v16)(void);
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = operator new(0x20uLL);
  v15 = (uint64_t (**)())&unk_1E42D2DD0;
  if (!a3)
    v15 = &off_1E42D2E18;
  *(_QWORD *)result = v15;
  *((_QWORD *)result + 1) = a6;
  result[16] = a4;
  *((_QWORD *)result + 3) = a7;
  v22 = result;
  if (!a5)
    goto LABEL_17;
  if ((a2 - 1) >= 2)
  {
    if (!a2)
    {
      v19 = (uint64_t (*)(void))std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone;
      if (!a3)
        v19 = (uint64_t (*)(void))std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone;
      v17 = v19();
      *(_QWORD *)(a1 + 24) = 0;
      v18 = operator new(0x30uLL);
      *v18 = &off_1E42CF8A8;
      v18[1] = a5;
      if (v17)
        goto LABEL_8;
LABEL_13:
      v18[5] = 0;
      goto LABEL_14;
    }
LABEL_17:
    *(_QWORD *)(a1 + 24) = result;
    return result;
  }
  v16 = (uint64_t (*)(void))std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone;
  if (!a3)
    v16 = (uint64_t (*)(void))std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone;
  v17 = v16();
  *(_QWORD *)(a1 + 24) = 0;
  v18 = operator new(0x30uLL);
  *v18 = &off_1E42CF860;
  v18[1] = a5;
  if (!v17)
    goto LABEL_13;
LABEL_8:
  v18[5] = v17;
LABEL_14:
  *(_QWORD *)(a1 + 24) = v18;
  result = v22;
  if (v22 == v21)
  {
    v20 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v20 = 5;
  }
  return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v20))();
}

void sub_19F5235F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  unint64_t v6;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(uint64_t **)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = (((_QWORD)v4 << 6) + ((unint64_t)v4 >> 2) + v5 - 0x61C8864680B583EBLL) ^ (unint64_t)v4;
  *(_QWORD *)(a2 + 8) = v6;
  if (std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique_prepare[abi:nn180100]((uint64_t)a1, v6, v4, v5))
  {
    return 0;
  }
  v8 = (int8x8_t)a1[1];
  v9 = *(_QWORD *)(a2 + 8);
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v8)
      v9 %= *(_QWORD *)&v8;
  }
  else
  {
    v9 &= *(_QWORD *)&v8 - 1;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v9);
  if (v11)
  {
    *(_QWORD *)a2 = *v11;
LABEL_15:
    *v11 = a2;
    goto LABEL_16;
  }
  *(_QWORD *)a2 = a1[2];
  a1[2] = a2;
  *(_QWORD *)(*a1 + 8 * v9) = a1 + 2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v10.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v8)
        v12 %= *(_QWORD *)&v8;
    }
    else
    {
      v12 &= *(_QWORD *)&v8 - 1;
    }
    v11 = (_QWORD *)(*a1 + 8 * v12);
    goto LABEL_15;
  }
LABEL_16:
  ++a1[3];
  return 1;
}

uint64_t **std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique_prepare[abi:nn180100](uint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v11;
  uint64_t *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  void *v37;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2 % v5;
      if (v5 > a2)
        v7 = a2;
    }
    else
    {
      v7 = (v5 - 1) & a2;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v7);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = result[1];
            if (v13 == (uint64_t *)a2)
            {
              if (result[2] == a3 && *((unsigned __int8 *)result + 24) == a4)
                return result;
            }
            else if (((unint64_t)v13 & (v5 - 1)) != v7)
            {
              goto LABEL_27;
            }
            result = (uint64_t **)*result;
            if (!result)
              goto LABEL_27;
          }
        }
        do
        {
          v11 = (unint64_t)result[1];
          if (v11 == a2)
          {
            if (result[2] == a3 && *((unsigned __int8 *)result + 24) == a4)
              return result;
          }
          else
          {
            if (v11 >= v5)
              v11 %= v5;
            if (v11 != v7)
              break;
          }
          result = (uint64_t **)*result;
        }
        while (result);
      }
    }
  }
LABEL_27:
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v5 && (float)(v15 * (float)v5) >= v14)
    return 0;
  v16 = 1;
  if (v5 >= 3)
    v16 = (v5 & (v5 - 1)) != 0;
  v17 = v16 | (2 * v5);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v5)
    goto LABEL_85;
  if (prime >= v5)
    return 0;
  v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v5 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime >= v5)
    return 0;
  if (prime)
  {
LABEL_85:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(void **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = a1 + 16;
    v23 = *(_QWORD **)(a1 + 16);
    if (!v23)
      return 0;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      return 0;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      return 0;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_66;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_66:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        return 0;
    }
  }
  v37 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v37)
    operator delete(v37);
  result = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42CF860;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42CF860;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CF860;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[5] = v4;
  return v2;
}

void sub_19F523C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF860;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  BOOL v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*a2)
    v2 = *(_QWORD *)(a1 + 8) == *a2;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v6 = *a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6);
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(v5);
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42CF8A8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42CF8A8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CF8A8;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[5] = v4;
  return v2;
}

void sub_19F523ED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CF8A8;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicate(gss::SelectionState,md::BuildingPass,unsigned char,unsigned long long,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8) == *a2)
    return 0;
  v4 = *a2;
  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19F524038);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
}

void std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E42D2DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42D2DD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int8x8_t *v3;
  BOOL v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *a2;
  v3 = *(int8x8_t **)(a1 + 8);
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v5 = v3[11];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v2;
    if (*(_QWORD *)&v5 <= v2)
      v7 = v2 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v2;
  }
  v8 = *(_QWORD **)(*(_QWORD *)&v3[10] + 8 * v7);
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      if (v6.u32[0] < 2uLL)
      {
        v10 = *(_QWORD *)&v5 - 1;
        while (1)
        {
          v12 = v9[1];
          if (v12 == v2)
          {
            if (v9[2] == v2)
              return std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(_QWORD **)(a1 + 24), v2, *(_BYTE *)(a1 + 16)) == 0;
          }
          else if ((v12 & v10) != v7)
          {
            return 0;
          }
          v8 = 0;
          v9 = (_QWORD *)*v9;
          if (!v9)
            return (BOOL)v8;
        }
      }
      while (1)
      {
        v11 = v9[1];
        if (v11 == v2)
        {
          if (v9[2] == v2)
            return std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(_QWORD **)(a1 + 24), v2, *(_BYTE *)(a1 + 16)) == 0;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v5)
            v11 %= *(_QWORD *)&v5;
          if (v11 != v7)
            return 0;
        }
        v8 = 0;
        v9 = (_QWORD *)*v9;
        if (!v9)
          return (BOOL)v8;
      }
    }
    return 0;
  }
  return (BOOL)v8;
}

uint64_t **std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(_QWORD *a1, unint64_t a2, unsigned __int8 a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t **result;
  uint64_t v9;
  unint64_t v11;
  uint64_t *v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = ((a2 << 6) + (a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = ((a2 << 6) + (a2 >> 2) + a3 - 0x61C8864680B583EBLL) ^ a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if ((uint64_t *)v4 == v13)
        {
          if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3)
            return result;
        }
        else if (((unint64_t)v13 & v9) != v6)
        {
          return 0;
        }
        result = (uint64_t **)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = (unint64_t)result[1];
      if (v4 == v11)
      {
        if (result[2] == (uint64_t *)a2 && *((unsigned __int8 *)result + 24) == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D2E18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2E18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  int8x8_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *a2;
  v3 = *(int8x8_t **)(a1 + 8);
  if (v3)
  {
    if (!v2)
      return 1;
    v4 = v3[11];
    if (v4)
    {
      v5 = (uint8x8_t)vcnt_s8(v4);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        v6 = v2;
        if (*(_QWORD *)&v4 <= v2)
          v6 = v2 % *(_QWORD *)&v4;
      }
      else
      {
        v6 = (*(_QWORD *)&v4 - 1) & v2;
      }
      v7 = *(_QWORD **)(*(_QWORD *)&v3[10] + 8 * v6);
      if (v7)
      {
        v8 = (_QWORD *)*v7;
        if (v8)
        {
          if (v5.u32[0] < 2uLL)
          {
            v9 = *(_QWORD *)&v4 - 1;
            while (1)
            {
              v11 = v8[1];
              if (v11 == v2)
              {
                if (v8[2] == v2)
                  return 0;
              }
              else if ((v11 & v9) != v6)
              {
                goto LABEL_24;
              }
              v8 = (_QWORD *)*v8;
              if (!v8)
                goto LABEL_24;
            }
          }
          while (1)
          {
            v10 = v8[1];
            if (v10 == v2)
            {
              if (v8[2] == v2)
                return 0;
            }
            else
            {
              if (v10 >= *(_QWORD *)&v4)
                v10 %= *(_QWORD *)&v4;
              if (v10 != v6)
                goto LABEL_24;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_24;
          }
        }
      }
    }
  }
  else
  {
LABEL_24:
    if (!v2)
      return 1;
  }
  return !std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::find<md::FeatureIdZoom>(*(_QWORD **)(a1 + 24), v2, *(_BYTE *)(a1 + 16));
}

void altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(altitude::CompleteGlobeTileSetLoader *this)
{
  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  altitude::CompleteGlobeTileSetLoader *v5;
  uint64_t v6;
  altitude::CompleteGlobeTileSetLoader *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;

  *(_QWORD *)this = &off_1E42C6380;
  *((_QWORD *)this + 5) = &unk_1E42C6408;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 127);
    *((_QWORD *)this + 127) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (altitude::CompleteGlobeTileSetLoader *)*((_QWORD *)this + 126);
  if (v5 == (altitude::CompleteGlobeTileSetLoader *)((char *)this + 984))
  {
    v6 = 4;
    v5 = (altitude::CompleteGlobeTileSetLoader *)((char *)this + 984);
  }
  else
  {
    if (!v5)
      goto LABEL_9;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_9:
  v7 = (altitude::CompleteGlobeTileSetLoader *)*((_QWORD *)this + 122);
  if (v7 == (altitude::CompleteGlobeTileSetLoader *)((char *)this + 952))
  {
    v8 = 4;
    v7 = (altitude::CompleteGlobeTileSetLoader *)((char *)this + 952);
  }
  else
  {
    if (!v7)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_14:
  *((_QWORD *)this + 109) = &off_1E42B4748;
  v9 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v9)
    MEMORY[0x1A1AF4E00](v9, 0x1000C4000313F17);
  if (*((_BYTE *)this + 928))
    *((_BYTE *)this + 928) = 0;
  v10 = (_QWORD *)*((_QWORD *)this + 113);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v12)
    operator delete(v12);
  *((_QWORD *)this + 99) = &off_1E42B4748;
  v13 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v13)
    MEMORY[0x1A1AF4E00](v13, 0x1000C4000313F17);
  if (*((_BYTE *)this + 848))
    *((_BYTE *)this + 848) = 0;
  v14 = (_QWORD *)*((_QWORD *)this + 103);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v16)
    operator delete(v16);
  *((_QWORD *)this + 89) = &off_1E42B4748;
  v17 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v17)
    MEMORY[0x1A1AF4E00](v17, 0x1000C4000313F17);
  if (*((_BYTE *)this + 768))
    *((_BYTE *)this + 768) = 0;
  v18 = (_QWORD *)*((_QWORD *)this + 93);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v20)
    operator delete(v20);
  v21 = *((_QWORD *)this + 85);
  if (v21)
  {
    v22 = *((_QWORD *)this + 86);
    v23 = (void *)*((_QWORD *)this + 85);
    if (v22 != v21)
    {
      do
      {
        v24 = *(std::__shared_weak_count **)(v22 - 8);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 16;
      }
      while (v22 != v21);
      v23 = (void *)*((_QWORD *)this + 85);
    }
    *((_QWORD *)this + 86) = v21;
    operator delete(v23);
  }
  v27 = *((_QWORD *)this + 82);
  if (v27)
  {
    v28 = *((_QWORD *)this + 83);
    v29 = (void *)*((_QWORD *)this + 82);
    if (v28 != v27)
    {
      do
      {
        v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 82);
    }
    *((_QWORD *)this + 83) = v27;
    operator delete(v29);
  }
  v33 = *((_QWORD *)this + 79);
  if (v33)
  {
    v34 = *((_QWORD *)this + 80);
    v35 = (void *)*((_QWORD *)this + 79);
    if (v34 != v33)
    {
      do
      {
        v36 = *(std::__shared_weak_count **)(v34 - 8);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 24;
      }
      while (v34 != v33);
      v35 = (void *)*((_QWORD *)this + 79);
    }
    *((_QWORD *)this + 80) = v33;
    operator delete(v35);
  }
  v39 = (void *)*((_QWORD *)this + 73);
  if (v39)
  {
    *((_QWORD *)this + 74) = v39;
    operator delete(v39);
  }
  v40 = (void *)*((_QWORD *)this + 70);
  if (v40)
  {
    *((_QWORD *)this + 71) = v40;
    operator delete(v40);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 68));
  v41 = (_QWORD *)*((_QWORD *)this + 64);
  if (v41)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v43)
    operator delete(v43);
  v44 = (_QWORD *)*((_QWORD *)this + 59);
  if (v44)
  {
    do
    {
      v45 = (_QWORD *)*v44;
      operator delete(v44);
      v44 = v45;
    }
    while (v45);
  }
  v46 = (void *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v46)
    operator delete(v46);
  v47 = (_QWORD *)*((_QWORD *)this + 54);
  if (v47)
  {
    do
    {
      v48 = (_QWORD *)*v47;
      operator delete(v47);
      v47 = v48;
    }
    while (v48);
  }
  v49 = (void *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v49)
    operator delete(v49);
  v50 = (_QWORD *)*((_QWORD *)this + 49);
  if (v50)
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = (void *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v52)
    operator delete(v52);
  v53 = (_QWORD *)*((_QWORD *)this + 44);
  if (v53)
  {
    do
    {
      v54 = (_QWORD *)*v53;
      operator delete(v53);
      v53 = v54;
    }
    while (v54);
  }
  v55 = (void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v55)
    operator delete(v55);
  v56 = (_QWORD *)*((_QWORD *)this + 39);
  if (v56)
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v58)
    operator delete(v58);
  v59 = (_QWORD *)*((_QWORD *)this + 34);
  if (v59)
  {
    do
    {
      v60 = (_QWORD *)*v59;
      operator delete(v59);
      v59 = v60;
    }
    while (v60);
  }
  v61 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v61)
    operator delete(v61);
  v62 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v62)
    goto LABEL_107;
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_107:
    v65 = (void *)*((_QWORD *)this + 15);
    if (!v65)
      goto LABEL_109;
    goto LABEL_108;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  v65 = (void *)*((_QWORD *)this + 15);
  if (v65)
  {
LABEL_108:
    *((_QWORD *)this + 16) = v65;
    operator delete(v65);
  }
LABEL_109:
  *(_QWORD *)this = off_1E42C39F0;
  *((_QWORD *)this + 5) = &unk_1E42C3A60;
  v66 = *((_QWORD *)this + 6);
  if (v66)
    altitude::TileManager::unregisterTileListener(v66, (uint64_t)v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 12));
  v67 = (void *)*((_QWORD *)this + 7);
  if (v67)
  {
    *((_QWORD *)this + 8) = v67;
    operator delete(v67);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::CompleteGlobeTileSetLoader::update(altitude::CompleteGlobeTileSetLoader *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t k;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[5];
  void *__p;
  void *v40;
  uint64_t v41;
  _BYTE buf[36];
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 83);
  v5 = *((_QWORD *)this + 82);
  while (v4 != v5)
  {
    v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 -= 16;
  }
  *((_QWORD *)this + 83) = v5;
  v9 = *((_QWORD *)this + 86);
  v10 = *((_QWORD *)this + 85);
  while (v9 != v10)
  {
    v11 = *(std::__shared_weak_count **)(v9 - 8);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 -= 16;
  }
  *((_QWORD *)this + 86) = v10;
  if (*((_QWORD *)this + 65))
  {
    v14 = (_QWORD *)*((_QWORD *)this + 64);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *((_QWORD *)this + 64) = 0;
    v16 = *((_QWORD *)this + 63);
    if (v16)
    {
      for (i = 0; i != v16; ++i)
        *(_QWORD *)(*((_QWORD *)this + 62) + 8 * i) = 0;
    }
    *((_QWORD *)this + 65) = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 27) + 104))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 40) + 48);
    *(_DWORD *)(v18 + 72) = a2;
    v19 = *(_QWORD *)(v18 + 152);
    for (j = *(_QWORD *)(v18 + 160); j != v19; j -= 16)
    {
      v21 = *(std::__shared_weak_count **)(j - 8);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    *(_QWORD *)(v18 + 160) = v19;
    v24 = *(_QWORD *)(v18 + 176);
    for (k = *(_QWORD *)(v18 + 184); k != v24; k -= 16)
    {
      v26 = *(std::__shared_weak_count **)(k - 8);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    *(_QWORD *)(v18 + 184) = v24;
  }
  *((_DWORD *)this + 157) = 0;
  *((_BYTE *)this + 620) = 0;
  *((_DWORD *)this + 152) = a2;
  v29 = *((_QWORD *)this + 6);
  if (v29
    && (v30 = *((_QWORD *)this + 14)) != 0
    && *((_QWORD *)this + 15) != *((_QWORD *)this + 16)
    && *((_QWORD *)this + 18)
    && *((_QWORD *)this + 19)
    && *((_QWORD *)this + 22)
    && *((_QWORD *)this + 21)
    && (v31 = *((_QWORD *)this + 31)) != 0
    && *((_QWORD *)this + 29))
  {
    if (*(_BYTE *)(v29 + 204) || !*((_BYTE *)this + 80))
    {
      *(_QWORD *)buf = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      altitude::CompleteGlobeTileSetLoader::updateTileStamps((uint64_t)this, v31, a2, (unint64_t *)buf);
    }
    else
    {
      if (*((_QWORD *)this + 25))
      {
        altitude::SkeletonRequestManager::update(*((altitude::SkeletonRequestManager **)this + 25), a2);
        v30 = *((_QWORD *)this + 14);
      }
      v41 = 0;
      *(_QWORD *)buf = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v38[0] = 0;
      __p = 0;
      v40 = 0;
      (*(void (**)(uint64_t, altitude::CompleteGlobeTileSetLoader *))(*(_QWORD *)v30 + 24))(v30, this);
      v34 = (_QWORD *)*((_QWORD *)this + 15);
      v35 = (_QWORD *)*((_QWORD *)this + 16);
      while (v34 != v35)
      {
        v36 = (*(uint64_t (**)(_QWORD, altitude::CompleteGlobeTileSetLoader *, uint64_t))(*(_QWORD *)*v34 + 24))(*v34, this, 0xFFFFFFFFLL);
        v37 = v36;
        karo::SizedArray<altitude::View *,4>::push_back((uint64_t *)buf, &v37);
        if (*(_DWORD *)(v36 + 1296))
          karo::SizedArray<altitude::View *,4>::push_back(v38, &v37);
        ++v34;
      }
      altitude::CompleteGlobeTileSetLoader::loadRoots(this);
      if (*(_QWORD *)(*((_QWORD *)this + 31) + 40) != *(_QWORD *)(*((_QWORD *)this + 31) + 48))
      {
        (*(void (**)(altitude::CompleteGlobeTileSetLoader *))(*(_QWORD *)this + 104))(this);
        altitude::CompleteGlobeTileSetLoader::updateTileStamps((uint64_t)this, *((_QWORD *)this + 31), a2, (unint64_t *)buf);
      }
      if (__p)
      {
        v40 = __p;
        operator delete(__p);
      }
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v32 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      v33 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v33 = (_QWORD *)*v33;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, "Missing input node: %s", buf, 0xCu);
    }
  }
}

void altitude::CompleteGlobeTileSetLoader::preRenderUpdate(altitude::CompleteGlobeTileSetLoader *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = (uint64_t *)*((_QWORD *)this + 79);
  v3 = (uint64_t *)*((_QWORD *)this + 80);
  if (v2 == v3)
    goto LABEL_43;
  do
  {
    v4 = *((_QWORD *)this + 31);
    v5 = *v2;
    v6 = *(_QWORD **)(v4 + 40);
    v7 = *(_QWORD **)(v4 + 48);
    if (v6 != v7)
    {
      while (*v6 != v5)
      {
        if (++v6 == v7)
        {
          v6 = v7;
          break;
        }
      }
    }
    if (v6 != v7)
    {
      v8 = *(_QWORD **)(v5 + 344);
      if (v8)
      {
        v10 = v2[1];
        v9 = (std::__shared_weak_count *)v2[2];
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        v11 = operator new();
        *(_DWORD *)(v11 + 8) = 2;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)(v11 + 24) = v11 + 32;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_QWORD *)v11 = &off_1E42C59E0;
        *(_WORD *)(v11 + 80) = 257;
        *(_QWORD *)(v11 + 88) = 0;
        *(_QWORD *)(v11 + 96) = 0;
        *(_QWORD *)(v5 + 344) = v11;
        altitude::TileComponent::onAttach(v11, v5);
        v8 = *(_QWORD **)(v5 + 344);
        v10 = v2[1];
        v9 = (std::__shared_weak_count *)v2[2];
        if (!v9)
        {
LABEL_15:
          v14 = v8[11];
          if (v14 != v10)
          {
            if (v14)
              (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v8[2] + 424) + 24))(*(_QWORD *)(v8[2] + 424), v8[2], v8);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v16 = __ldxr(p_shared_owners);
              while (__stxr(v16 + 1, p_shared_owners));
            }
            v17 = (std::__shared_weak_count *)v8[12];
            v8[11] = v10;
            v8[12] = v9;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
              v10 = v8[11];
            }
            if (v10)
              (*(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v8[2] + 424) + 16))(*(_QWORD *)(v8[2] + 424), v8[2], v8, v10);
          }
          if (v9)
          {
            v20 = (unint64_t *)&v9->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          goto LABEL_3;
        }
      }
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_15;
    }
LABEL_3:
    v2 += 3;
  }
  while (v2 != v3);
  v2 = (uint64_t *)*((_QWORD *)this + 80);
  v22 = (uint64_t *)*((_QWORD *)this + 79);
  if (v2 != v22)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*(v2 - 1);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v2 -= 3;
    }
    while (v2 != v22);
    v2 = v22;
  }
LABEL_43:
  *((_QWORD *)this + 80) = v2;
}

BOOL altitude::CompleteGlobeTileSetLoader::hasRequestsInProgress(altitude::CompleteGlobeTileSetLoader *this)
{
  int v1;

  if (!*((_BYTE *)this + 80))
    return 0;
  v1 = *((_DWORD *)this + 152);
  if (!*((_BYTE *)this + 620))
    return v1 - *((_DWORD *)this + 156) < 3;
  *((_DWORD *)this + 156) = v1;
  return 1;
}

void altitude::CompleteGlobeTileSetLoader::clear(altitude::CompleteGlobeTileSetLoader *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 31);
  v2[6] = v2[5];
  v2[9] = v2[8];
  v2[12] = v2[11];
  v3 = *((_QWORD *)this + 80);
  v4 = *((_QWORD *)this + 79);
  while (v3 != v4)
  {
    v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 -= 24;
  }
  *((_QWORD *)this + 80) = v4;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setOverlayRequestManager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 216) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setRoadRequestManager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setSkeletoRequestManager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 200) = a2;
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::setLabelDataRequestManager(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 208) = a2;
  return result;
}

void altitude::CompleteGlobeTileSetLoader::onChildTileRemoved(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  void *__p[3];

  v5 = a1 + 37;
  v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 37, a3);
  if (v6)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v5, v6);
    if (__p[0])
      operator delete(__p[0]);
  }
  v7 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 42, a3);
  if (v7)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 42, v7);
    if (__p[0])
      operator delete(__p[0]);
  }
  v8 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 32, a3);
  if (v8)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 32, v8);
    if (__p[0])
      operator delete(__p[0]);
  }
  v9 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 47, a3);
  if (v9)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 47, v9);
    if (__p[0])
      operator delete(__p[0]);
  }
  v10 = (uint64_t *)a1[68];
  if (v10)
  {
    v11 = a1 + 68;
    v12 = (_QWORD *)a1[68];
    do
    {
      v13 = v12[4];
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = v12;
      else
        v15 = v12 + 1;
      if (v14)
        v11 = v12;
      v12 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v11 != a1 + 68 && v11[4] <= a3)
    {
      v16 = (uint64_t *)v11[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        v18 = v11;
        do
        {
          v17 = (uint64_t *)v18[2];
          v19 = *v17 == (_QWORD)v18;
          v18 = v17;
        }
        while (!v19);
      }
      if ((uint64_t *)a1[67] == v11)
        a1[67] = v17;
      --a1[69];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v10, v11);
      operator delete(v11);
    }
  }
  v20 = a1 + 62;
  v21 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v20, a3);
  if (v21)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v20, v21);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void altitude::CompleteGlobeTileSetLoader::processTileSet(_QWORD *a1, altitude::TileSetNode *a2, unsigned int a3, unint64_t *a4, _DWORD *a5)
{
  size_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t j;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t k;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t m;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t n;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t ii;
  altitude::Tile **v34;
  altitude::Tile **v35;
  altitude::Tile *v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  float v40;
  unsigned int v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  unsigned int v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  int v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  BOOL v65;
  BOOL v66;
  altitude::Tile **v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  altitude::Tile *v75;
  float v76;
  BOOL v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  BOOL v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  char *v88;
  _BOOL4 v89;
  unsigned int v90;
  float *v91;
  float *v92;
  BOOL v93;
  char *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  float v100;
  float v101;
  altitude::Tile *v102;
  double *v103;
  uint64_t v104;
  float *v105;
  uint64_t v106;
  unsigned int v107;
  float v108;
  unsigned int v109;
  char v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  char v116;
  float *v117;
  uint64_t v118;
  unint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  unsigned int v127;
  char v128;
  float v129;
  unsigned int v130;
  float *v131;
  float *v132;
  float *v133;
  int v134;
  _BOOL4 v135;
  _BOOL4 v136;
  BOOL v137;
  float v138;
  char v139;
  unint64_t v140;
  _BOOL4 v141;
  unsigned int v142;
  char *v143;
  float v144;
  unsigned int v145;
  float *v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int v154;
  char *v155;
  uint64_t v156;
  BOOL v157;
  BOOL v158;
  uint64_t v159;
  int v160;
  int v161;
  float v162;
  float v163;
  float v164;
  float v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  void **v194;
  int v195;
  unsigned int v196;
  _QWORD *v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  altitude::Tile *v211;
  uint64_t v212;
  uint64_t v213;
  void **v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  int v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  altitude::Tile *v252;
  altitude::Tile *v253;
  char *v254;
  char *v255;
  unint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unsigned int v262;
  char *v263;
  unint64_t v264;
  unsigned int v265;
  char v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  char v274;
  int v275;
  uint64_t v276;
  unint64_t *v277;
  char *v278;
  float *v279;
  char *v280;
  uint64_t v281;
  unsigned __int8 *v282;
  int v283;
  float v284;
  float *v285;
  float *v286;
  int v287;
  float v288;
  uint64_t v289;
  uint64_t v290;
  void **v291;
  _BOOL4 v292;
  int v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  unint64_t v299;
  unint64_t v300;
  _DWORD *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  unsigned int v309;
  uint64_t *v310;
  uint64_t **v311;
  uint64_t *v312;
  uint64_t **v313;
  uint64_t *v314;
  _QWORD *v315;
  unint64_t v316;
  BOOL v317;
  _QWORD *v318;
  unsigned int v319;
  unint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t *v323;
  unint64_t v324;
  unsigned int v325;
  char *v326;
  BOOL v327;
  BOOL v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t *v345;
  float *v346;
  unsigned int v347;
  _QWORD *v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  _QWORD *v353;
  unsigned int v354;
  uint64_t v355;
  char **v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  _QWORD *v362;
  unsigned int v363;
  _BYTE *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  _QWORD *v369;
  unsigned int v370;
  uint64_t *v371;
  uint64_t **v372;
  uint64_t *v373;
  uint64_t **v374;
  uint64_t *v375;
  _QWORD *v376;
  unint64_t v377;
  BOOL v378;
  _QWORD *v379;
  unsigned int v380;
  unint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  _QWORD *v388;
  unsigned int v389;
  uint64_t v390;
  _OWORD *v391;
  char *v392;
  uint64_t v393;
  __int128 v394;
  char *v395;
  altitude::Tile *v396;
  char *v397;
  uint64_t v398;
  unsigned int v399;
  char v400;
  altitude::Tile *v401;
  uint64_t v402;
  unsigned int v403;
  unsigned int v404;
  altitude::Tile *v405;
  double *v406;
  unsigned int v407;
  float *v408;
  uint64_t v409;
  float *v410;
  uint64_t v411;
  unsigned int v412;
  float v413;
  unsigned int v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t *v418;
  uint64_t v419;
  unsigned int v420;
  unint64_t *v421;
  uint64_t v422;
  unsigned int v423;
  float *v424;
  int v425;
  unint64_t v426;
  __n128 *v427;
  uint64_t v428;
  void **v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unsigned int v436;
  char *v437;
  int v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  int v446;
  int v447;
  _QWORD *v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  _QWORD *v461;
  unsigned int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  void **v470;
  uint64_t *v471;
  uint64_t *v472;
  uint64_t **v473;
  uint64_t *v474;
  _QWORD *v475;
  unint64_t v476;
  BOOL v477;
  _QWORD *v478;
  unsigned int v479;
  unint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t *v483;
  __n128 *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  __n128 *v488;
  std::__shared_weak_count *v489;
  unint64_t *p_shared_owners;
  unint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  void **v506;
  int64_t v507;
  altitude::Tile *v508;
  char *v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  altitude::Tile *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  altitude::Tile *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned int v526;
  char *v527;
  char *v528;
  unint64_t v529;
  unsigned int v530;
  altitude::Tile *v531;
  altitude::Tile *v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  char *v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  _BYTE *v541;
  _QWORD *v542;
  unint64_t v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  _OWORD *v547;
  char *v548;
  uint64_t v549;
  __int128 v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  char *v554;
  unsigned int v555;
  uint64_t v556;
  unint64_t *v557;
  float *v558;
  uint64_t *v559;
  float *v560;
  float *v561;
  float *v562;
  float *v563;
  int v564;
  int v565;
  unsigned int v566;
  int v567;
  BOOL v568;
  char *v569;
  _DWORD *v570;
  unsigned int v571;
  uint64_t v572;
  char v573;
  int v574;
  altitude::CompleteGlobeTileSetLoader *v575;
  altitude::Tile **v576;
  altitude::Tile *v577;
  altitude::Tile *v578;
  unint64_t v581;
  float v582;
  _BYTE v583[4];
  uint64_t v584;
  float v585;
  char v586;
  uint64_t v587;
  float v588;
  char v589;
  uint64_t v590;
  float v591;
  char v592;
  uint64_t v593;
  void *__p;
  void *v595;
  uint64_t v596;
  __int128 v597;
  altitude::Tile *v598;
  altitude::Tile *v599;
  altitude::Tile *v600;
  char *v601;
  char *v602;
  uint64_t v603;
  uint64_t v604;
  float *v605;
  float *v606;
  uint64_t v607;
  char *v608;
  char *v609;
  char *v610;

  v7 = (size_t)a1;
  v8 = a1[4];
  v9 = *(float *)(v8 + 52);
  v574 = *(unsigned __int8 *)(v8 + 69);
  if (a1[50])
  {
    v10 = (_QWORD *)a1[49];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(v7 + 392) = 0;
    v12 = *(_QWORD *)(v7 + 384);
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*(_QWORD *)(v7 + 376) + 8 * i) = 0;
    }
    *(_QWORD *)(v7 + 400) = 0;
  }
  if (*(_QWORD *)(v7 + 440))
  {
    v14 = *(_QWORD **)(v7 + 432);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *(_QWORD *)(v7 + 432) = 0;
    v16 = *(_QWORD *)(v7 + 424);
    if (v16)
    {
      for (j = 0; j != v16; ++j)
        *(_QWORD *)(*(_QWORD *)(v7 + 416) + 8 * j) = 0;
    }
    *(_QWORD *)(v7 + 440) = 0;
  }
  v563 = (float *)(v7 + 456);
  if (*(_QWORD *)(v7 + 480))
  {
    v18 = *(_QWORD **)(v7 + 472);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    *(_QWORD *)(v7 + 472) = 0;
    v20 = *(_QWORD *)(v7 + 464);
    if (v20)
    {
      for (k = 0; k != v20; ++k)
        *(_QWORD *)(*(_QWORD *)v563 + 8 * k) = 0;
    }
    *(_QWORD *)(v7 + 480) = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v7 + 544));
  v559 = (uint64_t *)(v7 + 544);
  *(_QWORD *)(v7 + 536) = v7 + 544;
  *(_QWORD *)(v7 + 552) = 0;
  *(_QWORD *)(v7 + 544) = 0;
  v562 = (float *)(v7 + 296);
  if (*(_QWORD *)(v7 + 320))
  {
    v22 = *(_QWORD **)(v7 + 312);
    if (v22)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        operator delete(v22);
        v22 = v23;
      }
      while (v23);
    }
    *(_QWORD *)(v7 + 312) = 0;
    v24 = *(_QWORD *)(v7 + 304);
    if (v24)
    {
      for (m = 0; m != v24; ++m)
        *(_QWORD *)(*(_QWORD *)v562 + 8 * m) = 0;
    }
    *(_QWORD *)(v7 + 320) = 0;
  }
  v560 = (float *)(v7 + 336);
  if (*(_QWORD *)(v7 + 360))
  {
    v26 = *(_QWORD **)(v7 + 352);
    if (v26)
    {
      do
      {
        v27 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v27;
      }
      while (v27);
    }
    *(_QWORD *)(v7 + 352) = 0;
    v28 = *(_QWORD *)(v7 + 344);
    if (v28)
    {
      for (n = 0; n != v28; ++n)
        *(_QWORD *)(*(_QWORD *)v560 + 8 * n) = 0;
    }
    *(_QWORD *)(v7 + 360) = 0;
  }
  v561 = (float *)(v7 + 256);
  if (*(_QWORD *)(v7 + 280))
  {
    v30 = *(_QWORD **)(v7 + 272);
    if (v30)
    {
      do
      {
        v31 = (_QWORD *)*v30;
        operator delete(v30);
        v30 = v31;
      }
      while (v31);
    }
    *(_QWORD *)(v7 + 272) = 0;
    v32 = *(_QWORD *)(v7 + 264);
    if (v32)
    {
      for (ii = 0; ii != v32; ++ii)
        *(_QWORD *)(*(_QWORD *)v561 + 8 * ii) = 0;
    }
    *(_QWORD *)(v7 + 280) = 0;
  }
  v35 = (altitude::Tile **)*((_QWORD *)a2 + 5);
  v34 = (altitude::Tile **)*((_QWORD *)a2 + 6);
  if (v35 == v34)
    goto LABEL_1180;
  v558 = (float *)(v7 + 496);
  v556 = v7 + 656;
  v557 = a4 + 1;
  v575 = (altitude::CompleteGlobeTileSetLoader *)v7;
  while (2)
  {
    v36 = *v35;
    if (!*v35)
      goto LABEL_46;
    v576 = v35;
    v37 = *(_DWORD *)(v7 + 616);
    v581 = 0;
    v595 = 0;
    v596 = 0;
    __p = 0;
    altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v7, a5, a4, v36, &v581, a3, 0);
    LODWORD(v597) = 0;
    v38 = v581;
    if (v581)
    {
      if (v581 < 5)
      {
        v39 = *(_DWORD *)(v584 + 1296) != 0 && v583[0] == 0;
        v40 = v582;
        if (!v39)
          v40 = 0.0;
        if (v581 != 1)
        {
          v45 = v585;
          v46 = fminf(v585, v40);
          if (*(_DWORD *)(v584 + 1296) != 0 && v583[0] == 0)
            v45 = v46;
          if (*(_DWORD *)(v587 + 1296) != 0 && v586 == 0)
            v40 = v45;
          v39 |= *(_DWORD *)(v587 + 1296) != 0 && v586 == 0;
          if (v581 != 2)
          {
            v47 = v588;
            v48 = fminf(v588, v40);
            if ((v39 & 1) != 0)
              v47 = v48;
            if (*(_DWORD *)(v590 + 1296) != 0 && v589 == 0)
              v40 = v47;
            v39 |= *(_DWORD *)(v590 + 1296) != 0 && v589 == 0;
            if (v581 != 3 && *(_DWORD *)(v593 + 1296) && !v592)
            {
              v40 = fminf(v591, v40);
              if ((v39 & 1) == 0)
                v40 = v591;
              v39 = 1;
            }
          }
        }
      }
      else
      {
        v39 = 0;
        v40 = 0.0;
        v41 = 1;
        v42 = (float *)__p;
        do
        {
          if (*(_DWORD *)(*((_QWORD *)v42 + 1) + 1296) && !*((_BYTE *)v42 + 4))
          {
            v43 = v42;
            if ((v39 & 1) != 0)
            {
              if (*v42 >= v40)
                v43 = (float *)&v597;
              else
                v43 = v42;
            }
            v40 = *v43;
            *(float *)&v597 = *v43;
            v39 = 1;
          }
          v42 += 4;
          v66 = v581 > v41++;
        }
        while (v66);
      }
      if ((v39 & 1) != 0)
        v44 = v40;
      else
        v44 = 1.0;
    }
    else
    {
      v44 = 1.0;
    }
    v50 = (char *)*((_QWORD *)a2 + 9);
    v49 = *((_QWORD *)a2 + 10);
    v577 = v36;
    if ((unint64_t)v50 >= v49)
    {
      v55 = (char *)*((_QWORD *)a2 + 8);
      v56 = (v50 - v55) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        goto LABEL_1181;
      v58 = v49 - (_QWORD)v55;
      if (v58 >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 61)
          goto LABEL_1182;
        v60 = operator new(8 * v59);
      }
      else
      {
        v60 = 0;
      }
      v67 = (altitude::Tile **)&v60[8 * v56];
      *v67 = v577;
      v68 = v67 + 1;
      if (v50 == v55)
      {
        v55 = v50;
      }
      else
      {
        v69 = v50 - 8 - v55;
        if (v69 < 0x58)
          goto LABEL_1185;
        if ((unint64_t)(v55 - v60) < 0x20)
          goto LABEL_1185;
        v70 = (v69 >> 3) + 1;
        v71 = &v60[8 * v56 - 16];
        v72 = v50 - 16;
        v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *(_OWORD *)v72;
          *(v71 - 1) = *((_OWORD *)v72 - 1);
          *v71 = v74;
          v71 -= 2;
          v72 -= 32;
          v73 -= 4;
        }
        while (v73);
        v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
        v50 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1185:
          do
          {
            v75 = (altitude::Tile *)*((_QWORD *)v50 - 1);
            v50 -= 8;
            *--v67 = v75;
          }
          while (v50 != v55);
          v55 = (char *)*((_QWORD *)a2 + 8);
        }
      }
      *((_QWORD *)a2 + 8) = v67;
      *((_QWORD *)a2 + 9) = v68;
      *((_QWORD *)a2 + 10) = &v60[8 * v59];
      if (v55)
      {
        operator delete(v55);
        v38 = v581;
      }
      v7 = (size_t)v575;
      v36 = v577;
      *((_QWORD *)a2 + 9) = v68;
      if (v38)
      {
LABEL_84:
        if (v38 < 5)
        {
          v61 = *(_DWORD *)(v584 + 1296);
          v62 = v583[0];
          if (v61)
            v63 = v583[0] == 0;
          else
            v63 = 0;
          if (!v63)
          {
            if (v38 == 1)
            {
              v64 = v37;
              if (v61)
                v65 = v583[0] == 0;
              else
                v65 = 0;
              v66 = v65 && v44 < 1.0;
              if (!v66)
                goto LABEL_167;
              goto LABEL_162;
            }
            v77 = *(_DWORD *)(v587 + 1296) && v586 == 0;
            if (!v77
              && (v38 == 2 || (!*(_DWORD *)(v590 + 1296) || v589) && (v38 == 3 || !*(_DWORD *)(v593 + 1296) || v592)))
            {
              goto LABEL_143;
            }
          }
        }
        else
        {
          v52 = 0;
          v53 = 1;
          while (1)
          {
            v54 = (char *)__p + 16 * v52;
            if (*(_DWORD *)(*((_QWORD *)v54 + 1) + 1296))
            {
              if (!v54[4])
                break;
            }
            v52 = v53++;
            if (v38 <= v52)
              goto LABEL_136;
          }
        }
        *((_DWORD *)v36 + 97) = a3;
LABEL_136:
        if (v38 > 4)
        {
          v64 = v37;
          v78 = 0;
          v79 = 1;
          while (1)
          {
            v80 = (char *)__p + 16 * v78;
            if (*(_DWORD *)(*((_QWORD *)v80 + 1) + 1296))
            {
              if (!v80[4])
                break;
            }
            v78 = v79++;
            if (v38 <= v78)
              goto LABEL_167;
          }
LABEL_161:
          if (v44 >= 1.0)
            goto LABEL_167;
LABEL_162:
          v84 = *((_QWORD *)v36 + 38);
          v85 = *((_QWORD *)v36 + 39);
          if (v84 != v85 && *((_DWORD *)v36 + 98) < v64 && *(_BYTE *)(*((_QWORD *)v36 + 36) + 166))
          {
            if (v38 <= 4)
            {
              if (v38 <= 1)
                v95 = 1;
              else
                v95 = v38;
              if ((!*(_DWORD *)(v584 + 1296) || v583[0])
                && (v38 < 2
                 || (!*(_DWORD *)(v587 + 1296) || v586)
                 && (v95 == 2 || (!*(_DWORD *)(v590 + 1296) || v589) && (v95 == 3 || !*(_DWORD *)(v593 + 1296) || v592))))
              {
                goto LABEL_845;
              }
              v88 = (char *)__p;
            }
            else
            {
              v86 = 0;
              v87 = 1;
              v88 = (char *)__p;
              while (1)
              {
                v94 = (char *)__p + 16 * v86;
                if (*(_DWORD *)(*((_QWORD *)v94 + 1) + 1296))
                {
                  if (!v94[4])
                    break;
                }
                v86 = v87++;
                if (v38 <= v86)
                  goto LABEL_845;
              }
              v95 = v38;
            }
            v273 = 0;
            v274 = 0;
            v275 = 0;
            while (*a4 >= 5)
            {
              v276 = 2 * v273;
              v277 = &v581;
              v278 = v88;
              while (1)
              {
                v279 = (float *)&v278[v276 * 8];
                v280 = &v278[v276 * 8 + 4];
                if (v38 <= 4)
                  v280 = (char *)&v277[v276 + 1] + 4;
                if (!*v280 && (*(_DWORD *)(*(_QWORD *)(a4[5] + 8 * v273) + 1296) & 0xFFFFFFFE) == 2)
                {
                  if (v38 <= 4)
                    v279 = (float *)&v277[v276 + 1];
                  v275 |= *v279 >= v9;
                  if (*v279 < 1.0)
                    break;
                }
                ++v273;
                v277 += 2;
                v278 += 16;
                if (v95 == v273)
                  goto LABEL_605;
              }
LABEL_603:
              ++v273;
              v274 = 1;
              if (v273 == v95)
                goto LABEL_606;
            }
            if (v38 > 4)
            {
              v281 = (uint64_t)&v88[16 * v273 + 4];
              v282 = (unsigned __int8 *)v281;
              while (1)
              {
                v283 = *v282;
                v282 += 16;
                if (!v283 && (*(_DWORD *)(v557[v273] + 1296) & 0xFFFFFFFE) == 2)
                {
                  v284 = *(float *)(v281 - 4);
                  v275 |= v284 >= v9;
                  if (v284 < 1.0)
                    goto LABEL_603;
                }
                ++v273;
                v281 = (uint64_t)v282;
                if (v95 == v273)
                  goto LABEL_605;
              }
            }
            v285 = (float *)&v583[16 * v273];
            v286 = v285;
            do
            {
              v287 = *(unsigned __int8 *)v286;
              v286 += 4;
              if (!v287 && (*(_DWORD *)(v557[v273] + 1296) & 0xFFFFFFFE) == 2)
              {
                v288 = *(v285 - 1);
                v275 |= v288 >= v9;
                if (v288 < 1.0)
                  goto LABEL_603;
              }
              ++v273;
              v285 = v286;
            }
            while (v95 != v273);
LABEL_605:
            if ((v274 & 1) == 0)
              goto LABEL_845;
LABEL_606:
            v289 = *((_QWORD *)v577 + 41);
            if (!v289)
            {
              v290 = operator new();
              *(_DWORD *)(v290 + 8) = 0;
              *(_QWORD *)(v290 + 40) = 0;
              *(_QWORD *)(v290 + 32) = 0;
              *(_QWORD *)(v290 + 16) = 0;
              *(_QWORD *)(v290 + 24) = v290 + 32;
              *(_OWORD *)(v290 + 48) = 0u;
              *(_OWORD *)(v290 + 64) = 0u;
              *(_QWORD *)v290 = &off_1E42C5580;
              *(_OWORD *)(v290 + 80) = 0u;
              v291 = (void **)(v290 + 80);
              *(_QWORD *)(v290 + 208) = 0;
              *(_QWORD *)(v290 + 216) = 0;
              *(_OWORD *)(v290 + 96) = 0u;
              *(_OWORD *)(v290 + 112) = 0u;
              *(_OWORD *)(v290 + 128) = 0u;
              *(_OWORD *)(v290 + 144) = 0u;
              *(_OWORD *)(v290 + 160) = 0u;
              *(_OWORD *)(v290 + 176) = 0u;
              *(_OWORD *)(v290 + 185) = 0u;
              *(_DWORD *)(v290 + 224) = -1;
              *(_QWORD *)(v290 + 232) = 0;
              *(_OWORD *)(v290 + 248) = 0u;
              *(_OWORD *)(v290 + 264) = 0u;
              *(_DWORD *)(v290 + 279) = 0;
              *(_QWORD *)(v290 + 288) = 0x3FF0000000000000;
              *(_DWORD *)(v290 + 296) = 0;
              *(_WORD *)(v290 + 300) = 0;
              altitude::Tile::createTileName(&v597, (unsigned int *)v577 + 98, (uint64_t *)(*((_QWORD *)v577 + 36) + 40), (uint64_t *)(*((_QWORD *)v577 + 36) + 136));
              if (*(char *)(v290 + 103) < 0)
                operator delete(*v291);
              *(_OWORD *)v291 = v597;
              *(_QWORD *)(v290 + 96) = v598;
              *((_QWORD *)v577 + 41) = v290;
              (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v290 + 16))(v290, v577);
              v289 = *((_QWORD *)v577 + 41);
              v84 = *((_QWORD *)v577 + 38);
              v85 = *((_QWORD *)v577 + 39);
            }
            v292 = *(_QWORD *)(v289 + 120) != 0;
            if (v84 == v85)
              goto LABEL_845;
            *(_BYTE *)(v7 + 620) = 1;
            v608 = (char *)operator new(0x20uLL);
            v609 = v608;
            v610 = v608 + 32;
            v293 = altitude::CompleteGlobeTileSetLoader::expandSubTree((altitude::CompleteGlobeTileSetLoader *)v7, (uint64_t)v577, (uint64_t)&v608, a4, a5, a3, *(_DWORD *)(v7 + 616));
            v294 = v608;
            if (!v293)
              goto LABEL_1174;
            v295 = v609 - v608;
            if (v609 == v608)
              goto LABEL_1102;
            v554 = v609;
            v296 = 0;
            v297 = 0;
            v298 = 0;
            v565 = v292 & v275;
            v567 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 32) + 69);
            v299 = v295 >> 3;
            v569 = v608;
            v572 = v295 >> 3;
            do
            {
              v301 = *(_DWORD **)&v294[8 * v296];
              v302 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v301 + 24))(v301);
              v597 = *(_OWORD *)v302;
              v598 = *(altitude::Tile **)(v302 + 16);
              v300 = *a4;
              if (*a4)
              {
                v303 = 0;
                v304 = 0;
                v305 = 0;
                v306 = 0xFFFFFFFFLL;
                do
                {
                  v307 = (uint64_t *)(a4[5] + v303 * 8);
                  ++v303;
                  if (v300 <= 4)
                    v308 = (uint64_t *)&a4[v303];
                  else
                    v308 = v307;
                  v309 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v308, (double *)&v597)* 100000.0);
                  if (v309 <= 1)
                    v309 = 1;
                  if (v309 > v305)
                  {
                    v306 = v304;
                    v305 = v309;
                  }
                  ++v304;
                  v300 = *a4;
                }
                while (v304 < *a4);
                v299 = v572;
                if (v306 == 0xFFFFFFFFLL)
                {
                  LODWORD(v300) = 0;
                }
                else
                {
                  if (v300 <= 4)
                    v300 = (unint64_t)&a4[v306 + 1];
                  else
                    v300 = a4[5] + 8 * v306;
                  LODWORD(v300) = *(_DWORD *)(*(_QWORD *)v300 + 1300) + v305;
                }
                v7 = (size_t)v575;
                v294 = v569;
              }
              if (v298 <= v300)
                v298 = v300;
              v301[96] = a3;
              v301[97] = a3;
              v296 = ++v297;
            }
            while (v299 > v297);
            v396 = v577;
            if (*(_BYTE *)(v7 + 613))
            {
              v397 = v554;
              goto LABEL_1103;
            }
            v398 = 0;
            v399 = 0;
            v400 = 1;
            do
            {
              while (1)
              {
                v401 = *(altitude::Tile **)&v294[8 * v398];
                if (*((_BYTE *)v401 + 432))
                  break;
                altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v7, v401, v298 + 800000);
                v400 = 0;
                v398 = ++v399;
                if (v299 <= v399)
                  goto LABEL_1174;
              }
              v398 = ++v399;
            }
            while (v299 > v399);
            if ((v400 & 1) == 0)
            {
LABEL_1175:
              operator delete(v294);
              goto LABEL_845;
            }
            v402 = 0;
            v403 = 0;
            v404 = 0;
            while (1)
            {
              v405 = *(altitude::Tile **)&v294[8 * v402];
              *(_QWORD *)&v597 = 0;
              v606 = 0;
              v607 = 0;
              v605 = 0;
              altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v7, a5, a4, v405, &v597, a3, 0);
              v406 = (double *)(*(uint64_t (**)(altitude::Tile *))(*(_QWORD *)v405 + 24))(v405);
              v407 = v597;
              v408 = v605;
              if (!(_QWORD)v597)
                goto LABEL_894;
              if ((unint64_t)v597 < 5)
              {
                if ((BYTE12(v597) & 1) != 0)
                {
                  v414 = -1;
                  v411 = 0xFFFFFFFFLL;
                  if ((_QWORD)v597 != 1)
                    goto LABEL_875;
                }
                else
                {
                  if (*((float *)&v597 + 2) >= 4295000000.0)
                    v414 = -1;
                  else
                    v414 = *((float *)&v597 + 2);
                  v411 = 0xFFFFFFFFLL;
                  if (*((float *)&v597 + 2) < 4295000000.0)
                    v411 = 0;
                  if ((_QWORD)v597 != 1)
                  {
LABEL_875:
                    if ((BYTE4(v599) & 1) == 0 && *(float *)&v599 < (float)v414)
                    {
                      v414 = *(float *)&v599;
                      v411 = 1;
                    }
                    if ((_QWORD)v597 != 2)
                    {
                      if ((BYTE4(v601) & 1) == 0 && *(float *)&v601 < (float)v414)
                      {
                        v414 = *(float *)&v601;
                        v411 = 2;
                      }
                      if ((_QWORD)v597 != 3 && (v603 & 0x100000000) == 0 && *(float *)&v603 < (float)v414)
                      {
                        v411 = 3;
LABEL_888:
                        v415 = 4 * v411;
                        v416 = (uint64_t *)&v605[v415 + 2];
                        v417 = (uint64_t *)((char *)&v597 + v415 * 4 + 16);
                        if ((unint64_t)v597 <= 4)
                          v418 = v417;
                        else
                          v418 = v416;
                        v419 = *v418;
                        v420 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v418, v406)
                                                   * 100000.0);
                        if (v420 <= 1)
                          v420 = 1;
                        v407 = v420 + *(_DWORD *)(v419 + 1300);
                        v408 = v605;
                        goto LABEL_894;
                      }
                    }
                  }
                }
              }
              else
              {
                v409 = 0;
                v410 = v605 + 1;
                v411 = 0xFFFFFFFFLL;
                v412 = -1;
                do
                {
                  if ((*(_BYTE *)v410 & 1) == 0)
                  {
                    v413 = *(v410 - 1);
                    if (v413 < (float)v412)
                    {
                      v412 = v413;
                      v411 = v409;
                    }
                  }
                  ++v409;
                  v410 += 4;
                }
                while ((_QWORD)v597 != v409);
              }
              if (v411 != 0xFFFFFFFFLL)
                goto LABEL_888;
              v407 = 0;
LABEL_894:
              if (v404 <= v407)
                v404 = v407;
              if (v408)
              {
                v606 = v408;
                operator delete(v408);
              }
              v402 = ++v403;
              if (v299 <= v403)
              {
                if (v554 != v294)
                {
                  v422 = 0;
                  v423 = 0;
                  v552 = v404 + 100000;
                  v555 = v404 + 700000;
                  v553 = v404 + 600000;
                  v573 = 1;
                  v424 = v563;
                  v425 = v565;
                  while (1)
                  {
                    v426 = *(_QWORD *)&v294[8 * v422];
                    v427 = *(__n128 **)(v426 + 328);
                    if (!v427)
                    {
                      v428 = operator new();
                      *(_DWORD *)(v428 + 8) = 0;
                      *(_QWORD *)(v428 + 40) = 0;
                      *(_QWORD *)(v428 + 32) = 0;
                      *(_QWORD *)(v428 + 16) = 0;
                      *(_QWORD *)(v428 + 24) = v428 + 32;
                      *(_OWORD *)(v428 + 48) = 0u;
                      *(_OWORD *)(v428 + 64) = 0u;
                      *(_OWORD *)(v428 + 80) = 0u;
                      v429 = (void **)(v428 + 80);
                      *(_QWORD *)v428 = &off_1E42C5580;
                      *(_QWORD *)(v428 + 208) = 0;
                      *(_QWORD *)(v428 + 216) = 0;
                      *(_OWORD *)(v428 + 96) = 0u;
                      *(_OWORD *)(v428 + 112) = 0u;
                      *(_OWORD *)(v428 + 128) = 0u;
                      *(_OWORD *)(v428 + 144) = 0u;
                      *(_OWORD *)(v428 + 160) = 0u;
                      *(_OWORD *)(v428 + 176) = 0u;
                      *(_OWORD *)(v428 + 185) = 0u;
                      *(_DWORD *)(v428 + 224) = -1;
                      *(_QWORD *)(v428 + 232) = 0;
                      *(_OWORD *)(v428 + 248) = 0u;
                      *(_OWORD *)(v428 + 264) = 0u;
                      *(_DWORD *)(v428 + 279) = 0;
                      *(_QWORD *)(v428 + 288) = 0x3FF0000000000000;
                      *(_DWORD *)(v428 + 296) = 0;
                      *(_WORD *)(v428 + 300) = 0;
                      altitude::Tile::createTileName(&v597, (unsigned int *)(v426 + 392), (uint64_t *)(*(_QWORD *)(v426 + 288) + 40), (uint64_t *)(*(_QWORD *)(v426 + 288) + 136));
                      if (*(char *)(v428 + 103) < 0)
                        operator delete(*v429);
                      *(_OWORD *)v429 = v597;
                      *(_QWORD *)(v428 + 96) = v598;
                      *(_QWORD *)(v426 + 328) = v428;
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v428 + 16))(v428, v426);
                      v427 = *(__n128 **)(v426 + 328);
                      v424 = v563;
                    }
                    if (v567)
                    {
                      if (!v427[8].n128_u64[1] && !*((_DWORD *)v577 + 101))
                      {
                        *(_QWORD *)&v597 = v426;
                        v461 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v424, v426);
                        if (v461)
                        {
                          v462 = *((_DWORD *)v461 + 6);
                          if (v462 <= v555)
                            v462 = v555;
                        }
                        else
                        {
                          v461 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v424, v426, &v597);
                          v462 = v555;
                        }
                        *((_DWORD *)v461 + 6) = v462;
                        v439 = v425;
                        goto LABEL_1053;
                      }
                      if (!v425)
                      {
                        v439 = 0;
                        goto LABEL_1053;
                      }
                      v430 = (*(uint64_t (**)(__n128 *, double *))(v427->n128_u64[0] + 48))(v427, v406) ^ 1;
                      v431 = *(_QWORD *)(v426 + 336);
                      if (v431)
                        v430 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v431 + 48))(v431) ^ 1;
                      v432 = *(_QWORD *)(v426 + 344);
                      if (v432)
                        v430 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v432 + 48))(v432) ^ 1;
                      v433 = *(_QWORD *)(v426 + 352);
                      if (v433)
                        v430 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v433 + 48))(v433) ^ 1;
                      v434 = *(_QWORD *)(v426 + 360);
                      if (v434)
                        v430 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v434 + 48))(v434) ^ 1;
                      v424 = v563;
                      if (!v430)
                      {
                        v439 = 1;
                        goto LABEL_1053;
                      }
                      *(_QWORD *)&v597 = 0;
                      v606 = 0;
                      v607 = 0;
                      v605 = 0;
                      altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v7, a5, a4, (altitude::Tile *)v426, &v597, a3, 0);
                      if ((_QWORD)v597)
                      {
                        if ((unint64_t)v597 >= 5)
                        {
                          v435 = 0;
                          v436 = 1;
                          while (1)
                          {
                            v437 = (char *)&v605[4 * v435];
                            if (*(_DWORD *)(*((_QWORD *)v437 + 1) + 1296))
                            {
                              if (!v437[4])
                                goto LABEL_1034;
                            }
                            v435 = v436++;
                            if ((unint64_t)v597 <= v435)
                              goto LABEL_1048;
                          }
                        }
                        if (*((_DWORD *)v598 + 324) && !BYTE12(v597))
                        {
LABEL_1034:
                          altitude::CompleteGlobeTileSetLoader::queueLoadMesh((_QWORD *)v7, (altitude::Tile *)v426, v552);
                          v439 = 1;
LABEL_1049:
                          if (v605)
                          {
                            v606 = v605;
                            operator delete(v605);
                          }
                          v424 = v563;
                          goto LABEL_1052;
                        }
                        if ((_QWORD)v597 != 1)
                        {
                          if (*((_DWORD *)v600 + 324) && !BYTE4(v599))
                            goto LABEL_1034;
                          if ((_QWORD)v597 != 2)
                          {
                            if (*((_DWORD *)v602 + 324) && !BYTE4(v601))
                              goto LABEL_1034;
                            if ((_QWORD)v597 != 3)
                            {
                              v439 = 0;
                              if (!*(_DWORD *)(v604 + 1296) || BYTE4(v603))
                                goto LABEL_1049;
                              goto LABEL_1034;
                            }
                          }
                        }
                      }
LABEL_1048:
                      v439 = 0;
                      goto LABEL_1049;
                    }
                    if (v427)
                      v438 = (*(uint64_t (**)(__n128 *, double *))(v427->n128_u64[0] + 56))(v427, v406) ^ 1;
                    else
                      v438 = 0;
                    v440 = *(_QWORD *)(v426 + 336);
                    if (v440)
                      v438 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v440 + 56))(v440) ^ 1;
                    v441 = *(_QWORD *)(v426 + 344);
                    if (v441)
                      v438 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v441 + 56))(v441) ^ 1;
                    v442 = *(_QWORD *)(v426 + 352);
                    if (v442)
                      v438 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v442 + 56))(v442) ^ 1;
                    v443 = *(_QWORD *)(v426 + 360);
                    v444 = (_QWORD *)v426;
                    if (v443)
                      v438 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v443 + 56))(v443) ^ 1;
                    if (!v438)
                      break;
LABEL_946:
                    v426 = (unint64_t)v444;
                    v445 = v444[41];
                    if (v445)
                      v446 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v445 + 48))(v445) ^ 1;
                    else
                      v446 = 0;
                    v455 = v444[42];
                    if (v455)
                      v446 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v455 + 48))(v455) ^ 1;
                    v7 = (size_t)v575;
                    v456 = v444[43];
                    if (v456)
                      v446 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v456 + 48))(v456) ^ 1;
                    v457 = v444[44];
                    if (v457)
                      v446 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v457 + 48))(v457) ^ 1;
                    v458 = v444[45];
                    if (v458)
                      v446 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v458 + 48))(v458) ^ 1;
                    v424 = v563;
                    if (v446)
                    {
                      v459 = *(_QWORD *)(v426 + 328);
                      if (v459)
                        v460 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v459 + 64))(v459);
                      else
                        v460 = 0;
                      v463 = *(_QWORD *)(v426 + 336);
                      if (v463 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v463 + 64))(v463))
                        v460 = 1;
                      v464 = *(_QWORD *)(v426 + 344);
                      if (v464 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v464 + 64))(v464))
                        v460 = 1;
                      v465 = *(_QWORD *)(v426 + 352);
                      if (v465 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v465 + 64))(v465))
                        v460 = 1;
                      v466 = *(_QWORD *)(v426 + 360);
                      if (v466 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v466 + 64))(v466) & 1) != 0
                        || v460)
                      {
                        v467 = v426;
                        v424 = v563;
                        do
                        {
                          v467 = *(_QWORD *)(v467 + 296);
                          if (!v467)
                            goto LABEL_1024;
                          v468 = *(_QWORD *)(v467 + 328);
                          if (!v468)
                          {
                            v469 = operator new();
                            *(_DWORD *)(v469 + 8) = 0;
                            *(_QWORD *)(v469 + 40) = 0;
                            *(_QWORD *)(v469 + 32) = 0;
                            *(_QWORD *)(v469 + 16) = 0;
                            *(_QWORD *)(v469 + 24) = v469 + 32;
                            *(_OWORD *)(v469 + 48) = 0u;
                            *(_OWORD *)(v469 + 64) = 0u;
                            *(_OWORD *)(v469 + 80) = 0u;
                            v470 = (void **)(v469 + 80);
                            *(_QWORD *)v469 = &off_1E42C5580;
                            *(_QWORD *)(v469 + 208) = 0;
                            *(_QWORD *)(v469 + 216) = 0;
                            *(_OWORD *)(v469 + 96) = 0u;
                            *(_OWORD *)(v469 + 112) = 0u;
                            *(_OWORD *)(v469 + 128) = 0u;
                            *(_OWORD *)(v469 + 144) = 0u;
                            *(_OWORD *)(v469 + 160) = 0u;
                            *(_OWORD *)(v469 + 176) = 0u;
                            *(_OWORD *)(v469 + 185) = 0u;
                            *(_DWORD *)(v469 + 224) = -1;
                            *(_QWORD *)(v469 + 232) = 0;
                            *(_OWORD *)(v469 + 248) = 0u;
                            *(_OWORD *)(v469 + 264) = 0u;
                            *(_DWORD *)(v469 + 279) = 0;
                            *(_QWORD *)(v469 + 288) = 0x3FF0000000000000;
                            *(_DWORD *)(v469 + 296) = 0;
                            *(_WORD *)(v469 + 300) = 0;
                            altitude::Tile::createTileName(&v597, (unsigned int *)(v467 + 392), (uint64_t *)(*(_QWORD *)(v467 + 288) + 40), (uint64_t *)(*(_QWORD *)(v467 + 288) + 136));
                            if (*(char *)(v469 + 103) < 0)
                              operator delete(*v470);
                            *(_OWORD *)v470 = v597;
                            *(_QWORD *)(v469 + 96) = v598;
                            *(_QWORD *)(v467 + 328) = v469;
                            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v469 + 16))(v469, v467);
                            v468 = *(_QWORD *)(v467 + 328);
                            v424 = v563;
                          }
                        }
                        while (!*(_QWORD *)(v468 + 120));
                        v471 = v559;
                        v472 = (uint64_t *)*v559;
                        v473 = (uint64_t **)v559;
                        if (!*v559)
                        {
LABEL_1020:
                          v481 = v471;
                          v471 = (uint64_t *)operator new(0x30uLL);
                          v471[4] = v426;
                          v471[5] = 0;
                          *v471 = 0;
                          v471[1] = 0;
                          v471[2] = (uint64_t)v481;
                          *v473 = v471;
                          v482 = **((_QWORD **)v575 + 67);
                          v483 = v471;
                          if (v482)
                          {
                            *((_QWORD *)v575 + 67) = v482;
                            v483 = *v473;
                          }
                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v575 + 68), v483);
                          ++*((_QWORD *)v575 + 69);
                          v424 = v563;
LABEL_1023:
                          v471[5] = v553;
                          goto LABEL_1024;
                        }
                        v474 = v559;
                        v475 = (_QWORD *)*v559;
                        do
                        {
                          v476 = v475[4];
                          v477 = v476 >= v426;
                          if (v476 >= v426)
                            v478 = v475;
                          else
                            v478 = v475 + 1;
                          if (v477)
                            v474 = v475;
                          v475 = (_QWORD *)*v478;
                        }
                        while (*v478);
                        if (v474 == v559 || v474[4] > v426)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              v471 = v472;
                              v480 = v472[4];
                              if (v480 <= v426)
                                break;
                              v472 = (uint64_t *)*v471;
                              v473 = (uint64_t **)v471;
                              if (!*v471)
                                goto LABEL_1020;
                            }
                            if (v480 >= v426)
                              goto LABEL_1023;
                            v472 = (uint64_t *)v471[1];
                            if (!v472)
                            {
                              v473 = (uint64_t **)(v471 + 1);
                              goto LABEL_1020;
                            }
                          }
                        }
                        v479 = *((_DWORD *)v474 + 10);
                        if (v479 <= v553)
                          v479 = v553;
                        *((_DWORD *)v474 + 10) = v479;
                        *((_DWORD *)v474 + 11) = 0;
LABEL_1024:
                        v439 = 1;
                      }
                      else
                      {
                        v439 = 1;
                        v424 = v563;
                      }
                      v425 = v565;
                    }
                    else
                    {
                      v439 = 1;
                    }
LABEL_1052:
                    if (!v567)
                    {
                      v492 = *(_QWORD *)(v426 + 328);
                      if (v492)
                        v493 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v492 + 48))(v492) ^ 1;
                      else
                        v493 = 0;
                      v494 = *(_QWORD *)(v426 + 336);
                      if (v494)
                        v493 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v494 + 48))(v494) ^ 1;
                      v495 = *(_QWORD *)(v426 + 344);
                      if (v495)
                        v493 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v495 + 48))(v495) ^ 1;
                      v496 = *(_QWORD *)(v426 + 352);
                      if (v496)
                        v493 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v496 + 48))(v496) ^ 1;
                      v497 = *(_QWORD *)(v426 + 360);
                      if (v497)
                        v493 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v497 + 48))(v497) ^ 1;
                      if (!v493)
                        goto LABEL_1092;
                      v498 = *(_QWORD *)(v426 + 328);
                      if (v498)
                        v499 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v498 + 64))(v498);
                      else
                        v499 = 0;
                      v500 = *(_QWORD *)(v426 + 336);
                      if (v500 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v500 + 64))(v500))
                        v499 = 1;
                      v501 = *(_QWORD *)(v426 + 344);
                      if (v501 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v501 + 64))(v501))
                        v499 = 1;
                      v502 = *(_QWORD *)(v426 + 352);
                      if (v502 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v502 + 64))(v502))
                        v499 = 1;
                      if ((v503 = *(_QWORD *)(v426 + 360)) != 0
                        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v503 + 64))(v503) & 1) != 0
                        || v499)
                      {
                        v424 = v563;
                        while (1)
                        {
                          v426 = *(_QWORD *)(v426 + 296);
                          if (!v426)
                            break;
                          v504 = *(_QWORD *)(v426 + 328);
                          if (!v504)
                          {
                            v505 = operator new();
                            *(_DWORD *)(v505 + 8) = 0;
                            *(_QWORD *)(v505 + 40) = 0;
                            *(_QWORD *)(v505 + 32) = 0;
                            *(_QWORD *)(v505 + 16) = 0;
                            *(_QWORD *)(v505 + 24) = v505 + 32;
                            *(_OWORD *)(v505 + 48) = 0u;
                            *(_OWORD *)(v505 + 64) = 0u;
                            *(_OWORD *)(v505 + 80) = 0u;
                            v506 = (void **)(v505 + 80);
                            *(_QWORD *)v505 = &off_1E42C5580;
                            *(_QWORD *)(v505 + 208) = 0;
                            *(_QWORD *)(v505 + 216) = 0;
                            *(_OWORD *)(v505 + 96) = 0u;
                            *(_OWORD *)(v505 + 112) = 0u;
                            *(_OWORD *)(v505 + 128) = 0u;
                            *(_OWORD *)(v505 + 144) = 0u;
                            *(_OWORD *)(v505 + 160) = 0u;
                            *(_OWORD *)(v505 + 176) = 0u;
                            *(_OWORD *)(v505 + 185) = 0u;
                            *(_DWORD *)(v505 + 224) = -1;
                            *(_QWORD *)(v505 + 232) = 0;
                            *(_OWORD *)(v505 + 248) = 0u;
                            *(_OWORD *)(v505 + 264) = 0u;
                            *(_DWORD *)(v505 + 279) = 0;
                            *(_QWORD *)(v505 + 288) = 0x3FF0000000000000;
                            *(_DWORD *)(v505 + 296) = 0;
                            *(_WORD *)(v505 + 300) = 0;
                            altitude::Tile::createTileName(&v597, (unsigned int *)(v426 + 392), (uint64_t *)(*(_QWORD *)(v426 + 288) + 40), (uint64_t *)(*(_QWORD *)(v426 + 288) + 136));
                            if (*(char *)(v505 + 103) < 0)
                              operator delete(*v506);
                            *(_OWORD *)v506 = v597;
                            *(_QWORD *)(v505 + 96) = v598;
                            *(_QWORD *)(v426 + 328) = v505;
                            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v505 + 16))(v505, v426);
                            v504 = *(_QWORD *)(v426 + 328);
                            v424 = v563;
                          }
                          if (*(_QWORD *)(v504 + 120))
                            goto LABEL_907;
                        }
                      }
                      else
                      {
LABEL_1092:
                        v424 = v563;
                      }
                      goto LABEL_908;
                    }
LABEL_1053:
                    if (!v427[8].n128_u64[1] && !*((_DWORD *)v577 + 101) || v439 && !v427[7].n128_u64[1])
LABEL_907:
                      v573 = 0;
LABEL_908:
                    v294 = v608;
                    v397 = v609;
                    v422 = ++v423;
                    if (v423 >= (unint64_t)((v609 - v608) >> 3))
                    {
                      v396 = v577;
                      if ((v573 & 1) == 0)
                        goto LABEL_1174;
                      goto LABEL_1103;
                    }
                  }
                  v447 = v427[14].n128_u32[0] - 1;
                  v448 = (_QWORD *)v426;
                  while (2)
                  {
                    v317 = v447-- != 0;
                    if (!v317)
                      goto LABEL_946;
                    v448 = (_QWORD *)v448[37];
                    if (!v448)
                      goto LABEL_946;
                    v449 = v448[41];
                    if (v449)
                    {
                      v450 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v449 + 48))(v449) ^ 1;
                      v451 = v448[42];
                      if (v451)
                        goto LABEL_955;
                    }
                    else
                    {
                      v450 = 0;
                      v451 = v448[42];
                      if (v451)
LABEL_955:
                        v450 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v451 + 48))(v451) ^ 1;
                    }
                    v452 = v448[43];
                    if (v452)
                      v450 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v452 + 48))(v452) ^ 1;
                    v453 = v448[44];
                    if (v453)
                      v450 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v453 + 48))(v453) ^ 1;
                    v454 = v448[45];
                    if (v454)
                      v450 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 48))(v454) ^ 1;
                    if (!v450)
                    {
                      v484 = (__n128 *)*((_QWORD *)v575 + 83);
                      if ((unint64_t)v484 >= *((_QWORD *)v575 + 84))
                      {
                        v488 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v556, v427[13]);
                      }
                      else
                      {
                        v484->n128_u64[0] = v427[13].n128_u64[0];
                        v485 = v427[13].n128_u64[1];
                        v484->n128_u64[1] = v485;
                        if (v485)
                        {
                          v486 = (unint64_t *)(v485 + 8);
                          do
                            v487 = __ldxr(v486);
                          while (__stxr(v487 + 1, v486));
                        }
                        v488 = v484 + 1;
                      }
                      *((_QWORD *)v575 + 83) = v488;
                      if (v427[13].n128_u64[0])
                      {
                        (*(void (**)(_QWORD, unint64_t, __n128 *))(**(_QWORD **)(v427[1].n128_u64[0]
                                                                                                 + 424)
                                                                                   + 24))(*(_QWORD *)(v427[1].n128_u64[0] + 424), v427[1].n128_u64[0], v427);
                        v489 = (std::__shared_weak_count *)v427[13].n128_u64[1];
                        v427[13].n128_u64[0] = 0;
                        v427[13].n128_u64[1] = 0;
                        if (v489)
                        {
                          p_shared_owners = (unint64_t *)&v489->__shared_owners_;
                          do
                            v491 = __ldaxr(p_shared_owners);
                          while (__stlxr(v491 - 1, p_shared_owners));
                          if (!v491)
                          {
                            ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                            std::__shared_weak_count::__release_weak(v489);
                          }
                          if (v427[13].n128_u64[0])
                            (*(void (**)(_QWORD, unint64_t, __n128 *))(**(_QWORD **)(v427[1].n128_u64[0] + 424)
                                                                                       + 16))(*(_QWORD *)(v427[1].n128_u64[0] + 424), v427[1].n128_u64[0], v427);
                        }
                        v427[14].n128_u32[0] = -1;
                      }
                      goto LABEL_946;
                    }
                    continue;
                  }
                }
LABEL_1102:
                v397 = v294;
                v396 = v577;
LABEL_1103:
                DWORD2(v597) = 0;
                *(_QWORD *)&v597 = &off_1E42C4158;
                v598 = v396;
                v600 = 0;
                v601 = 0;
                v599 = 0;
                v507 = v397 - v294;
                if (v397 == v294)
                {
LABEL_1106:
                  v510 = *((_QWORD *)v396 + 41);
                  if (v510)
                    v511 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v510 + 96))(v510, &v597);
                  else
                    v511 = 1;
                  v512 = *((_QWORD *)v396 + 42);
                  if (v512)
                    v511 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v512 + 96))(v512, &v597);
                  v513 = *((_QWORD *)v396 + 43);
                  if (v513)
                    v511 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v513 + 96))(v513, &v597);
                  v514 = *((_QWORD *)v396 + 44);
                  if (v514)
                    v511 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v514 + 96))(v514, &v597);
                  v515 = *((_QWORD *)v396 + 45);
                  if (v515)
                  {
                    if (((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v515 + 96))(v515, &v597) & v511 & 1) == 0)
                      goto LABEL_1170;
                  }
                  else if (!v511)
                  {
LABEL_1170:
                    v532 = v599;
LABEL_1171:
                    *(_QWORD *)&v597 = &off_1E42C4158;
                    if (v532)
                    {
                      v600 = v532;
                      operator delete(v532);
                    }
                    v294 = v608;
LABEL_1174:
                    if (!v294)
                      goto LABEL_845;
                    goto LABEL_1175;
                  }
                  v516 = v598;
                  v517 = *((_QWORD *)v598 + 41);
                  if (v517)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v517 + 104))(v517, &v597);
                  v518 = *((_QWORD *)v516 + 42);
                  if (v518)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v518 + 104))(v518, &v597);
                  v519 = *((_QWORD *)v516 + 43);
                  if (v519)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v519 + 104))(v519, &v597);
                  v520 = *((_QWORD *)v516 + 44);
                  if (v520)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v520 + 104))(v520, &v597);
                  v521 = *((_QWORD *)v516 + 45);
                  if (v521)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v521 + 104))(v521, &v597);
                  v522 = v598;
                  v524 = *((_QWORD *)a2 + 5);
                  v523 = *((_QWORD *)a2 + 6);
                  if (v523 != v524)
                  {
                    v525 = 0;
                    v526 = 1;
                    do
                    {
                      if (*(altitude::Tile **)(v524 + 8 * v525) == v522)
                      {
                        *(_QWORD *)(v524 + 8 * v525) = 0;
                        v524 = *((_QWORD *)a2 + 5);
                        v523 = *((_QWORD *)a2 + 6);
                      }
                      v525 = v526++;
                    }
                    while (v525 < (v523 - v524) >> 3);
                  }
                  v527 = (char *)*((_QWORD *)a2 + 8);
                  v528 = (char *)*((_QWORD *)a2 + 9);
                  if (v528 != v527)
                  {
                    v529 = 0;
                    v530 = 1;
                    do
                    {
                      if (*(altitude::Tile **)&v527[8 * v529] == v522)
                      {
                        *(_QWORD *)&v527[8 * v529] = 0;
                        v527 = (char *)*((_QWORD *)a2 + 8);
                        v528 = (char *)*((_QWORD *)a2 + 9);
                      }
                      v529 = v530++;
                    }
                    while (v529 < (v528 - v527) >> 3);
                  }
                  v532 = v599;
                  v531 = v600;
                  if (v599 == v600)
                    goto LABEL_1171;
                  v578 = v600;
                  while (1)
                  {
                    v534 = *(_QWORD *)v532;
                    v535 = *((_QWORD *)a2 + 10);
                    if ((unint64_t)v528 >= v535)
                      break;
                    *(_QWORD *)v528 = v534;
                    v533 = v528 + 8;
LABEL_1142:
                    *((_QWORD *)a2 + 9) = v533;
                    v532 = (altitude::Tile *)((char *)v532 + 8);
                    v528 = v533;
                    if (v532 == v531)
                      goto LABEL_1170;
                  }
                  v536 = (char *)*((_QWORD *)a2 + 8);
                  v537 = (v528 - v536) >> 3;
                  v538 = v537 + 1;
                  if ((unint64_t)(v537 + 1) >> 61)
                    goto LABEL_1181;
                  v539 = v535 - (_QWORD)v536;
                  if (v539 >> 2 > v538)
                    v538 = v539 >> 2;
                  if ((unint64_t)v539 >= 0x7FFFFFFFFFFFFFF8)
                    v540 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v540 = v538;
                  if (v540)
                  {
                    if (v540 >> 61)
                      goto LABEL_1182;
                    v541 = operator new(8 * v540);
                  }
                  else
                  {
                    v541 = 0;
                  }
                  v542 = &v541[8 * v537];
                  *v542 = v534;
                  v533 = (char *)(v542 + 1);
                  if (v528 == v536)
                  {
                    v536 = v528;
                    v7 = (size_t)v575;
                  }
                  else
                  {
                    v543 = v528 - 8 - v536;
                    if (v543 < 0x168
                      || &v541[v528 - v536 - 8 - (v543 & 0xFFFFFFFFFFFFFFF8)] > &v541[v528 - v536 - 8]
                      || &v528[-(v543 & 0xFFFFFFFFFFFFFFF8) - 8] > v528 - 8
                      || (unint64_t)(v536 - v541) < 0x20)
                    {
                      v544 = v528;
                      v7 = (size_t)v575;
                      goto LABEL_1160;
                    }
                    v546 = (v543 >> 3) + 1;
                    v544 = &v528[-8 * (v546 & 0x3FFFFFFFFFFFFFFCLL)];
                    v547 = &v541[8 * v537 - 16];
                    v548 = v528 - 16;
                    v549 = v546 & 0x3FFFFFFFFFFFFFFCLL;
                    v7 = (size_t)v575;
                    do
                    {
                      v550 = *(_OWORD *)v548;
                      *(v547 - 1) = *((_OWORD *)v548 - 1);
                      *v547 = v550;
                      v547 -= 2;
                      v548 -= 32;
                      v549 -= 4;
                    }
                    while (v549);
                    v542 -= v546 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v546 != (v546 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_1160:
                        v545 = *((_QWORD *)v544 - 1);
                        v544 -= 8;
                        *--v542 = v545;
                      }
                      while (v544 != v536);
                      v536 = (char *)*((_QWORD *)a2 + 8);
                    }
                  }
                  *((_QWORD *)a2 + 8) = v542;
                  *((_QWORD *)a2 + 9) = v533;
                  *((_QWORD *)a2 + 10) = &v541[8 * v540];
                  if (v536)
                    operator delete(v536);
                  v531 = v578;
                  goto LABEL_1142;
                }
                if ((v507 & 0x8000000000000000) == 0)
                {
                  v508 = (altitude::Tile *)operator new(v397 - v294);
                  v509 = (char *)v508 + 8 * (v507 >> 3);
                  v599 = v508;
                  v601 = v509;
                  memcpy(v508, v294, v507);
                  v600 = (altitude::Tile *)v509;
                  goto LABEL_1106;
                }
LABEL_1181:
                abort();
              }
            }
          }
LABEL_167:
          if (v574)
          {
            LODWORD(v597) = 0;
            if (v38 < 5)
            {
              if (v38 <= 1)
                v96 = 1;
              else
                v96 = v38;
              v97 = *(_DWORD *)(v584 + 1296);
              LOBYTE(v89) = v97 != 0;
              v76 = v582;
              if (!v97)
                v76 = 0.0;
              if (v38 >= 2)
              {
                v98 = *(_DWORD *)(v587 + 1296);
                v100 = v585;
                v101 = fminf(v585, v76);
                if (v97)
                  v100 = v101;
                if (v98)
                  v76 = v100;
                v99 = v98 | v97;
                v89 = (v98 | v97) != 0;
                if (v96 != 2)
                {
                  if (*(_DWORD *)(v590 + 1296))
                  {
                    v76 = fminf(v588, v76);
                    if (!v99)
                      v76 = v588;
                    *(float *)&v597 = v76;
                    v89 = 1;
                  }
                  if (v96 != 3 && *(_DWORD *)(v593 + 1296))
                  {
                    v76 = fminf(v591, v76);
                    if (!v89)
                      v76 = v591;
                    LOBYTE(v89) = 1;
                  }
                }
              }
            }
            else
            {
              LOBYTE(v89) = 0;
              v76 = 0.0;
              v90 = 1;
              v91 = (float *)__p;
              do
              {
                if (*(_DWORD *)(*((_QWORD *)v91 + 1) + 1296))
                {
                  v92 = v91;
                  if (v89)
                  {
                    if (*v91 >= v76)
                      v92 = (float *)&v597;
                    else
                      v92 = v91;
                  }
                  v76 = *v92;
                  *(float *)&v597 = *v92;
                  LOBYTE(v89) = 1;
                }
                v91 += 4;
                v66 = v38 > v90++;
              }
              while (v66);
            }
            if (!v89)
              v76 = 1.0;
            goto LABEL_205;
          }
LABEL_178:
          v93 = 1;
          goto LABEL_206;
        }
        v61 = *(_DWORD *)(v584 + 1296);
        v62 = v583[0];
LABEL_143:
        v64 = v37;
        if (v38 <= 1)
          v81 = 1;
        else
          v81 = v38;
        if (v61)
          v82 = v62 == 0;
        else
          v82 = 0;
        if (!v82)
        {
          if (v38 < 2)
            goto LABEL_167;
          v83 = *(_DWORD *)(v587 + 1296) && v586 == 0;
          if (!v83
            && (v81 == 2 || (!*(_DWORD *)(v590 + 1296) || v589) && (v81 == 3 || !*(_DWORD *)(v593 + 1296) || v592)))
          {
            goto LABEL_167;
          }
        }
        goto LABEL_161;
      }
    }
    else
    {
      *(_QWORD *)v50 = v36;
      v51 = v50 + 8;
      v7 = (size_t)v575;
      *((_QWORD *)a2 + 9) = v51;
      if (v38)
        goto LABEL_84;
    }
    if (!v574)
      goto LABEL_178;
    v76 = 1.0;
LABEL_205:
    v93 = v76 < 40.0;
LABEL_206:
    v568 = v93;
    if (!*(_BYTE *)(v7 + 612) || *(_BYTE *)(v7 + 613))
      goto LABEL_208;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = *(_QWORD *)(v7 + 32);
    v114 = *(float *)(v113 + 52);
    v564 = *(unsigned __int8 *)(v113 + 69);
    v566 = *(_DWORD *)(v7 + 616);
    v115 = *((_QWORD *)v577 + 37);
    while (v115)
    {
      if (!*(_BYTE *)(v115 + 432))
      {
        v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115);
        v597 = *(_OWORD *)v118;
        v598 = *(altitude::Tile **)(v118 + 16);
        v119 = *a4;
        if (*a4)
        {
          v570 = v112;
          v120 = v111;
          v121 = 0;
          v122 = 0;
          v123 = 0;
          v124 = 0xFFFFFFFFLL;
          do
          {
            v125 = (uint64_t *)(a4[5] + v121 * 8);
            ++v121;
            if (v119 <= 4)
              v126 = (uint64_t *)&a4[v121];
            else
              v126 = v125;
            v127 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v126, (double *)&v597)
                                       * 100000.0);
            if (v127 <= 1)
              v127 = 1;
            if (v127 > v123)
            {
              v124 = v122;
              v123 = v127;
            }
            ++v122;
            v119 = *a4;
          }
          while (v122 < *a4);
          if (v124 == 0xFFFFFFFFLL)
          {
            LODWORD(v119) = 0;
          }
          else
          {
            if (v119 <= 4)
              v119 = (unint64_t)&a4[v124 + 1];
            else
              v119 = a4[5] + 8 * v124;
            LODWORD(v119) = *(_DWORD *)(*(_QWORD *)v119 + 1300) + v123;
          }
          v7 = (size_t)v575;
          v111 = v120;
          v112 = v570;
        }
        if (!altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v7, (altitude::Tile *)v115, (int)v119 + 800000))goto LABEL_208;
      }
      *(_QWORD *)&v597 = 0;
      v606 = 0;
      v607 = 0;
      v605 = 0;
      altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(v7, a5, a4, (altitude::Tile *)v115, &v597, a3, 1);
      LODWORD(v608) = 0;
      if (!(_QWORD)v597)
        goto LABEL_361;
      if ((unint64_t)v597 >= 5)
      {
        v128 = 0;
        v129 = 0.0;
        v130 = 1;
        v131 = v605;
        v132 = v605;
        do
        {
          if (*(_DWORD *)(*((_QWORD *)v132 + 1) + 1296) && !*((_BYTE *)v132 + 4))
          {
            v133 = v132;
            if ((v128 & 1) != 0)
            {
              if (*v132 >= v129)
                v133 = (float *)&v608;
              else
                v133 = v132;
            }
            v129 = *v133;
            *(float *)&v608 = *v133;
            v128 = 1;
          }
          v132 += 4;
          v66 = (unint64_t)v597 > v130++;
        }
        while (v66);
        v140 = 0;
        if ((v128 & 1) == 0)
          v129 = 1.0;
        v141 = v129 < 1.0;
        v142 = 1;
        while (1)
        {
          v143 = (char *)&v605[4 * v140];
          if (*(_DWORD *)(*((_QWORD *)v143 + 1) + 1296))
          {
            if (!v143[4])
              break;
          }
          v140 = v142++;
          if ((unint64_t)v597 <= v140)
          {
            LOBYTE(v135) = 0;
            LODWORD(v608) = 0;
            v144 = 0.0;
            v145 = 1;
            do
            {
              if (*(_DWORD *)(*((_QWORD *)v131 + 1) + 1296))
              {
                v146 = v131;
                if (v135)
                {
                  if (*v131 >= v144)
                    v146 = (float *)&v608;
                  else
                    v146 = v131;
                }
                v144 = *v146;
                *(float *)&v608 = *v146;
                LOBYTE(v135) = 1;
              }
              v131 += 4;
              v66 = (unint64_t)v597 > v145++;
            }
            while (v66);
            goto LABEL_301;
          }
        }
LABEL_296:
        if (!v141)
          goto LABEL_307;
        goto LABEL_305;
      }
      v134 = *((_DWORD *)v598 + 324);
      v135 = v134 != 0;
      v136 = BYTE12(v597) == 0;
      v137 = v135 && v136;
      v138 = *((float *)&v597 + 2);
      if (!v135 || !v136)
        v138 = 0.0;
      if (v597 == 1)
      {
        v139 = v135 && v136;
LABEL_290:
        v151 = 1.0;
        if ((v139 & 1) == 0)
          goto LABEL_292;
        goto LABEL_291;
      }
      v147 = *(float *)&v599;
      v148 = fminf(*(float *)&v599, v138);
      if (v134 != 0 && v136)
        v147 = v148;
      if (*((_DWORD *)v600 + 324) != 0 && BYTE4(v599) == 0)
        v138 = v147;
      v139 = *((_DWORD *)v600 + 324) != 0 && BYTE4(v599) == 0 || v137;
      if (v597 == 2)
        goto LABEL_290;
      v149 = *(float *)&v601;
      v150 = fminf(*(float *)&v601, v138);
      if (*((_DWORD *)v600 + 324) != 0 && BYTE4(v599) == 0 || v137)
        v149 = v150;
      if (*((_DWORD *)v602 + 324) != 0 && BYTE4(v601) == 0)
        v138 = v149;
      v139 |= *((_DWORD *)v602 + 324) != 0 && BYTE4(v601) == 0;
      if (v597 == 3 || !*(_DWORD *)(v604 + 1296) || BYTE4(v603))
        goto LABEL_290;
      v138 = fminf(*(float *)&v603, v138);
      if ((v139 & 1) == 0)
        v138 = *(float *)&v603;
LABEL_291:
      v151 = v138;
LABEL_292:
      v141 = v151 < 1.0;
      if ((unint64_t)v597 <= 1)
        v152 = 1;
      else
        v152 = v597;
      if (v137)
        goto LABEL_296;
      if ((unint64_t)v597 > 1)
      {
        if (*((_DWORD *)v600 + 324) && !BYTE4(v599)
          || v152 != 2
          && (*((_DWORD *)v602 + 324) && !BYTE4(v601) || v152 != 3 && *(_DWORD *)(v604 + 1296) && !BYTE4(v603)))
        {
          goto LABEL_296;
        }
        v144 = *((float *)&v597 + 2);
        if (!v134)
          v144 = 0.0;
        v160 = *((_DWORD *)v600 + 324);
        v162 = *(float *)&v599;
        v163 = fminf(*(float *)&v599, v144);
        if (v134)
          v162 = v163;
        if (v160)
          v144 = v162;
        v161 = v160 | v134;
        v135 = (v160 | v134) != 0;
        if ((_DWORD)v597 != 2)
        {
          v164 = *(float *)&v601;
          v165 = fminf(*(float *)&v601, v144);
          if (v161)
            v164 = v165;
          if (*((_DWORD *)v602 + 324))
          {
            v144 = v164;
            v135 = 1;
          }
          if ((_DWORD)v597 != 3 && *(_DWORD *)(v604 + 1296))
          {
            v144 = fminf(*(float *)&v603, v144);
            if (!v135)
              v144 = *(float *)&v603;
            LOBYTE(v135) = 1;
          }
        }
      }
      else
      {
        v144 = *((float *)&v597 + 2);
        if (!v134)
          v144 = 0.0;
      }
LABEL_301:
      if (!v135)
        v144 = 1.0;
      if (v144 > v114 || !v141)
      {
LABEL_307:
        if ((unint64_t)v597 <= 4)
        {
          if ((unint64_t)v597 <= 1)
            v156 = 1;
          else
            v156 = v597;
          if (*((_DWORD *)v598 + 324))
            v157 = BYTE12(v597) == 0;
          else
            v157 = 0;
          if (v157)
            goto LABEL_328;
          if ((unint64_t)v597 < 2)
            goto LABEL_361;
          if (*((_DWORD *)v600 + 324))
            v158 = BYTE4(v599) == 0;
          else
            v158 = 0;
          if (v158)
            goto LABEL_328;
          if (v156 == 2)
            goto LABEL_361;
          if (*((_DWORD *)v602 + 324) && !BYTE4(v601))
            goto LABEL_328;
          if (v156 == 3)
          {
LABEL_361:
            v110 = 1;
            v159 = *(_QWORD *)(v115 + 328);
            if (!v159)
              goto LABEL_381;
          }
          else
          {
            if (*(_DWORD *)(v604 + 1296))
              v171 = BYTE4(v603) == 0;
            else
              v171 = 0;
            v110 = !v171;
            v159 = *(_QWORD *)(v115 + 328);
            if (!v159)
              goto LABEL_381;
          }
        }
        else
        {
          v153 = 0;
          v154 = 1;
          while (1)
          {
            v155 = (char *)&v605[4 * v153];
            if (*(_DWORD *)(*((_QWORD *)v155 + 1) + 1296))
            {
              if (!v155[4])
                break;
            }
            v153 = v154++;
            if ((unint64_t)v597 <= v153)
              goto LABEL_361;
          }
LABEL_328:
          v110 = 0;
          v159 = *(_QWORD *)(v115 + 328);
          if (!v159)
          {
LABEL_381:
            v166 = 0;
            v167 = *(_QWORD *)(v115 + 336);
            if (!v167)
            {
LABEL_364:
              v168 = *(_QWORD *)(v115 + 344);
              if (v168)
                v166 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 48))(v168) ^ 1;
              v169 = *(_QWORD *)(v115 + 352);
              if (v169)
                v166 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 48))(v169) ^ 1;
              v170 = *(_QWORD *)(v115 + 360);
              if (v170)
                v166 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 48))(v170) ^ 1;
              if (!v166)
                v112 = (_DWORD *)v115;
              v111 = (_DWORD *)v115;
              v115 = *(_QWORD *)(v115 + 296);
              v116 = 1;
              v117 = v605;
              if (!v605)
                goto LABEL_227;
LABEL_226:
              v606 = v117;
              operator delete(v117);
              goto LABEL_227;
            }
LABEL_363:
            v166 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 48))(v167) ^ 1;
            goto LABEL_364;
          }
        }
        v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 48))(v159) ^ 1;
        v167 = *(_QWORD *)(v115 + 336);
        if (!v167)
          goto LABEL_364;
        goto LABEL_363;
      }
LABEL_305:
      if (!*(_BYTE *)(*(_QWORD *)(v115 + 288) + 166) || *(_DWORD *)(v115 + 392) >= v566)
        goto LABEL_307;
      v116 = 0;
      v117 = v605;
      if (v605)
        goto LABEL_226;
LABEL_227:
      if ((v116 & 1) == 0)
        break;
    }
    if (v568 && v112 != 0)
      v172 = v112;
    else
      v172 = v111;
    if (!v172)
      goto LABEL_208;
    v172[96] = a3;
    v173 = *((_QWORD *)v172 + 41);
    if (!v173)
    {
      v174 = operator new();
      *(_DWORD *)(v174 + 8) = 0;
      *(_QWORD *)(v174 + 40) = 0;
      *(_QWORD *)(v174 + 32) = 0;
      *(_QWORD *)(v174 + 16) = 0;
      *(_QWORD *)(v174 + 24) = v174 + 32;
      *(_OWORD *)(v174 + 48) = 0u;
      *(_OWORD *)(v174 + 64) = 0u;
      *(_OWORD *)(v174 + 80) = 0u;
      v175 = (void **)(v174 + 80);
      *(_QWORD *)v174 = &off_1E42C5580;
      *(_QWORD *)(v174 + 208) = 0;
      *(_QWORD *)(v174 + 216) = 0;
      *(_OWORD *)(v174 + 96) = 0u;
      *(_OWORD *)(v174 + 112) = 0u;
      *(_OWORD *)(v174 + 128) = 0u;
      *(_OWORD *)(v174 + 144) = 0u;
      *(_OWORD *)(v174 + 160) = 0u;
      *(_OWORD *)(v174 + 176) = 0u;
      *(_OWORD *)(v174 + 185) = 0u;
      *(_DWORD *)(v174 + 224) = -1;
      *(_QWORD *)(v174 + 232) = 0;
      *(_OWORD *)(v174 + 248) = 0u;
      *(_OWORD *)(v174 + 264) = 0u;
      *(_DWORD *)(v174 + 279) = 0;
      *(_QWORD *)(v174 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v174 + 296) = 0;
      *(_WORD *)(v174 + 300) = 0;
      altitude::Tile::createTileName(&v597, v172 + 98, (uint64_t *)(*((_QWORD *)v172 + 36) + 40), (uint64_t *)(*((_QWORD *)v172 + 36) + 136));
      if (*(char *)(v174 + 103) < 0)
        operator delete(*v175);
      *(_OWORD *)v175 = v597;
      *(_QWORD *)(v174 + 96) = v598;
      *((_QWORD *)v172 + 41) = v174;
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v174 + 16))(v174, v172);
      v173 = *((_QWORD *)v172 + 41);
    }
    v176 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v172 + 24))(v172);
    v597 = *(_OWORD *)v176;
    v598 = *(altitude::Tile **)(v176 + 16);
    v177 = *a4;
    if (!*a4)
    {
      v571 = 0;
      if (v564)
        goto LABEL_506;
LABEL_471:
      v215 = *((_QWORD *)v172 + 41);
      if (v215)
      {
        v216 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v215 + 48))(v215) ^ 1;
        v217 = *((_QWORD *)v172 + 42);
        if (!v217)
          goto LABEL_474;
      }
      else
      {
        v216 = 0;
        v217 = *((_QWORD *)v172 + 42);
        if (!v217)
        {
LABEL_474:
          v218 = *((_QWORD *)v172 + 43);
          if (v218)
            v216 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 48))(v218) ^ 1;
          v219 = *((_QWORD *)v172 + 44);
          if (v219)
            v216 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 48))(v219) ^ 1;
          v220 = *((_QWORD *)v172 + 45);
          if (v220)
            v216 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 48))(v220) ^ 1;
          if (!v216)
            goto LABEL_508;
          v221 = *((_QWORD *)v172 + 41);
          if (v221)
          {
            v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 64))(v221);
            v223 = *((_QWORD *)v172 + 42);
            if (!v223)
              goto LABEL_485;
          }
          else
          {
            v222 = 0;
            v223 = *((_QWORD *)v172 + 42);
            if (!v223)
              goto LABEL_485;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v223 + 64))(v223))
            v222 = 1;
LABEL_485:
          v224 = *((_QWORD *)v172 + 43);
          if (v224 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v224 + 64))(v224))
            v222 = 1;
          v225 = *((_QWORD *)v172 + 44);
          if (v225 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v225 + 64))(v225))
            v222 = 1;
          v226 = *((_QWORD *)v172 + 45);
          if (v226 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 64))(v226) & 1) != 0 || v222)
          {
            v227 = v172;
            do
            {
              v227 = (_DWORD *)*((_QWORD *)v227 + 37);
              if (!v227)
                goto LABEL_508;
              v228 = *((_QWORD *)v227 + 41);
              if (!v228)
              {
                v229 = operator new();
                *(_DWORD *)(v229 + 8) = 0;
                *(_QWORD *)(v229 + 40) = 0;
                *(_QWORD *)(v229 + 32) = 0;
                *(_QWORD *)(v229 + 16) = 0;
                *(_QWORD *)(v229 + 24) = v229 + 32;
                *(_OWORD *)(v229 + 48) = 0u;
                *(_OWORD *)(v229 + 64) = 0u;
                *(_OWORD *)(v229 + 80) = 0u;
                v230 = (void **)(v229 + 80);
                *(_QWORD *)v229 = &off_1E42C5580;
                *(_QWORD *)(v229 + 208) = 0;
                *(_QWORD *)(v229 + 216) = 0;
                *(_OWORD *)(v229 + 96) = 0u;
                *(_OWORD *)(v229 + 112) = 0u;
                *(_OWORD *)(v229 + 128) = 0u;
                *(_OWORD *)(v229 + 144) = 0u;
                *(_OWORD *)(v229 + 160) = 0u;
                *(_OWORD *)(v229 + 176) = 0u;
                *(_OWORD *)(v229 + 185) = 0u;
                *(_DWORD *)(v229 + 224) = -1;
                *(_QWORD *)(v229 + 232) = 0;
                *(_OWORD *)(v229 + 248) = 0u;
                *(_OWORD *)(v229 + 264) = 0u;
                *(_DWORD *)(v229 + 279) = 0;
                *(_QWORD *)(v229 + 288) = 0x3FF0000000000000;
                *(_DWORD *)(v229 + 296) = 0;
                *(_WORD *)(v229 + 300) = 0;
                altitude::Tile::createTileName(&v597, v227 + 98, (uint64_t *)(*((_QWORD *)v227 + 36) + 40), (uint64_t *)(*((_QWORD *)v227 + 36) + 136));
                if (*(char *)(v229 + 103) < 0)
                  operator delete(*v230);
                *(_OWORD *)v230 = v597;
                *(_QWORD *)(v229 + 96) = v598;
                *((_QWORD *)v227 + 41) = v229;
                (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v229 + 16))(v229, v227);
                v228 = *((_QWORD *)v227 + 41);
              }
            }
            while (!*(_QWORD *)(v228 + 120));
            v371 = (uint64_t *)(v571 + 600000);
            v372 = (uint64_t **)v559;
            v373 = (uint64_t *)*v559;
            v374 = (uint64_t **)v559;
            if (*v559)
            {
              v375 = v559;
              v376 = (_QWORD *)*v559;
              do
              {
                v377 = v376[4];
                v378 = v377 >= (unint64_t)v172;
                if (v377 >= (unint64_t)v172)
                  v379 = v376;
                else
                  v379 = v376 + 1;
                if (v378)
                  v375 = v376;
                v376 = (_QWORD *)*v379;
              }
              while (*v379);
              if (v375 != v559 && v375[4] <= (unint64_t)v172)
              {
                v380 = *((_DWORD *)v375 + 10);
                if (v380 <= v371)
                  v380 = v571 + 600000;
                *((_DWORD *)v375 + 10) = v380;
                *((_DWORD *)v375 + 11) = 0;
                goto LABEL_208;
              }
              while (1)
              {
                while (1)
                {
                  v372 = (uint64_t **)v373;
                  v381 = v373[4];
                  if (v381 <= (unint64_t)v172)
                    break;
                  v373 = *v372;
                  v374 = v372;
                  if (!*v372)
                    goto LABEL_812;
                }
                if (v381 >= (unint64_t)v172)
                  break;
                v373 = v372[1];
                if (!v373)
                {
                  v374 = v372 + 1;
                  goto LABEL_812;
                }
              }
            }
            else
            {
LABEL_812:
              v382 = (uint64_t *)v372;
              v372 = (uint64_t **)operator new(0x30uLL);
              v372[4] = (uint64_t *)v172;
              v372[5] = 0;
              *v372 = 0;
              v372[1] = 0;
              v372[2] = v382;
              *v374 = (uint64_t *)v372;
              v383 = **(_QWORD **)(v7 + 536);
              v384 = (uint64_t *)v372;
              if (v383)
              {
                *(_QWORD *)(v7 + 536) = v383;
                v384 = *v374;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 544), v384);
              ++*(_QWORD *)(v7 + 552);
            }
            v372[5] = v371;
            goto LABEL_208;
          }
LABEL_508:
          v172[97] = a3;
          *(_BYTE *)(v7 + 620) = 1;
          if ((v110 & 1) != 0)
            goto LABEL_522;
          v232 = *((_QWORD *)v172 + 41);
          if (v232)
          {
            v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 48))(v232) ^ 1;
            v234 = *((_QWORD *)v172 + 42);
            if (!v234)
              goto LABEL_512;
          }
          else
          {
            v233 = 0;
            v234 = *((_QWORD *)v172 + 42);
            if (!v234)
            {
LABEL_512:
              v235 = *((_QWORD *)v172 + 43);
              if (v235)
                v233 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 48))(v235) ^ 1;
              v236 = *((_QWORD *)v172 + 44);
              if (v236)
                v233 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v236 + 48))(v236) ^ 1;
              v237 = *((_QWORD *)v172 + 45);
              if (v237)
                v233 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v237 + 48))(v237) ^ 1;
              v238 = !v568;
              if (!v233)
                v238 = 1;
              if ((v238 & 1) == 0 && !*(_BYTE *)(v173 + 282))
              {
                altitude::CompleteGlobeTileSetLoader::queueLoadMesh((_QWORD *)v7, (altitude::Tile *)v172, v571 + 200000);
                goto LABEL_208;
              }
LABEL_522:
              v239 = 1;
              DWORD2(v597) = 1;
              *(_QWORD *)&v597 = &off_1E42C42D8;
              v599 = 0;
              v600 = 0;
              v598 = 0;
              v601 = (char *)v172;
              altitude::TileSetNode::collectSubTreeInSet(a2, (uint64_t)v172, (altitude::CoarsenTileSet *)&v597);
              v240 = v601;
              v241 = *((_QWORD *)v601 + 41);
              if (v241)
                v239 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v241 + 96))(v241, &v597);
              v242 = *((_QWORD *)v240 + 42);
              if (v242)
                v239 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v242 + 96))(v242, &v597);
              v243 = *((_QWORD *)v240 + 43);
              if (v243)
                v239 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v243 + 96))(v243, &v597);
              v244 = *((_QWORD *)v240 + 44);
              if (v244)
                v239 &= (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v244 + 96))(v244, &v597);
              v245 = *((_QWORD *)v240 + 45);
              if (v245)
              {
                if (((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v245 + 96))(v245, &v597) & v239 & 1) != 0)
                {
LABEL_532:
                  v246 = v601;
                  v247 = *((_QWORD *)v601 + 41);
                  if (v247)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v247 + 104))(v247, &v597);
                  v248 = *((_QWORD *)v246 + 42);
                  if (v248)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v248 + 104))(v248, &v597);
                  v249 = *((_QWORD *)v246 + 43);
                  if (v249)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v249 + 104))(v249, &v597);
                  v250 = *((_QWORD *)v246 + 44);
                  if (v250)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v250 + 104))(v250, &v597);
                  v251 = *((_QWORD *)v246 + 45);
                  if (v251)
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v251 + 104))(v251, &v597);
                  v252 = v598;
                  v253 = v599;
                  if (v598 == v599)
                  {
                    v254 = (char *)*((_QWORD *)a2 + 9);
                  }
                  else
                  {
                    do
                    {
                      v258 = *(_QWORD *)v252;
                      v260 = *((_QWORD *)a2 + 5);
                      v259 = *((_QWORD *)a2 + 6);
                      if (v259 != v260)
                      {
                        v261 = 0;
                        v262 = 1;
                        do
                        {
                          if (*(_QWORD *)(v260 + 8 * v261) == v258)
                          {
                            *(_QWORD *)(v260 + 8 * v261) = 0;
                            v260 = *((_QWORD *)a2 + 5);
                            v259 = *((_QWORD *)a2 + 6);
                          }
                          v261 = v262++;
                        }
                        while (v261 < (v259 - v260) >> 3);
                      }
                      v263 = (char *)*((_QWORD *)a2 + 8);
                      v254 = (char *)*((_QWORD *)a2 + 9);
                      if (v254 != v263)
                      {
                        v264 = 0;
                        v265 = 1;
                        do
                        {
                          if (*(_QWORD *)&v263[8 * v264] == v258)
                          {
                            *(_QWORD *)&v263[8 * v264] = 0;
                            v263 = (char *)*((_QWORD *)a2 + 8);
                            v254 = (char *)*((_QWORD *)a2 + 9);
                          }
                          v264 = v265++;
                        }
                        while (v264 < (v254 - v263) >> 3);
                      }
                      v252 = (altitude::Tile *)((char *)v252 + 8);
                    }
                    while (v252 != v253);
                  }
                  v255 = v601;
                  v256 = *((_QWORD *)a2 + 10);
                  if ((unint64_t)v254 < v256)
                  {
                    *(_QWORD *)v254 = v601;
                    v257 = v254 + 8;
LABEL_841:
                    *((_QWORD *)a2 + 9) = v257;
                    v266 = 1;
LABEL_842:
                    *(_QWORD *)&v597 = &off_1E42C42D8;
                    if (v598)
                    {
                      v599 = v598;
                      operator delete(v598);
                    }
                    if ((v266 & 1) == 0)
                      goto LABEL_208;
                    goto LABEL_845;
                  }
                  v267 = (char *)*((_QWORD *)a2 + 8);
                  v268 = (v254 - v267) >> 3;
                  v269 = v268 + 1;
                  if ((unint64_t)(v268 + 1) >> 61)
                    goto LABEL_1181;
                  v270 = v256 - (_QWORD)v267;
                  if (v270 >> 2 > v269)
                    v269 = v270 >> 2;
                  if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF8)
                    v271 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v271 = v269;
                  if (!v271)
                  {
                    v272 = 0;
LABEL_765:
                    v356 = (char **)&v272[8 * v268];
                    *v356 = v255;
                    v257 = v356 + 1;
                    if (v254 == v267)
                    {
                      v267 = v254;
                    }
                    else
                    {
                      v357 = v254 - v267 - 8;
                      if (v357 < 0x58)
                      {
                        v358 = v254;
                        goto LABEL_836;
                      }
                      if ((unint64_t)(v267 - v272) < 0x20)
                      {
                        v358 = v254;
                        goto LABEL_836;
                      }
                      v390 = (v357 >> 3) + 1;
                      v358 = &v254[-8 * (v390 & 0x3FFFFFFFFFFFFFFCLL)];
                      v391 = &v272[8 * v268 - 16];
                      v392 = v254 - 16;
                      v393 = v390 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v394 = *(_OWORD *)v392;
                        *(v391 - 1) = *((_OWORD *)v392 - 1);
                        *v391 = v394;
                        v391 -= 2;
                        v392 -= 32;
                        v393 -= 4;
                      }
                      while (v393);
                      v356 -= v390 & 0x3FFFFFFFFFFFFFFCLL;
                      if (v390 != (v390 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_836:
                          v395 = (char *)*((_QWORD *)v358 - 1);
                          v358 -= 8;
                          *--v356 = v395;
                        }
                        while (v358 != v267);
                        v267 = (char *)*((_QWORD *)a2 + 8);
                      }
                    }
                    *((_QWORD *)a2 + 8) = v356;
                    *((_QWORD *)a2 + 9) = v257;
                    *((_QWORD *)a2 + 10) = &v272[8 * v271];
                    if (v267)
                      operator delete(v267);
                    v7 = (size_t)v575;
                    goto LABEL_841;
                  }
                  if (!(v271 >> 61))
                  {
                    v272 = operator new(8 * v271);
                    goto LABEL_765;
                  }
LABEL_1182:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
              }
              else if (v239)
              {
                goto LABEL_532;
              }
              v266 = 0;
              goto LABEL_842;
            }
          }
          v233 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v234 + 48))(v234) ^ 1;
          goto LABEL_512;
        }
      }
      v216 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 48))(v217) ^ 1;
      goto LABEL_474;
    }
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = 0xFFFFFFFFLL;
    do
    {
      v182 = (uint64_t *)(a4[5] + v178 * 8);
      ++v178;
      if (v177 <= 4)
        v183 = (uint64_t *)&a4[v178];
      else
        v183 = v182;
      v184 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v183, (double *)&v597)
                                 * 100000.0);
      if (v184 <= 1)
        v184 = 1;
      if (v184 > v180)
      {
        v181 = v179;
        v180 = v184;
      }
      ++v179;
      v177 = *a4;
    }
    while (v179 < *a4);
    if (v181 == 0xFFFFFFFFLL)
    {
      v571 = 0;
    }
    else
    {
      if (v177 <= 4)
        v231 = (uint64_t)&a4[v181 + 1];
      else
        v231 = a4[5] + 8 * v181;
      v571 = *(_DWORD *)(*(_QWORD *)v231 + 1300) + v180;
    }
    v7 = (size_t)v575;
    if (!v564)
      goto LABEL_471;
LABEL_506:
    if (*(_QWORD *)(v173 + 136) || v172[101])
      goto LABEL_508;
    v347 = v571 + 700000;
    *(_QWORD *)&v597 = v172;
    v348 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v563, (unint64_t)v172);
    if (v348)
    {
      v349 = *((_DWORD *)v348 + 6);
      if (v349 <= v347)
        v349 = v571 + 700000;
      *((_DWORD *)v348 + 6) = v349;
    }
    else
    {
      *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v563, (unint64_t)v172, &v597)+ 6) = v347;
    }
LABEL_208:
    v102 = v577;
    v103 = (double *)(*(uint64_t (**)(altitude::Tile *))(*(_QWORD *)v577 + 24))(v577);
    if (!v581)
    {
LABEL_416:
      v185 = 0;
      v186 = *((_QWORD *)v577 + 41);
      if (!v186)
        goto LABEL_425;
LABEL_417:
      if (!*(_BYTE *)(v7 + 613))
        goto LABEL_428;
      goto LABEL_662;
    }
    if (v581 >= 5)
    {
      v104 = 0;
      v105 = (float *)((char *)__p + 4);
      v106 = 0xFFFFFFFFLL;
      v107 = -1;
      do
      {
        if ((*(_BYTE *)v105 & 1) == 0)
        {
          v108 = *(v105 - 1);
          if (v108 < (float)v107)
          {
            v107 = v108;
            v106 = v104;
          }
        }
        ++v104;
        v105 += 4;
      }
      while (v581 != v104);
      goto LABEL_415;
    }
    if ((v583[0] & 1) != 0)
    {
      v109 = -1;
      v106 = 0xFFFFFFFFLL;
      if (v581 == 1)
        goto LABEL_415;
      goto LABEL_404;
    }
    if (v582 >= 4295000000.0)
      v109 = -1;
    else
      v109 = v582;
    v106 = 0xFFFFFFFFLL;
    if (v582 < 4295000000.0)
      v106 = 0;
    if (v581 != 1)
    {
LABEL_404:
      if ((v586 & 1) == 0 && v585 < (float)v109)
      {
        v109 = v585;
        v106 = 1;
      }
      if (v581 == 2)
        goto LABEL_415;
      if ((v589 & 1) == 0 && v588 < (float)v109)
      {
        v109 = v588;
        v106 = 2;
      }
      if (v581 == 3 || (v592 & 1) != 0 || v591 >= (float)v109)
        goto LABEL_415;
      v106 = 3;
      goto LABEL_419;
    }
LABEL_415:
    if (v106 == 0xFFFFFFFFLL)
      goto LABEL_416;
LABEL_419:
    v187 = 16 * v106;
    v188 = (uint64_t *)((char *)__p + v187 + 8);
    v189 = (uint64_t *)((char *)&v584 + v187);
    if (v581 <= 4)
      v190 = v189;
    else
      v190 = v188;
    v191 = *v190;
    v192 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v190, v103) * 100000.0);
    if (v192 <= 1)
      v192 = 1;
    v185 = v192 + *(_DWORD *)(v191 + 1300);
    v186 = *((_QWORD *)v577 + 41);
    if (v186)
      goto LABEL_417;
LABEL_425:
    v193 = operator new();
    *(_DWORD *)(v193 + 8) = 0;
    *(_QWORD *)(v193 + 40) = 0;
    *(_QWORD *)(v193 + 32) = 0;
    *(_QWORD *)(v193 + 16) = 0;
    *(_QWORD *)(v193 + 24) = v193 + 32;
    *(_OWORD *)(v193 + 48) = 0u;
    *(_OWORD *)(v193 + 64) = 0u;
    *(_OWORD *)(v193 + 80) = 0u;
    v194 = (void **)(v193 + 80);
    *(_QWORD *)v193 = &off_1E42C5580;
    *(_QWORD *)(v193 + 208) = 0;
    *(_QWORD *)(v193 + 216) = 0;
    *(_OWORD *)(v193 + 96) = 0u;
    *(_OWORD *)(v193 + 112) = 0u;
    *(_OWORD *)(v193 + 128) = 0u;
    *(_OWORD *)(v193 + 144) = 0u;
    *(_OWORD *)(v193 + 160) = 0u;
    *(_OWORD *)(v193 + 176) = 0u;
    *(_OWORD *)(v193 + 185) = 0u;
    *(_DWORD *)(v193 + 224) = -1;
    *(_QWORD *)(v193 + 232) = 0;
    *(_OWORD *)(v193 + 248) = 0u;
    *(_OWORD *)(v193 + 264) = 0u;
    *(_DWORD *)(v193 + 279) = 0;
    *(_QWORD *)(v193 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v193 + 296) = 0;
    *(_WORD *)(v193 + 300) = 0;
    altitude::Tile::createTileName(&v597, (unsigned int *)v577 + 98, (uint64_t *)(*((_QWORD *)v577 + 36) + 40), (uint64_t *)(*((_QWORD *)v577 + 36) + 136));
    if (*(char *)(v193 + 103) < 0)
      operator delete(*v194);
    *(_OWORD *)v194 = v597;
    *(_QWORD *)(v193 + 96) = v598;
    *((_QWORD *)v577 + 41) = v193;
    (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v193 + 16))(v193, v577);
    v186 = *((_QWORD *)v577 + 41);
    if (*(_BYTE *)(v7 + 613))
      goto LABEL_662;
LABEL_428:
    v195 = *((unsigned __int8 *)v577 + 432);
    if (*((_BYTE *)v577 + 432))
    {
      if (v574)
        goto LABEL_430;
      goto LABEL_438;
    }
    altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v7, v577, v185 + 800000);
    if (!*(_BYTE *)(v7 + 613))
    {
      v195 = *((unsigned __int8 *)v577 + 432);
      if (!v574)
        goto LABEL_438;
LABEL_430:
      if (v195)
      {
        if (!*(_QWORD *)(v186 + 136))
        {
          v196 = v185 + 700000;
          *(_QWORD *)&v597 = v577;
          v197 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v563, (unint64_t)v577);
          if (v197)
          {
            v198 = *((_DWORD *)v197 + 6);
            if (v198 <= v196)
              v198 = v185 + 700000;
            *((_DWORD *)v197 + 6) = v198;
          }
          else
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v563, (unint64_t)v577, &v597)+ 6) = v196;
          }
          goto LABEL_661;
        }
        goto LABEL_662;
      }
LABEL_438:
      if (v574 || !*((_BYTE *)v577 + 432))
        goto LABEL_662;
      v199 = *((_QWORD *)v577 + 41);
      if (v199)
      {
        v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v199 + 48))(v199) ^ 1;
        v201 = *((_QWORD *)v577 + 42);
        if (v201)
          goto LABEL_442;
      }
      else
      {
        v200 = 0;
        v201 = *((_QWORD *)v577 + 42);
        if (v201)
LABEL_442:
          v200 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 48))(v201) ^ 1;
      }
      v202 = *((_QWORD *)v577 + 43);
      if (v202)
        v200 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 48))(v202) ^ 1;
      v203 = *((_QWORD *)v577 + 44);
      if (v203)
        v200 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 48))(v203) ^ 1;
      v204 = *((_QWORD *)v577 + 45);
      if (v204)
        v200 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 48))(v204) ^ 1;
      if (!v200)
        goto LABEL_662;
      v205 = *((_QWORD *)v577 + 41);
      if (v205)
      {
        v206 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v205 + 64))(v205);
        v207 = *((_QWORD *)v577 + 42);
        if (v207)
        {
LABEL_452:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v207 + 64))(v207))
            v206 = 1;
        }
      }
      else
      {
        v206 = 0;
        v207 = *((_QWORD *)v577 + 42);
        if (v207)
          goto LABEL_452;
      }
      v208 = *((_QWORD *)v577 + 43);
      if (v208 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v208 + 64))(v208))
        v206 = 1;
      v209 = *((_QWORD *)v577 + 44);
      if (v209 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v209 + 64))(v209))
        v206 = 1;
      v210 = *((_QWORD *)v577 + 45);
      if ((!v210 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 64))(v210) & 1) == 0) && !v206)
        goto LABEL_662;
      v211 = v577;
      do
      {
        v211 = (altitude::Tile *)*((_QWORD *)v211 + 37);
        if (!v211)
          goto LABEL_662;
        v212 = *((_QWORD *)v211 + 41);
        if (!v212)
        {
          v213 = operator new();
          *(_DWORD *)(v213 + 8) = 0;
          *(_QWORD *)(v213 + 40) = 0;
          *(_QWORD *)(v213 + 32) = 0;
          *(_QWORD *)(v213 + 16) = 0;
          *(_QWORD *)(v213 + 24) = v213 + 32;
          *(_OWORD *)(v213 + 48) = 0u;
          *(_OWORD *)(v213 + 64) = 0u;
          *(_OWORD *)(v213 + 80) = 0u;
          v214 = (void **)(v213 + 80);
          *(_QWORD *)v213 = &off_1E42C5580;
          *(_QWORD *)(v213 + 208) = 0;
          *(_QWORD *)(v213 + 216) = 0;
          *(_OWORD *)(v213 + 96) = 0u;
          *(_OWORD *)(v213 + 112) = 0u;
          *(_OWORD *)(v213 + 128) = 0u;
          *(_OWORD *)(v213 + 144) = 0u;
          *(_OWORD *)(v213 + 160) = 0u;
          *(_OWORD *)(v213 + 176) = 0u;
          *(_OWORD *)(v213 + 185) = 0u;
          *(_DWORD *)(v213 + 224) = -1;
          *(_QWORD *)(v213 + 232) = 0;
          *(_OWORD *)(v213 + 248) = 0u;
          *(_OWORD *)(v213 + 264) = 0u;
          *(_DWORD *)(v213 + 279) = 0;
          *(_QWORD *)(v213 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v213 + 296) = 0;
          *(_WORD *)(v213 + 300) = 0;
          altitude::Tile::createTileName(&v597, (unsigned int *)v211 + 98, (uint64_t *)(*((_QWORD *)v211 + 36) + 40), (uint64_t *)(*((_QWORD *)v211 + 36) + 136));
          if (*(char *)(v213 + 103) < 0)
            operator delete(*v214);
          *(_OWORD *)v214 = v597;
          *(_QWORD *)(v213 + 96) = v598;
          *((_QWORD *)v211 + 41) = v213;
          (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v213 + 16))(v213, v211);
          v212 = *((_QWORD *)v211 + 41);
          v102 = v577;
        }
      }
      while (!*(_QWORD *)(v212 + 120));
      v310 = (uint64_t *)(v185 + 600000);
      v311 = (uint64_t **)v559;
      v312 = (uint64_t *)*v559;
      v313 = (uint64_t **)v559;
      if (*v559)
      {
        v314 = v559;
        v315 = (_QWORD *)*v559;
        do
        {
          v316 = v315[4];
          v317 = v316 >= (unint64_t)v102;
          if (v316 >= (unint64_t)v102)
            v318 = v315;
          else
            v318 = v315 + 1;
          if (v317)
            v314 = v315;
          v315 = (_QWORD *)*v318;
        }
        while (*v318);
        if (v314 != v559 && v314[4] <= (unint64_t)v102)
        {
          v319 = *((_DWORD *)v314 + 10);
          if (v319 <= v310)
            v319 = v185 + 600000;
          *((_DWORD *)v314 + 10) = v319;
          *((_DWORD *)v314 + 11) = 0;
LABEL_661:
          *((_DWORD *)v102 + 97) = a3;
          goto LABEL_662;
        }
        while (1)
        {
          while (1)
          {
            v311 = (uint64_t **)v312;
            v320 = v312[4];
            if (v320 <= (unint64_t)v102)
              break;
            v312 = *v311;
            v313 = v311;
            if (!*v311)
              goto LABEL_657;
          }
          if (v320 >= (unint64_t)v102)
            break;
          v312 = v311[1];
          if (!v312)
          {
            v313 = v311 + 1;
            goto LABEL_657;
          }
        }
      }
      else
      {
LABEL_657:
        v321 = (uint64_t *)v311;
        v311 = (uint64_t **)operator new(0x30uLL);
        v311[4] = (uint64_t *)v102;
        v311[5] = 0;
        *v311 = 0;
        v311[1] = 0;
        v311[2] = v321;
        *v313 = (uint64_t *)v311;
        v322 = **(_QWORD **)(v7 + 536);
        v323 = (uint64_t *)v311;
        if (v322)
        {
          *(_QWORD *)(v7 + 536) = v322;
          v323 = *v313;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 544), v323);
        ++*(_QWORD *)(v7 + 552);
      }
      v311[5] = v310;
      goto LABEL_661;
    }
LABEL_662:
    if (!v581)
      goto LABEL_845;
    if (v581 < 5)
    {
      if (*(_DWORD *)(v584 + 1296))
        v327 = v583[0] == 0;
      else
        v327 = 0;
      if (v327)
        goto LABEL_681;
      if (v581 != 1)
      {
        v328 = *(_DWORD *)(v587 + 1296) && v586 == 0;
        if (v328 || v581 != 2 && (*(_DWORD *)(v590 + 1296) && !v589 || v581 != 3 && *(_DWORD *)(v593 + 1296) && !v592))
          goto LABEL_681;
      }
      goto LABEL_845;
    }
    v324 = 0;
    v325 = 1;
    while (1)
    {
      v326 = (char *)__p + 16 * v324;
      if (*(_DWORD *)(*((_QWORD *)v326 + 1) + 1296))
      {
        if (!v326[4])
          break;
      }
      v324 = v325++;
      if (v581 <= v324)
        goto LABEL_845;
    }
LABEL_681:
    if (!*((_BYTE *)v577 + 432))
    {
      altitude::CompleteGlobeTileSetLoader::loadTileMetaData((altitude::CompleteGlobeTileSetLoader *)v7, v577, v185 + 800000);
      goto LABEL_845;
    }
    v329 = *((_QWORD *)v577 + 41);
    if (v329)
    {
      v330 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v329 + 48))(v329) ^ 1;
      v331 = *((_QWORD *)v577 + 42);
      if (v331)
        goto LABEL_684;
    }
    else
    {
      v330 = 0;
      v331 = *((_QWORD *)v577 + 42);
      if (v331)
LABEL_684:
        v330 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 48))(v331) ^ 1;
    }
    v332 = *((_QWORD *)v577 + 43);
    if (v332)
      v330 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v332 + 48))(v332) ^ 1;
    v333 = *((_QWORD *)v577 + 44);
    if (v333)
      v330 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v333 + 48))(v333) ^ 1;
    v334 = *((_QWORD *)v577 + 45);
    if (v334)
      v330 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v334 + 48))(v334) ^ 1;
    if (v330)
    {
      altitude::CompleteGlobeTileSetLoader::queueLoadMesh((_QWORD *)v7, v577, v185 + 100000);
      *((_DWORD *)v577 + 97) = a3;
      goto LABEL_845;
    }
    if (!*(_BYTE *)(v7 + 613)
      && !*(_BYTE *)(v186 + 297)
      && *(_DWORD *)(*((_QWORD *)v577 + 36) + 176) <= *((_DWORD *)v577 + 98)
      && *(_BYTE *)(*(_QWORD *)(v7 + 32) + 67))
    {
      if (!v581)
        goto LABEL_733;
      v335 = 0;
      v336 = (char *)__p + 8;
      v337 = &v584;
      while (1)
      {
        if (v581 <= 4)
          v345 = v337;
        else
          v345 = (uint64_t *)v336;
        if (*(_BYTE *)(*v345 + 1290))
        {
          if (v581 < 5)
          {
            if (*(_DWORD *)(*v337 + 1296) == 2)
            {
              v421 = &v581 + 2 * v335;
              if (!*((_BYTE *)v421 + 12))
              {
                v346 = (float *)(v421 + 1);
                goto LABEL_900;
              }
              goto LABEL_904;
            }
          }
          else if (*(_DWORD *)(*(_QWORD *)v336 + 1296) == 2)
          {
            v346 = (float *)((char *)__p + 16 * v335);
            if (!*((_BYTE *)v346 + 4))
            {
LABEL_900:
              if (*v346 < 1.0)
              {
                if (!*(_BYTE *)(v186 + 200))
                {
                  if (*(_QWORD *)(v186 + 152) == *(_QWORD *)(v186 + 160))
                  {
                    *(_QWORD *)&v597 = 0;
                    v602 = 0;
                    v603 = 0;
                    v601 = 0;
                    karo::SizedArray<altitude::View *,4>::push_back((uint64_t *)&v597, v345);
                    v551 = altitude::CompleteGlobeTileSetLoader::computePriorityFromPosition((unint64_t *)&v597, (uint64_t)v577);
                    altitude::CompleteGlobeTileSetLoader::queueLoadHiresTexture(v7, (unint64_t)v577, v551 & ~(v551 >> 31));
                    *((_DWORD *)v577 + 97) = a3;
                    if (v601)
                    {
                      v602 = v601;
                      operator delete(v601);
                    }
                  }
                  else
                  {
                    altitude::GlobeTileComponent::applyHiresTextures((altitude::GlobeTileComponent *)v186);
                  }
                }
                goto LABEL_733;
              }
            }
LABEL_904:
            altitude::GlobeTileComponent::resetTextures((altitude::GlobeTileComponent *)v186);
            goto LABEL_733;
          }
        }
        ++v335;
        v337 += 2;
        v336 += 16;
        if (v581 == v335)
          goto LABEL_733;
      }
    }
    v338 = *(_QWORD *)(v186 + 120);
    if (v338)
    {
      if (*(_QWORD *)(v186 + 152) != *(_QWORD *)(v186 + 160))
      {
        v339 = *(_QWORD *)(v186 + 176);
        if (v339 != *(_QWORD *)(v186 + 184))
        {
          v340 = *(_QWORD *)(v338 + 48);
          v341 = *(_QWORD *)(v338 + 56);
          if (v340 != v341)
          {
            do
            {
              v342 = *(int *)(*(_QWORD *)v340 + 176);
              if ((_DWORD)v342 != -1)
              {
                altitude::RenderableGroup::dropOwnership(*(_QWORD *)(v186 + 120), *(_QWORD *)(*(_QWORD *)(v186 + 152) + 16 * v342));
                v343 = *(_DWORD *)(*(_QWORD *)v340 + 160);
                if (v343 == 7 || v343 == 1)
                  **(_QWORD **)(*(_QWORD *)v340 + 256) = *(_QWORD *)(*(_QWORD *)(v186 + 176) + 8 * v342);
              }
              v340 += 8;
            }
            while (v340 != v341);
            v339 = *(_QWORD *)(v186 + 176);
          }
          *(_QWORD *)(v186 + 184) = v339;
        }
      }
    }
LABEL_733:
    v350 = *((_QWORD *)v577 + 42);
    if (!*(_BYTE *)(*(_QWORD *)(v7 + 184) + 136))
    {
      if (v350)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v350 + 8))(*((_QWORD *)v577 + 42));
        *((_QWORD *)v577 + 42) = 0;
        *(_BYTE *)(v7 + 620) = 1;
      }
      v355 = *((_QWORD *)v577 + 43);
      if (!v355)
        goto LABEL_785;
      (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
LABEL_783:
      *((_QWORD *)v577 + 43) = 0;
      goto LABEL_784;
    }
    if (!v350)
    {
      v351 = operator new();
      *(_DWORD *)(v351 + 8) = 1;
      *(_QWORD *)(v351 + 40) = 0;
      *(_QWORD *)(v351 + 32) = 0;
      *(_QWORD *)(v351 + 16) = 0;
      *(_QWORD *)(v351 + 24) = v351 + 32;
      *(_OWORD *)(v351 + 48) = 0u;
      *(_OWORD *)(v351 + 64) = 0u;
      *(_QWORD *)v351 = &off_1E42C50F0;
      *(_DWORD *)(v351 + 80) = 2;
      *(_OWORD *)(v351 + 88) = 0u;
      *(_OWORD *)(v351 + 104) = 0u;
      *(_WORD *)(v351 + 120) = 257;
      *(_BYTE *)(v351 + 122) = 1;
      *(_DWORD *)(v351 + 124) = -1082130432;
      *((_QWORD *)v577 + 42) = v351;
      altitude::TileComponent::onAttach(v351, (uint64_t)v577);
      v350 = *((_QWORD *)v577 + 42);
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v350 + 48))(v350) & 1) == 0)
    {
      v352 = v185 + 100000;
      *(_QWORD *)&v597 = v577;
      v353 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v562, (unint64_t)v577);
      if (v353)
      {
        v354 = *((_DWORD *)v353 + 6);
        if (v354 <= v352)
          v354 = v185 + 100000;
        *((_DWORD *)v353 + 6) = v354;
      }
      else
      {
        *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v562, (unint64_t)v577, &v597)+ 6) = v352;
      }
      *(_BYTE *)(v7 + 620) = 1;
    }
    v359 = *((_QWORD *)v577 + 43);
    if (!*(_BYTE *)(*(_QWORD *)(v7 + 200) + 92))
    {
      if (!v359)
        goto LABEL_785;
      (*(void (**)(_QWORD))(*(_QWORD *)v359 + 8))(*((_QWORD *)v577 + 43));
      goto LABEL_783;
    }
    if (!v359)
    {
      v360 = operator new();
      *(_DWORD *)(v360 + 8) = 2;
      *(_QWORD *)(v360 + 40) = 0;
      *(_QWORD *)(v360 + 32) = 0;
      *(_QWORD *)(v360 + 16) = 0;
      *(_QWORD *)(v360 + 24) = v360 + 32;
      *(_OWORD *)(v360 + 48) = 0u;
      *(_OWORD *)(v360 + 64) = 0u;
      *(_QWORD *)v360 = &off_1E42C59E0;
      *(_WORD *)(v360 + 80) = 257;
      *(_QWORD *)(v360 + 88) = 0;
      *(_QWORD *)(v360 + 96) = 0;
      *((_QWORD *)v577 + 43) = v360;
      altitude::TileComponent::onAttach(v360, (uint64_t)v577);
      v359 = *((_QWORD *)v577 + 43);
    }
    if ((!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v359 + 48))(v359)
       || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v359 + 136))(v359, *(unsigned int *)(*(_QWORD *)(v7 + 200) + 160)))&& (*(unsigned int (**)(uint64_t))(*(_QWORD *)v350 + 48))(v350))
    {
      v361 = v185 + 100000;
      *(_QWORD *)&v597 = v577;
      v362 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v560, (unint64_t)v577);
      if (v362)
      {
        v363 = *((_DWORD *)v362 + 6);
        if (v363 <= v361)
          v363 = v185 + 100000;
        *((_DWORD *)v362 + 6) = v363;
      }
      else
      {
        *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v560, (unint64_t)v577, &v597)+ 6) = v361;
      }
LABEL_784:
      *(_BYTE *)(v7 + 620) = 1;
    }
LABEL_785:
    v364 = (_BYTE *)*((_QWORD *)v577 + 44);
    if (!v364)
    {
      v365 = operator new();
      *(_DWORD *)(v365 + 8) = 3;
      *(_QWORD *)(v365 + 40) = 0;
      *(_QWORD *)(v365 + 32) = 0;
      *(_QWORD *)(v365 + 16) = 0;
      *(_QWORD *)(v365 + 24) = v365 + 32;
      *(_OWORD *)(v365 + 48) = 0u;
      *(_OWORD *)(v365 + 64) = 0u;
      *(_QWORD *)v365 = &off_1E42C5FC8;
      *(_WORD *)(v365 + 80) = 257;
      *(_BYTE *)(v365 + 82) = 0;
      *(_OWORD *)(v365 + 88) = 0u;
      *(_OWORD *)(v365 + 104) = 0u;
      *((_QWORD *)v577 + 44) = v365;
      altitude::TileComponent::onAttach(v365, (uint64_t)v577);
      v364 = (_BYTE *)*((_QWORD *)v577 + 44);
    }
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 208) + 136) != 0) != (v364[82] != 0))
    {
      (*(void (**)(_BYTE *))(*(_QWORD *)v364 + 8))(v364);
      *((_QWORD *)v577 + 44) = 0;
      v366 = operator new();
      *(_DWORD *)(v366 + 8) = 3;
      *(_QWORD *)(v366 + 40) = 0;
      *(_QWORD *)(v366 + 32) = 0;
      *(_QWORD *)(v366 + 16) = 0;
      *(_QWORD *)(v366 + 24) = v366 + 32;
      *(_OWORD *)(v366 + 48) = 0u;
      *(_OWORD *)(v366 + 64) = 0u;
      *(_QWORD *)v366 = &off_1E42C5FC8;
      *(_WORD *)(v366 + 80) = 257;
      *(_BYTE *)(v366 + 82) = 0;
      *(_OWORD *)(v366 + 88) = 0u;
      *(_OWORD *)(v366 + 104) = 0u;
      *((_QWORD *)v577 + 44) = v366;
      altitude::TileComponent::onAttach(v366, (uint64_t)v577);
      v367 = *((_QWORD *)v577 + 44);
      *(_BYTE *)(v7 + 620) = 1;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v367 + 48))(v367) & 1) == 0)
      {
        v368 = v185 + 100000;
        *(_QWORD *)&v597 = v577;
        v369 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v561, (unint64_t)v577);
        if (v369)
        {
          v370 = *((_DWORD *)v369 + 6);
          if (v370 <= v368)
            v370 = v185 + 100000;
          *((_DWORD *)v369 + 6) = v370;
        }
        else
        {
          *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v561, (unint64_t)v577, &v597)+ 6) = v368;
        }
      }
    }
    v385 = *((_QWORD *)v577 + 45);
    if (*(_BYTE *)(*(_QWORD *)(v7 + 216) + 104))
    {
      if (!v385)
      {
        v386 = operator new();
        *(_DWORD *)(v386 + 8) = 4;
        *(_QWORD *)(v386 + 40) = 0;
        *(_QWORD *)(v386 + 32) = 0;
        *(_QWORD *)(v386 + 16) = 0;
        *(_QWORD *)(v386 + 24) = v386 + 32;
        *(_OWORD *)(v386 + 48) = 0u;
        *(_OWORD *)(v386 + 64) = 0u;
        *(_QWORD *)v386 = &off_1E42C5950;
        *(_BYTE *)(v386 + 80) = 1;
        *(_OWORD *)(v386 + 84) = 0u;
        *(_OWORD *)(v386 + 100) = 0u;
        *(_OWORD *)(v386 + 116) = 0u;
        *(_OWORD *)(v386 + 132) = 0u;
        *(_OWORD *)(v386 + 148) = 0u;
        *(_QWORD *)(v386 + 162) = 0;
        *((_QWORD *)v577 + 45) = v386;
        altitude::TileComponent::onAttach(v386, (uint64_t)v577);
      }
      if (md::realistic::OverlayRenderLayer::tileNeedsRefresh(*(md::realistic::OverlayRenderLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 40) + 48), v577))
      {
        v387 = v185 + 100000;
        *(_QWORD *)&v597 = v577;
        v388 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v558, (unint64_t)v577);
        if (v388)
        {
          v389 = *((_DWORD *)v388 + 6);
          if (v389 <= v387)
            v389 = v185 + 100000;
          *((_DWORD *)v388 + 6) = v389;
        }
        else
        {
          *((_DWORD *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v558, (unint64_t)v577, &v597)+ 6) = v387;
        }
LABEL_830:
        *(_BYTE *)(v7 + 620) = 1;
      }
    }
    else if (v385)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
      *((_QWORD *)v577 + 45) = 0;
      goto LABEL_830;
    }
LABEL_845:
    if (__p)
    {
      v595 = __p;
      operator delete(__p);
    }
    v34 = (altitude::Tile **)*((_QWORD *)a2 + 6);
    v35 = v576;
LABEL_46:
    if (++v35 != v34)
      continue;
    break;
  }
LABEL_1180:
  altitude::CompleteGlobeTileSetLoader::processQueues(v7);
  altitude::TileSetNode::swap(a2);
}

void altitude::CompleteGlobeTileSetLoader::loadMesh(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  int Status;
  __n128 v17;
  unint64_t v18;
  __n128 *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  const altitude::View *v30;
  unsigned int v31;
  char *TileView;
  int v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  double v37;
  double Current;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 *v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  NSObject *v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  NSObject *v85;
  int v86;
  int v87;
  int v88;
  __int16 v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  md::realistic::OverlayRenderLayer *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  __int16 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void (**v118)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint8_t v121[8];
  std::__shared_weak_count *v122;
  int v123;
  uint8_t v124[16];
  uint64_t v125;
  std::string __p;
  char v127;
  uint8_t v128[8];
  _QWORD *v129;
  uint64_t v130;
  uint8_t buf[8];
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v6 = (_BYTE *)*((_QWORD *)a2 + 41);
  if (v6)
  {
    if (v6[282])
      return;
LABEL_7:
    *((_DWORD *)a2 + 97) = *(_DWORD *)(*((_QWORD *)this + 4) + 88);
    *((_BYTE *)this + 620) = 1;
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 48))(v6) & 1) != 0)
      goto LABEL_146;
    v10 = v6[296];
    v11 = *((_QWORD *)a2 + 41);
    if (v10)
    {
      if (!v11)
      {
        v12 = operator new();
        *(_DWORD *)(v12 + 8) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = v12 + 32;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_QWORD *)v12 = &off_1E42C5580;
        *(_OWORD *)(v12 + 80) = 0u;
        v13 = (void **)(v12 + 80);
        *(_QWORD *)(v12 + 208) = 0;
        *(_QWORD *)(v12 + 216) = 0;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 185) = 0u;
        *(_QWORD *)(v12 + 232) = 0;
        *(_DWORD *)(v12 + 224) = -1;
        *(_OWORD *)(v12 + 248) = 0u;
        *(_OWORD *)(v12 + 264) = 0u;
        *(_DWORD *)(v12 + 279) = 0;
        *(_QWORD *)(v12 + 288) = 0x3FF0000000000000;
        *(_DWORD *)(v12 + 296) = 0;
        v14 = *((_QWORD *)a2 + 36);
        *(_WORD *)(v12 + 300) = 0;
        altitude::Tile::createTileName(v124, (unsigned int *)a2 + 98, (uint64_t *)(v14 + 40), (uint64_t *)(v14 + 136));
        if (*(char *)(v12 + 103) < 0)
          operator delete(*v13);
        *(_OWORD *)v13 = *(_OWORD *)v124;
        *(_QWORD *)(v12 + 96) = v125;
        *((_QWORD *)a2 + 41) = v12;
        (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v12 + 16))(v12, a2);
        v11 = *((_QWORD *)a2 + 41);
      }
      v15 = *((_QWORD *)a2 + 36);
      *(_OWORD *)v124 = *(_OWORD *)((char *)a2 + 392);
      v125 = v15;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      __p.__r_.__value_.__s.__data_[2] = 0;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = 0;
      (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, uint8_t *, _QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 19) + 104))(&v118, *((_QWORD *)this + 19), v124, 0, a3, 1, 0);
      Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v118);
      if (!Status)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v36 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = *(_DWORD *)&v124[4];
          LOWORD(v132) = 1024;
          *(_DWORD *)((char *)&v132 + 2) = *(_DWORD *)&v124[8];
          HIWORD(v132) = 1024;
          LODWORD(v133) = *(_DWORD *)v124;
          _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "Failed to load height map for tile  %u %u %u", buf, 0x14u);
        }
        *(_BYTE *)(v11 + 282) = 1;
        *(_BYTE *)(v11 + 280) = 1;
        v37 = *(double *)(v11 + 288) + *(double *)(v11 + 288);
        *(double *)(v11 + 288) = v37;
        Current = CFAbsoluteTimeGetCurrent();
        v39 = *((_QWORD *)this + 127);
        std::mutex::lock((std::mutex *)(v39 + 16));
        if (*(_BYTE *)(v39 + 96))
        {
          v40 = *(double *)(v39 + 88);
          std::mutex::unlock((std::mutex *)(v39 + 16));
          v17.n128_f64[0] = Current + v37;
          if (Current + v37 >= v40)
            goto LABEL_102;
        }
        else
        {
          std::mutex::unlock((std::mutex *)(v39 + 16));
        }
        (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v37);
        goto LABEL_102;
      }
      if (Status != 4)
        goto LABEL_102;
      *(_QWORD *)v121 = 0;
      v122 = 0;
      v116 = 0;
      v117 = 0;
      v132 = 0;
      v133 = 0;
      *(_QWORD *)buf = &v132;
      v113 = 0;
      v114 = 0;
      if (altitude::HeightRequestManager::getResult(*((_QWORD *)this + 19), (uint64_t)v124, (uint64_t)v121, (uint64_t)&v116, (uint64_t)buf, (uint64_t)&v113)&& *(_QWORD *)v121)
      {
        v18 = *(_QWORD *)(v11 + 120);
        if (v18)
        {
          v19 = (__n128 *)*((_QWORD *)this + 83);
          if ((unint64_t)v19 >= *((_QWORD *)this + 84))
          {
            v23 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v11 + 120));
          }
          else
          {
            v19->n128_u64[0] = v18;
            v20 = *(_QWORD *)(v11 + 128);
            v19->n128_u64[1] = v20;
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            v23 = v19 + 1;
          }
          *((_QWORD *)this + 83) = v23;
        }
        altitude::GlobeTileComponent::setGeometryElement((altitude::GlobeTileComponent *)v11, (uint64_t *)v121);
        v65 = v113;
        v64 = v114;
        if (v114)
        {
          p_shared_owners = (unint64_t *)&v114->__shared_owners_;
          do
            v67 = __ldxr(p_shared_owners);
          while (__stxr(v67 + 1, p_shared_owners));
        }
        v68 = *(std::__shared_weak_count **)(v11 + 112);
        *(_QWORD *)(v11 + 104) = v65;
        *(_QWORD *)(v11 + 112) = v64;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        if ((uint8_t *)(v11 + 24) != buf)
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v11 + 24), *(_QWORD **)buf, &v132);
LABEL_87:
        v71 = v114;
        if (v114)
        {
          v72 = (unint64_t *)&v114->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v132);
        v74 = v117;
        if (v117)
        {
          v75 = (unint64_t *)&v117->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v122;
        if (v122)
        {
          v78 = (unint64_t *)&v122->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
LABEL_102:
        v118 = &off_1E42C2D08;
        if (v119)
        {
          v80 = (unsigned int *)(v119 + 128);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
        }
        v82 = v120;
        if (v120)
        {
          v83 = (unint64_t *)&v120->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          goto LABEL_144;
        }
        goto LABEL_146;
      }
      *(_BYTE *)(v11 + 282) = 1;
      *(_BYTE *)(v11 + 280) = 1;
      v45 = *(double *)(v11 + 288) + *(double *)(v11 + 288);
      *(double *)(v11 + 288) = v45;
      v46 = CFAbsoluteTimeGetCurrent();
      v47 = *((_QWORD *)this + 127);
      std::mutex::lock((std::mutex *)(v47 + 16));
      if (*(_BYTE *)(v47 + 96))
      {
        v48 = *(double *)(v47 + 88);
        std::mutex::unlock((std::mutex *)(v47 + 16));
        if (v46 + v45 >= v48)
          goto LABEL_71;
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v47 + 16));
      }
      (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v45);
LABEL_71:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v63 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v128 = 67109632;
        *(_DWORD *)&v128[4] = *(_DWORD *)&v124[4];
        LOWORD(v129) = 1024;
        *(_DWORD *)((char *)&v129 + 2) = *(_DWORD *)&v124[8];
        HIWORD(v129) = 1024;
        LODWORD(v130) = *(_DWORD *)v124;
        _os_log_impl(&dword_19F029000, v63, OS_LOG_TYPE_ERROR, "Got no actor when loading height mesh for tile %u %u %u", v128, 0x14u);
      }
      goto LABEL_87;
    }
    if (!v11)
    {
      v24 = operator new();
      *(_DWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = v24 + 32;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_QWORD *)v24 = &off_1E42C5580;
      *(_OWORD *)(v24 + 80) = 0u;
      v25 = (void **)(v24 + 80);
      *(_QWORD *)(v24 + 208) = 0;
      *(_QWORD *)(v24 + 216) = 0;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_OWORD *)(v24 + 144) = 0u;
      *(_OWORD *)(v24 + 160) = 0u;
      *(_OWORD *)(v24 + 176) = 0u;
      *(_OWORD *)(v24 + 185) = 0u;
      *(_QWORD *)(v24 + 232) = 0;
      *(_DWORD *)(v24 + 224) = -1;
      *(_OWORD *)(v24 + 248) = 0u;
      *(_OWORD *)(v24 + 264) = 0u;
      *(_DWORD *)(v24 + 279) = 0;
      *(_QWORD *)(v24 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v24 + 296) = 0;
      v26 = *((_QWORD *)a2 + 36);
      *(_WORD *)(v24 + 300) = 0;
      altitude::Tile::createTileName(v124, (unsigned int *)a2 + 98, (uint64_t *)(v26 + 40), (uint64_t *)(v26 + 136));
      if (*(char *)(v24 + 103) < 0)
        operator delete(*v25);
      *(_OWORD *)v25 = *(_OWORD *)v124;
      *(_QWORD *)(v24 + 96) = v125;
      *((_QWORD *)a2 + 41) = v24;
      (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v24 + 16))(v24, a2);
      v11 = *((_QWORD *)a2 + 41);
    }
    v27 = (_QWORD *)*((_QWORD *)this + 15);
    v28 = (_QWORD *)*((_QWORD *)this + 16);
    v29 = 1;
    while (v27 != v28)
    {
      v30 = (const altitude::View *)(*(uint64_t (**)(_QWORD, altitude::CompleteGlobeTileSetLoader *, uint64_t))(*(_QWORD *)*v27 + 24))(*v27, this, 0xFFFFFFFFLL);
      if (*((_BYTE *)v30 + 1290))
      {
        v31 = *((_DWORD *)this + 152);
        TileView = altitude::Tile::getOrCreateTileView(a2, v30);
        v29 &= altitude::TileView::isCulled((altitude::TileView *)TileView, v31);
      }
      ++v27;
    }
    altitude::C3bRequestManager::requestC3b((uint64_t)&v118, *((_QWORD *)this + 18), (__int128 *)((char *)a2 + 392), *((_QWORD *)a2 + 36), *(_BYTE *)(v11 + 297), v29 & 1, a3, 1u);
    v33 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v118);
    if (v33)
    {
      if (v33 != 4)
        goto LABEL_138;
      v116 = 0;
      v117 = 0;
      *(_QWORD *)buf = 0;
      v132 = 0;
      v133 = 0;
      v129 = 0;
      v130 = 0;
      *(_QWORD *)v128 = &v129;
      LOWORD(v113) = 0;
      v115 = 0;
      v34 = *((_QWORD *)a2 + 36);
      v35 = *(_DWORD *)(v34 + 168);
      *(_OWORD *)v124 = *(_OWORD *)((char *)a2 + 392);
      LODWORD(v125) = v35;
      if (*(char *)(v34 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v34 + 40), *(_QWORD *)(v34 + 48));
      else
        __p = *(std::string *)(v34 + 40);
      v127 = 0;
      if (altitude::C3bRequestManager::getResult(*((_QWORD *)this + 18), (uint64_t)v124, (uint64_t)&v116, (uint64_t)buf, (uint64_t)v128, &v113, &v115)&& v116)
      {
        v49 = *(_QWORD *)(v11 + 120);
        if (v49)
        {
          v50 = (__n128 *)*((_QWORD *)this + 83);
          if ((unint64_t)v50 >= *((_QWORD *)this + 84))
          {
            v54 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v11 + 120));
          }
          else
          {
            v50->n128_u64[0] = v49;
            v51 = *(_QWORD *)(v11 + 128);
            v50->n128_u64[1] = v51;
            if (v51)
            {
              v52 = (unint64_t *)(v51 + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            v54 = v50 + 1;
          }
          *((_QWORD *)this + 83) = v54;
        }
        altitude::GlobeTileComponent::setGeometryElement((altitude::GlobeTileComponent *)v11, &v116);
        if ((uint8_t *)(v11 + 24) != v128)
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v11 + 24), *(_QWORD **)v128, &v129);
        v89 = v115;
        *(_WORD *)(v11 + 298) = v113;
        *(_WORD *)(v11 + 300) = v89;
LABEL_120:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v129);
        v90 = *(_QWORD **)buf;
        if (*(_QWORD *)buf)
        {
          v91 = v132;
          v92 = *(void **)buf;
          if (v132 != *(_QWORD **)buf)
          {
            do
            {
              v93 = (std::__shared_weak_count *)*(v91 - 1);
              if (v93)
              {
                v94 = (unint64_t *)&v93->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              v91 -= 2;
            }
            while (v91 != v90);
            v92 = *(void **)buf;
          }
          v132 = v90;
          operator delete(v92);
        }
        v96 = v117;
        if (v117)
        {
          v97 = (unint64_t *)&v117->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        goto LABEL_138;
      }
      *(_BYTE *)(v11 + 282) = 1;
      *(_BYTE *)(v11 + 280) = 1;
      v55 = *(double *)(v11 + 288) + *(double *)(v11 + 288);
      *(double *)(v11 + 288) = v55;
      v56 = CFAbsoluteTimeGetCurrent();
      v57 = *((_QWORD *)this + 127);
      std::mutex::lock((std::mutex *)(v57 + 16));
      if (*(_BYTE *)(v57 + 96))
      {
        v58 = *(double *)(v57 + 88);
        std::mutex::unlock((std::mutex *)(v57 + 16));
        if (v56 + v55 >= v58)
          goto LABEL_111;
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v57 + 16));
      }
      (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v55);
LABEL_111:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v85 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        v86 = *((_DWORD *)a2 + 99);
        v87 = *((_DWORD *)a2 + 100);
        v88 = *((_DWORD *)a2 + 98);
        *(_DWORD *)v121 = 67109632;
        *(_DWORD *)&v121[4] = v86;
        LOWORD(v122) = 1024;
        *(_DWORD *)((char *)&v122 + 2) = v87;
        HIWORD(v122) = 1024;
        v123 = v88;
        _os_log_impl(&dword_19F029000, v85, OS_LOG_TYPE_ERROR, "Got no actor when loading c3m mesh for tile %u %u %u", v121, 0x14u);
      }
      goto LABEL_120;
    }
    *(_BYTE *)(v11 + 282) = 1;
    *(_BYTE *)(v11 + 280) = 1;
    v41 = *(double *)(v11 + 288) + *(double *)(v11 + 288);
    *(double *)(v11 + 288) = v41;
    v42 = CFAbsoluteTimeGetCurrent();
    v43 = *((_QWORD *)this + 127);
    std::mutex::lock((std::mutex *)(v43 + 16));
    if (*(_BYTE *)(v43 + 96))
    {
      v44 = *(double *)(v43 + 88);
      std::mutex::unlock((std::mutex *)(v43 + 16));
      if (v42 + v41 >= v44)
        goto LABEL_65;
    }
    else
    {
      std::mutex::unlock((std::mutex *)(v43 + 16));
    }
    (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v41);
LABEL_65:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v59 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      v60 = *((_DWORD *)a2 + 99);
      v61 = *((_DWORD *)a2 + 100);
      v62 = *((_DWORD *)a2 + 98);
      *(_DWORD *)v124 = 67109632;
      *(_DWORD *)&v124[4] = v60;
      *(_WORD *)&v124[8] = 1024;
      *(_DWORD *)&v124[10] = v61;
      *(_WORD *)&v124[14] = 1024;
      LODWORD(v125) = v62;
      _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_ERROR, "Inavlidating geometry for %u %u %u", v124, 0x14u);
    }
LABEL_138:
    v118 = &off_1E42C2D08;
    if (v119)
    {
      v99 = (unsigned int *)(v119 + 128);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
    }
    v82 = v120;
    if (v120)
    {
      v101 = (unint64_t *)&v120->__shared_owners_;
      do
        v84 = __ldaxr(v101);
      while (__stlxr(v84 - 1, v101));
LABEL_144:
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v17);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
LABEL_146:
    v102 = *((_QWORD *)a2 + 42);
    if (*(_BYTE *)(*((_QWORD *)this + 23) + 136))
    {
      if (!v102)
      {
        v103 = operator new();
        *(_DWORD *)(v103 + 8) = 1;
        *(_QWORD *)(v103 + 40) = 0;
        *(_QWORD *)(v103 + 32) = 0;
        *(_QWORD *)(v103 + 16) = 0;
        *(_QWORD *)(v103 + 24) = v103 + 32;
        *(_OWORD *)(v103 + 48) = 0u;
        *(_OWORD *)(v103 + 64) = 0u;
        *(_QWORD *)v103 = &off_1E42C50F0;
        *(_DWORD *)(v103 + 80) = 2;
        *(_OWORD *)(v103 + 88) = 0u;
        *(_OWORD *)(v103 + 104) = 0u;
        *(_WORD *)(v103 + 120) = 257;
        *(_BYTE *)(v103 + 122) = 1;
        *(_DWORD *)(v103 + 124) = -1082130432;
        *((_QWORD *)a2 + 42) = v103;
        altitude::TileComponent::onAttach(v103, (uint64_t)a2);
        v102 = *((_QWORD *)a2 + 42);
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 48))(v102) & 1) == 0)
        altitude::CompleteGlobeTileSetLoader::loadRoads(this, a2, a3);
      v104 = *((_QWORD *)this + 25);
      if (v104 && *(_BYTE *)(v104 + 92))
      {
        v105 = *((_QWORD *)a2 + 43);
        if (!v105)
        {
          v106 = operator new();
          *(_DWORD *)(v106 + 8) = 2;
          *(_QWORD *)(v106 + 40) = 0;
          *(_QWORD *)(v106 + 32) = 0;
          *(_QWORD *)(v106 + 16) = 0;
          *(_QWORD *)(v106 + 24) = v106 + 32;
          *(_OWORD *)(v106 + 48) = 0u;
          *(_OWORD *)(v106 + 64) = 0u;
          *(_QWORD *)v106 = &off_1E42C59E0;
          *(_WORD *)(v106 + 80) = 257;
          *(_QWORD *)(v106 + 88) = 0;
          *(_QWORD *)(v106 + 96) = 0;
          *((_QWORD *)a2 + 43) = v106;
          altitude::TileComponent::onAttach(v106, (uint64_t)a2);
          v105 = *((_QWORD *)a2 + 43);
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 48))(v105) & 1) == 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 48))(v102))
        {
          altitude::CompleteGlobeTileSetLoader::loadTraffic(this, a2, a3, 0);
        }
LABEL_162:
        v108 = *((_QWORD *)a2 + 44);
        if (!v108)
        {
          v109 = operator new();
          *(_DWORD *)(v109 + 8) = 3;
          *(_QWORD *)(v109 + 40) = 0;
          *(_QWORD *)(v109 + 32) = 0;
          *(_QWORD *)(v109 + 16) = 0;
          *(_QWORD *)(v109 + 24) = v109 + 32;
          *(_OWORD *)(v109 + 48) = 0u;
          *(_OWORD *)(v109 + 64) = 0u;
          *(_QWORD *)v109 = &off_1E42C5FC8;
          *(_WORD *)(v109 + 80) = 257;
          *(_BYTE *)(v109 + 82) = 0;
          *(_OWORD *)(v109 + 88) = 0u;
          *(_OWORD *)(v109 + 104) = 0u;
          *((_QWORD *)a2 + 44) = v109;
          altitude::TileComponent::onAttach(v109, (uint64_t)a2);
          v108 = *((_QWORD *)a2 + 44);
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108) & 1) == 0)
          altitude::CompleteGlobeTileSetLoader::loadLabelData(this, a2, a3);
        v110 = *((_QWORD *)a2 + 45);
        if (*(_BYTE *)(*((_QWORD *)this + 27) + 104))
        {
          if (!v110)
          {
            v111 = operator new();
            *(_DWORD *)(v111 + 8) = 4;
            *(_QWORD *)(v111 + 32) = 0;
            *(_QWORD *)(v111 + 40) = 0;
            *(_QWORD *)(v111 + 16) = 0;
            *(_QWORD *)(v111 + 24) = v111 + 32;
            *(_OWORD *)(v111 + 48) = 0u;
            *(_OWORD *)(v111 + 64) = 0u;
            *(_QWORD *)v111 = &off_1E42C5950;
            *(_BYTE *)(v111 + 80) = 1;
            *(_OWORD *)(v111 + 84) = 0u;
            *(_OWORD *)(v111 + 100) = 0u;
            *(_OWORD *)(v111 + 116) = 0u;
            *(_OWORD *)(v111 + 132) = 0u;
            *(_OWORD *)(v111 + 148) = 0u;
            *(_QWORD *)(v111 + 162) = 0;
            *((_QWORD *)a2 + 45) = v111;
            altitude::TileComponent::onAttach(v111, (uint64_t)a2);
          }
          v112 = *(md::realistic::OverlayRenderLayer **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 40)
                                                       + 48);
          if (md::realistic::OverlayRenderLayer::tileNeedsRefresh(v112, a2))
          {
            md::realistic::OverlayRenderLayer::stageLoadOperation(v112, (uint64_t)a2, a3);
            *((_BYTE *)this + 620) = 1;
          }
        }
        else if (v110)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
          *((_QWORD *)a2 + 45) = 0;
        }
        return;
      }
    }
    else if (v102)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v102 + 8))(*((_QWORD *)a2 + 42));
      *((_QWORD *)a2 + 42) = 0;
    }
    v107 = *((_QWORD *)a2 + 43);
    if (v107)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
      *((_QWORD *)a2 + 43) = 0;
    }
    goto LABEL_162;
  }
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)v7 = &off_1E42C5580;
  *(_OWORD *)(v7 + 80) = 0u;
  v8 = (void **)(v7 + 80);
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 185) = 0u;
  *(_QWORD *)(v7 + 232) = 0;
  *(_DWORD *)(v7 + 224) = -1;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_DWORD *)(v7 + 279) = 0;
  *(_QWORD *)(v7 + 288) = 0x3FF0000000000000;
  *(_DWORD *)(v7 + 296) = 0;
  v9 = *((_QWORD *)a2 + 36);
  *(_WORD *)(v7 + 300) = 0;
  altitude::Tile::createTileName(v124, (unsigned int *)a2 + 98, (uint64_t *)(v9 + 40), (uint64_t *)(v9 + 136));
  if (*(char *)(v7 + 103) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)v124;
  *(_QWORD *)(v7 + 96) = v125;
  *((_QWORD *)a2 + 41) = v7;
  (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v7 + 16))(v7, a2);
  v6 = (_BYTE *)*((_QWORD *)a2 + 41);
  if (!v6[282])
    goto LABEL_7;
}

void `non-virtual thunk to'altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader(altitude::CompleteGlobeTileSetLoader *this)
{
  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader((altitude::CompleteGlobeTileSetLoader *)((char *)this - 40));
}

{
  altitude::CompleteGlobeTileSetLoader::~CompleteGlobeTileSetLoader((altitude::CompleteGlobeTileSetLoader *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::CompleteGlobeTileSetLoader::onChildTileRemoved(uint64_t a1, uint64_t a2, unint64_t a3)
{
  altitude::CompleteGlobeTileSetLoader::onChildTileRemoved((_QWORD *)(a1 - 40), a2, a3);
}

void altitude::CompleteGlobeTileSetLoader::loadRoads(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int Status;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void (**v37)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD v40[3];
  int v41;
  int v42;
  uint8_t buf[8];
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 42);
  v8 = *((_QWORD *)a2 + 49);
  v9 = *((_DWORD *)a2 + 100);
  v40[0] = 20;
  v40[1] = 0;
  v40[2] = v8;
  v41 = v9;
  v42 = 0;
  v10 = *((_QWORD *)this + 23);
  LOBYTE(v9) = atomic_load((unsigned __int8 *)(*(_QWORD *)(v10 + 96) + 224));
  if ((v9 & 1) != 0)
    v6 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v10 + 96) + 112))(*(_QWORD *)(v10 + 96), v40);
  *(_BYTE *)(v7 + 120) = v6;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) & 1) == 0)
  {
    (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, _QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 23) + 80))(&v37, *((_QWORD *)this + 23), v40, 0, a3, 2, 0, 0);
    Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v37);
    if (Status)
    {
      if (Status == 4)
      {
        v35 = 0;
        v36 = 0;
        v44 = 0;
        v45 = 0;
        *(_QWORD *)buf = &v44;
        altitude::RoadRequestManager::getRoadTile(*((pthread_mutex_t ***)this + 23), (uint64_t)v40, &v35, (uint64_t)buf);
        v13 = v35;
        v12 = v36;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        if (*(_QWORD *)(v7 + 88))
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 424), *(_QWORD *)(v7 + 16), v7);
        if (v12)
        {
          v16 = (unint64_t *)&v12->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = *(std::__shared_weak_count **)(v7 + 96);
        *(_QWORD *)(v7 + 88) = v13;
        *(_QWORD *)(v7 + 96) = v12;
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          v13 = *(_QWORD *)(v7 + 88);
        }
        if (v13)
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 424), *(_QWORD *)(v7 + 16), v7, v13);
        if (v12)
        {
          v21 = (unint64_t *)&v12->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((uint8_t *)(v7 + 24) != buf)
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v7 + 24), *(_QWORD **)buf, &v44);
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v44);
        v23 = v36;
        if (v36)
        {
          v24 = (unint64_t *)&v36->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v26 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        v27 = *((_DWORD *)a2 + 99);
        v28 = *((_DWORD *)a2 + 100);
        v29 = *((_DWORD *)a2 + 98);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v27;
        LOWORD(v44) = 1024;
        *(_DWORD *)((char *)&v44 + 2) = v28;
        HIWORD(v44) = 1024;
        LODWORD(v45) = v29;
        _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "Failed to load road data for tile %u %u %u", buf, 0x14u);
      }
      *(_BYTE *)(v7 + 120) = 0;
    }
    v37 = &off_1E42C2D08;
    if (v38)
    {
      v30 = (unsigned int *)(v38 + 128);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    v32 = v39;
    if (v39)
    {
      v33 = (unint64_t *)&v39->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
}

void altitude::CompleteGlobeTileSetLoader::loadTraffic(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  int TileIdWithDataForTileId;
  uint64_t v14;
  int v15;
  BOOL v16;
  int Status;
  pthread_mutex_t **v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void (**v90)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  uint8_t buf[8];
  _QWORD *v98;
  __int128 v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 43);
  v9 = (__int128 *)((char *)a2 + 392);
  if (*((_DWORD *)a2 + 101))
  {
    v10 = 0;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 42);
    v12 = *((_QWORD *)this + 25);
    TileIdWithDataForTileId = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(v12 + 128) + 32), (__int128 *)((char *)a2 + 392), 22);
    v14 = *(_QWORD *)(v12 + 136);
    *(_QWORD *)buf = 0;
    v98 = 0;
    v99 = *v9;
    v100 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v14 + 112))(v14, buf);
    v10 = 0;
    if (TileIdWithDataForTileId)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16)
      v10 = *(_QWORD *)(v11 + 88) != 0;
  }
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v8 + 128))(v8, v10);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
    || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 136))(v8, *(unsigned int *)(*((_QWORD *)this + 25) + 160)))
  {
    (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 25) + 104))(&v90, *((_QWORD *)this + 25), v9, a4, a3, 2, 0);
    Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v90);
    if (!Status)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 128))(v8, 0);
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v28 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        v29 = *((_DWORD *)a2 + 99);
        v30 = *((_DWORD *)a2 + 100);
        v31 = *((_DWORD *)a2 + 98);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v29;
        LOWORD(v98) = 1024;
        *(_DWORD *)((char *)&v98 + 2) = v30;
        HIWORD(v98) = 1024;
        LODWORD(v99) = v31;
        _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, "Failed to load traffic data for tile %u %u %u", buf, 0x14u);
      }
      goto LABEL_116;
    }
    if (Status != 4)
    {
LABEL_116:
      v90 = &off_1E42C2D08;
      if (v91)
      {
        v80 = (unsigned int *)(v91 + 128);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
      }
      v82 = v92;
      if (v92)
      {
        p_shared_owners = (unint64_t *)&v92->__shared_owners_;
        do
          v84 = __ldaxr(p_shared_owners);
        while (__stlxr(v84 - 1, p_shared_owners));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      return;
    }
    v88 = 0;
    v89 = 0;
    v87 = &v88;
    v18 = (pthread_mutex_t **)*((_QWORD *)this + 25);
    pthread_mutex_lock(v18[5]);
    (*(void (**)(_QWORD **__return_ptr, pthread_mutex_t **, __int128 *, _QWORD))&(*v18)[1].__opaque[24])(&v95, v18, v9, 0);
    v20 = v95;
    v19 = v96;
    v93 = v95;
    v94 = v96;
    if (v96)
    {
      v21 = (unint64_t *)&v96->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (((*(uint64_t (**)(_QWORD *))(*v20 + 40))(v20) & 1) != 0)
    {
      v24 = v20[28];
      v23 = (std::__shared_weak_count *)v20[29];
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = (_QWORD *)v20[36];
      v98 = 0;
      *(_QWORD *)&v99 = 0;
      *(_QWORD *)buf = &v98;
      std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)buf, v27, v20 + 37);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v88);
      v87 = *(_QWORD **)buf;
      v88 = v98;
      v89 = v99;
      if ((_QWORD)v99)
      {
        v98[2] = &v88;
        *(_QWORD *)buf = &v98;
        v98 = 0;
        *(_QWORD *)&v99 = 0;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
        if (!v19)
          goto LABEL_33;
      }
      else
      {
        v87 = &v88;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v98);
        if (!v19)
          goto LABEL_33;
      }
    }
    else
    {
      v23 = 0;
      v24 = 0;
      if (!v19)
        goto LABEL_33;
    }
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_33:
    v34 = v96;
    if (v96)
    {
      v35 = (unint64_t *)&v96->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    pthread_mutex_unlock(v18[5]);
    v38 = *(_QWORD *)(v8 + 88);
    v37 = *(std::__shared_weak_count **)(v8 + 96);
    if (!v37)
      goto LABEL_44;
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v41 = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (v38)
        goto LABEL_45;
    }
    else
    {
LABEL_44:
      if (v38)
      {
LABEL_45:
        v43 = (char *)*((_QWORD *)this + 80);
        v44 = *((_QWORD *)this + 81);
        if ((unint64_t)v43 >= v44)
        {
          v48 = (char *)*((_QWORD *)this + 79);
          v49 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v48) >> 3) + 1;
          if (v49 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v48) >> 3);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v49;
          if (v51 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v52 = 24 * v51;
          v53 = (char *)operator new(24 * v51);
          v54 = &v53[8 * ((v43 - v48) >> 3)];
          *(_QWORD *)v54 = a2;
          *((_QWORD *)v54 + 1) = v24;
          *((_QWORD *)v54 + 2) = v23;
          if (v23)
          {
            v55 = (unint64_t *)&v23->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            v43 = (char *)*((_QWORD *)this + 80);
            v48 = (char *)*((_QWORD *)this + 79);
          }
          v57 = &v53[v52];
          v47 = v54 + 24;
          if (v43 == v48)
          {
            *((_QWORD *)this + 79) = v54;
            *((_QWORD *)this + 80) = v47;
            *((_QWORD *)this + 81) = v57;
          }
          else
          {
            do
            {
              v58 = *(_OWORD *)(v43 - 24);
              v43 -= 24;
              *(_OWORD *)(v54 - 24) = v58;
              v54 -= 24;
              *((_QWORD *)v54 + 2) = *((_QWORD *)v43 + 2);
              *((_QWORD *)v43 + 1) = 0;
              *((_QWORD *)v43 + 2) = 0;
            }
            while (v43 != v48);
            v48 = (char *)*((_QWORD *)this + 79);
            v59 = (char *)*((_QWORD *)this + 80);
            *((_QWORD *)this + 79) = v54;
            *((_QWORD *)this + 80) = v47;
            *((_QWORD *)this + 81) = v57;
            while (v59 != v48)
            {
              v60 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v59 -= 24;
            }
          }
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)v43 = a2;
          *((_QWORD *)v43 + 1) = v24;
          *((_QWORD *)v43 + 2) = v23;
          if (v23)
          {
            v45 = (unint64_t *)&v23->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = v43 + 24;
        }
        *((_QWORD *)this + 80) = v47;
        goto LABEL_100;
      }
    }
    if (v23)
    {
      v63 = (unint64_t *)&v23->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = *(_QWORD *)(v8 + 88);
    if (v65 != v24)
    {
      if (v65)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 424), *(_QWORD *)(v8 + 16), v8);
      if (v23)
      {
        v66 = (unint64_t *)&v23->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = *(std::__shared_weak_count **)(v8 + 96);
      v69 = v24;
      *(_QWORD *)(v8 + 88) = v24;
      *(_QWORD *)(v8 + 96) = v23;
      if (v68)
      {
        v70 = (unint64_t *)&v68->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        v69 = *(_QWORD *)(v8 + 88);
      }
      if (v69)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 424), *(_QWORD *)(v8 + 16), v8);
    }
    if (!v23)
    {
      v74 = *((_QWORD *)a2 + 44);
      if (v74)
      {
        v85 = v24;
        v86 = 0;
LABEL_108:
        altitude::LabelDataTileComponent::setTrafficTile(v74, &v85);
      }
LABEL_109:
      if ((_QWORD **)(v8 + 24) != &v87)
        std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v8 + 24), v87, &v88);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v88);
      if (v23)
      {
        v78 = (unint64_t *)&v23->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_116;
    }
    v72 = (unint64_t *)&v23->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_100:
    v74 = *((_QWORD *)a2 + 44);
    if (v74)
    {
      v85 = v24;
      v86 = v23;
      if (v23)
      {
        v75 = (unint64_t *)&v23->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
        altitude::LabelDataTileComponent::setTrafficTile(v74, &v85);
        do
          v77 = __ldaxr(v75);
        while (__stlxr(v77 - 1, v75));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        goto LABEL_109;
      }
      goto LABEL_108;
    }
    goto LABEL_109;
  }
}

void sub_19F52ACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void altitude::CompleteGlobeTileSetLoader::loadLabelData(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  int v10;
  int v11;
  int v12;
  int v13;
  int Status;
  pthread_mutex_t **v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD v56[2];
  __int128 v57;
  uint64_t v58;
  void (**v59)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  _BYTE v63[12];
  __int128 v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  __int128 buf;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 44);
  v4 = *(_DWORD *)(*((_QWORD *)a2 + 36) + 168);
  v62 = 0;
  *(_DWORD *)v63 = v4;
  *(_QWORD *)&v63[4] = 0;
  v64 = *(_OWORD *)((char *)a2 + 392);
  v5 = *((_QWORD *)this + 26);
  v6 = *(_BYTE *)(v5 + 136);
  if (HIDWORD(v64))
  {
    *(_BYTE *)(v3 + 80) = 0;
LABEL_16:
    *(_BYTE *)(v3 + 82) = v6;
    return;
  }
  *(_QWORD *)((char *)&buf + 4) = *(_QWORD *)v63;
  v70 = *(_OWORD *)((char *)a2 + 392);
  HIDWORD(buf) = *(_DWORD *)&v63[8];
  LODWORD(buf) = 13;
  v10 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 112) + 112))(*(_QWORD *)(v5 + 112), &buf);
  LODWORD(buf) = 68;
  v11 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 112) + 112))(*(_QWORD *)(v5 + 112), &buf);
  LODWORD(buf) = 1;
  v12 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 120) + 112))(*(_QWORD *)(v5 + 120), &buf);
  LODWORD(buf) = 20;
  v13 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v5 + 104) + 112))(*(_QWORD *)(v5 + 104), &buf);
  *(_BYTE *)(v3 + 80) = v10 | v11 | v12 | v13;
  if (((v10 | v11 | v12 | v13) & 1) == 0)
    goto LABEL_16;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) & 1) == 0)
  {
    (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, int *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 26) + 80))(&v59, *((_QWORD *)this + 26), &v62, 0, a3, 2, 0, 0);
    Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v59);
    if (Status)
    {
      if (Status == 4)
      {
        *((_QWORD *)&v57 + 1) = 0;
        v58 = 0;
        *(_QWORD *)&v57 = (char *)&v57 + 8;
        v15 = (pthread_mutex_t **)*((_QWORD *)this + 26);
        pthread_mutex_lock(v15[5]);
        (*(void (**)(_QWORD **__return_ptr, pthread_mutex_t **, int *, _QWORD))&(*v15)[1].__opaque[24])(&v67, v15, &v62, 0);
        v17 = v67;
        v16 = v68;
        v65 = v67;
        v66 = v68;
        if (v68)
        {
          p_shared_owners = (unint64_t *)&v68->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        if (((*(uint64_t (**)(_QWORD *))(*v17 + 40))(v17) & 1) != 0)
        {
          v21 = v17[33];
          v20 = (std::__shared_weak_count *)v17[34];
          if (v20)
          {
            v22 = (unint64_t *)&v20->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (_QWORD *)v17[37];
          *(_QWORD *)&v70 = 0;
          buf = (unint64_t)&buf + 8;
          std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&buf, v24, v17 + 38);
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v57 + 1));
          v25 = (_QWORD *)*((_QWORD *)&buf + 1);
          v57 = buf;
          v58 = v70;
          if ((_QWORD)v70)
          {
            *(_QWORD *)(*((_QWORD *)&buf + 1) + 16) = (char *)&v57 + 8;
            *(_QWORD *)&buf = (char *)&buf + 8;
            *((_QWORD *)&buf + 1) = 0;
            *(_QWORD *)&v70 = 0;
            v25 = 0;
          }
          else
          {
            *(_QWORD *)&v57 = (char *)&v57 + 8;
          }
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v25);
        }
        else
        {
          v20 = 0;
          v21 = 0;
        }
        if (v16)
        {
          v30 = (unint64_t *)&v16->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v32 = v68;
        if (v68)
        {
          v33 = (unint64_t *)&v68->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        pthread_mutex_unlock(v15[5]);
        if (v20)
        {
          v35 = (unint64_t *)&v20->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (*(_QWORD *)(v3 + 88))
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 424), *(_QWORD *)(v3 + 16), v3);
        if (v20)
        {
          v37 = (unint64_t *)&v20->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v39 = *(std::__shared_weak_count **)(v3 + 96);
        *(_QWORD *)(v3 + 88) = v21;
        *(_QWORD *)(v3 + 96) = v20;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          v21 = *(_QWORD *)(v3 + 88);
        }
        if (v21)
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 424), *(_QWORD *)(v3 + 16), v3, v21);
        if (v20)
        {
          v42 = (unint64_t *)&v20->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v44 = *((_QWORD *)a2 + 43);
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 96);
          v56[0] = *(_QWORD *)(v44 + 88);
          v56[1] = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            altitude::LabelDataTileComponent::setTrafficTile(v3, v56);
            do
              v48 = __ldaxr(v46);
            while (__stlxr(v48 - 1, v46));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          else
          {
            altitude::LabelDataTileComponent::setTrafficTile(v3, v56);
          }
        }
        if ((__int128 *)(v3 + 24) != &v57)
          std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v3 + 24), (_QWORD *)v57, (_QWORD *)&v57 + 1);
        *(_BYTE *)(v3 + 82) = v6;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v57 + 1));
        if (v20)
        {
          v49 = (unint64_t *)&v20->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(v3 + 80) = 0;
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v26 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        v27 = *((_DWORD *)a2 + 99);
        v28 = *((_DWORD *)a2 + 100);
        v29 = *((_DWORD *)a2 + 98);
        LODWORD(buf) = 67109632;
        DWORD1(buf) = v27;
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v28;
        HIWORD(buf) = 1024;
        LODWORD(v70) = v29;
        _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "Failed to load label data for tile %u %u %u", (uint8_t *)&buf, 0x14u);
      }
      *(_BYTE *)(v3 + 82) = v6;
    }
    v59 = &off_1E42C2D08;
    if (v60)
    {
      v51 = (unsigned int *)(v60 + 128);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
    }
    v53 = v61;
    if (v61)
    {
      v54 = (unint64_t *)&v61->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
}

void sub_19F52B2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 40));
  _Unwind_Resume(a1);
}

void std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *i;
  uint64_t **v36;
  char *v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t **v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;

  v4 = a2;
  if (!a1[2])
    goto LABEL_62;
  v6 = (uint64_t **)*a1;
  v8 = a1 + 1;
  v7 = a1[1];
  *a1 = (uint64_t *)(a1 + 1);
  v7[2] = 0;
  a1[2] = 0;
  a1[1] = 0;
  v9 = v6[1] ? v6[1] : (uint64_t *)v6;
  if (!v9)
    goto LABEL_62;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v58 = (_QWORD *)v10[1];
        if (!v58)
          break;
        do
        {
          v10 = v58;
          v58 = (_QWORD *)*v58;
        }
        while (v58);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  if (a2 == a3)
    goto LABEL_58;
  v12 = a2;
  v13 = v9;
  do
  {
    v9 = v10;
    v14 = *(_OWORD *)((char *)v12 + 28);
    *(_OWORD *)((char *)v13 + 44) = *(_OWORD *)((char *)v12 + 44);
    *(_OWORD *)((char *)v13 + 28) = v14;
    v15 = *v8;
    v16 = (uint64_t *)(a1 + 1);
    v17 = a1 + 1;
    if (!*v8)
      goto LABEL_36;
    v18 = *((_DWORD *)v13 + 11);
    v19 = *((_DWORD *)v13 + 12);
    v20 = *((_DWORD *)v13 + 13);
    v21 = *((_DWORD *)v13 + 14);
    v22 = *((_DWORD *)v13 + 7);
    v23 = *((_DWORD *)v13 + 8);
    do
    {
      while (1)
      {
        v16 = v15;
        v24 = *((_DWORD *)v15 + 11);
        if (v18 != v24 || v19 != *((_DWORD *)v16 + 12) || v20 != *((_DWORD *)v16 + 13) || *((_DWORD *)v16 + 14) != v21)
          break;
        v25 = *((_DWORD *)v16 + 7);
        v26 = v22 >= v25;
        if (v22 == v25 && (v27 = *((_DWORD *)v16 + 8), v26 = v23 >= v27, v23 == v27))
        {
          if (*((_DWORD *)v13 + 9) >= *((_DWORD *)v16 + 9))
            goto LABEL_26;
        }
        else if (v26)
        {
          goto LABEL_26;
        }
LABEL_15:
        v15 = (uint64_t *)*v16;
        v17 = (uint64_t **)v16;
        if (!*v16)
          goto LABEL_36;
      }
      if (v18 < v24)
        goto LABEL_15;
      if (v18 <= v24)
      {
        v28 = *((_DWORD *)v16 + 12);
        if (v19 < v28)
          goto LABEL_15;
        if (v19 <= v28)
        {
          v29 = *((_DWORD *)v16 + 13);
          if (v20 < v29 || v20 <= v29 && v21 < *((_DWORD *)v16 + 14))
            goto LABEL_15;
        }
      }
LABEL_26:
      v15 = (uint64_t *)v16[1];
    }
    while (v15);
    v17 = (uint64_t **)(v16 + 1);
LABEL_36:
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v16;
    *v17 = v13;
    v30 = (uint64_t *)**a1;
    if (v30)
    {
      *a1 = v30;
      v13 = *v17;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    if (v10)
    {
      v10 = (uint64_t *)v10[2];
      if (v10)
      {
        v33 = (_QWORD *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (_QWORD *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v33; v33 = (_QWORD *)v10[1])
          {
            do
            {
              v10 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
        }
      }
    }
    else
    {
      v10 = 0;
    }
    v31 = (_QWORD *)v12[1];
    if (v31)
    {
      do
      {
        v4 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v12[2];
        v32 = *v4 == (_QWORD)v12;
        v12 = v4;
      }
      while (!v32);
    }
    if (!v9)
      break;
    v12 = v4;
    v13 = v9;
  }
  while (v4 != a3);
LABEL_58:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
  if (v10)
  {
    for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
      v10 = i;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
  }
LABEL_62:
  if (v4 == a3)
    return;
  v36 = a1 + 1;
  while (2)
  {
    v37 = (char *)operator new(0x40uLL);
    v38 = (uint64_t *)v37;
    v39 = *((_DWORD *)v4 + 7);
    v40 = *((_DWORD *)v4 + 8);
    *((_DWORD *)v37 + 7) = v39;
    *((_DWORD *)v37 + 8) = v40;
    v41 = *(_QWORD *)((char *)v4 + 36);
    *(_QWORD *)(v37 + 36) = v41;
    *(_OWORD *)(v37 + 44) = *(_OWORD *)((char *)v4 + 44);
    v42 = *v36;
    v43 = (uint64_t *)(a1 + 1);
    v44 = a1 + 1;
    if (!*v36)
      goto LABEL_88;
    v45 = *((_DWORD *)v37 + 11);
    v46 = *((_DWORD *)v37 + 12);
    v47 = *((_DWORD *)v37 + 13);
    v48 = *((_DWORD *)v37 + 14);
    while (2)
    {
      while (2)
      {
        v43 = v42;
        v49 = *((_DWORD *)v42 + 11);
        if (v45 == v49 && v46 == *((_DWORD *)v43 + 12) && v47 == *((_DWORD *)v43 + 13) && *((_DWORD *)v43 + 14) == v48)
        {
          v50 = *((_DWORD *)v43 + 7);
          v51 = v39 >= v50;
          if (v39 == v50 && (v52 = *((_DWORD *)v43 + 8), v51 = v40 >= v52, v40 == v52))
          {
            if (v41 >= *((_DWORD *)v43 + 9))
              break;
          }
          else if (v51)
          {
            break;
          }
          goto LABEL_67;
        }
        if (v45 < v49
          || v45 <= v49
          && ((v53 = *((_DWORD *)v43 + 12), v46 < v53)
           || v46 <= v53 && ((v54 = *((_DWORD *)v43 + 13), v47 < v54) || v47 <= v54 && v48 < *((_DWORD *)v43 + 14))))
        {
LABEL_67:
          v42 = (uint64_t *)*v43;
          v44 = (uint64_t **)v43;
          if (!*v43)
            goto LABEL_88;
          continue;
        }
        break;
      }
      v42 = (uint64_t *)v43[1];
      if (v42)
        continue;
      break;
    }
    v44 = (uint64_t **)(v43 + 1);
LABEL_88:
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = v43;
    *v44 = (uint64_t *)v37;
    v55 = (uint64_t *)**a1;
    if (v55)
    {
      *a1 = v55;
      v38 = *v44;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v38);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v56 = (_QWORD *)v4[1];
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = (_QWORD *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (_QWORD *)v4[2];
        v32 = *v57 == (_QWORD)v4;
        v4 = v57;
      }
      while (!v32);
    }
    v4 = v57;
    if (v57 != a3)
      continue;
    break;
  }
}

void altitude::CompleteGlobeTileSetLoader::processQueues(size_t __sz)
{
  size_t v1;
  unint64_t v2;
  altitude::Tile **v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  altitude::Tile **v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  altitude::Tile **v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  std::string *v16;
  std::string *v17;
  _QWORD *v18;
  unsigned int v19;
  std::string::size_type v20;
  std::string::size_type *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t size;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  __n128 *v74;
  int v75;
  void *v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _BYTE *v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  int Status;
  std::__shared_weak_count **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  NSObject *v146;
  int v147;
  int v148;
  int v149;
  unsigned int *v150;
  unsigned int v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  size_t v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  const char *v259;
  int v260;
  char *v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  __n128 *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  __n128 *v273;
  NSObject *v274;
  _DWORD *v275;
  int v276;
  int v277;
  NSObject *v278;
  _DWORD *v279;
  int v280;
  int v281;
  std::__shared_weak_count *v282;
  uint64_t v283;
  int *v284;
  const char *v285;
  uint64_t v286;
  void **v287;
  unint64_t v288;
  __n128 *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  __n128 *v293;
  int v294;
  uint64_t v295;
  _QWORD *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  int v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  char *v307;
  void *v308;
  char *v309;
  void (***v310)(char *);
  void (**v311)(char *);
  unint64_t v312;
  char *v313;
  uint64_t *v314;
  int v315;
  uint64_t v316;
  char *v317;
  char *v318;
  unint64_t v319;
  uint64_t v320;
  unsigned int v321;
  char *v322;
  unint64_t v323;
  void (**v324)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t *v325;
  unsigned int v326;
  void (*v327)(karo::AsyncRequestManager::RequestHandle *__hidden);
  void (**v328)(karo::AsyncRequestManager::RequestHandle *__hidden);
  void (**v329)(karo::AsyncRequestManager::RequestHandle *__hidden);
  unint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int v334;
  void (*v335)(karo::AsyncRequestManager::RequestHandle *__hidden);
  altitude::GlobeTileComponent *v336;
  uint64_t v337;
  void **v338;
  uint64_t v339;
  uint64_t v340;
  _OWORD *v341;
  int v342;
  int v343;
  unsigned __int8 *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  NSObject *v353;
  int v354;
  int v355;
  int v356;
  char *v357;
  char *v358;
  void *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  altitude::Tile **v372;
  uint64_t *v373;
  unsigned int v374;
  uint64_t v375;
  char *v376;
  altitude::Tile **v377;
  unint64_t v378;
  uint64_t v379;
  unsigned int v380;
  altitude::Tile **v381;
  unint64_t v382;
  altitude::Tile **v383;
  uint64_t *v384;
  unsigned int v385;
  uint64_t v386;
  char *v387;
  altitude::Tile **v388;
  unint64_t v389;
  uint64_t v390;
  unsigned int v391;
  altitude::Tile **v392;
  unint64_t v393;
  altitude::Tile **v394;
  uint64_t *v395;
  unsigned int v396;
  uint64_t v397;
  char *v398;
  altitude::Tile **v399;
  unint64_t v400;
  uint64_t v401;
  unsigned int v402;
  altitude::Tile **v403;
  unint64_t v404;
  char *v405;
  uint64_t *v406;
  int v407;
  uint64_t v408;
  char *v409;
  char *v410;
  unint64_t v411;
  uint64_t v412;
  unsigned int v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  std::mutex *v417;
  id v418;
  void *v419;
  uint64_t v420;
  _QWORD **v421;
  std::__shared_weak_count *v422;
  _QWORD *v423;
  std::__shared_weak_count **v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t i;
  _QWORD *v428;
  void *v429;
  uint64_t *v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  char v439;
  int v440;
  pthread_mutex_t **v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  int v446;
  uint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  char v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  void *v462;
  unsigned int *v463;
  unsigned int v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  __n128 *v474;
  unint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  __n128 *v478;
  uint64_t v479;
  unint64_t v480;
  char *v481;
  uint64_t v482;
  unint64_t *v483;
  unint64_t v484;
  _QWORD *v485;
  char *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char *v491;
  char *v492;
  __int128 v493;
  unint64_t *v494;
  unint64_t v495;
  char *v496;
  __int128 v497;
  char *v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  void **v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  int v509;
  std::__shared_weak_count *v510;
  unsigned int v511;
  int v512;
  int v513;
  _QWORD *v514;
  _QWORD *v515;
  char v516;
  std::__shared_weak_count *v517;
  char v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  float v528;
  _QWORD *v529;
  uint64_t v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t OverlayElement;
  unint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  unint64_t *v566;
  unint64_t v567;
  unint64_t *v568;
  unint64_t v569;
  unint64_t *v570;
  unsigned int *v571;
  unsigned int v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  uint64_t *v577;
  std::__shared_weak_count *v578;
  unsigned int *v579;
  uint64_t *v580;
  uint64_t **v581;
  int isPoleTile;
  uint64_t v583;
  std::__shared_weak_count *v584;
  uint64_t v585;
  uint64_t v586;
  __int128 *v587;
  uint64_t v588;
  unsigned int v589;
  unsigned int v590;
  _BYTE *v591;
  __int128 v592;
  int64x2_t v593;
  __int128 v594;
  _QWORD *v595;
  std::string *v596;
  std::string *v597;
  std::string *v598;
  int v599;
  unsigned int v600;
  int v601;
  size_t v602;
  char v603;
  uint64_t v604[2];
  uint64_t v605;
  std::__shared_weak_count *v606;
  std::__shared_weak_count *v607;
  std::__shared_weak_count *v608;
  void (**v609)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v610;
  std::__shared_weak_count *v611;
  std::__shared_weak_count **v612;
  std::__shared_weak_count *v613;
  void *v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  void (**v617)(karo::AsyncRequestManager::RequestHandle *__hidden);
  void (**v618)(karo::AsyncRequestManager::RequestHandle *__hidden);
  std::__shared_weak_count *v619;
  __int128 v620;
  std::__shared_weak_count **v621;
  std::__shared_weak_count *v622;
  uint64_t v623;
  uint64_t v624;
  void *__p[2];
  void *v626[4];
  __int128 v627;
  _BYTE v628[48];
  uint64_t v629;
  BOOL v630;
  int v631;
  __int16 v632;
  char v633;
  uint8_t buf[8];
  _QWORD *v635;
  __int128 v636;
  int v637;
  uint64_t v638;

  v1 = __sz;
  v638 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(__sz + 480);
  if (v2)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v2);
    v3 = *(altitude::Tile ***)v628;
    v4 = *(uint64_t **)(v1 + 472);
    if (v4)
    {
      v5 = 0;
      do
      {
        v6 = v4[2];
        v7 = (char *)&v3[2 * v5];
        *(_DWORD *)v7 = *((_DWORD *)v4 + 6);
        *((_QWORD *)v7 + 1) = v6;
        ++v5;
        v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
    v8 = *(altitude::Tile ***)&v628[8];
    v9 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v3) >> 4);
    if (*(altitude::Tile ***)&v628[8] == v3)
      v10 = 0;
    else
      v10 = v9;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v3, *(unint64_t *)&v628[8], v10, 1);
    if (v8 != v3)
    {
      v11 = 0;
      v12 = v8 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadBaseSurface((altitude::CompleteGlobeTileSetLoader *)v1, v12[1], *(unsigned int *)v12);
        if (v12 == v3)
          break;
        v12 -= 2;
        v13 = v11++ >= 0x12B;
      }
      while (!v13);
    }
    if (v3)
      operator delete(v3);
  }
  v598 = (std::string *)(v1 + 560);
  *(_QWORD *)(v1 + 568) = *(_QWORD *)(v1 + 560);
  *(_QWORD *)(v1 + 592) = *(_QWORD *)(v1 + 584);
  v14 = *(_QWORD *)(v1 + 552);
  v602 = v1;
  if (v14)
  {
    if (v14 >> 60)
      goto LABEL_806;
    v15 = 16 * v14;
    v16 = (std::string *)operator new(16 * v14);
    bzero(v16, v15);
    v17 = (std::string *)((char *)v16 + v15);
    v18 = *(_QWORD **)(v602 + 536);
    if (v18 != (_QWORD *)(v602 + 544))
    {
      v19 = 0;
      do
      {
        v20 = v18[4];
        v21 = (std::string::size_type *)((char *)v16 + 16 * v19);
        *v21 = v18[5];
        v21[1] = v20;
        v22 = (_QWORD *)v18[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v18[2];
            v24 = *v23 == (_QWORD)v18;
            v18 = v23;
          }
          while (!v24);
        }
        ++v19;
        v18 = v23;
      }
      while (v23 != (_QWORD *)(v602 + 544));
    }
    v25 = 126 - 2 * __clz(v15 >> 4);
    if (v15)
      v26 = v25;
    else
      v26 = 0;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>((uint64_t)v16, &v16->__r_.__value_.__r.__words[(unint64_t)v15 / 8], v26, 1);
    if (v15)
    {
      v27 = 0;
      v588 = v602 + 656;
      v596 = v16;
      do
      {
        v28 = v17[-1].__r_.__value_.__r.__words[1];
        v17 = (std::string *)((char *)v17 - 16);
        v600 = v28;
        size = v17->__r_.__value_.__l.__size_;
        v30 = HIDWORD(v17->__r_.__value_.__r.__words[0]);
        v31 = (_QWORD *)v602;
        *(_BYTE *)(v602 + 620) = 1;
        v32 = size;
        do
        {
          v32 = *(_QWORD *)(v32 + 296);
          if (!v32)
            goto LABEL_345;
          v33 = *(_QWORD *)(v32 + 328);
          if (!v33)
          {
            v34 = operator new();
            *(_DWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 40) = 0;
            *(_QWORD *)(v34 + 32) = 0;
            *(_QWORD *)(v34 + 16) = 0;
            *(_QWORD *)(v34 + 24) = v34 + 32;
            *(_OWORD *)(v34 + 48) = 0u;
            *(_OWORD *)(v34 + 64) = 0u;
            *(_OWORD *)(v34 + 80) = 0u;
            v35 = (void **)(v34 + 80);
            *(_QWORD *)v34 = &off_1E42C5580;
            *(_QWORD *)(v34 + 208) = 0;
            *(_QWORD *)(v34 + 216) = 0;
            *(_OWORD *)(v34 + 96) = 0u;
            *(_OWORD *)(v34 + 112) = 0u;
            *(_OWORD *)(v34 + 128) = 0u;
            *(_OWORD *)(v34 + 144) = 0u;
            *(_OWORD *)(v34 + 160) = 0u;
            *(_OWORD *)(v34 + 176) = 0u;
            *(_OWORD *)(v34 + 185) = 0u;
            *(_DWORD *)(v34 + 224) = -1;
            *(_QWORD *)(v34 + 232) = 0;
            *(_OWORD *)(v34 + 248) = 0u;
            *(_OWORD *)(v34 + 264) = 0u;
            *(_DWORD *)(v34 + 279) = 0;
            *(_QWORD *)(v34 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v34 + 296) = 0;
            *(_WORD *)(v34 + 300) = 0;
            altitude::Tile::createTileName(v628, (unsigned int *)(v32 + 392), (uint64_t *)(*(_QWORD *)(v32 + 288) + 40), (uint64_t *)(*(_QWORD *)(v32 + 288) + 136));
            if (*(char *)(v34 + 103) < 0)
              operator delete(*v35);
            *(_OWORD *)v35 = *(_OWORD *)v628;
            *(_QWORD *)(v34 + 96) = *(_QWORD *)&v628[16];
            *(_QWORD *)(v32 + 328) = v34;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
            v33 = *(_QWORD *)(v32 + 328);
          }
        }
        while (!*(_QWORD *)(v33 + 120));
        if (v30 && *(_DWORD *)(size + 392) - *(_DWORD *)(v32 + 392) > v30 && *(_QWORD *)(size + 296))
        {
          do
          {
            size = *(_QWORD *)(size + 296);
            --v30;
          }
          while (v30);
          altitude::CompleteGlobeTileSetLoader::queueLoadMesh((_QWORD *)v602, (altitude::Tile *)size, v600);
          if (v17 == v16)
            break;
          goto LABEL_346;
        }
        v36 = *(_QWORD *)(size + 328);
        if (*(_BYTE *)(v33 + 296))
        {
          if (v36)
          {
            if (!*(_QWORD *)(v36 + 208))
              goto LABEL_55;
          }
          else
          {
            v37 = operator new();
            *(_DWORD *)(v37 + 8) = 0;
            *(_QWORD *)(v37 + 40) = 0;
            *(_QWORD *)(v37 + 32) = 0;
            *(_QWORD *)(v37 + 16) = 0;
            *(_QWORD *)(v37 + 24) = v37 + 32;
            *(_OWORD *)(v37 + 48) = 0u;
            *(_OWORD *)(v37 + 64) = 0u;
            *(_OWORD *)(v37 + 80) = 0u;
            v38 = (void **)(v37 + 80);
            *(_QWORD *)v37 = &off_1E42C5580;
            *(_QWORD *)(v37 + 208) = 0;
            *(_QWORD *)(v37 + 216) = 0;
            *(_OWORD *)(v37 + 96) = 0u;
            *(_OWORD *)(v37 + 112) = 0u;
            *(_OWORD *)(v37 + 128) = 0u;
            *(_OWORD *)(v37 + 144) = 0u;
            *(_OWORD *)(v37 + 160) = 0u;
            *(_OWORD *)(v37 + 176) = 0u;
            *(_OWORD *)(v37 + 185) = 0u;
            *(_DWORD *)(v37 + 224) = -1;
            *(_QWORD *)(v37 + 232) = 0;
            *(_OWORD *)(v37 + 248) = 0u;
            *(_OWORD *)(v37 + 264) = 0u;
            *(_DWORD *)(v37 + 279) = 0;
            *(_QWORD *)(v37 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v37 + 296) = 0;
            *(_WORD *)(v37 + 300) = 0;
            altitude::Tile::createTileName(v628, (unsigned int *)(size + 392), (uint64_t *)(*(_QWORD *)(size + 288) + 40), (uint64_t *)(*(_QWORD *)(size + 288) + 136));
            if (*(char *)(v37 + 103) < 0)
              operator delete(*v38);
            *(_OWORD *)v38 = *(_OWORD *)v628;
            *(_QWORD *)(v37 + 96) = *(_QWORD *)&v628[16];
            *(_QWORD *)(size + 328) = v37;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, size);
            v36 = *(_QWORD *)(size + 328);
            if (!*(_QWORD *)(v36 + 208))
            {
LABEL_55:
              v39 = *(_QWORD *)(size + 288);
              *(_OWORD *)v628 = *(_OWORD *)(size + 392);
              *(_OWORD *)&v628[16] = *(_OWORD *)(v32 + 392);
              v40 = *(_OWORD **)(v602 + 568);
              v41 = *(_QWORD *)(v602 + 576);
              if ((unint64_t)v40 >= v41)
              {
                v43 = (_OWORD *)v598->__r_.__value_.__r.__words[0];
                v44 = (uint64_t)((uint64_t)v40 - v598->__r_.__value_.__r.__words[0]) >> 6;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 58)
                  goto LABEL_806;
                v46 = v41 - (_QWORD)v43;
                if (v46 >> 5 > v45)
                  v45 = v46 >> 5;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0)
                  v47 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  if (v47 >> 58)
                    goto LABEL_807;
                  v48 = (char *)operator new(v47 << 6);
                }
                else
                {
                  v48 = 0;
                }
                v87 = *(_OWORD *)&v628[16];
                v88 = &v48[64 * v44];
                *(_OWORD *)v88 = *(_OWORD *)v628;
                *((_OWORD *)v88 + 1) = v87;
                *((_QWORD *)v88 + 4) = v39;
                *((_QWORD *)v88 + 5) = v32;
                *((_DWORD *)v88 + 12) = v600;
                *((_DWORD *)v88 + 13) = 1;
                v88[56] = 0;
                v89 = v88;
                if (v40 != v43)
                {
                  do
                  {
                    v90 = *(v40 - 4);
                    v91 = *(v40 - 3);
                    v92 = *(v40 - 2);
                    *(_OWORD *)(v89 - 23) = *(_OWORD *)((char *)v40 - 23);
                    *((_OWORD *)v89 - 3) = v91;
                    *((_OWORD *)v89 - 2) = v92;
                    *((_OWORD *)v89 - 4) = v90;
                    v89 -= 64;
                    v40 -= 4;
                  }
                  while (v40 != v43);
                  v40 = (_OWORD *)v598->__r_.__value_.__r.__words[0];
                }
                v93 = &v48[64 * v47];
                v31 = (_QWORD *)v602;
                *(_QWORD *)(v602 + 560) = v89;
                v42 = v88 + 64;
                *(_QWORD *)(v602 + 568) = v88 + 64;
                *(_QWORD *)(v602 + 576) = v93;
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *v40 = *(_OWORD *)v628;
                v40[1] = *(_OWORD *)&v628[16];
                *((_QWORD *)v40 + 4) = v39;
                *((_QWORD *)v40 + 5) = v32;
                *((_DWORD *)v40 + 12) = v600;
                *((_DWORD *)v40 + 13) = 1;
                *((_BYTE *)v40 + 56) = 0;
                v42 = v40 + 4;
              }
              v31[71] = v42;
              v94 = (uint64_t *)v31[74];
              v95 = v31[75];
              if ((unint64_t)v94 >= v95)
              {
                v97 = (uint64_t *)v31[73];
                v98 = v94 - v97;
                v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 61)
                  goto LABEL_806;
                v100 = v95 - (_QWORD)v97;
                if (v100 >> 2 > v99)
                  v99 = v100 >> 2;
                if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                  v101 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v101 = v99;
                if (v101)
                {
                  if (v101 >> 61)
                    goto LABEL_807;
                  v102 = operator new(8 * v101);
                }
                else
                {
                  v102 = 0;
                }
                v103 = (uint64_t *)&v102[8 * v98];
                *v103 = size;
                v96 = v103 + 1;
                if (v94 == v97)
                {
                  v97 = v94;
                }
                else
                {
                  v104 = (char *)v94 - (char *)v97 - 8;
                  if (v104 < 0x58)
                    goto LABEL_811;
                  if ((unint64_t)((char *)v97 - v102) < 0x20)
                    goto LABEL_811;
                  v105 = (v104 >> 3) + 1;
                  v106 = &v102[8 * v98 - 16];
                  v107 = v94 - 2;
                  v108 = v105 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v109 = *(_OWORD *)v107;
                    *(v106 - 1) = *((_OWORD *)v107 - 1);
                    *v106 = v109;
                    v106 -= 2;
                    v107 -= 4;
                    v108 -= 4;
                  }
                  while (v108);
                  v103 -= v105 & 0x3FFFFFFFFFFFFFFCLL;
                  v94 -= v105 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_811:
                    do
                    {
                      v110 = *--v94;
                      *--v103 = v110;
                    }
                    while (v94 != v97);
                    v97 = *(uint64_t **)(v602 + 584);
                  }
                }
                *(_QWORD *)(v602 + 584) = v103;
                *(_QWORD *)(v602 + 592) = v96;
                *(_QWORD *)(v602 + 600) = &v102[8 * v101];
                if (v97)
                  operator delete(v97);
              }
              else
              {
                *v94 = size;
                v96 = v94 + 1;
              }
              *(_QWORD *)(v602 + 592) = v96;
              v31 = (_QWORD *)v602;
              goto LABEL_142;
            }
          }
          if (*(_DWORD *)(v36 + 224) != *(_DWORD *)(size + 392) - *(_DWORD *)(v32 + 392))
            goto LABEL_55;
        }
        else
        {
          if (v36)
          {
            if (!*(_QWORD *)(v36 + 208))
              goto LABEL_70;
          }
          else
          {
            v49 = operator new();
            *(_DWORD *)(v49 + 8) = 0;
            *(_QWORD *)(v49 + 40) = 0;
            *(_QWORD *)(v49 + 32) = 0;
            *(_QWORD *)(v49 + 16) = 0;
            *(_QWORD *)(v49 + 24) = v49 + 32;
            *(_OWORD *)(v49 + 48) = 0u;
            *(_OWORD *)(v49 + 64) = 0u;
            *(_OWORD *)(v49 + 80) = 0u;
            v50 = (void **)(v49 + 80);
            *(_QWORD *)v49 = &off_1E42C5580;
            *(_QWORD *)(v49 + 208) = 0;
            *(_QWORD *)(v49 + 216) = 0;
            *(_OWORD *)(v49 + 96) = 0u;
            *(_OWORD *)(v49 + 112) = 0u;
            *(_OWORD *)(v49 + 128) = 0u;
            *(_OWORD *)(v49 + 144) = 0u;
            *(_OWORD *)(v49 + 160) = 0u;
            *(_OWORD *)(v49 + 176) = 0u;
            *(_OWORD *)(v49 + 185) = 0u;
            *(_DWORD *)(v49 + 224) = -1;
            *(_QWORD *)(v49 + 232) = 0;
            *(_OWORD *)(v49 + 248) = 0u;
            *(_OWORD *)(v49 + 264) = 0u;
            *(_DWORD *)(v49 + 279) = 0;
            *(_QWORD *)(v49 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v49 + 296) = 0;
            *(_WORD *)(v49 + 300) = 0;
            altitude::Tile::createTileName(v628, (unsigned int *)(size + 392), (uint64_t *)(*(_QWORD *)(size + 288) + 40), (uint64_t *)(*(_QWORD *)(size + 288) + 136));
            if (*(char *)(v49 + 103) < 0)
              operator delete(*v50);
            *(_OWORD *)v50 = *(_OWORD *)v628;
            *(_QWORD *)(v49 + 96) = *(_QWORD *)&v628[16];
            *(_QWORD *)(size + 328) = v49;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, size);
            v36 = *(_QWORD *)(size + 328);
            if (!*(_QWORD *)(v36 + 208))
            {
LABEL_70:
              v51 = *(_QWORD *)(v32 + 328);
              if (!v51)
              {
                v52 = operator new();
                *(_DWORD *)(v52 + 8) = 0;
                *(_QWORD *)(v52 + 40) = 0;
                *(_QWORD *)(v52 + 32) = 0;
                *(_QWORD *)(v52 + 16) = 0;
                *(_QWORD *)(v52 + 24) = v52 + 32;
                *(_OWORD *)(v52 + 48) = 0u;
                *(_OWORD *)(v52 + 64) = 0u;
                *(_OWORD *)(v52 + 80) = 0u;
                v53 = (void **)(v52 + 80);
                *(_QWORD *)v52 = &off_1E42C5580;
                *(_QWORD *)(v52 + 208) = 0;
                *(_QWORD *)(v52 + 216) = 0;
                *(_OWORD *)(v52 + 96) = 0u;
                *(_OWORD *)(v52 + 112) = 0u;
                *(_OWORD *)(v52 + 128) = 0u;
                *(_OWORD *)(v52 + 144) = 0u;
                *(_OWORD *)(v52 + 160) = 0u;
                *(_OWORD *)(v52 + 176) = 0u;
                *(_OWORD *)(v52 + 185) = 0u;
                *(_DWORD *)(v52 + 224) = -1;
                *(_QWORD *)(v52 + 232) = 0;
                *(_OWORD *)(v52 + 248) = 0u;
                *(_OWORD *)(v52 + 264) = 0u;
                *(_DWORD *)(v52 + 279) = 0;
                *(_QWORD *)(v52 + 288) = 0x3FF0000000000000;
                *(_DWORD *)(v52 + 296) = 0;
                *(_WORD *)(v52 + 300) = 0;
                altitude::Tile::createTileName(v628, (unsigned int *)(v32 + 392), (uint64_t *)(*(_QWORD *)(v32 + 288) + 40), (uint64_t *)(*(_QWORD *)(v32 + 288) + 136));
                if (*(char *)(v52 + 103) < 0)
                  operator delete(*v53);
                *(_OWORD *)v53 = *(_OWORD *)v628;
                *(_QWORD *)(v52 + 96) = *(_QWORD *)&v628[16];
                *(_QWORD *)(v32 + 328) = v52;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v32);
                v51 = *(_QWORD *)(v32 + 328);
              }
              v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
              v592 = *(_OWORD *)v54;
              v55 = vsubq_f64(*(float64x2_t *)(v54 + 32), *(float64x2_t *)(v54 + 8));
              v593 = (int64x2_t)vmulq_f64(v55, v55);
              v594 = *(_OWORD *)(v54 + 24);
              v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)size + 56))(size);
              *(_QWORD *)&v57.f64[0] = v592;
              v57.f64[1] = *(float64_t *)v56;
              v58 = vsubq_f64(*(float64x2_t *)(v56 + 32), *(float64x2_t *)(v56 + 8));
              v59 = (int64x2_t)vmulq_f64(v58, v58);
              *(_QWORD *)&v60.f64[0] = v594;
              v60.f64[1] = *(float64_t *)(v56 + 24);
              v61 = vsubq_f64(v60, v57);
              v62 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v593, v59), v61, v61), (float64x2_t)vzip2q_s64(v593, v59))), (float64x2_t)xmmword_19FFB37B0);
              altitude::Tile::createClipPlanes(size, (double *)v628, fmin(fmax(vdivq_f64(v62, (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1)).f64[0] + 1.0, 1.0), 1.5));
              altitude::util::createFallbackElement(__p, (uint64_t *)(v51 + 120), (double *)v628);
              v63 = *(_QWORD *)(v36 + 208);
              if (v63)
              {
                v64 = *(__n128 **)(v602 + 664);
                if ((unint64_t)v64 >= *(_QWORD *)(v602 + 672))
                {
                  v68 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v588, *(__n128 *)(v36 + 208));
                }
                else
                {
                  v64->n128_u64[0] = v63;
                  v65 = *(_QWORD *)(v36 + 216);
                  v64->n128_u64[1] = v65;
                  if (v65)
                  {
                    v66 = (unint64_t *)(v65 + 8);
                    do
                      v67 = __ldxr(v66);
                    while (__stxr(v67 + 1, v66));
                  }
                  v68 = v64 + 1;
                }
                *(_QWORD *)(v602 + 664) = v68;
              }
              v69 = *(_QWORD *)(v36 + 120);
              if (v69)
              {
                v70 = *(__n128 **)(v602 + 664);
                if ((unint64_t)v70 >= *(_QWORD *)(v602 + 672))
                {
                  v74 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v588, *(__n128 *)(v36 + 120));
                }
                else
                {
                  v70->n128_u64[0] = v69;
                  v71 = *(_QWORD *)(v36 + 128);
                  v70->n128_u64[1] = v71;
                  if (v71)
                  {
                    v72 = (unint64_t *)(v71 + 8);
                    do
                      v73 = __ldxr(v72);
                    while (__stxr(v73 + 1, v72));
                  }
                  v74 = v70 + 1;
                }
                *(_QWORD *)(v602 + 664) = v74;
                altitude::GlobeTileComponent::destroyGeometryElement((altitude::GlobeTileComponent *)v36);
              }
              v75 = *(_DWORD *)(v32 + 392);
              if (*(_QWORD *)(v36 + 208))
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v36 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v36 + 16) + 424), *(_QWORD *)(v36 + 16), v36);
              v76 = __p[0];
              v77 = __p[1];
              if (__p[1])
              {
                v78 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
              }
              v80 = *(std::__shared_weak_count **)(v36 + 216);
              *(_QWORD *)(v36 + 208) = v76;
              *(_QWORD *)(v36 + 216) = v77;
              if (v80)
              {
                p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(p_shared_owners);
                while (__stlxr(v82 - 1, p_shared_owners));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
                v76 = *(void **)(v36 + 208);
              }
              if (v76)
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v36 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v36 + 16) + 424), *(_QWORD *)(v36 + 16), v36);
              if (__p[0])
                v83 = *(_DWORD *)(*(_QWORD *)(v36 + 16) + 392) - v75;
              else
                v83 = -1;
              *(_DWORD *)(v36 + 224) = v83;
              v84 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v85 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v31 = (_QWORD *)v602;
              goto LABEL_142;
            }
          }
          if (*(_DWORD *)(v36 + 224) != *(_DWORD *)(size + 392) - *(_DWORD *)(v32 + 392))
            goto LABEL_70;
        }
LABEL_142:
        v111 = *(_QWORD *)(size + 336);
        if (*(_BYTE *)(v31[23] + 136))
        {
          if (!v111)
          {
            v112 = operator new();
            *(_DWORD *)(v112 + 8) = 1;
            *(_QWORD *)(v112 + 40) = 0;
            *(_QWORD *)(v112 + 32) = 0;
            *(_QWORD *)(v112 + 16) = 0;
            *(_QWORD *)(v112 + 24) = v112 + 32;
            *(_OWORD *)(v112 + 48) = 0u;
            *(_OWORD *)(v112 + 64) = 0u;
            *(_QWORD *)v112 = &off_1E42C50F0;
            *(_DWORD *)(v112 + 80) = 2;
            *(_OWORD *)(v112 + 88) = 0u;
            *(_OWORD *)(v112 + 104) = 0u;
            *(_WORD *)(v112 + 120) = 257;
            *(_BYTE *)(v112 + 122) = 1;
            *(_DWORD *)(v112 + 124) = -1082130432;
            *(_QWORD *)(size + 336) = v112;
            altitude::TileComponent::onAttach(v112, size);
            v111 = *(_QWORD *)(size + 336);
          }
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 56))(v111) & 1) == 0)
          {
            v113 = *(_QWORD *)(v32 + 336);
            if (!v113)
            {
              v114 = operator new();
              *(_DWORD *)(v114 + 8) = 1;
              *(_QWORD *)(v114 + 40) = 0;
              *(_QWORD *)(v114 + 32) = 0;
              *(_QWORD *)(v114 + 16) = 0;
              *(_QWORD *)(v114 + 24) = v114 + 32;
              *(_OWORD *)(v114 + 48) = 0u;
              *(_OWORD *)(v114 + 64) = 0u;
              *(_QWORD *)v114 = &off_1E42C50F0;
              *(_DWORD *)(v114 + 80) = 2;
              *(_OWORD *)(v114 + 88) = 0u;
              *(_OWORD *)(v114 + 104) = 0u;
              *(_WORD *)(v114 + 120) = 257;
              *(_BYTE *)(v114 + 122) = 1;
              *(_DWORD *)(v114 + 124) = -1082130432;
              *(_QWORD *)(v32 + 336) = v114;
              altitude::TileComponent::onAttach(v114, v32);
              v113 = *(_QWORD *)(v32 + 336);
            }
            v115 = 0;
            v116 = *(_QWORD *)(size + 392);
            v117 = *(_DWORD *)(size + 400);
            *(_QWORD *)v628 = 20;
            *(_QWORD *)&v628[8] = 0;
            *(_QWORD *)&v628[16] = v116;
            *(_QWORD *)&v628[24] = v117;
            v118 = v31[24];
            LOBYTE(v117) = atomic_load((unsigned __int8 *)(*(_QWORD *)(v118 + 96) + 224));
            if ((v117 & 1) != 0)
              v115 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(v118 + 96) + 112))(*(_QWORD *)(v118 + 96), v628);
            *(_BYTE *)(v111 + 121) = v115;
            v119 = *(_QWORD *)(v113 + 88);
            if (v119)
            {
              v120 = v31[24];
              v121 = *(std::__shared_weak_count **)(v113 + 96);
              if (v121)
              {
                v122 = (unint64_t *)&v121->__shared_owners_;
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
                do
                  v124 = __ldxr(v122);
                while (__stxr(v124 + 1, v122));
              }
              *(_QWORD *)buf = v119;
              v635 = &v121->__vftable;
              (*(void (**)(void **__return_ptr, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v120 + 80))(__p, v120, v628, 0, v600, 2, 0, buf);
              v125 = (std::__shared_weak_count *)v635;
              if (v635)
              {
                v126 = v635 + 1;
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              if (v121)
              {
                v128 = (unint64_t *)&v121->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)__p);
              if (Status)
              {
                if (Status == 4)
                {
                  v621 = 0;
                  v622 = 0;
                  v635 = 0;
                  *(_QWORD *)&v636 = 0;
                  *(_QWORD *)buf = &v635;
                  if (altitude::RoadRequestManager::getRoadTile(*(pthread_mutex_t ***)(v602 + 192), (uint64_t)v628, &v621, (uint64_t)buf))
                  {
                    v131 = v621;
                    if (v621)
                    {
                      v132 = v622;
                      if (v622)
                      {
                        v133 = (unint64_t *)&v622->__shared_owners_;
                        do
                          v134 = __ldxr(v133);
                        while (__stxr(v134 + 1, v133));
                      }
                      if (*(_QWORD *)(v111 + 104))
                        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v111 + 16) + 424)
                                                                        + 24))(*(_QWORD *)(*(_QWORD *)(v111 + 16) + 424), *(_QWORD *)(v111 + 16), v111);
                      if (v132)
                      {
                        v135 = (unint64_t *)&v132->__shared_owners_;
                        do
                          v136 = __ldxr(v135);
                        while (__stxr(v136 + 1, v135));
                      }
                      v137 = *(std::__shared_weak_count **)(v111 + 112);
                      *(_QWORD *)(v111 + 104) = v131;
                      *(_QWORD *)(v111 + 112) = v132;
                      if (!v137)
                        goto LABEL_183;
                      v138 = (unint64_t *)&v137->__shared_owners_;
                      do
                        v139 = __ldaxr(v138);
                      while (__stlxr(v139 - 1, v138));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                      v131 = *(std::__shared_weak_count ***)(v111 + 104);
                      if (v131)
LABEL_183:
                        (*(void (**)(_QWORD, _QWORD, uint64_t, std::__shared_weak_count **))(**(_QWORD **)(*(_QWORD *)(v111 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v111 + 16) + 424), *(_QWORD *)(v111 + 16), v111, v131);
                      if (v132)
                      {
                        v140 = (unint64_t *)&v132->__shared_owners_;
                        do
                          v141 = __ldaxr(v140);
                        while (__stlxr(v141 - 1, v140));
                        if (!v141)
                        {
                          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                          std::__shared_weak_count::__release_weak(v132);
                        }
                      }
                    }
                  }
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v635);
                  v142 = v622;
                  if (v622)
                  {
                    v143 = (unint64_t *)&v622->__shared_owners_;
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                      std::__shared_weak_count::__release_weak(v142);
                    }
                  }
                }
              }
              else
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                v146 = GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
                {
                  v147 = *(_DWORD *)(size + 396);
                  v148 = *(_DWORD *)(size + 400);
                  v149 = *(_DWORD *)(size + 392);
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&buf[4] = v147;
                  LOWORD(v635) = 1024;
                  *(_DWORD *)((char *)&v635 + 2) = v148;
                  HIWORD(v635) = 1024;
                  LODWORD(v636) = v149;
                  _os_log_impl(&dword_19F029000, v146, OS_LOG_TYPE_ERROR, "Failed to load road data for tile %u %u %u", buf, 0x14u);
                }
              }
              __p[0] = &off_1E42C2D08;
              if (__p[1])
              {
                v150 = (unsigned int *)((char *)__p[1] + 128);
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
              }
              v152 = (std::__shared_weak_count *)v626[0];
              if (v626[0])
              {
                v153 = (unint64_t *)((char *)v626[0] + 8);
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              v31 = (_QWORD *)v602;
            }
            else
            {
              *(_BYTE *)(v111 + 121) = 0;
            }
          }
        }
        else
        {
          if (v111)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v111 + 8))(*(_QWORD *)(size + 336));
            *(_QWORD *)(size + 336) = 0;
          }
          v145 = *(_QWORD *)(size + 344);
          if (v145)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
            *(_QWORD *)(size + 344) = 0;
          }
        }
        if (*(_BYTE *)(v31[26] + 136))
        {
          v155 = *(_BYTE **)(size + 352);
          if (!v155)
          {
            v156 = operator new();
            *(_DWORD *)(v156 + 8) = 3;
            *(_QWORD *)(v156 + 40) = 0;
            *(_QWORD *)(v156 + 32) = 0;
            *(_QWORD *)(v156 + 16) = 0;
            *(_QWORD *)(v156 + 24) = v156 + 32;
            *(_OWORD *)(v156 + 48) = 0u;
            *(_OWORD *)(v156 + 64) = 0u;
            *(_QWORD *)v156 = &off_1E42C5FC8;
            *(_WORD *)(v156 + 80) = 257;
            *(_BYTE *)(v156 + 82) = 0;
            *(_OWORD *)(v156 + 88) = 0u;
            *(_OWORD *)(v156 + 104) = 0u;
            *(_QWORD *)(size + 352) = v156;
            altitude::TileComponent::onAttach(v156, size);
            v155 = *(_BYTE **)(size + 352);
          }
          if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v155 + 56))(v155) & 1) != 0)
            goto LABEL_352;
          v157 = *(_QWORD *)(v32 + 352);
          if (v157)
          {
            v158 = *(_QWORD *)(v157 + 88);
            v159 = *(std::__shared_weak_count **)(v157 + 96);
            if (v159)
            {
LABEL_218:
              v160 = (unint64_t *)&v159->__shared_owners_;
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
              v162 = (unint64_t *)&v159->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (v163)
              {
                if (v158)
                  goto LABEL_224;
LABEL_351:
                v155[81] = 0;
LABEL_352:
                v16 = v596;
                if (v17 == v596)
                  break;
                goto LABEL_346;
              }
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
              if (!v158)
                goto LABEL_351;
LABEL_224:
              v164 = operator new();
              *(_QWORD *)v164 = &off_1E42C4A88;
              *(_OWORD *)(v164 + 8) = 0u;
              *(_OWORD *)(v164 + 24) = 0u;
              *(_OWORD *)(v164 + 40) = 0u;
              *(_OWORD *)(v164 + 56) = 0u;
              *(_OWORD *)(v164 + 72) = 0u;
              *(_OWORD *)(v164 + 88) = 0u;
              *(_OWORD *)(v164 + 104) = 0u;
              *(_OWORD *)(v164 + 120) = 0u;
              *(_OWORD *)(v164 + 136) = 0u;
              *(_OWORD *)(v164 + 152) = 0u;
              *(_OWORD *)(v164 + 168) = 0u;
              *(_OWORD *)(v164 + 184) = 0u;
              *(_DWORD *)(v164 + 200) = 0;
              v165 = (std::__shared_weak_count *)operator new();
              v165->__shared_owners_ = 0;
              v166 = (unint64_t *)&v165->__shared_owners_;
              v165->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E88D8;
              v165->__shared_weak_owners_ = 0;
              v165[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
              v167 = *(_QWORD *)(v157 + 88);
              v168 = *(std::__shared_weak_count **)(v157 + 96);
              if (v168)
              {
                v169 = (unint64_t *)&v168->__shared_owners_;
                do
                  v170 = __ldxr(v169);
                while (__stxr(v170 + 1, v169));
              }
              v171 = *(_QWORD *)(v167 + 8);
              v172 = *(std::__shared_weak_count **)(v167 + 16);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
                do
                  v175 = __ldxr(v173);
                while (__stxr(v175 + 1, v173));
              }
              v176 = *(std::__shared_weak_count **)(v164 + 16);
              *(_QWORD *)(v164 + 8) = v171;
              *(_QWORD *)(v164 + 16) = v172;
              if (v176)
              {
                v177 = (unint64_t *)&v176->__shared_owners_;
                do
                  v178 = __ldaxr(v177);
                while (__stlxr(v178 - 1, v177));
                if (!v178)
                {
                  ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                  std::__shared_weak_count::__release_weak(v176);
                }
              }
              if (v172)
              {
                v179 = (unint64_t *)&v172->__shared_owners_;
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              if (v168)
              {
                v181 = (unint64_t *)&v168->__shared_owners_;
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                }
              }
              v183 = *(_QWORD *)(v157 + 88);
              v184 = *(std::__shared_weak_count **)(v157 + 96);
              if (v184)
              {
                v185 = (unint64_t *)&v184->__shared_owners_;
                do
                  v186 = __ldxr(v185);
                while (__stxr(v186 + 1, v185));
              }
              v187 = *(_QWORD *)(v183 + 24);
              v188 = *(std::__shared_weak_count **)(v183 + 32);
              if (v188)
              {
                v189 = (unint64_t *)&v188->__shared_owners_;
                do
                  v190 = __ldxr(v189);
                while (__stxr(v190 + 1, v189));
                do
                  v191 = __ldxr(v189);
                while (__stxr(v191 + 1, v189));
              }
              v192 = *(std::__shared_weak_count **)(v164 + 32);
              *(_QWORD *)(v164 + 24) = v187;
              *(_QWORD *)(v164 + 32) = v188;
              if (v192)
              {
                v193 = (unint64_t *)&v192->__shared_owners_;
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
              }
              if (v188)
              {
                v195 = (unint64_t *)&v188->__shared_owners_;
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              if (v184)
              {
                v197 = (unint64_t *)&v184->__shared_owners_;
                do
                  v198 = __ldaxr(v197);
                while (__stlxr(v198 - 1, v197));
                if (!v198)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              v199 = *(_QWORD *)(v157 + 88);
              v200 = *(std::__shared_weak_count **)(v157 + 96);
              if (v200)
              {
                v201 = (unint64_t *)&v200->__shared_owners_;
                do
                  v202 = __ldxr(v201);
                while (__stxr(v202 + 1, v201));
              }
              v203 = *(_QWORD *)(v199 + 40);
              v204 = *(std::__shared_weak_count **)(v199 + 48);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
                do
                  v207 = __ldxr(v205);
                while (__stxr(v207 + 1, v205));
              }
              v208 = *(std::__shared_weak_count **)(v164 + 48);
              *(_QWORD *)(v164 + 40) = v203;
              *(_QWORD *)(v164 + 48) = v204;
              if (v208)
              {
                v209 = (unint64_t *)&v208->__shared_owners_;
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              if (v204)
              {
                v211 = (unint64_t *)&v204->__shared_owners_;
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              if (v200)
              {
                v213 = (unint64_t *)&v200->__shared_owners_;
                do
                  v214 = __ldaxr(v213);
                while (__stlxr(v214 - 1, v213));
                if (!v214)
                {
                  ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                  std::__shared_weak_count::__release_weak(v200);
                }
              }
              v215 = *(_QWORD *)(v157 + 88);
              v216 = *(std::__shared_weak_count **)(v157 + 96);
              if (v216)
              {
                v217 = (unint64_t *)&v216->__shared_owners_;
                do
                  v218 = __ldxr(v217);
                while (__stxr(v218 + 1, v217));
              }
              v219 = *(_QWORD *)(v215 + 56);
              v220 = *(std::__shared_weak_count **)(v215 + 64);
              if (v220)
              {
                v221 = (unint64_t *)&v220->__shared_owners_;
                do
                  v222 = __ldxr(v221);
                while (__stxr(v222 + 1, v221));
                do
                  v223 = __ldxr(v221);
                while (__stxr(v223 + 1, v221));
              }
              v224 = *(std::__shared_weak_count **)(v164 + 64);
              *(_QWORD *)(v164 + 56) = v219;
              *(_QWORD *)(v164 + 64) = v220;
              if (v224)
              {
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              if (v220)
              {
                v227 = (unint64_t *)&v220->__shared_owners_;
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                  std::__shared_weak_count::__release_weak(v220);
                }
              }
              if (v216)
              {
                v229 = (unint64_t *)&v216->__shared_owners_;
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                  std::__shared_weak_count::__release_weak(v216);
                }
              }
              v231 = *(_QWORD *)(v157 + 88);
              v232 = *(std::__shared_weak_count **)(v157 + 96);
              if (v232)
              {
                v233 = (unint64_t *)&v232->__shared_owners_;
                do
                  v234 = __ldxr(v233);
                while (__stxr(v234 + 1, v233));
              }
              v235 = *(_QWORD *)(v231 + 120);
              v236 = *(std::__shared_weak_count **)(v231 + 128);
              if (v236)
              {
                v237 = (unint64_t *)&v236->__shared_owners_;
                do
                  v238 = __ldxr(v237);
                while (__stxr(v238 + 1, v237));
                do
                  v239 = __ldxr(v237);
                while (__stxr(v239 + 1, v237));
              }
              v240 = *(std::__shared_weak_count **)(v164 + 128);
              *(_QWORD *)(v164 + 120) = v235;
              *(_QWORD *)(v164 + 128) = v236;
              if (v240)
              {
                v241 = (unint64_t *)&v240->__shared_owners_;
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                {
                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                  std::__shared_weak_count::__release_weak(v240);
                }
              }
              if (v236)
              {
                v243 = (unint64_t *)&v236->__shared_owners_;
                do
                  v244 = __ldaxr(v243);
                while (__stlxr(v244 - 1, v243));
                if (!v244)
                {
                  ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                  std::__shared_weak_count::__release_weak(v236);
                }
              }
              if (v232)
              {
                v245 = (unint64_t *)&v232->__shared_owners_;
                do
                  v246 = __ldaxr(v245);
                while (__stlxr(v246 - 1, v245));
                if (!v246)
                {
                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                  std::__shared_weak_count::__release_weak(v232);
                }
              }
              *(_QWORD *)v628 = v164;
              *(_QWORD *)&v628[8] = v165;
              do
                v247 = __ldxr(v166);
              while (__stxr(v247 + 1, v166));
              altitude::LabelDataTileComponent::setFallbackLabelData(v155, (uint64_t *)v628);
              do
                v248 = __ldaxr(v166);
              while (__stlxr(v248 - 1, v166));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
              do
                v249 = __ldaxr(v166);
              while (__stlxr(v249 - 1, v166));
              if (!v249)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
              goto LABEL_352;
            }
          }
          else
          {
            v251 = operator new();
            *(_DWORD *)(v251 + 8) = 3;
            *(_QWORD *)(v251 + 40) = 0;
            *(_QWORD *)(v251 + 32) = 0;
            *(_QWORD *)(v251 + 16) = 0;
            *(_QWORD *)(v251 + 24) = v251 + 32;
            *(_OWORD *)(v251 + 48) = 0u;
            *(_OWORD *)(v251 + 64) = 0u;
            *(_QWORD *)v251 = &off_1E42C5FC8;
            *(_WORD *)(v251 + 80) = 257;
            *(_BYTE *)(v251 + 82) = 0;
            *(_OWORD *)(v251 + 88) = 0u;
            *(_OWORD *)(v251 + 104) = 0u;
            *(_QWORD *)(v32 + 352) = v251;
            altitude::TileComponent::onAttach(v251, v32);
            v157 = *(_QWORD *)(v32 + 352);
            v158 = *(_QWORD *)(v157 + 88);
            v159 = *(std::__shared_weak_count **)(v157 + 96);
            if (v159)
              goto LABEL_218;
          }
          if (!v158)
            goto LABEL_351;
          goto LABEL_224;
        }
        v250 = *(_QWORD *)(size + 352);
        v16 = v596;
        if (v250)
          *(_BYTE *)(v250 + 82) = 0;
LABEL_345:
        if (v17 == v16)
          break;
LABEL_346:
        v13 = v27++ >= 0x12B;
      }
      while (!v13);
    }
    operator delete(v16);
    v1 = v602;
    v252 = *(_QWORD *)(v602 + 568);
    v253 = *(_QWORD *)(v602 + 560);
    __p[0] = 0;
    __p[1] = 0;
    v626[0] = 0;
    v254 = v252 - v253;
    if (v254)
    {
      if ((v254 & 0x8000000000000000) == 0)
      {
        v255 = 24 * (v254 >> 6);
        __p[0] = operator new(v255);
        __p[1] = __p[0];
        v626[0] = (char *)__p[0] + v255;
        goto LABEL_360;
      }
LABEL_806:
      abort();
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v626[0] = 0;
  }
LABEL_360:
  (*(void (**)(_QWORD, std::string *, void **, _QWORD))(**(_QWORD **)(v1 + 176) + 72))(*(_QWORD *)(v1 + 176), v598, __p, 0);
  if (*(_QWORD *)(v1 + 568) != *(_QWORD *)(v1 + 560))
  {
    v256 = 0;
    v257 = v1 + 656;
    v258 = &dword_19F029000;
    v259 = "Failed to load height fallback data for tile %u %u %u";
    while (1)
    {
      v260 = (*(uint64_t (**)(char *))(*((_QWORD *)__p[0] + 3 * v256) + 16))((char *)__p[0] + 24 * v256);
      if (!v260)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v274 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          v275 = (_DWORD *)(v598->__r_.__value_.__r.__words[0] + (v256 << 6));
          v277 = v275[1];
          v276 = v275[2];
          LODWORD(v275) = *v275;
          *(_DWORD *)v628 = 67109632;
          *(_DWORD *)&v628[4] = v277;
          *(_WORD *)&v628[8] = 1024;
          *(_DWORD *)&v628[10] = v276;
          *(_WORD *)&v628[14] = 1024;
          *(_DWORD *)&v628[16] = (_DWORD)v275;
          _os_log_impl(v258, v274, OS_LOG_TYPE_ERROR, v259, v628, 0x14u);
        }
        goto LABEL_362;
      }
      if (v260 != 4)
        goto LABEL_362;
      v261 = (char *)__p[0] + 24 * v256;
      v262 = *((_QWORD *)v261 + 1);
      v263 = (std::__shared_weak_count *)*((_QWORD *)v261 + 2);
      if (v263)
      {
        v264 = (unint64_t *)&v263->__shared_owners_;
        do
          v265 = __ldxr(v264);
        while (__stxr(v265 + 1, v264));
      }
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v262 + 48))(buf);
      if (*(_QWORD *)buf)
        break;
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v278 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        v279 = (_DWORD *)(v598->__r_.__value_.__r.__words[0] + (v256 << 6));
        v281 = v279[1];
        v280 = v279[2];
        LODWORD(v279) = *v279;
        *(_DWORD *)v628 = 67109632;
        *(_DWORD *)&v628[4] = v281;
        *(_WORD *)&v628[8] = 1024;
        *(_DWORD *)&v628[10] = v280;
        *(_WORD *)&v628[14] = 1024;
        *(_DWORD *)&v628[16] = (_DWORD)v279;
        _os_log_impl(v258, v278, OS_LOG_TYPE_ERROR, "Got no actor when loading height fallback data for tile %u %u %u", v628, 0x14u);
      }
      v282 = (std::__shared_weak_count *)v635;
      if (!v635)
      {
LABEL_420:
        if (v263)
          goto LABEL_421;
        goto LABEL_362;
      }
LABEL_417:
      v303 = (unint64_t *)&v282->__shared_owners_;
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (v304)
        goto LABEL_420;
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
      if (v263)
      {
LABEL_421:
        v305 = (unint64_t *)&v263->__shared_owners_;
        do
          v306 = __ldaxr(v305);
        while (__stlxr(v306 - 1, v305));
        if (!v306)
        {
          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
LABEL_362:
      if (++v256 >= (unint64_t)((uint64_t)(*(_QWORD *)(v1 + 568) - *(_QWORD *)(v1 + 560)) >> 6))
        goto LABEL_427;
    }
    v266 = *(_QWORD *)(*(_QWORD *)(v1 + 584) + 8 * v256);
    v267 = *(_QWORD *)(v266 + 328);
    if (v267)
    {
      v268 = *(_QWORD *)(v267 + 208);
      if (v268)
        goto LABEL_371;
    }
    else
    {
      v283 = v257;
      v284 = v258;
      v285 = v259;
      v286 = operator new();
      *(_DWORD *)(v286 + 8) = 0;
      *(_QWORD *)(v286 + 40) = 0;
      *(_QWORD *)(v286 + 32) = 0;
      *(_QWORD *)(v286 + 16) = 0;
      *(_QWORD *)(v286 + 24) = v286 + 32;
      *(_OWORD *)(v286 + 48) = 0u;
      *(_OWORD *)(v286 + 64) = 0u;
      *(_OWORD *)(v286 + 80) = 0u;
      v287 = (void **)(v286 + 80);
      *(_QWORD *)v286 = &off_1E42C5580;
      *(_QWORD *)(v286 + 208) = 0;
      *(_QWORD *)(v286 + 216) = 0;
      *(_OWORD *)(v286 + 96) = 0u;
      *(_OWORD *)(v286 + 112) = 0u;
      *(_OWORD *)(v286 + 128) = 0u;
      *(_OWORD *)(v286 + 144) = 0u;
      *(_OWORD *)(v286 + 160) = 0u;
      *(_OWORD *)(v286 + 176) = 0u;
      *(_OWORD *)(v286 + 185) = 0u;
      *(_DWORD *)(v286 + 224) = -1;
      *(_QWORD *)(v286 + 232) = 0;
      *(_OWORD *)(v286 + 248) = 0u;
      *(_OWORD *)(v286 + 264) = 0u;
      *(_DWORD *)(v286 + 279) = 0;
      *(_QWORD *)(v286 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v286 + 296) = 0;
      *(_WORD *)(v286 + 300) = 0;
      altitude::Tile::createTileName(v628, (unsigned int *)(v266 + 392), (uint64_t *)(*(_QWORD *)(v266 + 288) + 40), (uint64_t *)(*(_QWORD *)(v266 + 288) + 136));
      if (*(char *)(v286 + 103) < 0)
        operator delete(*v287);
      *(_OWORD *)v287 = *(_OWORD *)v628;
      *(_QWORD *)(v286 + 96) = *(_QWORD *)&v628[16];
      *(_QWORD *)(v266 + 328) = v286;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v286 + 16))(v286, v266);
      v267 = *(_QWORD *)(v266 + 328);
      v259 = v285;
      v258 = v284;
      v257 = v283;
      v268 = *(_QWORD *)(v267 + 208);
      if (v268)
      {
LABEL_371:
        v269 = *(__n128 **)(v1 + 664);
        if ((unint64_t)v269 >= *(_QWORD *)(v1 + 672))
        {
          v273 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v257, *(__n128 *)(v267 + 208));
        }
        else
        {
          v269->n128_u64[0] = v268;
          v270 = *(_QWORD *)(v267 + 216);
          v269->n128_u64[1] = v270;
          if (v270)
          {
            v271 = (unint64_t *)(v270 + 8);
            do
              v272 = __ldxr(v271);
            while (__stxr(v272 + 1, v271));
          }
          v273 = v269 + 1;
        }
        *(_QWORD *)(v1 + 664) = v273;
        v288 = *(_QWORD *)(v267 + 120);
        if (!v288)
        {
LABEL_400:
          v294 = *(_DWORD *)(*(_QWORD *)(v598->__r_.__value_.__r.__words[0] + (v256 << 6) + 40) + 392);
          if (*(_QWORD *)(v267 + 208))
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v267 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v267 + 16) + 424), *(_QWORD *)(v267 + 16), v267);
          v295 = *(_QWORD *)buf;
          v296 = v635;
          if (v635)
          {
            v297 = v635 + 1;
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v299 = *(std::__shared_weak_count **)(v267 + 216);
          *(_QWORD *)(v267 + 208) = v295;
          *(_QWORD *)(v267 + 216) = v296;
          if (v299)
          {
            v300 = (unint64_t *)&v299->__shared_owners_;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
            v295 = *(_QWORD *)(v267 + 208);
          }
          if (v295)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v267 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v267 + 16) + 424), *(_QWORD *)(v267 + 16), v267);
          if (*(_QWORD *)buf)
            v302 = *(_DWORD *)(*(_QWORD *)(v267 + 16) + 392) - v294;
          else
            v302 = -1;
          v1 = v602;
          *(_DWORD *)(v267 + 224) = v302;
          v282 = (std::__shared_weak_count *)v635;
          if (!v635)
            goto LABEL_420;
          goto LABEL_417;
        }
LABEL_393:
        v289 = *(__n128 **)(v1 + 664);
        if ((unint64_t)v289 >= *(_QWORD *)(v1 + 672))
        {
          v293 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v257, *(__n128 *)(v267 + 120));
        }
        else
        {
          v289->n128_u64[0] = v288;
          v290 = *(_QWORD *)(v267 + 128);
          v289->n128_u64[1] = v290;
          if (v290)
          {
            v291 = (unint64_t *)(v290 + 8);
            do
              v292 = __ldxr(v291);
            while (__stxr(v292 + 1, v291));
          }
          v293 = v289 + 1;
        }
        *(_QWORD *)(v1 + 664) = v293;
        altitude::GlobeTileComponent::destroyGeometryElement((altitude::GlobeTileComponent *)v267);
        goto LABEL_400;
      }
    }
    v288 = *(_QWORD *)(v267 + 120);
    if (!v288)
      goto LABEL_400;
    goto LABEL_393;
  }
LABEL_427:
  v307 = (char *)__p[0];
  if (__p[0])
  {
    v308 = __p[0];
    if (__p[1] != __p[0])
    {
      v309 = (char *)__p[1] - 24;
      v310 = (void (***)(char *))((char *)__p[1] - 24);
      do
      {
        v311 = *v310;
        v310 -= 3;
        (*v311)(v309);
        v24 = v309 == v307;
        v309 = (char *)v310;
      }
      while (!v24);
      v308 = __p[0];
    }
    __p[1] = v307;
    operator delete(v308);
  }
  v312 = *(_QWORD *)(v1 + 400);
  if (v312)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v312);
    v313 = *(char **)v628;
    v314 = *(uint64_t **)(v1 + 392);
    if (v314)
    {
      v315 = 0;
      do
      {
        v316 = v314[2];
        v317 = &v313[16 * v315];
        *(_DWORD *)v317 = *((_DWORD *)v314 + 6);
        *((_QWORD *)v317 + 1) = v316;
        ++v315;
        v314 = (uint64_t *)*v314;
      }
      while (v314);
    }
    v318 = *(char **)&v628[8];
    v319 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v313) >> 4);
    if (*(char **)&v628[8] == v313)
      v320 = 0;
    else
      v320 = v319;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v313, *(unint64_t *)&v628[8], v320, 1);
    if (v318 != v313)
    {
      v321 = 0;
      v322 = v318 - 16;
      do
      {
        (*(void (**)(size_t, _QWORD, _QWORD))(*(_QWORD *)v1 + 112))(v1, *((_QWORD *)v322 + 1), *(unsigned int *)v322);
        if (v322 == v313)
          break;
        v322 -= 16;
        v13 = v321++ >= 0xB;
      }
      while (!v13);
    }
    if (v313)
      operator delete(v313);
  }
  v323 = *(_QWORD *)(v1 + 440);
  if (v323)
  {
    v617 = 0;
    v618 = 0;
    v619 = 0;
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)&v617, v323);
    v324 = v617;
    v325 = *(uint64_t **)(v1 + 432);
    if (v325)
    {
      v326 = 0;
      do
      {
        v327 = (void (*)(karo::AsyncRequestManager::RequestHandle *__hidden))v325[2];
        v328 = &v324[2 * v326];
        *(_DWORD *)v328 = *((_DWORD *)v325 + 6);
        v328[1] = v327;
        ++v326;
        v325 = (uint64_t *)*v325;
      }
      while (v325);
    }
    v329 = v618;
    v330 = 126 - 2 * __clz(((char *)v618 - (char *)v324) >> 4);
    if (v618 == v324)
      v331 = 0;
    else
      v331 = v330;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v324, (unint64_t)v618, v331, 1);
    if (v329 != v324)
    {
      v332 = 0;
      do
      {
        v334 = *((_DWORD *)v329 - 4);
        v329 -= 2;
        v333 = v334;
        v335 = v329[1];
        v336 = (altitude::GlobeTileComponent *)*((_QWORD *)v335 + 41);
        if (v336)
        {
          if (*((_BYTE *)v336 + 282))
            goto LABEL_459;
        }
        else
        {
          v337 = operator new();
          *(_DWORD *)(v337 + 8) = 0;
          *(_QWORD *)(v337 + 40) = 0;
          *(_QWORD *)(v337 + 32) = 0;
          *(_QWORD *)(v337 + 16) = 0;
          *(_QWORD *)(v337 + 24) = v337 + 32;
          *(_OWORD *)(v337 + 48) = 0u;
          *(_OWORD *)(v337 + 64) = 0u;
          *(_OWORD *)(v337 + 80) = 0u;
          v338 = (void **)(v337 + 80);
          *(_QWORD *)v337 = &off_1E42C5580;
          *(_QWORD *)(v337 + 208) = 0;
          *(_QWORD *)(v337 + 216) = 0;
          *(_OWORD *)(v337 + 96) = 0u;
          *(_OWORD *)(v337 + 112) = 0u;
          *(_OWORD *)(v337 + 128) = 0u;
          *(_OWORD *)(v337 + 144) = 0u;
          *(_OWORD *)(v337 + 160) = 0u;
          *(_OWORD *)(v337 + 176) = 0u;
          *(_OWORD *)(v337 + 185) = 0u;
          *(_DWORD *)(v337 + 224) = -1;
          *(_QWORD *)(v337 + 232) = 0;
          *(_OWORD *)(v337 + 248) = 0u;
          *(_OWORD *)(v337 + 264) = 0u;
          *(_DWORD *)(v337 + 279) = 0;
          *(_QWORD *)(v337 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v337 + 296) = 0;
          *(_WORD *)(v337 + 300) = 0;
          altitude::Tile::createTileName(v628, (unsigned int *)v335 + 98, (uint64_t *)(*((_QWORD *)v335 + 36) + 40), (uint64_t *)(*((_QWORD *)v335 + 36) + 136));
          if (*(char *)(v337 + 103) < 0)
            operator delete(*v338);
          *(_OWORD *)v338 = *(_OWORD *)v628;
          *(_QWORD *)(v337 + 96) = *(_QWORD *)&v628[16];
          *((_QWORD *)v335 + 41) = v337;
          (*(void (**)(uint64_t, void (*)(karo::AsyncRequestManager::RequestHandle *__hidden)))(*(_QWORD *)v337 + 16))(v337, v335);
          v336 = (altitude::GlobeTileComponent *)*((_QWORD *)v335 + 41);
          if (*((_BYTE *)v336 + 282))
          {
LABEL_459:
            if (v329 == v324)
              break;
            goto LABEL_529;
          }
        }
        *((_DWORD *)v335 + 97) = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88);
        *(_BYTE *)(v1 + 620) = 1;
        v339 = *(_QWORD *)(v1 + 144);
        v340 = *((_QWORD *)v335 + 36);
        v341 = (_OWORD *)(v340 + 40);
        v342 = *(_DWORD *)(v340 + 28);
        *(_QWORD *)v628 = *(_QWORD *)(v340 + 168);
        if (*(char *)(v340 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v628[8], *(const std::string::value_type **)(v340 + 40), *(_QWORD *)(v340 + 48));
          if ((*(char *)(v340 + 159) & 0x80000000) == 0)
          {
LABEL_466:
            *(_OWORD *)&v628[32] = *(_OWORD *)(v340 + 136);
            v629 = *(_QWORD *)(v340 + 152);
            goto LABEL_469;
          }
        }
        else
        {
          *(_OWORD *)&v628[8] = *v341;
          *(_QWORD *)&v628[24] = *(_QWORD *)(v340 + 56);
          if ((*(char *)(v340 + 159) & 0x80000000) == 0)
            goto LABEL_466;
        }
        std::string::__init_copy_ctor_external((std::string *)&v628[32], *(const std::string::value_type **)(v340 + 136), *(_QWORD *)(v340 + 144));
LABEL_469:
        v630 = v342 == 1;
        v631 = 256;
        v632 = 1;
        v633 = 1;
        v343 = *(_DWORD *)(v340 + 168);
        *(_OWORD *)__p = *(_OWORD *)((char *)v335 + 392);
        LODWORD(v626[0]) = v343;
        if (*(char *)(v340 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v626[1], *(const std::string::value_type **)(v340 + 40), *(_QWORD *)(v340 + 48));
        }
        else
        {
          *(_OWORD *)&v626[1] = *v341;
          v626[3] = *(void **)(v340 + 56);
        }
        v1 = v602;
        LOBYTE(v627) = 1;
        (*(void (**)(uint8_t *__return_ptr, uint64_t, void **, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v339 + 80))(buf, v339, __p, 0, v333, 1, 0, v628);
        if (SHIBYTE(v626[3]) < 0)
        {
          operator delete(v626[1]);
          v344 = (unsigned __int8 *)v635;
          v345 = (std::__shared_weak_count *)v636;
          if (!(_QWORD)v636)
            goto LABEL_478;
        }
        else
        {
          v344 = (unsigned __int8 *)v635;
          v345 = (std::__shared_weak_count *)v636;
          if (!(_QWORD)v636)
            goto LABEL_478;
        }
        v346 = (unint64_t *)&v345->__shared_owners_;
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
LABEL_478:
        if (v344)
          atomic_store(0, v344 + 504);
        if (!v345)
          goto LABEL_484;
        v348 = (unint64_t *)&v345->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
          if (SHIBYTE(v629) < 0)
          {
LABEL_496:
            operator delete(*(void **)&v628[32]);
            if ((v628[31] & 0x80000000) == 0)
              goto LABEL_486;
            goto LABEL_497;
          }
        }
        else
        {
LABEL_484:
          if (SHIBYTE(v629) < 0)
            goto LABEL_496;
        }
        if ((v628[31] & 0x80000000) == 0)
          goto LABEL_486;
LABEL_497:
        operator delete(*(void **)&v628[8]);
LABEL_486:
        v350 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)buf);
        if (v350)
        {
          if (v350 == 4)
          {
            v612 = 0;
            v613 = 0;
            __p[0] = 0;
            __p[1] = 0;
            v626[0] = 0;
            v622 = 0;
            v623 = 0;
            v621 = &v622;
            v351 = *((_QWORD *)v335 + 36);
            v352 = *(_DWORD *)(v351 + 168);
            *(_OWORD *)v628 = *(_OWORD *)((char *)v335 + 392);
            *(_DWORD *)&v628[16] = v352;
            if (*(char *)(v351 + 63) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v628[24], *(const std::string::value_type **)(v351 + 40), *(_QWORD *)(v351 + 48));
            }
            else
            {
              *(_OWORD *)&v628[24] = *(_OWORD *)(v351 + 40);
              *(_QWORD *)&v628[40] = *(_QWORD *)(v351 + 56);
            }
            LOBYTE(v629) = 1;
            if (altitude::C3bRequestManager::getResult(*(_QWORD *)(v602 + 144), (uint64_t)v628, (uint64_t)&v612, (uint64_t)__p, (uint64_t)&v621, &v609, &v605)&& __p[0] != __p[1])
            {
              altitude::GlobeTileComponent::setHiresTextures(v336, (uint64_t **)__p);
            }
            if ((v628[47] & 0x80000000) != 0)
              operator delete(*(void **)&v628[24]);
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v622);
            v357 = (char *)__p[0];
            if (__p[0])
            {
              v358 = (char *)__p[1];
              v359 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  v360 = (std::__shared_weak_count *)*((_QWORD *)v358 - 1);
                  if (v360)
                  {
                    v361 = (unint64_t *)&v360->__shared_owners_;
                    do
                      v362 = __ldaxr(v361);
                    while (__stlxr(v362 - 1, v361));
                    if (!v362)
                    {
                      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                      std::__shared_weak_count::__release_weak(v360);
                    }
                  }
                  v358 -= 16;
                }
                while (v358 != v357);
                v359 = __p[0];
              }
              __p[1] = v357;
              operator delete(v359);
            }
            v363 = v613;
            if (v613)
            {
              v364 = (unint64_t *)&v613->__shared_owners_;
              do
                v365 = __ldaxr(v364);
              while (__stlxr(v365 - 1, v364));
              if (!v365)
              {
                ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                std::__shared_weak_count::__release_weak(v363);
              }
            }
          }
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v353 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            v354 = *((_DWORD *)v335 + 99);
            v355 = *((_DWORD *)v335 + 100);
            v356 = *((_DWORD *)v335 + 98);
            *(_DWORD *)v628 = 67109632;
            *(_DWORD *)&v628[4] = v354;
            *(_WORD *)&v628[8] = 1024;
            *(_DWORD *)&v628[10] = v355;
            *(_WORD *)&v628[14] = 1024;
            *(_DWORD *)&v628[16] = v356;
            _os_log_impl(&dword_19F029000, v353, OS_LOG_TYPE_ERROR, "Failed to load hires texture for tile %u %u %u", v628, 0x14u);
          }
          *((_BYTE *)v336 + 200) = 1;
        }
        *(_QWORD *)buf = &off_1E42C2D08;
        if (v635)
        {
          v366 = (unsigned int *)(v635 + 16);
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
        }
        v368 = (std::__shared_weak_count *)v636;
        if ((_QWORD)v636)
        {
          v369 = (unint64_t *)(v636 + 8);
          do
            v370 = __ldaxr(v369);
          while (__stlxr(v370 - 1, v369));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
        v324 = v617;
        if (v329 == v617)
          break;
LABEL_529:
        v13 = v332++ >= 0xB;
      }
      while (!v13);
    }
    if (v324)
    {
      v618 = v324;
      operator delete(v324);
    }
  }
  v371 = *(_QWORD *)(v1 + 320);
  if (v371)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v371);
    v372 = *(altitude::Tile ***)v628;
    v373 = *(uint64_t **)(v1 + 312);
    if (v373)
    {
      v374 = 0;
      do
      {
        v375 = v373[2];
        v376 = (char *)&v372[2 * v374];
        *(_DWORD *)v376 = *((_DWORD *)v373 + 6);
        *((_QWORD *)v376 + 1) = v375;
        ++v374;
        v373 = (uint64_t *)*v373;
      }
      while (v373);
    }
    v377 = *(altitude::Tile ***)&v628[8];
    v378 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v372) >> 4);
    if (*(altitude::Tile ***)&v628[8] == v372)
      v379 = 0;
    else
      v379 = v378;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v372, *(unint64_t *)&v628[8], v379, 1);
    if (v377 != v372)
    {
      v380 = 0;
      v381 = v377 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadRoads((altitude::CompleteGlobeTileSetLoader *)v1, v381[1], *(unsigned int *)v381);
        if (v381 == v372)
          break;
        v381 -= 2;
        v13 = v380++ >= 0xB;
      }
      while (!v13);
    }
    if (v372)
      operator delete(v372);
  }
  v382 = *(_QWORD *)(v1 + 360);
  if (v382)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v382);
    v383 = *(altitude::Tile ***)v628;
    v384 = *(uint64_t **)(v1 + 352);
    if (v384)
    {
      v385 = 0;
      do
      {
        v386 = v384[2];
        v387 = (char *)&v383[2 * v385];
        *(_DWORD *)v387 = *((_DWORD *)v384 + 6);
        *((_QWORD *)v387 + 1) = v386;
        ++v385;
        v384 = (uint64_t *)*v384;
      }
      while (v384);
    }
    v388 = *(altitude::Tile ***)&v628[8];
    v389 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v383) >> 4);
    if (*(altitude::Tile ***)&v628[8] == v383)
      v390 = 0;
    else
      v390 = v389;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v383, *(unint64_t *)&v628[8], v390, 1);
    if (v388 != v383)
    {
      v391 = 0;
      v392 = v388 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadTraffic((altitude::CompleteGlobeTileSetLoader *)v1, v392[1], *(unsigned int *)v392, *(unsigned int *)(v1 + 608));
        if (v392 == v383)
          break;
        v392 -= 2;
        v13 = v391++ >= 0xB;
      }
      while (!v13);
    }
    if (v383)
      operator delete(v383);
  }
  v393 = *(_QWORD *)(v1 + 280);
  if (v393)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v393);
    v394 = *(altitude::Tile ***)v628;
    v395 = *(uint64_t **)(v1 + 272);
    if (v395)
    {
      v396 = 0;
      do
      {
        v397 = v395[2];
        v398 = (char *)&v394[2 * v396];
        *(_DWORD *)v398 = *((_DWORD *)v395 + 6);
        *((_QWORD *)v398 + 1) = v397;
        ++v396;
        v395 = (uint64_t *)*v395;
      }
      while (v395);
    }
    v399 = *(altitude::Tile ***)&v628[8];
    v400 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v394) >> 4);
    if (*(altitude::Tile ***)&v628[8] == v394)
      v401 = 0;
    else
      v401 = v400;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v394, *(unint64_t *)&v628[8], v401, 1);
    if (v399 != v394)
    {
      v402 = 0;
      v403 = v399 - 2;
      do
      {
        altitude::CompleteGlobeTileSetLoader::loadLabelData((altitude::CompleteGlobeTileSetLoader *)v1, v403[1], *(unsigned int *)v403);
        if (v403 == v394)
          break;
        v403 -= 2;
        v13 = v402++ >= 0xB;
      }
      while (!v13);
    }
    if (v394)
      operator delete(v394);
  }
  v404 = *(_QWORD *)(v1 + 520);
  if (v404)
  {
    memset(v628, 0, 24);
    std::vector<std::pair<unsigned int,altitude::Tile *>>::__append((void **)v628, v404);
    v405 = *(char **)v628;
    v406 = *(uint64_t **)(v1 + 512);
    if (v406)
    {
      v407 = 0;
      do
      {
        v408 = v406[2];
        v409 = &v405[16 * v407];
        *(_DWORD *)v409 = *((_DWORD *)v406 + 6);
        *((_QWORD *)v409 + 1) = v408;
        ++v407;
        v406 = (uint64_t *)*v406;
      }
      while (v406);
    }
    v410 = *(char **)&v628[8];
    v411 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v628[8] - (_QWORD)v405) >> 4);
    if (*(char **)&v628[8] == v405)
      v412 = 0;
    else
      v412 = v411;
    std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>((uint64_t)v405, *(unint64_t *)&v628[8], v412, 1);
    if (v410 != v405)
    {
      v413 = 0;
      v414 = v410 - 16;
      do
      {
        md::realistic::OverlayRenderLayer::stageLoadOperation(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 40) + 48), *((_QWORD *)v414 + 1), *(_DWORD *)v414);
        if (v414 == v405)
          break;
        v414 -= 16;
        v13 = v413++ >= 0xB;
      }
      while (!v13);
    }
    if (v405)
      operator delete(v405);
  }
  if (*(_BYTE *)(*(_QWORD *)(v1 + 216) + 104))
  {
    v415 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 40) + 48);
    v416 = *(_QWORD *)(v415 + 56);
    if (v416)
    {
      v417 = (std::mutex *)(v416 + 16);
      std::mutex::lock((std::mutex *)(v416 + 16));
      v418 = *(id *)(v416 + 8);
      std::mutex::unlock(v417);
      v419 = (void *)objc_msgSend(v418, "copy");
      v420 = *(_QWORD *)(*(_QWORD *)(v415 + 56) + 80);
      LODWORD(v417) = *(_DWORD *)(v415 + 76);
      v421 = v419;
      v621 = (std::__shared_weak_count **)v421;
      v622 = 0;
      LODWORD(v623) = (_DWORD)v417;
      v624 = v420;
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v421, "count"));
      v422 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
      v423 = &v622->__vftable;
      v622 = v422;

      v627 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v626, 0, sizeof(v626));
      v424 = v621;
      v425 = objc_msgSend(v424, "countByEnumeratingWithState:objects:count:", __p, v628, 16);
      if (v425)
      {
        v426 = *(_QWORD *)v626[0];
        do
        {
          for (i = 0; i != v425; ++i)
          {
            if (*(_QWORD *)v626[0] != v426)
              objc_enumerationMutation(v424);
            v428 = &v622->__vftable;
            objc_msgSend(*((id *)__p[1] + i), "delegate");
            v429 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v428, "addObject:", v429);

          }
          v425 = objc_msgSend(v424, "countByEnumeratingWithState:objects:count:", __p, v628, 16);
        }
        while (v425);
      }

      v430 = *(uint64_t **)(v415 + 128);
      v431 = *(uint64_t **)(v415 + 136);
      if (v430 == v431)
        goto LABEL_804;
      v577 = *(uint64_t **)(v415 + 136);
LABEL_602:
      v432 = *v430;
      if (!*v430)
        goto LABEL_601;
      v589 = *((_DWORD *)v430 + 2);
      v433 = *(_QWORD *)(v432 + 288);
      if (v433)
      {
        isPoleTile = altitude::Tile::isPoleTile((char **)(v433 + 40));
        v434 = *(_QWORD *)(v432 + 360);
        if (!v434)
          goto LABEL_601;
      }
      else
      {
        isPoleTile = 0;
        v434 = *(_QWORD *)(v432 + 360);
        if (!v434)
          goto LABEL_601;
      }
      v435 = v432;
      v436 = 0;
      v583 = v435;
      v601 = *(_DWORD *)(v433 + 168);
      v579 = (unsigned int *)(v435 + 392);
      v580 = v430;
      v620 = *(_OWORD *)(v435 + 392);
      v581 = (uint64_t **)(v434 + 24);
      v437 = 1;
      v438 = v589;
      while (1)
      {
        v439 = v437;
        if (!*(_BYTE *)(v434 + v436 + 168))
          goto LABEL_609;
        v603 = v437;
        *(_DWORD *)buf = 0;
        *(_DWORD *)&buf[4] = v601;
        v635 = 0;
        v636 = v620;
        v637 = v436;
        (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, uint8_t *, _QWORD, uint64_t, uint64_t, _QWORD, std::__shared_weak_count ***))(**(_QWORD **)(v415 + 272) + 80))(&v617, *(_QWORD *)(v415 + 272), buf, 0, v438, 2, 0, &v621);
        v440 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v617);
        if (!v440)
        {
          *(_BYTE *)(v434 + v436 + 168) = 0;
          goto LABEL_793;
        }
        if (v440 != 4)
          goto LABEL_793;
        v615 = 0;
        v616 = 0;
        v613 = 0;
        v614 = 0;
        v612 = &v613;
        v441 = *(pthread_mutex_t ***)(v415 + 272);
        pthread_mutex_lock(v441[5]);
        memset(v628, 0, 20);
        *(_QWORD *)&v628[24] = 0x3FF0000000000000;
        (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, uint8_t *, _BYTE *))&(*v441)[1].__opaque[24])(&v605, v441, buf, v628);
        v442 = v605;
        v443 = v606;
        if (v606)
        {
          v444 = (unint64_t *)&v606->__shared_owners_;
          do
            v445 = __ldxr(v444);
          while (__stxr(v445 + 1, v444));
        }
        pthread_mutex_lock(*(pthread_mutex_t **)(v442 + 152));
        v446 = *(_DWORD *)(v442 + 160);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v442 + 152));
        v591 = (_BYTE *)(v434 + v436 + 168);
        if ((v446 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v442 + 40))(v442) & 1) == 0)
        {
          v599 = 0;
          v590 = 0;
          v451 = 0;
          v585 = 0;
          v456 = 0;
          if (!v443)
            goto LABEL_640;
        }
        else
        {
          v590 = *(_DWORD *)(v442 + 208);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v442 + 40))(v442))
          {
            v447 = *(_QWORD *)(v442 + 288);
            v448 = *(std::__shared_weak_count **)(v442 + 296);
            if (v448)
            {
              v449 = (unint64_t *)&v448->__shared_owners_;
              do
                v450 = __ldxr(v449);
              while (__stxr(v450 + 1, v449));
            }
          }
          else
          {
            v447 = 0;
            v448 = 0;
          }
          v615 = v447;
          v616 = v448;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v442 + 40))(v442))
          {
            v451 = *(std::__shared_weak_count **)(v442 + 320);
            v585 = *(_QWORD *)(v442 + 312);
            if (v451)
            {
              v452 = (unint64_t *)&v451->__shared_owners_;
              do
                v453 = __ldxr(v452);
              while (__stxr(v453 + 1, v452));
            }
          }
          else
          {
            v585 = 0;
            v451 = 0;
          }
          v454 = *(_QWORD **)(v442 + 328);
          __p[1] = 0;
          v626[0] = 0;
          __p[0] = &__p[1];
          std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)__p, v454, (_QWORD *)(v442 + 336));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v613);
          v455 = __p[1];
          v612 = (std::__shared_weak_count **)__p[0];
          v613 = (std::__shared_weak_count *)__p[1];
          v614 = v626[0];
          if (v626[0])
          {
            *((_QWORD *)__p[1] + 2) = &v613;
            __p[0] = &__p[1];
            __p[1] = 0;
            v626[0] = 0;
            v455 = 0;
          }
          else
          {
            v612 = &v613;
          }
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v455);
          v599 = *(_DWORD *)(v442 + 304);
          v456 = 1;
          if (!v443)
            goto LABEL_640;
        }
        v457 = (unint64_t *)&v443->__shared_owners_;
        do
          v458 = __ldaxr(v457);
        while (__stlxr(v458 - 1, v457));
        if (!v458)
        {
          ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
          std::__shared_weak_count::__release_weak(v443);
          v459 = v606;
          if (!v606)
            goto LABEL_646;
          goto LABEL_641;
        }
LABEL_640:
        v459 = v606;
        if (!v606)
          goto LABEL_646;
LABEL_641:
        v460 = (unint64_t *)&v459->__shared_owners_;
        do
          v461 = __ldaxr(v460);
        while (__stlxr(v461 - 1, v460));
        if (!v461)
        {
          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
          std::__shared_weak_count::__release_weak(v459);
        }
LABEL_646:
        v462 = *(void **)&v628[8];
        *(_QWORD *)&v628[8] = 0;

        pthread_mutex_unlock(v441[5]);
        if ((v456 & 1) != 0)
        {
          v584 = v451;
          if (v590 < *(_DWORD *)(v415 + 76))
          {
            (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v415 + 272) + 48))(*(_QWORD *)(v415 + 272), buf);
            (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, uint8_t *, _QWORD, _QWORD, uint64_t, _QWORD, std::__shared_weak_count ***))(**(_QWORD **)(v415 + 272) + 80))(&v609, *(_QWORD *)(v415 + 272), buf, 0, v589, 2, 0, &v621);
            v609 = &off_1E42C2D08;
            if (v610)
            {
              v463 = (unsigned int *)(v610 + 128);
              do
                v464 = __ldaxr(v463);
              while (__stlxr(v464 - 1, v463));
            }
            v465 = v611;
            if (v611)
            {
              v466 = (unint64_t *)&v611->__shared_owners_;
              do
                v467 = __ldaxr(v466);
              while (__stlxr(v467 - 1, v466));
              if (!v467)
              {
                ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                std::__shared_weak_count::__release_weak(v465);
              }
            }
            goto LABEL_657;
          }
          v586 = v434 + 16 * v436;
          v473 = *(_QWORD *)(v586 + 88);
          if (v473)
          {
            v474 = *(__n128 **)(v415 + 160);
            if ((unint64_t)v474 >= *(_QWORD *)(v415 + 168))
            {
              v478 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v415 + 152, *(__n128 *)(v586 + 88));
            }
            else
            {
              v474->n128_u64[0] = v473;
              v475 = *(_QWORD *)(v434 + 16 * v436 + 96);
              v474->n128_u64[1] = v475;
              if (v475)
              {
                v476 = (unint64_t *)(v475 + 8);
                do
                  v477 = __ldxr(v476);
                while (__stxr(v477 + 1, v476));
              }
              v478 = v474 + 1;
            }
            *(_QWORD *)(v415 + 160) = v478;
          }
          v479 = *(_QWORD *)(v586 + 120);
          v587 = (__int128 *)(v586 + 120);
          if (!v479)
            goto LABEL_706;
          v481 = *(char **)(v415 + 184);
          v480 = *(_QWORD *)(v415 + 192);
          if ((unint64_t)v481 < v480)
          {
            *(_QWORD *)v481 = v479;
            v482 = *(_QWORD *)(v434 + 16 * v436 + 128);
            *((_QWORD *)v481 + 1) = v482;
            if (v482)
            {
              v483 = (unint64_t *)(v482 + 8);
              do
                v484 = __ldxr(v483);
              while (__stxr(v484 + 1, v483));
            }
            v485 = v481 + 16;
            goto LABEL_705;
          }
          v486 = *(char **)(v415 + 176);
          v487 = (v481 - v486) >> 4;
          v488 = v487 + 1;
          if ((unint64_t)(v487 + 1) >> 60)
            abort();
          v489 = v480 - (_QWORD)v486;
          if (v489 >> 3 > v488)
            v488 = v489 >> 3;
          if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFF0)
            v490 = 0xFFFFFFFFFFFFFFFLL;
          else
            v490 = v488;
          if (v490 >> 60)
LABEL_807:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v491 = (char *)operator new(16 * v490);
          v492 = &v491[16 * v487];
          v493 = *v587;
          *(_OWORD *)v492 = *v587;
          if (*((_QWORD *)&v493 + 1))
          {
            v494 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
            do
              v495 = __ldxr(v494);
            while (__stxr(v495 + 1, v494));
            v486 = *(char **)(v415 + 176);
            v481 = *(char **)(v415 + 184);
          }
          v496 = &v491[16 * v490];
          v485 = v492 + 16;
          if (v481 == v486)
          {
            *(_QWORD *)(v415 + 176) = v492;
            *(_QWORD *)(v415 + 184) = v485;
            *(_QWORD *)(v415 + 192) = v496;
          }
          else
          {
            do
            {
              v497 = *((_OWORD *)v481 - 1);
              v481 -= 16;
              *((_OWORD *)v492 - 1) = v497;
              v492 -= 16;
              *(_QWORD *)v481 = 0;
              *((_QWORD *)v481 + 1) = 0;
            }
            while (v481 != v486);
            v486 = *(char **)(v415 + 176);
            v498 = *(char **)(v415 + 184);
            *(_QWORD *)(v415 + 176) = v492;
            *(_QWORD *)(v415 + 184) = v485;
            *(_QWORD *)(v415 + 192) = v496;
            while (v498 != v486)
            {
              v499 = (std::__shared_weak_count *)*((_QWORD *)v498 - 1);
              if (v499)
              {
                v500 = (unint64_t *)&v499->__shared_owners_;
                do
                  v501 = __ldaxr(v500);
                while (__stlxr(v501 - 1, v500));
                if (!v501)
                {
                  ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                  std::__shared_weak_count::__release_weak(v499);
                }
              }
              v498 -= 16;
            }
          }
          if (v486)
            operator delete(v486);
LABEL_705:
          *(_QWORD *)(v415 + 184) = v485;
LABEL_706:
          v502 = *(_QWORD *)(v583 + 328);
          if (v502)
            goto LABEL_710;
          v503 = operator new();
          *(_DWORD *)(v503 + 8) = 0;
          *(_QWORD *)(v503 + 40) = 0;
          *(_QWORD *)(v503 + 32) = 0;
          *(_QWORD *)(v503 + 16) = 0;
          *(_QWORD *)(v503 + 24) = v503 + 32;
          *(_OWORD *)(v503 + 48) = 0u;
          *(_OWORD *)(v503 + 64) = 0u;
          *(_QWORD *)v503 = &off_1E42C5580;
          *(_OWORD *)(v503 + 80) = 0u;
          v504 = (void **)(v503 + 80);
          *(_QWORD *)(v503 + 208) = 0;
          *(_QWORD *)(v503 + 216) = 0;
          *(_OWORD *)(v503 + 96) = 0u;
          *(_OWORD *)(v503 + 112) = 0u;
          *(_OWORD *)(v503 + 128) = 0u;
          *(_OWORD *)(v503 + 144) = 0u;
          *(_OWORD *)(v503 + 160) = 0u;
          *(_OWORD *)(v503 + 176) = 0u;
          *(_OWORD *)(v503 + 185) = 0u;
          *(_QWORD *)(v503 + 232) = 0;
          *(_DWORD *)(v503 + 224) = -1;
          *(_OWORD *)(v503 + 248) = 0u;
          *(_OWORD *)(v503 + 264) = 0u;
          *(_DWORD *)(v503 + 279) = 0;
          *(_QWORD *)(v503 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v503 + 296) = 0;
          *(_WORD *)(v503 + 300) = 0;
          altitude::Tile::createTileName(v628, v579, (uint64_t *)(*(_QWORD *)(v583 + 288) + 40), (uint64_t *)(*(_QWORD *)(v583 + 288) + 136));
          if (*(char *)(v503 + 103) < 0)
            operator delete(*v504);
          *(_OWORD *)v504 = *(_OWORD *)v628;
          *(_QWORD *)(v503 + 96) = *(_QWORD *)&v628[16];
          *(_QWORD *)(v583 + 328) = v503;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v503 + 16))(v503, v583);
          v502 = *(_QWORD *)(v583 + 328);
          if (v502)
          {
LABEL_710:
            v505 = *(_QWORD *)(v502 + 120);
            v506 = *(std::__shared_weak_count **)(v502 + 128);
            if (v506)
            {
              v507 = (unint64_t *)&v506->__shared_owners_;
              do
                v508 = __ldxr(v507);
              while (__stxr(v508 + 1, v507));
            }
            v509 = isPoleTile;
            if (!v505)
              v509 = 0;
            if (v509 == 1)
            {
              v578 = v506;
              v510 = (std::__shared_weak_count *)operator new(0xA8uLL);
              v510->__shared_owners_ = 0;
              v510->__shared_weak_owners_ = 0;
              v510->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6140;
              strcpy((char *)&v510[1].__shared_owners_, "OverlayPole/Element");
              HIBYTE(v510[2].__vftable) = 19;
              v510[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4580;
              v510[2].__shared_owners_ = 0;
              LOBYTE(v510[2].__shared_weak_owners_) = 1;
              v510[3].std::__shared_count = 0u;
              *(_OWORD *)&v510[3].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v510[4].__shared_owners_ = 0u;
              v510[5].std::__shared_count = 0u;
              v510[5].__shared_weak_owners_ = 0;
              LOBYTE(v510[6].__vftable) = 1;
              v510[6].__shared_owners_ = 0;
              v510[6].__shared_weak_owners_ = 0;
              v511 = *(_DWORD *)(v583 + 392);
              v512 = *(_DWORD *)(v583 + 396);
              v513 = *(_DWORD *)(v583 + 400);
              v515 = *(_QWORD **)(v505 + 48);
              v514 = *(_QWORD **)(v505 + 56);
              v607 = v510 + 1;
              v608 = v510;
              if (v511 >= 0x1F)
                v516 = 31;
              else
                v516 = v511;
              LOBYTE(v605) = -1;
              BYTE1(v605) = v511;
              HIDWORD(v605) = ~(-1 << v516) - v512;
              LODWORD(v606) = v513;
              v595 = v514;
              v597 = (std::string *)v434;
              if (v515 == v514)
              {
                altitude::OverlayTileComponent::setOverlayElement(v434, v436, (uint64_t *)&v607);
                v517 = v584;
                goto LABEL_748;
              }
              while (1)
              {
                v518 = BYTE1(v605);
                v519 = **(_QWORD **)(*(_QWORD *)(*v515 + 216) + 64);
                v521 = *(_QWORD *)(v519 + 40);
                v520 = *(_QWORD *)(v519 + 48);
                v522 = *(_QWORD *)(v519 + 8);
                if ((*(_BYTE *)(v519 + 16) & 2) == 0)
                {
                  v523 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
                  if (v523 != -1)
                  {
                    *(_QWORD *)v628 = v604;
                    __p[0] = v628;
                    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  }
                }
                v524 = v520 - v521;
                v525 = v524 / v522 * v522;
                v526 = v524 % v522;
                if (v524 == v524 % v522)
                  v527 = 0;
                else
                  v527 = *(_QWORD *)(v519 + 72);
                v528 = 626172.136 / (double)(1 << v518);
                v529 = **(_QWORD ***)(*(_QWORD *)(*v515 + 216) + 64);
                altitude::HeightMeshBuilder::computeBounds<ggl::CommonMesh::BufferPos4UV>((uint64_t)&v605, 32, v527, (v529[6] - v529[5]) / v529[1], (uint64_t)__p, 0.0, 0.0, v528);
                v530 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v515 + 24))(*v515);
                v531 = *(_OWORD *)v530;
                *(_QWORD *)&v628[16] = *(_QWORD *)(v530 + 16);
                *(_OWORD *)v628 = v531;
                v532 = *(_OWORD *)(v530 + 24);
                *(_QWORD *)&v628[40] = *(_QWORD *)(v530 + 40);
                *(_OWORD *)&v628[24] = v532;
                v629 = *(_QWORD *)(v530 + 48);
                v533 = *(_QWORD *)(*(_QWORD *)(v415 + 40) + 136);
                v534 = *(_QWORD *)(*v515 + 216);
                v535 = *(_QWORD *)(v534 + 64);
                v536 = *(std::__shared_weak_count **)(v415 + 240);
                v604[0] = *(_QWORD *)(v415 + 232);
                v604[1] = (uint64_t)v536;
                if (v536)
                {
                  v537 = (unint64_t *)&v536->__shared_owners_;
                  do
                    v538 = __ldxr(v537);
                  while (__stxr(v538 + 1, v537));
                }
                OverlayElement = altitude::Renderable::createOverlayElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v533 + 8) + 40) + 48), (uint64_t)v628, (uint64_t)__p, *(_QWORD *)v535, *(std::__shared_weak_count **)(v535 + 8), (uint64_t *)(v534 + 96), v604, *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v415 + 280), v599);
                if (!v536)
                  goto LABEL_812;
                v540 = (unint64_t *)&v536->__shared_owners_;
                do
                  v541 = __ldaxr(v540);
                while (__stlxr(v541 - 1, v540));
                if (!v541)
                {
                  ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                  std::__shared_weak_count::__release_weak(v536);
                  if (*(_BYTE *)(v415 + 296))
                  {
LABEL_736:
                    v542 = *(_QWORD *)(OverlayElement + 192);
                    v543 = *(_QWORD *)(v542 + 64);
                    *(_QWORD *)(v543 + 64) = *(_QWORD *)(v415 + 248);
                    *(_QWORD *)(v543 + 72) = 0;
                    v544 = *(_QWORD *)(v542 + 160);
                    v545 = *(std::__shared_weak_count **)(v544 + 72);
                    *(_QWORD *)(v544 + 64) = 0;
                    *(_QWORD *)(v544 + 72) = 0;
                    if (v545)
                    {
                      v546 = (unint64_t *)&v545->__shared_owners_;
                      do
                        v547 = __ldaxr(v546);
                      while (__stlxr(v547 - 1, v546));
                      if (!v547)
                      {
                        ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
                        std::__shared_weak_count::__release_weak(v545);
                      }
                    }
                  }
                }
                else
                {
LABEL_812:
                  if (*(_BYTE *)(v415 + 296))
                    goto LABEL_736;
                }
                ((void (*)(std::__shared_weak_count *, uint64_t))v607->__on_zero_shared)(v607, OverlayElement);
                if (v527 && v524 != v526)
                {
                  v548 = *(_QWORD *)(v519 + 64);
                  if (v548 <= v525)
                    v548 = v525;
                  *(_QWORD *)(v519 + 56) = 0;
                  *(_QWORD *)(v519 + 64) = v548;
                }
                ++v515;
                v434 = (uint64_t)v597;
                if (v515 == v595)
                {
                  v510 = v608;
                  altitude::OverlayTileComponent::setOverlayElement((uint64_t)v597, v436, (uint64_t *)&v607);
                  v517 = v584;
                  v506 = v578;
                  if (v510)
                  {
LABEL_748:
                    v549 = (unint64_t *)&v510->__shared_owners_;
                    do
                      v550 = __ldaxr(v549);
                    while (__stlxr(v550 - 1, v549));
                    if (!v550)
                    {
                      ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
                      std::__shared_weak_count::__release_weak(v510);
                    }
                  }
LABEL_764:
                  if (*(_QWORD *)v587)
                    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v434 + 16) + 424)
                                                                    + 24))(*(_QWORD *)(*(_QWORD *)(v434 + 16) + 424), *(_QWORD *)(v434 + 16), v434);
                  if (v517)
                  {
                    v559 = (unint64_t *)&v517->__shared_owners_;
                    do
                      v560 = __ldxr(v559);
                    while (__stxr(v560 + 1, v559));
                  }
                  v561 = v585;
                  *(_QWORD *)v587 = v585;
                  v562 = v434 + 16 * v436;
                  v563 = *(std::__shared_weak_count **)(v562 + 128);
                  *(_QWORD *)(v562 + 128) = v517;
                  if (v563)
                  {
                    v564 = (unint64_t *)&v563->__shared_owners_;
                    do
                      v565 = __ldaxr(v564);
                    while (__stlxr(v565 - 1, v564));
                    if (!v565)
                    {
                      ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                      std::__shared_weak_count::__release_weak(v563);
                    }
                    v561 = *(_QWORD *)v587;
                  }
                  if (v561)
                    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v434 + 16) + 424)
                                                                    + 16))(*(_QWORD *)(*(_QWORD *)(v434 + 16) + 424), *(_QWORD *)(v434 + 16), v434);
                  *v591 = 0;
                  *(_DWORD *)(v434 + 84) = v590;
                  v438 = v589;
                  if (v581 != (uint64_t **)&v612)
                    std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>(v581, v612, &v613);
                  if (v506)
                  {
                    v566 = (unint64_t *)&v506->__shared_owners_;
                    do
                      v567 = __ldaxr(v566);
                    while (__stlxr(v567 - 1, v566));
                    if (!v567)
                    {
                      ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
                      std::__shared_weak_count::__release_weak(v506);
                    }
                  }
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v613);
                  if (!v584)
                    goto LABEL_788;
                  v568 = (unint64_t *)&v584->__shared_owners_;
                  do
                    v569 = __ldaxr(v568);
                  while (__stlxr(v569 - 1, v568));
                  if (!v569)
                  {
                    ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
                    std::__shared_weak_count::__release_weak(v584);
                    v470 = v616;
                    if (v616)
                      goto LABEL_789;
                  }
                  else
                  {
LABEL_788:
                    v470 = v616;
                    if (v616)
                    {
LABEL_789:
                      v570 = (unint64_t *)&v470->__shared_owners_;
                      do
                        v472 = __ldaxr(v570);
                      while (__stlxr(v472 - 1, v570));
                      goto LABEL_791;
                    }
                  }
                  goto LABEL_793;
                }
              }
            }
          }
          else
          {
            v506 = 0;
          }
          v551 = *(_QWORD *)(v615 + 48);
          v552 = *(_QWORD *)(v615 + 56);
          if (v551 != v552 && *(_BYTE *)(v415 + 296))
          {
LABEL_757:
            v553 = *(_QWORD *)(*(_QWORD *)v551 + 192);
            v554 = *(_QWORD *)(v553 + 64);
            *(_QWORD *)(v554 + 64) = *(_QWORD *)(v415 + 248);
            *(_QWORD *)(v554 + 72) = 0;
            v555 = *(_QWORD *)(v553 + 160);
            v556 = *(std::__shared_weak_count **)(v555 + 72);
            *(_QWORD *)(v555 + 64) = 0;
            *(_QWORD *)(v555 + 72) = 0;
            if (v556)
            {
              v557 = (unint64_t *)&v556->__shared_owners_;
              do
                v558 = __ldaxr(v557);
              while (__stlxr(v558 - 1, v557));
              if (!v558)
              {
                ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
                std::__shared_weak_count::__release_weak(v556);
              }
            }
            while (1)
            {
              v551 += 8;
              if (v551 == v552)
                break;
              if (*(_BYTE *)(v415 + 296))
                goto LABEL_757;
            }
          }
          altitude::OverlayTileComponent::setOverlayElement(v434, v436, &v615);
          v517 = v584;
          goto LABEL_764;
        }
        *v591 = 0;
LABEL_657:
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v613);
        v438 = v589;
        if (!v451)
          goto LABEL_661;
        v468 = (unint64_t *)&v451->__shared_owners_;
        do
          v469 = __ldaxr(v468);
        while (__stlxr(v469 - 1, v468));
        if (!v469)
        {
          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
          std::__shared_weak_count::__release_weak(v451);
          v470 = v616;
          if (!v616)
            goto LABEL_793;
        }
        else
        {
LABEL_661:
          v470 = v616;
          if (!v616)
            goto LABEL_793;
        }
        v471 = (unint64_t *)&v470->__shared_owners_;
        do
          v472 = __ldaxr(v471);
        while (__stlxr(v472 - 1, v471));
LABEL_791:
        if (!v472)
        {
          ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
          std::__shared_weak_count::__release_weak(v470);
        }
LABEL_793:
        v617 = &off_1E42C2D08;
        if (v618)
        {
          v571 = (unsigned int *)(v618 + 16);
          do
            v572 = __ldaxr(v571);
          while (__stlxr(v572 - 1, v571));
        }
        v573 = v619;
        if (v619)
        {
          v574 = (unint64_t *)&v619->__shared_owners_;
          do
            v575 = __ldaxr(v574);
          while (__stlxr(v575 - 1, v574));
          if (!v575)
          {
            ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
            std::__shared_weak_count::__release_weak(v573);
          }
        }
        v439 = v603;
LABEL_609:
        v437 = 0;
        v436 = 1;
        if ((v439 & 1) == 0)
        {
          v430 = v580;
          v431 = v577;
LABEL_601:
          v430 += 2;
          if (v430 == v431)
          {
            v430 = *(uint64_t **)(v415 + 128);
LABEL_804:
            *(_QWORD *)(v415 + 136) = v430;
            v576 = &v622->__vftable;
            v622 = 0;

            return;
          }
          goto LABEL_602;
        }
      }
    }
  }
}

void sub_19F52EEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,void *a62)
{
  void *v62;
  void *v63;
  void *v64;

  _Unwind_Resume(a1);
}

void altitude::TileSetNode::swap(altitude::TileSetNode *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = (char *)*((_QWORD *)this + 5);
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 != v2)
  {
    *((_QWORD *)this + 6) = v2;
    v3 = v2;
  }
  v5 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 9);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 8 * v6);
      if (!v9)
        goto LABEL_7;
      v10 = *((_QWORD *)this + 7);
      if ((unint64_t)v3 >= v10)
        break;
      *(_QWORD *)v3 = v9;
      v8 = v3 + 8;
LABEL_6:
      *((_QWORD *)this + 6) = v8;
      v3 = v8;
      v5 = *((_QWORD *)this + 8);
      v4 = *((_QWORD *)this + 9);
LABEL_7:
      v6 = ++v7;
      if (v7 >= (unint64_t)((v4 - v5) >> 3))
      {
        if (v4 != v5)
          *((_QWORD *)this + 9) = v5;
        return;
      }
    }
    v11 = (char *)*((_QWORD *)this + 5);
    v12 = (v3 - v11) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v10 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
      v9 = *(_QWORD *)(v5 + 8 * v6);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    *v17 = v9;
    v8 = (char *)(v17 + 1);
    if (v3 == v11)
    {
      v11 = v3;
    }
    else
    {
      v18 = v3 - 8 - v11;
      if (v18 < 0x168)
      {
        v19 = v3;
        goto LABEL_33;
      }
      if (&v16[v3 - v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v3 - v11 - 8])
      {
        v19 = v3;
        goto LABEL_33;
      }
      if (&v3[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v3 - 8)
      {
        v19 = v3;
        goto LABEL_33;
      }
      if ((unint64_t)(v11 - v16) < 0x20)
      {
        v19 = v3;
        goto LABEL_33;
      }
      v20 = (v18 >> 3) + 1;
      v19 = &v3[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      v21 = &v16[8 * v12 - 16];
      v22 = v3 - 16;
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_33:
          v25 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v25;
        }
        while (v19 != v11);
        v11 = (char *)*((_QWORD *)this + 5);
      }
    }
    *((_QWORD *)this + 5) = v17;
    *((_QWORD *)this + 6) = v8;
    *((_QWORD *)this + 7) = &v16[8 * v15];
    if (v11)
      operator delete(v11);
    goto LABEL_6;
  }
}

void altitude::CompleteGlobeTileSetLoader::computeTileViewRelation(uint64_t a1, _DWORD *a2, unint64_t *a3, altitude::Tile *this, _QWORD *a5, uint64_t a6, int a7)
{
  unint64_t v7;
  char *v10;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  BOOL v19;
  BOOL v20;
  double *v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  char v39;
  char *TileView;
  int isCulled;
  BOOL v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  float v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  char **v73;
  int v75;
  char **v76[2];

  v7 = *a3;
  if (*a3)
  {
    v10 = (char *)this;
    v12 = 0;
    v73 = (char **)(a5 + 9);
    v62 = a5 + 3;
    v63 = a5 + 1;
    v60 = a5 + 7;
    v61 = a5 + 5;
    while (1)
    {
      v75 = 1065353216;
      v14 = v7 <= 4 ? (uint64_t *)&a3[v12 + 1] : (uint64_t *)(a3[5] + 8 * v12);
      v15 = *v14;
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_DWORD *)(v16 + 208);
      v18 = *(float *)(v16 + 200);
      v19 = !v15 || v10 == 0;
      v20 = v19;
      if (*(_DWORD *)(v15 + 1296) != 3)
        break;
      if (v20)
        goto LABEL_19;
      v66 = v18;
      v72 = *(float *)(v15 + 1316);
      v21 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 24))(v15 + 40);
      v22 = (double *)(*(uint64_t (**)(char *))(*(_QWORD *)v10 + 24))(v10);
      v23 = (double *)(*(uint64_t (**)(char *))(*(_QWORD *)v10 + 56))(v10);
      v24 = *v23 + (v23[3] - *v23) * 0.5;
      v25 = v23[1] + (v23[4] - v23[1]) * 0.5;
      v26 = v23[2] + (v23[5] - v23[2]) * 0.5;
      v28 = v22[4];
      v27 = v22[5];
      v71 = v22[6];
      v29 = v22[3];
      v69 = v26;
      v70 = v22[2];
      v30 = -(v27 * v25 - v26 * v28) - (v27 * v25 - v26 * v28);
      v31 = -(v26 * v29 - v27 * v24) - (v26 * v29 - v27 * v24);
      v32 = -(v28 * v24 - v25 * v29) - (v28 * v24 - v25 * v29);
      v67 = *v22;
      v68 = v22[1];
      v33 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 56))(v10);
      v34 = vsubq_f64(*(float64x2_t *)(v33 + 32), *(float64x2_t *)(v33 + 8));
      v35 = vmulq_f64(v34, v34);
      v36 = sqrt(v35.f64[0]+ (*(double *)(v33 + 24) - *(double *)v33) * (*(double *)(v33 + 24) - *(double *)v33)+ v35.f64[1]);
      v35.f64[0] = *v21 - (v24 + v67 + v32 * v28 + v30 * v71 - v31 * v27);
      v37 = v21[1] - (v25 + v68 + v30 * v27 + v31 * v71 - v32 * v29);
      v38 = v21[2] - (v69 + v70 + v32 * v71 + v31 * v29 - v30 * v28);
      if (fmax(sqrt(v35.f64[0] * v35.f64[0] + v37 * v37 + v38 * v38) - v36 * 0.5, 0.0) <= v72)
      {
        v39 = 0;
        v18 = v66;
LABEL_27:
        altitude::Tile::computeTileResolution(v10, v15, a2, v17, (float *)&v75, a6, v18);
        goto LABEL_28;
      }
      v39 = 1;
LABEL_28:
      v43 = v75;
      if (*a3 <= 4)
        v44 = &a3[v12 + 1];
      else
        v44 = (unint64_t *)(a3[5] + 8 * v12);
      v45 = *v44;
      v46 = *a5;
      if (*a5 <= 3uLL)
      {
        *a5 = v46 + 1;
        v13 = &a5[2 * v46];
        *((_DWORD *)v13 + 2) = v43;
        *((_BYTE *)v13 + 12) = v39;
        v13[2] = v45;
      }
      else
      {
        if (v46 == 4)
        {
          v76[0] = v73;
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v76, v63);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v76, v62);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v76, v61);
          std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](v76, v60);
        }
        v48 = (char *)a5[10];
        v47 = a5[11];
        if ((unint64_t)v48 >= v47)
        {
          v50 = a6;
          v51 = *v73;
          v52 = (v48 - *v73) >> 4;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 60)
            abort();
          v54 = v47 - (_QWORD)v51;
          if (v54 >> 3 > v53)
            v53 = v54 >> 3;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
            v55 = 0xFFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            if (v55 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v56 = (char *)operator new(16 * v55);
          }
          else
          {
            v56 = 0;
          }
          v57 = &v56[16 * v52];
          *(_DWORD *)v57 = v43;
          v57[4] = v39;
          *((_QWORD *)v57 + 1) = v45;
          v58 = v57;
          a6 = v50;
          if (v48 != v51)
          {
            do
            {
              *((_OWORD *)v58 - 1) = *((_OWORD *)v48 - 1);
              v58 -= 16;
              v48 -= 16;
            }
            while (v48 != v51);
            v48 = *v73;
          }
          v10 = (char *)this;
          v49 = v57 + 16;
          a5[9] = v58;
          a5[10] = v57 + 16;
          a5[11] = &v56[16 * v55];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_DWORD *)v48 = v43;
          v48[4] = v39;
          v49 = v48 + 16;
          *((_QWORD *)v48 + 1) = v45;
        }
        a5[10] = v49;
        ++*a5;
      }
      ++v12;
      v7 = *a3;
      if (v12 >= *a3)
        return;
    }
    if (!v20)
    {
      TileView = altitude::Tile::getOrCreateTileView((altitude::Tile *)v10, (const altitude::View *)v15);
      isCulled = altitude::TileView::isCulled((altitude::TileView *)TileView, a6);
      v39 = isCulled;
      if (isCulled)
        v42 = a7 == 0;
      else
        v42 = 0;
      if (v42)
        goto LABEL_28;
      goto LABEL_27;
    }
LABEL_19:
    v39 = 0;
    goto LABEL_28;
  }
}

uint64_t altitude::CompleteGlobeTileSetLoader::loadTileMetaData(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, unsigned int a3)
{
  uint64_t v6;
  double v7;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  altitude::TriggerManager::Trigger *v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  altitude::TriggerManager::Trigger **v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  altitude::TriggerManager::Trigger **v29;
  size_t *v30;
  size_t v31;
  char *v32;
  int v33;
  int v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  __int128 *p_p;
  _BYTE *v47;
  __int128 *v48;
  _BYTE *v49;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void **v56;
  char *v57;
  char *v59;
  uint64_t *v60;
  char *v61;
  void *v62;
  char *v63;
  size_t v65;
  __int128 *p_dst;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  __int128 *v70;
  _BYTE *v71;
  size_t v72;
  __int128 *v73;
  _BYTE *v74;
  unint64_t v75;
  size_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  __int128 *v85;
  _BYTE *v86;
  __int128 *v87;
  _BYTE *v88;
  unint64_t v89;
  size_t v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _BYTE *v96;
  size_t v97;
  __int128 *v98;
  _BYTE *v99;
  unint64_t v100;
  size_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int64_t v109;
  __int128 *v110;
  _BYTE *v111;
  __int128 *v112;
  _BYTE *v113;
  unint64_t v114;
  size_t v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  _BYTE *v121;
  size_t v122;
  __int128 *v123;
  _BYTE *v124;
  unint64_t v125;
  size_t v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  void *v131;
  std::string *v132;
  __int128 v133;
  size_t v134;
  int v135;
  char *v136;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  uint64_t *v141;
  uint64_t *v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  __int128 v146;
  __int128 *v147;
  char v148;
  __int128 v149;
  size_t *v150;
  size_t v151;
  __int128 *v152;
  size_t v153;
  __int128 *v154;
  size_t *v155;
  int8x8_t *v156;
  int8x8_t v157;
  uint64_t v158;
  void **v159;
  int8x8_t v160;
  char *v161;
  void *v162;
  char *v163;
  void (***v164)(char *);
  void (**v165)(char *);
  void *v166;
  void *v167;
  int8x8_t v169;
  uint64_t *v170;
  uint64_t v171;
  int v172;
  _DWORD *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v178;
  int v179;
  int v180;
  uint64_t v182;
  int v183;
  int v184;
  NSObject *v186;
  unsigned int *v187;
  int8x8_t v188;
  uint64_t v189;
  void **v190;
  int8x8_t v191;
  int8x8_t v192;
  int Status;
  uint64_t v194;
  __int128 v195;
  unint64_t *v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  double v200;
  double v201;
  int8x8_t v202;
  uint64_t v203;
  void **v204;
  int8x8_t v205;
  NSObject *v206;
  const char *v207;
  unsigned int *v208;
  unsigned int v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  float32x2_t v223;
  float32x2_t v224;
  int8x8_t v225;
  void *v226;
  int v227;
  int8x8_t v228;
  altitude::GlobeTileComponent *v229;
  altitude::GlobeTileComponent *v230;
  int8x8_t *v231;
  int8x8_t *v232;
  __n128 v233;
  uint64_t v234;
  _BOOL4 v235;
  unsigned int v236;
  char v237;
  int v238;
  __int32 v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  double v243;
  int v244;
  float v245;
  float v246;
  _BOOL4 v247;
  float v248;
  float v249;
  unint64_t *v250;
  unint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  float v260;
  float v261;
  int32x4_t v262;
  unsigned int v263;
  uint64_t v264;
  __int32 v265;
  unsigned int v266;
  int8x8_t v267;
  int32x4_t *v268;
  uint64_t v269;
  unint64_t v270;
  int8x8_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  int8x8_t *v276;
  int32x4_t *v277;
  uint64_t v278;
  char v279;
  char *v280;
  int32x4_t *v281;
  char *i8;
  uint64_t v283;
  int32x4_t *v284;
  __int32 v285;
  int32x4_t v286;
  int32x4_t v287;
  int v288;
  int v289;
  __int32 v290;
  int v291;
  int v292;
  __int32 v293;
  __int32 v294;
  altitude::Tile *v295;
  uint64_t v296;
  altitude::GlobeTileComponent *v297;
  altitude::GlobeTileComponent *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  BOOL v306;
  uint64_t *v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *p_shared_owners;
  unint64_t v311;
  int v312;
  unint64_t *v313;
  unint64_t v314;
  unsigned int v315;
  altitude::CompleteGlobeTileSetLoader *v316;
  int8x8_t *v317;
  uint64_t v318;
  int v319;
  size_t *v320;
  char *v321;
  _QWORD **v322;
  unsigned int v323;
  void *__sb[2];
  void **__s;
  int8x8_t __sa;
  altitude::TriggerManager::Trigger *v327;
  void (**v328)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  _QWORD v333[2];
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  void (**v344)(altitude::TriggerManager::Trigger *__hidden);
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  void *v360;
  char *v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  int64_t v365;
  __int128 __dst;
  __int128 v367;
  __int128 __p;
  unint64_t v369;
  __int128 v370;
  int64_t v371;
  uint8_t buf[32];
  __int128 v373;
  uint64_t v374;
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)this + 157);
  *((_BYTE *)this + 620) = 1;
  v329 = 0u;
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  v327 = 0;
  v328 = &off_1E42C4428;
  v333[0] = 0;
  v334 = 0u;
  v335 = 0u;
  v336 = 0u;
  v337 = 0u;
  v338 = 0u;
  v339 = 0u;
  v340 = 0u;
  v343 = 0;
  v341 = 0;
  v342 = 0xFFFFFFFFLL;
  v345 = 0u;
  v346 = 0u;
  v348 = 0u;
  v347 = 0u;
  v344 = &off_1E42C4428;
  v349 = 0;
  v350 = 0u;
  v351 = 0u;
  v352 = 0u;
  v353 = 0u;
  v354 = 0u;
  v355 = 0u;
  v356 = 0u;
  v357 = 0;
  v358 = 0xFFFFFFFFLL;
  v359 = 0;
  v362 = 0;
  v360 = 0;
  v361 = 0;
  if (*((_BYTE *)this + 80))
  {
    v6 = (*(uint64_t (**)(altitude::Tile *))(*(_QWORD *)a2 + 48))(a2);
    v7 = *(double *)(v6 + 16) + (*(double *)(v6 + 40) - *(double *)(v6 + 16)) * 0.5;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)__sb = vmlaq_f64(*(float64x2_t *)v6, _Q1, vsubq_f64(*(float64x2_t *)(v6 + 24), *(float64x2_t *)v6));
    v12 = (*(uint64_t (**)(altitude::Tile *))(*(_QWORD *)a2 + 48))(a2);
    v13 = vsubq_f64(*(float64x2_t *)(v12 + 32), *(float64x2_t *)(v12 + 8));
    v14 = vmulq_f64(v13, v13);
    v15 = sqrt(v14.f64[0]+ (*(double *)(v12 + 24) - *(double *)v12) * (*(double *)(v12 + 24) - *(double *)v12)+ v14.f64[1])* 0.5;
    *(_OWORD *)buf = *(_OWORD *)__sb;
    *(double *)&buf[16] = v7;
    *(double *)&buf[24] = v15;
    altitude::TriggerManager::cullTriggers(*((_QWORD *)this + 28), &v327, buf, *((_DWORD *)a2 + 98) + 1);
  }
  if (!altitude::C3mmRequestManager::loadTriggerMetaData(*((_QWORD *)this + 21), (unint64_t *)&v327, 0))goto LABEL_12;
  v318 = *((_QWORD *)this + 6);
  if (!v318)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v19 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "Missing node, can not load meta data!", buf, 2u);
    }

    goto LABEL_12;
  }
  v315 = a3;
  v316 = this;
  v317 = (int8x8_t *)a2;
  v16 = v327;
  if (v327)
  {
    v17 = 0;
    v18 = 0;
    v322 = (_QWORD **)(v318 + 168);
    do
    {
      v21 = (char *)v360;
      v22 = 240 * v17;
      v23 = (char *)v360 + 240 * v17;
      v24 = &v327 + 30 * v17;
      if ((unint64_t)v16 <= 2)
        v25 = (char *)(v24 + 23);
      else
        v25 = v23 + 176;
      if ((unint64_t)v16 <= 2)
        v26 = (char *)(v24 + 1);
      else
        v26 = (char *)v360 + 240 * v17;
      v27 = v26[199];
      v28 = v23 + 184;
      v29 = v24 + 24;
      if ((unint64_t)v16 <= 2)
        v30 = (size_t *)v29;
      else
        v30 = (size_t *)v28;
      v31 = *v30;
      if (v27 >= 0)
        v31 = v26[199];
      if (v31 == 15)
      {
        if (v27 >= 0)
          v36 = (uint64_t *)v25;
        else
          v36 = *(uint64_t **)v25;
        v37 = *v36;
        v38 = *(uint64_t *)((char *)v36 + 7);
        if (v37 != 0x756F7365726F6567 || v38 != 0x6833635F65637275)
          goto LABEL_15;
      }
      else
      {
        if (v31 != 3)
          goto LABEL_15;
        v32 = v27 >= 0 ? v25 : *(char **)v25;
        v33 = *(unsigned __int16 *)v32;
        v34 = v32[2];
        _ZF = v33 == 13155 && v34 == 104;
        if (!_ZF)
          goto LABEL_15;
      }
      v40 = (uint64_t *)((char *)v360 + v22 + 72);
      if ((unint64_t)v16 <= 2)
        v40 = &v333[v22 / 8];
      v41 = *v40;
      if (v41)
        v319 = *(_DWORD *)(v41 + 8);
      else
        v319 = 0;
      if ((unint64_t)v16 <= 2)
        v51 = (void **)((char *)&v335 + v22 + 8);
      else
        v51 = (void **)((char *)v360 + v22 + 128);
      memset(buf, 0, sizeof(buf));
      v52 = v26[151];
      __s = v51;
      v320 = v30;
      v321 = v26;
      if (v26[151] < 0)
      {
        v51 = (void **)*v51;
        v54 = (char *)v360 + v22 + 136;
        if ((unint64_t)v16 <= 2)
          v54 = (char *)&v336 + v22;
        v53 = *(_QWORD *)v54;
        if (v53 < 5)
          goto LABEL_88;
      }
      else
      {
        v53 = v26[151];
        if ((unint64_t)v53 < 5)
          goto LABEL_88;
      }
      v55 = (char *)v51 + v53;
      v56 = v51;
      do
      {
        v57 = (char *)memchr(v56, 115, v53 - 4);
        if (!v57)
          break;
        if (*(_DWORD *)v57 == 1953853299 && v57[4] == 104)
        {
          if (v57 != v55 && v57 - (char *)v51 != -1)
          {
            *(_DWORD *)buf = 15;
            memset(&buf[4], 0, 28);
            goto LABEL_14;
          }
          break;
        }
        v56 = (void **)(v57 + 1);
        v53 = v55 - (char *)v56;
      }
      while (v55 - (char *)v56 >= 5);
LABEL_88:
      if ((v52 & 0x80) != 0)
      {
        v59 = (char *)*__s;
        v60 = (uint64_t *)&v21[v22 + 136];
        if ((unint64_t)v16 <= 2)
          v60 = (uint64_t *)((char *)&v336 + v22);
        v52 = *v60;
      }
      else
      {
        v59 = (char *)__s;
      }
      if (v52 >= 5)
      {
        v61 = &v59[v52];
        v62 = v59;
        do
        {
          v63 = (char *)memchr(v62, 110, v52 - 4);
          if (!v63)
            break;
          if (*(_DWORD *)v63 == 1953656686 && v63[4] == 104)
          {
            if (v63 != v61 && v63 - v59 != -1)
            {
              *(_DWORD *)buf = 15;
              *(_QWORD *)&buf[4] = 0x100000000;
              *(_QWORD *)((unint64_t)buf | 0xC) = 0;
              *(_QWORD *)(((unint64_t)buf | 0xC) + 8) = 0;
              *(_DWORD *)(((unint64_t)buf | 0xC) + 0x10) = 0;
            }
            break;
          }
          v62 = v63 + 1;
          v52 = v61 - (_BYTE *)v62;
        }
        while (v61 - (_BYTE *)v62 >= 5);
      }
LABEL_14:
      if ((_DWORD *)(v318 + 176) != std::__tree<altitude::TileKey>::find<altitude::TileKey>((uint64_t)v322, (unsigned int *)buf))goto LABEL_15;
      v363 = 0uLL;
      karo::util::Path::getNonDirectory((void **)&__p, __s);
      v42 = HIBYTE(v369);
      v43 = *((_QWORD *)&__p + 1);
      v44 = __p;
      if ((v369 & 0x8000000000000000) == 0)
        v45 = HIBYTE(v369);
      else
        v45 = *((_QWORD *)&__p + 1);
      if ((v369 & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      v47 = (char *)p_p + v45;
      if (v45 >= 1)
      {
        v48 = p_p;
        do
        {
          v49 = memchr(v48, 95, v45);
          if (!v49)
            break;
          if (*v49 == 95)
            goto LABEL_62;
          v48 = (__int128 *)(v49 + 1);
          v45 = v47 - (_BYTE *)v48;
        }
        while (v47 - (_BYTE *)v48 > 0);
      }
      v49 = v47;
LABEL_62:
      if (v49 == v47)
        v50 = 0;
      else
        v50 = v49 - (_BYTE *)p_p + 1;
      if ((v42 & 0x80) != 0)
      {
        if (v43 < v50)
          goto LABEL_558;
        v42 = v43;
      }
      else
      {
        if (v50 > v42)
          goto LABEL_558;
        v44 = (uint64_t)&__p;
      }
      v65 = v42 - v50;
      if (v42 - v50 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v65 >= 0x17)
      {
        v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17)
          v67 = v65 | 7;
        v68 = v67 + 1;
        p_dst = (__int128 *)operator new(v67 + 1);
        *(_QWORD *)&v367 = v68 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        *((_QWORD *)&__dst + 1) = v65;
LABEL_114:
        memmove(p_dst, (const void *)(v44 + v50), v65);
        goto LABEL_115;
      }
      BYTE7(v367) = v42 - v50;
      p_dst = &__dst;
      if (v42 != v50)
        goto LABEL_114;
LABEL_115:
      *((_BYTE *)p_dst + v65) = 0;
      if (SHIBYTE(v369) < 0)
        operator delete((void *)__p);
      __p = __dst;
      v369 = v367;
      if ((SBYTE7(v367) & 0x80u) == 0)
        v69 = BYTE7(v367);
      else
        v69 = *((_QWORD *)&__p + 1);
      if ((SBYTE7(v367) & 0x80u) == 0)
        v70 = &__p;
      else
        v70 = (__int128 *)__p;
      v71 = (char *)v70 + v69;
      if (v69 >= 1)
      {
        v72 = v69;
        v73 = v70;
        do
        {
          v74 = memchr(v73, 95, v72);
          if (!v74)
            break;
          if (*v74 == 95)
            goto LABEL_129;
          v73 = (__int128 *)(v74 + 1);
          v72 = v71 - (_BYTE *)v73;
        }
        while (v71 - (_BYTE *)v73 > 0);
      }
      v74 = (char *)v70 + v69;
LABEL_129:
      v75 = v74 - (_BYTE *)v70;
      if (v74 == v71)
        v75 = -1;
      if (v69 >= v75)
        v76 = v75;
      else
        v76 = v69;
      if (v76 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v76 >= 0x17)
      {
        v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v78 = v76 | 7;
        v79 = v78 + 1;
        v77 = (__int128 *)operator new(v78 + 1);
        *(_QWORD *)&v367 = v79 | 0x8000000000000000;
        *(_QWORD *)&__dst = v77;
        *((_QWORD *)&__dst + 1) = v76;
LABEL_141:
        memmove(v77, v70, v76);
        goto LABEL_142;
      }
      BYTE7(v367) = v76;
      v77 = &__dst;
      if (v76)
        goto LABEL_141;
LABEL_142:
      *((_BYTE *)v77 + v76) = 0;
      if ((SBYTE7(v367) & 0x80u) == 0)
        v80 = (const char *)&__dst;
      else
        v80 = (const char *)__dst;
      LODWORD(v363) = atoi(v80);
      v81 = HIBYTE(v369);
      v82 = *((_QWORD *)&__p + 1);
      v83 = __p;
      if ((v369 & 0x8000000000000000) == 0)
        v84 = HIBYTE(v369);
      else
        v84 = *((_QWORD *)&__p + 1);
      if ((v369 & 0x8000000000000000) == 0)
        v85 = &__p;
      else
        v85 = (__int128 *)__p;
      v86 = (char *)v85 + v84;
      if (v84 >= 1)
      {
        v87 = v85;
        do
        {
          v88 = memchr(v87, 95, v84);
          if (!v88)
            break;
          if (*v88 == 95)
            goto LABEL_157;
          v87 = (__int128 *)(v88 + 1);
          v84 = v86 - (_BYTE *)v87;
        }
        while (v86 - (_BYTE *)v87 > 0);
      }
      v88 = v86;
LABEL_157:
      if (v88 == v86)
        v89 = 0;
      else
        v89 = v88 - (_BYTE *)v85 + 1;
      if ((v81 & 0x80) != 0)
      {
        if (v82 < v89)
          goto LABEL_558;
        v81 = v82;
      }
      else
      {
        if (v89 > v81)
          goto LABEL_558;
        v83 = (uint64_t)&__p;
      }
      v90 = v81 - v89;
      if (v81 - v89 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v90 >= 0x17)
      {
        v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17)
          v92 = v90 | 7;
        v93 = v92 + 1;
        v91 = (__int128 *)operator new(v92 + 1);
        *((_QWORD *)&v370 + 1) = v90;
        v371 = v93 | 0x8000000000000000;
        *(_QWORD *)&v370 = v91;
LABEL_172:
        memmove(v91, (const void *)(v83 + v89), v90);
        goto LABEL_173;
      }
      HIBYTE(v371) = v81 - v89;
      v91 = &v370;
      if (v81 != v89)
        goto LABEL_172;
LABEL_173:
      *((_BYTE *)v91 + v90) = 0;
      if (SHIBYTE(v369) < 0)
        operator delete((void *)__p);
      __p = v370;
      v369 = v371;
      if (v371 >= 0)
        v94 = HIBYTE(v369);
      else
        v94 = *((_QWORD *)&v370 + 1);
      if ((v369 & 0x8000000000000000) == 0)
        v95 = &__p;
      else
        v95 = (__int128 *)v370;
      v96 = (char *)v95 + v94;
      if (v94 >= 1)
      {
        v97 = v94;
        v98 = v95;
        do
        {
          v99 = memchr(v98, 95, v97);
          if (!v99)
            break;
          if (*v99 == 95)
            goto LABEL_187;
          v98 = (__int128 *)(v99 + 1);
          v97 = v96 - (_BYTE *)v98;
        }
        while (v96 - (_BYTE *)v98 > 0);
      }
      v99 = (char *)v95 + v94;
LABEL_187:
      v100 = v99 - (_BYTE *)v95;
      if (v99 == v96)
        v100 = -1;
      if (v94 >= v100)
        v101 = v100;
      else
        v101 = v94;
      if (v101 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v101 >= 0x17)
      {
        v103 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v101 | 7) != 0x17)
          v103 = v101 | 7;
        v104 = v103 + 1;
        v102 = (__int128 *)operator new(v103 + 1);
        *((_QWORD *)&v370 + 1) = v101;
        v371 = v104 | 0x8000000000000000;
        *(_QWORD *)&v370 = v102;
LABEL_199:
        memmove(v102, v95, v101);
        goto LABEL_200;
      }
      HIBYTE(v371) = v101;
      v102 = &v370;
      if (v101)
        goto LABEL_199;
LABEL_200:
      *((_BYTE *)v102 + v101) = 0;
      if (v371 >= 0)
        v105 = (const char *)&v370;
      else
        v105 = (const char *)v370;
      DWORD1(v363) = atoi(v105);
      v106 = HIBYTE(v369);
      v107 = *((_QWORD *)&__p + 1);
      v108 = __p;
      if ((v369 & 0x8000000000000000) == 0)
        v109 = HIBYTE(v369);
      else
        v109 = *((_QWORD *)&__p + 1);
      if ((v369 & 0x8000000000000000) == 0)
        v110 = &__p;
      else
        v110 = (__int128 *)__p;
      v111 = (char *)v110 + v109;
      if (v109 >= 1)
      {
        v112 = v110;
        do
        {
          v113 = memchr(v112, 95, v109);
          if (!v113)
            break;
          if (*v113 == 95)
            goto LABEL_215;
          v112 = (__int128 *)(v113 + 1);
          v109 = v111 - (_BYTE *)v112;
        }
        while (v111 - (_BYTE *)v112 > 0);
      }
      v113 = v111;
LABEL_215:
      if (v113 == v111)
        v114 = 0;
      else
        v114 = v113 - (_BYTE *)v110 + 1;
      if ((v106 & 0x80) != 0)
      {
        if (v107 < v114)
          goto LABEL_558;
        v106 = v107;
      }
      else
      {
        if (v114 > v106)
          goto LABEL_558;
        v108 = (uint64_t)&__p;
      }
      v115 = v106 - v114;
      if (v106 - v114 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v115 >= 0x17)
      {
        v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v115 | 7) != 0x17)
          v117 = v115 | 7;
        v118 = v117 + 1;
        v116 = (__int128 *)operator new(v117 + 1);
        v365 = v118 | 0x8000000000000000;
        *(_QWORD *)&v364 = v116;
        *((_QWORD *)&v364 + 1) = v115;
LABEL_230:
        memmove(v116, (const void *)(v108 + v114), v115);
        goto LABEL_231;
      }
      HIBYTE(v365) = v106 - v114;
      v116 = &v364;
      if (v106 != v114)
        goto LABEL_230;
LABEL_231:
      *((_BYTE *)v116 + v115) = 0;
      if (SHIBYTE(v369) < 0)
        operator delete((void *)__p);
      __p = v364;
      v369 = v365;
      if (v365 >= 0)
        v119 = HIBYTE(v365);
      else
        v119 = *((_QWORD *)&v364 + 1);
      if (v365 >= 0)
        v120 = &__p;
      else
        v120 = (__int128 *)v364;
      v121 = (char *)v120 + v119;
      if (v119 >= 1)
      {
        v122 = v119;
        v123 = v120;
        do
        {
          v124 = memchr(v123, 46, v122);
          if (!v124)
            break;
          if (*v124 == 46)
            goto LABEL_245;
          v123 = (__int128 *)(v124 + 1);
          v122 = v121 - (_BYTE *)v123;
        }
        while (v121 - (_BYTE *)v123 > 0);
      }
      v124 = (char *)v120 + v119;
LABEL_245:
      v125 = v124 - (_BYTE *)v120;
      if (v124 == v121)
        v125 = -1;
      if (v119 >= v125)
        v126 = v125;
      else
        v126 = v119;
      if (v126 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_558;
      if (v126 >= 0x17)
      {
        v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v126 | 7) != 0x17)
          v128 = v126 | 7;
        v129 = v128 + 1;
        v127 = (__int128 *)operator new(v128 + 1);
        v365 = v129 | 0x8000000000000000;
        *(_QWORD *)&v364 = v127;
        *((_QWORD *)&v364 + 1) = v126;
LABEL_257:
        memmove(v127, v120, v126);
        goto LABEL_258;
      }
      HIBYTE(v365) = v126;
      v127 = &v364;
      if (v126)
        goto LABEL_257;
LABEL_258:
      *((_BYTE *)v127 + v126) = 0;
      if (SHIBYTE(v365) < 0)
      {
        v131 = (void *)v364;
        v130 = atoi((const char *)v364);
        operator delete(v131);
      }
      else
      {
        v130 = atoi((const char *)&v364);
      }
      DWORD2(v363) = v130;
      if (SHIBYTE(v371) < 0)
        operator delete((void *)v370);
      if (SBYTE7(v367) < 0)
      {
        operator delete((void *)__dst);
        if ((SHIBYTE(v369) & 0x80000000) == 0)
          goto LABEL_265;
      }
      else if ((SHIBYTE(v369) & 0x80000000) == 0)
      {
        goto LABEL_265;
      }
      operator delete((void *)__p);
LABEL_265:
      karo::util::Path::getFileSuffix((uint64_t)&__dst, (uint64_t)__s);
      v132 = std::string::insert((std::string *)&__dst, 0, ".", 1uLL);
      v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      v369 = v132->__r_.__value_.__r.__words[2];
      __p = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v367) < 0)
        operator delete((void *)__dst);
      BYTE7(v367) = 4;
      strcpy((char *)&__dst, ".c3b");
      v134 = v321[199];
      v135 = (char)v134;
      if ((v134 & 0x80u) != 0)
        v134 = *v320;
      if (v134 == 15)
      {
        v136 = v135 >= 0 ? v25 : *(char **)v25;
        if (*(_QWORD *)v136 == 0x756F7365726F6567 && *(_QWORD *)(v136 + 7) == 0x6833635F65637275)
        {
          if (&__p != (__int128 *)v25)
          {
            if (SHIBYTE(v369) < 0)
            {
              std::string::__assign_no_alias<false>((void **)&__p, v136, 0xFuLL);
            }
            else if (v135 < 0)
            {
              std::string::__assign_no_alias<true>(&__p, *(void **)v25, *v320);
            }
            else
            {
              v146 = *(_OWORD *)v25;
              v369 = *((_QWORD *)v25 + 2);
              __p = v146;
            }
          }
          v147 = (__int128 *)&v21[v22 + 200];
          if ((unint64_t)v16 <= 2)
            v147 = (__int128 *)((char *)&v340 + v22);
          if (&__dst != v147)
          {
            v148 = v321[223];
            if (SBYTE7(v367) < 0)
            {
              v150 = (size_t *)&v21[v22 + 208];
              if ((unint64_t)v16 <= 2)
                v150 = (size_t *)((char *)&v340 + v22 + 8);
              v151 = *v150;
              if (v148 >= 0)
                v152 = v147;
              else
                v152 = *(__int128 **)v147;
              if (v148 >= 0)
                v153 = v321[223];
              else
                v153 = v151;
              std::string::__assign_no_alias<false>((void **)&__dst, v152, v153);
            }
            else if (v321[223] < 0)
            {
              v154 = *(__int128 **)v147;
              v155 = (size_t *)&v21[v22 + 208];
              if ((unint64_t)v16 <= 2)
                v155 = (size_t *)((char *)&v340 + v22 + 8);
              std::string::__assign_no_alias<true>(&__dst, v154, *v155);
            }
            else
            {
              v149 = *v147;
              *(_QWORD *)&v367 = *((_QWORD *)v147 + 2);
              __dst = v149;
            }
          }
        }
      }
      v138 = operator new();
      v139 = v138;
      if ((unint64_t)v16 <= 2)
        v140 = (__int128 *)((char *)&v337 + v22);
      else
        v140 = (__int128 *)&v21[v22 + 152];
      altitude::RootTileData::RootTileData(v138, &v363, 0, v140, (__int128 *)__s, 1, v319 != 0, &__p, &__dst, -1, -1, 0, 0, 0, 0x7FFFFFFF, 0, 0);
      altitude::TileManager::addRootTileData(v318, v139);
      v141 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)v322, &v370, (unsigned int *)buf);
      if (*v141)
      {
        if ((SBYTE7(v367) & 0x80000000) == 0)
          goto LABEL_282;
      }
      else
      {
        v142 = v141;
        v143 = (char *)operator new(0x40uLL);
        *(_OWORD *)(v143 + 28) = *(_OWORD *)buf;
        *(_OWORD *)(v143 + 44) = *(_OWORD *)&buf[16];
        v144 = v370;
        *(_QWORD *)v143 = 0;
        *((_QWORD *)v143 + 1) = 0;
        *((_QWORD *)v143 + 2) = v144;
        *v142 = (uint64_t)v143;
        v145 = (_QWORD *)**v322;
        if (v145)
        {
          *v322 = v145;
          v143 = (char *)*v142;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v318 + 176), (uint64_t *)v143);
        ++*(_QWORD *)(v318 + 184);
        if ((SBYTE7(v367) & 0x80000000) == 0)
        {
LABEL_282:
          if (SHIBYTE(v369) < 0)
            goto LABEL_290;
          goto LABEL_283;
        }
      }
      operator delete((void *)__dst);
      if (SHIBYTE(v369) < 0)
LABEL_290:
        operator delete((void *)__p);
LABEL_283:
      v16 = v327;
LABEL_15:
      v17 = ++v18;
    }
    while ((unint64_t)v16 > v18);
  }
  v156 = v317;
  if (v317[54].i8[0])
  {
LABEL_316:
    v157 = v156[41];
    if (!*(_QWORD *)&v157)
    {
      v158 = operator new();
      *(_DWORD *)(v158 + 8) = 0;
      *(_QWORD *)(v158 + 40) = 0;
      *(_QWORD *)(v158 + 32) = 0;
      *(_QWORD *)(v158 + 16) = 0;
      *(_QWORD *)(v158 + 24) = v158 + 32;
      *(_OWORD *)(v158 + 48) = 0u;
      *(_OWORD *)(v158 + 64) = 0u;
      *(_QWORD *)v158 = &off_1E42C5580;
      *(_OWORD *)(v158 + 80) = 0u;
      v159 = (void **)(v158 + 80);
      *(_QWORD *)(v158 + 208) = 0;
      *(_QWORD *)(v158 + 216) = 0;
      *(_OWORD *)(v158 + 96) = 0u;
      *(_OWORD *)(v158 + 112) = 0u;
      *(_OWORD *)(v158 + 128) = 0u;
      *(_OWORD *)(v158 + 144) = 0u;
      *(_OWORD *)(v158 + 160) = 0u;
      *(_OWORD *)(v158 + 176) = 0u;
      *(_OWORD *)(v158 + 185) = 0u;
      *(_QWORD *)(v158 + 232) = 0;
      *(_DWORD *)(v158 + 224) = -1;
      *(_OWORD *)(v158 + 248) = 0u;
      *(_OWORD *)(v158 + 264) = 0u;
      *(_DWORD *)(v158 + 279) = 0;
      *(_QWORD *)(v158 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v158 + 296) = 0;
      v160 = v156[36];
      *(_WORD *)(v158 + 300) = 0;
      altitude::Tile::createTileName(buf, (unsigned int *)&v156[49], (uint64_t *)(*(_QWORD *)&v160 + 40), (uint64_t *)(*(_QWORD *)&v160 + 136));
      if (*(char *)(v158 + 103) < 0)
        operator delete(*v159);
      *(_OWORD *)v159 = *(_OWORD *)buf;
      *(_QWORD *)(v158 + 96) = *(_QWORD *)&buf[16];
      v156[41] = (int8x8_t)v158;
      (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v158 + 16))(v158, v156);
      v157 = v156[41];
    }
    v20 = 1;
    *(_BYTE *)(*(_QWORD *)&v157 + 280) = 1;
    goto LABEL_321;
  }
  v169 = v317[36];
  v170 = (uint64_t *)(*(_QWORD *)&v169 + 112);
  v171 = *(unsigned __int8 *)(*(_QWORD *)&v169 + 135);
  v172 = (char)v171;
  if ((v171 & 0x80u) != 0)
    v171 = *(_QWORD *)(*(_QWORD *)&v169 + 120);
  switch(v171)
  {
    case 15:
      if (v172 >= 0)
        v174 = (uint64_t *)(*(_QWORD *)&v169 + 112);
      else
        v174 = (uint64_t *)*v170;
      v175 = *v174;
      v176 = *(uint64_t *)((char *)v174 + 7);
      if (v175 == 0x756F7365726F6567 && v176 == 0x6833635F65637275)
        goto LABEL_373;
      break;
    case 5:
      v178 = (uint64_t *)*v170;
      if (v172 >= 0)
        v178 = (uint64_t *)(*(_QWORD *)&v169 + 112);
      v179 = *(_DWORD *)v178;
      v180 = *((unsigned __int8 *)v178 + 4);
      if (v179 != 1832084270 || v180 != 109)
      {
        v182 = v172 >= 0 ? *(_QWORD *)&v169 + 112 : *v170;
        v183 = *(_DWORD *)v182;
        v184 = *(unsigned __int8 *)(v182 + 4);
        if (v183 != 1819308129 || v184 != 101)
          break;
      }
      __dst = 0uLL;
      LODWORD(v367) = 1;
      WORD2(v367) = 0;
      v187 = (unsigned int *)&v317[49];
      if (!altitude::C3mmRequestManager::loadMetaData(*((_QWORD *)v316 + 21), (unsigned int *)&v317[49], (uint64_t)&__dst, 0, 0))goto LABEL_12;
      if ((_DWORD)v367 == 1)
      {
        v202 = v317[41];
        if (!*(_QWORD *)&v202)
        {
          v203 = operator new();
          *(_DWORD *)(v203 + 8) = 0;
          *(_QWORD *)(v203 + 32) = 0;
          *(_QWORD *)(v203 + 40) = 0;
          *(_QWORD *)(v203 + 16) = 0;
          *(_QWORD *)(v203 + 24) = v203 + 32;
          *(_OWORD *)(v203 + 48) = 0u;
          *(_OWORD *)(v203 + 64) = 0u;
          *(_QWORD *)v203 = &off_1E42C5580;
          *(_OWORD *)(v203 + 80) = 0u;
          v204 = (void **)(v203 + 80);
          *(_QWORD *)(v203 + 208) = 0;
          *(_QWORD *)(v203 + 216) = 0;
          *(_OWORD *)(v203 + 96) = 0u;
          *(_OWORD *)(v203 + 112) = 0u;
          *(_OWORD *)(v203 + 128) = 0u;
          *(_OWORD *)(v203 + 144) = 0u;
          *(_OWORD *)(v203 + 160) = 0u;
          *(_OWORD *)(v203 + 176) = 0u;
          *(_OWORD *)(v203 + 185) = 0u;
          *(_DWORD *)(v203 + 224) = -1;
          *(_QWORD *)(v203 + 232) = 0;
          *(_OWORD *)(v203 + 248) = 0u;
          *(_OWORD *)(v203 + 264) = 0u;
          *(_DWORD *)(v203 + 279) = 0;
          *(_QWORD *)(v203 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v203 + 296) = 0;
          v205 = v317[36];
          *(_WORD *)(v203 + 300) = 0;
          altitude::Tile::createTileName(buf, (unsigned int *)&v317[49], (uint64_t *)(*(_QWORD *)&v205 + 40), (uint64_t *)(*(_QWORD *)&v205 + 136));
          if (*(char *)(v203 + 103) < 0)
            operator delete(*v204);
          *(_OWORD *)v204 = *(_OWORD *)buf;
          *(_QWORD *)(v203 + 96) = *(_QWORD *)&buf[16];
          v317[41] = (int8x8_t)v203;
          (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v203 + 16))(v203, v317);
          v202 = v317[41];
        }
        *(_BYTE *)(*(_QWORD *)&v202 + 296) = 1;
        goto LABEL_456;
      }
      if ((_DWORD)v367)
      {
LABEL_456:
        v156 = v317;
        goto LABEL_457;
      }
      v323 = *(_DWORD *)(**((_QWORD **)v316 + 4) + 816);
      v188 = v317[41];
      if (!*(_QWORD *)&v188)
      {
        v189 = operator new();
        *(_DWORD *)(v189 + 8) = 0;
        *(_QWORD *)(v189 + 32) = 0;
        *(_QWORD *)(v189 + 40) = 0;
        *(_QWORD *)(v189 + 16) = 0;
        *(_QWORD *)(v189 + 24) = v189 + 32;
        *(_OWORD *)(v189 + 48) = 0u;
        *(_OWORD *)(v189 + 64) = 0u;
        *(_QWORD *)v189 = &off_1E42C5580;
        *(_OWORD *)(v189 + 80) = 0u;
        v190 = (void **)(v189 + 80);
        *(_QWORD *)(v189 + 208) = 0;
        *(_QWORD *)(v189 + 216) = 0;
        *(_OWORD *)(v189 + 96) = 0u;
        *(_OWORD *)(v189 + 112) = 0u;
        *(_OWORD *)(v189 + 128) = 0u;
        *(_OWORD *)(v189 + 144) = 0u;
        *(_OWORD *)(v189 + 160) = 0u;
        *(_OWORD *)(v189 + 176) = 0u;
        *(_OWORD *)(v189 + 185) = 0u;
        *(_DWORD *)(v189 + 224) = -1;
        *(_QWORD *)(v189 + 232) = 0;
        *(_OWORD *)(v189 + 248) = 0u;
        *(_OWORD *)(v189 + 264) = 0u;
        *(_DWORD *)(v189 + 279) = 0;
        *(_QWORD *)(v189 + 288) = 0x3FF0000000000000;
        *(_DWORD *)(v189 + 296) = 0;
        v191 = v317[36];
        *(_WORD *)(v189 + 300) = 0;
        altitude::Tile::createTileName(buf, v187, (uint64_t *)(*(_QWORD *)&v191 + 40), (uint64_t *)(*(_QWORD *)&v191 + 136));
        if (*(char *)(v189 + 103) < 0)
          operator delete(*v190);
        *(_OWORD *)v190 = *(_OWORD *)buf;
        *(_QWORD *)(v189 + 96) = *(_QWORD *)&buf[16];
        v317[41] = (int8x8_t)v189;
        (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v189 + 16))(v189, v317);
        v188 = v317[41];
      }
      __sa = v188;
      if (!*(_BYTE *)(*(_QWORD *)&v188 + 297))
      {
LABEL_452:
        v223.i32[0] = (__int32)v317[51];
        v223.i32[1] = DWORD1(__dst);
        v224.i32[0] = __dst;
        v224.i32[1] = HIDWORD(*(_QWORD *)&v317[51]);
        v225 = vbsl_s8((int8x8_t)vcgt_f32(v224, v223), v317[51], *(int8x8_t *)&__dst);
        v317[51] = v225;
        v373 = 0u;
        memset(buf, 0, sizeof(buf));
        v374 = 0x3FF0000000000000;
        altitude::Tile::computeGeocentricBoundsFromTileIndex(v187, (uint64_t)buf, (uint64_t)&__p, *(float *)v225.i32, *(float *)&v225.i32[1]);
        (*(void (**)(int8x8_t *, uint8_t *, __int128 *))(*(_QWORD *)v317 + 40))(v317, buf, &__p);
        v226 = (void *)v317[38];
        if (v226 == (void *)v317[39])
        {
          v279 = BYTE4(v367);
          if (*(_QWORD *)&v317[40] - (_QWORD)v226 <= 0xFFuLL)
          {
            v280 = (char *)operator new(0x100uLL);
            v317[38] = (int8x8_t)v280;
            v317[39] = (int8x8_t)v280;
            v317[40] = (int8x8_t)(v280 + 256);
            if (v226)
              operator delete(v226);
          }
          __asm { BR              X9 }
        }
        if (*v187 >= v323)
        {
          v227 = *(unsigned __int8 *)(*(_QWORD *)&__sa + 296);
          v317[54].i8[0] = 1;
          if (!v227)
          {
            v299 = *((_QWORD *)v316 + 21);
            v302 = *(_QWORD *)(v299 + 104);
            v300 = v299 + 104;
            v301 = v302;
            if (v302)
            {
              v303 = *(_DWORD *)(*(_QWORD *)&v317[36] + 168);
              v304 = v300;
              do
              {
                v305 = *(_DWORD *)(v301 + 32);
                v306 = v305 < v303;
                if (v305 >= v303)
                  v307 = (uint64_t *)v301;
                else
                  v307 = (uint64_t *)(v301 + 8);
                if (!v306)
                  v304 = v301;
                v301 = *v307;
              }
              while (*v307);
              if (v304 != v300 && *(_DWORD *)(v304 + 32) <= v303)
              {
                atomic_store(*(_DWORD *)(*((_QWORD *)v316 + 21) + 156), (unsigned int *)(v304 + 60));
                v308 = *(_QWORD *)(v304 + 40);
                v309 = *(std::__shared_weak_count **)(v304 + 48);
                if (v309)
                {
                  p_shared_owners = (unint64_t *)&v309->__shared_owners_;
                  do
                    v311 = __ldxr(p_shared_owners);
                  while (__stxr(v311 + 1, p_shared_owners));
                }
                if (v308)
                {
                  std::mutex::lock((std::mutex *)(v308 + 208));
                  v312 = *(_DWORD *)(v308 + 4);
                  *(_WORD *)(*(_QWORD *)&__sa + 302) = *(_WORD *)v308;
                  *(_WORD *)(*(_QWORD *)&__sa + 304) = v312;
                  v317[52].i32[0] = *(_DWORD *)(v308 + 8);
                  std::mutex::unlock((std::mutex *)(v308 + 208));
                }
                if (v309)
                {
                  v313 = (unint64_t *)&v309->__shared_owners_;
                  do
                    v314 = __ldaxr(v313);
                  while (__stlxr(v314 - 1, v313));
                  if (!v314)
                  {
                    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                    std::__shared_weak_count::__release_weak(v309);
                  }
                }
              }
            }
          }
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)&__sa + 296) = 1;
          v317[54].i8[0] = 1;
        }
        goto LABEL_456;
      }
      v192 = v317[36];
      *(_OWORD *)buf = *(_OWORD *)v187;
      *(int8x8_t *)&buf[16] = v192;
      *(_WORD *)&buf[24] = 1;
      buf[26] = 0;
      *(_DWORD *)&buf[28] = 0;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint8_t *, _QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)v316 + 19) + 104))(&__p, *((_QWORD *)v316 + 19), buf, 0, v315, 1, 0);
      Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&__p);
      if (Status)
      {
        if (Status != 4)
        {
          *(_QWORD *)&__p = &off_1E42C2D08;
          if (*((_QWORD *)&__p + 1))
          {
            v208 = (unsigned int *)(*((_QWORD *)&__p + 1) + 128);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
          }
          v210 = (std::__shared_weak_count *)v369;
          if (v369)
          {
            v211 = (unint64_t *)(v369 + 8);
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v210);
            }
          }
          goto LABEL_12;
        }
        LODWORD(v364) = 0;
        LODWORD(v363) = 0;
        v194 = *((_QWORD *)v316 + 19);
        pthread_mutex_lock(*(pthread_mutex_t **)(v194 + 40));
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v194 + 96))(&v370, v194, buf, 0);
        v195 = v370;
        if (*((_QWORD *)&v370 + 1))
        {
          v196 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v195 + 40))(v195))
        {
          v198 = (*(uint64_t (**)(_QWORD, __int128 *, __int128 *))(*(_QWORD *)v195 + 64))(v195, &v364, &v363);
          v199 = *(_QWORD *)(v194 + 128);
          if (v199)
          {
            v200 = *(double *)(v195 + 424);
            v201 = (v200 - *(double *)(v195 + 416)) * 1000.0;
            gdc::Statistics::addSampleValue(v199, "HeightLoadJobTotalTime(Bounds) (ms)", 0x81FB80FF00000023, (v200 - *(double *)(v195 + 408)) * 1000.0);
            gdc::Statistics::addSampleValue(*(_QWORD *)(v194 + 128), "HeightLoadJobMainTime(Bounds) (ms)", 0xFA386B6B00000022, v201);
          }
        }
        else
        {
          v198 = 0;
        }
        if (*((_QWORD *)&v195 + 1))
        {
          v213 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          if (!v214)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v195 + 1) + 16))(*((_QWORD *)&v195 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v195 + 1));
          }
        }
        v215 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
        if (*((_QWORD *)&v370 + 1))
        {
          v216 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(v194 + 40));
        if (v198)
        {
          *(_QWORD *)&__dst = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(*(float *)&v363, *((float *)&__dst + 1))), COERCE_UNSIGNED_INT(fminf(*(float *)&__dst, *(float *)&v364)));
          v187 = (unsigned int *)&v317[49];
LABEL_444:
          *(_QWORD *)&__p = &off_1E42C2D08;
          if (*((_QWORD *)&__p + 1))
          {
            v218 = (unsigned int *)(*((_QWORD *)&__p + 1) + 128);
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
          }
          v220 = (std::__shared_weak_count *)v369;
          if (v369)
          {
            v221 = (unint64_t *)(v369 + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          goto LABEL_452;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v187 = (unsigned int *)&v317[49];
        v206 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_444;
        LODWORD(v370) = 67109632;
        DWORD1(v370) = *(_DWORD *)&buf[4];
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = *(_DWORD *)&buf[8];
        HIWORD(v370) = 1024;
        LODWORD(v371) = *(_DWORD *)buf;
        v207 = "Failed to get height field altitude bounds for tile %u %u %u";
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v206 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_444;
        LODWORD(v370) = 67109632;
        DWORD1(v370) = *(_DWORD *)&buf[4];
        WORD4(v370) = 1024;
        *(_DWORD *)((char *)&v370 + 10) = *(_DWORD *)&buf[8];
        HIWORD(v370) = 1024;
        LODWORD(v371) = *(_DWORD *)buf;
        v207 = "Failed to load height bounds for tile %u %u %u";
      }
      _os_log_impl(&dword_19F029000, v206, OS_LOG_TYPE_ERROR, v207, (uint8_t *)&v370, 0x14u);
      goto LABEL_444;
    case 4:
      v173 = (_DWORD *)(v172 >= 0 ? *(_QWORD *)&v169 + 112 : *v170);
      if (*v173 == 1748198190)
      {
LABEL_373:
        altitude::Tile::updateBoundsAltitude((altitude::Tile *)v317, 0.0, 0.0);
        v317[54].i8[0] = 1;
LABEL_457:
        v228 = v156[41];
        if (!*(_QWORD *)&v228)
        {
          v229 = (altitude::GlobeTileComponent *)operator new();
          v230 = altitude::GlobeTileComponent::GlobeTileComponent(v229, (altitude::Tile *)v156);
          v156[41] = (int8x8_t)v230;
          (*(void (**)(altitude::GlobeTileComponent *, int8x8_t *))(*(_QWORD *)v230 + 16))(v230, v156);
          v228 = v156[41];
        }
        if (!*(_BYTE *)(*(_QWORD *)&v228 + 296))
          goto LABEL_531;
        v231 = v156;
        v232 = v156 + 49;
        v231[52].i32[0] = 1140850688;
        *(_QWORD *)((char *)&__dst + 4) = 0;
        v367 = *(_OWORD *)v232->i8;
        HIDWORD(__dst) = 0;
        LODWORD(__dst) = 17;
        if (!(*(unsigned int (**)(_QWORD, __int128 *))(**((_QWORD **)v316 + 20) + 112))(*((_QWORD *)v316 + 20), &__dst))
        {
          v235 = 0;
          v245 = -3000.0;
          v246 = 8000.0;
LABEL_494:
          v260 = fminf(*(float *)v317[51].i32, v245);
          *(float *)v317[51].i32 = v260;
          v261 = fmaxf(*(float *)&v317[51].i32[1], v246);
          *(float *)&v317[51].i32[1] = v261;
          v373 = 0u;
          memset(buf, 0, sizeof(buf));
          v374 = 0x3FF0000000000000;
          altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)v232, (uint64_t)buf, (uint64_t)&__p, v260, v261);
          (*(void (**)(int8x8_t *, uint8_t *, __int128 *))(*(_QWORD *)v317 + 40))(v317, buf, &__p);
          v263 = v317[49].u32[0];
          if (v235)
          {
            v264 = *((_QWORD *)v316 + 19);
            *(_QWORD *)&buf[8] = 0;
            *(_DWORD *)buf = 7;
            *(_DWORD *)&buf[4] = 0;
            *(int8x8_t *)&buf[20] = *(int8x8_t *)((char *)v232 + 4);
            v265 = v232[1].i32[1];
            *(_DWORD *)&buf[16] = v263;
            *(_DWORD *)&buf[28] = v265;
            v266 = altitude::HeightRequestManager::maxHeightMeshLevelForTileKey(*(_QWORD *)(*(_QWORD *)(v264 + 144) + 32), (unsigned int *)buf);
          }
          else
          {
            v266 = 13;
          }
          if (v266 > v263)
          {
            v267 = v317[38];
            v268 = (int32x4_t *)v317[39];
            v269 = (uint64_t)v268->i64 - *(_QWORD *)&v267;
            if ((unint64_t)v268 - *(_QWORD *)&v267 > 0x7F)
            {
              if (v269 == 128)
              {
                v276 = v317;
              }
              else
              {
                v276 = v317;
                v317[39] = (int8x8_t)(*(_QWORD *)&v267 + 128);
              }
            }
            else
            {
              v270 = 4 - ((unint64_t)v269 >> 5);
              v271 = v317[40];
              if (v270 <= (uint64_t)(*(_QWORD *)&v271 - (_QWORD)v268) >> 5)
              {
                v277 = &v268[2 * v270];
                v278 = 128 - v269;
                do
                {
                  v268->i64[0] = 0;
                  v268->i64[1] = 0;
                  v268[1].i16[4] = 0;
                  v268[1].i64[0] = 0;
                  v268 += 2;
                  v278 -= 32;
                }
                while (v278);
                v276 = v317;
                v317[39] = (int8x8_t)v277;
              }
              else
              {
                v272 = (v269 >> 5) + v270;
                if (v272 >> 59)
LABEL_558:
                  abort();
                v273 = *(_QWORD *)&v271 - *(_QWORD *)&v267;
                if (v273 >> 4 > v272)
                  v272 = v273 >> 4;
                if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFE0)
                  v274 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v274 = v272;
                if (v274)
                {
                  if (v274 >> 59)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v275 = (char *)operator new(32 * v274);
                }
                else
                {
                  v275 = 0;
                }
                v281 = (int32x4_t *)&v275[32 * (v269 >> 5)];
                i8 = v281[2 * v270].i8;
                v283 = 128 - v269;
                v284 = v281;
                do
                {
                  v284->i64[0] = 0;
                  v284->i64[1] = 0;
                  v284[1].i16[4] = 0;
                  v284[1].i64[0] = 0;
                  v284 += 2;
                  v283 -= 32;
                }
                while (v283);
                if (v268 == (int32x4_t *)v267)
                {
                  v276 = v317;
                }
                else
                {
                  do
                  {
                    v262 = v268[-2];
                    *(int32x4_t *)((char *)v281 - 22) = *(int32x4_t *)((char *)v268 - 22);
                    v281[-2] = v262;
                    v281 -= 2;
                    v268 -= 2;
                  }
                  while (v268 != (int32x4_t *)v267);
                  v276 = v317;
                  v268 = (int32x4_t *)v317[38];
                }
                v276[38] = (int8x8_t)v281;
                v276[39] = (int8x8_t)i8;
                v276[40] = (int8x8_t)&v275[32 * v274];
                if (v268)
                  operator delete(v268);
              }
              v267 = v276[38];
            }
            v285 = v276[50].i32[1];
            *(int8x8_t *)v262.i8 = *v232;
            v262.i32[2] = v232[1].i32[0];
            v286.i64[0] = 0x100000001;
            v286.i64[1] = 0x100000001;
            v286.i32[0] = vaddq_s32(v262, v286).u32[0];
            v287 = vaddq_s32(v262, v262);
            *(_DWORD *)(*(_QWORD *)&v267 + 16) = v287.i32[2];
            *(_QWORD *)(*(_QWORD *)&v267 + 8) = __PAIR64__(v287.u32[1], v286.u32[0]);
            *(_DWORD *)(*(_QWORD *)&v267 + 20) = v285;
            v288 = (2 * v276[49].i32[1]) | 1;
            v289 = 2 * v276[50].i32[0];
            v290 = v276[50].i32[1];
            *(_DWORD *)(*(_QWORD *)&v267 + 40) = v286.i32[0];
            *(_DWORD *)(*(_QWORD *)&v267 + 44) = v288;
            *(_DWORD *)(*(_QWORD *)&v267 + 48) = v289;
            *(_DWORD *)(*(_QWORD *)&v267 + 52) = v290;
            v291 = 2 * v276[49].i32[1];
            v292 = (2 * v276[50].i32[0]) | 1;
            v293 = v276[50].i32[1];
            *(_DWORD *)(*(_QWORD *)&v267 + 72) = v286.i32[0];
            *(_DWORD *)(*(_QWORD *)&v267 + 76) = v291;
            *(_DWORD *)(*(_QWORD *)&v267 + 80) = v292;
            *(_DWORD *)(*(_QWORD *)&v267 + 84) = v293;
            v294 = v276[50].i32[1];
            v287.i64[0] = *(_QWORD *)&vadd_s32(*(int32x2_t *)((char *)v232 + 4), *(int32x2_t *)((char *)v232 + 4)) | 0x100000001;
            *(_DWORD *)(*(_QWORD *)&v267 + 104) = v286.i32[0];
            *(_QWORD *)(*(_QWORD *)&v267 + 108) = v287.i64[0];
            *(_DWORD *)(*(_QWORD *)&v267 + 116) = v294;
          }
          v156 = v317;
          v317[54].i8[0] = 1;
LABEL_531:
          v295 = (altitude::Tile *)v156[37];
          if (v295)
          {
            v296 = *((_QWORD *)v295 + 41);
            if (!v296)
            {
              v297 = (altitude::GlobeTileComponent *)operator new();
              v298 = altitude::GlobeTileComponent::GlobeTileComponent(v297, v295);
              *((_QWORD *)v295 + 41) = v298;
              (*(void (**)(altitude::GlobeTileComponent *, altitude::Tile *))(*(_QWORD *)v298 + 16))(v298, v295);
              v296 = *((_QWORD *)v295 + 41);
            }
            if (*(_BYTE *)(v296 + 296))
              altitude::Tile::propagateChildBounds(*(_QWORD *)&v156[37], *(float *)v156[51].i32, *(float *)&v156[51].i32[1]);
          }
          if (!v156[54].i8[0])
          {
            v20 = 1;
            goto LABEL_321;
          }
          goto LABEL_316;
        }
        (*(void (**)(uint8_t *__return_ptr, _QWORD, __int128 *, _QWORD, _QWORD))(**((_QWORD **)v316 + 20)
                                                                                          + 104))(buf, *((_QWORD *)v316 + 20), &__dst, 0, v315);
        v234 = *(_QWORD *)buf;
        v235 = *(_QWORD *)buf != 0;
        if (*(_QWORD *)buf)
        {
          v236 = v317[49].u32[0];
          if (v236 >= 0x1F)
            v237 = 31;
          else
            v237 = v317[49].i32[0];
          v238 = ~(-1 << v237) - v317[49].i32[1];
          v239 = v317[50].i32[0];
          LOBYTE(__p) = -1;
          BYTE1(__p) = v236;
          *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v239, v238);
          v240 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v241 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v242 = __ldxr(v241);
            while (__stxr(v242 + 1, v241));
          }
          v233.n128_f64[0] = (double)(1 << v236);
          v243 = 626172.136 / v233.n128_f64[0];
          LODWORD(v370) = 2139095039;
          LODWORD(v364) = -8388609;
          v244 = *(_DWORD *)(v234 + 132);
          if (v244 == 16)
          {
            v233.n128_f32[0] = karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v234, (uint64_t)&__p, (float *)&v370, (float *)&v364, v233.n128_f32[0]);
          }
          else if (v244 == 8)
          {
            v233.n128_f32[0] = karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(v234, (uint64_t)&__p, (float *)&v370, (float *)&v364, v233.n128_f32[0]);
          }
          v248 = v243;
          v246 = *(float *)&v364;
          v249 = *(float *)&v370;
          if (v240)
          {
            v250 = (unint64_t *)&v240->__shared_owners_;
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 - 1, v250));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v240->__on_zero_shared)(v240, v233);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
          v245 = v249 - v248;
          v247 = 1;
        }
        else
        {
          v247 = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&buf[16]) == 0;
          v245 = -3000.0;
          v246 = 8000.0;
        }
        *(_QWORD *)&buf[16] = &off_1E42C2D08;
        if (*(_QWORD *)&buf[24])
        {
          v252 = (unsigned int *)(*(_QWORD *)&buf[24] + 128);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
        }
        v254 = (std::__shared_weak_count *)v373;
        if ((_QWORD)v373)
        {
          v255 = (unint64_t *)(v373 + 8);
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        v257 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v258 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        if (v247)
          goto LABEL_494;
LABEL_12:
        v20 = 0;
        goto LABEL_321;
      }
      break;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v186 = GEOGetVectorKitVKDefaultLog_log;
  if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    goto LABEL_12;
  if (*(char *)(*(_QWORD *)&v169 + 135) < 0)
    v170 = (uint64_t *)*v170;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v170;
  _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "Unknown meta file extension: %s", buf, 0xCu);
  v20 = 0;
LABEL_321:
  v161 = (char *)v360;
  if (v360)
  {
    v162 = v360;
    if (v361 != v360)
    {
      v163 = v361 - 240;
      v164 = (void (***)(char *))(v361 - 240);
      do
      {
        v165 = *v164;
        v164 -= 30;
        (*v165)(v163);
        _ZF = v163 == v161;
        v163 = (char *)v164;
      }
      while (!_ZF);
      v162 = v360;
    }
    v361 = v161;
    operator delete(v162);
  }
  v344 = &off_1E42C4428;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  if (SHIBYTE(v357) < 0)
  {
    operator delete((void *)v356);
    if ((SHIBYTE(v355) & 0x80000000) == 0)
    {
LABEL_332:
      if ((SBYTE7(v354) & 0x80000000) == 0)
        goto LABEL_333;
      goto LABEL_347;
    }
  }
  else if ((SHIBYTE(v355) & 0x80000000) == 0)
  {
    goto LABEL_332;
  }
  operator delete(*((void **)&v354 + 1));
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
LABEL_333:
    if ((SHIBYTE(v352) & 0x80000000) == 0)
      goto LABEL_334;
    goto LABEL_348;
  }
LABEL_347:
  operator delete((void *)v353);
  if ((SHIBYTE(v352) & 0x80000000) == 0)
  {
LABEL_334:
    v166 = (void *)v350;
    if (!(_QWORD)v350)
      goto LABEL_336;
    goto LABEL_335;
  }
LABEL_348:
  operator delete(*((void **)&v351 + 1));
  v166 = (void *)v350;
  if ((_QWORD)v350)
  {
LABEL_335:
    *((_QWORD *)&v350 + 1) = v166;
    operator delete(v166);
  }
LABEL_336:
  v328 = &off_1E42C4428;
  if (v333[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v333[0] + 8))(v333[0]);
  if (SHIBYTE(v341) < 0)
  {
    operator delete((void *)v340);
    if ((SHIBYTE(v339) & 0x80000000) == 0)
    {
LABEL_340:
      if ((SBYTE7(v338) & 0x80000000) == 0)
        goto LABEL_341;
      goto LABEL_352;
    }
  }
  else if ((SHIBYTE(v339) & 0x80000000) == 0)
  {
    goto LABEL_340;
  }
  operator delete(*((void **)&v338 + 1));
  if ((SBYTE7(v338) & 0x80000000) == 0)
  {
LABEL_341:
    if ((SHIBYTE(v336) & 0x80000000) == 0)
      goto LABEL_342;
LABEL_353:
    operator delete(*((void **)&v335 + 1));
    v167 = (void *)v334;
    if (!(_QWORD)v334)
      return v20;
    goto LABEL_343;
  }
LABEL_352:
  operator delete((void *)v337);
  if (SHIBYTE(v336) < 0)
    goto LABEL_353;
LABEL_342:
  v167 = (void *)v334;
  if ((_QWORD)v334)
  {
LABEL_343:
    *((_QWORD *)&v334 + 1) = v167;
    operator delete(v167);
  }
  return v20;
}

void sub_19F531D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

_QWORD *altitude::CompleteGlobeTileSetLoader::queueLoadMesh(_QWORD *this, altitude::Tile *a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  altitude::Tile *v12;
  __int128 v13;
  uint64_t v14;

  v5 = this;
  v12 = a2;
  v6 = *((_QWORD *)a2 + 41);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 282))
      return this;
    goto LABEL_7;
  }
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)v7 = &off_1E42C5580;
  *(_OWORD *)(v7 + 80) = 0u;
  v8 = (void **)(v7 + 80);
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 185) = 0u;
  *(_QWORD *)(v7 + 232) = 0;
  *(_DWORD *)(v7 + 224) = -1;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_DWORD *)(v7 + 279) = 0;
  *(_QWORD *)(v7 + 288) = 0x3FF0000000000000;
  *(_DWORD *)(v7 + 296) = 0;
  v9 = *((_QWORD *)a2 + 36);
  *(_WORD *)(v7 + 300) = 0;
  altitude::Tile::createTileName(&v13, (unsigned int *)a2 + 98, (uint64_t *)(v9 + 40), (uint64_t *)(v9 + 136));
  if (*(char *)(v7 + 103) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v13;
  *(_QWORD *)(v7 + 96) = v14;
  *((_QWORD *)a2 + 41) = v7;
  this = (_QWORD *)(*(uint64_t (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v7 + 16))(v7, a2);
  if (!*(_BYTE *)(*((_QWORD *)a2 + 41) + 282))
  {
LABEL_7:
    v10 = (float *)(v5 + 47);
    this = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v10, (unint64_t)a2);
    if (this)
    {
      v11 = *((_DWORD *)this + 6);
      if (v11 <= a3)
        v11 = a3;
      *((_DWORD *)this + 6) = v11;
    }
    else
    {
      this = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v10, (unint64_t)a2, &v12);
      *((_DWORD *)this + 6) = a3;
    }
  }
  return this;
}

void karo::SizedArray<altitude::View *,4>::push_back(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = *a1;
  if ((unint64_t)*a1 > 3)
  {
    if (v4 == 4)
    {
      v23 = a1 + 5;
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[1]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[2]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[3]);
      std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100]((uint64_t *)&v23, a1[4]);
    }
    v7 = (char *)a1[6];
    v6 = a1[7];
    if ((unint64_t)v7 >= v6)
    {
      v9 = (char *)a1[5];
      v10 = (v7 - v9) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      *v15 = *a2;
      v8 = v15 + 1;
      if (v7 == v9)
      {
        v9 = v7;
      }
      else
      {
        v16 = v7 - v9 - 8;
        if (v16 < 0x58)
          goto LABEL_34;
        if ((unint64_t)(v9 - v14) < 0x20)
          goto LABEL_34;
        v17 = (v16 >> 3) + 1;
        v18 = &v14[8 * v10 - 16];
        v19 = v7 - 16;
        v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v7 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            v22 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v15 = v22;
          }
          while (v7 != v9);
          v9 = (char *)a1[5];
        }
      }
      a1[5] = (uint64_t)v15;
      a1[6] = (uint64_t)v8;
      a1[7] = (uint64_t)&v14[8 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v7 = *a2;
      v8 = v7 + 8;
    }
    a1[6] = (uint64_t)v8;
    ++*a1;
  }
  else
  {
    v5 = *a2;
    *a1 = v4 + 1;
    a1[v4 + 1] = v5;
  }
}

uint64_t altitude::CompleteGlobeTileSetLoader::computePriorityFromPosition(unint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v14 = *(_OWORD *)v3;
  v15 = *(_QWORD *)(v3 + 16);
  v4 = *a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = (uint64_t *)(a1[5] + v5 * 8);
    ++v5;
    if (v4 <= 4)
      v10 = (uint64_t *)&a1[v5];
    else
      v10 = v9;
    v11 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v10, (double *)&v14) * 100000.0);
    if (v11 <= 1)
      v11 = 1;
    if (v11 > v7)
    {
      v8 = v6;
      v7 = v11;
    }
    ++v6;
    v4 = *a1;
  }
  while (v6 < *a1);
  if (v8 == 0xFFFFFFFFLL)
    return 0;
  if (v4 <= 4)
    v13 = (uint64_t)&a1[v8 + 1];
  else
    v13 = a1[5] + 8 * v8;
  return *(_DWORD *)(*(_QWORD *)v13 + 1300) + v7;
}

_QWORD *altitude::CompleteGlobeTileSetLoader::queueLoadHiresTexture(uint64_t a1, unint64_t a2, unsigned int a3)
{
  float *v5;
  _QWORD *result;
  unsigned int v7;
  unint64_t v8;

  v8 = a2;
  v5 = (float *)(a1 + 416);
  result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 416), a2);
  if (result)
  {
    v7 = *((_DWORD *)result + 6);
    if (v7 <= a3)
      v7 = a3;
    *((_DWORD *)result + 6) = v7;
  }
  else
  {
    result = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::__emplace_unique_key_args<altitude::Tile *,std::piecewise_construct_t const&,std::tuple<altitude::Tile * const&>,std::tuple<>>(v5, a2, &v8);
    *((_DWORD *)result + 6) = a3;
  }
  return result;
}

uint64_t altitude::CompleteGlobeTileSetLoader::expandSubTree(altitude::CompleteGlobeTileSetLoader *a1, uint64_t a2, uint64_t a3, unint64_t *a4, _DWORD *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8;
  altitude::CompleteGlobeTileSetLoader *v13;
  char v14;
  float v15;
  unsigned int v16;
  uint8_t *v17;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  unsigned int v35;
  void *v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int TileMetaData;
  char v63;
  uint64_t v64;
  altitude::GlobeTileComponent *v65;
  altitude::GlobeTileComponent *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  __int128 v74;
  _DWORD *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  NSObject *v105;
  _DWORD *v106;
  int v107;
  int v108;
  int v109;
  NSObject *v110;
  uint8_t *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  uint64_t v120;
  altitude::CompleteGlobeTileSetLoader *v121;
  altitude::CompleteGlobeTileSetLoader *v122;
  uint8_t buf[16];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  float v127;
  char v128;
  uint64_t v129;
  void *__p;
  void *v131;
  uint64_t v132;
  uint8_t v133[4];
  uint8_t *v134;
  uint64_t v135;

  v8 = a6;
  v13 = a1;
  v135 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 432))
    goto LABEL_2;
  if (*((_DWORD *)a1 + 157) > 0x1F3u)
    return 0;
  v119 = a6;
  v20 = *(_QWORD *)(a2 + 296);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_OWORD *)buf = *(_OWORD *)v21;
  *(_QWORD *)&v124 = *(_QWORD *)(v21 + 16);
  v22 = *a4;
  if (*a4)
  {
    v121 = v13;
    v118 = a5;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0xFFFFFFFFLL;
    do
    {
      v27 = (uint64_t *)(a4[5] + v23 * 8);
      ++v23;
      if (v22 <= 4)
        v28 = (uint64_t *)&a4[v23];
      else
        v28 = v27;
      v29 = (float)(altitude::TileLoader::computeBasePriorityFromPosition(*v28, (double *)buf) * 100000.0);
      if (v29 <= 1)
        v29 = 1;
      if (v29 > v25)
      {
        v26 = v24;
        v25 = v29;
      }
      ++v24;
      v22 = *a4;
    }
    while (v24 < *a4);
    v13 = v121;
    if (v26 == 0xFFFFFFFFLL)
    {
      LODWORD(v22) = 0;
    }
    else
    {
      if (v22 <= 4)
        v22 = (unint64_t)&a4[v26 + 1];
      else
        v22 = a4[5] + 8 * v26;
      LODWORD(v22) = *(_DWORD *)(*(_QWORD *)v22 + 1300) + v25;
    }
    a5 = v118;
  }
  TileMetaData = altitude::CompleteGlobeTileSetLoader::loadTileMetaData(v13, (altitude::Tile *)a2, (int)v22 + 800000);
  if (v20)
  {
    if (*(_QWORD *)(v20 + 304) == *(_QWORD *)(v20 + 312))
      v63 = 0;
    else
      v63 = TileMetaData;
    if ((v63 & 1) != 0)
      goto LABEL_107;
    return 0;
  }
  if (!TileMetaData)
    return 0;
LABEL_107:
  v8 = v119;
  if (!*(_BYTE *)(a2 + 432))
  {
    v64 = *(_QWORD *)(a2 + 328);
    if (!v64)
    {
      v65 = (altitude::GlobeTileComponent *)operator new();
      v66 = altitude::GlobeTileComponent::GlobeTileComponent(v65, (altitude::Tile *)a2);
      *(_QWORD *)(a2 + 328) = v66;
      (*(void (**)(altitude::GlobeTileComponent *, uint64_t))(*(_QWORD *)v66 + 16))(v66, a2);
      v64 = *(_QWORD *)(a2 + 328);
    }
    if (*(_BYTE *)(v64 + 296))
      goto LABEL_72;
  }
LABEL_2:
  *(_QWORD *)buf = 0;
  __p = 0;
  v131 = 0;
  v132 = 0;
  altitude::CompleteGlobeTileSetLoader::computeTileViewRelation((uint64_t)v13, a5, a4, (altitude::Tile *)a2, buf, v8, 0);
  *(_DWORD *)v133 = 0;
  if (!*(_QWORD *)buf)
    goto LABEL_70;
  if (*(_QWORD *)buf < 5uLL)
  {
    v14 = *(_DWORD *)(v124 + 1296) != 0 && buf[12] == 0;
    v15 = *(float *)&buf[8];
    if (!v14)
      v15 = 0.0;
    if (*(_QWORD *)buf != 1)
    {
      v30 = *((float *)&v124 + 2);
      v31 = fminf(*((float *)&v124 + 2), v15);
      if (*(_DWORD *)(v124 + 1296) != 0 && buf[12] == 0)
        v30 = v31;
      if (*(_DWORD *)(v125 + 1296) != 0 && BYTE12(v124) == 0)
        v15 = v30;
      v14 |= *(_DWORD *)(v125 + 1296) != 0 && BYTE12(v124) == 0;
      if (*(_QWORD *)buf != 2)
      {
        v32 = *((float *)&v125 + 2);
        v33 = fminf(*((float *)&v125 + 2), v15);
        if ((v14 & 1) != 0)
          v32 = v33;
        if (*(_DWORD *)(v126 + 1296) != 0 && BYTE12(v125) == 0)
          v15 = v32;
        v14 |= *(_DWORD *)(v126 + 1296) != 0 && BYTE12(v125) == 0;
        if (*(_QWORD *)buf != 3 && *(_DWORD *)(v129 + 1296) && !v128)
        {
          v15 = fminf(v127, v15);
          if ((v14 & 1) == 0)
            v15 = v127;
          v14 = 1;
        }
      }
    }
  }
  else
  {
    v14 = 0;
    v15 = 0.0;
    v16 = 1;
    v17 = (uint8_t *)__p;
    do
    {
      if (*(_DWORD *)(*((_QWORD *)v17 + 1) + 1296) && !v17[4])
      {
        v19 = v17;
        if ((v14 & 1) != 0)
        {
          if (*(float *)v17 >= v15)
            v19 = v133;
          else
            v19 = v17;
        }
        v15 = *(float *)v19;
        *(_DWORD *)v133 = *(_DWORD *)v19;
        v14 = 1;
      }
      v17 += 16;
    }
    while (*(_QWORD *)buf > (unint64_t)v16++);
  }
  if ((v14 & 1) == 0)
    v15 = 1.0;
  if (*(_QWORD *)(a2 + 304) == *(_QWORD *)(a2 + 312) || v15 >= 1.0)
    goto LABEL_70;
  if (*(_QWORD *)buf < 5uLL)
  {
    if (*(_DWORD *)(v124 + 1296) && !buf[12]
      || *(_QWORD *)buf != 1
      && (*(_DWORD *)(v125 + 1296) && !BYTE12(v124)
       || *(_QWORD *)buf != 2
       && (*(_DWORD *)(v126 + 1296) && !BYTE12(v125) || *(_QWORD *)buf != 3 && *(_DWORD *)(v129 + 1296) && !v128)))
    {
      v36 = __p;
      v38 = *(_DWORD *)(a2 + 392);
      if (!__p)
        goto LABEL_60;
      goto LABEL_59;
    }
LABEL_70:
    if (__p)
    {
      v131 = __p;
      operator delete(__p);
    }
    goto LABEL_72;
  }
  v34 = 0;
  v35 = 1;
  v36 = __p;
  while (1)
  {
    v37 = (char *)__p + 16 * v34;
    if (*(_DWORD *)(*((_QWORD *)v37 + 1) + 1296))
    {
      if (!v37[4])
        break;
    }
    v34 = v35++;
    if (*(_QWORD *)buf <= v34)
      goto LABEL_70;
  }
  v38 = *(_DWORD *)(a2 + 392);
LABEL_59:
  v131 = v36;
  operator delete(v36);
LABEL_60:
  if (v38 >= a7)
  {
LABEL_72:
    v44 = *(_QWORD **)(a3 + 8);
    v43 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v44 >= v43)
    {
      v46 = *(_BYTE **)a3;
      v47 = (uint64_t)v44 - *(_QWORD *)a3;
      v48 = v47 >> 3;
      v49 = (v47 >> 3) + 1;
      if (v49 >> 61)
        abort();
      v50 = v43 - (_QWORD)v46;
      if (v50 >> 2 > v49)
        v49 = v50 >> 2;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v49;
      if (v51)
      {
        if (v51 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v52 = operator new(8 * v51);
      }
      else
      {
        v52 = 0;
      }
      v53 = &v52[8 * v48];
      v54 = &v52[8 * v51];
      *v53 = a2;
      v45 = v53 + 1;
      if (v44 == (_QWORD *)v46)
      {
        v46 = v44;
      }
      else
      {
        v55 = (char *)v44 - v46 - 8;
        if (v55 < 0x58)
          goto LABEL_193;
        if ((unint64_t)((char *)v44 - v52 - v47) < 0x20)
          goto LABEL_193;
        v56 = (v55 >> 3) + 1;
        v57 = &v52[8 * v48 - 16];
        v58 = (__int128 *)(v44 - 2);
        v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v60 = *v58;
          *(v57 - 1) = *(v58 - 1);
          *v57 = v60;
          v57 -= 2;
          v58 -= 2;
          v59 -= 4;
        }
        while (v59);
        v53 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
        v44 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
        if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v61 = *--v44;
            *--v53 = v61;
          }
          while (v44 != (_QWORD *)v46);
          v46 = *(_BYTE **)a3;
        }
      }
      *(_QWORD *)a3 = v53;
      *(_QWORD *)(a3 + 8) = v45;
      *(_QWORD *)(a3 + 16) = v54;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v44 = a2;
      v45 = v44 + 1;
    }
    *(_QWORD *)(a3 + 8) = v45;
    return 1;
  }
  v39 = *(_QWORD *)(a2 + 304);
  if (*(_QWORD *)(a2 + 312) == v39)
    return 1;
  v122 = v13;
  v40 = 0;
  v41 = 0;
  v120 = v8;
  LODWORD(v42) = 1;
  while (2)
  {
    v69 = 32 * v40;
    v68 = *(_QWORD *)(v39 + 32 * v40);
    if (v68)
      goto LABEL_117;
    if (!*(_BYTE *)(*(_QWORD *)(a2 + 288) + 164))
    {
      v85 = *(_QWORD *)(a2 + 288);
      v74 = 0uLL;
      goto LABEL_142;
    }
    v70 = *((_QWORD *)v122 + 6);
    v73 = *(uint64_t **)(v70 + 56);
    v71 = (uint64_t *)(v70 + 56);
    v72 = v73;
    v74 = 0uLL;
    if (!v73)
      goto LABEL_141;
    v75 = (_DWORD *)(v39 + 32 * v40);
    v77 = v75[2];
    v76 = v75[3];
    v79 = v75[4];
    v78 = v75[5];
    v80 = v71;
    do
    {
      v81 = *((_DWORD *)v72 + 8);
      if (v81 < v77)
      {
LABEL_122:
        ++v72;
        goto LABEL_123;
      }
      if (v81 > v77)
        goto LABEL_130;
      v82 = *((_DWORD *)v72 + 9);
      if (v82 < v76)
        goto LABEL_122;
      if (v82 > v76)
        goto LABEL_130;
      v83 = *((_DWORD *)v72 + 10);
      if (v83 < v79)
        goto LABEL_122;
      if (v83 <= v79)
      {
        if (*((_DWORD *)v72 + 11) < v78)
          ++v72;
        else
          v80 = v72;
      }
      else
      {
LABEL_130:
        v80 = v72;
      }
LABEL_123:
      v72 = (uint64_t *)*v72;
    }
    while (v72);
    if (v80 == v71
      || (v84 = *((_DWORD *)v80 + 8), v77 < v84)
      || v77 <= v84
      && ((v86 = *((_DWORD *)v80 + 9), v76 < v86)
       || v76 <= v86 && ((v112 = *((_DWORD *)v80 + 10), v79 < v112) || v79 <= v112 && v78 < *((_DWORD *)v80 + 11)))
      || (v85 = v80[6]) == 0)
    {
LABEL_141:
      v85 = *(_QWORD *)(a2 + 288);
    }
LABEL_142:
    v87 = v39 + v69;
    v124 = v74;
    v125 = v74;
    *(_OWORD *)buf = v74;
    v126 = 0x3FF0000000000000;
    altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)(v39 + v69 + 8), (uint64_t)buf, (uint64_t)v133, 0.0, 10000.0);
    v88 = operator new();
    *(_OWORD *)(v88 + 8) = 0u;
    *(_OWORD *)(v88 + 24) = 0u;
    *(_OWORD *)(v88 + 40) = 0u;
    *(_QWORD *)(v88 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v88 + 160) = 0;
    *(_QWORD *)v88 = &off_1E42C6788;
    *(_QWORD *)(v88 + 168) = &off_1E42C6A78;
    *(_QWORD *)(v88 + 176) = 0;
    *(_QWORD *)(v88 + 184) = 0;
    *(_QWORD *)(v88 + 192) = 1065353216;
    *(_BYTE *)(v88 + 200) = 1;
    *(_DWORD *)(v88 + 204) = 0;
    *(_BYTE *)(v88 + 208) = 0;
    *(_DWORD *)(v88 + 212) = 0;
    *(_QWORD *)(v88 + 216) = &off_1E42C6A78;
    *(_QWORD *)(v88 + 224) = 0;
    *(_QWORD *)(v88 + 232) = 0;
    *(_QWORD *)(v88 + 240) = 1065353216;
    *(_BYTE *)(v88 + 248) = 1;
    *(_DWORD *)(v88 + 252) = 0;
    *(_BYTE *)(v88 + 256) = 0;
    *(_QWORD *)(v88 + 276) = 0;
    *(_DWORD *)(v88 + 284) = 0;
    *(_QWORD *)(v88 + 260) = 0;
    *(_QWORD *)(v88 + 268) = 0;
    *(_QWORD *)(v88 + 288) = v85;
    v89 = (unsigned int *)(v88 + 392);
    *(_OWORD *)(v88 + 296) = 0u;
    *(_OWORD *)(v88 + 312) = 0u;
    *(_QWORD *)(v88 + 376) = 0;
    *(_QWORD *)(v88 + 384) = 0;
    *(_QWORD *)(v88 + 368) = 0;
    *(_OWORD *)(v88 + 392) = *(_OWORD *)(v87 + 8);
    *(_DWORD *)(v88 + 416) = 1140850688;
    *(_QWORD *)(v88 + 408) = 0xFF7FFFFF7F7FFFFFLL;
    *(_QWORD *)(v88 + 424) = 0;
    *(_BYTE *)(v88 + 432) = 0;
    *(_DWORD *)(v88 + 436) = 0;
    *(_BYTE *)(v88 + 440) = 0;
    karo::Bounded::setLocalBounds((_QWORD *)v88, v133);
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v88 + 16))(v88, buf);
    *(_QWORD *)(v88 + 360) = 0;
    *(_OWORD *)(v88 + 328) = 0u;
    *(_OWORD *)(v88 + 344) = 0u;
    v90 = *(_QWORD *)(a2 + 304);
    if (!*(_BYTE *)(v90 + v69 + 24))
    {
      if (!*(_BYTE *)(v90 + 32 * v40 + 25))
        goto LABEL_152;
      v95 = operator new();
      *(_DWORD *)(v95 + 8) = 0;
      *(_QWORD *)(v95 + 40) = 0;
      *(_QWORD *)(v95 + 32) = 0;
      *(_QWORD *)(v95 + 16) = 0;
      *(_QWORD *)(v95 + 24) = v95 + 32;
      *(_OWORD *)(v95 + 48) = 0u;
      *(_OWORD *)(v95 + 64) = 0u;
      *(_QWORD *)v95 = &off_1E42C5580;
      *(_OWORD *)(v95 + 80) = 0u;
      v96 = (void **)(v95 + 80);
      *(_QWORD *)(v95 + 208) = 0;
      *(_QWORD *)(v95 + 216) = 0;
      *(_OWORD *)(v95 + 96) = 0u;
      *(_OWORD *)(v95 + 112) = 0u;
      *(_OWORD *)(v95 + 128) = 0u;
      *(_OWORD *)(v95 + 144) = 0u;
      *(_OWORD *)(v95 + 160) = 0u;
      *(_OWORD *)(v95 + 176) = 0u;
      *(_OWORD *)(v95 + 185) = 0u;
      *(_DWORD *)(v95 + 224) = -1;
      *(_QWORD *)(v95 + 232) = 0;
      *(_OWORD *)(v95 + 248) = 0u;
      *(_OWORD *)(v95 + 264) = 0u;
      *(_DWORD *)(v95 + 279) = 0;
      *(_QWORD *)(v95 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v95 + 296) = 0;
      v97 = *(_QWORD *)(v88 + 288);
      *(_WORD *)(v95 + 300) = 0;
      altitude::Tile::createTileName(buf, v89, (uint64_t *)(v97 + 40), (uint64_t *)(v97 + 136));
      if (*(char *)(v95 + 103) < 0)
        operator delete(*v96);
      *(_OWORD *)v96 = *(_OWORD *)buf;
      *(_QWORD *)(v95 + 96) = v124;
      *(_QWORD *)(v88 + 328) = v95;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 16))(v95, v88);
      v94 = *(_QWORD *)(v88 + 328);
      v90 = *(_QWORD *)(a2 + 304);
      goto LABEL_151;
    }
    v91 = operator new();
    *(_DWORD *)(v91 + 8) = 0;
    *(_QWORD *)(v91 + 40) = 0;
    *(_QWORD *)(v91 + 32) = 0;
    *(_QWORD *)(v91 + 16) = 0;
    *(_QWORD *)(v91 + 24) = v91 + 32;
    *(_OWORD *)(v91 + 48) = 0u;
    *(_OWORD *)(v91 + 64) = 0u;
    *(_QWORD *)v91 = &off_1E42C5580;
    *(_OWORD *)(v91 + 80) = 0u;
    v92 = (void **)(v91 + 80);
    *(_QWORD *)(v91 + 208) = 0;
    *(_QWORD *)(v91 + 216) = 0;
    *(_OWORD *)(v91 + 96) = 0u;
    *(_OWORD *)(v91 + 112) = 0u;
    *(_OWORD *)(v91 + 128) = 0u;
    *(_OWORD *)(v91 + 144) = 0u;
    *(_OWORD *)(v91 + 160) = 0u;
    *(_OWORD *)(v91 + 176) = 0u;
    *(_OWORD *)(v91 + 185) = 0u;
    *(_DWORD *)(v91 + 224) = -1;
    *(_QWORD *)(v91 + 232) = 0;
    *(_OWORD *)(v91 + 248) = 0u;
    *(_OWORD *)(v91 + 264) = 0u;
    *(_DWORD *)(v91 + 279) = 0;
    *(_QWORD *)(v91 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v91 + 296) = 0;
    v93 = *(_QWORD *)(v88 + 288);
    *(_WORD *)(v91 + 300) = 0;
    altitude::Tile::createTileName(buf, v89, (uint64_t *)(v93 + 40), (uint64_t *)(v93 + 136));
    if (*(char *)(v91 + 103) < 0)
      operator delete(*v92);
    *(_OWORD *)v92 = *(_OWORD *)buf;
    *(_QWORD *)(v91 + 96) = v124;
    *(_QWORD *)(v88 + 328) = v91;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v88);
    v94 = *(_QWORD *)(v88 + 328);
    v90 = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(v94 + 296) = 1;
    if (*(_BYTE *)(v90 + 32 * v40 + 25))
LABEL_151:
      *(_BYTE *)(v94 + 297) = 1;
LABEL_152:
    v98 = *(_QWORD *)(a2 + 312) - v90;
    if (v98)
    {
      v99 = 0;
      v100 = v98 >> 5;
      v101 = 1;
      while (1)
      {
        v102 = v90 + 32 * v99;
        if (*(_DWORD *)(v102 + 8) == *(_DWORD *)(v88 + 392) && *(_DWORD *)(v102 + 12) == *(_DWORD *)(v88 + 396))
        {
          v103 = v90 + 32 * v99;
          if (*(_DWORD *)(v103 + 16) == *(_DWORD *)(v88 + 400) && *(_DWORD *)(v88 + 404) == *(_DWORD *)(v103 + 20))
            break;
        }
        v99 = v101++;
        if (v100 <= v99)
          goto LABEL_164;
      }
      v104 = (uint64_t *)(v90 + 32 * v99);
      if (*v104)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v105 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          v106 = (_DWORD *)(*(_QWORD *)(a2 + 304) + 32 * v99);
          v108 = v106[2];
          v107 = v106[3];
          v109 = v106[4];
          LODWORD(v106) = v106[5];
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = v107;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v109;
          *(_WORD *)&buf[14] = 1024;
          LODWORD(v124) = v108;
          WORD2(v124) = 1024;
          *(_DWORD *)((char *)&v124 + 6) = (_DWORD)v106;
          _os_log_impl(&dword_19F029000, v105, OS_LOG_TYPE_ERROR, "Trying to add child tile but slot already occupied: %u %u %u %u", buf, 0x1Au);
        }
      }
      else
      {
        *(_QWORD *)(v88 + 424) = *(_QWORD *)(a2 + 424);
        *v104 = v88;
        *(_QWORD *)(v88 + 296) = a2;
        *(_QWORD *)(v88 + 376) = *(_QWORD *)(a2 + 376);
        v113 = *(_QWORD *)(a2 + 328);
        if (v113)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 120))(v113, v88);
        v114 = *(_QWORD *)(a2 + 336);
        if (v114)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 120))(v114, v88);
        v115 = *(_QWORD *)(a2 + 344);
        if (v115)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 120))(v115, v88);
        v116 = *(_QWORD *)(a2 + 352);
        if (v116)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 120))(v116, v88);
        v117 = *(_QWORD *)(a2 + 360);
        if (v117)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 120))(v117, v88);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 424) + 32))(*(_QWORD *)(a2 + 424), a2, v88);
      }
    }
    else
    {
LABEL_164:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v110 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        altitude::Tile::createTileName(buf, v89, (uint64_t *)(*(_QWORD *)(v88 + 288) + 40), (uint64_t *)(*(_QWORD *)(v88 + 288) + 112));
        v111 = buf;
        if (SBYTE7(v124) < 0)
          v111 = *(uint8_t **)buf;
        *(_DWORD *)v133 = 136315138;
        v134 = v111;
        _os_log_impl(&dword_19F029000, v110, OS_LOG_TYPE_ERROR, "No child slot match this tile: %s", v133, 0xCu);
        if (SBYTE7(v124) < 0)
          operator delete(*(void **)buf);
      }
    }
    v68 = *(_QWORD *)(*(_QWORD *)(a2 + 304) + v69);
LABEL_117:
    *(_QWORD *)(v68 + 376) = v120;
    v42 = v42 & altitude::CompleteGlobeTileSetLoader::expandSubTree(v122);
    v39 = *(_QWORD *)(a2 + 304);
    v40 = ++v41;
    if (v41 < (unint64_t)((*(_QWORD *)(a2 + 312) - v39) >> 5))
      continue;
    return v42;
  }
}

uint64_t *std::back_insert_iterator<std::vector<altitude::View *>>::operator=[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(_QWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(_BYTE **)v4;
    v10 = (uint64_t)v6 - *(_QWORD *)v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      abort();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = v16 + 1;
    if (v6 == (_QWORD *)v9)
    {
      v9 = v6;
    }
    else
    {
      v18 = (char *)v6 - v9 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)((char *)v6 - v15 - v10) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v7 = &v6[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 2);
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *--v7;
          *--v16 = v24;
        }
        while (v7 != (_QWORD *)v9);
        v9 = *(_BYTE **)v4;
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v6 = a2;
    v8 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

char ***std::back_insert_iterator<std::vector<altitude::CompleteGlobeTileSetLoader::TileViewRelation>>::operator=[abi:nn180100](char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

void std::vector<std::pair<unsigned int,altitude::Tile *>>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    v12 = &v5[16 * a2];
    if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      v13 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v14 = v5 + 16;
      v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v14 - 4) = 0;
        *(_DWORD *)v14 = 0;
        *((_QWORD *)v14 - 1) = 0;
        *((_QWORD *)v14 + 1) = 0;
        v14 += 32;
        v15 -= 2;
      }
      while (v15);
      if (v13 == (v13 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_17;
      v5 += 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v5 += 16;
    }
    while (v5 != v12);
LABEL_17:
    a1[1] = v12;
    return;
  }
  v6 = (char *)*a1;
  v7 = (v5 - (_BYTE *)*a1) >> 4;
  v8 = v7 + a2;
  if ((v7 + a2) >> 60)
    abort();
  v9 = v4 - v6;
  if (v9 >> 3 > v8)
    v8 = v9 >> 3;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(16 * v10);
  }
  else
  {
    v11 = 0;
  }
  v16 = &v11[16 * v7];
  v17 = &v16[16 * a2];
  v18 = v16;
  v19 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v19)
    goto LABEL_24;
  v20 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v21 = v16 + 16;
  v22 = v20;
  do
  {
    *((_DWORD *)v21 - 4) = 0;
    *(_DWORD *)v21 = 0;
    *((_QWORD *)v21 - 1) = 0;
    *((_QWORD *)v21 + 1) = 0;
    v21 += 32;
    v22 -= 2;
  }
  while (v22);
  if (v19 + 1 != v20)
  {
    v18 = &v16[16 * v20];
    do
    {
LABEL_24:
      *(_DWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18 += 16;
    }
    while (v18 != v17);
  }
  v23 = &v11[16 * v10];
  if (v5 == v6)
  {
    v24 = &v11[16 * v7];
  }
  else
  {
    do
    {
      v24 = v16 - 16;
      *((_OWORD *)v16 - 1) = *((_OWORD *)v5 - 1);
      v5 -= 16;
      v16 -= 16;
    }
    while (v5 != v6);
  }
  v25 = *a1;
  *a1 = v24;
  a1[1] = v17;
  a1[2] = v23;
  if (v25)
    operator delete(v25);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  BOOL v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  int64_t v139;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  BOOL v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;

  v7 = result;
LABEL_2:
  v8 = (unsigned int *)(a2 - 16);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v111 = *(_DWORD *)v9;
        if (*v8 < *(_DWORD *)v9)
        {
          *(_DWORD *)v9 = *v8;
          *(_DWORD *)(a2 - 16) = v111;
          goto LABEL_101;
        }
        return result;
      case 3:
        v112 = *(_DWORD *)(v9 + 16);
        v113 = *(_DWORD *)v9;
        v114 = *v8;
        if (v112 >= *(_DWORD *)v9)
        {
          if (v114 < v112)
          {
            *(_DWORD *)(v9 + 16) = v114;
            *(_DWORD *)(a2 - 16) = v112;
            v149 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 - 8);
            *(_QWORD *)(a2 - 8) = v149;
            v150 = *(_DWORD *)(v9 + 16);
            v151 = *(_DWORD *)v9;
            if (v150 < *(_DWORD *)v9)
            {
              *(_DWORD *)v9 = v150;
              *(_DWORD *)(v9 + 16) = v151;
              v125 = *(_QWORD *)(v9 + 8);
              v121 = *(_QWORD *)(v9 + 24);
              goto LABEL_152;
            }
          }
        }
        else if (v114 >= v112)
        {
          *(_DWORD *)v9 = v112;
          *(_DWORD *)(v9 + 16) = v113;
          v175 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = v175;
          if (*v8 < v113)
          {
            *(_DWORD *)(v9 + 16) = *v8;
            *(_DWORD *)(a2 - 16) = v113;
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 - 8);
            *(_QWORD *)(a2 - 8) = v175;
          }
        }
        else
        {
          *(_DWORD *)v9 = v114;
          *(_DWORD *)(a2 - 16) = v113;
LABEL_101:
          v115 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v115;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)v9, (unsigned int *)(v9 + 16), (unsigned int *)(v9 + 32), (unsigned int *)(a2 - 16));
      case 5:
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)v9, (unsigned int *)(v9 + 16), (unsigned int *)(v9 + 32), (unsigned int *)(v9 + 48));
        v116 = *(_DWORD *)(v9 + 48);
        if (*v8 < v116)
        {
          *(_DWORD *)(v9 + 48) = *v8;
          *(_DWORD *)(a2 - 16) = v116;
          v117 = *(_QWORD *)(v9 + 56);
          *(_QWORD *)(v9 + 56) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v117;
          v118 = *(_DWORD *)(v9 + 48);
          v119 = *(_DWORD *)(v9 + 32);
          if (v118 < v119)
          {
            *(_DWORD *)(v9 + 32) = v118;
            *(_DWORD *)(v9 + 48) = v119;
            v120 = *(_QWORD *)(v9 + 40);
            v121 = *(_QWORD *)(v9 + 56);
            *(_QWORD *)(v9 + 40) = v121;
            *(_QWORD *)(v9 + 56) = v120;
            v122 = *(_DWORD *)(v9 + 16);
            if (v118 < v122)
            {
              *(_DWORD *)(v9 + 16) = v118;
              *(_DWORD *)(v9 + 32) = v122;
              v123 = *(_QWORD *)(v9 + 24);
              *(_QWORD *)(v9 + 24) = v121;
              *(_QWORD *)(v9 + 40) = v123;
              v124 = *(_DWORD *)v9;
              if (v118 < *(_DWORD *)v9)
              {
                *(_DWORD *)v9 = v118;
                *(_DWORD *)(v9 + 16) = v124;
                v125 = *(_QWORD *)(v9 + 8);
LABEL_152:
                *(_QWORD *)(v9 + 8) = v121;
                *(_QWORD *)(v9 + 24) = v125;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          v126 = v9 + 16;
          v128 = v9 == a2 || v126 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v128)
            {
              v129 = 0;
              v130 = v9;
              do
              {
                v132 = v126;
                v133 = *(_DWORD *)(v130 + 16);
                v134 = *(_DWORD *)v130;
                if (v133 < *(_DWORD *)v130)
                {
                  v135 = *(_QWORD *)(v130 + 24);
                  v136 = v129;
                  do
                  {
                    v137 = v9 + v136;
                    *(_DWORD *)(v137 + 16) = v134;
                    *(_QWORD *)(v137 + 24) = *(_QWORD *)(v9 + v136 + 8);
                    if (!v136)
                    {
                      v131 = v9;
                      goto LABEL_118;
                    }
                    v134 = *(_DWORD *)(v137 - 16);
                    v136 -= 16;
                  }
                  while (v133 < v134);
                  v131 = v9 + v136 + 16;
LABEL_118:
                  *(_DWORD *)v131 = v133;
                  *(_QWORD *)(v131 + 8) = v135;
                }
                v126 = v132 + 16;
                v129 += 16;
                v130 = v132;
              }
              while (v132 + 16 != a2);
            }
          }
          else if (!v128)
          {
            v152 = (_QWORD *)(v9 + 24);
            do
            {
              v153 = v126;
              v154 = *(_DWORD *)(v7 + 16);
              v155 = *(_DWORD *)v7;
              if (v154 < *(_DWORD *)v7)
              {
                v156 = *(_QWORD *)(v7 + 24);
                v157 = v152;
                do
                {
                  v158 = v157;
                  *((_DWORD *)v157 - 2) = v155;
                  v159 = *(v157 - 2);
                  v157 -= 2;
                  *v158 = v159;
                  v155 = *((_DWORD *)v158 - 10);
                }
                while (v154 < v155);
                *((_DWORD *)v157 - 2) = v154;
                *v157 = v156;
              }
              v126 = v153 + 16;
              v152 += 2;
              v7 = v153;
            }
            while (v153 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v138 = (unint64_t)(v11 - 2) >> 1;
            v139 = v138;
            do
            {
              if (v138 >= v139)
              {
                v141 = (2 * v139) | 1;
                v142 = v9 + 16 * v141;
                if (2 * v139 + 2 >= v11)
                {
                  v143 = *(_DWORD *)v142;
                }
                else
                {
                  v143 = *(_DWORD *)(v142 + 16);
                  v144 = *(_DWORD *)v142 >= v143;
                  if (*(_DWORD *)v142 > v143)
                    v143 = *(_DWORD *)v142;
                  if (!v144)
                  {
                    v142 += 16;
                    v141 = 2 * v139 + 2;
                  }
                }
                v145 = v9 + 16 * v139;
                v146 = *(_DWORD *)v145;
                if (v143 >= *(_DWORD *)v145)
                {
                  v147 = *(_QWORD *)(v145 + 8);
                  while (1)
                  {
                    result = v145;
                    v145 = v142;
                    *(_DWORD *)result = v143;
                    *(_QWORD *)(result + 8) = *(_QWORD *)(v142 + 8);
                    if (v138 < v141)
                      break;
                    result = (2 * v141) | 1;
                    v142 = v9 + 16 * result;
                    v141 = 2 * v141 + 2;
                    if (v141 < v11)
                    {
                      v143 = *(_DWORD *)v142;
                      v148 = *(_DWORD *)(v142 + 16);
                      if (*(_DWORD *)v142 <= v148)
                        v143 = *(_DWORD *)(v142 + 16);
                      if (*(_DWORD *)v142 >= v148)
                        v141 = result;
                      else
                        v142 += 16;
                      if (v143 < v146)
                        break;
                    }
                    else
                    {
                      v143 = *(_DWORD *)v142;
                      v141 = result;
                      if (*(_DWORD *)v142 < v146)
                        break;
                    }
                  }
                  *(_DWORD *)v145 = v146;
                  *(_QWORD *)(v145 + 8) = v147;
                }
              }
              v140 = v139-- <= 0;
            }
            while (!v140);
            v160 = (unint64_t)v10 >> 4;
            do
            {
              v161 = 0;
              v162 = *(_DWORD *)v9;
              v163 = *(_QWORD *)(v9 + 8);
              v164 = v9;
              do
              {
                v166 = v164 + 16 * v161 + 16;
                v167 = (2 * v161) | 1;
                v161 = 2 * v161 + 2;
                if (v161 < v160)
                {
                  v165 = *(_DWORD *)v166;
                  result = *(unsigned int *)(v166 + 16);
                  if (*(_DWORD *)v166 <= result)
                    v165 = *(_DWORD *)(v166 + 16);
                  if (*(_DWORD *)v166 >= result)
                    v161 = v167;
                  else
                    v166 += 16;
                }
                else
                {
                  v165 = *(_DWORD *)v166;
                  v161 = v167;
                }
                *(_DWORD *)v164 = v165;
                *(_QWORD *)(v164 + 8) = *(_QWORD *)(v166 + 8);
                v164 = v166;
              }
              while (v161 <= (uint64_t)((unint64_t)(v160 - 2) >> 1));
              if (v166 == a2 - 16)
              {
                *(_DWORD *)v166 = v162;
                *(_QWORD *)(v166 + 8) = v163;
              }
              else
              {
                *(_DWORD *)v166 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v166 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v162;
                *(_QWORD *)(a2 - 8) = v163;
                v168 = v166 - v9 + 16;
                if (v168 >= 17)
                {
                  v169 = (((unint64_t)v168 >> 4) - 2) >> 1;
                  v170 = v9 + 16 * v169;
                  v171 = *(_DWORD *)v170;
                  v172 = *(_DWORD *)v166;
                  if (*(_DWORD *)v170 < *(_DWORD *)v166)
                  {
                    v173 = *(_QWORD *)(v166 + 8);
                    do
                    {
                      v174 = v166;
                      v166 = v170;
                      *(_DWORD *)v174 = v171;
                      *(_QWORD *)(v174 + 8) = *(_QWORD *)(v170 + 8);
                      if (!v169)
                        break;
                      v169 = (v169 - 1) >> 1;
                      v170 = v9 + 16 * v169;
                      v171 = *(_DWORD *)v170;
                    }
                    while (*(_DWORD *)v170 < v172);
                    *(_DWORD *)v166 = v172;
                    *(_QWORD *)(v166 + 8) = v173;
                  }
                }
              }
              a2 -= 16;
              v140 = v160-- <= 2;
            }
            while (!v140);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unsigned int *)(v9 + 16 * ((unint64_t)v11 >> 1));
        v14 = *v8;
        if ((unint64_t)v10 >= 0x801)
        {
          v15 = *v13;
          v16 = *(_DWORD *)v9;
          if (*v13 >= *(_DWORD *)v9)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *(_DWORD *)(a2 - 16) = v15;
              v22 = v9 + 16 * v12;
              v24 = *(_QWORD *)(v22 + 8);
              v23 = (_QWORD *)(v22 + 8);
              *v23 = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 8) = v24;
              v25 = *(_DWORD *)v9;
              if (*v13 < *(_DWORD *)v9)
              {
                *(_DWORD *)v9 = *v13;
                *v13 = v25;
                v26 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)(v9 + 8) = *v23;
                *v23 = v26;
              }
            }
          }
          else if (v14 >= v15)
          {
            *(_DWORD *)v9 = v15;
            *v13 = v16;
            v31 = *(_QWORD *)(v9 + 8);
            v32 = (_QWORD *)(v9 + 8 + 16 * v12);
            *(_QWORD *)(v9 + 8) = *v32;
            *v32 = v31;
            if (*v8 < v16)
            {
              *v13 = *v8;
              *(_DWORD *)(a2 - 16) = v16;
              *v32 = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 8) = v31;
            }
          }
          else
          {
            *(_DWORD *)v9 = v14;
            *(_DWORD *)(a2 - 16) = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
            *(_QWORD *)(a2 - 8) = v17;
          }
          v33 = v12 - 1;
          v34 = (unsigned int *)(v9 + 16 * (v12 - 1));
          v35 = *v34;
          v36 = *(_DWORD *)(v9 + 16);
          v37 = *(_DWORD *)(a2 - 32);
          if (*v34 >= v36)
          {
            if (v37 < v35)
            {
              *v34 = v37;
              *(_DWORD *)(a2 - 32) = v35;
              v39 = v9 + 16 * v33;
              v41 = *(_QWORD *)(v39 + 8);
              v40 = (_QWORD *)(v39 + 8);
              *v40 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(a2 - 24) = v41;
              v42 = *(_DWORD *)(v9 + 16);
              if (*v34 < v42)
              {
                *(_DWORD *)(v9 + 16) = *v34;
                *v34 = v42;
                v43 = *(_QWORD *)(v9 + 24);
                *(_QWORD *)(v9 + 24) = *v40;
                *v40 = v43;
              }
            }
          }
          else if (v37 >= v35)
          {
            *(_DWORD *)(v9 + 16) = v35;
            v44 = v9 + 16 * v33;
            v46 = *(_QWORD *)(v44 + 8);
            v45 = (_QWORD *)(v44 + 8);
            *v34 = v36;
            v47 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 24) = v46;
            *v45 = v47;
            v48 = *(_DWORD *)(a2 - 32);
            if (v48 < v36)
            {
              *v34 = v48;
              *(_DWORD *)(a2 - 32) = v36;
              *v45 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(a2 - 24) = v47;
            }
          }
          else
          {
            *(_DWORD *)(v9 + 16) = v37;
            *(_DWORD *)(a2 - 32) = v36;
            v38 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 - 24);
            *(_QWORD *)(a2 - 24) = v38;
          }
          v49 = v12 + 1;
          v50 = (unsigned int *)(v9 + 16 * (v12 + 1));
          v51 = *v50;
          v52 = *(_DWORD *)(v9 + 32);
          v53 = *(_DWORD *)(a2 - 48);
          if (*v50 >= v52)
          {
            if (v53 < v51)
            {
              *v50 = v53;
              *(_DWORD *)(a2 - 48) = v51;
              v55 = v9 + 16 * v49;
              v57 = *(_QWORD *)(v55 + 8);
              v56 = (_QWORD *)(v55 + 8);
              *v56 = *(_QWORD *)(a2 - 40);
              *(_QWORD *)(a2 - 40) = v57;
              v58 = *(_DWORD *)(v9 + 32);
              if (*v50 < v58)
              {
                *(_DWORD *)(v9 + 32) = *v50;
                *v50 = v58;
                v59 = *(_QWORD *)(v9 + 40);
                *(_QWORD *)(v9 + 40) = *v56;
                *v56 = v59;
              }
            }
          }
          else if (v53 >= v51)
          {
            *(_DWORD *)(v9 + 32) = v51;
            v60 = v9 + 16 * v49;
            v62 = *(_QWORD *)(v60 + 8);
            v61 = (_QWORD *)(v60 + 8);
            *v50 = v52;
            v63 = *(_QWORD *)(v9 + 40);
            *(_QWORD *)(v9 + 40) = v62;
            *v61 = v63;
            v64 = *(_DWORD *)(a2 - 48);
            if (v64 < v52)
            {
              *v50 = v64;
              *(_DWORD *)(a2 - 48) = v52;
              *v61 = *(_QWORD *)(a2 - 40);
              *(_QWORD *)(a2 - 40) = v63;
            }
          }
          else
          {
            *(_DWORD *)(v9 + 32) = v53;
            *(_DWORD *)(a2 - 48) = v52;
            v54 = *(_QWORD *)(v9 + 40);
            *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 - 40);
            *(_QWORD *)(a2 - 40) = v54;
          }
          v65 = *v13;
          v66 = *v34;
          v67 = *v50;
          if (*v13 >= *v34)
          {
            if (v67 >= v65)
            {
LABEL_46:
              v66 = v65;
            }
            else
            {
              *v13 = v67;
              v71 = v9 + 16 * v12;
              v73 = *(_QWORD *)(v71 + 8);
              v72 = (_QWORD *)(v71 + 8);
              result = v73;
              *v50 = v65;
              v74 = v9 + 16 * v49;
              v75 = *(_QWORD *)(v74 + 8);
              *v72 = v75;
              *(_QWORD *)(v74 + 8) = v73;
              if (v67 >= v66)
                goto LABEL_49;
              *v34 = v67;
              *v13 = v66;
              v76 = v9 + 16 * v33;
              v77 = *(_QWORD *)(v76 + 8);
              *(_QWORD *)(v76 + 8) = v75;
              *v72 = v77;
            }
          }
          else
          {
            v68 = (uint64_t *)(v9 + 16 * v33 + 8);
            if (v67 < v65)
            {
              *v34 = v67;
              *v50 = v66;
              v69 = v9 + 16 * v49;
              v70 = *v68;
              *v68 = *(_QWORD *)(v69 + 8);
              *(_QWORD *)(v69 + 8) = v70;
              goto LABEL_46;
            }
            *v34 = v65;
            *v13 = v66;
            v78 = v9 + 16 * v12;
            v80 = *(_QWORD *)(v78 + 8);
            v79 = (_QWORD *)(v78 + 8);
            v81 = *v68;
            *v68 = v80;
            *v79 = v81;
            if (v67 < v66)
            {
              *v13 = v67;
              *v50 = v66;
              v82 = v9 + 16 * v49;
              *v79 = *(_QWORD *)(v82 + 8);
              *(_QWORD *)(v82 + 8) = v81;
LABEL_49:
              v66 = v67;
            }
          }
          v83 = *(_DWORD *)v9;
          *(_DWORD *)v9 = v66;
          *v13 = v83;
          v84 = v9 + 16 * v12;
          v85 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v84 + 8);
          *(_QWORD *)(v84 + 8) = v85;
          goto LABEL_51;
        }
        v18 = *(_DWORD *)v9;
        v19 = *v13;
        if (*(_DWORD *)v9 >= *v13)
        {
          if (v14 < v18)
          {
            *(_DWORD *)v9 = v14;
            *(_DWORD *)(a2 - 16) = v18;
            v27 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
            *(_QWORD *)(a2 - 8) = v27;
            v28 = *v13;
            if (*(_DWORD *)v9 < *v13)
            {
              *v13 = *(_DWORD *)v9;
              *(_DWORD *)v9 = v28;
              v29 = v9 + 16 * v12;
              v30 = *(_QWORD *)(v29 + 8);
              *(_QWORD *)(v29 + 8) = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = v30;
            }
          }
        }
        else
        {
          v20 = (uint64_t *)(v9 + 16 * v12 + 8);
          if (v14 >= v18)
          {
            *v13 = v18;
            *(_DWORD *)v9 = v19;
            v21 = *v20;
            *v20 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = v21;
            if (*v8 >= v19)
              goto LABEL_51;
            *(_DWORD *)v9 = *v8;
            *(_DWORD *)(a2 - 16) = v19;
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 - 8);
          }
          else
          {
            *v13 = v14;
            *(_DWORD *)(a2 - 16) = v19;
            v21 = *v20;
            *v20 = *(_QWORD *)(a2 - 8);
          }
          *(_QWORD *)(a2 - 8) = v21;
        }
LABEL_51:
        --a3;
        v86 = *(_DWORD *)v9;
        if ((a4 & 1) == 0 && *(_DWORD *)(v9 - 16) >= v86)
        {
          if (v86 >= *v8)
          {
            v102 = v9 + 16;
            do
            {
              v9 = v102;
              if (v102 >= a2)
                break;
              v102 += 16;
            }
            while (v86 >= *(_DWORD *)v9);
          }
          else
          {
            do
            {
              v101 = *(_DWORD *)(v9 + 16);
              v9 += 16;
            }
            while (v86 >= v101);
          }
          v103 = a2;
          if (v9 < a2)
          {
            v103 = a2;
            do
            {
              v104 = *(_DWORD *)(v103 - 16);
              v103 -= 16;
            }
            while (v86 < v104);
          }
          v105 = *(_QWORD *)(v7 + 8);
          if (v9 < v103)
          {
            v106 = *(_DWORD *)v9;
            v107 = *(_DWORD *)v103;
            do
            {
              *(_DWORD *)v9 = v107;
              *(_DWORD *)v103 = v106;
              v108 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)(v9 + 8) = *(_QWORD *)(v103 + 8);
              *(_QWORD *)(v103 + 8) = v108;
              do
              {
                v109 = *(_DWORD *)(v9 + 16);
                v9 += 16;
                v106 = v109;
              }
              while (v86 >= v109);
              do
              {
                v110 = *(_DWORD *)(v103 - 16);
                v103 -= 16;
                v107 = v110;
              }
              while (v86 < v110);
            }
            while (v9 < v103);
          }
          if (v9 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v9 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v9 - 16) = v86;
          *(_QWORD *)(v9 - 8) = v105;
          continue;
        }
        v87 = *(_QWORD *)(v9 + 8);
        v88 = v9;
        do
        {
          v89 = v88;
          v91 = *(_DWORD *)(v88 + 16);
          v88 += 16;
          v90 = v91;
        }
        while (v91 < v86);
        v92 = (unsigned int *)a2;
        if (v89 == v9)
        {
          v92 = (unsigned int *)a2;
          do
          {
            if (v88 >= (unint64_t)v92)
              break;
            v94 = *(v92 - 4);
            v92 -= 4;
          }
          while (v94 >= v86);
        }
        else
        {
          do
          {
            v93 = *(v92 - 4);
            v92 -= 4;
          }
          while (v93 >= v86);
        }
        if (v88 >= (unint64_t)v92)
        {
          v9 = v88;
        }
        else
        {
          v95 = *v92;
          v9 = v88;
          v96 = v92;
          do
          {
            *(_DWORD *)v9 = v95;
            *v96 = v90;
            v97 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *((_QWORD *)v96 + 1);
            *((_QWORD *)v96 + 1) = v97;
            do
            {
              v98 = *(_DWORD *)(v9 + 16);
              v9 += 16;
              v90 = v98;
            }
            while (v98 < v86);
            do
            {
              v99 = *(v96 - 4);
              v96 -= 4;
              v95 = v99;
            }
            while (v99 >= v86);
          }
          while (v9 < (unint64_t)v96);
        }
        if (v9 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v9 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 - 8);
        }
        *(_DWORD *)(v9 - 16) = v86;
        *(_QWORD *)(v9 - 8) = v87;
        if (v88 < (unint64_t)v92)
        {
LABEL_74:
          result = std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *,false>(v7, v9 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v100 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(v7, v9 - 16);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v100)
            continue;
          goto LABEL_74;
        }
        a2 = v9 - 16;
        if (!v100)
          goto LABEL_2;
        return result;
    }
  }
}

void altitude::CompleteGlobeTileSetLoader::loadBaseSurface(altitude::CompleteGlobeTileSetLoader *this, altitude::Tile *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  int Status;
  __n128 v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 *v20;
  NSObject *v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  NSObject *v26;
  double v27;
  double Current;
  uint64_t v29;
  double v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void (**v64)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  int v71;
  uint8_t v72[4];
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  uint8_t buf[8];
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 41);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 282))
      return;
LABEL_7:
    *((_DWORD *)a2 + 97) = *(_DWORD *)(*((_QWORD *)this + 4) + 88);
    v10 = *((_QWORD *)a2 + 36);
    v67 = *(_OWORD *)((char *)a2 + 392);
    v68 = v10;
    v69 = 256;
    v70 = 0;
    v71 = 0;
    (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, __int128 *, _QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 19) + 104))(&v64, *((_QWORD *)this + 19), &v67, 0, a3, 1, 0);
    Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v64);
    if (Status)
    {
      if (Status == 4)
      {
        v62 = 0;
        v63 = 0;
        v60 = 0;
        v61 = 0;
        v79 = 0;
        v80 = 0;
        *(_QWORD *)buf = &v79;
        v58 = 0;
        v59 = 0;
        if (altitude::HeightRequestManager::getResult(*((_QWORD *)this + 19), (uint64_t)&v67, (uint64_t)&v62, (uint64_t)&v60, (uint64_t)buf, (uint64_t)&v58))
        {
          v14 = v62;
          if (v62)
          {
            v15 = *(_QWORD *)(v6 + 136);
            if (v15)
            {
              v16 = (__n128 *)*((_QWORD *)this + 83);
              if ((unint64_t)v16 >= *((_QWORD *)this + 84))
              {
                v20 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 656, *(__n128 *)(v6 + 136));
              }
              else
              {
                v16->n128_u64[0] = v15;
                v17 = *(_QWORD *)(v6 + 144);
                v16->n128_u64[1] = v17;
                if (v17)
                {
                  v18 = (unint64_t *)(v17 + 8);
                  do
                    v19 = __ldxr(v18);
                  while (__stxr(v19 + 1, v18));
                }
                v20 = v16 + 1;
              }
              *((_QWORD *)this + 83) = v20;
              if (*(_QWORD *)(v6 + 136))
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 424), *(_QWORD *)(v6 + 16), v6);
                v14 = v62;
              }
            }
            v31 = v63;
            if (v63)
            {
              p_shared_owners = (unint64_t *)&v63->__shared_owners_;
              do
                v33 = __ldxr(p_shared_owners);
              while (__stxr(v33 + 1, p_shared_owners));
            }
            v34 = *(std::__shared_weak_count **)(v6 + 144);
            *(_QWORD *)(v6 + 136) = v14;
            *(_QWORD *)(v6 + 144) = v31;
            if (v34)
            {
              v35 = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
              v14 = *(_QWORD *)(v6 + 136);
            }
            if (v14)
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 16) + 424)
                                                                       + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 424), *(_QWORD *)(v6 + 16), v6, v14);
            v38 = v58;
            v37 = v59;
            if (v59)
            {
              v39 = (unint64_t *)&v59->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v41 = *(std::__shared_weak_count **)(v6 + 112);
            *(_QWORD *)(v6 + 104) = v38;
            *(_QWORD *)(v6 + 112) = v37;
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            if ((uint8_t *)(v6 + 24) != buf)
              std::__tree<altitude::TileKey>::__assign_multi<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t **)(v6 + 24), *(_QWORD **)buf, &v79);
            goto LABEL_59;
          }
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v26 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v72 = 67109632;
          v73 = DWORD1(v67);
          v74 = 1024;
          v75 = DWORD2(v67);
          v76 = 1024;
          v77 = v67;
          _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "Got no actor when loading base surface for tile %u %u %u", v72, 0x14u);
        }
        *(_BYTE *)(v6 + 282) = 1;
        *(_BYTE *)(v6 + 280) = 1;
        v27 = *(double *)(v6 + 288) + *(double *)(v6 + 288);
        *(double *)(v6 + 288) = v27;
        Current = CFAbsoluteTimeGetCurrent();
        v29 = *((_QWORD *)this + 127);
        std::mutex::lock((std::mutex *)(v29 + 16));
        if (*(_BYTE *)(v29 + 96))
        {
          v30 = *(double *)(v29 + 88);
          std::mutex::unlock((std::mutex *)(v29 + 16));
          v13.n128_f64[0] = Current + v27;
          if (Current + v27 >= v30)
          {
LABEL_59:
            v44 = v59;
            if (v59)
            {
              v45 = (unint64_t *)&v59->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v13);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v79);
            v47 = v61;
            if (v61)
            {
              v48 = (unint64_t *)&v61->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = v63;
            if (v63)
            {
              v51 = (unint64_t *)&v63->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            goto LABEL_74;
          }
        }
        else
        {
          std::mutex::unlock((std::mutex *)(v29 + 16));
        }
        (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v27);
        goto LABEL_59;
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v21 = GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = DWORD1(v67);
        LOWORD(v79) = 1024;
        *(_DWORD *)((char *)&v79 + 2) = DWORD2(v67);
        HIWORD(v79) = 1024;
        LODWORD(v80) = v67;
        _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "Failed to load base surface for tile %u %u %u", buf, 0x14u);
      }
      *(_BYTE *)(v6 + 282) = 1;
      *(_BYTE *)(v6 + 280) = 1;
      v22 = *(double *)(v6 + 288) + *(double *)(v6 + 288);
      *(double *)(v6 + 288) = v22;
      v23 = CFAbsoluteTimeGetCurrent();
      v24 = *((_QWORD *)this + 127);
      std::mutex::lock((std::mutex *)(v24 + 16));
      if (*(_BYTE *)(v24 + 96))
      {
        v25 = *(double *)(v24 + 88);
        std::mutex::unlock((std::mutex *)(v24 + 16));
        v12.n128_f64[0] = v23 + v22;
        if (v23 + v22 >= v25)
          goto LABEL_74;
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v24 + 16));
      }
      (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 127) + 24))(*((_QWORD *)this + 127), 0, v22);
    }
LABEL_74:
    v64 = &off_1E42C2D08;
    if (v65)
    {
      v53 = (unsigned int *)(v65 + 128);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
    }
    v55 = v66;
    if (v66)
    {
      v56 = (unint64_t *)&v66->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v55->__on_zero_shared)(v55, v12);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    return;
  }
  v7 = operator new();
  *(_DWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)v7 = &off_1E42C5580;
  *(_OWORD *)(v7 + 80) = 0u;
  v8 = (void **)(v7 + 80);
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 185) = 0u;
  *(_QWORD *)(v7 + 232) = 0;
  *(_DWORD *)(v7 + 224) = -1;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_DWORD *)(v7 + 279) = 0;
  *(_QWORD *)(v7 + 288) = 0x3FF0000000000000;
  *(_DWORD *)(v7 + 296) = 0;
  v9 = *((_QWORD *)a2 + 36);
  *(_WORD *)(v7 + 300) = 0;
  altitude::Tile::createTileName(&v67, (unsigned int *)a2 + 98, (uint64_t *)(v9 + 40), (uint64_t *)(v9 + 136));
  if (*(char *)(v7 + 103) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v67;
  *(_QWORD *)(v7 + 96) = v68;
  *((_QWORD *)a2 + 41) = v7;
  (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v7 + 16))(v7, a2);
  v6 = *((_QWORD *)a2 + 41);
  if (!*(_BYTE *)(v6 + 282))
    goto LABEL_7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>(uint64_t result, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  BOOL v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  int64_t v133;
  BOOL v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;

  v7 = result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (uint64_t)a2 - v10;
    v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)v8 < *(_DWORD *)v10)
        {
          v104 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *v8;
          *v8 = v104;
          v105 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = *v9;
          *v9 = v105;
        }
        return result;
      case 3:
        v106 = *(_DWORD *)(v10 + 16);
        v107 = *(_DWORD *)v8;
        if (v106 < *(_DWORD *)v10)
        {
          v108 = (uint64_t *)(v10 + 8);
          v109 = *(_QWORD *)v10;
          if (v107 >= v106)
          {
            v108 = (uint64_t *)(v10 + 24);
            v170 = *(_QWORD *)(v10 + 8);
            v169 = *(_QWORD *)(v10 + 16);
            *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 24);
            *(_QWORD *)(v10 + 16) = v109;
            *(_QWORD *)v10 = v169;
            *(_QWORD *)(v10 + 24) = v170;
            if (*(_DWORD *)v8 >= v109)
              return result;
            *(_QWORD *)(v10 + 16) = *v8;
          }
          else
          {
            *(_QWORD *)v10 = *v8;
          }
          *v8 = v109;
          goto LABEL_184;
        }
        if (v107 < v106)
        {
          v145 = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 16) = *v8;
          *v8 = v145;
          v146 = *(_QWORD *)(v10 + 24);
          *(_QWORD *)(v10 + 24) = *v9;
          *v9 = v146;
          if (*(_DWORD *)(v10 + 16) < *(_DWORD *)v10)
          {
            v147 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *(_QWORD *)(v10 + 16);
            *(_QWORD *)(v10 + 16) = v147;
            v108 = (uint64_t *)(v10 + 8);
            v9 = (uint64_t *)(v10 + 24);
LABEL_184:
            v171 = *v108;
            *v108 = *v9;
            *v9 = v171;
            return result;
          }
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)v10, (int *)(v10 + 16), (int *)(v10 + 32), a2 - 2);
      case 5:
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)v10, (int *)(v10 + 16), (int *)(v10 + 32), (_QWORD *)(v10 + 48));
        if (*(_DWORD *)v8 < *(_DWORD *)(v10 + 48))
        {
          v110 = *(_QWORD *)(v10 + 48);
          *(_QWORD *)(v10 + 48) = *v8;
          *v8 = v110;
          v111 = *(_QWORD *)(v10 + 56);
          *(_QWORD *)(v10 + 56) = *v9;
          *v9 = v111;
          if (*(_DWORD *)(v10 + 48) < *(_DWORD *)(v10 + 32))
          {
            v112 = *(_QWORD *)(v10 + 32);
            v113 = *(_QWORD *)(v10 + 40);
            v114 = *(_QWORD *)(v10 + 48);
            v115 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 32) = v114;
            *(_QWORD *)(v10 + 40) = v115;
            *(_QWORD *)(v10 + 48) = v112;
            *(_QWORD *)(v10 + 56) = v113;
            if (*(_DWORD *)(v10 + 16) > v114)
            {
              v116 = *(_QWORD *)(v10 + 16);
              v117 = *(_QWORD *)(v10 + 24);
              *(_QWORD *)(v10 + 16) = v114;
              *(_QWORD *)(v10 + 24) = v115;
              *(_QWORD *)(v10 + 32) = v116;
              *(_QWORD *)(v10 + 40) = v117;
              if (*(_DWORD *)v10 > v114)
              {
                v118 = *(_QWORD *)v10;
                v119 = *(_QWORD *)(v10 + 8);
                *(_QWORD *)v10 = v114;
                *(_QWORD *)(v10 + 8) = v115;
                *(_QWORD *)(v10 + 16) = v118;
                *(_QWORD *)(v10 + 24) = v119;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 383)
        {
          if (!a3)
          {
            if ((_QWORD *)v10 != a2)
            {
              v132 = (unint64_t)(v12 - 2) >> 1;
              v133 = v132;
              do
              {
                if (v132 >= v133)
                {
                  v135 = (2 * v133) | 1;
                  v136 = (unsigned int *)(v10 + 16 * v135);
                  if (2 * v133 + 2 >= v12)
                  {
                    v137 = *v136;
                  }
                  else
                  {
                    v137 = *v136;
                    v138 = v136[4];
                    if (*v136 <= v138)
                      v137 = v136[4];
                    if (*v136 < v138)
                    {
                      v136 += 4;
                      v135 = 2 * v133 + 2;
                    }
                  }
                  v139 = (unsigned int *)(v10 + 16 * v133);
                  if (v137 >= *v139)
                  {
                    v140 = *(_QWORD *)v139;
                    v141 = *((_QWORD *)v139 + 1);
                    while (1)
                    {
                      v143 = v139;
                      v139 = v136;
                      *(_QWORD *)v143 = *(_QWORD *)v136;
                      *((_QWORD *)v143 + 1) = *((_QWORD *)v136 + 1);
                      if (v132 < v135)
                        break;
                      v144 = (2 * v135) | 1;
                      v136 = (unsigned int *)(v10 + 16 * v144);
                      v135 = 2 * v135 + 2;
                      if (v135 < v12)
                      {
                        LODWORD(result) = *v136;
                        v142 = v136[4];
                        if (*v136 <= v142)
                          result = v142;
                        else
                          result = result;
                        if (*v136 >= v142)
                          v135 = v144;
                        else
                          v136 += 4;
                        if (result < v140)
                          break;
                      }
                      else
                      {
                        result = *v136;
                        v135 = v144;
                        if (result < v140)
                          break;
                      }
                    }
                    *(_QWORD *)v139 = v140;
                    *((_QWORD *)v139 + 1) = v141;
                  }
                }
                v134 = v133-- <= 0;
              }
              while (!v134);
              v155 = (unint64_t)v11 >> 4;
              do
              {
                v156 = 0;
                v157 = *(_QWORD *)v10;
                v158 = *(_QWORD *)(v10 + 8);
                v159 = (_QWORD *)v10;
                do
                {
                  v160 = (uint64_t)&v159[2 * v156 + 2];
                  v161 = (2 * v156) | 1;
                  v162 = 2 * v156 + 2;
                  if (v162 < v155)
                  {
                    result = *(unsigned int *)(v160 + 16);
                    if (*(_DWORD *)v160 < result)
                    {
                      v160 += 16;
                      v161 = v162;
                    }
                  }
                  *v159 = *(_QWORD *)v160;
                  v159[1] = *(_QWORD *)(v160 + 8);
                  v159 = (_QWORD *)v160;
                  v156 = v161;
                }
                while (v161 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
                if ((_QWORD *)v160 == a2 - 2)
                {
                  *(_QWORD *)v160 = v157;
                  *(_QWORD *)(v160 + 8) = v158;
                }
                else
                {
                  *(_QWORD *)v160 = *(a2 - 2);
                  *(_QWORD *)(v160 + 8) = *(a2 - 1);
                  *(a2 - 2) = v157;
                  *(a2 - 1) = v158;
                  v163 = v160 - v10 + 16;
                  if (v163 >= 17)
                  {
                    v164 = (((unint64_t)v163 >> 4) - 2) >> 1;
                    v165 = (_QWORD *)(v10 + 16 * v164);
                    if (*(_DWORD *)v165 < *(_DWORD *)v160)
                    {
                      v166 = *(_QWORD *)v160;
                      v167 = *(_QWORD *)(v160 + 8);
                      do
                      {
                        v168 = (_QWORD *)v160;
                        v160 = (uint64_t)v165;
                        *v168 = *v165;
                        v168[1] = v165[1];
                        if (!v164)
                          break;
                        v164 = (v164 - 1) >> 1;
                        v165 = (_QWORD *)(v10 + 16 * v164);
                      }
                      while (*(_DWORD *)v165 < v166);
                      *(_QWORD *)v160 = v166;
                      *(_QWORD *)(v160 + 8) = v167;
                    }
                  }
                }
                a2 -= 2;
                v134 = v155-- <= 2;
              }
              while (!v134);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = (unsigned int *)(v10 + 16 * ((unint64_t)v12 >> 1));
          v15 = *(_DWORD *)v8;
          if ((unint64_t)v11 >= 0x801)
          {
            v16 = *v14;
            if (*v14 >= *(_DWORD *)v10)
            {
              if (v15 >= v16)
                goto LABEL_23;
              v22 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *v8;
              *v8 = v22;
              v23 = v10 + 16 * v13;
              v25 = *(_QWORD *)(v23 + 8);
              v24 = (uint64_t *)(v23 + 8);
              *v24 = *v9;
              *v9 = v25;
              if (*v14 >= *(_DWORD *)v10)
              {
LABEL_23:
                v33 = v13 - 1;
                v34 = (unsigned int *)(v10 + 16 * (v13 - 1));
                v35 = *v34;
                v36 = *((_DWORD *)a2 - 8);
                if (*v34 >= *(_DWORD *)(v10 + 16))
                {
                  if (v36 >= v35)
                    goto LABEL_36;
                  v39 = *(_QWORD *)v34;
                  *(_QWORD *)v34 = *(a2 - 4);
                  *(a2 - 4) = v39;
                  v40 = v10 + 16 * v33;
                  v42 = *(_QWORD *)(v40 + 8);
                  v41 = (uint64_t *)(v40 + 8);
                  *v41 = *(a2 - 3);
                  *(a2 - 3) = v42;
                  if (*v34 >= *(_DWORD *)(v10 + 16))
                  {
LABEL_36:
                    v50 = v13 + 1;
                    v51 = (unsigned int *)(v10 + 16 * (v13 + 1));
                    v52 = *v51;
                    v53 = *((_DWORD *)a2 - 12);
                    if (*v51 >= *(_DWORD *)(v10 + 32))
                    {
                      if (v53 >= v52)
                        goto LABEL_46;
                      v56 = *(_QWORD *)v51;
                      *(_QWORD *)v51 = *(a2 - 6);
                      *(a2 - 6) = v56;
                      v57 = v10 + 16 * v50;
                      v59 = *(_QWORD *)(v57 + 8);
                      v58 = (uint64_t *)(v57 + 8);
                      *v58 = *(a2 - 5);
                      *(a2 - 5) = v59;
                      v52 = *v51;
                      if (*v51 >= *(_DWORD *)(v10 + 32))
                      {
LABEL_46:
                        v64 = *v14;
                        v65 = *v34;
                        if (*v14 >= *v34)
                        {
                          v66 = *(_QWORD *)v14;
                          if (v52 < v64)
                          {
                            v69 = *(_QWORD *)v51;
                            *(_QWORD *)v14 = *(_QWORD *)v51;
                            v70 = v10 + 16 * v13;
                            v71 = *(uint64_t **)(v70 + 8);
                            v68 = (uint64_t *)(v70 + 8);
                            result = (uint64_t)v71;
                            *(_QWORD *)v51 = v66;
                            v72 = v10 + 16 * v50;
                            *v68 = *(_QWORD *)(v72 + 8);
                            *(_QWORD *)(v72 + 8) = v71;
                            if (v65 <= v69)
                            {
                              v66 = v69;
                              goto LABEL_55;
                            }
                            v73 = *(_QWORD *)v34;
                            *(_QWORD *)v34 = v69;
                            *(_QWORD *)v14 = v73;
                            v67 = (uint64_t *)(v10 + 16 * v33 + 8);
                            goto LABEL_54;
                          }
                        }
                        else
                        {
                          v66 = *(_QWORD *)v34;
                          v67 = (uint64_t *)(v10 + 16 * v33 + 8);
                          if (v52 < v64)
                          {
                            *(_QWORD *)v34 = *(_QWORD *)v51;
                            *(_QWORD *)v51 = v66;
                            v68 = (uint64_t *)(v10 + 16 * v50 + 8);
LABEL_54:
                            v78 = *v67;
                            *v67 = *v68;
                            *v68 = v78;
                            v66 = *(_QWORD *)v14;
                            goto LABEL_55;
                          }
                          *(_QWORD *)v34 = *(_QWORD *)v14;
                          *(_QWORD *)v14 = v66;
                          v74 = v10 + 16 * v13;
                          v76 = *(_QWORD *)(v74 + 8);
                          v75 = (uint64_t *)(v74 + 8);
                          v77 = *v67;
                          *v67 = v76;
                          *v75 = v77;
                          if (v52 < v66)
                          {
                            *(_QWORD *)v14 = *(_QWORD *)v51;
                            *(_QWORD *)v51 = v66;
                            v68 = (uint64_t *)(v10 + 16 * v50 + 8);
                            v67 = v75;
                            goto LABEL_54;
                          }
                        }
LABEL_55:
                        v79 = *(_QWORD *)v10;
                        *(_QWORD *)v10 = v66;
                        v21 = (uint64_t *)(v10 + 8);
                        *(_QWORD *)v14 = v79;
                        v29 = (uint64_t *)(v10 + 8 + 16 * v13);
                        goto LABEL_56;
                      }
                      v60 = *(_QWORD *)(v10 + 32);
                      *(_QWORD *)(v10 + 32) = *(_QWORD *)v51;
                      *(_QWORD *)v51 = v60;
                      v55 = (uint64_t *)(v10 + 40);
                    }
                    else
                    {
                      v54 = *(_QWORD *)(v10 + 32);
                      if (v53 >= v52)
                      {
                        v61 = v10 + 16 * v50;
                        v62 = *(_QWORD *)(v61 + 8);
                        v55 = (uint64_t *)(v61 + 8);
                        result = *(_QWORD *)(v10 + 40);
                        *(_QWORD *)(v10 + 32) = *(_QWORD *)v51;
                        *(_QWORD *)(v10 + 40) = v62;
                        *(_QWORD *)v51 = v54;
                        *v55 = result;
                        v52 = v54;
                        if (*((_DWORD *)a2 - 12) >= v54)
                          goto LABEL_46;
                        *(_QWORD *)v51 = *(a2 - 6);
                      }
                      else
                      {
                        v55 = (uint64_t *)(v10 + 40);
                        *(_QWORD *)(v10 + 32) = *(a2 - 6);
                      }
                      *(a2 - 6) = v54;
                      v58 = a2 - 5;
                    }
                    v63 = *v55;
                    *v55 = *v58;
                    *v58 = v63;
                    v52 = *v51;
                    goto LABEL_46;
                  }
                  v43 = *(_QWORD *)(v10 + 16);
                  *(_QWORD *)(v10 + 16) = *(_QWORD *)v34;
                  *(_QWORD *)v34 = v43;
                  v38 = (uint64_t *)(v10 + 24);
                }
                else
                {
                  v37 = *(_QWORD *)(v10 + 16);
                  if (v36 >= v35)
                  {
                    v46 = v10 + 16 * v33;
                    v47 = *(_QWORD *)(v46 + 8);
                    v38 = (uint64_t *)(v46 + 8);
                    v48 = *(_QWORD *)(v10 + 24);
                    *(_QWORD *)(v10 + 16) = *(_QWORD *)v34;
                    *(_QWORD *)(v10 + 24) = v47;
                    *(_QWORD *)v34 = v37;
                    *v38 = v48;
                    if (*((_DWORD *)a2 - 8) >= v37)
                      goto LABEL_36;
                    *(_QWORD *)v34 = *(a2 - 4);
                  }
                  else
                  {
                    v38 = (uint64_t *)(v10 + 24);
                    *(_QWORD *)(v10 + 16) = *(a2 - 4);
                  }
                  *(a2 - 4) = v37;
                  v41 = a2 - 3;
                }
                v49 = *v38;
                *v38 = *v41;
                *v41 = v49;
                goto LABEL_36;
              }
              v26 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *(_QWORD *)v14;
              v17 = (uint64_t *)(v10 + 8);
              *(_QWORD *)v14 = v26;
            }
            else
            {
              v17 = (uint64_t *)(v10 + 8);
              v18 = *(_QWORD *)v10;
              if (v15 >= v16)
              {
                *(_QWORD *)v10 = *(_QWORD *)v14;
                *(_QWORD *)v14 = v18;
                v31 = *(_QWORD *)(v10 + 8);
                v17 = (uint64_t *)(v10 + 8 + 16 * v13);
                *(_QWORD *)(v10 + 8) = *v17;
                *v17 = v31;
                if (*(_DWORD *)v8 >= v18)
                  goto LABEL_23;
                *(_QWORD *)v14 = *v8;
              }
              else
              {
                *(_QWORD *)v10 = *v8;
              }
              *v8 = v18;
              v24 = a2 - 1;
            }
            v32 = *v17;
            *v17 = *v24;
            *v24 = v32;
            goto LABEL_23;
          }
          v19 = *(_DWORD *)v10;
          if (*(_DWORD *)v10 < *v14)
          {
            v20 = *(_QWORD *)v14;
            v21 = (uint64_t *)(v10 + 16 * v13 + 8);
            if (v15 >= v19)
            {
              *(_QWORD *)v14 = *(_QWORD *)v10;
              v44 = *(_QWORD *)(v10 + 8);
              *(_QWORD *)v10 = v20;
              v45 = *v21;
              *v21 = v44;
              *(_QWORD *)(v10 + 8) = v45;
              if (*(_DWORD *)v8 >= v20)
                goto LABEL_57;
              *(_QWORD *)v10 = *v8;
              *v8 = v20;
              v21 = (uint64_t *)(v10 + 8);
            }
            else
            {
              *(_QWORD *)v14 = *v8;
              *v8 = v20;
            }
            v29 = a2 - 1;
            goto LABEL_56;
          }
          if (v15 < v19)
          {
            v27 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v8;
            *v8 = v27;
            v29 = (uint64_t *)(v10 + 8);
            v28 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)(v10 + 8) = *v9;
            *v9 = v28;
            if (*(_DWORD *)v10 < *v14)
            {
              v30 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v10;
              *(_QWORD *)v10 = v30;
              v21 = (uint64_t *)(v10 + 16 * v13 + 8);
LABEL_56:
              v80 = *v21;
              *v21 = *v29;
              *v29 = v80;
            }
          }
LABEL_57:
          --a3;
          if ((a4 & 1) == 0)
          {
            v81 = *(_QWORD *)v10;
            if (*(_DWORD *)(v10 - 16) < *(_DWORD *)v10)
              goto LABEL_60;
            if (*(_DWORD *)v8 <= v81)
            {
              v96 = v10 + 16;
              do
              {
                v10 = v96;
                if (v96 >= (unint64_t)a2)
                  break;
                v96 += 16;
              }
              while (*(_DWORD *)v10 <= v81);
            }
            else
            {
              do
              {
                v95 = *(_DWORD *)(v10 + 16);
                v10 += 16;
              }
              while (v95 <= v81);
            }
            v97 = a2;
            if (v10 < (unint64_t)a2)
            {
              v97 = a2;
              do
              {
                v98 = *((_DWORD *)v97 - 4);
                v97 -= 2;
              }
              while (v98 > v81);
            }
            v99 = *(_QWORD *)(v7 + 8);
            while (v10 < (unint64_t)v97)
            {
              v100 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v97;
              *v97 = v100;
              v101 = *(_QWORD *)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v97[1];
              v97[1] = v101;
              do
              {
                v102 = *(_DWORD *)(v10 + 16);
                v10 += 16;
              }
              while (v102 <= v81);
              do
              {
                v103 = *((_DWORD *)v97 - 4);
                v97 -= 2;
              }
              while (v103 > v81);
            }
            if (v10 - 16 != v7)
            {
              *(_QWORD *)v7 = *(_QWORD *)(v10 - 16);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v10 - 8);
            }
            a4 = 0;
            *(_QWORD *)(v10 - 16) = v81;
            *(_QWORD *)(v10 - 8) = v99;
            continue;
          }
          v81 = *(_QWORD *)v10;
LABEL_60:
          v82 = *(_QWORD *)(v10 + 8);
          v83 = v10;
          do
          {
            v84 = v83;
            v85 = *(_DWORD *)(v83 + 16);
            v83 += 16;
          }
          while (v85 < v81);
          v86 = a2;
          if (v84 == v10)
          {
            v86 = a2;
            do
            {
              if (v83 >= (unint64_t)v86)
                break;
              v88 = *((_DWORD *)v86 - 4);
              v86 -= 2;
            }
            while (v88 >= v81);
          }
          else
          {
            do
            {
              v87 = *((_DWORD *)v86 - 4);
              v86 -= 2;
            }
            while (v87 >= v81);
          }
          v10 = v83;
          if (v83 < (unint64_t)v86)
          {
            v89 = v86;
            do
            {
              v90 = *(_QWORD *)v10;
              *(_QWORD *)v10 = *v89;
              *v89 = v90;
              v91 = *(_QWORD *)(v10 + 8);
              *(_QWORD *)(v10 + 8) = v89[1];
              v89[1] = v91;
              do
              {
                v92 = *(_DWORD *)(v10 + 16);
                v10 += 16;
              }
              while (v92 < v81);
              do
              {
                v93 = *((_DWORD *)v89 - 4);
                v89 -= 2;
              }
              while (v93 >= v81);
            }
            while (v10 < (unint64_t)v89);
          }
          if (v10 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v10 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v10 - 8);
          }
          *(_QWORD *)(v10 - 16) = v81;
          *(_QWORD *)(v10 - 8) = v82;
          if (v83 < (unint64_t)v86)
            goto LABEL_79;
          v94 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(v7, (_QWORD *)(v10 - 16));
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(v10, a2);
          if (!(_DWORD)result)
          {
            if (v94)
              continue;
LABEL_79:
            result = std::__introsort<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *,false>(v7, v10 - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (_QWORD *)(v10 - 16);
          if (v94)
            return result;
          goto LABEL_2;
        }
        v120 = (_QWORD *)(v10 + 16);
        v122 = (_QWORD *)v10 == a2 || v120 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v122)
          {
            v123 = 0;
            v124 = v10;
            do
            {
              v126 = v120;
              if (*(_DWORD *)(v124 + 16) < *(_DWORD *)v124)
              {
                v127 = *v120;
                v128 = *(_QWORD *)(v124 + 24);
                v129 = v123;
                do
                {
                  v130 = v10 + v129;
                  v131 = *(_QWORD *)(v10 + v129 + 8);
                  *(_QWORD *)(v130 + 16) = *(_QWORD *)(v10 + v129);
                  *(_QWORD *)(v130 + 24) = v131;
                  if (!v129)
                  {
                    v125 = (_QWORD *)v10;
                    goto LABEL_123;
                  }
                  v129 -= 16;
                }
                while (*(_DWORD *)(v130 - 16) > v127);
                v125 = (_QWORD *)(v10 + v129 + 16);
LABEL_123:
                *v125 = v127;
                v125[1] = v128;
              }
              v120 = v126 + 2;
              v123 += 16;
              v124 = (unint64_t)v126;
            }
            while (v126 + 2 != a2);
          }
        }
        else if (!v122)
        {
          v148 = (_QWORD *)(v10 + 8);
          do
          {
            v149 = v120;
            if (*(_DWORD *)(v7 + 16) < *(_DWORD *)v7)
            {
              v150 = *v120;
              v151 = *(_QWORD *)(v7 + 24);
              v152 = v148;
              do
              {
                v153 = *v152;
                v152[1] = *(v152 - 1);
                v152[2] = v153;
                v154 = *((_DWORD *)v152 - 6);
                v152 -= 2;
              }
              while (v154 > v150);
              v152[1] = v150;
              v152[2] = v151;
            }
            v120 = v149 + 2;
            v148 += 2;
            v7 = (uint64_t)v149;
          }
          while (v149 + 2 != a2);
        }
        return result;
    }
  }
}

void std::__shared_ptr_pointer<altitude::LabelDataPrivate *,std::shared_ptr<altitude::LabelDataPrivate>::__shared_ptr_default_delete<altitude::LabelDataPrivate,altitude::LabelDataPrivate>,std::allocator<altitude::LabelDataPrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::LabelDataPrivate *,std::shared_ptr<altitude::LabelDataPrivate>::__shared_ptr_default_delete<altitude::LabelDataPrivate,altitude::LabelDataPrivate>,std::allocator<altitude::LabelDataPrivate>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

_QWORD *altitude::LabelDataPrivate::labelTile@<X0>(_QWORD *result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  switch(a2)
  {
    case 1:
      v3 = result[1];
      if (!v3)
        goto LABEL_22;
      v5 = *(_QWORD *)(v3 + 48);
      v4 = *(_QWORD *)(v3 + 56);
      *a3 = v5;
      a3[1] = v4;
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      break;
    case 2:
      v8 = result[3];
      if (!v8)
        goto LABEL_22;
      v10 = *(_QWORD *)(v8 + 64);
      v9 = *(_QWORD *)(v8 + 72);
      *a3 = v10;
      a3[1] = v9;
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      break;
    case 4:
      v13 = result[5];
      if (!v13)
        goto LABEL_22;
      v15 = *(_QWORD *)(v13 + 80);
      v14 = *(_QWORD *)(v13 + 88);
      *a3 = v15;
      a3[1] = v14;
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      break;
    case 8:
      v18 = result[7];
      if (!v18)
        goto LABEL_22;
      v20 = *(_QWORD *)(v18 + 96);
      v19 = *(_QWORD *)(v18 + 104);
      *a3 = v20;
      a3[1] = v19;
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      break;
    default:
LABEL_22:
      *a3 = 0;
      a3[1] = 0;
      break;
  }
  return result;
}

uint64_t altitude::LabelDataPrivate::trafficTile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 96);
  *a2 = *(_QWORD *)(this + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t altitude::LabelDataPrivate::skeletonTile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 112);
  *a2 = *(_QWORD *)(this + 104);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *altitude::LabelDataPrivate::trafficPieces@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (_BYTE *)this[17];
  v3 = (_BYTE *)this[18];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = (char *)operator new(v5);
    *a2 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

_QWORD *altitude::LabelDataPrivate::trafficIncidents@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (_BYTE *)this[20];
  v3 = (_BYTE *)this[21];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

uint64_t (***altitude::LabelDataPrivate::regionalResourceData(altitude::LabelDataPrivate *this))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 9);
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t altitude::LabelDataPrivate::anchorTile(altitude::LabelDataPrivate *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t altitude::LabelDataPrivate::renderStamp(altitude::LabelDataPrivate *this)
{
  return *((_QWORD *)this + 23);
}

unint64_t altitude::LabelDataPrivate::geoTileKey(altitude::LabelDataPrivate *this)
{
  return *((unsigned int *)this + 48) | ((unint64_t)((1 << *((_DWORD *)this + 50))
                                                                        + ~*((_DWORD *)this + 49)) << 32);
}

uint64_t altitude::LabelDataPrivate::altitudeTileKey(altitude::LabelDataPrivate *this)
{
  return *((_QWORD *)this + 24);
}

void altitude::LabelDataPrivate::~LabelDataPrivate(altitude::LabelDataPrivate *this)
{
  altitude::LabelDataPrivate::~LabelDataPrivate(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  *(_QWORD *)this = &off_1E42C4A88;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v19)
      goto LABEL_35;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_35:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v22)
    goto LABEL_39;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v25)
      return;
  }
  else
  {
LABEL_39:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v25)
      return;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(uint64_t *result, int *a2, int *a3, _QWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v5 < v4)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v8;
      v10 = (uint64_t *)(a2 + 2);
      v9 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v11 = *result;
        *result = *(_QWORD *)a2;
        v6 = result + 1;
        *(_QWORD *)a2 = v11;
LABEL_10:
        v14 = *v6;
        *v6 = *v10;
        *v10 = v14;
      }
    }
  }
  else
  {
    v6 = result + 1;
    v7 = *result;
    if (v5 < v4)
    {
      *result = *(_QWORD *)a3;
LABEL_9:
      *(_QWORD *)a3 = v7;
      v10 = (uint64_t *)(a3 + 2);
      goto LABEL_10;
    }
    *result = *(_QWORD *)a2;
    v6 = (uint64_t *)(a2 + 2);
    v12 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = v7;
    v13 = result[1];
    result[1] = v12;
    *((_QWORD *)a2 + 1) = v13;
    if (*a3 < v7)
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_9;
    }
  }
  if (*(_DWORD *)a4 < *a3)
  {
    v15 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v15;
    v16 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = a4[1];
    a4[1] = v16;
    if (*a3 < *a2)
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      v18 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v18;
      if (*a2 < *(_DWORD *)result)
      {
        v19 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v19;
        v20 = result[1];
        result[1] = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((_DWORD *)a2 - 4) < *(_DWORD *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = *(_DWORD *)(a1 + 16);
      v9 = *((_DWORD *)a2 - 4);
      if (v8 < *(_DWORD *)a1)
      {
        v10 = (uint64_t *)(a1 + 8);
        v11 = *(_QWORD *)a1;
        if (v9 >= v8)
        {
          v10 = (uint64_t *)(a1 + 24);
          v39 = *(_QWORD *)(a1 + 8);
          v38 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v11;
          *(_QWORD *)a1 = v38;
          *(_QWORD *)(a1 + 24) = v39;
          if (*((_DWORD *)a2 - 4) >= v11)
            return result;
          *(_QWORD *)(a1 + 16) = *(a2 - 2);
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 2);
        }
        *(a2 - 2) = v11;
        v30 = a2 - 1;
        goto LABEL_25;
      }
      if (v9 < v8)
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(a2 - 2);
        *(a2 - 2) = v28;
        v30 = (uint64_t *)(a1 + 24);
        v29 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(a2 - 1);
        *(a2 - 1) = v29;
        if (*(_DWORD *)(a1 + 16) < *(_DWORD *)a1)
        {
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v31;
          v10 = (uint64_t *)(a1 + 8);
LABEL_25:
          v40 = *v10;
          *v10 = *v30;
          *v30 = v40;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<altitude::CompleteGlobeTileSetLoader::FallbackRequestInfo,altitude::Tile *> *>((uint64_t *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (_QWORD *)(a1 + 48));
      if (*((_DWORD *)a2 - 4) < *(_DWORD *)(a1 + 48))
      {
        v18 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *(a2 - 2);
        *(a2 - 2) = v18;
        v19 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(a2 - 1);
        *(a2 - 1) = v19;
        if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 32))
        {
          v20 = *(_QWORD *)(a1 + 32);
          v21 = *(_QWORD *)(a1 + 40);
          v22 = *(_QWORD *)(a1 + 48);
          v23 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 32) = v22;
          *(_QWORD *)(a1 + 40) = v23;
          *(_QWORD *)(a1 + 48) = v20;
          *(_QWORD *)(a1 + 56) = v21;
          if (*(_DWORD *)(a1 + 16) > v22)
          {
            v24 = *(_QWORD *)(a1 + 16);
            v25 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v22;
            *(_QWORD *)(a1 + 24) = v23;
            *(_QWORD *)(a1 + 32) = v24;
            *(_QWORD *)(a1 + 40) = v25;
            if (*(_DWORD *)a1 > v22)
            {
              v26 = *(_QWORD *)a1;
              v27 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)a1 = v22;
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 16) = v26;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (_DWORD *)(a1 + 32);
      v13 = *(_DWORD *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)a1;
      if (v14 < *(_DWORD *)a1)
      {
        v16 = (uint64_t *)(a1 + 8);
        v17 = *(_QWORD *)a1;
        if (v13 >= v14)
        {
          v41 = *(_QWORD *)(a1 + 8);
          v16 = (uint64_t *)(a1 + 24);
          v42 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = v42;
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 24) = v41;
          if (v13 >= v17)
            goto LABEL_30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 32);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v17;
        v32 = (uint64_t *)(a1 + 40);
        goto LABEL_29;
      }
      if (v13 < v14)
      {
        v32 = (uint64_t *)(a1 + 24);
        v33 = *(_QWORD *)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 16);
        v35 = *(_QWORD *)(a1 + 32);
        v36 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 16) = v35;
        *(_QWORD *)(a1 + 24) = v36;
        *(_QWORD *)(a1 + 32) = v34;
        *(_QWORD *)(a1 + 40) = v33;
        if (v15 > v35)
        {
          v37 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v35;
          *(_QWORD *)(a1 + 16) = v37;
          v16 = (uint64_t *)(a1 + 8);
LABEL_29:
          v43 = *v16;
          *v16 = *v32;
          *v32 = v43;
        }
      }
LABEL_30:
      v44 = (_QWORD *)(a1 + 48);
      if ((_QWORD *)(a1 + 48) == a2)
        return 1;
      v45 = 0;
      v46 = 0;
      while (1)
      {
        if (*(_DWORD *)v44 < *v12)
        {
          v48 = *v44;
          v49 = v44[1];
          v50 = v45;
          do
          {
            v51 = a1 + v50;
            v52 = *(_QWORD *)(a1 + v50 + 40);
            *(_QWORD *)(v51 + 48) = *(_QWORD *)(a1 + v50 + 32);
            *(_QWORD *)(v51 + 56) = v52;
            if (v50 == -32)
            {
              v47 = (_QWORD *)a1;
              goto LABEL_33;
            }
            v50 -= 16;
          }
          while (*(_DWORD *)(v51 + 16) > v48);
          v47 = (_QWORD *)(a1 + v50 + 48);
LABEL_33:
          *v47 = v48;
          v47[1] = v49;
          if (++v46 == 8)
            return v44 + 2 == a2;
        }
        v12 = v44;
        v45 += 16;
        v44 += 2;
        if (v44 == a2)
          return 1;
      }
  }
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 >= v4)
    {
      v4 = *a3;
    }
    else
    {
      *a2 = v6;
      *a3 = v4;
      v8 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v8;
      v9 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v9;
        v10 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v10;
        v4 = *a3;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      *result = v6;
      *a3 = v5;
      v7 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
LABEL_9:
      v4 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v11 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v11;
    v4 = *a3;
    if (*a3 < v5)
    {
      *a2 = v4;
      *a3 = v5;
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v11;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v4)
  {
    *a3 = *a4;
    *a4 = v4;
    v12 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = v12;
    v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v14;
      v15 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v15;
        v16 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        goto LABEL_7;
      }
      return result;
    case 3:
      v8 = *(_DWORD *)(a1 + 16);
      v9 = *(_DWORD *)a1;
      v10 = *(_DWORD *)(a2 - 16);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v10 < v8)
        {
          *(_DWORD *)(a1 + 16) = v10;
          *(_DWORD *)(a2 - 16) = v8;
          v28 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v28;
          v29 = *(_DWORD *)(a1 + 16);
          v30 = *(_DWORD *)a1;
          if (v29 < *(_DWORD *)a1)
          {
            *(_DWORD *)a1 = v29;
            *(_DWORD *)(a1 + 16) = v30;
            v31 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v31;
          }
        }
      }
      else if (v10 >= v8)
      {
        *(_DWORD *)a1 = v8;
        *(_DWORD *)(a1 + 16) = v9;
        v35 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v35;
        v36 = *(_DWORD *)(a2 - 16);
        if (v36 < v9)
        {
          *(_DWORD *)(a1 + 16) = v36;
          *(_DWORD *)(a2 - 16) = v9;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v35;
        }
      }
      else
      {
        *(_DWORD *)a1 = v10;
        *(_DWORD *)(a2 - 16) = v9;
LABEL_7:
        v11 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a2 - 16));
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,altitude::CompleteGlobeTileSetLoader::PrioritySorter &,std::pair<unsigned int,altitude::Tile *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 48));
      v17 = *(_DWORD *)(a2 - 16);
      v18 = *(_DWORD *)(a1 + 48);
      if (v17 < v18)
      {
        *(_DWORD *)(a1 + 48) = v17;
        *(_DWORD *)(a2 - 16) = v18;
        v19 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v19;
        v20 = *(_DWORD *)(a1 + 48);
        v21 = *(_DWORD *)(a1 + 32);
        if (v20 < v21)
        {
          *(_DWORD *)(a1 + 32) = v20;
          *(_DWORD *)(a1 + 48) = v21;
          v22 = *(_QWORD *)(a1 + 40);
          v23 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = v23;
          *(_QWORD *)(a1 + 56) = v22;
          v24 = *(_DWORD *)(a1 + 16);
          if (v20 < v24)
          {
            *(_DWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = v24;
            v25 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v23;
            *(_QWORD *)(a1 + 40) = v25;
            v26 = *(_DWORD *)a1;
            if (v20 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v20;
              *(_DWORD *)(a1 + 16) = v26;
              v27 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v12 = (unsigned int *)(a1 + 32);
      v13 = *(_DWORD *)(a1 + 32);
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)a1;
      if (v14 >= *(_DWORD *)a1)
      {
        if (v13 < v14)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v14;
          v32 = *(_QWORD *)(a1 + 24);
          v33 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 24) = v33;
          *(_QWORD *)(a1 + 40) = v32;
          if (v13 < v15)
          {
            *(_DWORD *)a1 = v13;
            *(_DWORD *)(a1 + 16) = v15;
            v34 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;
            *(_QWORD *)(a1 + 24) = v34;
          }
        }
      }
      else if (v13 >= v14)
      {
        *(_DWORD *)a1 = v14;
        *(_DWORD *)(a1 + 16) = v15;
        v37 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v37;
        if (v13 < v15)
        {
          *(_DWORD *)(a1 + 16) = v13;
          *(_DWORD *)(a1 + 32) = v15;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v37;
        }
      }
      else
      {
        *(_DWORD *)a1 = v13;
        *(_DWORD *)(a1 + 32) = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v16;
      }
      v38 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      break;
  }
  while (1)
  {
    v42 = *(_DWORD *)v38;
    v43 = *v12;
    if (*(_DWORD *)v38 < *v12)
    {
      v44 = *(_QWORD *)(v38 + 8);
      v45 = v39;
      do
      {
        v46 = a1 + v45;
        *(_DWORD *)(v46 + 48) = v43;
        *(_QWORD *)(v46 + 56) = *(_QWORD *)(a1 + v45 + 40);
        if (v45 == -32)
        {
          v41 = a1;
          goto LABEL_30;
        }
        v43 = *(_DWORD *)(v46 + 16);
        v45 -= 16;
      }
      while (v42 < v43);
      v41 = a1 + v45 + 48;
LABEL_30:
      *(_DWORD *)v41 = v42;
      *(_QWORD *)(v41 + 8) = v44;
      if (++v40 == 8)
        return v38 + 16 == a2;
    }
    v12 = (unsigned int *)v38;
    v39 += 16;
    v38 += 16;
    if (v38 == a2)
      return 1;
  }
}

void altitude::CompleteGlobeTileSetLoader::updateTileStamps(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  void **v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v82;
  unsigned int v84;
  unint64_t v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  __int128 v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  if (*a4)
  {
    v9 = a3;
    v10 = a1;
    v11 = 0;
    v82 = (uint64_t **)(a1 + 96);
    v12 = a4 + 1;
    v13 = a3;
    v78 = a1 + 792;
    v79 = a1 + 712;
    v76 = a1 + 984;
    v77 = a1 + 952;
    do
    {
      if (v7 <= 4)
        v14 = &a4[v11 + 1];
      else
        v14 = (unint64_t *)(a4[5] + 8 * v11);
      v15 = *v14;
      v16 = (char *)v82;
      v17 = *v82;
      v18 = v82;
      v85 = v11;
      if (*v82)
      {
        while (1)
        {
          while (1)
          {
            v16 = (char *)v17;
            v19 = v17[4];
            if (v15 >= v19)
              break;
            v17 = *(uint64_t **)v16;
            v18 = (uint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_14;
          }
          if (v19 >= v15)
            break;
          v17 = (uint64_t *)*((_QWORD *)v16 + 1);
          if (!v17)
          {
            v18 = (uint64_t **)(v16 + 8);
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        v20 = v16;
        v16 = (char *)operator new(0x60uLL);
        *((_QWORD *)v16 + 4) = v15;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((_QWORD *)v16 + 9) = 0;
        *((_OWORD *)v16 + 5) = xmmword_19FFB37D0;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v20;
        *v18 = (uint64_t *)v16;
        v21 = **(_QWORD **)(v10 + 88);
        v22 = (uint64_t *)v16;
        if (v21)
        {
          *(_QWORD *)(v10 + 88) = v21;
          v22 = *v18;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 96), v22);
        ++*(_QWORD *)(v10 + 104);
      }
      *((_QWORD *)v16 + 9) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *((_OWORD *)v16 + 5) = xmmword_19FFB37D0;
      v23 = *(uint64_t **)(a2 + 40);
      v24 = *(uint64_t **)(a2 + 48);
      if (v23 == v24)
      {
        v25 = v85;
        if (*(_BYTE *)(v15 + 1292))
          goto LABEL_108;
        goto LABEL_3;
      }
      v84 = 0;
      do
      {
        v28 = *v23;
        if (*a4 <= 4)
          v29 = v12;
        else
          v29 = (_QWORD *)a4[5];
        if (v15 == *v29)
        {
          *(_DWORD *)(v28 + 384) = v9;
          v30 = v28;
          do
          {
            if (*(_QWORD *)(v30 + 376) == v13)
              break;
            *(_QWORD *)(v30 + 376) = v13;
            v30 = *(_QWORD *)(v30 + 296);
          }
          while (v30);
        }
        if (!*(_BYTE *)(v15 + 1292))
          goto LABEL_24;
        v31 = *(_QWORD *)(v28 + 160);
        if (!v31)
          goto LABEL_24;
        if (v31 < 3)
        {
          if (*(_QWORD *)(v28 + 184) == v15)
          {
            v35 = 0;
          }
          else
          {
            if (v31 == 1 || *(_QWORD *)(v28 + 232) != v15)
              goto LABEL_24;
            v35 = 1;
          }
          v36 = v28 + 48 * v35 + 168;
        }
        else
        {
          v32 = 0;
          v33 = *(_QWORD *)(v28 + 264);
          v34 = (_QWORD *)(v33 + 16);
          while (*v34 != v15)
          {
            ++v32;
            v34 += 6;
            if (v31 == v32)
              goto LABEL_24;
          }
          v36 = v33 + 48 * v32;
        }
        if (*(_DWORD *)(v36 + 36) < v9 || *(_BYTE *)(v36 + 32))
          goto LABEL_24;
        ++*((_DWORD *)v16 + 11);
        v37 = *(_BYTE **)(v28 + 328);
        if (v37)
        {
          if (!v37[296])
            goto LABEL_51;
LABEL_50:
          ++*((_DWORD *)v16 + 16);
          goto LABEL_51;
        }
        v48 = operator new();
        *(_DWORD *)(v48 + 8) = 0;
        *(_QWORD *)(v48 + 40) = 0;
        *(_QWORD *)(v48 + 32) = 0;
        *(_QWORD *)(v48 + 16) = 0;
        *(_QWORD *)(v48 + 24) = v48 + 32;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_OWORD *)(v48 + 80) = 0u;
        v49 = (void **)(v48 + 80);
        *(_QWORD *)v48 = &off_1E42C5580;
        *(_QWORD *)(v48 + 208) = 0;
        *(_QWORD *)(v48 + 216) = 0;
        *(_OWORD *)(v48 + 96) = 0u;
        *(_OWORD *)(v48 + 112) = 0u;
        *(_OWORD *)(v48 + 128) = 0u;
        *(_OWORD *)(v48 + 144) = 0u;
        *(_OWORD *)(v48 + 160) = 0u;
        *(_OWORD *)(v48 + 176) = 0u;
        *(_OWORD *)(v48 + 185) = 0u;
        *(_DWORD *)(v48 + 224) = -1;
        *(_QWORD *)(v48 + 232) = 0;
        *(_OWORD *)(v48 + 248) = 0u;
        *(_OWORD *)(v48 + 264) = 0u;
        *(_DWORD *)(v48 + 279) = 0;
        *(_QWORD *)(v48 + 288) = 0x3FF0000000000000;
        *(_DWORD *)(v48 + 296) = 0;
        *(_WORD *)(v48 + 300) = 0;
        altitude::Tile::createTileName(&v90, (unsigned int *)(v28 + 392), (uint64_t *)(*(_QWORD *)(v28 + 288) + 40), (uint64_t *)(*(_QWORD *)(v28 + 288) + 136));
        if (*(char *)(v48 + 103) < 0)
          operator delete(*v49);
        *(_OWORD *)v49 = v90;
        *(_QWORD *)(v48 + 96) = v91;
        *(_QWORD *)(v28 + 328) = v48;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v28);
        v37 = *(_BYTE **)(v28 + 328);
        if (v37[296])
          goto LABEL_50;
LABEL_51:
        v38 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v37 + 48))(v37) ^ 1;
        v39 = *(_QWORD *)(v28 + 336);
        if (v39)
          v38 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39) ^ 1;
        v40 = *(_QWORD *)(v28 + 344);
        if (v40)
          v38 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40) ^ 1;
        v41 = *(_QWORD *)(v28 + 352);
        if (v41)
          v38 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41) ^ 1;
        v42 = *(_QWORD *)(v28 + 360);
        if (v42)
          v38 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42) ^ 1;
        if (v38)
        {
          v43 = *(_QWORD **)(v28 + 328);
          if (!v43)
            goto LABEL_74;
        }
        else
        {
          ++*((_DWORD *)v16 + 12);
          v43 = *(_QWORD **)(v28 + 328);
          if (!v43)
          {
LABEL_74:
            v50 = operator new();
            *(_DWORD *)(v50 + 8) = 0;
            *(_QWORD *)(v50 + 40) = 0;
            *(_QWORD *)(v50 + 32) = 0;
            *(_QWORD *)(v50 + 16) = 0;
            *(_QWORD *)(v50 + 24) = v50 + 32;
            *(_OWORD *)(v50 + 48) = 0u;
            *(_OWORD *)(v50 + 64) = 0u;
            *(_OWORD *)(v50 + 80) = 0u;
            v51 = (void **)(v50 + 80);
            *(_QWORD *)v50 = &off_1E42C5580;
            *(_QWORD *)(v50 + 208) = 0;
            *(_QWORD *)(v50 + 216) = 0;
            *(_OWORD *)(v50 + 96) = 0u;
            *(_OWORD *)(v50 + 112) = 0u;
            *(_OWORD *)(v50 + 128) = 0u;
            *(_OWORD *)(v50 + 144) = 0u;
            *(_OWORD *)(v50 + 160) = 0u;
            *(_OWORD *)(v50 + 176) = 0u;
            *(_OWORD *)(v50 + 185) = 0u;
            *(_DWORD *)(v50 + 224) = -1;
            *(_QWORD *)(v50 + 232) = 0;
            *(_OWORD *)(v50 + 248) = 0u;
            *(_OWORD *)(v50 + 264) = 0u;
            *(_DWORD *)(v50 + 279) = 0;
            *(_QWORD *)(v50 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v50 + 296) = 0;
            *(_WORD *)(v50 + 300) = 0;
            altitude::Tile::createTileName(&v90, (unsigned int *)(v28 + 392), (uint64_t *)(*(_QWORD *)(v28 + 288) + 40), (uint64_t *)(*(_QWORD *)(v28 + 288) + 136));
            if (*(char *)(v50 + 103) < 0)
              operator delete(*v51);
            *(_OWORD *)v51 = v90;
            *(_QWORD *)(v50 + 96) = v91;
            *(_QWORD *)(v28 + 328) = v50;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v28);
            v43 = *(_QWORD **)(v28 + 328);
            if (!v43[17])
              goto LABEL_63;
LABEL_62:
            ++*((_DWORD *)v16 + 13);
            goto LABEL_63;
          }
        }
        if (v43[17])
          goto LABEL_62;
LABEL_63:
        v44 = *(_QWORD *)(v28 + 160);
        v9 = a3;
        if (!v44)
          goto LABEL_24;
        if (v44 < 3)
        {
          if (*(_QWORD *)(v28 + 184) == v15)
          {
            v52 = 0;
          }
          else
          {
            if (v44 == 1 || *(_QWORD *)(v28 + 232) != v15)
              goto LABEL_24;
            v52 = 1;
          }
          v53 = v28 + 48 * v52 + 168;
        }
        else
        {
          v45 = 0;
          v46 = *(_QWORD *)(v28 + 264);
          v47 = (_QWORD *)(v46 + 16);
          while (*v47 != v15)
          {
            ++v45;
            v47 += 6;
            if (v44 == v45)
              goto LABEL_24;
          }
          v53 = v46 + 48 * v45;
        }
        if (*(_DWORD *)(v53 + 28) >= a3)
        {
          v54 = *(float *)(v53 + 24);
          if (v54 < 1.0 && *(_QWORD *)(v28 + 304) != *(_QWORD *)(v28 + 312))
          {
            ++*((_DWORD *)v16 + 14);
LABEL_23:
            v26 = *((double *)v16 + 9);
            v27 = fmax(*((double *)v16 + 11), v54);
            *((double *)v16 + 10) = fmin(*((double *)v16 + 10), v54);
            *((double *)v16 + 11) = v27;
            *((double *)v16 + 9) = v26 + v54;
            ++v84;
            v9 = a3;
            goto LABEL_24;
          }
          if (v43)
          {
            v55 = (*(uint64_t (**)(_QWORD *))(*v43 + 48))(v43) ^ 1;
            v56 = *(_QWORD *)(v28 + 336);
            if (v56)
              goto LABEL_89;
          }
          else
          {
            v55 = 0;
            v56 = *(_QWORD *)(v28 + 336);
            if (v56)
LABEL_89:
              v55 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56) ^ 1;
          }
          v57 = *(_QWORD *)(v28 + 344);
          if (v57)
            v55 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57) ^ 1;
          v58 = *(_QWORD *)(v28 + 352);
          if (v58)
            v55 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58) ^ 1;
          v59 = *(_QWORD *)(v28 + 360);
          if (v59)
            v55 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59) ^ 1;
          if (!v55)
          {
            ++*((_DWORD *)v16 + 15);
            v60 = *(_QWORD *)(v28 + 328);
            if (!v60)
            {
              v61 = operator new();
              *(_DWORD *)(v61 + 8) = 0;
              *(_QWORD *)(v61 + 40) = 0;
              *(_QWORD *)(v61 + 32) = 0;
              *(_QWORD *)(v61 + 16) = 0;
              *(_QWORD *)(v61 + 24) = v61 + 32;
              *(_OWORD *)(v61 + 48) = 0u;
              *(_OWORD *)(v61 + 64) = 0u;
              *(_OWORD *)(v61 + 80) = 0u;
              v62 = (void **)(v61 + 80);
              *(_QWORD *)v61 = &off_1E42C5580;
              *(_QWORD *)(v61 + 208) = 0;
              *(_QWORD *)(v61 + 216) = 0;
              *(_OWORD *)(v61 + 96) = 0u;
              *(_OWORD *)(v61 + 112) = 0u;
              *(_OWORD *)(v61 + 128) = 0u;
              *(_OWORD *)(v61 + 144) = 0u;
              *(_OWORD *)(v61 + 160) = 0u;
              *(_OWORD *)(v61 + 176) = 0u;
              *(_OWORD *)(v61 + 185) = 0u;
              *(_DWORD *)(v61 + 224) = -1;
              *(_QWORD *)(v61 + 232) = 0;
              *(_OWORD *)(v61 + 248) = 0u;
              *(_OWORD *)(v61 + 264) = 0u;
              *(_DWORD *)(v61 + 279) = 0;
              *(_QWORD *)(v61 + 288) = 0x3FF0000000000000;
              *(_DWORD *)(v61 + 296) = 0;
              *(_WORD *)(v61 + 300) = 0;
              altitude::Tile::createTileName(&v90, (unsigned int *)(v28 + 392), (uint64_t *)(*(_QWORD *)(v28 + 288) + 40), (uint64_t *)(*(_QWORD *)(v28 + 288) + 136));
              if (*(char *)(v61 + 103) < 0)
                operator delete(*v62);
              *(_OWORD *)v62 = v90;
              *(_QWORD *)(v61 + 96) = v91;
              *(_QWORD *)(v28 + 328) = v61;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v28);
              v60 = *(_QWORD *)(v28 + 328);
            }
            if (*(_BYTE *)(v60 + 296))
              ++*((_DWORD *)v16 + 17);
          }
          goto LABEL_23;
        }
LABEL_24:
        ++v23;
      }
      while (v23 != v24);
      v10 = a1;
      v25 = v85;
      if (!*(_BYTE *)(v15 + 1292))
        goto LABEL_3;
      if (v84)
        *((double *)v16 + 9) = *((double *)v16 + 9) / (double)v84;
LABEL_108:
      if (!*(_BYTE *)(v15 + 1290))
        goto LABEL_3;
      LODWORD(v5) = *((_DWORD *)v16 + 11);
      LODWORD(v6) = *((_DWORD *)v16 + 12);
      LODWORD(v4) = *((_DWORD *)v16 + 15);
      if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
        dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
      v6 = 1.0 - (double)*(unint64_t *)&v6 / (double)*(unint64_t *)&v5;
      v5 = (double)*(unint64_t *)&v4 / (double)*(unint64_t *)&v5;
      v4 = v6 * 100.0;
      atomic_store((unint64_t)(v6 * 100.0), (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 176));
      atomic_store((unint64_t)(100.0 - v5 * 100.0), (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 184));
      v63 = *(_QWORD *)(v10 + 976);
      if (!v63)
      {
        v89 = 0;
        v92 = 0;
        goto LABEL_120;
      }
      if (v63 == v77)
      {
        v89 = v88;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 24))(v77, v88);
        v64 = v89;
        if (v89)
          goto LABEL_114;
LABEL_118:
        v92 = 0;
        goto LABEL_120;
      }
      v64 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
      v89 = v64;
      if (!v64)
        goto LABEL_118;
LABEL_114:
      if (v64 == v88)
      {
        v92 = &v90;
        (*(void (**)(_QWORD *, __int128 *))(v88[0] + 24))(v88, &v90);
      }
      else
      {
        v92 = (__int128 *)(*(uint64_t (**)(_QWORD *))(*v64 + 16))(v64);
      }
LABEL_120:
      gdc::Histogram::addSample(v79, (uint64_t)&v90, v6);
      v65 = v92;
      if (v92 == &v90)
      {
        v65 = &v90;
        v66 = 4;
LABEL_124:
        (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
      }
      else if (v92)
      {
        v66 = 5;
        goto LABEL_124;
      }
      v67 = v89;
      if (v89 == v88)
      {
        v67 = v88;
        v68 = 4;
LABEL_129:
        (*(void (**)(void))(*v67 + 8 * v68))();
      }
      else if (v89)
      {
        v68 = 5;
        goto LABEL_129;
      }
      v69 = *(_QWORD *)(v10 + 1008);
      if (!v69)
      {
        v87 = 0;
        v92 = 0;
        goto LABEL_139;
      }
      if (v69 == v76)
      {
        v87 = v86;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 24))(v76, v86);
        v70 = v87;
        if (v87)
          goto LABEL_133;
LABEL_137:
        v92 = 0;
        goto LABEL_139;
      }
      v70 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
      v87 = v70;
      if (!v70)
        goto LABEL_137;
LABEL_133:
      if (v70 == v86)
      {
        v92 = &v90;
        (*(void (**)(_QWORD *, __int128 *))(v86[0] + 24))(v86, &v90);
      }
      else
      {
        v92 = (__int128 *)(*(uint64_t (**)(_QWORD *))(*v70 + 16))(v70);
      }
LABEL_139:
      gdc::Histogram::addSample(v78, (uint64_t)&v90, v5);
      v71 = v92;
      if (v92 == &v90)
      {
        v71 = &v90;
        v72 = 4;
LABEL_143:
        (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
      }
      else if (v92)
      {
        v72 = 5;
        goto LABEL_143;
      }
      v73 = v87;
      if (v87 == v86)
      {
        v73 = v86;
        v74 = 4;
LABEL_148:
        (*(void (**)(void))(*v73 + 8 * v74))();
      }
      else if (v87)
      {
        v74 = 5;
        goto LABEL_148;
      }
      v75 = *(_QWORD *)(v10 + 704);
      if (v75)
      {
        gdc::Statistics::addHistogramValue(v75, "FractionLoadedTime", 0x3B440AB400000012uLL, v5, 0.1);
        gdc::Statistics::addSampleValue(*(_QWORD *)(v10 + 704), "TileSetGridFraction (%)", 0x453D210500000017uLL, v6 * 100.0);
      }
LABEL_3:
      v11 = v25 + 1;
      v7 = *a4;
    }
    while (v11 < *a4);
  }
}

void altitude::CompleteGlobeTileSetLoader::loadRoots(altitude::CompleteGlobeTileSetLoader *this)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isPoleTile;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int i;
  double *v37;
  uint64_t v38;
  double *v39;
  double v40;
  double *v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  altitude::TileSetNode *v96;
  uint64_t *j;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  char v117;
  __int128 v118;
  double v119[6];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  v117 = 0;
  v2 = 0;
  v3 = *(unsigned __int8 *)(*((_QWORD *)this + 4) + 69);
  v116 = v3;
  while (1)
  {
    v4 = v2;
    v5 = *(_QWORD *)(*((_QWORD *)this + 6) + 96);
    if (v4 >= (*(_QWORD *)(*((_QWORD *)this + 6) + 104) - v5) >> 3)
      break;
    v6 = *(_QWORD *)(v5 + 8 * v4);
    if (*(_BYTE *)(v6 + 165))
      goto LABEL_3;
    v118 = *(_OWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 32);
    if (!v7)
    {
      v121 = 0u;
      v122 = 0u;
      v120 = 0u;
      v123 = 0x3FF0000000000000;
      altitude::Tile::computeGeocentricBoundsFromTileIndex((unsigned int *)&v118, (uint64_t)&v120, (uint64_t)v119, 0.0, 10000.0);
      v7 = operator new();
      *(_OWORD *)(v7 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_QWORD *)(v7 + 56) = 0x3FF0000000000000;
      *(_QWORD *)(v7 + 160) = 0;
      *(_QWORD *)v7 = &off_1E42C6788;
      *(_QWORD *)(v7 + 168) = &off_1E42C6A78;
      *(_QWORD *)(v7 + 176) = 0;
      *(_QWORD *)(v7 + 184) = 0;
      *(_QWORD *)(v7 + 192) = 1065353216;
      *(_BYTE *)(v7 + 200) = 1;
      *(_DWORD *)(v7 + 204) = 0;
      *(_BYTE *)(v7 + 208) = 0;
      *(_DWORD *)(v7 + 212) = 0;
      *(_QWORD *)(v7 + 216) = &off_1E42C6A78;
      *(_QWORD *)(v7 + 224) = 0;
      *(_QWORD *)(v7 + 232) = 0;
      *(_QWORD *)(v7 + 240) = 1065353216;
      *(_BYTE *)(v7 + 248) = 1;
      *(_DWORD *)(v7 + 252) = 0;
      *(_BYTE *)(v7 + 256) = 0;
      *(_QWORD *)(v7 + 276) = 0;
      *(_DWORD *)(v7 + 284) = 0;
      *(_QWORD *)(v7 + 260) = 0;
      *(_QWORD *)(v7 + 268) = 0;
      *(_QWORD *)(v7 + 288) = v6;
      *(_OWORD *)(v7 + 296) = 0u;
      *(_OWORD *)(v7 + 312) = 0u;
      *(_QWORD *)(v7 + 376) = 0;
      *(_QWORD *)(v7 + 384) = 0;
      *(_QWORD *)(v7 + 368) = 0;
      *(_OWORD *)(v7 + 392) = v118;
      *(_QWORD *)(v7 + 408) = 0xFF7FFFFF7F7FFFFFLL;
      *(_DWORD *)(v7 + 416) = 1140850688;
      *(_QWORD *)(v7 + 424) = 0;
      *(_BYTE *)(v7 + 432) = 0;
      *(_DWORD *)(v7 + 436) = 0;
      *(_BYTE *)(v7 + 440) = 0;
      karo::Bounded::setLocalBounds((_QWORD *)v7, v119);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, &v120);
      *(_QWORD *)(v7 + 360) = 0;
      *(_OWORD *)(v7 + 328) = 0u;
      *(_OWORD *)(v7 + 344) = 0u;
      *(_QWORD *)(v6 + 32) = v7;
      if (*(_QWORD *)v6)
        v8 = *(_QWORD *)v6 + 40;
      else
        v8 = 0;
      *(_QWORD *)(v7 + 424) = v8;
    }
    isPoleTile = altitude::Tile::isPoleTile((char **)(*(_QWORD *)(v7 + 288) + 40));
    v10 = (float)((float)*(unsigned int *)(v7 + 392) * -0.5) + 10.0;
    if (*(_BYTE *)(v7 + 432))
    {
      v11 = isPoleTile;
      v12 = *(_QWORD *)(v7 + 328);
      if (v3)
      {
        if (v12)
        {
          if (*(_QWORD *)(v12 + 136))
            goto LABEL_30;
        }
        else
        {
          v17 = operator new();
          *(_DWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 40) = 0;
          *(_QWORD *)(v17 + 32) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = v17 + 32;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_QWORD *)v17 = &off_1E42C5580;
          *(_OWORD *)(v17 + 80) = 0u;
          v18 = (void **)(v17 + 80);
          *(_QWORD *)(v17 + 208) = 0;
          *(_QWORD *)(v17 + 216) = 0;
          *(_OWORD *)(v17 + 96) = 0u;
          *(_OWORD *)(v17 + 112) = 0u;
          *(_OWORD *)(v17 + 128) = 0u;
          *(_OWORD *)(v17 + 144) = 0u;
          *(_OWORD *)(v17 + 160) = 0u;
          *(_OWORD *)(v17 + 176) = 0u;
          *(_OWORD *)(v17 + 185) = 0u;
          *(_DWORD *)(v17 + 224) = -1;
          *(_QWORD *)(v17 + 232) = 0;
          *(_OWORD *)(v17 + 248) = 0u;
          *(_OWORD *)(v17 + 264) = 0u;
          *(_DWORD *)(v17 + 279) = 0;
          *(_QWORD *)(v17 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v17 + 296) = 0;
          *(_WORD *)(v17 + 300) = 0;
          altitude::Tile::createTileName(&v120, (unsigned int *)(v7 + 392), (uint64_t *)(*(_QWORD *)(v7 + 288) + 40), (uint64_t *)(*(_QWORD *)(v7 + 288) + 136));
          if (*(char *)(v17 + 103) < 0)
            operator delete(*v18);
          *(_OWORD *)v18 = v120;
          *(_QWORD *)(v17 + 96) = v121;
          *(_QWORD *)(v7 + 328) = v17;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v7);
          v12 = *(_QWORD *)(v7 + 328);
          if (*(_QWORD *)(v12 + 136))
          {
LABEL_30:
            if ((v11 & 1) == 0)
              goto LABEL_32;
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v7 + 404))
          v19 = 1;
        else
          v19 = v11;
        if ((v19 & 1) != 0)
          goto LABEL_30;
        altitude::CompleteGlobeTileSetLoader::loadBaseSurface(this, (altitude::Tile *)v7, (float)(v10 * 100000.0) + 700000);
        v2 = v4 + 1;
      }
      else
      {
        if (!v12)
        {
          v13 = operator new();
          *(_DWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 40) = 0;
          *(_QWORD *)(v13 + 32) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = v13 + 32;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_QWORD *)v13 = &off_1E42C5580;
          *(_OWORD *)(v13 + 80) = 0u;
          v14 = (void **)(v13 + 80);
          *(_QWORD *)(v13 + 208) = 0;
          *(_QWORD *)(v13 + 216) = 0;
          *(_OWORD *)(v13 + 96) = 0u;
          *(_OWORD *)(v13 + 112) = 0u;
          *(_OWORD *)(v13 + 128) = 0u;
          *(_OWORD *)(v13 + 144) = 0u;
          *(_OWORD *)(v13 + 160) = 0u;
          *(_OWORD *)(v13 + 176) = 0u;
          *(_OWORD *)(v13 + 185) = 0u;
          *(_DWORD *)(v13 + 224) = -1;
          *(_QWORD *)(v13 + 232) = 0;
          *(_OWORD *)(v13 + 248) = 0u;
          *(_OWORD *)(v13 + 264) = 0u;
          *(_DWORD *)(v13 + 279) = 0;
          *(_QWORD *)(v13 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v13 + 296) = 0;
          *(_WORD *)(v13 + 300) = 0;
          altitude::Tile::createTileName(&v120, (unsigned int *)(v7 + 392), (uint64_t *)(*(_QWORD *)(v7 + 288) + 40), (uint64_t *)(*(_QWORD *)(v7 + 288) + 136));
          if (*(char *)(v13 + 103) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = v120;
          *(_QWORD *)(v13 + 96) = v121;
          *(_QWORD *)(v7 + 328) = v13;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v7);
          v12 = *(_QWORD *)(v7 + 328);
        }
LABEL_31:
        if (*(_QWORD *)(v12 + 120))
        {
LABEL_32:
          v20 = (_QWORD *)*((_QWORD *)this + 31);
          v21 = (uint64_t *)v20[11];
          v22 = (uint64_t *)v20[12];
          v23 = v21;
          if (v21 != v22)
          {
            v23 = (uint64_t *)v20[11];
            while (*v23 != v7)
            {
              if (++v23 == v22)
              {
                v23 = (uint64_t *)v20[12];
                break;
              }
            }
          }
          if (v23 == v22)
          {
            v15 = v20[13];
            if ((unint64_t)v22 >= v15)
            {
              v59 = v22 - v21;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                goto LABEL_140;
              v61 = v15 - (_QWORD)v21;
              if (v61 >> 2 > v60)
                v60 = v61 >> 2;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                if (v62 >> 61)
                  goto LABEL_141;
                v63 = operator new(8 * v62);
              }
              else
              {
                v63 = 0;
              }
              v64 = (uint64_t *)&v63[8 * v59];
              *v64 = v7;
              v16 = v64 + 1;
              if (v21 != v22)
              {
                v65 = (char *)(v22 - 1) - (char *)v21;
                if (v65 < 0x58)
                  goto LABEL_144;
                if ((unint64_t)((char *)v21 - v63) < 0x20)
                  goto LABEL_144;
                v66 = (v65 >> 3) + 1;
                v67 = &v63[8 * v59 - 16];
                v68 = v22 - 2;
                v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v70 = *(_OWORD *)v68;
                  *(v67 - 1) = *((_OWORD *)v68 - 1);
                  *v67 = v70;
                  v67 -= 2;
                  v68 -= 4;
                  v69 -= 4;
                }
                while (v69);
                v64 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
                v22 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
                if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_144:
                  do
                  {
                    v71 = *--v22;
                    *--v64 = v71;
                  }
                  while (v22 != v21);
                }
                v21 = (uint64_t *)v20[11];
              }
              v20[11] = v64;
              v20[12] = v16;
              v20[13] = &v63[8 * v62];
              v3 = v116;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v22 = v7;
              v16 = v22 + 1;
            }
            v20[12] = v16;
            v72 = (_QWORD *)*((_QWORD *)this + 31);
            v74 = (uint64_t *)v72[9];
            v73 = v72[10];
            if ((unint64_t)v74 >= v73)
            {
              v76 = (char *)v72[8];
              v77 = ((char *)v74 - v76) >> 3;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61)
LABEL_140:
                abort();
              v79 = v73 - (_QWORD)v76;
              if (v79 >> 2 > v78)
                v78 = v79 >> 2;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
                v80 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              if (v80)
              {
                if (v80 >> 61)
LABEL_141:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v81 = (char *)operator new(8 * v80);
              }
              else
              {
                v81 = 0;
              }
              v82 = (uint64_t *)&v81[8 * v77];
              *v82 = v7;
              v75 = v82 + 1;
              if (v74 != (uint64_t *)v76)
              {
                v83 = (char *)(v74 - 1) - v76;
                if (v83 < 0x58)
                  goto LABEL_145;
                if ((unint64_t)(v76 - v81) < 0x20)
                  goto LABEL_145;
                v84 = (v83 >> 3) + 1;
                v85 = &v81[8 * v77 - 16];
                v86 = v74 - 2;
                v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v88 = *(_OWORD *)v86;
                  *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
                  *(_OWORD *)v85 = v88;
                  v85 -= 32;
                  v86 -= 4;
                  v87 -= 4;
                }
                while (v87);
                v82 -= v84 & 0x3FFFFFFFFFFFFFFCLL;
                v74 -= v84 & 0x3FFFFFFFFFFFFFFCLL;
                if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_145:
                  do
                  {
                    v89 = *--v74;
                    *--v82 = v89;
                  }
                  while (v74 != (uint64_t *)v76);
                }
                v74 = (uint64_t *)v72[8];
              }
              v72[8] = v82;
              v72[9] = v75;
              v72[10] = &v81[8 * v80];
              v3 = v116;
              if (v74)
                operator delete(v74);
            }
            else
            {
              *v74 = v7;
              v75 = v74 + 1;
            }
            v72[9] = v75;
            v117 = 1;
          }
LABEL_3:
          v2 = v4 + 1;
        }
        else
        {
          *((_BYTE *)this + 620) = 1;
          (*(void (**)(altitude::CompleteGlobeTileSetLoader *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, v7, (float)(v10 * 100000.0) + 100000);
          if (!v11)
            goto LABEL_3;
          v24 = *(_QWORD *)(v7 + 328);
          if (!v24)
          {
            v25 = operator new();
            *(_DWORD *)(v25 + 8) = 0;
            *(_QWORD *)(v25 + 40) = 0;
            *(_QWORD *)(v25 + 32) = 0;
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)(v25 + 24) = v25 + 32;
            *(_OWORD *)(v25 + 48) = 0u;
            *(_OWORD *)(v25 + 64) = 0u;
            *(_QWORD *)v25 = &off_1E42C5580;
            *(_OWORD *)(v25 + 80) = 0u;
            v26 = (void **)(v25 + 80);
            *(_QWORD *)(v25 + 208) = 0;
            *(_QWORD *)(v25 + 216) = 0;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v25 + 112) = 0u;
            *(_OWORD *)(v25 + 128) = 0u;
            *(_OWORD *)(v25 + 144) = 0u;
            *(_OWORD *)(v25 + 160) = 0u;
            *(_OWORD *)(v25 + 176) = 0u;
            *(_OWORD *)(v25 + 185) = 0u;
            *(_DWORD *)(v25 + 224) = -1;
            *(_QWORD *)(v25 + 232) = 0;
            *(_OWORD *)(v25 + 248) = 0u;
            *(_OWORD *)(v25 + 264) = 0u;
            *(_DWORD *)(v25 + 279) = 0;
            *(_QWORD *)(v25 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v25 + 296) = 0;
            *(_WORD *)(v25 + 300) = 0;
            altitude::Tile::createTileName(&v120, (unsigned int *)(v7 + 392), (uint64_t *)(*(_QWORD *)(v7 + 288) + 40), (uint64_t *)(*(_QWORD *)(v7 + 288) + 136));
            if (*(char *)(v25 + 103) < 0)
              operator delete(*v26);
            *(_OWORD *)v26 = v120;
            *(_QWORD *)(v25 + 96) = v121;
            *(_QWORD *)(v7 + 328) = v25;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v7);
            v24 = *(_QWORD *)(v7 + 328);
          }
          v27 = *(_QWORD *)(v24 + 120);
          if (!v27)
            goto LABEL_3;
          v28 = *(_QWORD **)(v27 + 48);
          v29 = *(_QWORD **)(v27 + 56);
          if (v28 == v29)
          {
            v33 = -1.79769313e308;
            v35 = 1.79769313e308;
            v34 = 1.79769313e308;
            v30 = 1.79769313e308;
            v32 = -1.79769313e308;
            v31 = -1.79769313e308;
          }
          else
          {
            v30 = 1.79769313e308;
            v31 = -1.79769313e308;
            v32 = -1.79769313e308;
            v33 = -1.79769313e308;
            v34 = 1.79769313e308;
            v35 = 1.79769313e308;
            do
            {
              for (i = 0; i != 8; ++i)
              {
                v37 = (double *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v28 + 24))(*v28);
                v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v28 + 56))(*v28);
                v39 = (double *)(v38 + 24);
                if ((i & 1) != 0)
                  v39 = (double *)v38;
                v40 = *v39;
                v41 = (double *)(v38 + 8);
                if ((i & 2) == 0)
                  v41 = (double *)(v38 + 32);
                v42 = *v41;
                v43 = (double *)(v38 + 16);
                if ((i & 4) == 0)
                  v43 = (double *)(v38 + 40);
                v44 = v37[4];
                v45 = v37[5];
                v46 = v37[6];
                v47 = v37[3];
                v48 = -(v44 * v40 - v47 * v42);
                v49 = *v37 + v40;
                v50 = -(*v43 * v47 - v45 * v40);
                v51 = v37[1] + v42;
                v52 = -(v45 * v42 - v44 * *v43);
                v53 = v52 + v52;
                v54 = v48 + v48;
                v55 = v50 + v50;
                v56 = v49 + v54 * v44 + v53 * v46 - v55 * v45;
                v57 = v51 - v54 * v47 + v53 * v45 + v55 * v46;
                v58 = *v43 + v54 * v46 + v37[2] + v55 * v47 - v53 * v44;
                v35 = fmin(v56, v35);
                v33 = fmax(v33, v56);
                v34 = fmin(v57, v34);
                v32 = fmax(v32, v57);
                v30 = fmin(v58, v30);
                v31 = fmax(v31, v58);
              }
              ++v28;
            }
            while (v28 != v29);
          }
          if (v33 - v35 >= 0.0)
            v90 = (v33 - v35) * 0.5;
          else
            v90 = 0.0;
          if (v32 - v34 >= 0.0)
            v91 = (v32 - v34) * 0.5;
          else
            v91 = 0.0;
          if (v31 - v30 >= 0.0)
            v92 = (v31 - v30) * 0.5;
          else
            v92 = 0.0;
          v93 = fmax(v90, 0.0);
          v94 = fmax(v91, 0.0);
          v95 = fmax(v92, 0.0);
          *((_QWORD *)&v121 + 1) = 0;
          v122 = 0uLL;
          *(double *)&v120 = (v33 - v35) * 0.5 + v35;
          *((double *)&v120 + 1) = (v32 - v34) * 0.5 + v34;
          *(double *)&v121 = (v31 - v30) * 0.5 + v30;
          v123 = 0x3FF0000000000000;
          v119[0] = -v93;
          v119[1] = -v94;
          v119[2] = -v95;
          v119[3] = v93;
          v119[4] = v94;
          v119[5] = v95;
          (*(void (**)(uint64_t, __int128 *, double *))(*(_QWORD *)v7 + 40))(v7, &v120, v119);
          v2 = v4 + 1;
        }
      }
    }
    else
    {
      altitude::CompleteGlobeTileSetLoader::loadTileMetaData(this, (altitude::Tile *)v7, (float)(v10 * 100000.0) + 800000);
      v2 = v4 + 1;
    }
  }
  if ((v117 & 1) != 0)
  {
    v96 = (altitude::TileSetNode *)*((_QWORD *)this + 31);
    for (j = (uint64_t *)*((_QWORD *)v96 + 5); j != *((uint64_t **)v96 + 6); ++j)
    {
      v99 = *j;
      if (*j)
      {
        v101 = (char *)*((_QWORD *)v96 + 9);
        v100 = *((_QWORD *)v96 + 10);
        if ((unint64_t)v101 < v100)
        {
          *(_QWORD *)v101 = v99;
          v98 = v101 + 8;
        }
        else
        {
          v102 = (char *)*((_QWORD *)v96 + 8);
          v103 = (v101 - v102) >> 3;
          v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 61)
            goto LABEL_140;
          v105 = v100 - (_QWORD)v102;
          if (v105 >> 2 > v104)
            v104 = v105 >> 2;
          if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
            v106 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v106 = v104;
          if (v106)
          {
            if (v106 >> 61)
              goto LABEL_141;
            v107 = (char *)operator new(8 * v106);
          }
          else
          {
            v107 = 0;
          }
          v108 = &v107[8 * v103];
          *(_QWORD *)v108 = v99;
          v98 = v108 + 8;
          if (v101 != v102)
          {
            v109 = v101 - 8 - v102;
            if (v109 < 0x58)
              goto LABEL_146;
            if ((unint64_t)(v102 - v107) < 0x20)
              goto LABEL_146;
            v110 = (v109 >> 3) + 1;
            v111 = &v107[8 * v103 - 16];
            v112 = (__int128 *)(v101 - 16);
            v113 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *v112;
              *((_OWORD *)v111 - 1) = *(v112 - 1);
              *(_OWORD *)v111 = v114;
              v111 -= 32;
              v112 -= 2;
              v113 -= 4;
            }
            while (v113);
            v108 -= 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v101 -= 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_146:
              do
              {
                v115 = *((_QWORD *)v101 - 1);
                v101 -= 8;
                *((_QWORD *)v108 - 1) = v115;
                v108 -= 8;
              }
              while (v101 != v102);
            }
            v101 = (char *)*((_QWORD *)v96 + 8);
          }
          *((_QWORD *)v96 + 8) = v108;
          *((_QWORD *)v96 + 9) = v98;
          *((_QWORD *)v96 + 10) = &v107[8 * v106];
          if (v101)
            operator delete(v101);
        }
        *((_QWORD *)v96 + 9) = v98;
        v96 = (altitude::TileSetNode *)*((_QWORD *)this + 31);
      }
    }
    altitude::TileSetNode::swap(v96);
  }
}

