void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TransitNode::BaseMesh::~BaseMesh(ggl::TransitNode::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TransitNode::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TransitNode::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TransitNode::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PointIconLabelPart::debugString@<X0>(md::PointIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  char v16;
  size_t v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *__p[2];
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;
  void *v32[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35[0] = MEMORY[0x1E0DE4FE0] + 64;
  v27 = v7;
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v9, &v28);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v27 = v4 + 24;
  v35[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v28 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  v34 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"PointIcon", 9);
  if (*((_DWORD *)this + 201))
  {
    if (*((_DWORD *)this + 206))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)", multiPOI(", 11);
      v11 = (uint64_t *)std::ostream::operator<<();
      v12 = ")";
      v13 = 1;
    }
    else
    {
      v12 = ", multiPOI-fallback";
      v11 = &v27;
      v13 = 19;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)"\n  ", 3);
  md::IconLabelPart::debugString(this, __p);
  if ((v26 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v15 = v26;
  else
    v15 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v27, (uint64_t)v14, v15);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    v16 = v34;
    if ((v34 & 0x10) == 0)
      goto LABEL_14;
LABEL_17:
    v18 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v18 = v31;
    }
    v19 = (const void **)&v30;
    goto LABEL_21;
  }
  v16 = v34;
  if ((v34 & 0x10) != 0)
    goto LABEL_17;
LABEL_14:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_29;
  }
  v19 = (const void **)v29;
  v18 = v29[2];
LABEL_21:
  v20 = *v19;
  v17 = v18 - (_QWORD)*v19;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_28;
  }
  a2[23] = v17;
  if (v17)
LABEL_28:
    memmove(a2, v20, v17);
LABEL_29:
  a2[v17] = 0;
  v27 = *v6;
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v6[3];
  v28 = v10 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(v32[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v35);
}

void sub_19FEFAD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ggl::SolidLine::BasePipelineState::~BasePipelineState(ggl::SolidLine::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SolidLine::BasePipelineSetup::~BasePipelineSetup(ggl::SolidLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SolidLine::BasePipelineSetup::constantDataIsEnabled(ggl::SolidLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::SolidLine::BasePipelineSetup::textureIsEnabled(ggl::SolidLine::BasePipelineSetup *this)
{
  return 0;
}

void ___ZN2md24VenueFloorMeshGeneration19_writeFootprintDataEPN3ggl6DeviceERKNSt3__16vectorINS_14PolygonSectionENS4_9allocatorIS6_EEEERNS5_INS1_11PolygonBase18CompressedMeshMeshENS7_ISD_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int16x8_t *v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float *v36;
  char *v37;
  _DWORD *v38;
  int v39;
  float v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  uint16x8_t v53;
  uint16x8_t v54;
  const __int16 *i16;
  unint64_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  const __int16 *v63;
  uint16x8_t v64;
  uint16x8_t v65;
  unint64_t v66;
  char *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  char *v72;
  int16x4_t v73;
  unint64_t v74;
  double v75;
  int8x16_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int16x8_t *v79;
  unint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  const __int16 *v87;
  int16x8_t v88;
  int16x8_t v89;
  uint16x8_t v90;
  int8x16_t v91;
  uint16x8_t v92;
  int8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  unint64_t v106;
  char *v107;
  int32x2_t v108;
  int32x2_t v109;
  __int16 v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v114;
  char *v115;
  uint64_t *v116;
  uint64_t **v117;
  uint64_t **v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  unsigned __int16 *v143;
  unsigned __int16 *v144;
  uint64_t v145;
  unint64_t v146;
  unsigned __int16 *v147;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 *v152;
  unsigned __int16 *v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  BOOL v156;
  _BOOL4 v157;
  unsigned __int16 *v158;
  uint64_t *v159;
  unsigned __int16 *v160;
  uint64_t *v161;
  std::string::size_type v162;
  unsigned __int16 v163;
  unsigned __int16 *v164;
  unsigned __int16 v165;
  unsigned __int16 *v166;
  unsigned __int16 *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned __int16 *v178;
  double v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  double v185;
  double v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  double v190;
  double v191;
  unsigned __int16 *v192;
  int v193;
  unint64_t v194;
  int v195;
  unsigned __int16 *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  double v202;
  double v203;
  double v204;
  double v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  double v209;
  double v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  __int128 v227;
  __int16 v228;
  unsigned __int16 *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  unsigned __int16 *v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  _OWORD *v242;
  __int128 *v243;
  unint64_t v244;
  __int128 v245;
  unsigned __int16 v246;
  char *v247;
  unsigned __int16 *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  unsigned __int16 *v256;
  unint64_t v257;
  unsigned __int16 *v258;
  unsigned __int16 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _OWORD *v265;
  unsigned __int16 *v266;
  unint64_t v267;
  __int128 v268;
  const float *v269;
  __int16 *v270;
  __int16 *v271;
  unint64_t v272;
  __int128 v273;
  __int128 v274;
  const float *v275;
  float32x4_t v276;
  int16x8_t v277;
  const std::locale::facet *v278;
  const std::locale::facet *v279;
  NSObject *v280;
  std::ios_base *v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  char *v285;
  _QWORD *v286;
  _QWORD *v287;
  size_t v288;
  std::locale::__imp *v289;
  std::locale::__imp *locale;
  unint64_t v291;
  const void **v292;
  const void *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  _OWORD *v300;
  __int128 *v301;
  unint64_t v302;
  __int128 v303;
  unint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  __int16 v308;
  NSObject *v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  int v313;
  int v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  const std::locale::facet *v325;
  unint64_t v326;
  unsigned __int16 *v327;
  std::string *v329;
  std::string::size_type size;
  _QWORD *v331;
  const std::locale::facet *v332;
  unsigned __int16 *v333;
  std::string *v334;
  std::string::size_type v335;
  const std::locale::facet *v336;
  unsigned __int16 *v337;
  uint64_t v338;
  unsigned __int16 *v339;
  unsigned __int16 *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int16 *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int16x8_t *v352;
  std::string::size_type v353;
  std::string::size_type v354;
  std::string::size_type v355;
  uint64_t v356;
  std::string::size_type v357;
  std::string::size_type v358;
  char *v360;
  _QWORD *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v365;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t **v375;
  uint64_t *v376;
  uint64_t v377;
  __int128 v378;
  unsigned __int16 *v379;
  unint64_t v380;
  unsigned __int16 v381;
  uint64_t v382;
  int v383;
  void *v384;
  char *v385;
  char *v386;
  __int128 v387;
  unint64_t v388;
  uint64_t v389;
  __int16 v390;
  void *v391;
  std::locale __dst[2];
  int64_t v393;
  uint8_t buf[4];
  std::locale::__imp *v395;
  std::string v396;
  _QWORD v397[3];
  uint64_t v398;
  unint64_t v399;
  __int128 __p;
  __int128 v401;
  int v402;
  _QWORD v403[22];
  float32x4x2_t v404;
  float32x4x2_t v405;
  int16x8x2_t v406;
  int16x8x2_t v407;

  v403[19] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 40);
  v4 = *v3;
  v362 = v3[1];
  if (*v3 == v362)
    return;
  v5 = a1;
  v6 = 0;
  v7 = 0;
  v360 = 0;
  v369 = 0;
  v361 = *(_QWORD **)(a1 + 32);
  v357 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v358 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v353 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v354 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&v8 = 0x8000800080008000;
  *((_QWORD *)&v8 + 1) = 0x8000800080008000;
  v370 = v8;
  v356 = MEMORY[0x1E0DE4FE0] + 64;
  v355 = MEMORY[0x1E0DE4FB8] + 16;
  while (2)
  {
    v9 = *(_QWORD *)(v4 + 88);
    v10 = (v7 - (char *)v6) >> 2;
    v11 = v9 - v10;
    if (v9 > v10)
    {
      if (v11 <= (v360 - v7) >> 2)
      {
        v7 += 4 * v11;
        goto LABEL_30;
      }
      if (v9 >> 62)
        abort();
      v12 = (v360 - (char *)v6) >> 1;
      if (v12 <= v9)
        v12 = *(_QWORD *)(v4 + 88);
      if ((unint64_t)(v360 - (char *)v6) >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13 >> 62)
        goto LABEL_459;
      v14 = operator new(4 * v13);
      v15 = &v14[4 * v10];
      if (v7 == (char *)v6)
      {
        v18 = &v14[4 * v10];
      }
      else
      {
        v16 = v7 - 4 - (char *)v6;
        if (v16 >= 0x2C)
        {
          if ((unint64_t)((char *)v6 - v14) >= 0x20)
          {
            v19 = (v16 >> 2) + 1;
            v17 = &v7[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
            v20 = &v14[v7 - (char *)v6 - 16];
            v21 = v7 - 16;
            v22 = v19 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v23 = *(_OWORD *)v21;
              *(v20 - 1) = *((_OWORD *)v21 - 1);
              *v20 = v23;
              v20 -= 2;
              v21 -= 32;
              v22 -= 8;
            }
            while (v22);
            v18 = &v15[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
            if (v19 == (v19 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_27;
          }
          else
          {
            v17 = v7;
            v18 = &v14[4 * v10];
          }
        }
        else
        {
          v17 = v7;
          v18 = &v14[4 * v10];
        }
        do
        {
          v24 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v18 - 1) = v24;
          v18 -= 4;
        }
        while (v17 != (char *)v6);
      }
LABEL_27:
      v360 = &v14[4 * v13];
      v7 = &v15[4 * v11];
      if (v6)
        operator delete(v6);
      v6 = (int16x8_t *)v18;
      goto LABEL_30;
    }
    if (v9 < v10)
      v7 = &v6->i8[4 * v9];
LABEL_30:
    v25 = **(_QWORD **)(**(_QWORD **)(v5 + 32) + 144 * v369 + 64);
    v26 = *(_QWORD *)(v25 + 8) * v9;
    if (v26)
    {
      if (a2 && *(_BYTE *)(v25 + 17) != 2)
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v25, 0, v26, 1, 1);
      else
        v27 = *(_QWORD *)(v25 + 72);
    }
    else
    {
      v27 = 0;
    }
    *(_QWORD *)&v28 = a2;
    *((_QWORD *)&v28 + 1) = v25;
    v372 = v28;
    v373 = v26;
    v374 = v27;
    if (v9)
    {
      v29 = *(_QWORD *)(v4 + 8);
      if (v9 <= 0x17)
        goto LABEL_47;
      v30 = 0;
      v31 = v9 - 1;
      v32 = 2 * (v9 - 1);
      if (&v6->i16[v32 + 1] < &v6->i16[1])
        goto LABEL_48;
      if (&v6->i8[v32 * 2] < (__int8 *)v6)
        goto LABEL_48;
      v33 = 8 * v31;
      if (v27 + 8 * v31 < v27
        || v27 + 2 + v33 < v27 + 2
        || v27 + 4 + v33 < v27 + 4
        || v27 + 6 + v33 < v27 + 6
        || v31 >> 61)
      {
        goto LABEL_48;
      }
      if (v27 < (unint64_t)v6 + 4 * v9 && (unint64_t)v6 < v27 + 8 * v9)
      {
LABEL_47:
        v30 = 0;
LABEL_48:
        v34 = v9 - v30;
        v35 = 8 * v30;
        v36 = (float *)(v29 + 8 * v30 + 4);
        v37 = &v6->i8[4 * v30 + 2];
        v38 = (_DWORD *)(v27 + v35 + 4);
        do
        {
          v39 = (int)(float)(*(v36 - 1) * 65535.0);
          v40 = *v36;
          v36 += 2;
          v41 = (int)(float)(v40 * 65535.0);
          *((_WORD *)v38 - 2) = v39;
          *((_WORD *)v38 - 1) = v41;
          *v38 = 0x7FFF;
          v38 += 2;
          *((_WORD *)v37 - 1) = v39;
          *(_WORD *)v37 = v41;
          v37 += 4;
          --v34;
        }
        while (v34);
        goto LABEL_50;
      }
      v30 = v9 & 0xFFFFFFFFFFFFFFF8;
      v269 = *(const float **)(v4 + 8);
      v270 = (__int16 *)v27;
      v271 = (__int16 *)v6;
      v272 = v9 & 0xFFFFFFFFFFFFFFF8;
      v273 = v370;
      v274 = 0u;
      do
      {
        v275 = v269;
        v404 = vld2q_f32(v275);
        v275 += 8;
        v405 = vld2q_f32(v275);
        v276 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
        v277 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v404.val[0], v276)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v405.val[0], v276)));
        v2 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(v404.val[1], v276)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(v405.val[1], v276)));
        vst4q_s16(v270, *(int16x8x4_t *)(&v2 - 1));
        v270 += 32;
        vst2q_s16(v271, *(int16x8x2_t *)(&v2 - 1));
        v271 += 16;
        v269 += 16;
        v272 -= 8;
      }
      while (v272);
      if (v9 != v30)
        goto LABEL_48;
    }
LABEL_50:
    v42 = v7 - (char *)v6;
    v43 = (v7 - (char *)v6) >> 2;
    v44 = *(_QWORD *)(*v361 + 144 * v369 + 96);
    v387 = 0uLL;
    v367 = 3 * v43 - 6;
    v45 = *(_QWORD *)(v44 + 8) * v367;
    if (v45)
    {
      if (a2 && *(_BYTE *)(v44 + 17) != 2)
        v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v44, 0, v45, 1, 1);
      else
        v46 = *(void **)(v44 + 72);
    }
    else
    {
      v46 = 0;
    }
    *(_QWORD *)&v47 = a2;
    *((_QWORD *)&v47 + 1) = v44;
    v387 = v47;
    v388 = 0;
    v389 = v45;
    v391 = v46;
    v390 = 257;
    v376 = 0;
    v377 = 0;
    v375 = &v376;
    v378 = xmmword_19FFB6030;
    v379 = 0;
    v380 = 0;
    v381 = 0;
    v383 = 4;
    v382 = 0;
    v385 = 0;
    v386 = 0;
    v384 = 0;
    v365 = v4;
    v368 = v7;
    v371 = (v7 - (char *)v6) >> 2;
    v363 = v7 - (char *)v6;
    if (v42 < 0xC)
      goto LABEL_304;
    if (v42 > 0x3F)
    {
      v53.i64[0] = -1;
      v53.i64[1] = -1;
      v48 = v43 & 0xFFFFFFFFFFFFFFF0;
      v54 = 0uLL;
      i16 = v6[2].i16;
      v56 = v43 & 0xFFFFFFFFFFFFFFF0;
      v57 = 0uLL;
      v58 = 0uLL;
      v59 = 0uLL;
      v60.i64[0] = -1;
      v60.i64[1] = -1;
      v61.i64[0] = -1;
      v61.i64[1] = -1;
      v62.i64[0] = -1;
      v62.i64[1] = -1;
      do
      {
        v63 = i16 - 16;
        *(int16x8x2_t *)(&v2 - 1) = vld2q_s16(v63);
        v406 = vld2q_s16(i16);
        v61 = vminq_u16(v64, v61);
        v62 = vminq_u16((uint16x8_t)v406.val[0], v62);
        v53 = vminq_u16((uint16x8_t)v2, v53);
        v60 = vminq_u16((uint16x8_t)v406.val[1], v60);
        v58 = vmaxq_u16(v64, v58);
        v59 = vmaxq_u16((uint16x8_t)v406.val[0], v59);
        v54 = vmaxq_u16((uint16x8_t)v2, v54);
        v57 = vmaxq_u16((uint16x8_t)v406.val[1], v57);
        i16 += 32;
        v56 -= 16;
      }
      while (v56);
      v52 = vminvq_u16(vminq_u16(v61, v62));
      v51 = vminvq_u16(vminq_u16(v53, v60));
      v50 = vmaxvq_u16(vmaxq_u16(v58, v59));
      v65 = vmaxq_u16(v54, v57);
      v65.i16[0] = vmaxvq_u16(v65);
      v49 = v65.u32[0];
      if (v48 == v43)
        goto LABEL_73;
    }
    else
    {
      v48 = 0;
      LOWORD(v49) = 0;
      v50 = 0;
      v51 = -1;
      v52 = -1;
    }
    v66 = v43 - v48;
    v67 = &v6->i8[4 * v48 + 2];
    do
    {
      v68 = *((unsigned __int16 *)v67 - 1);
      v70 = *(unsigned __int16 *)v67;
      v67 += 4;
      v69 = v70;
      if (v68 < v52)
        v52 = v68;
      if (v69 < v51)
        v51 = v69;
      if (v68 > v50)
        v50 = v68;
      if (v69 <= (unsigned __int16)v49)
        v49 = (unsigned __int16)v49;
      else
        v49 = v69;
      --v66;
    }
    while (v66);
LABEL_73:
    v71 = v52 | ((unint64_t)v51 << 16);
    v380 = ((unint64_t)v50 << 32) | (v49 << 48) | v71;
    *(double *)&v73 = (double)(int)((unsigned __int16)v49 - WORD1(v71));
    v381 = (int)fmax((double)(v50 - v52), *(double *)&v73);
    v72 = &v6->i8[4 * v43];
    v73.i16[0] = *((_WORD *)v72 - 2);
    v73.i16[2] = *((_WORD *)v72 - 1);
    if (v42 <= 0x3F)
    {
      v74 = 0;
      v75 = 0.0;
      goto LABEL_79;
    }
    v2.i16[6] = *((_WORD *)v72 - 2);
    v2.i16[7] = *((_WORD *)v72 - 1);
    v76 = (int8x16_t)vdupq_lane_s16(v73, 0);
    v77 = 0uLL;
    v78 = 0uLL;
    v74 = v43 & 0xFFFFFFFFFFFFFFF0;
    v79 = v6 + 2;
    v80 = v43 & 0xFFFFFFFFFFFFFFF0;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    do
    {
      v87 = v79[-2].i16;
      v407 = vld2q_s16(v87);
      v89 = *v79;
      v88 = v79[1];
      v79 += 4;
      v90 = (uint16x8_t)vextq_s8(v76, (int8x16_t)v407.val[0], 0xEuLL);
      v91 = (int8x16_t)vuzp1q_s16(v89, v88);
      v92 = (uint16x8_t)vextq_s8(v2, (int8x16_t)v407.val[1], 0xEuLL);
      v93 = (int8x16_t)vuzp2q_s16(v89, v88);
      v94 = (uint16x8_t)vextq_s8((int8x16_t)v407.val[0], v91, 0xEuLL);
      v95 = (uint16x8_t)vextq_s8((int8x16_t)v407.val[1], v93, 0xEuLL);
      v96 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v92.i8, *(uint16x4_t *)v407.val[1].i8);
      v97 = vmulq_s32((int32x4_t)vaddl_high_u16(v92, (uint16x8_t)v407.val[1]), (int32x4_t)vsubl_high_u16(v90, (uint16x8_t)v407.val[0]));
      v98 = vmulq_s32(v96, (int32x4_t)vsubl_u16(*(uint16x4_t *)v90.i8, *(uint16x4_t *)v407.val[0].i8));
      v407.val[1] = (int16x8_t)vmulq_s32((int32x4_t)vaddl_high_u16(v95, (uint16x8_t)v93), (int32x4_t)vsubl_high_u16(v94, (uint16x8_t)v91));
      v407.val[0] = (int16x8_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v93.i8), (int32x4_t)vsubl_u16(*(uint16x4_t *)v94.i8, *(uint16x4_t *)v91.i8));
      v99.i64[0] = v98.i32[0];
      v99.i64[1] = v98.i32[1];
      v100 = vcvtq_f64_s64(v99);
      v99.i64[0] = v98.i32[2];
      v99.i64[1] = v98.i32[3];
      v101 = vcvtq_f64_s64(v99);
      v99.i64[0] = v97.i32[0];
      v99.i64[1] = v97.i32[1];
      v102 = vcvtq_f64_s64(v99);
      v99.i64[0] = v97.i32[2];
      v99.i64[1] = v97.i32[3];
      v103 = vcvtq_f64_s64(v99);
      v99.i64[0] = v407.val[0].i32[0];
      v99.i64[1] = v407.val[0].i32[1];
      v104 = vcvtq_f64_s64(v99);
      v99.i64[0] = v407.val[0].i32[2];
      v99.i64[1] = v407.val[0].i32[3];
      v407.val[0] = (int16x8_t)vcvtq_f64_s64(v99);
      v99.i64[0] = v407.val[1].i32[0];
      v99.i64[1] = v407.val[1].i32[1];
      v105 = vcvtq_f64_s64(v99);
      v99.i64[0] = v407.val[1].i32[2];
      v99.i64[1] = v407.val[1].i32[3];
      v82 = vaddq_f64(v82, v103);
      v81 = vaddq_f64(v81, v102);
      v78 = vaddq_f64(v78, v101);
      v77 = vaddq_f64(v77, v100);
      v86 = vaddq_f64(v86, vcvtq_f64_s64(v99));
      v85 = vaddq_f64(v85, v105);
      v84 = vaddq_f64(v84, (float64x2_t)v407.val[0]);
      v83 = vaddq_f64(v83, v104);
      v2 = v93;
      v76 = v91;
      v80 -= 16;
    }
    while (v80);
    v75 = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v83, v77), vaddq_f64(v85, v81)), vaddq_f64(vaddq_f64(v84, v78), vaddq_f64(v86, v82))));
    if (v74 != v43)
    {
      v73.i32[0] = v88.u16[6];
      v73.i32[1] = v88.u16[7];
LABEL_79:
      v106 = v43 - v74;
      v107 = &v6->i8[4 * v74];
      do
      {
        v108 = (int32x2_t)vand_s8((int8x8_t)v73, (int8x8_t)0xFFFF0000FFFFLL);
        v73.i32[0] = *(unsigned __int16 *)v107;
        v109 = vsub_s32(v108, (int32x2_t)v73);
        v73.i32[1] = *((unsigned __int16 *)v107 + 1);
        v75 = v75 + (double)vmul_lane_s32(v109, vadd_s32(v108, (int32x2_t)v73), 1).i32[0];
        v107 += 4;
        --v106;
      }
      while (v106);
    }
    v110 = 0;
    v111 = 0;
    v112 = 0;
    do
    {
      v113 = v379;
      if (!v379)
      {
        v114 = (char *)malloc_type_malloc(*((size_t *)&v378 + 1), 0x160B39uLL);
        v115 = v114;
        v116 = v376;
        v117 = &v376;
LABEL_86:
        v118 = v117;
        if (v116)
        {
          do
          {
            v117 = (uint64_t **)v116;
            v119 = v116[4];
            if ((unint64_t)v114 < v119)
            {
              v116 = *v117;
              goto LABEL_86;
            }
            if (v119 >= (unint64_t)v114)
              goto LABEL_94;
            v116 = v117[1];
          }
          while (v116);
          v118 = v117 + 1;
        }
        v120 = (uint64_t *)operator new(0x28uLL);
        v120[4] = (uint64_t)v115;
        *v120 = 0;
        v120[1] = 0;
        v120[2] = (uint64_t)v117;
        *v118 = v120;
        if (*v375)
        {
          v375 = (uint64_t **)*v375;
          v120 = *v118;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v376, v120);
        ++v377;
LABEL_94:
        v113 = v379;
        v121 = 48 * v378 - 48;
        if ((v121 & 0x8000000000000000) == 0)
        {
          v122 = &v115[v121];
          v123 = &v115[v121];
          do
          {
            *(_QWORD *)v123 = v113;
            v123 -= 48;
            v113 = v122;
            v122 = v123;
          }
          while (v123 >= v115);
          v113 = v123 + 48;
        }
      }
      v124 = &v6->i8[4 * v111];
      v379 = (unsigned __int16 *)*v113;
      *(_WORD *)v113 = v110;
      v125 = *(_DWORD *)v124;
      *(_OWORD *)(v113 + 1) = 0u;
      v126 = v113 + 1;
      *(_DWORD *)((char *)v113 + 2) = v125;
      *(_OWORD *)(v113 + 3) = 0u;
      *(_QWORD *)((char *)v113 + 37) = 0;
      if (v112)
      {
        v127 = v112 + 2;
        v128 = v112[2];
        v113[1] = v112;
        v113[2] = v128;
        *(_QWORD *)(v112[2] + 8) = v113;
      }
      else
      {
        v113[1] = v113;
        v127 = v113 + 2;
      }
      *v127 = v113;
      *((_BYTE *)v113 + 44) = 0;
      v129 = v381;
      if (v381)
      {
        v130 = *(unsigned __int16 *)v124;
        v131 = 0xFFFF * (*((unsigned __int16 *)v124 + 1) - WORD1(v380)) / v381;
        v132 = ((0xFFFF * (v130 - (unsigned __int16)v380) / v381) | ((0xFFFF * (v130 - (unsigned __int16)v380) / v381) << 8)) & 0xFF00FF;
        v133 = (v132 | (16 * v132)) & 0x3030303 | (4 * ((v132 | (16 * v132)) & 0xF0F0F0F)) & 0x33333333;
        v134 = (v131 | (v131 << 8)) & 0xF000F | (16 * ((v131 | (v131 << 8)) & 0xFF00FF)) & 0xF0F0F0F;
        *((_DWORD *)v113 + 10) = ((4 * ((v134 | (4 * v134)) & 0x33333333)) | (2 * ((v134 | (4 * v134)) & 0x33333333))) & 0xAAAAAAAA | (v133 | (2 * v133)) & 0x55555555;
      }
      v110 = ++v382;
      ++v111;
      v112 = v113;
    }
    while (v111 != v371);
    v135 = v113[2];
    if (*(_DWORD *)((char *)v113 + 2) == *(_DWORD *)(v135 + 2))
    {
      v136 = (_QWORD *)*v126;
      v137 = (_QWORD *)*v126;
      v7 = v368;
      if (v135)
      {
        *(_QWORD *)(v135 + 8) = v136;
        v137 = (_QWORD *)*v126;
      }
      if (v137)
        v137[2] = v135;
      if (v377)
      {
        *((_BYTE *)v113 + 44) = -1;
        *v113 = v379;
        v379 = (unsigned __int16 *)v113;
      }
    }
    else
    {
      v136 = v113;
      v7 = v368;
    }
    if (v75 < 0.0)
    {
      v138 = v136;
      do
      {
        v140 = v138[1];
        v139 = (_QWORD *)v138[2];
        v138[1] = v139;
        v138[2] = v140;
        v138 = v139;
      }
      while (v139 != v136);
    }
    if (!v136)
      goto LABEL_304;
    v141 = (unsigned __int16 *)v136[2];
    if (!v129)
      goto LABEL_144;
    v142 = (unsigned __int16 *)v136[2];
    if (!v141)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Called linkListInHashSpace with a NULL head.", 44);
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
      v278 = std::locale::use_facet((const std::locale *)&v396, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v278->__vftable[2].~facet_0)(v278, 10);
      std::locale::~locale((std::locale *)&v396);
      std::ostream::put();
      std::ostream::flush();
LABEL_303:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Called earclipPolygon with a NULL head. Probably wrong to do so.", 64);
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
      v279 = std::locale::use_facet((const std::locale *)&v396, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v279->__vftable[2].~facet_0)(v279, 10);
      std::locale::~locale((std::locale *)&v396);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_304;
    }
    do
    {
      v143 = (unsigned __int16 *)*((_QWORD *)v142 + 2);
      *((_QWORD *)v142 + 3) = *((_QWORD *)v142 + 1);
      *((_QWORD *)v142 + 4) = v143;
      v142 = v143;
    }
    while (v143 != v141);
    *(_QWORD *)(*((_QWORD *)v141 + 3) + 32) = 0;
    *((_QWORD *)v141 + 3) = 0;
    v144 = v141;
    v145 = 1;
    while (2)
    {
      v146 = 0;
      v147 = 0;
      v148 = v144;
      v149 = v144;
      while (2)
      {
        v150 = 0;
        ++v146;
        while (1)
        {
          ++v150;
          v149 = (unsigned __int16 *)*((_QWORD *)v149 + 4);
          if (!v149)
            break;
          if (v145 == v150)
          {
            v150 = v145;
            break;
          }
        }
        v151 = v145;
        while (1)
        {
          v156 = !v151 || v149 == 0;
          v157 = !v156;
          if (!v150)
            break;
          if (!v157 || *((_DWORD *)v148 + 10) <= *((_DWORD *)v149 + 10))
          {
            v152 = (unsigned __int16 *)*((_QWORD *)v148 + 4);
            --v150;
            v153 = v149;
            v154 = v148;
            v155 = v148;
            if (!v147)
              goto LABEL_129;
LABEL_128:
            *((_QWORD *)v147 + 4) = v154;
            v155 = v144;
            goto LABEL_129;
          }
LABEL_142:
          v153 = (unsigned __int16 *)*((_QWORD *)v149 + 4);
          --v151;
          v152 = v148;
          v154 = v149;
          v155 = v149;
          if (v147)
            goto LABEL_128;
LABEL_129:
          *((_QWORD *)v154 + 3) = v147;
          v144 = v155;
          v148 = v152;
          v149 = v153;
          v147 = v154;
        }
        if (v157)
        {
          v150 = 0;
          goto LABEL_142;
        }
        v148 = v149;
        if (v149)
          continue;
        break;
      }
      *((_QWORD *)v147 + 4) = 0;
      v145 *= 2;
      if (v146 > 1)
        continue;
      break;
    }
LABEL_144:
    if (!v141)
      goto LABEL_303;
    v159 = (uint64_t *)(v141 + 4);
    v158 = (unsigned __int16 *)*((_QWORD *)v141 + 1);
    v161 = (uint64_t *)(v141 + 8);
    v160 = (unsigned __int16 *)*((_QWORD *)v141 + 2);
    v162 = v367;
    if (v158 == v160)
      goto LABEL_334;
    v352 = v6;
LABEL_147:
    v163 = v141[2];
    v164 = v141;
    v165 = v141[1];
    while (1)
    {
      v166 = v158;
      v167 = v160;
      v168 = v158[2];
      v169 = v160[1];
      v170 = v166[1];
      v171 = v160[2];
      if ((int)((v169 - v165) * (v163 - v168) + (v163 - v171) * (v165 - v170)) <= 0)
      {
        if (v381)
        {
          if (v168 >= v163)
            v172 = v163;
          else
            v172 = v168;
          if (v168 <= v163)
            v173 = v163;
          else
            v173 = v168;
          if (v170 >= v165)
            v174 = v165;
          else
            v174 = v166[1];
          if (v170 <= v165)
            v175 = v165;
          else
            v175 = v166[1];
          if (v174 >= v169)
            v174 = v169;
          if (v172 >= v171)
            v172 = v171;
          if (v175 <= v169)
            v176 = v169;
          else
            v176 = v175;
          if (v173 <= v171)
            v177 = v171;
          else
            v177 = v173;
          v178 = (unsigned __int16 *)*((_QWORD *)v164 + 4);
          v179 = (double)v170;
          if (v178)
          {
            v180 = (((int)(0xFFFF * (v176 - (unsigned __int16)v380)) / v381) | (((int)(0xFFFF
                                                                                     * (v176 - (unsigned __int16)v380))
                                                                               / v381) << 8)) & 0xFF00FF;
            v181 = (v180 | (16 * v180)) & 0x3030303 | (4 * ((v180 | (16 * v180)) & 0xF0F0F0F)) & 0x33333333;
            v182 = (((int)(0xFFFF * (v177 - WORD1(v380))) / v381) | (((int)(0xFFFF * (v177 - WORD1(v380))) / v381) << 8)) & 0xFF00FF;
            v183 = (v182 | (16 * v182)) & 0x3030303 | (4 * ((v182 | (16 * v182)) & 0xF0F0F0F)) & 0x33333333;
            v184 = ((4 * v183) | (2 * v183)) & 0xAAAAAAAA | (v181 | (2 * v181)) & 0x55555555;
            v185 = (double)v169;
            v186 = v179 - (double)v169;
            while (*((_DWORD *)v178 + 10) <= v184)
            {
              if (v178 != v166 && v178 != v167)
              {
                v187 = *v178;
                if (*v166 != v187 && *v164 != v187 && *v167 != v187)
                {
                  v188 = v178[2];
                  v189 = v178[1];
                  if ((((*(unsigned __int16 *)(*((_QWORD *)v178 + 2) + 2) - v189)
                       * (v188 - *(unsigned __int16 *)(*((_QWORD *)v178 + 1) + 4))
                       + (v188 - *(unsigned __int16 *)(*((_QWORD *)v178 + 2) + 4))
                       * (v189 - *(unsigned __int16 *)(*((_QWORD *)v178 + 1) + 2))) & 0x80000000) == 0)
                  {
                    v190 = (double)v189;
                    v191 = (double)v188;
                    if ((v179 - (double)v189) * ((double)v163 - (double)v168)
                       + ((double)v188 - (double)v168) * ((double)v165 - v179) >= 0.0
                      && ((double)v165 - v190) * ((double)v171 - (double)v163)
                       + (v191 - (double)v163) * ((double)v169 - (double)v165) >= 0.0
                      && (v185 - v190) * ((double)v168 - (double)v171) + (v191 - (double)v171) * v186 >= 0.0)
                    {
                      goto LABEL_149;
                    }
                  }
                }
              }
              v178 = (unsigned __int16 *)*((_QWORD *)v178 + 4);
              if (!v178)
                break;
            }
          }
          else
          {
            v185 = (double)v169;
            v186 = v179 - (double)v169;
          }
          v196 = (unsigned __int16 *)*((_QWORD *)v164 + 3);
          if (v196)
          {
            v197 = (((int)(0xFFFF * (v174 - (unsigned __int16)v380)) / v381) | (((int)(0xFFFF
                                                                                     * (v174 - (unsigned __int16)v380))
                                                                               / v381) << 8)) & 0xFF00FF;
            v198 = (v197 | (16 * v197)) & 0x3030303 | (4 * ((v197 | (16 * v197)) & 0xF0F0F0F)) & 0x33333333;
            v199 = (((int)(0xFFFF * (v172 - WORD1(v380))) / v381) | (((int)(0xFFFF * (v172 - WORD1(v380))) / v381) << 8)) & 0xFF00FF;
            v200 = (v199 | (16 * v199)) & 0x3030303 | (4 * ((v199 | (16 * v199)) & 0xF0F0F0F)) & 0x33333333;
            v201 = ((4 * v200) | (2 * v200)) & 0xAAAAAAAA | (v198 | (2 * v198)) & 0x55555555;
            v202 = (double)v168;
            v203 = (double)v165;
            v204 = (double)v163;
            v205 = v204 - (double)v168;
            while (*((_DWORD *)v196 + 10) >= v201)
            {
              if (v196 != v166 && v196 != v167)
              {
                v206 = *v196;
                if (*v166 != v206 && *v164 != v206 && *v167 != v206)
                {
                  v207 = v196[2];
                  v208 = v196[1];
                  if ((((*(unsigned __int16 *)(*((_QWORD *)v196 + 2) + 2) - v208)
                       * (v207 - *(unsigned __int16 *)(*((_QWORD *)v196 + 1) + 4))
                       + (v207 - *(unsigned __int16 *)(*((_QWORD *)v196 + 2) + 4))
                       * (v208 - *(unsigned __int16 *)(*((_QWORD *)v196 + 1) + 2))) & 0x80000000) == 0)
                  {
                    v209 = (double)v208;
                    v210 = (double)v207;
                    if ((v179 - (double)v208) * v205 + ((double)v207 - v202) * (v203 - v179) >= 0.0
                      && (v203 - v209) * ((double)v171 - v204) + (v210 - v204) * (v185 - v203) >= 0.0
                      && (v185 - v209) * (v202 - (double)v171) + (v210 - (double)v171) * v186 >= 0.0)
                    {
                      goto LABEL_149;
                    }
                  }
                }
              }
              v196 = (unsigned __int16 *)*((_QWORD *)v196 + 3);
              if (!v196)
                break;
            }
          }
LABEL_215:
          v212 = v385;
          v211 = v386;
          if (v385 < v386)
          {
            *(_WORD *)v385 = *v166;
            v213 = v212 + 2;
            goto LABEL_237;
          }
          v214 = (char *)v384;
          v215 = v385 - (_BYTE *)v384;
          if (v385 - (_BYTE *)v384 < -2)
            goto LABEL_458;
          v216 = v215 >> 1;
          if (v386 - (_BYTE *)v384 <= (unint64_t)((v215 >> 1) + 1))
            v217 = v216 + 1;
          else
            v217 = v386 - (_BYTE *)v384;
          if ((unint64_t)(v386 - (_BYTE *)v384) >= 0x7FFFFFFFFFFFFFFELL)
            v218 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v218 = v217;
          if (v218)
          {
            if ((v218 & 0x8000000000000000) == 0)
            {
              v219 = v218;
              v220 = (char *)operator new(2 * v218);
              v218 = v219;
              goto LABEL_228;
            }
LABEL_459:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v220 = 0;
LABEL_228:
          v221 = &v220[2 * v216];
          *(_WORD *)v221 = *v166;
          v213 = v221 + 2;
          if (v212 != v214)
          {
            v222 = v212 - 2 - v214;
            if (v222 < 0x1E)
              goto LABEL_464;
            if (v212 - v220 - (v215 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_464;
            v223 = (v222 >> 1) + 1;
            v224 = &v220[2 * v216 - 16];
            v225 = v212 - 16;
            v226 = v223 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v227 = *(_OWORD *)v225;
              *((_OWORD *)v224 - 1) = *((_OWORD *)v225 - 1);
              *(_OWORD *)v224 = v227;
              v224 -= 32;
              v225 -= 32;
              v226 -= 16;
            }
            while (v226);
            v221 -= 2 * (v223 & 0xFFFFFFFFFFFFFFF0);
            v212 -= 2 * (v223 & 0xFFFFFFFFFFFFFFF0);
            if (v223 != (v223 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_464:
              do
              {
                v228 = *((_WORD *)v212 - 1);
                v212 -= 2;
                *((_WORD *)v221 - 1) = v228;
                v221 -= 2;
              }
              while (v212 != v214);
            }
          }
          v211 = &v220[2 * v218];
          v384 = v221;
          v385 = v213;
          v386 = v211;
          if (v214)
          {
            operator delete(v214);
            v211 = v386;
          }
LABEL_237:
          v385 = v213;
          if (v213 < v211)
          {
            *(_WORD *)v213 = *v164;
            v229 = (unsigned __int16 *)(v213 + 2);
            goto LABEL_261;
          }
          v230 = (char *)v384;
          v231 = v213 - (_BYTE *)v384;
          if (v213 - (_BYTE *)v384 < -2)
            goto LABEL_458;
          v232 = v231 >> 1;
          v233 = v211 - (_BYTE *)v384;
          if (v233 <= (v231 >> 1) + 1)
            v234 = v232 + 1;
          else
            v234 = v233;
          if (v233 >= 0x7FFFFFFFFFFFFFFELL)
            v235 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v235 = v234;
          if (v235)
          {
            if (v235 < 0)
              goto LABEL_459;
            v236 = v235;
            v237 = operator new(2 * v235);
            v235 = v236;
          }
          else
          {
            v237 = 0;
          }
          v238 = (unsigned __int16 *)&v237[2 * v232];
          *v238 = *v164;
          v229 = v238 + 1;
          if (v213 != v230)
          {
            v239 = v213 - 2 - v230;
            if (v239 < 0x1E)
            {
              v240 = v213;
              goto LABEL_258;
            }
            if (v213 - v237 - (v231 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            {
              v240 = v213;
              goto LABEL_258;
            }
            v241 = (v239 >> 1) + 1;
            v240 = &v213[-2 * (v241 & 0xFFFFFFFFFFFFFFF0)];
            v242 = &v237[2 * v232 - 16];
            v243 = (__int128 *)(v213 - 16);
            v244 = v241 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v245 = *v243;
              *(v242 - 1) = *(v243 - 1);
              *v242 = v245;
              v242 -= 2;
              v243 -= 2;
              v244 -= 16;
            }
            while (v244);
            v238 -= v241 & 0xFFFFFFFFFFFFFFF0;
            if (v241 != (v241 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_258:
                v246 = *((_WORD *)v240 - 1);
                v240 -= 2;
                *--v238 = v246;
              }
              while (v240 != v230);
            }
          }
          v211 = &v237[2 * v235];
          v384 = v238;
          v385 = (char *)v229;
          v386 = v211;
          if (v230)
          {
            operator delete(v230);
            v211 = v386;
          }
LABEL_261:
          v385 = (char *)v229;
          if (v229 < (unsigned __int16 *)v211)
          {
            *v229 = *v167;
            v247 = (char *)(v229 + 1);
            goto LABEL_281;
          }
          v248 = (unsigned __int16 *)v384;
          v249 = (char *)v229 - (_BYTE *)v384;
          if ((char *)v229 - (_BYTE *)v384 <= -3)
LABEL_458:
            abort();
          v250 = v249 >> 1;
          v251 = v211 - (_BYTE *)v384;
          if (v251 <= (v249 >> 1) + 1)
            v252 = v250 + 1;
          else
            v252 = v251;
          if (v251 >= 0x7FFFFFFFFFFFFFFELL)
            v253 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v253 = v252;
          if (v253)
          {
            if (v253 < 0)
              goto LABEL_459;
            v254 = v253;
            v255 = operator new(2 * v253);
            v253 = v254;
          }
          else
          {
            v255 = 0;
          }
          v256 = (unsigned __int16 *)&v255[2 * v250];
          *v256 = *v167;
          v247 = (char *)(v256 + 1);
          if (v229 != v248)
          {
            v257 = (char *)(v229 - 1) - (char *)v248;
            if (v257 < 0x1E || (char *)v229 - v255 - (v249 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            {
              v258 = v229;
              goto LABEL_278;
            }
            v264 = (v257 >> 1) + 1;
            v258 = &v229[-(v264 & 0xFFFFFFFFFFFFFFF0)];
            v265 = &v255[2 * v250 - 16];
            v266 = v229 - 8;
            v267 = v264 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v268 = *(_OWORD *)v266;
              *(v265 - 1) = *((_OWORD *)v266 - 1);
              *v265 = v268;
              v265 -= 2;
              v266 -= 16;
              v267 -= 16;
            }
            while (v267);
            v256 -= v264 & 0xFFFFFFFFFFFFFFF0;
            if (v264 != (v264 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_278:
                v259 = *--v258;
                *--v256 = v259;
              }
              while (v258 != v248);
            }
          }
          v384 = v256;
          v385 = v247;
          v386 = &v255[2 * v253];
          if (v248)
            operator delete(v248);
LABEL_281:
          v385 = v247;
          v260 = *v161;
          v261 = *v159;
          if (*v161)
          {
            *(_QWORD *)(v260 + 8) = v261;
            v261 = *v159;
          }
          if (v261)
            *(_QWORD *)(v261 + 16) = v260;
          v262 = *((_QWORD *)v164 + 3);
          if (v262)
            *(_QWORD *)(v262 + 32) = *((_QWORD *)v164 + 4);
          v263 = *((_QWORD *)v164 + 4);
          if (v263)
            *(_QWORD *)(v263 + 24) = v262;
          if (v377)
          {
            *((_BYTE *)v164 + 44) = -1;
            *(_QWORD *)v164 = v379;
            v379 = v164;
          }
          v141 = (unsigned __int16 *)*((_QWORD *)v167 + 2);
          if (!v141
            || (v159 = (uint64_t *)(v141 + 4),
                v158 = (unsigned __int16 *)*((_QWORD *)v141 + 1),
                v161 = (uint64_t *)(v141 + 8),
                v160 = (unsigned __int16 *)*((_QWORD *)v141 + 2),
                v158 == v160))
          {
LABEL_377:
            v6 = v352;
            if (v166)
            {
              v317 = *((_QWORD *)v166 + 2);
              if (v317)
                *(_QWORD *)(v317 + 8) = *((_QWORD *)v166 + 1);
              v318 = *((_QWORD *)v166 + 1);
              if (v318)
                *(_QWORD *)(v318 + 16) = v317;
              v319 = *((_QWORD *)v166 + 3);
              if (v319)
                *(_QWORD *)(v319 + 32) = *((_QWORD *)v166 + 4);
              v320 = *((_QWORD *)v166 + 4);
              if (v320)
                *(_QWORD *)(v320 + 24) = v319;
              if (v377)
              {
                *((_BYTE *)v166 + 44) = -1;
                *(_QWORD *)v166 = v379;
                v379 = v166;
              }
            }
            v321 = *((_QWORD *)v167 + 2);
            if (v321)
              *(_QWORD *)(v321 + 8) = *((_QWORD *)v167 + 1);
            v322 = *((_QWORD *)v167 + 1);
            v162 = v367;
            if (v322)
              *(_QWORD *)(v322 + 16) = v321;
            v323 = *((_QWORD *)v167 + 3);
            if (v323)
              *(_QWORD *)(v323 + 32) = *((_QWORD *)v167 + 4);
            v324 = *((_QWORD *)v167 + 4);
            if (v324)
              *(_QWORD *)(v324 + 24) = v323;
            if (v377)
            {
              *((_BYTE *)v167 + 44) = -1;
              *(_QWORD *)v167 = v379;
              v379 = v167;
            }
            goto LABEL_334;
          }
          goto LABEL_147;
        }
        v192 = (unsigned __int16 *)*((_QWORD *)v160 + 2);
        if (v192 == v166)
          goto LABEL_215;
        while (1)
        {
          v193 = *v192;
          if (*v166 != v193 && *v164 != v193 && *v167 != v193)
          {
            v194 = (unint64_t)*(unsigned int *)(v192 + 1) >> 16;
            v195 = (unsigned __int16)*(_DWORD *)(v192 + 1);
            if ((((*(unsigned __int16 *)(*((_QWORD *)v192 + 2) + 2) - v195)
                 * (HIWORD(*(_DWORD *)(v192 + 1)) - *(unsigned __int16 *)(*((_QWORD *)v192 + 1) + 4))
                 + ((_DWORD)v194 - *(unsigned __int16 *)(*((_QWORD *)v192 + 2) + 4))
                 * (v195 - *(unsigned __int16 *)(*((_QWORD *)v192 + 1) + 2))) & 0x80000000) == 0
              && (((int)(v194 - v168) * (uint64_t)(int)(v165 - v170) + (int)(v168 - v163) * (uint64_t)(int)(v195 - v170)) & 0x8000000000000000) == 0
              && (((int)(v194 - v163) * (uint64_t)(int)(v169 - v165) + (int)(v163 - v171) * (uint64_t)(v195 - v165)) & 0x8000000000000000) == 0
              && (((int)(v194 - v171) * (uint64_t)(int)(v170 - v169) + (int)(v171 - v168) * (uint64_t)(int)(v195 - v169)) & 0x8000000000000000) == 0)
            {
              break;
            }
          }
          v192 = (unsigned __int16 *)*((_QWORD *)v192 + 2);
          if (v192 == v166)
            goto LABEL_215;
        }
      }
LABEL_149:
      if (v167 == v141)
        break;
      v159 = (uint64_t *)(v167 + 4);
      v158 = (unsigned __int16 *)*((_QWORD *)v167 + 1);
      v161 = (uint64_t *)(v167 + 8);
      v160 = (unsigned __int16 *)*((_QWORD *)v167 + 2);
      v165 = v169;
      v163 = v171;
      v164 = v167;
      if (v158 == v160)
        goto LABEL_377;
    }
    v6 = v352;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Wrapped around the polygon without finishing... :-(", 51);
    v7 = v368;
    std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
    v325 = std::locale::use_facet((const std::locale *)&v396, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v325->__vftable[2].~facet_0)(v325, 10);
    std::locale::~locale((std::locale *)&v396);
    std::ostream::put();
    std::ostream::flush();
    v326 = 0;
    v327 = v141;
    do
    {
      ++v326;
      v327 = (unsigned __int16 *)*((_QWORD *)v327 + 2);
    }
    while (v327 != v141 && v327 != 0);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"List has ", 9);
    std::to_string(&v396, v326);
    if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v329 = &v396;
    else
      v329 = (std::string *)v396.__r_.__value_.__r.__words[0];
    if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v396.__r_.__value_.__r.__words[2]);
    else
      size = v396.__r_.__value_.__l.__size_;
    v331 = (_QWORD *)MEMORY[0x1E0DE4A60];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)v329, size);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v331, (uint64_t)" nodes:", 7);
    std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
    v332 = std::locale::use_facet(__dst, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v332->__vftable[2].~facet_0)(v332, 10);
    std::locale::~locale(__dst);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v331, (uint64_t)"\t", 1);
    if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v396.__r_.__value_.__l.__data_);
    v333 = v141;
    do
    {
      std::to_string(&v396, *v333);
      if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v334 = &v396;
      else
        v334 = (std::string *)v396.__r_.__value_.__r.__words[0];
      if ((v396.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v335 = HIBYTE(v396.__r_.__value_.__r.__words[2]);
      else
        v335 = v396.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v331, (uint64_t)v334, v335);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v331, (uint64_t)" ", 1);
      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v396.__r_.__value_.__l.__data_);
      v333 = (unsigned __int16 *)*((_QWORD *)v333 + 2);
    }
    while (v333 != v141 && v333);
    std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
    v336 = std::locale::use_facet((const std::locale *)&v396, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v336->__vftable[2].~facet_0)(v336, 10);
    std::locale::~locale((std::locale *)&v396);
    std::ostream::put();
    std::ostream::flush();
    v337 = (unsigned __int16 *)*((_QWORD *)v141 + 1);
    if (v337)
    {
      v338 = v377;
      if (v377)
      {
        v339 = v379;
        do
        {
          v340 = v141;
          v141 = (unsigned __int16 *)*((_QWORD *)v141 + 2);
          if (v141)
            *((_QWORD *)v141 + 1) = *((_QWORD *)v340 + 1);
          v341 = *((_QWORD *)v340 + 1);
          if (v341)
            *(_QWORD *)(v341 + 16) = v141;
          v342 = *((_QWORD *)v340 + 3);
          if (v342)
            *(_QWORD *)(v342 + 32) = *((_QWORD *)v340 + 4);
          v343 = *((_QWORD *)v340 + 4);
          if (v343)
            *(_QWORD *)(v343 + 24) = v342;
          *((_BYTE *)v340 + 44) = -1;
          *(_QWORD *)v340 = v339;
          v339 = v340;
        }
        while (v141 != v337);
        v379 = v340;
      }
      else
      {
        do
        {
          v344 = (unsigned __int16 *)*((_QWORD *)v141 + 2);
          if (v344)
            *((_QWORD *)v344 + 1) = *((_QWORD *)v141 + 1);
          v345 = *((_QWORD *)v141 + 1);
          if (v345)
            *(_QWORD *)(v345 + 16) = v344;
          v346 = *((_QWORD *)v141 + 3);
          if (v346)
            *(_QWORD *)(v346 + 32) = *((_QWORD *)v141 + 4);
          v347 = *((_QWORD *)v141 + 4);
          if (v347)
            *(_QWORD *)(v347 + 24) = v346;
          v141 = v344;
        }
        while (v344 != v337);
      }
      v348 = *((_QWORD *)v337 + 2);
      if (v348)
        *(_QWORD *)(v348 + 8) = *((_QWORD *)v337 + 1);
      v349 = *((_QWORD *)v337 + 1);
      if (v349)
        *(_QWORD *)(v349 + 16) = v348;
      v350 = *((_QWORD *)v337 + 3);
      if (v350)
        *(_QWORD *)(v350 + 32) = *((_QWORD *)v337 + 4);
      v351 = *((_QWORD *)v337 + 4);
      if (v351)
        *(_QWORD *)(v351 + 24) = v350;
      if (v338)
      {
        *((_BYTE *)v337 + 44) = -1;
        *(_QWORD *)v337 = v379;
        v379 = v337;
      }
    }
LABEL_304:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v280 = (id)GEOGetVectorKitVKDefaultLog_log;
    v162 = v367;
    if (!os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
      goto LABEL_333;
    if (v7 == (char *)v6)
    {
      HIBYTE(v393) = 0;
      LOBYTE(__dst[0].__locale_) = 0;
      locale = (std::locale::__imp *)__dst;
      goto LABEL_331;
    }
    v403[0] = v356;
    v396.__r_.__value_.__r.__words[0] = v358;
    *(std::string::size_type *)((char *)v396.__r_.__value_.__r.__words + *(_QWORD *)(v358 - 24)) = v357;
    v281 = (std::ios_base *)((char *)&v396 + *(_QWORD *)(v396.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v281, &v396.__r_.__value_.__r.__words[1]);
    v281[1].__vftable = 0;
    v281[1].__fmtflags_ = -1;
    v396.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FE0] + 24;
    v403[0] = MEMORY[0x1E0DE4FE0] + 64;
    std::streambuf::basic_streambuf();
    v396.__r_.__value_.__l.__size_ = v355;
    __p = 0u;
    v401 = 0u;
    v402 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v396, (uint64_t)"(", 1);
    v282 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v282, (uint64_t)", ", 2);
    v283 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v283, (uint64_t)")", 1);
    if (v363 >= 5)
    {
      v284 = v371 - 1;
      v285 = &v6->i8[6];
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v396, (uint64_t)", (", 3);
        v286 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v286, (uint64_t)", ", 2);
        v287 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v287, (uint64_t)")", 1);
        v285 += 4;
        --v284;
      }
      while (v284);
    }
    if ((v402 & 0x10) != 0)
    {
      v291 = *((_QWORD *)&v401 + 1);
      v292 = (const void **)&v398;
      if (*((_QWORD *)&v401 + 1) < v399)
      {
        *((_QWORD *)&v401 + 1) = v399;
        v291 = v399;
        v292 = (const void **)&v398;
      }
    }
    else
    {
      if ((v402 & 8) == 0)
      {
        v288 = 0;
        HIBYTE(v393) = 0;
        v289 = (std::locale::__imp *)__dst;
        goto LABEL_326;
      }
      v291 = v397[2];
      v292 = (const void **)v397;
    }
    v293 = *v292;
    v288 = v291 - (_QWORD)*v292;
    if (v288 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v288 >= 0x17)
    {
      v294 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v288 | 7) != 0x17)
        v294 = v288 | 7;
      v295 = v294 + 1;
      v289 = (std::locale::__imp *)operator new(v294 + 1);
      v393 = v295 | 0x8000000000000000;
      __dst[0].__locale_ = v289;
      __dst[1].__locale_ = (std::locale::__imp *)v288;
LABEL_325:
      memmove(v289, v293, v288);
      goto LABEL_326;
    }
    HIBYTE(v393) = v291 - *(_BYTE *)v292;
    v289 = (std::locale::__imp *)__dst;
    if (v288)
      goto LABEL_325;
LABEL_326:
    *((_BYTE *)v289 + v288) = 0;
    v396.__r_.__value_.__r.__words[0] = v354;
    *(std::string::size_type *)((char *)v396.__r_.__value_.__r.__words + *(_QWORD *)(v354 - 24)) = v353;
    v396.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v401) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AF4D64](v403);
    locale = (std::locale::__imp *)__dst;
    if (v393 < 0)
      locale = __dst[0].__locale_;
    v162 = v367;
LABEL_331:
    *(_DWORD *)buf = 136315138;
    v395 = locale;
    _os_log_impl(&dword_19F029000, v280, OS_LOG_TYPE_ERROR, "Triangulator failed to fully triangulate polygon: %s", buf, 0xCu);
    if (SHIBYTE(v393) < 0)
      operator delete(__dst[0].__locale_);
LABEL_333:

LABEL_334:
    v296 = (char *)v384;
    if (v162 == (v385 - (_BYTE *)v384) >> 1)
    {
      if (v385 != v384)
      {
        v297 = 0;
        v298 = (char *)v391;
        v299 = v162 <= 1 ? 1 : v162;
        if (v299 < 0x10)
          goto LABEL_344;
        if ((unint64_t)((_BYTE *)v391 - (_BYTE *)v384) <= 0x1F)
          goto LABEL_344;
        v297 = v299 & 0xFFFFFFFFFFFFFFF0;
        v300 = (char *)v391 + 16;
        v301 = (__int128 *)((char *)v384 + 16);
        v302 = v299 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v303 = *v301;
          *(v300 - 1) = *(v301 - 1);
          *v300 = v303;
          v300 += 2;
          v301 += 2;
          v302 -= 16;
        }
        while (v302);
        if (v299 != v297)
        {
LABEL_344:
          v304 = v299 - v297;
          v305 = 2 * v297;
          v306 = &v298[v305];
          v307 = &v296[v305];
          do
          {
            v308 = *(_WORD *)v307;
            v307 += 2;
            *(_WORD *)v306 = v308;
            v306 += 2;
            --v304;
          }
          while (v304);
        }
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v309 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v309, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v396.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v396.__r_.__value_.__r.__words + 4) = v162;
        WORD2(v396.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v396.__r_.__value_.__r.__words[1] + 6) = (v385 - (_BYTE *)v384) >> 1;
        _os_log_impl(&dword_19F029000, v309, OS_LOG_TYPE_ERROR, "Mismatching number of indices, indexCount: %zu, triangulatedIndexCount: %zu", (uint8_t *)&v396, 0x16u);
      }

      if (v162)
        bzero(v391, 6 * v371 - 12);
    }
    if (v384)
    {
      v385 = (char *)v384;
      operator delete(v384);
    }
    geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements((uint64_t)&v375);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v376);
    if (v391)
    {
      v310 = v388;
      v311 = v389;
      if (v389 != v388)
      {
        v312 = (_QWORD *)*((_QWORD *)&v387 + 1);
        v313 = v390;
        v314 = HIBYTE(v390);
        if ((_QWORD)v387 && *(_BYTE *)(*((_QWORD *)&v387 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v387 + 64))();
        if (v313 && !v314)
        {
          v315 = v312[7];
          v316 = v312[8];
          if (v316 == v315)
            v315 = v312[10] - v312[9];
          if (v310 < v315)
            v315 = v310;
          if (v316 <= v311)
            v316 = v311;
          if (v316 == v315)
            v316 = v315 + v312[10] - v312[9];
          v312[7] = v315;
          v312[8] = v316;
        }
      }
    }
    if (v374 && v373 && (_QWORD)v372 && *(_BYTE *)(*((_QWORD *)&v372 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v372 + 64))();
    v7 = v368;
    ++v369;
    v4 = v365 + 144;
    v5 = a1;
    if (v365 + 144 != v362)
      continue;
    break;
  }
  if (v6)
    operator delete(v6);
}

void sub_19FEFCF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::locale::~locale((std::locale *)&STACK[0x238]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  md::Triangulator<unsigned short>::~Triangulator((uint64_t)&a60);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x200]);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a53);
  if (a11)
  {
    operator delete(a11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  v36 = &v37;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v37;
      v5 = &v37;
      if (v37)
      {
        v6 = v37;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v36)
        {
          v36 = (uint64_t **)*v36;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v37, v8);
        v3 = ++v38;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (!v12 && v9)
  {
    v15 = v37;
    if (v37)
    {
      v16 = *(_QWORD **)a1;
      do
      {
        v17 = 0;
        v18 = v16[4];
        do
        {
          v19 = v18 + 48 * v17;
          v20 = &v37;
          v21 = v15;
          do
          {
            v22 = v21;
            v23 = v20;
            v24 = v21[4];
            if (v24 >= v19)
              v20 = (uint64_t **)v21;
            else
              ++v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
          if (v20 == &v37)
            goto LABEL_34;
          if (v24 < v19)
            v22 = (uint64_t *)v23;
          if (v19 < v22[4])
LABEL_34:
            *(_BYTE *)(v19 + 44) = -1;
          ++v17;
        }
        while (v17 != v9);
        v25 = (_QWORD *)v16[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v16[2];
            v12 = *v26 == (_QWORD)v16;
            v16 = v26;
          }
          while (!v12);
        }
        v16 = v26;
      }
      while (v26 != v11);
      goto LABEL_20;
    }
    v27 = *(_QWORD **)a1;
    while (1)
    {
      v28 = v27[4];
      if (v9 < 2)
        break;
      v30 = (_BYTE *)(v28 + 92);
      v31 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v30 - 48) = -1;
        *v30 = -1;
        v30 += 96;
        v31 -= 2;
      }
      while (v31);
      v29 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_59;
LABEL_61:
      v34 = (_QWORD *)v27[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v27[2];
          v12 = *v35 == (_QWORD)v27;
          v27 = v35;
        }
        while (!v12);
      }
      v27 = v35;
      if (v35 == v11)
        goto LABEL_20;
    }
    v29 = 0;
LABEL_59:
    v32 = v9 - v29;
    v33 = (_BYTE *)(v28 + 48 * v29 + 44);
    do
    {
      *v33 = -1;
      v33 += 48;
      --v32;
    }
    while (v32);
    goto LABEL_61;
  }
LABEL_20:
  if (v10 != v11)
  {
    do
    {
      free((void *)v10[4]);
      v13 = (_QWORD *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v10[2];
          v12 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v12);
      }
      v10 = v14;
    }
    while (v14 != v11);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v37);
}

void sub_19FEFD388(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Triangulator<unsigned short>::~Triangulator(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  geo::Pool<geo::Triangulator<unsigned short,unsigned short>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19FEFD3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19FEFD444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEFD56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEFD5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEFD64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKLabelNavRouteEta;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FEFE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  uint64_t v29;

  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);

  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)&a28);
  _Unwind_Resume(a1);
}

void sub_19FEFE564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FEFE94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  *a15 = v17;
  _Unwind_Resume(a1);
}

void artworkAndKeyForEtaLabel(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5, char a6, uint64_t *a7)
{
  unsigned __int8 v16;
  unsigned __int8 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned __int8 v43;
  size_t *v44;
  size_t v45;
  uint64_t v46;
  unsigned int v47;
  int *v48;
  grl *v49;
  int v50;
  unsigned __int8 v51;
  int v52;
  grl *v53;
  int v54;
  int v55;
  int v56;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 v59;
  std::string::size_type v60;
  std::string *p_sz;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  char v65;
  std::string::size_type v66;
  std::string *v67;
  size_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int *v81;
  int v82;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  id v90;
  const RoadSignColoring *v91;
  VKLabelNavArtworkCache *v92;
  NSString *v93;
  unint64_t RoadSignKey;
  uint64_t v95;
  id v96;
  std::__shared_weak_count *v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  int8x8_t v103;
  uint8x8_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::string::size_type v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  id v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::size_type v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  int8x8_t v143;
  uint8x8_t v144;
  unint64_t v145;
  _QWORD **v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint8x8_t v166;
  _QWORD *v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  float v172;
  float v173;
  _BOOL8 v174;
  unint64_t v175;
  unint64_t v176;
  size_t prime;
  void *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  size_t v183;
  size_t v184;
  size_t v185;
  _QWORD *v186;
  size_t v187;
  uint64_t v188;
  unint64_t v189;
  uint8x8_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  size_t v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  int8x8_t v218;
  uint8x8_t v219;
  unint64_t v220;
  _QWORD **v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  __int128 v234;
  id v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  __int128 v249;
  __int16 v250;
  _BYTE v251[48];
  _BYTE v252[32];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _BYTE v256[32];
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  std::string __sz;
  uint64_t v270;
  uint64_t v271;
  std::string __p;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  __int16 v284;
  size_t __len[2];
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  unint64_t v296[3];

  v237 = a2;
  __asm { FMOV            V0.2D, #1.0 }
  v258 = _Q0;
  v259 = _Q0;
  v257 = 0x1010000000001;
  v260 = 0;
  v262 = 0;
  v261 = 0;
  v263 = 0x3FC99999A0000000;
  v264 = 0;
  v266 = 0;
  v265 = 0;
  v268 = 0;
  v267 = 0x3FF0000000000000;
  v251[0] = 0;
  *(_OWORD *)&v251[8] = _Q0;
  *(_OWORD *)&v251[24] = xmmword_19FFB4FB0;
  *(_QWORD *)&v251[40] = 0;
  *(_QWORD *)v252 = 0;
  *(_OWORD *)&v252[8] = *MEMORY[0x1E0C9D820];
  v253 = 0uLL;
  *(_QWORD *)&v252[24] = 0x4034000000000000;
  v254 = xmmword_19FFB4FC0;
  v255 = 0uLL;
  *(_OWORD *)&v256[8] = *(_OWORD *)&v252[8];
  *(_QWORD *)v256 = 0x401A000000000000;
  *(_QWORD *)&v256[24] = 0;
  __asm { FMOV            V1.2D, #6.0 }
  v239 = _Q0;
  v240 = _Q1;
  v241 = xmmword_19FFB5930;
  v242 = 0x4031000000000000;
  v243 = 0uLL;
  v244 = 0;
  {
    v202 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v202, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v245 = mdm::Allocator::instance(void)::alloc;
  v246 = 0uLL;
  v247 = 0;
  {
    v203 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v203, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v249 = 0uLL;
  v248 = mdm::Allocator::instance(void)::alloc;
  v250 = 1;
  v18 = v237;
  v19 = objc_msgSend(v237, "routeEtaType");
  v251[0] = a6;
  v20 = *(_QWORD *)(a3 + 8);
  v21 = *(float *)(v20 + 176);
  *(double *)&v251[8] = *(float *)(*(_QWORD *)(v20 + 336) + 172);
  *(double *)&v251[16] = v21;
  *(_QWORD *)&v239 = *(_QWORD *)&v251[8];
  *((double *)&v239 + 1) = v21;
  if (v19 == 1)
    v22 = 1;
  else
    v22 = 3;
  LOBYTE(v250) = v22;
  if ((GetRoadSignMetadataForStyleQuery(*(_QWORD *)a4, *(std::__shared_weak_count **)(a4 + 8), (std::string::size_type *)(a4 + 32), (uint64_t)&v257, (uint64_t)v251, (uint64_t)&v239) & 1) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    if ((SHIBYTE(v247) & 0x80000000) == 0)
      goto LABEL_184;
    goto LABEL_15;
  }
  v23 = *(_QWORD *)(a4 + 16);
  if (!v23)
  {
    v234 = 0u;
    v238 = 0u;
    objc_msgSend(v237, "etaText", 0);
    goto LABEL_123;
  }
  v24 = *(_DWORD *)(*(_QWORD *)(a3 + 8) + 176);
  v25 = *(std::__shared_weak_count **)(a4 + 24);
  __len[0] = *(_QWORD *)(a4 + 16);
  __len[1] = (size_t)v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    *((_QWORD *)&v273 + 1) = v25;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  else
  {
    *((_QWORD *)&v273 + 1) = 0;
  }
  *(_QWORD *)&v273 = v23;
  v274 = 0uLL;
  LOBYTE(v275) = 0;
  v29 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 48))(v23, &v274);
  LOBYTE(v275) = v29;
  if (v25)
  {
    v30 = (unint64_t *)&v25->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    v29 = v275;
  }
  if (v29)
  {
    v32 = (char *)operator new(0x148uLL);
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = 0;
    *(_QWORD *)v32 = &off_1E42DB010;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *((_QWORD *)v32 + 7) = 0;
    {
      v204 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v204, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v34 = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)v32 + 18) = 0;
    *((_QWORD *)v32 + 9) = 0;
    *((_QWORD *)v32 + 10) = 0;
    *((_QWORD *)v32 + 8) = v34;
    *((_WORD *)v32 + 44) = 0;
    *((_QWORD *)v32 + 12) = v32 + 128;
    *((_QWORD *)v32 + 13) = v32 + 128;
    *((_QWORD *)v32 + 14) = v32 + 128;
    *((_QWORD *)v32 + 15) = 2;
    v32[136] = 0;
    *(_DWORD *)(v32 + 137) = 16843008;
    v32[141] = 0;
    *((_QWORD *)v32 + 19) = 0;
    *((_QWORD *)v32 + 20) = 0;
    {
      v205 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)v32 + 21) = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)v32 + 22) = 0;
    *(_QWORD *)(v32 + 181) = 0;
    v32[192] = 4;
    *(_QWORD *)(v32 + 196) = 0;
    v32[204] = 0;
    *(_QWORD *)(v32 + 212) = 0xFFFF3F800000;
    *((_WORD *)v32 + 110) = 0;
    *((_DWORD *)v32 + 56) = 1065353216;
    *((_QWORD *)v32 + 40) = 0;
    *((_OWORD *)v32 + 15) = 0u;
    *((_OWORD *)v32 + 16) = 0u;
    *((_OWORD *)v32 + 17) = 0u;
    *((_QWORD *)v32 + 36) = 0;
    *(_QWORD *)&v295 = v32 + 24;
    *((_QWORD *)&v295 + 1) = v32;
    v32[136] = 6;
    *((_DWORD *)v32 + 20) = v24;
    v35 = *(_QWORD *)(v273 + 24);
    v36 = *(unsigned __int8 *)(v35 + 12);
    if (v36 == 2)
    {
      LOBYTE(__len[0]) = 1;
      LOBYTE(v271) = 1;
      v37 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v35, 0x16Cu, 0, __len);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v35, 0x16Cu, 1u, &v271);
      v38 = *v37;
    }
    else
    {
      v38 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v273 + 24), 0x16Cu, v36, 0);
    }
    v39 = *(_QWORD *)(v273 + 24);
    v40 = *(unsigned __int8 *)(v39 + 12);
    if (v40 == 2)
    {
      LOBYTE(__len[0]) = 1;
      LOBYTE(v271) = 1;
      v41 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v39, 0x174u, 0, __len);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v39, 0x174u, 1u, &v271);
      v42 = *v41;
    }
    else
    {
      v42 = *(unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v273 + 24), 0x174u, v40, 0);
    }
    *(_QWORD *)(v32 + 196) = v38 | (unint64_t)(v42 << 32);
    __len[1] = 0;
    __len[0] = 0;
    *(_QWORD *)&v286 = 0;
    {
      v206 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v206, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)&v286 + 1) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)&v287 = 0;
    *(_QWORD *)((char *)&v287 + 5) = 0;
    if (v32[167] < 0)
    {
      if ((SBYTE7(v286) & 0x80u) == 0)
        v44 = __len;
      else
        v44 = (size_t *)__len[0];
      if ((SBYTE7(v286) & 0x80u) == 0)
        v45 = BYTE7(v286);
      else
        v45 = __len[1];
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)v32 + 18, v44, v45);
    }
    else if ((BYTE7(v286) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v32 + 18, (void *)__len[0], __len[1]);
    }
    else
    {
      *((_OWORD *)v32 + 9) = *(_OWORD *)__len;
      *((_QWORD *)v32 + 20) = v286;
    }
    *((_QWORD *)v32 + 22) = 0;
    *((_DWORD *)v32 + 46) = 0;
    v32[188] = 0;
    v46 = *(_QWORD *)(v273 + 24);
    v47 = *(unsigned __int8 *)(v46 + 12);
    if (v47 == 2)
    {
      LOBYTE(v271) = 1;
      __sz.__r_.__value_.__s.__data_[0] = 1;
      v48 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v46, 0xBDu, 0, &v271);
      v49 = (grl *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v46, 0xBDu, 1u, &__sz);
      v50 = *v48;
    }
    else
    {
      v49 = (grl *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v273 + 24), 0xBDu, v47, 0);
      v50 = *(_DWORD *)v49;
    }
    v51 = v50 - 1;
    if (v51 > 8u)
      v52 = 0;
    else
      v52 = dword_19FFB8A88[v51];
    v53 = (grl *)grl::SizeGroupMin(v49);
    v54 = (int)v53;
    v55 = grl::SizeGroupMax(v53);
    v56 = v52 + 4;
    if (v52 + 4 >= v55)
      v56 = v55;
    if (v56 <= v54)
      LOBYTE(v56) = v54;
    v32[192] = v56;
    *(_OWORD *)(v32 + 24) = *a5;
    LOBYTE(v296[0]) = 1;
    gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__sz, 0x71u, 1, *(_QWORD *)(v273 + 24), (BOOL *)v296);
    LOBYTE(v271) = v296[0];
    p_p = &__p;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__sz.__r_.__value_.__l.__data_);
    }
    else
    {
      __p = __sz;
    }
    if (!(_BYTE)v271)
      goto LABEL_89;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_89;
    {
      v207 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v207, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v270 = mdm::Allocator::instance(void)::alloc;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v60 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
        abort();
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ < 0x17)
      {
LABEL_68:
        *((_BYTE *)&__sz.__r_.__value_.__s + 23) = v60;
        p_sz = &__sz;
        if (!v60)
          goto LABEL_76;
        goto LABEL_75;
      }
    }
    else
    {
      v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) < 0x17uLL)
        goto LABEL_68;
    }
    v62 = (v60 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v62 = v60 | 7;
    v63 = v62 + 1;
    p_sz = (std::string *)(*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
    __sz.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
    __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)p_sz;
    __sz.__r_.__value_.__l.__size_ = v60;
LABEL_75:
    memmove(p_sz, p_p, v60);
LABEL_76:
    p_sz->__r_.__value_.__s.__data_[v60] = 0;
    v64 = (void **)(v32 + 40);
    v65 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    if ((v32[63] & 0x80000000) == 0)
    {
      if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        *(_OWORD *)v64 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
        *((_QWORD *)v32 + 7) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
        goto LABEL_89;
      }
      v66 = __sz.__r_.__value_.__r.__words[0];
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v64, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      goto LABEL_88;
    }
    v66 = __sz.__r_.__value_.__r.__words[0];
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &__sz;
    else
      v67 = (std::string *)__sz.__r_.__value_.__r.__words[0];
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    else
      v68 = __sz.__r_.__value_.__l.__size_;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v64, v67, v68);
    if (v65 < 0)
LABEL_88:
      (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)v270 + 40))(v270, v66, __sz.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
LABEL_89:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v69 = *(_QWORD **)(a4 + 16);
    v70 = v69[33];
    v71 = v69[30];
    v72 = v69[31];
    v73 = v72 - v71;
    if (v72 == v71)
    {
      v75 = 0;
      v78 = 0;
      v77 = 0;
    }
    else
    {
      if (v73 < 0)
        abort();
      v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, v72 - v71, 4);
      v75 = v74;
      v76 = 0;
      do
      {
        if (v74 + v76)
          *(_QWORD *)(v74 + v76) = *(_QWORD *)(v71 + v76);
        v76 += 8;
      }
      while (v71 + v76 != v72);
      v77 = v74 + v76;
      v78 = v74 + 8 * (v73 >> 3);
    }
    v79 = *(_QWORD *)(v273 + 24);
    v80 = *(unsigned __int8 *)(v79 + 12);
    if (v80 == 2)
    {
      LOBYTE(v271) = 1;
      __sz.__r_.__value_.__s.__data_[0] = 1;
      v81 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v79, 0xBAu, 0, &v271);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v79, 0xBAu, 1u, &__sz);
      v82 = *v81;
    }
    else
    {
      v82 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v273 + 24), 0xBAu, v80, 0);
    }
    if (v82)
      _ZF = v75 == v77;
    else
      _ZF = 1;
    if (_ZF)
    {
LABEL_109:
      if (v75 != v77)
      {
LABEL_112:
        v87 = v75;
        while (*(_DWORD *)v87 != 4)
        {
          v87 += 8;
          if (v87 == v77)
            goto LABEL_115;
        }
        v88 = *(unsigned __int16 *)(v87 + 4);
        goto LABEL_117;
      }
    }
    else
    {
      v84 = v75;
      while (*(_DWORD *)v84 != v82)
      {
        v84 += 8;
        if (v84 == v77)
          goto LABEL_109;
      }
      v85 = *(_WORD *)(v84 + 4);
      v86 = v295;
      *(_DWORD *)(v295 + 60) = v82;
      *(_WORD *)(v86 + 64) = v85;
      *(_BYTE *)(v86 + 114) = 1;
      if (v75 != v77)
        goto LABEL_112;
    }
LABEL_115:
    v88 = 0xFFFF;
LABEL_117:
    v89 = v295;
    *(_DWORD *)(v295 + 192) = v88;
    v234 = v89;
    v238 = v89;
    if (v75)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 40))(v70, v75, v78 - v75);
    if (SBYTE7(v286) < 0)
      (*(void (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)&v286 + 1) + 40))(*((_QWORD *)&v286 + 1), __len[0], v286 & 0x7FFFFFFFFFFFFFFFLL);
    v18 = v237;
    goto LABEL_122;
  }
  v234 = 0u;
  v238 = 0u;
LABEL_122:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v273);
  objc_msgSend(v18, "etaText", (_QWORD)v234);
LABEL_123:
  v90 = (id)objc_claimAutoreleasedReturnValue();
  v296[0] = 0;
  v92 = (VKLabelNavArtworkCache *)v90;
  if ((_QWORD)v234)
    v93 = (NSString *)md::LabelImageKey::hash((md::LabelImageKey *)v234);
  else
    v93 = 0;
  RoadSignKey = VKLabelNavArtworkCache::getRoadSignKey(v92, v93, (double *)v251, (const RoadSignMetrics *)&v239, (const md::RoadSignTextMetrics *)&v257, v91);

  v296[0] = RoadSignKey;
  v95 = geo::LRUPolicy<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>>::get(*a7 + 48, *(_QWORD *)(*a7 + 8), *(_QWORD *)(*a7 + 16), RoadSignKey);
  if (*a7 + 48 != v95)
  {
    v96 = *(id *)(v95 + 32);
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
    if (v96)
      v98 = v96;
    else
      v98 = 0;
    goto LABEL_179;
  }
  v295 = 0uLL;
  if ((_QWORD)v234)
  {
    v99 = md::LabelImageKey::hash((md::LabelImageKey *)v234);
    v100 = v99;
    v101 = (_QWORD *)a7[1];
    v102 = v101 + 6;
    v103 = (int8x8_t)v101[2];
    if (v103)
    {
      v104 = (uint8x8_t)vcnt_s8(v103);
      v104.i16[0] = vaddlv_u8(v104);
      if (v104.u32[0] > 1uLL)
      {
        v105 = v99;
        if (v99 >= *(_QWORD *)&v103)
          v105 = v99 % *(_QWORD *)&v103;
      }
      else
      {
        v105 = (*(_QWORD *)&v103 - 1) & v99;
      }
      v106 = *(_QWORD **)(v101[1] + 8 * v105);
      if (v106)
      {
        v107 = (_QWORD *)*v106;
        if (v107)
        {
          if (v104.u32[0] < 2uLL)
          {
            v108 = *(_QWORD *)&v103 - 1;
            while (1)
            {
              v110 = v107[1];
              if (v110 == v99)
              {
                if (v107[2] == v99)
                  goto LABEL_152;
              }
              else if ((v110 & v108) != v105)
              {
                goto LABEL_155;
              }
              v107 = (_QWORD *)*v107;
              if (!v107)
                goto LABEL_155;
            }
          }
          do
          {
            v109 = v107[1];
            if (v109 == v99)
            {
              if (v107[2] == v99)
              {
LABEL_152:
                v102 = (uint64_t *)v101[7];
                v111 = (uint64_t *)v107[3];
                if (v102 != v111)
                {
                  v112 = (uint64_t *)v111[1];
                  if (v112 != v102)
                  {
                    v113 = *v111;
                    *(_QWORD *)(v113 + 8) = v112;
                    *(_QWORD *)v111[1] = v113;
                    v114 = *v102;
                    *(_QWORD *)(v114 + 8) = v111;
                    *v111 = v114;
                    *v102 = (uint64_t)v111;
                    v111[1] = (uint64_t)v102;
                    v102 = (uint64_t *)v101[7];
                    v101 = (_QWORD *)a7[1];
                  }
                }
                break;
              }
            }
            else
            {
              if (v109 >= *(_QWORD *)&v103)
                v109 %= *(_QWORD *)&v103;
              if (v109 != v105)
                break;
            }
            v107 = (_QWORD *)*v107;
          }
          while (v107);
        }
      }
    }
LABEL_155:
    if (v101 + 6 != v102)
    {
      v116 = v102[3];
      v115 = v102[4];
      if (v115)
      {
        v117 = (unint64_t *)(v115 + 8);
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      *(_QWORD *)&v295 = v116;
      *((_QWORD *)&v295 + 1) = v115;
      goto LABEL_160;
    }
    md::LabelImageLoader::loadIconImage((grl::Allocator *)&v271, a7[4], &v238);
    v131 = v271;
    if (v271)
    {
      v132 = (char *)operator new(0xC8uLL);
      *((_QWORD *)v132 + 1) = 0;
      v133 = (unint64_t *)(v132 + 8);
      *((_QWORD *)v132 + 2) = 0;
      *(_QWORD *)v132 = &off_1E42DCB68;
      *((_QWORD *)v132 + 3) = &off_1E42AF880;
      *((_QWORD *)v132 + 4) = &off_1E42B5430;
      *((_QWORD *)v132 + 5) = 0;
      *(_OWORD *)(v132 + 56) = v234;
      if (*((_QWORD *)&v234 + 1))
      {
        v134 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
      }
      *(_OWORD *)(v132 + 72) = xmmword_19FFB2E30;
      *(_OWORD *)(v132 + 88) = xmmword_19FFB2E30;
      *((_QWORD *)v132 + 13) = 0;
      *((_QWORD *)v132 + 14) = 0;
      *((_QWORD *)v132 + 15) = v131 + 136;
      *((_QWORD *)v132 + 16) = v131 + 24;
      *((_QWORD *)v132 + 17) = 0;
      *((_QWORD *)v132 + 18) = 0;
      *((_QWORD *)v132 + 19) = 0;
      *((_QWORD *)v132 + 20) = 1065353216;
      v132[168] = 0;
      *((_QWORD *)v132 + 3) = &off_1E428FBF0;
      v136 = __p.__r_.__value_.__r.__words[0];
      *((_QWORD *)v132 + 22) = v131;
      *((_QWORD *)v132 + 23) = v136;
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      v132[192] = 0;
      *((_QWORD *)v132 + 3) = &off_1E429DE78;
      atomic_store(1u, (unsigned __int8 *)v132 + 168);
      *(_QWORD *)&v295 = v132 + 24;
      *((_QWORD *)&v295 + 1) = v132;
      v139 = a7[1];
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)(v132 + 24);
      __sz.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
      do
        v140 = __ldxr(v133);
      while (__stxr(v140 + 1, v133));
      *(_QWORD *)&v273 = v132 + 24;
      *((_QWORD *)&v273 + 1) = v132;
      do
        v141 = __ldxr(v133);
      while (__stxr(v141 + 1, v133));
    }
    else
    {
      v139 = a7[1];
      *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = 0uLL;
      v273 = 0uLL;
    }
    v142 = (_QWORD *)(v139 + 8);
    v143 = *(int8x8_t *)(v139 + 16);
    if (v143)
    {
      v144 = (uint8x8_t)vcnt_s8(v143);
      v144.i16[0] = vaddlv_u8(v144);
      if (v144.u32[0] > 1uLL)
      {
        v145 = v100;
        if (v100 >= *(_QWORD *)&v143)
          v145 = v100 % *(_QWORD *)&v143;
      }
      else
      {
        v145 = (*(_QWORD *)&v143 - 1) & v100;
      }
      v146 = *(_QWORD ***)(*v142 + 8 * v145);
      if (v146)
      {
        v147 = *v146;
        if (*v146)
        {
          if (v144.u32[0] < 2uLL)
          {
            v148 = *(_QWORD *)&v143 - 1;
            while (1)
            {
              v150 = v147[1];
              if (v150 == v100)
              {
                if (v147[2] == v100)
                  goto LABEL_224;
              }
              else if ((v150 & v148) != v145)
              {
                goto LABEL_231;
              }
              v147 = (_QWORD *)*v147;
              if (!v147)
                goto LABEL_231;
            }
          }
          do
          {
            v149 = v147[1];
            if (v149 == v100)
            {
              if (v147[2] == v100)
              {
LABEL_224:
                v151 = (uint64_t *)v147[3];
                v152 = *v151;
                *(_QWORD *)(v152 + 8) = v151[1];
                *(_QWORD *)v151[1] = v152;
                --*(_QWORD *)(v139 + 64);
                v153 = (std::__shared_weak_count *)v151[4];
                if (v153)
                {
                  v154 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v155 = __ldaxr(v154);
                  while (__stlxr(v155 - 1, v154));
                  if (!v155)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                operator delete(v151);
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__len, (_QWORD *)(v139 + 8), v147);
                if (__len[0])
                  operator delete((void *)__len[0]);
                break;
              }
            }
            else
            {
              if (v149 >= *(_QWORD *)&v143)
                v149 %= *(_QWORD *)&v143;
              if (v149 != v145)
                break;
            }
            v147 = (_QWORD *)*v147;
          }
          while (v147);
        }
      }
    }
LABEL_231:
    v156 = (char *)operator new(0x28uLL);
    v157 = v156;
    v158 = v139 + 48;
    v160 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
    v159 = v273;
    *((_QWORD *)v156 + 2) = v100;
    *(_OWORD *)(v156 + 24) = __PAIR128__((unint64_t)v160, v159);
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    *(_QWORD *)v156 = v158;
    v163 = *(_QWORD **)(v139 + 56);
    *((_QWORD *)v156 + 1) = v163;
    *v163 = v156;
    v164 = *(_QWORD *)(v139 + 64) + 1;
    *(_QWORD *)(v139 + 56) = v156;
    *(_QWORD *)(v139 + 64) = v164;
    v165 = *(_QWORD *)(v139 + 16);
    if (v165)
    {
      v166 = (uint8x8_t)vcnt_s8((int8x8_t)v165);
      v166.i16[0] = vaddlv_u8(v166);
      if (v166.u32[0] > 1uLL)
      {
        v131 = v100;
        if (v100 >= v165)
          v131 = v100 % v165;
      }
      else
      {
        v131 = (v165 - 1) & v100;
      }
      v167 = *(_QWORD **)(*v142 + 8 * v131);
      if (v167)
      {
        v168 = (_QWORD *)*v167;
        if (v168)
        {
          if (v166.u32[0] < 2uLL)
          {
            while (1)
            {
              v170 = v168[1];
              if (v170 == v100)
              {
                if (v168[2] == v100)
                  goto LABEL_322;
              }
              else if ((v170 & (v165 - 1)) != v131)
              {
                goto LABEL_255;
              }
              v168 = (_QWORD *)*v168;
              if (!v168)
                goto LABEL_255;
            }
          }
          do
          {
            v169 = v168[1];
            if (v169 == v100)
            {
              if (v168[2] == v100)
                goto LABEL_322;
            }
            else
            {
              if (v169 >= v165)
                v169 %= v165;
              if (v169 != v131)
                break;
            }
            v168 = (_QWORD *)*v168;
          }
          while (v168);
        }
      }
    }
LABEL_255:
    v171 = operator new(0x20uLL);
    *v171 = 0;
    v171[1] = v100;
    v171[2] = v100;
    v171[3] = v157;
    v172 = (float)(unint64_t)(*(_QWORD *)(v139 + 32) + 1);
    v173 = *(float *)(v139 + 40);
    if (v165 && (float)(v173 * (float)v165) >= v172)
    {
LABEL_312:
      v196 = (_QWORD *)*v142;
      v197 = *(_QWORD **)(*v142 + 8 * v131);
      if (v197)
      {
        *v171 = *v197;
      }
      else
      {
        *v171 = *(_QWORD *)(v139 + 24);
        *(_QWORD *)(v139 + 24) = v171;
        v196[v131] = v139 + 24;
        if (!*v171)
          goto LABEL_321;
        v198 = *(_QWORD *)(*v171 + 8);
        if ((v165 & (v165 - 1)) != 0)
        {
          if (v198 >= v165)
            v198 %= v165;
        }
        else
        {
          v198 &= v165 - 1;
        }
        v197 = (_QWORD *)(*v142 + 8 * v198);
      }
      *v197 = v171;
LABEL_321:
      ++*(_QWORD *)(v139 + 32);
      v160 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
LABEL_322:
      if (v160)
      {
        v199 = (unint64_t *)&v160->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          v201 = v160;
LABEL_342:
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      while (1)
      {
        v208 = *(_QWORD *)(v139 + 64);
        if (v208 <= *(_QWORD *)v139)
          break;
        v209 = *(uint64_t **)v158;
        v210 = *(_QWORD *)(*(_QWORD *)v158 + 16);
        v211 = *(std::__shared_weak_count **)(*(_QWORD *)v158 + 32);
        if (v211)
        {
          v212 = (unint64_t *)&v211->__shared_owners_;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
          v209 = *(uint64_t **)(v139 + 48);
          v214 = (std::__shared_weak_count *)v209[4];
          v208 = *(_QWORD *)(v139 + 64);
        }
        else
        {
          v214 = 0;
        }
        v215 = *v209;
        *(_QWORD *)(v215 + 8) = v209[1];
        *(_QWORD *)v209[1] = v215;
        *(_QWORD *)(v139 + 64) = v208 - 1;
        if (v214)
        {
          v216 = (unint64_t *)&v214->__shared_owners_;
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
          }
        }
        operator delete(v209);
        v218 = *(int8x8_t *)(v139 + 16);
        if (v218)
        {
          v219 = (uint8x8_t)vcnt_s8(v218);
          v219.i16[0] = vaddlv_u8(v219);
          if (v219.u32[0] > 1uLL)
          {
            v220 = v210;
            if (v210 >= *(_QWORD *)&v218)
              v220 = v210 % *(_QWORD *)&v218;
          }
          else
          {
            v220 = (*(_QWORD *)&v218 - 1) & v210;
          }
          v221 = *(_QWORD ***)(*v142 + 8 * v220);
          if (v221)
          {
            v222 = *v221;
            if (*v221)
            {
              if (v219.u32[0] < 2uLL)
              {
                v223 = *(_QWORD *)&v218 - 1;
                while (1)
                {
                  v225 = v222[1];
                  if (v225 == v210)
                  {
                    if (v222[2] == v210)
                      goto LABEL_375;
                  }
                  else if ((v225 & v223) != v220)
                  {
                    goto LABEL_377;
                  }
                  v222 = (_QWORD *)*v222;
                  if (!v222)
                    goto LABEL_377;
                }
              }
              do
              {
                v224 = v222[1];
                if (v224 == v210)
                {
                  if (v222[2] == v210)
                  {
LABEL_375:
                    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__len, (_QWORD *)(v139 + 8), v222);
                    if (__len[0])
                      operator delete((void *)__len[0]);
                    break;
                  }
                }
                else
                {
                  if (v224 >= *(_QWORD *)&v218)
                    v224 %= *(_QWORD *)&v218;
                  if (v224 != v220)
                    break;
                }
                v222 = (_QWORD *)*v222;
              }
              while (v222);
            }
          }
        }
LABEL_377:
        if (v211)
        {
          v226 = (unint64_t *)&v211->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            v201 = v211;
            goto LABEL_342;
          }
        }
      }
      v228 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
      if (__sz.__r_.__value_.__l.__size_)
      {
        v229 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
        }
      }
      v231 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v232 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
        do
          v233 = __ldaxr(v232);
        while (__stlxr(v233 - 1, v232));
        if (!v233)
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
        }
      }
      goto LABEL_160;
    }
    v174 = 1;
    if (v165 >= 3)
      v174 = (v165 & (v165 - 1)) != 0;
    v175 = v174 | (2 * v165);
    v176 = vcvtps_u32_f32(v172 / v173);
    if (v175 <= v176)
      prime = v176;
    else
      prime = v175;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v165 = *(_QWORD *)(v139 + 16);
    }
    if (prime <= v165)
    {
      if (prime >= v165)
        goto LABEL_307;
      v189 = vcvtps_u32_f32((float)*(unint64_t *)(v139 + 32) / *(float *)(v139 + 40));
      if (v165 < 3 || (v190 = (uint8x8_t)vcnt_s8((int8x8_t)v165), v190.i16[0] = vaddlv_u8(v190), v190.u32[0] > 1uLL))
      {
        v189 = std::__next_prime(v189);
      }
      else
      {
        v191 = 1 << -(char)__clz(v189 - 1);
        if (v189 >= 2)
          v189 = v191;
      }
      if (prime <= v189)
        prime = v189;
      if (prime >= v165)
        goto LABEL_307;
      if (!prime)
      {
        v195 = (_QWORD *)*v142;
        *v142 = 0;
        if (v195)
          operator delete(v195);
        *(_QWORD *)(v139 + 16) = 0;
        goto LABEL_307;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v178 = operator new(8 * prime);
    v179 = (_QWORD *)*v142;
    *v142 = v178;
    if (v179)
      operator delete(v179);
    v180 = 0;
    *(_QWORD *)(v139 + 16) = prime;
    do
      *(_QWORD *)(*v142 + 8 * v180++) = 0;
    while (prime != v180);
    v182 = v139 + 24;
    v181 = *(_QWORD **)(v139 + 24);
    if (!v181)
    {
LABEL_307:
      v165 = *(_QWORD *)(v139 + 16);
      if ((v165 & (v165 - 1)) != 0)
      {
        if (v100 >= v165)
          v131 = v100 % v165;
        else
          v131 = v100;
      }
      else
      {
        v131 = (v165 - 1) & v100;
      }
      goto LABEL_312;
    }
    v183 = v181[1];
    v184 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v185 = v183 & v184;
      *(_QWORD *)(*v142 + 8 * v185) = v182;
      while (1)
      {
        v186 = (_QWORD *)*v181;
        if (!*v181)
          break;
        v187 = v186[1] & v184;
        if (v187 == v185)
        {
          v181 = (_QWORD *)*v181;
        }
        else if (*(_QWORD *)(*v142 + 8 * v187))
        {
          *v181 = *v186;
          v188 = 8 * v187;
          *v186 = **(_QWORD **)(*v142 + v188);
          **(_QWORD **)(*v142 + v188) = v186;
        }
        else
        {
          *(_QWORD *)(*v142 + 8 * v187) = v181;
          v181 = v186;
          v185 = v187;
        }
      }
      goto LABEL_307;
    }
    if (v183 >= prime)
      v183 %= prime;
    *(_QWORD *)(*v142 + 8 * v183) = v182;
    v192 = (_QWORD *)*v181;
    if (!*v181)
      goto LABEL_307;
    while (1)
    {
      v194 = v192[1];
      if (v194 >= prime)
        v194 %= prime;
      if (v194 != v183)
      {
        if (!*(_QWORD *)(*v142 + 8 * v194))
        {
          *(_QWORD *)(*v142 + 8 * v194) = v181;
          goto LABEL_293;
        }
        *v181 = *v192;
        v193 = 8 * v194;
        *v192 = **(_QWORD **)(*v142 + v193);
        **(_QWORD **)(*v142 + v193) = v192;
        v192 = v181;
      }
      v194 = v183;
LABEL_293:
      v181 = v192;
      v192 = (_QWORD *)*v192;
      v183 = v194;
      if (!v192)
        goto LABEL_307;
    }
  }
LABEL_160:
  v119 = a7[2];
  v291 = v254;
  v292 = v255;
  v293 = *(_OWORD *)v256;
  v294 = *(_OWORD *)&v256[16];
  v287 = *(_OWORD *)&v251[32];
  v288 = *(_OWORD *)v252;
  v289 = *(_OWORD *)&v252[16];
  v290 = v253;
  *(_OWORD *)__len = *(_OWORD *)v251;
  v286 = *(_OWORD *)&v251[16];
  v273 = v239;
  v274 = v240;
  v275 = v241;
  v276 = v242;
  v279 = v245;
  if (SHIBYTE(v244) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v277, (void *)v243, *((unint64_t *)&v243 + 1));
  }
  else
  {
    v277 = v243;
    v278 = v244;
  }
  v282 = v248;
  if (SHIBYTE(v247) < 0)
  {
    v18 = v237;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v280, (void *)v246, *((unint64_t *)&v246 + 1));
  }
  else
  {
    v280 = v246;
    v281 = v247;
    v18 = v237;
  }
  v283 = v249;
  v284 = v250;
  v120 = a7[6];
  v271 = a7[5];
  __p.__r_.__value_.__r.__words[0] = v120;
  if (v120)
  {
    v121 = (unint64_t *)(v120 + 16);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  md::RoadSignArtworkGenerator::generateRoadSignArtwork(v119, v92, (uint64_t)__len, &v273, (uint64_t)&v257, (double *)&v295, &v271);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p.__r_.__value_.__r.__words[0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v281) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v282 + 40))(v282, v280, v281 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v278) & 0x80000000) == 0)
      goto LABEL_173;
  }
  else if ((SHIBYTE(v278) & 0x80000000) == 0)
  {
    goto LABEL_173;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v279 + 40))(v279, v277, v278 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_173:
  v124 = v123;
  v125 = *a7;
  v98 = v124;
  geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>::insert(v125, v296, v98);

  v126 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
  if (*((_QWORD *)&v295 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  RoadSignKey = v296[0];
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
LABEL_179:
  *a1 = v98;
  a1[1] = RoadSignKey;

  if (!v97)
    goto LABEL_183;
  v129 = (unint64_t *)&v97->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
    std::__shared_weak_count::__release_weak(v97);
    if ((SHIBYTE(v247) & 0x80000000) == 0)
    {
LABEL_184:
      if ((SHIBYTE(v244) & 0x80000000) == 0)
        goto LABEL_185;
      goto LABEL_16;
    }
  }
  else
  {
LABEL_183:
    if ((SHIBYTE(v247) & 0x80000000) == 0)
      goto LABEL_184;
  }
LABEL_15:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v248 + 40))(v248, v246, v247 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v244) < 0)
LABEL_16:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v245 + 40))(v245, v243, v244 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_185:

}

void std::__shared_ptr_pointer<md::NavRouteEta *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRouteEta>,std::allocator<md::NavRouteEta>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::NavRouteEta *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRouteEta>,std::allocator<md::NavRouteEta>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19FF01548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t *v10;
  uint64_t v12;

  v12 = *v10;
  if (*v10)
  {
    v10[1] = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[3] + 40))(v10[3], v12, v10[2] - v12);
  }

  _Unwind_Resume(a1);
}

void sub_19FF01B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (a8)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a11 + 40))(a11, a8, a10 - a8);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 - 96);

  _Unwind_Resume(a1);
}

void md::NavContext::styleQueryForFeatureAttributes(md::NavContext *this, GEOFeatureStyleAttributes *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15[3];
  uint64_t v16;

  v5 = a3;
  v6 = v5;
  v7 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    objc_msgSend(v5, "featureStyleAttributesPtr");
    v8 = v13;
  }
  else
  {
    v8 = 0uLL;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  v14 = v8;
  v9 = *(_QWORD *)(v7 + 336);
  md::createFeatureAttributeSet((gss::Allocator *)v15, (uint64_t *)&v14);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)this, (uint64_t *)(v9 + 184), v15, 0);
  if (v15[0])
  {
    v15[1] = v15[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v15[0], v15[2] - v15[0]);
  }
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

}

void sub_19FF01CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TrafficIncidentIconLabelPart::~TrafficIncidentIconLabelPart(md::TrafficIncidentIconLabelPart *this)
{
  *(_QWORD *)this = off_1E42A5EA8;
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A5EA8;
  if (*((char *)this + 791) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), *((_QWORD *)this + 96), *((_QWORD *)this + 98) & 0x7FFFFFFFFFFFFFFFLL);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::TrafficIncidentIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 40))(mdm::Allocator::instance(void)::alloc, this, 824);
}

float md::TrafficIncidentIconLabelPart::updateWithStyle(md::TrafficIncidentIconLabelPart *this, md::LabelManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  float result;

  md::ImageLabelPart::updateWithStyle(this, a2);
  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(unsigned int *)(v3 + 48);
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(v3 + 1240));
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 552))(v4, v5, 0, v3 & 1, 0);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 296);
  if (!v8)
  {
    v9 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v6, 0);
    v8 = *v9;
    *(_QWORD *)(v7 + 296) = *v9;
  }
  result = *(float *)(v8 + 24);
  *((float *)this + 143) = result;
  return result;
}

uint64_t md::TrafficIncidentIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v5 = (unsigned __int8 *)(a1 + 768);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

uint64_t md::TrafficIncidentIconLabelPart::debugString@<X0>(md::TrafficIncidentIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *v29[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v24 = v4 + 24;
  v32[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v31 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"TrafficIncident", 15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"\n  ", 3);
  md::IconLabelPart::debugString(this, __p);
  if ((v23 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v11, v12);
  if ((char)v23 < 0)
  {
    operator delete(__p[0]);
    v13 = v31;
    if ((v31 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v15 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v15 = v28;
    }
    v16 = (const void **)&v27;
    goto LABEL_16;
  }
  v13 = v31;
  if ((v31 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v13 & 8) == 0)
  {
    v14 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  v16 = (const void **)v26;
  v15 = v26[2];
LABEL_16:
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_23;
  }
  a2[23] = v14;
  if (v14)
LABEL_23:
    memmove(a2, v17, v14);
LABEL_24:
  a2[v14] = 0;
  v24 = *v6;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v6[3];
  v25 = v10 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void sub_19FF02214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::unique_ptr<ggl::PolygonSolidFill::MeshPipelineSetup>,std::unique_ptr<ggl::RenderItem>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *((_QWORD *)v3 - 2);
        *((_QWORD *)v3 - 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1FC0;
  return result;
}

int64x2_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Shadowed Stroke";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1F78;
  return result;
}

int64x2_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Coastline Stencile";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Glow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D73E8;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1F30;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_3>,ggl::Glow::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 144);
  v5 = *(std::__shared_weak_count **)(v1 + 152);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BB9A8;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2198;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE54DC88, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Glow::Style::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9710;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::Glow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Glow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9GlowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7CE8;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1EE8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::GlowAlpha::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count **v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v39;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v5 = v3 + 1;
  ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v6 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  ggl::BufferData::BufferData((uint64_t)&v6[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v6[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v8 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v8->__shared_owners_ = 0;
  v9 = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DD8;
  v39 = v8 + 1;
  ggl::BufferData::BufferData((uint64_t)&v8[1], qword_1EE566768, 2, 1, 6, 1);
  v8[9].__shared_owners_ = (uint64_t)ggl::GlowAlpha::Glow::reflection(void)::reflection;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9F90;
  v10 = *(_QWORD *)(v1 + 128);
  v11 = *(std::__shared_weak_count **)(v1 + 136);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    v13 = v6 + 1;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    ggl::PipelineSetup::PipelineSetup(v2, v10, (uint64_t)v11);
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v10, 0);
    v13 = v6 + 1;
  }
  *v2 = &off_1E42BD008;
  v17 = (std::__shared_weak_count **)v2[8];
  *v17 = v5;
  v17[1] = 0;
  v18 = (std::__shared_weak_count **)v2[20];
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = v18[1];
  *v18 = v5;
  v18[1] = v3;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v2[8];
  *(_QWORD *)(v23 + 16) = v13;
  *(_QWORD *)(v23 + 24) = 0;
  v24 = v2[20];
  do
    v25 = __ldxr(v7);
  while (__stxr(v25 + 1, v7));
  v26 = *(std::__shared_weak_count **)(v24 + 24);
  *(_QWORD *)(v24 + 16) = v13;
  *(_QWORD *)(v24 + 24) = v6;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v2[8];
  *(_QWORD *)(v29 + 32) = v39;
  *(_QWORD *)(v29 + 40) = 0;
  v30 = v2[20];
  do
    v31 = __ldxr(v9);
  while (__stxr(v31 + 1, v9));
  v32 = *(std::__shared_weak_count **)(v30 + 40);
  *(_QWORD *)(v30 + 32) = v39;
  *(_QWORD *)(v30 + 40) = v8;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  do
    v35 = __ldaxr(v9);
  while (__stlxr(v35 - 1, v9));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  do
    v36 = __ldaxr(v7);
  while (__stlxr(v36 - 1, v7));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_19FF02C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v16;

  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 - 1, v12));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  MEMORY[0x1A1AF4E00](v10, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GlowAlpha::Glow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonShadowedStroke23ShadowPathPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6E90;
  return result;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1EA0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::PolygonShadowedStroke::ShadowPathPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 192);
  v5 = *(std::__shared_weak_count **)(v1 + 200);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42BAD90;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1F30;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE547D48, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonShadowedStroke::ShadowPath::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B95B0;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonShadowedStroke::ShadowPath>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1E58;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(std::__shared_weak_count **)(v1 + 184);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B5D98;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FE0;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE571CC8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8C90;
  v13 = v3[8];
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 40);
  *(_QWORD *)(v14 + 32) = v12;
  *(_QWORD *)(v14 + 40) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::CoastLineRenderResources::~CoastLineRenderResources(md::CoastLineRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    v3 = *((_QWORD *)this + 33);
    v4 = (void *)*((_QWORD *)this + 32);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (!v7)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v10)
      goto LABEL_21;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_21:
  v13 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v15)
    goto LABEL_29;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v18)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v18)
      goto LABEL_35;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_35:
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v21)
    goto LABEL_39;
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v24)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v24)
      goto LABEL_45;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_45:
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v31)
  {
    v32 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v31);
    MEMORY[0x1A1AF4E00](v32, 0x10A0C40D234DDC7);
  }
  v33 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v33)
  {
    v34 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v33);
    MEMORY[0x1A1AF4E00](v34, 0x10A0C40D234DDC7);
  }
  v35 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v44)
  {
    v45 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v44);
    MEMORY[0x1A1AF4E00](v45, 0x10A0C40D234DDC7);
  }
  v46 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v46)
  {
    v47 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v46);
    MEMORY[0x1A1AF4E00](v47, 0x10A0C40D234DDC7);
  }
  v48 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v48)
  {
    v49 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v48);
    MEMORY[0x1A1AF4E00](v49, 0x10A0C40D234DDC7);
  }
  v50 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v50)
  {
    v51 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v50);
    MEMORY[0x1A1AF4E00](v51, 0x10A0C40D234DDC7);
  }
}

void md::MultipleIconLabelPart::~MultipleIconLabelPart(md::MultipleIconLabelPart *this)
{
  *(_QWORD *)this = off_1E429B2D0;
  if (*((char *)this + 719) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 90) + 40))(*((_QWORD *)this + 90), *((_QWORD *)this + 87), *((_QWORD *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E429B2D0;
  if (*((char *)this + 719) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 90) + 40))(*((_QWORD *)this + 90), *((_QWORD *)this + 87), *((_QWORD *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::MultipleIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, this, 760);
}

uint64_t md::MultipleIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  float32x2_t *v61;
  float32x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;

  if (!*(_BYTE *)(a1 + 756))
    goto LABEL_105;
  v63 = a2;
  v68 = 0;
  {
    v59 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v59, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v69 = mdm::Allocator::instance(void)::alloc;
  v70 = 0;
  v67 = &v68;
  {
    v60 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = *(uint64_t **)(a1 + 576);
  v65 = *(uint64_t **)(a1 + 584);
  if (v12 == v65)
  {
    *(_BYTE *)(a1 + 756) = 0;
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v67, (uint64_t)v68);
    goto LABEL_104;
  }
  v61 = a3;
  v62 = a4;
  v13 = 0;
  v14 = 0;
  v66 = 0;
  v64 = mdm::Allocator::instance(void)::alloc;
  do
  {
    v15 = *v12;
    v16 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*v12 + 640) + 142));
    if ((v16 & 1) == 0)
    {
      if (v13)
        goto LABEL_100;
      std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v67, (uint64_t)v68);
      return 15;
    }
    v17 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v15 + 640) + 143));
    if ((v17 & 1) == 0)
    {
      if ((unint64_t)v14 < v66)
        goto LABEL_11;
      v21 = (v14 - v13) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        abort();
      v23 = v66 - (_QWORD)v13;
      if ((uint64_t)(v66 - (_QWORD)v13) >> 2 > v22)
        v22 = (uint64_t)(v66 - (_QWORD)v13) >> 2;
      if (v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, 8 * v24, 8);
        v26 = (char *)(v25 + 8 * v21);
        v66 = v25 + 8 * v24;
        if (v25)
          *(_QWORD *)v26 = v15;
      }
      else
      {
        v66 = 0;
        v26 = (char *)(8 * v21);
      }
      v35 = v26;
      if (v14 == v13)
        goto LABEL_51;
      v36 = v14 - v13 - 8;
      if (v36 < 0x138
        || &v26[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v26 - 8
        || &v14[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v14 - 8
        || (unint64_t)(v14 - v26) < 0x20)
      {
        v37 = v14;
        v35 = v26;
      }
      else
      {
        v39 = (v36 >> 3) + 1;
        v37 = &v14[-8 * (v39 & 0x3FFFFFFFFFFFFFFCLL)];
        v40 = v26 - 16;
        v41 = v14 - 16;
        v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
          *(_OWORD *)v40 = v43;
          v40 -= 32;
          v41 -= 32;
          v42 -= 4;
        }
        while (v42);
        v35 = &v26[-8 * (v39 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_51;
      }
      do
      {
        v38 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v35 - 1) = v38;
        v35 -= 8;
      }
      while (v37 != v13);
LABEL_51:
      v14 = v26 + 8;
      if (v13)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v64 + 40))(v64, v13, v23);
      v13 = v35;
      goto LABEL_7;
    }
    v18 = *(_QWORD *)(v15 + 640);
    v19 = atomic_load((unsigned __int8 *)(v18 + 143));
    if ((v19 & 1) != 0)
      v20 = *(id *)(v18 + 16);
    else
      v20 = 0;
    v27 = v68;
    v28 = &v68;
    v29 = &v68;
    if (v68)
    {
      v28 = &v68;
      while (1)
      {
        while (1)
        {
          v29 = (uint64_t **)v27;
          if ((objc_msgSend(v20, "compareTo:", v27[4], v61, v62) & 0x80000000) == 0)
            break;
          v27 = *v29;
          v28 = v29;
          if (!*v29)
            goto LABEL_44;
        }
        if ((objc_msgSend(v29[4], "compareTo:", v20) & 0x80000000) == 0)
          break;
        v28 = v29 + 1;
        v27 = v29[1];
        if (!v27)
          goto LABEL_44;
      }
      if (*v28)
      {

        if ((unint64_t)v14 < v66)
        {
LABEL_11:
          if (v14)
            *(_QWORD *)v14 = v15;
          v14 += 8;
          goto LABEL_7;
        }
        v30 = (v14 - v13) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          abort();
        v23 = v66 - (_QWORD)v13;
        if ((uint64_t)(v66 - (_QWORD)v13) >> 2 > v31)
          v31 = (uint64_t)(v66 - (_QWORD)v13) >> 2;
        if (v23 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, 8 * v32, 8);
          v26 = (char *)(v33 + 8 * v30);
          v66 = v33 + 8 * v32;
          if (v33)
            *(_QWORD *)v26 = v15;
        }
        else
        {
          v66 = 0;
          v26 = (char *)(8 * v30);
        }
        v35 = v26;
        if (v14 == v13)
          goto LABEL_51;
        v44 = v14 - v13 - 8;
        if (v44 < 0x138
          || &v26[-(v44 & 0xFFFFFFFFFFFFFFF8) - 8] > v26 - 8
          || &v14[-(v44 & 0xFFFFFFFFFFFFFFF8) - 8] > v14 - 8
          || (unint64_t)(v14 - v26) < 0x20)
        {
          v45 = v14;
          v35 = v26;
        }
        else
        {
          v47 = (v44 >> 3) + 1;
          v45 = &v14[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          v48 = v26 - 16;
          v49 = v14 - 16;
          v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *(_OWORD *)v49;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
            *(_OWORD *)v48 = v51;
            v48 -= 32;
            v49 -= 32;
            v50 -= 4;
          }
          while (v50);
          v35 = &v26[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_51;
        }
        do
        {
          v46 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v35 - 1) = v46;
          v35 -= 8;
        }
        while (v45 != v13);
        goto LABEL_51;
      }
    }
LABEL_44:
    v34 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, 40, 8);
    v34[4] = (uint64_t)v20;
    *v34 = 0;
    v34[1] = 0;
    v34[2] = (uint64_t)v29;
    *v28 = v34;
    if (*v67)
    {
      v67 = (uint64_t **)*v67;
      v34 = *v28;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v68, v34);
    ++v70;
LABEL_7:
    ++v12;
  }
  while (v12 != v65);
  *(_BYTE *)(a1 + 756) = 0;
  if (v13 != v14)
  {
    v53 = v13;
    while (1)
    {
      v54 = *(_QWORD *)v53;
      v55 = *(_QWORD **)(a1 + 584);
      v56 = *(_QWORD **)(a1 + 576);
      if (v56 != v55)
      {
        while (*v56 != v54)
        {
          if (++v56 == v55)
          {
            v56 = *(_QWORD **)(a1 + 584);
            break;
          }
        }
      }
      v57 = v56 + 1;
      if (v56 == v55 || v57 == v55)
      {
        if (v56 != v55)
          goto LABEL_97;
      }
      else
      {
        do
        {
          if (*v57 != v54)
            *v56++ = *v57;
          ++v57;
        }
        while (v57 != v55);
        if (v56 != *(_QWORD **)(a1 + 584))
        {
LABEL_97:
          *(_QWORD *)(a1 + 584) = v56;
          if (!v54)
            goto LABEL_81;
LABEL_80:
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
          goto LABEL_81;
        }
      }
      if (v54)
        goto LABEL_80;
LABEL_81:
      v53 += 8;
      if (v53 == v14)
      {
        if (v13)
          goto LABEL_100;
LABEL_103:
        std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v67, (uint64_t)v68);
        a3 = v61;
        a4 = v62;
LABEL_104:
        a2 = v63;
LABEL_105:
        if (*(_QWORD *)(a1 + 576) == *(_QWORD *)(a1 + 584))
          return 16;
        else
          return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
      }
    }
  }
  v13 = v14;
  if (!v14)
    goto LABEL_103;
LABEL_100:
  (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v64 + 40))(v64, v13, v66 - (_QWORD)v13);
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&v67, (uint64_t)v68);
  a3 = v61;
  a4 = v62;
  a2 = v63;
  if ((v16 & 1) != 0)
    goto LABEL_105;
  return 15;
}

void sub_19FF040E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, v16, a14 - v16);
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t md::MultipleIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (!a3)
    return 0;
  if (!*(_BYTE *)(a1 + 747))
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 48);
  LOBYTE(v7) = atomic_load((unsigned __int8 *)(v7 + 1240));
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v8 + 552))(v8, v9, 0, v7 & 1, 0);
  if ((md::LabelIconStyleMonitor::needsCrossfade((unsigned __int8 *)(a1 + 696), *v10, a4) & 1) != 0)
    return 1;
  v12 = *(_QWORD *)(a1 + 576);
  v13 = *(_QWORD *)(a1 + 584);
  if (v12 == v13)
    return 0;
  v14 = v12 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(v14 - 8) + 760))(*(_QWORD *)(v14 - 8), a2, 1, a4);
    if ((result & 1) != 0)
      break;
    v15 = v14 == v13;
    v14 += 8;
  }
  while (!v15);
  return result;
}

uint64_t md::MultipleIconLabelPart::debugCompositeClassName@<X0>(md::MultipleIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  void *v31[2];
  __int128 v32;
  int v33;
  uint64_t v34[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v34[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v7;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v9, &v27);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v26 = v4 + 24;
  v34[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v33 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)"MultipleIcons, ", 15);
  md::StackLabelPart::debugCompositeClassName(this, __p);
  if ((v25 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v12 = v25;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)v11, v12);
  if ((char)v25 < 0)
  {
    operator delete(__p[0]);
    if (!*((_DWORD *)this + 183))
      goto LABEL_15;
  }
  else if (!*((_DWORD *)this + 183))
  {
    goto LABEL_15;
  }
  if (*((_DWORD *)this + 188))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v26, (uint64_t)", multiPOI(", 11);
    v13 = (uint64_t *)std::ostream::operator<<();
    v14 = ")";
    v15 = 1;
  }
  else
  {
    v14 = ", multiPOI-fallback";
    v13 = &v26;
    v15 = 19;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
LABEL_15:
  if ((v33 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v17 = v30;
    }
    v18 = (const void **)&v29;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v16 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    v18 = (const void **)v28;
    v17 = v28[2];
  }
  v19 = *v18;
  v16 = v17 - (_QWORD)*v18;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v16;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_29;
  }
  a2[23] = v16;
  if (v16)
LABEL_29:
    memmove(a2, v19, v16);
LABEL_30:
  a2[v16] = 0;
  v26 = *v6;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v6[3];
  v27 = v10 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(v31[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v34);
}

void sub_19FF0449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *md::CompositeLabelPart::setPreviousStagingModelChainMatrix(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  result[5] = a2;
  v2 = (uint64_t *)result[72];
  for (i = (uint64_t *)result[73];
        v2 != i;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

_QWORD *md::CompositeLabelPart::setPreviousModelChainMatrix(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  result[6] = a2;
  v2 = (uint64_t *)result[72];
  for (i = (uint64_t *)result[73];
        v2 != i;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

_QWORD *md::CompositeLabelPart::setPreviousStagingModelChainTransform(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  result[7] = a2;
  v2 = (uint64_t *)result[72];
  for (i = (uint64_t *)result[73];
        v2 != i;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

_QWORD *md::CompositeLabelPart::setPreviousModelChainTransform(_QWORD *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  result[8] = a2;
  v2 = (uint64_t *)result[72];
  for (i = (uint64_t *)result[73];
        v2 != i;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::setInWorldSpace(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  *(_BYTE *)(this + 565) = a2;
  *(_BYTE *)(this + 566) = a3;
  v3 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v3 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7)
{
  _QWORD *v8;
  _QWORD *v9;
  __n128 v10;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  int8x16_t v18;
  _QWORD *v19;
  int8x16_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  __n128 v30;

  v8 = *(_QWORD **)(a1 + 576);
  v9 = *(_QWORD **)(a1 + 584);
  v10 = (__n128)xmmword_19FFB2E30;
  if (v8 == v9)
  {
    v15 = 37;
LABEL_11:
    v18 = (int8x16_t)v10;
    goto LABEL_12;
  }
  while (1)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)*v8 + 80))(*v8, a2, a3, a4, a5, a6, a7, v10);
    if ((_DWORD)v14 != 37)
      break;
    if (++v8 == v9)
    {
      v15 = 37;
      goto LABEL_7;
    }
  }
  v15 = v14;
LABEL_7:
  v10 = (__n128)xmmword_19FFB2E30;
  v16 = *(_QWORD ***)(a1 + 576);
  v17 = *(_QWORD ***)(a1 + 584);
  if (v16 == v17)
    goto LABEL_11;
  v10 = (__n128)xmmword_19FFB2E30;
  v18 = (int8x16_t)xmmword_19FFB2E30;
  do
  {
    v27 = v18;
    v29 = (int8x16_t)v10;
    v19 = *v16++;
    v20 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*v19 + 248))(v19);
    v21.i64[0] = v20->i64[0];
    v21.i64[1] = v27.i64[1];
    v22.i64[0] = v27.i64[0];
    v22.i64[1] = v20->i64[1];
    v18 = vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *v20, v27);
    v23 = v19[3];
    v21.i64[0] = *(_QWORD *)(v23 + 72);
    v21.i64[1] = v29.i64[1];
    v22.i64[0] = v29.i64[0];
    v22.i64[1] = *(_QWORD *)(v23 + 80);
    v10 = (__n128)vbslq_s8((int8x16_t)vcgtq_f32(v22, v21), *(int8x16_t *)(v23 + 72), v29);
  }
  while (v16 != v17);
LABEL_12:
  v24 = *(void **)(a1 + 232);
  v28 = v18;
  v30 = v10;
  if (v24)
  {
    free(v24);
    v18 = v28;
    v10 = v30;
    *(_QWORD *)(a1 + 232) = 0;
  }
  v25 = *(void **)(a1 + 240);
  if (v25)
  {
    free(v25);
    v18 = v28;
    v10 = v30;
    *(_QWORD *)(a1 + 240) = 0;
  }
  *(__n128 *)(a1 + 72) = v10;
  *(int8x16_t *)(a1 + 152) = v18;
  if (*(_BYTE *)(a1 + 565))
    *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  return v15;
}

uint64_t md::CompositeLabelPart::updateForDisplay(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::layoutForDisplay(_QWORD *a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4, _DWORD *a5, __n128 a6, int8x16_t a7, float32x4_t a8)
{
  _QWORD *v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t result;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int8x16_t *v20;
  float32x4_t v21;
  void *v22;
  void *v23;
  __n128 v24;

  v12 = (_QWORD *)a1[72];
  v13 = (_QWORD *)a1[73];
  v14 = (__n128)xmmword_19FFB2E30;
  if (v12 == v13)
  {
LABEL_7:
    v22 = (void *)a1[59];
    v24 = v14;
    if (v22)
    {
      free(v22);
      v14 = v24;
      a1[59] = 0;
    }
    v23 = (void *)a1[60];
    if (v23)
    {
      free(v23);
      v14 = v24;
      a1[60] = 0;
    }
    *(__n128 *)(a1 + 39) = v14;
    *((_DWORD *)a1 + 136) = *a5;
    *((_DWORD *)a1 + 137) = a5[1];
    *((_DWORD *)a1 + 130) = *a4;
    *((_DWORD *)a1 + 131) = a4[1];
    *((_DWORD *)a1 + 86) = *a4;
    a6.n128_u32[0] = a4[1];
    *((_DWORD *)a1 + 87) = a6.n128_u32[0];
    md::CollisionObject::setupShapeData((uint64_t)(a1 + 39), a6.n128_f64[0], *(double *)a7.i64, *(double *)a8.i64);
    if (*((_BYTE *)a1 + 565))
      a1[53] = (*(uint64_t (**)(_QWORD *))(*a1 + 144))(a1);
    md::CompositeLabelPart::updateAnimationForDisplay((md::CompositeLabelPart *)a1, a3);
    return 37;
  }
  else
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, md::LabelAnimator *, _DWORD *, _DWORD *, __n128, int8x16_t, float32x4_t, __n128))(*(_QWORD *)*v12 + 120))(*v12, a2, a3, a4, a5, a6, a7, a8, v14);
      if ((_DWORD)result != 37)
        break;
      if (++v12 == v13)
      {
        v17 = (uint64_t *)a1[72];
        v18 = (uint64_t *)a1[73];
        v14 = (__n128)xmmword_19FFB2E30;
        if (v17 != v18)
        {
          v14 = (__n128)xmmword_19FFB2E30;
          do
          {
            v19 = *v17++;
            v20 = (int8x16_t *)(*(_QWORD *)(v19 + 24) + 312);
            a6 = *(__n128 *)v20;
            v21.i64[0] = v20->i64[0];
            v21.i64[1] = v14.n128_i64[1];
            a8.i64[0] = v14.n128_u64[0];
            a8.i64[1] = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 320);
            a7 = (int8x16_t)vcgtq_f32(a8, v21);
            v14 = (__n128)vbslq_s8(a7, *v20, (int8x16_t)v14);
          }
          while (v17 != v18);
        }
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t md::CompositeLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;

  if (*(_BYTE *)(result + 608))
    a3 = *(float *)(result + 612);
  v5 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 128))(v7, a2, a3))
  {
    v7 = *v5++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::markActive(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::markInactive(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::clearLabelAnimationIDs(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  *(_BYTE *)(this + 564) = -1;
  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 192))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabelPart::isVisuallySimilar(md::CompositeLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v2 = *((_QWORD *)this + 73);
  v3 = *((_QWORD *)this + 72);
  if (v2 - v3 == *((_QWORD *)a2 + 73) - *((_QWORD *)a2 + 72))
  {
    if (v2 == v3)
      return 1;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v6);
      v8 = *(_QWORD *)(*((_QWORD *)a2 + 72) + 8 * v6);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
      if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 224))(v8))
        break;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
      if (!(_DWORD)result)
        return result;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, v8) & 1) == 0)
        break;
      ++v6;
      v3 = *((_QWORD *)this + 72);
      if (v6 >= (*((_QWORD *)this + 73) - v3) >> 3)
        return 1;
    }
  }
  return 0;
}

float md::CompositeLabelPart::pixelBoundsForDisplay(md::CompositeLabelPart *this)
{
  uint64_t *v1;
  uint64_t *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;

  v1 = (uint64_t *)*((_QWORD *)this + 72);
  v2 = (uint64_t *)*((_QWORD *)this + 73);
  if (v1 == v2)
    return 3.4028e38;
  v3 = 3.4028e38;
  v4 = -3.4028e38;
  v5 = -3.4028e38;
  v6 = 3.4028e38;
  do
  {
    v7 = *v1++;
    v6 = fminf((*(float (**)(uint64_t))(*(_QWORD *)v7 + 256))(v7), v6);
    v5 = fmaxf(v5, v8);
    v3 = fminf(v9, v3);
    v4 = fmaxf(v4, v10);
  }
  while (v1 != v2);
  return v6;
}

float md::CompositeLabelPart::pixelBoundsForStaging(md::CompositeLabelPart *this)
{
  uint64_t *v1;
  uint64_t *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;

  v1 = (uint64_t *)*((_QWORD *)this + 72);
  v2 = (uint64_t *)*((_QWORD *)this + 73);
  if (v1 == v2)
    return 3.4028e38;
  v3 = 3.4028e38;
  v4 = -3.4028e38;
  v5 = -3.4028e38;
  v6 = 3.4028e38;
  do
  {
    v7 = *v1++;
    v6 = fminf((*(float (**)(uint64_t))(*(_QWORD *)v7 + 264))(v7), v6);
    v5 = fmaxf(v5, v8);
    v3 = fminf(v9, v3);
    v4 = fmaxf(v4, v10);
  }
  while (v1 != v2);
  return v6;
}

uint64_t md::CompositeLabelPart::setRadialPosition(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 368))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::setPartRotation(uint64_t result, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t v17;

  v2 = *a2;
  *(float *)(result + 288) = *a2;
  v3 = a2[1];
  *(float *)(result + 292) = v3;
  v4 = *(float *)(result + 296);
  v5 = *(float *)(result + 300);
  v6 = v4 * v3;
  v7 = -(float)((float)(v5 * v3) - (float)(v4 * v2));
  *(float *)(result + 88) = v7;
  *(float *)(result + 92) = v6 + (float)(v5 * v2);
  *(_BYTE *)(result + 268) = fabsf(v7 + -1.0) > 0.000001;
  v8 = *a2;
  *(float *)(result + 528) = *a2;
  v9 = a2[1];
  *(float *)(result + 532) = v9;
  v10 = *(float *)(result + 536);
  v11 = *(float *)(result + 540);
  v12 = v10 * v9;
  v13 = -(float)((float)(v11 * v9) - (float)(v10 * v8));
  *(float *)(result + 328) = v13;
  *(float *)(result + 332) = v12 + (float)(v11 * v8);
  *(_BYTE *)(result + 508) = fabsf(v13 + -1.0) > 0.000001;
  v14 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v14 != i;
        result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v17 + 376))(v17, a2))
  {
    v17 = *v14++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::collidesWithItem(md::CompositeLabelPart *this, const md::LabelCollidableItem *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  _QWORD v12[3];

  if (*((_BYTE *)this + 630))
    return (*(uint64_t (**)(const md::LabelCollidableItem *, char *))(*(_QWORD *)a2 + 16))(a2, (char *)this + 72);
  v5 = (_QWORD *)*((_QWORD *)this + 72);
  v6 = (_QWORD *)*((_QWORD *)this + 73);
  if (v5 == v6)
    return 0;
  while (1)
  {
    v8 = *v5;
    v9 = (float32x2_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 248))(*v5);
    v10 = vmul_f32(vsub_f32(v9[1], *v9), (float32x2_t)0x3F0000003F000000);
    v11 = vadd_f32(v10, *v9);
    v12[0] = v10;
    v12[1] = v11;
    v12[2] = 1065353216;
    if (gm::OBRect<float>::intersectsUsingInset((float *)a2 + 2, (float *)v12)
      && ((*(uint64_t (**)(uint64_t, const md::LabelCollidableItem *, uint64_t))(*(_QWORD *)v8 + 456))(v8, a2, a3) & 1) != 0)
    {
      break;
    }
    if (++v5 == v6)
      return 0;
  }
  return 1;
}

uint64_t md::CompositeLabelPart::collidesWithObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (*((_BYTE *)this + 630))
    return md::LabelPart::collidesWithObject(this, a2);
  v4 = *((_QWORD *)this + 72);
  v5 = *((_QWORD *)this + 73);
  if (v4 == v5)
    return 0;
  v6 = v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, const md::CollisionObject *))(**(_QWORD **)(v6 - 8) + 840))(*(_QWORD *)(v6 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v6 == v5;
    v6 += 8;
  }
  while (!v7);
  return result;
}

uint64_t md::CompositeLabelPart::collidesWithDisplayObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (*((_BYTE *)this + 630))
    return md::LabelPart::collidesWithDisplayObject(this, a2);
  v4 = *((_QWORD *)this + 72);
  v5 = *((_QWORD *)this + 73);
  if (v4 == v5)
    return 0;
  v6 = v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, const md::CollisionObject *))(**(_QWORD **)(v6 - 8) + 848))(*(_QWORD *)(v6 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v6 == v5;
    v6 += 8;
  }
  while (!v7);
  return result;
}

uint64_t md::CompositeLabelPart::intersectsStagingFrustum(float32x2_t *a1, uint64_t a2)
{
  uint64_t result;
  float32x2_t v4;
  float32x2_t v5;
  uint64_t v6;
  BOOL v7;

  if (a1[78].i8[6])
  {
    if (a1[70].i8[5] && a1[70].i8[6])
      return md::CollisionObject::intersectsWorldFrustum(a1 + 39, a2);
    return 0;
  }
  v4 = a1[72];
  v5 = a1[73];
  if (*(_QWORD *)&v4 == *(_QWORD *)&v5)
    return 0;
  v6 = *(_QWORD *)&v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 - 8) + 856))(*(_QWORD *)(v6 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v6 == *(_QWORD *)&v5;
    v6 += 8;
  }
  while (!v7);
  return result;
}

uint64_t md::CompositeLabelPart::intersectsDisplayFrustum(float32x2_t *a1, uint64_t a2)
{
  uint64_t result;
  float32x2_t v4;
  float32x2_t v5;
  uint64_t v6;
  BOOL v7;

  if (a1[78].i8[6])
  {
    if (a1[70].i8[5])
      return md::CollisionObject::intersectsWorldFrustum(a1 + 39, a2);
    return 0;
  }
  v4 = a1[72];
  v5 = a1[73];
  if (*(_QWORD *)&v4 == *(_QWORD *)&v5)
    return 0;
  v6 = *(_QWORD *)&v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 - 8) + 864))(*(_QWORD *)(v6 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v6 == *(_QWORD *)&v5;
    v6 += 8;
  }
  while (!v7);
  return result;
}

uint64_t md::CompositeLabelPart::populateHoverBounds(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 520))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::hitPartAtPixel(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;

  v6 = *(_QWORD **)(a1 + 576);
  v7 = *(_QWORD **)(a1 + 584);
  if (v6 == v7)
    return 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float, float, float))(*(_QWORD *)*v6 + 632))(*v6, a2, a3, a4, a5, a6);
    if (result)
      break;
    if (++v6 == v7)
      return 0;
  }
  return result;
}

uint64_t md::CompositeLabelPart::hasSelectableParts(md::CompositeLabelPart *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)*((_QWORD *)this + 72);
  v2 = (_QWORD *)*((_QWORD *)this + 73);
  if (v1 == v2)
    return 0;
  while (1)
  {
    v3 = *v1;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 648))(*v1) & 1) != 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 640))(v3))
    {
      break;
    }
    if (++v1 == v2)
      return 0;
  }
  return 1;
}

uint64_t md::CompositeLabelPart::populateImageInfos(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 728))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::isTextVisible(md::CompositeLabelPart *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 72);
  v2 = *((_QWORD *)this + 73);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 744))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

void md::CompositeLabelPart::debugDraw(uint64_t **this, md::DebugConsole *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  md::LabelPart::debugDraw((md::LabelPart *)this, a2);
  if (!*((_BYTE *)this + 630))
  {
    v4 = this[72];
    v5 = this[73];
    while (v4 != v5)
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, md::DebugConsole *))(*(_QWORD *)v6 + 768))(v6, a2);
    }
  }
}

void md::CompositeLabelPart::debugDrawWorldForStaging(md::CompositeLabelPart *this, float64x2_t **a2, float32x2_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 630))
  {
    md::CollisionObject::worldDrawDebugHighlightWithContext((md::CompositeLabelPart *)((char *)this + 72), a2[54], a3);
  }
  else
  {
    v5 = (uint64_t *)*((_QWORD *)this + 72);
    v6 = (uint64_t *)*((_QWORD *)this + 73);
    while (v5 != v6)
    {
      v7 = *v5++;
      (*(void (**)(uint64_t, float64x2_t **, float32x2_t *))(*(_QWORD *)v7 + 776))(v7, a2, a3);
    }
  }
}

void md::CompositeLabelPart::debugDrawWorldForWorld(md::CompositeLabelPart *this, md::LabelManager *a2, float32x2_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if (*((_BYTE *)this + 630))
  {
    md::CollisionObject::worldDrawDebugHighlightWithContext((md::CompositeLabelPart *)((char *)this + 312), (float64x2_t *)((char *)a2 + 440), a3);
  }
  else
  {
    v5 = (uint64_t *)*((_QWORD *)this + 72);
    v6 = (uint64_t *)*((_QWORD *)this + 73);
    while (v5 != v6)
    {
      v7 = *v5++;
      (*(void (**)(uint64_t, md::LabelManager *, float32x2_t *))(*(_QWORD *)v7 + 784))(v7, a2, a3);
    }
  }
}

uint64_t md::CompositeLabelPart::debugString@<X0>(uint64_t **this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  void *p_p;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  unint64_t v36;
  void *v37[2];
  __int128 v38;
  int v39;
  uint64_t v40[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40[0] = MEMORY[0x1E0DE4FE0] + 64;
  v32 = v8;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v32 + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v10, &v33);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v32 = v6 + 24;
  v40[0] = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v33 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  v39 = 16;
  ((void (*)(void **__return_ptr, uint64_t **))(*this)[112])(&__p, this);
  if ((v31 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v31 & 0x80u) == 0)
    v13 = v31;
  else
    v13 = v30;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)p_p, v13);
  if ((char)v31 < 0)
    operator delete(__p);
  v14 = this[72];
  for (i = this[73]; v14 != i; ++v14)
  {
    v16 = *v14;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"\n ", 2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 792))(&__p, v16, a2);
    if ((v31 & 0x80u) == 0)
      v17 = &__p;
    else
      v17 = __p;
    if ((v31 & 0x80u) == 0)
      v18 = v31;
    else
      v18 = v30;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v17, v18);
    if ((char)v31 < 0)
      operator delete(__p);
  }
  if ((v39 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v38 + 1);
    v19 = v11;
    v20 = (uint64_t *)MEMORY[0x1E0DE4F60];
    if (*((_QWORD *)&v38 + 1) < v36)
    {
      *((_QWORD *)&v38 + 1) = v36;
      v22 = v36;
    }
    v23 = (const void **)&v35;
  }
  else
  {
    v19 = v11;
    v20 = (uint64_t *)MEMORY[0x1E0DE4F60];
    if ((v39 & 8) == 0)
    {
      v21 = 0;
      a3[23] = 0;
      goto LABEL_35;
    }
    v23 = (const void **)v34;
    v22 = v34[2];
  }
  v24 = *v23;
  v21 = v22 - (_QWORD)*v23;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v21;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_34;
  }
  a3[23] = v21;
  if (v21)
LABEL_34:
    memmove(a3, v24, v21);
LABEL_35:
  a3[v21] = 0;
  v32 = *v20;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v20[3];
  v33 = v19 + 16;
  if (SBYTE7(v38) < 0)
    operator delete(v37[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v40);
}

void sub_19FF057F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::populateDebugNode(uint64_t this, gdc::DebugTreeNode *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, gdc::DebugTreeNode *))(*(_QWORD *)v5 + 800))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::setRenderPass(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 576);
  for (i = *(uint64_t **)(result + 584);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 816))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabelPart::setRenderOrder(uint64_t this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 824))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

uint64_t md::CompositeLabelPart::partCollidesWithObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  float *v4;
  uint64_t result;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = (float *)(*(uint64_t (**)(md::CompositeLabelPart *))(*(_QWORD *)this + 248))(this);
  if (v4[2] <= *((float *)a2 + 20)
    || *v4 >= *((float *)a2 + 22)
    || v4[3] <= *((float *)a2 + 21)
    || v4[1] >= *((float *)a2 + 23))
  {
    LODWORD(result) = 0;
    v6 = (char *)this + 630;
    goto LABEL_12;
  }
  LODWORD(result) = (*(uint64_t (**)(md::CompositeLabelPart *, const md::CollisionObject *))(*(_QWORD *)this + 464))(this, a2);
  v6 = (char *)this + 630;
  if (*((_BYTE *)this + 630) || !(_DWORD)result)
    goto LABEL_12;
  v7 = (_QWORD *)*((_QWORD *)this + 72);
  v8 = (_QWORD *)*((_QWORD *)this + 73);
  if (v7 == v8)
  {
    LODWORD(result) = 1;
LABEL_12:
    if (*v6)
      return result;
    else
      return 0;
  }
  while (((*(uint64_t (**)(_QWORD, const md::CollisionObject *))(*(_QWORD *)*v7 + 464))(*v7, a2) & 1) == 0)
  {
    ++v7;
    LODWORD(result) = 1;
    if (v7 == v8)
      goto LABEL_12;
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partCollidesWithDisplayObject(md::CompositeLabelPart *this, const md::CollisionObject *a2)
{
  float *v3;
  uint64_t result;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (float *)*((_QWORD *)this + 3);
  if (v3[100] <= *((float *)a2 + 20)
    || v3[98] >= *((float *)a2 + 22)
    || v3[101] <= *((float *)a2 + 21)
    || v3[99] >= *((float *)a2 + 23))
  {
    LODWORD(result) = 0;
    v6 = (char *)this + 630;
    goto LABEL_12;
  }
  LODWORD(result) = (*(uint64_t (**)(md::CompositeLabelPart *, const md::CollisionObject *))(*(_QWORD *)this + 472))(this, a2);
  v6 = (char *)this + 630;
  if (*((_BYTE *)this + 630) || !(_DWORD)result)
    goto LABEL_12;
  v7 = (_QWORD *)*((_QWORD *)this + 72);
  v8 = (_QWORD *)*((_QWORD *)this + 73);
  if (v7 == v8)
  {
    LODWORD(result) = 1;
LABEL_12:
    if (*v6)
      return result;
    else
      return 0;
  }
  while (((*(uint64_t (**)(_QWORD, const md::CollisionObject *))(*(_QWORD *)*v7 + 472))(*v7, a2) & 1) == 0)
  {
    ++v7;
    LODWORD(result) = 1;
    if (v7 == v8)
      goto LABEL_12;
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partIntersectsStagingFrustum(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  if ((md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(*(_QWORD *)(a1 + 24) + 72), a2) & 1) == 0)
  {
    LODWORD(result) = 0;
    v5 = (_BYTE *)(a1 + 630);
LABEL_11:
    if (*v5)
      return result;
    else
      return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, a2);
  v5 = (_BYTE *)(a1 + 630);
  if (*(_BYTE *)(a1 + 630))
    v6 = 1;
  else
    v6 = (_DWORD)result == 0;
  if (v6)
    goto LABEL_11;
  v7 = *(_QWORD **)(a1 + 576);
  v8 = *(_QWORD **)(a1 + 584);
  if (v7 == v8)
  {
LABEL_9:
    LODWORD(result) = 1;
    goto LABEL_11;
  }
  while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 480))(*v7, a2) & 1) == 0)
  {
    if (++v7 == v8)
      goto LABEL_9;
  }
  return 1;
}

uint64_t md::CompositeLabelPart::partIntersectsDisplayFrustum(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  if ((md::CollisionObject::intersectsWorldFrustum((float32x2_t *)(*(_QWORD *)(a1 + 24) + 312), a2) & 1) == 0)
  {
    LODWORD(result) = 0;
    v5 = (_BYTE *)(a1 + 630);
LABEL_11:
    if (*v5)
      return result;
    else
      return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, a2);
  v5 = (_BYTE *)(a1 + 630);
  if (*(_BYTE *)(a1 + 630))
    v6 = 1;
  else
    v6 = (_DWORD)result == 0;
  if (v6)
    goto LABEL_11;
  v7 = *(_QWORD **)(a1 + 576);
  v8 = *(_QWORD **)(a1 + 584);
  if (v7 == v8)
  {
LABEL_9:
    LODWORD(result) = 1;
    goto LABEL_11;
  }
  while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 488))(*v7, a2) & 1) == 0)
  {
    if (++v7 == v8)
      goto LABEL_9;
  }
  return 1;
}

float md::CompositeLabelPart::updateAnimationForDisplay(md::CompositeLabelPart *this, md::LabelAnimator *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float32x2_t v4;
  float result;
  float32x2_t v6;

  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  if (*((_BYTE *)this + 616))
    *((_BYTE *)this + 616) = 0;
  if (a2)
  {
    v2 = (float32x2_t *)*((_QWORD *)a2 + 3);
    v3 = (float32x2_t *)*((_QWORD *)a2 + 4);
    if (0x8E38E38E38E38E39 * (((char *)v3 - (char *)v2) >> 4) <= *((unsigned __int8 *)this + 563))
    {
      if (v2 == v3 || !*((_BYTE *)a2 + 89))
        return result;
    }
    else
    {
      v2 += 18 * *((unsigned __int8 *)this + 563);
    }
    if (v2)
    {
      v4 = v2[9];
      if (v4)
      {
        result = fmaxf(fminf(v2[10].f32[0]+ (float)(*(float *)(**(_QWORD **)&v4 + 32 * *(unsigned int *)(*(_QWORD *)&v4 + 32) + 8)* (float)(v2[10].f32[1] - v2[10].f32[0])), 1.0), 0.0);
        *((_BYTE *)this + 608) = 1;
        *((float *)this + 153) = result;
      }
      v6 = v2[11];
      if (v6)
      {
        result = *(float *)(**(_QWORD **)&v6 + 32 * *(unsigned int *)(*(_QWORD *)&v6 + 32) + 8);
        *(float32x2_t *)((char *)this + 620) = vmla_n_f32(v2[12], vsub_f32(v2[13], v2[12]), result);
        *((_BYTE *)this + 616) = 1;
      }
    }
  }
  return result;
}

void md::buildTrafficMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, int8x8_t *a7, void *a8, uint64_t *a9, char a10, unsigned int a11)
{
  id v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  int v17;
  int32x2_t *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  gss::Allocator *v33;
  uint64_t v34;
  float v35;
  NSObject *v36;
  int32x2_t *v37;
  __int32 v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE *v51;
  void **v52;
  uint64_t v53;
  int v54;
  float v55;
  void **v56;
  float *v57;
  float *v58;
  unsigned int v59;
  __int128 v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  NSObject *v68;
  int32x2_t *v69;
  __int32 v70;
  void **v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  __n128 v75;
  float v76;
  int32x2_t *v77;
  __int32 v78;
  void **v79;
  BOOL v80;
  uint64_t v81;
  int v82;
  int32x2_t *v83;
  _QWORD *v84;
  id v85;
  unsigned int v86;
  char v87;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v100;
  _BYTE v103[4];
  int32x2_t v104;
  uint64_t v105;
  _BYTE v106[4];
  int32x2_t v107;
  void *v108[2];
  char v109;
  _BYTE v110[4];
  int32x2_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  _QWORD v114[3];
  uint64_t v115;
  __int128 v116;
  _BYTE v117[24];
  int32x2_t v118;
  uint8_t v119[4];
  void **v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE buf[22];
  __int16 v136;
  double v137[3];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *__p[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v13 = a8;
  v95 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(a1 + 144));
  v14 = geo::codec::VectorTile::linesCount(*(geo::codec::VectorTile **)(a1 + 144));
  if (v14)
  {
    v85 = v13;
    v15 = (_QWORD *)geo::codec::VectorTile::lineVertices(*(geo::codec::VectorTile **)(a1 + 144));
    v93 = *(_QWORD *)(a1 + 144);
    v94 = v15[4];
    v118 = (int32x2_t)0x3F80000000000000;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = a1;
    v84 = a5;
    v17 = objc_msgSend(v16, "showTrafficOffset");
    v18 = &v118;
    if (!v17)
      v18 = 0;
    v83 = v18;

    if (a6)
    {
      v89 = 0;
      v19 = 0;
      while (1)
      {
        v20 = (__int128 *)(a4 + 40 * v19);
        v21 = v20[1];
        v116 = *v20;
        *(_OWORD *)v117 = v21;
        *(_QWORD *)&v117[16] = *((_QWORD *)v20 + 4);
        *(_QWORD *)&v22 = v116;
        if (v14 <= v116)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v44 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_ERROR, "Skeleton traffic tile tried to access line outside of feature index range, likely need new chain mapping for traffic server", buf, 2u);
          }

          goto LABEL_7;
        }
        v23 = v95 + 168 * v116;
        *(_QWORD *)&v24 = DWORD1(v116);
        v25 = (uint64_t *)(v94 + 16 * (DWORD1(v116) + *(_DWORD *)(v23 + 96)));
        v26 = *v25;
        v100 = v25[1];
        v27 = v15[1];
        v28 = v15[3];
        if (v28)
          v29 = v28 + 4 * v26;
        else
          v29 = 0;
        v30 = *(_QWORD *)(v93 + 2952);
        if (*(_QWORD *)(v93 + 2960) == v30)
          v31 = 0;
        else
          v31 = v30 + 16 * v26;
        v91 = v31;
        v92 = v29;
        md::createFeatureAttributeSet((gss::Allocator *)v114, (uint64_t *)(v23 + 24));
        v32 = *a9;
        *(_QWORD *)&buf[7] = 0;
        *(_QWORD *)buf = 0;
        buf[15] = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v112, v32, (gss::FeatureAttributeSet *)v114, (gss::QueryOverrides *)buf);
        if (!buf[14] && *(_QWORD *)buf)
        {
          v34 = gss::Allocator::instance(v33);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v34 + 40))(v34, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
        }
        if (v112)
        {
          v35 = *((float *)&v116 + 3);
          if (fabsf(*((float *)&v116 + 3)) >= 0.000001)
          {
            v118 = *(int32x2_t *)&v117[12];
            v96 = *(_QWORD *)v117;
            if (v89 == *(_QWORD *)v117)
            {
              v87 = 0;
            }
            else
            {
              +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              v87 = objc_msgSend(v45, "showTrafficOffset");

              v89 = v96;
            }
            v176 = 0u;
            v175 = 0u;
            v173 = 0u;
            v174 = 0u;
            v171 = 0u;
            v172 = 0u;
            *(_OWORD *)__p = 0u;
            v170 = 0u;
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)buf);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)v137);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v138);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v139);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v140);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v141);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v142);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v143);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v144);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v145);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v146);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v147);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v148);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v149);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v150);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v151);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v152);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v153);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v154);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v155);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v156);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v157);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v158);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v159);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v160);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v161);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v162);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v163);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v164);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v165);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v166);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v167);
            zilch::TrafficDynamicTile::Flow::Flow((zilch::TrafficDynamicTile::Flow *)&v168);
            v46 = md::TrafficDynamicTileResource::flowForRoadId(a7, v96, __p);
            v47 = v46;
            v48 = 126 - 2 * __clz(v46);
            if (v46)
              v49 = v48;
            else
              v49 = 0;
            std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>((uint64_t)__p, (uint64_t *)&__p[v46], v49, 1);
            v50 = *(_DWORD *)&v117[20];
            if (a10)
              v50 = 3;
            if (v50 != 4)
            {
              if (!v46)
                goto LABEL_64;
              v46 = 0;
              v55 = 0.0;
              v56 = __p;
              do
              {
                v57 = (float *)*v56;
                if (*((float *)*v56 + 2) <= v55)
                {
                  v59 = v46;
                }
                else
                {
                  v58 = (float *)&buf[24 * v46];
                  *(_QWORD *)v58 = v96;
                  v58[2] = v55;
                  v58[3] = v57[2];
                  *((_DWORD *)v58 + 4) = v50;
                  v59 = v46 + 1;
                  v46 = v59;
                  if (v59 > 0x20)
                    goto LABEL_65;
                }
                v46 = v59 + 1;
                v60 = *(_OWORD *)v57;
                v61 = (float *)&buf[24 * v59];
                v61[4] = v57[4];
                *(_OWORD *)v61 = v60;
                if (v59 + 1 > 0x20)
                  goto LABEL_65;
                v55 = v57[3];
                ++v56;
                --v47;
              }
              while (v47);
              if (v59 == -1)
              {
LABEL_64:
                *(_QWORD *)buf = v96;
                *(_QWORD *)&buf[8] = 0x3F80000000000000;
                v46 = 1;
                *(_DWORD *)&buf[16] = v50;
              }
              else
              {
                v62 = *(float *)&buf[24 * v59 + 12];
                if (v62 < 1.0)
                {
                  v63 = (float *)&buf[24 * v46];
                  *(_QWORD *)v63 = v96;
                  v63[2] = v62;
                  v63[3] = 1.0;
                  *((_DWORD *)v63 + 4) = v50;
                  v46 = v59 + 2;
                }
              }
LABEL_65:
              v97 = v27 + 8 * v26;
              v64 = (float)(unint64_t)(v100 - 1);
              v65 = v46;
              if (v35 > 0.0)
                v66 = 1;
              else
                v66 = -1;
              v86 = v66;
              v67 = buf;
              while (2)
              {
                if (LODWORD(v24) > *(_DWORD *)(v23 + 100))
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v68 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                  {
                    v69 = *(int32x2_t **)(a3 + 8);
                    v70 = v69[1].i32[0];
                    v106[0] = -1;
                    v106[1] = v70;
                    v107 = vrev64_s32(*v69);
                    md::debugString<geo::QuadTile>(v108, v106);
                    v71 = v108;
                    if (v109 < 0)
                      v71 = (void **)v108[0];
                    *(_DWORD *)v119 = 136315650;
                    v120 = v71;
                    v121 = 2048;
                    v122 = v22;
                    v123 = 2048;
                    v124 = v24;
                    _os_log_impl(&dword_19F029000, v68, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s references invalid section %lu on feature %lu", v119, 0x20u);
                    if (v109 < 0)
                      operator delete(v108[0]);
                  }
                  goto LABEL_69;
                }
                v72 = *((_DWORD *)v67 + 4);
                if (a11 == 4 || (v73 = v72 == a11, v72 = a11, v73))
                {
                  if (v72 <= 3 && *(_DWORD *)(a2 + 4 * v72) != 5)
                  {
                    v105 = 0;
                    v134 = 0;
                    v133 = 0;
                    geo::codec::VectorTile::key(*(geo::codec::VectorTile **)(v90 + 144));
                    v133 = GEOTileKeyMake();
                    v134 = v74;
                    if ((md::TrafficUtilities::buildStartOffset((float *)&v105 + 1, (float *)&v105, (std::__shared_weak_count **)v23, (uint64_t)&v116, v26, v100, (uint64_t)v67, v97, (uint64_t)&v133) & 1) != 0)
                    {
                      if (v35 <= 0.0)
                        v118 = vrev64_s32(v118);
                      v76 = *((float *)&v105 + 1);
                      if (*((float *)&v105 + 1) < 0.0
                        || *((float *)&v105 + 1) > v64
                        || (v75.n128_u32[0] = v105, *(float *)&v105 < 0.0)
                        || *(float *)&v105 > v64)
                      {
                        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                        v68 = (id)GEOGetVectorKitVKDefaultLog_log;
                        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                        {
                          v77 = *(int32x2_t **)(a3 + 8);
                          v78 = v77[1].i32[0];
                          v103[0] = -1;
                          v103[1] = v78;
                          v104 = vrev64_s32(*v77);
                          md::debugString<geo::QuadTile>(v108, v103);
                          v79 = v108;
                          if (v109 < 0)
                            v79 = (void **)v108[0];
                          *(_DWORD *)v119 = 136316674;
                          v120 = v79;
                          v121 = 2048;
                          v122 = v76;
                          v123 = 2048;
                          v124 = *(float *)&v105;
                          v125 = 2048;
                          v126 = v26;
                          v127 = 2048;
                          v128 = v100;
                          v129 = 2048;
                          v130 = *((float *)&v116 + 2);
                          v131 = 2048;
                          v132 = v35;
                          _os_log_impl(&dword_19F029000, v68, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)", v119, 0x48u);
                          if (v109 < 0)
                            operator delete(v108[0]);
                        }
LABEL_69:

                      }
                      else
                      {
                        v80 = *(unsigned __int8 *)(v95 + 168 * LODWORD(v22) + 153) - 1 < 2;
                        if (v84)
                        {
                          if (v84[1] <= v19)
                            abort();
                          v80 = (*(_QWORD *)(*v84 + 8 * (v19 >> 6)) & (1 << v19)) != 0;
                        }
                        LOBYTE(v82) = v87;
                        BYTE4(v81) = v80;
                        LODWORD(v81) = v100;
                        (*((void (**)(id, uint64_t, double, double, _QWORD, _QWORD, unint64_t *, _QWORD, float, __n128, uint64_t, uint64_t, uint64_t, uint64_t, int32x2_t *, int))v85
                         + 2))(v85, v23, COERCE_DOUBLE(*(_QWORD *)&v22), COERCE_DOUBLE(*(_QWORD *)&v24), *(unsigned int *)&v117[8], v86, &v112, v72, *((float *)&v105 + 1), v75, v97, v92, v91, v81, v83, v82);
                      }
                    }
                  }
                }
                v67 += 24;
                if (!--v65)
                  goto LABEL_28;
                continue;
              }
            }
            if (v46)
            {
              v51 = buf;
              v52 = __p;
              do
              {
                v53 = (uint64_t)*v52++;
                v54 = *(_DWORD *)(v53 + 16);
                *(_OWORD *)v51 = *(_OWORD *)v53;
                *((_DWORD *)v51 + 4) = v54;
                v51 += 24;
                --v47;
              }
              while (v47);
              goto LABEL_65;
            }
          }
          else
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v36 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              v37 = *(int32x2_t **)(a3 + 8);
              v38 = v37[1].i32[0];
              v110[0] = -1;
              v110[1] = v38;
              v111 = vrev64_s32(*v37);
              md::debugString<geo::QuadTile>(__p, v110);
              v39 = __p;
              if (SBYTE7(v170) < 0)
                v39 = (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v39;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = *((float *)&v116 + 2);
              v136 = 2048;
              v137[0] = v35;
              _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "Skeleton traffic tile %s makes degenerate road geometry reference (start: %f, length: %f)", buf, 0x20u);
              if (SBYTE7(v170) < 0)
                operator delete(__p[0]);
            }

          }
        }
LABEL_28:
        v40 = v113;
        if (v113)
        {
          p_shared_owners = (unint64_t *)&v113->__shared_owners_;
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
            break;
        }
        v43 = v114[0];
        if (v114[0])
          goto LABEL_33;
LABEL_7:
        if (++v19 == a6)
          goto LABEL_103;
      }
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      v43 = v114[0];
      if (!v114[0])
        goto LABEL_7;
LABEL_33:
      v114[1] = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v115 + 40))(v115, v43, v114[2] - v43);
      goto LABEL_7;
    }
LABEL_103:
    v13 = v85;
  }

}

void sub_19FF069A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  unint64_t v21;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  v21 = STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = v21;
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)STACK[0x2B8] + 40))(STACK[0x2B8], v21, STACK[0x2B0] - v21);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  float v91;
  float v92;
  float v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(float *)(*v8 + 8) < *(float *)(*v9 + 8))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(float *)(v81 + 8);
        v83 = *(float *)(*v9 + 8);
        v84 = *v8;
        v85 = *(float *)(*v8 + 8);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v134 = *v9;
            v133 = v9[1];
            if (*(float *)(v133 + 8) < *(float *)(*v9 + 8))
            {
              *v9 = v133;
              v9[1] = v134;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(float *)(*v8 + 8) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = (uint64_t *)v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = (uint64_t *)*v9;
        v91 = *((float *)v87 + 2);
        v92 = *(float *)(*v9 + 8);
        v93 = *(float *)(v89 + 8);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_164;
          *v86 = v89;
          *v88 = (uint64_t)v87;
          v94 = v9;
          v95 = (uint64_t **)(v9 + 1);
          result = (uint64_t)v87;
          if (v93 >= v92)
            goto LABEL_165;
        }
        else
        {
          v94 = v9;
          v95 = (uint64_t **)(v9 + 2);
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = (uint64_t)v87;
            v9[1] = (uint64_t)v90;
            v94 = v9 + 1;
            v95 = (uint64_t **)(v9 + 2);
            result = (uint64_t)v90;
            if (v93 >= v92)
            {
LABEL_164:
              v87 = (uint64_t *)v89;
LABEL_165:
              if (*(float *)(*v8 + 8) < *((float *)v87 + 2))
              {
                *v88 = *v8;
                *v8 = (uint64_t)v87;
                v138 = *v88;
                v139 = *v86;
                v140 = *(float *)(v138 + 8);
                if (v140 < *(float *)(v139 + 8))
                {
                  v9[1] = v138;
                  v9[2] = v139;
                  v141 = *v9;
                  if (v140 < *(float *)(*v9 + 8))
                  {
                    *v9 = v138;
                    v9[1] = v141;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = (uint64_t *)result;
        goto LABEL_165;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  if (2 * v108 + 2 < v11 && *(float *)(*v111 + 8) < *(float *)(v111[1] + 8))
                  {
                    ++v111;
                    v110 = 2 * v108 + 2;
                  }
                  v112 = &v9[v108];
                  v113 = *v111;
                  v114 = *v112;
                  v115 = *(float *)(*v112 + 8);
                  if (*(float *)(*v111 + 8) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v112 = v113;
                      if (v107 < v110)
                        break;
                      v117 = 2 * v110;
                      v110 = (2 * v110) | 1;
                      v111 = &v9[v110];
                      v118 = v117 + 2;
                      if (v118 < v11)
                      {
                        result = *v111;
                        if (*(float *)(*v111 + 8) < *(float *)(v111[1] + 8))
                        {
                          ++v111;
                          v110 = v118;
                        }
                      }
                      v113 = *v111;
                      v112 = v116;
                    }
                    while (*(float *)(*v111 + 8) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v119 = (unint64_t)v10 >> 3;
              do
              {
                v120 = 0;
                v121 = *v9;
                v122 = v9;
                do
                {
                  v123 = v122;
                  v122 += v120 + 1;
                  v124 = 2 * v120;
                  v120 = (2 * v120) | 1;
                  v125 = v124 + 2;
                  if (v125 < v119 && *(float *)(*v122 + 8) < *(float *)(v122[1] + 8))
                  {
                    ++v122;
                    v120 = v125;
                  }
                  *v123 = *v122;
                }
                while (v120 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
                if (v122 == --a2)
                {
                  *v122 = v121;
                }
                else
                {
                  *v122 = *a2;
                  *a2 = v121;
                  v126 = (char *)v122 - (char *)v9 + 8;
                  if (v126 >= 9)
                  {
                    v127 = (((unint64_t)v126 >> 3) - 2) >> 1;
                    v128 = &v9[v127];
                    v129 = *v128;
                    v130 = *v122;
                    v131 = *(float *)(*v122 + 8);
                    if (*(float *)(*v128 + 8) < v131)
                    {
                      do
                      {
                        v132 = v128;
                        *v122 = v129;
                        if (!v127)
                          break;
                        v127 = (v127 - 1) >> 1;
                        v128 = &v9[v127];
                        v129 = *v128;
                        v122 = v132;
                      }
                      while (*(float *)(*v128 + 8) < v131);
                      *v132 = v130;
                    }
                  }
                }
                v109 = v119-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(float *)(*v8 + 8);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(float *)(*v13 + 8);
            v19 = *(float *)(*v9 + 8);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(float *)(*v13 + 8) < *(float *)(*v9 + 8))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(float *)(*v8 + 8) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(float *)(v29 + 8);
            v32 = *(float *)(v30 + 8);
            v33 = *(a2 - 2);
            v34 = *(float *)(v33 + 8);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(float *)(*v27 + 8) < *(float *)(v35 + 8))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(float *)(v36 + 8) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(float *)(v40 + 8);
            v43 = *(float *)(v41 + 8);
            v44 = *(a2 - 3);
            v45 = *(float *)(v44 + 8);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(float *)(*v38 + 8) < *(float *)(v46 + 8))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(float *)(v47 + 8) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(float *)(*v13 + 8);
            v51 = *(float *)(*v27 + 8);
            v52 = *v38;
            v53 = *(float *)(*v38 + 8);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(float *)(*v9 + 8);
          v23 = *(float *)(*v13 + 8);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(float *)(*v9 + 8) < *(float *)(*v13 + 8))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(float *)(*v8 + 8) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(float *)(v55 + 8);
            if (*(float *)(*(v9 - 1) + 8) < v56)
              goto LABEL_54;
            if (v56 >= *(float *)(*v8 + 8))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(float *)(*v9 + 8));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(float *)(v70 + 8));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(float *)(v73 + 8));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(float *)(v76 + 8));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(float *)(v77 + 8));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(float *)(v55 + 8);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(float *)(v60 + 8) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(float *)(v63 + 8) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(float *)(v62 + 8) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(float *)(v67 + 8) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(float *)(v68 + 8) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(float *)(v102 + 8);
              if (v104 < *(float *)(v103 + 8))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(float *)(v103 + 8));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v136 = *v7;
            v135 = v7[1];
            v7 = v96;
            v137 = *(float *)(v135 + 8);
            if (v137 < *(float *)(v136 + 8))
            {
              do
              {
                *v96 = v136;
                v136 = *(v96 - 2);
                --v96;
              }
              while (v137 < *(float *)(v136 + 8));
              *v96 = v135;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::buildTrafficMesh(md::GEOVectorTileResource &,md::TrafficMeshStyle const&,gdc::ResourceKey const&,zilch::TrafficSkeletonTile::Record const*,std::vector<BOOL> const*,unsigned long,md::TrafficDynamicTileResource const&,void({block_pointer})(GeoCodecsRoadFeature const*,unsigned int,unsigned int,zilch::TrafficSkeletonTile::DrivingSide,float,float,int,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&,gss::TrafficStyleSpeed,gm::Matrix<float,2,1> const*,float const*,GeoCodecsRoadOffsets const*,unsigned int,BOOL,md::TrafficStartEndOffset const*,BOOL),std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,BOOL,zilch::TrafficDynamicTile::SpeedClass)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(float *)(v3 + 8) < *(float *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(float *)(v15 + 8);
      v17 = *(float *)(*a1 + 8);
      v18 = *(a2 - 1);
      v19 = *(float *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(float *)(v40 + 8) < *(float *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(float *)(v47 + 8) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(float *)(v21 + 8);
      v26 = *(float *)(*a1 + 8);
      v27 = *(float *)(v23 + 8);
      if (v25 >= v26)
      {
        if (v27 >= v25)
          goto LABEL_35;
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
      }
      else
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
          {
LABEL_35:
            v21 = v23;
LABEL_36:
            v42 = *(a2 - 1);
            if (*(float *)(v42 + 8) < *(float *)(v21 + 8))
            {
              *v22 = v42;
              *(a2 - 1) = v21;
              v43 = *v22;
              v44 = *v20;
              v45 = *(float *)(v43 + 8);
              if (v45 < *(float *)(v44 + 8))
              {
                a1[1] = v43;
                a1[2] = v44;
                v46 = *a1;
                if (v45 < *(float *)(*a1 + 8))
                {
                  *a1 = v43;
                  a1[1] = v46;
                }
              }
            }
            return 1;
          }
        }
      }
      *v28 = v23;
      *v29 = v24;
      v21 = v30;
      goto LABEL_36;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(float *)(v7 + 8);
      v10 = *(float *)(*a1 + 8);
      v11 = *(float *)(v5 + 8);
      if (v9 < v10)
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v9)
        {
          *a1 = v7;
          a1[1] = v8;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_19;
        }
LABEL_18:
        *v12 = v5;
        *v13 = v8;
        goto LABEL_19;
      }
      if (v11 < v9)
      {
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
        if (v11 < v10)
          goto LABEL_18;
      }
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(float *)(*v31 + 8);
        if (v37 < *(float *)(v36 + 8))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(float *)(v36 + 8));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

uint64_t md::trafficStyleAttributes(uint64_t *a1, geo::codec::VectorTile *this)
{
  gss::Allocator *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t result;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (gss::Allocator *)geo::codec::VectorTile::attributes(this);
  v4 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    v5 = *(unsigned __int8 *)(v4 + 33);
    if (*(_BYTE *)(v4 + 33))
    {
      v6 = 0;
      v7 = *(int **)v4;
      v8 = v7;
      while (1)
      {
        v9 = *v8;
        v8 += 2;
        if (v9 == 27)
          break;
        if (v5 == ++v6)
          goto LABEL_6;
      }
      v12 = LOWORD(v7[2 * v6 + 1]);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = gss::Allocator::instance(v3);
      md::TrafficStyleAttributes((gss::Allocator *)&v37, 0);
      v13 = v40;
      v14 = v37;
      v15 = v38;
      v16 = (char *)v38 - (char *)v37;
      if (v38 == v37)
      {
        v18 = 0;
        v21 = 0;
        v20 = 0;
        if (v37)
        {
LABEL_19:
          v38 = v14;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v40 + 40))(v40, v14, v39 - (_QWORD)v14);
        }
      }
      else
      {
        if (v16 < 0)
          abort();
        v17 = (*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, (char *)v38 - (char *)v37, 4);
        v18 = v17;
        v19 = 0;
        do
        {
          if (v17 + v19 * 8)
            *(_QWORD *)(v17 + v19 * 8) = v14[v19];
          ++v19;
        }
        while (&v14[v19] != v15);
        v20 = (uint64_t *)(v17 + v19 * 8);
        v21 = v17 + 8 * (v16 >> 3);
        v14 = v37;
        if (v37)
          goto LABEL_19;
      }
      if ((unint64_t)v20 < v21)
      {
        if (v20)
          *v20 = (v12 << 32) | 0x1B;
        v22 = v20 + 1;
        goto LABEL_49;
      }
      v23 = ((uint64_t)v20 - v18) >> 3;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
        abort();
      v25 = v21 - v18;
      if ((uint64_t)(v21 - v18) >> 2 > v24)
        v24 = (uint64_t)(v21 - v18) >> 2;
      if (v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 8 * v26, 4);
        v28 = (uint64_t *)(v27 + 8 * v23);
        if (v27)
          *v28 = (v12 << 32) | 0x1B;
      }
      else
      {
        v28 = (uint64_t *)(8 * v23);
      }
      v22 = v28 + 1;
      if (v20 != (uint64_t *)v18)
      {
        v29 = (unint64_t)v20 - v18 - 8;
        if (v29 < 0x38)
        {
          v31 = v20;
        }
        else if ((unint64_t)((char *)v20 - (char *)v28) < 0x20)
        {
          v31 = v20;
        }
        else
        {
          v30 = (v29 >> 3) + 1;
          v31 = &v20[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          v32 = v28 - 2;
          v33 = v20 - 2;
          v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v33;
            *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
            *(_OWORD *)v32 = v35;
            v32 -= 4;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          v28 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_46;
        }
        do
        {
          v36 = *--v31;
          *--v28 = v36;
        }
        while (v31 != (uint64_t *)v18);
      }
LABEL_46:
      if (v18)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 40))(v13, v18, v25);
      v18 = (uint64_t)v28;
LABEL_49:
      std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1, v18, v22, ((uint64_t)v22 - v18) >> 3);
      result = (uint64_t)gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)a1);
      if (v18)
      {
        v11 = *(uint64_t (**)(void))(*(_QWORD *)v13 + 40);
        return v11();
      }
      return result;
    }
  }
LABEL_6:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = gss::Allocator::instance(v3);
  result = md::TrafficStyleAttributes((gss::Allocator *)&v37, 0);
  if (&v37 != (_QWORD **)a1)
    result = std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1, (uint64_t)v37, v38, v38 - v37);
  if (v37)
  {
    v38 = v37;
    v11 = *(uint64_t (**)(void))(*(_QWORD *)v40 + 40);
    return v11();
  }
  return result;
}

void sub_19FF07A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v14, v15 - v14);
  v17 = *v12;
  if (*v12)
  {
    v12[1] = v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[3] + 40))(v12[3], v17, v12[2] - v17);
  }
  _Unwind_Resume(exception_object);
}

void md::TransitDisplayConnectionRibbon::~TransitDisplayConnectionRibbon(md::TransitDisplayConnectionRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF568;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::TransitDisplayConnectionRibbonDescriptor>>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  malloc_zone_t *zone;
  void (***v10)(_QWORD, uint64_t);
  void (***v11)(_QWORD, uint64_t);
  unsigned __int8 v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  _QWORD *v16;

  v1 = result;
  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  if (v2 != (_QWORD *)*result)
  {
    do
    {
      v6 = *--v2;
      v5 = v6;
      *v2 = 0;
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 56);
        if (v7)
        {
          v8 = *(_QWORD **)(v5 + 64);
          v4 = *(_QWORD *)(v5 + 56);
          if (v8 != v7)
          {
            do
            {
              v11 = (void (***)(_QWORD, uint64_t))*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
              {
                (**v10)(v10, v4);
                {
                  v16 = v7;
                  v13 = operator new();
                  *(_QWORD *)(v13 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v13 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v13 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v13 = &off_1E42B5668;
                  *(_QWORD *)(v13 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v13 + 72) = 0u;
                  *(_OWORD *)(v13 + 88) = 0u;
                  *(_OWORD *)(v13 + 104) = 0u;
                  *(_OWORD *)(v13 + 120) = 0u;
                  *(_OWORD *)(v13 + 136) = 0u;
                  *(_OWORD *)(v13 + 152) = 0u;
                  *(_OWORD *)(v13 + 168) = 0u;
                  *(_OWORD *)(v13 + 184) = 0u;
                  *(_OWORD *)(v13 + 200) = 0u;
                  *(_OWORD *)(v13 + 216) = 0u;
                  *(_OWORD *)(v13 + 232) = 0u;
                  *(_QWORD *)(v13 + 248) = 0;
                  *(_OWORD *)(v13 + 56) = 0u;
                  v14 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 56), 0);
                  if ((_DWORD)v14)
                    geo::read_write_lock::logFailure(v14, (uint64_t)"initialization", v15);
                  zone = malloc_create_zone(0, 0);
                  *(_QWORD *)(v13 + 48) = zone;
                  malloc_set_zone_name(zone, "VectorKitLabels");
                  *(_QWORD *)(v13 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v13;
                  v7 = v16;
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v10, 104);
              }
            }
            while (v8 != v7);
            v4 = *(_QWORD *)(v5 + 56);
          }
          *(_QWORD *)(v5 + 64) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 80) + 40))(*(_QWORD *)(v5 + 80), v4, *(_QWORD *)(v5 + 72) - v4);
        }
        result = (_QWORD *)MEMORY[0x1A1AF4E00](v5, 0x1020C4097AEC518);
      }
    }
    while (v2 != v3);
  }
  v1[1] = v3;
  return result;
}

void md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &off_1E42AF2E8;
  if (*(_QWORD *)(a1 + 376))
  {
    std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::TransitDisplayConnectionRibbonDescriptor>>>::__clear[abi:nn180100]((_QWORD *)(a1 + 376));
    operator delete(*(void **)(a1 + 376));
  }
  v2 = *(_QWORD **)(a1 + 352);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = *(_QWORD ***)(a1 + 352);
  *(_QWORD *)(a1 + 360) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = *(_QWORD ***)(a1 + 352);
  }
  free(v6);
  v9 = *(void **)(a1 + 328);
  if (v9)
  {
    *(_QWORD *)(a1 + 336) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD *)(a1 + 296);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 304);
    v12 = *(_QWORD *)(a1 + 296);
    if (v11 != v10)
    {
      v13 = *(_QWORD *)(a1 + 304);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = *(_QWORD *)(a1 + 296);
    }
    *(_QWORD *)(a1 + 304) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 320) + 40))(*(_QWORD *)(a1 + 320), v12, *(_QWORD *)(a1 + 312) - v12);
  }
  v16 = *(void **)(a1 + 272);
  if (v16)
  {
    *(_QWORD *)(a1 + 280) = v16;
    operator delete(v16);
  }
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::TextDataEntry::~TextDataEntry(md::TextDataEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v4, *((_QWORD *)this + 5) - v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t std::__split_buffer<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(_QWORD *)(i - 32);
    if (v4)
    {
      v5 = *(_QWORD *)(i - 24);
      v6 = *(_QWORD *)(i - 32);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(_QWORD *)(i - 32);
      }
      *(_QWORD *)(i - 24) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v6, *(_QWORD *)(i - 16) - v6);
    }
    v10 = *(std::__shared_weak_count **)(i - 40);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E4289FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 128);
  if (v2)
  {
    *(_QWORD *)(result + 136) = v2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 152) + 40))(*(_QWORD *)(result + 152), v2, *(_QWORD *)(result + 144) - v2);
  }
  if (*(char *)(v1 + 119) < 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 120) + 40))(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 96), 2 * *(_QWORD *)(v1 + 112));
    if ((*(char *)(v1 + 87) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v1 + 55) & 0x80000000) == 0)
        return result;
      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  else if ((*(char *)(v1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 88) + 40))(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(v1 + 55) < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 56) + 40))(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 168);
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  do
    v2 = __ldaxr(&md::TextDataString::_totalLabelTextData);
  while (__stlxr(v2 - 1, &md::TextDataString::_totalLabelTextData));
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v3, *(_QWORD *)(a1 + 136) - v3);
  }
  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 88);
    if (v5 != v4)
    {
      do
      {
        v7 = v5 - 24;
        CGFontRelease(*(CGFontRef *)(v5 - 16));
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *(_QWORD *)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112), v6, *(_QWORD *)(a1 + 104) - v6);
  }
  *(_QWORD *)(a1 + 64) = &off_1E42B4950;
  v8 = *(const void **)(a1 + 72);
  if (v8)
    CFRelease(v8);
  v9 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v9)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v12)
      return;
  }
  else
  {
LABEL_15:
    v12 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

uint64_t std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 160);
}

uint64_t md::CaptionedIconLabelPart::setInWorldSpace(uint64_t this, BOOL a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this;
  v4 = *(unsigned __int8 *)(this + 858);
  v5 = *(_BYTE *)(this + 858) != 0;
  *(_BYTE *)(this + 565) = v5;
  *(_BYTE *)(this + 566) = a3;
  v6 = *(uint64_t **)(this + 576);
  v7 = *(uint64_t **)(this + 584);
  if (v6 != v7)
  {
    do
    {
      v9 = *v6++;
      this = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)v9 + 64))(v9, v4 != 0, a3);
    }
    while (v6 != v7);
    v5 = *(unsigned __int8 *)(v3 + 565);
  }
  if (v5 && *(_BYTE *)(v3 + 566))
  {
    v10 = operator new();
    this = *(_QWORD *)(v3 + 896);
    *(_QWORD *)(v3 + 896) = v10;
    if (this)
      this = MEMORY[0x1A1AF4E00](this, 0x1000C40AE2C30F4);
    if (*(_BYTE *)(v3 + 925))
    {
      if (*(_BYTE *)(v3 + 859) == 1)
      {
        v11 = operator new();
        v12 = *(_QWORD *)(v3 + 912);
        *(_QWORD *)(v3 + 912) = v11;
        if (v12)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40AE2C30F4);
      }
      v13 = *(_QWORD *)(v3 + 912);
      if (!v13)
        v13 = *(_QWORD *)(v3 + 896);
      this = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v3 + 576) + 32))(**(_QWORD **)(v3 + 576), v13);
    }
    if (*(_BYTE *)(v3 + 926))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v3 + 576) + 8 * *(unsigned __int8 *)(v3 + 925));
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, *(_QWORD *)(v3 + 896));
    }
  }
  return this;
}

uint64_t md::CaptionedIconLabelPart::modelMatrix(md::CaptionedIconLabelPart *this)
{
  return *((_QWORD *)this + 111);
}

uint64_t md::CaptionedIconLabelPart::partType(md::CaptionedIconLabelPart *this)
{
  return 3;
}

uint64_t md::CaptionedIconLabelPart::isVisuallySimilar(md::CaptionedIconLabelPart *this, const md::LabelPart *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v2 = *((_QWORD *)this + 73);
  v3 = *((_QWORD *)this + 72);
  if (v2 - v3 == *((_QWORD *)a2 + 73) - *((_QWORD *)a2 + 72))
  {
    if (v2 == v3)
    {
LABEL_8:
      if (!*((_BYTE *)this + 926)
        || *((unsigned __int8 *)this + 847) == *((unsigned __int8 *)a2 + 847)
        && *((unsigned __int8 *)this + 848) == *((unsigned __int8 *)a2 + 848))
      {
        return 1;
      }
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_QWORD *)(v3 + 8 * v6);
        v8 = *(_QWORD *)(*((_QWORD *)a2 + 72) + 8 * v6);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
        if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 224))(v8))
          break;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 224))(v7);
        if (!(_DWORD)result)
          return result;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, v8) & 1) == 0)
          break;
        ++v6;
        v3 = *((_QWORD *)this + 72);
        if (v6 >= (*((_QWORD *)this + 73) - v3) >> 3)
          goto LABEL_8;
      }
    }
  }
  return 0;
}

float md::CaptionedIconLabelPart::pixelBoundsForDisplay(md::CaptionedIconLabelPart *this)
{
  float v1;

  v1 = *((float *)this + 179);
  if (*((float *)this + 181) >= v1 && *((float *)this + 182) >= *((float *)this + 180))
    return *((float *)this + 130) + v1;
  else
    return 3.4028e38;
}

float md::CaptionedIconLabelPart::setOptionalTextHidden(md::CaptionedIconLabelPart *this, int a2)
{
  float result;

  *((_BYTE *)this + 680) = a2;
  *((_BYTE *)this + 953) = a2;
  result = (float)(a2 ^ 1u);
  *((float *)this + 237) = result;
  return result;
}

BOOL md::CaptionedIconLabelPart::optionalTextHidden(md::CaptionedIconLabelPart *this)
{
  return !*((_BYTE *)this + 926) || *((_BYTE *)this + 953) != 0;
}

uint64_t md::CaptionedIconLabelPart::reserveSpaceLabelPart(md::CaptionedIconLabelPart *this, BOOL *a2)
{
  if (!*((_BYTE *)this + 925))
    return 0;
  *a2 = *((_BYTE *)this + 926) ^ 1;
  return **((_QWORD **)this + 72);
}

uint64_t md::CaptionedIconLabelPart::setPersistedOptionalTextCollided(uint64_t this, char a2)
{
  *(_BYTE *)(this + 954) = a2;
  return this;
}

uint64_t md::CaptionedIconLabelPart::populateHoverBounds(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  if (*(_BYTE *)(result + 925))
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(result + 576) + 520))(**(_QWORD **)(result + 576), a2);
  if (*(_BYTE *)(v3 + 926))
  {
    if (!*(_BYTE *)(v3 + 732))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 576) + 8 * *(unsigned __int8 *)(v3 + 925));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 520))(v4, a2);
    }
  }
  return result;
}

BOOL md::CaptionedIconLabelPart::snapToDefaultPlacement(char *a1, uint64_t a2, md::LabelCollider *a3, md::LabelCollidableItem *a4, uint64_t a5)
{
  return (md::CaptionedIconLabelPart::collideIconPart((md::CaptionedIconLabelPart *)a1, *(const md::LabelManager **)(a2 + 432), a3, a4) & 1) == 0&& md::CaptionedIconLabelPart::tryAlternatePlacements((uint64_t)a1, 0, (const md::LabelLayoutContext *)(a1[959] == 0), a1[959], a2, (uint64_t)a3, a4, a5);
}

uint64_t md::CaptionedIconLabelPart::transferResource@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_BYTE *)(this + 925))
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(this + 576) + 600))(**(_QWORD **)(this + 576));
  *a2 = 0;
  return this;
}

uint64_t md::CaptionedIconLabelPart::populateIconImageInfos(uint64_t result)
{
  if (*(_BYTE *)(result + 925))
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(result + 576) + 728))(**(_QWORD **)(result + 576));
  return result;
}

uint64_t md::CaptionedIconLabelPart::isTextVisible(md::CaptionedIconLabelPart *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 926))
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 72) + 8 * *((unsigned __int8 *)this + 925));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 744))(v1);
}

BOOL md::CaptionedIconLabelPart::isTextRequired(md::CaptionedIconLabelPart *this)
{
  return *((_BYTE *)this + 946) == 2;
}

void md::CaptionedIconLabelPart::debugDraw(md::CaptionedIconLabelPart *this, md::DebugConsole *a2)
{
  uint64_t v4;

  md::LabelPart::debugDraw(this, a2);
  if (*((_BYTE *)this + 925))
    (*(void (**)(_QWORD, md::DebugConsole *))(***((_QWORD ***)this + 72) + 768))(**((_QWORD **)this + 72), a2);
  if (*((_BYTE *)this + 926))
  {
    if (*((_BYTE *)this + 946) != 3)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 72) + 8 * *((unsigned __int8 *)this + 925));
      (*(void (**)(uint64_t, md::DebugConsole *))(*(_QWORD *)v4 + 768))(v4, a2);
    }
  }
}

void md::CaptionedIconLabelPart::populateDebugNode(md::CaptionedIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t v4;
  char *ChildNode;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  float v17;
  char *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  char *v23;
  double v24;
  char *v25;
  double v26;
  char *v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  int v36;
  _BYTE v37[32];
  std::string v38;
  int v39;
  _BYTE v40[3];
  __int16 v41;
  _BYTE v42[32];
  std::string v43;
  int v44;
  _BYTE v45[32];
  std::string v46;
  int v47;
  _BYTE v48[16];
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE v54[16];
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE v60[16];
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _BYTE v66[16];
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BYTE v72[16];
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _BYTE v78[16];
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BYTE v84[16];
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  std::string __p;
  _BYTE v91[32];
  std::string v92;
  int v93;
  _BYTE v94[16];
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD v100[7];
  int v101;
  _BYTE v102[32];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BYTE v107[32];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  __int128 v112[2];

  v4 = 0x746C7561666544;
  strcpy((char *)v112, "CaptionedIconLabelPart");
  BYTE7(v112[1]) = 22;
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v112);
  v6 = (uint64_t)ChildNode;
  v7 = *((unsigned __int8 *)this + 946);
  BYTE7(v112[1]) = 17;
  strcpy((char *)v112, "Text Display Mode");
  v8 = v7;
  v9 = 7;
  v10 = 0x746C7561666544;
  switch(v8)
  {
    case 0:
      break;
    case 1:
      v9 = 8;
      v10 = 0x6C616E6F6974704FLL;
      break;
    case 2:
      v9 = 8;
      v10 = 0x6465726975716552;
      break;
    case 3:
      v9 = 5;
      v10 = 0x726576654ELL;
      break;
    default:
      v10 = 0;
      v9 = 0;
      break;
  }
  v109 = 0;
  v110 = 0;
  v111 = 4;
  v108 = v10;
  HIBYTE(v110) = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v112, (uint64_t)v107);
  v11 = (char *)operator new(0x20uLL);
  *(_QWORD *)&v112[0] = v11;
  *(__int128 *)((char *)v112 + 8) = xmmword_19FFB34B0;
  strcpy(v11, "Feature Text Display Mode");
  v12 = 7;
  switch(*((_BYTE *)this + 945))
  {
    case 0:
      break;
    case 1:
      v12 = 8;
      v4 = 0x6C616E6F6974704FLL;
      break;
    case 2:
      v12 = 8;
      v4 = 0x6465726975716552;
      break;
    case 3:
      v12 = 5;
      v4 = 0x726576654ELL;
      break;
    default:
      v4 = 0;
      v12 = 0;
      break;
  }
  v104 = 0;
  v105 = 0;
  v106 = 4;
  v103 = v4;
  HIBYTE(v105) = v12;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v112, (uint64_t)v102);
  operator delete(v11);
  BYTE7(v112[1]) = 14;
  strcpy((char *)v112, "Hide Text Part");
  v13 = *((unsigned __int8 *)this + 732);
  v101 = 0;
  memset(&v100[4], 0, 24);
  v100[0] = v13;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v112, (uint64_t)v100);
  v14 = *((float *)this + 237);
  BYTE7(v112[1]) = 20;
  strcpy((char *)v112, "Text Collision Alpha");
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v99 = 2;
  v95 = v14;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v112, (uint64_t)v94);
  v15 = *((unsigned __int8 *)this + 922);
  BYTE7(v112[1]) = 12;
  strcpy((char *)v112, "Layout Style");
  gss::to_string((char *)&__p, v15);
  memset(&v92, 0, sizeof(v92));
  v93 = 4;
  v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v92, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v92 = __p;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v112, (uint64_t)v91);
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  operator delete(v92.__r_.__value_.__l.__data_);
  if (v16 < 0)
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
  v17 = *((float *)this + 42);
  BYTE7(v112[1]) = 7;
  strcpy((char *)v112, "Padding");
  v88 = 0;
  v86 = 0;
  v87 = 0;
  v89 = 2;
  v85 = v17;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)v112, (uint64_t)v84);
  if (*((_BYTE *)this + 925))
  {
    BYTE7(v112[1]) = 8;
    strcpy((char *)v112, "IconPart");
    v18 = gdc::DebugTreeNode::createChildNode(v6, v112);
    v19 = *((float *)this + 171);
    BYTE7(v112[1]) = 11;
    strcpy((char *)v112, "Margin Left");
    v82 = 0;
    v80 = 0;
    v81 = 0;
    v83 = 2;
    v79 = v19;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v78);
    v20 = *((float *)this + 172);
    BYTE7(v112[1]) = 12;
    strcpy((char *)v112, "Margin Right");
    v76 = 0;
    v74 = 0;
    v75 = 0;
    v77 = 2;
    v73 = v20;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v72);
    v21 = *((float *)this + 173);
    BYTE7(v112[1]) = 10;
    strcpy((char *)v112, "Margin Top");
    v69 = 0;
    v70 = 0;
    v68 = 0;
    v71 = 2;
    v67 = v21;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v66);
    v22 = *((float *)this + 174);
    BYTE7(v112[1]) = 13;
    strcpy((char *)v112, "Margin Bottom");
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v65 = 2;
    v61 = v22;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v60);
    v23 = (char *)operator new(0x20uLL);
    *(_QWORD *)&v112[0] = v23;
    *(__int128 *)((char *)v112 + 8) = xmmword_19FFB3800;
    strcpy(v23, "Margin Diagonal Vertical");
    v24 = *((float *)this + 175);
    v57 = 0;
    v58 = 0;
    v56 = 0;
    v59 = 2;
    v55 = v24;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v54);
    operator delete(v23);
    v25 = (char *)operator new(0x20uLL);
    *(_QWORD *)&v112[0] = v25;
    *(__int128 *)((char *)v112 + 8) = xmmword_19FFB3620;
    strcpy(v25, "Margin Diagonal Horizontal");
    v26 = *((float *)this + 176);
    v51 = 0;
    v52 = 0;
    v50 = 0;
    v53 = 2;
    v49 = v26;
    gdc::DebugTreeNode::addProperty((uint64_t)v18, (uint64_t)v112, (uint64_t)v48);
    operator delete(v25);
  }
  if (!*((_BYTE *)this + 926))
    goto LABEL_52;
  BYTE7(v112[1]) = 8;
  strcpy((char *)v112, "TextPart");
  v27 = gdc::DebugTreeNode::createChildNode(v6, v112);
  BYTE7(v112[1]) = 15;
  strcpy((char *)v112, "Label Placement");
  LabelPlacementToShortString(&__p, (_BYTE *)this + 842);
  memset(&v46, 0, sizeof(v46));
  v47 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v46 = __p;
  gdc::DebugTreeNode::addProperty((uint64_t)v27, (uint64_t)v112, (uint64_t)v45);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_27:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_28:
  v28 = *((unsigned __int16 *)this + 425);
  BYTE7(v112[1]) = 18;
  strcpy((char *)v112, "Alternate Position");
  gss::to_string(&__p, v28);
  memset(&v43, 0, sizeof(v43));
  v44 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v43, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v43 = __p;
  gdc::DebugTreeNode::addProperty((uint64_t)v27, (uint64_t)v112, (uint64_t)v42);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_35:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_36:
  v29 = *((unsigned __int8 *)this + 847);
  v30 = *((_BYTE *)this + 848);
  v40[0] = *((_BYTE *)this + 832);
  v40[1] = v30;
  v40[2] = 0;
  v41 = v29;
  BYTE7(v112[1]) = 18;
  strcpy((char *)v112, "Resolved Placement");
  LabelPlacementToShortString(&__p, v40);
  memset(&v38, 0, sizeof(v38));
  v39 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v38 = __p;
  gdc::DebugTreeNode::addProperty((uint64_t)v27, (uint64_t)v112, (uint64_t)v37);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_43:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  BYTE7(v112[1]) = 17;
  strcpy((char *)v112, "Default Placement");
  LabelPlacementToShortString(&__p, (_BYTE *)this + 837);
  memset(&v35, 0, sizeof(v35));
  v36 = 4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&v35, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v35 = __p;
  gdc::DebugTreeNode::addProperty((uint64_t)v27, (uint64_t)v112, (uint64_t)&v34);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  v31 = (uint64_t *)*((_QWORD *)this + 72);
  v32 = (uint64_t *)*((_QWORD *)this + 73);
  while (v31 != v32)
  {
    v33 = *v31++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(_QWORD *)v33 + 800))(v33, a2);
  }
}

uint64_t md::CaptionedIconLabelPart::debugCompositeClassName@<X0>(md::CaptionedIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::ios_base *v8;
  uint64_t v9;
  std::string::size_type v10;
  const char *v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::ios_base *v22;
  uint64_t v23;
  int v24;
  std::string::size_type v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  std::string::size_type v30;
  uint64_t v31;
  int v32;
  char v33;
  size_t v34;
  void **p_dst;
  unint64_t v36;
  const void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  __int16 v47;
  char v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned __int8 v55;
  _BYTE *v56;
  _BYTE *v57;
  std::string *v58;
  size_t v59;
  _BYTE *i;
  std::string *v61;
  size_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  size_t v67;
  const void **v68;
  unint64_t v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v75;
  _BYTE v76[3];
  __int16 v77;
  void **__dst;
  size_t v79;
  int64_t v80;
  std::string::size_type v81;
  _QWORD v82[2];
  _QWORD v83[3];
  uint64_t v84;
  unint64_t v85;
  void *__p[2];
  __int128 v87;
  int v88;
  uint64_t v89[19];
  std::string v90;
  std::string v91;
  _QWORD v92[3];
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98[21];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v89[0] = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v81 = v6;
  *(_QWORD *)((char *)&v82[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v82[-1] + *(_QWORD *)(v81 - 24));
  std::ios_base::init(v8, v82);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v81 = v4 + 24;
  v89[0] = v5;
  std::streambuf::basic_streambuf();
  v82[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v87 = 0u;
  v88 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"CaptionedIcon", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  textDisplayClass: ", 21);
  switch(*((_BYTE *)this + 946))
  {
    case 0:
      v9 = 7;
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v91, "Default");
      break;
    case 1:
      v9 = 8;
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = 8;
      v10 = 0x6C616E6F6974704FLL;
      goto LABEL_6;
    case 2:
      v9 = 8;
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = 8;
      v10 = 0x6465726975716552;
LABEL_6:
      v91.__r_.__value_.__r.__words[0] = v10;
      v91.__r_.__value_.__s.__data_[8] = 0;
      break;
    case 3:
      v9 = 5;
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v91, "Never");
      break;
    default:
      v9 = 0;
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = 0;
      v91.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)&v91, v9);
  if (*((_BYTE *)this + 732))
    v11 = " (optional text is hidden)";
  else
    v11 = "";
  if (*((_BYTE *)this + 732))
    v12 = 26;
  else
    v12 = 0;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v11, v12);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v13 = v81;
  *(_DWORD *)((char *)v82 + *(_QWORD *)(v81 - 24)) = *(_DWORD *)((_BYTE *)v82 + *(_QWORD *)(v81 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v82[1] + *(_QWORD *)(v13 - 24)) = 2;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  text collision alpha: ", 25);
  std::ostream::operator<<();
  if (*((_BYTE *)this + 954))
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)" (persisted opt text collided)", 30);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  layout style:", 16);
  gss::to_string((char *)&v91, *((unsigned __int8 *)this + 922));
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v91;
  else
    v14 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    size = v91.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v14, size);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v91.__r_.__value_.__l.__data_);
    if (!*((_BYTE *)this + 925))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*((_BYTE *)this + 925))
  {
LABEL_28:
    *(_QWORD *)((char *)&v82[1] + *(_QWORD *)(v81 - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  icon margins[L:", 18);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)" R:", 3);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" T:", 3);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" B:", 3);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" DiagV:", 7);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" DiagH:", 7);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  }
LABEL_29:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  padding:", 11);
  *(_QWORD *)((char *)&v82[1] + *(_QWORD *)(v81 - 24)) = 1;
  std::ostream::operator<<();
  if (!*((_BYTE *)this + 926))
    goto LABEL_173;
  if (*((_BYTE *)this + 927))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  annotation:", 14);
    v98[0] = v4 + 64;
    v91.__r_.__value_.__r.__words[0] = v6;
    *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + *(_QWORD *)(v6 - 24)) = v7;
    v22 = (std::ios_base *)((char *)&v91 + *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v22, &v91.__r_.__value_.__r.__words[1]);
    v22[1].__vftable = 0;
    v22[1].__fmtflags_ = -1;
    v91.__r_.__value_.__r.__words[0] = v4 + 24;
    v98[0] = v4 + 64;
    std::streambuf::basic_streambuf();
    v91.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    v95 = 0u;
    v96 = 0u;
    v97 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Layout1:", 8);
    switch(*((_BYTE *)this + 933))
    {
      case 0:
        v23 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1634100548;
        v24 = 1953264993;
        goto LABEL_36;
      case 1:
        v23 = 8;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 8;
        v25 = 0x64656C6261736944;
        goto LABEL_40;
      case 2:
        v23 = 4;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v90, "Text");
        break;
      case 3:
        v23 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1885434439;
        v24 = 1667852400;
LABEL_36:
        *(_DWORD *)((char *)v90.__r_.__value_.__r.__words + 3) = v24;
        v90.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 4:
        v23 = 16;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v90, "LabeledImageList");
        break;
      case 5:
        v23 = 8;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 8;
        v25 = 0x73697370696C6C45;
LABEL_40:
        v90.__r_.__value_.__r.__words[0] = v25;
        v90.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 6:
        v23 = 15;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v90, "VenueButtonText");
        break;
      default:
        v23 = 0;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
        v90.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v90, v23);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)" ImgSrc=", 8);
    switch(*((_BYTE *)this + 935))
    {
      case 0:
        v26 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1634100548;
        v27 = 1953264993;
        goto LABEL_48;
      case 1:
        v26 = 4;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v90, "None");
        break;
      case 2:
        v26 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1952539974;
        v27 = 1701999988;
LABEL_48:
        *(_DWORD *)((char *)v90.__r_.__value_.__r.__words + 3) = v27;
        v90.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 3:
        v26 = 9;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v90, "LabelIcon");
        break;
      case 4:
        v26 = 18;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&v90, "SecondaryLabelIcon");
        break;
      case 5:
        v26 = 15;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v90, "LabelIconSource");
        break;
      case 6:
        v26 = 12;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v90, "PrimaryChild");
        break;
      case 7:
        v26 = 17;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v90, "TertiaryLabelIcon");
        break;
      default:
        v26 = 0;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
        v90.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v90, v26);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)" Layout2:", 9);
    switch(*((_BYTE *)this + 938))
    {
      case 0:
        v28 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1634100548;
        v29 = 1953264993;
        goto LABEL_62;
      case 1:
        v28 = 8;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 8;
        v30 = 0x64656C6261736944;
        goto LABEL_66;
      case 2:
        v28 = 4;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v90, "Text");
        break;
      case 3:
        v28 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1885434439;
        v29 = 1667852400;
LABEL_62:
        *(_DWORD *)((char *)v90.__r_.__value_.__r.__words + 3) = v29;
        v90.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 4:
        v28 = 16;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v90, "LabeledImageList");
        break;
      case 5:
        v28 = 8;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 8;
        v30 = 0x73697370696C6C45;
LABEL_66:
        v90.__r_.__value_.__r.__words[0] = v30;
        v90.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 6:
        v28 = 15;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v90, "VenueButtonText");
        break;
      default:
        v28 = 0;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
        v90.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v90, v28);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)" ImgSrc=", 8);
    switch(*((_BYTE *)this + 940))
    {
      case 0:
        v31 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1634100548;
        v32 = 1953264993;
        goto LABEL_74;
      case 1:
        v31 = 4;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v90, "None");
        break;
      case 2:
        v31 = 7;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 7;
        LODWORD(v90.__r_.__value_.__l.__data_) = 1952539974;
        v32 = 1701999988;
LABEL_74:
        *(_DWORD *)((char *)v90.__r_.__value_.__r.__words + 3) = v32;
        v90.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 3:
        v31 = 9;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v90, "LabelIcon");
        break;
      case 4:
        v31 = 18;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&v90, "SecondaryLabelIcon");
        break;
      case 5:
        v31 = 15;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&v90, "LabelIconSource");
        break;
      case 6:
        v31 = 12;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v90, "PrimaryChild");
        break;
      case 7:
        v31 = 17;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v90, "TertiaryLabelIcon");
        break;
      default:
        v31 = 0;
        *((_BYTE *)&v90.__r_.__value_.__s + 23) = 0;
        v90.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v90, v31);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v90.__r_.__value_.__l.__data_);
      v33 = v97;
      if ((v97 & 0x10) == 0)
        goto LABEL_83;
    }
    else
    {
      v33 = v97;
      if ((v97 & 0x10) == 0)
      {
LABEL_83:
        if ((v33 & 8) == 0)
        {
          v34 = 0;
          HIBYTE(v80) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_98;
        }
        v37 = (const void **)v92;
        v36 = v92[2];
LABEL_90:
        v38 = *v37;
        v34 = v36 - (_QWORD)*v37;
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v34 >= 0x17)
        {
          v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v39 = v34 | 7;
          v40 = v39 + 1;
          p_dst = (void **)operator new(v39 + 1);
          v79 = v34;
          v80 = v40 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v80) = v36 - *(_BYTE *)v37;
          p_dst = (void **)&__dst;
          if (!v34)
            goto LABEL_98;
        }
        memmove(p_dst, v38, v34);
LABEL_98:
        *((_BYTE *)p_dst + v34) = 0;
        v91.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
        *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words
                                  + *(_QWORD *)(v91.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v91.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v96) < 0)
          operator delete((void *)v95);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AF4D64](v98);
        if (v80 >= 0)
          v41 = (void **)&__dst;
        else
          v41 = __dst;
        if (v80 >= 0)
          v42 = HIBYTE(v80);
        else
          v42 = v79;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v41, v42);
        if (SHIBYTE(v80) < 0)
          operator delete(__dst);
        goto LABEL_108;
      }
    }
    v36 = *((_QWORD *)&v96 + 1);
    if (*((_QWORD *)&v96 + 1) < v94)
    {
      *((_QWORD *)&v96 + 1) = v94;
      v36 = v94;
    }
    v37 = (const void **)&v93;
    goto LABEL_90;
  }
LABEL_108:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  [style] placement:(", 22);
  LabelPlacementToShortString(&v91, (_BYTE *)this + 842);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v91;
  else
    v43 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v44 = v91.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v43, v44);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)")", 1);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)" alternates:[", 13);
  gss::to_string(&v91, *((unsigned __int16 *)this + 425));
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v91;
  else
    v45 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v46 = v91.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v45, v46);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"]", 1);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v91.__r_.__value_.__l.__data_);
    if (!*((_BYTE *)this + 958))
      goto LABEL_127;
    goto LABEL_126;
  }
  if (*((_BYTE *)this + 958))
LABEL_126:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"(data placement disabled)", 25);
LABEL_127:
  v47 = *((unsigned __int8 *)this + 847);
  v48 = *((_BYTE *)this + 848);
  v76[0] = *((_BYTE *)this + 832);
  v76[1] = v48;
  v76[2] = 0;
  v77 = v47;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"\n  [placement] resolved:", 24);
  LabelPlacementToShortString(&v91, v76);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v91;
  else
    v49 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v50 = v91.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)" default:", 9);
  LabelPlacementToShortString(&v90, (_BYTE *)this + 837);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v90;
  else
    v51 = (std::string *)v90.__r_.__value_.__r.__words[0];
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    v52 = v90.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v51, v52);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)" snapToDef(can:", 15);
  v53 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" should:", 8);
  v54 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)")\n", 2);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_141;
  }
  else if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_141;
  }
  operator delete(v91.__r_.__value_.__l.__data_);
LABEL_141:
  LOWORD(__dst) = 256;
  v79 = 0;
  if (!(*(unsigned int (**)(md::CaptionedIconLabelPart *, uint64_t, void ***))(*(_QWORD *)this + 536))(this, 1, &__dst))goto LABEL_173;
  memset(&v91, 0, sizeof(v91));
  {
    v75 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v75, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v92[0] = mdm::Allocator::instance(void)::alloc;
  v56 = (_BYTE *)*((_QWORD *)this + 100);
  v57 = (_BYTE *)*((_QWORD *)this + 101);
  if (v56 != v57)
  {
    LabelPlacementToShortString(&v90, v56);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v90;
    else
      v58 = (std::string *)v90.__r_.__value_.__r.__words[0];
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    else
      v59 = v90.__r_.__value_.__l.__size_;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&v91.__r_.__value_.__l.__data_, v58, v59);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    for (i = v56 + 5; i != v57; i += 5)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&v91.__r_.__value_.__l.__data_, " ", 1uLL);
      LabelPlacementToShortString(&v90, i);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v90;
      else
        v61 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      else
        v62 = v90.__r_.__value_.__l.__size_;
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&v91.__r_.__value_.__l.__data_, v61, v62);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  v63 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = v91.__r_.__value_.__l.__size_;
  if (!v63)
  {
    if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_173;
LABEL_180:
    (*(void (**)(_QWORD, std::string::size_type, std::string::size_type))(*(_QWORD *)v92[0] + 40))(v92[0], v91.__r_.__value_.__r.__words[0], v91.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
    v66 = v88;
    if ((v88 & 0x10) == 0)
      goto LABEL_174;
LABEL_181:
    v69 = *((_QWORD *)&v87 + 1);
    if (*((_QWORD *)&v87 + 1) < v85)
    {
      *((_QWORD *)&v87 + 1) = v85;
      v69 = v85;
    }
    v68 = (const void **)&v84;
    goto LABEL_184;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)"    alternates:<", 16);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &v91;
  else
    v64 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v65 = v91.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)v64, v65);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v81, (uint64_t)">\n", 2);
  if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_180;
LABEL_173:
  v66 = v88;
  if ((v88 & 0x10) != 0)
    goto LABEL_181;
LABEL_174:
  if ((v66 & 8) == 0)
  {
    v67 = 0;
    a2[23] = 0;
    goto LABEL_192;
  }
  v68 = (const void **)v83;
  v69 = v83[2];
LABEL_184:
  v70 = *v68;
  v67 = v69 - (_QWORD)*v68;
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v67 >= 0x17)
  {
    v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v71 = v67 | 7;
    v72 = v71 + 1;
    v73 = operator new(v71 + 1);
    *((_QWORD *)a2 + 1) = v67;
    *((_QWORD *)a2 + 2) = v72 | 0x8000000000000000;
    *(_QWORD *)a2 = v73;
    a2 = v73;
    goto LABEL_191;
  }
  a2[23] = v67;
  if (v67)
LABEL_191:
    memmove(a2, v70, v67);
LABEL_192:
  a2[v67] = 0;
  v81 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v82[-1] + *(_QWORD *)(v81 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v82[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v87) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v89);
}

void sub_19FF0A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a57 < 0)
    operator delete(*(void **)v63);
  if (a63 < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v63 + 48) + 40))(*(_QWORD *)(v63 + 48), *(_QWORD *)(v63 + 24), *(_QWORD *)(v63 + 40) & 0x7FFFFFFFFFFFFFFFLL);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

char *gss::to_string(char *result, int a2)
{
  char *v2;
  int v3;
  const char *v4;
  __int128 v5;
  const char *v6;

  v2 = result;
  switch(a2)
  {
    case 0:
      result[23] = 4;
      v3 = 1701736270;
      goto LABEL_5;
    case 1:
      result[23] = 4;
      v3 = 1852793673;
      goto LABEL_5;
    case 2:
      result[23] = 4;
      v3 = 1954047316;
LABEL_5:
      *(_DWORD *)result = v3;
      result[4] = 0;
      return result;
    case 3:
      result[23] = 12;
      strcpy(result, "IconWithText");
      return result;
    case 4:
      v4 = "LabeledImageAnnotation";
      goto LABEL_13;
    case 6:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_19FFB3890;
      strcpy(result, "TextWithLabeledImageAnnotation");
      return result;
    case 7:
      result = (char *)operator new(0x28uLL);
      *(_QWORD *)v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_19FFB3DF0;
      strcpy(result, "IconWithTextAndLabeledImageAnnotation");
      return result;
    case 8:
      result[23] = 14;
      strcpy(result, "TextAnnotation");
      return result;
    case 10:
      v4 = "TextWithTextAnnotation";
LABEL_13:
      *(_OWORD *)result = *(_OWORD *)v4;
      *(_QWORD *)(result + 14) = *(_QWORD *)(v4 + 14);
      *((_WORD *)result + 11) = 5632;
      return result;
    case 11:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)v2 = result;
      v5 = xmmword_19FFB34B0;
      v6 = "IconWithTextAndAnnotation";
      goto LABEL_17;
    case 16:
      result[23] = 17;
      strcpy(result, "GraphicAnnotation");
      return result;
    case 18:
      result = (char *)operator new(0x20uLL);
      *(_QWORD *)v2 = result;
      v5 = xmmword_19FFB34B0;
      v6 = "TextWithGraphicAnnotation";
LABEL_17:
      *(_OWORD *)(v2 + 8) = v5;
      *(_OWORD *)result = *(_OWORD *)v6;
      *(_OWORD *)(result + 9) = *(_OWORD *)(v6 + 9);
      result[25] = 0;
      break;
    case 19:
      result = (char *)operator new(0x28uLL);
      *(_QWORD *)v2 = result;
      *(_OWORD *)(v2 + 8) = xmmword_19FFB3C00;
      strcpy(result, "IconWithTextAndGraphicAnnotation");
      break;
    default:
      result[23] = 0;
      *result = 0;
      break;
  }
  return result;
}

void gss::to_string(std::string *this, int a2)
{
  unsigned int v3;
  char v4;
  BOOL v5;
  std::string::size_type size;
  __int16 v7;
  std::string::size_type v8;
  __int16 v9;
  std::string::value_type __s[8];
  char v11;

  if (a2)
  {
    if (a2 == 0x8000)
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 7;
      strcpy((char *)this, "default");
    }
    else
    {
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      v3 = a2 & 0x1FF;
      if ((a2 & 0x1FF) != 0)
      {
        v4 = 0;
        do
        {
          if ((v3 & 1) != 0)
          {
            size = HIBYTE(this->__r_.__value_.__r.__words[2]);
            if ((size & 0x80u) != 0)
              size = this->__r_.__value_.__l.__size_;
            if (size)
              std::string::append(this, ",", 1uLL);
            switch(v4)
            {
              case 0:
                v11 = 1;
                v7 = 82;
                goto LABEL_26;
              case 1:
                v11 = 2;
                v9 = 21076;
                goto LABEL_24;
              case 2:
                v11 = 1;
                v7 = 84;
                goto LABEL_26;
              case 3:
                v11 = 2;
                v9 = 19540;
                goto LABEL_24;
              case 4:
                v11 = 1;
                v7 = 76;
                goto LABEL_26;
              case 5:
                v11 = 2;
                v9 = 19522;
                goto LABEL_24;
              case 6:
                v11 = 1;
                v7 = 66;
                goto LABEL_26;
              case 7:
                v11 = 2;
                v9 = 21058;
LABEL_24:
                *(_WORD *)__s = v9;
                v8 = 2;
                __s[2] = 0;
                break;
              case 8:
                v11 = 1;
                v7 = 67;
LABEL_26:
                *(_WORD *)__s = v7;
                v8 = 1;
                break;
              case 9:
                v11 = 4;
                strcpy(__s, "None");
                v8 = 4;
                break;
              case 10:
                v11 = 3;
                strcpy(__s, "Ext");
                v8 = 3;
                break;
              default:
                v8 = 0;
                v11 = 0;
                __s[0] = 0;
                break;
            }
            std::string::append(this, __s, v8);
            if (v11 < 0)
              operator delete(*(void **)__s);
          }
          ++v4;
          v5 = v3 > 1;
          v3 >>= 1;
        }
        while (v5);
      }
    }
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 4;
    strcpy((char *)this, "none");
  }
}

BOOL md::CaptionedIconLabelPart::tryAlternatePlacements(uint64_t a1, char a2, const md::LabelLayoutContext *a3, char a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  int v29;
  unsigned __int8 *v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float *i;
  float v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  int v49;
  int v50;
  int v51;
  float *v52;
  float *v53;
  float *v54;
  uint64_t v56;
  uint64_t v60;
  int v61;
  float *v62;
  unint64_t v63;
  void (**v64)(md::MultiCollisionObjectPlacementCandidate *__hidden);
  float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int16 v70;
  __int16 v71;
  uint64_t v72;

  v61 = (int)a3;
  v71 = 256;
  v12 = *(_QWORD **)(*(_QWORD *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 925));
  v72 = 0;
  v13 = v12[3];
  v64 = &off_1E42AB460;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  {
    v56 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v56, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v68 = mdm::Allocator::instance(void)::alloc;
  v70 = 0;
  v60 = a5;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v67 - (uint64_t)v65) >> 4)) <= 1)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 416, 8);
    v65 = (float *)(v15 + (char *)v66 - (char *)v65);
    v66 = v65;
    v67 = v15 + 416;
  }
  v16 = *(unsigned __int8 **)(a1 + 800);
  v17 = *(unsigned __int8 **)(a1 + 808);
  if (v16 != v17)
  {
    v62 = (float *)(v13 + 72);
    do
    {
      while (1)
      {
        if ((a2 & 1) != 0 || (a4 & 1) == 0 && v16[2])
          goto LABEL_7;
        v18 = *v16;
        v20 = v18 == 3 || v18 == 100;
        if ((v18 - 2) >= 2)
        {
          if (v18 == 5)
            v22 = md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(*(md::CaptionedIconLabelPart **)(a1 + 16), *(md::Label **)(a5 + 432), a3);
          else
            v22 = v16[3];
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 432) + 472) + v16[4];
          if (*(_BYTE *)(a1 + 856))
            v22 = (v21 + 16) >> 5;
          else
            v22 = ((v21 + 32) >> 5) & 6;
        }
        v23 = v16[1];
        if (v23 != 16 || ((_DWORD)v22 != 6 ? (v23 = 1) : (v23 = 8), (_DWORD)v22 != 2))
        {
          v24 = (char *)&diagonalDownLabelAnchors;
          switch(v23)
          {
            case 1:
            case 16:
              goto LABEL_39;
            case 4:
              break;
            case 8:
              goto LABEL_31;
            default:
              goto LABEL_36;
          }
        }
        v23 = 4;
        v24 = (char *)&diagonalUpLabelAnchors;
LABEL_31:
        v25 = &v24[2 * v22];
        v26 = *v25;
        v27 = v25[1];
        if (v26 && v27 != 0)
          break;
LABEL_36:
        v29 = 2;
        if ((v61 & 1) == 0)
        {
          a2 = 0;
          v16 += 5;
          if (v16 != v17)
            continue;
        }
        goto LABEL_84;
      }
      if (*(_BYTE *)(a1 + 925) || !*(_BYTE *)(a1 + 927))
      {
        v30 = (unsigned __int8 *)&diagonalUpLabelAnchors;
        if (v23 != 4)
          v30 = (unsigned __int8 *)&horizontalLabelAnchors;
        if (v23 == 8)
          v30 = (unsigned __int8 *)&diagonalDownLabelAnchors;
        v31 = v30[2 * v22];
        if (v31 == 1 || v31 == 2)
          goto LABEL_54;
        if (!*(_BYTE *)(a1 + 927))
          goto LABEL_53;
      }
LABEL_39:
      if (*(_BYTE *)(a1 + 928))
      {
        if (*(_BYTE *)(a1 + 930))
          LOBYTE(v31) = 2;
        else
          LOBYTE(v31) = 1;
      }
      else
      {
LABEL_53:
        LOBYTE(v31) = 0;
      }
LABEL_54:
      v32 = md::CaptionedIconLabelPart::textOriginOffsetForPosition(a1, 0, v22, v20, v23, (float *)(a1 + 872), v62, (uint64_t)v12);
      v34 = v33;
      v63 = 1065353216;
      if ((v23 & 0xC) != 0)
      {
        if (v23 == 4)
        {
          v35 = 0.81915;
          v36 = 0.57358;
        }
        else if (v23 == 8)
        {
          v35 = 0.81915;
          v36 = -0.57358;
        }
        else
        {
          v35 = 1.0;
          v36 = 0.0;
        }
        v63 = __PAIR64__(LODWORD(v36), LODWORD(v35));
      }
      else
      {
        v35 = 1.0;
        v36 = 0.0;
      }
      v37 = *(_QWORD *)(a5 + 432);
      if (*(_BYTE *)(v37 + 18))
      {
        v38 = *(float *)(v37 + 464);
        v39 = *(float *)(v37 + 468);
        *(float *)&v63 = -(float)((float)(v36 * v39) - (float)(v38 * v35));
        *((float *)&v63 + 1) = (float)(v39 * v35) + (float)(v36 * v38);
        v40 = v39 * v34;
        v34 = (float)(v38 * v34) + (float)(v39 * v32);
        v32 = -(float)(v40 - (float)(v38 * v32));
      }
      v41 = v65;
      for (i = v66; i != v41; i -= 52)
      {
        free(*((void **)i - 6));
        free(*((void **)i - 5));
        free(*((void **)i - 3));
      }
      v66 = v41;
      v70 = 0;
      (*(void (**)(_QWORD *, void (***)(md::MultiCollisionObjectPlacementCandidate *__hidden), uint64_t, _QWORD, _QWORD, unint64_t *, float, float))(*v12 + 584))(v12, &v64, v22, *(unsigned __int8 *)(a1 + 930), v31, &v63, *(float *)(a1 + 280) + v32, *(float *)(a1 + 284) + v34);
      a5 = v60;
      if (!*(_BYTE *)(a1 + 960))
        goto LABEL_81;
      if (HIBYTE(v70))
      {
        v43 = *(float *)&v69;
      }
      else
      {
        HIBYTE(v70) = 1;
        v69 = xmmword_19FFB2E30;
        v44 = v65;
        if (v65 == v66)
        {
          v43 = 3.4028e38;
        }
        else
        {
          v45 = 3.4028e38;
          v46 = -3.4028e38;
          v47 = -3.4028e38;
          v43 = 3.4028e38;
          do
          {
            v43 = fminf(v44[12], v43);
            *(float *)&v69 = v43;
            v47 = fmaxf(v47, v44[14]);
            v45 = fminf(v44[13], v45);
            *(_QWORD *)((char *)&v69 + 4) = __PAIR64__(LODWORD(v47), LODWORD(v45));
            v46 = fmaxf(v46, v44[15]);
            *((float *)&v69 + 3) = v46;
            v44 += 52;
          }
          while (v44 != v66);
        }
      }
      v48 = *(float **)(v60 + 432);
      if (v43 >= v48[284]
        && *((float *)&v69 + 2) <= v48[286]
        && *((float *)&v69 + 1) >= v48[285]
        && *((float *)&v69 + 3) <= v48[287])
      {
LABEL_81:
        v49 = md::LabelCollider::collideCandidate(a6, a7, (uint64_t)&v64, (uint64_t)&v71);
        v50 = HIBYTE(v71) ? 0 : v49;
        if (v50 == 1)
        {
          v51 = *(_DWORD *)v16;
          *(_BYTE *)(a8 + 4) = v16[4];
          *(_DWORD *)a8 = v51;
          v29 = 1;
          goto LABEL_84;
        }
      }
      if (v61)
        break;
LABEL_7:
      a2 = 0;
      v16 += 5;
    }
    while (v16 != v17);
  }
  v29 = 2;
LABEL_84:
  v64 = &off_1E42AB460;
  v52 = v65;
  if (v65)
  {
    v53 = v66;
    v54 = v65;
    if (v66 != v65)
    {
      do
      {
        free(*((void **)v53 - 6));
        free(*((void **)v53 - 5));
        free(*((void **)v53 - 3));
        v53 -= 52;
      }
      while (v53 != v52);
      v54 = v65;
    }
    v66 = v52;
    (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v68 + 40))(v68, v54, v67 - (_QWORD)v54);
  }
  return v29 != 2;
}

void sub_19FF0B1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t i;

  if (a23)
  {
    for (i = a24; i != a23; i -= 208)
    {
      free(*(void **)(i - 48));
      free(*(void **)(i - 40));
      free(*(void **)(i - 24));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a26 + 40))(a26, a23, a25 - a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FF0B23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  md::MultiCollisionObjectPlacementCandidate::~MultiCollisionObjectPlacementCandidate((md::MultiCollisionObjectPlacementCandidate *)va);
  _Unwind_Resume(a1);
}

void md::MultiCollisionObjectPlacementCandidate::~MultiCollisionObjectPlacementCandidate(md::MultiCollisionObjectPlacementCandidate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42AB460;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42AB460;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        free(*(void **)(v3 - 48));
        free(*(void **)(v3 - 40));
        free(*(void **)(v3 - 24));
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MultiCollisionObjectPlacementCandidate::collisionBounds(md::MultiCollisionObjectPlacementCandidate *this)
{
  float *v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;

  if (!*((_BYTE *)this + 72))
  {
    *((_BYTE *)this + 72) = 1;
    *(_OWORD *)((char *)this + 40) = xmmword_19FFB2E30;
    v1 = (float *)*((_QWORD *)this + 1);
    v2 = (float *)*((_QWORD *)this + 2);
    if (v1 != v2)
    {
      v3 = 3.4028e38;
      v4 = -3.4028e38;
      v5 = -3.4028e38;
      v6 = 3.4028e38;
      do
      {
        v6 = fminf(v1[20], v6);
        *((float *)this + 10) = v6;
        v5 = fmaxf(v5, v1[22]);
        *((float *)this + 12) = v5;
        v3 = fminf(v1[21], v3);
        *((float *)this + 11) = v3;
        v4 = fmaxf(v4, v1[23]);
        *((float *)this + 13) = v4;
        v1 += 52;
      }
      while (v1 != v2);
    }
  }
  return (uint64_t)this + 40;
}

uint64_t md::MultiCollisionObjectPlacementCandidate::collidesWithItem(md::MultiCollisionObjectPlacementCandidate *this, const md::LabelCollidableItem *a2)
{
  float32x2_t *v2;
  float32x2_t *v3;
  float *v5;
  float32x2_t v6;
  float32x2_t v8[3];

  v2 = (float32x2_t *)*((_QWORD *)this + 1);
  v3 = (float32x2_t *)*((_QWORD *)this + 2);
  if (v2 == v3)
    return 0;
  v5 = (float *)((char *)a2 + 8);
  while (1)
  {
    v6 = v2[10];
    v8[0] = vmul_f32(vsub_f32(v2[11], v6), (float32x2_t)0x3F0000003F000000);
    v8[1] = vadd_f32(v8[0], v6);
    v8[2] = (float32x2_t)1065353216;
    if (gm::OBRect<float>::intersectsUsingInset(v5, (float *)v8)
      && ((*(uint64_t (**)(const md::LabelCollidableItem *, float32x2_t *))(*(_QWORD *)a2 + 16))(a2, v2) & 1) != 0)
    {
      break;
    }
    v2 += 26;
    if (v2 == v3)
      return 0;
  }
  return 1;
}

uint64_t md::MultiCollisionObjectPlacementCandidate::collidesWithObject(md::MultiCollisionObjectPlacementCandidate *this, const md::CollisionObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  md::CollisionObject *v6;
  const md::CollisionObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  float32x2_t *v12;
  float v13;
  uint64_t v14;
  float32x2_t *v15;
  float v16;
  float32x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  float *v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float *v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v5 = *((_QWORD *)a2 + 20);
    do
    {
      if (!v5 && !*((_QWORD *)a2 + 21) || (*(_BYTE *)(v2 + 200) & *((_BYTE *)a2 + 200)) != 0)
        goto LABEL_5;
      v8 = *(_QWORD *)(v2 + 168);
      if (*((_QWORD *)a2 + 21))
      {
        if (!v8)
        {
          v6 = a2;
          v7 = (const md::CollisionObject *)v2;
          goto LABEL_4;
        }
        v9 = *(unsigned int *)(v2 + 176);
        if ((_DWORD)v9)
        {
          v10 = 0;
          v11 = 1;
          while (1)
          {
            v12 = (float32x2_t *)(*(_QWORD *)(v2 + 184) + 24 * v10);
            v13 = v12[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
            if (v13 > 0.0)
            {
              v14 = *((unsigned int *)a2 + 44);
              if ((_DWORD)v14)
                break;
            }
LABEL_13:
            v11 = ++v10 < v9;
            if (v10 == v9)
              goto LABEL_5;
          }
          v15 = (float32x2_t *)*((_QWORD *)a2 + 23);
          while (1)
          {
            v16 = v15[*(unsigned __int8 *)(v2 + 199) + 1].f32[0];
            if (v16 > 0.0)
            {
              v17 = vsub_f32(*v15, *v12);
              if (vaddv_f32(vmul_f32(v17, v17)) < (float)((float)(v16 + v13) * (float)(v16 + v13)))
                break;
            }
            v15 += 3;
            if (!--v14)
              goto LABEL_13;
          }
          if (v11)
            return 1;
        }
      }
      else
      {
        if (v8)
        {
          v6 = (md::CollisionObject *)v2;
          v7 = a2;
LABEL_4:
          if ((md::CollisionObject::circlesCollideWithRects(v6, v7) & 1) != 0)
            return 1;
          goto LABEL_5;
        }
        if (*((_BYTE *)a2 + 196) || *(_BYTE *)(v2 + 196))
        {
          if (md::CollisionObject::rectsCollideWithRectsOBB(a2, (const md::CollisionObject *)v2))
            return 1;
        }
        else
        {
          v18 = *(unsigned int *)(v2 + 176);
          if ((_DWORD)v18 && *((_DWORD *)a2 + 44))
          {
            v19 = 0;
            v20 = 2 * *(unsigned __int8 *)(v2 + 199);
            v21 = 1;
LABEL_32:
            v22 = (float *)(*(_QWORD *)(v2 + 184) + 24 * v19);
            v23 = &v22[2 * *((unsigned __int8 *)a2 + 199)];
            v25 = v23[2];
            v24 = v23 + 2;
            v26 = v25;
            v27 = (float *)*((_QWORD *)a2 + 23);
            v28 = *((unsigned int *)a2 + 44);
            while (vabds_f32(*v27, *v22) >= (float)(v26 + v27[v20 + 2])
                 || vabds_f32(v27[1], v22[1]) >= (float)(v24[1] + v27[v20 + 3]))
            {
              v27 += 6;
              if (!--v28)
              {
                v21 = ++v19 < v18;
                if (v19 == v18)
                  goto LABEL_5;
                goto LABEL_32;
              }
            }
            if (v21)
              return 1;
          }
        }
      }
LABEL_5:
      v2 += 208;
    }
    while (v2 != v3);
  }
  return 0;
}

void md::CaptionedIconLabelPart::generateModelMatrix(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, double *a5, double a6, double a7)
{
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v14 = *(_QWORD *)(a1 + 16) + 152;
  v15 = *(unsigned __int8 *)(a1 + 847);
  generateRotationMatrixMeshPositioningMode((double *)&v57, v14, a4, a5, v15, 1, *(unsigned __int8 *)(a1 + 858));
  v16 = a7 * a6;
  v17 = v16 * *(double *)(a4 + 320);
  v45 = v57;
  v48 = v59;
  v51 = v61;
  v46 = v58;
  v49 = v60;
  v52 = v62;
  v47 = 0;
  v50 = 0;
  v53 = 0;
  v54 = *(_OWORD *)a5;
  v55 = *((_QWORD *)a5 + 2);
  v56 = 0x3FF0000000000000;
  v38 = 0u;
  v40 = 0;
  v43 = 0u;
  v42 = 0u;
  v39 = 0u;
  v37 = 0u;
  v36 = 0u;
  v44 = 0x3FF0000000000000;
  v35 = v17;
  *(double *)&v38 = v17;
  v41 = v17;
  gm::operator*<double,4,4,4>((double *)&v27, (double *)&v45, &v35);
  v18 = v28;
  *a2 = v27;
  a2[1] = v18;
  v19 = v30;
  a2[2] = v29;
  a2[3] = v19;
  v20 = v32;
  a2[4] = v31;
  a2[5] = v20;
  v21 = v34;
  a2[6] = v33;
  a2[7] = v21;
  if (a3)
  {
    generateRotationMatrixMeshPositioningMode((double *)&v57, v14, a4, a5, v15, 1, *(unsigned __int8 *)(a1 + 859));
    v22 = v16 * *(double *)(a4 + 320);
    v45 = v57;
    v48 = v59;
    v51 = v61;
    v46 = v58;
    v49 = v60;
    v52 = v62;
    v47 = 0;
    v50 = 0;
    v53 = 0;
    v54 = *(_OWORD *)a5;
    v55 = *((_QWORD *)a5 + 2);
    v56 = 0x3FF0000000000000;
    v38 = 0u;
    v40 = 0;
    v43 = 0u;
    v42 = 0u;
    v39 = 0u;
    v37 = 0u;
    v36 = 0u;
    v44 = 0x3FF0000000000000;
    v35 = v22;
    *(double *)&v38 = v22;
    v41 = v22;
    gm::operator*<double,4,4,4>((double *)&v27, (double *)&v45, &v35);
    v23 = v28;
    *a3 = v27;
    a3[1] = v23;
    v24 = v30;
    a3[2] = v29;
    a3[3] = v24;
    v25 = v32;
    a3[4] = v31;
    a3[5] = v25;
    v26 = v34;
    a3[6] = v33;
    a3[7] = v26;
  }
}

void ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::CircleOverlayRenderable::SharedResources *md::CircleOverlayRenderable::SharedResources::SharedResources(md::CircleOverlayRenderable::SharedResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3, int a4)
{
  char v4;
  int v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char v39[4];
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;

  v4 = a4;
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (a4)
    v7 = 1;
  else
    v7 = 6;
  if (a4)
    v8 = 0;
  else
    v8 = 7;
  v39[0] = a4 ^ 1;
  v40 = v7;
  v41 = v8;
  v42 = 0x100000000;
  v43 = v8;
  v47 = 15;
  if (((a4 ^ 1) & 1) != 0)
  {
    v17 = *((_QWORD *)a2 + 10);
    v18 = *(std::__shared_weak_count **)(v17 + 280);
    v37 = *(_QWORD *)(v17 + 272);
    v38 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v13 = operator new(0x198uLL);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = &off_1E42E4818;
    v14 = (uint64_t)(v13 + 3);
    v21 = *(_OWORD *)&a3->colorFormatsCount;
    v48 = *(_OWORD *)a3->colorFormats;
    v49 = v21;
    v16 = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 10);
    v10 = *(std::__shared_weak_count **)(v9 + 280);
    v37 = *(_QWORD *)(v9 + 272);
    v38 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = operator new(0x198uLL);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = &off_1E42E4818;
    v14 = (uint64_t)(v13 + 3);
    v15 = *(_OWORD *)&a3->colorFormatsCount;
    v48 = *(_OWORD *)a3->colorFormats;
    v49 = v15;
    v16 = 1;
  }
  v22 = ggl::Circle::FillPipelineState::FillPipelineState(v14, &v37, (uint64_t)v39, &v48, v16);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v22;
  *((_QWORD *)this + 1) = v13;
  if (!v23)
    goto LABEL_20;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v4 & 1) != 0)
      goto LABEL_21;
  }
  else
  {
LABEL_20:
    if ((v4 & 1) != 0)
    {
LABEL_21:
      v26 = v38;
      if (!v38)
        goto LABEL_31;
      v27 = (unint64_t *)&v38->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      goto LABEL_29;
    }
  }
  v26 = v38;
  if (!v38)
    goto LABEL_31;
  v29 = (unint64_t *)&v38->__shared_owners_;
  do
    v28 = __ldaxr(v29);
  while (__stlxr(v28 - 1, v29));
LABEL_29:
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_31:
  v30 = operator new();
  *(_DWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)v30 = &off_1E42B5DE8;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 36) = 65537;
  *(_DWORD *)(v30 + 44) = 0;
  *(_QWORD *)(v30 + 48) = 1;
  *(_WORD *)(v30 + 56) = 0;
  *(_BYTE *)(v30 + 58) = 3;
  *(_QWORD *)(v30 + 67) = 0;
  *(_QWORD *)(v30 + 59) = 0;
  *(_BYTE *)(v30 + 75) = 0;
  *(_QWORD *)(v30 + 132) = 0;
  *(_QWORD *)(v30 + 124) = 0;
  *(_WORD *)(v30 + 188) = 257;
  *(_QWORD *)(v30 + 192) = 0;
  *(_QWORD *)(v30 + 200) = 0;
  *(_BYTE *)(v30 + 208) = 0;
  v31 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = operator new();
  *(_DWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)v32 = &off_1E42B5DE8;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 36) = 65792;
  *(_DWORD *)(v32 + 44) = 0;
  *(_QWORD *)(v32 + 48) = 1;
  *(_WORD *)(v32 + 56) = 0;
  *(_BYTE *)(v32 + 58) = 3;
  *(_QWORD *)(v32 + 67) = 0;
  *(_QWORD *)(v32 + 59) = 0;
  *(_BYTE *)(v32 + 75) = 0;
  *(_QWORD *)(v32 + 132) = 0;
  *(_QWORD *)(v32 + 124) = 0;
  *(_WORD *)(v32 + 188) = 257;
  *(_QWORD *)(v32 + 192) = 0;
  *(_QWORD *)(v32 + 200) = 0;
  *(_BYTE *)(v32 + 208) = 0;
  v33 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = operator new();
  *(_DWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)v34 = &off_1E42B5DE8;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 36) = 66560;
  *(_DWORD *)(v34 + 44) = 1056964608;
  *(_QWORD *)(v34 + 48) = 1;
  *(_WORD *)(v34 + 56) = 0;
  *(_BYTE *)(v34 + 58) = 3;
  *(_QWORD *)(v34 + 67) = 0;
  *(_QWORD *)(v34 + 59) = 0;
  *(_BYTE *)(v34 + 75) = 0;
  *(_QWORD *)(v34 + 132) = 0;
  *(_QWORD *)(v34 + 124) = 0;
  *(_WORD *)(v34 + 188) = 257;
  *(_QWORD *)(v34 + 192) = 0;
  *(_QWORD *)(v34 + 200) = 0;
  *(_BYTE *)(v34 + 208) = 0;
  v35 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  return this;
}

void sub_19FF0BDD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = v1[4];
  v1[4] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[3];
  v1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[2];
  v1[2] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (std::__shared_weak_count *)v1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::Circle::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Circle::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E26A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E26A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::CircleOverlayRenderable::setSharedResources(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;

  a1[7] = a2;
  v4 = (_QWORD *)a1[13];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6 || **(_QWORD **)(v6 + 40) != v4[1])
  {
    v9 = (std::__shared_weak_count *)v4[3];
    v4[2] = 0;
    v4[3] = 0;
    if (!v9)
      goto LABEL_23;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    goto LABEL_21;
  }
  v12 = v4[2];
  if (v12)
    v13 = v12 == v6;
  else
    v13 = 1;
  if (!v13)
    ggl::PipelineSetup::resetData((uint64_t)v4);
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v9 = (std::__shared_weak_count *)v4[3];
  v4[2] = v6;
  v4[3] = v5;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v16);
    while (__stlxr(v11 - 1, v16));
LABEL_21:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_23:
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v19 = (_QWORD *)a1[14];
  v21 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (!v21 || **(_QWORD **)(v21 + 40) != v19[1])
  {
    v24 = (std::__shared_weak_count *)v19[3];
    v19[2] = 0;
    v19[3] = 0;
    if (!v24)
      goto LABEL_48;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_46;
  }
  v27 = v19[2];
  if (v27 && v27 != v21)
    ggl::PipelineSetup::resetData((uint64_t)v19);
  if (v20)
  {
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v24 = (std::__shared_weak_count *)v19[3];
  v19[2] = v21;
  v19[3] = v20;
  if (v24)
  {
    v30 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v30);
    while (__stlxr(v26 - 1, v30));
LABEL_46:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_48:
  if (v20)
  {
    v31 = (unint64_t *)&v20->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v33 = (_QWORD *)a1[15];
  v35 = *a2;
  v34 = (std::__shared_weak_count *)a2[1];
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  if (!v35 || **(_QWORD **)(v35 + 40) != v33[1])
  {
    v38 = (std::__shared_weak_count *)v33[3];
    v33[2] = 0;
    v33[3] = 0;
    if (!v38)
      goto LABEL_73;
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    goto LABEL_71;
  }
  v41 = v33[2];
  if (v41 && v41 != v35)
    ggl::PipelineSetup::resetData((uint64_t)v33);
  if (v34)
  {
    v42 = (unint64_t *)&v34->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v38 = (std::__shared_weak_count *)v33[3];
  v33[2] = v35;
  v33[3] = v34;
  if (v38)
  {
    v44 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v44);
    while (__stlxr(v40 - 1, v44));
LABEL_71:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_73:
  if (v34)
  {
    v45 = (unint64_t *)&v34->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v47 = (_QWORD *)a1[16];
  v49 = *a2;
  v48 = (std::__shared_weak_count *)a2[1];
  if (v48)
  {
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if (v49 && **(_QWORD **)(v49 + 40) == v47[1])
  {
    v55 = v47[2];
    if (v55 && v55 != v49)
      ggl::PipelineSetup::resetData((uint64_t)v47);
    if (v48)
    {
      v56 = (unint64_t *)&v48->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v52 = (std::__shared_weak_count *)v47[3];
    v47[2] = v49;
    v47[3] = v48;
    if (!v52)
      goto LABEL_97;
    v58 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v58);
    while (__stlxr(v54 - 1, v58));
  }
  else
  {
    v52 = (std::__shared_weak_count *)v47[3];
    v47[2] = 0;
    v47[3] = 0;
    if (!v52)
      goto LABEL_97;
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
  }
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (!v48)
      return;
    goto LABEL_98;
  }
LABEL_97:
  if (!v48)
    return;
LABEL_98:
  v59 = (unint64_t *)&v48->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
}

void md::CircleOverlayRenderable::updateWithContext(uint64_t a1, _QWORD *a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BOOL8 v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float64_t v39;
  float64_t v40;
  float64x2_t v41;
  float32x2_t *v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  void (__cdecl *v48)(std::__shared_count *__hidden);
  const void *(__cdecl *v49)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v50;
  float v51;
  float v52;
  double v53;
  float v54;
  os_unfair_lock_s *v55;
  uint32_t os_unfair_lock_opaque;
  os_unfair_lock_s *v57;
  os_unfair_lock_s *v58;
  uint32_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  double v62;
  float v63;
  float v64;
  unint64_t *p_shared_owners;
  uint64_t v66;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v68;
  unint64_t shared_weak_owners;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  float64x2_t v83;
  float64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  void (__cdecl *v89)(std::__shared_weak_count *__hidden);
  void (__cdecl *v90)(std::__shared_weak_count *__hidden);
  double v91;
  __int128 v92;
  __int128 v93;
  double v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  double v100;
  double v101;
  __int128 v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;

  v9 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_24;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*a2 + 8 * v11);
  if (!v12)
    goto LABEL_24;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_24;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_24;
LABEL_11:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_24;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v18 = *(_QWORD *)(v17 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v18 = 0;
LABEL_25:
  v20 = *(double *)a1;
  v19 = *(double *)(a1 + 8);
  v22 = *(double *)(a1 + 16);
  v21 = *(double *)(a1 + 24);
  v23 = a3 != 0;
  v24 = (double)a3;
  if (!a3)
    v24 = -0.0;
  v25 = v20 + v24;
  if (a5)
  {
    v26 = *(_QWORD *)(a1 + 16 * v23 + 144);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16 * v23 + 136);
    v28 = *(_QWORD *)(a1 + 56);
    if (*(double *)(v18 + 40) <= 0.0 || a4 == 0)
      v27 = *(_QWORD *)(v28 + 16);
    else
      v27 = *(_QWORD *)(v28 + 24);
  }
  *(_QWORD *)(v26 + 24) = v27;
  v95 = 0;
  v97 = 0;
  v99 = 0;
  v96 = 0u;
  v93 = 0u;
  v92 = 0u;
  v30 = v22 - v20;
  v91 = v22 - v20;
  v94 = v21 - v19;
  v98 = v22 - v20;
  v100 = v25;
  v101 = v19;
  v102 = xmmword_19FFB33A0;
  gm::operator*<double,4,4,4>(v103.f64, (double *)(v18 + 808), &v91);
  v31 = vcvt_f32_f64(v103);
  v32 = vcvt_f32_f64(v104);
  v33 = vcvt_f32_f64(v105);
  v34 = vcvt_f32_f64(v106);
  v35 = vcvt_f32_f64(v107);
  v36 = vcvt_f32_f64(v108);
  v37 = vcvt_f32_f64(v109);
  v38 = vcvt_f32_f64(v110);
  v39 = *(double *)(a1 + 16 * v23 + 72);
  v103 = 0uLL;
  v40 = *(double *)(*(_QWORD *)&v39 + 8);
  v41.f64[0] = 0.0;
  v41.f64[1] = v39;
  v42 = *(float32x2_t **)(*(_QWORD *)&v39 + 72);
  v103 = v41;
  v104.f64[0] = 0.0;
  v104.f64[1] = v40;
  *(_QWORD *)&v105.f64[1] = v42;
  LOWORD(v105.f64[0]) = 1;
  *v42 = v31;
  v42[1] = v32;
  v42[2] = v33;
  v42[3] = v34;
  v42[4] = v35;
  v42[5] = v36;
  v42[6] = v37;
  v42[7] = v38;
  v43 = *(double *)(v18 + 3768);
  v44 = *(double *)(v18 + 1368);
  v45 = *(double *)(v18 + 1384);
  v46 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v46 + 44));
  v90 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v46 + 20);
  v89 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(v46 + 28);
  os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 44));
  v47 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 44));
  v48 = *(void (__cdecl **)(std::__shared_count *__hidden))(v47 + 4);
  v49 = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(v47 + 12);
  os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 44));
  v50 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v50 + 44));
  v51 = *(float *)v50;
  os_unfair_lock_unlock((os_unfair_lock_t)(v50 + 44));
  if (v51 <= 0.0)
  {
    v52 = fmaxf(*(float *)(v18 + 3080) + *(float *)(v18 + 3072), 1.0);
    v51 = 21.0;
    if (v52 <= 18.0)
    {
      v53 = v52;
      v54 = VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtmd_u64_f64(v53)];
      v51 = v54
          + (v53 - floor(v53))
          * (float)(VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtpd_u64_f64(v53)]
                  - v54);
    }
  }
  v55 = *(os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_lock(v55 + 11);
  os_unfair_lock_opaque = v55[9]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v55 + 11);
  v57 = *(os_unfair_lock_s **)(a1 + 32);
  v58 = v57 + 11;
  os_unfair_lock_lock(v57 + 11);
  v59 = v57[10]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v58);
  v60 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v61 = a5;
  v62 = v43 * v45 / (v44 * v30);
  v63 = v43 / (v44 * v30);
  v64 = v62;
  v60->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v60->__shared_owners_;
  v60->__shared_weak_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E26D8;
  v66 = ggl::BufferData::BufferData((uint64_t)&v60[1], qword_1EE545AD8, 2, 1, 6, 1);
  v60[9].__shared_owners_ = (uint64_t)ggl::Circle::Style::reflection(void)::reflection;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9A30;
  shared_owners = v60[1].__shared_owners_;
  v68 = v60[4].__vftable;
  v68->~__shared_weak_count = v90;
  v68->~__shared_weak_count_0 = v89;
  shared_weak_owners = v60[3].__shared_weak_owners_;
  if (shared_weak_owners <= shared_owners)
    shared_weak_owners = shared_owners;
  v60[3].__shared_owners_ = 0;
  v68->__on_zero_shared = v48;
  v68->__get_deleter = v49;
  if (shared_weak_owners <= shared_owners)
    shared_weak_owners = shared_owners;
  *(float *)&v68->__on_zero_shared_weak = v63;
  *((float *)&v68->__on_zero_shared_weak + 1) = v64 * (float)(0.5 * v51);
  if (shared_weak_owners <= shared_owners)
    shared_weak_owners = shared_owners;
  v60[3].__shared_weak_owners_ = shared_weak_owners;
  LODWORD(v68[1].~__shared_weak_count) = os_unfair_lock_opaque;
  HIDWORD(v68[1].~__shared_weak_count) = v59;
  if (shared_weak_owners > shared_owners)
    shared_owners = shared_weak_owners;
  v60[3].__shared_weak_owners_ = shared_owners;
  v70 = *(_QWORD *)(a1 + 16 * v23 + 8 * v61 + 104);
  v71 = *(uint64_t **)(v70 + 64);
  *v71 = v66;
  v71[1] = 0;
  v72 = *(uint64_t **)(v70 + 160);
  do
    v73 = __ldxr(p_shared_owners);
  while (__stxr(v73 + 1, p_shared_owners));
  v74 = (std::__shared_weak_count *)v72[1];
  *v72 = v66;
  v72[1] = (uint64_t)v60;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (a6)
  {
    v77 = *(_QWORD *)(v70 + 64);
    *(_QWORD *)(v77 + 32) = a6;
    *(_QWORD *)(v77 + 40) = 0;
    v78 = *(_QWORD *)(v70 + 160);
    v79 = *(std::__shared_weak_count **)(v78 + 40);
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 40) = 0;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  do
    v82 = __ldaxr(p_shared_owners);
  while (__stlxr(v82 - 1, p_shared_owners));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (*(_QWORD *)&v105.f64[1])
  {
    v83 = v104;
    if (*(_QWORD *)&v104.f64[1] != *(_QWORD *)&v104.f64[0])
    {
      v84 = v103.f64[1];
      v85 = LOBYTE(v105.f64[0]);
      v86 = BYTE1(v105.f64[0]);
      if (*(_QWORD *)&v103.f64[0] && *(_BYTE *)(*(_QWORD *)&v103.f64[1] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)&v103.f64[0] + 64))();
      if (v85 && !v86)
      {
        v88 = *(_QWORD *)(*(_QWORD *)&v84 + 56);
        v87 = *(_QWORD *)(*(_QWORD *)&v84 + 64);
        if (v87 == v88)
          v88 = *(_QWORD *)(*(_QWORD *)&v84 + 80) - *(_QWORD *)(*(_QWORD *)&v84 + 72);
        if (*(_QWORD *)&v83.f64[0] < v88)
          v88 = *(_QWORD *)&v83.f64[0];
        if (v87 <= *(_QWORD *)&v83.f64[1])
          v87 = *(_QWORD *)&v83.f64[1];
        if (v87 == v88)
          v87 = v88 + *(_QWORD *)(*(_QWORD *)&v84 + 80) - *(_QWORD *)(*(_QWORD *)&v84 + 72);
        *(_QWORD *)(*(_QWORD *)&v84 + 56) = v88;
        *(_QWORD *)(*(_QWORD *)&v84 + 64) = v87;
      }
    }
  }
}

void sub_19FF0CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::Circle::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Circle::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E26D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E26D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Circle::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unint64_t md::CircleOverlayRenderable::collectRenderItems(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int16 *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 136;
  if (a3)
    v4 = 144;
  v9 = *(_QWORD *)(a1 + 16 * (a2 != 0) + v4);
  if (a4)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a4 + 48))(a4, &v9);
  std::__throw_bad_function_call[abi:nn180100]();
  return karo::media::C3mmArea::getEntry(v6, v7, v8);
}

unint64_t karo::media::C3mmArea::getEntry(unsigned __int16 *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3;
  std::mutex *v7;
  double v8;
  float v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 *v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  double v40;
  double v41;
  float v42;
  double v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  _BYTE *v135;
  unsigned int v136;
  int v137;
  char *v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  char *v167;
  int *v168;
  int v169;
  unsigned int v170;
  char v171;
  unsigned int v172;
  int v173;
  unsigned __int16 *v174;
  _DWORD *v175;
  uint64_t v176;
  uint64_t v177;
  std::mutex *v178;
  std::mutex *v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  uint64_t *v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  __int128 v189;
  _QWORD v190[5];
  _BYTE v191[24];
  void *__p;
  char *v193;
  char *v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;

  v7 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  v11 = (uint64_t)a1;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 0;
  v12 = *a1;
  v187 = (uint64_t)a1;
  if (v12 > 1)
  {
    if (v12 != 2)
    {
      LODWORD(v3) = 0;
      v62 = 0;
      goto LABEL_252;
    }
    v46 = *a2;
    v47 = (unsigned int *)*((_QWORD *)a1 + 15);
    v48 = (unsigned int *)*((_QWORD *)a1 + 16);
    if (v47 == v48)
    {
      v113 = (unint64_t *)a2;
      v51 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      if (!v46)
        goto LABEL_183;
    }
    else
    {
      v49 = (unsigned int *)*((_QWORD *)a1 + 15);
      while (1)
      {
        v50 = v49[2];
        if (v50 >= v46)
          break;
        v49 += 3;
        if (v49 == v48)
        {
          v50 = 0;
          v51 = 0;
          goto LABEL_178;
        }
      }
      v51 = *(_QWORD *)v49;
      do
      {
LABEL_178:
        if (v46 <= v47[2])
        {
          v116 = *v47;
          v113 = (unint64_t *)a2;
          v115 = (a2[1] >> (v46 - *v47));
          v114 = a2[2] >> (v46 - *v47);
          if (v46 <= v50)
            goto LABEL_183;
          goto LABEL_176;
        }
        v47 += 3;
      }
      while (v47 != v48);
      v113 = (unint64_t *)a2;
      v114 = 0;
      v115 = 0;
      v116 = -1;
      if (v46 <= v50)
      {
LABEL_183:
        pthread_mutex_lock(*(pthread_mutex_t **)(v187 + 168));
        v119 = *(_QWORD *)(v187 + 152);
        if (!v119)
          goto LABEL_197;
        v120 = v187 + 152;
        while (1)
        {
          v121 = *(_DWORD *)(v119 + 32);
          if (v121 >= v116)
          {
            if (v116 < v121)
              goto LABEL_189;
            v122 = *(_DWORD *)(v119 + 36);
            if (v122 >= v115)
              break;
          }
          v119 += 8;
LABEL_186:
          v119 = *(_QWORD *)v119;
          if (!v119)
          {
            if (v120 != v187 + 152)
            {
              v123 = *(_DWORD *)(v120 + 32);
              if (v116 >= v123)
              {
                if (v123 < v116
                  || (v155 = *(_DWORD *)(v120 + 36), v115 >= v155)
                  && (v155 < v115 || *(_DWORD *)(v120 + 40) <= v114))
                {
                  v127 = *(_QWORD **)(v120 + 48);
                  v124 = *(std::__shared_weak_count **)(v120 + 56);
                  v195 = v127;
                  v196 = v124;
                  if (v124)
                  {
                    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
                    do
                      v129 = __ldxr(p_shared_owners);
                    while (__stxr(v129 + 1, p_shared_owners));
                  }
                  pthread_mutex_unlock(*(pthread_mutex_t **)(v187 + 168));
                  if (v127)
                  {
                    if (v127[4] != v127[5])
                    {
                      v185 = v127;
                      v177 = a3;
                      v179 = v7;
                      v131 = *v113;
                      v130 = v113[1];
                      *(_QWORD *)v191 = 0;
                      __p = 0;
                      v193 = 0;
                      v194 = 0;
                      v132 = HIDWORD(v51);
                      if (v131 > HIDWORD(v51))
                      {
                        v133 = 0;
                        v134 = 0;
                        v188 = HIDWORD(v51);
                        while (1)
                        {
                          v137 = (v131 >> 31) & 2 | v130 & 1 | (v130 >> 30) & 4;
                          if (v134 > 3)
                            break;
                          v135 = &v191[4 * v134++];
                          *(_QWORD *)v191 = v134;
                          *((_DWORD *)v135 + 2) = v137;
LABEL_214:
                          v136 = v131 - 1;
                          v130 = (v130 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
                          v131 = (v131 - 1) | (v131 >> 33 << 32);
                          if (v136 <= v132)
                            goto LABEL_253;
                        }
                        if (v134 == 4)
                        {
                          *(_QWORD *)&v189 = &__p;
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v189, *(int *)&v191[8]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v189, *(int *)&v191[12]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v189, *(int *)&v191[16]);
                          std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100]((uint64_t *)&v189, *(int *)&v191[20]);
                          v133 = v193;
                        }
                        if (v133 < v194)
                        {
                          *(_DWORD *)v133 = v137;
                          v138 = v133 + 4;
LABEL_241:
                          v134 = *(_QWORD *)v191 + 1;
                          v193 = v138;
                          ++*(_QWORD *)v191;
                          v133 = v138;
                          LODWORD(v132) = v188;
                          goto LABEL_214;
                        }
                        v139 = (char *)__p;
                        v140 = v133 - (_BYTE *)__p;
                        v141 = (v133 - (_BYTE *)__p) >> 2;
                        v142 = v141 + 1;
                        if ((unint64_t)(v141 + 1) >> 62)
                          abort();
                        v143 = v194 - (_BYTE *)__p;
                        if ((v194 - (_BYTE *)__p) >> 1 > v142)
                          v142 = v143 >> 1;
                        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
                          v144 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v144 = v142;
                        if (v144)
                        {
                          if (v144 >> 62)
LABEL_281:
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          v145 = operator new(4 * v144);
                        }
                        else
                        {
                          v145 = 0;
                        }
                        v146 = &v145[4 * v141];
                        *(_DWORD *)v146 = v137;
                        v138 = v146 + 4;
                        if (v133 != v139)
                        {
                          v147 = v133 - v139 - 4;
                          if (v147 < 0x2C)
                          {
                            v148 = v133;
                            goto LABEL_238;
                          }
                          if ((unint64_t)(v133 - v145 - v140) < 0x20)
                          {
                            v148 = v133;
                            goto LABEL_238;
                          }
                          v149 = (v147 >> 2) + 1;
                          v148 = &v133[-4 * (v149 & 0x7FFFFFFFFFFFFFF8)];
                          v150 = &v145[4 * v141 - 16];
                          v151 = v133 - 16;
                          v152 = v149 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v153 = *(_OWORD *)v151;
                            *(v150 - 1) = *((_OWORD *)v151 - 1);
                            *v150 = v153;
                            v150 -= 2;
                            v151 -= 32;
                            v152 -= 8;
                          }
                          while (v152);
                          v146 -= 4 * (v149 & 0x7FFFFFFFFFFFFFF8);
                          if (v149 != (v149 & 0x7FFFFFFFFFFFFFF8))
                          {
                            do
                            {
LABEL_238:
                              v154 = *((_DWORD *)v148 - 1);
                              v148 -= 4;
                              *((_DWORD *)v146 - 1) = v154;
                              v146 -= 4;
                            }
                            while (v148 != v139);
                          }
                        }
                        __p = v146;
                        v193 = v138;
                        v194 = &v145[4 * v144];
                        if (v139)
                          operator delete(v139);
                        goto LABEL_241;
                      }
LABEL_253:
                      v159 = *v185;
                      v158 = v185[1];
                      *(_QWORD *)&v189 = MEMORY[0x1E0C809B0];
                      *((_QWORD *)&v189 + 1) = 3221225472;
                      v190[0] = ___ZNK4karo5media8C3mmArea10getEntryV2ERKNS0_7C3mmKeyERNS0_9C3mmEntryE_block_invoke;
                      v190[1] = &__block_descriptor_48_e36_B16__0r__C3mmRoot__C3mmKey_IIII_Ii_8l;
                      v190[2] = v131;
                      v190[3] = v130;
                      v160 = &v189;
                      if (v159 == v158)
                      {
                        v161 = v177;
                        v7 = v179;
                      }
                      else
                      {
                        v161 = v177;
                        v7 = v179;
                        do
                        {
                          if ((((uint64_t (*)(__int128 *, uint64_t))v190[0])(v160, v159) & 1) != 0)
                            goto LABEL_259;
                          v159 += 24;
                        }
                        while (v159 != v158);
                        v159 = v158;
                      }
LABEL_259:

                      if (v159 != v185[1])
                      {
                        v162 = v185[4];
                        v163 = *(_DWORD *)(v159 + 16);
                        if (*(_QWORD *)v191)
                        {
                          v164 = 0;
                          v165 = 0;
                          while (1)
                          {
                            v166 = 4 * (*(_QWORD *)v191 + ~v164);
                            v167 = (char *)__p + v166;
                            v168 = (int *)&v191[v166 + 8];
                            if (*(_QWORD *)v191 > 4uLL)
                              v168 = (int *)v167;
                            v169 = *v168;
                            v170 = *(unsigned __int16 *)(v162 + 16 * v163);
                            if (((v170 >> (2 * v169)) & 1) == 0)
                              break;
                            v171 = 0;
                            v172 = 0;
                            if ((v169 + 1) > 1)
                              v173 = v169 + 1;
                            else
                              v173 = 1;
                            do
                            {
                              if (((v170 >> v171) & 1) != 0)
                              {
                                if (v172)
                                  v163 = *(_DWORD *)(v162 + 16 * v172 + 12);
                                else
                                  ++v163;
                                v172 = v163;
                              }
                              v171 += 2;
                              --v173;
                            }
                            while (v173);
                            v164 = ++v165;
                            if (*(_QWORD *)v191 <= (unint64_t)v165)
                              goto LABEL_275;
                          }
                        }
                        else
                        {
LABEL_275:
                          v174 = (unsigned __int16 *)(v162 + 16 * v163);
                          *(_QWORD *)v161 = *(_QWORD *)(v174 + 2);
                          LODWORD(v174) = *v174;
                          *(_WORD *)(v161 + 20) = (_WORD)v174;
                          *(_DWORD *)(v161 + 12) = (_DWORD)v174 == 0;
                          *(_DWORD *)(v161 + 16) = 0;
                        }
                      }
                      if (__p)
                      {
                        v193 = (char *)__p;
                        operator delete(__p);
                      }
                    }
                    v117 = 0;
                    v118 = 0;
                    if (!v124)
                    {
LABEL_203:
                      v62 = v118 & 0xFFFFFFFF00000000;
                      LODWORD(v3) = v117;
                      goto LABEL_252;
                    }
LABEL_199:
                    v125 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                    goto LABEL_203;
                  }
LABEL_198:
                  v118 = v115 << 32;
                  v117 = v116;
                  if (!v124)
                    goto LABEL_203;
                  goto LABEL_199;
                }
              }
            }
LABEL_197:
            v195 = 0;
            v196 = 0;
            pthread_mutex_unlock(*(pthread_mutex_t **)(v187 + 168));
            v124 = 0;
            goto LABEL_198;
          }
        }
        if (v115 >= v122)
        {
          if (*(_DWORD *)(v119 + 40) < v114)
            v119 += 8;
          else
            v120 = v119;
          goto LABEL_186;
        }
LABEL_189:
        v120 = v119;
        goto LABEL_186;
      }
    }
LABEL_176:
    v117 = 0;
    v118 = 0;
    goto LABEL_203;
  }
  v176 = a3;
  v178 = v7;
  v13 = *(_QWORD *)a2;
  if (*((_DWORD *)a1 + 24) <= *(_QWORD *)a2)
  {
    v16 = 0;
    v15 = 0;
    v52 = 0;
    v14 = a2;
    v53 = *((_QWORD *)a2 + 1);
    LODWORD(v3) = -1;
    while (1)
    {
      if (v15 < v52)
      {
        *(_QWORD *)v15 = v13;
        *((_QWORD *)v15 + 1) = v53;
        v15 += 16;
      }
      else
      {
        v55 = (v15 - v16) >> 4;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60)
          abort();
        if ((v52 - v16) >> 3 > v56)
          v56 = (v52 - v16) >> 3;
        if ((unint64_t)(v52 - v16) >= 0x7FFFFFFFFFFFFFF0)
          v57 = 0xFFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57)
        {
          if (v57 >> 60)
            goto LABEL_281;
          v58 = (char *)operator new(16 * v57);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[16 * v55];
        *(_QWORD *)v59 = v13;
        *((_QWORD *)v59 + 1) = v53;
        if (v15 == v16)
        {
          v61 = &v58[16 * v55];
        }
        else
        {
          v60 = &v58[16 * v55];
          do
          {
            v61 = v60 - 16;
            *((_OWORD *)v60 - 1) = *((_OWORD *)v15 - 1);
            v15 -= 16;
            v60 -= 16;
          }
          while (v15 != v16);
        }
        v52 = &v58[16 * v57];
        v15 = v59 + 16;
        if (v16)
          operator delete(v16);
        v16 = v61;
        v11 = v187;
      }
      v54 = v13 - 1;
      v53 = (v53 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
      v13 = (v13 - 1) | (v13 >> 33 << 32);
      if (*(_DWORD *)(v11 + 96) > v54)
        goto LABEL_4;
    }
  }
  v14 = a2;
  v15 = 0;
  v16 = 0;
LABEL_4:
  v17 = 0;
  *(_OWORD *)v191 = 0uLL;
  *(_DWORD *)&v191[16] = 1;
  *(_WORD *)&v191[20] = 0;
  v18 = (uint64_t *)(v11 + 24);
  v19 = v14;
  while (1)
  {
    if (v16 == v15)
    {
      LODWORD(v3) = 0;
      goto LABEL_249;
    }
    v20 = *((_DWORD *)v15 - 4);
    v21 = *v18;
    if (*v18)
      break;
LABEL_5:
    v15 -= 16;
  }
  v23 = *((_DWORD *)v15 - 3);
  v22 = *((_DWORD *)v15 - 2);
  v24 = v11 + 24;
  v25 = *((_DWORD *)v15 - 1);
  do
  {
    v26 = *(_DWORD *)(v21 + 28);
    if (v26 < v20)
    {
LABEL_9:
      v21 += 8;
      goto LABEL_10;
    }
    if (v26 > v20)
      goto LABEL_13;
    v27 = *(_DWORD *)(v21 + 32);
    if (v27 < v23)
      goto LABEL_9;
    if (v27 > v23)
      goto LABEL_13;
    v28 = *(_DWORD *)(v21 + 36);
    if (v28 < v22)
      goto LABEL_9;
    if (v28 > v22)
    {
LABEL_13:
      v24 = v21;
    }
    else if (*(_DWORD *)(v21 + 40) < v25)
    {
      v21 += 8;
    }
    else
    {
      v24 = v21;
    }
LABEL_10:
    v21 = *(_QWORD *)v21;
  }
  while (v21);
  if ((uint64_t *)v24 == v18)
    goto LABEL_5;
  v29 = (__int128 *)(v24 + 28);
  v30 = *(_DWORD *)(v24 + 28);
  if (v20 < v30)
    goto LABEL_5;
  if (v20 <= v30)
  {
    v38 = *(_DWORD *)(v24 + 32);
    if (v23 < v38)
      goto LABEL_5;
    if (v23 <= v38)
    {
      v39 = *(_DWORD *)(v24 + 36);
      if (v22 < v39 || v22 <= v39 && v25 < *(_DWORD *)(v24 + 40))
        goto LABEL_5;
    }
  }
  v31 = *(_QWORD *)(v24 + 44);
  v190[0] = v31;
  v32 = *v29;
  v189 = *v29;
  v186 = HIDWORD(v31);
  v33 = *(_QWORD *)(v11 + 48);
  v34 = (*(_QWORD *)(v11 + 56) - v33) >> 2;
  v35 = -1;
  while (1)
  {
    v36 = (v35 + 1);
    if (v34 - 1 <= v36)
      break;
    v37 = *(_DWORD *)(v33 + 4 * (v35 + 2));
    ++v35;
    if (v37 > v31)
      goto LABEL_36;
  }
  if (v34 <= v36)
    LODWORD(v36) = 0;
LABEL_36:
  if (karo::media::C3mmArea::getEntryAt(v11, v190, v36, (uint64_t)v191, SHIDWORD(v31), *(double *)&v32, v8, v9, v10))
  {
    if (*v19 == *((_DWORD *)v15 - 4))
    {
      v44 = v187;
      if (v19[1] == *((_DWORD *)v15 - 3) && v19[2] == *((_DWORD *)v15 - 2) && *((_DWORD *)v15 - 1) == v19[3])
      {
        v40 = *(double *)v191;
        *(_OWORD *)v176 = *(_OWORD *)v191;
        *(_QWORD *)(v176 + 14) = *(_QWORD *)&v191[14];
        v45 = 1;
        LODWORD(v3) = 0;
      }
      else
      {
        v17 = 1;
        v45 = 5;
      }
    }
    else
    {
      v17 = 1;
      v45 = 5;
      v44 = v187;
    }
  }
  else
  {
    v45 = 1;
    v44 = v187;
    LODWORD(v3) = v36;
  }
  if (v45 == 5)
  {
    LODWORD(v3) = 0;
    if ((v17 & 1) != 0 && v16 != v15)
    {
      v175 = v19;
      while (1)
      {
        if (!*(_DWORD *)&v191[8])
        {
LABEL_204:
          LODWORD(v3) = 0;
          goto LABEL_249;
        }
        v63 = *(unsigned __int16 *)&v191[20];
        v65 = *((_DWORD *)v15 - 2);
        v64 = *((_DWORD *)v15 - 1);
        v67 = *((_DWORD *)v15 - 4);
        v66 = *((_DWORD *)v15 - 3);
        v68 = *((_DWORD *)v15 - 8);
        v184 = *((_DWORD *)v15 - 7);
        v180 = *((_DWORD *)v15 - 5);
        v181 = *((_DWORD *)v15 - 6);
        LODWORD(v189) = *(_DWORD *)&v191[8];
        if (v67 + 1 == v68)
          break;
        if ((v191[20] & 1) != 0)
        {
          v78 = *(_QWORD *)(v44 + 48);
          v79 = (*(_QWORD *)(v44 + 56) - v78) >> 2;
          v80 = -1;
          while (1)
          {
            v3 = (v80 + 1);
            if (v79 - 1 <= v3)
              break;
            v81 = *(_DWORD *)(v78 + 4 * (v80 + 2));
            ++v80;
            if (v81 > *(_DWORD *)&v191[8])
              goto LABEL_111;
          }
          if (v79 <= v3)
            LODWORD(v3) = 0;
LABEL_111:
          if (!karo::media::C3mmArea::getEntryAt(v44, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))
            goto LABEL_249;
        }
        else
        {
          LODWORD(v3) = 0;
        }
        LODWORD(v82) = v3;
        if ((v63 & 4) != 0)
        {
          v83 = *(_QWORD *)(v187 + 48);
          v84 = (*(_QWORD *)(v187 + 56) - v83) >> 2;
          v85 = -1;
          while (1)
          {
            v82 = (v85 + 1);
            if (v84 - 1 <= v82)
              break;
            v86 = *(_DWORD *)(v83 + 4 * (v85 + 2));
            ++v85;
            if (v86 > v189)
              goto LABEL_119;
          }
          if (v84 <= v82)
            LODWORD(v82) = 0;
LABEL_119:
          LODWORD(v3) = v82;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v82, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        if ((v63 & 0x10) != 0)
        {
          v87 = *(_QWORD *)(v187 + 48);
          v88 = (*(_QWORD *)(v187 + 56) - v87) >> 2;
          v89 = -1;
          while (1)
          {
            v3 = (v89 + 1);
            if (v88 - 1 <= v3)
              break;
            v90 = *(_DWORD *)(v87 + 4 * (v89 + 2));
            ++v89;
            if (v90 > v189)
              goto LABEL_127;
          }
          if (v88 <= v3)
            LODWORD(v3) = 0;
LABEL_127:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        if ((v63 & 0x40) != 0)
        {
          v91 = *(_QWORD *)(v187 + 48);
          v92 = (*(_QWORD *)(v187 + 56) - v91) >> 2;
          v93 = -1;
          while (1)
          {
            v3 = (v93 + 1);
            if (v92 - 1 <= v3)
              break;
            v94 = *(_DWORD *)(v91 + 4 * (v93 + 2));
            ++v93;
            if (v94 > v189)
              goto LABEL_135;
          }
          if (v92 <= v3)
            LODWORD(v3) = 0;
LABEL_135:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        if ((v63 & 0x100) != 0)
        {
          v95 = *(_QWORD *)(v187 + 48);
          v96 = (*(_QWORD *)(v187 + 56) - v95) >> 2;
          v97 = -1;
          while (1)
          {
            v3 = (v97 + 1);
            if (v96 - 1 <= v3)
              break;
            v98 = *(_DWORD *)(v95 + 4 * (v97 + 2));
            ++v97;
            if (v98 > v189)
              goto LABEL_143;
          }
          if (v96 <= v3)
            LODWORD(v3) = 0;
LABEL_143:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        if ((v63 & 0x400) != 0)
        {
          v99 = *(_QWORD *)(v187 + 48);
          v100 = (*(_QWORD *)(v187 + 56) - v99) >> 2;
          v101 = -1;
          while (1)
          {
            v3 = (v101 + 1);
            if (v100 - 1 <= v3)
              break;
            v102 = *(_DWORD *)(v99 + 4 * (v101 + 2));
            ++v101;
            if (v102 > v189)
              goto LABEL_151;
          }
          if (v100 <= v3)
            LODWORD(v3) = 0;
LABEL_151:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        if ((v63 & 0x1000) != 0)
        {
          v103 = *(_QWORD *)(v187 + 48);
          v104 = (*(_QWORD *)(v187 + 56) - v103) >> 2;
          v105 = -1;
          while (1)
          {
            v3 = (v105 + 1);
            if (v104 - 1 <= v3)
              break;
            v106 = *(_DWORD *)(v103 + 4 * (v105 + 2));
            ++v105;
            if (v106 > v189)
              goto LABEL_159;
          }
          if (v104 <= v3)
            LODWORD(v3) = 0;
LABEL_159:
          LODWORD(v82) = v3;
          if (!karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))goto LABEL_249;
        }
        LODWORD(v3) = v82;
        if ((v63 & 0x4000) == 0)
          goto LABEL_246;
        v107 = *(_QWORD *)(v187 + 48);
        v108 = (*(_QWORD *)(v187 + 56) - v107) >> 2;
        v109 = -1;
        while (1)
        {
          v3 = (v109 + 1);
          if (v108 - 1 <= v3)
            break;
          v110 = *(_DWORD *)(v107 + 4 * (v109 + 2));
          ++v109;
          if (v110 > v189)
            goto LABEL_167;
        }
        if (v108 <= v3)
          LODWORD(v3) = 0;
LABEL_167:
        if ((karo::media::C3mmArea::getEntryAt(v187, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43) & 1) == 0)
          goto LABEL_249;
LABEL_168:
        v44 = v187;
        if (*v19 == v68)
        {
LABEL_169:
          if (v19[1] == v184)
          {
            v111 = v19[2];
            if (v111 >= v181 && v181 >= v111)
            {
              v112 = v19[3];
              if (v112 >= v180 && v180 >= v112)
              {
                LODWORD(v3) = 0;
                *(_OWORD *)v176 = *(_OWORD *)v191;
                *(_QWORD *)(v176 + 14) = *(_QWORD *)&v191[14];
                goto LABEL_249;
              }
            }
          }
        }
LABEL_80:
        v15 -= 16;
        if (v16 == v15)
          goto LABEL_204;
      }
      v69 = 0;
      LODWORD(v3) = 0;
      v183 = 2 * v66;
      v182 = 2 * v65;
      v70 = 2 * v64;
      do
      {
        v71 = (1 << (2 * v69)) & v63;
        if (v71)
        {
          v72 = v69 & 1 | v182;
          v73 = v70 | (v69 >> 2);
          v74 = *(_QWORD *)(v44 + 48);
          v75 = (*(_QWORD *)(v44 + 56) - v74) >> 2;
          v76 = -1;
          while (1)
          {
            v3 = (v76 + 1);
            if (v75 - 1 <= v3)
              break;
            v77 = *(_DWORD *)(v74 + 4 * (v76 + 2));
            ++v76;
            if (v77 > v189)
              goto LABEL_95;
          }
          if (v75 <= v3)
            LODWORD(v3) = 0;
LABEL_95:
          if (!karo::media::C3mmArea::getEntryAt(v44, &v189, v3, (uint64_t)v191, v186, v40, v41, v42, v43))
            goto LABEL_249;
          if (((v69 >> 1) & 1 | v183) == v184)
          {
            v44 = v187;
            if (v72 >= v181 && v181 >= v72 && v73 >= v180 && v180 >= v73)
            {
              v19 = v175;
              if (*v175 != v68)
                goto LABEL_80;
              goto LABEL_169;
            }
          }
          else
          {
            v44 = v187;
          }
        }
        ++v69;
      }
      while (v69 != 8);
      v19 = v175;
      if (v71)
        goto LABEL_168;
LABEL_246:
      if (v3 < (unint64_t)((uint64_t)(*(_QWORD *)(v187 + 56) - *(_QWORD *)(v187 + 48)) >> 2))
      {
        v156 = *(_QWORD *)(v187 + 72) + 32 * v3;
        if (*(_QWORD *)(v156 + 8) != *(_QWORD *)(v156 + 16))
          LODWORD(v3) = 0;
      }
    }
  }
LABEL_249:
  if (v16)
    operator delete(v16);
  v62 = 0;
  v7 = v178;
LABEL_252:
  std::mutex::unlock(v7);
  return v62 | v3;
}

void sub_19FF0DB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;

  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v30 - 104);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

BOOL ___ZNK4karo5media8C3mmArea10getEntryV2ERKNS0_7C3mmKeyERNS0_9C3mmEntryE_block_invoke(_DWORD *a1, _DWORD *a2)
{
  return *a2 == a1[8] && a2[1] == a1[9] && a2[2] == a1[10] && a1[11] == a2[3];
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:nn180100](uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      abort();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v18 = v6 - v9 - 4;
      if (v18 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v19 = (v18 >> 2) + 1;
      v7 = &v6[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v16 -= v19 & 0x7FFFFFFFFFFFFFF8;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t karo::media::C3mmArea::getEntryAt(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, int a5, double a6, double a7, float a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v40;
  float v41;
  __int16 v42;
  unint64_t v43;
  _DWORD *v44;
  uint8_t v45[16];

  v9 = a3;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = (float *)(v10 + 32 * a3);
  v13 = *v11;
  v12 = (uint64_t *)(v11 + 2);
  v14 = v13;
  if (v13 <= 0.0)
    return 0;
  v15 = *(float *)(v10 + 32 * a3 + 4);
  if (v15 <= 0.0)
    return 0;
  v18 = (*a2 - *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * a3));
  if (*(_WORD *)a1)
  {
    if (a5 > 1)
      goto LABEL_43;
    v19 = *v12;
    v20 = *(_QWORD *)(v10 + 32 * a3 + 16);
    if (v19 == v20 || !v19 || (v18 & 0x80000000) != 0)
      goto LABEL_29;
  }
  else
  {
    if (a5 != 1)
    {
      if (!a5)
      {
        v22 = *v12;
        v23 = *(_QWORD *)(v10 + 32 * a3 + 16);
        if (*v12 == v23 || !v22 || (v18 & 0x80000000) != 0 || (v24 = v23 - v22, (int)v18 >= (int)v24))
        {
          result = 0;
          LODWORD(v18) = v18 + 8;
          goto LABEL_44;
        }
        v25 = v24 - v18;
        if (v24 != v18)
        {
          v26 = v22 + v18;
          v27 = *(unsigned __int8 *)(v22 + v18);
          *(_DWORD *)(a4 + 12) = v27 & 3;
          if ((v27 & 3) == 3)
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v28 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v45 = 0;
              _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, "Unknown tile state!", v45, 2u);
            }

            result = 0;
            goto LABEL_44;
          }
          *(_DWORD *)(a4 + 16) = (v27 >> 2) & 1;
          v42 = (v27 & 3) != 0 ? 0 : 85;
          *(_WORD *)(a4 + 20) = v42;
          if (v25 < 2)
          {
            v35 = 0.0;
            v43 = 3;
          }
          else
          {
            LOBYTE(a8) = *(_BYTE *)(v26 + 1);
            v35 = (float)LODWORD(a8);
            v43 = 4;
          }
          if (v43 <= v25)
          {
            result = 0;
            if (v25 < 2)
              goto LABEL_44;
            LODWORD(v37) = v43 + 4;
            if (v43 + 4 > v25)
              goto LABEL_44;
            v44 = (_DWORD *)(v26 + v43);
            LOWORD(a9) = *((_WORD *)v44 - 1);
            *(float *)&a9 = (float)vmovl_s16(*(int16x4_t *)&a9).i32[0];
            v40 = *v44;
            goto LABEL_45;
          }
        }
      }
LABEL_43:
      result = 0;
      goto LABEL_44;
    }
    v19 = *v12;
    v20 = *(_QWORD *)(v10 + 32 * a3 + 16);
    if (v19 == v20 || !v19 || (v18 & 0x80000000) != 0)
      goto LABEL_29;
  }
  v29 = v20 - v19;
  if ((int)v18 < (int)v20 - (int)v19)
  {
    v30 = (unsigned __int16 *)(v19 + v18);
    v31 = v29 - v18;
    if (v31 < 2)
    {
      v32 = 0;
      v33 = 0;
    }
    else
    {
      v32 = *v30;
      v33 = 2;
    }
    v34 = v33 | 1;
    v35 = 0.0;
    if ((v33 | 1uLL) <= v31)
    {
      LOBYTE(v35) = *((_BYTE *)v30 + v33);
      v35 = (float)LODWORD(v35);
      v33 |= 1uLL;
    }
    v36 = v33 + 2;
    if (v33 + 2 <= v31)
    {
      v37 = v33 + 6;
      v38 = v31 < 2 || v34 > v31;
      if (!v38 && v37 <= v31)
      {
        LOWORD(a9) = *(unsigned __int16 *)((char *)v30 + v36 - 2);
        *(float *)&a9 = (float)vmovl_s16(*(int16x4_t *)&a9).i32[0];
        v40 = *(_DWORD *)((char *)v30 + v37 - 4);
        *(_WORD *)(a4 + 20) = v32;
        *(_DWORD *)(a4 + 12) = v32 == 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_45:
        v41 = v14 * *(float *)&a9;
        *(float *)a4 = v41;
        *(float *)(a4 + 4) = v41 + (float)(v35 * v15);
        *(_DWORD *)(a4 + 8) = v40;
        LODWORD(v18) = v18 + v37;
        result = 1;
        goto LABEL_44;
      }
    }
    goto LABEL_43;
  }
LABEL_29:
  result = 0;
  LODWORD(v18) = v18 + 9;
LABEL_44:
  *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v9) + v18;
  return result;
}

uint64_t karo::media::C3mmArea::insertFile(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  unsigned int v22;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 168));
  v21 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v7 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = (_QWORD *)(a1 + 152);
  v10 = *(uint64_t **)(a1 + 152);
  if (!v10)
  {
    v12 = (uint64_t *)(a1 + 152);
    goto LABEL_16;
  }
  do
  {
    while (1)
    {
      v12 = v10;
      v13 = *((_DWORD *)v10 + 8);
      if (v21 >= v13)
      {
        if (v13 < v21)
          goto LABEL_13;
        v14 = *((_DWORD *)v12 + 9);
        if (HIDWORD(v21) >= v14)
        {
          if (v14 < HIDWORD(v21))
            goto LABEL_13;
          v15 = *((_DWORD *)v12 + 10);
          if (v22 >= v15)
            break;
        }
      }
      v10 = (uint64_t *)*v12;
      v11 = v12;
      if (!*v12)
        goto LABEL_16;
    }
    if (v15 >= v22)
      goto LABEL_19;
LABEL_13:
    v10 = (uint64_t *)v12[1];
  }
  while (v10);
  v11 = v12 + 1;
LABEL_16:
  v16 = operator new(0x40uLL);
  v16[4] = v21;
  *((_DWORD *)v16 + 10) = v22;
  v16[6] = v7;
  v16[7] = v6;
  *v16 = 0;
  v16[1] = 0;
  v16[2] = v12;
  *v11 = v16;
  v17 = **(_QWORD **)(a1 + 144);
  if (v17)
  {
    *(_QWORD *)(a1 + 144) = v17;
    v16 = (_QWORD *)*v11;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v16);
  ++*(_QWORD *)(a1 + 160);
  v6 = 0;
LABEL_19:
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 168));
}

void sub_19FF0E1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::MaskingOverlayRenderableConfig::~MaskingOverlayRenderableConfig((md::MaskingOverlayRenderableConfig *)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 168));
  _Unwind_Resume(a1);
}

BOOL karo::media::`anonymous namespace'::readMetaLevels(uint64_t *a1, int a2, uint64_t a3)
{
  int v3;
  int v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  char v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float *v38;
  unint64_t v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  float *v43;
  float *v44;
  _DWORD *v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t *v53;
  int v56;
  uint8_t buf[16];
  float32x4x3_t v58;

  if (!a2)
    return *(_QWORD *)(a3 + 128) != *(_QWORD *)(a3 + 120);
  v5 = 0;
  v56 = 0;
  v6 = 0;
  v53 = (unint64_t *)(a3 + 120);
  v7.i64[1] = 0xFFFFFF03FFFFFF02;
  v8.i64[1] = 0;
  while (1)
  {
    v9 = a1[1];
    v10 = a1[2];
    v11 = v10 + 1;
    if (v10 + 1 <= v9)
    {
      a1[2] = v11;
      v56 = *(unsigned __int8 *)(*a1 + v10++);
    }
    v12 = v10 + 4;
    if (v10 + 4 <= v9)
    {
      a1[2] = v12;
      v3 = *(_DWORD *)(*a1 + v10);
      v10 += 4;
    }
    v13 = v10 + 1;
    if (v10 + 1 <= v9)
    {
      a1[2] = v13;
      v6 = *(unsigned __int8 *)(*a1 + v10++);
    }
    v14 = v10 + 4;
    if (v10 + 4 > v9)
      return 0;
    a1[2] = v14;
    v15 = v11 > v9 || v12 > v9;
    if (v15 || v13 > v9)
      return 0;
    v17 = *a1;
    v18 = (char *)(*a1 + v14);
    v19 = (v3 - 10);
    if (v6 == 1)
    {
      v20 = *(unsigned int *)(v17 + v10);
      if ((_DWORD)v20)
      {
        v21 = (char *)operator new(*(unsigned int *)(v17 + v10));
        v22 = &v21[v20];
        bzero(v21, v20);
        v23 = v21;
      }
      else
      {
        v23 = 0;
        v22 = 0;
      }
      if (!lzma_decompress_bytes())
        goto LABEL_34;
      if (v22 - v23 != v20)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v27 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Mismatching data size. Unable to decode c3mm", buf, 2u);
        }

        goto LABEL_34;
      }
      v18 = v23;
    }
    else
    {
      v23 = 0;
      v20 = (v3 - 10);
    }
    if (v56 == 4)
    {
      if (!v20)
        goto LABEL_34;
      v24 = *v18;
      v25 = *(_QWORD *)(a3 + 120);
      v26 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 128) - v25) >> 2);
      if (v24 <= v26)
      {
        if (v24 < v26)
          *(_QWORD *)(a3 + 128) = v25 + 12 * *v18;
      }
      else
      {
        std::vector<karo::media::C3mmLevel>::__append((uint64_t)v53, v24 - v26);
      }
      if ((_DWORD)v24)
      {
        v29 = *v53;
        v30 = v20 >> 1;
        v31 = 2;
        if (v20 > 2)
          v31 = v20;
        v32 = (unint64_t)(v31 - 1) >> 1;
        if (v30 < v32)
          v32 = v20 >> 1;
        if (v32 >= v24 - 1)
          v32 = v24 - 1;
        if (v32 > 0xF
          && ((v33 = v18 + 1, v29 >= (unint64_t)&v18[2 * v32 + 3]) || (unint64_t)v33 >= v29 + 12 * v32 + 12))
        {
          v36 = v32 + 1;
          v37 = v36 & 7;
          if ((v36 & 7) == 0)
            v37 = 8;
          v34 = v36 - v37;
          v38 = (float *)*v53;
          v39 = v34;
          v40 = 0u;
          do
          {
            v7 = (int8x16_t)vld2_s8(v33);
            v33 += 16;
            v41 = vqtbl1q_s8(v7, (int8x16_t)xmmword_19FFB3790);
            v42 = vqtbl1q_s8(v8, (int8x16_t)xmmword_19FFB3790);
            v43 = v38 + 24;
            vst3q_f32(v38, *(float32x4x3_t *)(&v40 - 1));
            v44 = v38 + 12;
            v58.val[0] = (float32x4_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_19FFB3780);
            v58.val[2] = (float32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_19FFB3780);
            v58.val[1] = 0u;
            vst3q_f32(v44, v58);
            v38 = v43;
            v39 -= 8;
          }
          while (v39);
          v35 = (2 * v34) | 1;
        }
        else
        {
          v34 = 0;
          v35 = 1;
        }
        v45 = (_DWORD *)(v29 + 12 * v34 + 8);
        v46 = v24 - v34;
        v47 = v30 - v34;
        while (v47)
        {
          v48 = v35 + 2;
          if (v35 + 2 > v20)
            break;
          v49 = (unsigned __int8 *)&v18[v35];
          v50 = *v49;
          LODWORD(v49) = v49[1];
          *((_QWORD *)v45 - 1) = v50;
          *v45 = (_DWORD)v49;
          v45 += 3;
          --v47;
          v35 = v48;
          if (!--v46)
            goto LABEL_61;
        }
LABEL_34:
        v28 = 0;
        if (!v23)
          goto LABEL_36;
LABEL_35:
        operator delete(v23);
        goto LABEL_36;
      }
    }
LABEL_61:
    v51 = a1[1];
    if (a1[2] + v19 < v51)
      v51 = a1[2] + v19;
    a1[2] = v51;
    v28 = 1;
    if (v23)
      goto LABEL_35;
LABEL_36:
    if ((v28 & 1) == 0)
      return 0;
    if (++v5 == a2)
      return *(_QWORD *)(a3 + 128) != *(_QWORD *)(a3 + 120);
  }
}

void sub_19FF0E5D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL karo::media::`anonymous namespace'::readRootIndex(_QWORD *a1, uint64_t a2, char ***a3)
{
  int v3;
  int v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  _BOOL8 result;
  unint64_t v17;
  char **v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  char *v39;
  unint64_t v40;

  v7 = a1[1];
  v8 = a1[2];
  v9 = v8 + 1;
  if (v8 + 1 > v7)
  {
    v10 = 0;
  }
  else
  {
    a1[2] = v9;
    v10 = *(unsigned __int8 *)(*a1 + v8++);
  }
  v11 = v8 + 4;
  if (v8 + 4 > v7)
  {
    v12 = v8 + 4;
  }
  else
  {
    a1[2] = v11;
    v3 = *(_DWORD *)(*a1 + v8);
    v12 = v8 + 8;
    v8 += 4;
    if (v12 <= v7)
    {
      a1[2] = v12;
      v4 = *(_DWORD *)(*a1 + v12 - 4);
      v8 = v12;
    }
  }
  v13 = v8 + 1;
  if (v8 + 1 > v7)
  {
    v14 = 0;
  }
  else
  {
    a1[2] = v13;
    v14 = *(unsigned __int8 *)(*a1 + v8++);
  }
  v15 = v8 + 2;
  if (v15 > v7)
    return 0;
  result = 0;
  a1[2] = v15;
  if (v9 <= v7 && v11 <= v7 && v12 <= v7 && v13 <= v7)
  {
    v17 = *(unsigned __int16 *)(*a1 + v15 - 2);
    *(_DWORD *)(a2 + 4) = v10;
    *(_DWORD *)(a2 + 8) = v14;
    v18 = *a3;
    v19 = **a3;
    v20 = (*a3)[1];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3);
    v22 = v17 - v21;
    if (v17 <= v21)
    {
      if (v17 >= v21)
      {
LABEL_38:
        if (!(_DWORD)v17)
          return 1;
        v34 = a1[1];
        v35 = a1[2];
        if (v35 + 4 > v34)
          return 0;
        v36 = 0;
        v37 = 0;
        do
        {
          a1[2] = v35 + 4;
          v38 = *(_DWORD *)(*a1 + v35);
          v39 = &(**a3)[v36];
          *(_DWORD *)v39 = v10;
          *((_DWORD *)v39 + 1) = v3 + (v38 >> 20);
          *((_DWORD *)v39 + 2) = ((v38 >> 8) & 0xFFF) + v4;
          *((_DWORD *)v39 + 3) = v38;
          *((_QWORD *)v39 + 2) = 0x100000000;
          ++v37;
          if (24 * v17 - 24 == v36)
            break;
          v40 = v35 + 8;
          v36 += 24;
          v35 += 4;
        }
        while (v40 <= v34);
        return v37 >= v17;
      }
      v33 = &v19[24 * v17];
    }
    else
    {
      v23 = v18[2];
      if (0xAAAAAAAAAAAAAAABLL * ((v23 - v20) >> 3) < v22)
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v19) >> 3);
        v25 = 2 * v24;
        if (2 * v24 <= v17)
          v25 = v17;
        if (v24 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v25;
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v27 = (char *)operator new(24 * v26);
        v28 = &v27[24 * v21];
        v29 = &v27[24 * v17];
        v30 = v28;
        do
        {
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          *((_QWORD *)v30 + 2) = 0x200000000;
          v30 += 24;
        }
        while (v30 != v29);
        v31 = *v18;
        if (v20 != *v18)
        {
          do
          {
            v32 = *(_OWORD *)(v20 - 24);
            *((_QWORD *)v28 - 1) = *((_QWORD *)v20 - 1);
            *(_OWORD *)(v28 - 24) = v32;
            v28 -= 24;
            v20 -= 24;
          }
          while (v20 != v31);
          v20 = *v18;
        }
        *v18 = v28;
        v18[1] = v29;
        v18[2] = &v27[24 * v26];
        if (v20)
          operator delete(v20);
        goto LABEL_38;
      }
      v33 = &v20[24 * v22];
      do
      {
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = 0;
        *((_QWORD *)v20 + 2) = 0x200000000;
        v20 += 24;
      }
      while (v20 != v33);
    }
    v18[1] = v33;
    goto LABEL_38;
  }
  return result;
}

uint64_t karo::media::`anonymous namespace'::readChildInfo(_QWORD *a1, uint64_t a2, int ***a3)
{
  unint64_t v3;
  unint64_t v8;
  int **v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int v29;
  int *v30;

  v3 = a1[2] + 4;
  if (v3 > a1[1])
    return 0;
  a1[2] = v3;
  v8 = *(unsigned int *)(*a1 + v3 - 4);
  v9 = *a3;
  v10 = (uint64_t)(*a3)[4];
  v11 = (char *)(*a3)[5];
  v12 = (uint64_t)&v11[-v10] >> 4;
  v13 = v8 - v12;
  if (v8 <= v12)
  {
    if (v8 < v12)
      v9[5] = (int *)(v10 + 16 * v8);
    if ((_DWORD)v8)
    {
LABEL_21:
      v23 = a1[1];
      v24 = a1[2];
      v25 = (_WORD *)v10;
      while (v24 + 2 <= v23)
      {
        a1[2] = v24 + 2;
        *v25 = *(_WORD *)(*a1 + v24);
        v25 += 8;
        v24 += 2;
        if (!--v8)
          goto LABEL_24;
      }
      return 0;
    }
  }
  else
  {
    v14 = v9[6];
    if (v13 <= ((char *)v14 - v11) >> 4)
    {
      bzero((*a3)[5], 16 * v13);
      v9[5] = (int *)&v11[16 * v13];
    }
    else
    {
      v15 = (uint64_t)v14 - v10;
      v16 = v15 >> 3;
      if (v15 >> 3 <= v8)
        v16 = v8;
      v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0;
      v18 = 0xFFFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v16;
      if (v18 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = 16 * v18;
      v20 = (char *)operator new(16 * v18);
      v21 = &v20[16 * v12];
      v30 = (int *)&v20[v19];
      bzero(v21, 16 * v13);
      v22 = (int *)&v21[16 * v13];
      if (v11 != (char *)v10)
      {
        do
        {
          *((_OWORD *)v21 - 1) = *((_OWORD *)v11 - 1);
          v21 -= 16;
          v11 -= 16;
        }
        while (v11 != (char *)v10);
        v11 = (char *)v9[4];
      }
      v9[4] = (int *)v21;
      v9[5] = v22;
      v9[6] = v30;
      if (v11)
        operator delete(v11);
    }
    v9 = *a3;
    v10 = (uint64_t)(*a3)[4];
    if ((_DWORD)v8)
      goto LABEL_21;
  }
LABEL_24:
  v26 = *v9;
  v27 = v9[1];
  if (*v9 != v27)
  {
    v28 = 0;
    do
    {
      v26[4] = v28;
      v29 = *v26;
      v26 += 6;
    }
    while (v26 != v27);
  }
  return 1;
}

uint64_t karo::media::`anonymous namespace'::readBounds(_QWORD *a1, uint64_t a2, float a3, float a4, float a5, double a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  float *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;

  v6 = a1[1];
  v7 = a1[2];
  v8 = v7 + 4;
  if (v7 + 4 > v6)
  {
    v9 = v7 + 4;
  }
  else
  {
    a3 = *(float *)(*a1 + v7);
    a1[2] = v8;
    v9 = v7 + 8;
    v7 += 4;
  }
  v10 = v9;
  if (v9 <= v6)
  {
    a4 = *(float *)(*a1 + v7);
    a1[2] = v9;
    v10 = v9 + 4;
  }
  if (v10 > v6)
    return 0;
  a1[2] = v10;
  if (v8 > v6 || v9 > v6)
    return 0;
  v13 = *(unsigned int *)(*a1 + v10 - 4);
  *(float *)(a2 + 24) = a3;
  *(float *)(a2 + 28) = a4;
  if (!(_DWORD)v13)
    return 1;
  v14 = (float *)(*(_QWORD *)(a2 + 32) + 8);
  while (v10 + 1 <= v6)
  {
    a1[2] = v10 + 1;
    v15 = v10 + 3 <= v6;
    if (v10 + 3 > v6)
      return v15;
    v16 = *a1 + v10;
    LOBYTE(a5) = *(_BYTE *)v16;
    a1[2] = v10 + 3;
    LOWORD(a6) = *(_WORD *)(v16 + 1);
    *(_QWORD *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = a3 * (float)SLODWORD(a6);
    a5 = *(float *)&a6 + (float)(a4 * (float)LODWORD(a5));
    *(v14 - 1) = *(float *)&a6;
    *v14 = a5;
    v14 += 4;
    v10 += 3;
    if (!--v13)
      return 1;
  }
  v17 = a1[2] + 2;
  if (v17 > v6)
    return 0;
  v15 = 0;
  a1[2] = v17;
  return v15;
}

uint64_t karo::media::`anonymous namespace'::loadObjectTree(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  _QWORD *v29;
  unint64_t v30;
  char **v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  _BOOL4 v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  char *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  char *v61;
  size_t v62;
  uint64_t v63;
  std::__shared_weak_count_vtbl *v64;
  _QWORD *v65;
  unint64_t v66;
  char **v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  int64_t v112;
  unint64_t v113;
  char *v114;
  void *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  char *v122;
  BOOL v123;
  int64_t v124;
  unint64_t v125;
  char *v126;
  void *v127;
  char *v128;
  unint64_t v129;
  char *v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  unint64_t v143;
  void *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  int64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 *v171;
  _OWORD *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  unint64_t v188;
  char *v189;
  int64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 *v197;
  _OWORD *v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  NSObject *v209;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  int v215;
  char **v216;
  char *v217;
  std::__shared_weak_count *v218;
  __int16 v219;
  uint8_t buf[16];
  int v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  void *__p[2];
  __int128 v225;
  __int128 v226;

  v225 = 0u;
  v226 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = a1[1];
  v10 = a1[2];
  if (v11 - v10 < 3)
  {
LABEL_2:
    v12 = 1;
    goto LABEL_257;
  }
  v216 = (char **)(a2 + 184);
  while (1)
  {
    if (v10 + 1 > v11)
    {
      v208 = v10 + 2;
      if (v208 <= v11)
      {
        v12 = 0;
        a1[2] = v208;
        goto LABEL_257;
      }
      goto LABEL_256;
    }
    a1[2] = v10 + 1;
    v14 = v10 + 3;
    if (v11 < v10 + 3)
      goto LABEL_256;
    v15 = *a1;
    v16 = *(unsigned __int8 *)(*a1 + v10);
    a1[2] = v14;
    if (v11 - (v10 + 3) < (unint64_t)*(unsigned __int16 *)(v15 + v14 - 2) - 3)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v209 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v209, OS_LOG_TYPE_ERROR, "ObjectTree entry is outside specified data section", buf, 2u);
      }

      goto LABEL_256;
    }
    if (v16 == 1)
      break;
    if (!v16)
    {
      v17 = v10 + 11;
      if (v17 <= v11)
      {
        v6 = *(_QWORD *)(v15 + v14);
        a1[2] = v17;
        v14 = v17;
      }
      v18 = v14 + 8;
      if (v14 + 8 > v11)
      {
        v19 = v14 + 8;
      }
      else
      {
        v7 = *(_QWORD *)(v15 + v14);
        a1[2] = v18;
        v19 = v14 + 16;
        v14 += 8;
        if (v19 <= v11)
        {
          v8 = *(std::__shared_weak_count_vtbl **)(v15 + v18);
          a1[2] = v19;
          v14 = v19;
        }
      }
      v24 = v14 + 4;
      if (v14 + 4 <= v11)
      {
        v9 = *(_DWORD *)(v15 + v14);
        a1[2] = v24;
        v14 += 4;
      }
      if (v14 + 2 <= v11)
      {
        v12 = 0;
        a1[2] = v14 + 2;
        if (v17 > v11 || v18 > v11 || v19 > v11 || v24 > v11)
          goto LABEL_257;
        v25 = *(unsigned __int16 *)(v15 + v14);
        v26 = (std::__shared_weak_count *)operator new(0x58uLL);
        v27 = v26;
        v26->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        v26->__shared_weak_owners_ = 0;
        v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C34F8;
        v29 = &v26[1].__vftable;
        v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D88;
        v26[2].__shared_owners_ = 0;
        v26[2].__shared_weak_owners_ = 0;
        v26[3].__vftable = 0;
        v26[3].__shared_owners_ = 0;
        v222 = &v26[1].__vftable;
        v223 = v26;
        v26[1].__shared_owners_ = v6;
        v26[1].__shared_weak_owners_ = v7;
        v26[2].__vftable = v8;
        LODWORD(v26[2].__shared_owners_) = v9;
        if (*((_QWORD *)&v226 + 1))
        {
          v30 = *((_QWORD *)__p[1] + (*((_QWORD *)&v226 + 1) + (_QWORD)v226 - 1) / 0xAAuLL)
              + 24 * ((*((_QWORD *)&v226 + 1) + (_QWORD)v226 - 1) % 0xAAuLL);
          --*(_DWORD *)(v30 + 16);
          v31 = (char **)(*(_QWORD *)v30 + 40);
          *(_QWORD *)buf = v29;
          *(_QWORD *)&buf[8] = v27;
          do
            v32 = __ldxr(p_shared_owners);
          while (__stxr(v32 + 1, p_shared_owners));
          std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v31, (uint64_t)buf);
          v33 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_37;
          v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
            v36 = *((_QWORD *)&v226 + 1);
            if (*((_QWORD *)&v226 + 1))
              goto LABEL_38;
          }
          else
          {
LABEL_37:
            v36 = *((_QWORD *)&v226 + 1);
            if (*((_QWORD *)&v226 + 1))
            {
LABEL_38:
              v37 = v226;
              v38 = __p[1];
              do
              {
                v39 = v36 + v37 - 1;
                v40 = v38[v39 / 0xAA];
                v41 = v39 % 0xAA;
                if (*(_DWORD *)(v40 + 24 * v41 + 16))
                  break;
                v42 = *(std::__shared_weak_count **)(v40 + 24 * v41 + 8);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v38 = __p[1];
                v45 = v225;
                v46 = 170 * ((uint64_t)(v225 - (unint64_t)__p[1]) >> 3) - 1;
                if ((void *)v225 == __p[1])
                  v46 = 0;
                v47 = *((_QWORD *)&v226 + 1);
                v37 = v226;
                v36 = --*((_QWORD *)&v226 + 1);
                if ((unint64_t)(v46 - (v47 + v226) + 1) >= 0x154)
                {
                  operator delete(*(void **)(v225 - 8));
                  *(_QWORD *)&v225 = v45 - 8;
                }
              }
              while (v36);
              v27 = v223;
              if (!v223)
                goto LABEL_4;
            }
          }
LABEL_244:
          v206 = (unint64_t *)&v27->__shared_owners_;
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          goto LABEL_4;
        }
        *(_QWORD *)buf = v26 + 1;
        *(_QWORD *)&buf[8] = v26;
        do
          v84 = __ldxr(p_shared_owners);
        while (__stxr(v84 + 1, p_shared_owners));
        v214 = v25;
        std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v216, (uint64_t)buf);
        v85 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v86 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        do
          v88 = __ldxr(p_shared_owners);
        while (__stxr(v88 + 1, p_shared_owners));
        v89 = (char *)v225;
        v90 = (char *)__p[1];
        v91 = v225 - (unint64_t)__p[1];
        v92 = (uint64_t)(v225 - (unint64_t)__p[1]) >> 3;
        v219 = v214;
        *(_QWORD *)buf = v29;
        *(_QWORD *)&buf[8] = v27;
        v217 = 0;
        v218 = 0;
        v221 = v214;
        if ((void *)v225 == __p[1])
          v93 = 0;
        else
          v93 = 170 * v92 - 1;
        v212 = *((_QWORD *)&v226 + 1);
        v213 = *((_QWORD *)&v226 + 1) + v226;
        if (v93 != *((_QWORD *)&v226 + 1) + (_QWORD)v226)
        {
          v110 = *((_QWORD *)&v226 + 1);
LABEL_239:
          v202 = *(_QWORD *)&v90[8 * (v213 / 0xAA)] + 24 * (v213 % 0xAA);
          *(_OWORD *)v202 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          *(_DWORD *)(v202 + 16) = v214;
          *((_QWORD *)&v226 + 1) = v110 + 1;
          v203 = v218;
          if (v218)
          {
            v204 = (unint64_t *)&v218->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          goto LABEL_244;
        }
        v94 = v226 - 170;
        if ((unint64_t)v226 >= 0xAA)
        {
          *(_QWORD *)&v226 = v226 - 170;
          v95 = (char *)__p[1] + 8;
          v96 = *(_QWORD *)__p[1];
          __p[1] = (char *)__p[1] + 8;
          if (*((_QWORD *)&v225 + 1) != (_QWORD)v225)
          {
LABEL_208:
            *(_QWORD *)v89 = v96;
            *(_QWORD *)&v225 = v225 + 8;
            v110 = v212;
            v213 = v212 + v94;
LABEL_238:
            v90 = (char *)__p[1];
            goto LABEL_239;
          }
          v97 = __p[0];
          if (v95 > __p[0])
          {
            v98 = (v95 - (char *)__p[0]) >> 3;
            if (v98 >= -1)
              v99 = v98 + 1;
            else
              v99 = v98 + 2;
            v100 = v99 >> 1;
            v101 = &v95[-8 * (v99 >> 1)];
            v102 = v225 - (_QWORD)v95;
            if ((char *)v225 == v95)
              v95 = (char *)v225;
            else
              memmove(&v95[-8 * (v99 >> 1)], v95, v225 - (_QWORD)v95);
            v89 = &v101[v102];
            __p[1] = &v95[-8 * v100];
            *(_QWORD *)&v225 = &v101[v102];
            goto LABEL_208;
          }
          if ((void *)v225 == __p[0])
            v119 = 1;
          else
            v119 = (uint64_t)(v225 - (unint64_t)__p[0]) >> 2;
          if (!(v119 >> 61))
          {
            v120 = operator new(8 * v119);
            v121 = v119 >> 2;
            v122 = &v120[8 * (v119 >> 2)];
            v124 = v89 - v95;
            v123 = v89 == v95;
            v89 = v122;
            if (v123)
              goto LABEL_206;
            v89 = &v122[v124 & 0xFFFFFFFFFFFFFFF8];
            v125 = v124 - 8;
            if (v125 >= 0x38)
            {
              v167 = 8 * v121;
              v168 = &v120[8 * v121] - v95;
              v126 = &v120[8 * (v119 >> 2)];
              if (v168 >= 0x20)
              {
                v169 = (v125 >> 3) + 1;
                v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                v126 = &v122[v170];
                v171 = (__int128 *)(v90 + 24);
                v172 = &v120[v167 + 16];
                v173 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v174 = *v171;
                  *(v172 - 1) = *(v171 - 1);
                  *v172 = v174;
                  v171 += 2;
                  v172 += 2;
                  v173 -= 4;
                }
                while (v173);
                if (v169 == (v169 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_206:
                  __p[0] = v120;
                  __p[1] = &v120[8 * (v119 >> 2)];
                  *(_QWORD *)&v225 = v89;
                  *((_QWORD *)&v225 + 1) = &v120[8 * v119];
                  if (v97)
                    operator delete(v97);
                  goto LABEL_208;
                }
                v95 += v170;
              }
            }
            else
            {
              v126 = &v120[8 * (v119 >> 2)];
            }
            do
            {
              v175 = *(_QWORD *)v95;
              v95 += 8;
              *(_QWORD *)v126 = v175;
              v126 += 8;
            }
            while (v126 != v89);
            goto LABEL_206;
          }
LABEL_259:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v111 = (char *)__p[0];
        v112 = *((_QWORD *)&v225 + 1) - (unint64_t)__p[0];
        if (v92 < (unint64_t)((uint64_t)(*((_QWORD *)&v225 + 1) - (unint64_t)__p[0]) >> 3))
        {
          if (*((_QWORD *)&v225 + 1) != (_QWORD)v225)
          {
            *(_QWORD *)v89 = operator new(0xFF0uLL);
            *(_QWORD *)&v225 = v225 + 8;
LABEL_237:
            v110 = v212;
            goto LABEL_238;
          }
          v127 = operator new(0xFF0uLL);
          v128 = v90;
          if (v111 != v90)
          {
LABEL_213:
            *((_QWORD *)v128 - 1) = v127;
            v177 = (char *)__p[1];
            v178 = (char *)v225;
            __p[1] = (char *)__p[1] - 8;
            v179 = *(_QWORD *)__p[1];
            __p[1] = v177;
            if ((_QWORD)v225 != *((_QWORD *)&v225 + 1))
            {
LABEL_236:
              *(_QWORD *)v178 = v179;
              *(_QWORD *)&v225 = v225 + 8;
              goto LABEL_237;
            }
            v180 = __p[0];
            if (v177 > __p[0])
            {
              v181 = (v177 - (char *)__p[0]) >> 3;
              if (v181 >= -1)
                v182 = v181 + 1;
              else
                v182 = v181 + 2;
              v183 = v182 >> 1;
              v184 = &v177[-8 * (v182 >> 1)];
              v185 = v225 - (_QWORD)v177;
              if ((_QWORD)v225 != (_QWORD)v177)
              {
                memmove(&v177[-8 * (v182 >> 1)], v177, v225 - (_QWORD)v177);
                v177 = (char *)__p[1];
              }
              v178 = &v184[v185];
              __p[1] = &v177[-8 * v183];
              *(_QWORD *)&v225 = v178;
              goto LABEL_236;
            }
            if ((void *)v225 == __p[0])
              v186 = 1;
            else
              v186 = (uint64_t)(v225 - (unint64_t)__p[0]) >> 2;
            if (v186 >> 61)
              goto LABEL_259;
            v187 = operator new(8 * v186);
            v188 = v186 >> 2;
            v189 = &v187[8 * (v186 >> 2)];
            v190 = v178 - v177;
            v123 = v178 == v177;
            v178 = v189;
            if (!v123)
            {
              v178 = &v189[v190 & 0xFFFFFFFFFFFFFFF8];
              v191 = v190 - 8;
              if (v191 < 0x38)
              {
                v192 = &v187[8 * (v186 >> 2)];
                goto LABEL_233;
              }
              v193 = 8 * v188;
              v194 = &v187[8 * v188] - v177;
              v192 = &v187[8 * (v186 >> 2)];
              if (v194 < 0x20)
              {
                do
                {
LABEL_233:
                  v201 = *(_QWORD *)v177;
                  v177 += 8;
                  *(_QWORD *)v192 = v201;
                  v192 += 8;
                }
                while (v192 != v178);
                goto LABEL_234;
              }
              v195 = (v191 >> 3) + 1;
              v196 = 8 * (v195 & 0x3FFFFFFFFFFFFFFCLL);
              v192 = &v189[v196];
              v197 = (__int128 *)(v177 + 16);
              v198 = &v187[v193 + 16];
              v199 = v195 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v200 = *v197;
                *(v198 - 1) = *(v197 - 1);
                *v198 = v200;
                v197 += 2;
                v198 += 2;
                v199 -= 4;
              }
              while (v199);
              if (v195 != (v195 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v177 += v196;
                goto LABEL_233;
              }
            }
LABEL_234:
            __p[0] = v187;
            __p[1] = &v187[8 * (v186 >> 2)];
            *(_QWORD *)&v225 = v178;
            *((_QWORD *)&v225 + 1) = &v187[8 * v186];
            if (v180)
              operator delete(v180);
            goto LABEL_236;
          }
          if (v89 == v90)
            v129 = 1;
          else
            v129 = v112 >> 2;
          if (v129 >> 61)
            goto LABEL_259;
          v130 = (char *)operator new(8 * v129);
          v131 = (v129 + 3) >> 2;
          v128 = &v130[8 * v131];
          v132 = v128;
          if (v89 != v90)
          {
            v132 = &v128[(v89 - v111) & 0xFFFFFFFFFFFFFFF8];
            v133 = v89 - v111 - 8;
            v134 = &v130[8 * v131];
            v135 = v90;
            if (v133 > 0x37)
            {
              v136 = 8 * v131;
              v134 = &v130[8 * v131];
              v135 = v90;
              if ((unint64_t)(v134 - v111) >= 0x20)
              {
                v137 = (v133 >> 3) + 1;
                v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
                v134 = &v128[v138];
                v139 = (__int128 *)(v90 + 16);
                v140 = &v130[v136 + 16];
                v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v142 = *v139;
                  *((_OWORD *)v140 - 1) = *(v139 - 1);
                  *(_OWORD *)v140 = v142;
                  v139 += 2;
                  v140 += 32;
                  v141 -= 4;
                }
                while (v141);
                if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  __p[0] = v130;
                  __p[1] = v128;
                  *(_QWORD *)&v225 = &v128[(v89 - v111) & 0xFFFFFFFFFFFFFFF8];
                  *((_QWORD *)&v225 + 1) = &v130[8 * v129];
LABEL_212:
                  operator delete(v90);
                  v128 = (char *)__p[1];
                  goto LABEL_213;
                }
                v135 = &v90[v138];
              }
            }
            do
            {
              v176 = *(_QWORD *)v135;
              v135 += 8;
              *(_QWORD *)v134 = v176;
              v134 += 8;
            }
            while (v134 != v132);
          }
          __p[0] = v130;
          __p[1] = v128;
          *(_QWORD *)&v225 = v132;
          *((_QWORD *)&v225 + 1) = &v130[8 * v129];
          if (!v90)
            goto LABEL_213;
          goto LABEL_212;
        }
        if (*((void **)&v225 + 1) == __p[0])
          v113 = 1;
        else
          v113 = v112 >> 2;
        if (v113 >> 61)
          goto LABEL_259;
        v114 = (char *)operator new(8 * v113);
        v211 = v111;
        v115 = operator new(0xFF0uLL);
        v116 = &v114[8 * v92];
        v117 = &v114[8 * v113];
        if (v92 == v113)
        {
          if (v91 < 1)
          {
            if (v89 == v90)
              v143 = 1;
            else
              v143 = v91 >> 2;
            if (v143 >> 61)
              goto LABEL_259;
            v144 = v115;
            v116 = (char *)operator new(8 * v143);
            v117 = &v116[8 * v143];
            operator delete(v114);
            v114 = v116;
            v115 = v144;
          }
          else
          {
            v118 = v92 + 2;
            if (v92 >= -1)
              v118 = v92 + 1;
            v116 -= 8 * (v118 >> 1);
          }
        }
        *(_QWORD *)v116 = v115;
        v145 = v116 + 8;
        if (v89 == v90)
        {
          v146 = v211;
LABEL_195:
          __p[0] = v114;
          __p[1] = v116;
          *(_QWORD *)&v225 = v145;
          *((_QWORD *)&v225 + 1) = v117;
          v110 = v212;
          if (v146)
            operator delete(v146);
          goto LABEL_238;
        }
        while (v116 != v114)
        {
          v147 = v116;
LABEL_171:
          v148 = *((_QWORD *)v89 - 1);
          v89 -= 8;
          *((_QWORD *)v147 - 1) = v148;
          v116 = v147 - 8;
          if (v89 == __p[1])
          {
            v146 = (char *)__p[0];
            goto LABEL_195;
          }
        }
        if (v145 < v117)
        {
          v149 = (v117 - v145) >> 3;
          if (v149 >= -1)
            v150 = v149 + 1;
          else
            v150 = v149 + 2;
          v151 = &v145[8 * (v150 >> 1)];
          v147 = &v116[8 * (v150 >> 1)];
          if (v145 == v116)
          {
            v114 = v145;
          }
          else
          {
            memmove(&v116[8 * (v150 >> 1)], v116, v145 - v116);
            v114 = v116;
          }
          v145 = v151;
          goto LABEL_171;
        }
        if (v117 == v116)
          v152 = 1;
        else
          v152 = (v117 - v116) >> 2;
        if (v152 >> 61)
          goto LABEL_259;
        v153 = (char *)operator new(8 * v152);
        v114 = v153;
        v154 = (v152 + 3) >> 2;
        v147 = &v153[8 * v154];
        v155 = v145 - v116;
        v123 = v145 == v116;
        v145 = v147;
        if (!v123)
        {
          v145 = &v147[v155 & 0xFFFFFFFFFFFFFFF8];
          v156 = v155 - 8;
          v157 = &v153[8 * v154];
          v158 = v116;
          if (v156 >= 0x38)
          {
            v159 = 8 * v154;
            v157 = &v153[8 * v154];
            v158 = v116;
            if ((unint64_t)(v157 - v116) >= 0x20)
            {
              v160 = (v156 >> 3) + 1;
              v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
              v157 = &v147[v161];
              v162 = (__int128 *)(v116 + 16);
              v163 = &v153[v159 + 16];
              v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v165 = *v162;
                *((_OWORD *)v163 - 1) = *(v162 - 1);
                *(_OWORD *)v163 = v165;
                v162 += 2;
                v163 += 32;
                v164 -= 4;
              }
              while (v164);
              if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_192;
              v158 = &v116[v161];
            }
          }
          do
          {
            v166 = *(_QWORD *)v158;
            v158 += 8;
            *(_QWORD *)v157 = v166;
            v157 += 8;
          }
          while (v157 != v145);
        }
LABEL_192:
        v117 = &v153[8 * v152];
        operator delete(v116);
        goto LABEL_171;
      }
LABEL_256:
      v12 = 0;
      goto LABEL_257;
    }
LABEL_4:
    v11 = a1[1];
    v10 = a1[2];
    if (v11 - v10 < 3)
      goto LABEL_2;
  }
  v20 = v10 + 7;
  if (v20 <= v11)
  {
    a1[2] = v20;
    v215 = *(_DWORD *)(v15 + v20 - 4);
    v14 = v20;
  }
  v21 = v14 + 8;
  if (v14 + 8 > v11)
  {
    v22 = v14 + 8;
LABEL_19:
    v23 = v22;
    if (v22 <= v11)
    {
LABEL_52:
      v3 = *(_QWORD *)(v15 + v14);
      a1[2] = v23;
      v14 = v23;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v15 + v14);
    a1[2] = v21;
    v22 = v14 + 16;
    v14 += 8;
    if (v22 > v11)
      goto LABEL_19;
    v4 = *(_QWORD *)(v15 + v21);
    a1[2] = v22;
    v23 = v22 + 8;
    v14 = v22;
    if (v22 + 8 <= v11)
      goto LABEL_52;
  }
  v48 = v14 + 4;
  if (v14 + 4 <= v11)
  {
    v2 = *(_DWORD *)(v15 + v14);
    a1[2] = v48;
    v14 += 4;
  }
  if (v14 + 1 > v11)
    goto LABEL_256;
  v12 = 0;
  a1[2] = v14 + 1;
  if (v20 <= v11 && v21 <= v11 && v22 <= v11 && v23 <= v11 && v48 <= v11)
  {
    v49 = *(unsigned __int8 *)(v15 + v14);
    if (*(_BYTE *)(v15 + v14))
    {
      v50 = 4 * v49;
      v51 = (char *)operator new(4 * v49);
      bzero(v51, v50);
      v52 = &v51[v50];
      v53 = v50 == 0;
      if (v50)
      {
        v54 = 0;
        v55 = v14 + 5;
        while (v55 + v54 <= v11)
        {
          v56 = *(_DWORD *)(v15 + v14 + 1 + v54);
          a1[2] = v55 + v54;
          *(_DWORD *)&v51[v54] = v56;
          v54 += 4;
          if (v50 == v54)
            goto LABEL_66;
        }
        operator delete(v51);
        goto LABEL_256;
      }
LABEL_66:
      v57 = v51;
    }
    else
    {
      v52 = 0;
      v57 = 0;
      v51 = 0;
      v53 = 1;
    }
    v58 = operator new(0x58uLL);
    v59 = (std::__shared_weak_count *)v58;
    v58[1] = 0;
    v60 = v58 + 1;
    v58[2] = 0;
    *v58 = &off_1E42E5DC0;
    v58[3] = &off_1E42C3520;
    v61 = (char *)(v58 + 3);
    v58[9] = 0;
    v58[10] = 0;
    v58[8] = 0;
    *(_QWORD *)buf = v58 + 3;
    *(_QWORD *)&buf[8] = v58;
    *((_DWORD *)v58 + 15) = v215;
    v58[4] = v5;
    v58[5] = v4;
    v58[6] = v3;
    v62 = v52 - v57;
    v63 = (v52 - v57) >> 2;
    *((_DWORD *)v58 + 14) = v2;
    if (v53)
    {
      v64 = 0;
      v65 = v58 + 9;
    }
    else
    {
      if ((v62 & 0x8000000000000000) != 0)
        abort();
      v64 = (std::__shared_weak_count_vtbl *)operator new(v62);
      v59[3].__vftable = v64;
      v65 = &v59[3].__vftable;
      v59[2].__shared_weak_owners_ = (uint64_t)v64;
      v59[3].__shared_owners_ = (uint64_t)v64 + 4 * v63;
      memcpy(v64, v51, v62);
    }
    *v65 = (char *)v64 + 4 * v63;
    if (*((_QWORD *)&v226 + 1))
    {
      v66 = *((_QWORD *)__p[1] + (*((_QWORD *)&v226 + 1) + (_QWORD)v226 - 1) / 0xAAuLL)
          + 24 * ((*((_QWORD *)&v226 + 1) + (_QWORD)v226 - 1) % 0xAAuLL);
      --*(_DWORD *)(v66 + 16);
      v67 = (char **)(*(_QWORD *)v66 + 40);
      v217 = v61;
      v218 = v59;
      do
        v68 = __ldxr(v60);
      while (__stxr(v68 + 1, v60));
      std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v67, (uint64_t)&v217);
      v69 = v218;
      if (v218)
      {
        v70 = (unint64_t *)&v218->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *((_QWORD *)&v226 + 1);
      if (*((_QWORD *)&v226 + 1))
      {
        v73 = v226;
        v74 = __p[1];
        do
        {
          v75 = v72 + v73 - 1;
          v76 = v74[v75 / 0xAA];
          v77 = v75 % 0xAA;
          if (*(_DWORD *)(v76 + 24 * v77 + 16))
            break;
          v78 = *(std::__shared_weak_count **)(v76 + 24 * v77 + 8);
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v74 = __p[1];
          v81 = v225;
          v82 = 170 * ((uint64_t)(v225 - (unint64_t)__p[1]) >> 3) - 1;
          if ((void *)v225 == __p[1])
            v82 = 0;
          v83 = *((_QWORD *)&v226 + 1);
          v73 = v226;
          v72 = --*((_QWORD *)&v226 + 1);
          if ((unint64_t)(v82 - (v83 + v226) + 1) >= 0x154)
          {
            operator delete(*(void **)(v225 - 8));
            *(_QWORD *)&v225 = v81 - 8;
          }
        }
        while (v72);
      }
    }
    else
    {
      v217 = v61;
      v218 = v59;
      do
        v103 = __ldxr(v60);
      while (__stxr(v103 + 1, v60));
      std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](v216, (uint64_t)&v217);
      v104 = v218;
      if (v218)
      {
        v105 = (unint64_t *)&v218->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
    }
    v107 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v108 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    if (v51)
      operator delete(v51);
    goto LABEL_4;
  }
LABEL_257:
  std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100]((uint64_t)__p);
  return v12;
}

void sub_19FF0FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;

  operator delete(v23);
  operator delete(v24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t karo::media::`anonymous namespace'::readRootBounds(uint64_t *a1, uint64_t *a2, float a3, float a4, double a5, double a6, float a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  float v22;
  float v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v7 = a1[1];
  v8 = a1[2];
  v9 = v8 + 4;
  if (v8 + 4 > v7)
  {
    v10 = v8 + 4;
  }
  else
  {
    a3 = *(float *)(*a1 + v8);
    a1[2] = v9;
    v10 = v8 + 8;
    v8 += 4;
    if (v10 <= v7)
    {
      a4 = *(float *)(*a1 + v9);
      a1[2] = v10;
      v8 = v10;
    }
  }
  if (v8 + 1 > v7)
    return 0;
  a1[2] = v8 + 1;
  if (v9 > v7 || v10 > v7)
    return 0;
  v13 = *(_BYTE *)(*a1 + v8);
  v14 = 1;
  v15 = *a2;
  v16 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  __asm { FMOV            V2.2S, #1.0 }
  a2[3] = _D2;
  if ((_DWORD)v16)
  {
    v22 = (float)(1 << v13);
    v23 = (float)(a4 - a3) / v22;
    v24 = a2[4];
    v25 = (unsigned int *)(v15 + 16);
    while (v8 + 3 <= v7)
    {
      a1[2] = v8 + 3;
      v14 = v8 + 5 <= v7;
      if (v8 + 5 > v7)
        return v14;
      v26 = *a1;
      a1[2] = v8 + 5;
      v27 = *v25;
      v25 += 6;
      v28 = v26 + v8;
      LOWORD(v22) = *(_WORD *)(v28 + 1);
      v22 = a3 + (float)(v23 * (float)LODWORD(v22));
      v29 = v24 + 16 * v27;
      LOWORD(a7) = *(_WORD *)(v28 + 3);
      a7 = a4 - (float)(v23 * (float)LODWORD(a7));
      *(float *)(v29 + 4) = v22;
      *(float *)(v29 + 8) = a7;
      v8 += 4;
      if (!--v16)
        return 1;
    }
    v30 = a1[2] + 2;
    if (v30 > v7)
      return 0;
    v14 = 0;
    a1[2] = v30;
  }
  return v14;
}

BOOL karo::media::`anonymous namespace'::readChildBounds(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BOOL8 result;
  char v9;
  uint64_t v10;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17[3];

  v4 = a1[1];
  v3 = a1[2];
  v5 = v3 + 1;
  v6 = v4 >= v3 + 1;
  v7 = v4 - (v3 + 1);
  if (!v6)
    return 0;
  a1[2] = v5;
  v9 = *(_BYTE *)(*a1 + v3);
  v17[0] = *a1 + v5;
  v17[1] = v7;
  v17[2] = 0;
  result = 1;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v12 = 1.0;
    v13 = 1.0 / (double)(1 << v9);
    v14 = a3[4];
    v15 = *a3 + 24;
    do
    {
      v16 = !result || v15 == v10;
      v15 += 24;
    }
    while (!v16);
  }
  return result;
}

uint64_t karo::media::`anonymous namespace'::readHighPrecisionBounds(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;

  v2 = a1[1];
  v3 = a1[2];
  if (v3 + 4 > v2)
    return 0;
  a1[2] = v3 + 4;
  v5 = *(unsigned int *)(*a1 + v3);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a2 + 24) = _D0;
  if (!(_DWORD)v5)
    return 1;
  v11 = 0;
  v12 = 0;
  v13 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 8);
  do
  {
    if (v3 + 8 > v2)
      break;
    v14 = *a1 + v3;
    v15 = *(_DWORD *)(v14 + 4);
    a1[2] = v3 + 8;
    if (v3 + 12 > v2)
      break;
    v16 = *(_DWORD *)(v14 + 8);
    a1[2] = v3 + 12;
    ++v11;
    *(v13 - 1) = v15;
    *v13 = v16;
    v12 = v11 >= v5;
    v3 += 8;
    v13 += 4;
  }
  while (v5 != v11);
  return v12;
}

uint64_t *std::__tree<karo::media::C3mmRoot>::__emplace_unique_key_args<karo::media::C3mmRoot,karo::media::C3mmRoot const&>(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (!v5)
  {
    v11 = result + 1;
    goto LABEL_15;
  }
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  do
  {
    while (1)
    {
      v11 = (uint64_t *)v5;
      v12 = *(_DWORD *)(v5 + 28);
      if (v7 >= v12)
      {
        if (v7 > v12)
          goto LABEL_12;
        v13 = *((_DWORD *)v11 + 8);
        if (v8 >= v13)
        {
          if (v8 > v13)
            goto LABEL_12;
          v14 = *((_DWORD *)v11 + 9);
          if (v9 >= v14)
          {
            if (v9 > v14)
              goto LABEL_12;
            v15 = *((_DWORD *)v11 + 10);
            if (v10 >= v15)
              break;
          }
        }
      }
      v5 = *v11;
      v6 = (uint64_t **)v11;
      if (!*v11)
        goto LABEL_15;
    }
    if (v15 >= v10)
      return result;
LABEL_12:
    v5 = v11[1];
  }
  while (v5);
  v6 = (uint64_t **)(v11 + 1);
LABEL_15:
  v16 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v16 + 28) = *(_OWORD *)a3;
  *(_QWORD *)(v16 + 44) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v11;
  *v6 = (uint64_t *)v16;
  v17 = *(_QWORD *)*v4;
  if (v17)
  {
    *v4 = v17;
    v18 = *v6;
  }
  else
  {
    v18 = (uint64_t *)v16;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v18);
  ++v4[2];
  return result;
}

BOOL karo::media::`anonymous namespace'::propagateBounds(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5, float a6, float a7)
{
  float *v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v10 = (float *)(a2 + 16 * a4);
  v12 = v10[1];
  v11 = v10[2];
  v13 = v11 - v12;
  v14 = a4 + 1;
  v15 = (float)(v11 - v12) * a6;
  v16 = (a3 + 1);
  if (v16 < a1)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      if (((*(unsigned __int16 *)v10 >> v18) & 1) != 0)
      {
        v22 = v14;
        if ((_DWORD)v21)
          v22 = *(unsigned int *)(a2 + 16 * v21 + 12);
        v23 = a5[1];
        v24 = a5[2];
        v25 = v24 + 1;
        if (v24 + 1 > v23)
          goto LABEL_78;
        a5[2] = v25;
        if (v24 + 2 > v23)
          return v19;
        v26 = *a5;
        LOBYTE(v13) = *(_BYTE *)(*a5 + v24);
        a5[2] = v24 + 2;
        LOBYTE(a7) = *(_BYTE *)(v26 + v25);
        v27 = a2 + 16 * v22;
        *(float *)(v27 + 4) = v12 + (float)(v15 * (float)LODWORD(v13));
        *(float *)(v27 + 8) = v11 - (float)(v15 * (float)LODWORD(a7));
          return v19;
      }
      else
      {
        v22 = v21;
      }
      v19 = v20 > 6;
      v18 += 2;
      ++v20;
      v21 = v22;
      if (v20 == 8)
        return v19;
    }
  }
  v28 = a5[2];
  v29 = *(_WORD *)v10;
  if ((*(_WORD *)v10 & 1) != 0)
  {
    v23 = a5[1];
    v30 = v28 + 1;
    if (v28 + 1 > v23)
      goto LABEL_77;
    a5[2] = v30;
    v31 = v28 + 2;
    if (v28 + 2 > v23)
      return 0;
    v32 = *a5;
    LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
    a5[2] = v31;
    LOBYTE(a7) = *(_BYTE *)(v32 + v30);
    v13 = v12 + (float)(v15 * (float)LODWORD(v13));
    a7 = v11 - (float)(v15 * (float)LODWORD(a7));
    v33 = a2 + 16 * v14;
    *(float *)(v33 + 4) = v13;
    *(float *)(v33 + 8) = a7;
    if ((v29 & 4) == 0)
    {
      v28 = v31;
      v34 = a4 + 1;
      if ((v29 & 0x10) == 0)
        goto LABEL_37;
      goto LABEL_30;
    }
    if (a4 == -1)
      v34 = 0;
    else
      v34 = *(_DWORD *)(a2 + 16 * v14 + 12);
    v28 = v31;
LABEL_27:
    v35 = v28 + 1;
    if (v28 + 1 > v23)
      goto LABEL_77;
    a5[2] = v35;
    v36 = v28 + 2;
    if (v28 + 2 > v23)
      return 0;
    v37 = *a5;
    LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
    a5[2] = v36;
    v13 = v12 + (float)(v15 * (float)LODWORD(v13));
    LOBYTE(a7) = *(_BYTE *)(v37 + v35);
    a7 = v11 - (float)(v15 * (float)LODWORD(a7));
    v38 = a2 + 16 * v34;
    *(float *)(v38 + 4) = v13;
    *(float *)(v38 + 8) = a7;
    v28 = v36;
    if ((v29 & 0x10) == 0)
      goto LABEL_37;
LABEL_30:
    if (v34)
    {
      v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_34:
      v39 = v28 + 1;
      if (v28 + 1 > v23)
        goto LABEL_77;
      a5[2] = v39;
      v40 = v28 + 2;
      if (v28 + 2 > v23)
        return 0;
      v41 = *a5;
      LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
      a5[2] = v40;
      v13 = v12 + (float)(v15 * (float)LODWORD(v13));
      LOBYTE(a7) = *(_BYTE *)(v41 + v39);
      a7 = v11 - (float)(v15 * (float)LODWORD(a7));
      v42 = a2 + 16 * v34;
      *(float *)(v42 + 4) = v13;
      *(float *)(v42 + 8) = a7;
      v28 = v40;
LABEL_37:
      if ((v29 & 0x40) == 0)
        goto LABEL_45;
      if (v34)
      {
        v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_42:
        v43 = v28 + 1;
        if (v28 + 1 > v23)
          goto LABEL_77;
        a5[2] = v43;
        v44 = v28 + 2;
        if (v28 + 2 > v23)
          return 0;
        v45 = *a5;
        LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
        a5[2] = v44;
        v13 = v12 + (float)(v15 * (float)LODWORD(v13));
        LOBYTE(a7) = *(_BYTE *)(v45 + v43);
        a7 = v11 - (float)(v15 * (float)LODWORD(a7));
        v46 = a2 + 16 * v34;
        *(float *)(v46 + 4) = v13;
        *(float *)(v46 + 8) = a7;
        v28 = v44;
LABEL_45:
        if ((v29 & 0x100) == 0)
          goto LABEL_55;
        if (v34)
        {
          v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_52:
          v47 = v28 + 1;
          if (v28 + 1 > v23)
            goto LABEL_77;
          a5[2] = v47;
          v48 = v28 + 2;
          if (v28 + 2 > v23)
            return 0;
          v49 = *a5;
          LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
          a5[2] = v48;
          v13 = v12 + (float)(v15 * (float)LODWORD(v13));
          LOBYTE(a7) = *(_BYTE *)(v49 + v47);
          a7 = v11 - (float)(v15 * (float)LODWORD(a7));
          v50 = a2 + 16 * v34;
          *(float *)(v50 + 4) = v13;
          *(float *)(v50 + 8) = a7;
          v28 = v48;
LABEL_55:
          if ((v29 & 0x400) == 0)
            goto LABEL_65;
          if (v34)
          {
            v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
LABEL_62:
            v51 = v28 + 1;
            if (v28 + 1 > v23)
              goto LABEL_77;
            a5[2] = v51;
            v52 = v28 + 2;
            if (v28 + 2 > v23)
              return 0;
            v53 = *a5;
            LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
            a5[2] = v52;
            v13 = v12 + (float)(v15 * (float)LODWORD(v13));
            LOBYTE(a7) = *(_BYTE *)(v53 + v51);
            a7 = v11 - (float)(v15 * (float)LODWORD(a7));
            v54 = a2 + 16 * v34;
            *(float *)(v54 + 4) = v13;
            *(float *)(v54 + 8) = a7;
            v28 = v52;
LABEL_65:
            if ((v29 & 0x1000) == 0)
            {
LABEL_73:
              if ((v29 & 0x4000) == 0)
                return 1;
              if (v34)
                LODWORD(v14) = *(_DWORD *)(a2 + 16 * v34 + 12);
              goto LABEL_76;
            }
            if (v34)
            {
              v34 = *(_DWORD *)(a2 + 16 * v34 + 12);
              goto LABEL_70;
            }
LABEL_69:
            v34 = a4 + 1;
LABEL_70:
            v55 = v28 + 1;
            if (v28 + 1 > v23)
              goto LABEL_77;
            a5[2] = v55;
            v56 = v28 + 2;
            if (v28 + 2 <= v23)
            {
              v57 = *a5;
              LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
              a5[2] = v56;
              v13 = v12 + (float)(v15 * (float)LODWORD(v13));
              LOBYTE(a7) = *(_BYTE *)(v57 + v55);
              a7 = v11 - (float)(v15 * (float)LODWORD(a7));
              v58 = a2 + 16 * v34;
              *(float *)(v58 + 4) = v13;
              *(float *)(v58 + 8) = a7;
              v28 = v56;
              goto LABEL_73;
            }
            return 0;
          }
LABEL_61:
          v34 = a4 + 1;
          goto LABEL_62;
        }
LABEL_51:
        v34 = a4 + 1;
        goto LABEL_52;
      }
LABEL_41:
      v34 = a4 + 1;
      goto LABEL_42;
    }
LABEL_33:
    v34 = a4 + 1;
    goto LABEL_34;
  }
  if ((v29 & 4) != 0)
  {
    v23 = a5[1];
    v34 = a4 + 1;
    goto LABEL_27;
  }
  if ((v29 & 0x10) != 0)
  {
    v23 = a5[1];
    goto LABEL_33;
  }
  if ((v29 & 0x40) != 0)
  {
    v23 = a5[1];
    goto LABEL_41;
  }
  if ((*(_WORD *)v10 & 0x100) != 0)
  {
    v23 = a5[1];
    goto LABEL_51;
  }
  if ((*(_WORD *)v10 & 0x400) != 0)
  {
    v23 = a5[1];
    goto LABEL_61;
  }
  if ((*(_WORD *)v10 & 0x1000) != 0)
  {
    v23 = a5[1];
    goto LABEL_69;
  }
  if ((*(_WORD *)v10 & 0x4000) == 0)
    return 1;
  v23 = a5[1];
LABEL_76:
  v59 = v28 + 1;
  if (v28 + 1 <= v23)
  {
    a5[2] = v59;
    if (v28 + 2 > v23)
      return 0;
    v61 = *a5;
    LOBYTE(v13) = *(_BYTE *)(*a5 + v28);
    a5[2] = v28 + 2;
    LOBYTE(a7) = *(_BYTE *)(v61 + v59);
    v62 = a2 + 16 * v14;
    *(float *)(v62 + 4) = v12 + (float)(v15 * (float)LODWORD(v13));
    *(float *)(v62 + 8) = v11 - (float)(v15 * (float)LODWORD(a7));
    return 1;
  }
LABEL_77:
  v19 = 0;
  v25 = a5[2] + 1;
LABEL_78:
  if (v25 <= v23)
    a5[2] = v25;
  return v19;
}

void std::vector<std::shared_ptr<karo::media::C3mmObjectTree::Node>>::push_back[abi:nn180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60)
      abort();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 3;
    if (v8 >> 3 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v12 = 16 * v11;
    v13 = (char *)operator new(16 * v11);
    v14 = &v13[16 * v7];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v6 = v14 + 16;
    v15 = &v13[v12];
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v14;
      a1[1] = v6;
      a1[2] = v15;
    }
    else
    {
      do
      {
        v18 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v16);
      v17 = *a1;
      v19 = a1[1];
      *a1 = v14;
      a1[1] = v6;
      a1[2] = v15;
      while (v19 != v17)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v19 -= 16;
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = v5 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  a1[1] = v6;
}

uint64_t std::deque<std::pair<std::shared_ptr<karo::media::C3mmObjectTree::Group>,int>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v12 = (unint64_t)v6[1];
          ++v6;
          v7 = v12;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 85;
    goto LABEL_20;
  }
  if (v14 == 2)
  {
    v15 = 170;
LABEL_20:
    *(_QWORD *)(a1 + 32) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void karo::media::C3mmObjectTree::Model::~Model(karo::media::C3mmObjectTree::Model *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42C3520;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C3520;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::media::C3mmObjectTree::Model::getType(karo::media::C3mmObjectTree::Model *this)
{
  return 1;
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void karo::media::C3mmObjectTree::Group::~Group(karo::media::C3mmObjectTree::Group *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C34F8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C34F8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::media::C3mmObjectTree::Group::getType(karo::media::C3mmObjectTree::Group *this)
{
  return 0;
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<karo::media::C3mmObjectTree::Group>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t karo::media::`anonymous namespace'::buildSubTree(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t i;
  unsigned int v7;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  for (i = (a3 + 1); ; i = (i + 1))
  {
    v7 = a4 + 1;
    v8 = (__int16 *)(a2 + 16 * a4);
    v9 = *v8;
    if ((_DWORD)a1 == (_DWORD)i)
      break;
    v10 = a2 + 16 * v7;
    v11 = (a4 + 1);
    if ((v9 & 1) != 0)
    {
      *(_DWORD *)(v10 + 12) = 0;
      v9 = *v8;
    }
    if ((v9 & 4) != 0)
    {
      *(_DWORD *)(v10 + 12) = v11;
      *(_DWORD *)(a2 + 16 * v11 + 12) = 0;
      v9 = *v8;
      if ((*v8 & 0x10) != 0)
      {
LABEL_7:
        *(_DWORD *)(a2 + 16 * v11 + 12) = v12;
        *(_DWORD *)(a2 + 16 * v12 + 12) = 0;
        v9 = *v8;
        if ((*v8 & 0x40) != 0)
          goto LABEL_8;
        goto LABEL_15;
      }
    }
    else
    {
      v12 = v11;
      LODWORD(v11) = v7;
      if ((v9 & 0x10) != 0)
        goto LABEL_7;
    }
    v13 = v12;
    LODWORD(v12) = v11;
    if ((v9 & 0x40) != 0)
    {
LABEL_8:
      *(_DWORD *)(a2 + 16 * v12 + 12) = v13;
      *(_DWORD *)(a2 + 16 * v13 + 12) = 0;
      v9 = *v8;
      if ((*v8 & 0x100) != 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    v14 = v13;
    LODWORD(v13) = v12;
    if ((v9 & 0x100) != 0)
    {
LABEL_9:
      *(_DWORD *)(a2 + 16 * v13 + 12) = v14;
      *(_DWORD *)(a2 + 16 * v14 + 12) = 0;
      v9 = *v8;
      if ((*v8 & 0x400) != 0)
        goto LABEL_10;
      goto LABEL_17;
    }
LABEL_16:
    v15 = v14;
    LODWORD(v14) = v13;
    if ((v9 & 0x400) != 0)
    {
LABEL_10:
      *(_DWORD *)(a2 + 16 * v14 + 12) = v15;
      *(_DWORD *)(a2 + 16 * v15 + 12) = 0;
      v9 = *v8;
      if ((*v8 & 0x1000) != 0)
        goto LABEL_11;
      goto LABEL_18;
    }
LABEL_17:
    v16 = v15;
    LODWORD(v15) = v14;
    if ((v9 & 0x1000) != 0)
    {
LABEL_11:
      *(_DWORD *)(a2 + 16 * v15 + 12) = v16;
      *(_DWORD *)(a2 + 16 * v16 + 12) = 0;
      if ((*v8 & 0x4000) == 0)
        return a4;
      goto LABEL_19;
    }
LABEL_18:
    a4 = v16;
    LODWORD(v16) = v15;
    if ((v9 & 0x4000) == 0)
      return a4;
LABEL_19:
    *(_DWORD *)(a2 + 16 * v16 + 12) = a4;
    *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
  }
  v17 = (a4 + 1);
  if ((v9 & 1) != 0)
  {
    *(_DWORD *)(a2 + 16 * v7 + 12) = 0;
    v17 = (a4 + 2);
  }
  if ((v9 & 4) != 0)
  {
    *(_DWORD *)(a2 + 16 * v7 + 12) = v17;
    *(_DWORD *)(a2 + 16 * v17 + 12) = 0;
    v18 = (v17 + 1);
    if ((v9 & 0x10) == 0)
      goto LABEL_31;
LABEL_24:
    *(_DWORD *)(a2 + 16 * v17 + 12) = v18;
    *(_DWORD *)(a2 + 16 * v18 + 12) = 0;
    v19 = (v18 + 1);
    if ((v9 & 0x40) != 0)
      goto LABEL_25;
LABEL_32:
    v20 = v19;
    LODWORD(v19) = v18;
    if ((v9 & 0x100) == 0)
      goto LABEL_33;
LABEL_26:
    *(_DWORD *)(a2 + 16 * v19 + 12) = v20;
    *(_DWORD *)(a2 + 16 * v20 + 12) = 0;
    v21 = (v20 + 1);
    if ((v9 & 0x400) != 0)
      goto LABEL_27;
LABEL_34:
    v22 = v21;
    LODWORD(v21) = v20;
    if ((v9 & 0x1000) == 0)
      goto LABEL_35;
LABEL_28:
    *(_DWORD *)(a2 + 16 * v21 + 12) = v22;
    *(_DWORD *)(a2 + 16 * v22 + 12) = 0;
    a4 = (v22 + 1);
    if ((v9 & 0x4000) != 0)
    {
LABEL_36:
      *(_DWORD *)(a2 + 16 * v22 + 12) = a4;
      *(_DWORD *)(a2 + 16 * a4 + 12) = 0;
      return (a4 + 1);
    }
  }
  else
  {
    v18 = v17;
    LODWORD(v17) = a4 + 1;
    if ((v9 & 0x10) != 0)
      goto LABEL_24;
LABEL_31:
    v19 = v18;
    LODWORD(v18) = v17;
    if ((v9 & 0x40) == 0)
      goto LABEL_32;
LABEL_25:
    *(_DWORD *)(a2 + 16 * v18 + 12) = v19;
    *(_DWORD *)(a2 + 16 * v19 + 12) = 0;
    v20 = (v19 + 1);
    if ((v9 & 0x100) != 0)
      goto LABEL_26;
LABEL_33:
    v21 = v20;
    LODWORD(v20) = v19;
    if ((v9 & 0x400) == 0)
      goto LABEL_34;
LABEL_27:
    *(_DWORD *)(a2 + 16 * v20 + 12) = v21;
    *(_DWORD *)(a2 + 16 * v21 + 12) = 0;
    v22 = (v21 + 1);
    if ((v9 & 0x1000) != 0)
      goto LABEL_28;
LABEL_35:
    a4 = v22;
    LODWORD(v22) = v21;
    if ((v9 & 0x4000) != 0)
      goto LABEL_36;
  }
  return a4;
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<karo::media::C3mmFile>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

BOOL karo::media::`anonymous namespace'::loadDataSection(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v8;
  char *v9;
  char **v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  char **v23;
  char *v24;
  NSObject *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  char *v41;
  char *v42;
  char *v43;
  char **v44;
  unint64_t v45;
  uint8_t buf[16];

  v3 = *(_QWORD *)(a2 + 72);
  v4 = (*(_QWORD *)(a2 + 80) - v3) >> 5;
  v5 = a3;
  if (v4 > a3)
  {
    v8 = (_QWORD *)(v3 + 32 * a3);
    v10 = (char **)(v8 + 1);
    v9 = (char *)v8[1];
    v11 = a1[1] - a1[2];
    v13 = v8 + 2;
    v12 = (char *)v8[2];
    v14 = v11 - (v12 - v9);
    if (v11 <= v12 - v9)
    {
      if (v11 < v12 - v9)
        *v13 = &v9[v11];
      goto LABEL_39;
    }
    v17 = v8[3];
    v16 = (char **)(v8 + 3);
    v15 = v17;
    if (v17 - (uint64_t)v12 >= v14)
    {
      bzero(v10[1], v14);
      *v13 = &v9[v11];
LABEL_39:
      memcpy(*(void **)(*(_QWORD *)(a2 + 72) + 32 * v5 + 8), (const void *)(*a1 + a1[2]), v11);
      a1[2] = a1[1];
      return v4 > v5;
    }
    v44 = v16;
    v45 = v12 - v9;
    if ((v11 & 0x8000000000000000) != 0)
      abort();
    v18 = v15 - (_QWORD)v9;
    v19 = 2 * v18;
    if (2 * v18 <= v11)
      v19 = a1[1] - a1[2];
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v21 = (char *)operator new(v20);
    v41 = &v21[v20];
    v22 = v21;
    v42 = &v21[v11];
    v43 = &v21[v45];
    bzero(&v21[v45], v14);
    if (v12 == v9)
    {
      v26 = v43;
      v23 = v44;
      v28 = v41;
      v27 = v42;
      goto LABEL_37;
    }
    v23 = v44;
    if (v45 < 8)
    {
      v24 = v43;
      goto LABEL_34;
    }
    v24 = v43;
    if ((unint64_t)(v9 - v22) >= 0x20)
    {
      if (v45 >= 0x20)
      {
        v29 = v45 & 0xFFFFFFFFFFFFFFE0;
        v30 = v12 - 16;
        v31 = &v22[v12 - 16 - v9];
        v32 = v45 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v33 = *(_OWORD *)v30;
          *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
          *(_OWORD *)v31 = v33;
          v31 -= 32;
          v30 -= 32;
          v32 -= 32;
        }
        while (v32);
        if (v45 == v29)
          goto LABEL_36;
        if ((v45 & 0x18) == 0)
        {
          v24 = &v43[-v29];
          v12 -= v29;
          goto LABEL_34;
        }
      }
      else
      {
        v29 = 0;
      }
      v34 = v29 - (v45 & 0xFFFFFFFFFFFFFFF8);
      v35 = &v12[-v29 - 8];
      v36 = (char *)(v35 - v9);
      do
      {
        v37 = *(_QWORD *)v35;
        v35 -= 8;
        *(_QWORD *)&v36[(_QWORD)v22] = v37;
        v36 -= 8;
        v34 += 8;
      }
      while (v34);
      if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_36;
      v24 = &v43[-(v45 & 0xFFFFFFFFFFFFFFF8)];
      v12 -= v45 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    v38 = v24 - 1;
    do
    {
      v39 = *--v12;
      *v38-- = v39;
    }
    while (v12 != v9);
LABEL_36:
    v12 = v9;
    v26 = v22;
    v28 = v41;
    v27 = v42;
LABEL_37:
    *v10 = v26;
    v10[1] = v27;
    *v23 = v28;
    if (v12)
      operator delete(v12);
    goto LABEL_39;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v25 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, "C3MM file index is missing when loading data section", buf, 2u);
  }

  return v4 > v5;
}

void sub_19FF112A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FF112C4(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *shared_weak_owners;
  void *v5;

  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_19FF113DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FF1151C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FF1166C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::VenueBuildingFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::Loader::~Loader(ggl::Loader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v4 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    v7 = v4;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
    v5 = v7;
    v7 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void ggl::MetalRenderer::~MetalRenderer(ggl::MetalRenderer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42B6670;
  v2 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1A1AF4E00](v4, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42B6670;
  v2 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x1A1AF4E00](v4, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MetalRenderer::readPixels(ggl::Texture *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CGColorSpace *DeviceRGB;
  int v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  int32x4_t v44;
  __n128 v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[6];
  _QWORD v49[6];
  __n128 v50;

  v5 = *((_QWORD *)a1 + 3);
  v7 = *((unsigned int *)a1 + 20);
  v6 = *((unsigned int *)a1 + 21);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  v9 = *((_DWORD *)a1 + 17);
  if ((v9 - 14) >= 2)
  {
    if (v9 == 5)
    {
      std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>((std::__shared_weak_count **)&v50, v7, v6, 32, 32, 4 * v7, DeviceRGB, 16641);
      v45 = v50;
      *a2 = v50;
      v46 = **(void ***)(v5 + 32);
      v47 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v45.n128_u64[0] + 16))(v45.n128_u64[0], v45);
      memset(v48, 0, 24);
      v48[3] = v7;
      v48[4] = v6;
      v48[5] = 1;
      objc_msgSend(v46, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v47, (4 * v7), v48, 0);
    }
  }
  else
  {
    std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>((std::__shared_weak_count **)&v50, v7, v6, 8, 32, 4 * v7, DeviceRGB, 16385);
    v10 = v50.n128_u64[0];
    *a2 = v50;
    v11 = **(void ***)(v5 + 32);
    v12 = v10;
    v13 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 16))(v10);
    memset(v49, 0, 24);
    v49[3] = v7;
    v49[4] = v6;
    v49[5] = 1;
    objc_msgSend(v11, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v13, (4 * v7), v49, 0);
    v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v12 + 16))(v12);
    if ((v6 & 1) + (v6 >> 1) && (_DWORD)v7)
    {
      v15 = 0;
      v16 = 0;
      v17 = v7 - 2;
      v18 = v14 + 4 * (v7 - 2) + 4;
      v19 = v7 * (v6 - 1);
      v20 = v19 + 1;
      v21 = v7 - 1;
      v22 = (v7 - 1) & 0xFFFFFFFC;
      v23 = 1;
      v24 = v19 + 1;
      v25 = v7;
      do
      {
        v26 = v25 * (v6 + ~v16);
        v27 = 4 * (v25 * v16);
        v28 = *(_DWORD *)(v14 + v27);
        v29 = 4 * v26;
        *(_DWORD *)(v14 + v27) = *(_DWORD *)(v14 + v29) & 0xFF00FF00 | __ROR4__(*(_DWORD *)(v14 + v29) & 0xFF00FF, 16);
        *(_DWORD *)(v14 + v29) = v28 & 0xFF00FF00 | __ROR4__(v28 & 0xFF00FF, 16);
        v25 = v7;
        if ((_DWORD)v7 != 1)
        {
          if (v21 < 4)
            goto LABEL_12;
          v30 = v7 * v16;
          v31 = 1;
          if (-2 - (int)v7 * v16 < v17 || (int)v7 * (v16 - ((int)v6 - 1)) - 2 < v17)
            goto LABEL_13;
          v32 = 4 * (v30 + 1);
          v33 = 4 * (v20 - v30);
          if (v14 + v32 < (unint64_t)(v18 + v33) && v14 + v33 < (unint64_t)(v18 + v32))
          {
LABEL_12:
            v31 = 1;
            do
            {
LABEL_13:
              v34 = 4 * (v15 + v31);
              v35 = *(_DWORD *)(v14 + v34);
              v36 = 4 * (v19 + v31);
              *(_DWORD *)(v14 + v34) = *(_DWORD *)(v14 + v36) & 0xFF00FF00 | __ROR4__(*(_DWORD *)(v14 + v36) & 0xFF00FF, 16);
              *(_DWORD *)(v14 + v36) = v35 & 0xFF00FF00 | __ROR4__(v35 & 0xFF00FF, 16);
              ++v31;
            }
            while ((_DWORD)v7 != v31);
            v25 = v7;
            goto LABEL_5;
          }
          v37 = v21 & 0xFFFFFFFC;
          v38 = v24;
          v39 = v23;
          do
          {
            v40 = 4 * v39;
            v41 = *(_OWORD *)(v14 + v40);
            v42 = 4 * v38;
            v43 = *(_OWORD *)(v14 + v42);
            v44.i16[0] = v43;
            v44.i16[1] = BYTE2(v43);
            v44.i16[2] = BYTE4(*(_QWORD *)(v14 + v42));
            v44.i16[3] = BYTE6(*(_QWORD *)(v14 + v42));
            v44.i16[4] = *(_QWORD *)(v14 + v42 + 8);
            v44.i16[5] = BYTE2(*(_QWORD *)(v14 + v42 + 8));
            v44.i16[6] = BYTE12(v43);
            v44.i16[7] = BYTE14(v43);
            *(int8x16_t *)(v14 + v40) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32(v44, 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v44, 0x10uLL)), (int8x16_t)(v43 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
            *(int8x16_t *)(v14 + v42) = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)(v41 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), 0x10uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)(v41 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), 0x10uLL)), (int8x16_t)(v41 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
            v39 += 4;
            v38 += 4;
            v37 -= 4;
          }
          while (v37);
          v31 = v22 | 1;
          v25 = v7;
          if (v21 != v22)
            goto LABEL_13;
        }
LABEL_5:
        ++v16;
        v23 += v7;
        v24 -= v7;
        v19 -= v7;
        v15 += v7;
      }
      while (v16 != (v6 & 1) + (v6 >> 1));
    }
  }
  if (DeviceRGB)
    CFRelease(DeviceRGB);
}

void sub_19FF11E5C(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

float ggl::MetalRenderer::averageFramesPerSecond(ggl::MetalRenderer *this)
{
  return *((double *)this + 19);
}

void ggl::MetalRenderer::frame(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  unsigned __int8 v9;
  NSObject *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  float v38;
  int v39;
  float v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  const ggl::CommonLibrary *v46;
  _QWORD *v47;
  ggl::DebugConsole *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  ggl::DebugConsole **v52;
  float32x2_t *v53;
  float32x2_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  const ggl::CommonLibrary *v59;
  _QWORD *v60;
  ggl::DebugConsole *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  BOOL v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 *v87;
  char v88;
  uint64_t *v89;
  _QWORD *v90;
  const ggl::Texture **v91;
  const ggl::Texture **v92;
  const ggl::Texture **v93;
  const ggl::Texture **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  ggl::CommandBuffer **v103;
  uint64_t v104;
  ggl::MetalDeviceContextPass *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  ggl::CommandBuffer **v135;
  uint64_t v136;
  ggl::MetalDeviceContextPass *v137;
  double v138;
  double v139;
  uint64_t v140;
  double v141;
  unint64_t v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  unsigned __int8 v147;
  _QWORD *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  int64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  char **v241;
  char *v242;
  char *v243;
  int64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  std::__shared_weak_count_vtbl *v257;
  unint64_t v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *context;
  uint64_t *v277;
  uint64_t v278;
  __int128 v279;
  char v280;
  __int128 v281;
  char v282;
  void *__p;
  uint64_t *v284;
  uint64_t v285;
  __int16 v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  char v289;
  _BYTE buf[24];
  uint64_t v291;
  void *__dst;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  char *v304;
  char *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;

  v313 = *MEMORY[0x1E0C80C00];
  v9 = atomic_load((unsigned __int8 *)(a1 + 417));
  if ((v9 & 1) != 0)
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
    v10 = (id)GEOGetGeoGLDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = atomic_load((unsigned int *)(a1 + 420));
      v12 = *(_DWORD *)(a1 + 428);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v12;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "Attempting to reset command queue, attempt %d of %d", buf, 0xEu);
    }

    v13 = *(_QWORD *)(a1 + 136);
    v14 = objc_msgSend(*(id *)(v13 + 104), "newCommandQueue");
    v15 = *(void **)(v13 + 112);
    v13 += 112;
    *(_QWORD *)v13 = v14;

    v16 = *(void **)v13;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "com.apple.MapKit");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setLabel:", v17);

    v18 = (unsigned int *)(a1 + 420);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    atomic_store(0, (unsigned __int8 *)(a1 + 417));
  }
  v278 = a3;
  v20 = &unk_1ECE44000;
  if (*(_BYTE *)(a1 + 40))
  {
    v21 = *(_QWORD *)(a1 + 144);
    if (v21)
    {
      v22 = (unsigned int *)a2[42];
      if (v22)
      {
        v23 = *(float *)(a1 + 44);
        v24 = (float)((float)v22[9] / v23);
        LODWORD(v22) = v22[10];
LABEL_41:
        v37 = (float)v24;
        v38 = *(double *)(v21 + 24);
        v39 = *(unsigned __int8 *)(v21 + 32);
        *(float *)buf = 2.0 / v37;
        *(_OWORD *)&buf[4] = 0uLL;
        *(float *)&buf[20] = -2.0 / truncf((float)v22 / v23);
        v40 = v38 + -1.0;
        if (!v39)
          v40 = 1.0 - v38;
        v291 = 0;
        __dst = 0;
        v293 = (char *)LODWORD(v40);
        *(float *)&v294 = (float)-v37 / v37;
        HIDWORD(v294) = 1065353216;
        v295 = LODWORD(v38) | 0x3F80000000000000;
        if (!*(_QWORD *)v21)
        {
          v46 = *(const ggl::CommonLibrary **)(v21 + 16);
          v47 = operator new(0xB0uLL);
          v47[1] = 0;
          v47[2] = 0;
          *v47 = &off_1E42DEB90;
          v48 = ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v47 + 3), v46);
          v49 = *(std::__shared_weak_count **)(v21 + 8);
          *(_QWORD *)v21 = v48;
          *(_QWORD *)(v21 + 8) = v47;
          if (v49)
          {
            p_shared_owners = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldaxr(p_shared_owners);
            while (__stlxr(v51 - 1, p_shared_owners));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
        v41 = *(_QWORD *)v21;
        v42 = *(std::__shared_weak_count **)(v21 + 8);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          ggl::DebugConsole::setProjection(v41, buf);
          do
            v45 = __ldaxr(v43);
          while (__stlxr(v45 - 1, v43));
          v20 = (_QWORD *)&unk_1ECE44000;
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        else
        {
          ggl::DebugConsole::setProjection(v41, buf);
        }
        v52 = *(ggl::DebugConsole ***)(a1 + 144);
        if (v20[469] != -1)
          dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
        v53 = (float32x2_t *)ggl::Performance::Counters::instance(void)::counters;
        if (!*v52)
        {
          v59 = v52[2];
          v60 = operator new(0xB0uLL);
          v60[1] = 0;
          v60[2] = 0;
          *v60 = &off_1E42DEB90;
          v61 = ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v60 + 3), v59);
          v62 = (std::__shared_weak_count *)v52[1];
          *v52 = v61;
          v52[1] = (ggl::DebugConsole *)v60;
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        v54 = (float32x2_t *)*v52;
        v55 = (std::__shared_weak_count *)v52[1];
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          v26 = v278;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          ggl::Performance::Counters::draw(v53, v54);
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        else
        {
          ggl::Performance::Counters::draw(v53, v54);
          v26 = v278;
        }
        if (v53[5].i32[0])
        {
          v65 = 0;
          do
            atomic_store(0, (unint64_t *)(*(_QWORD *)&v53[4] + 8 * v65++));
          while (v65 < v53[5].u32[0]);
        }
        goto LABEL_76;
      }
      v28 = a2[11];
      if (v28)
      {
        v29 = a2 + 12;
      }
      else
      {
        v28 = a2[35];
        if (!v28)
          goto LABEL_30;
        v29 = a2 + 36;
      }
      v30 = 80;
      if (*(_DWORD *)(v28 + 56) == 3)
        v30 = 196;
      v31 = *(_DWORD *)(v28 + v30);
      v32 = v31 >> *v29;
      if (v32 <= 1)
        v32 = 1;
      if (v31)
        LODWORD(v28) = v32;
      else
        LODWORD(v28) = 0;
LABEL_30:
      v23 = *(float *)(a1 + 44);
      v24 = (float)((float)v28 / v23);
      v22 = (unsigned int *)a2[11];
      if (v22)
      {
        v33 = a2 + 12;
      }
      else
      {
        v22 = (unsigned int *)a2[35];
        if (!v22)
          goto LABEL_41;
        v33 = a2 + 36;
      }
      v34 = 21;
      if (v22[14] == 3)
        v34 = 49;
      v35 = v22[v34];
      v36 = v35 >> *v33;
      if (v36 <= 1)
        v36 = 1;
      if (v35)
        LODWORD(v22) = v36;
      else
        LODWORD(v22) = 0;
      goto LABEL_41;
    }
  }
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v25 = ggl::Performance::Counters::instance(void)::counters;
  v26 = v278;
  if (*(_DWORD *)(ggl::Performance::Counters::instance(void)::counters + 40))
  {
    v27 = 0;
    do
      atomic_store(0, (unint64_t *)(*(_QWORD *)(v25 + 32) + 8 * v27++));
    while (v27 < *(unsigned int *)(v25 + 40));
  }
LABEL_76:
  context = (void *)MEMORY[0x1A1AF555C]();
  v286 = 0;
  v287 = 0;
  v288 = 0;
  v289 = *(_BYTE *)(a1 + 416);
  v66 = *(uint64_t **)(v26 + 136);
  v67 = *(std::__shared_weak_count **)(v26 + 144);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    v287 = v66;
    v288 = v67;
    v66 = *(uint64_t **)(v26 + 136);
  }
  else
  {
    v287 = *(uint64_t **)(v26 + 136);
  }
  *(_QWORD *)(a1 + 16) = *v66;
  __p = 0;
  v284 = 0;
  v285 = 0;
  v70 = a2;
  *(_QWORD *)&v281 = a2;
  *((_QWORD *)&v281 + 1) = v26;
  v282 = 0;
  v71 = v284;
  v277 = (uint64_t *)__p;
  if (__p != v284)
  {
    v72 = (uint64_t *)__p;
    while (1)
    {
      while (1)
      {
        v73 = (_QWORD *)v72[1];
        v75 = v73[13];
        v74 = v73[14];
        v76 = v74 - v75;
        if (v74 != v75)
          break;
        v72 += 3;
        if (v72 == v71)
          goto LABEL_117;
      }
      if (v76 < 0)
        abort();
      v77 = v73[16];
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v74 - v75, 8);
      v79 = 0;
      do
      {
        if (v78 + v79)
          *(_QWORD *)(v78 + v79) = *(_QWORD *)(v75 + v79);
        v79 += 8;
      }
      while (v75 + v79 != v74);
      v80 = (uint64_t *)(v78 + v79);
      if (v80 != (uint64_t *)v78)
        break;
LABEL_110:
      v83 = 1;
LABEL_111:
      if (v78)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 40))(v77, v78, v76);
      v72 += 3;
      if (v72 == v71)
        v88 = 0;
      else
        v88 = v83;
      if ((v88 & 1) == 0)
        goto LABEL_117;
    }
    v81 = (uint64_t *)v78;
    while (1)
    {
      if ((_BYTE)v286)
        v82 = HIBYTE(v286) == 0;
      else
        v82 = 1;
      v83 = v82;
      if (!v82)
        goto LABEL_111;
      v84 = *v81;
      if (*v81)
        break;
LABEL_92:
      if (++v81 == v80)
        goto LABEL_110;
    }
    v85 = *(_QWORD *)(v84 + 168);
    v86 = *(_QWORD *)(v84 + 176);
    while (1)
    {
      if (v85 == v86)
        goto LABEL_92;
      if (!*(_BYTE *)(v85 + 1))
        break;
      if (*(_BYTE *)(v85 + 1) == 1)
      {
        v87 = (__int16 *)((char *)&v286 + 1);
        goto LABEL_104;
      }
LABEL_105:
      v85 += 152;
    }
    v87 = &v286;
LABEL_104:
    *(_BYTE *)v87 = 1;
    goto LABEL_105;
  }
LABEL_117:
  ggl::MetalDeviceContext::beginFrame(*(_QWORD *)(a1 + 432), (unsigned __int8 *)&v286);
  ggl::MetalBindingManager::resetBindingCache(*(ggl::MetalBindingManager **)(*(_QWORD *)(a1 + 432) + 8));
  if (v277 != v71)
  {
    v89 = v277;
    do
    {
      ggl::MetalDeviceContext::beginPass(*(ggl::MetalDeviceContextPass **)(a1 + 432), *v89, v89[1]);
      v90 = (_QWORD *)v89[1];
      v91 = (const ggl::Texture **)v90[31];
      v92 = (const ggl::Texture **)v90[32];
      if (v91 != v92)
      {
        do
          ggl::MetalDeviceContext::optimizeForCPUAccess(*(ggl::MetalDeviceContext **)(a1 + 432), *v91++);
        while (v91 != v92);
        v90 = (_QWORD *)v89[1];
      }
      v93 = (const ggl::Texture **)v90[27];
      v94 = (const ggl::Texture **)v90[28];
      if (v93 != v94)
      {
        do
          ggl::MetalDeviceContext::optimizeForGPUAccess(*(ggl::MetalDeviceContext **)(a1 + 432), *v93++);
        while (v93 != v94);
        v90 = (_QWORD *)v89[1];
        v93 = (const ggl::Texture **)v90[27];
      }
      v90[32] = v90[31];
      v90[28] = v93;
      v96 = v90[13];
      v95 = v90[14];
      v97 = v95 - v96;
      if (v95 != v96)
      {
        if (v97 < 0)
          abort();
        v98 = v90[16];
        v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v95 - v96, 8);
        v100 = v99;
        v101 = 0;
        do
        {
          if (v99 + v101)
            *(_QWORD *)(v99 + v101) = *(_QWORD *)(v96 + v101);
          v101 += 8;
        }
        while (v96 + v101 != v95);
        if (v101)
        {
          v102 = 8 * (v101 >> 3);
          v103 = (ggl::CommandBuffer **)v99;
          do
          {
            if (*v103)
              ggl::MetalDeviceContext::processBuffer(*(ggl::MetalDeviceContext **)(a1 + 432), *v103);
            ++v103;
            v102 -= 8;
          }
          while (v102);
        }
        if (v100)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98 + 40))(v98, v100, v97);
      }
      v104 = *(_QWORD *)(a1 + 432);
      v105 = *(ggl::MetalDeviceContextPass **)(v104 + 48);
      if (v105)
      {
        *(_QWORD *)(v104 + 48) = 0;
        ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v105);
        MEMORY[0x1A1AF4E00]();
      }
      v89 += 3;
    }
    while (v89 != v71);
  }
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 64))
  {
    v106 = operator new();
    v107 = v106;
    v108 = *((_BYTE *)v70 + 344);
    *(_QWORD *)(v106 + 16) = 0;
    *(_QWORD *)(v106 + 24) = 0;
    *(_DWORD *)(v106 + 32) = 0;
    *(_QWORD *)v106 = &off_1E42B6370;
    *(_QWORD *)(v106 + 8) = 0;
    *(_QWORD *)(v106 + 40) = &unk_1E42B6390;
    *(_QWORD *)(v106 + 48) = "debug";
    *(_OWORD *)(v106 + 56) = 0u;
    v109 = v106 + 56;
    *(_QWORD *)(v106 + 336) = 0;
    *(_OWORD *)(v106 + 72) = 0u;
    *(_OWORD *)(v106 + 88) = 0u;
    *(_OWORD *)(v106 + 104) = 0u;
    *(_OWORD *)(v106 + 120) = 0u;
    *(_OWORD *)(v106 + 136) = 0u;
    *(_OWORD *)(v106 + 152) = 0u;
    *(_OWORD *)(v106 + 168) = 0u;
    *(_OWORD *)(v106 + 184) = 0u;
    *(_OWORD *)(v106 + 200) = 0u;
    *(_OWORD *)(v106 + 216) = 0u;
    *(_OWORD *)(v106 + 232) = 0u;
    *(_OWORD *)(v106 + 248) = 0u;
    *(_DWORD *)(v106 + 328) = 0;
    *(_OWORD *)(v106 + 264) = 0u;
    *(_OWORD *)(v106 + 280) = 0u;
    *(_OWORD *)(v106 + 296) = 0u;
    *(_OWORD *)(v106 + 312) = 0u;
    *(_BYTE *)(v106 + 344) = v108;
    v110 = v70[23];
    if (!v110)
      v110 = v70[11];
    *(_QWORD *)(v106 + 96) = 0;
    *(_QWORD *)(v106 + 104) = 0;
    *(_QWORD *)(v106 + 88) = v110;
    *(_DWORD *)(v106 + 80) = *(_DWORD *)(v110 + 72);
    *(_QWORD *)(v106 + 72) = 1;
    *(_DWORD *)(v106 + 56) = *(_DWORD *)(v110 + 68);
    v111 = *(_QWORD *)(a1 + 128);
    v112 = *(_QWORD *)(v111 + 72);
    if (*(_QWORD *)(v111 + 80) != v112)
      *(_QWORD *)(v111 + 80) = v112;
    v113 = *(uint64_t **)(a1 + 56);
    v114 = *(uint64_t **)(a1 + 64);
    if (v113 != v114)
    {
      v115 = 0;
      do
      {
        v116 = *v113;
        v117 = (std::__shared_weak_count *)v113[1];
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        v120 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v116 + 16))(v116, *(_QWORD *)(a1 + 128), v109);
        if (v117)
        {
          v121 = (unint64_t *)&v117->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v115 |= v120;
        v113 += 2;
      }
      while (v113 != v114);
      if ((v115 & 1) != 0)
      {
        v284 = v277;
        v123 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)&v279 = v107;
        *((_QWORD *)&v279 + 1) = v123;
        v280 = 0;
        v124 = (uint64_t *)__p;
        v125 = v284;
        while (v124 != v125)
        {
          ggl::MetalDeviceContext::beginPass(*(ggl::MetalDeviceContextPass **)(a1 + 432), *v124, v124[1]);
          v126 = (_QWORD *)v124[1];
          v128 = v126[13];
          v127 = v126[14];
          v129 = v127 - v128;
          if (v127 != v128)
          {
            if (v129 < 0)
              abort();
            v130 = v126[16];
            v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, v127 - v128, 8);
            v132 = v131;
            v133 = 0;
            do
            {
              if (v131 + v133)
                *(_QWORD *)(v131 + v133) = *(_QWORD *)(v128 + v133);
              v133 += 8;
            }
            while (v128 + v133 != v127);
            if (v133)
            {
              v134 = 8 * (v133 >> 3);
              v135 = (ggl::CommandBuffer **)v131;
              do
              {
                if (*v135)
                  ggl::MetalDeviceContext::processBuffer(*(ggl::MetalDeviceContext **)(a1 + 432), *v135);
                ++v135;
                v134 -= 8;
              }
              while (v134);
            }
            if (v132)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v130 + 40))(v130, v132, v129);
          }
          v136 = *(_QWORD *)(a1 + 432);
          v137 = *(ggl::MetalDeviceContextPass **)(v136 + 48);
          if (v137)
          {
            *(_QWORD *)(v136 + 48) = 0;
            ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v137);
            MEMORY[0x1A1AF4E00]();
          }
          v124 += 3;
        }
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  }
  gettimeofday((timeval *)buf, 0);
  v138 = (double)*(uint64_t *)buf + (double)*(int *)&buf[8] * 0.000001;
  v139 = fmin(fmax(v138 - *(double *)(a1 + 160), 0.001), 100.0);
  v140 = a1 + 8 * (*(_QWORD *)(a1 + 16) % 0x1EuLL);
  v141 = v139 + *(double *)(a1 + 168) - *(double *)(v140 + 176);
  *(double *)(a1 + 160) = v138;
  *(double *)(a1 + 168) = v141;
  *(double *)(a1 + 152) = 30.0 / v141;
  *(double *)(v140 + 176) = v139;
  v142 = atomic_load((unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 80) + 312));
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  atomic_store(v142, (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 64));
  memset(buf, 0, sizeof(buf));
  {
    v268 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v268, "GeoGL", 0xA3D02C1100000005);
  }
  v291 = ggl::Allocator::instance(void)::alloc;
  __dst = 0;
  v293 = 0;
  v294 = 0;
  {
    v269 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v269, "GeoGL", 0xA3D02C1100000005);
  }
  v295 = ggl::Allocator::instance(void)::alloc;
  v296 = 0;
  v297 = 0;
  v298 = 0;
  {
    v270 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v270, "GeoGL", 0xA3D02C1100000005);
  }
  v299 = ggl::Allocator::instance(void)::alloc;
  v300 = 0;
  v301 = 0;
  v302 = 0;
  {
    v271 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v271, "GeoGL", 0xA3D02C1100000005);
  }
  v303 = ggl::Allocator::instance(void)::alloc;
  v304 = 0;
  v305 = 0;
  v306 = 0;
  {
    v272 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v272, "GeoGL", 0xA3D02C1100000005);
  }
  v307 = ggl::Allocator::instance(void)::alloc;
  v148 = (_QWORD *)a5[3];
  if (!v148)
    goto LABEL_221;
  if (v148 == a5)
  {
    v311 = &v308;
    (*(void (**)(_QWORD *, uint64_t *))(*a5 + 24))(a5, &v308);
  }
  else
  {
    v311 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v148 + 16))(v148);
  }
  v149 = v305;
  if ((unint64_t)v305 >= v306)
  {
    v151 = (v305 - v304) >> 5;
    if ((unint64_t)(v151 + 1) >> 59)
      abort();
    v152 = (uint64_t)(v306 - (_QWORD)v304) >> 4;
    if (v152 <= v151 + 1)
      v152 = v151 + 1;
    if (v306 - (unint64_t)v304 >= 0x7FFFFFFFFFFFFFE0)
      v153 = 0x7FFFFFFFFFFFFFFLL;
    else
      v153 = v152;
    if (v153)
      v154 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v307 + 16))(v307, 32 * v153, 8);
    else
      v154 = 0;
    v155 = (char *)(v154 + 32 * v151);
    std::allocator_traits<geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>::construct[abi:nn180100]<std::function<void ()(NSError *)>,ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,void>(v155, &v308);
    v156 = v154 + 32 * v153;
    v150 = v155 + 32;
    v157 = v304;
    v158 = v305;
    if (v305 == v304)
    {
      v304 = v155;
      v305 = v155 + 32;
      v159 = v306;
      v306 = v156;
      goto LABEL_208;
    }
    do
    {
      v160 = v155;
      v155 -= 32;
      v161 = v158 - 32;
      v162 = (char *)*((_QWORD *)v158 - 1);
      if (v162)
      {
        if (v161 == v162)
        {
          *((_QWORD *)v160 - 1) = v155;
          (*(void (**)(_QWORD, char *))(**((_QWORD **)v158 - 1) + 24))(*((_QWORD *)v158 - 1), v155);
        }
        else
        {
          *((_QWORD *)v160 - 1) = v162;
          *((_QWORD *)v158 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v160 - 1) = 0;
      }
      v158 -= 32;
    }
    while (v161 != v157);
    v158 = v304;
    v163 = v305;
    v304 = v155;
    v305 = v150;
    v159 = v306;
    v306 = v156;
    if (v163 == v158)
    {
LABEL_208:
      if (v158)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v307 + 40))(v307, v158, v159 - (_QWORD)v158);
      goto LABEL_210;
    }
    while (1)
    {
      v168 = v163 - 32;
      v166 = (char *)*((_QWORD *)v163 - 1);
      if (v163 - 32 == v166)
      {
        v166 = v163 - 32;
        v167 = 4;
      }
      else
      {
        if (!v166)
          goto LABEL_215;
        v167 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v166 + 8 * v167))();
LABEL_215:
      v163 = v168;
      if (v168 == v158)
        goto LABEL_208;
    }
  }
  std::allocator_traits<geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>::construct[abi:nn180100]<std::function<void ()(NSError *)>,ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,void>(v305, &v308);
  v150 = v149 + 32;
LABEL_210:
  v305 = v150;
  v164 = v311;
  if (v311 == &v308)
  {
    v165 = 4;
    v164 = &v308;
  }
  else
  {
    if (!v311)
      goto LABEL_221;
    v165 = 5;
  }
  (*(void (**)(void))(*v164 + 8 * v165))();
LABEL_221:
  v169 = v305;
  if ((unint64_t)v305 >= v306)
  {
    v172 = (v305 - v304) >> 5;
    v173 = v172 + 1;
    if ((unint64_t)(v172 + 1) >> 59)
      abort();
    v174 = v306 - (_QWORD)v304;
    if ((uint64_t)(v306 - (_QWORD)v304) >> 4 > v173)
      v173 = v174 >> 4;
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFE0)
      v175 = 0x7FFFFFFFFFFFFFFLL;
    else
      v175 = v173;
    if (v175)
    {
      v176 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v307 + 16))(v307, 32 * v175, 8);
      v177 = (char *)(v176 + 32 * v172);
      v178 = v176 + 32 * v175;
      if (v176)
      {
        *(_QWORD *)v177 = &off_1E42D6038;
        *((_QWORD *)v177 + 1) = a1;
        *((_QWORD *)v177 + 3) = v177;
      }
    }
    else
    {
      v178 = 0;
      v177 = (char *)(32 * v172);
    }
    v170 = a4;
    v171 = v177 + 32;
    v179 = v304;
    v180 = v305;
    if (v305 == v304)
    {
      v304 = v177;
      v305 = v177 + 32;
      v181 = v306;
      v306 = v178;
      if (!v180)
        goto LABEL_247;
LABEL_246:
      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v307 + 40))(v307, v180, v181 - (_QWORD)v180);
      goto LABEL_247;
    }
    do
    {
      v182 = v177;
      v177 -= 32;
      v183 = v180 - 32;
      v184 = (char *)*((_QWORD *)v180 - 1);
      if (v184)
      {
        if (v183 == v184)
        {
          *((_QWORD *)v182 - 1) = v177;
          (*(void (**)(_QWORD, char *))(**((_QWORD **)v180 - 1) + 24))(*((_QWORD *)v180 - 1), v177);
        }
        else
        {
          *((_QWORD *)v182 - 1) = v184;
          *((_QWORD *)v180 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v182 - 1) = 0;
      }
      v180 -= 32;
    }
    while (v183 != v179);
    v180 = v304;
    v185 = v305;
    v304 = v177;
    v305 = v171;
    v181 = v306;
    v306 = v178;
    if (v185 == v180)
    {
LABEL_245:
      v170 = a4;
      if (!v180)
        goto LABEL_247;
      goto LABEL_246;
    }
    while (1)
    {
      v190 = v185 - 32;
      v188 = (char *)*((_QWORD *)v185 - 1);
      if (v185 - 32 == v188)
      {
        v188 = v185 - 32;
        v189 = 4;
      }
      else
      {
        if (!v188)
          goto LABEL_254;
        v189 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v188 + 8 * v189))();
LABEL_254:
      v185 = v190;
      if (v190 == v180)
        goto LABEL_245;
    }
  }
  v170 = a4;
  if (v305)
  {
    *(_QWORD *)v305 = &off_1E42D6038;
    *((_QWORD *)v169 + 1) = a1;
    *((_QWORD *)v169 + 3) = v169;
  }
  v171 = v169 + 32;
LABEL_247:
  v305 = v171;
  v186 = *(_QWORD *)(a6 + 24);
  if (!v186)
    goto LABEL_272;
  v187 = v297;
  if (v297 >= v298)
  {
    v191 = (uint64_t)(v297 - v296) >> 5;
    if ((unint64_t)(v191 + 1) >> 59)
      goto LABEL_420;
    v192 = (uint64_t)(v298 - v296) >> 4;
    if (v192 <= v191 + 1)
      v192 = v191 + 1;
    if (v298 - v296 >= 0x7FFFFFFFFFFFFFE0)
      v193 = 0x7FFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    v312 = &v299;
    if (v193)
    {
      v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v299 + 16))(v299, 32 * v193, 8);
      v195 = v194 + 32 * v191;
      v308 = v194;
      v309 = v195;
      v193 = v194 + 32 * v193;
      v310 = v195;
      v311 = (uint64_t *)v193;
      if (v194)
      {
        v196 = *(_QWORD *)(a6 + 24);
        v170 = a4;
        if (v196)
        {
          if (v196 == a6)
          {
            *(_QWORD *)(v195 + 24) = v195;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24), v195);
          }
          else
          {
            *(_QWORD *)(v195 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 16))(v196);
          }
        }
        else
        {
          *(_QWORD *)(v195 + 24) = 0;
        }
      }
      else
      {
        v170 = a4;
      }
    }
    else
    {
      v195 = 32 * v191;
      v310 = 32 * v191;
      v311 = 0;
      v170 = a4;
    }
    v198 = v195 + 32;
    v310 = v195 + 32;
    v200 = v296;
    v199 = v297;
    if (v297 == v296)
    {
      v201 = v297;
    }
    else
    {
      do
      {
        v202 = v195;
        v195 -= 32;
        v203 = v199 - 32;
        v204 = *(_QWORD *)(v199 - 8);
        if (v204)
        {
          if (v203 == v204)
          {
            *(_QWORD *)(v202 - 8) = v195;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v199 - 8) + 24))(*(_QWORD *)(v199 - 8), v195);
          }
          else
          {
            *(_QWORD *)(v202 - 8) = v204;
            *(_QWORD *)(v199 - 8) = 0;
          }
        }
        else
        {
          *(_QWORD *)(v202 - 8) = 0;
        }
        v199 = v203;
      }
      while (v203 != v200);
      v201 = v296;
      v199 = v297;
      v198 = v310;
      v193 = (uint64_t)v311;
      v170 = a4;
    }
    v296 = v195;
    v297 = v198;
    v309 = v201;
    v310 = v199;
    v205 = v298;
    v298 = v193;
    if (v199 == v201)
    {
      if (!v199)
        goto LABEL_289;
      goto LABEL_288;
    }
    while (1)
    {
      v209 = v199 - 32;
      v310 = v199 - 32;
      v207 = *(_QWORD **)(v199 - 8);
      if ((_QWORD *)(v199 - 32) == v207)
      {
        v207 = (_QWORD *)(v199 - 32);
        v208 = 4;
      }
      else
      {
        if (!v207)
          goto LABEL_296;
        v208 = 5;
      }
      (*(void (**)(void))(*v207 + 8 * v208))();
LABEL_296:
      v199 = v209;
      if (v209 == v201)
      {
        v199 = v201;
        v170 = a4;
        if (!v201)
        {
LABEL_289:
          v297 = v198;
          v197 = *(_QWORD *)(v170 + 24);
          if (!v197)
            goto LABEL_331;
LABEL_290:
          v206 = v301;
          if (v301 < (unint64_t)v302)
          {
            if (v301)
            {
              if (v197 == v170)
              {
                *(_QWORD *)(v301 + 24) = v301;
                (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v170 + 24) + 24))(*(_QWORD *)(v170 + 24), v206);
              }
              else
              {
                *(_QWORD *)(v206 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 16))(v197);
              }
            }
            v217 = v206 + 32;
LABEL_330:
            v301 = v217;
            goto LABEL_331;
          }
          v210 = (uint64_t)(v301 - v300) >> 5;
          if (!((unint64_t)(v210 + 1) >> 59))
          {
            v211 = ((uint64_t)v302 - v300) >> 4;
            if (v211 <= v210 + 1)
              v211 = v210 + 1;
            if ((unint64_t)v302 - v300 >= 0x7FFFFFFFFFFFFFE0)
              v212 = 0x7FFFFFFFFFFFFFFLL;
            else
              v212 = v211;
            v312 = &v303;
            if (v212)
            {
              v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v303 + 16))(v303, 32 * v212, 8);
              v214 = v213 + 32 * v210;
              v308 = v213;
              v309 = v214;
              v215 = (uint64_t *)(v213 + 32 * v212);
              v310 = v214;
              v311 = v215;
              if (v213)
              {
                v216 = *(_QWORD *)(a4 + 24);
                if (v216)
                {
                  if (v216 == a4)
                  {
                    *(_QWORD *)(v214 + 24) = v214;
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), v214);
                  }
                  else
                  {
                    *(_QWORD *)(v214 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 16))(v216);
                  }
                }
                else
                {
                  *(_QWORD *)(v214 + 24) = 0;
                }
              }
            }
            else
            {
              v215 = 0;
              v214 = 32 * v210;
              v310 = 32 * v210;
              v311 = 0;
            }
            v217 = v214 + 32;
            v310 = v214 + 32;
            v219 = v300;
            v218 = v301;
            if (v301 == v300)
            {
              v220 = v301;
            }
            else
            {
              do
              {
                v221 = v214;
                v214 -= 32;
                v222 = v218 - 32;
                v223 = *(_QWORD *)(v218 - 8);
                if (v223)
                {
                  if (v222 == v223)
                  {
                    *(_QWORD *)(v221 - 8) = v214;
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v218 - 8) + 24))(*(_QWORD *)(v218 - 8), v214);
                  }
                  else
                  {
                    *(_QWORD *)(v221 - 8) = v223;
                    *(_QWORD *)(v218 - 8) = 0;
                  }
                }
                else
                {
                  *(_QWORD *)(v221 - 8) = 0;
                }
                v218 = v222;
              }
              while (v222 != v219);
              v220 = v300;
              v218 = v301;
              v217 = v310;
              v215 = v311;
            }
            v300 = v214;
            v301 = v217;
            v309 = v220;
            v310 = v218;
            v224 = v302;
            v302 = v215;
            if (v218 == v220)
            {
              if (!v218)
                goto LABEL_330;
              goto LABEL_329;
            }
            while (2)
            {
              v238 = v218 - 32;
              v310 = v218 - 32;
              v236 = *(_QWORD **)(v218 - 8);
              if ((_QWORD *)(v218 - 32) != v236)
              {
                if (v236)
                {
                  v237 = 5;
LABEL_348:
                  (*(void (**)(void))(*v236 + 8 * v237))();
                }
                v218 = v238;
                if (v238 == v220)
                {
                  v218 = v220;
                  if (!v220)
                    goto LABEL_330;
LABEL_329:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v312 + 40))(*v312, v218, (uint64_t)v224 - v218);
                  goto LABEL_330;
                }
                continue;
              }
              break;
            }
            v236 = (_QWORD *)(v218 - 32);
            v237 = 4;
            goto LABEL_348;
          }
LABEL_420:
          abort();
        }
LABEL_288:
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)*v312 + 40))(*v312, v199, v205 - v199);
        goto LABEL_289;
      }
    }
  }
  if (v297)
  {
    if (v186 == a6)
    {
      *(_QWORD *)(v297 + 24) = v297;
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24), v187);
    }
    else
    {
      *(_QWORD *)(v187 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 16))(v186);
    }
  }
  v297 = v187 + 32;
LABEL_272:
  v197 = *(_QWORD *)(v170 + 24);
  if (v197)
    goto LABEL_290;
LABEL_331:
  v225 = v278;
  if (&__dst != (void **)(v278 + 152))
  {
    v227 = *(char **)(v278 + 152);
    v226 = *(char **)(v278 + 160);
    v228 = v226 - v227;
    v229 = (v226 - v227) >> 3;
    v230 = (uint64_t)v294;
    v231 = (char *)__dst;
    if (v229 <= (v294 - (_BYTE *)__dst) >> 3)
    {
      v239 = (v293 - (_BYTE *)__dst) >> 3;
      if (v239 >= v229)
      {
        if (v226 != v227)
          memmove(__dst, *(const void **)(v278 + 152), v226 - v227);
        goto LABEL_362;
      }
      v240 = &v227[8 * v239];
      if (v293 != __dst)
      {
        memmove(__dst, *(const void **)(v278 + 152), v293 - (_BYTE *)__dst);
        v231 = v293;
      }
      v235 = v231;
      if (v240 != v226)
      {
        v235 = v231;
        do
        {
          if (v235)
            *(_QWORD *)v235 = *(_QWORD *)v240;
          v240 += 8;
          v235 += 8;
        }
        while (v240 != v226);
      }
    }
    else
    {
      if (__dst)
      {
        v293 = (char *)__dst;
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v295 + 40))(v295, __dst);
        v230 = 0;
        __dst = 0;
        v293 = 0;
        v294 = 0;
      }
      if (v228 < 0)
        goto LABEL_420;
      v232 = v230 >> 2;
      if (v230 >> 2 <= v229)
        v232 = (v226 - v227) >> 3;
      v233 = (unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v232;
      if (v233 >> 61)
        goto LABEL_420;
      v234 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v295 + 16))(v295, 8 * v233, 8);
      v231 = v234;
      __dst = v234;
      v293 = v234;
      v294 = &v234[8 * v233];
      v235 = v234;
      if (v227 != v226)
      {
        v235 = v234;
        do
        {
          if (v235)
            *(_QWORD *)v235 = *(_QWORD *)v227;
          v227 += 8;
          v235 += 8;
        }
        while (v227 != v226);
      }
    }
    v228 = v235 - v231;
LABEL_362:
    v293 = &v231[v228];
    v225 = v278;
  }
  v241 = (char **)(v225 + 184);
  v242 = *(char **)(v225 + 184);
  if (buf != (_BYTE *)(v225 + 184))
  {
    v243 = *(char **)(v225 + 192);
    v244 = v243 - v242;
    v245 = (v243 - v242) >> 3;
    v246 = *(_QWORD *)&buf[16];
    v247 = *(_QWORD *)buf;
    if (v245 <= (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3)
    {
      v252 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if (v252 >= v245)
      {
        if (v243 != v242)
          memmove(*(void **)buf, v242, v243 - v242);
        goto LABEL_388;
      }
      v253 = &v242[8 * v252];
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        memmove(*(void **)buf, v242, *(_QWORD *)&buf[8] - *(_QWORD *)buf);
        v247 = *(_QWORD *)&buf[8];
      }
      v251 = (char *)v247;
      if (v253 != v243)
      {
        v251 = (char *)v247;
        do
        {
          if (v251)
            *(_QWORD *)v251 = *(_QWORD *)v253;
          v253 += 8;
          v251 += 8;
        }
        while (v253 != v243);
      }
    }
    else
    {
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v291 + 40))(v291, *(_QWORD *)buf);
        v246 = 0;
        memset(buf, 0, sizeof(buf));
      }
      if (v244 < 0)
        goto LABEL_420;
      v248 = v246 >> 2;
      if (v246 >> 2 <= v245)
        v248 = (v243 - v242) >> 3;
      v249 = (unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v248;
      if (v249 >> 61)
        goto LABEL_420;
      v250 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v291 + 16))(v291, 8 * v249, 8);
      v247 = v250;
      *(_QWORD *)buf = v250;
      *(_QWORD *)&buf[8] = v250;
      *(_QWORD *)&buf[16] = v250 + 8 * v249;
      v251 = (char *)v250;
      if (v242 != v243)
      {
        v251 = (char *)v250;
        do
        {
          if (v251)
            *(_QWORD *)v251 = *(_QWORD *)v242;
          v242 += 8;
          v251 += 8;
        }
        while (v242 != v243);
      }
    }
    v244 = (int64_t)&v251[-v247];
LABEL_388:
    *(_QWORD *)&buf[8] = v247 + v244;
    v242 = *v241;
    v225 = v278;
  }
  *(_QWORD *)(v225 + 160) = *(_QWORD *)(v225 + 152);
  *(_QWORD *)(v225 + 192) = v242;
  ggl::MetalDeviceContext::endFrame(*(ggl::MetalDeviceContext **)(a1 + 432), (const ggl::EndFrameParams *)buf);
  v254 = *v287;
  v255 = (std::__shared_weak_count *)operator new(0x78uLL);
  v255->__shared_owners_ = 0;
  v256 = (unint64_t *)&v255->__shared_owners_;
  v255->__shared_weak_owners_ = 0;
  v255->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3078;
  v255[1].__vftable = (std::__shared_weak_count_vtbl *)(v254 + 1);
  LODWORD(v255[1].__shared_owners_) = 0;
  v255[3].__shared_owners_ = 0;
  v255[4].__shared_weak_owners_ = 0;
  v257 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
  v257->~__shared_weak_count_0 = 0;
  v257->__on_zero_shared = 0;
  v257->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42DE998;
  v257->__on_zero_shared_weak = 0;
  v255[1].__shared_weak_owners_ = (uint64_t)&v257->__get_deleter;
  v255[2].__vftable = v257;
  do
    v258 = __ldxr(v256);
  while (__stxr(v258 + 1, v256));
  do
    v259 = __ldxr(v256);
  while (__stxr(v259 + 1, v256));
  v260 = *(std::__shared_weak_count **)(v278 + 144);
  *(_QWORD *)(v278 + 136) = v255 + 1;
  *(_QWORD *)(v278 + 144) = v255;
  if (v260)
  {
    v261 = (unint64_t *)&v260->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  do
    v263 = __ldaxr(v256);
  while (__stlxr(v263 - 1, v256));
  if (!v263)
  {
    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
    std::__shared_weak_count::__release_weak(v255);
  }
  do
    v264 = __ldaxr(v256);
  while (__stlxr(v264 - 1, v256));
  if (!v264)
  {
    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
    std::__shared_weak_count::__release_weak(v255);
  }
  ggl::EndFrameParams::~EndFrameParams((ggl::EndFrameParams *)buf);
  if (__p)
    operator delete(__p);
  v265 = v288;
  if (v288)
  {
    v266 = (unint64_t *)&v288->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  objc_autoreleasePoolPop(context);
}

void sub_19FF13920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  std::__split_buffer<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator> &>::~__split_buffer(v48 - 136);
  ggl::EndFrameParams::~EndFrameParams((ggl::EndFrameParams *)&a29);
  if (__p)
    operator delete(__p);
  md::components::Material::~Material((md::components::Material *)&a25);
  _Unwind_Resume(a1);
}

uint64_t ggl::MetalRenderer::device(ggl::MetalRenderer *this)
{
  return *((_QWORD *)this + 17);
}

_QWORD *std::allocator_traits<geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>::construct[abi:nn180100]<std::function<void ()(NSError *)>,ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,void>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    v3 = (_QWORD *)a2[3];
    if (v3)
    {
      if (v3 == a2)
      {
        v7 = v6;
        (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
      }
      else
      {
        v7 = (_QWORD *)a2[3];
        a2[3] = 0;
      }
    }
    else
    {
      v7 = 0;
    }
    v2[3] = 0;
    result = operator new(0x28uLL);
    v4 = result;
    *result = &off_1E42D5FF0;
    if (!v7)
    {
      result[4] = 0;
      goto LABEL_11;
    }
    if (v7 != v6)
    {
      result[4] = v7;
LABEL_11:
      v2[3] = result;
      return result;
    }
    result[4] = result + 1;
    (*(void (**)(_QWORD *))(v6[0] + 24))(v6);
    result = v7;
    v2[3] = v4;
    if (result == v6)
    {
      v5 = 4;
      result = v6;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
    if (result)
    {
      v5 = 5;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  return result;
}

void sub_19FF13BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ggl::EndFrameParams::~EndFrameParams(ggl::EndFrameParams *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    v3 = *((_QWORD *)this + 17);
    v4 = *((_QWORD *)this + 16);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 17) = v2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19), v4, *((_QWORD *)this + 18) - v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *((_QWORD *)this + 16);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = *((_QWORD *)this + 12);
  if (!v8)
    goto LABEL_23;
  v9 = *((_QWORD *)this + 13);
  v10 = *((_QWORD *)this + 12);
  if (v9 != v8)
  {
    while (1)
    {
      v13 = v9 - 32;
      v11 = *(_QWORD **)(v9 - 8);
      if ((_QWORD *)(v9 - 32) == v11)
      {
        v11 = (_QWORD *)(v9 - 32);
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_17;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
      v9 = v13;
      if (v13 == v8)
      {
        v10 = *((_QWORD *)this + 12);
        break;
      }
    }
  }
  *((_QWORD *)this + 13) = v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v10, *((_QWORD *)this + 14) - v10);
LABEL_23:
  v14 = *((_QWORD *)this + 8);
  if (!v14)
    goto LABEL_34;
  v15 = *((_QWORD *)this + 9);
  v16 = *((_QWORD *)this + 8);
  if (v15 != v14)
  {
    while (1)
    {
      v19 = v15 - 32;
      v17 = *(_QWORD **)(v15 - 8);
      if ((_QWORD *)(v15 - 32) == v17)
      {
        v17 = (_QWORD *)(v15 - 32);
        v18 = 4;
      }
      else
      {
        if (!v17)
          goto LABEL_28;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_28:
      v15 = v19;
      if (v19 == v14)
      {
        v16 = *((_QWORD *)this + 8);
        break;
      }
    }
  }
  *((_QWORD *)this + 9) = v14;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v16, *((_QWORD *)this + 10) - v16);
LABEL_34:
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    *((_QWORD *)this + 5) = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v20, *((_QWORD *)this + 6) - v20);
  }
  v21 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v21, *((_QWORD *)this + 2) - v21);
  }
}

void std::__shared_ptr_emplace<ggl::RenderTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D6038;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D6038;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_1>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_16;
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v5 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v11 = 138412290;
    v12 = v3;
    _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Frame completed with error:%@", (uint8_t *)&v11, 0xCu);
  }

  objc_msgSend(v3, "domain");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 != (void *)*MEMORY[0x1E0CC6958])
  {

LABEL_16:
    atomic_store(0, (unsigned int *)(v4 + 420));
    goto LABEL_17;
  }
  v8 = objc_msgSend(v3, "code") == 4;

  if (!v8)
    goto LABEL_16;
  if (!*(_BYTE *)(v4 + 424))
    goto LABEL_16;
  v9 = atomic_load((unsigned int *)(v4 + 420));
  if (v9 >= *(_DWORD *)(v4 + 428))
    goto LABEL_16;
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v10 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "Marking to reset command queue", (uint8_t *)&v11, 2u);
  }

  atomic_store(1u, (unsigned __int8 *)(v4 + 417));
LABEL_17:

}

void sub_19FF1404C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42D5FF0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42D5FF0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E42D5FF0;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_19FF141AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E42D5FF0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0,std::allocator<ggl::MetalRenderer::frame(ggl::RenderTarget *,ggl::RenderQueue *,std::function<void ()(void)>,std::function<void ()(void)>,std::function<void ()(ggl::WillSubmitFrameInfo const*)>)::$_0>,void ()(NSError *)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v3;
  id v4;

  v4 = *a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);

  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_19FF14308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:nn180100]<ggl::BitmapData,std::allocator<ggl::BitmapData>,unsigned int &,unsigned int &,int,int,unsigned int,CGColorSpace *,unsigned int,void>(std::__shared_weak_count **a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, CGColorSpace *a7, int a8)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  CGColorSpaceRef v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;

  v16 = (std::__shared_weak_count *)operator new(0x70uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE4C8;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v16[2].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v16[2].__shared_owners_ = a3;
  v16[2].__shared_weak_owners_ = a4;
  v16[3].__vftable = (std::__shared_weak_count_vtbl *)a5;
  v16[3].__shared_owners_ = a6;
  v18 = CGColorSpaceRetain(a7);
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5718;
  v19 = v16 + 1;
  v16[3].__shared_weak_owners_ = (uint64_t)v18;
  LODWORD(v16[4].__vftable) = a8;
  v16[4].__shared_owners_ = 0;
  if (a6 * (unint64_t)a3)
    v16[4].__shared_owners_ = operator new[]();
  *a1 = v19;
  a1[1] = v16;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v16[1].__shared_owners_ = (uint64_t)v19;
  v16[1].__shared_weak_owners_ = (uint64_t)v16;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void std::__shared_ptr_emplace<ggl::BitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::BitmapData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

CGImageRef ggl::BitmapDataBase::newImage(ggl::BitmapDataBase *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  CGDataProvider *v8;
  CGImageRef v9;
  ggl *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  CGDataProviderDirectCallbacks callbacks;

  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3 && (v4 = *((_QWORD *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) != 0))
  {
    *v2 = v4;
    v2[1] = v5;
    v6 = *((_QWORD *)this + 7);
    v7 = *((_QWORD *)this + 4);
    v2[2] = *((_QWORD *)this + 3);
    v2[3] = v7;
    *(_OWORD *)&callbacks.version = xmmword_1E42FA5A8;
    *(_OWORD *)&callbacks.releaseBytePointer = *(_OWORD *)algn_1E42FA5B8;
    callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)ggl::DataProviderReleaseInfoCallback;
    v8 = CGDataProviderCreateDirect(v2, v6 * v7, &callbacks);
    v9 = CGImageCreate(*((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((CGColorSpaceRef *)this + 8), *((_DWORD *)this + 18), v8, 0, 1, kCGRenderingIntentDefault);
    CFRelease(v8);
    return v9;
  }
  else
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    return (CGImageRef)ggl::DataProviderGetBytesAtPositionCallback(v11, v12, v13, v14, v15);
  }
}

uint64_t ggl::DataProviderGetBytesAtPositionCallback(ggl *this, char *a2, int64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  size_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (4 * *((_QWORD *)this + 3) * *((_QWORD *)this + 2) - a3 >= a4)
    v4 = a4;
  else
    v4 = 4 * *((_QWORD *)this + 3) * *((_QWORD *)this + 2) - a3;
  if (v4)
  {
    v5 = a3;
    v8 = v4;
    do
    {
      if ((v5 & 0x8000000000000000) != 0
        || (v10 = *((_QWORD *)this + 3), v11 = 4 * *((_QWORD *)this + 2), v8 + v5 > v11 * v10))
      {
        v9 = 0;
      }
      else
      {
        v12 = v10 + ~(v5 / v11);
        if (v11 - v5 % v11 >= v8)
          v9 = v8;
        else
          v9 = v11 - v5 % v11;
        v13 = v5 % v11 + v12 * v11;
        if ((v13 & 0x8000000000000000) == 0
          && v13 + v9 <= *(_QWORD *)(*(_QWORD *)this + 56) * *(_QWORD *)(*(_QWORD *)this + 32))
        {
          v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
          memcpy(a2, (const void *)(v14 + v13), v9);
        }
      }
      v5 += v9;
      a2 += v9;
      v8 -= v9;
    }
    while (v8);
  }
  return v4;
}

uint64_t ggl::DataProviderReleaseInfoCallback(uint64_t this, void *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (this)
  {
    v2 = *(std::__shared_weak_count **)(this + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *, void *))v2->__on_zero_shared)(v2, a2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return this;
}

void ggl::BitmapData::~BitmapData(ggl::BitmapData *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E42B5718;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4077774924);
  *(_QWORD *)this = off_1E42B6938;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 8));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E42B5718;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4077774924);
  *(_QWORD *)this = off_1E42B6938;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 8));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::BitmapData::data(ggl::BitmapData *this)
{
  return *((_QWORD *)this + 10);
}

void ggl::IOSurfaceBitmapData::~IOSurfaceBitmapData(IOSurfaceRef *this)
{
  IOSurfaceRef v2;
  std::__shared_weak_count *v3;

  *this = (IOSurfaceRef)&off_1E42BA928;
  IOSurfaceUnlock(this[10], 1u, 0);
  v2 = this[10];
  if (v2)
  {
    CFRelease(v2);
    this[10] = 0;
  }
  *this = (IOSurfaceRef)off_1E42B6938;
  CGColorSpaceRelease(this[8]);
  v3 = (std::__shared_weak_count *)this[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  IOSurfaceRef v2;
  std::__shared_weak_count *v3;

  *this = (IOSurfaceRef)&off_1E42BA928;
  IOSurfaceUnlock(this[10], 1u, 0);
  v2 = this[10];
  if (v2)
  {
    CFRelease(v2);
    this[10] = 0;
  }
  *this = (IOSurfaceRef)off_1E42B6938;
  CGColorSpaceRelease(this[8]);
  v3 = (std::__shared_weak_count *)this[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1A1AF4E00);
}

void *ggl::IOSurfaceBitmapData::data(IOSurfaceRef *this)
{
  if (!*((_BYTE *)this + 96))
  {
    IOSurfaceLock(this[10], 1u, 0);
    *((_BYTE *)this + 96) = 1;
  }
  return IOSurfaceGetBaseAddress(this[10]);
}

CGImageRef ggl::IOSurfaceBitmapData::newImage(ggl::IOSurfaceBitmapData *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  off_t v6;
  CGDataProvider *v7;
  CGImageRef v8;
  ggl *v10;
  void *v11;
  CGDataProviderDirectCallbacks callbacks;

  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3 && (v4 = *((_QWORD *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) != 0))
  {
    *v2 = v4;
    v2[1] = v5;
    v6 = *((_QWORD *)this + 11);
    *((_OWORD *)v2 + 1) = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)&callbacks.version = xmmword_1E42FA5D0;
    *(_OWORD *)&callbacks.releaseBytePointer = unk_1E42FA5E0;
    callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)ggl::DataProviderReleaseInfoCallback;
    v7 = CGDataProviderCreateDirect(v2, v6, &callbacks);
    v8 = CGImageCreate(*((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((CGColorSpaceRef *)this + 8), *((_DWORD *)this + 18), v7, 0, 1, kCGRenderingIntentDefault);
    CGImageSetProperty();
    CGDataProviderRelease(v7);
    return v8;
  }
  else
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    return (CGImageRef)ggl::DataProviderGetBytesCallback(v10, v11);
  }
}

uint64_t ggl::DataProviderGetBytesCallback(ggl *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
}

uint64_t *std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
      return a1;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 -= 64;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit(unsigned int)::$_0 &,gm::Range<unsigned long> *>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;

  v5 = a2->n128_u64[0];
  v6 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit(unsigned int)::$_0 &,gm::Range<unsigned long> *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __n128 *v34;
  uint64_t v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      if (a2[-1].n128_u64[0] < a1->n128_u64[0])
        goto LABEL_6;
      return result;
    case 3:
      v8 = (__int128 *)&a1[1];
      v9 = a1[1].n128_u64[0];
      v7 = a2 - 1;
      v10 = a2[-1].n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v10 < v9)
        {
          v27 = *v8;
          *v8 = (__int128)*v7;
          *v7 = (__n128)v27;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            v28 = (__int128)*a1;
            *a1 = (__n128)*v8;
            *v8 = v28;
          }
        }
      }
      else if (v10 >= v9)
      {
        v31 = (__int128)*a1;
        *a1 = (__n128)*v8;
        *v8 = v31;
        if (v7->n128_u64[0] < a1[1].n128_u64[0])
        {
          v32 = *v8;
          *v8 = (__int128)*v7;
          *v7 = (__n128)v32;
        }
      }
      else
      {
LABEL_6:
        v11 = *a1;
        *a1 = *v7;
        *v7 = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, a3);
      v22 = a2[-1].n128_u64[0];
      v21 = a2 - 1;
      if (v22 < a1[3].n128_u64[0])
      {
        v23 = *v20;
        *v20 = *v21;
        *v21 = v23;
        if (v20->n128_u64[0] < v19->n128_u64[0])
        {
          v24 = *v19;
          *v19 = *v20;
          *v20 = v24;
          if (v19->n128_u64[0] < v18->n128_u64[0])
          {
            v25 = *v18;
            *v18 = *v19;
            *v19 = v25;
            if (a1[1].n128_u64[0] < a1->n128_u64[0])
            {
              v26 = *a1;
              *a1 = *v18;
              *v18 = v26;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1[2].n128_u64[0];
      v14 = a1 + 1;
      v15 = a1[1].n128_u64[0];
      v16 = a1->n128_u64[0];
      if (v15 >= a1->n128_u64[0])
      {
        if (v13 < v15)
        {
          v29 = *v14;
          *v14 = *v12;
          *v12 = v29;
          if (v14->n128_u64[0] < v16)
          {
            v30 = *a1;
            *a1 = *v14;
            *v14 = v30;
          }
        }
      }
      else
      {
        if (v13 >= v15)
        {
          v33 = *a1;
          *a1 = *v14;
          *v14 = v33;
          if (v13 >= a1[1].n128_u64[0])
            goto LABEL_27;
          v17 = *v14;
          *v14 = *v12;
        }
        else
        {
          v17 = *a1;
          *a1 = *v12;
        }
        *v12 = v17;
      }
LABEL_27:
      v34 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v38 = v34->n128_u64[0];
    if (v34->n128_u64[0] < v12->n128_u64[0])
    {
      v39 = v34->n128_i64[1];
      v40 = v35;
      do
      {
        *(__n128 *)((char *)a1 + v40 + 48) = *(__n128 *)((char *)a1 + v40 + 32);
        if (v40 == -32)
        {
          v37 = (unint64_t *)a1;
          goto LABEL_30;
        }
        v41 = *(unint64_t *)((char *)a1[1].n128_u64 + v40);
        v40 -= 16;
      }
      while (v38 < v41);
      v37 = (unint64_t *)((char *)a1[3].n128_u64 + v40);
LABEL_30:
      *v37 = v38;
      v37[1] = v39;
      if (++v36 == 8)
        return &v34[1] == a2;
    }
    v12 = v34;
    v35 += 16;
    if (++v34 == a2)
      return 1;
  }
}

void ggl::MetalSurface::~MetalSurface(id *this)
{

}

{

  JUMPOUT(0x1A1AF4E00);
}

double ggl::MetalSurface::extents(id *this)
{
  double v2;
  double v3;
  double v4;

  objc_msgSend(this[2], "contentsScale");
  v3 = v2;
  objc_msgSend(this[2], "bounds");
  return v4 * v3;
}

void ggl::MPSBlur::~MPSBlur(id *this)
{
  id v2;

  *this = off_1E42BCBE0;
  this[1] = (id)3131955885;
  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    (*(void (**)(id, id, int64_t))(*(_QWORD *)this[5] + 40))(this[5], v2, (_BYTE *)this[4] - (_BYTE *)v2);
  }
}

{
  id v2;

  *this = off_1E42BCBE0;
  this[1] = (id)3131955885;
  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    (*(void (**)(id, id, int64_t))(*(_QWORD *)this[5] + 40))(this[5], v2, (_BYTE *)this[4] - (_BYTE *)v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MPSBlur::encode(uint64_t a1, id *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t i;
  id *v17;
  uint64_t v18;
  unint64_t j;
  uint64_t v20;
  id v21;
  unsigned int v22;
  double v23;
  id *v24;
  _QWORD v25[5];

  v5 = a3;
  if (*(_BYTE *)(a1 + 49))
  {
    v6 = objc_alloc((Class)getMPSImageTentClass());
    a2 = (id *)a2[13];
    v7 = objc_msgSend(v6, "initWithDevice:kernelWidth:kernelHeight:", a2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 48));
    v9 = (id *)(a1 + 64);
    v8 = *(id *)(a1 + 64);
LABEL_3:
    *v9 = (id)v7;

    objc_msgSend(*v9, "setEdgeMode:", 1);
    objc_msgSend(*v9, "setOptions:", 2);
    goto LABEL_5;
  }
  v9 = (id *)(a1 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    v21 = objc_alloc((Class)getMPSImageGaussianBlurClass());
    a2 = (id *)a2[13];
    LOBYTE(v22) = *(_BYTE *)(a1 + 48);
    *(float *)&v23 = (float)v22;
    v7 = objc_msgSend(v21, "initWithDevice:sigma:", a2, v23);
    v8 = *v9;
    goto LABEL_3;
  }
LABEL_5:
  v10 = *(_QWORD *)(a1 + 72);
  if (*(_BYTE *)(v10 + 120) == 1)
  {
    v11 = (id *)(*(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 64));
  }
  else
  {
    if (*(_BYTE *)(v10 + 120))
      goto LABEL_10;
    v11 = *(id **)(v10 + 32);
  }
  a2 = (id *)*v11;
LABEL_10:
  v12 = objc_msgSend(a2, "pixelFormat");
  v13 = v12;
  if (v12 == 81)
    v14 = 80;
  else
    v14 = v12;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN3ggl7MPSBlur6encodeEPNS_11MetalDeviceEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
  v25[3] = &__block_descriptor_40_e73____MTLTexture__32__0__MPSKernel_8___MTLCommandBuffer__16___MTLTexture__24l;
  v25[4] = v14;
  v15 = (void *)MEMORY[0x1A1AF5730](v25);
  if (v14 == v13)
  {
    for (i = 0; i < objc_msgSend(a2, "arrayLength"); ++i)
    {
      if (objc_msgSend(a2, "textureType") == 2)
        v17 = a2;
      else
        v17 = (id *)objc_msgSend(a2, "newTextureViewWithPixelFormat:textureType:levels:slices:", v14, 2, 0, 1, i, 1);
      v24 = v17;
      if (*(_BYTE *)(a1 + 49))
        v18 = 64;
      else
        v18 = 56;
      objc_msgSend(*(id *)(a1 + v18), "encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:", v5, &v24, v15);

    }
  }
  else
  {
    for (j = 0; j < objc_msgSend(a2, "arrayLength"); ++j)
    {
      v24 = (id *)objc_msgSend(a2, "newTextureViewWithPixelFormat:textureType:levels:slices:", v14, 2, 0, 1, j, 1);
      if (*(_BYTE *)(a1 + 49))
        v20 = 64;
      else
        v20 = 56;
      objc_msgSend(*(id *)(a1 + v20), "encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:", v5, &v24, v15);

    }
  }

}

void sub_19FF152E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ggl::MPSBlur::setupTextures(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t ___ZN3ggl7MPSBlur6encodeEPNS_11MetalDeviceEPU27objcproto16MTLCommandBuffer11objc_object_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", *(_QWORD *)(a1 + 32), objc_msgSend(v7, "width"), objc_msgSend(v7, "height"), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "newTextureWithDescriptor:", v8);

  return v10;
}

void sub_19FF153EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

Class initMPSImageGaussianBlur(void)
{
  Class result;

  if (LoadMetalPerformanceShaders(void)::loadPredicate != -1)
    dispatch_once(&LoadMetalPerformanceShaders(void)::loadPredicate, &__block_literal_global_40241);
  result = objc_getClass("MPSImageGaussianBlur");
  classMPSImageGaussianBlur = (uint64_t)result;
  getMPSImageGaussianBlurClass = (uint64_t (*)(void))MPSImageGaussianBlurFunction;
  return result;
}

id MPSImageGaussianBlurFunction(void)
{
  return (id)classMPSImageGaussianBlur;
}

Class initMPSImageTent(void)
{
  Class result;

  if (LoadMetalPerformanceShaders(void)::loadPredicate != -1)
    dispatch_once(&LoadMetalPerformanceShaders(void)::loadPredicate, &__block_literal_global_40241);
  result = objc_getClass("MPSImageTent");
  classMPSImageTent = (uint64_t)result;
  getMPSImageTentClass = (uint64_t (*)(void))MPSImageTentFunction;
  return result;
}

id MPSImageTentFunction(void)
{
  return (id)classMPSImageTent;
}

void ___ZL27LoadMetalPerformanceShadersv_block_invoke()
{
  LoadMetalPerformanceShaders(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders", 2);
  if (!LoadMetalPerformanceShaders(void)::frameworkLibrary)
    NSLog((NSString *)CFSTR("### Failed to Soft Linked: /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders"));
}

void sub_19FF155A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void ggl::MetalSwapchainDrawableRef::presentAtTime(ggl::MetalSwapchainDrawableRef *this, double a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v6;

  v2 = *((_QWORD *)this + 1);
  v3 = (unsigned int *)(v2 + 132);
  v4 = __ldaxr((unsigned int *)(v2 + 132));
  if (v4 == 3)
  {
    if (!__stlxr(5u, v3))
    {
      std::mutex::lock((std::mutex *)v2);
      v6 = **(void ***)(v2 + 112);
      if (a2 == 0.0)
        objc_msgSend(v6, "present");
      else
        objc_msgSend(v6, "presentAtTime:", a2);
      ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(_QWORD *)(v2 + 64) + 80), *(const ggl::Texture **)(v2 + 96), 0);
      std::mutex::unlock((std::mutex *)v2);
      do
        __ldaxr(v3);
      while (__stlxr(6u, v3));
    }
  }
  else
  {
    __clrex();
  }
}

void sub_19FF1568C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ggl::MetalSurfaceDrawable *,std::shared_ptr<ggl::MetalSurfaceDrawable>::__shared_ptr_default_delete<ggl::MetalSurfaceDrawable,ggl::MetalSurfaceDrawable>,std::allocator<ggl::MetalSurfaceDrawable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ___ZL28GEOGetGeoGLMetalSwapchainLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalSwapchain");
  v1 = (void *)GEOGetGeoGLMetalSwapchainLog(void)::log;
  GEOGetGeoGLMetalSwapchainLog(void)::log = (uint64_t)v0;

}

void ggl::MetalSwapchainDrawable::removeRef(std::mutex *this)
{
  int sig;
  int v3;
  unsigned int *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::mutex::lock(this);
  sig = this[2].__m_.__sig;
  if (sig)
  {
    v3 = sig - 1;
    LODWORD(this[2].__m_.__sig) = v3;
    if (!v3)
    {
      v4 = (unsigned int *)&this[2].__m_.__sig + 1;
      do
        __ldaxr(v4);
      while (__stlxr(0, v4));
      v5 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[48];
      *(_QWORD *)&this[1].__m_.__opaque[40] = 0;
      *(_QWORD *)&this[1].__m_.__opaque[48] = 0;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  else
  {
    if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1)
      dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_40250);
    v8 = GEOGetGeoGLMetalSwapchainLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_FAULT))
    {
      v9 = 136315650;
      v10 = "false";
      v11 = 2080;
      v12 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
      v13 = 1024;
      v14 = 178;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_FAULT, "Attempting to set to negative ref count on drawable: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v9, 0x1Cu);
    }
  }
  std::mutex::unlock(this);
}

void ggl::MetalDeviceContextPass::~MetalDeviceContextPass(ggl::MetalDeviceContextPass *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    objc_msgSend(v2, "updateFence:", *((_QWORD *)this + 11));
    objc_msgSend(*((id *)this + 13), "endEncoding");
    v3 = (void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    objc_msgSend(v4, "updateFence:afterStages:", *((_QWORD *)this + 11), 2);
    objc_msgSend(*((id *)this + 12), "endEncoding");
    v5 = (void *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;

  }
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
}

void sub_19FF158E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 64))
    *(_BYTE *)(v1 + 64) = 0;
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TextureRect::TextureVBO>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::TextureRect::TextureMesh::~TextureMesh(ggl::TextureRect::TextureMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TextureRect::TextureMesh::~TextureMesh(ggl::TextureRect::TextureMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TextureRect::TextureMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TextureRect::TextureMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TextureRect::TextureVBO>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TextureRect::TextureVBO>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TextureRect::TextureRectPipelineState::~TextureRectPipelineState(ggl::TextureRect::TextureRectPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TextureRect::TextureRectPipelineSetup::~TextureRectPipelineSetup(ggl::TextureRect::TextureRectPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TextureRect::TextureRectPipelineSetup::constantDataIsEnabled(ggl::TextureRect::TextureRectPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TextureRect::TextureRectPipelineSetup::textureIsEnabled(ggl::TextureRect::TextureRectPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

_OWORD *std::vector<ggl::BufferLoadItem,geo::StdAllocator<ggl::BufferLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::BufferLoadItem&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v2 = (a1[1] - *a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 5 > v3)
    v3 = v5 >> 5;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7)
  {
    v9 = v7 << 6;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], v7 << 6, 8);
    v11 = (_OWORD *)(v10 + (v2 << 6));
    v12 = v10 + v9;
    if (v10)
    {
      v13 = v10;
      v14 = *(_OWORD *)(a2 + 16);
      *v11 = *(_OWORD *)a2;
      v11[1] = v14;
      v15 = *(_QWORD *)(a2 + 56);
      if (v15)
      {
        if (v15 == a2 + 32)
        {
          *(_QWORD *)(v13 + (v2 << 6) + 56) = v11 + 2;
          (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
        }
        else
        {
          *(_QWORD *)(v13 + (v2 << 6) + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        }
      }
      else
      {
        *(_QWORD *)(v13 + (v2 << 6) + 56) = 0;
      }
    }
  }
  else
  {
    v12 = 0;
    v11 = (_OWORD *)(v2 << 6);
  }
  v16 = v11 + 4;
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v21 = *(_OWORD *)(v17 - 48);
      *(v11 - 4) = *(_OWORD *)(v17 - 64);
      *(v11 - 3) = v21;
      v22 = *(_QWORD *)(v17 - 8);
      if (v22)
      {
        if (v17 - 32 == v22)
        {
          *((_QWORD *)v11 - 1) = v11 - 2;
          (*(void (**)(_QWORD))(**(_QWORD **)(v17 - 8) + 24))(*(_QWORD *)(v17 - 8));
        }
        else
        {
          *((_QWORD *)v11 - 1) = v22;
          *(_QWORD *)(v17 - 8) = 0;
        }
      }
      else
      {
        *((_QWORD *)v11 - 1) = 0;
      }
      v11 -= 4;
      v17 -= 64;
    }
    while (v17 != v18);
    v17 = *a1;
    v23 = a1[1];
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v16;
    v19 = a1[2];
    a1[2] = v12;
    while (1)
    {
      if (v23 == v17)
        goto LABEL_16;
      v24 = *(_QWORD **)(v23 - 8);
      if ((_QWORD *)(v23 - 32) == v24)
        break;
      if (v24)
      {
        v25 = 5;
        goto LABEL_27;
      }
LABEL_28:
      v23 -= 64;
    }
    v24 = (_QWORD *)(v23 - 32);
    v25 = 4;
LABEL_27:
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_28;
  }
  *a1 = (uint64_t)v11;
  a1[1] = (uint64_t)v16;
  v19 = a1[2];
  a1[2] = v12;
LABEL_16:
  if (v17)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v17, v19 - v17);
  return v16;
}

void ggl::NullLoader::~NullLoader(ggl::NullLoader *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::NullLoader::device(ggl::NullLoader *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *ggl::MetalResourceAccessor::load(_QWORD *result, uint64_t a2)
{
  const ggl::Buffer *v3;
  _QWORD *v4;

  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 16))
  {
    v3 = *(const ggl::Buffer **)(a2 + 8);
    v4 = (_QWORD *)*((_QWORD *)v3 + 3);
    if (v4
      || (result = ggl::MetalResourceManager::newBuffer(*(ggl::MetalResourceManager **)(result[1] + 80), v3),
          (v4 = result) != 0))
    {
      result = (_QWORD *)v4[4];
      if (result)
      {
        memcpy((void *)(objc_msgSend(result, "contents") + *(_QWORD *)(a2 + 16)), *(const void **)a2, *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
        result = *(_QWORD **)(a2 + 56);
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 48))(result, a2);
      }
    }
  }
  return result;
}

_QWORD *ggl::MetalResourceAccessor::commit(_QWORD *this, const ggl::ShaderLibrary *a2)
{
  if (!*((_QWORD *)a2 + 3))
    return ggl::MetalResourceManager::newLibrary(*(ggl::MetalResourceManager **)(this[1] + 80), a2);
  return this;
}

uint64_t ggl::MetalResourceAccessor::commit(uint64_t this, const ggl::PipelineState *a2)
{
  if (!*((_QWORD *)a2 + 3))
    return ggl::MetalResourceManager::newPipelineState(*(ggl::MetalResourceManager **)(*(_QWORD *)(this + 8) + 80), a2);
  return this;
}

uint64_t ggl::MetalResourceAccessor::commit(uint64_t result, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 24))
    return ggl::MetalResourceManager::newRasterizationRateMap(*(_QWORD *)(*(_QWORD *)(result + 8) + 80), a2);
  return result;
}

uint64_t ggl::CullingGrid::intersectedCellsForRibbon(unint64_t a1, float *a2, int a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  float v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned __int8 v44;
  unsigned int v45;
  unsigned int v46;
  float32x2_t *v52;
  unint64_t v53;
  float32x2_t v54;
  int32x2_t v55;
  float *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float v74;
  int v75;
  int v76;
  uint64_t v77;
  char v78;
  int v79;
  float *v80;
  uint64_t v81;
  float *v82;
  float v83;
  float v84;

  v4 = a1 - (a3 ^ 1u);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    result = 0;
    v8 = 1;
    do
    {
      v9 = v5;
      v10 = v6 ^ 1;
      if ((v8 & 1) != 0)
      {
        v11 = 0;
        v12 = a2;
        do
        {
          v13 = &a2[2 * (++v11 % a1)];
          v14 = *v12;
          v15 = *v13 - *v12;
          if (v15 != 0.0)
          {
            v16 = *v13 * 4.0;
            v17 = vcvtps_s32_f32(fminf(v16, v14 * 4.0));
            v18 = vcvtms_s32_f32(fmaxf(v14 * 4.0, v16));
            if (v18 >= 3)
              v18 = 3;
            if (v18 >= v17)
            {
              v19 = v12[v10];
              v20 = v13[v10] - v19;
              v21 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)v17 * -0.25)) * v20) / v15) - v19) * -4.0);
              if (v21 <= 3)
              {
                result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v21 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v21 & 2 | (v17 >> 1) & 1]))) | result;
                if (v17)
                  result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(2 * (v21 & 1)) | (v17 - 1) & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v21 & 2 | ((v17 - 1) >> 1) & 1]))) | result;
              }
              if (v18 > v17)
              {
                v22 = v17 + 1;
                v23 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 1) * -0.25)) * v20)/ v15)- v19)* -4.0);
                if (v23 <= 3)
                  result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v22 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v17 >> 1) & 1]))) | result;
                if (v18 > v22)
                {
                  v24 = v17 + 2;
                  v25 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 2) * -0.25)) * v20)/ v15)- v19)* -4.0);
                  if (v25 <= 3)
                    result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v25 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v25 & 2 | (v24 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 1 | (2 * (v25 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v25 & 2 | (v22 >> 1) & 1]))) | result;
                  if (v18 > v24)
                  {
                    v26 = vcvtms_s32_f32((float)((float)((float)((float)(v14 + (float)((float)(v17 + 3) * -0.25))* v20)/ v15)- v19)* -4.0);
                    if (v26 <= 3)
                      result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v17 + 3) & 1 | (2 * (v26 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v26 & 2 | ((v17 + 3) >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v17 & 1 | (2 * (v26 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v26 & 2 | (v24 >> 1) & 1]))) | result;
                  }
                }
              }
            }
          }
          v12 += 2;
        }
        while (v4 != v11);
      }
      else
      {
        v27 = 0;
        v28 = &a2[v10];
        v29 = &a2[v6];
        do
        {
          v30 = &a2[2 * (++v27 % a1)];
          v31 = v30[v6];
          v32 = *v29;
          v33 = v31 - *v29;
          if (v33 != 0.0)
          {
            v34 = v31 * 4.0;
            v35 = vcvtps_s32_f32(fminf(v34, v32 * 4.0));
            v36 = vcvtms_s32_f32(fmaxf(v32 * 4.0, v34));
            if (v36 >= 3)
              v36 = 3;
            if (v36 >= v35)
            {
              v37 = *v28;
              v38 = v30[v10] - *v28;
              v39 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)v35 * -0.25)) * v38) / v33)
                                         - *v28) * -4.0);
              if (v39 <= 3)
              {
                v40 = v39 >> 1;
                v41 = v39 & 1;
                result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v41 & 0xFFFFFFFD | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 | v35 & 2]))) | result;
                if (v35)
                  result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v41 & 0xFFFFFFFD | (2 * ((v35 - 1) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 | (v35 - 1) & 2]))) | result;
              }
              if (v36 > v35)
              {
                v42 = v35 + 1;
                v43 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 1) * -0.25)) * v38)/ v33)- v37)* -4.0);
                if (v43 <= 3)
                  result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v42 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | v42 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | v35 & 2]))) | result;
                if (v36 > v42)
                {
                  v44 = v35 + 2;
                  v45 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 2) * -0.25)) * v38)/ v33)- v37)* -4.0);
                  if (v45 <= 3)
                    result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v45 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v45 >> 1) | v44 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v45 & 1 | (2 * (v42 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v45 >> 1) | v42 & 2]))) | result;
                  if (v36 > v44)
                  {
                    v46 = vcvtms_s32_f32((float)((float)((float)((float)(v32 + (float)((float)(v35 + 3) * -0.25))* v38)/ v33)- v37)* -4.0);
                    if (v46 <= 3)
                      result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v46 & 1 | (2 * (((_BYTE)v35 + 3) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v46 >> 1) | ((_BYTE)v35 + 3) & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v46 & 1 | (2 * (v35 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v46 >> 1) | ~v35 & 2]))) | result;
                  }
                }
              }
            }
          }
          v28 += 2;
          v29 += 2;
        }
        while (v4 != v27);
      }
      v8 = 0;
      v5 = 1;
      v6 = 1;
    }
    while ((v9 & 1) == 0);
  }
  else
  {
    result = 0;
  }
  if (a1)
  {
    __asm { FMOV            V0.2S, #4.0 }
    v52 = (float32x2_t *)a2;
    v53 = a1;
    do
    {
      v54 = *v52++;
      v55 = vmin_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vmul_f32(v54, _D0))), 0), (int32x2_t)0x300000003);
      result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v55.i8[0] & 1 | (2 * (v55.i8[4] & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v55.i8[4] & 2 | ((unsigned __int32)v55.i32[0] >> 1)]))) | result;
      --v53;
    }
    while (v53);
    if (a3)
    {
      v56 = a2 + 1;
      v57 = 0x7FFFFFFF7FFFFFFFLL;
      v58 = 0x8000000080000000;
      v59 = a1;
      do
      {
        LODWORD(v60) = vcvts_n_s32_f32(*(v56 - 1), 2uLL);
        LODWORD(v61) = vcvts_n_s32_f32(*v56, 2uLL);
        if ((int)v60 >= (int)v57)
          v62 = v57;
        else
          v62 = v60;
        if ((int)v58 <= (int)v60)
          v60 = v60;
        else
          v60 = v58;
        v63 = HIDWORD(v57);
        if ((int)v61 >= (int)v63)
          v64 = v63;
        else
          v64 = v61;
        v57 = v62 | (v64 << 32);
        v65 = HIDWORD(v58);
        if ((int)v65 <= (int)v61)
          v61 = v61;
        else
          v61 = v65;
        v58 = v60 | (v61 << 32);
        v56 += 2;
        --v59;
      }
      while (v59);
      if ((int)v62 <= 3)
      {
        v66 = (int)v60 >= 1 && (int)v64 <= 3;
        if (v66 && (int)v61 >= 1)
        {
          v68 = v62 & ~((int)v62 >> 31);
          v69 = (int)v60 >= 4 ? 4 : v60;
          v70 = (int)v61 >= 4 ? 4 : v61;
          v71 = v68 | ((unint64_t)(v64 & ~((int)v64 >> 31)) << 32);
          v72 = v69 | (v70 << 32);
          if ((int)v71 < (int)v69)
          {
            v73 = HIDWORD(v71);
            if (SHIDWORD(v71) < SHIDWORD(v72))
            {
              do
              {
                v74 = (float)((float)(int)v71 * 0.25) + 0.125;
                v75 = v73;
                do
                {
                  v76 = 1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v71 & 1 | (2 * (v75 & 1u))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v75 & 2 | (v71 >> 1) & 1]));
                  if ((v76 & result) == 0)
                  {
                    v77 = 0;
                    v78 = 0;
                    v79 = 0;
                    v80 = a2 + 1;
                    do
                    {
                      if (a1 - 1 == v77)
                        v81 = 0;
                      else
                        v81 = v77 + 1;
                      v82 = &a2[2 * v81];
                      v83 = *(v80 - 1);
                      v84 = fmaxf(v83, *v82);
                      if (v74 >= fminf(*v82, v83) && v74 < v84)
                      {
                        if ((float)((float)((float)((float)((float)((float)v75 * 0.25) + 0.125) - *v80)
                                           * (float)(*v82 - v74))
                                   + (float)((float)(v82[1] - (float)((float)((float)v75 * 0.25) + 0.125))
                                           * (float)(v83 - v74))) > 0.0)
                          ++v79;
                        else
                          --v79;
                        v78 = 1;
                      }
                      ++v77;
                      v80 += 2;
                    }
                    while (a1 != v77);
                    if ((v78 & (v79 != 0)) == 0)
                      v76 = 0;
                    result = v76 | result;
                  }
                  ++v75;
                }
                while (v75 != HIDWORD(v72));
                LODWORD(v71) = v71 + 1;
              }
              while ((_DWORD)v71 != (_DWORD)v72);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ggl::CullingGrid::intersectedCellsForRibbon(unint64_t a1, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float *v24;
  unint64_t v25;
  float *v26;
  char *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  float v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned __int8 v39;
  unsigned int v40;
  unsigned __int8 v41;
  unsigned int v42;
  unsigned int v43;
  float32x2_t v49;
  int32x2_t v50;

  if (a1 == 1)
  {
    LODWORD(v4) = 0;
LABEL_44:
    __asm { FMOV            V0.2S, #4.0 }
    do
    {
      v49 = *(float32x2_t *)a2;
      a2 = (_QWORD *)((char *)a2 + 12);
      v50 = vmin_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vmul_f32(v49, _D0))), 0), (int32x2_t)0x300000003);
      v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v50.i8[0] & 1 | (2 * (v50.i8[4] & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v50.i8[4] & 2 | ((unsigned __int32)v50.i32[0] >> 1)]))) | v4;
      --a1;
    }
    while (a1);
    return v4;
  }
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v2;
    v7 = v3 ^ 1;
    if ((v5 & 1) != 0)
    {
      v8 = 1;
      v9 = (float *)a2;
      do
      {
        v10 = (float *)a2 + 3 * (v8 % a1);
        v11 = *v9;
        v12 = *v10 - *v9;
        if (v12 != 0.0)
        {
          v13 = *v10 * 4.0;
          v14 = vcvtps_s32_f32(fminf(v13, v11 * 4.0));
          v15 = vcvtms_s32_f32(fmaxf(v11 * 4.0, v13));
          if (v15 >= 3)
            v15 = 3;
          if (v15 >= v14)
          {
            v16 = v9[v7];
            v17 = v10[v7] - v16;
            v18 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)v14 * -0.25)) * v17) / v12) - v16) * -4.0);
            if (v18 <= 3)
            {
              v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v18 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v18 & 2 | (v14 >> 1) & 1]))) | v4;
              if (v14)
                v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(2 * (v18 & 1)) | (v14 - 1) & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v18 & 2 | ((v14 - 1) >> 1) & 1]))) | v4;
            }
            if (v15 > v14)
            {
              v19 = v14 + 1;
              v20 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 1) * -0.25)) * v17)/ v12)- v16)* -4.0);
              if (v20 <= 3)
                v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v19 & 1 | (2 * (v20 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v20 & 2 | (v19 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v20 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v20 & 2 | (v14 >> 1) & 1]))) | v4;
              if (v15 > v19)
              {
                v21 = v14 + 2;
                v22 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 2) * -0.25)) * v17)/ v12)- v16)* -4.0);
                if (v22 <= 3)
                  v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v22 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 2 | (v21 >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v19 & 1 | (2 * (v22 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v22 & 2 | (v19 >> 1) & 1]))) | v4;
                if (v15 > v21)
                {
                  v23 = vcvtms_s32_f32((float)((float)((float)((float)(v11 + (float)((float)(v14 + 3) * -0.25)) * v17)/ v12)- v16)* -4.0);
                  if (v23 <= 3)
                    v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v14 + 3) & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | ((v14 + 3) >> 1) & 1]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 1 | (2 * (v23 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v23 & 2 | (v21 >> 1) & 1]))) | v4;
                }
              }
            }
          }
        }
        v9 += 3;
        ++v8;
      }
      while (a1 != v8);
    }
    else
    {
      v24 = (float *)a2 + v7;
      v25 = 1;
      v26 = (float *)a2 + v3;
      do
      {
        v27 = (char *)a2 + 12 * (v25 % a1);
        v28 = *(float *)&v27[4 * v3];
        v29 = *v26;
        v30 = v28 - *v26;
        if (v30 != 0.0)
        {
          v31 = v28 * 4.0;
          v32 = vcvtps_s32_f32(fminf(v31, v29 * 4.0));
          v33 = vcvtms_s32_f32(fmaxf(v29 * 4.0, v31));
          if (v33 >= 3)
            v33 = 3;
          if (v33 >= v32)
          {
            v34 = *v24;
            v35 = *(float *)&v27[4 * v7] - *v24;
            v36 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)v32 * -0.25)) * v35) / v30) - *v24) * -4.0);
            if (v36 <= 3)
            {
              v37 = v36 >> 1;
              v38 = v36 & 1;
              v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v38 & 0xFFFFFFFD | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v37 | v32 & 2]))) | v4;
              if (v32)
                v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v38 & 0xFFFFFFFD | (2 * ((v32 - 1) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v37 | (v32 - 1) & 2]))) | v4;
            }
            if (v33 > v32)
            {
              v39 = v32 + 1;
              v40 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 1) * -0.25)) * v35)/ v30)- v34)* -4.0);
              if (v40 <= 3)
                v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 & 1 | (2 * (v39 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v40 >> 1) | v39 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v40 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v40 >> 1) | v32 & 2]))) | v4;
              if (v33 > v39)
              {
                v41 = v32 + 2;
                v42 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 2) * -0.25)) * v35)/ v30)- v34)* -4.0);
                if (v42 <= 3)
                  v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v42 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v42 >> 1) | v41 & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v42 & 1 | (2 * (v39 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v42 >> 1) | v39 & 2]))) | v4;
                if (v33 > v41)
                {
                  v43 = vcvtms_s32_f32((float)((float)((float)((float)(v29 + (float)((float)(v32 + 3) * -0.25)) * v35)/ v30)- v34)* -4.0);
                  if (v43 <= 3)
                    v4 = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (((_BYTE)v32 + 3) & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | ((_BYTE)v32 + 3) & 2]))) | (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v43 & 1 | (2 * (v32 & 1))] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[(v43 >> 1) | ~v32 & 2]))) | v4;
                }
              }
            }
          }
        }
        v24 += 3;
        v26 += 3;
        ++v25;
      }
      while (a1 != v25);
    }
    v5 = 0;
    v2 = 1;
    v3 = 1;
  }
  while ((v6 & 1) == 0);
  if (a1)
    goto LABEL_44;
  return v4;
}

void ggl::ShaderLibrary::~ShaderLibrary(ggl::ShaderLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  *(_QWORD *)this = &off_1E42B67D0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *((_QWORD *)this + 22);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *((_QWORD *)this + 23);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = *((_QWORD *)this + 22);
  }
  *((_QWORD *)this + 23) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), v7, *((_QWORD *)this + 24) - v7);
LABEL_16:
  v11 = *((_QWORD *)this + 18);
  if (v11)
  {
    *((_QWORD *)this + 19) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v11, *((_QWORD *)this + 20) - v11);
  }
  v12 = *((_QWORD *)this + 14);
  if (v12)
  {
    *((_QWORD *)this + 15) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), v12, *((_QWORD *)this + 16) - v12);
  }
  v13 = *((_QWORD *)this + 10);
  if (v13)
  {
    v14 = *((_QWORD *)this + 11);
    v15 = *((_QWORD *)this + 10);
    if (v14 != v13)
    {
      do
      {
        v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v15);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = *((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v15, *((_QWORD *)this + 12) - v15);
  }
  v19 = *((_QWORD *)this + 6);
  if (v19)
  {
    v20 = *((_QWORD *)this + 7);
    v21 = *((_QWORD *)this + 6);
    if (v20 != v19)
    {
      do
      {
        v22 = *(_QWORD *)(v20 - 8);
        *(_QWORD *)(v20 - 8) = 0;
        if (v22)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 8))(v22, v21);
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v21, *((_QWORD *)this + 8) - v21);
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v23 = *((_QWORD *)this + 1);
  if (v23)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void std::__shared_ptr_pointer<ggl::Shader *,std::shared_ptr<ggl::Shader>::__shared_ptr_default_delete<ggl::Shader,ggl::Shader>,std::allocator<ggl::Shader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Shader *,std::shared_ptr<ggl::Shader>::__shared_ptr_default_delete<ggl::Shader,ggl::Shader>,std::allocator<ggl::Shader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ggl::NullDevice::~NullDevice(ggl::NullDevice *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E42BC1A8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E42BC1A8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ggl::NullDevice::createRenderer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *result;

  v7 = operator new();
  result = (_QWORD *)ggl::Renderer::Renderer(v7, a4, a1, a3);
  *result = &off_1E42B62C8;
  return result;
}

_QWORD *ggl::NullDevice::vendLoader@<X0>(ggl::NullDevice *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E42B5980;
  result[1] = this;
  *a2 = result;
  return result;
}

uint64_t ggl::NullDevice::isDeviceValid(ggl::NullDevice *this)
{
  return 0;
}

uint64_t ggl::NullDevice::unvendLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::Device::isDeviceValid(ggl::Device *this)
{
  return 0;
}

void ggl::PipelineSetup::setConstantData(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;

  if ((a4 & 1) == 0)
    goto LABEL_22;
  v8 = a1[2];
  if (!v8)
    goto LABEL_22;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 72) + 8);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
    goto LABEL_22;
  v11 = *(_QWORD *)(v9 + 32);
  v12 = (unsigned __int8 *)(v11 + 1);
  v13 = v10;
  while (1)
  {
    v14 = *v12;
    v12 += 2;
    if (v14 == a2)
      break;
    if (!--v13)
      goto LABEL_22;
  }
  v15 = 0;
  v16 = (unsigned __int8 *)(v11 + 1);
  while (1)
  {
    v17 = *v16;
    v16 += 2;
    if (v17 == a2)
      break;
    if (v10 == ++v15)
    {
      v18 = -1;
      goto LABEL_13;
    }
  }
  v18 = *(unsigned __int8 *)(v11 + 2 * v15);
LABEL_13:
  v19 = (_QWORD *)(a1[8] + 16 * v18);
  *v19 = a3;
  v19[1] = 0;
  v20 = (_QWORD *)(a1[20] + 16 * v18);
  v21 = (std::__shared_weak_count *)v20[1];
  *v20 = 0;
  v20[1] = 0;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (_QWORD *)(a1[24] + 16 * v18);
  v25 = (std::__shared_weak_count *)v24[1];
  *v24 = 0;
  v24[1] = 0;
  if (!v25)
    goto LABEL_22;
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((a4 & 2) == 0)
      return;
  }
  else
  {
LABEL_22:
    if ((a4 & 2) == 0)
      return;
  }
  v28 = a1[2];
  if (v28)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 48) + 72) + 24);
    v30 = *(_QWORD *)(v29 + 40);
    if (v30)
    {
      v31 = *(_QWORD *)(v29 + 32);
      v32 = (unsigned __int8 *)(v31 + 1);
      v33 = v30;
      while (1)
      {
        v34 = *v32;
        v32 += 2;
        if (v34 == a2)
          break;
        if (!--v33)
          return;
      }
      v35 = 0;
      v36 = (unsigned __int8 *)(v31 + 1);
      while (1)
      {
        v37 = *v36;
        v36 += 2;
        if (v37 == a2)
          break;
        if (v30 == ++v35)
        {
          v38 = -1;
          goto LABEL_34;
        }
      }
      v38 = *(unsigned __int8 *)(v31 + 2 * v35);
LABEL_34:
      v39 = (_QWORD *)(a1[8] + 16 * v38);
      *v39 = a3;
      v39[1] = 0;
      v40 = (_QWORD *)(a1[20] + 16 * v38);
      v41 = (std::__shared_weak_count *)v40[1];
      *v40 = 0;
      v40[1] = 0;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (_QWORD *)(a1[24] + 16 * v38);
      v45 = (std::__shared_weak_count *)v44[1];
      *v44 = 0;
      v44[1] = 0;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
  }
}

uint64_t ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::ColoredText::My>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::ColoredText::My>,geo::StdAllocator<ggl::VertexDataTyped<ggl::ColoredText::My>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::ColoredText::MyMesh::~MyMesh(ggl::ColoredText::MyMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::ColoredText::MyMesh::~MyMesh(ggl::ColoredText::MyMesh *this)
{
  ggl::Mesh::~Mesh((ggl::ColoredText::MyMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::ColoredText::MyMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::ColoredText::My>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::ColoredText::My>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ColoredText::MyPipelineState::~MyPipelineState(ggl::ColoredText::MyPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ColoredText::MyPipelineSetup::~MyPipelineSetup(ggl::ColoredText::MyPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ColoredText::MyPipelineSetup::constantDataIsEnabled(ggl::ColoredText::MyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::ColoredText::MyPipelineSetup::textureIsEnabled(ggl::ColoredText::MyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

_OWORD *std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__emplace_back_slow_path<ggl::Texture2DLoadItem>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v2 = 0x333333333333333;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) < 0x199999999999999)
    v2 = v4;
  if (v2)
  {
    v7 = 80 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 80 * v2, 8);
    v9 = (_OWORD *)(v8 + 80 * v3);
    v10 = v8 + v7;
    if (v8)
    {
      *v9 = *(_OWORD *)a2;
      v11 = v8 + 80 * v3;
      *(_BYTE *)(v11 + 16) = 0;
      v12 = (_BYTE *)(v11 + 16);
      if (*(_BYTE *)(a2 + 16))
      {
        *(_BYTE *)(v8 + 80 * v3 + 17) = *(_BYTE *)(a2 + 17);
        *v12 = 1;
      }
      v13 = v8 + 80 * v3;
      *(_BYTE *)(v13 + 20) = 0;
      v14 = (_BYTE *)(v13 + 20);
      if (*(_BYTE *)(a2 + 20))
      {
        *(_DWORD *)(v8 + 80 * v3 + 24) = *(_DWORD *)(a2 + 24);
        *v14 = 1;
      }
      v15 = v8 + 80 * v3;
      *(_OWORD *)(v15 + 28) = *(_OWORD *)(a2 + 28);
      v16 = *(_QWORD *)(a2 + 72);
      if (v16)
      {
        v17 = (_QWORD *)(v8 + 80 * v3 + 72);
        if (v16 == a2 + 48)
        {
          *v17 = v15 + 48;
          (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
        }
        else
        {
          *v17 = v16;
          *(_QWORD *)(a2 + 72) = 0;
        }
      }
      else
      {
        *(_QWORD *)(v8 + 80 * v3 + 72) = 0;
      }
    }
  }
  else
  {
    v10 = 0;
    v9 = (_OWORD *)(16 * ((a1[1] - *a1) >> 4));
  }
  v18 = v9 + 5;
  v20 = (_QWORD *)*a1;
  v19 = (_QWORD *)a1[1];
  if (v19 == (_QWORD *)*a1)
  {
    *a1 = (uint64_t)v9;
    a1[1] = (uint64_t)v18;
    v28 = a1[2];
    a1[2] = v10;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v9[v21 / 0x10];
      v23 = &v19[v21 / 8];
      *(v22 - 5) = *(_OWORD *)&v19[v21 / 8 - 10];
      *((_BYTE *)v22 - 64) = 0;
      if (LOBYTE(v19[v21 / 8 - 8]))
      {
        *((_BYTE *)v22 - 63) = *((_BYTE *)v23 - 63);
        *((_BYTE *)v22 - 64) = 1;
      }
      *((_BYTE *)v22 - 60) = 0;
      if (*((_BYTE *)v23 - 60))
      {
        *((_DWORD *)&v9[v21 / 0x10 - 3] - 2) = v19[v21 / 8 - 7];
        *((_BYTE *)v22 - 60) = 1;
      }
      v24 = &v9[v21 / 0x10];
      v25 = &v19[v21 / 8];
      *(_OWORD *)((char *)&v9[v21 / 0x10 - 3] - 4) = *(_OWORD *)((char *)&v19[v21 / 8 - 6] - 4);
      v26 = (_QWORD *)v19[v21 / 8 - 1];
      if (v26)
      {
        if (v25 - 4 == v26)
        {
          *((_QWORD *)v24 - 1) = v24 - 2;
          (*(void (**)(_QWORD))(*(_QWORD *)*(v25 - 1) + 24))(*(v25 - 1));
        }
        else
        {
          *((_QWORD *)v24 - 1) = v26;
          *(v25 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v24 - 1) = 0;
      }
      v21 -= 80;
    }
    while (&v19[v21 / 8] != v20);
    v19 = (_QWORD *)*a1;
    v27 = (_QWORD *)a1[1];
    *a1 = (uint64_t)&v9[v21 / 0x10];
    a1[1] = (uint64_t)v18;
    v28 = a1[2];
    a1[2] = v10;
    if (v27 != v19)
    {
      v29 = v27 - 4;
      while (1)
      {
        v31 = (_QWORD *)v29[3];
        if (v29 == v31)
          break;
        if (v31)
        {
          v32 = 5;
LABEL_37:
          (*(void (**)(void))(*v31 + 8 * v32))();
        }
        if (*((_BYTE *)v29 - 28))
          *((_BYTE *)v29 - 28) = 0;
        if (*((_BYTE *)v29 - 32))
          *((_BYTE *)v29 - 32) = 0;
        v30 = v29 - 6;
        v29 -= 10;
        if (v30 == v19)
          goto LABEL_43;
      }
      v31 = v29;
      v32 = 4;
      goto LABEL_37;
    }
  }
LABEL_43:
  if (v19)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v19, v28 - (_QWORD)v19);
  return v18;
}

void ggl::DebugConsole::~DebugConsole(ggl::DebugConsole *this)
{
  ggl::DebugConsole::~DebugConsole(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_1E42B60B8;
  v2 = *(_QWORD ***)(*((_QWORD *)this + 7) + 32);
  v3 = *v2[12];
  if (!v3
    || ((*(void (**)(_QWORD))(*(_QWORD *)v3 + 8))(*v2[12]),
        v4 = (_QWORD *)*((_QWORD *)this + 7),
        (v2 = (_QWORD **)v4[4]) != 0))
  {
    ((void (*)(_QWORD **))(*v2)[1])(v2);
    v4 = (_QWORD *)*((_QWORD *)this + 7);
  }
  v5 = v4[3];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = (_QWORD *)*((_QWORD *)this + 7);
  }
  v6 = v4[8];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)*((_QWORD *)this + 8);
  v8 = v7[4];
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v9 = v7[3];
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v7 = (_QWORD *)*((_QWORD *)this + 8);
  }
  v10 = v7[8];
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 11);
  if (v11)
    MEMORY[0x1A1AF4DE8](v11, 0x1000C8000313F17);
  v12 = (_QWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (v12[5])
    {
      v14 = v12[2];
      v13 = v12[3];
      if (v13 != v14)
      {
        v15 = v12[1];
        v16 = *((unsigned __int8 *)v12 + 32);
        v17 = *((unsigned __int8 *)v12 + 33);
        if (*v12 && *(_BYTE *)(v15 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 64))(*v12);
        if (v16 && !v17)
        {
          v19 = *(_QWORD *)(v15 + 56);
          v18 = *(_QWORD *)(v15 + 64);
          if (v18 == v19)
            v19 = *(_QWORD *)(v15 + 80) - *(_QWORD *)(v15 + 72);
          if (v14 < v19)
            v19 = v14;
          if (v18 <= v13)
            v18 = v13;
          if (v18 == v19)
            v18 = v19 + *(_QWORD *)(v15 + 80) - *(_QWORD *)(v15 + 72);
          *(_QWORD *)(v15 + 56) = v19;
          *(_QWORD *)(v15 + 64) = v18;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v12, 0x1070C40C7B7B3AELL);
  }
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
}

BOOL ggl::DebugConsole::flush(ggl::DebugConsole *this, ggl::CommandBuffer *a2, const RenderTargetFormat *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL8 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = *((_QWORD *)this + 7);
  v7 = *(_QWORD **)(v6 + 88);
  v8 = (_QWORD *)(v6 + 72);
  if (v7)
    v8 = v7;
  v11 = v8;
  v9 = *v8;
  v10 = v11[1];
  v12 = v10 != v9;
  if (v10 != v9)
  {
    ggl::DebugConsole::setRenderTargetFormat(this, a3);
    ggl::CommandBuffer::pushRenderItem((uint64_t)a2, *((ggl::RenderItem **)this + 7));
  }
  v13 = *((_QWORD *)this + 8);
  v14 = *(_QWORD **)(v13 + 88);
  v15 = (_QWORD *)(v13 + 72);
  if (v14)
    v15 = v14;
  if (v15[1] != *v15)
  {
    ggl::DebugConsole::setRenderTargetFormat(this, a3);
    ggl::CommandBuffer::pushRenderItem((uint64_t)a2, *((ggl::RenderItem **)this + 8));
    return 1;
  }
  return v12;
}

void ggl::DebugConsole::setRenderTargetFormat(ggl::DebugConsole *this, const RenderTargetFormat *a2)
{
  __int128 *v3;
  unint64_t colorFormatsCount;
  unint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *p_shared_weak_owners;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count_vtbl *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unsigned __int8 v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  BOOL v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  ggl::ColoredTextShader *v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  ggl::TextureRectShader *v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  __int16 v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v3 = (__int128 *)((char *)this + 120);
  colorFormatsCount = a2->colorFormatsCount;
  if (colorFormatsCount != *((_QWORD *)this + 17)
    || a2->samples != *((_DWORD *)this + 36)
    || a2->depthStencilFormat != *((_DWORD *)this + 37))
  {
    goto LABEL_10;
  }
  if (!colorFormatsCount)
    return;
  if (a2->colorFormats[0] != *(_DWORD *)v3)
  {
LABEL_10:
    v8 = *(_OWORD *)&a2->colorFormatsCount;
    *v3 = *(_OWORD *)a2->colorFormats;
    *(_OWORD *)((char *)this + 136) = v8;
    v9 = *(_QWORD **)(*((_QWORD *)this + 7) + 32);
    v10 = *(_QWORD *)(*((_QWORD *)this + 14) + 80);
    v12 = *(std::__shared_weak_count_vtbl **)(v10 + 128);
    v11 = *(std::__shared_weak_count **)(v10 + 136);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = (std::__shared_weak_count *)operator new(0x198uLL);
    v15->__shared_owners_ = 0;
    v16 = (unint64_t *)&v15->__shared_owners_;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE7D8;
    v81 = *v3;
    v83 = v3[1];
    if ((v17 & 1) == 0)
    {
      if ((_DWORD)v65)
      {
        if ((v66 & 1) == 0)
        {
          if ((_DWORD)v65)
          {
            if ((v73 & 1) == 0
            {
              if ((v77 & 1) == 0
              {
                ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r = (uint64_t)&ggl::ColoredText::myReflection;
              }
              ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r;
              unk_1EE5851C8 = 1;
            }
            ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r;
            unk_1EE585110 = &ggl::ColoredText::pipelineDataMyPipelineDeviceStructs(void)::ref;
            qword_1EE585118 = 0;
            if ((v74 & 1) == 0
            {
              ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref = (uint64_t)ggl::ColoredText::View::reflection(void)::reflection;
            }
            qword_1EE585120 = (uint64_t)&ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref;
            *(int64x2_t *)algn_1EE585128 = vdupq_n_s64(1uLL);
          }
        }
        ggl::ColoredText::MyPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref;
        ggl::ColoredTextShader::typedReflection(v65);
        qword_1EE58D078 = (uint64_t)&ggl::ColoredTextShader::typedReflection(void)::ref;
        if ((v67 & 1) == 0
        {
          ggl::ColoredText::pipelineStateMyPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE58D0D8 = 0;
          qword_1EE58D0E0 = (uint64_t)"";
          dword_1EE58D0E8 = 0;
          qword_1EE58D0F0 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineAttributeBinding_0(void)::attr;
          unk_1EE58D0F8 = 4;
        }
        qword_1EE58D080 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE58D088 = 1;
        qword_1EE58D090 = 0;
        unk_1EE58D098 = 1;
        qword_1EE58D0A0 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineDeviceStructBinding(void)::ref;
        unk_1EE58D0A8 = 0;
        if ((v68 & 1) == 0
        {
          ggl::ColoredText::pipelineStateMyPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE58D118 = 0;
          qword_1EE58D120 = (uint64_t)"view";
          dword_1EE58D128 = 3;
          qword_1EE58D130 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineConstantViewBinding(void)::reflection;
          unk_1EE58D138 = 1;
        }
        qword_1EE58D0B0 = (uint64_t)&ggl::ColoredText::pipelineStateMyPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1EE58D0B8 = 1;
      }
    }
    v18 = &v15[1].__vftable;
    if (v11)
    {
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v15[2].__shared_weak_owners_ = (uint64_t)&ggl::ColoredText::MyPipelineState::typedReflection(void)::ref;
      p_shared_weak_owners = &v15[2].__shared_weak_owners_;
      LODWORD(v15[2].__shared_owners_) = 0;
      v15[1].__shared_weak_owners_ = 0;
      v15[2].__vftable = 0;
      v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
      v15[1].__shared_owners_ = 0;
      v15[3].__vftable = v12;
      v15[3].__shared_owners_ = (uint64_t)v11;
      v22 = (unint64_t *)&v11->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    else
    {
      v15[2].__shared_weak_owners_ = (uint64_t)&ggl::ColoredText::MyPipelineState::typedReflection(void)::ref;
      p_shared_weak_owners = &v15[2].__shared_weak_owners_;
      LODWORD(v15[2].__shared_owners_) = 0;
      v15[1].__shared_weak_owners_ = 0;
      v15[2].__vftable = 0;
      v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
      v15[1].__shared_owners_ = 0;
      v15[3].__vftable = v12;
      v15[3].__shared_owners_ = 0;
    }
    LOBYTE(v15[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v15[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v15[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v15[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v15[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v15[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v15[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v15[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v15[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v15[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v15[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v15[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v15[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v15[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v15[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v15[11].__shared_weak_owners_ = v81;
    *(_OWORD *)&v15[12].__shared_owners_ = v83;
    LOBYTE(v15[13].__vftable) = 0;
    v15[16].__vftable = 0;
    *(_OWORD *)&v15[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v15[15].__shared_owners_ = 0u;
    *(_OWORD *)&v15[13].__shared_owners_ = 0u;
    v15[14].std::__shared_count = 0u;
    v15[16].__shared_owners_ = 0x100000001;
    LOBYTE(v15[16].__shared_weak_owners_) = 0;
    LOBYTE(v15[3].__shared_weak_owners_) = 1;
    *(_WORD *)((char *)&v15[3].__shared_weak_owners_ + 1) = v79;
    BYTE3(v15[3].__shared_weak_owners_) = v80;
    *(_OWORD *)((char *)&v15[3].__shared_weak_owners_ + 4) = xmmword_19FFB35B0;
    HIDWORD(v15[4].__shared_owners_) = 7;
    v15[4].__shared_weak_owners_ = 0;
    v15[5].__vftable = 0;
    LODWORD(v15[5].__shared_owners_) = 0;
    BYTE4(v15[5].__shared_owners_) = 15;
    if (v11)
    {
      v24 = (unint64_t *)&v11->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      *v18 = &off_1E42B5AE0;
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *v18 = &off_1E42B5AE0;
    }
    do
      v27 = __ldxr(v16);
    while (__stxr(v27 + 1, v16));
    if (*(_QWORD *)*p_shared_weak_owners == v9[1])
    {
      v31 = (_QWORD *)v9[2];
      if (v31)
        v32 = v31 == v18;
      else
        v32 = 1;
      if (!v32)
        ggl::PipelineSetup::resetData((uint64_t)v9);
      do
        v33 = __ldxr(v16);
      while (__stxr(v33 + 1, v16));
      v28 = (std::__shared_weak_count *)v9[3];
      v9[2] = v18;
      v9[3] = v15;
      if (!v28)
      {
        do
LABEL_48:
          v35 = __ldaxr(v16);
        while (__stlxr(v35 - 1, v16));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v36 = *(_QWORD **)(*((_QWORD *)this + 8) + 32);
        v37 = *(_QWORD *)(*((_QWORD *)this + 14) + 80);
        v39 = *(std::__shared_weak_count_vtbl **)(v37 + 176);
        v38 = *(std::__shared_weak_count **)(v37 + 184);
        if (v38)
        {
          v40 = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = (std::__shared_weak_count *)operator new(0x198uLL);
        v42->__shared_owners_ = 0;
        v43 = (unint64_t *)&v42->__shared_owners_;
        v42->__shared_weak_owners_ = 0;
        v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAE8;
        v82 = *v3;
        v84 = v3[1];
        if ((v44 & 1) == 0)
        {
          if ((_DWORD)v69)
          {
            if ((v70 & 1) == 0)
            {
              if ((_DWORD)v69)
              {
                if ((v75 & 1) == 0
                {
                  if ((v78 & 1) == 0
                  {
                    ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r = (uint64_t)&ggl::TextureRect::textureVBOReflection;
                  }
                  ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r;
                  *(_QWORD *)algn_1EE5851F0 = 1;
                }
                ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r;
                *(_QWORD *)algn_1EE585158 = &ggl::TextureRect::pipelineDataTextureRectPipelineDeviceStructs(void)::ref;
                qword_1EE585160 = 0;
                if ((v76 & 1) == 0
                {
                  ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureRect::View::reflection(void)::reflection;
                }
                qword_1EE585168 = (uint64_t)&ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref;
                unk_1EE585170 = vdupq_n_s64(1uLL);
              }
            }
            ggl::TextureRect::TextureRectPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref;
            ggl::TextureRectShader::typedReflection(v69);
            qword_1EE58CF90 = (uint64_t)&ggl::TextureRectShader::typedReflection(void)::ref;
            if ((v71 & 1) == 0
            {
              ggl::TextureRect::pipelineStateTextureRectPipelineAttributeStructBinding(void)::attr = 0;
              unk_1EE58CFF0 = 0;
              qword_1EE58CFF8 = (uint64_t)"";
              dword_1EE58D000 = 0;
              qword_1EE58D008 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineAttributeBinding_0(void)::attr;
              unk_1EE58D010 = 2;
            }
            qword_1EE58CF98 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineAttributeStructBinding(void)::attr;
            unk_1EE58CFA0 = 1;
            qword_1EE58CFA8 = 0;
            unk_1EE58CFB0 = 1;
            qword_1EE58CFB8 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineDeviceStructBinding(void)::ref;
            unk_1EE58CFC0 = 0;
            if ((v72 & 1) == 0
            {
              ggl::TextureRect::pipelineStateTextureRectPipelineConstantStructBinding(void)::ref = 0;
              unk_1EE58D030 = 0;
              qword_1EE58D038 = (uint64_t)"view";
              dword_1EE58D040 = 3;
              qword_1EE58D048 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineConstantViewBinding(void)::reflection;
              unk_1EE58D050 = 1;
            }
            qword_1EE58CFC8 = (uint64_t)&ggl::TextureRect::pipelineStateTextureRectPipelineConstantStructBinding(void)::ref;
            unk_1EE58CFD0 = 1;
          }
        }
        v45 = &v42[1].__vftable;
        if (v38)
        {
          v46 = (unint64_t *)&v38->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          v42[2].__shared_weak_owners_ = (uint64_t)&ggl::TextureRect::TextureRectPipelineState::typedReflection(void)::ref;
          v48 = &v42[2].__shared_weak_owners_;
          LODWORD(v42[2].__shared_owners_) = 0;
          v42[1].__shared_weak_owners_ = 0;
          v42[2].__vftable = 0;
          v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
          v42[1].__shared_owners_ = 0;
          v42[3].__vftable = v39;
          v42[3].__shared_owners_ = (uint64_t)v38;
          v49 = (unint64_t *)&v38->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        else
        {
          v42[2].__shared_weak_owners_ = (uint64_t)&ggl::TextureRect::TextureRectPipelineState::typedReflection(void)::ref;
          v48 = &v42[2].__shared_weak_owners_;
          LODWORD(v42[2].__shared_owners_) = 0;
          v42[1].__shared_weak_owners_ = 0;
          v42[2].__vftable = 0;
          v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
          v42[1].__shared_owners_ = 0;
          v42[3].__vftable = v39;
          v42[3].__shared_owners_ = 0;
        }
        LOBYTE(v42[5].__shared_weak_owners_) = 0;
        *(_OWORD *)((char *)&v42[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
        *(uint64_t *)((char *)&v42[6].__shared_owners_ + 4) = 0;
        *(std::__shared_weak_count_vtbl **)((char *)&v42[7].__vftable + 4) = 0;
        *(uint64_t *)((char *)&v42[6].__shared_weak_owners_ + 4) = 0;
        LOBYTE(v42[7].__shared_weak_owners_) = 0;
        *(_OWORD *)((char *)&v42[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
        *(uint64_t *)((char *)&v42[8].__shared_owners_ + 4) = 0;
        *(std::__shared_weak_count_vtbl **)((char *)&v42[9].__vftable + 4) = 0;
        *(uint64_t *)((char *)&v42[8].__shared_weak_owners_ + 4) = 0;
        LOBYTE(v42[9].__shared_weak_owners_) = 0;
        *(_OWORD *)((char *)&v42[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
        *(uint64_t *)((char *)&v42[10].__shared_owners_ + 4) = 0;
        *(std::__shared_weak_count_vtbl **)((char *)&v42[11].__vftable + 4) = 0;
        *(uint64_t *)((char *)&v42[10].__shared_weak_owners_ + 4) = 0;
        *(_OWORD *)&v42[11].__shared_weak_owners_ = v82;
        *(_OWORD *)&v42[12].__shared_owners_ = v84;
        LOBYTE(v42[13].__vftable) = 0;
        v42[16].__vftable = 0;
        *(_OWORD *)&v42[14].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v42[15].__shared_owners_ = 0u;
        *(_OWORD *)&v42[13].__shared_owners_ = 0u;
        v42[14].std::__shared_count = 0u;
        v42[16].__shared_owners_ = 0x100000001;
        LOBYTE(v42[16].__shared_weak_owners_) = 0;
        LOBYTE(v42[3].__shared_weak_owners_) = 1;
        *(_WORD *)((char *)&v42[3].__shared_weak_owners_ + 1) = v79;
        BYTE3(v42[3].__shared_weak_owners_) = v80;
        *(_OWORD *)((char *)&v42[3].__shared_weak_owners_ + 4) = xmmword_19FFB35B0;
        HIDWORD(v42[4].__shared_owners_) = 7;
        v42[4].__shared_weak_owners_ = 0;
        v42[5].__vftable = 0;
        LODWORD(v42[5].__shared_owners_) = 0;
        BYTE4(v42[5].__shared_owners_) = 15;
        if (v38)
        {
          v51 = (unint64_t *)&v38->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
          *v45 = &off_1E42B5F58;
          do
            v53 = __ldaxr(v51);
          while (__stlxr(v53 - 1, v51));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        else
        {
          *v45 = &off_1E42B5F58;
        }
        do
          v54 = __ldxr(v43);
        while (__stxr(v54 + 1, v43));
        if (*(_QWORD *)*v48 == v36[1])
        {
          v58 = (_QWORD *)v36[2];
          if (v58)
            v59 = v58 == v45;
          else
            v59 = 1;
          if (!v59)
            ggl::PipelineSetup::resetData((uint64_t)v36);
          do
            v60 = __ldxr(v43);
          while (__stxr(v60 + 1, v43));
          v55 = (std::__shared_weak_count *)v36[3];
          v36[2] = v45;
          v36[3] = v42;
          if (!v55)
            goto LABEL_89;
          v61 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v61);
          while (__stlxr(v57 - 1, v61));
        }
        else
        {
          v55 = (std::__shared_weak_count *)v36[3];
          v36[2] = 0;
          v36[3] = 0;
          if (!v55)
          {
            do
LABEL_89:
              v62 = __ldaxr(v43);
            while (__stlxr(v62 - 1, v43));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
            do
              v63 = __ldaxr(v43);
            while (__stlxr(v63 - 1, v43));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
            do
              v64 = __ldaxr(v16);
            while (__stlxr(v64 - 1, v16));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            return;
          }
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
        }
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        goto LABEL_89;
      }
      v34 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v34);
      while (__stlxr(v30 - 1, v34));
    }
    else
    {
      v28 = (std::__shared_weak_count *)v9[3];
      v9[2] = 0;
      v9[3] = 0;
      if (!v28)
        goto LABEL_48;
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
    }
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    goto LABEL_48;
  }
  v5 = 0;
  while (colorFormatsCount - 1 != v5)
  {
    v6 = a2->colorFormats[v5 + 1];
    v7 = *((_DWORD *)this + v5++ + 31);
    if (v6 != v7)
    {
      if (v5 >= colorFormatsCount)
        return;
      goto LABEL_10;
    }
  }
}

void std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureRect::TextureRectPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ColoredText::MyPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

ggl::DebugConsole *ggl::DebugConsole::DebugConsole(ggl::DebugConsole *this, const ggl::CommonLibrary *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t **v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  _QWORD *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int shared_owners_high;
  int shared_owners;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int64x2_t *v64;
  int64x2_t *v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t **v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unsigned __int8 v84;
  uint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  int64x2_t *v108;
  _QWORD *v109;
  unsigned __int8 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int64x2_t *v131;
  unint64_t shared_weak_owners;
  unint64_t v133;
  unsigned __int8 v135;
  uint64_t v136;
  geo::read_write_lock *v137;
  const char *v138;
  malloc_zone_t *zone;
  uint64_t v140;
  geo::read_write_lock *v141;
  const char *v142;
  malloc_zone_t *v143;
  uint64_t v144;
  geo::read_write_lock *v145;
  const char *v146;
  malloc_zone_t *v147;
  int v148;
  uint64_t v149;
  geo::read_write_lock *v150;
  const char *v151;
  malloc_zone_t *v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  uint64_t v156;
  geo::read_write_lock *v157;
  const char *v158;
  malloc_zone_t *v159;
  uint64_t v160;
  geo::read_write_lock *v161;
  const char *v162;
  malloc_zone_t *v163;
  uint64_t v164;
  geo::read_write_lock *v165;
  const char *v166;
  malloc_zone_t *v167;
  int v168;
  uint64_t v169;
  geo::read_write_lock *v170;
  const char *v171;
  malloc_zone_t *v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  _DWORD *v177;
  ggl::DebugConsole *v178;
  int64x2_t **v179;

  *(_QWORD *)this = &off_1E42B60B8;
  *(_OWORD *)((char *)this + 8) = xmmword_19FFB6040;
  *(_OWORD *)((char *)this + 24) = xmmword_19FFB6050;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 108000;
  *(_OWORD *)((char *)this + 56) = 0u;
  v179 = (int64x2_t **)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 26) = 1056964608;
  *((_BYTE *)this + 108) = 0;
  *((_QWORD *)this + 14) = a2;
  *(_OWORD *)((char *)this + 120) = 0u;
  v177 = (_DWORD *)((char *)this + 120);
  *(_OWORD *)((char *)this + 136) = 0u;
  v3 = operator new();
  v178 = this;
  if ((v4 & 1) == 0
  {
    if ((v135 & 1) == 0
    {
      ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r = (uint64_t)&ggl::ColoredText::myReflection;
    }
    ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r;
    unk_1EE5851C8 = 1;
  }
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_1E42BBC08;
  *(_QWORD *)(v3 + 8) = "debug text mesh";
  *(_QWORD *)(v3 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 56) = &ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r;
  *(_QWORD *)(v3 + 64) = 0;
  v5 = (uint64_t **)(v3 + 64);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  {
    v136 = operator new();
    *(_QWORD *)(v136 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v136 + 24) = "GeoGL";
    *(_OWORD *)(v136 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v136 = &off_1E42B5668;
    *(_QWORD *)(v136 + 8) = "GeoGL";
    *(_OWORD *)(v136 + 72) = 0u;
    *(_OWORD *)(v136 + 88) = 0u;
    *(_OWORD *)(v136 + 104) = 0u;
    *(_OWORD *)(v136 + 120) = 0u;
    *(_OWORD *)(v136 + 136) = 0u;
    *(_OWORD *)(v136 + 152) = 0u;
    *(_OWORD *)(v136 + 168) = 0u;
    *(_OWORD *)(v136 + 184) = 0u;
    *(_OWORD *)(v136 + 200) = 0u;
    *(_OWORD *)(v136 + 216) = 0u;
    *(_OWORD *)(v136 + 232) = 0u;
    *(_QWORD *)(v136 + 248) = 0;
    *(_OWORD *)(v136 + 56) = 0u;
    v137 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v136 + 56), 0);
    if ((_DWORD)v137)
      geo::read_write_lock::logFailure(v137, (uint64_t)"initialization", v138);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v136 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v136 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v136;
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 88) = v7;
  {
    v140 = operator new();
    *(_QWORD *)(v140 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v140 + 24) = "GeoGL";
    *(_OWORD *)(v140 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v140 = &off_1E42B5668;
    *(_QWORD *)(v140 + 8) = "GeoGL";
    *(_OWORD *)(v140 + 72) = 0u;
    *(_OWORD *)(v140 + 88) = 0u;
    *(_OWORD *)(v140 + 104) = 0u;
    *(_OWORD *)(v140 + 120) = 0u;
    *(_OWORD *)(v140 + 136) = 0u;
    *(_OWORD *)(v140 + 152) = 0u;
    *(_OWORD *)(v140 + 168) = 0u;
    *(_OWORD *)(v140 + 184) = 0u;
    *(_OWORD *)(v140 + 200) = 0u;
    *(_OWORD *)(v140 + 216) = 0u;
    *(_OWORD *)(v140 + 232) = 0u;
    *(_QWORD *)(v140 + 248) = 0;
    *(_OWORD *)(v140 + 56) = 0u;
    v141 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v140 + 56), 0);
    if ((_DWORD)v141)
      geo::read_write_lock::logFailure(v141, (uint64_t)"initialization", v142);
    v143 = malloc_create_zone(0, 0);
    *(_QWORD *)(v140 + 48) = v143;
    malloc_set_zone_name(v143, "GeoGL");
    *(_QWORD *)(v140 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v140;
  }
  *(_QWORD *)(v3 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 112) = v3 + 120;
  *(_QWORD *)v3 = &off_1E42BD2B8;
  *(_QWORD *)(v3 + 16) = &unk_1E42BD2D8;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
  v10 = *(_QWORD *)(v3 + 72);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *(_QWORD *)(v3 + 72) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v3 + 64, v12);
  }
  *(_QWORD *)v3 = &off_1E42B5B00;
  *(_QWORD *)(v3 + 16) = &unk_1E42B5B20;
  {
    v144 = operator new();
    *(_QWORD *)(v144 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v144 + 24) = "GeoGL";
    *(_OWORD *)(v144 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v144 = &off_1E42B5668;
    *(_QWORD *)(v144 + 8) = "GeoGL";
    *(_OWORD *)(v144 + 72) = 0u;
    *(_OWORD *)(v144 + 88) = 0u;
    *(_OWORD *)(v144 + 104) = 0u;
    *(_OWORD *)(v144 + 120) = 0u;
    *(_OWORD *)(v144 + 136) = 0u;
    *(_OWORD *)(v144 + 152) = 0u;
    *(_OWORD *)(v144 + 168) = 0u;
    *(_OWORD *)(v144 + 184) = 0u;
    *(_OWORD *)(v144 + 200) = 0u;
    *(_OWORD *)(v144 + 216) = 0u;
    *(_OWORD *)(v144 + 232) = 0u;
    *(_QWORD *)(v144 + 248) = 0;
    *(_OWORD *)(v144 + 56) = 0u;
    v145 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v144 + 56), 0);
    if ((_DWORD)v145)
      geo::read_write_lock::logFailure(v145, (uint64_t)"initialization", v146);
    v147 = malloc_create_zone(0, 0);
    *(_QWORD *)(v144 + 48) = v147;
    malloc_set_zone_name(v147, "GeoGL");
    *(_QWORD *)(v144 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v144;
  }
  v18 = ggl::Allocator::instance(void)::alloc;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v19 = &off_1E42DFA00;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 32) = &off_1E42B5748;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 40) = 24;
  *(_DWORD *)(v19 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_QWORD *)(v19 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v20 = 0uLL;
    if (v148)
    {
      v149 = operator new();
      *(_QWORD *)(v149 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v149 + 24) = "GeoGL";
      *(_OWORD *)(v149 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v149 = &off_1E42B5668;
      *(_QWORD *)(v149 + 8) = "GeoGL";
      *(_OWORD *)(v149 + 72) = 0u;
      *(_OWORD *)(v149 + 88) = 0u;
      *(_OWORD *)(v149 + 104) = 0u;
      *(_OWORD *)(v149 + 120) = 0u;
      *(_OWORD *)(v149 + 136) = 0u;
      *(_OWORD *)(v149 + 152) = 0u;
      *(_OWORD *)(v149 + 168) = 0u;
      *(_OWORD *)(v149 + 184) = 0u;
      *(_OWORD *)(v149 + 200) = 0u;
      *(_OWORD *)(v149 + 216) = 0u;
      *(_OWORD *)(v149 + 232) = 0u;
      *(_QWORD *)(v149 + 248) = 0;
      *(_OWORD *)(v149 + 56) = 0u;
      v150 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v149 + 56), 0);
      if ((_DWORD)v150)
        geo::read_write_lock::logFailure(v150, (uint64_t)"initialization", v151);
      v152 = malloc_create_zone(0, 0);
      *(_QWORD *)(v149 + 48) = v152;
      malloc_set_zone_name(v152, "GeoGL");
      *(_QWORD *)(v149 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v149;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v19 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v19 + 136) = 0;
  *(_OWORD *)(v19 + 200) = v20;
  *(_OWORD *)(v19 + 184) = v20;
  *(_OWORD *)(v19 + 168) = v20;
  *(_QWORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = -1;
  *(_OWORD *)(v19 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 240) = "debug text mesh";
  *(_QWORD *)(v19 + 248) = &ggl::ColoredText::myReflection;
  *(_QWORD *)(v19 + 32) = &off_1E42B7620;
  *(_QWORD *)(v19 + 232) = &unk_1E42B7640;
  v22 = *v5;
  v23 = (std::__shared_weak_count *)(*v5)[1];
  *v22 = v19 + 32;
  v22[1] = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = **v5;
  v27 = 108000 * *(_QWORD *)(v26 + 8);
  v28 = *(_QWORD *)(v26 + 72);
  v29 = *(_QWORD *)(v26 + 80) - v28;
  if (v27 != v29)
  {
    if (v27 <= v29)
    {
      if (v27 < v29)
        *(_QWORD *)(v26 + 80) = v28 + v27;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v26 + 72, v27 - v29);
    }
    v30 = *(std::__shared_weak_count **)(v26 + 32);
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *(_QWORD *)(v26 + 120) = 0;
    *(_DWORD *)(v26 + 112) = 0;
    v33 = *(_QWORD *)(v26 + 80) - *(_QWORD *)(v26 + 72);
    *(_QWORD *)(v26 + 40) = 0;
    *(_QWORD *)(v26 + 48) = v33;
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = v33;
  }
  v34 = operator new();
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 32) = 0;
  *(_QWORD *)v34 = &off_1E42B5DE8;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 36) = 65537;
  *(_DWORD *)(v34 + 44) = 0;
  *(_QWORD *)(v34 + 48) = 1;
  *(_WORD *)(v34 + 57) = 768;
  *(_QWORD *)(v34 + 67) = 0;
  *(_QWORD *)(v34 + 59) = 0;
  *(_BYTE *)(v34 + 75) = 0;
  *(_QWORD *)(v34 + 132) = 0;
  *(_QWORD *)(v34 + 124) = 0;
  *(_WORD *)(v34 + 188) = 257;
  *(_QWORD *)(v34 + 192) = 0;
  *(_QWORD *)(v34 + 200) = 0;
  *(_BYTE *)(v34 + 208) = 0;
  *(_BYTE *)(v34 + 56) = 0;
  v35 = (_OWORD *)operator new[]();
  *v35 = xmmword_19FFB6060;
  v35[1] = xmmword_19FFB6070;
  v35[2] = xmmword_19FFB6080;
  v35[3] = xmmword_19FFB6090;
  v35[4] = xmmword_19FFB60A0;
  v35[5] = xmmword_19FFB60B0;
  v35[6] = xmmword_19FFB60C0;
  v35[7] = xmmword_19FFB60D0;
  v35[8] = xmmword_19FFB60E0;
  v35[9] = xmmword_19FFB60F0;
  v35[10] = xmmword_19FFB6100;
  v35[11] = xmmword_19FFB6110;
  v35[12] = xmmword_19FFB6120;
  v35[13] = xmmword_19FFB6130;
  v35[14] = xmmword_19FFB6140;
  v35[15] = xmmword_19FFB6150;
  *((_QWORD *)this + 11) = v35;
  v36 = operator new();
  if ((v37 & 1) == 0
  {
    if ((v153 & 1) == 0
    {
      if ((v175 & 1) == 0
      {
        ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r = (uint64_t)&ggl::ColoredText::myReflection;
      }
      ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::attributesReflection(void)::r;
      unk_1EE5851C8 = 1;
    }
    ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::ColoredText::My>::typedReflection(void)::r;
    unk_1EE585110 = &ggl::ColoredText::pipelineDataMyPipelineDeviceStructs(void)::ref;
    qword_1EE585118 = 0;
    if ((v154 & 1) == 0
    {
      ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref = (uint64_t)ggl::ColoredText::View::reflection(void)::reflection;
    }
    qword_1EE585120 = (uint64_t)&ggl::ColoredText::pipelineDataMyPipelineConstantStructs(void)::ref;
    *(int64x2_t *)algn_1EE585128 = vdupq_n_s64(1uLL);
  }
  ggl::PipelineSetup::PipelineSetup(v36, (uint64_t)&ggl::ColoredText::MyPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)v36 = &off_1E42B5AB0;
  v38 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E90;
  v40 = ggl::BufferData::BufferData((uint64_t)&v38[1], qword_1EE5751E8, 2, 1, 6, 1);
  v38[9].__shared_owners_ = (uint64_t)ggl::ColoredText::View::reflection(void)::reflection;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8BD0;
  v41 = *(uint64_t **)(v36 + 64);
  *v41 = v40;
  v41[1] = 0;
  v42 = *(uint64_t **)(v36 + 160);
  do
    v43 = __ldxr(v39);
  while (__stxr(v43 + 1, v39));
  v44 = (std::__shared_weak_count *)v42[1];
  *v42 = v40;
  v42[1] = (uint64_t)v38;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  do
    v47 = __ldaxr(v39);
  while (__stlxr(v47 - 1, v39));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  v48 = (std::__shared_weak_count *)operator new(0x60uLL);
  v48->__shared_owners_ = 0;
  v49 = (unint64_t *)&v48->__shared_owners_;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v50 = ggl::TextureData2D::TextureData2D((uint64_t)&v48[1], 8, 1024, 1u, 6, 0);
  v51 = (void *)((uint64_t (*)(_QWORD *, _QWORD))v48[1].__on_zero_shared)(v50, 0);
  memcpy(v51, &g_kDebugFont, 0x4000uLL);
  v52 = (std::__shared_weak_count *)operator new(0x58uLL);
  v52->__shared_owners_ = 0;
  v53 = (unint64_t *)&v52->__shared_owners_;
  v52->__shared_weak_owners_ = 0;
  v52[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v52[1].__shared_weak_owners_ = 0;
  v52[2].__vftable = 0;
  v52[1].__shared_owners_ = 0;
  LODWORD(v52[2].__shared_owners_) = 0;
  *(_OWORD *)((char *)&v52[2].__shared_owners_ + 4) = xmmword_19FFB3C50;
  *(std::__shared_weak_count_vtbl **)((char *)&v52[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000000;
  HIDWORD(v52[3].__shared_owners_) = 0;
  v54 = operator new();
  v55 = v54;
  do
    v56 = __ldxr(v49);
  while (__stxr(v56 + 1, v49));
  shared_owners = v48[1].__shared_owners_;
  shared_owners_high = HIDWORD(v48[1].__shared_owners_);
  *(_DWORD *)(v54 + 64) = 0;
  *(_DWORD *)(v54 + 68) = shared_owners_high;
  *(_QWORD *)v54 = &off_1E42BE438;
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v54 + 48) = "";
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)(v54 + 24) = 0;
  *(_DWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 56) = 0x100000001;
  *(_QWORD *)(v54 + 72) = 0x100000001;
  *(_QWORD *)(v54 + 88) = 0;
  *(_QWORD *)(v54 + 96) = 0;
  *(_DWORD *)(v54 + 104) = shared_owners;
  *(_QWORD *)(v54 + 112) = v48 + 1;
  *(_QWORD *)(v54 + 120) = v48;
  do
    v59 = __ldxr(v49);
  while (__stxr(v59 + 1, v49));
  *(_WORD *)(v54 + 128) = 0;
  *(_BYTE *)(v54 + 130) = 1;
  *(_QWORD *)(v54 + 136) = v52 + 1;
  *(_QWORD *)(v54 + 144) = v52;
  do
    v60 = __ldxr(v53);
  while (__stxr(v60 + 1, v53));
  *(_QWORD *)(v54 + 80) = v48[1].__shared_weak_owners_;
  do
    v61 = __ldaxr(v49);
  while (__stlxr(v61 - 1, v49));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  do
    v62 = __ldaxr(v53);
  while (__stlxr(v62 - 1, v53));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  do
    v63 = __ldaxr(v49);
  while (__stlxr(v63 - 1, v49));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  **(_QWORD **)(v36 + 96) = v55;
  v64 = (int64x2_t *)operator new();
  v64->i64[0] = (uint64_t)&off_1E42B59B0;
  v64[1].i64[0] = (uint64_t)"";
  v64[1].i64[1] = v34;
  v64[2].i64[0] = v36;
  v64[2].i32[2] = 0;
  v64[3].i64[0] = 0;
  v64[3].i32[2] = 1065353216;
  v64[4].i64[0] = v3;
  v64[4].i64[1] = 0;
  v64[5].i64[0] = 0;
  v64[5].i64[1] = 0;
  v64[6] = vdupq_n_s64(1uLL);
  v64[7].i64[0] = 0;
  v65 = *v179;
  *v179 = v64;
  if (v65)
    (*(void (**)(int64x2_t *))(v65->i64[0] + 8))(v65);
  *v177 = 0;
  v66 = operator new();
  if ((v67 & 1) == 0
  {
    if ((v155 & 1) == 0
    {
      ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r = (uint64_t)&ggl::TextureRect::textureVBOReflection;
    }
    ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r;
    *(_QWORD *)algn_1EE5851F0 = 1;
  }
  *(_QWORD *)(v66 + 32) = 0;
  *(_QWORD *)(v66 + 40) = 0;
  *(_DWORD *)(v66 + 48) = 0;
  *(_QWORD *)v66 = &off_1E42BBC08;
  *(_QWORD *)(v66 + 8) = "debug texture mesh";
  *(_QWORD *)(v66 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v66 + 24) = 0;
  *(_QWORD *)(v66 + 56) = &ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r;
  *(_QWORD *)(v66 + 64) = 0;
  v68 = (uint64_t **)(v66 + 64);
  *(_QWORD *)(v66 + 72) = 0;
  *(_QWORD *)(v66 + 80) = 0;
  {
    v156 = operator new();
    *(_QWORD *)(v156 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v156 + 24) = "GeoGL";
    *(_OWORD *)(v156 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v156 = &off_1E42B5668;
    *(_QWORD *)(v156 + 8) = "GeoGL";
    *(_OWORD *)(v156 + 72) = 0u;
    *(_OWORD *)(v156 + 88) = 0u;
    *(_OWORD *)(v156 + 104) = 0u;
    *(_OWORD *)(v156 + 120) = 0u;
    *(_OWORD *)(v156 + 136) = 0u;
    *(_OWORD *)(v156 + 152) = 0u;
    *(_OWORD *)(v156 + 168) = 0u;
    *(_OWORD *)(v156 + 184) = 0u;
    *(_OWORD *)(v156 + 200) = 0u;
    *(_OWORD *)(v156 + 216) = 0u;
    *(_OWORD *)(v156 + 232) = 0u;
    *(_QWORD *)(v156 + 248) = 0;
    *(_OWORD *)(v156 + 56) = 0u;
    v157 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v156 + 56), 0);
    if ((_DWORD)v157)
      geo::read_write_lock::logFailure(v157, (uint64_t)"initialization", v158);
    v159 = malloc_create_zone(0, 0);
    *(_QWORD *)(v156 + 48) = v159;
    malloc_set_zone_name(v159, "GeoGL");
    *(_QWORD *)(v156 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v156;
  }
  v70 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v66 + 120) = 0;
  *(_QWORD *)(v66 + 96) = 0;
  *(_QWORD *)(v66 + 104) = 0;
  *(_QWORD *)(v66 + 88) = v70;
  {
    v160 = operator new();
    *(_QWORD *)(v160 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v160 + 24) = "GeoGL";
    *(_OWORD *)(v160 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v160 = &off_1E42B5668;
    *(_QWORD *)(v160 + 8) = "GeoGL";
    *(_OWORD *)(v160 + 72) = 0u;
    *(_OWORD *)(v160 + 88) = 0u;
    *(_OWORD *)(v160 + 104) = 0u;
    *(_OWORD *)(v160 + 120) = 0u;
    *(_OWORD *)(v160 + 136) = 0u;
    *(_OWORD *)(v160 + 152) = 0u;
    *(_OWORD *)(v160 + 168) = 0u;
    *(_OWORD *)(v160 + 184) = 0u;
    *(_OWORD *)(v160 + 200) = 0u;
    *(_OWORD *)(v160 + 216) = 0u;
    *(_OWORD *)(v160 + 232) = 0u;
    *(_QWORD *)(v160 + 248) = 0;
    *(_OWORD *)(v160 + 56) = 0u;
    v161 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v160 + 56), 0);
    if ((_DWORD)v161)
      geo::read_write_lock::logFailure(v161, (uint64_t)"initialization", v162);
    v163 = malloc_create_zone(0, 0);
    *(_QWORD *)(v160 + 48) = v163;
    malloc_set_zone_name(v163, "GeoGL");
    *(_QWORD *)(v160 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v160;
  }
  *(_QWORD *)(v66 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v66 + 136) = 0;
  *(_QWORD *)(v66 + 112) = v66 + 120;
  *(_QWORD *)v66 = &off_1E42BD3F8;
  *(_QWORD *)(v66 + 16) = &unk_1E42BD418;
  v71 = *(_QWORD *)(v66 + 64);
  v72 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8);
  v73 = *(_QWORD *)(v66 + 72);
  v74 = (v73 - v71) >> 4;
  v75 = v72 - v74;
  if (v72 <= v74)
  {
    if (v72 < v74)
    {
      v76 = v71 + 16 * v72;
      while (v73 != v76)
      {
        v77 = *(std::__shared_weak_count **)(v73 - 8);
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v77->__on_zero_shared)(v77, v75);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v73 -= 16;
      }
      *(_QWORD *)(v66 + 72) = v76;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v66 + 64, v75);
  }
  *(_QWORD *)v66 = &off_1E42B5EE8;
  *(_QWORD *)(v66 + 16) = &unk_1E42B5F08;
  {
    v164 = operator new();
    *(_QWORD *)(v164 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v164 + 24) = "GeoGL";
    *(_OWORD *)(v164 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v164 = &off_1E42B5668;
    *(_QWORD *)(v164 + 8) = "GeoGL";
    *(_OWORD *)(v164 + 72) = 0u;
    *(_OWORD *)(v164 + 88) = 0u;
    *(_OWORD *)(v164 + 104) = 0u;
    *(_OWORD *)(v164 + 120) = 0u;
    *(_OWORD *)(v164 + 136) = 0u;
    *(_OWORD *)(v164 + 152) = 0u;
    *(_OWORD *)(v164 + 168) = 0u;
    *(_OWORD *)(v164 + 184) = 0u;
    *(_OWORD *)(v164 + 200) = 0u;
    *(_OWORD *)(v164 + 216) = 0u;
    *(_OWORD *)(v164 + 232) = 0u;
    *(_QWORD *)(v164 + 248) = 0;
    *(_OWORD *)(v164 + 56) = 0u;
    v165 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v164 + 56), 0);
    if ((_DWORD)v165)
      geo::read_write_lock::logFailure(v165, (uint64_t)"initialization", v166);
    v167 = malloc_create_zone(0, 0);
    *(_QWORD *)(v164 + 48) = v167;
    malloc_set_zone_name(v167, "GeoGL");
    *(_QWORD *)(v164 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v164;
  }
  v81 = ggl::Allocator::instance(void)::alloc;
  v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v82 = &off_1E42DFB18;
  *(_QWORD *)(v82 + 8) = 0;
  *(_QWORD *)(v82 + 32) = &off_1E42B5748;
  *(_QWORD *)(v82 + 16) = 0;
  *(_QWORD *)(v82 + 24) = v81;
  *(_QWORD *)(v82 + 40) = 16;
  *(_DWORD *)(v82 + 48) = 6;
  v83 = 0uLL;
  *(_OWORD *)(v82 + 56) = 0u;
  *(_OWORD *)(v82 + 72) = 0u;
  *(_OWORD *)(v82 + 88) = 0u;
  *(_OWORD *)(v82 + 104) = 0u;
  *(_QWORD *)(v82 + 120) = 0;
  if ((v84 & 1) == 0)
  {
    v83 = 0uLL;
    if (v168)
    {
      v169 = operator new();
      *(_QWORD *)(v169 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v169 + 24) = "GeoGL";
      *(_OWORD *)(v169 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v169 = &off_1E42B5668;
      *(_QWORD *)(v169 + 8) = "GeoGL";
      *(_OWORD *)(v169 + 72) = 0u;
      *(_OWORD *)(v169 + 88) = 0u;
      *(_OWORD *)(v169 + 104) = 0u;
      *(_OWORD *)(v169 + 120) = 0u;
      *(_OWORD *)(v169 + 136) = 0u;
      *(_OWORD *)(v169 + 152) = 0u;
      *(_OWORD *)(v169 + 168) = 0u;
      *(_OWORD *)(v169 + 184) = 0u;
      *(_OWORD *)(v169 + 200) = 0u;
      *(_OWORD *)(v169 + 216) = 0u;
      *(_OWORD *)(v169 + 232) = 0u;
      *(_QWORD *)(v169 + 248) = 0;
      *(_OWORD *)(v169 + 56) = 0u;
      v170 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v169 + 56), 0);
      if ((_DWORD)v170)
        geo::read_write_lock::logFailure(v170, (uint64_t)"initialization", v171);
      v172 = malloc_create_zone(0, 0);
      *(_QWORD *)(v169 + 48) = v172;
      malloc_set_zone_name(v172, "GeoGL");
      *(_QWORD *)(v169 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v169;
      v83 = 0uLL;
    }
  }
  *(_QWORD *)(v82 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v82 + 136) = 0;
  *(_OWORD *)(v82 + 200) = v83;
  *(_OWORD *)(v82 + 184) = v83;
  *(_OWORD *)(v82 + 168) = v83;
  *(_QWORD *)(v82 + 216) = 0;
  *(_QWORD *)(v82 + 224) = -1;
  *(_OWORD *)(v82 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v82 + 144) = 0;
  *(_QWORD *)(v82 + 240) = "debug texture mesh";
  *(_QWORD *)(v82 + 248) = &ggl::TextureRect::textureVBOReflection;
  *(_QWORD *)(v82 + 32) = &off_1E42B7760;
  *(_QWORD *)(v82 + 232) = &unk_1E42B7780;
  v85 = *v68;
  v86 = (std::__shared_weak_count *)(*v68)[1];
  *v85 = v82 + 32;
  v85[1] = v82;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = operator new();
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  *(_DWORD *)(v89 + 32) = 0;
  *(_QWORD *)v89 = &off_1E42B5DE8;
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 36) = 65537;
  *(_DWORD *)(v89 + 44) = 0;
  *(_QWORD *)(v89 + 48) = 1;
  *(_WORD *)(v89 + 56) = 0;
  *(_BYTE *)(v89 + 58) = 3;
  *(_QWORD *)(v89 + 67) = 0;
  *(_QWORD *)(v89 + 59) = 0;
  *(_BYTE *)(v89 + 75) = 0;
  *(_QWORD *)(v89 + 132) = 0;
  *(_QWORD *)(v89 + 124) = 0;
  *(_WORD *)(v89 + 188) = 257;
  *(_BYTE *)(v89 + 208) = 0;
  *(_QWORD *)(v89 + 192) = 0;
  *(_QWORD *)(v89 + 200) = 0;
  v90 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v90->__shared_owners_ = 0;
  v91 = (unint64_t *)&v90->__shared_owners_;
  v90->__shared_weak_owners_ = 0;
  v90->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v90[1], 2, 1, 0, 6, 6);
  LODWORD(v90[10].__vftable) = 0;
  v90[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v90[1].__shared_owners_ = 2;
  v90[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v90[9].__shared_weak_owners_ = (uint64_t)"index data";
  v92 = v90[4].__vftable;
  v92->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
  LODWORD(v92->~__shared_weak_count_0) = 196610;
  v93 = **v68;
  v94 = 4 * *(_QWORD *)(v93 + 8);
  v95 = *(_QWORD *)(v93 + 72);
  v96 = *(_QWORD *)(v93 + 80) - v95;
  v97 = v94 - v96;
  if (v94 != v96)
  {
    if (v94 <= v96)
    {
      if (v94 < v96)
        *(_QWORD *)(v93 + 80) = v95 + v94;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v93 + 72, v97);
    }
    v98 = *(std::__shared_weak_count **)(v93 + 32);
    *(_QWORD *)(v93 + 24) = 0;
    *(_QWORD *)(v93 + 32) = 0;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    *(_QWORD *)(v93 + 120) = 0;
    *(_DWORD *)(v93 + 112) = 0;
    v101 = *(_QWORD *)(v93 + 80) - *(_QWORD *)(v93 + 72);
    *(_QWORD *)(v93 + 40) = 0;
    *(_QWORD *)(v93 + 48) = v101;
    *(_QWORD *)(v93 + 56) = 0;
    *(_QWORD *)(v93 + 64) = v101;
  }
  do
    v102 = __ldxr(v91);
  while (__stxr(v102 + 1, v91));
  do
    v103 = __ldxr(v91);
  while (__stxr(v103 + 1, v91));
  v104 = *(std::__shared_weak_count **)(v66 + 104);
  *(_QWORD *)(v66 + 96) = v90 + 1;
  *(_QWORD *)(v66 + 104) = v90;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v104->__on_zero_shared)(v104, v97);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  do
    v107 = __ldaxr(v91);
  while (__stlxr(v107 - 1, v91));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *, unint64_t))v90->__on_zero_shared)(v90, v97);
    std::__shared_weak_count::__release_weak(v90);
  }
  v108 = (int64x2_t *)operator new();
  v109 = (_QWORD *)operator new();
  if ((v110 & 1) == 0
  {
    if ((v173 & 1) == 0
    {
      if ((v176 & 1) == 0
      {
        ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r = (uint64_t)&ggl::TextureRect::textureVBOReflection;
      }
      ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::attributesReflection(void)::r;
      *(_QWORD *)algn_1EE5851F0 = 1;
    }
    ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TextureRect::TextureVBO>::typedReflection(void)::r;
    *(_QWORD *)algn_1EE585158 = &ggl::TextureRect::pipelineDataTextureRectPipelineDeviceStructs(void)::ref;
    qword_1EE585160 = 0;
    if ((v174 & 1) == 0
    {
      ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref = (uint64_t)ggl::TextureRect::View::reflection(void)::reflection;
    }
    qword_1EE585168 = (uint64_t)&ggl::TextureRect::pipelineDataTextureRectPipelineConstantStructs(void)::ref;
    unk_1EE585170 = vdupq_n_s64(1uLL);
  }
  ggl::PipelineSetup::PipelineSetup((uint64_t)v109, (uint64_t)&ggl::TextureRect::TextureRectPipelineSetup::typedReflection(void)::ref);
  *v109 = &off_1E42B5F28;
  v111 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v111->__shared_owners_ = 0;
  v112 = (unint64_t *)&v111->__shared_owners_;
  v111->__shared_weak_owners_ = 0;
  v111->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1050;
  v113 = ggl::BufferData::BufferData((uint64_t)&v111[1], qword_1EE5750F0, 2, 1, 6, 1);
  v111[9].__shared_owners_ = (uint64_t)ggl::TextureRect::View::reflection(void)::reflection;
  v111[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8CD0;
  v114 = (uint64_t *)v109[8];
  *v114 = v113;
  v114[1] = 0;
  v115 = (uint64_t *)v109[20];
  do
    v116 = __ldxr(v112);
  while (__stxr(v116 + 1, v112));
  v117 = (std::__shared_weak_count *)v115[1];
  *v115 = v113;
  v115[1] = (uint64_t)v111;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  do
    v120 = __ldaxr(v112);
  while (__stlxr(v120 - 1, v112));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
  v108->i64[0] = (uint64_t)&off_1E42B59B0;
  v108[1].i64[0] = (uint64_t)"";
  v108[1].i64[1] = v89;
  v108[2].i64[0] = (uint64_t)v109;
  v108[2].i32[2] = 0;
  v108[3].i64[0] = 0;
  v108[3].i32[2] = 1065353216;
  v108[4].i64[0] = v66;
  v108[4].i64[1] = 0;
  v108[5].i64[0] = 0;
  v108[5].i64[1] = 0;
  v108[6] = vdupq_n_s64(1uLL);
  v108[7].i64[0] = 0;
  v121 = *((_QWORD *)v178 + 8);
  *((_QWORD *)v178 + 8) = v108;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  ggl::DebugConsole::begin(v178);
  v122 = (_QWORD *)*((_QWORD *)v178 + 9);
  *((_QWORD *)v178 + 9) = 0;
  *((_QWORD *)v178 + 10) = 0;
  if (v122)
  {
    if (v122[5])
    {
      v124 = v122[2];
      v123 = v122[3];
      if (v123 != v124)
      {
        v125 = v122[1];
        v126 = *((unsigned __int8 *)v122 + 32);
        v127 = *((unsigned __int8 *)v122 + 33);
        if (*v122 && *(_BYTE *)(v125 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v122 + 64))(*v122);
        if (v126 && !v127)
        {
          v129 = *(_QWORD *)(v125 + 56);
          v128 = *(_QWORD *)(v125 + 64);
          if (v128 == v129)
            v129 = *(_QWORD *)(v125 + 80) - *(_QWORD *)(v125 + 72);
          if (v124 < v129)
            v129 = v124;
          if (v128 <= v123)
            v128 = v123;
          if (v128 == v129)
            v128 = v129 + *(_QWORD *)(v125 + 80) - *(_QWORD *)(v125 + 72);
          *(_QWORD *)(v125 + 56) = v129;
          *(_QWORD *)(v125 + 64) = v128;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v122, 0x1070C40C7B7B3AELL);
    v130 = *((_QWORD *)v178 + 10);
  }
  else
  {
    v130 = 0;
  }
  v131 = *v179;
  v131[4].i64[1] = 0;
  v131[5].i64[0] = v130;
  v131[5].i64[1] = 0;
  v131[6].i64[0] = 1;
  shared_weak_owners = v90[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC)
    shared_weak_owners = 12;
  v90[3].__shared_owners_ = 0;
  v90[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v133 = __ldaxr(v91);
  while (__stlxr(v133 - 1, v91));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  return v178;
}

uint64_t *ggl::DebugConsole::begin(ggl::DebugConsole *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  uint64_t v38;

  v2 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 7) + 64) + 64);
  v3 = *(_QWORD *)(v2 + 8) * *((_QWORD *)this + 6);
  v4 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 80) - v4;
  if (v3 != v5)
  {
    if (v3 <= v5)
    {
      if (v3 < v5)
        *(_QWORD *)(v2 + 80) = v4 + v3;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v2 + 72, v3 - v5);
    }
    v6 = *(std::__shared_weak_count **)(v2 + 32);
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)(v2 + 120) = 0;
    *(_DWORD *)(v2 + 112) = 0;
    v9 = *(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = v9;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = v9;
  }
  v10 = (uint64_t *)operator new();
  v11 = v10;
  v12 = *((_QWORD *)this + 6);
  v13 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 7) + 64) + 64);
  v10[5] = 0;
  *v10 = 0;
  v10[1] = 0;
  v14 = *(_QWORD *)(v13 + 8) * v12;
  v33 = 0;
  v34 = v13;
  v35 = 0;
  v36 = v14;
  v37 = 1;
  if (v14)
    v15 = *(_QWORD *)(v13 + 72);
  else
    v15 = 0;
  v38 = v15;
  result = ggl::BufferMemory::operator=(v10, (uint64_t)&v33);
  if (v38)
  {
    v18 = v35;
    v17 = v36;
    if (v36 != v35)
    {
      result = (uint64_t *)v33;
      v19 = (_QWORD *)v34;
      v20 = v37;
      v21 = HIBYTE(v37);
      if (v33 && *(_BYTE *)(v34 + 17) != 2)
        result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 64))();
      if (v20 && !v21)
      {
        v23 = v19[7];
        v22 = v19[8];
        if (v22 == v23)
          v23 = v19[10] - v19[9];
        if (v18 < v23)
          v23 = v18;
        if (v22 <= v17)
          v22 = v17;
        if (v22 == v23)
          v22 = v23 + v19[10] - v19[9];
        v19[7] = v23;
        v19[8] = v22;
      }
    }
  }
  v24 = (_QWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v11;
  if (v24)
  {
    if (v24[5])
    {
      v26 = v24[2];
      v25 = v24[3];
      if (v25 != v26)
      {
        v27 = v24[1];
        v28 = *((unsigned __int8 *)v24 + 32);
        v29 = *((unsigned __int8 *)v24 + 33);
        if (*v24 && *(_BYTE *)(v27 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 64))(*v24);
        if (v28 && !v29)
        {
          v31 = *(_QWORD *)(v27 + 56);
          v30 = *(_QWORD *)(v27 + 64);
          if (v30 == v31)
            v31 = *(_QWORD *)(v27 + 80) - *(_QWORD *)(v27 + 72);
          if (v26 < v31)
            v31 = v26;
          if (v30 <= v25)
            v30 = v25;
          if (v30 == v31)
            v30 = v31 + *(_QWORD *)(v27 + 80) - *(_QWORD *)(v27 + 72);
          *(_QWORD *)(v27 + 56) = v31;
          *(_QWORD *)(v27 + 64) = v30;
        }
      }
    }
    result = (uint64_t *)MEMORY[0x1A1AF4E00](v24, 0x1070C40C7B7B3AELL);
  }
  *((_QWORD *)this + 10) = 0;
  v32 = (_QWORD *)*((_QWORD *)this + 8);
  v32[9] = 0;
  v32[10] = 0;
  v32[11] = 0;
  v32[12] = 1;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::TextureRect::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TextureRect::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureRect::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::ColoredText::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::ColoredText::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ColoredText::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::DebugConsole::end(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = this;
  v2 = *(_QWORD **)(this + 72);
  *(_QWORD *)(this + 72) = 0;
  if (v2)
  {
    if (v2[5])
    {
      v4 = v2[2];
      v3 = v2[3];
      if (v3 != v4)
      {
        v5 = v2[1];
        v6 = *((unsigned __int8 *)v2 + 32);
        v7 = *((unsigned __int8 *)v2 + 33);
        if (*v2 && *(_BYTE *)(v5 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 64))(*v2);
        if (v6)
          v8 = v7 == 0;
        else
          v8 = 0;
        if (v8)
        {
          v10 = *(_QWORD *)(v5 + 56);
          v9 = *(_QWORD *)(v5 + 64);
          if (v9 == v10)
            v10 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
          if (v4 < v10)
            v10 = v4;
          if (v9 <= v3)
            v9 = v3;
          if (v9 == v10)
            v9 = v10 + *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
          *(_QWORD *)(v5 + 56) = v10;
          *(_QWORD *)(v5 + 64) = v9;
        }
      }
    }
    this = MEMORY[0x1A1AF4E00](v2, 0x1070C40C7B7B3AELL);
  }
  v11 = *(_QWORD **)(v1 + 56);
  v12 = *(_QWORD *)(v1 + 80);
  v11[9] = 0;
  v11[10] = v12;
  v11[11] = 0;
  v11[12] = 1;
  return this;
}

uint64_t ggl::DebugConsole::setProjection(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(result + 64);
  v3 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(result + 56) + 32) + 64);
  v5 = v3[8];
  v4 = (_DWORD *)v3[9];
  *v4 = *a2;
  v4[1] = a2[1];
  v4[2] = a2[2];
  v4[3] = a2[3];
  v4[4] = a2[4];
  v4[5] = a2[5];
  v4[6] = a2[6];
  v4[7] = a2[7];
  v4[8] = a2[8];
  v4[9] = a2[9];
  v4[10] = a2[10];
  v4[11] = a2[11];
  v4[12] = a2[12];
  v4[13] = a2[13];
  v4[14] = a2[14];
  v4[15] = a2[15];
  v6 = v3[1];
  if (v5 > v6)
    v6 = v5;
  v3[7] = 0;
  v3[8] = v6;
  v7 = **(_QWORD ***)(*(_QWORD *)(v2 + 32) + 64);
  v8 = v7[1];
  v10 = v7[8];
  v9 = (_DWORD *)v7[9];
  *v9 = *a2;
  v9[1] = a2[1];
  v9[2] = a2[2];
  v9[3] = a2[3];
  v9[4] = a2[4];
  v9[5] = a2[5];
  v9[6] = a2[6];
  v9[7] = a2[7];
  v9[8] = a2[8];
  v9[9] = a2[9];
  v9[10] = a2[10];
  v9[11] = a2[11];
  v9[12] = a2[12];
  v9[13] = a2[13];
  v9[14] = a2[14];
  v9[15] = a2[15];
  if (v10 > v8)
    v8 = v10;
  v7[7] = 0;
  v7[8] = v8;
  return result;
}

uint64_t ggl::DebugConsole::drawString(uint64_t this, int8x16_t *a2, unint64_t a3, double a4, int32x2_t a5)
{
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  unint64_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int16x8_t v30;
  float32x4_t v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  unint64_t v36;
  const char *v37;
  int8x16_t v38;
  int8x8_t v39;
  int16x8_t v40;
  float32x4_t v41;
  unint64_t v42;
  const char *v43;
  int v44;
  float v45;
  float v46;
  int v47;
  int v48;
  float v49;
  float v50;
  float v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  float v83;
  const char *v84;
  unint64_t v85;
  unsigned int v87;
  unsigned int v88;
  int v89;

  if (!a2)
    return this;
  v6 = *(float *)(this + 8);
  v5 = *(float *)(this + 12);
  if (!a3)
  {
    v11 = *(float *)(this + 28);
    v8 = 0.0;
    goto LABEL_29;
  }
  v7 = 0;
  v8 = 0.0;
  do
  {
    v9 = a2->u8[v7];
    if (v9 > 0x21 || v9 == 32)
    {
      v8 = *(float *)(this + 24) + v8;
      goto LABEL_5;
    }
    if (v9 == 9)
    {
      v8 = v8 + (float)(*(float *)(this + 24) * 4.0);
      goto LABEL_5;
    }
    if (v9 == 10)
      break;
LABEL_5:
    ++v7;
  }
  while (a3 != v7);
  a5.i32[0] = *(_DWORD *)(this + 28);
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      v12 = 0uLL;
      v13 = (float32x4_t)*(unsigned int *)(this + 28);
      v14 = (int8x16_t)vdupq_lane_s32(a5, 0);
      v15 = a2 + 1;
      v16.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v16.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      v17.i64[0] = 0x8000000080000000;
      v17.i64[1] = 0x8000000080000000;
      v18 = a3 & 0xFFFFFFFFFFFFFFE0;
      v19 = 0uLL;
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      do
      {
        v25 = vceqq_s8(v15[-1], v16);
        v26 = vmovl_high_s8(v25);
        v27 = vmovl_s8(*(int8x8_t *)v25.i8);
        v28 = vceqq_s8(*v15, v16);
        v29 = vmovl_high_s8(v28);
        v30 = vmovl_s8(*(int8x8_t *)v28.i8);
        v20 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v26), v14, v17), v20);
        v19 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v26.i8), v14, v17), v19);
        v12 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v27), v14, v17), v12);
        v13 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v27.i8), v14, v17), v13);
        v24 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v29), v14, v17), v24);
        v23 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v14, v17), v23);
        v22 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v30), v14, v17), v22);
        v21 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v30.i8), v14, v17), v21);
        v15 += 2;
        v18 -= 32;
      }
      while (v18);
      v31 = vaddq_f32(vaddq_f32(vaddq_f32(v21, v13), vaddq_f32(v23, v19)), vaddq_f32(vaddq_f32(v22, v12), vaddq_f32(v24, v20)));
      v11 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
      if (v10 == a3)
        goto LABEL_29;
      if ((a3 & 0x18) == 0)
        goto LABEL_24;
    }
    else
    {
      v10 = 0;
      v11 = *(float *)(this + 28);
    }
    v32 = v10;
    v10 = a3 & 0xFFFFFFFFFFFFFFF8;
    v33 = 0uLL;
    v34 = (float32x4_t)LODWORD(v11);
    v35 = (int8x16_t)vdupq_lane_s32(a5, 0);
    v36 = v32 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v37 = &a2->i8[v32];
    v38.i64[0] = 0x8000000080000000;
    v38.i64[1] = 0x8000000080000000;
    do
    {
      v39 = *(int8x8_t *)v37;
      v37 += 8;
      v40 = vmovl_s8(vceq_s8(v39, (int8x8_t)0xA0A0A0A0A0A0A0ALL));
      v33 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v40), v35, v38), v33);
      v34 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v40.i8), v35, v38), v34);
      v36 += 8;
    }
    while (v36);
    v41 = vaddq_f32(v34, v33);
    v11 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41));
    if (v10 != a3)
      goto LABEL_24;
  }
  else
  {
    v10 = 0;
    v11 = *(float *)(this + 28);
LABEL_24:
    v42 = a3 - v10;
    v43 = &a2->i8[v10];
    do
    {
      v44 = *(unsigned __int8 *)v43++;
      if (v44 == 10)
        v45 = *(float *)(this + 28);
      else
        v45 = -0.0;
      v11 = v45 + v11;
      --v42;
    }
    while (v42);
  }
LABEL_29:
  v46 = v6 - v8;
  v47 = *(_DWORD *)(this + 40);
  v48 = *(_DWORD *)(this + 44);
  v49 = v6 + (float)(v8 * -0.5);
  if (v47 == 1)
    v6 = v49;
  if (v47 == 2)
    v6 = v46;
  v50 = v5 - v11;
  v51 = v5 + (float)(v11 * -0.5);
  if (v48 == 1)
    v5 = v51;
  if (v48 == 2)
    v5 = v50;
  v52 = (108000 - *(_QWORD *)(this + 80)) / 6uLL;
  if (v52 >= a3)
    v52 = a3;
  if (v52)
  {
    v53 = 0;
    v54 = 1 - v52;
    v55 = &a2->i8[1];
    do
    {
      v82 = a2->u8[v53];
      if (v82 >= 0x22)
      {
        v56 = (float)(int)(v82 - 33);
        v58 = *(float *)(this + 16);
        v57 = *(float *)(this + 20);
        v59 = v56 * 0.0097656;
        v60 = (float)(v56 * 0.0097656) + 0.0097656;
        if (*(_BYTE *)(this + 108))
          v61 = v56 * 0.0097656;
        else
          v61 = (float)(v56 * 0.0097656) + 0.0097656;
        if (!*(_BYTE *)(this + 108))
          v60 = v59;
        v62 = *(_QWORD *)(this + 72);
        v63 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v63 + 1;
        v64 = *(_QWORD *)(v62 + 40) + 24 * v63;
        *(float *)v64 = v6;
        *(float *)(v64 + 4) = v5;
        *(_DWORD *)(v64 + 8) = 0;
        *(float *)(v64 + 12) = v60;
        *(_BYTE *)(v64 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v64 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v64 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v64 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v64 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v64 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v64 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v64 + 23) = *(_BYTE *)(this + 103);
        v65 = v57 + v5;
        v66 = *(_QWORD *)(this + 72);
        v67 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v67 + 1;
        v68 = *(_QWORD *)(v66 + 40) + 24 * v67;
        *(float *)v68 = v6;
        *(float *)(v68 + 4) = v65;
        *(_DWORD *)(v68 + 8) = 0;
        *(float *)(v68 + 12) = v61;
        *(_BYTE *)(v68 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v68 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v68 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v68 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v68 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v68 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v68 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v68 + 23) = *(_BYTE *)(this + 103);
        v69 = v58 + v6;
        v70 = *(_QWORD *)(this + 72);
        v71 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v71 + 1;
        v72 = *(_QWORD *)(v70 + 40) + 24 * v71;
        *(float *)v72 = v69;
        *(float *)(v72 + 4) = v5;
        *(_DWORD *)(v72 + 8) = 1065353216;
        *(float *)(v72 + 12) = v60;
        *(_BYTE *)(v72 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v72 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v72 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v72 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v72 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v72 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v72 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v72 + 23) = *(_BYTE *)(this + 103);
        v73 = *(_QWORD *)(this + 72);
        v74 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v74 + 1;
        v75 = *(_QWORD *)(v73 + 40) + 24 * v74;
        *(float *)v75 = v69;
        *(float *)(v75 + 4) = v5;
        *(_DWORD *)(v75 + 8) = 1065353216;
        *(float *)(v75 + 12) = v60;
        *(_BYTE *)(v75 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v75 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v75 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v75 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v75 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v75 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v75 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v75 + 23) = *(_BYTE *)(this + 103);
        v76 = *(_QWORD *)(this + 72);
        v77 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v77 + 1;
        v78 = *(_QWORD *)(v76 + 40) + 24 * v77;
        *(float *)v78 = v6;
        *(float *)(v78 + 4) = v65;
        *(_DWORD *)(v78 + 8) = 0;
        *(float *)(v78 + 12) = v61;
        *(_BYTE *)(v78 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v78 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v78 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v78 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v78 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v78 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v78 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v78 + 23) = *(_BYTE *)(this + 103);
        v79 = *(_QWORD *)(this + 72);
        v80 = *(_QWORD *)(this + 80);
        *(_QWORD *)(this + 80) = v80 + 1;
        v81 = *(_QWORD *)(v79 + 40) + 24 * v80;
        *(float *)v81 = v69;
        *(float *)(v81 + 4) = v65;
        *(_DWORD *)(v81 + 8) = 1065353216;
        *(float *)(v81 + 12) = v61;
        *(_BYTE *)(v81 + 16) = *(_BYTE *)(this + 96);
        *(_BYTE *)(v81 + 17) = *(_BYTE *)(this + 97);
        *(_BYTE *)(v81 + 18) = *(_BYTE *)(this + 98);
        *(_BYTE *)(v81 + 19) = *(_BYTE *)(this + 99);
        *(_BYTE *)(v81 + 20) = *(_BYTE *)(this + 100);
        *(_BYTE *)(v81 + 21) = *(_BYTE *)(this + 101);
        *(_BYTE *)(v81 + 22) = *(_BYTE *)(this + 102);
        *(_BYTE *)(v81 + 23) = *(_BYTE *)(this + 103);
      }
      else if (v82 != 32)
      {
        if (v82 == 10)
        {
          v83 = 0.0;
          if (v52 + ~v53)
          {
            v84 = v55;
            v85 = v54;
            do
            {
              v88 = *(unsigned __int8 *)v84++;
              v87 = v88;
              if (v88 > 0x21 || v87 == 32)
              {
                v83 = *(float *)(this + 24) + v83;
              }
              else if (v87 == 9)
              {
                v83 = v83 + (float)(*(float *)(this + 24) * 4.0);
              }
              else if (v87 == 10)
              {
                break;
              }
            }
            while (!__CFADD__(v85++, 1));
          }
          v5 = *(float *)(this + 28) + v5;
          v89 = *(_DWORD *)(this + 40);
          switch(v89)
          {
            case 2:
              v6 = *(float *)(this + 8) - v83;
              break;
            case 1:
              v6 = *(float *)(this + 8) + (float)(v83 * -0.5);
              break;
            case 0:
              v6 = *(float *)(this + 8);
              break;
          }
        }
        else if (v82 == 9)
        {
          v6 = v6 + (float)(*(float *)(this + 24) * 4.0);
        }
        goto LABEL_48;
      }
      v6 = *(float *)(this + 24) + v6;
LABEL_48:
      ++v53;
      ++v54;
      ++v55;
    }
    while (v53 != v52);
  }
  *(float *)(this + 8) = v6;
  *(float *)(this + 12) = v5;
  return this;
}

float ggl::DebugConsole::drawBar(ggl::DebugConsole *this, float result)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *((_QWORD *)this + 10);
  if ((unint64_t)(v2 + 6) <= *((_QWORD *)this + 6))
  {
    v3 = *((float *)this + 5);
    v4 = 0.92773;
    if (*((_BYTE *)this + 108))
      v5 = 0.92773;
    else
      v5 = 0.9375;
    if (*((_BYTE *)this + 108))
      v4 = 0.9375;
    v6 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 10) = v2 + 1;
    v7 = *(_QWORD *)(v6 + 40) + 24 * v2;
    *(_DWORD *)v7 = *((_DWORD *)this + 2);
    *(_DWORD *)(v7 + 4) = *((_DWORD *)this + 3);
    *(_DWORD *)(v7 + 8) = 0;
    *(float *)(v7 + 12) = v4;
    *(_BYTE *)(v7 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v7 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v7 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v7 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v7 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v7 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v7 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v7 + 23) = *((_BYTE *)this + 103);
    v8 = *((_DWORD *)this + 2);
    v9 = *((float *)this + 3) + v3;
    v10 = *((_QWORD *)this + 9);
    v11 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v11 + 1;
    v12 = *(_QWORD *)(v10 + 40) + 24 * v11;
    *(_DWORD *)v12 = v8;
    *(float *)(v12 + 4) = v9;
    *(_DWORD *)(v12 + 8) = 0;
    *(float *)(v12 + 12) = v5;
    *(_BYTE *)(v12 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v12 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v12 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v12 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v12 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v12 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v12 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v12 + 23) = *((_BYTE *)this + 103);
    v13 = *((_DWORD *)this + 3);
    v14 = *((float *)this + 2) + result;
    v15 = *((_QWORD *)this + 9);
    v16 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v16 + 1;
    v17 = *(_QWORD *)(v15 + 40) + 24 * v16;
    *(float *)v17 = v14;
    *(_DWORD *)(v17 + 4) = v13;
    *(_DWORD *)(v17 + 8) = 1065353216;
    *(float *)(v17 + 12) = v4;
    *(_BYTE *)(v17 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v17 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v17 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v17 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v17 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v17 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v17 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v17 + 23) = *((_BYTE *)this + 103);
    v18 = *((_DWORD *)this + 3);
    v19 = *((float *)this + 2) + result;
    v20 = *((_QWORD *)this + 9);
    v21 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v21 + 1;
    v22 = *(_QWORD *)(v20 + 40) + 24 * v21;
    *(float *)v22 = v19;
    *(_DWORD *)(v22 + 4) = v18;
    *(_DWORD *)(v22 + 8) = 1065353216;
    *(float *)(v22 + 12) = v4;
    *(_BYTE *)(v22 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v22 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v22 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v22 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v22 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v22 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v22 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v22 + 23) = *((_BYTE *)this + 103);
    v23 = *((_DWORD *)this + 2);
    v24 = *((float *)this + 3) + v3;
    v25 = *((_QWORD *)this + 9);
    v26 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v26 + 1;
    v27 = *(_QWORD *)(v25 + 40) + 24 * v26;
    *(_DWORD *)v27 = v23;
    *(float *)(v27 + 4) = v24;
    *(_DWORD *)(v27 + 8) = 0;
    *(float *)(v27 + 12) = v5;
    *(_BYTE *)(v27 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v27 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v27 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v27 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v27 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v27 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v27 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v27 + 23) = *((_BYTE *)this + 103);
    v28 = *((float *)this + 2) + result;
    v29 = *((float *)this + 3) + v3;
    v30 = *((_QWORD *)this + 9);
    v31 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v31 + 1;
    v32 = *(_QWORD *)(v30 + 40) + 24 * v31;
    *(float *)v32 = v28;
    *(float *)(v32 + 4) = v29;
    *(_DWORD *)(v32 + 8) = 1065353216;
    *(float *)(v32 + 12) = v5;
    *(_BYTE *)(v32 + 16) = *((_BYTE *)this + 96);
    *(_BYTE *)(v32 + 17) = *((_BYTE *)this + 97);
    *(_BYTE *)(v32 + 18) = *((_BYTE *)this + 98);
    *(_BYTE *)(v32 + 19) = *((_BYTE *)this + 99);
    *(_BYTE *)(v32 + 20) = *((_BYTE *)this + 100);
    *(_BYTE *)(v32 + 21) = *((_BYTE *)this + 101);
    *(_BYTE *)(v32 + 22) = *((_BYTE *)this + 102);
    *(_BYTE *)(v32 + 23) = *((_BYTE *)this + 103);
    result = *((float *)this + 2) + result;
    *((float *)this + 2) = result;
  }
  return result;
}

float32x2_t *ggl::DebugConsole::drawSymbol(float32x2_t *result, char a2)
{
  float32x2_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float32x2_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t v14;
  unint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  uint64_t v27;

  v2 = result[10];
  if ((unint64_t)(*(_QWORD *)&v2 + 6) <= *(_QWORD *)&result[6])
  {
    v3 = (float)((a2 - 127) - 33);
    v4 = v3 * 0.0097656;
    v5 = (float)(v3 * 0.0097656) + 0.0097656;
    if (result[13].i8[4])
      v6 = v3 * 0.0097656;
    else
      v6 = (float)(v3 * 0.0097656) + 0.0097656;
    if (result[13].i8[4])
      v4 = v5;
    v7 = result[9];
    result[10] = (float32x2_t)(*(_QWORD *)&v2 + 1);
    v8 = *(_QWORD *)(*(_QWORD *)&v7 + 40) + 24 * *(_QWORD *)&v2;
    v9 = result[4];
    v10 = vmla_f32(result[1], (float32x2_t)0xBF000000BF000000, v9);
    *(float32x2_t *)v8 = v10;
    *(_DWORD *)(v8 + 8) = 0;
    *(float *)(v8 + 12) = v4;
    *(_BYTE *)(v8 + 16) = result[12].i8[0];
    *(_BYTE *)(v8 + 17) = result[12].i8[1];
    *(_BYTE *)(v8 + 18) = result[12].i8[2];
    *(_BYTE *)(v8 + 19) = result[12].i8[3];
    *(_BYTE *)(v8 + 20) = result[12].i8[4];
    *(_BYTE *)(v8 + 21) = result[12].i8[5];
    *(_BYTE *)(v8 + 22) = result[12].i8[6];
    *(_BYTE *)(v8 + 23) = result[12].i8[7];
    v11 = result[9];
    v12 = result[10];
    result[10] = (float32x2_t)(*(_QWORD *)&v12 + 1);
    v13 = *(_QWORD *)(*(_QWORD *)&v11 + 40) + 24 * *(_QWORD *)&v12;
    v14 = vadd_f32(v10, v9);
    v15 = __PAIR64__(v10.u32[1], v14.u32[0]);
    v10.i32[1] = v14.i32[1];
    *(float32x2_t *)v13 = v10;
    *(_DWORD *)(v13 + 8) = 0;
    *(float *)(v13 + 12) = v6;
    *(_BYTE *)(v13 + 16) = result[12].i8[0];
    *(_BYTE *)(v13 + 17) = result[12].i8[1];
    *(_BYTE *)(v13 + 18) = result[12].i8[2];
    *(_BYTE *)(v13 + 19) = result[12].i8[3];
    *(_BYTE *)(v13 + 20) = result[12].i8[4];
    *(_BYTE *)(v13 + 21) = result[12].i8[5];
    *(_BYTE *)(v13 + 22) = result[12].i8[6];
    *(_BYTE *)(v13 + 23) = result[12].i8[7];
    v16 = result[9];
    v17 = result[10];
    result[10] = (float32x2_t)(*(_QWORD *)&v17 + 1);
    v18 = *(_QWORD *)(*(_QWORD *)&v16 + 40) + 24 * *(_QWORD *)&v17;
    *(_QWORD *)v18 = v15;
    *(_DWORD *)(v18 + 8) = 1065353216;
    *(float *)(v18 + 12) = v4;
    *(_BYTE *)(v18 + 16) = result[12].i8[0];
    *(_BYTE *)(v18 + 17) = result[12].i8[1];
    *(_BYTE *)(v18 + 18) = result[12].i8[2];
    *(_BYTE *)(v18 + 19) = result[12].i8[3];
    *(_BYTE *)(v18 + 20) = result[12].i8[4];
    *(_BYTE *)(v18 + 21) = result[12].i8[5];
    *(_BYTE *)(v18 + 22) = result[12].i8[6];
    *(_BYTE *)(v18 + 23) = result[12].i8[7];
    v19 = result[9];
    v20 = result[10];
    result[10] = (float32x2_t)(*(_QWORD *)&v20 + 1);
    v21 = *(_QWORD *)(*(_QWORD *)&v19 + 40) + 24 * *(_QWORD *)&v20;
    *(_QWORD *)v21 = v15;
    *(_DWORD *)(v21 + 8) = 1065353216;
    *(float *)(v21 + 12) = v4;
    *(_BYTE *)(v21 + 16) = result[12].i8[0];
    *(_BYTE *)(v21 + 17) = result[12].i8[1];
    *(_BYTE *)(v21 + 18) = result[12].i8[2];
    *(_BYTE *)(v21 + 19) = result[12].i8[3];
    *(_BYTE *)(v21 + 20) = result[12].i8[4];
    *(_BYTE *)(v21 + 21) = result[12].i8[5];
    *(_BYTE *)(v21 + 22) = result[12].i8[6];
    *(_BYTE *)(v21 + 23) = result[12].i8[7];
    v22 = result[9];
    v23 = result[10];
    result[10] = (float32x2_t)(*(_QWORD *)&v23 + 1);
    v24 = *(_QWORD *)(*(_QWORD *)&v22 + 40) + 24 * *(_QWORD *)&v23;
    *(float32x2_t *)v24 = v10;
    *(_DWORD *)(v24 + 8) = 0;
    *(float *)(v24 + 12) = v6;
    *(_BYTE *)(v24 + 16) = result[12].i8[0];
    *(_BYTE *)(v24 + 17) = result[12].i8[1];
    *(_BYTE *)(v24 + 18) = result[12].i8[2];
    *(_BYTE *)(v24 + 19) = result[12].i8[3];
    *(_BYTE *)(v24 + 20) = result[12].i8[4];
    *(_BYTE *)(v24 + 21) = result[12].i8[5];
    *(_BYTE *)(v24 + 22) = result[12].i8[6];
    *(_BYTE *)(v24 + 23) = result[12].i8[7];
    v25 = result[9];
    v26 = result[10];
    result[10] = (float32x2_t)(*(_QWORD *)&v26 + 1);
    v27 = *(_QWORD *)(*(_QWORD *)&v25 + 40) + 24 * *(_QWORD *)&v26;
    *(float32x2_t *)v27 = v14;
    *(_DWORD *)(v27 + 8) = 1065353216;
    *(float *)(v27 + 12) = v6;
    *(_BYTE *)(v27 + 16) = result[12].i8[0];
    *(_BYTE *)(v27 + 17) = result[12].i8[1];
    *(_BYTE *)(v27 + 18) = result[12].i8[2];
    *(_BYTE *)(v27 + 19) = result[12].i8[3];
    *(_BYTE *)(v27 + 20) = result[12].i8[4];
    *(_BYTE *)(v27 + 21) = result[12].i8[5];
    *(_BYTE *)(v27 + 22) = result[12].i8[6];
    *(_BYTE *)(v27 + 23) = result[12].i8[7];
  }
  return result;
}

float ggl::DebugConsole::drawLine(uint64_t a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float result;

  v2 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(v2 + 6) <= *(_QWORD *)(a1 + 48))
  {
    v3 = *(float *)(a1 + 8);
    v4 = *(float *)(a1 + 12);
    v5 = a2[1] - v4;
    v6 = v3 - *a2;
    v7 = *(float *)(a1 + 104) / sqrtf((float)(v6 * v6) + (float)(v5 * v5));
    v8 = v7 * v5;
    v9 = v7 * v6;
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 80) = v2 + 1;
    v11 = *(_QWORD *)(v10 + 40) + 24 * v2;
    *(float *)v11 = v3 - v8;
    *(float *)(v11 + 4) = v4 - (float)(v7 * v6);
    *(_QWORD *)(v11 + 8) = 0x3F6D800000000000;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v11 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v11 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v11 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v11 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v11 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v11 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v11 + 23) = *(_BYTE *)(a1 + 103);
    v12 = *a2 + v8;
    v13 = a2[1] + (float)(v7 * v6);
    v14 = *(_QWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v15 + 1;
    v16 = *(_QWORD *)(v14 + 40) + 24 * v15;
    *(float *)v16 = v12;
    *(float *)(v16 + 4) = v13;
    *(_QWORD *)(v16 + 8) = 0x3F7000003F800000;
    *(_BYTE *)(v16 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v16 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v16 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v16 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v16 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v16 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v16 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v16 + 23) = *(_BYTE *)(a1 + 103);
    v17 = *(float *)(a1 + 8) + v8;
    v18 = *(float *)(a1 + 12) + v9;
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v20 + 1;
    v21 = *(_QWORD *)(v19 + 40) + 24 * v20;
    *(float *)v21 = v17;
    *(float *)(v21 + 4) = v18;
    *(_QWORD *)(v21 + 8) = 0x3F70000000000000;
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v21 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v21 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v21 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v21 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v21 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v21 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v21 + 23) = *(_BYTE *)(a1 + 103);
    v22 = *(float *)(a1 + 8) - v8;
    v23 = *(float *)(a1 + 12) - v9;
    v24 = *(_QWORD *)(a1 + 72);
    v25 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v25 + 1;
    v26 = *(_QWORD *)(v24 + 40) + 24 * v25;
    *(float *)v26 = v22;
    *(float *)(v26 + 4) = v23;
    *(_QWORD *)(v26 + 8) = 0x3F6D800000000000;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v26 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v26 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v26 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v26 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v26 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v26 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v26 + 23) = *(_BYTE *)(a1 + 103);
    v27 = *a2 - v8;
    v28 = a2[1] - v9;
    v29 = *(_QWORD *)(a1 + 72);
    v30 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v30 + 1;
    v31 = *(_QWORD *)(v29 + 40) + 24 * v30;
    *(float *)v31 = v27;
    *(float *)(v31 + 4) = v28;
    *(_QWORD *)(v31 + 8) = 0x3F6D80003F800000;
    *(_BYTE *)(v31 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v31 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v31 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v31 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v31 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v31 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v31 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v31 + 23) = *(_BYTE *)(a1 + 103);
    v32 = *a2 + v8;
    v33 = a2[1] + v9;
    v34 = *(_QWORD *)(a1 + 72);
    v35 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v35 + 1;
    v36 = *(_QWORD *)(v34 + 40) + 24 * v35;
    *(float *)v36 = v32;
    *(float *)(v36 + 4) = v33;
    *(_QWORD *)(v36 + 8) = 0x3F7000003F800000;
    *(_BYTE *)(v36 + 16) = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(v36 + 17) = *(_BYTE *)(a1 + 97);
    *(_BYTE *)(v36 + 18) = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(v36 + 19) = *(_BYTE *)(a1 + 99);
    *(_BYTE *)(v36 + 20) = *(_BYTE *)(a1 + 100);
    *(_BYTE *)(v36 + 21) = *(_BYTE *)(a1 + 101);
    *(_BYTE *)(v36 + 22) = *(_BYTE *)(a1 + 102);
    *(_BYTE *)(v36 + 23) = *(_BYTE *)(a1 + 103);
    *(float *)(a1 + 8) = *a2;
    result = a2[1];
    *(float *)(a1 + 12) = result;
  }
  return result;
}

float ggl::DebugConsole::drawRectangle(uint64_t a1, float *a2)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 8);
  v4 = v9;
  *(float *)(a1 + 8) = *a2;
  *(float *)(a1 + 12) = a2[1];
  v5 = *((_DWORD *)a2 + 1);
  v7 = v4;
  v8 = v5;
  ggl::DebugConsole::drawLine(a1, (float *)&v7);
  ggl::DebugConsole::drawLine(a1, (float *)&v9);
  v7 = *(_DWORD *)a2;
  v8 = HIDWORD(v4);
  ggl::DebugConsole::drawLine(a1, (float *)&v7);
  return ggl::DebugConsole::drawLine(a1, a2);
}

float32_t ggl::DebugConsole::drawRectangleWithFill(float32x2_t *a1, float32x2_t *a2, float32_t result)
{
  float32x2_t v3;
  float v4;
  float v5;
  float32x2_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  __int32 v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  uint64_t v14;
  __int32 v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  __int32 v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  __int32 v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;

  v3 = a1[10];
  if ((unint64_t)(*(_QWORD *)&v3 + 6) <= *(_QWORD *)&a1[6])
  {
    v4 = 0.99609;
    if (a1[13].i8[4])
      v5 = 0.98633;
    else
      v5 = 0.99609;
    if (!a1[13].i8[4])
      v4 = 0.98633;
    v6 = a1[9];
    a1[10] = (float32x2_t)(*(_QWORD *)&v3 + 1);
    v7 = *(_QWORD *)(*(_QWORD *)&v6 + 40) + 24 * *(_QWORD *)&v3;
    v8 = a1[1];
    v9 = vsub_f32(*a2, v8);
    *(_DWORD *)v7 = v8.i32[0];
    *(_DWORD *)(v7 + 4) = a1[1].i32[1];
    *(_DWORD *)(v7 + 8) = 0;
    *(float *)(v7 + 12) = v4;
    *(_BYTE *)(v7 + 16) = a1[12].i8[0];
    *(_BYTE *)(v7 + 17) = a1[12].i8[1];
    *(_BYTE *)(v7 + 18) = a1[12].i8[2];
    *(_BYTE *)(v7 + 19) = a1[12].i8[3];
    *(_BYTE *)(v7 + 20) = a1[12].i8[4];
    *(_BYTE *)(v7 + 21) = a1[12].i8[5];
    *(_BYTE *)(v7 + 22) = a1[12].i8[6];
    *(_BYTE *)(v7 + 23) = a1[12].i8[7];
    v10 = a1[1].i32[0];
    v11 = a1[1].f32[1] + v9.f32[1];
    v12 = a1[9];
    v13 = a1[10];
    a1[10] = (float32x2_t)(*(_QWORD *)&v13 + 1);
    v14 = *(_QWORD *)(*(_QWORD *)&v12 + 40) + 24 * *(_QWORD *)&v13;
    *(_DWORD *)v14 = v10;
    *(float *)(v14 + 4) = v11;
    *(_DWORD *)(v14 + 8) = 0;
    *(float *)(v14 + 12) = v5;
    *(_BYTE *)(v14 + 16) = a1[12].i8[0];
    *(_BYTE *)(v14 + 17) = a1[12].i8[1];
    *(_BYTE *)(v14 + 18) = a1[12].i8[2];
    *(_BYTE *)(v14 + 19) = a1[12].i8[3];
    *(_BYTE *)(v14 + 20) = a1[12].i8[4];
    *(_BYTE *)(v14 + 21) = a1[12].i8[5];
    *(_BYTE *)(v14 + 22) = a1[12].i8[6];
    *(_BYTE *)(v14 + 23) = a1[12].i8[7];
    v15 = a1[1].i32[1];
    v16 = a1[1].f32[0] + v9.f32[0];
    v17 = a1[9];
    v18 = a1[10];
    a1[10] = (float32x2_t)(*(_QWORD *)&v18 + 1);
    v19 = *(_QWORD *)(*(_QWORD *)&v17 + 40) + 24 * *(_QWORD *)&v18;
    *(float *)v19 = v16;
    *(_DWORD *)(v19 + 4) = v15;
    *(_DWORD *)(v19 + 8) = 1065353216;
    *(float *)(v19 + 12) = v4;
    *(_BYTE *)(v19 + 16) = a1[12].i8[0];
    *(_BYTE *)(v19 + 17) = a1[12].i8[1];
    *(_BYTE *)(v19 + 18) = a1[12].i8[2];
    *(_BYTE *)(v19 + 19) = a1[12].i8[3];
    *(_BYTE *)(v19 + 20) = a1[12].i8[4];
    *(_BYTE *)(v19 + 21) = a1[12].i8[5];
    *(_BYTE *)(v19 + 22) = a1[12].i8[6];
    *(_BYTE *)(v19 + 23) = a1[12].i8[7];
    v20 = a1[1].i32[1];
    v21 = a1[1].f32[0] + v9.f32[0];
    v22 = a1[9];
    v23 = a1[10];
    a1[10] = (float32x2_t)(*(_QWORD *)&v23 + 1);
    v24 = *(_QWORD *)(*(_QWORD *)&v22 + 40) + 24 * *(_QWORD *)&v23;
    *(float *)v24 = v21;
    *(_DWORD *)(v24 + 4) = v20;
    *(_DWORD *)(v24 + 8) = 1065353216;
    *(float *)(v24 + 12) = v4;
    *(_BYTE *)(v24 + 16) = a1[12].i8[0];
    *(_BYTE *)(v24 + 17) = a1[12].i8[1];
    *(_BYTE *)(v24 + 18) = a1[12].i8[2];
    *(_BYTE *)(v24 + 19) = a1[12].i8[3];
    *(_BYTE *)(v24 + 20) = a1[12].i8[4];
    *(_BYTE *)(v24 + 21) = a1[12].i8[5];
    *(_BYTE *)(v24 + 22) = a1[12].i8[6];
    *(_BYTE *)(v24 + 23) = a1[12].i8[7];
    v25 = a1[1].i32[0];
    v8.f32[0] = a1[1].f32[1] + v9.f32[1];
    v26 = a1[9];
    v27 = a1[10];
    a1[10] = (float32x2_t)(*(_QWORD *)&v27 + 1);
    v28 = *(_QWORD *)(*(_QWORD *)&v26 + 40) + 24 * *(_QWORD *)&v27;
    *(_DWORD *)v28 = v25;
    *(float *)(v28 + 4) = v8.f32[0];
    *(_DWORD *)(v28 + 8) = 0;
    *(float *)(v28 + 12) = v5;
    *(_BYTE *)(v28 + 16) = a1[12].i8[0];
    *(_BYTE *)(v28 + 17) = a1[12].i8[1];
    *(_BYTE *)(v28 + 18) = a1[12].i8[2];
    *(_BYTE *)(v28 + 19) = a1[12].i8[3];
    *(_BYTE *)(v28 + 20) = a1[12].i8[4];
    *(_BYTE *)(v28 + 21) = a1[12].i8[5];
    *(_BYTE *)(v28 + 22) = a1[12].i8[6];
    *(_BYTE *)(v28 + 23) = a1[12].i8[7];
    v29 = vadd_f32(a1[1], v9);
    v30 = a1[9];
    v31 = a1[10];
    a1[10] = (float32x2_t)(*(_QWORD *)&v31 + 1);
    v32 = *(_QWORD *)(*(_QWORD *)&v30 + 40) + 24 * *(_QWORD *)&v31;
    *(float32x2_t *)v32 = v29;
    *(_DWORD *)(v32 + 8) = 1065353216;
    *(float *)(v32 + 12) = v5;
    *(_BYTE *)(v32 + 16) = a1[12].i8[0];
    *(_BYTE *)(v32 + 17) = a1[12].i8[1];
    *(_BYTE *)(v32 + 18) = a1[12].i8[2];
    *(_BYTE *)(v32 + 19) = a1[12].i8[3];
    *(_BYTE *)(v32 + 20) = a1[12].i8[4];
    *(_BYTE *)(v32 + 21) = a1[12].i8[5];
    *(_BYTE *)(v32 + 22) = a1[12].i8[6];
    *(_BYTE *)(v32 + 23) = a1[12].i8[7];
    a1[1].i32[0] = a2->i32[0];
    result = a2->f32[1];
    a1[1].f32[1] = result;
  }
  return result;
}

void ggl::DebugConsole::drawCircle(ggl::DebugConsole *this, float a2)
{
  float32x2_t v3;
  float32x2_t *v4;
  float32x2_t v6;

  v3 = *(float32x2_t *)((char *)this + 8);
  v4 = (float32x2_t *)*((_QWORD *)this + 11);
  *((float32x2_t *)this + 1) = vmla_n_f32(v3, *v4, a2);
  v6 = vmla_n_f32(v3, v4[1], a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 16), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 24), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 32), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 40), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 48), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 56), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 64), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 72), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 80), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 88), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 96), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 104), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 112), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 120), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 128), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 136), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 144), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 152), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 160), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 168), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 176), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 184), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 192), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 200), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 208), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 216), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 224), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 232), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 240), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, *(float32x2_t *)(*((_QWORD *)this + 11) + 248), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  v6 = vmla_n_f32(v3, **((float32x2_t **)this + 11), a2);
  ggl::DebugConsole::drawLine((uint64_t)this, (float *)&v6);
  *((float32x2_t *)this + 1) = v3;
}

uint64_t ggl::DebugConsole::drawCircleWithFill(uint64_t this, double a2)
{
  float32x2_t v2;
  float32x2_t v3;
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((unint64_t)(*(_QWORD *)(this + 80) + 96) <= *(_QWORD *)(this + 48))
  {
    v2 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
    v3 = vmla_n_f32(*(float32x2_t *)(this + 8), **(float32x2_t **)(this + 88), *(float *)&a2);
    v4 = 8;
    v5 = v3;
    do
    {
      v6 = v5;
      v7 = *(_QWORD *)(this + 80);
      v8 = *(float32x2_t *)(*(_QWORD *)(this + 88) + v4);
      v9 = *(float32x2_t *)(this + 8);
      v10 = *(_QWORD *)(*(_QWORD *)(this + 72) + 40) + 24 * v7;
      *(_DWORD *)v10 = v9.i32[0];
      v5 = vmla_f32(v9, v2, v8);
      *(_QWORD *)(this + 80) = v7 + 1;
      *(_DWORD *)(v10 + 4) = *(_DWORD *)(this + 12);
      *(_QWORD *)(v10 + 8) = 0x3F7C800000000000;
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(this + 96);
      *(_BYTE *)(v10 + 17) = *(_BYTE *)(this + 97);
      *(_BYTE *)(v10 + 18) = *(_BYTE *)(this + 98);
      *(_BYTE *)(v10 + 19) = *(_BYTE *)(this + 99);
      *(_BYTE *)(v10 + 20) = *(_BYTE *)(this + 100);
      *(_BYTE *)(v10 + 21) = *(_BYTE *)(this + 101);
      *(_BYTE *)(v10 + 22) = *(_BYTE *)(this + 102);
      *(_BYTE *)(v10 + 23) = *(_BYTE *)(this + 103);
      v11 = *(_QWORD *)(this + 72);
      v12 = *(_QWORD *)(this + 80);
      *(_QWORD *)(this + 80) = v12 + 1;
      v13 = *(_QWORD *)(v11 + 40) + 24 * v12;
      *(float32x2_t *)v13 = v6;
      *(_QWORD *)(v13 + 8) = 0x3F7C80003F800000;
      *(_BYTE *)(v13 + 16) = *(_BYTE *)(this + 96);
      *(_BYTE *)(v13 + 17) = *(_BYTE *)(this + 97);
      *(_BYTE *)(v13 + 18) = *(_BYTE *)(this + 98);
      *(_BYTE *)(v13 + 19) = *(_BYTE *)(this + 99);
      *(_BYTE *)(v13 + 20) = *(_BYTE *)(this + 100);
      *(_BYTE *)(v13 + 21) = *(_BYTE *)(this + 101);
      *(_BYTE *)(v13 + 22) = *(_BYTE *)(this + 102);
      *(_BYTE *)(v13 + 23) = *(_BYTE *)(this + 103);
      v14 = *(_QWORD *)(this + 72);
      v15 = *(_QWORD *)(this + 80);
      *(_QWORD *)(this + 80) = v15 + 1;
      v16 = *(_QWORD *)(v14 + 40) + 24 * v15;
      *(float32x2_t *)v16 = v5;
      *(_QWORD *)(v16 + 8) = 0x3F7F00003F800000;
      *(_BYTE *)(v16 + 16) = *(_BYTE *)(this + 96);
      *(_BYTE *)(v16 + 17) = *(_BYTE *)(this + 97);
      *(_BYTE *)(v16 + 18) = *(_BYTE *)(this + 98);
      *(_BYTE *)(v16 + 19) = *(_BYTE *)(this + 99);
      *(_BYTE *)(v16 + 20) = *(_BYTE *)(this + 100);
      *(_BYTE *)(v16 + 21) = *(_BYTE *)(this + 101);
      *(_BYTE *)(v16 + 22) = *(_BYTE *)(this + 102);
      *(_BYTE *)(v16 + 23) = *(_BYTE *)(this + 103);
      v4 += 8;
    }
    while (v4 != 256);
    v17 = *(_QWORD *)(this + 72);
    v18 = *(_QWORD *)(this + 80);
    *(_QWORD *)(this + 80) = v18 + 1;
    v19 = *(_QWORD *)(v17 + 40) + 24 * v18;
    *(_DWORD *)v19 = *(_DWORD *)(this + 8);
    *(_DWORD *)(v19 + 4) = *(_DWORD *)(this + 12);
    *(_QWORD *)(v19 + 8) = 0x3F7C800000000000;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(this + 96);
    *(_BYTE *)(v19 + 17) = *(_BYTE *)(this + 97);
    *(_BYTE *)(v19 + 18) = *(_BYTE *)(this + 98);
    *(_BYTE *)(v19 + 19) = *(_BYTE *)(this + 99);
    *(_BYTE *)(v19 + 20) = *(_BYTE *)(this + 100);
    *(_BYTE *)(v19 + 21) = *(_BYTE *)(this + 101);
    *(_BYTE *)(v19 + 22) = *(_BYTE *)(this + 102);
    *(_BYTE *)(v19 + 23) = *(_BYTE *)(this + 103);
    v20 = *(_QWORD *)(this + 72);
    v21 = *(_QWORD *)(this + 80);
    *(_QWORD *)(this + 80) = v21 + 1;
    v22 = *(_QWORD *)(v20 + 40) + 24 * v21;
    *(float32x2_t *)v22 = v5;
    *(_QWORD *)(v22 + 8) = 0x3F7C80003F800000;
    *(_BYTE *)(v22 + 16) = *(_BYTE *)(this + 96);
    *(_BYTE *)(v22 + 17) = *(_BYTE *)(this + 97);
    *(_BYTE *)(v22 + 18) = *(_BYTE *)(this + 98);
    *(_BYTE *)(v22 + 19) = *(_BYTE *)(this + 99);
    *(_BYTE *)(v22 + 20) = *(_BYTE *)(this + 100);
    *(_BYTE *)(v22 + 21) = *(_BYTE *)(this + 101);
    *(_BYTE *)(v22 + 22) = *(_BYTE *)(this + 102);
    *(_BYTE *)(v22 + 23) = *(_BYTE *)(this + 103);
    v23 = *(_QWORD *)(this + 72);
    v24 = *(_QWORD *)(this + 80);
    *(_QWORD *)(this + 80) = v24 + 1;
    v25 = *(_QWORD *)(v23 + 40) + 24 * v24;
    *(float32x2_t *)v25 = v3;
    *(_QWORD *)(v25 + 8) = 0x3F7F00003F800000;
    *(_BYTE *)(v25 + 16) = *(_BYTE *)(this + 96);
    *(_BYTE *)(v25 + 17) = *(_BYTE *)(this + 97);
    *(_BYTE *)(v25 + 18) = *(_BYTE *)(this + 98);
    *(_BYTE *)(v25 + 19) = *(_BYTE *)(this + 99);
    *(_BYTE *)(v25 + 20) = *(_BYTE *)(this + 100);
    *(_BYTE *)(v25 + 21) = *(_BYTE *)(this + 101);
    *(_BYTE *)(v25 + 22) = *(_BYTE *)(this + 102);
    *(_BYTE *)(v25 + 23) = *(_BYTE *)(this + 103);
  }
  return this;
}

void ggl::MetalDeviceContext::~MetalDeviceContext(ggl::MetalDeviceContext *this)
{
  ggl::MetalDeviceContext::~MetalDeviceContext(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  ggl::ClearCache *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  ggl::MetalDeviceContextPass *v20;
  id *v21;
  _QWORD *v22;
  ggl::MetalBindingManager *v23;

  *(_QWORD *)this = &off_1E42BA7E0;
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 8));
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (ggl::ClearCache *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    ggl::ClearCache::~ClearCache(v6);
    MEMORY[0x1A1AF4E00]();
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v7)
    goto LABEL_14;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v10)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v10)
      goto LABEL_20;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_20:
  v13 = *((_QWORD *)this + 14);
  if (v13)
  {
    v14 = *((_QWORD *)this + 15);
    v15 = (void *)*((_QWORD *)this + 14);
    if (v14 != v13)
    {
      v16 = *((_QWORD *)this + 15);
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v13;
    operator delete(v15);
  }
  v19 = (void *)*((_QWORD *)this + 11);
  if (v19)
  {
    *((_QWORD *)this + 12) = v19;
    operator delete(v19);
  }

  v20 = (ggl::MetalDeviceContextPass *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v20)
  {
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v20);
    MEMORY[0x1A1AF4E00]();
  }
  v21 = (id *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
  {
    ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v21);
    MEMORY[0x1A1AF4E00]();
  }
  v22 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v22);

  v23 = (ggl::MetalBindingManager *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v23)
  {
    ggl::MetalBindingManager::~MetalBindingManager(v23);
    MEMORY[0x1A1AF4E00]();
  }
}

ggl::MetalDeviceContextPass *ggl::MetalDeviceContext::endPass(ggl::MetalDeviceContext *this)
{
  ggl::MetalDeviceContextPass *result;

  result = (ggl::MetalDeviceContextPass *)*((_QWORD *)this + 6);
  if (result)
  {
    *((_QWORD *)this + 6) = 0;
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void ggl::MetalDeviceContext::optimizeForCPUAccess(ggl::MetalDeviceContext *this, const ggl::Texture *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id *v6;
  id v7;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 3);
    ggl::MetalDeviceContextFrame::blitCommandEncoder(v3, 0, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v5;
    if (*(_BYTE *)(v4 + 120) == 1)
    {
      v6 = (id *)(*(_QWORD *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 64));
    }
    else
    {
      if (*(_BYTE *)(v4 + 120))
      {
LABEL_8:
        objc_msgSend(v5, "optimizeContentsForCPUAccess:", v2);

        return;
      }
      v6 = *(id **)(v4 + 32);
    }
    v2 = *v6;
    v5 = v7;
    goto LABEL_8;
  }
}

void sub_19FF1CA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ggl::MetalDeviceContext::optimizeForGPUAccess(ggl::MetalDeviceContext *this, const ggl::Texture *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id *v6;
  id v7;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 3);
    ggl::MetalDeviceContextFrame::blitCommandEncoder(v3, 0, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v5;
    if (*(_BYTE *)(v4 + 120) == 1)
    {
      v6 = (id *)(*(_QWORD *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 64));
    }
    else
    {
      if (*(_BYTE *)(v4 + 120))
      {
LABEL_8:
        objc_msgSend(v5, "optimizeContentsForGPUAccess:", v2);

        return;
      }
      v6 = *(id **)(v4 + 32);
    }
    v2 = *v6;
    v5 = v7;
    goto LABEL_8;
  }
}

void sub_19FF1CAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ggl::MetalDeviceContext::doRenderWork(ggl::MetalDeviceContext *this, ggl::CommandBuffer *a2)
{
  uint64_t v2;
  ggl::MetalDeviceContext *v3;
  uint64_t v4;
  ggl::Device *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  char *v13;
  ggl::Device *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  const ggl::Texture *v19;
  ggl::MetalTextureResource *v20;
  id *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  int v30;
  int v31;
  _BOOL8 v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  ggl::MetalTextureResource *v48;
  id *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  void *v63;
  const ggl::Texture *v64;
  uint64_t v65;
  ggl::MetalTextureResource *v66;
  id v67;
  id *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  double v72;
  void *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  ggl::MetalTextureResource *v82;
  id *v83;
  id v84;
  ggl::MetalTextureResource *v85;
  id *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  const ggl::Texture *v92;
  uint64_t v93;
  void *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  ggl::MetalBindingManager *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  ggl::Device *v115;
  ggl::MetalResourceManager *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64x2_t v145;
  int64x2_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64x2_t v152;
  int64x2_t v153;
  uint64_t v154;
  _QWORD *v155;
  void *v156;
  uint64_t v157;
  _QWORD *v158;
  void *v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *p_shared_owners;
  unint64_t v174;
  std::__shared_weak_count *v175;
  int v176;
  char *v177;
  char *shared_owners;
  char *i;
  unint64_t v180;
  int v181;
  int v182;
  char v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  char *shared_weak_owners;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  _OWORD *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count_vtbl *v198;
  __int128 v199;
  __int128 v200;
  std::__shared_weak_count_vtbl *v201;
  uint64_t v202;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  uint64_t v234;
  _OWORD *v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count_vtbl *v237;
  __int128 v238;
  std::__shared_weak_count_vtbl *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *jj;
  unint64_t p_shared_weak_owners;
  unsigned __int8 v248;
  unint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  char *v266;
  std::__shared_weak_count_vtbl *v267;
  uint64_t v268;
  uint64_t v269;
  __int128 *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  _OWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t *v292;
  unint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  __int128 v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  ggl::Device *v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  BOOL v306;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _DWORD *v314;
  _DWORD *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  std::__shared_weak_count_vtbl *v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  double *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  std::__shared_weak_count_vtbl *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t *j;
  ggl::CommandBuffer *v348;
  uint64_t v349;
  id v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  unint64_t v354;
  void **v355;
  void **v356;
  char *v357;
  unsigned int *v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unsigned int *v362;
  unsigned int *v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  unint64_t v371;
  void **v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char v378;
  void **v379;
  uint64_t v380;
  char v381;
  void **v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  __int128 v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  char *m;
  uint64_t v395;
  uint64_t n;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  __int128 v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  __int128 v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  __int128 v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  ggl::CommandBuffer *v423;
  int64x2_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  uint64_t v429;
  unint64_t v430;
  void **v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  __int128 v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  void *v439;
  void *v440;
  void **k;
  _OWORD *v442;
  void *v443;
  uint64_t v444;
  _OWORD *v445;
  __int128 v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  void *v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  __int128 v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  void *v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  __int128 v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  void *v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  void **v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unsigned __int8 v478;
  unsigned __int8 v479;
  unsigned __int8 v480;
  std::__shared_weak_count **v481;
  char **v482;
  __int128 v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  int64x2_t v489;
  uint64_t v490;
  unsigned __int8 v491;
  uint64_t v492;
  int v493;
  char *v494;
  char *v495;
  std::__shared_weak_count **v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  _BYTE *v502;
  _DWORD *v503;
  unint64_t v504;
  uint64_t v505;
  _OWORD *v506;
  char *v507;
  uint64_t v508;
  __int128 v509;
  int v510;
  char *v511;
  unint64_t *v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  uint64_t ii;
  uint64_t v534;
  const ggl::Buffer *v535;
  _QWORD *v536;
  void *v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  unint64_t *v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  ggl::MetalResourceManager *v546;
  ggl::CommandBuffer *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  std::__shared_weak_count *v551;
  uint64_t v552;
  char *v553;
  std::__shared_weak_count_vtbl *v554;
  std::__shared_weak_count *v555;
  unint64_t v556;
  unint64_t v557;
  char *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  void *v564;
  char *v565;
  unint64_t v566;
  char *v567;
  unint64_t v568;
  char *v569;
  char *v570;
  unint64_t v571;
  char *v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  __int128 *v577;
  char *v578;
  uint64_t v579;
  __int128 v580;
  std::__shared_weak_count_vtbl *v581;
  void *v582;
  std::__shared_weak_count *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  unint64_t v588;
  char *v589;
  unint64_t v590;
  uint64_t v591;
  unint64_t v592;
  char *v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  char *v599;
  uint64_t v600;
  __int128 v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  __int128 *v607;
  char *v608;
  uint64_t v609;
  __int128 v610;
  std::__shared_weak_count_vtbl *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  size_t v616;
  char *v617;
  unint64_t v618;
  char *v619;
  unint64_t v620;
  unint64_t v621;
  char *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  __int128 *v627;
  char *v628;
  uint64_t v629;
  __int128 v630;
  std::__shared_weak_count_vtbl *v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  __int128 *v658;
  uint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  unint64_t v663;
  id v664;
  uint64_t v665;
  _QWORD *v666;
  uint64_t v667;
  uint64_t v668;
  id v669;
  const ggl::ShaderFunction *v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  uint64_t v674;
  void *v675;
  void *v676;
  id v677;
  void *v678;
  id v679;
  void *v680;
  unsigned __int8 v681;
  std::__shared_weak_count *v682;
  uint64_t v683;
  std::__shared_weak_count *v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  unint64_t *v688;
  unint64_t v689;
  _QWORD *v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  unsigned __int8 *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unint64_t *v699;
  unint64_t v700;
  void *v701;
  id v702;
  ggl::MetalResourceManager *v703;
  unint64_t v704;
  unint64_t v705;
  std::mutex **v706;
  std::mutex **v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unsigned __int8 *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  id v718;
  ggl::MetalResourceManager *v719;
  _QWORD *v720;
  uint64_t v721;
  std::mutex *v722;
  ggl::MetalResourceManager *v723;
  int64x2_t v724;
  int64x2_t v725;
  const ggl::Buffer *v726;
  std::mutex *v727;
  uint64_t v728;
  _QWORD *v729;
  void *v730;
  uint64_t v731;
  unint64_t *v732;
  unint64_t v733;
  unint64_t v734;
  void *v735;
  uint64_t v736;
  unsigned __int8 *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  id v741;
  ggl::MetalTextureResource *v742;
  unint64_t *v743;
  unint64_t v744;
  uint64_t SamplerStateResource;
  id *v746;
  unint64_t v747;
  unint64_t *v748;
  unint64_t v749;
  id v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t *v756;
  char *v757;
  uint64_t v758;
  __int128 v759;
  __int128 v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  unsigned __int8 v764;
  unsigned __int8 v765;
  unsigned __int8 v766;
  unint64_t v767;
  id v768;
  id v769;
  id v770;
  uint64_t v771;
  id v772;
  id v773;
  uint64_t v774;
  uint64_t v775;
  void **v776;
  char **v777;
  uint64_t v778;
  ggl::Device *v779;
  ggl::Device *v780;
  ggl::Device *v781;
  ggl::Device *v782;
  ggl::Device *v783;
  ggl::Device *v784;
  ggl::MetalDeviceContext *v785;
  _QWORD *v786;
  unsigned int v787;
  uint64_t v788;
  _QWORD *v789;
  void *v790;
  unint64_t v791;
  int v792;
  ggl::MetalResourceManager *v793;
  std::__shared_weak_count **v794;
  ggl::MetalResourceManager *v795;
  ggl::MetalResourceManager *v796;
  ggl::MetalResourceManager *v797;
  void *v799;
  float *v800;
  __int128 v801;
  int8x16_t v802;
  __int128 v803;
  __int128 v804;
  uint64_t v805;
  id v806;
  id v807;
  uint64_t v808;
  ggl::Device *v809;
  uint64_t v810[2];
  uint64_t v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  int64x2_t v815;
  __int128 v816;
  int64x2_t v817;
  _BYTE v818[24];
  _BYTE *v819;
  _BYTE v820[40];
  std::__shared_weak_count *v821;
  _QWORD v822[3];
  ggl::MetalResourceManager *v823;
  _OWORD __src[4];
  __int128 v825;
  __int128 v826;
  int64x2_t v827;
  __int128 v828;
  uint64_t v829;
  float64x2x2_t v830;

  v3 = this;
  v829 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  *(_BYTE *)(v4 + 50) = 1;
  v5 = (ggl::Device *)*((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)this + 6);
  v7 = *(id *)(v4 + 120);
  v8 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 40);
  v786 = (_QWORD *)((char *)v3 + 80);
  v768 = v7;
  v9 = *(void **)(v6 + 96);
  v785 = v3;
  if (v9)
  {
    v10 = v9;
    goto LABEL_107;
  }
  v11 = *(void **)(v6 + 104);
  if (v11)
  {
    objc_msgSend(v11, "updateFence:", *(_QWORD *)(v6 + 88));
    objc_msgSend(*(id *)(v6 + 104), "endEncoding");
    v12 = *(void **)(v6 + 104);
    *(_QWORD *)(v6 + 104) = 0;

  }
  v794 = *(std::__shared_weak_count ***)(*(_QWORD *)v6 + 80);
  objc_msgSend(MEMORY[0x1E0CC6B50], "renderPassDescriptor");
  v779 = (ggl::Device *)objc_claimAutoreleasedReturnValue();
  v782 = v5;
  if (*(_BYTE *)(v6 + 64))
    -[ggl::Device setImageblockSampleLength:](v779, "setImageblockSampleLength:", *(unsigned int *)(v6 + 68));
  v791 = v8;
  *(_QWORD *)v820 = *(_QWORD *)(v6 + 8);
  v13 = *(char **)v820;
  v800 = (float *)v5;
  v14 = v779;
  if (*(_QWORD *)(*(_QWORD *)v820 + 72))
  {
    v15 = 0;
    v16 = v6;
    v17 = (int *)(v6 + 20);
    v18 = 200;
    while (1)
    {
      v19 = *(const ggl::Texture **)&v13[v18 - 112];
      v20 = ggl::MetalResourceManager::prepareTexture(v794, v19, v791);
      if (*((_BYTE *)v20 + 120) == 1)
        break;
      if (!*((_BYTE *)v20 + 120))
      {
        v21 = (id *)*((_QWORD *)v20 + 4);
LABEL_13:
        v13 = (char *)*v21;
      }
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "objectAtIndexedSubscript:", v15);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setTexture:", v13);

      v24 = *(_QWORD *)(*(_QWORD *)v820 + v18 - 104);
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectAtIndexedSubscript:", v15);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setLevel:", v24);

      v27 = *(_QWORD *)(*(_QWORD *)v820 + v18 - 96);
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectAtIndexedSubscript:", v15);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "setSlice:", v27);

      if (v800 && *(unsigned __int8 *)v800 == 255)
      {
        v2 = 2;
      }
      else
      {
        if (*((_DWORD *)v19 + 14))
          v30 = 0;
        else
          v30 = *((_DWORD *)v19 + 19);
        v31 = *(v17 - 1);
        v32 = v30 == 0;
        if (v31)
          v32 = 0;
        v2 = v31 == 2 || v32;
      }
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "objectAtIndexedSubscript:", v15);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setLoadAction:", v2);

      v35 = *(_QWORD *)(*(_QWORD *)v820 + v18 - 16);
      if (v35)
      {
        v19 = *(const ggl::Texture **)(*(_QWORD *)v820 + v18 - 16);
        if (*(_DWORD *)(v35 + 56))
          goto LABEL_27;
      }
      else if (*((_DWORD *)v19 + 14))
      {
LABEL_27:
        v36 = 0;
        goto LABEL_30;
      }
      v36 = *((_DWORD *)v19 + 19);
LABEL_30:
      v37 = *v17;
      v38 = v35 == 0;
      if (v35)
        v39 = 2;
      else
        v39 = 1;
      if (v38)
        v40 = 1;
      else
        v40 = 2;
      if (v36)
        v41 = 0;
      else
        v41 = v40;
      if (v37)
        v41 = 0;
      if (v37 == 2)
        v41 = 1;
      if (v37 == 3)
        v42 = v39;
      else
        v42 = v41;
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "objectAtIndexedSubscript:", v15);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "setStoreAction:", v42);

      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v45 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "objectAtIndexedSubscript:", v15);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend(v46, "storeAction");

      if (v47 != 2)
        goto LABEL_53;
      v48 = ggl::MetalResourceManager::prepareTexture(v794, *(const ggl::Texture **)(*(_QWORD *)v820 + v18 - 16), v791);
      if (*((_BYTE *)v48 + 120) == 1)
      {
        v49 = (id *)(*((_QWORD *)v48 + 4) + 8 * *((unsigned int *)v48 + 16));
        goto LABEL_51;
      }
      if (!*((_BYTE *)v48 + 120))
      {
        v49 = (id *)*((_QWORD *)v48 + 4);
LABEL_51:
        v45 = *v49;
      }
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "objectAtIndexedSubscript:", v15);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "setResolveTexture:", v45);

      v52 = *(_QWORD *)(*(_QWORD *)v820 + v18 - 8);
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "objectAtIndexedSubscript:", v15);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "setResolveLevel:", v52);

      v55 = *(_QWORD *)(*(_QWORD *)v820 + v18);
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "objectAtIndexedSubscript:", v15);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "setResolveSlice:", v55);

LABEL_53:
      if (v800)
      {
        v58 = v800[1];
        v59 = v800[2];
        v60 = v800[3];
        v61 = v800[4];
      }
      else
      {
        v58 = 1.0;
        v59 = 1.0;
        v60 = 1.0;
        v61 = 1.0;
      }
      -[ggl::Device colorAttachments](v14, "colorAttachments");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "objectAtIndexedSubscript:", v15);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "setClearColor:", v58, v59, v60, v61);

      ++v15;
      v13 = *(char **)v820;
      v18 += 24;
      v17 += 2;
      if (v15 >= *(_QWORD *)(*(_QWORD *)v820 + 72))
        goto LABEL_59;
    }
    v21 = (id *)(*((_QWORD *)v20 + 4) + 8 * *((unsigned int *)v20 + 16));
    goto LABEL_13;
  }
  v16 = v6;
LABEL_59:
  v64 = (const ggl::Texture *)*((_QWORD *)v13 + 35);
  v3 = v785;
  v65 = v16;
  if (v64)
  {
    *(_QWORD *)&v816 = *((_QWORD *)v13 + 35);
    v66 = ggl::MetalResourceManager::prepareTexture(v794, v64, v791);
    if (*((_BYTE *)v66 + 120) == 1)
    {
      v68 = (id *)(*((_QWORD *)v66 + 4) + 8 * *((unsigned int *)v66 + 16));
    }
    else
    {
      if (*((_BYTE *)v66 + 120))
        goto LABEL_65;
      v68 = (id *)*((_QWORD *)v66 + 4);
    }
    v67 = *v68;
LABEL_65:
    *(_QWORD *)&v814 = v67;
    *(_QWORD *)&__src[0] = &v814;
    *((_QWORD *)&__src[0] + 1) = v820;
    *(_QWORD *)&__src[1] = v16 + 16;
    *((_QWORD *)&__src[1] + 1) = &v816;
    *(_QWORD *)&__src[2] = &v800;
    v69 = *(_DWORD *)(*(_QWORD *)v820 + 84);
    -[ggl::Device depthAttachment](v14, "depthAttachment");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = (v69 < 0x1B) & (0x4380000u >> v69);
    setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()((uint64_t)__src, v70, v71);

    if (v71)
    {
      if (v800)
        v72 = v800[6];
      else
        v72 = 1.0;
      -[ggl::Device depthAttachment](v14, "depthAttachment");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v73, "setClearDepth:", v72);

    }
    -[ggl::Device stencilAttachment](v14, "stencilAttachment");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = v69 - 25;
    setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()((uint64_t)__src, v74, v75 < 2);

    if (v75 < 2)
    {
      if (v800)
        v76 = *((unsigned int *)v800 + 8);
      else
        v76 = 0;
      -[ggl::Device stencilAttachment](v14, "stencilAttachment");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "setClearStencil:", v76);

      -[ggl::Device stencilAttachment](v14, "stencilAttachment");
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setStencilResolveFilter:", 0);

    }
    -[ggl::Device depthAttachment](v14, "depthAttachment");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    -[ggl::Device stencilAttachment](v14, "stencilAttachment");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = v79;
    if (objc_msgSend(v81, "storeAction") != 2)
    {
LABEL_82:

      v84 = v80;
      if (objc_msgSend(v84, "storeAction") != 2)
      {
LABEL_89:

        v13 = *(char **)v820;
        goto LABEL_90;
      }
      v85 = ggl::MetalResourceManager::prepareTexture(v794, *(const ggl::Texture **)(*(_QWORD *)v820 + 304), v791);
      if (*((_BYTE *)v85 + 120))
      {
        if (*((_BYTE *)v85 + 120) != 1)
        {
LABEL_88:
          objc_msgSend(v84, "setResolveTexture:", v2);

          objc_msgSend(v84, "setResolveLevel:", *(_QWORD *)(*(_QWORD *)v820 + 312));
          objc_msgSend(v84, "setResolveSlice:", *(_QWORD *)(*(_QWORD *)v820 + 320));
          goto LABEL_89;
        }
        v86 = (id *)(*((_QWORD *)v85 + 4) + 8 * *((unsigned int *)v85 + 16));
      }
      else
      {
        v86 = (id *)*((_QWORD *)v85 + 4);
      }
      v2 = (uint64_t)*v86;
      goto LABEL_88;
    }
    v82 = ggl::MetalResourceManager::prepareTexture(v794, *(const ggl::Texture **)(*(_QWORD *)v820 + 304), v791);
    if (*((_BYTE *)v82 + 120) == 1)
    {
      v83 = (id *)(*((_QWORD *)v82 + 4) + 8 * *((unsigned int *)v82 + 16));
    }
    else
    {
      if (*((_BYTE *)v82 + 120))
      {
LABEL_81:
        objc_msgSend(v81, "setResolveTexture:", v2);

        objc_msgSend(v81, "setResolveLevel:", *(_QWORD *)(*(_QWORD *)v820 + 312));
        objc_msgSend(v81, "setResolveSlice:", *(_QWORD *)(*(_QWORD *)v820 + 320));
        goto LABEL_82;
      }
      v83 = (id *)*((_QWORD *)v82 + 4);
    }
    v2 = (uint64_t)*v83;
    goto LABEL_81;
  }
LABEL_90:
  v87 = *((_QWORD *)v13 + 42);
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 24);
    if (!v88)
      v88 = ggl::MetalResourceManager::newRasterizationRateMap((uint64_t)v794, v87);
    -[ggl::Device setRasterizationRateMap:](v14, "setRasterizationRateMap:", *(_QWORD *)(v88 + 32));
    v13 = *(char **)v820;
  }
  v89 = *((_DWORD *)v13 + 82);
  if (v89 == 1)
    v90 = 0;
  else
    v90 = v89;
  -[ggl::Device setRenderTargetArrayLength:](v14, "setRenderTargetArrayLength:", v90);

  v5 = v782;
  if (v782 && *(unsigned __int8 *)v782 == 255)
    v5 = 0;
  v91 = *(_QWORD *)(v65 + 8);
  if (*(_BYTE *)(v91 + 344))
  {
    v92 = *(const ggl::Texture **)(v91 + 184);
    if (v92)
      ggl::MetalResourceManager::updateTextureWithResource((ggl::MetalResourceManager *)v794, v92, 0);
    else
      ggl::MetalResourceManager::updateTextureWithResource((ggl::MetalResourceManager *)v794, *(const ggl::Texture **)(v91 + 88), 0);
  }
  -[ggl::Device setVisibilityResultBuffer:](v14, "setVisibilityResultBuffer:", *v786);
  objc_msgSend(v768, "renderCommandEncoderWithDescriptor:", v14);
  v93 = objc_claimAutoreleasedReturnValue();
  v94 = *(void **)(v65 + 96);
  *(_QWORD *)(v65 + 96) = v93;

  if (*(_DWORD *)(v65 + 76))
    objc_msgSend(*(id *)(v65 + 96), "waitForFence:beforeStages:", *(_QWORD *)(v65 + 88), 1);
  objc_msgSend(*(id *)(v65 + 96), "setFrontFacingWinding:", 1);
  objc_msgSend(*(id *)(v65 + 96), "setCullMode:", 2);
  LODWORD(v95) = 1.0;
  LODWORD(v96) = 1.0;
  LODWORD(v97) = 1.0;
  LODWORD(v98) = 1.0;
  objc_msgSend(*(id *)(v65 + 96), "setBlendColorRed:green:blue:alpha:", v95, v96, v97, v98);
  v10 = *(id *)(v65 + 96);

LABEL_107:
  v99 = (ggl::MetalBindingManager *)*((_QWORD *)v3 + 1);
  v769 = v10;
  if (*(id *)v99 != v769)
  {
    ggl::MetalBindingManager::resetBindingCache(v99);
    objc_storeStrong((id *)v99, v10);
  }

  v807 = 0;
  v808 = 0;
  v805 = 0;
  v806 = 0;
  v803 = 0u;
  v804 = 0u;
  v801 = 0u;
  v802 = 0u;
  v100 = *((_QWORD *)v3 + 5);
  v101 = *((_QWORD *)v3 + 1);
  v800 = (float *)*((_QWORD *)v3 + 2);
  v102 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
  *((_QWORD *)&v804 + 1) = v101;
  v103 = *(_QWORD *)(v100 + 40);
  *((_QWORD *)&v801 + 1) = v102;
  *(_QWORD *)&v803 = v103;
  v770 = v769;
  *(_QWORD *)&v801 = v770;
  v104 = *((_QWORD *)v3 + 5);
  *((_QWORD *)&v803 + 1) = &v806;
  v802 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
  v105 = *((_QWORD *)v3 + 9);
  *(_QWORD *)&v804 = *((_QWORD *)v3 + 4);
  v805 = v105;
  v106 = (uint64_t)&off_1E42D7E50;
  if (!v5)
    goto LABEL_453;
  v823 = 0;
  v821 = 0;
  memset(&v820[8], 0, 32);
  v107 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
  *(_QWORD *)v820 = *((_QWORD *)v3 + 2);
  *(_QWORD *)&v820[8] = v107;
  *(int8x16_t *)&v820[16] = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
  v108 = (std::__shared_weak_count *)*((_QWORD *)v3 + 21);
  *(_QWORD *)&v820[32] = (char *)v3 + 152;
  v821 = v108;
  *(_QWORD *)&__src[0] = &off_1E42D7E50;
  *((_QWORD *)&__src[0] + 1) = &v800;
  *((_QWORD *)&__src[1] + 1) = __src;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](__src, v822);
  v109 = (_OWORD *)*((_QWORD *)&__src[1] + 1);
  if (*((_OWORD **)&__src[1] + 1) == __src)
  {
    v110 = 4;
    v109 = __src;
  }
  else
  {
    if (!*((_QWORD *)&__src[1] + 1))
      goto LABEL_115;
    v110 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v109 + 8 * v110))();
LABEL_115:
  v795 = (ggl::MetalResourceManager *)v822;
  v809 = v5;
  v111 = *(_QWORD *)&v820[8];
  v112 = *(uint64_t **)&v820[32];
  LODWORD(v113) = *(_DWORD *)(*(_QWORD *)&v820[8] + 328);
  if (v113 <= 1)
    v114 = 1;
  else
    v114 = v113;
  if (**(_QWORD **)&v820[32])
    goto LABEL_207;
  v115 = *(ggl::Device **)v820;
  v116 = *(ggl::MetalResourceManager **)(*(_QWORD *)v820 + 80);
  v117 = operator new(0xF8uLL);
  v117[1] = 0;
  v117[2] = 0;
  *v117 = &off_1E42E02F8;
  v118 = ggl::BufferData::BufferData((uint64_t)(v117 + 3), 8, 0, 0, 6, 4);
  v117[29] = "clearquad_verts";
  v117[30] = &ggl::Clear::clearDataReflection;
  v117[3] = &off_1E42B8020;
  v117[28] = &unk_1E42B8040;
  *(_QWORD *)&v814 = v118;
  *((_QWORD *)&v814 + 1) = v117;
  v119 = operator new(0xF8uLL);
  v119[1] = 0;
  v119[2] = 0;
  *v119 = &off_1E42E5228;
  v120 = ggl::BufferData::BufferData((uint64_t)(v119 + 3), 2, 1, 0, 6, 6);
  v119[28] = &unk_1E42BD118;
  v119[29] = "clearquad_idx";
  *((_DWORD *)v119 + 60) = 0;
  v119[3] = &off_1E42BD0F8;
  v119[4] = 2;
  v811 = v120;
  *(_QWORD *)&v812 = v119;
  (*(void (**)(__int128 *__return_ptr, ggl::Device *))(*(_QWORD *)v115 + 24))(&v813, v115);
  *(_QWORD *)&__src[0] = &off_1E42D7FB8;
  *((_QWORD *)&__src[0] + 1) = &v814;
  *(_QWORD *)&__src[1] = &v811;
  *((_QWORD *)&__src[1] + 1) = __src;
  v816 = 0uLL;
  (*(void (**)(_QWORD, _OWORD *, __int128 *))(*(_QWORD *)v813 + 16))(v813, __src, &v816);
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v816 + 1);
  if (*((_QWORD *)&v816 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v816 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (_OWORD *)*((_QWORD *)&__src[1] + 1);
  if (*((_OWORD **)&__src[1] + 1) == __src)
  {
    v125 = 4;
    v124 = __src;
  }
  else
  {
    if (!*((_QWORD *)&__src[1] + 1))
      goto LABEL_129;
    v125 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v124 + 8 * v125))();
LABEL_129:
  if ((_QWORD)v813)
  {
    v126 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v813 + 24))(v813);
    v127 = v813;
    *(_QWORD *)&v813 = 0;
    *(_QWORD *)&__src[0] = v127;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v126 + 48))(v126, __src);
    v128 = *(_QWORD *)&__src[0];
    *(_QWORD *)&__src[0] = 0;
    if (v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
    v129 = v813;
    *(_QWORD *)&v813 = 0;
    if (v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  }
  v130 = operator new();
  v131 = v130;
  v813 = v814;
  if (*((_QWORD *)&v814 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v814 + 1) + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v134 = (std::__shared_weak_count *)v812;
  v810[0] = v811;
  v810[1] = v812;
  if ((_QWORD)v812)
  {
    v135 = (unint64_t *)(v812 + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    ggl::Clear::ClearMesh::ClearMesh(v130, (uint64_t)"clearmesh", (uint64_t *)&v813, v810);
    do
      v137 = __ldaxr(v135);
    while (__stlxr(v137 - 1, v135));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  else
  {
    ggl::Clear::ClearMesh::ClearMesh(v130, (uint64_t)"clearmesh", (uint64_t *)&v813, v810);
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v813 + 1);
  if (*((_QWORD *)&v813 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v813 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = **(_QWORD **)(v131 + 64);
  v142 = *(_QWORD *)&v820[16];
  v143 = *(_QWORD *)&v820[24];
  if (!*(_QWORD *)(v141 + 24))
    ggl::BufferData::prepareBufferForDevice(**(std::mutex ***)(v131 + 64), v115, 0);
  if (*(_BYTE *)(v141 + 18) == 1 && *(_QWORD *)(v141 + 192) != v143 && *(_DWORD *)(v141 + 112))
  {
    *(_QWORD *)(v141 + 192) = v143;
    *(_OWORD *)(v141 + 56) = *(_OWORD *)(v141 + 40);
  }
  if (*(_DWORD *)(v141 + 112) <= 1u)
    v144 = 0;
  else
    v144 = v142;
  v145 = *(int64x2_t *)(v141 + 56);
  v146 = vaddq_s64(vdupq_n_s64(v144 * *(_QWORD *)(v141 + 120)), v145);
  *(_QWORD *)(v141 + 56) = 0;
  *(_QWORD *)(v141 + 64) = 0;
  v147 = *(_QWORD *)(v141 + 24);
  *(_QWORD *)&__src[0] = *(_QWORD *)(v141 + 72) + v145.i64[0];
  *((_QWORD *)&__src[0] + 1) = v147;
  __src[1] = v146;
  *((_QWORD *)&__src[3] + 1) = 0;
  v148 = *(_QWORD *)(v131 + 96);
  v149 = *(_QWORD *)&v820[16];
  v150 = *(_QWORD *)&v820[24];
  if (!*(_QWORD *)(v148 + 24))
    ggl::BufferData::prepareBufferForDevice(*(std::mutex **)(v131 + 96), v115, 0);
  if (*(_BYTE *)(v148 + 18) == 1 && *(_QWORD *)(v148 + 192) != v150 && *(_DWORD *)(v148 + 112))
  {
    *(_QWORD *)(v148 + 192) = v150;
    *(_OWORD *)(v148 + 56) = *(_OWORD *)(v148 + 40);
  }
  if (*(_DWORD *)(v148 + 112) <= 1u)
    v151 = 0;
  else
    v151 = v149;
  v152 = *(int64x2_t *)(v148 + 56);
  v153 = vaddq_s64(vdupq_n_s64(v151 * *(_QWORD *)(v148 + 120)), v152);
  *(_QWORD *)(v148 + 56) = 0;
  *(_QWORD *)(v148 + 64) = 0;
  v154 = *(_QWORD *)(v148 + 24);
  *(_QWORD *)&v816 = *(_QWORD *)(v148 + 72) + v152.i64[0];
  *((_QWORD *)&v816 + 1) = v154;
  v817 = v153;
  v819 = 0;
  if (*((_QWORD *)&__src[1] + 1) != *(_QWORD *)&__src[1])
  {
    v155 = *(_QWORD **)(*((_QWORD *)&__src[0] + 1) + 24);
    if (v155 || (v155 = ggl::MetalResourceManager::newBuffer(v116, *((const ggl::Buffer **)&__src[0] + 1))) != 0)
    {
      v156 = (void *)v155[4];
      if (v156)
      {
        v157 = objc_msgSend(v156, "contents");
        memcpy((void *)(v157 + *(_QWORD *)&__src[1]), *(const void **)&__src[0], *((_QWORD *)&__src[1] + 1) - *(_QWORD *)&__src[1]);
        if (*((_QWORD *)&__src[3] + 1))
          (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)&__src[3] + 1) + 48))(*((_QWORD *)&__src[3] + 1), __src);
      }
    }
  }
  if (v817.i64[1] != v817.i64[0])
  {
    v158 = *(_QWORD **)(*((_QWORD *)&v816 + 1) + 24);
    if (v158 || (v158 = ggl::MetalResourceManager::newBuffer(v116, *((const ggl::Buffer **)&v816 + 1))) != 0)
    {
      v159 = (void *)v158[4];
      if (v159)
      {
        v160 = objc_msgSend(v159, "contents");
        memcpy((void *)(v160 + v817.i64[0]), (const void *)v816, v817.i64[1] - v817.i64[0]);
        v161 = v819;
        if (!v819)
          goto LABEL_181;
        (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v819 + 48))(v819, &v816);
      }
    }
  }
  v161 = v819;
LABEL_181:
  if (v161 == v818)
  {
    v162 = 4;
    v161 = v818;
  }
  else
  {
    if (!v161)
      goto LABEL_186;
    v162 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v161 + 8 * v162))();
LABEL_186:
  v163 = (_QWORD *)*((_QWORD *)&__src[3] + 1);
  if (*((_OWORD **)&__src[3] + 1) == &__src[2])
  {
    v164 = 4;
    v163 = &__src[2];
  }
  else
  {
    if (!*((_QWORD *)&__src[3] + 1))
      goto LABEL_191;
    v164 = 5;
  }
  (*(void (**)(void))(*v163 + 8 * v164))();
LABEL_191:
  v165 = (std::__shared_weak_count *)v812;
  if ((_QWORD)v812)
  {
    v166 = (unint64_t *)(v812 + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = (std::__shared_weak_count *)*((_QWORD *)&v814 + 1);
  if (*((_QWORD *)&v814 + 1))
  {
    v169 = (unint64_t *)(*((_QWORD *)&v814 + 1) + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (_QWORD *)operator new();
  *v171 = &off_1E42E7C60;
  v171[1] = 0;
  v171[2] = 0;
  v171[3] = v131;
  v172 = (std::__shared_weak_count *)v112[1];
  *v112 = v131;
  v112[1] = (uint64_t)v171;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(p_shared_owners);
    while (__stlxr(v174 - 1, p_shared_owners));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v5 = v809;
  v111 = *(_QWORD *)&v820[8];
LABEL_207:
  v175 = v821;
  v176 = *(unsigned __int8 *)v5;
  v814 = *(_OWORD *)(v111 + 56);
  v815 = *(int64x2_t *)(v111 + 72);
  v177 = (char *)v821[3].__vftable;
  shared_owners = (char *)v821[3].__shared_owners_;
  if (v177 != shared_owners)
  {
    for (i = (char *)v821[3].__vftable; i != shared_owners; i += 64)
    {
      if (*i != v176 || *(_OWORD *)(i + 24) != *(_OWORD *)&v815)
        continue;
      if (v815.i64[0])
      {
        if (*((_DWORD *)i + 2) != (_DWORD)v814)
          continue;
        v180 = 0;
        while (v815.i64[0] - 1 != v180)
        {
          v181 = *(_DWORD *)&i[4 * v180 + 12];
          v182 = *((_DWORD *)&v814 + ++v180);
          if (v181 != v182)
          {
            if (v180 >= v815.i64[0])
              break;
            goto LABEL_210;
          }
        }
      }
      if (*((_DWORD *)i + 10) == (_DWORD)v114)
      {
        v220 = (uint64_t)(i + 48);
        goto LABEL_275;
      }
LABEL_210:
      ;
    }
  }
  v183 = v176 & 0xF;
  if (v176 == 255)
    v183 = 15;
  LOBYTE(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 4) = xmmword_19FFB3060;
  if (!v176)
    v183 = 0;
  *(_QWORD *)((char *)&__src[1] + 4) = 0;
  *(_OWORD *)((char *)&__src[1] + 12) = 0uLL;
  BYTE12(__src[2]) = v183;
  v184 = shared_owners - v177;
  if (shared_owners - v177 == -64)
  {
    for (; shared_owners != v177; shared_owners -= 64)
    {
      v185 = (std::__shared_weak_count *)*((_QWORD *)shared_owners - 1);
      if (v185)
      {
        v186 = (unint64_t *)&v185->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
    }
    v175[3].__shared_owners_ = (uint64_t)v177;
  }
  else
  {
    shared_weak_owners = (char *)v821[3].__shared_weak_owners_;
    if (shared_weak_owners == shared_owners)
    {
      v189 = v184 >> 6;
      v190 = (v184 >> 6) + 1;
      if (v190 >> 58)
LABEL_1075:
        abort();
      v191 = shared_weak_owners - v177;
      if (v191 >> 5 > v190)
        v190 = v191 >> 5;
      if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFC0)
        v192 = 0x3FFFFFFFFFFFFFFLL;
      else
        v192 = v190;
      v193 = v192 << 6;
      if (v192)
      {
        v194 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, uint64_t, uint64_t))v821[4].~__shared_weak_count
                + 2))(v821[4].__vftable, v193, 8);
        v195 = (_OWORD *)(v194 + (v189 << 6));
        v193 = v194 + (v192 << 6);
        if (v194)
        {
          v195[2] = 0u;
          v195[3] = 0u;
          *v195 = 0u;
          v195[1] = 0u;
        }
      }
      else
      {
        v195 = (_OWORD *)(v189 << 6);
      }
      v196 = v195 + 4;
      v197 = v175[3].__vftable;
      v198 = (std::__shared_weak_count_vtbl *)v175[3].__shared_owners_;
      if (v198 == v197)
      {
        v175[3].__vftable = (std::__shared_weak_count_vtbl *)v195;
        v175[3].__shared_owners_ = (uint64_t)v196;
        v202 = v175[3].__shared_weak_owners_;
        v175[3].__shared_weak_owners_ = v193;
      }
      else
      {
        do
        {
          v199 = *(_OWORD *)&v198[-2].__on_zero_shared;
          v200 = *(_OWORD *)&v198[-2].__on_zero_shared_weak;
          *(_OWORD *)((char *)v195 - 36) = *(_OWORD *)((char *)&v198[-1].~__shared_weak_count + 4);
          *(v195 - 4) = v199;
          *(v195 - 3) = v200;
          *(v195 - 1) = *(_OWORD *)&v198[-1].__get_deleter;
          v195 -= 4;
          v198[-1].__get_deleter = 0;
          v198[-1].__on_zero_shared_weak = 0;
          v198 = (std::__shared_weak_count_vtbl *)((char *)v198 - 64);
        }
        while (v198 != v197);
        v198 = v175[3].__vftable;
        v201 = (std::__shared_weak_count_vtbl *)v175[3].__shared_owners_;
        v175[3].__vftable = (std::__shared_weak_count_vtbl *)v195;
        v175[3].__shared_owners_ = (uint64_t)v196;
        v202 = v175[3].__shared_weak_owners_;
        for (v175[3].__shared_weak_owners_ = v193;
              v201 != v198;
              v201 = (std::__shared_weak_count_vtbl *)((char *)v201 - 64))
        {
          on_zero_shared_weak = (std::__shared_weak_count *)v201[-1].__on_zero_shared_weak;
          if (on_zero_shared_weak)
          {
            v204 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
              std::__shared_weak_count::__release_weak(on_zero_shared_weak);
            }
          }
        }
      }
      if (v198)
        (*((void (**)(std::__shared_weak_count_vtbl *, std::__shared_weak_count_vtbl *, uint64_t))v175[4].~__shared_weak_count
         + 5))(v175[4].__vftable, v198, v202 - (_QWORD)v198);
      v177 = (char *)v175[3].__shared_owners_;
    }
    else
    {
      if (shared_owners)
      {
        *((_OWORD *)shared_owners + 2) = 0u;
        *((_OWORD *)shared_owners + 3) = 0u;
        *(_OWORD *)shared_owners = 0u;
        *((_OWORD *)shared_owners + 1) = 0u;
      }
      v175[3].__shared_owners_ = (uint64_t)(shared_owners + 64);
      v177 = shared_owners + 64;
    }
  }
  *(v177 - 64) = v176;
  *(_OWORD *)(v177 - 56) = v814;
  *(int64x2_t *)(v177 - 40) = v815;
  *(_DWORD *)(v175[3].__shared_owners_ - 24) = v114;
  v206 = *(_QWORD *)(v175[5].__shared_weak_owners_ + 80);
  v208 = *(_QWORD *)(v206 + 32);
  v207 = *(_QWORD *)(v206 + 40);
  v811 = v208;
  *(_QWORD *)&v812 = v207;
  if (v207)
  {
    v209 = (unint64_t *)(v207 + 8);
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 1, v209));
  }
  v211 = operator new(0x198uLL);
  v211[1] = 0;
  v211[2] = 0;
  *v211 = &off_1E42E4460;
  v816 = v814;
  v817 = v815;
  v212 = ggl::Clear::ClearPipelineState::ClearPipelineState((uint64_t)(v211 + 3), &v811, (uint64_t)__src, &v816, v114);
  v213 = v175[3].__shared_owners_;
  v214 = *(std::__shared_weak_count **)(v213 - 8);
  *(_QWORD *)(v213 - 16) = v212;
  *(_QWORD *)(v213 - 8) = v211;
  if (v214)
  {
    v215 = (unint64_t *)&v214->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = (std::__shared_weak_count *)v812;
  if ((_QWORD)v812)
  {
    v218 = (unint64_t *)(v812 + 8);
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v175[3].__shared_owners_ - 16;
  v175 = v821;
LABEL_275:
  v221 = v175[2].__shared_weak_owners_;
  v222 = v175->__vftable;
  if (v221 != (uint64_t)(v175->__shared_owners_ - (unint64_t)v175->__vftable) >> 4)
    goto LABEL_338;
  v223 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v223->__shared_owners_ = 0;
  v223->__shared_weak_owners_ = 0;
  v223->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2320;
  v224 = (unint64_t)ggl::Clear::ClearConstants::reflection(void)::reflection;
  v225 = ggl::BufferData::BufferData((uint64_t)&v223[1], qword_1EE5754B0, 2, 1, 6, 1);
  v223[9].__shared_owners_ = (uint64_t)ggl::Clear::ClearConstants::reflection(void)::reflection;
  v223[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9810;
  *(_QWORD *)&__src[0] = v225;
  *((_QWORD *)&__src[0] + 1) = v223;
  v226 = (uint64_t *)v175->__shared_owners_;
  v227 = v175->__shared_weak_owners_;
  if ((unint64_t)v226 >= v227)
  {
    v228 = ((char *)v226 - (char *)v175->__vftable) >> 4;
    v229 = v228 + 1;
    if ((unint64_t)(v228 + 1) >> 60)
      abort();
    v230 = v227 - (unint64_t)v175->__vftable;
    if (v230 >> 3 > v229)
      v229 = v230 >> 3;
    if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0)
      v231 = 0xFFFFFFFFFFFFFFFLL;
    else
      v231 = v229;
    if (v231)
    {
      v232 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, uint64_t, uint64_t))v175[1].~__shared_weak_count
              + 2))(v175[1].__vftable, 16 * v231, 8);
      v233 = (_OWORD *)(v232 + 16 * v228);
      v234 = v232 + 16 * v231;
      if (v232)
      {
        *v233 = __src[0];
        __src[0] = 0uLL;
      }
    }
    else
    {
      v234 = 0;
      v233 = (_OWORD *)(16 * v228);
    }
    v235 = v233 + 1;
    v236 = v175->__vftable;
    v237 = (std::__shared_weak_count_vtbl *)v175->__shared_owners_;
    if (v237 == v175->__vftable)
    {
      v175->__vftable = (std::__shared_weak_count_vtbl *)v233;
      v175->__shared_owners_ = (uint64_t)v235;
      v240 = v175->__shared_weak_owners_;
      v175->__shared_weak_owners_ = v234;
    }
    else
    {
      do
      {
        v238 = *(_OWORD *)&v237[-1].__get_deleter;
        v237 = (std::__shared_weak_count_vtbl *)((char *)v237 - 16);
        *--v233 = v238;
        v237->~__shared_weak_count = 0;
        v237->~__shared_weak_count_0 = 0;
      }
      while (v237 != v236);
      v237 = v175->__vftable;
      v239 = (std::__shared_weak_count_vtbl *)v175->__shared_owners_;
      v175->__vftable = (std::__shared_weak_count_vtbl *)v233;
      v175->__shared_owners_ = (uint64_t)v235;
      v240 = v175->__shared_weak_owners_;
      v175->__shared_weak_owners_ = v234;
      while (v239 != v237)
      {
        v241 = (std::__shared_weak_count *)v239[-1].__on_zero_shared_weak;
        if (v241)
        {
          v242 = (unint64_t *)&v241->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        v239 = (std::__shared_weak_count_vtbl *)((char *)v239 - 16);
      }
    }
    if (v237)
      (*((void (**)(std::__shared_weak_count_vtbl *, std::__shared_weak_count_vtbl *, uint64_t))v175[1].~__shared_weak_count
       + 5))(v175[1].__vftable, v237, v240 - (_QWORD)v237);
    v223 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
    v175->__shared_owners_ = (uint64_t)v235;
    if (!v223)
      goto LABEL_309;
  }
  else
  {
    if (v226)
    {
      *v226 = v225;
      v226[1] = (uint64_t)v223;
      __src[0] = 0uLL;
      v223 = 0;
    }
    v175->__shared_owners_ = (uint64_t)(v226 + 2);
    if (!v223)
      goto LABEL_309;
  }
  v244 = (unint64_t *)&v223->__shared_owners_;
  do
    v245 = __ldaxr(v244);
  while (__stlxr(v245 - 1, v244));
  if (!v245)
  {
    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
    std::__shared_weak_count::__release_weak(v223);
  }
LABEL_309:
  jj = v821;
  p_shared_weak_owners = operator new();
  if ((v248 & 1) != 0
  {
    goto LABEL_310;
  }
  v280 = (std::__shared_weak_count *)&ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref;
  v106 = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r;
  if ((v764 & 1) == 0)
    goto LABEL_1081;
  while (1)
  {
    v280->__vftable = (std::__shared_weak_count_vtbl *)v106;
    v280->__shared_owners_ = (uint64_t)&ggl::Clear::pipelineDataClearPipelineDeviceStructs(void)::ref;
    v280->__shared_weak_owners_ = 0;
    if ((v765 & 1) == 0
    {
      ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref = v224;
    }
    qword_1ECE360D8 = (uint64_t)&ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref;
    unk_1ECE360E0 = xmmword_19FFB3350;
LABEL_310:
    ggl::PipelineSetup::PipelineSetup(p_shared_weak_owners, (uint64_t)&ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref);
    *(_QWORD *)p_shared_weak_owners = &off_1E42BBC48;
    v249 = (unint64_t *)jj[1].__shared_weak_owners_;
    v250 = (unint64_t)jj[2].__vftable;
    if ((unint64_t)v249 >= v250)
    {
      v252 = jj[1].__shared_owners_;
      v253 = ((uint64_t)v249 - v252) >> 3;
      v254 = v253 + 1;
      if ((unint64_t)(v253 + 1) >> 61)
        goto LABEL_1075;
      v255 = v250 - v252;
      if (v255 >> 2 > v254)
        v254 = v255 >> 2;
      if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF8)
        v256 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v256 = v254;
      if (v256)
      {
        v257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)jj[2].__shared_owners_ + 16))(jj[2].__shared_owners_, 8 * v256, 8);
        v258 = (unint64_t *)(v257 + 8 * v253);
        v259 = v257 + 8 * v256;
        if (v257)
          *v258 = p_shared_weak_owners;
      }
      else
      {
        v259 = 0;
        v258 = (unint64_t *)(8 * v253);
      }
      v251 = v258 + 1;
      v260 = (char *)jj[1].__shared_owners_;
      v261 = (char *)jj[1].__shared_weak_owners_;
      if (v261 == v260)
      {
        jj[1].__shared_owners_ = (uint64_t)v258;
        jj[1].__shared_weak_owners_ = (uint64_t)v251;
        v267 = jj[2].__vftable;
        jj[2].__vftable = (std::__shared_weak_count_vtbl *)v259;
        goto LABEL_335;
      }
      v262 = v261 - v260 - 8;
      if (v262 > 0x57
        && ((v263 = (v260 - v261 + 7) & 0xFFFFFFFFFFFFFFF8, &v261[v263] >= (char *)v258) || (char *)v258 + v263 >= v261))
      {
        v755 = (v262 >> 3) + 1;
        v264 = &v261[-8 * (v755 & 0x3FFFFFFFFFFFFFFCLL)];
        v756 = v258 - 2;
        v757 = v261 - 32;
        v758 = v755 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v760 = *(_OWORD *)v757;
          v759 = *((_OWORD *)v757 + 1);
          *(_OWORD *)v757 = 0uLL;
          *((_OWORD *)v757 + 1) = 0uLL;
          v757 -= 32;
          *((_OWORD *)v756 - 1) = v760;
          *(_OWORD *)v756 = v759;
          v756 -= 4;
          v758 -= 4;
        }
        while (v758);
        v258 -= v755 & 0x3FFFFFFFFFFFFFFCLL;
        if (v755 == (v755 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_330:
          v261 = (char *)jj[1].__shared_owners_;
          v266 = (char *)jj[1].__shared_weak_owners_;
          jj[1].__shared_owners_ = (uint64_t)v258;
          jj[1].__shared_weak_owners_ = (uint64_t)v251;
          v267 = jj[2].__vftable;
          jj[2].__vftable = (std::__shared_weak_count_vtbl *)v259;
          while (v266 != v261)
          {
            v269 = *((_QWORD *)v266 - 1);
            v266 -= 8;
            v268 = v269;
            *(_QWORD *)v266 = 0;
            if (v269)
              (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
          }
LABEL_335:
          if (v261)
            (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)jj[2].__shared_owners_ + 40))(jj[2].__shared_owners_, v261, (char *)v267 - v261);
          goto LABEL_337;
        }
      }
      else
      {
        v264 = (char *)jj[1].__shared_weak_owners_;
      }
      do
      {
        v265 = *((_QWORD *)v264 - 1);
        v264 -= 8;
        *(_QWORD *)v264 = 0;
        *--v258 = v265;
      }
      while (v264 != v260);
      goto LABEL_330;
    }
    if (v249)
      *v249 = p_shared_weak_owners;
    v251 = v249 + 1;
LABEL_337:
    jj[1].__shared_weak_owners_ = (uint64_t)v251;
    v221 = v821[2].__shared_weak_owners_;
    v222 = v821->__vftable;
LABEL_338:
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v820 + 24))(&v811);
    v270 = (__int128 *)((char *)v222 + 16 * v221);
    *(_QWORD *)&__src[0] = &off_1E42D8000;
    *((_QWORD *)&__src[0] + 1) = v270;
    *(_QWORD *)&__src[1] = &v809;
    *((_QWORD *)&__src[1] + 1) = __src;
    v816 = 0uLL;
    (*(void (**)(uint64_t, _OWORD *, __int128 *))(*(_QWORD *)v811 + 16))(v811, __src, &v816);
    v271 = (std::__shared_weak_count *)*((_QWORD *)&v816 + 1);
    if (*((_QWORD *)&v816 + 1))
    {
      v272 = (unint64_t *)(*((_QWORD *)&v816 + 1) + 8);
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    v274 = (_OWORD *)*((_QWORD *)&__src[1] + 1);
    if (*((_OWORD **)&__src[1] + 1) == __src)
    {
      v275 = 4;
      v274 = __src;
    }
    else
    {
      if (!*((_QWORD *)&__src[1] + 1))
        goto LABEL_348;
      v275 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v274 + 8 * v275))();
LABEL_348:
    if (v811)
    {
      v276 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v811 + 24))(v811);
      v277 = v811;
      v811 = 0;
      *(_QWORD *)&__src[0] = v277;
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v276 + 48))(v276, __src);
      v278 = *(_QWORD *)&__src[0];
      *(_QWORD *)&__src[0] = 0;
      if (v278)
        (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
      v279 = v811;
      v811 = 0;
      if (v279)
        (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
    }
    v280 = *(std::__shared_weak_count **)(v821[1].__shared_owners_ + 8 * v821[2].__shared_weak_owners_);
    v282 = *(_QWORD *)v220;
    v281 = *(std::__shared_weak_count **)(v220 + 8);
    if (v281)
    {
      v283 = (unint64_t *)&v281->__shared_owners_;
      do
        v284 = __ldxr(v283);
      while (__stxr(v284 + 1, v283));
    }
    if (!v282 || **(_QWORD **)(v282 + 40) != v280->__shared_owners_)
    {
      v285 = (std::__shared_weak_count *)v280[1].__vftable;
      v280->__shared_weak_owners_ = 0;
      v280[1].__vftable = 0;
      if (!v285)
        goto LABEL_373;
      v286 = (unint64_t *)&v285->__shared_owners_;
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      goto LABEL_371;
    }
    v288 = v280->__shared_weak_owners_;
    if (v288 && v288 != v282)
      ggl::PipelineSetup::resetData((uint64_t)v280);
    if (v281)
    {
      v289 = (unint64_t *)&v281->__shared_owners_;
      do
        v290 = __ldxr(v289);
      while (__stxr(v290 + 1, v289));
    }
    v285 = (std::__shared_weak_count *)v280[1].__vftable;
    v280->__shared_weak_owners_ = v282;
    v280[1].__vftable = (std::__shared_weak_count_vtbl *)v281;
    if (v285)
    {
      v291 = (unint64_t *)&v285->__shared_owners_;
      do
        v287 = __ldaxr(v291);
      while (__stlxr(v287 - 1, v291));
LABEL_371:
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
LABEL_373:
    if (v281)
    {
      v292 = (unint64_t *)&v281->__shared_owners_;
      do
        v293 = __ldaxr(v292);
      while (__stlxr(v293 - 1, v292));
      if (!v293)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
    }
    v294 = (_QWORD *)v280[2].__shared_weak_owners_;
    v294[1] = 0;
    v295 = v280[6].__shared_weak_owners_;
    v296 = *v270;
    *v294 = *(_QWORD *)v270;
    if (*((_QWORD *)&v296 + 1))
    {
      v297 = (unint64_t *)(*((_QWORD *)&v296 + 1) + 8);
      do
        v298 = __ldxr(v297);
      while (__stxr(v298 + 1, v297));
    }
    v299 = *(std::__shared_weak_count **)(v295 + 8);
    *(_OWORD *)v295 = v296;
    if (v299)
    {
      v300 = (unint64_t *)&v299->__shared_owners_;
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
    jj = v821;
    v302 = **(_QWORD **)&v820[32];
    v280[9].__shared_owners_ = **(_QWORD **)&v820[32];
    v303 = v809;
    v220 = *((unsigned __int8 *)v809 + 28);
    v224 = *((unsigned __int8 *)v809 + 20);
    v304 = (unsigned __int8 *)jj[4].__shared_owners_;
    v305 = (unsigned __int8 *)jj[4].__shared_weak_owners_;
    if (v304 == v305)
    {
LABEL_395:
      v308 = operator new();
      v309 = v308;
      v310 = 0;
      *(_QWORD *)v308 = &off_1E42B5DE8;
      *(_QWORD *)(v308 + 8) = 0;
      v311 = (v220 << 48) | 0x202020100;
      if (!(_DWORD)v220)
        v311 = 1;
      v312 = 1793;
      if (!(_DWORD)v224)
        v312 = 67329;
      *(_DWORD *)(v308 + 32) = 0;
      *(_QWORD *)(v308 + 16) = 0;
      *(_QWORD *)(v308 + 24) = 0;
      *(_QWORD *)(v308 + 36) = v312;
      *(_DWORD *)(v308 + 44) = 0;
      *(_QWORD *)(v308 + 48) = v311;
      *(_WORD *)(v308 + 56) = 0;
      *(_QWORD *)(v308 + 67) = 0;
      *(_QWORD *)(v308 + 59) = 0;
      *(_BYTE *)(v308 + 75) = 0;
      *(_QWORD *)(v308 + 132) = 0;
      *(_QWORD *)(v308 + 124) = 0;
      *(_BYTE *)(v308 + 188) = 1;
      *(_BYTE *)(v308 + 208) = 0;
      *(_QWORD *)(v308 + 192) = 0;
      *(_QWORD *)(v308 + 200) = 0;
      *(_BYTE *)(v308 + 58) = 3;
      *(_BYTE *)(v308 + 189) = v114;
      if (v113 <= 1)
        goto LABEL_403;
      v313 = 0;
      v310 = v114 & 0xFFFFFFFE;
      v314 = (_DWORD *)(v308 + 200);
      do
      {
        *(v314 - 2) = v313;
        *v314 = v313 + 1;
        v314 += 4;
        v313 += 2;
      }
      while (v310 != v313);
      if (v310 != v114)
      {
LABEL_403:
        v315 = (_DWORD *)(v308 + 8 * v310 + 192);
        do
        {
          *v315 = v310;
          v315 += 2;
          ++v310;
        }
        while (v114 != v310);
      }
      *(_BYTE *)(v308 + 208) = 1;
      v316 = (char *)jj[4].__shared_owners_;
      v317 = (char *)jj[4].__shared_weak_owners_;
      v318 = v317 - v316;
      if (v317 - v316 == -16)
      {
        for (; v317 != v316; v317 -= 16)
        {
          v319 = *((_QWORD *)v317 - 1);
          *((_QWORD *)v317 - 1) = 0;
          if (v319)
            (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
        }
        jj[4].__shared_weak_owners_ = (uint64_t)v316;
        goto LABEL_444;
      }
      v320 = jj[5].__vftable;
      if (v320 != (std::__shared_weak_count_vtbl *)v317)
      {
        if (v317)
        {
          *(_QWORD *)v317 = 0;
          *((_QWORD *)v317 + 1) = 0;
        }
        jj[4].__shared_weak_owners_ = (uint64_t)(v317 + 16);
LABEL_443:
        v316 = (char *)jj[4].__shared_weak_owners_;
LABEL_444:
        v342 = *((_QWORD *)v316 - 1);
        *((_QWORD *)v316 - 1) = v309;
        if (v342)
          (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
        v343 = jj[4].__shared_weak_owners_;
        *(_BYTE *)(v343 - 16) = v224;
        *(_BYTE *)(v343 - 15) = v220;
        *(_DWORD *)(v343 - 12) = v114;
        v321 = (uint64_t *)(v343 - 8);
        v302 = **(_QWORD **)&v820[32];
        v303 = v809;
        goto LABEL_447;
      }
      v322 = v318 >> 4;
      v323 = (v318 >> 4) + 1;
      if (v323 >> 60)
        goto LABEL_1075;
      v324 = (char *)v320 - v316;
      if (v324 >> 3 > v323)
        v323 = v324 >> 3;
      if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF0)
        v325 = 0xFFFFFFFFFFFFFFFLL;
      else
        v325 = v323;
      if (v325)
      {
        v326 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)jj[5].__shared_owners_ + 16))(jj[5].__shared_owners_, 16 * v325, 8);
        v327 = (_QWORD *)(v326 + 16 * v322);
        if (!v327)
        {
LABEL_425:
          v328 = v326 + 16 * v325;
          v329 = v327 + 2;
          v330 = jj[4].__shared_owners_;
          v331 = jj[4].__shared_weak_owners_;
          if (v331 == v330)
          {
            jj[4].__shared_owners_ = (uint64_t)v327;
            jj[4].__shared_weak_owners_ = (uint64_t)v329;
            v340 = jj[5].__vftable;
            jj[5].__vftable = (std::__shared_weak_count_vtbl *)v328;
          }
          else
          {
            v332 = v331 - v330 - 16;
            if (v332 <= 0x8F
              || v318 - (v332 & 0xFFFFFFFFFFFFFFF0) + v326 - 16 < v331
              && v331 - (v332 & 0xFFFFFFFFFFFFFFF0) - 16 < (unint64_t)v327)
            {
              goto LABEL_1090;
            }
            v333 = (v332 >> 4) + 1;
            v334 = (double *)(v327 - 4);
            v335 = v331 - 32;
            v336 = v333 & 0x1FFFFFFFFFFFFFFELL;
            do
            {
              v830 = vld2q_f64((const double *)v335);
              *(_QWORD *)(v335 + 24) = 0;
              *(_QWORD *)(v335 + 8) = 0;
              vst2q_f64(v334, v830);
              v335 -= 32;
              v334 -= 4;
              v336 -= 2;
            }
            while (v336);
            v327 -= 2 * (v333 & 0x1FFFFFFFFFFFFFFELL);
            v331 -= 16 * (v333 & 0x1FFFFFFFFFFFFFFELL);
            if (v333 != (v333 & 0x1FFFFFFFFFFFFFFELL))
            {
LABEL_1090:
              do
              {
                v337 = *(_QWORD *)(v331 - 16);
                v331 -= 16;
                *(v327 - 2) = v337;
                v327 -= 2;
                v338 = *(_QWORD *)(v331 + 8);
                *(_QWORD *)(v331 + 8) = 0;
                v327[1] = v338;
              }
              while (v331 != v330);
            }
            v331 = jj[4].__shared_owners_;
            v339 = jj[4].__shared_weak_owners_;
            jj[4].__shared_owners_ = (uint64_t)v327;
            jj[4].__shared_weak_owners_ = (uint64_t)v329;
            v340 = jj[5].__vftable;
            jj[5].__vftable = (std::__shared_weak_count_vtbl *)v328;
            while (v339 != v331)
            {
              v341 = *(_QWORD *)(v339 - 8);
              *(_QWORD *)(v339 - 8) = 0;
              if (v341)
                (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
              v339 -= 16;
            }
          }
          if (v331)
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)jj[5].__shared_owners_
                                                                                + 40))(jj[5].__shared_owners_, v331, (unint64_t)v340 - v331);
          goto LABEL_443;
        }
      }
      else
      {
        v326 = 0;
        v327 = (_QWORD *)(16 * v322);
        if (!(16 * v322))
          goto LABEL_425;
      }
      *v327 = 0;
      v327[1] = 0;
      goto LABEL_425;
    }
    while (1)
    {
      v306 = *v304 == (_DWORD)v224 && v304[1] == (_DWORD)v220;
      if (v306 && *((_DWORD *)v304 + 1) == (_DWORD)v114)
        break;
      v304 += 16;
      if (v304 == v305)
        goto LABEL_395;
    }
    v321 = (uint64_t *)(v304 + 8);
LABEL_447:
    v344 = *v321;
    *(_QWORD *)&__src[0] = &off_1E42B59B0;
    *(_QWORD *)&__src[1] = "clearItem";
    *((_QWORD *)&__src[1] + 1) = v344;
    *(_QWORD *)&__src[2] = v280;
    *(_QWORD *)&__src[3] = 0;
    DWORD2(__src[3]) = 1065353216;
    v825 = v302;
    v826 = 0uLL;
    v827 = vdupq_n_s64(1uLL);
    *(_QWORD *)&v828 = 0;
    DWORD2(__src[2]) = *((unsigned __int8 *)v303 + 32);
    *(_QWORD *)&v816 = __src;
    p_shared_weak_owners = (unint64_t)v795;
    v106 = (uint64_t)&off_1E42D7E50;
    if (v823)
      break;
LABEL_1063:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
LABEL_1081:
    {
      if ((v766 & 1) == 0
      {
        ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
      }
      *(_QWORD *)v106 = &ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
      *(_QWORD *)(v106 + 8) = 1;
    }
  }
  (*(void (**)(ggl::MetalResourceManager *, __int128 *))(*(_QWORD *)v823 + 48))(v823, &v816);
  v3 = v785;
  ++v821[2].__shared_weak_owners_;
  if (v823 == v795)
  {
    v345 = 4;
LABEL_452:
    (*(void (**)(unint64_t))(*(_QWORD *)p_shared_weak_owners + 8 * v345))(p_shared_weak_owners);
  }
  else if (v823)
  {
    v345 = 5;
    p_shared_weak_owners = (unint64_t)v823;
    goto LABEL_452;
  }
LABEL_453:
  v346 = (uint64_t *)*((_QWORD *)a2 + 9);
  for (j = (uint64_t *)*((_QWORD *)a2 + 10); v346 != j; ++v346)
    ggl::MetalRenderItemEncoder::encode((uint64_t)&v800, *v346);
  v348 = a2;
  if (!*((_QWORD *)a2 + 38) && !*((_QWORD *)a2 + 44))
    goto LABEL_930;
  *((_QWORD *)&v826 + 1) = 0;
  v349 = *((_QWORD *)v3 + 2);
  __src[1] = 0uLL;
  *(_QWORD *)&__src[0] = v349;
  v350 = v770;
  v351 = *((_QWORD *)v3 + 5);
  *(_QWORD *)&__src[2] = v350;
  *(_OWORD *)((char *)&__src[2] + 8) = *(_OWORD *)(v351 + 24);
  DWORD2(__src[3]) = *((unsigned __int8 *)a2 + 16);
  *((_QWORD *)&__src[0] + 1) = v786;
  *(_QWORD *)v820 = &off_1E42D7E50;
  *(_QWORD *)&v820[8] = &v800;
  *(_QWORD *)&v820[24] = v820;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v820, &v825);
  v352 = *(_QWORD **)&v820[24];
  if (*(_BYTE **)&v820[24] == v820)
  {
    v353 = 4;
    v352 = v820;
LABEL_461:
    (*(void (**)(void))(*v352 + 8 * v353))();
  }
  else if (*(_QWORD *)&v820[24])
  {
    v353 = 5;
    goto LABEL_461;
  }
  v114 = *((_QWORD *)&__src[0] + 1);
  v774 = objc_msgSend(**((id **)&__src[0] + 1), "contents");
  v783 = *(ggl::Device **)&__src[0];
  v354 = *((_QWORD *)a2 + 43);
  v355 = (void **)*((_QWORD *)a2 + 40);
  v356 = (void **)*((_QWORD *)a2 + 41);
  v357 = (char *)&v355[v354 >> 7];
  if (v356 == v355)
    v358 = 0;
  else
    v358 = (unsigned int *)(*(_QWORD *)v357 + 32 * (*((_QWORD *)a2 + 43) & 0x7FLL));
  v796 = (ggl::CommandBuffer *)((char *)a2 + 296);
  v780 = (ggl::Device *)v114;
LABEL_466:
  v359 = *((_QWORD *)a2 + 44) + v354;
  v360 = v359 >> 7;
  v361 = v359 & 0x7F;
LABEL_467:
  v362 = v358 - 1024;
  while (v356 != v355)
  {
    if (v358 == (unsigned int *)((char *)v355[v360] + 32 * v361))
      goto LABEL_645;
LABEL_472:
    if (*((_QWORD *)&__src[2] + 1) - *((_QWORD *)v358 + 1) >= 3uLL)
    {
      v364 = *((_QWORD *)v358 + 2);
      if (v364)
      {
        v365 = *(_QWORD *)(v774 + 8 * *v358);
        *(_BYTE *)(v364 + 129) = 1;
        *(_DWORD *)(v364 + 132) = v365;
        *(_QWORD *)(v364 + 120) = 0;
      }
      *v358 = 0;
      v366 = (char *)&v355[v354 >> 7];
      if (v356 != v355)
      {
        v367 = *(_QWORD *)v366 + 32 * (v354 & 0x7F);
        if (v358 != (unsigned int *)v367)
          goto LABEL_479;
LABEL_483:
        v371 = 0;
        v369 = *(void **)v366;
        goto LABEL_484;
      }
      v367 = 0;
      if (!v358)
        goto LABEL_483;
LABEL_479:
      v368 = (((uint64_t)v358 - *(_QWORD *)v357) >> 5) + 16 * (v357 - v366);
      v369 = *(void **)v366;
      v370 = v367 - *(_QWORD *)v366;
      v371 = v368 - (v370 >> 5);
      if (v368 == v370 >> 5)
      {
LABEL_484:
        v787 = 1;
        v374 = v367;
        v372 = &v355[v354 >> 7];
      }
      else
      {
        if (v368 < 1)
        {
          v375 = 127 - v368;
          v372 = (void **)&v366[-8 * (v375 >> 7)];
          v369 = *v372;
          v373 = ~(_DWORD)v375 & 0x7FLL;
        }
        else
        {
          v372 = (void **)&v366[8 * ((unint64_t)v368 >> 7)];
          v369 = *v372;
          v373 = v368 & 0x7F;
        }
        v374 = (uint64_t)v369 + 32 * v373;
        v376 = *((_QWORD *)a2 + 44);
        if (v371 > (unint64_t)(v376 - 1) >> 1)
        {
          v377 = (v374 - (uint64_t)v369) >> 5;
          if (v374 - (uint64_t)v369 < -31)
          {
            v427 = 126 - v377;
            v378 = ~(_BYTE)v427;
            v379 = &v372[-(v427 >> 7)];
          }
          else
          {
            v378 = v377 + 1;
            v379 = &v372[(unint64_t)(v377 + 1) >> 7];
          }
          v428 = (char *)*v379;
          v429 = (uint64_t)*v379 + 32 * (v378 & 0x7F);
          v430 = v376 + v354;
          v431 = &v355[v430 >> 7];
          if (v356 == v355)
            v788 = 0;
          else
            v788 = (uint64_t)*v431 + 32 * (v430 & 0x7F);
          v767 = v371;
          if (v379 == v431)
          {
            if (v429 == v788)
            {
              v3 = v785;
            }
            else
            {
              v3 = v785;
              while (1)
              {
                v463 = ((uint64_t)v369 - v374 + 4096) >> 5;
                if ((v788 - v429) >> 5 < v463)
                  v463 = (v788 - v429) >> 5;
                if (v463)
                {
                  v464 = v429 + 32 * v463;
                  do
                  {
                    *(_OWORD *)v374 = *(_OWORD *)v429;
                    v465 = *(_OWORD *)(v429 + 16);
                    *(_QWORD *)(v429 + 16) = 0;
                    *(_QWORD *)(v429 + 24) = 0;
                    v466 = *(std::__shared_weak_count **)(v374 + 24);
                    *(_OWORD *)(v374 + 16) = v465;
                    if (v466)
                    {
                      v467 = (unint64_t *)&v466->__shared_owners_;
                      do
                        v468 = __ldaxr(v467);
                      while (__stlxr(v468 - 1, v467));
                      if (!v468)
                      {
                        ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                        std::__shared_weak_count::__release_weak(v466);
                      }
                    }
                    v429 += 32;
                    v374 += 32;
                  }
                  while (v429 != v464);
                  v429 = v464;
                }
                if (v429 == v788)
                  break;
                v469 = v372[1];
                ++v372;
                v369 = v469;
                v374 = (uint64_t)v469;
              }
LABEL_632:
              if ((char *)*v372 + 4096 == (void *)v374)
                v374 = (uint64_t)v372[1];
            }
          }
          else
          {
            v776 = &v355[v430 >> 7];
            v432 = v428 + 4096;
            if (v428 + 4096 != (char *)v429)
            {
              while (1)
              {
                v433 = ((uint64_t)v369 - v374 + 4096) >> 5;
                if ((uint64_t)&v432[-v429] >> 5 < v433)
                  v433 = (uint64_t)&v432[-v429] >> 5;
                if (v433)
                {
                  v434 = v429 + 32 * v433;
                  do
                  {
                    *(_OWORD *)v374 = *(_OWORD *)v429;
                    v435 = *(_OWORD *)(v429 + 16);
                    *(_QWORD *)(v429 + 16) = 0;
                    *(_QWORD *)(v429 + 24) = 0;
                    v436 = *(std::__shared_weak_count **)(v374 + 24);
                    *(_OWORD *)(v374 + 16) = v435;
                    if (v436)
                    {
                      v437 = (unint64_t *)&v436->__shared_owners_;
                      do
                        v438 = __ldaxr(v437);
                      while (__stlxr(v438 - 1, v437));
                      if (!v438)
                      {
                        ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                        std::__shared_weak_count::__release_weak(v436);
                      }
                    }
                    v429 += 32;
                    v374 += 32;
                  }
                  while (v429 != v434);
                  v429 = v434;
                }
                if ((char *)v429 == v432)
                  break;
                v439 = v372[1];
                ++v372;
                v369 = v439;
                v374 = (uint64_t)v439;
              }
              v369 = *v372;
              if ((char *)*v372 + 4096 == (void *)v374)
              {
                v440 = v372[1];
                ++v372;
                v369 = v440;
                v374 = (uint64_t)v440;
              }
            }
            v3 = v785;
            for (k = v379 + 1; k != v776; ++k)
            {
              v451 = 0;
              v452 = *k;
              while (1)
              {
                v453 = (uint64_t)v452 + 32 * v451;
                v454 = (4096 - 32 * v451) >> 5;
                if (v454 >= ((uint64_t)v369 - v374 + 4096) >> 5)
                  v454 = ((uint64_t)v369 - v374 + 4096) >> 5;
                if (v454)
                {
                  v455 = v453 + 32 * v454;
                  v456 = (uint64_t)v452 + 32 * v451;
                  do
                  {
                    *(_OWORD *)v374 = *(_OWORD *)v456;
                    v457 = *(_OWORD *)(v456 + 16);
                    *(_QWORD *)(v456 + 16) = 0;
                    *(_QWORD *)(v456 + 24) = 0;
                    v458 = *(std::__shared_weak_count **)(v374 + 24);
                    *(_OWORD *)(v374 + 16) = v457;
                    if (v458)
                    {
                      v459 = (unint64_t *)&v458->__shared_owners_;
                      do
                        v460 = __ldaxr(v459);
                      while (__stlxr(v460 - 1, v459));
                      if (!v460)
                      {
                        ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                        std::__shared_weak_count::__release_weak(v458);
                      }
                    }
                    v456 += 32;
                    v374 += 32;
                  }
                  while (v456 != v455);
                }
                else
                {
                  v455 = (uint64_t)v452 + 32 * v451;
                }
                v451 += (v455 - v453) >> 5;
                if (v451 == 128)
                  break;
                v461 = v372[1];
                ++v372;
                v369 = v461;
                v374 = (uint64_t)v461;
              }
              v369 = *v372;
              if ((char *)*v372 + 4096 == (void *)v374)
              {
                v462 = v372[1];
                ++v372;
                v369 = v462;
                v374 = (uint64_t)v462;
              }
              v3 = v785;
            }
            v442 = *v776;
            if (*v776 != (void *)v788)
            {
              v443 = *v372;
              while (1)
              {
                v444 = ((uint64_t)v443 - v374 + 4096) >> 5;
                if ((v788 - (uint64_t)v442) >> 5 < v444)
                  v444 = (v788 - (uint64_t)v442) >> 5;
                if (v444)
                {
                  v445 = &v442[2 * v444];
                  do
                  {
                    *(_OWORD *)v374 = *v442;
                    v446 = v442[1];
                    *((_QWORD *)v442 + 2) = 0;
                    *((_QWORD *)v442 + 3) = 0;
                    v447 = *(std::__shared_weak_count **)(v374 + 24);
                    *(_OWORD *)(v374 + 16) = v446;
                    if (v447)
                    {
                      v448 = (unint64_t *)&v447->__shared_owners_;
                      do
                        v449 = __ldaxr(v448);
                      while (__stlxr(v449 - 1, v448));
                      if (!v449)
                      {
                        ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                        std::__shared_weak_count::__release_weak(v447);
                      }
                    }
                    v442 += 2;
                    v374 += 32;
                  }
                  while (v442 != v445);
                  v442 = v445;
                  v3 = v785;
                }
                if (v442 == (_OWORD *)v788)
                  break;
                v450 = v372[1];
                ++v372;
                v443 = v450;
                v374 = (uint64_t)v450;
              }
              goto LABEL_632;
            }
          }
          v470 = *(std::__shared_weak_count **)(v374 + 24);
          v114 = (uint64_t)v780;
          if (v470)
          {
            v471 = (unint64_t *)&v470->__shared_owners_;
            do
              v472 = __ldaxr(v471);
            while (__stlxr(v472 - 1, v471));
            if (!v472)
            {
              ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
              std::__shared_weak_count::__release_weak(v470);
            }
          }
          v423 = a2;
          v355 = (void **)*((_QWORD *)a2 + 40);
          v473 = (void **)*((_QWORD *)a2 + 41);
          v354 = *((_QWORD *)a2 + 43);
          v474 = *((_QWORD *)a2 + 44);
          *((_QWORD *)a2 + 44) = v474 - 1;
          v475 = 16 * ((char *)v473 - (char *)v355) - 1;
          if (v473 == v355)
            v475 = 0;
          if (v475 - (v474 + v354) + 1 >= 0x100)
          {
            operator delete(*(v473 - 1));
            v106 = 0;
            v355 = (void **)*((_QWORD *)a2 + 40);
            *((_QWORD *)a2 + 41) -= 8;
            v354 = *((_QWORD *)a2 + 43);
          }
          else
          {
            v106 = 0;
          }
LABEL_556:
          v357 = (char *)&v355[v354 >> 7];
          v356 = (void **)*((_QWORD *)v423 + 41);
          if (v356 == v355)
          {
            v358 = 0;
            if ((v106 & 1) != 0)
              goto LABEL_466;
          }
          else
          {
            v358 = (unsigned int *)(*(_QWORD *)v357 + 32 * (v354 & 0x7F));
            if ((v106 & 1) != 0)
              goto LABEL_466;
          }
          v425 = v767 + (((uint64_t)v358 - *(_QWORD *)v357) >> 5);
          if (v425 < 1)
          {
            v426 = 127 - v425;
            v357 -= 8 * (v426 >> 7);
            v358 = (unsigned int *)(*(_QWORD *)v357 + 32 * (~(_BYTE)v426 & 0x7F));
          }
          else
          {
            v357 += 8 * ((unint64_t)v425 >> 7);
            v358 = (unsigned int *)(*(_QWORD *)v357 + 32 * (v425 & 0x7F));
          }
          goto LABEL_466;
        }
        v787 = 0;
      }
      v767 = v371;
      v380 = (v374 - (uint64_t)v369) >> 5;
      if (v374 - (uint64_t)v369 < -31)
      {
        v383 = 126 - v380;
        v381 = ~(_BYTE)v383;
        v382 = &v372[-(v383 >> 7)];
      }
      else
      {
        v381 = v380 + 1;
        v382 = &v372[(unint64_t)(v380 + 1) >> 7];
      }
      v384 = (uint64_t)*v382;
      v385 = (uint64_t)*v382 + 32 * (v381 & 0x7F);
      if (v366 == (char *)v372)
      {
        v106 = v787;
        if (v367 != v374)
        {
          while (1)
          {
            v413 = (v385 - v384) >> 5;
            if ((v374 - v367) >> 5 < v413)
              v413 = (v374 - v367) >> 5;
            v414 = v374 - 32 * v413;
            if (v413)
            {
              do
              {
                *(_OWORD *)(v385 - 32) = *(_OWORD *)(v374 - 32);
                v416 = *(_OWORD *)(v374 - 16);
                *(_QWORD *)(v374 - 16) = 0;
                *(_QWORD *)(v374 - 8) = 0;
                v417 = *(std::__shared_weak_count **)(v385 - 8);
                *(_OWORD *)(v385 - 16) = v416;
                if (v417)
                {
                  v418 = (unint64_t *)&v417->__shared_owners_;
                  do
                    v419 = __ldaxr(v418);
                  while (__stlxr(v419 - 1, v418));
                  if (!v419)
                  {
                    ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                    std::__shared_weak_count::__release_weak(v417);
                  }
                }
                v374 -= 32;
                v385 -= 32;
              }
              while (v374 != v414);
            }
            if (v414 == v367)
              break;
            v415 = (uint64_t)*--v382;
            v384 = v415;
            v385 = v415 + 4096;
            v374 = v414;
          }
        }
      }
      else
      {
        if (v369 != (void *)v374)
        {
          while (1)
          {
            v386 = (v385 - v384) >> 5;
            if ((v374 - (uint64_t)v369) >> 5 < v386)
              v386 = (v374 - (uint64_t)v369) >> 5;
            v387 = v374 - 32 * v386;
            if (v386)
            {
              do
              {
                *(_OWORD *)(v385 - 32) = *(_OWORD *)(v374 - 32);
                v389 = *(_OWORD *)(v374 - 16);
                *(_QWORD *)(v374 - 16) = 0;
                *(_QWORD *)(v374 - 8) = 0;
                v390 = *(std::__shared_weak_count **)(v385 - 8);
                *(_OWORD *)(v385 - 16) = v389;
                if (v390)
                {
                  v391 = (unint64_t *)&v390->__shared_owners_;
                  do
                    v392 = __ldaxr(v391);
                  while (__stlxr(v392 - 1, v391));
                  if (!v392)
                  {
                    ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                    std::__shared_weak_count::__release_weak(v390);
                  }
                }
                v374 -= 32;
                v385 -= 32;
              }
              while (v374 != v387);
            }
            if ((void *)v387 == v369)
              break;
            v388 = (uint64_t)*--v382;
            v384 = v388;
            v385 = v388 + 4096;
            v374 = v387;
          }
          v384 = (uint64_t)*v382;
          if ((char *)*v382 + 4096 == (void *)v385)
          {
            v393 = (uint64_t)v382[1];
            ++v382;
            v384 = v393;
            v385 = v393;
          }
        }
        for (m = (char *)(v372 - 1); m != v366; m -= 8)
        {
          v395 = *(_QWORD *)m;
          for (n = *(_QWORD *)m + 4096; ; n = v398)
          {
            v397 = (v385 - v384) >> 5;
            if ((n - v395) >> 5 < v397)
              v397 = (n - v395) >> 5;
            v398 = n - 32 * v397;
            if (v397)
            {
              do
              {
                *(_OWORD *)(v385 - 32) = *(_OWORD *)(n - 32);
                v400 = *(_OWORD *)(n - 16);
                *(_QWORD *)(n - 16) = 0;
                *(_QWORD *)(n - 8) = 0;
                v401 = *(std::__shared_weak_count **)(v385 - 8);
                *(_OWORD *)(v385 - 16) = v400;
                if (v401)
                {
                  v402 = (unint64_t *)&v401->__shared_owners_;
                  do
                    v403 = __ldaxr(v402);
                  while (__stlxr(v403 - 1, v402));
                  if (!v403)
                  {
                    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                    std::__shared_weak_count::__release_weak(v401);
                  }
                }
                n -= 32;
                v385 -= 32;
              }
              while (n != v398);
            }
            if (v398 == v395)
              break;
            v399 = (uint64_t)*--v382;
            v384 = v399;
            v385 = v399 + 4096;
          }
          v384 = (uint64_t)*v382;
          if ((char *)*v382 + 4096 == (void *)v385)
          {
            v404 = (uint64_t)v382[1];
            ++v382;
            v384 = v404;
            v385 = v404;
          }
        }
        v405 = *(_QWORD *)v366 + 4096;
        v106 = v787;
        if (v405 != v367)
        {
          while (1)
          {
            v406 = (v385 - v384) >> 5;
            if ((v405 - v367) >> 5 < v406)
              v406 = (v405 - v367) >> 5;
            v407 = v405 - 32 * v406;
            if (v406)
            {
              do
              {
                *(_OWORD *)(v385 - 32) = *(_OWORD *)(v405 - 32);
                v409 = *(_OWORD *)(v405 - 16);
                *(_QWORD *)(v405 - 16) = 0;
                *(_QWORD *)(v405 - 8) = 0;
                v410 = *(std::__shared_weak_count **)(v385 - 8);
                *(_OWORD *)(v385 - 16) = v409;
                if (v410)
                {
                  v411 = (unint64_t *)&v410->__shared_owners_;
                  do
                    v412 = __ldaxr(v411);
                  while (__stlxr(v412 - 1, v411));
                  if (!v412)
                  {
                    ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                    std::__shared_weak_count::__release_weak(v410);
                  }
                }
                v405 -= 32;
                v385 -= 32;
              }
              while (v405 != v407);
            }
            if (v407 == v367)
              break;
            v408 = (uint64_t)*--v382;
            v384 = v408;
            v385 = v408 + 4096;
            v405 = v407;
          }
        }
      }
      v420 = *(std::__shared_weak_count **)(v367 + 24);
      v3 = v785;
      v114 = (uint64_t)v780;
      if (v420)
      {
        v421 = (unint64_t *)&v420->__shared_owners_;
        do
          v422 = __ldaxr(v421);
        while (__stlxr(v422 - 1, v421));
        if (!v422)
        {
          ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
          std::__shared_weak_count::__release_weak(v420);
        }
      }
      v423 = a2;
      v424 = vaddq_s64(*(int64x2_t *)((char *)a2 + 344), (int64x2_t)xmmword_19FFB5EC0);
      *(int64x2_t *)((char *)a2 + 344) = v424;
      v354 = v424.i64[0];
      v355 = (void **)*((_QWORD *)a2 + 40);
      if (v424.i64[0] >= 0x100uLL)
      {
        operator delete(*v355);
        v355 = (void **)(*((_QWORD *)a2 + 40) + 8);
        *((_QWORD *)a2 + 40) = v355;
        v354 = *((_QWORD *)a2 + 43) - 128;
        *((_QWORD *)a2 + 43) = v354;
      }
      goto LABEL_556;
    }
    v358 += 8;
    v362 += 8;
    if (*(unsigned int **)v357 == v362)
    {
      v363 = (unsigned int *)*((_QWORD *)v357 + 1);
      v357 += 8;
      v358 = v363;
      goto LABEL_467;
    }
  }
  if (v358)
    goto LABEL_472;
LABEL_645:
  v224 = *((_QWORD *)v783 + 10);
  v476 = *(_QWORD *)&__src[3];
  v477 = *(_QWORD *)(v114 + 32);
  memset(v820, 0, 24);
  {
    v761 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v761, "GeoGL", 0xA3D02C1100000005);
  }
  v113 = (unint64_t)&unk_1ECE44000;
  *(_QWORD *)&v820[24] = ggl::Allocator::instance(void)::alloc;
  v816 = 0uLL;
  v817.i64[0] = 0;
  {
    v762 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v762, "GeoGL", 0xA3D02C1100000005);
  }
  v817.i64[1] = ggl::Allocator::instance(void)::alloc;
  v814 = 0uLL;
  v815.i64[0] = 0;
  {
    v763 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v763, "GeoGL", 0xA3D02C1100000005);
  }
  v815.i64[1] = ggl::Allocator::instance(void)::alloc;
  if (*((_QWORD *)a2 + 38))
  {
    v481 = (std::__shared_weak_count **)(v477 + 24 * v476);
    v106 = 0xAAAAAAAAAAAAAAALL;
    v482 = (char **)(v481 + 1);
    v789 = v481 + 2;
    v777 = (char **)(v481 + 1);
    while (1)
    {
      if (*(_QWORD *)(v114 + 8) == *(_QWORD *)(v114 + 16))
      {
LABEL_729:
        v534 = *((_QWORD *)&v814 + 1);
        for (ii = v814; ii != v534; ii += 64)
        {
          if (*(_QWORD *)(ii + 24) != *(_QWORD *)(ii + 16))
          {
            v535 = *(const ggl::Buffer **)(ii + 8);
            v536 = (_QWORD *)*((_QWORD *)v535 + 3);
            if (v536 || (v536 = ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v224, v535)) != 0)
            {
              v537 = (void *)v536[4];
              if (v537)
              {
                memcpy((void *)(objc_msgSend(v537, "contents") + *(_QWORD *)(ii + 16)), *(const void **)ii, *(_QWORD *)(ii + 24) - *(_QWORD *)(ii + 16));
                v538 = *(_QWORD *)(ii + 56);
                if (v538)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v538 + 48))(v538, ii);
              }
            }
          }
        }
        break;
      }
      v483 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 34) + ((*((_QWORD *)a2 + 37) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * *((_QWORD *)a2 + 37));
      v813 = v483;
      if (*((_QWORD *)&v483 + 1))
      {
        v484 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
        do
          v485 = __ldxr(v484);
        while (__stxr(v485 + 1, v484));
        v486 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 34)
                                                        + ((*((_QWORD *)a2 + 37) >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * *((_QWORD *)a2 + 37)
                                            + 8);
        if (v486)
        {
          v487 = (unint64_t *)&v486->__shared_owners_;
          do
            v488 = __ldaxr(v487);
          while (__stlxr(v488 - 1, v487));
          if (!v488)
          {
            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
            std::__shared_weak_count::__release_weak(v486);
          }
        }
      }
      v489 = vaddq_s64(*(int64x2_t *)v796, (int64x2_t)xmmword_19FFB5EC0);
      *(int64x2_t *)v796 = v489;
      if (v489.i64[0] >= 0x200uLL)
      {
        operator delete(**((void ***)a2 + 34));
        *((_QWORD *)a2 + 34) += 8;
        *((_QWORD *)a2 + 37) -= 256;
      }
      v490 = v813;
      v491 = *(_BYTE *)(v813 + 128) - 1;
      *(_BYTE *)(v813 + 128) = v491;
      if (*(_BYTE *)(v490 + 136) | v491)
      {
LABEL_720:
        v530 = (std::__shared_weak_count *)*((_QWORD *)&v813 + 1);
        if (*((_QWORD *)&v813 + 1))
          goto LABEL_721;
        goto LABEL_650;
      }
      v492 = *(_QWORD *)(v114 + 16);
      v493 = *(_DWORD *)(v492 - 4);
      *(_QWORD *)(v114 + 16) = v492 - 4;
      v494 = *v482;
      if ((unint64_t)*v482 >= *v789)
      {
        v496 = v481;
        v113 = (unint64_t)*v481;
        v497 = v494 - (char *)*v481;
        v498 = v497 >> 2;
        v499 = (v497 >> 2) + 1;
        if (v499 >> 62)
          goto LABEL_1066;
        v500 = *v789 - v113;
        if (v500 >> 1 > v499)
          v499 = v500 >> 1;
        if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFFCLL)
          v501 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v501 = v499;
        if (v501)
        {
          if (v501 >> 62)
            goto LABEL_1064;
          v502 = operator new(4 * v501);
        }
        else
        {
          v502 = 0;
        }
        v503 = &v502[4 * v498];
        *v503 = v493;
        v495 = (char *)(v503 + 1);
        if (v494 != (char *)v113)
        {
          v504 = (unint64_t)&v494[-v113 - 4];
          if (v504 < 0x2C)
            goto LABEL_1091;
          if ((unint64_t)(v494 - &v502[v497]) < 0x20)
            goto LABEL_1091;
          v505 = (v504 >> 2) + 1;
          v506 = &v502[4 * v498 - 16];
          v507 = v494 - 16;
          v508 = v505 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v509 = *(_OWORD *)v507;
            *(v506 - 1) = *((_OWORD *)v507 - 1);
            *v506 = v509;
            v506 -= 2;
            v507 -= 32;
            v508 -= 8;
          }
          while (v508);
          v503 -= v505 & 0x7FFFFFFFFFFFFFF8;
          v494 -= 4 * (v505 & 0x7FFFFFFFFFFFFFF8);
          if (v505 != (v505 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1091:
            do
            {
              v510 = *((_DWORD *)v494 - 1);
              v494 -= 4;
              *--v503 = v510;
            }
            while (v494 != (char *)v113);
          }
        }
        v481 = v496;
        *v496 = (std::__shared_weak_count *)v503;
        v511 = &v502[4 * v501];
        v482 = v777;
        *v777 = v495;
        *v789 = v511;
        if (v113)
          operator delete((void *)v113);
        v106 = 0xAAAAAAAAAAAAAAALL;
      }
      else
      {
        *(_DWORD *)v494 = v493;
        v495 = v494 + 4;
      }
      *v482 = v495;
      ggl::RenderItem::gatherBufferLoadItems((_QWORD *)v490, (uint64_t *)&v814, v783, *((uint64_t *)&__src[2] + 1), *(uint64_t *)&__src[3]);
      ggl::RenderItem::gatherTextureLoadItems(v490, (uint64_t)&v816, SDWORD2(__src[3]));
      LODWORD(v811) = v493;
      *(_QWORD *)&v812 = v490;
      *((_QWORD *)&v812 + 1) = *((_QWORD *)&v813 + 1);
      if (*((_QWORD *)&v813 + 1))
      {
        v512 = (unint64_t *)(*((_QWORD *)&v813 + 1) + 8);
        do
          v513 = __ldxr(v512);
        while (__stxr(v513 + 1, v512));
      }
      v514 = *(_QWORD *)&v820[8];
      v515 = *(_QWORD *)&v820[16];
      v3 = v785;
      if (*(_QWORD *)&v820[8] >= *(_QWORD *)&v820[16])
      {
        v517 = *(_QWORD *)v820;
        v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v820[8] - *(_QWORD *)v820) >> 3);
        v518 = v113 + 1;
        if (v113 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v820[16] - *(_QWORD *)v820) >> 3) > v518)
          v518 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v820[16] - *(_QWORD *)v820) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v820[16] - *(_QWORD *)v820) >> 3) >= 0x555555555555555)
          v519 = 0xAAAAAAAAAAAAAAALL;
        else
          v519 = v518;
        if (v519)
        {
          v520 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v820[24] + 16))(*(_QWORD *)&v820[24], 24 * v519, 8);
          v521 = v520 + 24 * v113;
          v522 = v520 + 24 * v519;
          if (v520)
          {
            *(_DWORD *)v521 = v493;
            *(_OWORD *)(v520 + 24 * v113 + 8) = v812;
            v812 = 0uLL;
          }
        }
        else
        {
          v522 = 0;
          v521 = 8 * ((uint64_t)(*(_QWORD *)&v820[8] - *(_QWORD *)v820) >> 3);
        }
        v3 = v785;
        v516 = v521 + 24;
        if (v514 == v517)
        {
          *(_QWORD *)v820 = v521;
          *(_QWORD *)&v820[16] = v522;
          v482 = v777;
          if (!v514)
            goto LABEL_716;
LABEL_715:
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v820[24] + 40))(*(_QWORD *)&v820[24], v514, v515 - v514);
          goto LABEL_716;
        }
        v523 = v514;
        do
        {
          v524 = *(_DWORD *)(v523 - 24);
          v523 -= 24;
          *(_DWORD *)(v521 - 24) = v524;
          v521 -= 24;
          *(_OWORD *)(v521 + 8) = *(_OWORD *)(v523 + 8);
          *(_QWORD *)(v523 + 8) = 0;
          *(_QWORD *)(v523 + 16) = 0;
        }
        while (v523 != v517);
        *(_QWORD *)v820 = v521;
        *(_QWORD *)&v820[8] = v516;
        *(_QWORD *)&v820[16] = v522;
        do
        {
          v113 = *(_QWORD *)(v514 - 8);
          if (v113)
          {
            v525 = (unint64_t *)(v113 + 8);
            do
              v526 = __ldaxr(v525);
            while (__stlxr(v526 - 1, v525));
            if (!v526)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v113 + 16))(v113);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v113);
            }
          }
          v514 -= 24;
        }
        while (v514 != v517);
        v514 = v517;
        v482 = v777;
        if (v514)
          goto LABEL_715;
      }
      else
      {
        if (*(_QWORD *)&v820[8])
        {
          **(_DWORD **)&v820[8] = v493;
          *(_OWORD *)(v514 + 8) = v812;
          v812 = 0uLL;
        }
        v516 = v514 + 24;
      }
LABEL_716:
      v114 = (uint64_t)v780;
      *(_QWORD *)&v820[8] = v516;
      v527 = (std::__shared_weak_count *)*((_QWORD *)&v812 + 1);
      if (!*((_QWORD *)&v812 + 1))
        goto LABEL_720;
      v528 = (unint64_t *)(*((_QWORD *)&v812 + 1) + 8);
      do
        v529 = __ldaxr(v528);
      while (__stlxr(v529 - 1, v528));
      if (v529)
        goto LABEL_720;
      ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
      std::__shared_weak_count::__release_weak(v527);
      v530 = (std::__shared_weak_count *)*((_QWORD *)&v813 + 1);
      if (*((_QWORD *)&v813 + 1))
      {
LABEL_721:
        v531 = (unint64_t *)&v530->__shared_owners_;
        do
          v532 = __ldaxr(v531);
        while (__stlxr(v532 - 1, v531));
        if (!v532)
        {
          ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
          std::__shared_weak_count::__release_weak(v530);
        }
      }
LABEL_650:
      if (!*((_QWORD *)a2 + 38))
        goto LABEL_729;
    }
  }
  v539 = *((_QWORD *)&v816 + 1);
  p_shared_weak_owners = v816;
  for (jj = (std::__shared_weak_count *)&__src[1]; p_shared_weak_owners != v539; p_shared_weak_owners += 80)
    ggl::MetalResourceManager::upload((ggl::MetalResourceManager *)v224, p_shared_weak_owners, (std::__shared_weak_count *)&__src[1]);
  v220 = *(_QWORD *)v820;
  v786 = *(_QWORD **)&v820[8];
  if (*(_QWORD *)v820 != *(_QWORD *)&v820[8])
  {
    while (1)
    {
      v540 = *(_DWORD *)v220;
      v280 = *(std::__shared_weak_count **)(v220 + 16);
      v795 = *(ggl::MetalResourceManager **)(v220 + 8);
      v811 = (uint64_t)v795;
      *(_QWORD *)&v812 = v280;
      if (v280)
      {
        v541 = (unint64_t *)&v280->__shared_owners_;
        do
          v542 = __ldxr(v541);
        while (__stxr(v542 + 1, v541));
      }
      v792 = v540;
      objc_msgSend(*(id *)&__src[2], "setVisibilityResultMode:offset:", 1, (8 * v540));
      *(_QWORD *)&v813 = v795;
      if (!*((_QWORD *)&v826 + 1))
        goto LABEL_1063;
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v826 + 1) + 48))(*((_QWORD *)&v826 + 1), &v813);
      jj = (std::__shared_weak_count *)*((_QWORD *)a2 + 41);
      v114 = *((_QWORD *)a2 + 40);
      v106 = (uint64_t)jj - v114;
      v543 = jj == (std::__shared_weak_count *)v114 ? 0 : 16 * ((_QWORD)jj - v114) - 1;
      v544 = *((_QWORD *)a2 + 43);
      v545 = *((_QWORD *)a2 + 44) + v544;
      if (v543 == v545)
        break;
      v546 = v795;
LABEL_865:
      v632 = *(_QWORD *)(v114 + ((v545 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v545 & 0x7F);
      v633 = *((_QWORD *)&__src[2] + 1);
      *(_DWORD *)v632 = v792;
      *(_QWORD *)(v632 + 8) = v633;
      *(_QWORD *)(v632 + 16) = v546;
      *(_QWORD *)(v632 + 24) = v280;
      if (v280)
      {
        v634 = (unint64_t *)&v280->__shared_owners_;
        do
          v635 = __ldxr(v634);
        while (__stxr(v635 + 1, v634));
        *(_QWORD *)(*(_QWORD *)(v632 + 16) + 120) = v632;
        ++*((_QWORD *)a2 + 44);
        do
          v636 = __ldaxr(v634);
        while (__stlxr(v636 - 1, v634));
        if (!v636)
        {
          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
          std::__shared_weak_count::__release_weak(v280);
        }
      }
      else
      {
        *((_QWORD *)v546 + 15) = v632;
        ++*((_QWORD *)a2 + 44);
      }
      v220 += 24;
      if ((_QWORD *)v220 == v786)
      {
        v637 = *(_QWORD *)v820;
        v220 = *(_QWORD *)&v820[8];
        if (*(_QWORD *)&v820[8] == *(_QWORD *)v820)
        {
          v3 = v785;
        }
        else
        {
          v3 = v785;
          do
          {
            v638 = *(std::__shared_weak_count **)(v220 - 8);
            if (v638)
            {
              v639 = (unint64_t *)&v638->__shared_owners_;
              do
                v640 = __ldaxr(v639);
              while (__stlxr(v640 - 1, v639));
              if (!v640)
              {
                ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                std::__shared_weak_count::__release_weak(v638);
              }
            }
            v220 -= 24;
          }
          while (v220 != v637);
          v220 = v637;
        }
        goto LABEL_882;
      }
    }
    if (v544 >= 0x80)
    {
      v546 = v795;
      v547 = a2;
      *((_QWORD *)a2 + 43) = v544 - 128;
      p_shared_weak_owners = v114 + 8;
      v224 = *(_QWORD *)v114;
      *((_QWORD *)a2 + 40) = v114 + 8;
      if (*((std::__shared_weak_count **)a2 + 42) != jj)
      {
LABEL_833:
        jj->__vftable = (std::__shared_weak_count_vtbl *)v224;
        *((_QWORD *)v547 + 41) += 8;
LABEL_864:
        v114 = *((_QWORD *)v547 + 40);
        v545 = *((_QWORD *)v547 + 44) + *((_QWORD *)v547 + 43);
        goto LABEL_865;
      }
      v113 = *((_QWORD *)a2 + 39);
      if (p_shared_weak_owners > v113)
      {
        v548 = (uint64_t)(p_shared_weak_owners - v113) >> 3;
        if (v548 >= -1)
          v549 = v548 + 1;
        else
          v549 = v548 + 2;
        v550 = v549 >> 1;
        v113 = p_shared_weak_owners - 8 * (v549 >> 1);
        v106 = (uint64_t)jj - p_shared_weak_owners;
        if (jj == (std::__shared_weak_count *)p_shared_weak_owners)
        {
          v551 = jj;
          v547 = a2;
        }
        else
        {
          memmove((void *)(p_shared_weak_owners - 8 * (v549 >> 1)), (const void *)p_shared_weak_owners, (size_t)jj - p_shared_weak_owners);
          v547 = a2;
          v551 = (std::__shared_weak_count *)*((_QWORD *)a2 + 40);
        }
        jj = (std::__shared_weak_count *)(v113 + v106);
        *((_QWORD *)v547 + 40) = (char *)v551 - 8 * v550;
        *((_QWORD *)v547 + 41) = v113 + v106;
        goto LABEL_833;
      }
      if (jj == (std::__shared_weak_count *)v113)
        v557 = 1;
      else
        v557 = (uint64_t)((uint64_t)jj - v113) >> 2;
      if (!(v557 >> 61))
      {
        v558 = (char *)operator new(8 * v557);
        v559 = v557 >> 2;
        v560 = (std::__shared_weak_count *)&v558[8 * (v557 >> 2)];
        v561 = (unint64_t)jj - p_shared_weak_owners;
        v38 = jj == (std::__shared_weak_count *)p_shared_weak_owners;
        jj = v560;
        if (v38)
          goto LABEL_831;
        jj = (std::__shared_weak_count *)((char *)v560 + (v561 & 0xFFFFFFFFFFFFFFF8));
        v562 = v561 - 8;
        if (v562 >= 0x38)
        {
          v603 = 8 * v559;
          v604 = (unint64_t)&v558[8 * v559 - p_shared_weak_owners];
          v563 = (std::__shared_weak_count *)&v558[8 * (v557 >> 2)];
          if (v604 >= 0x20)
          {
            v605 = (v562 >> 3) + 1;
            v606 = 8 * (v605 & 0x3FFFFFFFFFFFFFFCLL);
            v563 = (std::__shared_weak_count *)((char *)v560 + v606);
            v607 = (__int128 *)(v114 + 24);
            v608 = &v558[v603 + 16];
            v609 = v605 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v610 = *v607;
              *((_OWORD *)v608 - 1) = *(v607 - 1);
              *(_OWORD *)v608 = v610;
              v607 += 2;
              v608 += 32;
              v609 -= 4;
            }
            while (v609);
            if (v605 == (v605 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_831:
              v547 = a2;
              *((_QWORD *)a2 + 39) = v558;
              *((_QWORD *)a2 + 40) = v560;
              *((_QWORD *)a2 + 41) = jj;
              *((_QWORD *)a2 + 42) = &v558[8 * v557];
              v546 = v795;
              if (v113)
              {
                operator delete((void *)v113);
                jj = (std::__shared_weak_count *)*((_QWORD *)a2 + 41);
              }
              goto LABEL_833;
            }
            p_shared_weak_owners += v606;
          }
        }
        else
        {
          v563 = (std::__shared_weak_count *)&v558[8 * (v557 >> 2)];
        }
        do
        {
          v611 = *(std::__shared_weak_count_vtbl **)p_shared_weak_owners;
          p_shared_weak_owners += 8;
          v563->__vftable = v611;
          v563 = (std::__shared_weak_count *)((char *)v563 + 8);
        }
        while (v563 != jj);
        goto LABEL_831;
      }
LABEL_1064:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v552 = v106 >> 3;
    v553 = (char *)*((_QWORD *)a2 + 42);
    v113 = *((_QWORD *)a2 + 39);
    v224 = (unint64_t)&v553[-v113];
    if (v106 >> 3 < (unint64_t)((uint64_t)&v553[-v113] >> 3))
    {
      if (v553 != (char *)jj)
      {
        jj->__vftable = (std::__shared_weak_count_vtbl *)operator new(0x1000uLL);
        v547 = a2;
LABEL_863:
        *((_QWORD *)v547 + 41) += 8;
        v546 = v795;
        goto LABEL_864;
      }
      v564 = operator new(0x1000uLL);
      v565 = (char *)v114;
      if (v113 != v114)
      {
LABEL_838:
        *((_QWORD *)v565 - 1) = v564;
        v547 = a2;
        p_shared_weak_owners = *((_QWORD *)a2 + 40);
        v106 = *((_QWORD *)a2 + 41);
        *((_QWORD *)a2 + 40) = p_shared_weak_owners - 8;
        jj = *(std::__shared_weak_count **)(p_shared_weak_owners - 8);
        *((_QWORD *)a2 + 40) = p_shared_weak_owners;
        if (v106 != *((_QWORD *)a2 + 42))
        {
LABEL_862:
          *(_QWORD *)v106 = jj;
          goto LABEL_863;
        }
        v113 = *((_QWORD *)a2 + 39);
        if (p_shared_weak_owners > v113)
        {
          v613 = (uint64_t)(p_shared_weak_owners - v113) >> 3;
          if (v613 >= -1)
            v614 = v613 + 1;
          else
            v614 = v613 + 2;
          v615 = v614 >> 1;
          v113 = p_shared_weak_owners - 8 * (v614 >> 1);
          v616 = v106 - p_shared_weak_owners;
          if (v616)
          {
            memmove((void *)(p_shared_weak_owners - 8 * (v614 >> 1)), (const void *)p_shared_weak_owners, v616);
            v547 = a2;
            p_shared_weak_owners = *((_QWORD *)a2 + 40);
          }
          else
          {
            v547 = a2;
          }
          v106 = v113 + v616;
          *((_QWORD *)v547 + 40) = p_shared_weak_owners - 8 * v615;
          *((_QWORD *)v547 + 41) = v106;
          goto LABEL_862;
        }
        if (v106 == v113)
          v224 = 1;
        else
          v224 = (uint64_t)(v106 - v113) >> 2;
        if (v224 >> 61)
          goto LABEL_1064;
        v617 = (char *)operator new(8 * v224);
        v618 = v224 >> 2;
        v619 = &v617[8 * (v224 >> 2)];
        v620 = v106 - p_shared_weak_owners;
        v38 = v106 == p_shared_weak_owners;
        v106 = (uint64_t)v619;
        if (!v38)
        {
          v106 = (uint64_t)&v619[v620 & 0xFFFFFFFFFFFFFFF8];
          v621 = v620 - 8;
          if (v621 < 0x38)
          {
            v622 = &v617[8 * (v224 >> 2)];
            goto LABEL_859;
          }
          v623 = 8 * v618;
          v624 = (unint64_t)&v617[8 * v618 - p_shared_weak_owners];
          v622 = &v617[8 * (v224 >> 2)];
          if (v624 < 0x20)
          {
            do
            {
LABEL_859:
              v631 = *(std::__shared_weak_count_vtbl **)p_shared_weak_owners;
              p_shared_weak_owners += 8;
              *(_QWORD *)v622 = v631;
              v622 += 8;
            }
            while (v622 != (char *)v106);
            goto LABEL_860;
          }
          v625 = (v621 >> 3) + 1;
          v626 = 8 * (v625 & 0x3FFFFFFFFFFFFFFCLL);
          v622 = &v619[v626];
          v627 = (__int128 *)(p_shared_weak_owners + 16);
          v628 = &v617[v623 + 16];
          v629 = v625 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v630 = *v627;
            *((_OWORD *)v628 - 1) = *(v627 - 1);
            *(_OWORD *)v628 = v630;
            v627 += 2;
            v628 += 32;
            v629 -= 4;
          }
          while (v629);
          if (v625 != (v625 & 0x3FFFFFFFFFFFFFFCLL))
          {
            p_shared_weak_owners += v626;
            goto LABEL_859;
          }
        }
LABEL_860:
        v547 = a2;
        *((_QWORD *)a2 + 39) = v617;
        *((_QWORD *)a2 + 40) = v619;
        *((_QWORD *)a2 + 41) = v106;
        *((_QWORD *)a2 + 42) = &v617[8 * v224];
        if (v113)
        {
          operator delete((void *)v113);
          v106 = *((_QWORD *)a2 + 41);
        }
        goto LABEL_862;
      }
      if (jj == (std::__shared_weak_count *)v114)
        v566 = 1;
      else
        v566 = (uint64_t)v224 >> 2;
      if (v566 >> 61)
        goto LABEL_1064;
      v567 = (char *)operator new(8 * v566);
      v568 = (v566 + 3) >> 2;
      v565 = &v567[8 * v568];
      v569 = &v567[8 * v566];
      v570 = v565;
      if (jj != (std::__shared_weak_count *)v114)
      {
        v570 = &v565[((unint64_t)jj - v113) & 0xFFFFFFFFFFFFFFF8];
        v571 = (unint64_t)jj - v113 - 8;
        v572 = &v567[8 * v568];
        v573 = (uint64_t *)v114;
        if (v571 > 0x37)
        {
          v574 = 8 * v568;
          v572 = &v567[8 * v568];
          v573 = (uint64_t *)v114;
          if ((unint64_t)&v572[-v113] >= 0x20)
          {
            v575 = (v571 >> 3) + 1;
            v576 = 8 * (v575 & 0x3FFFFFFFFFFFFFFCLL);
            v572 = &v565[v576];
            v577 = (__int128 *)(v114 + 16);
            v578 = &v567[v574 + 16];
            v579 = v575 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v580 = *v577;
              *((_OWORD *)v578 - 1) = *(v577 - 1);
              *(_OWORD *)v578 = v580;
              v577 += 2;
              v578 += 32;
              v579 -= 4;
            }
            while (v579);
            if (v575 == (v575 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((_QWORD *)a2 + 39) = v567;
              *((_QWORD *)a2 + 40) = v565;
              *((_QWORD *)a2 + 41) = v570;
              *((_QWORD *)a2 + 42) = v569;
LABEL_837:
              operator delete((void *)v114);
              v565 = (char *)*((_QWORD *)a2 + 40);
              goto LABEL_838;
            }
            v573 = (uint64_t *)(v114 + v576);
          }
        }
        do
        {
          v612 = *v573++;
          *(_QWORD *)v572 = v612;
          v572 += 8;
        }
        while (v572 != v570);
      }
      *((_QWORD *)a2 + 39) = v567;
      *((_QWORD *)a2 + 40) = v565;
      *((_QWORD *)a2 + 41) = v570;
      *((_QWORD *)a2 + 42) = v569;
      if (!v114)
        goto LABEL_838;
      goto LABEL_837;
    }
    if (v553 == (char *)v113)
      p_shared_weak_owners = 1;
    else
      p_shared_weak_owners = (uint64_t)v224 >> 2;
    if (p_shared_weak_owners >> 61)
      goto LABEL_1064;
    v224 = (unint64_t)operator new(8 * p_shared_weak_owners);
    v554 = (std::__shared_weak_count_vtbl *)operator new(0x1000uLL);
    v555 = (std::__shared_weak_count *)(v224 + 8 * v552);
    v113 = v224 + 8 * p_shared_weak_owners;
    if (v552 == p_shared_weak_owners)
    {
      if (v106 < 1)
      {
        if (jj == (std::__shared_weak_count *)v114)
          p_shared_weak_owners = 1;
        else
          p_shared_weak_owners = v106 >> 2;
        if (p_shared_weak_owners >> 61)
          goto LABEL_1064;
        v581 = v554;
        v555 = (std::__shared_weak_count *)operator new(8 * p_shared_weak_owners);
        v113 = (unint64_t)v555 + 8 * p_shared_weak_owners;
        operator delete((void *)v224);
        v114 = *((_QWORD *)a2 + 40);
        jj = (std::__shared_weak_count *)*((_QWORD *)a2 + 41);
        v224 = (unint64_t)v555;
        v554 = v581;
      }
      else
      {
        v556 = v552 + 2;
        if (v552 >= -1)
          v556 = v552 + 1;
        v555 = (std::__shared_weak_count *)((char *)v555 - 8 * (v556 >> 1));
      }
    }
    v555->__vftable = v554;
    v106 = (uint64_t)&v555->__shared_owners_;
    if (jj == (std::__shared_weak_count *)v114)
    {
LABEL_798:
      v547 = a2;
      v582 = (void *)*((_QWORD *)a2 + 39);
      *((_QWORD *)a2 + 39) = v224;
      *((_QWORD *)a2 + 40) = v555;
      *((_QWORD *)a2 + 41) = v106;
      *((_QWORD *)a2 + 42) = v113;
      v546 = v795;
      if (v582)
        operator delete(v582);
      goto LABEL_864;
    }
    while (v555 != (std::__shared_weak_count *)v224)
    {
      v583 = v555;
      v584 = (char *)v106;
LABEL_801:
      v585 = jj[-1].__shared_weak_owners_;
      jj = (std::__shared_weak_count *)((char *)jj - 8);
      v583[-1].__shared_weak_owners_ = v585;
      p_shared_weak_owners = (unint64_t)&v583[-1].__shared_weak_owners_;
      v555 = (std::__shared_weak_count *)p_shared_weak_owners;
      v106 = (uint64_t)v584;
      if (jj == *((std::__shared_weak_count **)a2 + 40))
        goto LABEL_798;
    }
    if (v106 < v113)
    {
      v586 = (uint64_t)(v113 - v106) >> 3;
      if (v586 >= -1)
        v587 = v586 + 1;
      else
        v587 = v586 + 2;
      v584 = (char *)(v106 + 8 * (v587 >> 1));
      v583 = (std::__shared_weak_count *)((char *)v555 + 8 * (v587 >> 1));
      if ((std::__shared_weak_count *)v106 == v555)
      {
        v224 = v106;
      }
      else
      {
        memmove(&v555->__vftable + (v587 >> 1), v555, v106 - (_QWORD)v555);
        v224 = (unint64_t)v555;
      }
      goto LABEL_801;
    }
    if ((std::__shared_weak_count *)v113 == v555)
      v588 = 1;
    else
      v588 = (uint64_t)(v113 - (_QWORD)v555) >> 2;
    if (v588 >> 61)
      goto LABEL_1064;
    v589 = (char *)operator new(8 * v588);
    v224 = (unint64_t)v589;
    v590 = (v588 + 3) >> 2;
    v583 = (std::__shared_weak_count *)&v589[8 * v590];
    v584 = (char *)v583;
    v591 = v106 - (_QWORD)v555;
    if ((std::__shared_weak_count *)v106 != v555)
    {
      v584 = (char *)v583 + (v591 & 0xFFFFFFFFFFFFFFF8);
      v592 = v591 - 8;
      v593 = &v589[8 * v590];
      v594 = (uint64_t *)v555;
      if (v592 >= 0x38)
      {
        v595 = 8 * v590;
        v593 = &v589[8 * v590];
        v594 = (uint64_t *)v555;
        if ((unint64_t)(v593 - (char *)v555) >= 0x20)
        {
          v596 = (v592 >> 3) + 1;
          v597 = 8 * (v596 & 0x3FFFFFFFFFFFFFFCLL);
          v593 = (char *)v583 + v597;
          v598 = &v555->__shared_weak_owners_;
          v599 = &v589[v595 + 16];
          v600 = v596 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v601 = *(_OWORD *)v598;
            *((_OWORD *)v599 - 1) = *((_OWORD *)v598 - 1);
            *(_OWORD *)v599 = v601;
            v598 += 4;
            v599 += 32;
            v600 -= 4;
          }
          while (v600);
          if (v596 == (v596 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_821;
          v594 = (uint64_t *)((char *)v555 + v597);
        }
      }
      do
      {
        v602 = *v594++;
        *(_QWORD *)v593 = v602;
        v593 += 8;
      }
      while (v593 != v584);
    }
LABEL_821:
    v113 = (unint64_t)&v589[8 * v588];
    operator delete(v555);
    goto LABEL_801;
  }
LABEL_882:
  *(_QWORD *)&v820[8] = v220;
  objc_msgSend(*(id *)&__src[2], "setVisibilityResultMode:offset:", 0, 0);
  v641 = v814;
  if ((_QWORD)v814)
  {
    v642 = *((_QWORD *)&v814 + 1);
    v643 = v814;
    if (*((_QWORD *)&v814 + 1) == (_QWORD)v814)
    {
LABEL_892:
      *((_QWORD *)&v814 + 1) = v641;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v815.i64[1] + 40))(v815.i64[1], v643, v815.i64[0] - v643);
      goto LABEL_893;
    }
    while (1)
    {
      v644 = *(_QWORD **)(v642 - 8);
      if ((_QWORD *)(v642 - 32) == v644)
      {
        v644 = (_QWORD *)(v642 - 32);
        v645 = 4;
      }
      else
      {
        if (!v644)
          goto LABEL_887;
        v645 = 5;
      }
      (*(void (**)(void))(*v644 + 8 * v645))();
LABEL_887:
      v642 -= 64;
      if (v642 == v641)
      {
        v643 = v814;
        goto LABEL_892;
      }
    }
  }
LABEL_893:
  v646 = v816;
  if (!(_QWORD)v816)
    goto LABEL_908;
  v647 = v816;
  if (*((_QWORD *)&v816 + 1) == (_QWORD)v816)
    goto LABEL_907;
  v648 = *((_QWORD *)&v816 + 1) - 32;
  do
  {
    v650 = *(_QWORD **)(v648 + 24);
    if ((_QWORD *)v648 == v650)
    {
      v650 = (_QWORD *)v648;
      v651 = 4;
    }
    else
    {
      if (!v650)
        goto LABEL_902;
      v651 = 5;
    }
    (*(void (**)(void))(*v650 + 8 * v651))();
LABEL_902:
    if (*(_BYTE *)(v648 - 28))
      *(_BYTE *)(v648 - 28) = 0;
    if (*(_BYTE *)(v648 - 32))
      *(_BYTE *)(v648 - 32) = 0;
    v649 = v648 - 48;
    v648 -= 80;
  }
  while (v649 != v646);
  v647 = v816;
LABEL_907:
  *((_QWORD *)&v816 + 1) = v646;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v817.i64[1] + 40))(v817.i64[1], v647, v817.i64[0] - v647);
LABEL_908:
  v652 = *(_QWORD *)v820;
  if (*(_QWORD *)v820)
  {
    v653 = *(_QWORD *)&v820[8];
    v654 = *(_QWORD *)v820;
    if (*(_QWORD *)&v820[8] != *(_QWORD *)v820)
    {
      do
      {
        v655 = *(std::__shared_weak_count **)(v653 - 8);
        if (v655)
        {
          v656 = (unint64_t *)&v655->__shared_owners_;
          do
            v657 = __ldaxr(v656);
          while (__stlxr(v657 - 1, v656));
          if (!v657)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v655->__on_zero_shared)(v655, v654);
            std::__shared_weak_count::__release_weak(v655);
          }
        }
        v653 -= 24;
      }
      while (v653 != v652);
      v654 = *(_QWORD *)v820;
    }
    *(_QWORD *)&v820[8] = v652;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v820[24] + 40))(*(_QWORD *)&v820[24], v654, *(_QWORD *)&v820[16] - v654);
  }
  v658 = &v825;
  if (*((__int128 **)&v826 + 1) == &v825)
  {
    v659 = 4;
LABEL_923:
    (*(void (**)(void))(*(_QWORD *)v658 + 8 * v659))();
  }
  else if (*((_QWORD *)&v826 + 1))
  {
    v659 = 5;
    v658 = (__int128 *)*((_QWORD *)&v826 + 1);
    goto LABEL_923;
  }

  v660 = (std::__shared_weak_count *)*((_QWORD *)&__src[1] + 1);
  if (*((_QWORD *)&__src[1] + 1))
  {
    v661 = (unint64_t *)(*((_QWORD *)&__src[1] + 1) + 8);
    do
      v662 = __ldaxr(v661);
    while (__stlxr(v662 - 1, v661));
    if (!v662)
    {
      ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
      std::__shared_weak_count::__release_weak(v660);
    }
  }
  v348 = a2;
LABEL_930:
  v781 = (ggl::Device *)*((_QWORD *)v3 + 2);
  v663 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 40);
  v664 = v770;
  v665 = *((_QWORD *)v348 + 17);
  v771 = *((_QWORD *)v348 + 18);
  v799 = v664;
  if (v665 != v771)
  {
    v778 = *((_QWORD *)v3 + 4);
    v797 = *(ggl::MetalResourceManager **)(*((_QWORD *)v3 + 5) + 32);
    v784 = *(ggl::Device **)(*((_QWORD *)v3 + 5) + 24);
    v790 = (void *)*((_QWORD *)v3 + 9);
    while (2)
    {
      v775 = v665;
      v793 = (ggl::MetalResourceManager *)*((_QWORD *)v781 + 10);
      v666 = *(_QWORD **)(*(_QWORD *)v665 + 8);
      v667 = v666[21];
      v668 = *(_QWORD *)(v667 + 24);
      if (!v668)
      {
        v669 = objc_alloc_init(MEMORY[0x1E0CC6BC0]);
        v670 = *(const ggl::ShaderFunction **)(v667 + 48);
        v671 = *((_QWORD *)v670 + 3);
        if (!v671)
          v671 = ggl::MetalResourceManager::newShaderFunction(v793, v670, *(unsigned __int8 *)(v667 + 88), *(_QWORD *)(v667 + 96));
        v772 = *(id *)(v671 + 32);
        objc_msgSend(v669, "setTileFunction:");
        objc_msgSend(v669, "setThreadgroupSizeMatchesTileSize:", 1);
        if (*(_QWORD *)(v667 + 72))
        {
          v672 = 0;
          do
          {
            v673 = *(_DWORD *)(v667 + 56 + 4 * v672) - 1;
            if (v673 > 0x2A)
              v674 = 0;
            else
              v674 = qword_1A0083590[v673];
            objc_msgSend(v669, "colorAttachments");
            v675 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v675, "objectAtIndexedSubscript:", v672);
            v676 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v676, "setPixelFormat:", v674);

            ++v672;
          }
          while (v672 != *(_QWORD *)(v667 + 72));
        }
        objc_msgSend(v669, "setRasterSampleCount:", *(unsigned int *)(v667 + 80));
        v677 = *(id *)(*((_QWORD *)v793 + 32) + 104);
        *(_QWORD *)&__src[0] = 0;
        v678 = (void *)objc_msgSend(v677, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v669, 0, 0, __src);
        v679 = *(id *)&__src[0];

        if (v679)
        {
          objc_msgSend(v679, "localizedDescription");
          v680 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog((NSString *)CFSTR("PSO error: %@"), v680);

          v668 = 0;
        }
        else
        {
          {
            v754 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v754, "GeoGL", 0xA3D02C1100000005);
          }
          v668 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                      + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
          *(_QWORD *)v668 = 0;
          *(_WORD *)(v668 + 8) = 1281;
          *(_QWORD *)(v668 + 16) = 0;
          *(_QWORD *)(v668 + 24) = 0;
          *(_QWORD *)(v668 + 32) = 0;
          objc_storeStrong((id *)(v668 + 32), v678);
          v682 = (std::__shared_weak_count *)*((_QWORD *)v793 + 2);
          if (!v682 || (v683 = *((_QWORD *)v793 + 1), (v684 = std::__shared_weak_count::lock(v682)) == 0))
          {
            std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_1066:
            abort();
          }
          v685 = *(std::__shared_weak_count **)(v667 + 16);
          *(_QWORD *)(v667 + 8) = v683;
          *(_QWORD *)(v667 + 16) = v684;
          if (v685)
          {
            v686 = (unint64_t *)&v685->__shared_owners_;
            do
              v687 = __ldaxr(v686);
            while (__stlxr(v687 - 1, v686));
            if (!v687)
            {
              ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
              std::__shared_weak_count::__release_weak(v685);
            }
          }
          *(_QWORD *)(v667 + 24) = v668;
          ++*(_DWORD *)(v667 + 32);
        }

        v664 = v799;
        if (!v668)
          goto LABEL_932;
      }
      v688 = (unint64_t *)(v668 + 16);
      v689 = atomic_load((unint64_t *)(v668 + 16));
      if (v689 < v663)
      {
        do
        {
          v705 = __ldaxr(v688);
          if (v705 == v689)
          {
            if (!__stlxr(v663, v688))
              break;
          }
          else
          {
            __clrex();
          }
          v689 = v705;
        }
        while (v705 < v663);
      }
      v773 = *(id *)(v668 + 32);
      objc_msgSend(v664, "setRenderPipelineState:");
      v690 = **(_QWORD ***)(v666[21] + 40);
      v827 = 0u;
      v828 = 0u;
      v825 = 0u;
      v826 = 0u;
      memset(__src, 0, sizeof(__src));
      if (!v690[7])
        goto LABEL_980;
      v691 = 0;
      v692 = 0;
      v693 = 0;
      while (2)
      {
        v694 = (unsigned __int8 *)(v690[6] + 2 * v693);
        v695 = *v694;
        v696 = v694[1];
        if (v692)
        {
          if (v692 > 0xF || v691 + v692 != v696)
          {
            objc_msgSend(v799, "setTileBuffers:offsets:withRange:", __src, v820, v691, v692);
            v692 = 0;
            goto LABEL_962;
          }
        }
        else
        {
LABEL_962:
          v691 = v696;
        }
        v697 = *(_QWORD *)(v666[5] + 16 * v695);
        if (v697)
        {
          v698 = *(_QWORD *)(*(_QWORD *)(v697 + 24) + 24);
          v699 = (unint64_t *)(v698 + 16);
          v700 = atomic_load((unint64_t *)(v698 + 16));
          if (v700 < v663)
          {
            do
            {
              v704 = __ldaxr(v699);
              if (v704 == v700)
              {
                if (!__stlxr(v663, v699))
                  break;
              }
              else
              {
                __clrex();
              }
              v700 = v704;
            }
            while (v704 < v663);
          }
          v701 = *(void **)(v698 + 32);
          v702 = v701;
          objc_storeStrong((id *)__src + v692, v701);
          v703 = v797;
          if (*(_DWORD *)(v697 + 112) <= 1u)
            v703 = 0;
          *(_QWORD *)&v820[8 * v692] = *(_QWORD *)(v697 + 40) + (_QWORD)v703 * *(_QWORD *)(v697 + 120);

          ++v692;
        }
        if ((unint64_t)++v693 < v690[7])
          continue;
        break;
      }
      if (v692)
        objc_msgSend(v799, "setTileBuffers:offsets:withRange:", __src, v820, v691, v692);
LABEL_980:

      v706 = (std::mutex **)v666[1];
      v707 = (std::mutex **)v666[2];
      if (v706 == v707)
      {
LABEL_981:
        v827 = 0u;
        v828 = 0u;
        v825 = 0u;
        v826 = 0u;
        memset(__src, 0, sizeof(__src));
        v708 = v799;
        if (!v690[5])
          goto LABEL_1025;
        v709 = 0;
        v710 = 0;
        v711 = 0;
        v712 = 0;
        while (2)
        {
          v713 = (unsigned __int8 *)(v690[4] + v709);
          v714 = *v713;
          v715 = v713[1];
          if (v711)
          {
            if (v711 > 0xF || v710 + v711 != v715)
            {
              objc_msgSend(v708, "setTileBuffers:offsets:withRange:", __src, v820, v710, v711);
              v711 = 0;
              goto LABEL_988;
            }
          }
          else
          {
LABEL_988:
            v710 = v715;
          }
          v716 = *(_QWORD *)(v666[1] + 16 * v714);
          if (v716)
          {
            v717 = *(void **)(*(_QWORD *)(*(_QWORD *)(v716 + 24) + 24) + 32);
            v718 = v717;
            objc_storeStrong((id *)__src + v711, v717);
            v719 = v797;
            if (*(_DWORD *)(v716 + 112) <= 1u)
              v719 = 0;
            *(_QWORD *)&v820[8 * v711] = *(_QWORD *)(v716 + 40) + (_QWORD)v719 * *(_QWORD *)(v716 + 120);

            ++v711;
          }
          ++v712;
          v709 += 2;
          v708 = v799;
          if (v712 < v690[5])
            continue;
          break;
        }
        if (v711)
          objc_msgSend(v799, "setTileBuffers:offsets:withRange:", __src, v820, v710, v711);
LABEL_1025:

        v735 = v799;
        if (v690[9])
        {
          v736 = 0;
          while (2)
          {
            v737 = (unsigned __int8 *)(v690[8] + 2 * v736);
            v738 = *v737;
            v739 = v737[1];
            v740 = *(unsigned __int8 *)(v690[10] + 2 * v736 + 1);
            if (*(_QWORD *)(v666[9] + 8 * v738))
              v741 = *(id *)(v666[9] + 8 * v738);
            else
              v741 = v790;
            v742 = (ggl::MetalTextureResource *)*((_QWORD *)v741 + 3);
            if (!v742)
            {
              if (*((_DWORD *)v741 + 14) == 4)
                v742 = ggl::MetalResourceManager::prepareTexture((std::__shared_weak_count **)v793, (const ggl::Texture *)v741, v663);
              else
                v742 = 0;
            }
            v743 = (unint64_t *)((char *)v742 + 16);
            v744 = atomic_load((unint64_t *)v742 + 2);
            if (v744 < v663)
            {
              do
              {
                v747 = __ldaxr(v743);
                if (v747 == v744)
                {
                  if (!__stlxr(v663, v743))
                    break;
                }
                else
                {
                  __clrex();
                }
                v744 = v747;
              }
              while (v747 < v663);
            }
            SamplerStateResource = ggl::MetalResourceManager::getSamplerStateResource(v793, (const ggl::Texture *)v741);
            if (!SamplerStateResource)
              goto LABEL_1027;
            if (*((_BYTE *)v742 + 120) == 1)
            {
              v746 = (id *)(*((_QWORD *)v742 + 4) + 8 * *((unsigned int *)v742 + 16));
LABEL_1046:
              v741 = *v746;
            }
            else if (!*((_BYTE *)v742 + 120))
            {
              v746 = (id *)*((_QWORD *)v742 + 4);
              goto LABEL_1046;
            }
            objc_msgSend(v735, "setTileTexture:atIndex:", v741, v739);
            v748 = (unint64_t *)(SamplerStateResource + 16);
            v749 = atomic_load((unint64_t *)(SamplerStateResource + 16));
            if (v749 < v663)
            {
              do
              {
                v751 = __ldaxr(v748);
                if (v751 == v749)
                {
                  if (!__stlxr(v663, v748))
                    break;
                }
                else
                {
                  __clrex();
                }
                v749 = v751;
              }
              while (v751 < v663);
            }
            v750 = *(id *)(SamplerStateResource + 32);
            objc_msgSend(v735, "setTileSamplerState:atIndex:", v750, v740);

            v735 = v799;
LABEL_1027:
            if ((unint64_t)++v736 >= v690[9])
              break;
            continue;
          }
        }
        v752 = objc_msgSend(v735, "tileWidth");
        v753 = objc_msgSend(v735, "tileHeight");
        *(_QWORD *)&__src[0] = v752;
        *((_QWORD *)&__src[0] + 1) = v753;
        *(_QWORD *)&__src[1] = 1;
        objc_msgSend(v735, "dispatchThreadsPerTile:", __src);

        v664 = v799;
LABEL_932:
        v665 = v775 + 8;
        if (v775 + 8 == v771)
          goto LABEL_1057;
        continue;
      }
      break;
    }
    while (2)
    {
      v722 = *v706;
      if (*v706)
      {
        if (!*(_QWORD *)&v722->__m_.__opaque[16])
          ggl::BufferData::prepareBufferForDevice(*v706, v781, 0);
        if (v722->__m_.__opaque[10] == 1
          && (ggl::Device *)v722[3].__m_.__sig != v784
          && *(_DWORD *)&v722[1].__m_.__opaque[40])
        {
          v722[3].__m_.__sig = (uint64_t)v784;
          *(_OWORD *)&v722->__m_.__opaque[48] = *(_OWORD *)&v722->__m_.__opaque[32];
        }
        v723 = v797;
        if (*(_DWORD *)&v722[1].__m_.__opaque[40] <= 1u)
          v723 = 0;
        v724 = *(int64x2_t *)&v722->__m_.__opaque[48];
        v725 = vaddq_s64(vdupq_n_s64((_QWORD)v723 * *(_QWORD *)&v722[1].__m_.__opaque[48]), v724);
        *(_QWORD *)&v722->__m_.__opaque[48] = 0;
        v722[1].__m_.__sig = 0;
        v726 = *(const ggl::Buffer **)&v722->__m_.__opaque[16];
        *(_QWORD *)&__src[0] = *(_QWORD *)v722[1].__m_.__opaque + v724.i64[0];
        *((_QWORD *)&__src[0] + 1) = v726;
        __src[1] = v725;
        *((_QWORD *)&__src[3] + 1) = 0;
        v727 = *v706;
        v728 = *(_QWORD *)&(*v706)->__m_.__opaque[16];
        if (*(_DWORD *)&(*v706)[1].__m_.__opaque[40] >= 2u && !*(_QWORD *)&v727[1].__m_.__opaque[32])
          *(_QWORD *)&v727[1].__m_.__opaque[32] = v778;
        if ((vmovn_s64(vceqq_s64(v725, vdupq_laneq_s64(v725, 1))).u8[0] & 1) == 0)
        {
          v729 = (_QWORD *)*((_QWORD *)v726 + 3);
          if (v729 || (v729 = ggl::MetalResourceManager::newBuffer(v793, v726)) != 0)
          {
            v730 = (void *)v729[4];
            if (v730)
            {
              v731 = objc_msgSend(v730, "contents");
              memcpy((void *)(v731 + *(_QWORD *)&__src[1]), *(const void **)&__src[0], *((_QWORD *)&__src[1] + 1) - *(_QWORD *)&__src[1]);
              if (*((_QWORD *)&__src[3] + 1))
                (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)&__src[3] + 1) + 48))(*((_QWORD *)&__src[3] + 1), __src);
            }
          }
        }
        v732 = (unint64_t *)(*(_QWORD *)(v728 + 24) + 16);
        v733 = atomic_load(v732);
        if (v733 < v663)
        {
          do
          {
            v734 = __ldaxr(v732);
            if (v734 == v733)
            {
              if (!__stlxr(v663, v732))
                break;
            }
            else
            {
              __clrex();
            }
            v733 = v734;
          }
          while (v734 < v663);
        }
        v720 = (_QWORD *)*((_QWORD *)&__src[3] + 1);
        if (*((_OWORD **)&__src[3] + 1) == &__src[2])
        {
          v720 = &__src[2];
          v721 = 4;
          goto LABEL_994;
        }
        if (*((_QWORD *)&__src[3] + 1))
        {
          v721 = 5;
LABEL_994:
          (*(void (**)(void))(*v720 + 8 * v721))();
        }
      }
      v706 += 2;
      if (v706 == v707)
        goto LABEL_981;
      continue;
    }
  }
LABEL_1057:

}

void sub_19FF212CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v48;

  _Unwind_Resume(a1);
}

void ggl::ProcessQueryItemContext::~ProcessQueryItemContext(ggl::ProcessQueryItemContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D7E50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D7E50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::doRenderWork(ggl::CommandBuffer *)::$_0>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t *a2)
{
  ggl::MetalRenderItemEncoder::encode(*(_QWORD *)(a1 + 8), *a2);
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D7EE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D7E98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0,std::allocator<ggl::MetalDeviceContext::processBuffer(ggl::CommandBuffer *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D7E98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 __Block_byref_object_copy__40439(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__40440(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(id *this)
{
  char *v2;
  char *v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = (char *)this[11];
  if (!v2)
    goto LABEL_16;
  v3 = (char *)this[12];
  v4 = this[11];
  if (v3 == v2)
    goto LABEL_15;
  v5 = v3 - 32;
  do
  {
    v7 = (char *)*((_QWORD *)v5 + 3);
    if (v5 == v7)
    {
      v7 = v5;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_10:
    if (*(v5 - 28))
      *(v5 - 28) = 0;
    if (*(v5 - 32))
      *(v5 - 32) = 0;
    v6 = v5 - 48;
    v5 -= 80;
  }
  while (v6 != v2);
  v4 = this[11];
LABEL_15:
  this[12] = v2;
  (*(void (**)(id, _BYTE *, int64_t))(*(_QWORD *)this[14] + 40))(this[14], v4, (_BYTE *)this[13] - v4);
LABEL_16:
  v9 = (char *)this[7];
  if (v9)
  {
    v10 = (char *)this[8];
    v11 = this[7];
    if (v10 == v9)
    {
LABEL_26:
      this[8] = v9;
      (*(void (**)(id, _BYTE *, int64_t))(*(_QWORD *)this[10] + 40))(this[10], v11, (_BYTE *)this[9] - v11);
      goto LABEL_27;
    }
    while (2)
    {
      v12 = (char *)*((_QWORD *)v10 - 1);
      if (v10 - 32 != v12)
      {
        if (v12)
        {
          v13 = 5;
LABEL_20:
          (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
        }
        v10 -= 64;
        if (v10 == v9)
        {
          v11 = this[7];
          goto LABEL_26;
        }
        continue;
      }
      break;
    }
    v12 = v10 - 32;
    v13 = 4;
    goto LABEL_20;
  }
LABEL_27:
  v14 = (std::__shared_weak_count *)this[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E67D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E67D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::atomic<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E66B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E66B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ___ZL32GEOGetGeoGLMetalDeviceContextLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalDeviceContext");
  v1 = (void *)GEOGetGeoGLMetalDeviceContextLog(void)::log;
  GEOGetGeoGLMetalDeviceContextLog(void)::log = (uint64_t)v0;

}

void ggl::ClearCache::~ClearCache(ggl::ClearCache *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = *((_QWORD *)this + 13);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, v4);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v4, *((_QWORD *)this + 15) - v4);
  }
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    v7 = *((_QWORD *)this + 10);
    v8 = *((_QWORD *)this + 9);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v9->__on_zero_shared)(v9, v8);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 64;
      }
      while (v7 != v6);
      v8 = *((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v8, *((_QWORD *)this + 11) - v8);
  }
  v12 = (_QWORD *)*((_QWORD *)this + 4);
  if (v12)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 5);
    v14 = *((_QWORD *)this + 4);
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 8))(v15, v14);
      }
      while (v13 != v12);
      v14 = *((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v14, *((_QWORD *)this + 6) - v14);
  }
  v17 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v18 = *((_QWORD *)this + 1);
    v19 = *(_QWORD *)this;
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v19);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = *(_QWORD *)this;
    }
    *((_QWORD *)this + 1) = v17;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v19, *((_QWORD *)this + 2) - v19);
  }
}

void std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MetalBindingManager::~MetalBindingManager(ggl::MetalBindingManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }

}

uint64_t ggl::CullingGridWithHeight::intersectedCellsForView(uint64_t a1, float *a2)
{
  unint64_t v3;
  uint64_t result;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  char v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;

  v3 = 0;
  result = 0;
  v98 = a2[1];
  v99 = *a2;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  v106 = a2[9];
  v107 = a2[8];
  v8 = a2[12];
  v9 = a2[13];
  v96 = a2[3];
  v97 = a2[2];
  v104 = a2[10];
  v105 = a2[6];
  v102 = v5;
  v103 = a2[11];
  v10 = (float *)(a1 + 4);
  v11 = 0.25;
  v12 = a2[14];
  v13 = a2[15];
  v100 = v7;
  v101 = v6;
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = (float)v3 * v11;
    v109 = v98 * v16;
    v110 = v99 * v16;
    v108 = v97 * v16;
    v17 = v96 * v16;
    v18 = (float)((int)v3 + 1) * v11;
    v19 = v99 * v18;
    v20 = v98 * v18;
    v21 = v97 * v18;
    v22 = v96 * v18;
    v23 = v10;
    do
    {
      v24 = *(v23 - 1);
      v25 = (float)v15 * v11;
      v26 = v5 * v25;
      v27 = (float)(v5 * v25) + v110;
      v28 = v8 + (float)(v107 * v24);
      v29 = v7 * v25;
      v30 = (float)(v7 * v25) + v17;
      v31 = v13 + (float)(v103 * v24);
      v32 = v31 + v30;
      if ((float)(v28 + v27) <= (float)(v31 + v30))
      {
        if ((float)(v28 + v27) >= (float)-v32)
          v33 = 0;
        else
          v33 = 2;
      }
      else
      {
        v33 = 1;
      }
      v34 = v6 * v25;
      v35 = (float)(v6 * v25) + v109;
      v36 = v9 + (float)(v106 * v24);
      if ((float)(v36 + v35) <= v32)
      {
        if ((float)(v36 + v35) < (float)-v32)
          v33 |= 8u;
      }
      else
      {
        v33 |= 4u;
      }
      v37 = v105 * v25;
      v38 = v37 + v108;
      v39 = v12 + (float)(v104 * v24);
      v40 = v39 + (float)(v37 + v108);
      if (v40 <= v32)
      {
        if (v40 < (float)-v32)
          v33 |= 0x20u;
      }
      else
      {
        v33 |= 0x10u;
      }
      v41 = v26 + v19;
      v42 = v28 + (float)(v26 + v19);
      v43 = v29 + v22;
      v44 = v31 + (float)(v29 + v22);
      if (v42 <= v44)
      {
        if (v42 >= (float)-v44)
          v45 = 0;
        else
          v45 = 2;
      }
      else
      {
        v45 = 1;
      }
      v46 = v34 + v20;
      v47 = v36 + (float)(v34 + v20);
      if (v47 <= v44)
      {
        if (v47 < (float)-v44)
          v45 |= 8u;
      }
      else
      {
        v45 |= 4u;
      }
      v48 = *v23;
      v49 = v37 + v21;
      v50 = v39 + (float)(v37 + v21);
      if (v50 <= v44)
      {
        if (v50 < (float)-v44)
          v45 |= 0x20u;
      }
      else
      {
        v45 |= 0x10u;
      }
      v51 = v15 + 1;
      v52 = (float)(v15 + 1) * 0.25;
      v53 = v5 * v52;
      v54 = (float)(v5 * v52) + v19;
      v55 = v7 * v52;
      v56 = (float)(v7 * v52) + v22;
      v57 = v31 + v56;
      if ((float)(v28 + v54) <= (float)(v31 + v56))
      {
        if ((float)(v28 + v54) >= (float)-v57)
          v58 = 0;
        else
          v58 = 2;
      }
      else
      {
        v58 = 1;
      }
      v59 = v6 * v52;
      v60 = (float)(v6 * v52) + v20;
      if ((float)(v36 + v60) <= v57)
      {
        if ((float)(v36 + v60) < (float)-v57)
          v58 |= 8u;
      }
      else
      {
        v58 |= 4u;
      }
      v61 = v105 * v52;
      v62 = (float)(v105 * v52) + v21;
      if ((float)(v39 + v62) <= v57)
      {
        if ((float)(v39 + v62) < (float)-v57)
          v58 |= 0x20u;
      }
      else
      {
        v58 |= 0x10u;
      }
      v6 = v101;
      v63 = v53 + v110;
      v64 = v28 + v63;
      v65 = v55 + v17;
      v66 = v31 + v65;
      if (v64 <= (float)(v31 + v65))
      {
        if (v64 >= (float)-v66)
          v67 = 0;
        else
          v67 = 2;
      }
      else
      {
        v67 = 1;
      }
      v68 = v59 + v109;
      v69 = v36 + (float)(v59 + v109);
      if (v69 <= v66)
      {
        if (v69 < (float)-v66)
          v67 |= 8u;
      }
      else
      {
        v67 |= 4u;
      }
      v70 = v61 + v108;
      v71 = v39 + (float)(v61 + v108);
      if (v71 <= v66)
      {
        if (v71 < (float)-v66)
          v67 |= 0x20u;
      }
      else
      {
        v67 |= 0x10u;
      }
      v72 = v107 * v48;
      v73 = (float)((float)(v107 * v48) + v8) + v27;
      v74 = v103 * v48;
      v75 = (float)((float)(v103 * v48) + v13) + v30;
      if (v73 <= v75)
      {
        if (v73 >= (float)-v75)
          v76 = 0;
        else
          v76 = 2;
      }
      else
      {
        v76 = 1;
      }
      v77 = v106 * v48;
      v78 = (float)((float)(v106 * v48) + v9) + v35;
      if (v78 <= v75)
      {
        if (v78 < (float)-v75)
          v76 |= 8u;
      }
      else
      {
        v76 |= 4u;
      }
      v79 = v104 * v48;
      v80 = (float)(v79 + v12) + v38;
      if (v80 <= v75)
      {
        if (v80 < (float)-v75)
          v76 |= 0x20u;
      }
      else
      {
        v76 |= 0x10u;
      }
      v81 = (float)(v72 + v41) + v8;
      v82 = (float)(v74 + v43) + v13;
      if (v81 <= v82)
      {
        if (v81 >= (float)-v82)
          v83 = 0;
        else
          v83 = 2;
      }
      else
      {
        v83 = 1;
      }
      v84 = (float)(v77 + v46) + v9;
      if (v84 <= v82)
      {
        if (v84 < (float)-v82)
          v83 |= 8u;
      }
      else
      {
        v83 |= 4u;
      }
      v5 = v102;
      v85 = (float)(v79 + v49) + v12;
      if (v85 <= v82)
      {
        if (v85 < (float)-v82)
          v83 |= 0x20u;
      }
      else
      {
        v83 |= 0x10u;
      }
      v7 = v100;
      v86 = (float)(v72 + v54) + v8;
      v87 = (float)(v74 + v56) + v13;
      if (v86 <= v87)
      {
        if (v86 >= (float)-v87)
          v88 = 0;
        else
          v88 = 2;
      }
      else
      {
        v88 = 1;
      }
      v89 = (float)(v77 + v60) + v9;
      if (v89 <= v87)
      {
        if (v89 < (float)-v87)
          v88 |= 8u;
      }
      else
      {
        v88 |= 4u;
      }
      v90 = (float)(v79 + v62) + v12;
      if (v90 <= v87)
      {
        if (v90 < (float)-v87)
          v88 |= 0x20u;
      }
      else
      {
        v88 |= 0x10u;
      }
      v11 = 0.25;
      v91 = (float)(v72 + v63) + v8;
      v92 = (float)(v74 + v65) + v13;
      if (v91 <= v92)
      {
        if (v91 >= (float)-v92)
          v93 = 0;
        else
          v93 = 2;
      }
      else
      {
        v93 = 1;
      }
      v94 = (float)(v77 + v68) + v9;
      if (v94 <= v92)
      {
        if (v94 < (float)-v92)
          v93 |= 8u;
      }
      else
      {
        v93 |= 4u;
      }
      v95 = (float)(v79 + v70) + v12;
      if (v95 <= v92)
      {
        if (v95 < (float)-v92)
          v93 |= 0x20u;
      }
      else
      {
        v93 |= 0x10u;
      }
      if ((v45 & v33 & v58 & v67 & v76 & v83 & v88 & v93) == 0)
        result = (1 << ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v14 & 2 | v3 & 1] << (4 * LOBYTE(ggl::CullingGrid::bitForCell(unsigned char,unsigned char)::clockwiseOrder[v15 & 2 | (v3 >> 1) & 1]))) | result;
      v14 += 2;
      v23 += 8;
      ++v15;
    }
    while (v51 != 4);
    ++v3;
    v10 += 2;
  }
  while (v3 != 4);
  return result;
}

uint64_t ggl::Data::operator=(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  void *v6;
  const void *v7;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  malloc_zone_t *v16;

  if (*(_QWORD *)(a1 + 8))
  {
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v9 + 24) = "GeoGL";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "GeoGL";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v9;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 8), 0);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    {
      v13 = operator new();
      *(_QWORD *)(v13 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v13 + 24) = "GeoGL";
      *(_OWORD *)(v13 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v13 = &off_1E42B5668;
      *(_QWORD *)(v13 + 8) = "GeoGL";
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(_OWORD *)(v13 + 200) = 0u;
      *(_OWORD *)(v13 + 216) = 0u;
      *(_OWORD *)(v13 + 232) = 0u;
      *(_QWORD *)(v13 + 248) = 0;
      *(_OWORD *)(v13 + 56) = 0u;
      v14 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 56), 0);
      if ((_DWORD)v14)
        geo::read_write_lock::logFailure(v14, (uint64_t)"initialization", v15);
      v16 = malloc_create_zone(0, 0);
      *(_QWORD *)(v13 + 48) = v16;
      malloc_set_zone_name(v16, "GeoGL");
      *(_QWORD *)(v13 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v13;
    }
    v6 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                     + 16))(ggl::Allocator::instance(void)::alloc, *(_QWORD *)(a2 + 16), 8);
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(const void **)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    memcpy(v6, v7, *(_QWORD *)(a2 + 16));
  }
  return a1;
}

ggl::Data *ggl::Data::Data(ggl::Data *this, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E42BB980;
  if (a2)
  {
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v6 + 24) = "GeoGL";
      *(_OWORD *)(v6 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v6 = &off_1E42B5668;
      *(_QWORD *)(v6 + 8) = "GeoGL";
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_QWORD *)(v6 + 248) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
      if ((_DWORD)v7)
        geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v6 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v6;
    }
    *((_QWORD *)this + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                                 + 16))(ggl::Allocator::instance(void)::alloc, a2, 8);
    *((_QWORD *)this + 2) = a2;
  }
  return this;
}

ggl::Data *ggl::Data::Data(ggl::Data *this, const unsigned __int8 *a2, size_t a3)
{
  unsigned __int8 v6;
  void *v7;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E42BB980;
  if (a3)
  {
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v9 + 24) = "GeoGL";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "GeoGL";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v9;
    }
    v7 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                     + 16))(ggl::Allocator::instance(void)::alloc, a3, 8);
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = a3;
    memcpy(v7, a2, a3);
  }
  return this;
}

void std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5F18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5F18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5FA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5FA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6DE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void ggl::Clear::ClearPipelineState::~ClearPipelineState(ggl::Clear::ClearPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Clear::ClearPipelineState::ClearPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, int a5)
{
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  char v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v18;
  ggl::ClearShader *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];

  if ((v6 & 1) == 0)
  {
    v18 = a5;
    v27 = a3;
    v28 = a4;
    v26 = a2;
    a2 = v26;
    a3 = v27;
    a4 = v28;
    a5 = v18;
    if ((_DWORD)v19)
    {
      if ((v20 & 1) == 0)
      {
        if ((_DWORD)v19)
        {
          if ((v23 & 1) == 0
          {
            if ((v25 & 1) == 0
            {
              ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
            }
            ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
            unk_1ECE36128 = 1;
          }
          ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE360C8 = &ggl::Clear::pipelineDataClearPipelineDeviceStructs(void)::ref;
          qword_1ECE360D0 = 0;
          if ((v24 & 1) == 0
          {
            ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref = (uint64_t)ggl::Clear::ClearConstants::reflection(void)::reflection;
          }
          qword_1ECE360D8 = (uint64_t)&ggl::Clear::pipelineDataClearPipelineConstantStructs(void)::ref;
          unk_1ECE360E0 = xmmword_19FFB3350;
        }
      }
      ggl::Clear::ClearPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Clear::ClearPipelineSetup::typedReflection(void)::ref;
      ggl::ClearShader::typedReflection(v19);
      qword_1EE585E10 = (uint64_t)&ggl::ClearShader::typedReflection(void)::ref;
      if ((v21 & 1) == 0
      {
        ggl::Clear::pipelineStateClearPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE581430 = 0;
        qword_1EE581438 = (uint64_t)"";
        dword_1EE581440 = 0;
        qword_1EE581448 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineAttributeBinding_0(void)::attr;
        unk_1EE581450 = 1;
      }
      qword_1EE585E18 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineAttributeStructBinding(void)::attr;
      unk_1EE585E20 = 1;
      qword_1EE585E28 = 0;
      unk_1EE585E30 = 0;
      qword_1EE585E38 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineDeviceStructBinding(void)::ref;
      unk_1EE585E40 = 0;
      if ((v22 & 1) == 0
      {
        ggl::Clear::pipelineStateClearPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE581400 = 0;
        qword_1EE581408 = (uint64_t)"clearConstants";
        dword_1EE581410 = 3;
        qword_1EE581418 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineConstantClearConstantsBinding(void)::reflection;
        unk_1EE581420 = 2;
      }
      qword_1EE585E48 = (uint64_t)&ggl::Clear::pipelineStateClearPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE585E50 = 1;
      a5 = v18;
      a3 = v27;
      a4 = v28;
      a2 = v26;
    }
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_OWORD *)v31 = *(_OWORD *)a3;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a3 + 12);
  v11 = *(_OWORD *)(a3 + 28);
  v12 = *(_BYTE *)(a3 + 44);
  v29 = *a4;
  v30 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Clear::ClearPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v29;
  *(_OWORD *)(a1 + 272) = v30;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = a5;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v31;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v31[12];
  *(_OWORD *)(a1 + 92) = v11;
  *(_BYTE *)(a1 + 108) = v12;
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_1E42BBC78;
  return a1;
}

void ggl::Clear::ClearPipelineSetup::~ClearPipelineSetup(ggl::Clear::ClearPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Clear::ClearPipelineSetup::textureIsEnabled(ggl::Clear::ClearPipelineSetup *this)
{
  return 0;
}

void ggl::CommonLibrary::~CommonLibrary(ggl::CommonLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::CommonLibraryMTLData::~CommonLibraryMTLData(ggl::CommonLibraryMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::CommonLibraryMTLData::CommonLibraryMTLData(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int8 v4;
  uint64_t result;
  int v6;

  v2 = a2;
  if ((v4 & 1) == 0)
  {
    v2 = a2;
    if (v6)
    {
      commonLibraryFunctionIds(void)::ids = ggl::crc32::compute<30ul>("ClearDepthStencilShaderVertex");
      dword_1ECE44E64 = ggl::crc32::compute<32ul>("ClearDepthStencilShaderFragment");
      dword_1ECE44E68 = ggl::crc32::compute<18ul>("ClearShaderVertex");
      dword_1ECE44E6C = ggl::crc32::compute<20ul>("ClearShaderFragment");
      dword_1ECE44E70 = ggl::crc32::compute<19ul>("Clear2ShaderVertex");
      dword_1ECE44E74 = ggl::crc32::compute<21ul>("Clear2ShaderFragment");
      dword_1ECE44E78 = ggl::crc32::compute<19ul>("Clear3ShaderVertex");
      dword_1ECE44E7C = ggl::crc32::compute<21ul>("Clear3ShaderFragment");
      dword_1ECE44E80 = ggl::crc32::compute<19ul>("Clear4ShaderVertex");
      dword_1ECE44E84 = ggl::crc32::compute<21ul>("Clear4ShaderFragment");
      dword_1ECE44E88 = ggl::crc32::compute<24ul>("ColoredTextShaderVertex");
      dword_1ECE44E8C = ggl::crc32::compute<26ul>("ColoredTextShaderFragment");
      dword_1ECE44E90 = ggl::crc32::compute<24ul>("ShadedColorShaderVertex");
      dword_1ECE44E94 = ggl::crc32::compute<26ul>("ShadedColorShaderFragment");
      dword_1ECE44E98 = ggl::crc32::compute<24ul>("TextureRectShaderVertex");
      dword_1ECE44E9C = ggl::crc32::compute<26ul>("TextureRectShaderFragment");
      v2 = a2;
    }
  }
  result = ggl::MTLShaderLibraryData::MTLShaderLibraryData((uint64_t)a1, 0, v2, (uint64_t)&commonLibraryFunctionIds(void)::ids, (uint64_t)commonLibraryMTLFunctionSignatures(void)::signatures, 0x10uLL);
  *a1 = &off_1E42BAB50;
  return result;
}

void ggl::MetalResourceManager::~MetalResourceManager(dispatch_queue_t *this)
{
  ggl::MetalResourceManager::~MetalResourceManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  dispatch_queue_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;

  *this = (dispatch_queue_t)&off_1E42BAB90;
  dispatch_barrier_sync(this[34], &__block_literal_global_40601);
  v2 = this[34];
  this[34] = 0;

  v3 = (uint64_t *)this[35];
  if (v3 != (uint64_t *)this[36])
  {
    while (1)
    {
      ggl::MetalResourceManager::deleteResource((uint64_t)this, *v3);
      v4 = (uint64_t *)this[36];
      v5 = (char *)v4 - (char *)(v3 + 1);
      if (v4 == v3 + 1)
        break;
      memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
      this[36] = (dispatch_queue_t)((char *)v3 + v5);
    }
    v3 = (uint64_t *)this[35];
    this[36] = (dispatch_queue_t)(v4 - 1);
  }
  if (v3)
  {
    this[36] = (dispatch_queue_t)v3;
    (*((void (**)(dispatch_queue_t, uint64_t *, int64_t))this[38]->isa + 5))(this[38], v3, (char *)this[37] - (char *)v3);
  }

  ggl::ResourceManager::~ResourceManager((ggl::ResourceManager *)this);
}

void sub_19FF23C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 280);
  if (v3)
  {
    *(_QWORD *)(v1 + 288) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 304) + 40))(*(_QWORD *)(v1 + 304), v3, *(_QWORD *)(v1 + 296) - v3);
  }

  ggl::ResourceManager::~ResourceManager((ggl::ResourceManager *)v1);
  _Unwind_Resume(a1);
}

void ggl::RenderResourceFences::~RenderResourceFences(ggl::RenderResourceFences *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t ggl::MetalResourceManager::newRasterizationRateMap(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  std::mutex *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  BOOL v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  id v113;
  _QWORD v114[3];
  __int128 v115;
  uint64_t v116;

  v3 = objc_alloc_init(MEMORY[0x1E0CC6B40]);
  v4 = *(_QWORD *)(a2 + 36);
  *(_QWORD *)&v5 = v4;
  *((_QWORD *)&v5 + 1) = HIDWORD(v4);
  v115 = v5;
  v116 = 0;
  v113 = v3;
  objc_msgSend(v3, "setScreenSize:", &v115);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56) != v6)
  {
    v7 = 0;
    v112 = a2;
    do
    {
      v8 = (uint64_t *)(v6 + (v7 << 6));
      v9 = v8[4];
      v10 = v8[5];
      v11 = *v8;
      v12 = v8[1];
      v13 = objc_alloc(MEMORY[0x1E0CC6B38]);
      v14 = (v10 - v9) >> 2;
      v15 = (v12 - v11) >> 2;
      v114[0] = v14;
      v114[1] = v15;
      v114[2] = 1;
      v16 = (void *)objc_msgSend(v13, "initWithSampleCount:", v114);
      if (v12 != v11)
      {
        v17 = 0;
        if (v15 <= 1)
          v18 = 1;
        else
          v18 = v15;
        do
        {
          v19 = *(_DWORD *)(*v8 + 4 * v17);
          *(_DWORD *)(objc_msgSend(v16, "verticalSampleStorage") + 4 * v17++) = v19;
        }
        while (v18 != v17);
      }
      a2 = v112;
      if (v10 != v9)
      {
        v20 = 0;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v21 = *(_DWORD *)(v8[4] + 4 * v20);
          *(_DWORD *)(objc_msgSend(v16, "horizontalSampleStorage") + 4 * v20++) = v21;
        }
        while (v14 != v20);
      }
      objc_msgSend(v113, "setLayer:atIndex:", v16, v7);

      ++v7;
      v6 = *(_QWORD *)(v112 + 48);
    }
    while (v7 < (*(_QWORD *)(v112 + 56) - v6) >> 6);
  }
  v22 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 256) + 104), "newRasterizationRateMapWithDescriptor:", v113);
  {
    v39 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "GeoGL", 0xA3D02C1100000005);
  }
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
  *(_QWORD *)v24 = 0;
  *(_WORD *)(v24 + 8) = 2305;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  v25 = objc_msgSend(v22, "layerCount");
  {
    v40 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "GeoGL", 0xA3D02C1100000005);
  }
  v27 = v25 >> 61;
  v109 = ggl::Allocator::instance(void)::alloc;
  if (!v25)
  {
    v28 = 0;
    v30 = 0;
    v32 = 0;
LABEL_128:
    v35 = a1;
    goto LABEL_39;
  }
  if (v27)
    abort();
  v28 = 8 * v25;
  v29 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                      + 16))(ggl::Allocator::instance(void)::alloc, 8 * v25, 4);
  v30 = v29;
  v31 = 0;
  v32 = (uint64_t *)(v29 + 8 * v25);
  do
  {
    if (v29 + v31)
      *(_QWORD *)(v29 + v31) = 0;
    v31 += 8;
  }
  while (v28 != v31);
  if (v25 <= 1)
    v33 = 1;
  else
    v33 = v25;
  if (!v22)
  {
    if (v33 >= 8)
    {
      v36 = v33 & 0xFFFFFFFFFFFFFFF8;
      v37 = (_OWORD *)(v29 + 32);
      v38 = v33 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v37 - 2) = 0uLL;
        *(v37 - 1) = 0uLL;
        *v37 = 0uLL;
        v37[1] = 0uLL;
        v37 += 4;
        v38 -= 8;
      }
      while (v38);
      goto LABEL_130;
    }
    v36 = 0;
    do
    {
      *(_QWORD *)(v29 + 8 * v36++) = 0;
LABEL_130:
      ;
    }
    while (v33 != v36);
    goto LABEL_128;
  }
  for (i = 0; i != v33; ++i)
  {
    objc_msgSend(v22, "physicalSizeForLayer:", i, v109);
    *(int32x2_t *)(v30 + 8 * i) = vmovn_s64((int64x2_t)0);
  }
  v35 = a1;
  v27 = v25 >> 61;
LABEL_39:
  v41 = *(_QWORD **)(a2 + 80);
  v42 = *(_QWORD *)(a2 + 96);
  if (v25 <= (v42 - (uint64_t)v41) >> 3)
  {
    v46 = (_QWORD *)(a2 + 88);
    v45 = *(_QWORD *)(a2 + 88);
    v49 = v45 - (_QWORD)v41;
    v50 = (v45 - (uint64_t)v41) >> 3;
    if (v50 < v25)
    {
      v51 = (uint64_t *)(v30 + 8 * v50);
      if ((_QWORD *)v45 == v41)
        goto LABEL_59;
      v52 = v49 - 8;
      if ((unint64_t)(v49 - 8) >= 0x78)
      {
        v78 = v49 & 0xFFFFFFFFFFFFFFF8;
        v79 = (char *)v41 + v78 - 4;
        v80 = v30 + v78 - 4;
        v82 = (unint64_t)v41 + 4 < v30 + v78 && v30 + 4 < (unint64_t)v41 + v78;
        v53 = (uint64_t *)v30;
        v83 = (unint64_t)v79 <= v30 || (unint64_t)v41 >= v80;
        if (v83 && !v82)
        {
          v84 = (v52 >> 3) + 1;
          v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFF8);
          v86 = (__int128 *)(v30 + 32);
          v87 = v41 + 4;
          v88 = v84 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v90 = *(v86 - 2);
            v89 = *(v86 - 1);
            v92 = *v86;
            v91 = v86[1];
            v86 += 4;
            *(v87 - 2) = v90;
            *(v87 - 1) = v89;
            *v87 = v92;
            v87[1] = v91;
            v87 += 4;
            v88 -= 8;
          }
          while (v88);
          if (v84 == (v84 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_59:
            v55 = (_QWORD *)v45;
            while (v51 != v32)
            {
              if (v55)
                *v55 = *v51;
              ++v51;
              ++v55;
            }
            v56 = (char *)v55 - v45;
            goto LABEL_72;
          }
          v53 = (uint64_t *)(v30 + v85);
          v41 = (_QWORD *)((char *)v41 + v85);
        }
      }
      else
      {
        v53 = (uint64_t *)v30;
      }
      do
      {
        v54 = *v53++;
        *v41++ = v54;
      }
      while (v53 != v51);
      goto LABEL_59;
    }
    if ((uint64_t *)v30 == v32)
    {
      v58 = *(char **)(a2 + 80);
    }
    else
    {
      v57 = (unint64_t)v32 - v30 - 8;
      v58 = *(char **)(a2 + 80);
      v59 = (uint64_t *)v30;
      if (v57 >= 0x78)
      {
        v93 = v57 & 0xFFFFFFFFFFFFFFF8 | 4;
        v94 = (char *)v41 + v93;
        v95 = v30 + v93;
        v96 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
        v97 = (unint64_t)v41 + 4 >= v30 + v96 || v30 + 4 >= (unint64_t)v41 + v96;
        v98 = !v97;
        v99 = (unint64_t)v94 <= v30 || (unint64_t)v41 >= v95;
        v58 = *(char **)(a2 + 80);
        v59 = (uint64_t *)v30;
        if (v99)
        {
          v58 = *(char **)(a2 + 80);
          v59 = (uint64_t *)v30;
          if (!v98)
          {
            v100 = (v57 >> 3) + 1;
            v101 = v100 & 0x3FFFFFFFFFFFFFF8;
            v58 = (char *)&v41[v101];
            v102 = (__int128 *)(v30 + 32);
            v103 = v41 + 4;
            v104 = v100 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              v106 = *(v102 - 2);
              v105 = *(v102 - 1);
              v108 = *v102;
              v107 = v102[1];
              v102 += 4;
              *(v103 - 2) = v106;
              *(v103 - 1) = v105;
              *v103 = v108;
              v103[1] = v107;
              v103 += 4;
              v104 -= 8;
            }
            while (v104);
            if (v100 == (v100 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_71;
            v59 = (uint64_t *)(v30 + v101 * 8);
          }
        }
      }
      do
      {
        v60 = *v59++;
        *(_QWORD *)v58 = v60;
        v58 += 8;
      }
      while (v59 != v32);
    }
LABEL_71:
    v56 = (char *)(v58 - (char *)v41);
    v45 = (uint64_t)v41;
    goto LABEL_72;
  }
  if (v41)
  {
    *(_QWORD *)(a2 + 88) = v41;
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 104) + 40))(*(_QWORD *)(a2 + 104));
    v42 = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  if (v27)
    goto LABEL_127;
  v43 = v42 >> 2;
  if (v42 >> 2 <= v25)
    v43 = v25;
  v44 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v43;
  if (v44 >> 61)
LABEL_127:
    abort();
  v45 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 104) + 16))(*(_QWORD *)(a2 + 104), 8 * v44, 4);
  *(_QWORD *)(a2 + 80) = v45;
  v46 = (_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 96) = v45 + 8 * v44;
  v47 = (_QWORD *)v45;
  if ((uint64_t *)v30 != v32)
  {
    v48 = (uint64_t *)v30;
    v47 = (_QWORD *)v45;
    do
    {
      if (v47)
        *v47 = *v48;
      ++v48;
      ++v47;
    }
    while (v48 != v32);
  }
  v56 = (char *)v47 - v45;
LABEL_72:
  *v46 = &v56[v45];
  v61 = objc_msgSend(v22, "parameterBufferSizeAndAlign", v109);
  v62 = (std::__shared_weak_count *)operator new(0xE0uLL);
  v62->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v62->__shared_owners_;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE500;
  ggl::BufferData::BufferData((uint64_t)&v62[1], v61, 2, 1);
  ggl::BufferData::prepareBufferForDevice(v64, *(ggl::Device **)(v35 + 256), 1);
  objc_msgSend(v22, "copyParameterDataToBuffer:offset:", *((_QWORD *)ggl::MetalResourceManager::newBuffer((ggl::MetalResourceManager *)v35, (const ggl::Buffer *)v62[2].__vftable)+ 4), 0);
  do
    v65 = __ldxr(p_shared_owners);
  while (__stxr(v65 + 1, p_shared_owners));
  v66 = *(std::__shared_weak_count **)(a2 + 120);
  *(_QWORD *)(a2 + 112) = v62 + 1;
  *(_QWORD *)(a2 + 120) = v62;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  objc_storeStrong((id *)(v24 + 32), v22);
  v69 = *(std::__shared_weak_count **)(v35 + 16);
  if (!v69 || (v70 = *(_QWORD *)(v35 + 8), (v71 = std::__shared_weak_count::lock(v69)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    goto LABEL_127;
  }
  v72 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v70;
  *(_QWORD *)(a2 + 16) = v71;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  *(_QWORD *)(a2 + 24) = v24;
  ++*(_DWORD *)(a2 + 32);
  ggl::ResourceManager::_addResourceStat(v35, "RasterizationRateMap", 0x62578FE100000014uLL, 0);
  if (v62)
  {
    v75 = (unint64_t *)&v62->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v30)
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v110 + 40))(v110, v30, v28);

  return v24;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7F70;
  return result;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7F28;
  return result;
}

void std::__function::__func<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0,std::allocator<ggl::MetalResourceManager::destroyDeletedResourcesUptoFence(unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7F28;
}

void ggl::ResourceManager::~ResourceManager(ggl::ResourceManager *this)
{
  ggl::ResourceManager::~ResourceManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = &off_1E42B7378;
  std::mutex::~mutex((std::mutex *)this + 3);
  v2 = (_QWORD *)*((_QWORD *)this + 21);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    operator delete(v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v5, *((_QWORD *)this + 9) - v5);
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v6, *((_QWORD *)this + 5) - v6);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void ggl::ResourceManager::onRenderDataReleased(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 88);
  std::mutex::lock((std::mutex *)(a1 + 88));
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v5 < v6)
  {
    if (v5)
      *v5 = a2;
    v7 = v5 + 1;
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = ((uint64_t)v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    abort();
  v11 = v6 - v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  if (v10)
  {
    v12 = 8 * v10;
    v13 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 8 * v10, 8);
    v14 = (_QWORD *)(v13 + 8 * v9);
    v10 = v13 + v12;
    if (v13)
      *v14 = a2;
  }
  else
  {
    v14 = (_QWORD *)(8 * v9);
  }
  v7 = v14 + 1;
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  if (v15 != v16)
  {
    v17 = v15 - v16 - 8;
    if (v17 < 0x38)
    {
      v19 = *(_QWORD *)(a1 + 32);
    }
    else if ((unint64_t)(v15 - (_QWORD)v14) < 0x20)
    {
      v19 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v18 = (v17 >> 3) + 1;
      v19 = v15 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = v14 - 2;
      v21 = (__int128 *)(v15 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v14 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v24 = *(_QWORD *)(v19 - 8);
      v19 -= 8;
      *--v14 = v24;
    }
    while (v19 != v16);
LABEL_24:
    v15 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v7;
  v25 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  if (v15)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v15, v25 - v15);
LABEL_27:
  *(_QWORD *)(a1 + 32) = v7;
  std::mutex::unlock(v4);
}

void ggl::Clear::ClearMesh::~ClearMesh(ggl::Clear::ClearMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Clear::ClearMesh::~ClearMesh(ggl::Clear::ClearMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Clear::ClearMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Clear::ClearMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Clear::ClearData>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Clear::ClearData>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Clear::ClearMesh::ClearMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r = (uint64_t)&ggl::Clear::clearDataReflection;
      }
      ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Clear::ClearData>::attributesReflection(void)::r;
      unk_1ECE36128 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::Clear::ClearData>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDCB8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDCD8;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BBC98;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBCB8;
  return a1;
}

void ggl::DisplayLink::~DisplayLink(id *this)
{
  ggl::DisplayLink::~DisplayLink(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  ggl::DisplayLink *v6;
  uint64_t v7;

  v2 = (std::__shared_weak_count *)this[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *this = off_1E42BCC10;
  v3 = (std::__shared_weak_count *)this[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (ggl::DisplayLink *)this[4];
  if (v6 == (ggl::DisplayLink *)(this + 1))
  {
    v7 = 4;
    v6 = (ggl::DisplayLink *)(this + 1);
  }
  else
  {
    if (!v6)
      return;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
}

uint64_t ggl::DisplayLink::invalidate(id *this)
{
  return objc_msgSend(this[9], "invalidate");
}

void ggl::SnapshotRunLoop::~SnapshotRunLoop(ggl::SnapshotRunLoop *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  ggl::SnapshotRunLoop *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E42B73A0;
  *((_WORD *)this + 32) = 1;

  *(_QWORD *)this = off_1E42BCC10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (ggl::SnapshotRunLoop *)*((_QWORD *)this + 4);
  if (v5 == (ggl::SnapshotRunLoop *)((char *)this + 8))
  {
    v6 = 4;
    v5 = (ggl::SnapshotRunLoop *)((char *)this + 8);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  ggl::SnapshotRunLoop *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E42B73A0;
  *((_WORD *)this + 32) = 1;

  *(_QWORD *)this = off_1E42BCC10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (ggl::SnapshotRunLoop *)*((_QWORD *)this + 4);
  if (v5 == (ggl::SnapshotRunLoop *)((char *)this + 8))
  {
    v6 = 4;
    v5 = (ggl::SnapshotRunLoop *)((char *)this + 8);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::SnapshotRunLoop::invalidate(uint64_t this)
{
  *(_BYTE *)(this + 65) = 0;
  return this;
}

void std::__shared_ptr_emplace<ggl::RunLoop::_RunLoopCallbacker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RunLoop::_RunLoopCallbacker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MTLShaderLibraryData::~MTLShaderLibraryData(ggl::MTLShaderLibraryData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42BAB70;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v4, *((_QWORD *)this + 9) - v4);
  }
  *(_QWORD *)this = &off_1E42BA1D0;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v5, *((_QWORD *)this + 5) - v5);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42BAB70;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v4, *((_QWORD *)this + 9) - v4);
  }
  *(_QWORD *)this = &off_1E42BA1D0;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v5, *((_QWORD *)this + 5) - v5);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E42BAB70;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = *((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v4, *((_QWORD *)this + 9) - v4);
  }
  *(_QWORD *)this = &off_1E42BA1D0;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v5, *((_QWORD *)this + 5) - v5);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void ggl::ShaderLibraryData::~ShaderLibraryData(ggl::ShaderLibraryData *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42BA1D0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v2, *((_QWORD *)this + 5) - v2);
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42BA1D0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v2, *((_QWORD *)this + 5) - v2);
  }
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ShadedColor::P3NPipelineState::~P3NPipelineState(ggl::ShadedColor::P3NPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ShadedColor::P3NPipelineSetup::~P3NPipelineSetup(ggl::ShadedColor::P3NPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ShadedColor::P3NPipelineSetup::constantDataIsEnabled(ggl::ShadedColor::P3NPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::ShadedColor::P3NPipelineSetup::textureIsEnabled(ggl::ShadedColor::P3NPipelineSetup *this)
{
  return 0;
}

void ggl::DeviceData::~DeviceData(std::mutex *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::MetalSwapchain::format(ggl::MetalSwapchain *this, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return *((unsigned int *)this + 16);
}

uint64_t ggl::MetalSwapchain::extents(ggl::MetalSwapchain *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t ggl::MetalSwapchain::imageCount(ggl::MetalSwapchain *this)
{
  return *((unsigned int *)this + 22);
}

void ggl::MetalSwapchain::~MetalSwapchain(ggl::MetalSwapchain *this)
{
  ggl::MetalSwapchain::~MetalSwapchain(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E42B6C68;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      return;
  }
  else
  {
LABEL_16:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v11)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ___ZL28GEOGetGeoGLMetalSwapchainLogv_block_invoke_40835()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit.GeoGL", "MetalSwapchain");
  v1 = (void *)GEOGetGeoGLMetalSwapchainLog(void)::log;
  GEOGetGeoGLMetalSwapchainLog(void)::log = (uint64_t)v0;

}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::MetalSwapchainDrawable>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void ggl::Texture2DArray::onImplicitLoadComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(unsigned int *)(a2 + 24);
  *(_BYTE *)(a1 + 129) = 0;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v2);
  v4 = (std::__shared_weak_count *)v3[1];
  *v3 = 0;
  v3[1] = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6D98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6D98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2DArray::*)(ggl::Texture2DLoadItem const&),ggl::Texture2DArray*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void std::__shared_ptr_emplace<ggl::RenderFence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::RenderFence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DebugRenderUtil::P3NMesh::~P3NMesh(ggl::DebugRenderUtil::P3NMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DebugRenderUtil::P3NMesh::~P3NMesh(ggl::DebugRenderUtil::P3NMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DebugRenderUtil::P3NMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DebugRenderUtil::P3NMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

double ggl::CommandBuffer::CommandBuffer(ggl::CommandBuffer *this, char a2, const char *a3)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  double result;
  int v11;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  malloc_zone_t *zone;
  int v16;
  uint64_t v17;
  geo::read_write_lock *v18;
  const char *v19;
  malloc_zone_t *v20;
  int v21;
  uint64_t v22;
  geo::read_write_lock *v23;
  const char *v24;
  malloc_zone_t *v25;
  int v26;
  uint64_t v27;
  geo::read_write_lock *v28;
  const char *v29;
  malloc_zone_t *v30;
  int v31;
  uint64_t v32;
  geo::read_write_lock *v33;
  const char *v34;
  malloc_zone_t *v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  int v41;
  uint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;
  malloc_zone_t *v45;
  ggl::CommandBuffer *v46;
  ggl::CommandBuffer *v47;
  ggl::CommandBuffer *v48;
  ggl::CommandBuffer *v49;
  ggl::CommandBuffer *v50;
  ggl::CommandBuffer *v51;
  ggl::CommandBuffer *v52;

  *(_QWORD *)this = &off_1E42B6470;
  *((_QWORD *)this + 1) = a3;
  *((_BYTE *)this + 16) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if ((v3 & 1) == 0)
  {
    v46 = this;
    this = v46;
    if (v11)
    {
      v12 = operator new();
      *(_QWORD *)(v12 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v12 + 24) = "GeoGL";
      *(_OWORD *)(v12 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v12 = &off_1E42B5668;
      *(_QWORD *)(v12 + 8) = "GeoGL";
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_OWORD *)(v12 + 120) = 0u;
      *(_OWORD *)(v12 + 136) = 0u;
      *(_OWORD *)(v12 + 152) = 0u;
      *(_OWORD *)(v12 + 168) = 0u;
      *(_OWORD *)(v12 + 184) = 0u;
      *(_OWORD *)(v12 + 200) = 0u;
      *(_OWORD *)(v12 + 216) = 0u;
      *(_OWORD *)(v12 + 232) = 0u;
      *(_QWORD *)(v12 + 248) = 0;
      *(_OWORD *)(v12 + 56) = 0u;
      v13 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v12 + 56), 0);
      if ((_DWORD)v13)
        geo::read_write_lock::logFailure(v13, (uint64_t)"initialization", v14);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v12 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v12 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v12;
      this = v46;
    }
  }
  *((_QWORD *)this + 8) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  if ((v4 & 1) == 0)
  {
    v47 = this;
    this = v47;
    if (v16)
    {
      v17 = operator new();
      *(_QWORD *)(v17 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v17 + 24) = "GeoGL";
      *(_OWORD *)(v17 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v17 = &off_1E42B5668;
      *(_QWORD *)(v17 + 8) = "GeoGL";
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_OWORD *)(v17 + 120) = 0u;
      *(_OWORD *)(v17 + 136) = 0u;
      *(_OWORD *)(v17 + 152) = 0u;
      *(_OWORD *)(v17 + 168) = 0u;
      *(_OWORD *)(v17 + 184) = 0u;
      *(_OWORD *)(v17 + 200) = 0u;
      *(_OWORD *)(v17 + 216) = 0u;
      *(_OWORD *)(v17 + 232) = 0u;
      *(_QWORD *)(v17 + 248) = 0;
      *(_OWORD *)(v17 + 56) = 0u;
      v18 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v17 + 56), 0);
      if ((_DWORD)v18)
        geo::read_write_lock::logFailure(v18, (uint64_t)"initialization", v19);
      v20 = malloc_create_zone(0, 0);
      *(_QWORD *)(v17 + 48) = v20;
      malloc_set_zone_name(v20, "GeoGL");
      *(_QWORD *)(v17 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v17;
      this = v47;
    }
  }
  *((_QWORD *)this + 12) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  if ((v5 & 1) == 0)
  {
    v48 = this;
    this = v48;
    if (v21)
    {
      v22 = operator new();
      *(_QWORD *)(v22 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v22 + 24) = "GeoGL";
      *(_OWORD *)(v22 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v22 = &off_1E42B5668;
      *(_QWORD *)(v22 + 8) = "GeoGL";
      *(_OWORD *)(v22 + 72) = 0u;
      *(_OWORD *)(v22 + 88) = 0u;
      *(_OWORD *)(v22 + 104) = 0u;
      *(_OWORD *)(v22 + 120) = 0u;
      *(_OWORD *)(v22 + 136) = 0u;
      *(_OWORD *)(v22 + 152) = 0u;
      *(_OWORD *)(v22 + 168) = 0u;
      *(_OWORD *)(v22 + 184) = 0u;
      *(_OWORD *)(v22 + 200) = 0u;
      *(_OWORD *)(v22 + 216) = 0u;
      *(_OWORD *)(v22 + 232) = 0u;
      *(_QWORD *)(v22 + 248) = 0;
      *(_OWORD *)(v22 + 56) = 0u;
      v23 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v22 + 56), 0);
      if ((_DWORD)v23)
        geo::read_write_lock::logFailure(v23, (uint64_t)"initialization", v24);
      v25 = malloc_create_zone(0, 0);
      *(_QWORD *)(v22 + 48) = v25;
      malloc_set_zone_name(v25, "GeoGL");
      *(_QWORD *)(v22 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v22;
      this = v48;
    }
  }
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if ((v6 & 1) == 0)
  {
    v49 = this;
    this = v49;
    if (v26)
    {
      v27 = operator new();
      *(_QWORD *)(v27 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v27 + 24) = "GeoGL";
      *(_OWORD *)(v27 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v27 = &off_1E42B5668;
      *(_QWORD *)(v27 + 8) = "GeoGL";
      *(_OWORD *)(v27 + 72) = 0u;
      *(_OWORD *)(v27 + 88) = 0u;
      *(_OWORD *)(v27 + 104) = 0u;
      *(_OWORD *)(v27 + 120) = 0u;
      *(_OWORD *)(v27 + 136) = 0u;
      *(_OWORD *)(v27 + 152) = 0u;
      *(_OWORD *)(v27 + 168) = 0u;
      *(_OWORD *)(v27 + 184) = 0u;
      *(_OWORD *)(v27 + 200) = 0u;
      *(_OWORD *)(v27 + 216) = 0u;
      *(_OWORD *)(v27 + 232) = 0u;
      *(_QWORD *)(v27 + 248) = 0;
      *(_OWORD *)(v27 + 56) = 0u;
      v28 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v27 + 56), 0);
      if ((_DWORD)v28)
        geo::read_write_lock::logFailure(v28, (uint64_t)"initialization", v29);
      v30 = malloc_create_zone(0, 0);
      *(_QWORD *)(v27 + 48) = v30;
      malloc_set_zone_name(v30, "GeoGL");
      *(_QWORD *)(v27 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v27;
      this = v49;
    }
  }
  *((_QWORD *)this + 20) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  if ((v7 & 1) == 0)
  {
    v50 = this;
    this = v50;
    if (v31)
    {
      v32 = operator new();
      *(_QWORD *)(v32 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v32 + 24) = "GeoGL";
      *(_OWORD *)(v32 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v32 = &off_1E42B5668;
      *(_QWORD *)(v32 + 8) = "GeoGL";
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 88) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 136) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 168) = 0u;
      *(_OWORD *)(v32 + 184) = 0u;
      *(_OWORD *)(v32 + 200) = 0u;
      *(_OWORD *)(v32 + 216) = 0u;
      *(_OWORD *)(v32 + 232) = 0u;
      *(_QWORD *)(v32 + 248) = 0;
      *(_OWORD *)(v32 + 56) = 0u;
      v33 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v32 + 56), 0);
      if ((_DWORD)v33)
        geo::read_write_lock::logFailure(v33, (uint64_t)"initialization", v34);
      v35 = malloc_create_zone(0, 0);
      *(_QWORD *)(v32 + 48) = v35;
      malloc_set_zone_name(v35, "GeoGL");
      *(_QWORD *)(v32 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v32;
      this = v50;
    }
  }
  *((_QWORD *)this + 24) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  if ((v8 & 1) == 0)
  {
    v51 = this;
    this = v51;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      this = v51;
    }
  }
  *((_QWORD *)this + 28) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  if ((v9 & 1) == 0)
  {
    v52 = this;
    this = v52;
    if (v41)
    {
      v42 = operator new();
      *(_QWORD *)(v42 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v42 + 24) = "GeoGL";
      *(_OWORD *)(v42 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v42 = &off_1E42B5668;
      *(_QWORD *)(v42 + 8) = "GeoGL";
      *(_OWORD *)(v42 + 72) = 0u;
      *(_OWORD *)(v42 + 88) = 0u;
      *(_OWORD *)(v42 + 104) = 0u;
      *(_OWORD *)(v42 + 120) = 0u;
      *(_OWORD *)(v42 + 136) = 0u;
      *(_OWORD *)(v42 + 152) = 0u;
      *(_OWORD *)(v42 + 168) = 0u;
      *(_OWORD *)(v42 + 184) = 0u;
      *(_OWORD *)(v42 + 200) = 0u;
      *(_OWORD *)(v42 + 216) = 0u;
      *(_OWORD *)(v42 + 232) = 0u;
      *(_QWORD *)(v42 + 248) = 0;
      *(_OWORD *)(v42 + 56) = 0u;
      v43 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v42 + 56), 0);
      if ((_DWORD)v43)
        geo::read_write_lock::logFailure(v43, (uint64_t)"initialization", v44);
      v45 = malloc_create_zone(0, 0);
      *(_QWORD *)(v42 + 48) = v45;
      malloc_set_zone_name(v45, "GeoGL");
      *(_QWORD *)(v42 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v42;
      this = v52;
    }
  }
  *((_QWORD *)this + 32) = ggl::Allocator::instance(void)::alloc;
  result = 0.0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return result;
}

_QWORD *ggl::CommandBuffer::clearTextureLoadItems(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = this;
  v3 = (_QWORD *)this[25];
  v2 = (_QWORD *)this[26];
  if (v2 != v3)
  {
    v4 = v2 - 4;
    while (1)
    {
      this = (_QWORD *)v4[3];
      if (v4 == this)
        break;
      if (this)
      {
        v6 = 5;
LABEL_8:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v6))();
      }
      if (*((_BYTE *)v4 - 28))
        *((_BYTE *)v4 - 28) = 0;
      if (*((_BYTE *)v4 - 32))
        *((_BYTE *)v4 - 32) = 0;
      v5 = v4 - 6;
      v4 -= 10;
      if (v5 == v3)
        goto LABEL_13;
    }
    this = v4;
    v6 = 4;
    goto LABEL_8;
  }
LABEL_13:
  v1[26] = v3;
  return this;
}

_QWORD *ggl::CommandBuffer::clearBufferLoadItems(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v1 = this;
  v2 = this[29];
  for (i = this[30]; i != v2; i -= 64)
  {
    this = *(_QWORD **)(i - 8);
    if ((_QWORD *)(i - 32) == this)
    {
      this = (_QWORD *)(i - 32);
      v4 = 4;
LABEL_3:
      this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v4))();
      continue;
    }
    if (this)
    {
      v4 = 5;
      goto LABEL_3;
    }
  }
  v1[30] = v2;
  return this;
}

unint64_t ggl::CommandBuffer::sortRenderItems(ggl::CommandBuffer *this, ggl::CommandBuffer *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz((a2 - this) >> 3);
  if (a2 == this)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>((unint64_t)this, (uint64_t *)a2, v3, 1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_QWORD *)(*v8 + 48) < *(_QWORD *)(*v9 + 48))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_QWORD *)(v81 + 48);
        v83 = *(_QWORD *)(*v9 + 48);
        v84 = *v8;
        v85 = *(_QWORD *)(*v8 + 48);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(_QWORD *)(v135 + 48) < *(_QWORD *)(*v9 + 48))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_QWORD *)(*v8 + 48) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(_QWORD *)(v87 + 48);
        v92 = *(_QWORD *)(*v9 + 48);
        v93 = *(_QWORD *)(v89 + 48);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = (unint64_t *)(v9 + 1);
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = (unint64_t *)(v9 + 2);
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = (unint64_t *)(v9 + 2);
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(_QWORD *)(*v8 + 48) < *(_QWORD *)(v87 + 48))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(_QWORD *)(v140 + 48);
                if (v142 < *(_QWORD *)(v141 + 48))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(_QWORD *)(*v9 + 48))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(_QWORD *)(v112 + 48);
                    if (result < *(_QWORD *)(v111[1] + 48))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(_QWORD *)(*v113 + 48);
                  if (*(_QWORD *)(v112 + 48) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11 && *(_QWORD *)(v112 + 48) < *(_QWORD *)(v111[1] + 48))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(_QWORD *)(v112 + 48) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(_QWORD *)(v124 + 48);
                    if (result < *(_QWORD *)(v123[1] + 48))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(_QWORD *)(*v123 + 48);
                    if (*(_QWORD *)(*v130 + 48) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(_QWORD *)(*v130 + 48) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_QWORD *)(*v8 + 48);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_QWORD *)(*v13 + 48);
            v19 = *(_QWORD *)(*v9 + 48);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_QWORD *)(*v13 + 48) < *(_QWORD *)(*v9 + 48))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_QWORD *)(*v8 + 48) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_QWORD *)(v29 + 48);
            v32 = *(_QWORD *)(v30 + 48);
            v33 = *(a2 - 2);
            v34 = *(_QWORD *)(v33 + 48);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_QWORD *)(*v27 + 48) < *(_QWORD *)(v35 + 48))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_QWORD *)(v36 + 48) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_QWORD *)(v40 + 48);
            v43 = *(_QWORD *)(v41 + 48);
            v44 = *(a2 - 3);
            v45 = *(_QWORD *)(v44 + 48);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_QWORD *)(*v38 + 48) < *(_QWORD *)(v46 + 48))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_QWORD *)(v47 + 48) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_QWORD *)(*v13 + 48);
            v51 = *(_QWORD *)(*v27 + 48);
            v52 = *v38;
            v53 = *(_QWORD *)(*v38 + 48);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_QWORD *)(*v9 + 48);
          v23 = *(_QWORD *)(*v13 + 48);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_QWORD *)(*v9 + 48) < *(_QWORD *)(*v13 + 48))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_QWORD *)(*v8 + 48) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_QWORD *)(v55 + 48);
            if (*(_QWORD *)(*(v9 - 1) + 48) < v56)
              goto LABEL_54;
            if (v56 >= *(_QWORD *)(*v8 + 48))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_QWORD *)(*v9 + 48));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_QWORD *)(v70 + 48));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_QWORD *)(v73 + 48));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_QWORD *)(v76 + 48));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_QWORD *)(v77 + 48));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_QWORD *)(v55 + 48);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_QWORD *)(v60 + 48) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_QWORD *)(v63 + 48) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_QWORD *)(v62 + 48) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_QWORD *)(v67 + 48) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_QWORD *)(v68 + 48) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_QWORD *)(v102 + 48);
              if (v104 < *(_QWORD *)(v103 + 48))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_QWORD *)(v103 + 48));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(_QWORD *)(v137 + 48);
            if (v139 < *(_QWORD *)(v138 + 48))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(_QWORD *)(v138 + 48));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_QWORD *)(*a2 + 48);
  v8 = *(_QWORD *)(*result + 48);
  v9 = *a3;
  v10 = *(_QWORD *)(*a3 + 48);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_QWORD *)(*a2 + 48) < *(_QWORD *)(*result + 48))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_QWORD *)(*a3 + 48) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_QWORD *)(*a4 + 48) < *(_QWORD *)(v5 + 48))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_QWORD *)(*a3 + 48) < *(_QWORD *)(*a2 + 48))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_QWORD *)(*a2 + 48) < *(_QWORD *)(*result + 48))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_QWORD *)(*a5 + 48) < *(_QWORD *)(*a4 + 48))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_QWORD *)(*a4 + 48) < *(_QWORD *)(*a3 + 48))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(*a3 + 48) < *(_QWORD *)(*a2 + 48))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_QWORD *)(*a2 + 48) < *(_QWORD *)(*result + 48))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_QWORD *)(v3 + 48) < *(_QWORD *)(*a1 + 48))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_QWORD *)(v15 + 48);
      v17 = *(_QWORD *)(*a1 + 48);
      v18 = *(a2 - 1);
      v19 = *(_QWORD *)(v18 + 48);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_QWORD *)(v40 + 48) < *(_QWORD *)(*a1 + 48))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_QWORD *)(v47 + 48) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_QWORD *)(v21 + 48);
      v26 = *(_QWORD *)(*a1 + 48);
      v27 = *(_QWORD *)(v23 + 48);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_QWORD *)(v42 + 48) < *(_QWORD *)(v21 + 48))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_QWORD *)(v43 + 48);
        if (v45 < *(_QWORD *)(v44 + 48))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_QWORD *)(*a1 + 48))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_QWORD *)(v7 + 48);
      v10 = *(_QWORD *)(*a1 + 48);
      v11 = *(_QWORD *)(v5 + 48);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_QWORD *)(*v31 + 48);
        if (v37 < *(_QWORD *)(v36 + 48))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_QWORD *)(v36 + 48));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void ggl::CommandBuffer::stableSortRenderItems(__n128 *this, char *a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  char *v7;
  BOOL v8;
  char *v9;

  v4 = (a2 - (char *)this) >> 3;
  if (a2 - (char *)this < 1025)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(this, a2, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = (a2 - (char *)this) >> 3;
    while (1)
    {
      v7 = (char *)operator new(8 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(this, a2, v4, v7, v6);
    operator delete(v9);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(__n128 *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  __n128 *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  __n128 v50;
  unint64_t v51;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = a1->n128_u64[0];
      if (*(_QWORD *)(v7 + 48) < *(_QWORD *)(a1->n128_u64[0] + 48))
      {
        a1->n128_u64[0] = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
      return;
    }
    if ((uint64_t)a3 > 128)
    {
      v20 = a3 >> 1;
      v21 = &a1->n128_i8[8 * (a3 >> 1)];
      v22 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(&a1->n128_u64[a3 >> 1], a2, a3 - (a3 >> 1), a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, &a1->n128_i8[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
        return;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>((uint64_t)a1, v21, v22, (uint64_t *)a4);
      v23 = (uint64_t *)&a4[8 * v20];
      std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>((uint64_t)&a1->n128_i64[a3 >> 1], a2, a3 - (a3 >> 1), v23);
      v24 = -1;
      v25 = v23;
      v26 = (uint64_t *)a4;
      v27 = a1;
      v28 = &a4[8 * a3];
      do
      {
        ++v24;
        if (v25 == (uint64_t *)v28)
        {
          if (v26 == v23)
            return;
          v43 = &a4[8 * v20] - (char *)v26 - 8;
          if (v43 >= 0x38)
          {
            if ((unint64_t)((char *)&a1->n128_u64[v24] - (char *)v26) >= 0x20)
            {
              v45 = 0;
              v46 = (v43 >> 3) + 1;
              v47 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              v44 = &v26[v47];
              v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v49 = &v27[v45 / 2];
                v50 = *(__n128 *)&v26[v45 + 2];
                *v49 = *(__n128 *)&v26[v45];
                v49[1] = v50;
                v45 += 4;
                v48 -= 4;
              }
              while (v48);
              if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
                return;
              v27 = (__n128 *)((char *)v27 + v47 * 8);
            }
            else
            {
              v44 = v26;
            }
          }
          else
          {
            v44 = v26;
          }
          do
          {
            v51 = *v44++;
            v27->n128_u64[0] = v51;
            v27 = (__n128 *)((char *)v27 + 8);
          }
          while (v44 != v23);
          return;
        }
        v29 = v25;
        v30 = *v25;
        v31 = *v26;
        v32 = *(_QWORD *)(v30 + 48);
        v33 = *(_QWORD *)(*v26 + 48);
        if (v32 < v33)
          v31 = v30;
        v26 += v32 >= v33;
        v25 = &v29[v32 < v33];
        v27->n128_u64[0] = v31;
        v27 = (__n128 *)((char *)v27 + 8);
      }
      while (v26 != v23);
      if (v25 == (uint64_t *)v28)
        return;
      v34 = -8;
      if (v32 >= v33)
        v34 = 0;
      v35 = &a4[8 * a3] - (char *)v29 + v34 - 8;
      if (v35 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v24] - (char *)&v29[v32 < v33] + 8) < 0x20)
        goto LABEL_33;
      v36 = 0;
      v37 = (v35 >> 3) + 1;
      v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = &v27[v36 / 2];
        v41 = *(__n128 *)&v25[v36 + 2];
        *v40 = *(__n128 *)&v25[v36];
        v40[1] = v41;
        v36 += 4;
        v39 -= 4;
      }
      while (v39);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v27 = (__n128 *)((char *)v27 + v38);
        v25 = (uint64_t *)((char *)v25 + v38);
        do
        {
LABEL_33:
          v42 = *v25++;
          v27->n128_u64[0] = v42;
          v27 = (__n128 *)((char *)v27 + 8);
        }
        while (v25 != (uint64_t *)v28);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      v10 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = v12->n128_u64[0];
          v12 = (__n128 *)v10;
          v15 = *v10;
          v16 = *(_QWORD *)(v15 + 48);
          if (v16 < *(_QWORD *)(v14 + 48))
          {
            v17 = v11;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v17) = v14;
              if (!v17)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v17);
              v17 -= 8;
            }
            while (v16 < *(_QWORD *)(v14 + 48));
            v13 = (__n128 *)&a1->n128_i8[v17 + 8];
LABEL_10:
            v13->n128_u64[0] = v15;
          }
          v10 = &v12->n128_u64[1];
          v11 += 8;
        }
        while (&v12->n128_i8[8] != a2);
      }
    }
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(uint64_t result, char *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  char *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  __int128 v48;
  uint64_t v49;

  if (a3)
  {
    v4 = a4;
    v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_QWORD *)(v8 + 48);
      v10 = *(_QWORD *)(*(_QWORD *)result + 48);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = a3 >> 1;
      v21 = 8 * (a3 >> 1);
      v22 = result + v21;
      std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(result, result + v21, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(&v6[v21], a2, a3 - v20, &v4[(unint64_t)v21 / 8], a3 - v20);
      v23 = -1;
      v24 = v4;
      v25 = v6;
      v26 = &v6[v21];
      do
      {
        ++v23;
        if (v26 == a2)
        {
          if (v25 == (char *)v22)
            return result;
          v41 = &v6[8 * v20] - v25 - 8;
          if (v41 >= 0x38)
          {
            if ((unint64_t)((char *)&v4[v23] - v25) >= 0x20)
            {
              v43 = 0;
              v44 = (v41 >> 3) + 1;
              v45 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              v42 = &v24[v45];
              v46 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v47 = &v24[v43];
                v48 = *(_OWORD *)&v25[v43 * 8 + 16];
                *v47 = *(_OWORD *)&v25[v43 * 8];
                v47[1] = v48;
                v43 += 4;
                v46 -= 4;
              }
              while (v46);
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
                return result;
              v25 += v45 * 8;
            }
            else
            {
              v42 = v24;
            }
          }
          else
          {
            v42 = v24;
          }
          do
          {
            v49 = *(_QWORD *)v25;
            v25 += 8;
            *v42++ = v49;
          }
          while (v25 != (char *)v22);
          return result;
        }
        v27 = v26;
        v28 = *(_QWORD *)v26;
        v29 = *(_QWORD *)v25;
        v30 = *(_QWORD *)(v28 + 48);
        v31 = *(_QWORD *)(*(_QWORD *)v25 + 48);
        if (v30 < v31)
          v29 = v28;
        v26 = &v27[8 * (v30 < v31)];
        v25 += 8 * (v30 >= v31);
        *v24++ = v29;
      }
      while (v25 != (char *)v22);
      if (v26 == a2)
        return result;
      v32 = -8;
      if (v30 >= v31)
        v32 = 0;
      v33 = a2 - v27 + v32 - 8;
      if (v33 < 0x68 || (unint64_t)((char *)&v4[v23] - &v27[8 * (v30 < v31)] + 8) < 0x20)
        goto LABEL_37;
      v34 = 0;
      v35 = (v33 >> 3) + 1;
      v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = &v24[v34];
        v39 = *(_OWORD *)&v26[v34 * 8 + 16];
        *v38 = *(_OWORD *)&v26[v34 * 8];
        v38[1] = v39;
        v34 += 4;
        v37 -= 4;
      }
      while (v37);
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v26 += v36;
        v24 = (uint64_t *)((char *)v24 + v36);
        do
        {
LABEL_37:
          v40 = *(_QWORD *)v26;
          v26 += 8;
          *v24++ = v40;
        }
        while (v26 != a2);
      }
    }
    else if ((char *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((char *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_QWORD *)(*(_QWORD *)v11 + 48) >= *(_QWORD *)(v16 + 48))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_QWORD *)(*(_QWORD *)v11 + 48) >= *(_QWORD *)(v19 + 48))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((char *)v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(__n128 *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __n128 result;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __n128 *v69;
  __n128 *v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;

  if (!a5)
    return result;
  v8 = a5;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return result;
    while (1)
    {
      v13 = a1->n128_u64[0];
      if (*(_QWORD *)(*(_QWORD *)a2 + 48) < *(_QWORD *)(a1->n128_u64[0] + 48))
        break;
      a1 = (__n128 *)((char *)a1 + 8);
      if (!--a4)
        return result;
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        a1->n128_u64[0] = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        return result;
      }
      if (a4 >= 0)
        v30 = a4;
      else
        v30 = a4 + 1;
      v23 = v30 >> 1;
      v17 = &a1->n128_i8[8 * (v30 >> 1)];
      v16 = a2;
      if (a2 != a3)
      {
        v31 = (a3 - a2) >> 3;
        v16 = a2;
        do
        {
          v32 = v31 >> 1;
          v33 = &v16[8 * (v31 >> 1)];
          v35 = *(_QWORD *)v33;
          v34 = v33 + 8;
          v31 += ~(v31 >> 1);
          if (*(_QWORD *)(v35 + 48) < *(_QWORD *)(*(_QWORD *)v17 + 48))
            v16 = v34;
          else
            v31 = v32;
        }
        while (v31);
      }
      v15 = (v16 - a2) >> 3;
      if (v17 != a2)
      {
LABEL_20:
        v24 = v16 - a2;
        if (v16 == a2)
        {
          a2 = v17;
        }
        else
        {
          v25 = v17 + 8;
          if (v17 + 8 == a2)
          {
            v98 = *(_QWORD *)v17;
            v100 = v23;
            v36 = a2;
            v37 = v16 - a2;
            v38 = a6;
            v39 = a3;
            memmove(v17, v36, v37);
            v23 = v100;
            a3 = v39;
            a6 = v38;
            a2 = &v17[v24];
            *(_QWORD *)&v17[v24] = v98;
          }
          else
          {
            v26 = a2 + 8;
            if (a2 + 8 == v16)
            {
              v40 = *((_QWORD *)v16 - 1);
              a2 = v17 + 8;
              if (v16 - 8 != v17)
              {
                v99 = a6;
                v101 = v23;
                v41 = a3;
                memmove(v17 + 8, v17, v16 - 8 - v17);
                a6 = v99;
                v23 = v101;
                a3 = v41;
              }
              *(_QWORD *)v17 = v40;
            }
            else
            {
              v27 = (a2 - v17) >> 3;
              if (v27 == v24 >> 3)
              {
                do
                {
                  v28 = *((_QWORD *)v25 - 1);
                  *((_QWORD *)v25 - 1) = *((_QWORD *)v26 - 1);
                  *((_QWORD *)v26 - 1) = v28;
                  if (v25 == a2)
                    break;
                  v25 += 8;
                  v29 = v26 == v16;
                  v26 += 8;
                }
                while (!v29);
              }
              else
              {
                v42 = v24 >> 3;
                v43 = (a2 - v17) >> 3;
                do
                {
                  v44 = v43;
                  v43 = v42;
                  v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  v45 = &v17[8 * v43];
                  do
                  {
                    v47 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    v46 = v47;
                    v48 = &v45[8 * v27];
                    v49 = v45;
                    do
                    {
                      v50 = v48;
                      *(_QWORD *)v49 = *(_QWORD *)v48;
                      v51 = (v16 - v48) >> 3;
                      v52 = __OFSUB__(v27, v51);
                      v54 = v27 - v51;
                      v53 = (v54 < 0) ^ v52;
                      v48 = &v17[8 * v54];
                      if (v53)
                        v48 = &v50[8 * v27];
                      v49 = v50;
                    }
                    while (v48 != v45);
                    *(_QWORD *)v50 = v46;
                  }
                  while (v45 != v17);
                }
                a2 = &v17[8 * (v24 >> 3)];
              }
            }
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v8 >= 0)
        v14 = v8;
      else
        v14 = v8 + 1;
      v15 = v14 >> 1;
      v16 = &a2[8 * (v14 >> 1)];
      v17 = a2;
      if (a2 != (char *)a1)
      {
        v18 = (a2 - (char *)a1) >> 3;
        v17 = (char *)a1;
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[8 * (v18 >> 1)];
          v22 = *(_QWORD *)v20;
          v21 = v20 + 8;
          v18 += ~(v18 >> 1);
          if (*(_QWORD *)(*(_QWORD *)v16 + 48) < *(_QWORD *)(v22 + 48))
            v18 = v19;
          else
            v17 = v21;
        }
        while (v18);
      }
      v23 = (v17 - (char *)a1) >> 3;
      if (v17 != a2)
        goto LABEL_20;
    }
    a2 = v16;
LABEL_55:
    a4 -= v23;
    v8 -= v15;
    if (v23 + v15 >= a4 + v8)
    {
      v59 = a2;
      v60 = v16;
      v61 = v23;
      v62 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a2, v60, a3, a4, v8, a6, a7);
      a2 = v17;
      v8 = v15;
      a4 = v61;
      a3 = v59;
      a6 = v62;
      if (!v15)
        return result;
    }
    else
    {
      v55 = v15;
      v56 = a6;
      v57 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,ggl::CommandBuffer::stableSortRenderItems(BOOL)::$_0 &,std::__wrap_iter<ggl::RenderItem **>>(a1, v17, a2, v23, v55, a6, a7);
      a3 = v57;
      a1 = (__n128 *)a2;
      a2 = v16;
      a6 = v56;
      if (!v8)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (a1 == (__n128 *)a2)
      return result;
    v73 = a2 - (char *)a1 - 8;
    v74 = a6;
    v75 = (char *)a1;
    if (v73 >= 0x18)
    {
      v74 = a6;
      v75 = (char *)a1;
      if ((unint64_t)(a6 - (char *)a1) > 0x1F)
      {
        v76 = (v73 >> 3) + 1;
        v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &a6[v77];
        v78 = a1 + 1;
        v79 = (__n128 *)(a6 + 16);
        v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          result = v78[-1];
          v81 = *v78;
          v79[-1] = result;
          *v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          if (v74 != a6)
          {
            while (a2 != a3)
            {
              v83 = *(_QWORD *)a2;
              v84 = *(_QWORD *)(*(_QWORD *)a2 + 48) >= *(_QWORD *)(*(_QWORD *)a6 + 48);
              if (*(_QWORD *)(*(_QWORD *)a2 + 48) >= *(_QWORD *)(*(_QWORD *)a6 + 48))
                v83 = *(_QWORD *)a6;
              a2 += 8 * (*(_QWORD *)(*(_QWORD *)a2 + 48) < *(_QWORD *)(*(_QWORD *)a6 + 48));
              a6 += 8 * v84;
              a1->n128_u64[0] = v83;
              a1 = (__n128 *)((char *)a1 + 8);
              if (a6 == v74)
                return result;
            }
            memmove(a1, a6, v74 - a6);
          }
          return result;
        }
        v75 = (char *)a1 + v77;
      }
    }
    do
    {
      v82 = *(_QWORD *)v75;
      v75 += 8;
      *(_QWORD *)v74 = v82;
      v74 += 8;
    }
    while (v75 != a2);
    goto LABEL_76;
  }
  if (a3 == a2)
    return result;
  v63 = a3 - 8;
  v64 = a3 - 8 - a2;
  if (v64 < 0x18)
  {
    v65 = a6;
    v66 = a2;
    goto LABEL_85;
  }
  v65 = a6;
  v66 = a2;
  if ((unint64_t)(a6 - a2) <= 0x1F)
  {
    do
    {
LABEL_85:
      v85 = *(_QWORD *)v66;
      v66 += 8;
      *(_QWORD *)v65 = v85;
      v65 += 8;
    }
    while (v66 != a3);
  }
  else
  {
    v67 = (v64 >> 3) + 1;
    v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
    v65 = &a6[v68];
    v69 = (__n128 *)(a2 + 16);
    v70 = (__n128 *)(a6 + 16);
    v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v69[-1];
      v72 = *v69;
      v70[-1] = result;
      *v70 = v72;
      v69 += 2;
      v70 += 2;
      v71 -= 4;
    }
    while (v71);
    if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v66 = &a2[v68];
      goto LABEL_85;
    }
  }
  if (v65 != a6)
  {
    v86 = 0;
    while (a2 != (char *)a1)
    {
      v87 = *((_QWORD *)a2 - 1);
      v88 = *(_QWORD *)(v87 + 48);
      v89 = *(_QWORD *)(*((_QWORD *)v65 - 1) + 48);
      if (v89 < v88)
        a2 -= 8;
      else
        v87 = *((_QWORD *)v65 - 1);
      if (v89 >= v88)
        v65 -= 8;
      *((_QWORD *)a3 - 1) = v87;
      a3 -= 8;
      ++v86;
      if (v65 == a6)
        return result;
    }
    v90 = v65 - a6 - 8;
    if (v90 >= 0x58 && (unint64_t)(v65 - v63 + 8 * v86 - 8) >= 0x20)
    {
      v94 = 0;
      v95 = (v90 >> 3) + 1;
      v91 = &v65[-8 * (v95 & 0x3FFFFFFFFFFFFFFCLL)];
      v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = *(__n128 *)&v65[v94 - 16];
        v97 = &a3[v94];
        *((_OWORD *)v97 - 2) = *(_OWORD *)&v65[v94 - 32];
        *((__n128 *)v97 - 1) = result;
        v94 -= 32;
        v96 -= 4;
      }
      while (v96);
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
      {
        a3 -= 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
        goto LABEL_99;
      }
    }
    else
    {
      v91 = v65;
LABEL_99:
      v92 = a3 - 8;
      do
      {
        v93 = *((_QWORD *)v91 - 1);
        v91 -= 8;
        *(_QWORD *)v92 = v93;
        v92 -= 8;
      }
      while (v91 != a6);
    }
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::RenderTransaction *,std::shared_ptr<ggl::RenderTransaction>::__shared_ptr_default_delete<ggl::RenderTransaction,ggl::RenderTransaction>,std::allocator<ggl::RenderTransaction>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

ggl::RenderQueue *ggl::RenderQueue::RenderQueue(ggl::RenderQueue *this, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v17;
  uint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  malloc_zone_t *zone;
  int v22;
  uint64_t v23;
  geo::read_write_lock *v24;
  const char *v25;
  malloc_zone_t *v26;
  uint64_t v27;
  geo::read_write_lock *v28;
  const char *v29;
  malloc_zone_t *v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *v38;
  uint64_t v39;
  geo::read_write_lock *v40;
  const char *v41;
  malloc_zone_t *v42;
  uint64_t v43;
  uint64_t v44;

  *((_BYTE *)this + 56) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  if ((v3 & 1) == 0)
  {
    v43 = a2;
    a2 = v43;
    if (v17)
    {
      v18 = operator new();
      *(_QWORD *)(v18 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v18 + 24) = "GeoGL";
      *(_OWORD *)(v18 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v18 = &off_1E42B5668;
      *(_QWORD *)(v18 + 8) = "GeoGL";
      *(_OWORD *)(v18 + 72) = 0u;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_QWORD *)(v18 + 248) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      v19 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v18 + 56), 0);
      if ((_DWORD)v19)
        geo::read_write_lock::logFailure(v19, (uint64_t)"initialization", v20);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v18 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v18 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v18;
      a2 = v43;
    }
  }
  *((_QWORD *)this + 12) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  if ((v4 & 1) == 0)
  {
    v44 = a2;
    a2 = v44;
    if (v22)
    {
      v23 = operator new();
      *(_QWORD *)(v23 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v23 + 24) = "GeoGL";
      *(_OWORD *)(v23 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v23 = &off_1E42B5668;
      *(_QWORD *)(v23 + 8) = "GeoGL";
      *(_OWORD *)(v23 + 72) = 0u;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      *(_OWORD *)(v23 + 152) = 0u;
      *(_OWORD *)(v23 + 168) = 0u;
      *(_OWORD *)(v23 + 184) = 0u;
      *(_OWORD *)(v23 + 200) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_QWORD *)(v23 + 248) = 0;
      *(_OWORD *)(v23 + 56) = 0u;
      v24 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v23 + 56), 0);
      if ((_DWORD)v24)
        geo::read_write_lock::logFailure(v24, (uint64_t)"initialization", v25);
      v26 = malloc_create_zone(0, 0);
      *(_QWORD *)(v23 + 48) = v26;
      malloc_set_zone_name(v26, "GeoGL");
      *(_QWORD *)(v23 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v23;
      a2 = v44;
    }
  }
  v5 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 16) = ggl::Allocator::instance(void)::alloc;
  if (a2)
  {
    v6 = a2;
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * a2, 8);
    *((_QWORD *)this + 13) = v7;
    v8 = &v7[v6];
    *((_QWORD *)this + 15) = &v7[v6];
    do
    {
      if (v7)
        *v7 = 0;
      ++v7;
      --v6;
    }
    while (v6 * 8);
    *((_QWORD *)this + 14) = v8;
  }
  v9 = operator new();
  *(_QWORD *)v9 = 1;
  *(_DWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v10 = operator new(0x28uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E42DE998;
  v10[4] = 0;
  *(_QWORD *)(v9 + 16) = v10 + 3;
  *(_QWORD *)(v9 + 24) = v10;
  *((_QWORD *)this + 17) = v9;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E42E7AA0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v9;
  *((_QWORD *)this + 18) = v11;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  {
    v27 = operator new();
    *(_QWORD *)(v27 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v27 + 24) = "GeoGL";
    *(_OWORD *)(v27 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v27 = &off_1E42B5668;
    *(_QWORD *)(v27 + 8) = "GeoGL";
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_QWORD *)(v27 + 248) = 0;
    *(_OWORD *)(v27 + 56) = 0u;
    v28 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v27 + 56), 0);
    if ((_DWORD)v28)
      geo::read_write_lock::logFailure(v28, (uint64_t)"initialization", v29);
    v30 = malloc_create_zone(0, 0);
    *(_QWORD *)(v27 + 48) = v30;
    malloc_set_zone_name(v30, "GeoGL");
    *(_QWORD *)(v27 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v27;
  }
  *((_QWORD *)this + 22) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  {
    v31 = operator new();
    *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v31 + 24) = "GeoGL";
    *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v31 = &off_1E42B5668;
    *(_QWORD *)(v31 + 8) = "GeoGL";
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 168) = 0u;
    *(_OWORD *)(v31 + 184) = 0u;
    *(_OWORD *)(v31 + 200) = 0u;
    *(_OWORD *)(v31 + 216) = 0u;
    *(_OWORD *)(v31 + 232) = 0u;
    *(_QWORD *)(v31 + 248) = 0;
    *(_OWORD *)(v31 + 56) = 0u;
    v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
    if ((_DWORD)v32)
      geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
    v34 = malloc_create_zone(0, 0);
    *(_QWORD *)(v31 + 48) = v34;
    malloc_set_zone_name(v34, "GeoGL");
    *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v31;
  }
  *((_QWORD *)this + 26) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  {
    v35 = operator new();
    *(_QWORD *)(v35 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v35 + 24) = "GeoGL";
    *(_OWORD *)(v35 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v35 = &off_1E42B5668;
    *(_QWORD *)(v35 + 8) = "GeoGL";
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_OWORD *)(v35 + 232) = 0u;
    *(_QWORD *)(v35 + 248) = 0;
    *(_OWORD *)(v35 + 56) = 0u;
    v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
    if ((_DWORD)v36)
      geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
    v38 = malloc_create_zone(0, 0);
    *(_QWORD *)(v35 + 48) = v38;
    malloc_set_zone_name(v38, "GeoGL");
    *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v35;
  }
  *((_QWORD *)this + 30) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  {
    v39 = operator new();
    *(_QWORD *)(v39 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v39 + 24) = "GeoGL";
    *(_OWORD *)(v39 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v39 = &off_1E42B5668;
    *(_QWORD *)(v39 + 8) = "GeoGL";
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_OWORD *)(v39 + 104) = 0u;
    *(_OWORD *)(v39 + 120) = 0u;
    *(_OWORD *)(v39 + 136) = 0u;
    *(_OWORD *)(v39 + 152) = 0u;
    *(_OWORD *)(v39 + 168) = 0u;
    *(_OWORD *)(v39 + 184) = 0u;
    *(_OWORD *)(v39 + 200) = 0u;
    *(_OWORD *)(v39 + 216) = 0u;
    *(_OWORD *)(v39 + 232) = 0u;
    *(_QWORD *)(v39 + 248) = 0;
    *(_OWORD *)(v39 + 56) = 0u;
    v40 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v39 + 56), 0);
    if ((_DWORD)v40)
      geo::read_write_lock::logFailure(v40, (uint64_t)"initialization", v41);
    v42 = malloc_create_zone(0, 0);
    *(_QWORD *)(v39 + 48) = v42;
    malloc_set_zone_name(v42, "GeoGL");
    *(_QWORD *)(v39 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v39;
  }
  *((_QWORD *)this + 34) = ggl::Allocator::instance(void)::alloc;
  *((_BYTE *)this + 280) = 0;
  *((_BYTE *)this + 311) = 0;
  *((_BYTE *)this + 288) = 0;
  return this;
}

void ggl::RenderQueue::~RenderQueue(ggl::RenderQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 14);
  while (v2 != v3)
  {
    if (*(_QWORD *)v2)
      *(_QWORD *)(*(_QWORD *)v2 + 24) = 0;
    v2 += 8;
  }
  if ((*((char *)this + 311) & 0x80000000) == 0)
  {
    v4 = *((_QWORD *)this + 31);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*((void **)this + 36));
  v4 = *((_QWORD *)this + 31);
  if (v4)
  {
LABEL_8:
    *((_QWORD *)this + 32) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34), v4, *((_QWORD *)this + 33) - v4);
  }
LABEL_9:
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    *((_QWORD *)this + 28) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 30) + 40))(*((_QWORD *)this + 30), v5, *((_QWORD *)this + 29) - v5);
  }
  v6 = *((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 26) + 40))(*((_QWORD *)this + 26), v6, *((_QWORD *)this + 25) - v6);
  }
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v7, *((_QWORD *)this + 21) - v7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v8)
    goto LABEL_19;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_19:
    v11 = *((_QWORD *)this + 13);
    if (!v11)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
LABEL_20:
    *((_QWORD *)this + 14) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v11, *((_QWORD *)this + 15) - v11);
  }
LABEL_21:
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v12, *((_QWORD *)this + 11) - v12);
  }
  if (*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 0;
}

void ggl::RenderQueue::attachPass(ggl::RenderQueue *this, ggl::RenderTarget *a2, ggl::RenderQueue *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v7 = *((_QWORD *)this + 17);
  v6 = *((_QWORD *)this + 18);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)a3 + 18);
  *((_QWORD *)a3 + 17) = v7;
  *((_QWORD *)a3 + 18) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 10);
  v14 = *((_QWORD *)this + 11);
  if (v13 >= v14)
  {
    v16 = 0xAAAAAAAAAAAAAAALL;
    v17 = *((_QWORD *)this + 9);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v17) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v17) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 < 0x555555555555555)
      v16 = v19;
    if (v16)
    {
      v21 = 24 * v16;
      v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), 24 * v16, 8);
      v23 = v22 + 24 * v18;
      v16 = v22 + v21;
      if (v22)
      {
        *(_QWORD *)v23 = a2;
        v24 = v22 + 24 * v18;
        *(_QWORD *)(v24 + 8) = a3;
        *(_BYTE *)(v24 + 16) = 0;
      }
    }
    else
    {
      v23 = 24 * v18;
    }
    v15 = v23 + 24;
    v26 = *((_QWORD *)this + 9);
    v25 = *((_QWORD *)this + 10);
    if (v25 != v26)
    {
      do
      {
        v27 = *(_OWORD *)(v25 - 24);
        *(_QWORD *)(v23 - 8) = *(_QWORD *)(v25 - 8);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      v25 = *((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 9) = v23;
    *((_QWORD *)this + 10) = v15;
    v28 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v16;
    if (v25)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v25, v28 - v25);
  }
  else
  {
    if (v13)
    {
      *(_QWORD *)v13 = a2;
      *(_QWORD *)(v13 + 8) = a3;
      *(_BYTE *)(v13 + 16) = 0;
    }
    v15 = v13 + 24;
  }
  *((_QWORD *)this + 10) = v15;
}

uint64_t ggl::RenderQueue::addTextureToSynchronize(uint64_t this, ggl::Texture *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v4 = *(_QWORD **)(this + 192);
  v5 = *(_QWORD *)(this + 200);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *(_QWORD *)(this + 184);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(this + 208) + 16))(*(_QWORD *)(this + 208), 8 * v9, 8);
    v12 = (_QWORD *)(this + 8 * v8);
    v9 = this + v11;
    if (this)
      *v12 = a2;
  }
  else
  {
    v12 = (_QWORD *)(8 * v8);
  }
  v6 = v12 + 1;
  v14 = *(_QWORD *)(v3 + 184);
  v13 = *(_QWORD *)(v3 + 192);
  if (v13 != v14)
  {
    v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      v17 = *(_QWORD *)(v3 + 192);
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = *(_QWORD *)(v3 + 192);
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    v13 = *(_QWORD *)(v3 + 184);
  }
  *(_QWORD *)(v3 + 184) = v12;
  *(_QWORD *)(v3 + 192) = v6;
  v23 = *(_QWORD *)(v3 + 200);
  *(_QWORD *)(v3 + 200) = v9;
  if (v13)
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 208) + 40))(*(_QWORD *)(v3 + 208), v13, v23 - v13);
LABEL_27:
  *(_QWORD *)(v3 + 192) = v6;
  return this;
}

void std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5F60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::DistanceAtlas::DistanceAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5F60;
  a2[1] = v2;
  return result;
}

void ggl::RenderDataHolder::~RenderDataHolder(ggl::RenderDataHolder *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RenderDataHolder::replaceRenderResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || ((v7 = *(_QWORD *)(a1 + 24)) != 0 ? (v8 = v7 == 3735927469) : (v8 = 1), v8))
  {
    if (a2)
      goto LABEL_8;
  }
  else
  {
    while (1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (!a2)
        break;
LABEL_8:
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      if (v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        v11 = std::__shared_weak_count::lock(v9);
        if (v11)
          goto LABEL_13;
      }
      std::__throw_bad_weak_ptr[abi:nn180100]();
    }
  }
  v10 = 0;
  v11 = 0;
LABEL_13:
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)(a1 + 24) = a3;
  ++*(_DWORD *)(a1 + 32);
}

uint64_t ggl::Performance::Counters::setDisplayMode(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v3 + 72 * a2 + 60))
  {
    v4 = result;
    v5 = v3 + 72 * a2;
    v8 = *(_DWORD *)(v5 + 64);
    v7 = (_DWORD *)(v5 + 64);
    v6 = v8;
    if (*((_QWORD *)v7 - 3))
      v9 = a3;
    else
      v9 = 0;
    if (v6 != v9)
    {
      v10 = v3 + 72 * a2;
      v13 = *(_QWORD **)(v10 + 48);
      v12 = (_QWORD *)(v10 + 48);
      v11 = v13;
      if (v13)
      {
        if (*v11)
          MEMORY[0x1A1AF4DE8](*v11, 0x1000C8000313F17);
        result = MEMORY[0x1A1AF4E00](v11, 0x20C40960023A9);
        *v12 = 0;
      }
      if (v9 == 2)
      {
        v14 = (_QWORD *)operator new();
        result = operator new[]();
        *v14 = result;
        v14[1] = result;
        v14[2] = result + 480;
        *(_OWORD *)result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)(result + 64) = 0u;
        *(_OWORD *)(result + 80) = 0u;
        *(_OWORD *)(result + 96) = 0u;
        *(_OWORD *)(result + 112) = 0u;
        *(_OWORD *)(result + 128) = 0u;
        *(_OWORD *)(result + 144) = 0u;
        *(_OWORD *)(result + 160) = 0u;
        *(_OWORD *)(result + 176) = 0u;
        *(_OWORD *)(result + 192) = 0u;
        *(_OWORD *)(result + 208) = 0u;
        *(_OWORD *)(result + 224) = 0u;
        *(_OWORD *)(result + 240) = 0u;
        *(_OWORD *)(result + 256) = 0u;
        *(_OWORD *)(result + 272) = 0u;
        *(_OWORD *)(result + 288) = 0u;
        *(_OWORD *)(result + 304) = 0u;
        *(_OWORD *)(result + 320) = 0u;
        *(_OWORD *)(result + 336) = 0u;
        *(_OWORD *)(result + 352) = 0u;
        *(_OWORD *)(result + 368) = 0u;
        *(_OWORD *)(result + 384) = 0u;
        *(_OWORD *)(result + 400) = 0u;
        *(_OWORD *)(result + 416) = 0u;
        *(_OWORD *)(result + 432) = 0u;
        *(_OWORD *)(result + 448) = 0u;
        *(_OWORD *)(result + 464) = 0u;
        *v12 = v14;
      }
      *v7 = v9;
    }
    *(_BYTE *)(v4 + 52) = 1;
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DebugConsole>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DebugConsole>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::Performance::Counters::draw(float32x2_t *this, float32x2_t *a2)
{
  uint64_t v4;
  float32_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  float v9;
  float v10;
  float32x2_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  int8x16_t *v35;
  unint64_t v36;
  float v37;
  size_t v38;
  double v39;
  int32x2_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  float v44;
  int v45;
  int v46;
  __int8 v47;
  __int8 v48;
  BOOL v49;
  __int8 v50;
  __int8 v51;
  float v52;
  unint64_t *v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  unint64_t v58;
  float v59;
  float v61;
  _DWORD *v62;
  float v63;
  uint64_t v64;
  float v65;
  ggl::Performance::Counters *v66;
  float v67;
  float v68;
  uint64_t v69;
  unsigned __int32 v70;
  __int128 v71;
  int8x16_t __str;

  __str.i64[1] = *MEMORY[0x1E0C80C00];
  v69 = mach_absolute_time();
  v4 = this[5].u32[0];
  v70 = this[6].u32[0];
  if (this[6].i8[4])
  {
    if ((_DWORD)v4)
    {
      v61 = a2[3].f32[1];
      v62 = (_DWORD *)(*(_QWORD *)&this[2] + 64);
      v63 = 100.0;
      v64 = this[5].u32[0];
      do
      {
        if (*(v62 - 1) && ((v70 >> *(v62 - 2)) & 1) != 0)
        {
          if (*v62 == 2)
          {
            v65 = v61 + 33.0;
          }
          else
          {
            v65 = a2[3].f32[1];
            if (*v62 == 1)
              v65 = v61 + v61;
          }
          v63 = v65 + v63;
        }
        v62 += 18;
        --v64;
      }
      while (v64);
    }
    else
    {
      v63 = 100.0;
    }
    this[1].i32[0] = 1134493696;
    *this = (float32x2_t)0x42C4000041600000;
    this[1].f32[1] = v63 + 2.0;
    this[6].i8[4] = 0;
  }
  ggl::DebugConsole::begin((ggl::DebugConsole *)a2);
  a2[10] = 0;
  a2[12].i32[0] = 2130706432;
  a2[1].i32[0] = this->i32[0];
  v5 = this->f32[1];
  a2[1].f32[1] = v5;
  ggl::DebugConsole::drawRectangleWithFill(a2, this + 1, v5);
  a2[12].i32[0] = -4210753;
  if ((_DWORD)v4)
  {
    v8 = 0;
    *(_QWORD *)&v6 = 0x42C8000041800000;
    v71 = v6;
    v66 = (ggl::Performance::Counters *)this;
    do
    {
      v11 = this[2];
      v12 = *(_QWORD *)&v11 + 72 * v8;
      v13 = (int *)(v12 + 60);
      if (!*(_DWORD *)(v12 + 60) || ((v70 >> *(_DWORD *)(*(_QWORD *)&v11 + 72 * v8 + 56)) & 1) == 0)
        goto LABEL_7;
      v14 = atomic_load((unint64_t *)(*(_QWORD *)&this[4] + 8 * v8));
      v15 = *(_QWORD *)&v11 + 72 * v8;
      v17 = *(_QWORD *)(v15 + 24);
      v16 = (unint64_t *)(v15 + 24);
      if (v17 < v14)
        goto LABEL_14;
      if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
        dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
      LODWORD(v7) = 1133903872;
      if ((float)(*(float *)(ggl::Performance::Counters::instance(void)::counters + 56)
                 * (float)(v69 - *(_QWORD *)(*(_QWORD *)&v11 + 72 * v8 + 32))) > 300.0)
      {
LABEL_14:
        *v16 = v14;
        *(_QWORD *)(*(_QWORD *)&v11 + 72 * v8 + 32) = v69;
      }
      v18 = *(_QWORD *)&v11 + 72 * v8;
      v21 = *(_QWORD **)(v18 + 48);
      v20 = v18 + 48;
      v19 = v21;
      if (v21)
      {
        v22 = *(_QWORD *)&v11 + 72 * v8;
        v23 = fminf((float)v14 / (float)*(unint64_t *)(v22 + 40), 1.0);
        *(float *)&v7 = v23 * 255.0;
        v24 = (int)(float)(v23 * 255.0);
        v25 = *(_DWORD *)(v22 + 68);
        if (v25 == 1)
        {
          v26 = (int)(float)(v23 * 255.0);
          LOBYTE(v24) = ~(_BYTE)v24;
        }
        else if (v25)
        {
          LOBYTE(v26) = 0;
          LOBYTE(v24) = 0;
        }
        else
        {
          LOBYTE(v26) = ~(_BYTE)v24;
        }
        v27 = v19[1];
        *(float *)v27 = v23;
        *(_BYTE *)(v27 + 4) = v26;
        *(_BYTE *)(v27 + 5) = v24;
        *(_WORD *)(v27 + 6) = -15360;
        v28 = v19[2];
        v29 = v19[1] + 8;
        v19[1] = v29;
        if (v29 >= v28)
          v19[1] = *v19;
      }
      v30 = *v13;
      if (*v13 == 3)
      {
        if (*v16)
          v32 = *(_QWORD *)(*(_QWORD *)&v11 + 72 * v8 + 40) > 100 * *v16;
        else
          v32 = 0;
        if (v32)
          v31 = snprintf(__str.i8, 8uLL, "<1%%");
        else
          v31 = snprintf(__str.i8, 8uLL, "%lld%%");
      }
      else if (v30 == 2)
      {
        v31 = snprintf(__str.i8, 8uLL, "%lld");
      }
      else if (v30 == 1)
      {
        if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
          dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
        v31 = snprintf(__str.i8, 8uLL, "%.2fms");
      }
      else
      {
        v31 = 0;
      }
      v33 = v31;
      a2[1] = (float32x2_t)v71;
      v34 = *(char *)(v12 + 23);
      if (v34 >= 0)
        v35 = (int8x16_t *)(*(_QWORD *)&v11 + 72 * v8);
      else
        v35 = *(int8x16_t **)v12;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v12 + 23);
      else
        v36 = *(_QWORD *)(v12 + 8);
      ggl::DebugConsole::drawString((uint64_t)a2, v35, v36, *(double *)&v71, *(int32x2_t *)&v7);
      v37 = *(float *)&v71;
      a2[1].f32[0] = -(float)((float)(-300.0 - *(float *)&v71) + (float)(a2[3].f32[0] * (float)v33));
      a2[1].i32[1] = DWORD1(v71);
      v38 = strlen(__str.i8);
      ggl::DebugConsole::drawString((uint64_t)a2, &__str, v38, v39, v40);
      v10 = *((float *)&v71 + 1) + a2[3].f32[1];
      v41 = v71;
      *((float *)&v41 + 1) = v10;
      v71 = v41;
      v42 = *(_DWORD *)(*(_QWORD *)&v11 + 72 * v8 + 64);
      if (v42 == 2)
      {
        v53 = *(unint64_t **)v20;
        if (*(_QWORD *)v20)
        {
          v68 = v10;
          v54 = v10 + 32.0;
          v55 = v53[1];
          if (v55 < v53[2])
          {
            do
            {
              v56 = v37;
              v37 = v37 + 5.0;
              a2[12].i8[0] = *(_BYTE *)(v55 + 4);
              a2[12].i8[1] = *(_BYTE *)(v55 + 5);
              a2[12].i8[2] = *(_BYTE *)(v55 + 6);
              a2[12].i8[3] = *(_BYTE *)(v55 + 7);
              a2[1].f32[0] = v56;
              a2[1].f32[1] = v54;
              v57 = *(float *)v55;
              v55 += 8;
              *(float *)__str.i32 = v37;
              *(float *)&__str.i32[1] = v54 + (float)(v57 * -32.0);
              ggl::DebugConsole::drawRectangleWithFill(a2, (float32x2_t *)&__str, *(float32_t *)&__str.i32[1]);
              v53 = *(unint64_t **)v20;
            }
            while (v55 < *(_QWORD *)(*(_QWORD *)v20 + 16));
            v55 = v53[1];
          }
          v58 = *v53;
          if (*v53 < v55)
          {
            do
            {
              a2[12].i8[0] = *(_BYTE *)(v58 + 4);
              a2[12].i8[1] = *(_BYTE *)(v58 + 5);
              a2[12].i8[2] = *(_BYTE *)(v58 + 6);
              a2[12].i8[3] = *(_BYTE *)(v58 + 7);
              a2[1].f32[0] = v37;
              a2[1].f32[1] = v54;
              v59 = *(float *)v58;
              v58 += 8;
              *(float *)__str.i32 = v37 + 5.0;
              *(float *)&__str.i32[1] = v54 + (float)(v59 * -32.0);
              ggl::DebugConsole::drawRectangleWithFill(a2, (float32x2_t *)&__str, *(float32_t *)&__str.i32[1]);
              v37 = v37 + 5.0;
            }
            while (v58 < *(_QWORD *)(*(_QWORD *)v20 + 8));
          }
          a2[12].i32[0] = -4210753;
          v9 = 33.0;
          v10 = v68;
        }
        else
        {
          v9 = 33.0;
        }
      }
      else
      {
        if (v42 != 1)
          goto LABEL_6;
        v43 = *(_QWORD *)&v11 + 72 * v8;
        v44 = fminf((float)*v16 / (float)*(unint64_t *)(v43 + 40), 1.0);
        a2[1].f32[0] = v37;
        a2[1].f32[1] = v10;
        v45 = (int)(float)(v44 * 255.0);
        v46 = *(_DWORD *)(v43 + 68);
        if (v46)
          v47 = 0;
        else
          v47 = ~(_BYTE)v45;
        if (v46)
          v48 = 0;
        else
          v48 = (int)(float)(v44 * 255.0);
        v49 = v46 == 1;
        if (v46 == 1)
          v50 = (int)(float)(v44 * 255.0);
        else
          v50 = v47;
        if (v49)
          v51 = ~(_BYTE)v45;
        else
          v51 = v48;
        a2[12].i8[0] = v50;
        a2[12].i8[1] = v51;
        a2[12].i16[1] = -15360;
        v52 = v44 * 300.0;
        v67 = v10;
        ggl::DebugConsole::drawBar((ggl::DebugConsole *)a2, v44 * 300.0);
        a2[12].i32[0] = -16777216;
        ggl::DebugConsole::drawBar((ggl::DebugConsole *)a2, 300.0 - v52);
        v10 = v67;
        a2[12].i32[0] = -4210753;
        v9 = a2[3].f32[1];
      }
      v7 = v71;
      *((float *)&v7 + 1) = v10 + v9;
      v71 = v7;
LABEL_6:
      this = (float32x2_t *)v66;
LABEL_7:
      ++v8;
    }
    while (v8 != v4);
  }
  return ggl::DebugConsole::end((uint64_t)a2);
}

void std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D7FB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0,std::allocator<ggl::MetalClearItemProcessor::createClearMesh(ggl::ProcessClearItemContext &)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D7FB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8000;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0,std::allocator<ggl::MetalClearItemProcessor::process(ggl::ProcessClearItemContext &,ggl::ClearItem *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;

  v2 = result;
  v3 = *a2;
  v4 = *(uint64_t **)(result + 8);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 8);
  if (v6)
  {
    if (v3 && *(_BYTE *)(v5 + 17) != 2)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(*a2, v5, 0, v6, 1, 0);
      v7 = (_DWORD *)result;
    }
    else
    {
      v7 = *(_DWORD **)(v5 + 72);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = **(_DWORD ***)(v2 + 16);
  *v7 = v8[1];
  v7[1] = v8[2];
  v7[2] = v8[3];
  v7[3] = v8[4];
  v7[4] = v8[6];
  if (v6)
  {
    if (v3 && *(_BYTE *)(v5 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    v9 = *(_QWORD *)(v5 + 64);
    if (v9 <= v6)
      v9 = v6;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v9;
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Clear::ClearMesh *,std::shared_ptr<ggl::Clear::ClearMesh>::__shared_ptr_default_delete<ggl::Clear::ClearMesh,ggl::Clear::ClearMesh>,std::allocator<ggl::Clear::ClearMesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Clear::ClearMesh *,std::shared_ptr<ggl::Clear::ClearMesh>::__shared_ptr_default_delete<ggl::Clear::ClearMesh,ggl::Clear::ClearMesh>,std::allocator<ggl::Clear::ClearMesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6)
{
  __int128 v7;
  unint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  *(_QWORD *)a1 = &off_1E42B5748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a5;
  *(_BYTE *)(a1 + 17) = a3;
  *(_BYTE *)(a1 + 18) = a4;
  *(_BYTE *)(a1 + 19) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a6 * a2;
  v7 = 0uLL;
  *(_OWORD *)(a1 + 72) = 0u;
  v8 = a1 + 72;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v10 = &unk_1ECE44000;
  if ((v9 & 1) == 0)
  {
    v20 = v8;
    v19 = a5;
    v18 = a6;
    v7 = 0uLL;
    v10 = (_QWORD *)&unk_1ECE44000;
    a6 = v18;
    a5 = v19;
    v16 = v15;
    v8 = v20;
    if (v16)
    {
      v17 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "GeoGL", 0xA3D02C1100000005);
      v7 = 0uLL;
      v10 = (_QWORD *)&unk_1ECE44000;
      a6 = v18;
      v8 = v20;
      a5 = v19;
    }
  }
  *(_QWORD *)(a1 + 96) = v10[495];
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2DD0;
  *(_DWORD *)(a1 + 112) = 0;
  if (a6 && ((a5 & 1) == 0 || (a5 & 6) == 6))
  {
    v11 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 80) - v12;
    if (v11 <= v13)
    {
      if (v11 < v13)
        *(_QWORD *)(a1 + 80) = v12 + v11;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v8, v11 - v13);
    }
  }
  return a1;
}

double ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  __int128 v4;
  unsigned __int8 v5;
  double result;
  int v7;
  int v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E42B5748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 17) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4 * a2;
  v4 = 0uLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if ((v5 & 1) == 0)
  {
    v13 = a1;
    v4 = 0uLL;
    v8 = v7;
    a1 = v13;
    if (v8)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v9 + 24) = "GeoGL";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "GeoGL";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v9;
      a1 = v13;
      v4 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 96) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a1 + 152) = v4;
  *(_OWORD *)(a1 + 168) = v4;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB2DD0;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t ggl::BufferData::BufferData(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;

  *(_QWORD *)a1 = &off_1E42B5748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a6;
  *(_BYTE *)(a1 + 19) = 0;
  v7 = a3[1];
  *(_QWORD *)(a1 + 24) = *a3;
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = 0uLL;
  *(_OWORD *)(a1 + 72) = 0u;
  v11 = a1 + 72;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v13 = &unk_1ECE44000;
  if ((v12 & 1) == 0)
  {
    v22 = a6;
    v21 = a3;
    v10 = 0uLL;
    v13 = (_QWORD *)&unk_1ECE44000;
    a3 = v21;
    a6 = v22;
    v19 = v18;
    v11 = a1 + 72;
    if (v19)
    {
      v20 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "GeoGL", 0xA3D02C1100000005);
      v10 = 0uLL;
      v13 = (_QWORD *)&unk_1ECE44000;
      v11 = a1 + 72;
      a3 = v21;
      a6 = v22;
    }
  }
  *(_QWORD *)(a1 + 96) = v13[495];
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  *(_WORD *)(a1 + 17) = *(_WORD *)(*a3 + 37);
  v14 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 120) = v14;
  if ((a6 & 1) == 0 || (a6 & 6) == 6)
  {
    v15 = *(_QWORD *)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80) - v15;
    if (v14 <= v16)
    {
      if (v14 < v16)
        *(_QWORD *)(a1 + 80) = v15 + v14;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v11, v14 - v16);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E47A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E47A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VertexData::~VertexData(std::mutex *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexData::~VertexData(ggl::VertexData *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *((_QWORD *)this - 25) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  v2 = *((_QWORD *)this - 16);
  if (v2)
  {
    *((_QWORD *)this - 15) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this - 13) + 40))(*((_QWORD *)this - 13), v2, *((_QWORD *)this - 14) - v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this - 21);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *((_QWORD *)this - 25) = &off_1E42B5748;
  v2 = (char *)this - 200;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  v3 = *((_QWORD *)v2 + 9);
  if (v3)
  {
    *((_QWORD *)this - 15) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this - 13) + 40))(*((_QWORD *)this - 13), v3, *((_QWORD *)this - 14) - v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this - 21);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TextureCube::~TextureCube(ggl::TextureCube *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B5EA8;
  *((_QWORD *)this + 5) = &unk_1E42B5EC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 96));
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B5EA8;
  *((_QWORD *)this + 5) = &unk_1E42B5EC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 96));
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TextureCube::~TextureCube(ggl::TextureCube *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42B5EA8;
  *(_QWORD *)this = &unk_1E42B5EC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 56));
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *((_QWORD *)this - 5) = &off_1E42B5EA8;
  *(_QWORD *)this = &unk_1E42B5EC8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((ggl::TextureCube *)((char *)this + 56));
  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v5 = *((_QWORD *)this - 4);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::TextureCube::TextureCube(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = *(_DWORD *)(*a2 + 12);
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 56) = 0x100000003;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 68) = v3;
  *(_QWORD *)(result + 72) = 0x100000001;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)result = &off_1E42B5EA8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = &unk_1E42B5EC8;
  *(_QWORD *)(result + 48) = "";
  v5 = *a2;
  v4 = a2[1];
  *(_DWORD *)(result + 88) = *(_DWORD *)(*a2 + 8);
  *(_QWORD *)(result + 96) = v5;
  *(_QWORD *)(result + 104) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[3];
  *(_QWORD *)(result + 112) = a2[2];
  *(_QWORD *)(result + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[5];
  *(_QWORD *)(result + 128) = a2[4];
  *(_QWORD *)(result + 136) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a2[7];
  *(_QWORD *)(result + 144) = a2[6];
  *(_QWORD *)(result + 152) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[9];
  *(_QWORD *)(result + 160) = a2[8];
  *(_QWORD *)(result + 168) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a2[11];
  *(_QWORD *)(result + 176) = a2[10];
  *(_QWORD *)(result + 184) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_WORD *)(result + 192) = 0;
  *(_DWORD *)(result + 196) = *(_DWORD *)(*a2 + 16);
  *(_BYTE *)(result + 200) = 1;
  v23 = a3[1];
  *(_QWORD *)(result + 208) = *a3;
  *(_QWORD *)(result + 216) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  return result;
}

void std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6D50;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void ggl::IndexData::~IndexData(std::mutex *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  this->__m_.__sig = (uint64_t)&off_1E42B5748;
  std::mutex::~mutex(this + 2);
  v2 = *(_QWORD *)this[1].__m_.__opaque;
  if (v2)
  {
    *(_QWORD *)&this[1].__m_.__opaque[8] = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&this[1].__m_.__opaque[24] + 40))(*(_QWORD *)&this[1].__m_.__opaque[24], v2, *(_QWORD *)&this[1].__m_.__opaque[16] - v2);
  }
  v3 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::IndexData::~IndexData(ggl::IndexData *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *((_QWORD *)this - 25) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  v2 = *((_QWORD *)this - 16);
  if (v2)
  {
    *((_QWORD *)this - 15) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this - 13) + 40))(*((_QWORD *)this - 13), v2, *((_QWORD *)this - 14) - v2);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this - 21);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *((_QWORD *)this - 25) = &off_1E42B5748;
  v2 = (char *)this - 200;
  std::mutex::~mutex((std::mutex *)((char *)this - 72));
  v3 = *((_QWORD *)v2 + 9);
  if (v3)
  {
    *((_QWORD *)this - 15) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this - 13) + 40))(*((_QWORD *)this - 13), v3, *((_QWORD *)this - 14) - v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this - 21);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Renderer::enablePerformanceHUD(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40) = a2;
  return this;
}

void ggl::Renderer::~Renderer(ggl::Renderer *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  ggl::RenderQueue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = off_1E42BCC90;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (ggl::RenderQueue *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
  {
    ggl::RenderQueue::~RenderQueue(v8);
    MEMORY[0x1A1AF4E00]();
  }
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 7);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v11, *((_QWORD *)this + 9) - v11);
  }
}

void ggl::Renderer::addDebugRenderer(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = *(_QWORD **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v4 >= v5)
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = ((uint64_t)v4 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v5 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    if (v12)
    {
      v14 = 16 * v12;
      v15 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), 16 * v12, 8);
      v16 = (_OWORD *)(v15 + 16 * v11);
      v12 = v15 + v14;
      if (v15)
      {
        v17 = *a2;
        *v16 = *a2;
        if (*((_QWORD *)&v17 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
      }
    }
    else
    {
      v16 = (_OWORD *)(16 * v11);
    }
    v9 = v16 + 1;
    v20 = *(_QWORD **)(a1 + 56);
    v21 = *(_QWORD **)(a1 + 64);
    if (v21 == v20)
    {
      *(_QWORD *)(a1 + 56) = v16;
      *(_QWORD *)(a1 + 64) = v9;
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v12;
    }
    else
    {
      do
      {
        v22 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *--v16 = v22;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != v20);
      v21 = *(_QWORD **)(a1 + 56);
      v23 = *(_QWORD **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v16;
      *(_QWORD *)(a1 + 64) = v9;
      v24 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v12;
      while (v23 != v21)
      {
        v25 = (std::__shared_weak_count *)*(v23 - 1);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 2;
      }
    }
    if (v21)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v21, v24 - (_QWORD)v21);
  }
  else
  {
    if (v4)
    {
      v6 = *((_QWORD *)a2 + 1);
      *v4 = *(_QWORD *)a2;
      v4[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
    }
    v9 = v4 + 2;
  }
  *(_QWORD *)(a1 + 64) = v9;
}

void ggl::Renderer::removeDebugRenderer(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(_QWORD **)(a1 + 56);
  v4 = *(_QWORD **)(a1 + 64);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      v3 += 2;
      if (v3 == v4)
      {
        v3 = *(_QWORD **)(a1 + 64);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    v5 = v3 + 2;
    if (v3 + 2 != v4)
    {
      do
      {
        v6 = *(_OWORD *)v5;
        *v5 = 0;
        v5[1] = 0;
        v7 = (std::__shared_weak_count *)v3[1];
        *(_OWORD *)v3 = v6;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 += 2;
        v3 += 2;
      }
      while (v5 != v4);
      v4 = *(_QWORD **)(a1 + 64);
    }
    while (v4 != v3)
    {
      v10 = (std::__shared_weak_count *)*(v4 - 1);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 2;
    }
    *(_QWORD *)(a1 + 64) = v3;
  }
}

void sub_19FF2B2C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FF2B5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FF2B6D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FF2B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v14 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v15 = *(unint64_t **)(ggl::Performance::Counters::instance(void)::counters + 32);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + v14 - a10, v15));

  _Unwind_Resume(a1);
}

void ggl::IOSurfaceTexture::~IOSurfaceTexture(ggl::IOSurfaceTexture *this)
{
  ggl::IOSurfaceTexture::~IOSurfaceTexture(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  const void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E42B8850;
  *((_QWORD *)this + 5) = &unk_1E42B8870;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 21);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &off_1E42BE438;
  *((_QWORD *)this + 5) = &unk_1E42BE458;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void `non-virtual thunk to'ggl::IOSurfaceTexture::~IOSurfaceTexture(ggl::IOSurfaceTexture *this)
{
  ggl::IOSurfaceTexture::~IOSurfaceTexture((ggl::IOSurfaceTexture *)((char *)this - 40));
}

{
  ggl::IOSurfaceTexture::~IOSurfaceTexture((ggl::IOSurfaceTexture *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FF2BF44(_Unwind_Exception *a1)
{
  ggl::Texture2D *v1;

  ggl::Texture2D::~Texture2D(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::IOSurfaceTexture::IOSurfaceTexture(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, int a6)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const __CFDictionary *v20;
  IOSurfaceRef v21;

  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = a6;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 100) = 0x100000000;
  *(_QWORD *)a1 = &off_1E42BE438;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &unk_1E42BE458;
  *(_QWORD *)(a1 + 48) = "";
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 130) = 1;
  v9 = a5[1];
  *(_QWORD *)(a1 + 136) = *a5;
  *(_QWORD *)(a1 + 144) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a3;
  *(_QWORD *)a1 = &off_1E42B8850;
  *(_QWORD *)(a1 + 40) = &unk_1E42B8870;
  *(_QWORD *)(a1 + 168) = 0;
  v12 = 4 * vcvtd_n_u64_f64(ceil((double)a2 * 0.0625), 4uLL);
  *(_DWORD *)(a1 + 152) = v12;
  *(_DWORD *)(a1 + 156) = v12 * vcvtd_n_u64_f64(ceil((double)a3 * 0.0625), 4uLL);
  v13 = 1380401729;
  switch(a4)
  {
    case 12:
    case 13:
      break;
    case 42:
      v13 = 875704422;
      break;
    case 43:
      v13 = 875704438;
      break;
    default:
      v13 = 1111970369;
      break;
  }
  v14 = objc_alloc(MEMORY[0x1E0C99D80]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 152));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 156));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (const __CFDictionary *)objc_msgSend(v14, "initWithObjectsAndKeys:", v15, *MEMORY[0x1E0CBC1E0], v16, *MEMORY[0x1E0CBC008], v17, *MEMORY[0x1E0CBC070], &unk_1E43479C0, *MEMORY[0x1E0CBBF00], MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CBC050], v18, *MEMORY[0x1E0CBBF08], v19, *MEMORY[0x1E0CBBEE0], &unk_1E43479D8, *MEMORY[0x1E0CBBF10], 0);

  v21 = IOSurfaceCreate(v20);
  *(_QWORD *)(a1 + 160) = v21;
  *(_DWORD *)(a1 + 56) = 4;
  return a1;
}

void sub_19FF2C370(_Unwind_Exception *a1)
{
  ggl::Texture *v1;
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)v1 = v3;
  *((_QWORD *)v1 + 5) = v3 + 32;
  v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 18);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v1 + 15);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)v1 = &off_1E42BA510;
  *((_QWORD *)v1 + 5) = &unk_1E42BA530;
  v11 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  ggl::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

void ggl::IOSurfaceTexture::createTextureFromPixelBuffer(_QWORD *a1, CVPixelBufferRef pixelBuffer, int a3, uint64_t *a4)
{
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int Width;
  int Height;
  signed int PixelFormatType;
  size_t BytesPerRow;
  size_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  IOSurfaceRef IOSurface;
  unint64_t *v22;
  unint64_t v23;

  if (!CVPixelBufferGetIOSurface(pixelBuffer))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v8 = operator new(0xC8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E0BB8;
  v10 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v17 = BytesPerRow / CVPixelBufferGetWidth(pixelBuffer);
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1380401729)
    {
      if (v17 == 4)
      {
        if (a3)
          v18 = 13;
        else
          v18 = 12;
        goto LABEL_24;
      }
    }
    else if (PixelFormatType == 1111970369 && v17 == 4)
    {
      if (a3)
        v18 = 15;
      else
        v18 = 14;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (PixelFormatType == 875704422)
  {
    if (v17 == 1)
    {
      v18 = 42;
      goto LABEL_24;
    }
LABEL_23:
    v18 = 0;
    goto LABEL_24;
  }
  if (PixelFormatType != 875704438 || v17 != 1)
    goto LABEL_23;
  v18 = 43;
LABEL_24:
  *((_DWORD *)v8 + 14) = 0;
  v8[5] = 0;
  v8[6] = 0;
  v8[10] = 0x100000001;
  *((_DWORD *)v8 + 22) = 0;
  *((_DWORD *)v8 + 23) = v18;
  *((_DWORD *)v8 + 24) = 1;
  *(_QWORD *)((char *)v8 + 100) = 0;
  *(_QWORD *)((char *)v8 + 116) = 0;
  *(_QWORD *)((char *)v8 + 124) = 0x100000000;
  *(_QWORD *)((char *)v8 + 108) = 0;
  v8[3] = &off_1E42BE438;
  v8[4] = 0;
  v8[8] = &unk_1E42BE458;
  v8[9] = "";
  v8[17] = 0;
  v8[18] = 0;
  *((_WORD *)v8 + 76) = 0;
  *((_BYTE *)v8 + 154) = 1;
  v8[20] = v10;
  v8[21] = v9;
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_DWORD *)v8 + 26) = Width;
  *((_DWORD *)v8 + 27) = Height;
  v8[3] = &off_1E42B8850;
  v8[8] = &unk_1E42B8870;
  v8[24] = 0;
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (IOSurface)
  {
    CFRetain(pixelBuffer);
    v8[24] = pixelBuffer;
    CFRetain(IOSurface);
    v8[23] = IOSurface;
    *((_DWORD *)v8 + 20) = 4;
  }
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_19FF2C710(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  ggl::Texture2D *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  ggl::Texture2D::~Texture2D(v3);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void ggl::MetalDevice::~MetalDevice(ggl::MetalDevice *this)
{
  ggl::MetalDevice::~MetalDevice(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42B5C50;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    *(_QWORD *)(v2 + 256) = 0;
  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  *(_QWORD *)this = off_1E42BC1A8;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::MetalResourceManager,geo::StdAllocator<ggl::MetalResourceManager,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 352);
}

void ggl::NullRenderer::~NullRenderer(ggl::NullRenderer *this)
{
  ggl::Renderer::~Renderer(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::NullRenderer::readPixels(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

float ggl::NullRenderer::averageFramesPerSecond(ggl::NullRenderer *this)
{
  return 1.0;
}

void `non-virtual thunk to'ggl::RenderTarget::~RenderTarget(ggl::RenderTarget *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v2 = *((_QWORD *)this - 4);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *((_QWORD *)this - 5) = &off_1E42B8A10;
  v2 = *((_QWORD *)this - 4);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this - 2));
    *((_QWORD *)this - 2) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this - 3);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void textureWithData(_QWORD *a1, void *a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = v23;
  if (!v23)
  {
    *a1 = 0;
    a1[1] = 0;
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_19;
  }
  v7 = operator new(0xB0uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42E53B0;
  v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_DWORD *)(v6 + 12);
  v7[13] = 0;
  *((_DWORD *)v7 + 14) = 0;
  v7[5] = 0;
  v7[6] = 0;
  v7[10] = 0x100000001;
  *((_DWORD *)v7 + 22) = 0;
  *((_DWORD *)v7 + 23) = v12;
  v7[12] = 0x100000001;
  v7[14] = 0;
  v7[15] = 0;
  v7[3] = &off_1E42BE438;
  v7[4] = 0;
  v7[8] = &unk_1E42BE458;
  v7[9] = "";
  *((_DWORD *)v7 + 32) = *(_DWORD *)(v6 + 8);
  v7[17] = v6;
  v7[18] = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_WORD *)v7 + 76) = 0;
  *((_BYTE *)v7 + 154) = 1;
  v15 = a3[1];
  v7[20] = *a3;
  v7[21] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v7[13] = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v8 + 3;
  a1[1] = v8;
  v20 = v24;
  if (v24)
  {
LABEL_19:
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19FF2CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void loadTexture(_QWORD *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  _QWORD v21[2];

  v20 = a2;
  v9 = a3;
  v10 = a4;
  v11 = objc_alloc(MEMORY[0x1E0C99D50]);
  objc_msgSend(v20, "pathForResource:ofType:", v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v11, "initWithContentsOfFile:", v12);

  v14 = *a5;
  v15 = (std::__shared_weak_count *)a5[1];
  v21[0] = v14;
  v21[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  textureWithData(a1, v13, v21, 2u, 0, 0);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

}

void sub_19FF2CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void textureWithData(_QWORD *a1, void *a2, _QWORD *a3, unsigned int a4, int a5, _BYTE *a6)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v8 = v25;
  if (!v25)
  {
    *a1 = 0;
    a1[1] = 0;
    v22 = v26;
    if (!v26)
      return;
    goto LABEL_19;
  }
  v9 = operator new(0xB0uLL);
  v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E42E53B0;
  v11 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *(_DWORD *)(v8 + 12);
  v9[13] = 0;
  *((_DWORD *)v9 + 14) = 0;
  v9[5] = 0;
  v9[6] = 0;
  v9[10] = 0x100000001;
  *((_DWORD *)v9 + 22) = 0;
  *((_DWORD *)v9 + 23) = v14;
  v9[12] = 0x100000001;
  v9[14] = 0;
  v9[15] = 0;
  v9[3] = &off_1E42BE438;
  v9[4] = 0;
  v9[8] = &unk_1E42BE458;
  v9[9] = "";
  *((_DWORD *)v9 + 32) = *(_DWORD *)(v8 + 8);
  v9[17] = v8;
  v9[18] = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *((_WORD *)v9 + 76) = 0;
  *((_BYTE *)v9 + 154) = 1;
  v17 = a3[1];
  v9[20] = *a3;
  v9[21] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v9[13] = *(_QWORD *)(v8 + 16);
  if (v11)
  {
    v20 = (unint64_t *)&v11->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = v10 + 3;
  a1[1] = v10;
  v22 = v26;
  if (v26)
  {
LABEL_19:
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19FF2CF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ggl::BufferMemory::~BufferMemory(ggl::BufferMemory *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  if (*((_QWORD *)this + 5))
  {
    v3 = *((_QWORD *)this + 2);
    v2 = *((_QWORD *)this + 3);
    if (v2 != v3)
    {
      v4 = *(_QWORD *)this;
      v5 = *((_QWORD *)this + 1);
      v6 = *((unsigned __int8 *)this + 32);
      v7 = *((unsigned __int8 *)this + 33);
      if (*(_QWORD *)this && *(_BYTE *)(v5 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      if (v6 && !v7)
      {
        v9 = *(_QWORD *)(v5 + 56);
        v8 = *(_QWORD *)(v5 + 64);
        if (v8 == v9)
          v9 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        if (v3 < v9)
          v9 = v3;
        if (v8 <= v2)
          v8 = v2;
        if (v8 == v9)
          v8 = v9 + *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        *(_QWORD *)(v5 + 56) = v9;
        *(_QWORD *)(v5 + 64) = v8;
      }
    }
  }
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v0 = GEOGetGeoGLPerformanceLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoGLPerformanceLog_log, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_19F029000, v0, OS_LOG_TYPE_DEBUG, "Reading buffers without 'readable' usage may come with performance penalty.  NB This message is only logged once.", v1, 2u);
  }
}

uint64_t ggl::ResourceAccessor::accessConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  char v11;
  char **v12;
  char *v13;

  v8 = *(_QWORD *)(a3 + 8);
  if ((a4 & 0xFFFFFFFD) == 0 && (*(_BYTE *)(a3 + 16) & 2) == 0)
  {
    v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v9 != -1)
    {
      v13 = &v11;
      v12 = &v13;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 33) = 0;
  if (v8)
  {
    if (a2 && *(_BYTE *)(a3 + 17) != 2)
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, a3, 0, v8, a4, 0);
    else
      result = *(_QWORD *)(a3 + 72);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void ggl::Shader::~Shader(ggl::Shader *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *((_QWORD *)this + 2) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 5));
    *((_QWORD *)this + 5) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  malloc_zone_t *zone;

  *((_QWORD *)this + 2) = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 5));
    *((_QWORD *)this + 5) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v7 + 24) = "GeoGL";
    *(_OWORD *)(v7 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v7 = &off_1E42B5668;
    *(_QWORD *)(v7 + 8) = "GeoGL";
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_QWORD *)(v7 + 248) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v7 + 56), 0);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v7 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v7 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v7;
  }
  (*(void (**)(uint64_t, ggl::Shader *, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, this, 96);
}

void `non-virtual thunk to'ggl::Shader::~Shader(ggl::Shader *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  malloc_zone_t *zone;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v7 + 24) = "GeoGL";
    *(_OWORD *)(v7 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v7 = &off_1E42B5668;
    *(_QWORD *)(v7 + 8) = "GeoGL";
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_QWORD *)(v7 + 248) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v7 + 56), 0);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v7 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v7 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v7;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, (char *)this - 16, 96);
}

void ggl::ShaderFunction::~ShaderFunction(ggl::ShaderFunction *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  malloc_zone_t *zone;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v7 + 24) = "GeoGL";
    *(_OWORD *)(v7 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v7 = &off_1E42B5668;
    *(_QWORD *)(v7 + 8) = "GeoGL";
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_QWORD *)(v7 + 248) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v7 + 56), 0);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v7 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v7 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v7;
  }
  (*(void (**)(uint64_t, ggl::ShaderFunction *, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                  + 40))(ggl::Allocator::instance(void)::alloc, this, 56);
}

void gdc::component::DataRequestObserver::updateStatusCounts(uint64_t a1, unint64_t a2, size_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char **v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int64x2_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  size_t v90;
  size_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;

  if (a4 != a5)
  {
    v6 = a4;
    v9 = a1;
    v10 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver>(a1);
    v11 = v10[4];
    if (a2 >> 39 < (v10[5] - v11) >> 3)
    {
      v12 = *(_QWORD *)(v11 + 8 * (a2 >> 39));
      if (v12)
      {
        v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F));
        v15 = v10[7];
        v14 = v10[8];
        if (v13 < (v14 - v15) >> 3)
        {
          v16 = v15 + 8 * v13;
          if (v16 != v14 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
          {
            v18 = v10[10];
            v19 = (_QWORD *)v10[11];
            v20 = (_QWORD *)(v18 + 104 * v13);
            if (v20 != v19 && v18 != 0)
            {
LABEL_86:
              gdc::component::DataRequestObserver::updatePendingState(v20, a3, v6, a5);
              v88 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v9);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v88, a2);
              return;
            }
          }
        }
      }
    }
    if (!a5)
      return;
    v22 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v9);
    v95 = a2;
    v23 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v22 + 4, (uint64_t)&v95);
    v94 = a2 >> 39;
    if ((v24 & 1) != 0)
    {
      v47 = v22[11];
      v46 = v22[12];
      if (v47 >= v46)
      {
        v91 = a3;
        v93 = v6;
        v49 = v22[10];
        v50 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v47 - v49) >> 3);
        if ((unint64_t)(v50 + 1) > 0x276276276276276)
          goto LABEL_90;
        v51 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v46 - v49) >> 3);
        v52 = 2 * v51;
        if (2 * v51 <= v50 + 1)
          v52 = v50 + 1;
        if (v51 >= 0x13B13B13B13B13BLL)
          v53 = 0x276276276276276;
        else
          v53 = v52;
        if (v53)
        {
          if (v53 > 0x276276276276276)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v54 = (char *)operator new(104 * v53);
        }
        else
        {
          v54 = 0;
        }
        v59 = &v54[104 * v50];
        v60 = &v54[104 * v53];
        *((_DWORD *)v59 + 12) = 0;
        *((_OWORD *)v59 + 1) = 0u;
        *((_OWORD *)v59 + 2) = 0u;
        *(_OWORD *)v59 = 0u;
        *((_QWORD *)v59 + 7) = 0;
        *((_QWORD *)v59 + 8) = 0;
        *((_QWORD *)v59 + 9) = 0;
        *((_QWORD *)v59 + 10) = 0;
        *((_QWORD *)v59 + 11) = 0;
        *((_QWORD *)v59 + 12) = 0;
        std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>((_QWORD *)v59 + 10, 0, 0, 0);
        v48 = (uint64_t)(v59 + 104);
        v62 = v22[10];
        v61 = v22[11];
        if (v61 == v62)
        {
          v66 = vdupq_n_s64(v61);
        }
        else
        {
          do
          {
            v63 = *(_OWORD *)(v61 - 104);
            v64 = *(_OWORD *)(v61 - 88);
            v65 = *(_OWORD *)(v61 - 72);
            *((_DWORD *)v59 - 14) = *(_DWORD *)(v61 - 56);
            *(_OWORD *)(v59 - 72) = v65;
            *(_OWORD *)(v59 - 88) = v64;
            *(_OWORD *)(v59 - 104) = v63;
            *((_QWORD *)v59 - 5) = 0;
            *((_QWORD *)v59 - 4) = 0;
            *((_QWORD *)v59 - 6) = 0;
            *((_OWORD *)v59 - 3) = *(_OWORD *)(v61 - 48);
            *((_QWORD *)v59 - 4) = *(_QWORD *)(v61 - 32);
            *(_QWORD *)(v61 - 48) = 0;
            *(_QWORD *)(v61 - 40) = 0;
            *(_QWORD *)(v61 - 32) = 0;
            *((_QWORD *)v59 - 3) = 0;
            *((_QWORD *)v59 - 2) = 0;
            *((_QWORD *)v59 - 1) = 0;
            *(_OWORD *)(v59 - 24) = *(_OWORD *)(v61 - 24);
            *((_QWORD *)v59 - 1) = *(_QWORD *)(v61 - 8);
            v59 -= 104;
            *(_QWORD *)(v61 - 24) = 0;
            *(_QWORD *)(v61 - 16) = 0;
            *(_QWORD *)(v61 - 8) = 0;
            v61 -= 104;
          }
          while (v61 != v62);
          v66 = *((int64x2_t *)v22 + 5);
        }
        v22[10] = (uint64_t)v59;
        v22[11] = v48;
        v22[12] = (uint64_t)v60;
        v68 = (char *)v66.i64[1];
        v67 = (char *)v66.i64[0];
        while (v68 != v67)
        {
          v69 = *((_QWORD *)v68 - 3);
          if (v69)
          {
            v70 = *((_QWORD *)v68 - 2);
            v71 = (void *)*((_QWORD *)v68 - 3);
            if (v70 != v69)
            {
              do
              {
                v72 = *(void **)(v70 - 24);
                if (v72)
                {
                  *(_QWORD *)(v70 - 16) = v72;
                  operator delete(v72);
                }
                v70 -= 32;
              }
              while (v70 != v69);
              v71 = (void *)*((_QWORD *)v68 - 3);
            }
            *((_QWORD *)v68 - 2) = v69;
            operator delete(v71);
          }
          v73 = *((_QWORD *)v68 - 6);
          if (v73)
          {
            v74 = *((_QWORD *)v68 - 5);
            v75 = (void *)*((_QWORD *)v68 - 6);
            if (v74 != v73)
            {
              do
              {
                v76 = v74 - 32;
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v74 - 16));
                v74 = v76;
              }
              while (v76 != v73);
              v75 = (void *)*((_QWORD *)v68 - 6);
            }
            *((_QWORD *)v68 - 5) = v73;
            operator delete(v75);
          }
          v68 -= 104;
        }
        if (v67)
          operator delete(v67);
        v6 = v93;
        a3 = v91;
      }
      else
      {
        *(_DWORD *)(v47 + 48) = 0;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(_OWORD *)v47 = 0u;
        *(_QWORD *)(v47 + 56) = 0;
        *(_QWORD *)(v47 + 64) = 0;
        *(_QWORD *)(v47 + 72) = 0;
        *(_QWORD *)(v47 + 80) = 0;
        *(_QWORD *)(v47 + 88) = 0;
        *(_QWORD *)(v47 + 96) = 0;
        std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>((_QWORD *)(v47 + 80), 0, 0, 0);
        v48 = v47 + 104;
      }
      v22[11] = v48;
      v55 = v22[31];
      v58 = (_QWORD *)v22[22];
      if (v58)
      {
LABEL_73:
        do
        {
          v97 = &v95;
          v98 = 1;
          v96 = v55;
          v77 = v58[6];
          if (!v77)
            goto LABEL_89;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v77 + 48))(v77, &v96, &v97);
          v58 = (_QWORD *)*v58;
        }
        while (v58);
      }
    }
    else
    {
      v90 = a3;
      v92 = v6;
      v89 = v9;
      v25 = v22[10];
      v26 = ((uint64_t)v23 - v22[7]) >> 3;
      v27 = v25 + 104 * v26;
      *(_DWORD *)(v27 + 48) = 0;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)v27 = 0u;
      v29 = (void **)(v27 + 56);
      v28 = *(_QWORD *)(v27 + 56);
      if (v28)
      {
        v30 = v25 + 104 * v26;
        v33 = *(_QWORD *)(v30 + 64);
        v32 = (_QWORD *)(v30 + 64);
        v31 = v33;
        v34 = *(void **)(v27 + 56);
        if (v33 != v28)
        {
          do
          {
            v35 = v31 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v31 - 16));
            v31 = v35;
          }
          while (v35 != v28);
          v34 = *v29;
        }
        *v32 = v28;
        operator delete(v34);
      }
      v36 = v25 + 104 * v26;
      v39 = *(char **)(v36 + 80);
      v38 = v36 + 80;
      v37 = v39;
      *v29 = 0;
      *(_QWORD *)(v27 + 64) = 0;
      *(_QWORD *)(v27 + 72) = 0;
      if (v39)
      {
        v40 = v25 + 104 * v26;
        v43 = *(char **)(v40 + 88);
        v41 = (char **)(v40 + 88);
        v42 = v43;
        v44 = v37;
        if (v43 != v37)
        {
          do
          {
            v45 = (void *)*((_QWORD *)v42 - 3);
            if (v45)
            {
              *((_QWORD *)v42 - 2) = v45;
              operator delete(v45);
            }
            v42 -= 32;
          }
          while (v42 != v37);
          v44 = *(char **)v38;
        }
        *v41 = v37;
        operator delete(v44);
      }
      *(_QWORD *)v38 = 0;
      *(_QWORD *)(v38 + 8) = 0;
      *(_QWORD *)(v38 + 16) = 0;
      v55 = v22[31];
      if (v27 == v22[11])
      {
        v9 = v89;
        v6 = v92;
        a3 = v90;
        v58 = (_QWORD *)v22[22];
        if (v58)
          goto LABEL_73;
      }
      else
      {
        v56 = (_QWORD *)v22[16];
        v9 = v89;
        v6 = v92;
        a3 = v90;
        if (v56)
        {
          while (1)
          {
            v97 = &v95;
            v98 = 1;
            v96 = v55;
            v57 = v56[6];
            if (!v57)
              break;
            (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v57 + 48))(v57, &v96, &v97);
            v56 = (_QWORD *)*v56;
            if (!v56)
              goto LABEL_75;
          }
LABEL_89:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_90:
          abort();
        }
      }
    }
LABEL_75:
    v78 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v9);
    v79 = v78[4];
    if (v94 < (v78[5] - v79) >> 3
      && (v80 = *(_QWORD *)(v79 + 8 * v94)) != 0
      && (v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(a2) & 0x7F)), v83 = v78[7],
                                                                       v82 = v78[8],
                                                                       v81 < (v82 - v83) >> 3)
      && ((v84 = v83 + 8 * v81, v84 != v82) ? (v85 = *(_DWORD *)(v84 + 4) == HIDWORD(a2)) : (v85 = 0), v85))
    {
      v86 = v78[11];
      v87 = v78[10] + 104 * v81;
    }
    else
    {
      v86 = v78[11];
      v87 = v86;
    }
    if (v87 == v86)
      v20 = 0;
    else
      v20 = (_QWORD *)v87;
    goto LABEL_86;
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB345CED1EE447345;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB345CED1EE447345;
      if (*(_QWORD *)&v3 <= 0xB345CED1EE447345)
        v5 = 0xB345CED1EE447345 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB345CED1EE447345;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB345CED1EE447345)
            {
              if (v7[2] == 0xB345CED1EE447345)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB345CED1EE447345)
          {
            if (v7[2] == 0xB345CED1EE447345)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequestObserver]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4458;
  *(_QWORD *)(v11 + 8) = 0xB345CED1EE447345;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB345CED1EE447345, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB345CED1EE447345;
  v15[1] = "gdc::component::DataRequestObserver]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB345CED1EE447345, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void gdc::component::DataRequestObserver::updatePendingState(_QWORD *a1, size_t __sz, unsigned int a3, unsigned int a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  unint64_t v43;
  __int128 v44;
  __int16 v45;

  v8 = (char *)a1[10];
  v9 = (char *)a1[11];
  v10 = v8;
  if (v8 != v9)
  {
    v10 = (char *)a1[10];
    while (__PAIR64__(*((unsigned __int16 *)v10 + 1), *(unsigned __int16 *)v10) != __PAIR64__(WORD1(__sz), (unsigned __int16)__sz)|| *((_DWORD *)v10 + 1) != HIDWORD(__sz))
    {
      v10 += 32;
      if (v10 == v9)
        goto LABEL_7;
    }
  }
  if (v10 == v9)
  {
LABEL_7:
    v10 = (char *)a1[10];
    if (v8 != v9)
    {
      v10 = (char *)a1[10];
      while (__PAIR64__(*((unsigned __int16 *)v10 + 1), *(unsigned __int16 *)v10) != __PAIR64__(WORD1(__sz), (unsigned __int16)__sz)|| *((_DWORD *)v10 + 1) != HIDWORD(__sz))
      {
        v10 += 32;
        if (v10 == v9)
          goto LABEL_13;
      }
    }
    if (v10 == v9)
    {
LABEL_13:
      v11 = a1[12];
      if ((unint64_t)v9 >= v11)
      {
        v13 = (v9 - v8) >> 5;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 59)
          goto LABEL_60;
        v15 = v11 - (_QWORD)v8;
        if (v15 >> 4 > v14)
          v14 = v15 >> 4;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
          v16 = 0x7FFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 59)
            goto LABEL_61;
          v17 = (char *)operator new(32 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[32 * v13];
        *(_QWORD *)v18 = __sz;
        *((_QWORD *)v18 + 1) = 0;
        v19 = &v17[32 * v16];
        *((_QWORD *)v18 + 2) = 0;
        *((_QWORD *)v18 + 3) = 0;
        v12 = v18 + 32;
        if (v8 == v9)
        {
          a1[10] = v18;
          a1[11] = v12;
          a1[12] = v19;
        }
        else
        {
          v20 = 0;
          do
          {
            v21 = &v18[v20];
            v22 = &v9[v20];
            *((_QWORD *)v21 - 4) = *(_QWORD *)&v9[v20 - 32];
            *((_QWORD *)v21 - 2) = 0;
            *((_QWORD *)v21 - 1) = 0;
            *(_OWORD *)(v21 - 24) = *(_OWORD *)&v9[v20 - 24];
            *((_QWORD *)v21 - 1) = *(_QWORD *)&v9[v20 - 8];
            *((_QWORD *)v22 - 3) = 0;
            *((_QWORD *)v22 - 2) = 0;
            *((_QWORD *)v22 - 1) = 0;
            v20 -= 32;
          }
          while (&v9[v20] != v8);
          v8 = (char *)a1[10];
          v23 = (char *)a1[11];
          a1[10] = &v18[v20];
          a1[11] = v12;
          a1[12] = v19;
          while (v23 != v8)
          {
            v24 = (void *)*((_QWORD *)v23 - 3);
            if (v24)
            {
              *((_QWORD *)v23 - 2) = v24;
              operator delete(v24);
            }
            v23 -= 32;
          }
        }
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v9 = __sz;
        *((_QWORD *)v9 + 1) = 0;
        v12 = v9 + 32;
        *((_QWORD *)v9 + 2) = 0;
        *((_QWORD *)v9 + 3) = 0;
      }
      a1[11] = v12;
      v10 = (char *)(v12 - 4);
    }
  }
  v26 = (_BYTE *)*((_QWORD *)v10 + 2);
  v25 = *((_QWORD *)v10 + 3);
  if ((unint64_t)v26 < v25)
  {
    *v26 = a3;
    v26[1] = a4;
    v27 = v26 + 2;
    goto LABEL_55;
  }
  v28 = (_BYTE *)*((_QWORD *)v10 + 1);
  v29 = v26 - v28;
  if (v26 - v28 <= -3)
LABEL_60:
    abort();
  v30 = v29 >> 1;
  v31 = v25 - (_QWORD)v28;
  if (v31 <= (v29 >> 1) + 1)
    v32 = v30 + 1;
  else
    v32 = v31;
  v33 = v31 >= 0x7FFFFFFFFFFFFFFELL;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v33)
    v34 = v32;
  if (v34 < 0)
LABEL_61:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v35 = 2 * v34;
  v36 = operator new(2 * v34);
  v37 = &v36[2 * v30];
  v38 = &v36[v35];
  *v37 = a3;
  v37[1] = a4;
  v27 = v37 + 2;
  if (v26 != v28)
  {
    v39 = v26 - v28 - 2;
    if (v39 < 0x1E)
      goto LABEL_64;
    if ((unint64_t)(v26 - &v36[v29 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_64;
    v40 = (v39 >> 1) + 1;
    v41 = &v36[2 * v30 - 16];
    v42 = (__int128 *)(v26 - 16);
    v43 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v44 = *v42;
      *(v41 - 1) = *(v42 - 1);
      *v41 = v44;
      v41 -= 2;
      v42 -= 2;
      v43 -= 16;
    }
    while (v43);
    v37 -= 2 * (v40 & 0xFFFFFFFFFFFFFFF0);
    v26 -= 2 * (v40 & 0xFFFFFFFFFFFFFFF0);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_64:
      do
      {
        v45 = *((_WORD *)v26 - 1);
        v26 -= 2;
        *((_WORD *)v37 - 1) = v45;
        v37 -= 2;
      }
      while (v26 != v28);
    }
  }
  *((_QWORD *)v10 + 1) = v37;
  *((_QWORD *)v10 + 2) = v27;
  *((_QWORD *)v10 + 3) = v38;
  if (v28)
    operator delete(v28);
LABEL_55:
  *((_QWORD *)v10 + 2) = v27;
  if (a3)
    --*((_DWORD *)a1 + a3 + 8);
  if (a4)
    ++*((_DWORD *)a1 + a4 + 8);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x56BA27B543634C5ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x56BA27B543634C5ALL;
      if (*(_QWORD *)&v3 <= 0x56BA27B543634C5AuLL)
        v5 = 0x56BA27B543634C5AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x56BA27B543634C5ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x56BA27B543634C5ALL)
            {
              if (v7[2] == 0x56BA27B543634C5ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x56BA27B543634C5ALL)
          {
            if (v7[2] == 0x56BA27B543634C5ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequestObserver::DidChange]";
  *(_QWORD *)(v11 + 24) = 46;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B4428;
  *(_QWORD *)(v11 + 8) = 0x56BA27B543634C5ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x56BA27B543634C5AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x56BA27B543634C5ALL;
  v15[1] = "gdc::component::DataRequestObserver::DidChange]";
  v15[2] = 46;
  gdc::Registry::_registerStorageDataSignals(a1, 0x56BA27B543634C5ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::DidChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t *v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      a3[2] = 0;
      v7 = (void **)(a3 + 2);
      a3[3] = 0;
      *a3 = v6;
      a3[1] = a3 + 2;
      v8 = (uint64_t *)v5[1];
      if (v8 != v5 + 2)
      {
        do
        {
          v9 = operator new(0x20uLL);
          v10 = *((unsigned __int8 *)v8 + 25);
          v9[25] = v10;
          v11 = (uint64_t *)a3[2];
          v12 = a3 + 2;
          if ((void **)a3[1] == v7)
            goto LABEL_19;
          v13 = (_QWORD *)a3[2];
          v14 = a3 + 2;
          if (v11)
          {
            do
            {
              v12 = v13;
              v13 = (_QWORD *)v13[1];
            }
            while (v13);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v14[2];
              v15 = *v12 == (_QWORD)v14;
              v14 = v12;
            }
            while (v15);
          }
          if (v10 >= *((unsigned __int8 *)v12 + 25))
          {
LABEL_19:
            if (v11)
            {
              v16 = v12 + 1;
            }
            else
            {
              v12 = a3 + 2;
              v16 = a3 + 2;
            }
          }
          else
          {
            v12 = a3 + 2;
            v16 = a3 + 2;
            if (v11)
            {
              do
              {
                while (1)
                {
                  v12 = v11;
                  if (v10 >= *((unsigned __int8 *)v11 + 25))
                    break;
                  v11 = (uint64_t *)*v11;
                  v16 = v12;
                  if (!*v12)
                    goto LABEL_22;
                }
                v11 = (uint64_t *)v11[1];
              }
              while (v11);
              v16 = v12 + 1;
            }
          }
LABEL_22:
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v9 + 2) = v12;
          *v16 = v9;
          v17 = *(_QWORD *)a3[1];
          if (v17)
          {
            a3[1] = v17;
            v9 = (_BYTE *)*v16;
          }
          v18 = *v7;
          v15 = v9 == *v7;
          v9[24] = v15;
          if (!v15)
          {
            do
            {
              v19 = *((_QWORD *)v9 + 2);
              if (*(_BYTE *)(v19 + 24))
                break;
              v20 = *(_BYTE **)(v19 + 16);
              v21 = *(_QWORD *)v20;
              if (*(_QWORD *)v20 == v19)
              {
                v24 = *((_QWORD *)v20 + 1);
                if (!v24 || (v25 = *(unsigned __int8 *)(v24 + 24), v22 = (_BYTE *)(v24 + 24), v25))
                {
                  if (*(_BYTE **)v19 == v9)
                  {
                    v26 = (uint64_t *)*((_QWORD *)v9 + 2);
                  }
                  else
                  {
                    v26 = *(uint64_t **)(v19 + 8);
                    v27 = *v26;
                    *(_QWORD *)(v19 + 8) = *v26;
                    if (v27)
                    {
                      *(_QWORD *)(v27 + 16) = v19;
                      v20 = *(_BYTE **)(v19 + 16);
                    }
                    v26[2] = (uint64_t)v20;
                    *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * (**(_QWORD **)(v19 + 16) != v19)) = v26;
                    *v26 = v19;
                    *(_QWORD *)(v19 + 16) = v26;
                    v20 = (_BYTE *)v26[2];
                    v19 = *(_QWORD *)v20;
                  }
                  *((_BYTE *)v26 + 24) = 1;
                  v20[24] = 0;
                  v30 = *(_QWORD *)(v19 + 8);
                  *(_QWORD *)v20 = v30;
                  if (v30)
                    *(_QWORD *)(v30 + 16) = v20;
                  *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
                  *(_QWORD *)(*((_QWORD *)v20 + 2) + 8 * (**((_QWORD **)v20 + 2) != (_QWORD)v20)) = v19;
                  *(_QWORD *)(v19 + 8) = v20;
                  goto LABEL_52;
                }
              }
              else if (!v21 || (v23 = *(unsigned __int8 *)(v21 + 24), v22 = (_BYTE *)(v21 + 24), v23))
              {
                if (*(_BYTE **)v19 == v9)
                {
                  v28 = *((_QWORD *)v9 + 1);
                  *(_QWORD *)v19 = v28;
                  if (v28)
                  {
                    *(_QWORD *)(v28 + 16) = v19;
                    v20 = *(_BYTE **)(v19 + 16);
                  }
                  *((_QWORD *)v9 + 2) = v20;
                  *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * (**(_QWORD **)(v19 + 16) != v19)) = v9;
                  *((_QWORD *)v9 + 1) = v19;
                  *(_QWORD *)(v19 + 16) = v9;
                  v20 = (_BYTE *)*((_QWORD *)v9 + 2);
                }
                else
                {
                  v9 = (_BYTE *)*((_QWORD *)v9 + 2);
                }
                v9[24] = 1;
                v20[24] = 0;
                v19 = *((_QWORD *)v20 + 1);
                v29 = *(_BYTE **)v19;
                *((_QWORD *)v20 + 1) = *(_QWORD *)v19;
                if (v29)
                  *((_QWORD *)v29 + 2) = v20;
                *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
                *(_QWORD *)(*((_QWORD *)v20 + 2) + 8 * (**((_QWORD **)v20 + 2) != (_QWORD)v20)) = v19;
                *(_QWORD *)v19 = v20;
LABEL_52:
                *((_QWORD *)v20 + 2) = v19;
                break;
              }
              *(_BYTE *)(v19 + 24) = 1;
              v9 = v20;
              v20[24] = v20 == v18;
              *v22 = 1;
            }
            while (v20 != v18);
          }
          ++a3[3];
          v31 = (uint64_t *)v8[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (uint64_t *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (uint64_t *)v8[2];
              v15 = *v32 == (_QWORD)v8;
              v8 = v32;
            }
            while (!v15);
          }
          v8 = v32;
        }
        while (v32 != v5 + 2);
      }
      v5 += 4;
      a3 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::vector<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>>::__init_with_size[abi:nn180100]<std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*,std::pair<gdc::Entity,std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  if (a4)
  {
    if (a4 >> 59)
LABEL_9:
      abort();
    v6 = result;
    v7 = 4 * a4;
    result = operator new(32 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v11 = (_BYTE *)a2[1];
      *v8 = *a2;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = 0;
      v12 = (_BYTE *)a2[2];
      v13 = v12 - v11;
      if (v12 != v11)
      {
        if (v13 < 0)
          goto LABEL_9;
        v9 = (char *)operator new(v12 - v11);
        v8[1] = v9;
        v8[2] = v9;
        v8[3] = &v9[2 * (v13 >> 1)];
        v10 = v13 & 0xFFFFFFFFFFFFFFFELL;
        result = memcpy(v9, v11, v10);
        v8[2] = &v9[v10];
      }
      v8 += 4;
      a2 += 4;
    }
    v6[1] = v8;
  }
  return result;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  size_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  size_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  i = (uint64_t)(a1 + 6);
  v12 = a1[6];
  v13 = v12 + 104 * v5;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v14 = a1[7];
  v15 = *(_DWORD *)(v14 - 56);
  v16 = *(_OWORD *)(v14 - 72);
  v17 = *(_OWORD *)(v14 - 88);
  *(_OWORD *)v13 = *(_OWORD *)(v14 - 104);
  *(_OWORD *)(v13 + 16) = v17;
  *(_OWORD *)(v13 + 32) = v16;
  *(_DWORD *)(v13 + 48) = v15;
  if (v13 != v14 - 104)
  {
    v18 = v12 + 104 * v5;
    v21 = *(_QWORD *)(v18 + 56);
    v20 = v18 + 56;
    v19 = v21;
    v23 = *(_QWORD *)(v14 - 48);
    v22 = *(uint64_t **)(v14 - 40);
    v24 = ((uint64_t)v22 - v23) >> 5;
    v25 = *(_QWORD *)(v20 + 16);
    if (v24 <= (v25 - v21) >> 5)
    {
      v34 = *(_QWORD *)(v20 + 8);
      v35 = (v34 - v19) >> 5;
      if (v35 >= v24)
      {
        if ((uint64_t *)v23 != v22)
        {
          v39 = (_QWORD *)(v23 + 16);
          do
          {
            *(_QWORD *)v19 = *(_QWORD *)v23;
            if (v23 != v19)
              std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>((uint64_t **)(v19 + 8), *(_QWORD **)(v23 + 8), v39);
            v23 += 32;
            v19 += 32;
            v39 += 4;
          }
          while ((uint64_t *)v23 != v22);
          v34 = *(_QWORD *)(v20 + 8);
        }
        if (v34 != v19)
        {
          do
          {
            v40 = v34 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v34 - 16));
            v34 = v40;
          }
          while (v40 != v19);
        }
        *(_QWORD *)(v20 + 8) = v19;
      }
      else
      {
        v36 = (uint64_t *)(v23 + 32 * v35);
        if (v34 != v19)
        {
          v72 = (uint64_t *)(v23 + 32 * v35);
          v37 = 0;
          v38 = 32 * v35;
          do
          {
            *(_QWORD *)(v19 + v37) = *(_QWORD *)(v23 + v37);
            if (v23 != v19)
              std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>((uint64_t **)(v19 + v37 + 8), *(_QWORD **)(v23 + v37 + 8), (_QWORD *)(v23 + 16 + v37));
            v37 += 32;
          }
          while (v38 != v37);
          v19 = *(_QWORD *)(v20 + 8);
          v36 = v72;
        }
        *(_QWORD *)(v20 + 8) = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>(v36, v22, (_QWORD *)v19);
      }
    }
    else
    {
      if (v19)
      {
        v26 = *(_QWORD *)(v20 + 8);
        v27 = (void *)v19;
        if (v26 != v19)
        {
          v73 = v12;
          do
          {
            v28 = v26 - 32;
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v26 - 16));
            v26 = v28;
          }
          while (v28 != v19);
          v27 = *(void **)v20;
          v12 = v73;
        }
        *(_QWORD *)(v20 + 8) = v19;
        operator delete(v27);
        v25 = 0;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
      }
      if ((((unint64_t)v22 - v23) & 0x8000000000000000) != 0)
        goto LABEL_83;
      v29 = v25 >> 4;
      if (v25 >> 4 <= v24)
        v29 = ((uint64_t)v22 - v23) >> 5;
      v30 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0;
      v31 = 0x7FFFFFFFFFFFFFFLL;
      if (!v30)
        v31 = v29;
      if (v31 >> 59)
        goto LABEL_83;
      v32 = 4 * v31;
      v33 = operator new(32 * v31);
      *(_QWORD *)v20 = v33;
      *(_QWORD *)(v20 + 8) = v33;
      *(_QWORD *)(v20 + 16) = &v33[v32];
      *(_QWORD *)(v20 + 8) = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>>,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*,std::pair<gdc::Entity,std::multiset<gdc::component::DataRequestStatus>>*>((uint64_t *)v23, v22, v33);
    }
    v41 = v12 + 104 * v5;
    v44 = *(char **)(v41 + 80);
    v43 = v41 + 80;
    v42 = v44;
    v46 = *(_QWORD *)(v14 - 24);
    v45 = *(_QWORD **)(v14 - 16);
    v47 = ((uint64_t)v45 - v46) >> 5;
    v48 = *(_QWORD *)(v43 + 16);
    if (v47 <= (v48 - (uint64_t)v44) >> 5)
    {
      v52 = *(char **)(v43 + 8);
      v53 = (v52 - v42) >> 5;
      if (v53 >= v47)
      {
        if ((_QWORD *)v46 != v45)
        {
          do
          {
            *(_QWORD *)v42 = *(_QWORD *)v46;
            if ((char *)v46 != v42)
              std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>((uint64_t)(v42 + 8), *(_QWORD *)(v46 + 8), *(char **)(v46 + 16), (uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 1);
            v46 += 32;
            v42 += 32;
          }
          while ((_QWORD *)v46 != v45);
          v52 = *(char **)(v43 + 8);
        }
        for (i = (uint64_t)(a1 + 6); v52 != v42; v52 -= 32)
        {
          v71 = (void *)*((_QWORD *)v52 - 3);
          if (v71)
          {
            *((_QWORD *)v52 - 2) = v71;
            operator delete(v71);
          }
        }
        *(_QWORD *)(v43 + 8) = v42;
        goto LABEL_89;
      }
      v54 = (_QWORD *)(v46 + 32 * v53);
      if (v52 != v42)
      {
        v55 = 32 * v53;
        do
        {
          *(_QWORD *)v42 = *(_QWORD *)v46;
          if ((char *)v46 != v42)
            std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>((uint64_t)(v42 + 8), *(_QWORD *)(v46 + 8), *(char **)(v46 + 16), (uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 1);
          v46 += 32;
          v42 += 32;
          v55 -= 32;
        }
        while (v55);
        v42 = *(char **)(v43 + 8);
      }
      v65 = v42;
      if (v54 != v45)
      {
        v65 = v42;
        do
        {
          *(_QWORD *)v65 = *v54;
          *((_QWORD *)v65 + 1) = 0;
          *((_QWORD *)v65 + 2) = 0;
          *((_QWORD *)v65 + 3) = 0;
          v69 = (_BYTE *)v54[1];
          v68 = (_BYTE *)v54[2];
          v70 = v68 - v69;
          if (v68 != v69)
          {
            if (v70 < 0)
              goto LABEL_83;
            v66 = (char *)operator new(v68 - v69);
            *((_QWORD *)v65 + 1) = v66;
            *((_QWORD *)v65 + 2) = v66;
            *((_QWORD *)v65 + 3) = &v66[2 * (v70 >> 1)];
            v67 = v70 & 0xFFFFFFFFFFFFFFFELL;
            memcpy(v66, v69, v67);
            *((_QWORD *)v65 + 2) = &v66[v67];
          }
          v65 += 32;
          v54 += 4;
        }
        while (v54 != v45);
      }
      *(_QWORD *)(v43 + 8) = v65;
      goto LABEL_85;
    }
    if (v42)
    {
      v49 = *(char **)(v43 + 8);
      v50 = v42;
      if (v49 != v42)
      {
        do
        {
          v51 = (void *)*((_QWORD *)v49 - 3);
          if (v51)
          {
            *((_QWORD *)v49 - 2) = v51;
            operator delete(v51);
          }
          v49 -= 32;
        }
        while (v49 != v42);
        v50 = *(char **)v43;
      }
      *(_QWORD *)(v43 + 8) = v42;
      operator delete(v50);
      v48 = 0;
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v43 + 16) = 0;
    }
    if ((((unint64_t)v45 - v46) & 0x8000000000000000) == 0)
    {
      v56 = v48 >> 4;
      if (v48 >> 4 <= v47)
        v56 = ((uint64_t)v45 - v46) >> 5;
      v30 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0;
      v57 = 0x7FFFFFFFFFFFFFFLL;
      if (!v30)
        v57 = v56;
      if (!(v57 >> 59))
      {
        v58 = 4 * v57;
        v59 = operator new(32 * v57);
        *(_QWORD *)v43 = v59;
        *(_QWORD *)(v43 + 8) = v59;
        *(_QWORD *)(v43 + 16) = &v59[v58];
        while ((_QWORD *)v46 != v45)
        {
          *v59 = *(_QWORD *)v46;
          v59[1] = 0;
          v59[2] = 0;
          v59[3] = 0;
          v63 = *(_BYTE **)(v46 + 8);
          v62 = *(_BYTE **)(v46 + 16);
          v64 = v62 - v63;
          if (v62 != v63)
          {
            if (v64 < 0)
              goto LABEL_83;
            v60 = (char *)operator new(v62 - v63);
            v59[1] = v60;
            v59[2] = v60;
            v59[3] = &v60[2 * (v64 >> 1)];
            v61 = v64 & 0xFFFFFFFFFFFFFFFELL;
            memcpy(v60, v63, v61);
            v59[2] = &v60[v61];
          }
          v59 += 4;
          v46 += 32;
        }
        *(_QWORD *)(v43 + 8) = v59;
LABEL_85:
        i = (uint64_t)(a1 + 6);
        goto LABEL_89;
      }
    }
LABEL_83:
    abort();
  }
LABEL_89:
  std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100](i, a1[7] - 104);
  return 1;
}

void std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 104)
  {
    v5 = *(_QWORD *)(i - 24);
    if (v5)
    {
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          v8 = *(void **)(v6 - 24);
          if (v8)
          {
            *(_QWORD *)(v6 - 16) = v8;
            operator delete(v8);
          }
          v6 -= 32;
        }
        while (v6 != v5);
        v7 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
    }
    v9 = *(_QWORD *)(i - 48);
    if (v9)
    {
      v10 = *(_QWORD *)(i - 40);
      v11 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          v12 = v10 - 32;
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v10 - 16));
          v10 = v12;
        }
        while (v12 != v9);
        v11 = *(void **)(i - 48);
      }
      *(_QWORD *)(i - 40) = v9;
      operator delete(v11);
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_WORD *std::vector<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>>::__assign_with_size[abi:nn180100]<std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*,std::pair<gdc::component::DataRequestStatus,gdc::component::DataRequestStatus>*>(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  size_t v8;
  _WORD *result;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  char *v14;
  int64_t v15;
  _QWORD *v16;
  _WORD *v17;
  int64_t v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  __int16 *v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  char *v35;
  __int16 v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v47;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 *v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_WORD **)a1;
  if (__sz <= (uint64_t)(v8 - (_QWORD)result) >> 1)
  {
    v17 = *(_WORD **)(a1 + 8);
    v16 = (_QWORD *)(a1 + 8);
    v13 = v17;
    v18 = (char *)v17 - (char *)result;
    v19 = v17 - result;
    if (v19 < __sz)
    {
      v20 = (__int16 *)(a2 + 2 * v19);
      if (v13 == result)
        goto LABEL_19;
      v21 = v18 - 2;
      if ((unint64_t)(v18 - 2) < 0xE)
      {
        v22 = (__int16 *)a2;
        goto LABEL_18;
      }
      v37 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 1;
      v38 = (char *)result + v37;
      v39 = a2 + v37;
      v40 = (unint64_t)result + 1 >= a2 + (v18 & 0xFFFFFFFFFFFFFFFELL)
         || a2 + 1 >= (unint64_t)result + (v18 & 0xFFFFFFFFFFFFFFFELL);
      v41 = !v40;
      v22 = (__int16 *)a2;
      v42 = (unint64_t)v38 <= a2 || (unint64_t)result >= v39;
      if (!v42 || (v41 & 1) != 0)
        goto LABEL_18;
      v43 = (v21 >> 1) + 1;
      if (v21 >= 0x3E)
      {
        v44 = v43 & 0xFFFFFFFFFFFFFFE0;
        v59 = (__int128 *)(a2 + 32);
        v60 = result + 16;
        v61 = v43 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v63 = *(v59 - 2);
          v62 = *(v59 - 1);
          v65 = *v59;
          v64 = v59[1];
          v59 += 4;
          *(v60 - 2) = v63;
          *(v60 - 1) = v62;
          *v60 = v65;
          v60[1] = v64;
          v60 += 4;
          v61 -= 32;
        }
        while (v61);
        if (v43 == v44)
          goto LABEL_19;
        if ((v43 & 0x18) == 0)
        {
          v72 = 2 * v44;
          v22 = (__int16 *)(a2 + v72);
          result = (_WORD *)((char *)result + v72);
          do
          {
LABEL_18:
            v23 = *v22++;
            *result++ = v23;
          }
          while (v22 != v20);
          goto LABEL_19;
        }
      }
      else
      {
        v44 = 0;
      }
      v66 = 2 * (v43 & 0xFFFFFFFFFFFFFFF8);
      v67 = v44 - (v43 & 0xFFFFFFFFFFFFFFF8);
      v68 = v44;
      v69 = (__int128 *)(a2 + 2 * v44);
      v70 = &result[v68];
      do
      {
        v71 = *v69++;
        *v70++ = v71;
        v67 += 8;
      }
      while (v67);
      if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8))
      {
        v22 = (__int16 *)(a2 + v66);
        result = (_WORD *)((char *)result + v66);
        goto LABEL_18;
      }
LABEL_19:
      if (v20 == (__int16 *)a3)
      {
        v15 = 0;
        goto LABEL_67;
      }
      v24 = v18 + a2;
      v25 = (unint64_t)&a3[-v24 - 2];
      if (v25 < 0x1E)
      {
        v27 = (char *)v13;
      }
      else
      {
        v26 = (unint64_t)v13 - v24;
        v27 = (char *)v13;
        if (v26 >= 0x20)
        {
          v28 = (v25 >> 1) + 1;
          v29 = v28 & 0xFFFFFFFFFFFFFFF0;
          v20 = (__int16 *)((char *)v20 + v29 * 2);
          v30 = v13 + 8;
          v31 = (__int128 *)(a2 + 2 * v19 + 16);
          v32 = v28 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 16;
          }
          while (v32);
          v27 = (char *)&v13[v29];
          if (v28 == (v28 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_66;
        }
      }
      do
      {
        v58 = *v20++;
        *(_WORD *)v27 = v58;
        v27 += 2;
      }
      while (v20 != (__int16 *)a3);
LABEL_66:
      v15 = v27 - (char *)v13;
      goto LABEL_67;
    }
    if ((char *)a2 == a3)
    {
      v35 = (char *)result;
    }
    else
    {
      v34 = (unint64_t)&a3[-a2 - 2];
      if (v34 >= 0x3E)
      {
        v45 = (v34 & 0xFFFFFFFFFFFFFFFELL) + 2;
        v47 = (unint64_t)result + 1 < a2 + v45 && a2 + 1 < (unint64_t)result + v45;
        if ((unint64_t)result + (v34 | 1) <= a2 || (unint64_t)result >= a2 + (v34 | 1))
        {
          if (v47)
          {
            v35 = (char *)result;
          }
          else
          {
            v49 = (v34 >> 1) + 1;
            v50 = v49 & 0xFFFFFFFFFFFFFFE0;
            v35 = (char *)&result[v50];
            v51 = (__int128 *)(a2 + 32);
            v52 = result + 16;
            v53 = v49 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v55 = *(v51 - 2);
              v54 = *(v51 - 1);
              v57 = *v51;
              v56 = v51[1];
              v51 += 4;
              *(v52 - 2) = v55;
              *(v52 - 1) = v54;
              *v52 = v57;
              v52[1] = v56;
              v52 += 4;
              v53 -= 32;
            }
            while (v53);
            if (v49 == (v49 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_33;
            v6 = (char *)(a2 + v50 * 2);
          }
        }
        else
        {
          v35 = (char *)result;
        }
      }
      else
      {
        v35 = (char *)result;
      }
      do
      {
        v36 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)v35 = v36;
        v35 += 2;
      }
      while (v6 != a3);
    }
LABEL_33:
    v15 = v35 - (char *)result;
    v13 = result;
    goto LABEL_67;
  }
  if (result)
  {
    *(_QWORD *)(a1 + 8) = result;
    operator delete(result);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if ((__sz & 0x8000000000000000) != 0)
    goto LABEL_78;
  if (v8 <= __sz)
    v10 = __sz;
  else
    v10 = v8;
  v40 = v8 >= 0x7FFFFFFFFFFFFFFELL;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v40)
    v11 = v10;
  if (v11 < 0)
LABEL_78:
    abort();
  v12 = v11;
  result = operator new(2 * v11);
  v13 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v12];
  v14 = (char *)result;
  if (v6 != a3)
  {
    result = memcpy(result, v6, ((a3 - v6 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
    v14 = (char *)v13 + ((a3 - v6 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2;
  }
  v15 = v14 - (char *)v13;
  v16 = (_QWORD *)(a1 + 8);
LABEL_67:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::__tree<gdc::component::DataRequestStatus>::__assign_multi<std::__tree_const_iterator<gdc::component::DataRequestStatus,std::__tree_node<gdc::component::DataRequestStatus,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t ***v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (_QWORD *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = a2;
        v13 = v9;
        do
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v12 + 25);
          *((_BYTE *)v13 + 25) = v14;
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v16 = v15;
                if (v14 >= *((unsigned __int8 *)v15 + 25))
                  break;
                v15 = (uint64_t *)*v15;
                v17 = (uint64_t **)v16;
                if (!*v16)
                  goto LABEL_20;
              }
              v15 = (uint64_t *)v15[1];
            }
            while (v15);
            v17 = (uint64_t **)(v16 + 1);
          }
LABEL_20:
          *v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v16;
          *v17 = v13;
          v18 = (uint64_t *)**a1;
          if (v18)
          {
            *a1 = v18;
            v13 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (_QWORD *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (_QWORD *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v12[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v12[2];
              v20 = *v4 == (_QWORD)v12;
              v12 = v4;
            }
            while (!v20);
          }
          if (!v9)
            break;
          v12 = v4;
          v13 = v9;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = (uint64_t ***)(a1 + 1);
    do
    {
      v25 = (uint64_t *)operator new(0x20uLL);
      v26 = v25;
      v27 = *((unsigned __int8 *)v4 + 25);
      *((_BYTE *)v25 + 25) = v27;
      v28 = *v24;
      v29 = a1 + 1;
      v30 = a1 + 1;
      if (*v24)
      {
        do
        {
          while (1)
          {
            v29 = v28;
            if (v27 >= *((unsigned __int8 *)v28 + 25))
              break;
            v28 = (uint64_t **)*v28;
            v30 = v29;
            if (!*v29)
              goto LABEL_56;
          }
          v28 = (uint64_t **)v28[1];
        }
        while (v28);
        v30 = v29 + 1;
      }
LABEL_56:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = (uint64_t *)**a1;
      if (v31)
      {
        *a1 = v31;
        v26 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
    }
    while (v33 != a3);
  }
}

_QWORD *gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    std::vector<gdc::component::DataRequestObserver>::__base_destruct_at_end[abi:nn180100]((uint64_t)(a1 + 10), v2);
    operator delete((void *)a1[10]);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4)
  {
    v5 = (_QWORD *)a1[5];
    v6 = (void *)a1[4];
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          MEMORY[0x1A1AF4E00](v7, 0x1000C40104B78CFLL);
      }
      while (v5 != v4);
      v6 = (void *)a1[4];
    }
    a1[5] = v4;
    operator delete(v6);
  }
  return a1;
}

void gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()(uint64_t *a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  BOOL v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  _WORD *v58;
  _WORD *v59;
  uint64_t **v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  unsigned __int16 *v64;
  uint64_t *v65;
  unsigned int v66;
  BOOL v67;
  uint64_t **v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned __int16 *v91;
  void *v92;
  int v93;
  int v94;
  int v95;
  _BOOL4 v96;
  int v97;
  int v98;
  int v99;
  _BOOL4 v100;
  int v101;
  int v102;
  _BOOL4 v103;
  int v104;
  int v105;
  uint64_t v106;
  int8x8_t v107;
  uint8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  char v119;
  uint64_t v120;
  _QWORD *i;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  size_t v130;
  char *v131;
  char *v132;
  char *v133;
  _QWORD *j;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int8x8_t v138;
  uint8x8_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  uint64_t v152;
  _QWORD *k;
  uint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  size_t v162;
  char *v163;
  char *v164;
  char *v165;
  _QWORD *m;
  uint64_t v167;
  uint64_t v168;
  int8x8_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  char v181;
  uint64_t v182;
  _QWORD *n;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  size_t v192;
  char *v193;
  char *v194;
  char *v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  char v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  size_t v212;
  char *v213;
  char *v214;
  char *v215;
  _QWORD *ii;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  char v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  _BYTE *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  size_t v232;
  char *v233;
  char *v234;
  char *v235;
  _QWORD *jj;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t *v248;
  char *v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  _OWORD *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  uint64_t *v260;
  uint64_t *v261;
  _BOOL4 v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  unsigned __int16 *v269;
  _BOOL4 v270;
  uint64_t v271;
  _QWORD *v272[2];
  uint64_t v273;
  uint64_t v274;
  _QWORD v275[2];
  unint64_t v276;

  v5 = a1;
  v6 = *a1;
  v7 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
  v8 = (unsigned __int16 *)*((_QWORD *)a3 + 8);
  if (v7 != v8)
  {
    while (1)
    {
      while (1)
      {
        v9 = *v7;
        if (v9 != *(unsigned __int16 *)(v6 + 40))
          break;
        v10 = *((unsigned int *)v7 + 1);
        v11 = *(_QWORD *)(v6 + 48);
        if (v10 >= (*(_QWORD *)(v6 + 56) - v11) >> 3)
          break;
        v12 = (unsigned __int16 *)(v11 + 8 * v10);
        if (*v12 != v9 || v12[1] != v7[1] || *((_DWORD *)v12 + 1) != (_DWORD)v10)
          break;
        v7 += 16;
        if (v7 == v8)
          goto LABEL_31;
      }
      v13 = (unsigned __int16 *)*((_QWORD *)v7 + 1);
      if (v13 != v7 + 8)
      {
        v14 = *((_DWORD *)a3 + 2);
        do
        {
          --*(_DWORD *)&a3[4 * *((unsigned __int8 *)v13 + 25) + 12];
          v15 = (unsigned __int16 *)*((_QWORD *)v13 + 1);
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = *(unsigned __int16 **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (unsigned __int16 *)*((_QWORD *)v13 + 2);
              v17 = *(_QWORD *)v16 == (_QWORD)v13;
              v13 = v16;
            }
            while (!v17);
          }
          --v14;
          v13 = v16;
        }
        while (v16 != v7 + 8);
        *((_DWORD *)a3 + 2) = v14;
      }
      if (v7 + 16 != v8)
        break;
      v19 = v7;
      if (v8 != v7)
        goto LABEL_26;
LABEL_27:
      *((_QWORD *)a3 + 8) = v19;
      v8 = v19;
      if (v7 == v19)
        goto LABEL_31;
    }
    v18 = v7;
    do
    {
      *(_QWORD *)v18 = *((_QWORD *)v18 + 4);
      v21 = v18 + 8;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v18 + 2));
      v22 = v18 + 24;
      v23 = *((_QWORD *)v18 + 6);
      *((_QWORD *)v18 + 1) = *((_QWORD *)v18 + 5);
      *((_QWORD *)v18 + 2) = v23;
      v24 = *((_QWORD *)v18 + 7);
      *((_QWORD *)v18 + 3) = v24;
      if (v24)
      {
        *(_QWORD *)(v23 + 16) = v21;
        *((_QWORD *)v18 + 5) = v22;
        *v22 = 0;
        *((_QWORD *)v18 + 7) = 0;
      }
      else
      {
        *((_QWORD *)v18 + 1) = v21;
      }
      v19 = v18 + 16;
      v20 = v18 + 32;
      v18 += 16;
    }
    while (v20 != v8);
    v8 = (unsigned __int16 *)*((_QWORD *)a3 + 8);
    if (v8 == v19)
      goto LABEL_27;
    do
    {
LABEL_26:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v8 - 2));
      v8 -= 16;
    }
    while (v8 != v19);
    goto LABEL_27;
  }
LABEL_31:
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 12) = 0;
  v26 = (unsigned __int16 *)*((_QWORD *)a3 + 10);
  v25 = (unsigned __int16 *)*((_QWORD *)a3 + 11);
  if (v26 == v25)
    goto LABEL_166;
  v260 = v5;
  v267 = a3 + 12;
  v269 = (unsigned __int16 *)*((_QWORD *)a3 + 11);
  do
  {
    v27 = *v26;
    if (v27 == *(unsigned __int16 *)(v6 + 40))
    {
      v28 = *((unsigned int *)v26 + 1);
      v29 = *(_QWORD *)(v6 + 48);
      if (v28 < (*(_QWORD *)(v6 + 56) - v29) >> 3)
      {
        v30 = (unsigned __int16 *)(v29 + 8 * v28);
        if (*v30 == v27)
        {
          v31 = v30[1];
          if (v31 == v26[1] && *((_DWORD *)v30 + 1) == (_DWORD)v28)
          {
            v33 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
            v32 = *((_QWORD *)a3 + 8);
            v34 = v33;
            if (v33 != (unsigned __int16 *)v32)
            {
              v34 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
              while (v27 != *v34 || v31 != v34[1] || (_DWORD)v28 != *((_DWORD *)v34 + 1))
              {
                v34 += 16;
                if (v34 == (unsigned __int16 *)v32)
                  goto LABEL_46;
              }
            }
            if (v34 == (unsigned __int16 *)v32)
            {
LABEL_46:
              v34 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
              if (v33 != (unsigned __int16 *)v32)
              {
                v34 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
                while (v27 != *v34 || v31 != v34[1] || (_DWORD)v28 != *((_DWORD *)v34 + 1))
                {
                  v34 += 16;
                  if (v34 == (unsigned __int16 *)v32)
                    goto LABEL_53;
                }
              }
              if (v34 == (unsigned __int16 *)v32)
              {
LABEL_53:
                v272[0] = 0;
                v272[1] = 0;
                v271 = (uint64_t)v272;
                v35 = *(_QWORD *)v26;
                v275[0] = 0;
                v275[1] = 0;
                v273 = v35;
                v274 = (uint64_t)v275;
                v34 = v33;
                if (v33 != (unsigned __int16 *)v32)
                {
                  v34 = v33;
                  while (*v34 != (unsigned __int16)v35 || v34[1] != WORD1(v35) || *((_DWORD *)v34 + 1) != HIDWORD(v35))
                  {
                    v34 += 16;
                    if (v34 == (unsigned __int16 *)v32)
                      goto LABEL_61;
                  }
                }
                if (v34 == (unsigned __int16 *)v32)
                {
LABEL_61:
                  v37 = *((_QWORD *)a3 + 9);
                  if (v32 >= v37)
                  {
                    v42 = (uint64_t)(v32 - (_QWORD)v33) >> 5;
                    v43 = v42 + 1;
                    if ((unint64_t)(v42 + 1) >> 59)
                      goto LABEL_410;
                    v44 = v37 - (_QWORD)v33;
                    if (v44 >> 4 > v43)
                      v43 = v44 >> 4;
                    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
                      v45 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v45 = v43;
                    if (v45)
                    {
                      if (v45 >> 59)
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      v46 = (char *)operator new(32 * v45);
                    }
                    else
                    {
                      v46 = 0;
                    }
                    v47 = (uint64_t *)&v46[32 * v42];
                    v47[2] = 0;
                    v47[3] = 0;
                    v48 = &v46[32 * v45];
                    *v47 = v35;
                    v47[1] = (uint64_t)(v47 + 2);
                    v39 = v47 + 4;
                    if (v33 == (unsigned __int16 *)v32)
                    {
                      *((_QWORD *)a3 + 7) = v47;
                      *((_QWORD *)a3 + 8) = v39;
                      *((_QWORD *)a3 + 9) = v48;
                    }
                    else
                    {
                      v49 = 0;
                      do
                      {
                        v50 = &v47[v49 / 8];
                        *(v50 - 4) = *(_QWORD *)(v32 + v49 - 32);
                        *(v50 - 3) = *(_QWORD *)(v32 + v49 - 24);
                        v51 = (uint64_t *)(v32 + v49 - 16);
                        v52 = *v51;
                        v47[v49 / 8 - 2] = *v51;
                        v53 = (uint64_t)&v47[v49 / 8 - 2];
                        v54 = *(_QWORD *)(v32 + v49 - 8);
                        *(v50 - 1) = v54;
                        if (v54)
                        {
                          *(_QWORD *)(v52 + 16) = v53;
                          *(_QWORD *)(v32 + v49 - 24) = v51;
                          *v51 = 0;
                          *(_QWORD *)(v32 + v49 - 8) = 0;
                        }
                        else
                        {
                          *(v50 - 3) = v53;
                        }
                        v49 -= 32;
                      }
                      while ((unsigned __int16 *)(v32 + v49) != v33);
                      v55 = &v47[v49 / 8];
                      v33 = (unsigned __int16 *)*((_QWORD *)a3 + 7);
                      v56 = (unsigned __int16 *)*((_QWORD *)a3 + 8);
                      *((_QWORD *)a3 + 7) = v55;
                      *((_QWORD *)a3 + 8) = v39;
                      *((_QWORD *)a3 + 9) = v48;
                      if (v56 != v33)
                      {
                        do
                        {
                          v57 = v56 - 16;
                          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v56 - 2));
                          v56 = v57;
                        }
                        while (v57 != v33);
                      }
                    }
                    if (v33)
                      operator delete(v33);
                  }
                  else
                  {
                    *(_QWORD *)v32 = v35;
                    *(_QWORD *)(v32 + 16) = 0;
                    *(_QWORD *)(v32 + 8) = v32 + 16;
                    *(_QWORD *)(v32 + 24) = 0;
                    v38 = (_QWORD *)v274;
                    if ((_QWORD *)v274 != v275)
                    {
                      do
                      {
                        std::__tree<gdc::component::DataRequestStatus>::__emplace_hint_multi<gdc::component::DataRequestStatus const&>((uint64_t ***)(v32 + 8), (uint64_t **)(v32 + 16), *((_BYTE *)v38 + 25));
                        v40 = (_QWORD *)v38[1];
                        if (v40)
                        {
                          do
                          {
                            v41 = v40;
                            v40 = (_QWORD *)*v40;
                          }
                          while (v40);
                        }
                        else
                        {
                          do
                          {
                            v41 = (_QWORD *)v38[2];
                            v17 = *v41 == (_QWORD)v38;
                            v38 = v41;
                          }
                          while (!v17);
                        }
                        v38 = v41;
                      }
                      while (v41 != v275);
                    }
                    v39 = (_QWORD *)(v32 + 32);
                  }
                  *((_QWORD *)a3 + 8) = v39;
                  v34 = (unsigned __int16 *)(v39 - 4);
                  v36 = (_QWORD *)v275[0];
                }
                else
                {
                  v36 = 0;
                }
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v36);
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v272[0]);
                v25 = v269;
              }
            }
            v58 = (_WORD *)*((_QWORD *)v26 + 1);
            v59 = (_WORD *)*((_QWORD *)v26 + 2);
            if (v58 != v59)
            {
              v60 = (uint64_t **)(v34 + 8);
              do
              {
                v61 = (unsigned __int16)*v58;
                v62 = *v58;
                if (*v58)
                {
                  v63 = *v60;
                  if (*v60)
                  {
                    v64 = v34 + 8;
                    v65 = *v60;
                    do
                    {
                      v66 = *((unsigned __int8 *)v65 + 25);
                      v67 = v66 >= v62;
                      if (v66 >= v62)
                        v68 = (uint64_t **)v65;
                      else
                        v68 = (uint64_t **)(v65 + 1);
                      if (v67)
                        v64 = (unsigned __int16 *)v65;
                      v65 = *v68;
                    }
                    while (*v68);
                    if (v64 != (unsigned __int16 *)v60 && *((unsigned __int8 *)v64 + 25) <= v62)
                    {
                      --*(_DWORD *)&v267[4 * *v58];
                      v69 = (unsigned __int16 *)*((_QWORD *)v64 + 1);
                      v70 = v64;
                      if (v69)
                      {
                        do
                        {
                          v71 = v69;
                          v69 = *(unsigned __int16 **)v69;
                        }
                        while (v69);
                      }
                      else
                      {
                        do
                        {
                          v71 = (unsigned __int16 *)*((_QWORD *)v70 + 2);
                          v17 = *(_QWORD *)v71 == (_QWORD)v70;
                          v70 = v71;
                        }
                        while (!v17);
                      }
                      if (*((unsigned __int16 **)v34 + 1) == v64)
                        *((_QWORD *)v34 + 1) = v71;
                      --*((_QWORD *)v34 + 3);
                      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v63, (uint64_t *)v64);
                      operator delete(v64);
                      v25 = v269;
                    }
                  }
                  v72 = v61 >> 8;
                  if (v72)
                  {
LABEL_122:
                    ++*(_DWORD *)&v267[4 * v72];
                    v73 = (uint64_t *)operator new(0x20uLL);
                    *((_BYTE *)v73 + 25) = v72;
                    v74 = *v60;
                    v75 = (uint64_t **)(v34 + 8);
                    v76 = (uint64_t **)(v34 + 8);
                    if (*v60)
                    {
                      do
                      {
                        while (1)
                        {
                          v75 = (uint64_t **)v74;
                          if (*((unsigned __int8 *)v74 + 25) <= v72)
                            break;
                          v74 = (uint64_t *)*v74;
                          v76 = v75;
                          if (!*v75)
                            goto LABEL_131;
                        }
                        v74 = (uint64_t *)v74[1];
                      }
                      while (v74);
                      v76 = v75 + 1;
                    }
LABEL_131:
                    *v73 = 0;
                    v73[1] = 0;
                    v73[2] = (uint64_t)v75;
                    *v76 = v73;
                    v77 = **((_QWORD **)v34 + 1);
                    if (v77)
                    {
                      *((_QWORD *)v34 + 1) = v77;
                      v73 = *v76;
                    }
                    v78 = *v60;
                    v17 = v73 == *v60;
                    *((_BYTE *)v73 + 24) = v17;
                    v25 = v269;
                    if (!v17)
                    {
                      do
                      {
                        v79 = v73[2];
                        if (*(_BYTE *)(v79 + 24))
                          break;
                        v80 = *(uint64_t **)(v79 + 16);
                        v81 = *v80;
                        if (*v80 == v79)
                        {
                          v84 = v80[1];
                          if (!v84 || (v85 = *(unsigned __int8 *)(v84 + 24), v82 = (_BYTE *)(v84 + 24), v85))
                          {
                            if (*(uint64_t **)v79 == v73)
                            {
                              v86 = v73[2];
                            }
                            else
                            {
                              v86 = *(_QWORD *)(v79 + 8);
                              v87 = *(_QWORD *)v86;
                              *(_QWORD *)(v79 + 8) = *(_QWORD *)v86;
                              if (v87)
                              {
                                *(_QWORD *)(v87 + 16) = v79;
                                v80 = *(uint64_t **)(v79 + 16);
                              }
                              *(_QWORD *)(v86 + 16) = v80;
                              *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v86;
                              *(_QWORD *)v86 = v79;
                              *(_QWORD *)(v79 + 16) = v86;
                              v80 = *(uint64_t **)(v86 + 16);
                              v79 = *v80;
                            }
                            *(_BYTE *)(v86 + 24) = 1;
                            *((_BYTE *)v80 + 24) = 0;
                            v90 = *(_QWORD *)(v79 + 8);
                            *v80 = v90;
                            if (v90)
                              *(_QWORD *)(v90 + 16) = v80;
                            *(_QWORD *)(v79 + 16) = v80[2];
                            *(_QWORD *)(v80[2] + 8 * (*(_QWORD *)v80[2] != (_QWORD)v80)) = v79;
                            *(_QWORD *)(v79 + 8) = v80;
                            goto LABEL_98;
                          }
                        }
                        else if (!v81 || (v83 = *(unsigned __int8 *)(v81 + 24), v82 = (_BYTE *)(v81 + 24), v83))
                        {
                          if (*(uint64_t **)v79 == v73)
                          {
                            v88 = v73[1];
                            *(_QWORD *)v79 = v88;
                            if (v88)
                            {
                              *(_QWORD *)(v88 + 16) = v79;
                              v80 = *(uint64_t **)(v79 + 16);
                            }
                            v73[2] = (uint64_t)v80;
                            *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v73;
                            v73[1] = v79;
                            *(_QWORD *)(v79 + 16) = v73;
                            v80 = (uint64_t *)v73[2];
                          }
                          else
                          {
                            v73 = (uint64_t *)v73[2];
                          }
                          *((_BYTE *)v73 + 24) = 1;
                          *((_BYTE *)v80 + 24) = 0;
                          v79 = v80[1];
                          v89 = *(uint64_t **)v79;
                          v80[1] = *(_QWORD *)v79;
                          if (v89)
                            v89[2] = (uint64_t)v80;
                          *(_QWORD *)(v79 + 16) = v80[2];
                          *(_QWORD *)(v80[2] + 8 * (*(_QWORD *)v80[2] != (_QWORD)v80)) = v79;
                          *(_QWORD *)v79 = v80;
LABEL_98:
                          v80[2] = v79;
                          break;
                        }
                        *(_BYTE *)(v79 + 24) = 1;
                        v73 = v80;
                        *((_BYTE *)v80 + 24) = v80 == v78;
                        *v82 = 1;
                      }
                      while (v80 != v78);
                    }
                    ++*((_QWORD *)v34 + 3);
                    goto LABEL_100;
                  }
                }
                else
                {
                  ++*((_DWORD *)a3 + 2);
                  v72 = v61 >> 8;
                  if (v72)
                    goto LABEL_122;
                }
                --*((_DWORD *)a3 + 2);
LABEL_100:
                ++v58;
              }
              while (v58 != v59);
            }
          }
        }
      }
    }
    v26 += 16;
  }
  while (v26 != v25);
  v91 = (unsigned __int16 *)*((_QWORD *)a3 + 10);
  v26 = (unsigned __int16 *)*((_QWORD *)a3 + 11);
  if (v26 == v91)
  {
    v5 = v260;
  }
  else
  {
    v5 = v260;
    do
    {
      v92 = (void *)*((_QWORD *)v26 - 3);
      if (v92)
      {
        *((_QWORD *)v26 - 2) = v92;
        operator delete(v92);
      }
      v26 -= 16;
    }
    while (v26 != v91);
    v26 = v91;
  }
LABEL_166:
  v93 = *((_DWORD *)a3 + 4);
  v94 = *((_DWORD *)a3 + 5);
  v95 = v93 != 0;
  v265 = a3[4];
  v96 = v265 != v95;
  v97 = *((_DWORD *)a3 + 6);
  if (!v93)
    v96 = 0;
  v262 = v96;
  v263 = *((_DWORD *)a3 + 7);
  v98 = v263 != 0;
  v264 = *((_DWORD *)a3 + 6);
  v99 = v97 != 0;
  if (v97)
    v100 = 0;
  else
    v100 = v263 != 0;
  v101 = v94 != 0;
  *((_QWORD *)a3 + 11) = v26;
  v102 = *a3;
  if (v94)
    v100 = 0;
  if (v93)
    v103 = 0;
  else
    v103 = v100;
  v104 = a3[1];
  v105 = a3[2];
  v268 = a3[3];
  *a3 = v101;
  a3[1] = v99;
  a3[2] = v98;
  v270 = v103;
  a3[3] = v103;
  v266 = v95;
  a3[4] = v95;
  if (v102 == v101)
    goto LABEL_229;
  v106 = *v5;
  v271 = 0x5C79F612F310A1D0;
  v107 = *(int8x8_t *)(v106 + 128);
  v259 = v105;
  if (!*(_QWORD *)&v107)
    goto LABEL_197;
  v108 = (uint8x8_t)vcnt_s8(v107);
  v108.i16[0] = vaddlv_u8(v108);
  if (v108.u32[0] > 1uLL)
  {
    v109 = 0x5C79F612F310A1D0;
    if (*(_QWORD *)&v107 <= 0x5C79F612F310A1D0uLL)
      v109 = 0x5C79F612F310A1D0uLL % *(_QWORD *)&v107;
  }
  else
  {
    v109 = (*(_QWORD *)&v107 - 1) & 0x5C79F612F310A1D0;
  }
  v110 = *(_QWORD **)(*(_QWORD *)(v106 + 120) + 8 * v109);
  if (!v110 || (v111 = (_QWORD *)*v110) == 0)
  {
LABEL_197:
    v115 = operator new();
    *(_QWORD *)(v115 + 16) = "gdc::component::DataRequestObserver::HasInitiated]";
    *(_QWORD *)(v115 + 24) = 49;
    *(_OWORD *)(v115 + 32) = 0u;
    *(_OWORD *)(v115 + 48) = 0u;
    *(_OWORD *)(v115 + 64) = 0u;
    *(_OWORD *)(v115 + 80) = 0u;
    *(_OWORD *)(v115 + 96) = 0u;
    *(_OWORD *)(v115 + 112) = 0u;
    *(_OWORD *)(v115 + 128) = 0u;
    *(_DWORD *)(v115 + 144) = 1065353216;
    *(_OWORD *)(v115 + 152) = 0u;
    *(_OWORD *)(v115 + 168) = 0u;
    *(_QWORD *)(v115 + 184) = 0;
    *(_DWORD *)(v115 + 192) = 1065353216;
    *(_OWORD *)(v115 + 200) = 0u;
    *(_OWORD *)(v115 + 216) = 0u;
    *(_QWORD *)(v115 + 232) = 0;
    *(_DWORD *)(v115 + 240) = 1065353216;
    *(_QWORD *)v115 = &off_1E42B42A8;
    *(_QWORD *)(v115 + 8) = 0x5C79F612F310A1D0;
    *(_QWORD *)(v115 + 248) = v106;
    v116 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v106 + 120), 0x5C79F612F310A1D0uLL, &v271);
    v117 = v116[3];
    v116[3] = v115;
    if (v117)
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
    v273 = 0x5C79F612F310A1D0;
    v274 = (uint64_t)"gdc::component::DataRequestObserver::HasInitiated]";
    v275[0] = 49;
    gdc::Registry::_registerStorageDataSignals(v106, 0x5C79F612F310A1D0, (uint64_t)&v273, (uint64_t *)(v115 + 104));
    if (v94)
      goto LABEL_200;
LABEL_217:
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::remove((_QWORD *)v115, a2);
    goto LABEL_228;
  }
  if (v108.u32[0] < 2uLL)
  {
    v112 = *(_QWORD *)&v107 - 1;
    while (1)
    {
      v114 = v111[1];
      if (v114 == 0x5C79F612F310A1D0)
      {
        if (v111[2] == 0x5C79F612F310A1D0)
          goto LABEL_216;
      }
      else if ((v114 & v112) != v109)
      {
        goto LABEL_197;
      }
      v111 = (_QWORD *)*v111;
      if (!v111)
        goto LABEL_197;
    }
  }
  while (2)
  {
    v113 = v111[1];
    if (v113 != 0x5C79F612F310A1D0)
    {
      if (v113 >= *(_QWORD *)&v107)
        v113 %= *(_QWORD *)&v107;
      if (v113 != v109)
        goto LABEL_197;
      goto LABEL_187;
    }
    if (v111[2] != 0x5C79F612F310A1D0)
    {
LABEL_187:
      v111 = (_QWORD *)*v111;
      if (!v111)
        goto LABEL_197;
      continue;
    }
    break;
  }
LABEL_216:
  v115 = v111[3];
  if (!v94)
    goto LABEL_217;
LABEL_200:
  v276 = a2;
  v118 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v115 + 32), (uint64_t)&v276);
  if ((v119 & 1) != 0)
  {
    v124 = *(_BYTE **)(v115 + 88);
    v123 = *(_QWORD *)(v115 + 96);
    if ((unint64_t)v124 >= v123)
    {
      v261 = v5;
      v126 = *(char **)(v115 + 80);
      v127 = v124 - v126;
      v128 = v124 - v126 + 1;
      if (v128 < 0)
        goto LABEL_410;
      v129 = v123 - (_QWORD)v126;
      if (2 * v129 > v128)
        v128 = 2 * v129;
      if (v129 >= 0x3FFFFFFFFFFFFFFFLL)
        v130 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v130 = v128;
      if (v130)
        v131 = (char *)operator new(v130);
      else
        v131 = 0;
      v132 = &v131[v130];
      v125 = (uint64_t)&v131[v127 + 1];
      v133 = (char *)(v126 - v124);
      if (v126 == v124)
        v133 = 0;
      *(_QWORD *)(v115 + 80) = &v131[v127 + (_QWORD)v133];
      *(_QWORD *)(v115 + 88) = v125;
      *(_QWORD *)(v115 + 96) = v132;
      if (v126)
        operator delete(v126);
      v5 = v261;
    }
    else
    {
      v125 = (uint64_t)(v124 + 1);
    }
    *(_QWORD *)(v115 + 88) = v125;
    v120 = *(_QWORD *)(v115 + 248);
    goto LABEL_225;
  }
  v120 = *(_QWORD *)(v115 + 248);
  if (*(_QWORD *)(v115 + 80) + (((uint64_t)v118 - *(_QWORD *)(v115 + 56)) >> 3) != *(_QWORD *)(v115 + 88))
  {
    for (i = *(_QWORD **)(v115 + 128); i; i = (_QWORD *)*i)
    {
      v273 = (uint64_t)&v276;
      v274 = 1;
      v271 = v120;
      v122 = i[6];
      if (!v122)
        goto LABEL_409;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v122 + 48))(v122, &v271, &v273);
    }
    goto LABEL_228;
  }
LABEL_225:
  for (j = *(_QWORD **)(v115 + 176); j; j = (_QWORD *)*j)
  {
    v273 = (uint64_t)&v276;
    v274 = 1;
    v271 = v120;
    v135 = j[6];
    if (!v135)
      goto LABEL_409;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v135 + 48))(v135, &v271, &v273);
  }
LABEL_228:
  v105 = v259;
LABEL_229:
  v17 = v104 == v99;
  v136 = v270;
  if (v17)
    goto LABEL_281;
  v137 = *v5;
  v271 = 0x7B96EC200C42ECB2;
  v138 = *(int8x8_t *)(v137 + 128);
  if (!*(_QWORD *)&v138)
    goto LABEL_252;
  v139 = (uint8x8_t)vcnt_s8(v138);
  v139.i16[0] = vaddlv_u8(v139);
  if (v139.u32[0] > 1uLL)
  {
    v140 = 0x7B96EC200C42ECB2;
    if (*(_QWORD *)&v138 <= 0x7B96EC200C42ECB2uLL)
      v140 = 0x7B96EC200C42ECB2uLL % *(_QWORD *)&v138;
  }
  else
  {
    v140 = (*(_QWORD *)&v138 - 1) & 0x7B96EC200C42ECB2;
  }
  v141 = *(_QWORD **)(*(_QWORD *)(v137 + 120) + 8 * v140);
  if (!v141 || (v142 = (_QWORD *)*v141) == 0)
  {
LABEL_252:
    v146 = v105;
    v147 = operator new();
    *(_QWORD *)(v147 + 16) = "gdc::component::DataRequestObserver::HasPending]";
    *(_QWORD *)(v147 + 24) = 47;
    *(_OWORD *)(v147 + 32) = 0u;
    *(_OWORD *)(v147 + 48) = 0u;
    *(_OWORD *)(v147 + 64) = 0u;
    *(_OWORD *)(v147 + 80) = 0u;
    *(_OWORD *)(v147 + 96) = 0u;
    *(_OWORD *)(v147 + 112) = 0u;
    *(_OWORD *)(v147 + 128) = 0u;
    *(_DWORD *)(v147 + 144) = 1065353216;
    *(_OWORD *)(v147 + 152) = 0u;
    *(_OWORD *)(v147 + 168) = 0u;
    *(_QWORD *)(v147 + 184) = 0;
    *(_DWORD *)(v147 + 192) = 1065353216;
    *(_OWORD *)(v147 + 200) = 0u;
    *(_OWORD *)(v147 + 216) = 0u;
    *(_QWORD *)(v147 + 232) = 0;
    *(_DWORD *)(v147 + 240) = 1065353216;
    *(_QWORD *)v147 = &off_1E42B4218;
    *(_QWORD *)(v147 + 8) = 0x7B96EC200C42ECB2;
    *(_QWORD *)(v147 + 248) = v137;
    v148 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v137 + 120), 0x7B96EC200C42ECB2uLL, &v271);
    v149 = v148[3];
    v148[3] = v147;
    if (v149)
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
    v273 = 0x7B96EC200C42ECB2;
    v274 = (uint64_t)"gdc::component::DataRequestObserver::HasPending]";
    v275[0] = 47;
    gdc::Registry::_registerStorageDataSignals(v137, 0x7B96EC200C42ECB2, (uint64_t)&v273, (uint64_t *)(v147 + 104));
    if (v264)
      goto LABEL_255;
LABEL_251:
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove((_QWORD *)v147, a2);
    goto LABEL_280;
  }
  if (v139.u32[0] < 2uLL)
  {
    v143 = *(_QWORD *)&v138 - 1;
    while (1)
    {
      v145 = v142[1];
      if (v145 == 0x7B96EC200C42ECB2)
      {
        if (v142[2] == 0x7B96EC200C42ECB2)
          goto LABEL_250;
      }
      else if ((v145 & v143) != v140)
      {
        goto LABEL_252;
      }
      v142 = (_QWORD *)*v142;
      if (!v142)
        goto LABEL_252;
    }
  }
  while (2)
  {
    v144 = v142[1];
    if (v144 != 0x7B96EC200C42ECB2)
    {
      if (v144 >= *(_QWORD *)&v138)
        v144 %= *(_QWORD *)&v138;
      if (v144 != v140)
        goto LABEL_252;
      goto LABEL_240;
    }
    if (v142[2] != 0x7B96EC200C42ECB2)
    {
LABEL_240:
      v142 = (_QWORD *)*v142;
      if (!v142)
        goto LABEL_252;
      continue;
    }
    break;
  }
LABEL_250:
  v146 = v105;
  v147 = v142[3];
  if (!v264)
    goto LABEL_251;
LABEL_255:
  v276 = a2;
  v150 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v147 + 32), (uint64_t)&v276);
  if ((v151 & 1) != 0)
  {
    v156 = *(_BYTE **)(v147 + 88);
    v155 = *(_QWORD *)(v147 + 96);
    if ((unint64_t)v156 >= v155)
    {
      v158 = *(char **)(v147 + 80);
      v159 = v156 - v158;
      v160 = v156 - v158 + 1;
      if (v160 < 0)
        goto LABEL_410;
      v161 = v155 - (_QWORD)v158;
      if (2 * v161 > v160)
        v160 = 2 * v161;
      if (v161 >= 0x3FFFFFFFFFFFFFFFLL)
        v162 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
        v163 = (char *)operator new(v162);
      else
        v163 = 0;
      v164 = &v163[v162];
      v157 = (uint64_t)&v163[v159 + 1];
      v165 = (char *)(v158 - v156);
      if (v158 == v156)
        v165 = 0;
      *(_QWORD *)(v147 + 80) = &v163[v159 + (_QWORD)v165];
      *(_QWORD *)(v147 + 88) = v157;
      *(_QWORD *)(v147 + 96) = v164;
      if (v158)
        operator delete(v158);
    }
    else
    {
      v157 = (uint64_t)(v156 + 1);
    }
    *(_QWORD *)(v147 + 88) = v157;
    v152 = *(_QWORD *)(v147 + 248);
    goto LABEL_277;
  }
  v152 = *(_QWORD *)(v147 + 248);
  if (*(_QWORD *)(v147 + 80) + (((uint64_t)v150 - *(_QWORD *)(v147 + 56)) >> 3) != *(_QWORD *)(v147 + 88))
  {
    for (k = *(_QWORD **)(v147 + 128); k; k = (_QWORD *)*k)
    {
      v273 = (uint64_t)&v276;
      v274 = 1;
      v271 = v152;
      v154 = k[6];
      if (!v154)
        goto LABEL_409;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v154 + 48))(v154, &v271, &v273);
    }
    goto LABEL_280;
  }
LABEL_277:
  for (m = *(_QWORD **)(v147 + 176); m; m = (_QWORD *)*m)
  {
    v273 = (uint64_t)&v276;
    v274 = 1;
    v271 = v152;
    v167 = m[6];
    if (!v167)
      goto LABEL_409;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v167 + 48))(v167, &v271, &v273);
  }
LABEL_280:
  v105 = v146;
  v136 = v270;
LABEL_281:
  if (v105 == v98)
    goto LABEL_332;
  v168 = *v5;
  v271 = 0x1BC7FE1311A603CLL;
  v169 = *(int8x8_t *)(v168 + 128);
  if (!*(_QWORD *)&v169)
    goto LABEL_302;
  v170 = (uint8x8_t)vcnt_s8(v169);
  v170.i16[0] = vaddlv_u8(v170);
  if (v170.u32[0] > 1uLL)
  {
    v171 = 0x1BC7FE1311A603CLL;
    if (*(_QWORD *)&v169 <= 0x1BC7FE1311A603CuLL)
      v171 = 0x1BC7FE1311A603CuLL % *(_QWORD *)&v169;
  }
  else
  {
    v171 = (*(_QWORD *)&v169 - 1) & 0x1BC7FE1311A603CLL;
  }
  v172 = *(_QWORD **)(*(_QWORD *)(v168 + 120) + 8 * v171);
  if (!v172 || (v173 = (_QWORD *)*v172) == 0)
  {
LABEL_302:
    v177 = operator new();
    *(_QWORD *)(v177 + 16) = "gdc::component::DataRequestObserver::HasCompleted]";
    *(_QWORD *)(v177 + 24) = 49;
    *(_OWORD *)(v177 + 32) = 0u;
    *(_OWORD *)(v177 + 48) = 0u;
    *(_OWORD *)(v177 + 64) = 0u;
    *(_OWORD *)(v177 + 80) = 0u;
    *(_OWORD *)(v177 + 96) = 0u;
    *(_OWORD *)(v177 + 112) = 0u;
    *(_OWORD *)(v177 + 128) = 0u;
    *(_DWORD *)(v177 + 144) = 1065353216;
    *(_OWORD *)(v177 + 152) = 0u;
    *(_OWORD *)(v177 + 168) = 0u;
    *(_QWORD *)(v177 + 184) = 0;
    *(_DWORD *)(v177 + 192) = 1065353216;
    *(_OWORD *)(v177 + 200) = 0u;
    *(_OWORD *)(v177 + 216) = 0u;
    *(_QWORD *)(v177 + 232) = 0;
    *(_DWORD *)(v177 + 240) = 1065353216;
    *(_QWORD *)v177 = &off_1E42B4278;
    *(_QWORD *)(v177 + 8) = 0x1BC7FE1311A603CLL;
    *(_QWORD *)(v177 + 248) = v168;
    v178 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v168 + 120), 0x1BC7FE1311A603CuLL, &v271);
    v179 = v178[3];
    v178[3] = v177;
    if (v179)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
    v273 = 0x1BC7FE1311A603CLL;
    v274 = (uint64_t)"gdc::component::DataRequestObserver::HasCompleted]";
    v275[0] = 49;
    gdc::Registry::_registerStorageDataSignals(v168, 0x1BC7FE1311A603CLL, (uint64_t)&v273, (uint64_t *)(v177 + 104));
    if (v263)
      goto LABEL_305;
LABEL_322:
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove((_QWORD *)v177, a2);
    goto LABEL_332;
  }
  if (v170.u32[0] < 2uLL)
  {
    v174 = *(_QWORD *)&v169 - 1;
    while (1)
    {
      v176 = v173[1];
      if (v176 == 0x1BC7FE1311A603CLL)
      {
        if (v173[2] == 0x1BC7FE1311A603CLL)
          goto LABEL_321;
      }
      else if ((v176 & v174) != v171)
      {
        goto LABEL_302;
      }
      v173 = (_QWORD *)*v173;
      if (!v173)
        goto LABEL_302;
    }
  }
  while (2)
  {
    v175 = v173[1];
    if (v175 != 0x1BC7FE1311A603CLL)
    {
      if (v175 >= *(_QWORD *)&v169)
        v175 %= *(_QWORD *)&v169;
      if (v175 != v171)
        goto LABEL_302;
      goto LABEL_292;
    }
    if (v173[2] != 0x1BC7FE1311A603CLL)
    {
LABEL_292:
      v173 = (_QWORD *)*v173;
      if (!v173)
        goto LABEL_302;
      continue;
    }
    break;
  }
LABEL_321:
  v177 = v173[3];
  if (!v263)
    goto LABEL_322;
LABEL_305:
  v276 = a2;
  v180 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v177 + 32), (uint64_t)&v276);
  if ((v181 & 1) != 0)
  {
    v186 = *(_BYTE **)(v177 + 88);
    v185 = *(_QWORD *)(v177 + 96);
    if ((unint64_t)v186 >= v185)
    {
      v188 = *(char **)(v177 + 80);
      v189 = v186 - v188;
      v190 = v186 - v188 + 1;
      if (v190 < 0)
        goto LABEL_410;
      v191 = v185 - (_QWORD)v188;
      if (2 * v191 > v190)
        v190 = 2 * v191;
      if (v191 >= 0x3FFFFFFFFFFFFFFFLL)
        v192 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v192 = v190;
      if (v192)
        v193 = (char *)operator new(v192);
      else
        v193 = 0;
      v194 = &v193[v189];
      v187 = (uint64_t)&v193[v189 + 1];
      v195 = (char *)(v188 - v186);
      if (v188 == v186)
        v195 = 0;
      *(_QWORD *)(v177 + 80) = &v195[(_QWORD)v194];
      *(_QWORD *)(v177 + 88) = v187;
      *(_QWORD *)(v177 + 96) = &v193[v192];
      if (v188)
        operator delete(v188);
    }
    else
    {
      v187 = (uint64_t)(v186 + 1);
    }
    *(_QWORD *)(v177 + 88) = v187;
    v182 = *(_QWORD *)(v177 + 248);
    goto LABEL_329;
  }
  v182 = *(_QWORD *)(v177 + 248);
  if (*(_QWORD *)(v177 + 80) + (((uint64_t)v180 - *(_QWORD *)(v177 + 56)) >> 3) == *(_QWORD *)(v177 + 88))
  {
LABEL_329:
    v196 = *(_QWORD **)(v177 + 176);
    if (!v196)
      goto LABEL_332;
    while (1)
    {
      v273 = (uint64_t)&v276;
      v274 = 1;
      v271 = v182;
      v197 = v196[6];
      if (!v197)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v197 + 48))(v197, &v271, &v273);
      v196 = (_QWORD *)*v196;
      if (!v196)
        goto LABEL_332;
    }
LABEL_409:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_410;
  }
  for (n = *(_QWORD **)(v177 + 128); n; n = (_QWORD *)*n)
  {
    v273 = (uint64_t)&v276;
    v274 = 1;
    v271 = v182;
    v184 = n[6];
    if (!v184)
      goto LABEL_409;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v184 + 48))(v184, &v271, &v273);
  }
LABEL_332:
  if (v268 == v136)
    goto LABEL_360;
  v198 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(*v5);
  v199 = v198;
  if (!v136)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::remove(v198, a2);
    goto LABEL_360;
  }
  v276 = a2;
  v200 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v198 + 4, (uint64_t)&v276);
  if ((v201 & 1) != 0)
  {
    v206 = (_BYTE *)v199[11];
    v205 = v199[12];
    if ((unint64_t)v206 >= v205)
    {
      v208 = (char *)v199[10];
      v209 = v206 - v208;
      v210 = v206 - v208 + 1;
      if (v210 < 0)
        goto LABEL_410;
      v211 = v205 - (_QWORD)v208;
      if (2 * v211 > v210)
        v210 = 2 * v211;
      if (v211 >= 0x3FFFFFFFFFFFFFFFLL)
        v212 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v212 = v210;
      if (v212)
        v213 = (char *)operator new(v212);
      else
        v213 = 0;
      v214 = &v213[v209];
      v207 = (uint64_t)&v213[v209 + 1];
      v215 = (char *)(v208 - v206);
      if (v208 == v206)
        v215 = 0;
      v199[10] = &v215[(_QWORD)v214];
      v199[11] = v207;
      v199[12] = &v213[v212];
      if (v208)
        operator delete(v208);
    }
    else
    {
      v207 = (uint64_t)(v206 + 1);
    }
    v199[11] = v207;
    v202 = v199[31];
    goto LABEL_357;
  }
  v202 = v199[31];
  if (v199[10] + (((uint64_t)v200 - v199[7]) >> 3) != v199[11])
  {
    v203 = (_QWORD *)v199[16];
    if (v203)
    {
      while (1)
      {
        v273 = (uint64_t)&v276;
        v274 = 1;
        v271 = v202;
        v204 = v203[6];
        if (!v204)
          goto LABEL_409;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v204 + 48))(v204, &v271, &v273);
        v203 = (_QWORD *)*v203;
        if (!v203)
          goto LABEL_360;
      }
    }
    goto LABEL_360;
  }
LABEL_357:
  for (ii = (_QWORD *)v199[22]; ii; ii = (_QWORD *)*ii)
  {
    v273 = (uint64_t)&v276;
    v274 = 1;
    v271 = v202;
    v217 = ii[6];
    if (!v217)
      goto LABEL_409;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v217 + 48))(v217, &v271, &v273);
  }
LABEL_360:
  if (v265 == v266)
    goto LABEL_388;
  v218 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(*v5);
  v219 = v218;
  if (!v262)
  {
    gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::remove(v218, a2);
    goto LABEL_388;
  }
  v276 = a2;
  v220 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v218 + 4, (uint64_t)&v276);
  if ((v221 & 1) != 0)
  {
    v226 = (_BYTE *)v219[11];
    v225 = v219[12];
    if ((unint64_t)v226 < v225)
    {
      v227 = (uint64_t)(v226 + 1);
LABEL_384:
      v219[11] = v227;
      v222 = v219[31];
      goto LABEL_385;
    }
    v228 = (char *)v219[10];
    v229 = v226 - v228;
    v230 = v226 - v228 + 1;
    if (v230 >= 0)
    {
      v231 = v225 - (_QWORD)v228;
      if (2 * v231 > v230)
        v230 = 2 * v231;
      if (v231 >= 0x3FFFFFFFFFFFFFFFLL)
        v232 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v232 = v230;
      if (v232)
        v233 = (char *)operator new(v232);
      else
        v233 = 0;
      v234 = &v233[v229];
      v227 = (uint64_t)&v233[v229 + 1];
      v235 = (char *)(v228 - v226);
      if (v228 == v226)
        v235 = 0;
      v219[10] = &v235[(_QWORD)v234];
      v219[11] = v227;
      v219[12] = &v233[v232];
      if (v228)
        operator delete(v228);
      goto LABEL_384;
    }
LABEL_410:
    abort();
  }
  v222 = v219[31];
  if (v219[10] + (((uint64_t)v220 - v219[7]) >> 3) != v219[11])
  {
    v223 = (_QWORD *)v219[16];
    if (v223)
    {
      while (1)
      {
        v273 = (uint64_t)&v276;
        v274 = 1;
        v271 = v222;
        v224 = v223[6];
        if (!v224)
          goto LABEL_409;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v224 + 48))(v224, &v271, &v273);
        v223 = (_QWORD *)*v223;
        if (!v223)
          goto LABEL_388;
      }
    }
    goto LABEL_388;
  }
LABEL_385:
  for (jj = (_QWORD *)v219[22]; jj; jj = (_QWORD *)*jj)
  {
    v273 = (uint64_t)&v276;
    v274 = 1;
    v271 = v222;
    v237 = jj[6];
    if (!v237)
      goto LABEL_409;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v237 + 48))(v237, &v271, &v273);
  }
LABEL_388:
  if (!*((_DWORD *)a3 + 2))
  {
    v238 = v5[1];
    v240 = *(uint64_t **)v238;
    v239 = *(unint64_t **)(v238 + 8);
    v241 = ((uint64_t)v239 - *(_QWORD *)v238) >> 3;
    v242 = *(_QWORD *)(v238 + 24);
    if (v242 < v241 + 1)
    {
      v243 = *(uint64_t **)(v238 + 16);
      v244 = (1 << -(char)__clz(v242 + 1));
      if (v242 >= 0xFFFFFFFFFFFFFFFELL)
        v244 = 1;
      if (v244 <= v241 + 1)
        v245 = v241 + 1;
      else
        v245 = v244;
      v246 = (char *)malloc_type_malloc(8 * v245, 0x100004000313F17uLL);
      v247 = v246;
      v248 = *(uint64_t **)v238;
      v249 = *(char **)(v238 + 8);
      if (*(char **)v238 != v249)
      {
        v250 = v249 - (char *)v248 - 8;
        if (v250 < 0x18)
        {
          v251 = v246;
          goto LABEL_403;
        }
        v251 = v246;
        if ((unint64_t)(v246 - (char *)v248) < 0x20)
        {
          do
          {
LABEL_403:
            v258 = *v248++;
            *(_QWORD *)v251 = v258;
            v251 += 8;
          }
          while (v248 != (uint64_t *)v249);
        }
        else
        {
          v252 = (v250 >> 3) + 1;
          v253 = 8 * (v252 & 0x3FFFFFFFFFFFFFFCLL);
          v251 = &v246[v253];
          v254 = (__int128 *)(v248 + 2);
          v255 = v246 + 16;
          v256 = v252 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v257 = *v254;
            *(v255 - 1) = *(v254 - 1);
            *v255 = v257;
            v254 += 2;
            v255 += 2;
            v256 -= 4;
          }
          while (v256);
          if (v252 != (v252 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v248 = (uint64_t *)((char *)v248 + v253);
            goto LABEL_403;
          }
        }
      }
      if (v240 != v243)
        free(*(void **)v238);
      v239 = (unint64_t *)&v247[8 * v241];
      *(_QWORD *)v238 = v247;
      *(_QWORD *)(v238 + 8) = v239;
      *(_QWORD *)(v238 + 24) = v245;
    }
    *v239 = a2;
    *(_QWORD *)(v238 + 8) += 8;
  }
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove();
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove();
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasCompleted>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasPending>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::HasInitiated>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t *std::__tree<gdc::component::DataRequestStatus>::__emplace_hint_multi<gdc::component::DataRequestStatus const&>(uint64_t ***a1, uint64_t **a2, unsigned __int8 a3)
{
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *result;

  v6 = a3;
  v7 = (uint64_t *)operator new(0x20uLL);
  v8 = v7;
  *((_BYTE *)v7 + 25) = a3;
  v9 = (uint64_t **)(a1 + 1);
  if (a1 + 1 != (uint64_t ***)a2 && *((unsigned __int8 *)a2 + 25) < v6)
  {
    while (1)
    {
      v10 = *v9;
      v11 = v9;
      if (!*v9)
        goto LABEL_26;
      while (1)
      {
        v9 = (uint64_t **)v10;
        if (*((unsigned __int8 *)v10 + 25) >= v6)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
    }
  }
  v12 = *a2;
  if (*a1 == a2)
  {
    v14 = a2;
LABEL_20:
    if (v12)
      v9 = v14;
    else
      v9 = a2;
    if (v12)
      v11 = v14 + 1;
    else
      v11 = a2;
    goto LABEL_26;
  }
  if (v12)
  {
    v13 = *a2;
    do
    {
      v14 = (uint64_t **)v13;
      v13 = (uint64_t *)v13[1];
    }
    while (v13);
  }
  else
  {
    v15 = a2;
    do
    {
      v14 = (uint64_t **)v15[2];
      v16 = *v14 == (uint64_t *)v15;
      v15 = v14;
    }
    while (v16);
  }
  if (*((unsigned __int8 *)v14 + 25) <= v6)
    goto LABEL_20;
  while (1)
  {
    v17 = *v9;
    v11 = v9;
    if (!*v9)
      break;
    while (1)
    {
      v9 = (uint64_t **)v17;
      if (*((unsigned __int8 *)v17 + 25) > v6)
        break;
      v17 = (uint64_t *)v17[1];
      if (!v17)
      {
LABEL_19:
        v11 = v9 + 1;
        goto LABEL_26;
      }
    }
  }
LABEL_26:
  *v7 = 0;
  v7[1] = 0;
  v7[2] = (uint64_t)v9;
  *v11 = v7;
  v18 = **a1;
  if (v18)
  {
    *a1 = (uint64_t **)v18;
    v8 = *v11;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v8);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  return result;
}

uint64_t gdc::ResourceKey::ResourceKey(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned __int8 *v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;

  *(_BYTE *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = a6;
  v10 = (unsigned __int8 *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = 32;
  *(_QWORD *)(a1 + 72) = 0;
  if (a4 >= 0x21)
  {
    if (a4 <= 0x40)
      v11 = 64;
    else
      v11 = a4;
    v10 = (unsigned __int8 *)malloc_type_malloc(v11, 0x100004077774924uLL);
    v12 = *(unsigned __int8 **)(a1 + 8);
    v13 = *(unsigned __int8 **)(a1 + 16);
    if (v12 == v13)
      goto LABEL_21;
    v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) < 8)
    {
      v15 = v10;
      goto LABEL_20;
    }
    v15 = v10;
    if ((unint64_t)(v10 - v12) < 0x20)
      goto LABEL_20;
    if (v14 >= 0x20)
    {
      v16 = v14 & 0xFFFFFFFFFFFFFFE0;
      v17 = (__int128 *)(v12 + 16);
      v18 = v10 + 16;
      v19 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v14 == v16)
        goto LABEL_21;
      if ((v14 & 0x18) == 0)
      {
        v12 += v16;
        v15 = &v10[v16];
        goto LABEL_20;
      }
    }
    else
    {
      v16 = 0;
    }
    v21 = v14 & 0xFFFFFFFFFFFFFFF8;
    v15 = &v10[v14 & 0xFFFFFFFFFFFFFFF8];
    v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
    v23 = (uint64_t *)&v12[v16];
    v24 = &v10[v16];
    do
    {
      v25 = *v23++;
      *(_QWORD *)v24 = v25;
      v24 += 8;
      v22 += 8;
    }
    while (v22);
    if (v14 == v21)
      goto LABEL_21;
    v12 += v21;
    do
    {
LABEL_20:
      v26 = *v12++;
      *v15++ = v26;
    }
    while (v12 != v13);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (!a4)
  {
    v28 = v10;
    goto LABEL_40;
  }
  if (a4 < 8 || (unint64_t)&v10[-a3] < 0x20)
  {
    v29 = v10;
    v30 = (unsigned __int8 *)a3;
    goto LABEL_38;
  }
  if (a4 >= 0x20)
  {
    v27 = a4 & 0xFFFFFFFFFFFFFFE0;
    v31 = (__int128 *)(a3 + 16);
    v32 = v10 + 16;
    v33 = a4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v34 = *v31;
      *(v32 - 1) = *(v31 - 1);
      *v32 = v34;
      v31 += 2;
      v32 += 2;
      v33 -= 32;
    }
    while (v33);
    if (v27 == a4)
      goto LABEL_39;
    if ((a4 & 0x18) == 0)
    {
      v30 = (unsigned __int8 *)(a3 + v27);
      v29 = &v10[v27];
      goto LABEL_38;
    }
  }
  else
  {
    v27 = 0;
  }
  v35 = a4 & 0xFFFFFFFFFFFFFFF8;
  v29 = &v10[a4 & 0xFFFFFFFFFFFFFFF8];
  v36 = v27 - (a4 & 0xFFFFFFFFFFFFFFF8);
  v37 = (uint64_t *)(a3 + v27);
  v38 = &v10[v27];
  do
  {
    v39 = *v37++;
    *(_QWORD *)v38 = v39;
    v38 += 8;
    v36 += 8;
  }
  while (v36);
  if (v35 == a4)
    goto LABEL_39;
  v30 = (unsigned __int8 *)(a3 + v35);
  do
  {
LABEL_38:
    v40 = *v30++;
    *v29++ = v40;
  }
  while (v30 != (unsigned __int8 *)(a3 + a4));
LABEL_39:
  v10 = *(unsigned __int8 **)(a1 + 8);
  v28 = *(unsigned __int8 **)(a1 + 16);
LABEL_40:
  v41 = &v28[a4];
  *(_QWORD *)(a1 + 16) = v41;
  v42 = v41 - v10;
  if (v41 == v10)
  {
    v43 = 0;
  }
  else
  {
    v43 = 0;
    if (v42 <= 1)
      v42 = 1;
    do
    {
      v44 = *v10++;
      v43 ^= (v43 << 6) + (v43 >> 2) - 0x61C8864680B583EBLL + v44;
      --v42;
    }
    while (v42);
  }
  *(_QWORD *)(a1 + 72) = v43;
  *(_QWORD *)(a1 + 88) = a5;
  return a1;
}

uint64_t gdc::ResourceKey::ResourceKey(uint64_t a1, char a2, __int16 a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  char v40;

  *(_BYTE *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a6;
  v9 = (char *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = 32;
  v10 = *(char **)a4;
  v11 = *(char **)(a4 + 8);
  v12 = (unint64_t)&v11[-*(_QWORD *)a4];
  if (v12 >= 0x21)
  {
    if (v12 <= 0x40)
      v13 = 64;
    else
      v13 = (size_t)&v11[-*(_QWORD *)a4];
    v9 = (char *)malloc_type_malloc(v13, 0x100004077774924uLL);
    v14 = *(char **)(a1 + 8);
    v15 = *(char **)(a1 + 16);
    if (v14 == v15)
      goto LABEL_21;
    v16 = v15 - v14;
    if ((unint64_t)(v15 - v14) < 8)
    {
      v17 = v9;
      goto LABEL_20;
    }
    v17 = v9;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_20;
    if (v16 >= 0x20)
    {
      v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      v19 = (__int128 *)(v14 + 16);
      v20 = v9 + 16;
      v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 == v18)
        goto LABEL_21;
      if ((v16 & 0x18) == 0)
      {
        v14 += v18;
        v17 = &v9[v18];
        goto LABEL_20;
      }
    }
    else
    {
      v18 = 0;
    }
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    v17 = &v9[v16 & 0xFFFFFFFFFFFFFFF8];
    v24 = v18 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v25 = (uint64_t *)&v14[v18];
    v26 = &v9[v18];
    do
    {
      v27 = *v25++;
      *(_QWORD *)v26 = v27;
      v26 += 8;
      v24 += 8;
    }
    while (v24);
    if (v16 == v23)
      goto LABEL_21;
    v14 += v23;
    do
    {
LABEL_20:
      v28 = *v14++;
      *v17++ = v28;
    }
    while (v14 != v15);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v10 != v11)
  {
    if (v12 < 8)
    {
      v30 = v9;
      goto LABEL_38;
    }
    if ((unint64_t)(v9 - v10) < 0x20)
    {
      v30 = v9;
      goto LABEL_38;
    }
    if (v12 >= 0x20)
    {
      v29 = v12 & 0xFFFFFFFFFFFFFFE0;
      v31 = (__int128 *)(v10 + 16);
      v32 = v9 + 16;
      v33 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 32;
      }
      while (v33);
      if (v12 == v29)
        goto LABEL_39;
      if ((v12 & 0x18) == 0)
      {
        v10 += v29;
        v30 = &v9[v29];
        goto LABEL_38;
      }
    }
    else
    {
      v29 = 0;
    }
    v35 = v12 & 0xFFFFFFFFFFFFFFF8;
    v30 = &v9[v12 & 0xFFFFFFFFFFFFFFF8];
    v36 = v29 - (v12 & 0xFFFFFFFFFFFFFFF8);
    v37 = (uint64_t *)&v10[v29];
    v38 = &v9[v29];
    do
    {
      v39 = *v37++;
      *(_QWORD *)v38 = v39;
      v38 += 8;
      v36 += 8;
    }
    while (v36);
    if (v12 == v35)
      goto LABEL_39;
    v10 += v35;
    do
    {
LABEL_38:
      v40 = *v10++;
      *v30++ = v40;
    }
    while (v10 != v11);
LABEL_39:
    v9 = *(char **)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = &v9[v12];
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a4 + 64);
  *(_QWORD *)(a1 + 88) = a5;
  return a1;
}

char *gdc::ResourceKey::keyData(gdc::ResourceKey *this, _QWORD *a2)
{
  char *result;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;

  result = (char *)this + 32;
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = result;
  *((_QWORD *)this + 2) = result;
  *((_QWORD *)this + 3) = 32;
  v5 = (char *)a2[1];
  v6 = (char *)a2[2];
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    result = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)this;
    v10 = (char *)*((_QWORD *)this + 1);
    if (*(char **)this == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = result;
      goto LABEL_20;
    }
    v12 = result;
    if ((unint64_t)(result - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = result + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &result[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &result[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &result[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)this = result;
    *((_QWORD *)this + 1) = result;
    *((_QWORD *)this + 3) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = result;
      goto LABEL_38;
    }
    if ((unint64_t)(result - v5) < 0x20)
    {
      v25 = result;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = result + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &result[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &result[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &result[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    result = (char *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 1) = &result[v7];
  *((_QWORD *)this + 8) = a2[9];
  return result;
}

void gdc::ResourceKey::keysInt32Str(std::string *this, unsigned __int8 *a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  gdc::GenericKey::keysInt32Str((gdc::GenericKey *)&v17, (_QWORD *)a2 + 1);
  v4 = std::string::append(&v17, " t:", 3uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, *((unsigned __int16 *)a2 + 1));
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v16;
  else
    v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v19, " kt:", 4uLL);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, *a2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v15;
  else
    v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v13 = v15.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *this = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void gdc::ResourceKey::createDebugNode(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8[2];
  uint64_t v9;
  _BYTE v10[32];
  __int128 __p;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[7];
  int v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28[23];
  char v29;

  strcpy((char *)a1, "Resource Key");
  *(_WORD *)(a1 + 23) = 12;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  v29 = 12;
  strcpy(v28, "Resouce Type");
  v4 = *((unsigned __int16 *)a2 + 1);
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v24 = 0;
  v23 = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v22);
  v5 = *a2;
  v29 = 8;
  strcpy(v28, "Key Type");
  v21 = 0;
  memset(&v20[4], 0, 24);
  v20[0] = v5;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v20);
  v6 = *((unsigned int *)a2 + 1);
  v29 = 8;
  strcpy(v28, "Priority");
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v16 = 0;
  v15 = v6;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v14);
  v29 = 5;
  strcpy(v28, "Value");
  gdc::GenericKey::keysInt32Str((gdc::GenericKey *)v8, (_QWORD *)a2 + 1);
  __p = 0uLL;
  v12 = 0;
  v13 = 4;
  v7 = SHIBYTE(v9);
  if (SHIBYTE(v9) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, v8[0], (size_t)v8[1]);
  }
  else
  {
    __p = *(_OWORD *)v8;
    v12 = v9;
  }
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v28, (uint64_t)v10);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v8[0]);
    return;
  }
  operator delete((void *)__p);
  if (v7 < 0)
    goto LABEL_8;
}

uint64_t gdc::CameraView::geocentricCameraView(gdc::CameraView *this, const Camera *a2)
{
  double v4;
  double v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  double v15;
  _WORD v16[2];
  _BYTE v17[496];
  double v18[7];

  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v18, (double *)a2 + 1);
  v4 = *((double *)a2 + 46);
  v5 = *((double *)a2 + 47);
  v16[0] = (int)v4;
  v16[1] = (int)v5;
  v6 = *((float *)a2 + 122);
  v7 = *((float *)a2 + 123);
  if (v5 >= v4)
  {
    v13 = *((double *)a2 + 57);
  }
  else
  {
    v8 = v5 * v4;
    v9 = v5 / v4;
    if (v8 <= 0.0)
      v10 = 1.0;
    else
      v10 = v9;
    v11 = tan(*((double *)a2 + 57) * 0.5);
    v12 = atan(v11 * v10);
    v13 = v12 + v12;
  }
  v15 = v13;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v17, (uint64_t)v18, v16, &v15, v6, v7, 1.0, *((double *)a2 + 58), *((double *)a2 + 59), *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v17);
}

uint64_t gdc::CameraView::ecefCameraView(gdc::CameraView *this, const Camera *a2)
{
  double v4;
  double v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  long double v12;
  double v13;
  double v15;
  _WORD v16[2];
  _BYTE v17[496];
  _BYTE v18[56];

  gdc::CameraFrame<geo::Radians,double>::toRigidTransformEcefNoOffset((uint64_t)v18, (double *)a2 + 1);
  v4 = *((double *)a2 + 46);
  v5 = *((double *)a2 + 47);
  v16[0] = (int)v4;
  v16[1] = (int)v5;
  v6 = *((float *)a2 + 122);
  v7 = *((float *)a2 + 123);
  if (v5 >= v4)
  {
    v13 = *((double *)a2 + 57);
  }
  else
  {
    v8 = v5 * v4;
    v9 = v5 / v4;
    if (v8 <= 0.0)
      v10 = 1.0;
    else
      v10 = v9;
    v11 = tan(*((double *)a2 + 57) * 0.5);
    v12 = atan(v11 * v10);
    v13 = v12 + v12;
  }
  v15 = v13;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v17, (uint64_t)v18, v16, &v15, v6, v7, 1.0, *((double *)a2 + 58), *((double *)a2 + 59), *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v17);
}

void gdc::LayerDataManager::~LayerDataManager(gdc::LayerDataManager *this)
{
  gdc::LayerDataManager::~LayerDataManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  gdc::LayerDataManager *v5;
  uint64_t v6;
  gdc::LayerDataRequestTracker *v7;
  gdc::ResourceManager *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_1E42B0958;
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    operator delete(v4);
  v5 = (gdc::LayerDataManager *)*((_QWORD *)this + 12);
  if (v5 == (gdc::LayerDataManager *)((char *)this + 72))
  {
    v6 = 4;
    v5 = (gdc::LayerDataManager *)((char *)this + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  v7 = (gdc::LayerDataRequestTracker *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    gdc::LayerDataRequestTracker::~LayerDataRequestTracker(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (gdc::ResourceManager *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    gdc::ResourceManager::~ResourceManager(v8);
    MEMORY[0x1A1AF4E00]();
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
}

void gdc::LayerDataRequestTracker::~LayerDataRequestTracker(gdc::LayerDataRequestTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  gdc::LayerDataRequestTracker *v9;
  uint64_t v10;
  gdc::LayerDataRequestTracker *v11;
  _QWORD *v12;
  void *v13;
  void *v14;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(_BYTE *)(v3 - 16))
          *(_BYTE *)(v3 - 16) = 0;
        v5 = *(void **)(v3 - 96);
        if (v5 != *(void **)(v3 - 80))
          free(v5);
        v3 -= 112;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if (v6)
  {
    do
    {
      v12 = (_QWORD *)*v6;
      v13 = (void *)v6[16];
      if (v13)
      {
        v6[17] = v13;
        operator delete(v13);
      }
      if (*((_BYTE *)v6 + 112))
        *((_BYTE *)v6 + 112) = 0;
      v14 = (void *)v6[4];
      if (v14 != (void *)v6[6])
        free(v14);
      operator delete(v6);
      v6 = v12;
    }
    while (v12);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    operator delete(v7);
  if (*((_QWORD *)this + 2))
  {
    v8 = *(_QWORD *)this;
    v9 = (gdc::LayerDataRequestTracker *)*((_QWORD *)this + 1);
    v10 = *(_QWORD *)v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v8 + 8) = v10;
    *((_QWORD *)this + 2) = 0;
    if (v9 != this)
    {
      do
      {
        v11 = (gdc::LayerDataRequestTracker *)*((_QWORD *)v9 + 1);
        gdc::LayerDataRequestTracker::RequestStatus::~RequestStatus((gdc::LayerDataRequestTracker *)((char *)v9 + 16));
        operator delete(v9);
        v9 = v11;
      }
      while (v11 != this);
    }
  }
}

void gdc::LayerDataRequestTracker::RequestStatus::~RequestStatus(gdc::LayerDataRequestTracker::RequestStatus *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;
  void *v8;
  _BYTE *v9;
  void *v10;
  _BYTE *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;

  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (_BYTE *)*((_QWORD *)this + 7);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    operator delete(v6);
  v7 = (_BYTE *)*((_QWORD *)this + 2);
  if (v7)
  {
    while (1)
    {
      v11 = *(_BYTE **)v7;
      v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 17);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
          break;
      }
      if (v7[112])
        goto LABEL_24;
LABEL_25:
      v15 = (void *)*((_QWORD *)v7 + 4);
      if (v15 != *((void **)v7 + 6))
        free(v15);
      operator delete(v7);
      v7 = v11;
      if (!v11)
        goto LABEL_10;
    }
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v7[112])
      goto LABEL_25;
LABEL_24:
    v7[112] = 0;
    goto LABEL_25;
  }
LABEL_10:
  v8 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v8)
    operator delete(v8);
}

void std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5B60;
  result[1] = v3;
  return result;
}

void gdc::LayerDataManager::preloadLayerDataKeys(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  unsigned __int16 *v8;
  unsigned __int8 v9[8];
  unsigned __int16 v10;
  void *v11;
  void *v12;
  char v13;
  int v14;
  uint64_t v15;
  void *__p;
  void *v17;
  char *v18;

  if (a1)
  {
    v3 = a1;
    do
    {
      v9[0] = *((_BYTE *)v3 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v10, (uint64_t)(v3 + 3));
      v13 = 0;
      if (*((_BYTE *)v3 + 112))
      {
        v14 = *((_DWORD *)v3 + 29);
        v13 = 1;
      }
      v15 = v3[15];
      v17 = 0;
      v18 = 0;
      __p = 0;
      v5 = (_BYTE *)v3[16];
      v4 = (_BYTE *)v3[17];
      v6 = v4 - v5;
      if (v4 != v5)
      {
        if (v6 < 0)
          abort();
        __p = operator new(v4 - v5);
        v17 = __p;
        v7 = (char *)__p + 8 * (v6 >> 3);
        v18 = v7;
        memcpy(__p, v5, v6);
        v17 = v7;
      }
      v8 = geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](a2, v10);
      std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v8, v9, (uint64_t)v9);
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      if (v13)
        v13 = 0;
      if (v11 != v12)
        free(v11);
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void gdc::LayerDataManager::createDataRequests(uint64_t a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  gdc::LayerDataSource *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  _QWORD *v20;
  void *v21;

  v8 = *(_QWORD **)(a1 + 56);
  if (v8[29])
  {
    v9 = (_QWORD *)v8[28];
    if (v9)
    {
      do
      {
        v20 = (_QWORD *)*v9;
        v21 = (void *)v9[3];
        if (v21 != (void *)v9[5])
          free(v21);
        operator delete(v9);
        v9 = v20;
      }
      while (v20);
    }
    v8[28] = 0;
    v10 = v8[27];
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(v8[26] + 8 * i) = 0;
    }
    v8[29] = 0;
  }
  v12 = *(unsigned __int16 **)(a1 + 8);
  v13 = *(unsigned __int16 **)(a1 + 16);
  while (v12 != v13)
  {
    v14 = *v12;
    v15 = (gdc::LayerDataSource *)*((_QWORD *)v12 + 1);
    v16 = *a2;
    v17 = a2[1];
    if (*a2 != v17)
    {
      while (v14 != *v16)
      {
        v16 += 24;
        if (v16 == v17)
          goto LABEL_16;
      }
    }
    if (v16 != v17)
      gdc::LayerDataSource::createLayerDataRequests(*((gdc::LayerDataSource **)v12 + 1), (uint64_t)(v16 + 4), a4, *(_QWORD **)(a1 + 56));
LABEL_16:
    v18 = *a3;
    v19 = a3[1];
    if (*a3 != v19)
    {
      while (v14 != *v18)
      {
        v18 += 24;
        if (v18 == v19)
          goto LABEL_8;
      }
    }
    if (v18 != v19)
      gdc::LayerDataSource::createLayerDataRequests(v15, (uint64_t)(v18 + 4), a4, *(_QWORD **)(a1 + 56));
LABEL_8:
    v12 += 12;
  }
  gdc::ResourceManager::finishBatch(*(gdc::ResourceManager **)(a1 + 56));
}

void gdc::LayerDataManager::createDataRequests(uint64_t a1, uint64_t *a2, unsigned __int16 **a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t *k;
  int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 **v20;
  uint64_t v21;
  unsigned __int16 *v22;
  _QWORD *v23;
  void *v24;
  gdc::LayerDataSource **v25;
  unsigned __int16 *m;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 **v29;
  uint64_t v30;

  v8 = *(_QWORD **)(a1 + 56);
  if (v8[29])
  {
    v9 = (_QWORD *)v8[28];
    if (v9)
    {
      do
      {
        v23 = (_QWORD *)*v9;
        v24 = (void *)v9[3];
        if (v24 != (void *)v9[5])
          free(v24);
        operator delete(v9);
        v9 = v23;
      }
      while (v23);
    }
    v8[28] = 0;
    v10 = v8[27];
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(v8[26] + 8 * i) = 0;
    }
    v8[29] = 0;
  }
  v13 = *a2;
  v12 = a2[1];
  v29 = a3;
  v30 = v12;
  while (v13 != v12)
  {
    for (j = *(_QWORD *)(v13 + 16); j != v13 + 8; j = *(_QWORD *)(j + 8))
    {
      for (k = *(uint64_t **)(*(_QWORD *)(j + 16) + 32); k; k = (uint64_t *)*k)
      {
        v16 = *((unsigned __int16 *)k + 8);
        v17 = *(unsigned __int16 **)(a1 + 8);
        v18 = *(unsigned __int16 **)(a1 + 16);
        if (v17 != v18)
        {
          while (v16 != *v17)
          {
            v17 += 12;
            if (v17 == v18)
              goto LABEL_15;
          }
        }
        if (v17 != v18)
        {
          v19 = *((_QWORD *)v17 + 1);
          v20 = (unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)(j + 16) + 8) + 24);
          v21 = *(_QWORD *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v20, *((_WORD *)k + 8));
          v22 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v20, v16);
          gdc::LayerDataSource::createLayerDataRequests(v19, v21, *((_QWORD *)v22 + 1), a4, *(_QWORD **)(a1 + 56));
        }
LABEL_15:
        ;
      }
    }
    v13 += 32;
    v12 = v30;
  }
  v25 = *(gdc::LayerDataSource ***)(a1 + 8);
  for (m = *(unsigned __int16 **)(a1 + 16); v25 != (gdc::LayerDataSource **)m; v25 += 3)
  {
    v27 = *v29;
    v28 = v29[1];
    if (*v29 != v28)
    {
      while (*(unsigned __int16 *)v25 != *v27)
      {
        v27 += 24;
        if (v27 == v28)
          goto LABEL_27;
      }
    }
    if (v27 != v28)
      gdc::LayerDataSource::createLayerDataRequests(v25[1], (uint64_t)(v27 + 4), a4, *(_QWORD **)(a1 + 56));
LABEL_27:
    ;
  }
  gdc::ResourceManager::finishBatch(*(gdc::ResourceManager **)(a1 + 56));
}

uint64_t gdc::LayerDataManager::requestLayerDataKeys(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  _OWORD *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  float *v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD *v45;
  void **v46;
  unint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 64);
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v49 = v48;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v48);
      v6 = v49;
    }
    else
    {
      v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      v49 = v6;
    }
  }
  else
  {
    v6 = 0;
    v49 = 0;
  }
  v7 = (char *)operator new(0x88uLL);
  v8 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (v6)
  {
    if (v6 == v48)
    {
      v51 = v50;
      (*(void (**)(_QWORD *, _QWORD *))(v48[0] + 24))(v48, v50);
    }
    else
    {
      v51 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v51 = 0;
  }
  *v8 = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_DWORD *)v7 + 12) = 1065353216;
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v7 + 56), a2);
  v7[96] = 0;
  if (v51)
  {
    if (v51 == v50)
    {
      *((_QWORD *)v7 + 16) = v7 + 104;
      (*(void (**)(_QWORD *))(v50[0] + 24))(v50);
      v9 = *(unsigned __int8 **)(a2 + 16);
      if (!v9)
        goto LABEL_18;
    }
    else
    {
      *((_QWORD *)v7 + 16) = (*(uint64_t (**)(void))(*v51 + 16))();
      v9 = *(unsigned __int8 **)(a2 + 16);
      if (!v9)
        goto LABEL_18;
    }
  }
  else
  {
    *((_QWORD *)v7 + 16) = 0;
    v9 = *(unsigned __int8 **)(a2 + 16);
    if (!v9)
      goto LABEL_18;
  }
  do
  {
    v12 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>((uint64_t)v8, v9 + 16, (uint64_t)(v9 + 16));
    v13 = (std::__shared_weak_count *)v12[17];
    v12[16] = 0;
    v12[17] = 0;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v9 = *(unsigned __int8 **)v9;
  }
  while (v9);
LABEL_18:
  v10 = v51;
  if (v51 == v50)
  {
    v11 = 4;
    v10 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_29;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_29:
  *((_QWORD *)v7 + 1) = v4;
  v16 = *v4;
  *(_QWORD *)v7 = *v4;
  *(_QWORD *)(v16 + 8) = v7;
  *v4 = v7;
  ++v4[2];
  v46 = (void **)(v4 + 8);
  std::vector<gdc::LayerDataRequestKey>::reserve((uint64_t)(v4 + 8), *(_QWORD *)(a2 + 24) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[9] - v4[8]) >> 4));
  v17 = *(unsigned __int8 **)(a2 + 16);
  if (v17)
  {
    v18 = (float *)(v4 + 3);
    v45 = v4;
    do
    {
      v20 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(v18, v17 + 16, (uint64_t)(v17 + 16));
      v21 = v20;
      v23 = (char *)v20[17];
      v22 = v20[18];
      if ((unint64_t)v23 >= v22)
      {
        v25 = v7;
        v26 = (char *)v20[16];
        v27 = (v23 - v26) >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
          abort();
        v29 = v22 - (_QWORD)v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        v47 = v28;
        if (v28)
        {
          if (v28 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v30 = (char *)operator new(8 * v28);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v27];
        *(_QWORD *)v31 = v25;
        v24 = v31 + 8;
        if (v23 != v26)
        {
          v32 = v23 - 8 - v26;
          if (v32 < 0x58)
            goto LABEL_73;
          if ((unint64_t)(v26 - v30) < 0x20)
            goto LABEL_73;
          v33 = (v32 >> 3) + 1;
          v34 = &v30[8 * v27 - 16];
          v35 = (__int128 *)(v23 - 16);
          v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v37 = *v35;
            *((_OWORD *)v34 - 1) = *(v35 - 1);
            *(_OWORD *)v34 = v37;
            v34 -= 32;
            v35 -= 2;
            v36 -= 4;
          }
          while (v36);
          v31 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          v23 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_73:
            do
            {
              v38 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v31 - 1) = v38;
              v31 -= 8;
            }
            while (v23 != v26);
          }
          v23 = (char *)v21[16];
        }
        v21[16] = v31;
        v21[17] = v24;
        v21[18] = &v30[8 * v47];
        v7 = v25;
        if (v23)
          operator delete(v23);
        v4 = v45;
      }
      else
      {
        *(_QWORD *)v23 = v7;
        v24 = v23 + 8;
      }
      v21[17] = v24;
      v39 = v4[9];
      if (v39 >= v4[10])
      {
        v19 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(v46, (uint64_t)(v17 + 16));
      }
      else
      {
        *(_BYTE *)v39 = v17[16];
        gdc::LayerDataKey::LayerDataKey(v39 + 8, (uint64_t)(v17 + 24));
        *(_BYTE *)(v39 + 96) = 0;
        if (v17[112])
        {
          *(_DWORD *)(v39 + 100) = *((_DWORD *)v17 + 29);
          *(_BYTE *)(v39 + 96) = 1;
        }
        *(_QWORD *)(v39 + 104) = *((_QWORD *)v17 + 15);
        v19 = (_BYTE *)(v39 + 112);
      }
      v4[9] = v19;
      v17 = *(unsigned __int8 **)v17;
    }
    while (v17);
  }
  v40 = v49;
  if (v49 == v48)
  {
    v42 = 4;
    v40 = v48;
    v41 = a1;
  }
  else
  {
    v41 = a1;
    if (!v49)
      goto LABEL_66;
    v42 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v42))();
LABEL_66:
  result = *(_QWORD *)(v41 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void gdc::LayerDataSource::createDebugNode(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *ChildNode;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 *v16;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  void **v33;
  void **v34;
  void *v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  void **v40;
  void *v41;
  void **v42;
  void *v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 *i;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void **v51;
  void *v52;
  void **v53;
  void **v54;
  void *v55;
  void **v56;
  void *v57;
  char *v58;
  uint64_t v59;
  unsigned __int8 *j;
  void **v61;
  void **v62;
  void *v63;
  void **v64;
  void **v65;
  void *v66;
  void **v67;
  void **v68;
  void *v69;
  void **v70;
  unint64_t v71;
  uint64_t v72;
  void **v73;
  _QWORD *v74;
  char *v75;
  void *v76;
  void **v77;
  void *v78;
  void **v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  void **v90;
  char *v91;
  char *v92;
  _OWORD v94[2];
  _QWORD v95[7];
  _QWORD *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  char *v100;
  _QWORD *v101;
  __int128 v102;
  char *v103;
  __int128 v104;
  char v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111[8];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  void *__p[3];
  void *v118;
  char v119;
  void **v120[3];
  void *v121;
  void **v122;
  char v123[8];
  uint64_t v124;
  _DWORD v125[8];
  uint64_t v126[4];
  uint64_t v127;
  uint64_t v128[4];
  uint64_t v129;
  uint64_t v130[4];
  uint64_t v131;
  char v132[8];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _QWORD v138[5];

  v138[2] = *MEMORY[0x1E0C80C00];
  strcpy((char *)a2, "Layer Data Source");
  *(_WORD *)(a2 + 23) = 17;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "Requests");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)__p);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  v4 = a1[8];
  v135 = 0;
  v136 = 0;
  v137 = 1;
  v134 = 0;
  v133 = v4;
  v100 = ChildNode;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)__p, (uint64_t)v132);
  v101 = a1;
  v5 = (_QWORD *)a1[7];
  if (v5)
  {
    v98 = &v129;
    v99 = &v131;
    v96 = v125;
    v97 = &v127;
    qmemcpy(v95, "TrackingequestedLast ReqHas All ResourcePending Creation", sizeof(v95));
    qmemcpy(v94, "OptionalResourceRequiredResource", sizeof(v94));
    while (1)
    {
      (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *))(*v101 + 128))(__p, v101, v5 + 2);
      v6 = gdc::DebugTreeNode::createChildNode((uint64_t)v100, (__int128 *)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      HIBYTE(__p[2]) = 16;
      *(_OWORD *)__p = *(_OWORD *)&v95[5];
      LOBYTE(__p[2]) = 0;
      v7 = *(unsigned __int8 *)(v5[16] + 209);
      v99[1] = 0;
      v99[2] = 0;
      *v99 = 0;
      *((_DWORD *)v99 + 6) = 0;
      v130[0] = v7;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v130);
      v8 = *(unsigned __int8 *)(v5[16] + 208);
      HIBYTE(__p[2]) = 17;
      *(_OWORD *)__p = *(_OWORD *)&v95[3];
      strcpy((char *)&__p[2], "s");
      v98[1] = 0;
      v98[2] = 0;
      *v98 = 0;
      *((_DWORD *)v98 + 6) = 0;
      v128[0] = v8;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v128);
      v9 = *(_QWORD *)(v5[16] + 200);
      HIBYTE(__p[2]) = 14;
      __p[0] = (void *)v95[2];
      *(void **)((char *)__p + 6) = (void *)v95[1];
      BYTE6(__p[1]) = 0;
      v97[1] = 0;
      v97[2] = 0;
      *v97 = 0;
      *((_DWORD *)v97 + 6) = 0;
      v126[0] = v9;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v126);
      v10 = *(_QWORD *)(v5[16] + 112);
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p + 7, "g Id");
      __p[0] = (void *)v95[0];
      v96[1] = 0;
      v96[2] = 0;
      *v96 = 0;
      v125[6] = 1;
      v124 = v10;
      gdc::DebugTreeNode::addProperty((uint64_t)v6, (uint64_t)__p, (uint64_t)v123);
      HIBYTE(__p[2]) = 17;
      *(_OWORD *)__p = v94[1];
      strcpy((char *)&__p[2], "s");
      *(_QWORD *)&v102 = v6;
      v11 = gdc::DebugTreeNode::createChildNode((uint64_t)v6, (__int128 *)__p);
      v12 = v5[16];
      v14 = *(_QWORD *)(v12 + 120);
      v13 = *(_QWORD *)(v12 + 128);
      if (v14 != v13)
        break;
LABEL_41:
      HIBYTE(__p[2]) = 17;
      strcpy((char *)&__p[2], "s");
      *(_OWORD *)__p = v94[0];
      v27 = gdc::DebugTreeNode::createChildNode(v102, (__int128 *)__p);
      v28 = v5[16];
      v29 = *(_QWORD *)(v28 + 144);
      v30 = *(_QWORD *)(v28 + 152);
      if (v29 != v30)
      {
        v31 = v27;
        while (1)
        {
          v32 = *(unsigned __int8 **)(v29 + 24);
          if (v32)
            break;
LABEL_43:
          v29 += 48;
          if (v29 == v30)
            goto LABEL_3;
        }
        while (2)
        {
          gdc::ResourceKey::createDebugNode((uint64_t)__p, v32 + 16);
          gdc::DebugTreeNode::addChildNode(v31, (__int128 *)__p);
          v33 = (void **)v121;
          if (v121)
          {
            v34 = v122;
            v35 = v121;
            if (v122 != v121)
            {
              do
              {
                v36 = (void **)*(v34 - 3);
                if (v36)
                {
                  v37 = (void **)*(v34 - 2);
                  v38 = *(v34 - 3);
                  if (v37 != v36)
                  {
                    do
                    {
                      if (*((char *)v37 - 1) < 0)
                        operator delete(*(v37 - 3));
                      v37 -= 3;
                    }
                    while (v37 != v36);
                    v38 = *(v34 - 3);
                  }
                  *(v34 - 2) = v36;
                  operator delete(v38);
                }
                v39 = (void **)*(v34 - 6);
                if (v39)
                {
                  v40 = (void **)*(v34 - 5);
                  v41 = *(v34 - 6);
                  if (v40 != v39)
                  {
                    do
                    {
                      if (*((char *)v40 - 9) < 0)
                        operator delete(*(v40 - 4));
                      v40 -= 8;
                    }
                    while (v40 != v39);
                    v41 = *(v34 - 6);
                  }
                  *(v34 - 5) = v39;
                  operator delete(v41);
                }
                v42 = v34 - 10;
                if (*((char *)v34 - 57) < 0)
                  operator delete(*v42);
                v34 -= 10;
              }
              while (v42 != v33);
              v35 = v121;
            }
            v122 = v33;
            operator delete(v35);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
          if (v119 < 0)
          {
            operator delete(v118);
            if (SHIBYTE(__p[2]) < 0)
              goto LABEL_75;
          }
          else if (SHIBYTE(__p[2]) < 0)
          {
LABEL_75:
            operator delete(__p[0]);
          }
          v32 = *(unsigned __int8 **)v32;
          if (!v32)
            goto LABEL_43;
          continue;
        }
      }
LABEL_3:
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_76;
    }
    v15 = v11;
    while (1)
    {
      v16 = *(unsigned __int8 **)(v14 + 24);
      if (v16)
        break;
LABEL_8:
      v14 += 48;
      if (v14 == v13)
        goto LABEL_41;
    }
    while (1)
    {
      gdc::ResourceKey::createDebugNode((uint64_t)__p, v16 + 16);
      gdc::DebugTreeNode::addChildNode(v15, (__int128 *)__p);
      v17 = (void **)v121;
      if (v121)
      {
        v18 = v122;
        v19 = v121;
        if (v122 != v121)
        {
          do
          {
            v20 = (void **)*(v18 - 3);
            if (v20)
            {
              v21 = (void **)*(v18 - 2);
              v22 = *(v18 - 3);
              if (v21 != v20)
              {
                do
                {
                  if (*((char *)v21 - 1) < 0)
                    operator delete(*(v21 - 3));
                  v21 -= 3;
                }
                while (v21 != v20);
                v22 = *(v18 - 3);
              }
              *(v18 - 2) = v20;
              operator delete(v22);
            }
            v23 = (void **)*(v18 - 6);
            if (v23)
            {
              v24 = (void **)*(v18 - 5);
              v25 = *(v18 - 6);
              if (v24 != v23)
              {
                do
                {
                  if (*((char *)v24 - 9) < 0)
                    operator delete(*(v24 - 4));
                  v24 -= 8;
                }
                while (v24 != v23);
                v25 = *(v18 - 6);
              }
              *(v18 - 5) = v23;
              operator delete(v25);
            }
            v26 = v18 - 10;
            if (*((char *)v18 - 57) < 0)
              operator delete(*v26);
            v18 -= 10;
          }
          while (v26 != v17);
          v19 = v121;
        }
        v122 = v17;
        operator delete(v19);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
      if (v119 < 0)
      {
        operator delete(v118);
        if (SHIBYTE(__p[2]) < 0)
LABEL_40:
          operator delete(__p[0]);
      }
      else if (SHIBYTE(__p[2]) < 0)
      {
        goto LABEL_40;
      }
      v16 = *(unsigned __int8 **)v16;
      if (!v16)
        goto LABEL_8;
    }
  }
LABEL_76:
  v43 = operator new(0x20uLL);
  __p[0] = v43;
  v102 = xmmword_19FFB3890;
  *(_OWORD *)&__p[1] = xmmword_19FFB3890;
  strcpy((char *)v43, "Requests with Failed Resources");
  v44 = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)__p);
  operator delete(v43);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  v45 = v101[13];
  v114 = 0;
  v115 = 0;
  v116 = 1;
  v113 = 0;
  v112 = v45;
  gdc::DebugTreeNode::addProperty((uint64_t)v44, (uint64_t)__p, (uint64_t)v111);
  for (i = (unsigned __int8 *)v101[12]; i; i = *(unsigned __int8 **)i)
  {
    gdc::LayerDataRequestKey::createDebugNode((uint64_t)__p, i + 16);
    gdc::DebugTreeNode::addChildNode(v44, (__int128 *)__p);
    v47 = (void **)v121;
    if (v121)
    {
      v48 = v122;
      v49 = v121;
      if (v122 != v121)
      {
        do
        {
          v50 = (void **)*(v48 - 3);
          if (v50)
          {
            v51 = (void **)*(v48 - 2);
            v52 = *(v48 - 3);
            if (v51 != v50)
            {
              do
              {
                if (*((char *)v51 - 1) < 0)
                  operator delete(*(v51 - 3));
                v51 -= 3;
              }
              while (v51 != v50);
              v52 = *(v48 - 3);
            }
            *(v48 - 2) = v50;
            operator delete(v52);
          }
          v53 = (void **)*(v48 - 6);
          if (v53)
          {
            v54 = (void **)*(v48 - 5);
            v55 = *(v48 - 6);
            if (v54 != v53)
            {
              do
              {
                if (*((char *)v54 - 9) < 0)
                  operator delete(*(v54 - 4));
                v54 -= 8;
              }
              while (v54 != v53);
              v55 = *(v48 - 6);
            }
            *(v48 - 5) = v53;
            operator delete(v55);
          }
          v56 = v48 - 10;
          if (*((char *)v48 - 57) < 0)
            operator delete(*v56);
          v48 -= 10;
        }
        while (v56 != v47);
        v49 = v121;
      }
      v122 = v47;
      operator delete(v49);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
    if (v119 < 0)
    {
      operator delete(v118);
      if (SHIBYTE(__p[2]) < 0)
LABEL_107:
        operator delete(__p[0]);
    }
    else if (SHIBYTE(__p[2]) < 0)
    {
      goto LABEL_107;
    }
  }
  v57 = operator new(0x20uLL);
  __p[0] = v57;
  *(_OWORD *)&__p[1] = v102;
  strcpy((char *)v57, "Requests that Failed to Decode");
  v58 = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)__p);
  operator delete(v57);
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "Count");
  v59 = v101[18];
  v108 = 0;
  v109 = 0;
  v110 = 1;
  v107 = 0;
  v106 = v59;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)__p, (uint64_t)v105);
  for (j = (unsigned __int8 *)v101[17]; j; j = *(unsigned __int8 **)j)
  {
    gdc::LayerDataRequestKey::createDebugNode((uint64_t)__p, j + 16);
    gdc::DebugTreeNode::addChildNode(v58, (__int128 *)__p);
    v61 = (void **)v121;
    if (v121)
    {
      v62 = v122;
      v63 = v121;
      if (v122 != v121)
      {
        do
        {
          v64 = (void **)*(v62 - 3);
          if (v64)
          {
            v65 = (void **)*(v62 - 2);
            v66 = *(v62 - 3);
            if (v65 != v64)
            {
              do
              {
                if (*((char *)v65 - 1) < 0)
                  operator delete(*(v65 - 3));
                v65 -= 3;
              }
              while (v65 != v64);
              v66 = *(v62 - 3);
            }
            *(v62 - 2) = v64;
            operator delete(v66);
          }
          v67 = (void **)*(v62 - 6);
          if (v67)
          {
            v68 = (void **)*(v62 - 5);
            v69 = *(v62 - 6);
            if (v68 != v67)
            {
              do
              {
                if (*((char *)v68 - 9) < 0)
                  operator delete(*(v68 - 4));
                v68 -= 8;
              }
              while (v68 != v67);
              v69 = *(v62 - 6);
            }
            *(v62 - 5) = v67;
            operator delete(v69);
          }
          v70 = v62 - 10;
          if (*((char *)v62 - 57) < 0)
            operator delete(*v70);
          v62 -= 10;
        }
        while (v70 != v61);
        v63 = v121;
      }
      v122 = v61;
      operator delete(v63);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v120);
    if (v119 < 0)
    {
      operator delete(v118);
      if (SHIBYTE(__p[2]) < 0)
LABEL_139:
        operator delete(__p[0]);
    }
    else if (SHIBYTE(__p[2]) < 0)
    {
      goto LABEL_139;
    }
  }
  memset(__p, 0, sizeof(__p));
  v71 = v101[23];
  if (v71)
  {
    if (v71 >> 58)
LABEL_174:
      abort();
    v72 = v71 << 6;
    v73 = (void **)operator new(v71 << 6);
    __p[0] = v73;
    __p[1] = v73;
    __p[2] = (char *)v73 + v72;
  }
  else
  {
    v73 = 0;
  }
  v74 = (_QWORD *)v101[22];
  if (v74)
  {
    while (1)
    {
      v78 = (void *)v74[2];
      v138[0] = 0;
      *(_QWORD *)((char *)v138 + 7) = 0;
      if (v73 < __p[2])
      {
        v75 = v103;
        v73[1] = v78;
        v73[2] = v75;
        *((_BYTE *)v73 + 24) = v104;
        v76 = (void *)v138[0];
        v73[4] = 0;
        v73[5] = v76;
        *(void **)((char *)v73 + 47) = *(void **)((char *)v138 + 7);
        *((_BYTE *)v73 + 55) = 0;
        v138[0] = 0;
        *(_QWORD *)((char *)v138 + 7) = 0;
        v77 = v73 + 8;
        *((_DWORD *)v73 + 14) = 1;
      }
      else
      {
        v79 = (void **)__p[0];
        v80 = ((char *)v73 - (char *)__p[0]) >> 6;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 58)
          goto LABEL_174;
        v82 = (char *)__p[2] - (char *)__p[0];
        if (((char *)__p[2] - (char *)__p[0]) >> 5 > v81)
          v81 = v82 >> 5;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFC0)
          v83 = 0x3FFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83 >> 58)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v84 = v83 << 6;
        v85 = (char *)operator new(v83 << 6);
        v86 = &v85[64 * v80];
        *((_QWORD *)v86 + 1) = v78;
        *((_QWORD *)v86 + 5) = 0;
        *((_QWORD *)v86 + 6) = 0;
        v87 = &v85[v84];
        *((_QWORD *)v86 + 4) = 0;
        v138[0] = 0;
        *(_QWORD *)((char *)v138 + 7) = 0;
        *((_DWORD *)v86 + 14) = 1;
        v77 = (void **)(v86 + 64);
        if (v73 == v79)
        {
          __p[0] = &v85[64 * v80];
          __p[1] = v86 + 64;
          __p[2] = &v85[v84];
        }
        else
        {
          do
          {
            v88 = *((_OWORD *)v73 - 4);
            *(_OWORD *)(v86 - 55) = *(_OWORD *)((char *)v73 - 55);
            *((_OWORD *)v86 - 4) = v88;
            v89 = *((_OWORD *)v73 - 2);
            *((_QWORD *)v86 - 2) = *(v73 - 2);
            *((_OWORD *)v86 - 2) = v89;
            *(v73 - 3) = 0;
            *(v73 - 2) = 0;
            *(v73 - 4) = 0;
            *((_DWORD *)v86 - 2) = *((_DWORD *)v73 - 2);
            v86 -= 64;
            v73 -= 8;
          }
          while (v73 != v79);
          v73 = (void **)__p[0];
          v90 = (void **)__p[1];
          __p[0] = v86;
          __p[1] = v77;
          __p[2] = v87;
          while (v90 != v73)
          {
            if (*((char *)v90 - 9) < 0)
              operator delete(*(v90 - 4));
            v90 -= 8;
          }
        }
        if (v73)
          operator delete(v73);
      }
      __p[1] = v77;
      v74 = (_QWORD *)*v74;
      v73 = v77;
      if (!v74)
        goto LABEL_167;
    }
  }
  v77 = v73;
LABEL_167:
  v91 = (char *)operator new(0x20uLL);
  v103 = v91;
  v104 = xmmword_19FFB3620;
  strcpy(v91, "Pending Cancelled Requests");
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)&v103, (uint64_t *)__p);
  operator delete(v91);
  v92 = (char *)__p[0];
  if (__p[0])
  {
    while (v77 != (void **)v92)
    {
      if (*((char *)v77 - 9) < 0)
        operator delete(*(v77 - 4));
      v77 -= 8;
    }
    operator delete(v92);
  }
}

uint64_t gdc::LayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *p_p;
  std::string::size_type size;
  char v15;
  size_t v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  std::string __p;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  unint64_t v29;
  void *v30[2];
  __int128 v31;
  int v32;
  uint64_t v33[19];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33[0] = MEMORY[0x1E0DE4FE0] + 64;
  v25 = v8;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v10, &v26);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v25 = v5 + 24;
  v33[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v26 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  v32 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"LayerDataRequestKey<Type:", 25);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)", Data: ", 8);
  gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v32;
    if ((v32 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v17 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) < v29)
    {
      *((_QWORD *)&v31 + 1) = v29;
      v17 = v29;
    }
    v18 = (const void **)&v28;
    goto LABEL_16;
  }
  v15 = v32;
  if ((v32 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v15 & 8) == 0)
  {
    v16 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  v18 = (const void **)v27;
  v17 = v27[2];
LABEL_16:
  v19 = *v18;
  v16 = v17 - (_QWORD)*v18;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v16;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_23;
  }
  a2[23] = v16;
  if (v16)
LABEL_23:
    memmove(a2, v19, v16);
LABEL_24:
  a2[v16] = 0;
  v25 = *v7;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v7[3];
  v26 = v11 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v33);
}

void std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 48)
  {
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v7 = (_QWORD *)*v5;
        v8 = (std::__shared_weak_count *)v5[15];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v11 = (void *)v5[3];
        if (v11 != (void *)v5[5])
          free(v11);
        operator delete(v5);
        v5 = v7;
      }
      while (v7);
    }
    v6 = *(void **)(i - 40);
    *(_QWORD *)(i - 40) = 0;
    if (v6)
      operator delete(v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  int8x8_t **v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t ***v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  size_t v27;
  const void *v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  size_t v32;
  const void *v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void *v53;
  _WORD *v54;
  void **v55;
  unsigned __int8 *v56;
  unint64_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  int v61;
  uint64_t v62;
  const void *v63;
  size_t v64;
  const void *v65;
  int v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  size_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  char v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  __int128 *v93;
  _OWORD *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  char v102;
  float v103;
  float v104;
  _BOOL8 v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  size_t prime;
  int8x8_t v110;
  unint64_t v111;
  uint8x8_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned __int16 *v126;
  size_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  void **v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int16 v136;
  __int128 __p;
  __int128 v138;
  int v139;

  if (a2 != a3)
  {
    v3 = a1;
    v4 = *(_QWORD *)(a1 + 16);
    v133 = (void **)(v4 + 168);
    v130 = v4;
    while (1)
    {
      v126 = a2;
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      if (v5)
        break;
LABEL_3:
      a2 = v126 + 24;
      if (v126 + 24 == a3)
        return;
    }
    v6 = *a2;
LABEL_7:
    v7 = *(_QWORD *)(v3 + 8);
    v8 = *(int8x8_t ***)(v7 + 56);
    v9 = *(unsigned __int16 **)(v7 + 64);
    if (v8 != (int8x8_t **)v9)
    {
      while (*((unsigned __int16 *)v5 + 9) != *(unsigned __int16 *)v8)
      {
        v8 += 3;
        if (v8 == (int8x8_t **)v9)
          goto LABEL_18;
      }
    }
    if (v8 == (int8x8_t **)v9)
    {
LABEL_18:
      v134 = 0;
      v135 = 0;
      goto LABEL_226;
    }
    gdc::ResourceStore::resource((gdc::ResourceStore *)&v134, v8[1], v5 + 16);
    v10 = v134;
    if (!v134)
      goto LABEL_226;
    v11 = *(unsigned __int16 **)(v4 + 168);
    v12 = *(unsigned __int16 **)(v4 + 176);
    v13 = v11;
    if (v11 != v12)
    {
      v13 = *(unsigned __int16 **)(v4 + 168);
      while (v6 != *v13)
      {
        v13 += 24;
        if (v13 == v12)
          goto LABEL_23;
      }
    }
    if (v13 == v12)
    {
LABEL_23:
      v136 = v6;
      __p = 0u;
      v138 = 0u;
      v139 = 1065353216;
      if (v11 != v12)
      {
        while (v6 != *v11)
        {
          v11 += 24;
          if (v11 == v12)
            goto LABEL_28;
        }
      }
      if (v11 == v12)
      {
LABEL_28:
        if ((unint64_t)v12 >= *(_QWORD *)(v4 + 184))
        {
          v12 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v133, &v136);
        }
        else
        {
          *v12 = v6;
          *(_OWORD *)(v12 + 4) = 0u;
          *(_OWORD *)(v12 + 12) = 0u;
          *((_DWORD *)v12 + 10) = 1065353216;
          v12 += 24;
        }
        *(_QWORD *)(v4 + 176) = v12;
        v11 = v12 - 24;
      }
      v13 = v11;
      v14 = *(int8x8_t *)(v11 + 8);
      if (v14)
        goto LABEL_21;
    }
    else
    {
      v14 = *(int8x8_t *)(v13 + 8);
      if (v14)
      {
LABEL_21:
        v15 = v5[16];
        v16 = *((unsigned __int16 *)v5 + 9);
        v17 = (v16
             - 0x61C8864680B583EBLL
             + ((v15 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)) ^ (v15 - 0x61C8864680B583EBLL);
        v18 = (uint64_t *)*((_QWORD *)v5 + 11);
        v19 = ((unint64_t)&v18[8 * v17 - 0xC3910C8D016B07DLL] + (v17 >> 2) - 3) ^ v17;
        v20 = (uint8x8_t)vcnt_s8(v14);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v21 = ((unint64_t)&v18[8 * v17 - 0xC3910C8D016B07DLL] + (v17 >> 2) - 3) ^ v17;
          if (v19 >= *(_QWORD *)&v14)
            v21 = v19 % *(_QWORD *)&v14;
        }
        else
        {
          v21 = v19 & (*(_QWORD *)&v14 - 1);
        }
        v22 = *(uint64_t ****)(*((_QWORD *)v13 + 1) + 8 * v21);
        if (v22)
        {
          v23 = *v22;
          if (*v22)
          {
            if (v20.u32[0] < 2uLL)
            {
              v24 = *(_QWORD *)&v14 - 1;
              while (1)
              {
                v30 = v23[1];
                if (v30 == (uint64_t *)v19)
                {
                  if (*((unsigned __int8 *)v23 + 16) == (_DWORD)v15
                    && *((unsigned __int16 *)v23 + 9) == (_DWORD)v16
                    && v23[11] == v18)
                  {
                    v31 = v23[3];
                    v32 = (char *)v23[4] - (char *)v31;
                    v33 = (const void *)*((_QWORD *)v5 + 3);
                    if (v32 == *((_QWORD *)v5 + 4) - (_QWORD)v33)
                    {
                      v132 = v18;
                      v34 = memcmp(v31, v33, v32);
                      v18 = v132;
                      if (!v34)
                        goto LABEL_57;
                    }
                  }
                }
                else if (((unint64_t)v30 & v24) != v21)
                {
                  goto LABEL_56;
                }
                v23 = (uint64_t **)*v23;
                if (!v23)
                  goto LABEL_57;
              }
            }
            do
            {
              v25 = (unint64_t)v23[1];
              if (v25 == v19)
              {
                if (*((unsigned __int8 *)v23 + 16) == (_DWORD)v15
                  && *((unsigned __int16 *)v23 + 9) == (_DWORD)v16
                  && v23[11] == v18)
                {
                  v26 = v23[3];
                  v27 = (char *)v23[4] - (char *)v26;
                  v28 = (const void *)*((_QWORD *)v5 + 3);
                  if (v27 == *((_QWORD *)v5 + 4) - (_QWORD)v28)
                  {
                    v131 = v18;
                    v29 = memcmp(v26, v28, v27);
                    v18 = v131;
                    if (!v29)
                      break;
                  }
                }
              }
              else
              {
                if (v25 >= *(_QWORD *)&v14)
                  v25 %= *(_QWORD *)&v14;
                if (v25 != v21)
                  goto LABEL_56;
              }
              v23 = (uint64_t **)*v23;
            }
            while (v23);
          }
        }
        else
        {
LABEL_56:
          v23 = 0;
        }
LABEL_57:
        v3 = a1;
        v4 = v130;
LABEL_62:
        v35 = (unsigned __int16 *)*v133;
        v36 = (unsigned __int16 *)*v133;
        if (*v133 == v12)
        {
          v136 = v6;
          __p = 0u;
          v138 = 0u;
          v139 = 1065353216;
        }
        else
        {
          while (v6 != *v36)
          {
            v36 += 24;
            if (v36 == v12)
              goto LABEL_68;
          }
          if (v36 != v12)
            goto LABEL_75;
LABEL_68:
          v136 = v6;
          __p = 0u;
          v138 = 0u;
          v139 = 1065353216;
          if (v35 != v12)
          {
            while (v6 != *v35)
            {
              v35 += 24;
              if (v35 == v12)
                goto LABEL_71;
            }
            if (v35 != v12)
            {
LABEL_75:
              if (v23 && (v23[14] == (uint64_t *)v10 || *(_BYTE *)(v10 + 136)))
                goto LABEL_225;
              v37 = (unsigned __int16 *)*v133;
              v38 = (unsigned __int16 *)*v133;
              if (*v133 == v12)
              {
                v136 = v6;
                __p = 0u;
                v138 = 0u;
                v139 = 1065353216;
              }
              else
              {
                while (v6 != *v38)
                {
                  v38 += 24;
                  if (v38 == v12)
                    goto LABEL_84;
                }
                if (v38 != v12)
                  goto LABEL_97;
LABEL_84:
                v136 = v6;
                __p = 0u;
                v138 = 0u;
                v139 = 1065353216;
                if (v37 != v12)
                {
                  v38 = v37;
                  while (v6 != *v38)
                  {
                    v38 += 24;
                    if (v38 == v12)
                      goto LABEL_92;
                  }
                  if (v38 != v12)
                    goto LABEL_95;
                }
              }
LABEL_92:
              if ((unint64_t)v12 >= *(_QWORD *)(v4 + 184))
              {
                v54 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v133, &v136);
                *(_QWORD *)(v4 + 176) = v54;
                v38 = v54 - 24;
                v40 = (void *)__p;
                if (!(_QWORD)__p)
                  goto LABEL_97;
                goto LABEL_96;
              }
              *v12 = v6;
              std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map((uint64_t)(v12 + 4), (uint64_t)&__p);
              v39 = (_QWORD *)v138;
              *(_QWORD *)(v4 + 176) = v12 + 24;
              if (v39)
              {
                do
                {
                  v49 = (_QWORD *)*v39;
                  v50 = (std::__shared_weak_count *)v39[15];
                  if (v50)
                  {
                    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                    do
                      v52 = __ldaxr(p_shared_owners);
                    while (__stlxr(v52 - 1, p_shared_owners));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  v53 = (void *)v39[3];
                  if (v53 != (void *)v39[5])
                    free(v53);
                  operator delete(v39);
                  v39 = v49;
                }
                while (v49);
              }
              v38 = v12;
LABEL_95:
              v40 = (void *)__p;
              if (!(_QWORD)__p)
              {
LABEL_97:
                v41 = v5[16];
                v42 = *((unsigned __int16 *)v5 + 9);
                v43 = (v42
                     - 0x61C8864680B583EBLL
                     + ((v41 - 0x61C8864680B583EBLL) << 6)
                     + ((unint64_t)(v41 - 0x61C8864680B583EBLL) >> 2)) ^ (v41 - 0x61C8864680B583EBLL);
                v44 = *((_QWORD *)v5 + 11);
                v45 = (v44 - 0x61C8864680B583EBLL + (v43 << 6) + (v43 >> 2)) ^ v43;
                v46 = *((_QWORD *)v38 + 2);
                if (!v46)
                  goto LABEL_139;
                v47 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
                v47.i16[0] = vaddlv_u8(v47);
                if (v47.u32[0] > 1uLL)
                {
                  v48 = (v44 - 0x61C8864680B583EBLL + (v43 << 6) + (v43 >> 2)) ^ v43;
                  if (v45 >= v46)
                    v48 = v45 % v46;
                }
                else
                {
                  v48 = v45 & (v46 - 1);
                }
                v55 = *(void ***)(*((_QWORD *)v38 + 1) + 8 * v48);
                v129 = v48;
                if (!v55)
                  goto LABEL_139;
                v56 = (unsigned __int8 *)*v55;
                if (!*v55)
                  goto LABEL_139;
                if (v47.u32[0] < 2uLL)
                {
                  do
                  {
                    v62 = *((_QWORD *)v56 + 1);
                    if (v62 == v45)
                    {
                      if (v56[16] == (_DWORD)v41
                        && *((unsigned __int16 *)v56 + 9) == (_DWORD)v42
                        && *((_QWORD *)v56 + 11) == v44)
                      {
                        v63 = (const void *)*((_QWORD *)v56 + 3);
                        v64 = *((_QWORD *)v56 + 4) - (_QWORD)v63;
                        v65 = (const void *)*((_QWORD *)v5 + 3);
                        if (v64 == *((_QWORD *)v5 + 4) - (_QWORD)v65)
                        {
                          v66 = memcmp(v63, v65, v64);
                          v48 = v129;
                          if (!v66)
                          {
                            v3 = a1;
                            goto LABEL_136;
                          }
                        }
                      }
                    }
                    else if ((v62 & (v46 - 1)) != v48)
                    {
                      break;
                    }
                    v56 = *(unsigned __int8 **)v56;
                  }
                  while (v56);
                  v3 = a1;
LABEL_139:
                  v56 = (unsigned __int8 *)operator new(0x80uLL);
                  *(_QWORD *)v56 = 0;
                  *((_QWORD *)v56 + 1) = v45;
                  v69 = (char *)(v56 + 56);
                  *((_QWORD *)v56 + 2) = *((_QWORD *)v5 + 2);
                  *((_QWORD *)v56 + 3) = v56 + 56;
                  *((_QWORD *)v56 + 4) = v56 + 56;
                  *((_QWORD *)v56 + 5) = v56 + 56;
                  *((_QWORD *)v56 + 6) = 32;
                  v70 = (char *)*((_QWORD *)v5 + 3);
                  v71 = (char *)*((_QWORD *)v5 + 4);
                  v72 = v71 - v70;
                  if ((unint64_t)(v71 - v70) < 0x21)
                    goto LABEL_160;
                  if (v72 <= 0x40)
                    v73 = 64;
                  else
                    v73 = v71 - v70;
                  v127 = v73;
                  v69 = (char *)malloc_type_malloc(v73, 0x100004077774924uLL);
                  v74 = (char *)*((_QWORD *)v56 + 3);
                  v75 = (char *)*((_QWORD *)v56 + 4);
                  if (v74 == v75)
                    goto LABEL_159;
                  v76 = v75 - v74;
                  if ((unint64_t)(v75 - v74) < 8)
                  {
                    v77 = v69;
                  }
                  else
                  {
                    v77 = v69;
                    if ((unint64_t)(v69 - v74) >= 0x20)
                    {
                      if (v76 < 0x20)
                      {
                        v78 = 0;
LABEL_153:
                        v83 = v76 & 0xFFFFFFFFFFFFFFF8;
                        v77 = &v69[v76 & 0xFFFFFFFFFFFFFFF8];
                        v84 = v78 - (v76 & 0xFFFFFFFFFFFFFFF8);
                        v85 = (uint64_t *)&v74[v78];
                        v86 = &v69[v78];
                        do
                        {
                          v87 = *v85++;
                          *(_QWORD *)v86 = v87;
                          v86 += 8;
                          v84 += 8;
                        }
                        while (v84);
                        if (v76 != v83)
                        {
                          v74 += v83;
                          goto LABEL_158;
                        }
LABEL_159:
                        *((_QWORD *)v56 + 3) = v69;
                        *((_QWORD *)v56 + 4) = v69;
                        *((_QWORD *)v56 + 6) = v127;
LABEL_160:
                        if (v70 == v71)
                        {
                          v89 = (uint64_t *)(v38 + 4);
                          v90 = v129;
                          goto LABEL_179;
                        }
                        v89 = (uint64_t *)(v38 + 4);
                        v90 = v129;
                        if (v72 < 8)
                        {
                          v92 = v69;
                        }
                        else if ((unint64_t)(v69 - v70) < 0x20)
                        {
                          v92 = v69;
                        }
                        else
                        {
                          if (v72 < 0x20)
                          {
                            v91 = 0;
LABEL_172:
                            v97 = v72 & 0xFFFFFFFFFFFFFFF8;
                            v92 = &v69[v72 & 0xFFFFFFFFFFFFFFF8];
                            v98 = v91 - (v72 & 0xFFFFFFFFFFFFFFF8);
                            v99 = (uint64_t *)&v70[v91];
                            v100 = &v69[v91];
                            do
                            {
                              v101 = *v99++;
                              *(_QWORD *)v100 = v101;
                              v100 += 8;
                              v98 += 8;
                            }
                            while (v98);
                            if (v72 != v97)
                            {
                              v70 += v97;
                              goto LABEL_177;
                            }
LABEL_178:
                            v69 = (char *)*((_QWORD *)v56 + 4);
LABEL_179:
                            *((_QWORD *)v56 + 4) = &v69[v72];
                            *((_QWORD *)v56 + 11) = *((_QWORD *)v5 + 11);
                            *((_OWORD *)v56 + 6) = *((_OWORD *)v5 + 6);
                            *((_QWORD *)v56 + 14) = 0;
                            *((_QWORD *)v56 + 15) = 0;
                            v103 = (float)(unint64_t)(*((_QWORD *)v38 + 4) + 1);
                            v104 = *((float *)v38 + 10);
                            v4 = v130;
                            if (!v46 || (float)(v104 * (float)v46) < v103)
                            {
                              v105 = (v46 & (v46 - 1)) != 0;
                              if (v46 < 3)
                                v105 = 1;
                              v106 = v105 | (2 * v46);
                              v107 = vcvtps_u32_f32(v103 / v104);
                              if (v106 <= v107)
                                v108 = v107;
                              else
                                v108 = v106;
                              if (v108 == 1)
                              {
                                v108 = 2;
                              }
                              else if ((v108 & (v108 - 1)) != 0)
                              {
                                prime = std::__next_prime(v108);
                                v89 = (uint64_t *)(v38 + 4);
                                v108 = prime;
                              }
                              v110 = *(int8x8_t *)(v38 + 8);
                              if (v108 > *(_QWORD *)&v110)
                                goto LABEL_191;
                              if (v108 < *(_QWORD *)&v110)
                              {
                                v111 = vcvtps_u32_f32((float)*((unint64_t *)v38 + 4) / *((float *)v38 + 10));
                                if (*(_QWORD *)&v110 < 3uLL
                                  || (v112 = (uint8x8_t)vcnt_s8(v110), v112.i16[0] = vaddlv_u8(v112), v112.u32[0] > 1uLL))
                                {
                                  v111 = std::__next_prime(v111);
                                  v89 = (uint64_t *)(v38 + 4);
                                }
                                else
                                {
                                  v113 = 1 << -(char)__clz(v111 - 1);
                                  if (v111 >= 2)
                                    v111 = v113;
                                }
                                if (v108 <= v111)
                                  v108 = v111;
                                if (v108 < *(_QWORD *)&v110)
                                {
LABEL_191:
                                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v89, v108);
                                  v89 = (uint64_t *)(v38 + 4);
                                }
                              }
                              v46 = *((_QWORD *)v38 + 2);
                              if ((v46 & (v46 - 1)) != 0)
                              {
                                if (v45 >= v46)
                                  v90 = v45 % v46;
                                else
                                  v90 = v45;
                              }
                              else
                              {
                                v90 = (v46 - 1) & v45;
                              }
                            }
                            v114 = *v89;
                            v115 = *(_QWORD **)(*v89 + 8 * v90);
                            if (v115)
                            {
                              *(_QWORD *)v56 = *v115;
                              goto LABEL_215;
                            }
                            *(_QWORD *)v56 = *((_QWORD *)v38 + 3);
                            *((_QWORD *)v38 + 3) = v56;
                            *(_QWORD *)(v114 + 8 * v90) = v38 + 12;
                            if (*(_QWORD *)v56)
                            {
                              v116 = *(_QWORD *)(*(_QWORD *)v56 + 8);
                              if ((v46 & (v46 - 1)) != 0)
                              {
                                if (v116 >= v46)
                                  v116 %= v46;
                              }
                              else
                              {
                                v116 &= v46 - 1;
                              }
                              v115 = (_QWORD *)(*v89 + 8 * v116);
LABEL_215:
                              *v115 = v56;
                            }
                            ++*((_QWORD *)v38 + 4);
                            v68 = v134;
                            v67 = v135;
                            if (v135)
                              goto LABEL_217;
                            goto LABEL_219;
                          }
                          v91 = v72 & 0xFFFFFFFFFFFFFFE0;
                          v93 = (__int128 *)(v70 + 16);
                          v94 = v69 + 16;
                          v95 = v72 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v96 = *v93;
                            *(v94 - 1) = *(v93 - 1);
                            *v94 = v96;
                            v93 += 2;
                            v94 += 2;
                            v95 -= 32;
                          }
                          while (v95);
                          if (v72 == v91)
                            goto LABEL_178;
                          if ((v72 & 0x18) != 0)
                            goto LABEL_172;
                          v70 += v91;
                          v92 = &v69[v91];
                        }
                        do
                        {
LABEL_177:
                          v102 = *v70++;
                          *v92++ = v102;
                        }
                        while (v70 != v71);
                        goto LABEL_178;
                      }
                      v78 = v76 & 0xFFFFFFFFFFFFFFE0;
                      v79 = (__int128 *)(v74 + 16);
                      v80 = v69 + 16;
                      v81 = v76 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v82 = *v79;
                        *(v80 - 1) = *(v79 - 1);
                        *v80 = v82;
                        v79 += 2;
                        v80 += 2;
                        v81 -= 32;
                      }
                      while (v81);
                      if (v76 == v78)
                        goto LABEL_159;
                      if ((v76 & 0x18) != 0)
                        goto LABEL_153;
                      v74 += v78;
                      v77 = &v69[v78];
                    }
                  }
                  do
                  {
LABEL_158:
                    v88 = *v74++;
                    *v77++ = v88;
                  }
                  while (v74 != v75);
                  goto LABEL_159;
                }
                while (1)
                {
                  v57 = *((_QWORD *)v56 + 1);
                  if (v57 == v45)
                  {
                    if (v56[16] == (_DWORD)v41
                      && *((unsigned __int16 *)v56 + 9) == (_DWORD)v42
                      && *((_QWORD *)v56 + 11) == v44)
                    {
                      v58 = (const void *)*((_QWORD *)v56 + 3);
                      v59 = *((_QWORD *)v56 + 4) - (_QWORD)v58;
                      v60 = (const void *)*((_QWORD *)v5 + 3);
                      if (v59 == *((_QWORD *)v5 + 4) - (_QWORD)v60)
                      {
                        v61 = memcmp(v58, v60, v59);
                        v48 = v129;
                        if (!v61)
                        {
LABEL_136:
                          v4 = v130;
                          v68 = v134;
                          v67 = v135;
                          if (!v135)
                            goto LABEL_219;
LABEL_217:
                          v117 = (unint64_t *)&v67->__shared_owners_;
                          do
                            v118 = __ldxr(v117);
                          while (__stxr(v118 + 1, v117));
LABEL_219:
                          v119 = (std::__shared_weak_count *)*((_QWORD *)v56 + 15);
                          *((_QWORD *)v56 + 14) = v68;
                          *((_QWORD *)v56 + 15) = v67;
                          if (v119)
                          {
                            v120 = (unint64_t *)&v119->__shared_owners_;
                            do
                              v121 = __ldaxr(v120);
                            while (__stlxr(v121 - 1, v120));
                            if (!v121)
                            {
                              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                              std::__shared_weak_count::__release_weak(v119);
                            }
                          }
                          **(_BYTE **)v3 = 1;
                          v10 = v134;
LABEL_225:
                          if (*(_BYTE *)(v10 + 136))
LABEL_226:
                            *(_BYTE *)(v4 + 208) = 0;
                          v122 = v135;
                          if (v135)
                          {
                            v123 = (unint64_t *)&v135->__shared_owners_;
                            do
                              v124 = __ldaxr(v123);
                            while (__stlxr(v124 - 1, v123));
                            if (!v124)
                            {
                              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                              std::__shared_weak_count::__release_weak(v122);
                            }
                          }
                          v5 = *(unsigned __int8 **)v5;
                          if (!v5)
                            goto LABEL_3;
                          goto LABEL_7;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v57 >= v46)
                      v57 %= v46;
                    if (v57 != v48)
                      goto LABEL_139;
                  }
                  v56 = *(unsigned __int8 **)v56;
                  if (!v56)
                    goto LABEL_139;
                }
              }
LABEL_96:
              operator delete(v40);
              goto LABEL_97;
            }
          }
        }
LABEL_71:
        if ((unint64_t)v12 >= *(_QWORD *)(v4 + 184))
        {
          v12 = std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(v133, &v136);
        }
        else
        {
          *v12 = v6;
          *(_OWORD *)(v12 + 4) = 0u;
          *(_OWORD *)(v12 + 12) = 0u;
          *((_DWORD *)v12 + 10) = v139;
          v12 += 24;
        }
        *(_QWORD *)(v4 + 176) = v12;
        goto LABEL_75;
      }
    }
    v23 = 0;
    goto LABEL_62;
  }
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  unint64_t v17;
  uint64_t *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  __int128 *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  float v60;
  float v61;
  _BOOL8 v62;
  unint64_t v63;
  unint64_t v64;
  size_t prime;
  int8x8_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  size_t v73;
  const void *v74;
  const void *v75;

  v6 = *a2;
  v7 = *((unsigned __int16 *)a2 + 1);
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = (uint64_t *)*((_QWORD *)a2 + 9);
  v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = (const void *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2) - (_QWORD)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
                && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
                && v14[11] == v9)
              {
                v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  v73 = v16;
                  v75 = v15;
                  v23 = memcmp(v22, v15, v16);
                  v16 = v73;
                  v15 = v75;
                  if (!v23)
                    return;
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v14 = (uint64_t **)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
              && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
              && v14[11] == v9)
            {
              v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                v74 = v15;
                v19 = v16;
                v20 = memcmp(v18, v15, v16);
                v16 = v19;
                v15 = v74;
                if (!v20)
                  return;
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v24 = operator new(0x80uLL);
  *v24 = 0;
  v24[1] = v10;
  v25 = (char *)(v24 + 7);
  v26 = *(char **)(a3 + 8);
  v24[2] = *(_QWORD *)a3;
  v24[3] = v24 + 7;
  v24[4] = v24 + 7;
  v24[5] = v24 + 7;
  v24[6] = 32;
  v27 = *(char **)(a3 + 16);
  v28 = v27 - v26;
  if ((unint64_t)(v27 - v26) >= 0x21)
  {
    if (v28 <= 0x40)
      v29 = 64;
    else
      v29 = v27 - v26;
    v25 = (char *)malloc_type_malloc(v29, 0x100004077774924uLL);
    v30 = (char *)v24[3];
    v31 = (char *)v24[4];
    if (v30 == v31)
      goto LABEL_51;
    v32 = v31 - v30;
    if ((unint64_t)(v31 - v30) < 8)
    {
      v33 = v25;
      goto LABEL_50;
    }
    v33 = v25;
    if ((unint64_t)(v25 - v30) < 0x20)
      goto LABEL_50;
    if (v32 >= 0x20)
    {
      v34 = v32 & 0xFFFFFFFFFFFFFFE0;
      v35 = (__int128 *)(v30 + 16);
      v36 = v25 + 16;
      v37 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *v36 = v38;
        v35 += 2;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      if (v32 == v34)
        goto LABEL_51;
      if ((v32 & 0x18) == 0)
      {
        v30 += v34;
        v33 = &v25[v34];
        goto LABEL_50;
      }
    }
    else
    {
      v34 = 0;
    }
    v39 = v32 & 0xFFFFFFFFFFFFFFF8;
    v33 = &v25[v32 & 0xFFFFFFFFFFFFFFF8];
    v40 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
    v41 = (uint64_t *)&v30[v34];
    v42 = &v25[v34];
    do
    {
      v43 = *v41++;
      *(_QWORD *)v42 = v43;
      v42 += 8;
      v40 += 8;
    }
    while (v40);
    if (v32 == v39)
      goto LABEL_51;
    v30 += v39;
    do
    {
LABEL_50:
      v44 = *v30++;
      *v33++ = v44;
    }
    while (v30 != v31);
LABEL_51:
    v24[3] = v25;
    v24[4] = v25;
    v24[6] = v29;
  }
  if (v26 == v27)
    goto LABEL_70;
  if (v28 < 8)
  {
    v46 = v25;
    goto LABEL_68;
  }
  if ((unint64_t)(v25 - v26) < 0x20)
  {
    v46 = v25;
    goto LABEL_68;
  }
  if (v28 >= 0x20)
  {
    v45 = v28 & 0xFFFFFFFFFFFFFFE0;
    v47 = (__int128 *)(v26 + 16);
    v48 = v25 + 16;
    v49 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v50 = *v47;
      *(v48 - 1) = *(v47 - 1);
      *v48 = v50;
      v47 += 2;
      v48 += 2;
      v49 -= 32;
    }
    while (v49);
    if (v28 == v45)
      goto LABEL_69;
    if ((v28 & 0x18) == 0)
    {
      v26 += v45;
      v46 = &v25[v45];
      goto LABEL_68;
    }
  }
  else
  {
    v45 = 0;
  }
  v51 = v28 & 0xFFFFFFFFFFFFFFF8;
  v46 = &v25[v28 & 0xFFFFFFFFFFFFFFF8];
  v52 = v45 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v53 = (uint64_t *)&v26[v45];
  v54 = &v25[v45];
  do
  {
    v55 = *v53++;
    *(_QWORD *)v54 = v55;
    v54 += 8;
    v52 += 8;
  }
  while (v52);
  if (v28 == v51)
    goto LABEL_69;
  v26 += v51;
  do
  {
LABEL_68:
    v56 = *v26++;
    *v46++ = v56;
  }
  while (v26 != v27);
LABEL_69:
  v25 = (char *)v24[4];
LABEL_70:
  v24[4] = &v25[v28];
  v24[11] = *(_QWORD *)(a3 + 72);
  *((_OWORD *)v24 + 6) = *(_OWORD *)(a3 + 80);
  v57 = *(_QWORD *)(a3 + 104);
  v24[14] = *(_QWORD *)(a3 + 96);
  v24[15] = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v61 = *(float *)(a1 + 32);
  if (!v11 || (float)(v61 * (float)v11) < v60)
  {
    v62 = 1;
    if (v11 >= 3)
      v62 = (v11 & (v11 - 1)) != 0;
    v63 = v62 | (2 * v11);
    v64 = vcvtps_u32_f32(v60 / v61);
    if (v63 <= v64)
      prime = v64;
    else
      prime = v63;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v66 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v66)
      goto LABEL_95;
    if (prime < *(_QWORD *)&v66)
    {
      v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v66 < 3uLL || (v68 = (uint8x8_t)vcnt_s8(v66), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
      {
        v67 = std::__next_prime(v67);
      }
      else
      {
        v69 = 1 << -(char)__clz(v67 - 1);
        if (v67 >= 2)
          v67 = v69;
      }
      if (prime <= v67)
        prime = v67;
      if (prime < *(_QWORD *)&v66)
LABEL_95:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v70 = *(_QWORD *)a1;
  v71 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v71)
  {
    *v24 = *v71;
LABEL_109:
    *v71 = v24;
    goto LABEL_110;
  }
  *v24 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v24;
  *(_QWORD *)(v70 + 8 * v3) = a1 + 16;
  if (*v24)
  {
    v72 = *(_QWORD *)(*v24 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v72 >= v11)
        v72 %= v11;
    }
    else
    {
      v72 &= v11 - 1;
    }
    v71 = (_QWORD *)(*(_QWORD *)a1 + 8 * v72);
    goto LABEL_109;
  }
LABEL_110:
  ++*(_QWORD *)(a1 + 24);
}

_WORD *std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__push_back_slow_path<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>> const&>(void **a1, _WORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _WORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v9 = &v7[48 * v6];
  v8 = &v7[48 * v2];
  *(_WORD *)v8 = *a2;
  v10 = v8 + 48;
  std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map((uint64_t)(v8 + 8), (uint64_t)(a2 + 4));
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v13 = 0;
    do
    {
      v15 = &v8[v13];
      v16 = &v12[v13];
      *((_WORD *)v15 - 24) = *(_WORD *)&v12[v13 - 48];
      v17 = *(_QWORD *)&v12[v13 - 40];
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v15 - 5) = v17;
      *((_QWORD *)v15 - 4) = *(_QWORD *)&v12[v13 - 32];
      *((_QWORD *)v16 - 4) = 0;
      v18 = *(_QWORD *)&v12[v13 - 24];
      *(_QWORD *)&v8[v13 - 24] = v18;
      v19 = *(_QWORD *)&v12[v13 - 16];
      *((_QWORD *)v15 - 2) = v19;
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v12[v13 - 8];
      if (v19)
      {
        v14 = *(_QWORD *)(v18 + 8);
        v20 = *((_QWORD *)v15 - 4);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v14 >= v20)
            v14 %= v20;
        }
        else
        {
          v14 &= v20 - 1;
        }
        *(_QWORD *)(v17 + 8 * v14) = &v8[v13 - 24];
        *(_QWORD *)&v12[v13 - 24] = 0;
        *(_QWORD *)&v12[v13 - 16] = 0;
      }
      v13 -= 48;
    }
    while (&v12[v13] != v11);
    v21 = &v8[v13];
    v12 = (char *)*a1;
    v22 = (char *)a1[1];
    *a1 = v21;
    a1[1] = v10;
    a1[2] = v9;
    while (v22 != v12)
    {
      v23 = (_QWORD *)*((_QWORD *)v22 - 3);
      if (v23)
      {
        do
        {
          v25 = (_QWORD *)*v23;
          v26 = (std::__shared_weak_count *)v23[15];
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (void *)v23[3];
          if (v29 != (void *)v23[5])
            free(v29);
          operator delete(v23);
          v23 = v25;
        }
        while (v25);
      }
      v24 = (void *)*((_QWORD *)v22 - 5);
      *((_QWORD *)v22 - 5) = 0;
      if (v24)
        operator delete(v24);
      v22 -= 48;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5848;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0,std::allocator<gdc::LayerDataSource::LayerDataSource(unsigned short,gdc::LayerDataStore *,gdc::ResourceStatusContainer &,geo::TaskQueue *,std::unique_ptr<gdc::TimerBase>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 376));
  v2 = *(_QWORD *)(v1 + 464);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  std::mutex::unlock((std::mutex *)(v1 + 376));
}

void std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D57B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D57B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0,std::allocator<gdc::LayerDataSource::setNeedsUpdateFunction(std::function<void ()(void)>)::$_0>,void ()(std::shared_ptr<gdc::LayerData> const&)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 376));
  v2 = *(_QWORD *)(v1 + 464);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  std::mutex::unlock((std::mutex *)(v1 + 376));
}

double std::swap[abi:nn180100]<gdc::ResourceKey>(uint64_t *a1, uint64_t *a2)
{
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  uint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  _OWORD *v38;
  _BYTE *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  double result;
  char *v46;
  BOOL v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[16];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;

  v3 = (char *)a1[1];
  v4 = v65;
  v62 = *a1;
  *(_QWORD *)&v63 = v65;
  v6 = (char *)a1[3];
  v5 = a1[4];
  *(_QWORD *)&v64 = v65;
  *((_QWORD *)&v64 + 1) = v5;
  if (v3 != v6)
  {
    v7 = a1[2];
    *(_QWORD *)&v63 = v3;
    *((_QWORD *)&v63 + 1) = v7;
    *(_OWORD *)(a1 + 1) = 0u;
    *(_OWORD *)(a1 + 3) = 0u;
    goto LABEL_18;
  }
  v8 = (char *)a1[2];
  v9 = v8 - v3;
  *((_QWORD *)&v63 + 1) = &v65[v8 - v3];
  if (v8 != v3)
  {
    if (v9 < 8 || (unint64_t)((char *)&v62 - v3 + 40) < 0x20)
      goto LABEL_17;
    if (v9 >= 0x20)
    {
      v10 = v9 & 0xFFFFFFFFFFFFFFE0;
      v11 = (__int128 *)(v3 + 16);
      v12 = &v66;
      v13 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v14 = *v11;
        *((_OWORD *)v12 - 1) = *(v11 - 1);
        *(_OWORD *)v12 = v14;
        v11 += 2;
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
      if (v9 == v10)
        goto LABEL_18;
      if ((v9 & 0x18) == 0)
      {
        v3 += v10;
        v4 = &v65[v10];
        do
        {
LABEL_17:
          v20 = *v3++;
          *v4++ = v20;
        }
        while (v3 != v8);
        goto LABEL_18;
      }
    }
    else
    {
      v10 = 0;
    }
    v15 = v9 & 0xFFFFFFFFFFFFFFF8;
    v4 = &v65[v9 & 0xFFFFFFFFFFFFFFF8];
    v16 = v10 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v17 = (uint64_t *)&v3[v10];
    v18 = &v65[v10];
    do
    {
      v19 = *v17++;
      *v18++ = v19;
      v16 += 8;
    }
    while (v16);
    if (v9 != v15)
    {
      v3 += v15;
      goto LABEL_17;
    }
  }
LABEL_18:
  v21 = a1[9];
  v67 = v21;
  v68 = *((_OWORD *)a1 + 5);
  *a1 = *a2;
  if (a1 == a2)
    goto LABEL_37;
  v22 = a1 + 5;
  v23 = a2[1];
  a1[3] = (uint64_t)(a1 + 5);
  if (v23 == a2[3])
  {
    a1[1] = (uint64_t)v22;
    v24 = (char *)a2[1];
    a1[2] = (uint64_t)&v22[a2[2] - (_QWORD)v24];
    v25 = (char *)a2[2];
    if (v24 == v25)
      goto LABEL_36;
    v26 = v25 - v24;
    if ((unint64_t)(v25 - v24) >= 8 && (unint64_t)((char *)a1 - v24 + 40) >= 0x20)
    {
      if (v26 < 0x20)
      {
        v27 = 0;
LABEL_30:
        v32 = v26 & 0xFFFFFFFFFFFFFFF8;
        v22 += v26 & 0xFFFFFFFFFFFFFFF8;
        v33 = v27 - (v26 & 0xFFFFFFFFFFFFFFF8);
        v34 = (uint64_t *)&v24[v27];
        v35 = (uint64_t *)((char *)a1 + v27 + 40);
        do
        {
          v36 = *v34++;
          *v35++ = v36;
          v33 += 8;
        }
        while (v33);
        if (v26 == v32)
          goto LABEL_36;
        v24 += v32;
        goto LABEL_35;
      }
      v27 = v26 & 0xFFFFFFFFFFFFFFE0;
      v28 = (__int128 *)(v24 + 16);
      v29 = a1 + 7;
      v30 = v26 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31 = *v28;
        *(v29 - 1) = *(v28 - 1);
        *v29 = v31;
        v28 += 2;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v26 == v27)
        goto LABEL_36;
      if ((v26 & 0x18) != 0)
        goto LABEL_30;
      v24 += v27;
      v22 += v27;
    }
    do
    {
LABEL_35:
      v37 = *v24++;
      *v22++ = v37;
    }
    while (v24 != v25);
    goto LABEL_36;
  }
  a1[1] = v23;
  a1[2] = a2[2];
  *(_OWORD *)(a2 + 1) = 0u;
  *(_OWORD *)(a2 + 3) = 0u;
LABEL_36:
  a1[4] = a2[4];
LABEL_37:
  a1[9] = a2[9];
  v38 = a2 + 10;
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  *a2 = v62;
  if (&v62 != a2)
  {
    v39 = a2 + 5;
    v40 = (void *)a2[1];
    if (v40 != (void *)a2[3])
      free(v40);
    a2[3] = (uint64_t)v39;
    v41 = (char *)v63;
    if ((_QWORD)v63 != (_QWORD)v64)
    {
      v42 = *((_QWORD *)&v63 + 1);
      a2[1] = v63;
      a2[2] = v42;
      v63 = 0u;
      v64 = 0u;
LABEL_59:
      v61 = v67;
      a2[4] = *((_QWORD *)&v64 + 1);
      a2[9] = v61;
      result = *(double *)&v68;
      *v38 = v68;
      return result;
    }
    v46 = (char *)*((_QWORD *)&v63 + 1);
    v48 = *((_QWORD *)&v63 + 1) - v63;
    v47 = *((_QWORD *)&v63 + 1) == (_QWORD)v63;
    v49 = &v39[*((_QWORD *)&v63 + 1) - v63];
    a2[1] = (uint64_t)v39;
    a2[2] = (uint64_t)v49;
    if (v47)
      goto LABEL_59;
    if (v48 >= 8 && (unint64_t)((char *)a2 - v41 + 40) >= 0x20)
    {
      if (v48 < 0x20)
      {
        v50 = 0;
LABEL_53:
        v55 = v48 & 0xFFFFFFFFFFFFFFF8;
        v39 += v48 & 0xFFFFFFFFFFFFFFF8;
        v56 = v50 - (v48 & 0xFFFFFFFFFFFFFFF8);
        v57 = (uint64_t *)&v41[v50];
        v58 = (uint64_t *)((char *)a2 + v50 + 40);
        do
        {
          v59 = *v57++;
          *v58++ = v59;
          v56 += 8;
        }
        while (v56);
        if (v48 == v55)
          goto LABEL_59;
        v41 += v55;
        goto LABEL_58;
      }
      v50 = v48 & 0xFFFFFFFFFFFFFFE0;
      v51 = (__int128 *)(v41 + 16);
      v52 = a2 + 7;
      v53 = v48 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 32;
      }
      while (v53);
      if (v48 == v50)
        goto LABEL_59;
      if ((v48 & 0x18) != 0)
        goto LABEL_53;
      v41 += v50;
      v39 += v50;
    }
    do
    {
LABEL_58:
      v60 = *v41++;
      *v39++ = v60;
    }
    while (v41 != v46);
    goto LABEL_59;
  }
  v43 = (void *)v63;
  v44 = (void *)v64;
  a2[9] = v21;
  result = *(double *)&v68;
  *v38 = v68;
  if (v43 != v44)
    free(v43);
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  double result;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;

  v6 = *((unsigned __int16 *)a2 + 1);
  v7 = *((unsigned __int16 *)a1 + 1);
  v8 = v6 >= v7;
  if (v6 == v7 && (v9 = *a2, v10 = *a1, v8 = v9 >= v10, v9 == v10))
    v11 = gdc::GenericKey::operator<(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
  else
    v11 = !v8;
  v13 = *((unsigned __int16 *)a3 + 1);
  v14 = v13 >= v6;
  if (v13 == v6 && (v15 = *a3, v16 = *a2, v14 = v15 >= v16, v15 == v16))
  {
    v17 = gdc::GenericKey::operator<(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
    if (!v11)
      goto LABEL_10;
  }
  else
  {
    v17 = !v14;
    if (!v11)
    {
LABEL_10:
      if (!v17)
        return result;
      result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a2, (uint64_t *)a3);
      v18 = *((unsigned __int16 *)a2 + 1);
      v19 = *((unsigned __int16 *)a1 + 1);
      v20 = v18 >= v19;
      if (v18 == v19 && (v21 = *a2, v22 = *a1, v20 = v21 >= v22, v21 == v22))
      {
        if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2)))return result;
      }
      else if (v20)
      {
        return result;
      }
      return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  if (v17)
  {
    v23 = (uint64_t *)a1;
  }
  else
  {
    result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
    v24 = *((unsigned __int16 *)a3 + 1);
    v25 = *((unsigned __int16 *)a2 + 1);
    v26 = v24 >= v25;
    if (v24 == v25 && (v27 = *a3, v28 = *a2, v26 = v27 >= v28, v27 == v28))
    {
      if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2)))return result;
    }
    else if (v26)
    {
      return result;
    }
    v23 = (uint64_t *)a2;
  }
  return std::swap[abi:nn180100]<gdc::ResourceKey>(v23, (uint64_t *)a3);
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  double result;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a2, a3);
  v9 = *((unsigned __int16 *)a4 + 1);
  v10 = *((unsigned __int16 *)a3 + 1);
  v11 = v9 >= v10;
  if (v9 == v10 && (v12 = *a4, v13 = *a3, v11 = v12 >= v13, v12 == v13))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a4 + 1), *((_QWORD *)a4 + 2), *((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2)))
      return result;
  }
  else if (v11)
  {
    return result;
  }
  result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a3, (uint64_t *)a4);
  v14 = *((unsigned __int16 *)a3 + 1);
  v15 = *((unsigned __int16 *)a2 + 1);
  v16 = v14 >= v15;
  if (v14 == v15 && (v17 = *a3, v18 = *a2, v16 = v17 >= v18, v17 == v18))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2)))
      return result;
  }
  else if (v16)
  {
    return result;
  }
  result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a2, (uint64_t *)a3);
  v19 = *((unsigned __int16 *)a2 + 1);
  v20 = *((unsigned __int16 *)a1 + 1);
  v21 = v19 >= v20;
  if (v19 == v20)
  {
    v22 = *a2;
    v23 = *a1;
    v21 = v22 >= v23;
    if (v22 == v23)
    {
      if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2)))return result;
      return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  if (!v21)
    return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
  return result;
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  double result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a2, a3, a4);
  v11 = *((unsigned __int16 *)a5 + 1);
  v12 = *((unsigned __int16 *)a4 + 1);
  v13 = v11 >= v12;
  if (v11 == v12 && (v14 = *a5, v15 = *a4, v13 = v14 >= v15, v14 == v15))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a5 + 1), *((_QWORD *)a5 + 2), *((_QWORD *)a4 + 1), *((_QWORD *)a4 + 2)))
      return result;
  }
  else if (v13)
  {
    return result;
  }
  result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a4, (uint64_t *)a5);
  v16 = *((unsigned __int16 *)a4 + 1);
  v17 = *((unsigned __int16 *)a3 + 1);
  v18 = v16 >= v17;
  if (v16 == v17 && (v19 = *a4, v20 = *a3, v18 = v19 >= v20, v19 == v20))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a4 + 1), *((_QWORD *)a4 + 2), *((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2)))
      return result;
  }
  else if (v18)
  {
    return result;
  }
  result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a3, (uint64_t *)a4);
  v21 = *((unsigned __int16 *)a3 + 1);
  v22 = *((unsigned __int16 *)a2 + 1);
  v23 = v21 >= v22;
  if (v21 == v22 && (v24 = *a3, v25 = *a2, v23 = v24 >= v25, v24 == v25))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 2), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2)))
      return result;
  }
  else if (v23)
  {
    return result;
  }
  result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a2, (uint64_t *)a3);
  v26 = *((unsigned __int16 *)a2 + 1);
  v27 = *((unsigned __int16 *)a1 + 1);
  v28 = v26 >= v27;
  if (v26 == v27)
  {
    v29 = *a2;
    v30 = *a1;
    v28 = v29 >= v30;
    if (v29 == v30)
    {
      if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2)))return result;
      return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  if (!v28)
    return std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *i;
  unsigned __int8 *v44;
  void **v45;
  void *v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t *v65;
  _BYTE *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[16];
  uint64_t v90;
  uint64_t v91;
  __int128 v92;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *((unsigned __int16 *)a2 - 47);
      v7 = *((unsigned __int16 *)a1 + 1);
      v8 = v6 >= v7;
      if (v6 == v7 && (v9 = *(a2 - 96), v10 = *a1, v8 = v9 >= v10, v9 == v10))
      {
        if (!gdc::GenericKey::operator<(*((_QWORD *)a2 - 11), *((_QWORD *)a2 - 10), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2)))return 1;
      }
      else if (v8)
      {
        return result;
      }
      std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)v2 - 12);
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      v11 = a1 + 192;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(a1, a1 + 96, a1 + 192);
      v12 = a1 + 288;
      if (a1 + 288 == v2)
        return 1;
      v13 = 0;
      v14 = 0;
      v15 = a1 + 328;
      v16 = a1 + 344;
      v81 = v2;
      break;
  }
  while (2)
  {
    v17 = *((unsigned __int16 *)v12 + 1);
    v18 = *((unsigned __int16 *)v11 + 1);
    v19 = v17 >= v18;
    if (v17 == v18 && (v20 = *v12, v21 = *v11, v19 = v20 >= v21, v20 == v21))
    {
      if (!gdc::GenericKey::operator<(*((_QWORD *)v12 + 1), *((_QWORD *)v12 + 2), *((_QWORD *)v11 + 1), *((_QWORD *)v11 + 2)))goto LABEL_9;
    }
    else if (v19)
    {
      goto LABEL_9;
    }
    v22 = (char *)*((_QWORD *)v12 + 1);
    v86 = *(_QWORD *)v12;
    *(_QWORD *)&v87 = v89;
    v24 = (char *)*((_QWORD *)v12 + 3);
    v23 = *((_QWORD *)v12 + 4);
    *(_QWORD *)&v88 = v89;
    *((_QWORD *)&v88 + 1) = v23;
    if (v22 == v24)
    {
      v26 = (char *)*((_QWORD *)v12 + 2);
      v27 = v26 - v22;
      *((_QWORD *)&v87 + 1) = &v89[v26 - v22];
      if (v26 == v22)
        goto LABEL_33;
      if (v27 < 8)
      {
        v28 = v89;
      }
      else
      {
        v28 = v89;
        if ((unint64_t)(v89 - v22) >= 0x20)
        {
          if (v27 < 0x20)
          {
            v29 = 0;
LABEL_27:
            v34 = v27 & 0xFFFFFFFFFFFFFFF8;
            v28 = &v89[v27 & 0xFFFFFFFFFFFFFFF8];
            v35 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
            v36 = (uint64_t *)&v22[v29];
            v37 = &v89[v29];
            do
            {
              v38 = *v36++;
              *v37++ = v38;
              v35 += 8;
            }
            while (v35);
            if (v27 == v34)
              goto LABEL_33;
            v22 += v34;
            goto LABEL_32;
          }
          v29 = v27 & 0xFFFFFFFFFFFFFFE0;
          v30 = (__int128 *)(v22 + 16);
          v31 = &v90;
          v32 = v27 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v33 = *v30;
            *((_OWORD *)v31 - 1) = *(v30 - 1);
            *(_OWORD *)v31 = v33;
            v30 += 2;
            v31 += 4;
            v32 -= 32;
          }
          while (v32);
          if (v27 == v29)
            goto LABEL_33;
          if ((v27 & 0x18) != 0)
            goto LABEL_27;
          v22 += v29;
          v28 = &v89[v29];
        }
      }
      do
      {
LABEL_32:
        v39 = *v22++;
        *v28++ = v39;
      }
      while (v22 != v26);
      goto LABEL_33;
    }
    v25 = *((_QWORD *)v12 + 2);
    *(_QWORD *)&v87 = v22;
    *((_QWORD *)&v87 + 1) = v25;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
LABEL_33:
    v82 = v14;
    v40 = 0;
    v83 = v13;
    v84 = v16;
    v85 = (uint64_t)&a1[96 * v13 + 328];
    v91 = *((_QWORD *)v12 + 9);
    v92 = *((_OWORD *)v12 + 5);
    v41 = v15;
    v42 = v16;
    for (i = v12; ; i = v44)
    {
      v44 = v11;
      v45 = (void **)(v11 + 8);
      *(_QWORD *)i = *(_QWORD *)v11;
      v46 = (void *)*((_QWORD *)i + 1);
      if (v46 != *((void **)i + 3))
        free(v46);
      v47 = i + 40;
      *((_QWORD *)i + 3) = i + 40;
      v48 = (char *)*((_QWORD *)v11 + 1);
      if (v48 != *((char **)v11 + 3))
      {
        *((_QWORD *)i + 1) = v48;
        *((_QWORD *)i + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v45 = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        goto LABEL_55;
      }
      *((_QWORD *)i + 1) = v47;
      v49 = (char *)*((_QWORD *)v11 + 2);
      v50 = v49 - v48;
      *((_QWORD *)i + 2) = &v47[v49 - v48];
      if (v49 != v48)
      {
        if (v50 < 8 || (unint64_t)(v85 - 96 * v40 - (_QWORD)v48) < 0x20)
          goto LABEL_54;
        if (v50 >= 0x20)
        {
          v51 = v50 & 0xFFFFFFFFFFFFFFE0;
          v52 = (__int128 *)(v48 + 16);
          v53 = v42;
          v54 = v50 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v55 = *v52;
            *((_OWORD *)v53 - 1) = *(v52 - 1);
            *(_OWORD *)v53 = v55;
            v53 += 32;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v50 == v51)
            goto LABEL_55;
          if ((v50 & 0x18) == 0)
          {
            v48 += v51;
            v47 += v51;
            do
            {
LABEL_54:
              v61 = *v48++;
              *v47++ = v61;
            }
            while (v48 != v49);
            goto LABEL_55;
          }
        }
        else
        {
          v51 = 0;
        }
        v56 = v50 & 0xFFFFFFFFFFFFFFF8;
        v47 += v50 & 0xFFFFFFFFFFFFFFF8;
        v57 = v51 - (v50 & 0xFFFFFFFFFFFFFFF8);
        v58 = (uint64_t *)&v48[v51];
        v59 = &v41[v51];
        do
        {
          v60 = *v58++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v57 += 8;
        }
        while (v57);
        if (v50 != v56)
        {
          v48 += v56;
          goto LABEL_54;
        }
      }
LABEL_55:
      *((_QWORD *)i + 4) = *((_QWORD *)v11 + 4);
      *((_QWORD *)i + 9) = *((_QWORD *)v11 + 9);
      *((_OWORD *)i + 5) = *((_OWORD *)v11 + 5);
      if (v11 == a1)
        break;
      v11 -= 96;
      v62 = *((unsigned __int16 *)v44 - 47);
      v63 = WORD1(v86) >= v62;
      if (WORD1(v86) == v62 && (v64 = *v11, v63 = v86 >= v64, v86 == v64))
      {
        if (!gdc::GenericKey::operator<(v87, *((uint64_t *)&v87 + 1), *((_QWORD *)v44 - 11), *((_QWORD *)v44 - 10)))
        {
LABEL_59:
          v65 = (uint64_t *)v44;
          goto LABEL_61;
        }
      }
      else if (v63)
      {
        goto LABEL_59;
      }
      ++v40;
      v42 -= 96;
      v41 -= 96;
    }
    v65 = (uint64_t *)a1;
LABEL_61:
    v2 = v81;
    v13 = v83;
    *v65 = v86;
    if (v65 == &v86)
      goto LABEL_82;
    if (*v45 != (void *)v65[3])
      free(*v45);
    v66 = v65 + 5;
    v65[3] = (uint64_t)(v65 + 5);
    if ((_QWORD)v87 != (_QWORD)v88)
    {
      *v45 = (void *)v87;
      v65[2] = *((_QWORD *)&v87 + 1);
      v87 = 0u;
      v88 = 0u;
      goto LABEL_81;
    }
    *v45 = v66;
    v67 = (char *)v87;
    v65[2] = (uint64_t)&v66[*((_QWORD *)&v87 + 1) - v87];
    v68 = (char *)*((_QWORD *)&v87 + 1);
    if (v67 == *((char **)&v87 + 1))
      goto LABEL_81;
    v69 = *((_QWORD *)&v87 + 1) - (_QWORD)v67;
    if (*((_QWORD *)&v87 + 1) - (_QWORD)v67 < 8uLL || (unint64_t)((char *)v65 - v67 + 40) < 0x20)
    {
      do
      {
LABEL_80:
        v80 = *v67++;
        *v66++ = v80;
      }
      while (v67 != v68);
      goto LABEL_81;
    }
    if (v69 >= 0x20)
    {
      v70 = v69 & 0xFFFFFFFFFFFFFFE0;
      v71 = (__int128 *)(v67 + 16);
      v72 = v65 + 7;
      v73 = v69 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v74 = *v71;
        *(v72 - 1) = *(v71 - 1);
        *v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v69 == v70)
        goto LABEL_81;
      if ((v69 & 0x18) != 0)
        goto LABEL_75;
      v67 += v70;
      v66 += v70;
      goto LABEL_80;
    }
    v70 = 0;
LABEL_75:
    v75 = v69 & 0xFFFFFFFFFFFFFFF8;
    v66 += v69 & 0xFFFFFFFFFFFFFFF8;
    v76 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
    v77 = (uint64_t *)&v67[v70];
    v78 = (uint64_t *)((char *)v65 + v70 + 40);
    do
    {
      v79 = *v77++;
      *v78++ = v79;
      v76 += 8;
    }
    while (v76);
    if (v69 != v75)
    {
      v67 += v75;
      goto LABEL_80;
    }
LABEL_81:
    v65[4] = *((_QWORD *)&v88 + 1);
LABEL_82:
    v65[9] = v91;
    *((_OWORD *)v44 + 5) = v92;
    if ((_QWORD)v87 != (_QWORD)v88)
      free((void *)v87);
    v14 = v82 + 1;
    v16 = v84;
    if (v82 == 7)
      return v12 + 96 == v81;
LABEL_9:
    v11 = v12;
    ++v13;
    v16 += 96;
    v15 += 96;
    v12 += 96;
    if (v12 != v2)
      continue;
    return 1;
  }
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  v13[1] = a2;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  v25 = *(_QWORD *)(a1 + 16);
  *v13 = v25;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke_23(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_async(*(dispatch_queue_t *)(v3 + 16), *(dispatch_block_t *)(a1 + 32));
}

uint64_t std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E42D5800;
  v3 = (void **)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(_BYTE *)(a1 + 120))
    *(_BYTE *)(a1 + 120) = 0;
  v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56))
    free(v4);
  return a1;
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E42D5800;
  v3 = (void **)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(_BYTE *)(a1 + 120))
    *(_BYTE *)(a1 + 120) = 0;
  v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56))
    free(v4);
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  int64_t v5;
  unint64_t v6;
  _WORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v2 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v2 = &off_1E42D5800;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v2[24] = *(_BYTE *)(a1 + 24);
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v2 + 32), a1 + 32);
  v2[120] = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *((_DWORD *)v2 + 31) = *(_DWORD *)(a1 + 124);
    v2[120] = 1;
  }
  v3 = *(char **)(a1 + 136);
  *((_QWORD *)v2 + 16) = *(_QWORD *)(a1 + 128);
  *((_QWORD *)v2 + 17) = 0;
  *((_QWORD *)v2 + 18) = 0;
  *((_QWORD *)v2 + 19) = 0;
  v4 = *(char **)(a1 + 144);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556)
      abort();
    v7 = operator new(v5);
    *((_QWORD *)v2 + 17) = v7;
    *((_QWORD *)v2 + 18) = v7;
    *((_QWORD *)v2 + 19) = &v7[24 * v6];
    do
    {
      v8 = (uint64_t)(v3 + 8);
      v9 = *(_WORD *)v3;
      v3 += 48;
      v10 = (uint64_t)(v7 + 4);
      *v7 = v9;
      v7 += 24;
      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v10, v8);
    }
    while (v3 != v4);
    *((_QWORD *)v2 + 18) = v7;
  }
  *((_OWORD *)v2 + 10) = *(_OWORD *)(a1 + 160);
  v2[176] = *(_BYTE *)(a1 + 176);
  return v2;
}

__n128 std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5800;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a1 + 24);
  gdc::LayerDataKey::LayerDataKey(a2 + 32, a1 + 32);
  *(_BYTE *)(a2 + 120) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_DWORD *)(a2 + 124) = *(_DWORD *)(a1 + 124);
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v4 = *(char **)(a1 + 136);
  v5 = *(char **)(a1 + 144);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      abort();
    v8 = operator new(v6);
    *(_QWORD *)(a2 + 136) = v8;
    *(_QWORD *)(a2 + 144) = v8;
    *(_QWORD *)(a2 + 152) = &v8[24 * v7];
    do
    {
      v9 = (uint64_t)(v4 + 8);
      v10 = *(_WORD *)v4;
      v4 += 48;
      v11 = (uint64_t)(v8 + 4);
      *v8 = v10;
      v8 += 24;
      std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(v11, v9);
    }
    while (v4 != v5);
    *(_QWORD *)(a2 + 144) = v8;
  }
  result = *(__n128 *)(a1 + 160);
  *(_BYTE *)(a2 + 176) = *(_BYTE *)(a1 + 176);
  *(__n128 *)(a2 + 160) = result;
  return result;
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  v3 = (void **)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 136, v2);
    operator delete(*v3);
  }
  if (*(_BYTE *)(a1 + 120))
    *(_BYTE *)(a1 + 120) = 0;
  v4 = *(void **)(a1 + 40);
  if (v4 != *(void **)(a1 + 56))
    free(v4);
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  void **v3;
  void *v4;

  v3 = (void **)(__p + 17);
  v2 = __p[17];
  if (v2)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)(__p + 17), v2);
    operator delete(*v3);
  }
  if (*((_BYTE *)__p + 120))
    *((_BYTE *)__p + 120) = 0;
  v4 = (void *)__p[5];
  if (v4 != (void *)__p[7])
    free(v4);
  operator delete(__p);
}

void std::__function::__func<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1,std::allocator<gdc::LayerDataSource::processLayerDataRequests(gdc::ResourceManager *,geo::TaskGroup *,long long)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  os_signpost_id_t v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 16);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LayerDataDecodeDispatched", (const char *)&unk_1A0189141, buf, 2u);
    }
  }
  gdc::LayerDataSource::updateLayerData(v2, *(_QWORD *)(a1 + 168), a1 + 24, (uint64_t *)(a1 + 136), *(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 176));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)v10 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v6, OS_SIGNPOST_INTERVAL_END, v5, "LayerDataDecodeDispatched", (const char *)&unk_1A0189141, v10, 2u);
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    }
  }
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
    {
      *(_WORD *)v9 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_END, v7, "LayerDataDecode", (const char *)&unk_1A0189141, v9, 2u);
    }
  }
}

void gdc::LayerDataSource::processNewLayerData(long long,std::vector<gdc::LayerDataRequestKeyPair> &,std::vector<gdc::LayerDataRequestKeyPair> &)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  int v4;
  uint64_t *v5;
  unsigned __int16 *v6;
  unint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  std::string *p_p;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  int v25;
  NSObject *v26;
  std::string *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  NSObject *v35;
  std::string *v36;
  os_signpost_id_t v37;
  NSObject *v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t ***v43;
  uint64_t **v44;
  int v45;
  int v46;
  uint64_t *v47;
  const void *v48;
  size_t v49;
  unint64_t v50;
  uint64_t *v51;
  size_t v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  _QWORD *v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  int8x8_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  os_signpost_id_t v80;
  NSObject *v81;
  unint64_t *p_shared_owners;
  void *v83;
  size_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  const void *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t *v94;
  std::string __p;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char v99;
  int v100;
  unint64_t v101;
  __int128 v102;
  uint8_t buf[4];
  std::string *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v4 = a4;
    v5 = a3;
    v6 = (unsigned __int16 *)a2;
    v8 = a1 + 40;
    v90 = (_QWORD *)(a1 + 176);
    v94 = (uint64_t *)(a1 + 120);
    v89 = (_QWORD *)(a1 + 136);
    v9 = &qword_1ECE37000;
    v91 = (_QWORD *)(a1 + 40);
    do
    {
      if (v9[96] != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v10 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG)
        && ((gdc::LayerDataRequestKey::keysInt32Str(&__p, v6 + 4),
             (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          ? (p_p = &__p)
          : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
            *(_DWORD *)buf = 136315138,
            v104 = p_p,
            _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_DEBUG, "processNewLayerData: %s", buf, 0xCu),
            SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v12 = *(int8x8_t *)(a1 + 168);
        if (!*(_QWORD *)&v12)
          goto LABEL_34;
      }
      else
      {
        v12 = *(int8x8_t *)(a1 + 168);
        if (!*(_QWORD *)&v12)
          goto LABEL_34;
      }
      v13 = *(_QWORD *)v6;
      v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = *(_QWORD *)v6;
        if (v13 >= *(_QWORD *)&v12)
          v15 = v13 % *(_QWORD *)&v12;
      }
      else
      {
        v15 = (*(_QWORD *)&v12 - 1) & v13;
      }
      v16 = *(_QWORD *)(a1 + 160);
      v17 = *(_QWORD ***)(v16 + 8 * v15);
      if (!v17 || (v18 = *v17) == 0)
      {
LABEL_34:
        v22 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)v8, (unsigned __int8 *)v6 + 8);
        if (!v22)
          goto LABEL_4;
        v23 = v22;
        v24 = v22[16];
        if (!*((_BYTE *)v24 + 209))
          goto LABEL_4;
        v25 = *((unsigned __int8 *)v24 + 208);
        if (v4)
        {
          if (!*((_BYTE *)v24 + 208))
          {
            *((_BYTE *)v24 + 209) = 0;
            goto LABEL_4;
          }
          if (v9[96] != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v26 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_ERROR))
          {
            gdc::LayerDataRequestKey::keysInt32Str(&__p, v6 + 4);
            v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            v104 = v27;
            _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "Failed to create layer data for request with all resources: %s", buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__s.__data_[0] = *((_BYTE *)v6 + 8);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)(v6 + 8));
          v99 = 0;
          if (*((_BYTE *)v6 + 104))
          {
            v100 = *((_DWORD *)v6 + 27);
            v99 = 1;
          }
          v28 = *((_QWORD *)v6 + 14);
          v30 = v23[16];
          v29 = v23[17];
          v101 = v28;
          *(_QWORD *)&v102 = v30;
          *((_QWORD *)&v102 + 1) = v29;
          if (v29)
          {
            v31 = (unint64_t *)(v29 + 1);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
            v28 = v101;
          }
          v33 = *(_QWORD *)(a1 + 128);
          if (v33)
          {
            v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              v8 = v28;
              if (v28 >= v33)
                v8 = v28 % v33;
            }
            else
            {
              v8 = (v33 - 1) & v28;
            }
            v43 = *(uint64_t ****)(*v94 + 8 * v8);
            if (v43)
            {
              v44 = *v43;
              if (*v43)
              {
                v45 = __p.__r_.__value_.__s.__data_[0];
                v46 = LOWORD(__p.__r_.__value_.__r.__words[1]);
                v47 = v98;
                v48 = (const void *)__p.__r_.__value_.__r.__words[2];
                v49 = v96 - __p.__r_.__value_.__r.__words[2];
                if (v34.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v54 = v44[1];
                    if (v54 == (uint64_t *)v28)
                    {
                      if (*((unsigned __int8 *)v44 + 16) == v45
                        && *((unsigned __int16 *)v44 + 12) == v46
                        && v44[12] == v47)
                      {
                        v55 = v44[4];
                        if ((char *)v44[5] - (char *)v55 == v49)
                        {
                          v86 = v47;
                          v88 = v48;
                          v84 = v49;
                          v56 = memcmp(v55, v48, v49);
                          v49 = v84;
                          v47 = v86;
                          v48 = v88;
                          if (!v56)
                            goto LABEL_168;
                        }
                      }
                    }
                    else if (((unint64_t)v54 & (v33 - 1)) != v8)
                    {
                      goto LABEL_103;
                    }
                    v44 = (uint64_t **)*v44;
                    if (!v44)
                      goto LABEL_103;
                  }
                }
                do
                {
                  v50 = (unint64_t)v44[1];
                  if (v50 == v28)
                  {
                    if (*((unsigned __int8 *)v44 + 16) == v45
                      && *((unsigned __int16 *)v44 + 12) == v46
                      && v44[12] == v47)
                    {
                      v51 = v44[4];
                      if ((char *)v44[5] - (char *)v51 == v49)
                      {
                        v85 = v47;
                        v87 = v48;
                        v52 = v49;
                        v53 = memcmp(v51, v48, v49);
                        v49 = v52;
                        v47 = v85;
                        v48 = v87;
                        if (!v53)
                          goto LABEL_168;
                      }
                    }
                  }
                  else
                  {
                    if (v50 >= v33)
                      v50 %= v33;
                    if (v50 != v8)
                      break;
                  }
                  v44 = (uint64_t **)*v44;
                }
                while (v44);
              }
            }
          }
LABEL_103:
          v57 = operator new(0x90uLL);
          *v57 = 0;
          v57[1] = v28;
          *((_BYTE *)v57 + 16) = __p.__r_.__value_.__s.__data_[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v57 + 3), (uint64_t)&__p.__r_.__value_.__l.__size_);
          *((_BYTE *)v57 + 112) = 0;
          if (v99)
          {
            *((_DWORD *)v57 + 29) = v100;
            *((_BYTE *)v57 + 112) = 1;
          }
          v57[15] = v101;
          *((_OWORD *)v57 + 8) = v102;
          v102 = 0uLL;
          v58 = (float)(unint64_t)(*(_QWORD *)(a1 + 144) + 1);
          v59 = *(float *)(a1 + 152);
          if (!v33 || (float)(v59 * (float)v33) < v58)
          {
            v60 = (v33 & (v33 - 1)) != 0;
            if (v33 < 3)
              v60 = 1;
            v61 = v60 | (2 * v33);
            v62 = vcvtps_u32_f32(v58 / v59);
            if (v61 <= v62)
              prime = v62;
            else
              prime = v61;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
            }
            v67 = *(int8x8_t *)(a1 + 128);
            if (prime > *(_QWORD *)&v67)
              goto LABEL_152;
            if (prime < *(_QWORD *)&v67)
            {
              v68 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 144) / *(float *)(a1 + 152));
              if (*(_QWORD *)&v67 < 3uLL
                || (v69 = (uint8x8_t)vcnt_s8(v67), v69.i16[0] = vaddlv_u8(v69), v69.u32[0] > 1uLL))
              {
                v68 = std::__next_prime(v68);
              }
              else
              {
                v70 = 1 << -(char)__clz(v68 - 1);
                if (v68 >= 2)
                  v68 = v70;
              }
              if (prime <= v68)
                prime = v68;
              if (prime < *(_QWORD *)&v67)
LABEL_152:
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v94, prime);
            }
            v33 = *(_QWORD *)(a1 + 128);
            if ((v33 & (v33 - 1)) != 0)
            {
              if (v28 >= v33)
                v8 = v28 % v33;
              else
                v8 = v28;
            }
            else
            {
              v8 = (v33 - 1) & v28;
            }
          }
          v74 = *v94;
          v75 = *(_QWORD **)(*v94 + 8 * v8);
          if (v75)
          {
            *v57 = *v75;
            goto LABEL_166;
          }
          *v57 = *v89;
          *v89 = v57;
          *(_QWORD *)(v74 + 8 * v8) = v89;
          if (*v57)
          {
            v76 = *(_QWORD *)(*v57 + 8);
            if ((v33 & (v33 - 1)) != 0)
            {
              if (v76 >= v33)
                v76 %= v33;
            }
            else
            {
              v76 &= v33 - 1;
            }
            v75 = (_QWORD *)(*v94 + 8 * v76);
LABEL_166:
            *v75 = v57;
          }
          ++*(_QWORD *)(a1 + 144);
LABEL_168:
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          v4 = a4;
          v8 = (unint64_t)v91;
          v5 = a3;
          if (!*((_QWORD *)&v102 + 1))
            goto LABEL_172;
          v78 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
            if (v99)
LABEL_173:
              v99 = 0;
          }
          else
          {
LABEL_172:
            if (v99)
              goto LABEL_173;
          }
          if (__p.__r_.__value_.__r.__words[2] != v97)
            free((void *)__p.__r_.__value_.__r.__words[2]);
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v80 = v23[16][14];
          if (v80 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v81 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v81, OS_SIGNPOST_INTERVAL_END, v80, "LayerDataRequest", "status=failed", (uint8_t *)&__p, 2u);
            }
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v91, v23);
          v39 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          v9 = &qword_1ECE37000;
          if (!v39)
            goto LABEL_4;
          if (__p.__r_.__value_.__s.__data_[16])
          {
            v40 = *(std::__shared_weak_count **)(v39 + 136);
            if (v40)
            {
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(p_shared_owners);
              while (__stlxr(v42 - 1, p_shared_owners));
LABEL_186:
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            goto LABEL_188;
          }
        }
        else
        {
          *((_BYTE *)v24 + 209) = 0;
          if (!v25)
            goto LABEL_4;
          if (v9[96] != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v35 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
          {
            gdc::LayerDataRequestKey::keysInt32Str(&__p, v6 + 4);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = &__p;
            else
              v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            v104 = v36;
            _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_DEBUG, "Finished layer data request: %s", buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
              dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          }
          v37 = v23[16][14];
          if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v38 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
            if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
            {
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v38, OS_SIGNPOST_INTERVAL_END, v37, "LayerDataRequest", "status=success", (uint8_t *)&__p, 2u);
            }
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)v8, v23);
          v39 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          v9 = &qword_1ECE37000;
          if (!v39)
            goto LABEL_4;
          if (__p.__r_.__value_.__s.__data_[16])
          {
            v40 = *(std::__shared_weak_count **)(v39 + 136);
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              goto LABEL_186;
            }
LABEL_188:
            if (*(_BYTE *)(v39 + 112))
              *(_BYTE *)(v39 + 112) = 0;
            v83 = *(void **)(v39 + 32);
            v9 = &qword_1ECE37000;
            if (v83 != *(void **)(v39 + 48))
              free(v83);
          }
        }
        v18 = (_QWORD *)v39;
        goto LABEL_193;
      }
      v19 = *(_QWORD *)&v12 - 1;
      if (v14.u32[0] < 2uLL)
      {
        while (1)
        {
          v20 = v18[1];
          if (v20 == v13)
          {
            if (v18[2] == v13)
              goto LABEL_75;
          }
          else if ((v20 & v19) != v15)
          {
            goto LABEL_34;
          }
          v18 = (_QWORD *)*v18;
          if (!v18)
            goto LABEL_34;
        }
      }
      while (1)
      {
        v21 = v18[1];
        if (v21 == v13)
          break;
        if (v21 >= *(_QWORD *)&v12)
          v21 %= *(_QWORD *)&v12;
        if (v21 != v15)
          goto LABEL_34;
LABEL_27:
        v18 = (_QWORD *)*v18;
        if (!v18)
          goto LABEL_34;
      }
      if (v18[2] != v13)
        goto LABEL_27;
LABEL_75:
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v12)
          v13 %= *(_QWORD *)&v12;
      }
      else
      {
        v13 &= v19;
      }
      v64 = *(_QWORD **)(v16 + 8 * v13);
      do
      {
        v65 = v64;
        v64 = (_QWORD *)*v64;
      }
      while (v64 != v18);
      if (v65 == v90)
        goto LABEL_138;
      v66 = v65[1];
      if (v14.u32[0] > 1uLL)
      {
        if (v66 >= *(_QWORD *)&v12)
          v66 %= *(_QWORD *)&v12;
      }
      else
      {
        v66 &= v19;
      }
      if (v66 != v13)
      {
LABEL_138:
        if (!*v18)
          goto LABEL_139;
        v71 = *(_QWORD *)(*v18 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v71 >= *(_QWORD *)&v12)
            v71 %= *(_QWORD *)&v12;
        }
        else
        {
          v71 &= v19;
        }
        if (v71 != v13)
LABEL_139:
          *(_QWORD *)(v16 + 8 * v13) = 0;
      }
      v72 = *v18;
      if (*v18)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v73 >= *(_QWORD *)&v12)
            v73 %= *(_QWORD *)&v12;
        }
        else
        {
          v73 &= v19;
        }
        if (v73 != v13)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v73) = v65;
          v72 = *v18;
        }
      }
      *v65 = v72;
      --*(_QWORD *)(a1 + 184);
LABEL_193:
      operator delete(v18);
LABEL_4:
      v6 += 60;
    }
    while (v6 != (unsigned __int16 *)v5);
  }
}

void gdc::LayerDataSource::cancelLayerDataRequest(gdc::LayerDataSource *this, const gdc::LayerDataRequestKey *a2)
{
  NSObject *v4;
  std::string *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  NSObject *v9;
  std::string *p_p;
  const char *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  std::string __p;
  uint8_t buf[4];
  std::string *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v4 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)a2);
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v22 = v5;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_DEBUG, "cancelLayerDataRequest: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v6 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 5, (unsigned __int8 *)a2);
  if (v6)
  {
    v7 = v6;
    v8 = v6[16];
    if (*((_BYTE *)v8 + 209))
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)this + 160, v8[14], v8[14]);
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v9 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)v7[16]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (*((_BYTE *)v7[16] + 209))
        v11 = "y";
      else
        v11 = "n";
      *(_DWORD *)buf = 136315394;
      v22 = p_p;
      v23 = 2080;
      v24 = v11;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Cancelling layer data request: %s, pendingCreation: %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    }
    v12 = v7[16][14];
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v13 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_19F029000, v13, OS_SIGNPOST_INTERVAL_END, v12, "LayerDataRequest", "status=cancelled", (uint8_t *)&__p, 2u);
      }
    }
    v14 = (_QWORD *)*((_QWORD *)this + 59);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    gdc::LayerDataRequestTracker::_processKey(v14, (unsigned __int8 *)a2, (uint64_t *)&__p, 1);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)this + 5, v7);
    v15 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v15)
    {
      if (__p.__r_.__value_.__s.__data_[16])
      {
        v16 = *(std::__shared_weak_count **)(v15 + 136);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (*(_BYTE *)(v15 + 112))
          *(_BYTE *)(v15 + 112) = 0;
        v19 = *(void **)(v15 + 32);
        if (v19 != *(void **)(v15 + 48))
          free(v19);
      }
      operator delete((void *)v15);
    }
  }
}

uint64_t gdc::CameraLimits::CameraLimits(uint64_t a1, double *a2, double *a3, double *a4, long double *a5, _QWORD *a6, double *a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  long double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  double v25;
  float v26;
  double v27;
  double v28;
  float v29;
  double v30;
  double v31;
  long double v32;
  long double v33;
  long double v34;
  double v35;
  double v36;
  double v37;
  long double v38;
  double v39;
  double v40;
  long double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  long double v48;
  long double v49;
  double v50;
  long double v51;
  double v52;
  long double v53;
  long double v54;
  long double v55;
  long double v56;
  float v57;
  float v58;
  float v59;
  float v61;
  double v62;

  *(double *)a1 = a9;
  *(_QWORD *)(a1 + 8) = *a6;
  v18 = cos(*a5);
  v19 = *(double *)(a8 + 16);
  v20 = 0.0;
  v21 = 0.0;
  if (v19 > 0.0)
    v21 = log2(*(double *)(a8 + 8) / v19);
  v62 = v18;
  v22 = *(float *)a8;
  v61 = fminf(fmaxf(*(float *)a8 + v21, 1.0), 25.0);
  v23 = *(double *)(a10 + 16);
  if (v23 > 0.0)
    v20 = log2(*(double *)(a10 + 8) / v23);
  v24 = fminf(fmaxf(*(float *)a10 + v20, 1.0), 25.0);
  v25 = *a3 * 0.5;
  v26 = v25;
  v27 = cosf(v26);
  v28 = *(double *)a6;
  v29 = *(double *)a6;
  v30 = cosf(v29);
  v31 = exp2(v24);
  v32 = tan(*a4 * 0.5);
  v33 = v32 + v32;
  v34 = (v32 + v32) * v27 * v31;
  *(float *)&v32 = v28 - v25;
  v35 = v62 * cosf(*(float *)&v32) / (v34 * v30);
  v36 = (1.0 - exp2((float)-v22)) / v33;
  v37 = exp2((float)-v61) / v33;
  v38 = *a7;
  v39 = *a7 + v25;
  if (v39 < 1.57079633)
  {
    v40 = cos(v25);
    v41 = cos(v39) * v37;
    v37 = v41 / (v40 * cos(v38));
  }
  v42 = fmin(v36, v37);
  v43 = fmax(v35, *(double *)(a11 + 8));
  if (!*(_BYTE *)a11)
    v43 = v35;
  if (*(_BYTE *)(a11 + 16))
  {
    v44 = fmax(v43, *(double *)(a11 + 24));
    v42 = fmin(v44, v42);
    v36 = fmin(v44, v36);
  }
  v45 = fmin(v42, v43);
  *(double *)(a1 + 48) = v45;
  *(double *)(a1 + 56) = v42;
  *(double *)(a1 + 64) = v36;
  v46 = *a2;
  v47 = cos(v46 + v46) * -559.82 + 111132.92;
  v48 = v47 + cos(v46 * 4.0) * 1.175;
  v49 = v48 + cos(v46 * 6.0) * -0.0023;
  v50 = v46 * 0.5;
  v51 = tan(v50 + 0.78103484);
  v52 = log(v51);
  v53 = tan(v50 + 0.789761487);
  v54 = fabs((log(v53) - v52) * 0.159154943) / v49;
  *(long double *)(a1 + 32) = v45 * v62 / v54;
  *(long double *)(a1 + 40) = v42 * v62 / v54;
  v55 = tan(*a4 * 0.5);
  v56 = v55 + v55;
  v57 = log2((v55 + v55) * v45);
  *(float *)(a1 + 16) = fminf(fmaxf(-v57, 1.0), 25.0);
  v58 = log2(v56 * v42);
  *(float *)(a1 + 20) = fminf(fmaxf(-v58, 1.0), 25.0);
  v59 = log2(v56 * v36);
  *(float *)(a1 + 24) = fminf(fmaxf(-v59, 1.0), 25.0);
  return a1;
}

void ecs2::UtilityContext::toggleTask(ecs2::UtilityContext *this, int a2, int a3)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;

  v4 = (unsigned __int16 *)*((_QWORD *)this + 15);
  v5 = (unsigned __int16 *)*((_QWORD *)this + 16);
  if (v4 != v5)
  {
    while (*v4 != a2)
    {
      v4 += 6;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  if (v4 == v5)
LABEL_7:
    v6 = 0xFFFFFFFF00000000;
  else
    v6 = *(_QWORD *)(v4 + 2);
  if (v6 < 0xFFFFFFFF00000000 || (_DWORD)v6)
  {
    v7 = (_QWORD *)gdc::Registry::storage<ecs2::TaskDisabled>(*((_QWORD *)this + 25));
    v8 = v7;
    if (a3)
    {
      gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::remove(v7, v6);
      return;
    }
    v27 = v6;
    v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v7 + 4, (uint64_t)&v27);
    if ((v10 & 1) != 0)
    {
      v15 = (_BYTE *)v8[11];
      v14 = v8[12];
      if ((unint64_t)v15 >= v14)
      {
        v17 = (char *)v8[10];
        v18 = v15 - v17;
        v19 = v15 - v17 + 1;
        if (v19 < 0)
          goto LABEL_40;
        v20 = v14 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)operator new(v21);
        else
          v22 = 0;
        v23 = &v22[v21];
        v16 = (uint64_t)&v22[v18 + 1];
        v24 = (char *)(v17 - v15);
        if (v17 == v15)
          v24 = 0;
        v8[10] = &v22[v18 + (_QWORD)v24];
        v8[11] = v16;
        v8[12] = v23;
        if (v17)
          operator delete(v17);
      }
      else
      {
        v16 = (uint64_t)(v15 + 1);
      }
      v8[11] = v16;
      v11 = v8[31];
    }
    else
    {
      v11 = v8[31];
      if (v8[10] + (((uint64_t)v9 - v8[7]) >> 3) != v8[11])
      {
        v12 = (_QWORD *)v8[16];
        if (!v12)
          return;
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v11;
          v13 = v12[6];
          if (!v13)
            break;
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v13 + 48))(v13, &v28, &v29);
          v12 = (_QWORD *)*v12;
          if (!v12)
            return;
        }
LABEL_39:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_40:
        abort();
      }
    }
    v25 = (_QWORD *)v8[22];
    if (!v25)
      return;
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v11;
      v26 = v25[6];
      if (!v26)
        break;
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v26 + 48))(v26, &v28, &v29);
      v25 = (_QWORD *)*v25;
      if (!v25)
        return;
    }
    goto LABEL_39;
  }
}

void geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge(uint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t ***v7;
  uint64_t **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  unsigned __int8 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  BOOL v28;
  _BOOL4 v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  _BOOL4 v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t **v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  BOOL v45;
  _BOOL4 v46;
  _BOOL4 v47;

  v7 = (uint64_t ***)(a1 + 1);
  v6 = (unsigned __int8 *)a1[1];
  v8 = (uint64_t **)(a1 + 1);
  v9 = (unsigned __int8 *)(a1 + 1);
  if (v6)
  {
    v10 = *a2;
    v11 = *((unsigned __int8 *)a2 + 24);
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v12 = *((_QWORD *)v6 + 4);
        v13 = v9[56];
        v14 = v11 < v13;
        if (v10 != v12)
          v14 = v10 < v12;
        if (!v14)
          break;
        v6 = *(unsigned __int8 **)v9;
        v8 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_13;
      }
      v15 = v13 < v11;
      v16 = v10 == v12 ? v15 : v12 < v10;
      if (v16 != 1)
        break;
      v6 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v8 = (uint64_t **)(v9 + 8);
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    v17 = v9;
    v9 = (unsigned __int8 *)operator new(0x58uLL);
    v18 = *((_OWORD *)a2 + 1);
    *((_OWORD *)v9 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v9 + 3) = v18;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_QWORD *)v9 + 8) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v17;
    *v8 = (uint64_t *)v9;
    v19 = *(_QWORD *)*a1;
    v20 = (uint64_t *)v9;
    if (v19)
    {
      *a1 = v19;
      v20 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v20);
    ++a1[2];
  }
  v22 = (unint64_t *)*((_QWORD *)v9 + 8);
  v21 = (char *)*((_QWORD *)v9 + 9);
  v23 = (uint64_t)(v9 + 64);
  if (v22 != (unint64_t *)v21)
  {
    v24 = *a3;
    v25 = *((unsigned __int8 *)a3 + 24);
    while (1)
    {
      v26 = *v22;
      v27 = *((unsigned __int8 *)v22 + 24);
      v28 = v25 < v27;
      if (v24 != *v22)
        v28 = v24 < *v22;
      if (v28)
        break;
      v29 = v25 >= v27;
      v30 = v27 >= v25;
      v31 = v26 >= v24;
      v32 = v24 == v26;
      v33 = v24 >= v26;
      if (v32)
      {
        v34 = v30;
      }
      else
      {
        v29 = v33;
        v34 = v31;
      }
      if (v29 && v34)
        break;
      v22 += 4;
      if (v22 == (unint64_t *)v21)
        goto LABEL_46;
    }
  }
  if (v22 == (unint64_t *)v21)
  {
LABEL_46:
    std::vector<gdc::LogicExecutionNode>::insert(v23, v21, a3);
    v35 = *a3;
    v41 = *v7;
    if (*v7)
      goto LABEL_34;
    goto LABEL_47;
  }
  v35 = *a3;
  v36 = *((unsigned __int8 *)v22 + 24);
  v37 = *((unsigned __int8 *)a3 + 24);
  v38 = v36 >= v37;
  v39 = v37 >= v36;
  v40 = *v22 >= *a3;
  if (*v22 == *a3)
    v40 = v38;
  else
    v39 = *a3 >= *v22;
  if (!v40)
  {
    v21 = (char *)v22;
    goto LABEL_46;
  }
  v21 = (char *)v22;
  if (!v39)
    goto LABEL_46;
  v41 = *v7;
  if (*v7)
  {
LABEL_34:
    v42 = *((unsigned __int8 *)a3 + 24);
    while (1)
    {
      v43 = (unint64_t)v41[4];
      v44 = *((unsigned __int8 *)v41 + 56);
      v45 = v42 < v44;
      if (v35 != v43)
        v45 = v35 < v43;
      if (!v45)
      {
        v46 = v44 < v42;
        if (v35 == v43)
          v47 = v46;
        else
          v47 = v43 < v35;
        if (!v47)
          return;
        ++v41;
      }
      v41 = (uint64_t **)*v41;
      if (!v41)
        goto LABEL_48;
    }
  }
LABEL_47:
  LOBYTE(v42) = *((_BYTE *)a3 + 24);
LABEL_48:
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>(a1, v35, v42, a3, 0, 0);
}

void std::vector<gdc::LogicExecutionNode>::insert(uint64_t a1, char *__src, _OWORD *a3)
{
  _OWORD *v3;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  char *v32;
  char *v33;
  int64_t v34;
  char *v35;

  v3 = a3;
  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      v19 = a3[1];
      *(_OWORD *)__src = *a3;
      *((_OWORD *)__src + 1) = v19;
      *(_QWORD *)(a1 + 8) = __src + 32;
    }
    else
    {
      v8 = __src + 32;
      v9 = v6 - 32;
      v10 = *(_OWORD **)(a1 + 8);
      if ((unint64_t)v6 >= 0x20)
      {
        do
        {
          v11 = *(_OWORD *)v9;
          v12 = *((_OWORD *)v9 + 1);
          v9 += 32;
          *v10 = v11;
          v10[1] = v12;
          v10 += 2;
        }
        while (v9 < v6);
      }
      *(_QWORD *)(a1 + 8) = v10;
      if (v6 != v8)
        memmove(&v6[-32 * ((v6 - v8) >> 5)], __src, v6 - v8 - 7);
      if (__src <= (char *)v3)
        v3 += 2 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
      v13 = *v3;
      *(_OWORD *)(__src + 9) = *(_OWORD *)((char *)v3 + 9);
      *(_OWORD *)__src = v13;
    }
    return;
  }
  v14 = *(char **)a1;
  v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 5) + 1;
  if (v15 >> 59)
    abort();
  v16 = v7 - (_QWORD)v14;
  if (v16 >> 4 > v15)
    v15 = v16 >> 4;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
    v17 = 0x7FFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 59)
      goto LABEL_41;
    v18 = (char *)operator new(32 * v17);
  }
  else
  {
    v18 = 0;
  }
  v20 = __src - v14;
  v21 = (__src - v14) >> 5;
  v22 = &v18[32 * v21];
  v23 = &v18[32 * v17];
  if (v21 == v17)
  {
    if (v20 >= 1)
    {
      if (v21 >= -1)
        v24 = v21 + 1;
      else
        v24 = v21 + 2;
      v22 -= 32 * (v24 >> 1);
      goto LABEL_32;
    }
    v25 = v20 >> 4;
    if (v14 == __src)
      v25 = 1;
    if (!(v25 >> 59))
    {
      v26 = 32 * v25;
      v22 = (char *)operator new(32 * v25);
      v23 = &v22[v26];
      if (v18)
      {
        operator delete(v18);
        v14 = *(char **)a1;
      }
      goto LABEL_32;
    }
LABEL_41:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_32:
  v27 = v3[1];
  *(_OWORD *)v22 = *v3;
  *((_OWORD *)v22 + 1) = v27;
  v28 = v22;
  if (v14 != __src)
  {
    v29 = __src;
    v30 = v22;
    do
    {
      v31 = *((_OWORD *)v29 - 2);
      v28 = (char *)(v30 - 2);
      *(_OWORD *)((char *)v30 - 23) = *(_OWORD *)(v29 - 23);
      *(v30 - 2) = v31;
      v29 -= 32;
      v30 -= 2;
    }
    while (v29 != v14);
  }
  v32 = v22 + 32;
  v33 = *(char **)(a1 + 8);
  v34 = v33 - __src;
  if (v33 != __src)
    memmove(v32, __src, v34 - 7);
  v35 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = &v32[v34];
  *(_QWORD *)(a1 + 16) = v23;
  if (v35)
    operator delete(v35);
}

uint64_t geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(uint64_t a1, unint64_t *a2, char **a3, _QWORD *a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t result;
  unint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  _BOOL4 v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  BOOL v44;
  _BOOL4 v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  _BOOL4 v52;
  BOOL v53;
  uint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  unsigned __int8 *v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  unsigned int v61;
  BOOL v62;
  _BOOL4 v63;
  BOOL v64;
  BOOL v65;
  _BOOL4 v66;
  BOOL v67;
  unsigned int v68;
  _BOOL4 v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  _BOOL4 v73;
  _BOOL4 v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unsigned int v83;
  _BOOL4 v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  char v88;
  __int16 v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  int64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  _BOOL4 v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  __int128 v108;
  char v109;
  int v110;
  __int16 v111;
  char v112;

  v9 = *a3;
  v8 = a3[1];
  v10 = *a3;
  if (*a3 != v8)
  {
    v11 = *a2;
    v12 = *((unsigned __int8 *)a2 + 24);
    v10 = *a3;
    while (1)
    {
      v13 = *(_QWORD *)v10;
      v14 = v10[24];
      v15 = v11 >= *(_QWORD *)v10;
      if (v11 == *(_QWORD *)v10)
        v15 = v12 >= v14;
      v16 = v11 == v13 ? v14 >= v12 : *(_QWORD *)v10 >= v11;
      if (v15 && v16)
        break;
      v17 = v12 < v14;
      v53 = v11 == v13;
      v18 = v11 < v13;
      if (v53)
        v18 = v17;
      if (!v18)
      {
        v10 += 32;
        if (v10 != v8)
          continue;
      }
      goto LABEL_30;
    }
  }
  if (v10 == v8)
  {
LABEL_30:
    if (v9 != v8)
    {
      v31 = *a2;
      v32 = *((unsigned __int8 *)a2 + 24);
      while (1)
      {
        v33 = *(_QWORD *)v9;
        v34 = v9[24];
        v35 = v32 < v34;
        if (v31 != *(_QWORD *)v9)
          v35 = v31 < *(_QWORD *)v9;
        if (v35)
          break;
        v36 = v32 >= v34;
        v37 = v34 >= v32;
        v38 = v33 >= v31;
        v53 = v31 == v33;
        v39 = v31 >= v33;
        if (v53)
        {
          v40 = v37;
        }
        else
        {
          v36 = v39;
          v40 = v38;
        }
        if (v36 && v40)
          break;
        v9 += 32;
        if (v9 == v8)
          goto LABEL_50;
      }
    }
    if (v9 == v8
      || ((v41 = v9[24],
           v42 = *((unsigned __int8 *)a2 + 24),
           v43 = v41 >= v42,
           v44 = v42 >= v41,
           *(_QWORD *)v9 != *a2)
        ? (v45 = *(_QWORD *)v9 >= *a2)
        : (v45 = v43),
          *(_QWORD *)v9 != *a2 ? (v46 = *a2 >= *(_QWORD *)v9) : (v46 = v44),
          (v8 = v9, !v45) || !v46))
    {
LABEL_50:
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a3, v8, a2);
    }
    v47 = *(_QWORD *)(a1 + 8);
    if (!v47)
      return 1;
    v48 = *a2;
    v49 = *((unsigned __int8 *)a2 + 24);
    v50 = a1 + 8;
    do
    {
      v51 = *(_QWORD *)(v47 + 32);
      v53 = v51 == v48;
      v52 = v51 < v48;
      if (v53)
        v52 = *(unsigned __int8 *)(v47 + 56) < v49;
      v53 = !v52;
      if (v52)
        v54 = (uint64_t *)(v47 + 8);
      else
        v54 = (uint64_t *)v47;
      if (v53)
        v50 = v47;
      v47 = *v54;
    }
    while (*v54);
    if (v50 == a1 + 8)
      return 1;
    v55 = *(_QWORD *)(v50 + 32);
    v53 = v48 == v55;
    v56 = v48 >= v55;
    if (v53)
      v56 = v49 >= *(unsigned __int8 *)(v50 + 56);
    if (!v56)
      return 1;
    v57 = (unsigned __int8 *)*a4;
    v59 = a4 + 1;
    v58 = (char *)a4[1];
    if ((char *)*a4 != v58)
    {
      while (1)
      {
        v60 = *(_QWORD *)v57;
        v61 = v57[24];
        v62 = v49 < v61;
        if (v48 != *(_QWORD *)v57)
          v62 = v48 < *(_QWORD *)v57;
        if (v62)
          break;
        v63 = v49 >= v61;
        v64 = v61 >= v49;
        v65 = v60 >= v48;
        v53 = v48 == v60;
        v66 = v48 >= v60;
        if (v53)
        {
          v67 = v64;
        }
        else
        {
          v63 = v66;
          v67 = v65;
        }
        if (v63 && v67)
          break;
        v57 += 32;
        if (v57 == (unsigned __int8 *)v58)
          goto LABEL_86;
      }
    }
    if (v57 == (unsigned __int8 *)v58)
      goto LABEL_86;
    v68 = v57[24];
    v69 = v68 >= v49;
    v70 = v49 >= v68;
    v71 = v48 >= *(_QWORD *)v57;
    v72 = *(_QWORD *)v57 == v48;
    v73 = *(_QWORD *)v57 >= v48;
    v74 = v72 ? v69 : v73;
    v75 = v72 ? v70 : v71;
    v58 = (char *)v57;
    if (!v74 || !v75)
LABEL_86:
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a4, v58, a2);
    v76 = *(uint64_t **)(v50 + 64);
    v77 = *(uint64_t **)(v50 + 72);
    if (v76 == v77)
    {
      v19 = (unsigned __int8 *)*a4;
      v90 = (unsigned __int8 *)a4[1];
      if ((unsigned __int8 *)*a4 == v90)
        return 1;
    }
    else
    {
      do
      {
        v78 = *v76;
        v79 = *((unsigned __int8 *)v76 + 24);
        v80 = *a3;
        v81 = a3[1];
        if (*a3 != v81)
        {
          while (1)
          {
            v82 = *(_QWORD *)v80;
            v83 = v80[24];
            v84 = v78 >= *(_QWORD *)v80;
            if (v78 == *(_QWORD *)v80)
              v84 = v79 >= v83;
            v85 = v78 == v82 ? v83 >= v79 : *(_QWORD *)v80 >= v78;
            if (v84 && v85)
              break;
            v86 = v79 < v83;
            v53 = v78 == v82;
            v87 = v78 < v82;
            if (v53)
              v87 = v86;
            if (!v87)
            {
              v80 += 32;
              if (v80 != v81)
                continue;
            }
            goto LABEL_105;
          }
        }
        if (v80 == v81)
        {
LABEL_105:
          v107 = *v76;
          v108 = *(_OWORD *)(v76 + 1);
          v109 = v79;
          v88 = *((_BYTE *)v76 + 31);
          v89 = *(_WORD *)((char *)v76 + 29);
          v110 = *(_DWORD *)((char *)v76 + 25);
          v111 = v89;
          v112 = v88;
          result = geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(a1, &v107, a3, a4);
          if (!(_DWORD)result)
            return result;
        }
        v19 = (unsigned __int8 *)*a4;
        v90 = (unsigned __int8 *)a4[1];
        v91 = (unsigned __int8 *)*a4;
        if ((unsigned __int8 *)*a4 != v90)
        {
          v91 = (unsigned __int8 *)*a4;
          while (1)
          {
            v92 = *(_QWORD *)v91;
            v93 = v91[24];
            v94 = v78 >= *(_QWORD *)v91;
            if (v78 == *(_QWORD *)v91)
              v94 = v79 >= v93;
            v95 = v78 == v92 ? v93 >= v79 : *(_QWORD *)v91 >= v78;
            if (v94 && v95)
              break;
            v96 = v79 < v93;
            v53 = v78 == v92;
            v97 = v78 < v92;
            if (v53)
              v97 = v96;
            if (!v97)
            {
              v91 += 32;
              if (v91 != v90)
                continue;
            }
            goto LABEL_90;
          }
        }
        if (v91 != v90)
          return 0;
LABEL_90:
        v76 += 4;
      }
      while (v76 != v77);
      v59 = a4 + 1;
      if (v19 == v90)
        return 1;
    }
    v99 = *a2;
    v100 = *((unsigned __int8 *)a2 + 24);
    result = 1;
    while (1)
    {
      v101 = *(_QWORD *)v19;
      v102 = v19[24];
      v103 = v99 >= *(_QWORD *)v19;
      if (v99 == *(_QWORD *)v19)
        v103 = v100 >= v102;
      v104 = v99 == v101 ? v102 >= v100 : *(_QWORD *)v19 >= v99;
      if (v103 && v104)
        break;
      v105 = v100 < v102;
      v53 = v99 == v101;
      v106 = v99 < v101;
      if (v53)
        v106 = v105;
      if (!v106)
      {
        v19 += 32;
        if (v19 != v90)
          continue;
      }
      return result;
    }
    if (v19 == v90)
      return 1;
    v98 = v90 - (v19 + 32);
    if (v90 != v19 + 32)
      memmove(v19, v19 + 32, v98 - 7);
    v21 = v59;
    goto LABEL_123;
  }
  v19 = (unsigned __int8 *)*a4;
  v21 = a4 + 1;
  v20 = (unsigned __int8 *)a4[1];
  if ((unsigned __int8 *)*a4 != v20)
  {
    v22 = *a2;
    v23 = *((unsigned __int8 *)a2 + 24);
    result = 1;
    while (1)
    {
      v25 = *(_QWORD *)v19;
      v26 = v19[24];
      v27 = v22 >= *(_QWORD *)v19;
      if (v22 == *(_QWORD *)v19)
        v27 = v23 >= v26;
      v28 = v22 == v25 ? v26 >= v23 : *(_QWORD *)v19 >= v22;
      if (v27 && v28)
        break;
      v29 = v23 < v26;
      v53 = v22 == v25;
      v30 = v22 < v25;
      if (v53)
        v30 = v29;
      if (!v30)
      {
        v19 += 32;
        if (v19 != v20)
          continue;
      }
      return result;
    }
  }
  if (v19 != v20)
  {
    v98 = v20 - (v19 + 32);
    if (v20 != v19 + 32)
      memmove(v19, v19 + 32, v98 - 7);
LABEL_123:
    *v21 = &v19[v98];
  }
  return 1;
}

void geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(uint64_t a1, unint64_t *a2, char **a3, char **a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  _BOOL4 v24;
  BOOL v25;
  BOOL v26;
  _BOOL4 v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  BOOL v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t *v42;
  unint64_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t *v46;
  uint64_t *i;
  char v48;
  __int16 v49;
  unint64_t v50;
  unsigned int v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unsigned int v55;
  _BOOL4 v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  __int128 v74;
  char v75;
  int v76;
  __int16 v77;
  char v78;

  v9 = *a3;
  v8 = a3[1];
  v10 = *a3;
  if (*a3 != v8)
  {
    v11 = *a2;
    v12 = *((unsigned __int8 *)a2 + 24);
    v10 = *a3;
    while (1)
    {
      v13 = *(_QWORD *)v10;
      v14 = v10[24];
      v15 = v11 >= *(_QWORD *)v10;
      if (v11 == *(_QWORD *)v10)
        v15 = v12 >= v14;
      v16 = v11 == v13 ? v14 >= v12 : *(_QWORD *)v10 >= v11;
      if (v15 && v16)
        break;
      v17 = v12 < v14;
      v41 = v11 == v13;
      v18 = v11 < v13;
      if (v41)
        v18 = v17;
      if (!v18)
      {
        v10 += 32;
        if (v10 != v8)
          continue;
      }
      goto LABEL_16;
    }
  }
  if (v10 == v8)
  {
LABEL_16:
    if (v9 != v8)
    {
      v19 = *a2;
      v20 = *((unsigned __int8 *)a2 + 24);
      while (1)
      {
        v21 = *(_QWORD *)v9;
        v22 = v9[24];
        v23 = v20 < v22;
        if (v19 != *(_QWORD *)v9)
          v23 = v19 < *(_QWORD *)v9;
        if (v23)
          break;
        v24 = v20 >= v22;
        v25 = v22 >= v20;
        v26 = v21 >= v19;
        v41 = v19 == v21;
        v27 = v19 >= v21;
        if (v41)
        {
          v28 = v25;
        }
        else
        {
          v24 = v27;
          v28 = v26;
        }
        if (v24 && v28)
          break;
        v9 += 32;
        if (v9 == v8)
          goto LABEL_36;
      }
    }
    if (v9 == v8
      || ((v29 = v9[24],
           v30 = *((unsigned __int8 *)a2 + 24),
           v31 = v29 >= v30,
           v32 = v30 >= v29,
           *(_QWORD *)v9 != *a2)
        ? (v33 = *(_QWORD *)v9 >= *a2)
        : (v33 = v31),
          *(_QWORD *)v9 != *a2 ? (v34 = *a2 >= *(_QWORD *)v9) : (v34 = v32),
          (v8 = v9, !v33) || !v34))
    {
LABEL_36:
      std::vector<gdc::LogicExecutionNode>::insert((uint64_t)a3, v8, a2);
    }
    v35 = *(_QWORD *)(a1 + 8);
    if (v35)
    {
      v36 = *a2;
      v37 = *((unsigned __int8 *)a2 + 24);
      v38 = a1 + 8;
      do
      {
        v39 = *(_QWORD *)(v35 + 32);
        v41 = v39 == v36;
        v40 = v39 < v36;
        if (v41)
          v40 = *(unsigned __int8 *)(v35 + 56) < v37;
        v41 = !v40;
        if (v40)
          v42 = (uint64_t *)(v35 + 8);
        else
          v42 = (uint64_t *)v35;
        if (v41)
          v38 = v35;
        v35 = *v42;
      }
      while (*v42);
      if (v38 != a1 + 8)
      {
        v43 = *(_QWORD *)(v38 + 32);
        v44 = v37 >= *(unsigned __int8 *)(v38 + 56);
        v41 = v36 == v43;
        v45 = v36 >= v43;
        if (v41)
          v45 = v44;
        if (v45)
        {
          v46 = *(uint64_t **)(v38 + 64);
          for (i = *(uint64_t **)(v38 + 72); v46 != i; v46 += 4)
          {
            v50 = *v46;
            v51 = *((unsigned __int8 *)v46 + 24);
            v52 = *a3;
            v53 = a3[1];
            if (*a3 != v53)
            {
              while (1)
              {
                v54 = *(_QWORD *)v52;
                v55 = v52[24];
                v56 = v50 >= *(_QWORD *)v52;
                if (v50 == *(_QWORD *)v52)
                  v56 = v51 >= v55;
                v57 = v50 == v54 ? v55 >= v51 : *(_QWORD *)v52 >= v50;
                if (v56 && v57)
                  break;
                v58 = v51 < v55;
                v41 = v50 == v54;
                v59 = v50 < v54;
                if (v41)
                  v59 = v58;
                if (!v59)
                {
                  v52 += 32;
                  if (v52 != v53)
                    continue;
                }
                goto LABEL_54;
              }
            }
            if (v52 == v53)
            {
LABEL_54:
              v73 = *v46;
              v74 = *(_OWORD *)(v46 + 1);
              v75 = v51;
              v48 = *((_BYTE *)v46 + 31);
              v49 = *(_WORD *)((char *)v46 + 29);
              v76 = *(_DWORD *)((char *)v46 + 25);
              v77 = v49;
              v78 = v48;
              geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(a1, &v73, a3, a4);
            }
          }
        }
      }
    }
    v61 = a4[1];
    v60 = (unint64_t)a4[2];
    if ((unint64_t)v61 >= v60)
    {
      v64 = *a4;
      v65 = (v61 - *a4) >> 5;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 59)
        abort();
      v67 = v60 - (_QWORD)v64;
      if (v67 >> 4 > v66)
        v66 = v67 >> 4;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
        v68 = 0x7FFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v69 = (char *)operator new(32 * v68);
      }
      else
      {
        v69 = 0;
      }
      v70 = &v69[32 * v65];
      v71 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v70 = *(_OWORD *)a2;
      *((_OWORD *)v70 + 1) = v71;
      v63 = v70 + 32;
      if (v61 != v64)
      {
        do
        {
          v72 = *((_OWORD *)v61 - 2);
          *(_OWORD *)(v70 - 23) = *(_OWORD *)(v61 - 23);
          *((_OWORD *)v70 - 2) = v72;
          v70 -= 32;
          v61 -= 32;
        }
        while (v61 != v64);
        v61 = *a4;
      }
      *a4 = v70;
      a4[1] = v63;
      a4[2] = &v69[32 * v68];
      if (v61)
        operator delete(v61);
    }
    else
    {
      v62 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v61 = *(_OWORD *)a2;
      *((_OWORD *)v61 + 1) = v62;
      v63 = v61 + 32;
    }
    a4[1] = v63;
  }
}

void gdc::NonFlatTileSelector::~NonFlatTileSelector(gdc::NonFlatTileSelector *this)
{
  gdc::NonFlatTileSelector::~NonFlatTileSelector(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  gdc::NonFlatTileSelector *v10;
  uint64_t v11;
  uint64_t v12;
  gdc::NonFlatTileSelector *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  gdc::NonFlatTileSelector *v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E42B16F8;
  if (*((_QWORD *)this + 27))
  {
    v2 = (char *)this + 200;
    v4 = *((_QWORD *)this + 25);
    v3 = (char *)*((_QWORD *)this + 26);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 27) = 0;
    if (v3 != (char *)this + 200)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 22);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v9)
    operator delete(v9);
  if (*((_QWORD *)this + 18))
  {
    v11 = *((_QWORD *)this + 16);
    v10 = (gdc::NonFlatTileSelector *)*((_QWORD *)this + 17);
    v12 = *(_QWORD *)v10;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    *((_QWORD *)this + 18) = 0;
    if (v10 != (gdc::NonFlatTileSelector *)((char *)this + 128))
    {
      do
      {
        v13 = (gdc::NonFlatTileSelector *)*((_QWORD *)v10 + 1);
        operator delete(v10);
        v10 = v13;
      }
      while (v13 != (gdc::NonFlatTileSelector *)((char *)this + 128));
    }
  }
  v14 = (_QWORD *)*((_QWORD *)this + 13);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
    operator delete(v16);
  v17 = (gdc::NonFlatTileSelector *)*((_QWORD *)this + 9);
  if (v17 == (gdc::NonFlatTileSelector *)((char *)this + 48))
  {
    v18 = 4;
    v17 = (gdc::NonFlatTileSelector *)((char *)this + 48);
  }
  else
  {
    if (!v17)
      return;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
}

double gdc::NonFlatTileSelector::createDebugNode@<D0>(uint64_t a1@<X8>)
{
  double result;

  strcpy((char *)a1, "Non Flat Tile Selector");
  *(_BYTE *)(a1 + 23) = 22;
  *(_BYTE *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  return result;
}

char *std::vector<gdc::LayerDataIndex>::__emplace_back_slow_path<gdc::LayerKeyPair &,unsigned long &>(void **a1, char *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  char v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  v3 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0xE38E38E38E38E3)
    v8 = 0x1C71C71C71C71C7;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 > 0x1C71C71C71C71C7)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = operator new(144 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (char *)&v9[18 * v3];
  v23 = *a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v24, (uint64_t)(a2 + 8));
  v27 = 0;
  if (a2[96])
  {
    v28 = *((_DWORD *)a2 + 25);
    v27 = 1;
  }
  v29 = *((_QWORD *)a2 + 13);
  v30 = *((_WORD *)a2 + 56);
  v31 = *(_QWORD *)(a2 + 116);
  v11 = *a3;
  *v10 = v23;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 8), (uint64_t)&v24);
  v10[96] = 0;
  v12 = v27;
  if (v27)
  {
    *((_DWORD *)v10 + 25) = v28;
    v10[96] = 1;
  }
  *((_QWORD *)v10 + 13) = v29;
  *((_WORD *)v10 + 56) = v30;
  *(_QWORD *)(v10 + 116) = v31;
  v9[18 * v3 + 17] = v11;
  if (v12)
    v27 = 0;
  if (v25 != v26)
    free(v25);
  v13 = (char *)&v9[18 * v8];
  v14 = v10 + 144;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v10[v17];
      v19 = &v15[v17];
      v10[v17 - 144] = v15[v17 - 144];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v10[v17 - 136], (uint64_t)&v15[v17 - 136]);
      v10[v17 - 48] = 0;
      if (v15[v17 - 48])
      {
        *((_DWORD *)v18 - 11) = *((_DWORD *)v19 - 11);
        *(v18 - 48) = 1;
      }
      *((_QWORD *)v18 - 5) = *((_QWORD *)v19 - 5);
      *((_WORD *)v18 - 16) = *((_WORD *)v19 - 16);
      *(_QWORD *)(v18 - 28) = *(_QWORD *)(v19 - 28);
      *((_QWORD *)v18 - 1) = *((_QWORD *)v19 - 1);
      v17 -= 144;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = &v10[v17];
    a1[1] = v14;
    a1[2] = v13;
    while (v20 != v15)
    {
      if (*(v20 - 48))
        *(v20 - 48) = 0;
      v21 = (void *)*((_QWORD *)v20 - 16);
      if (v21 != *((void **)v20 - 14))
        free(v21);
      v20 -= 144;
    }
  }
  if (v15)
    operator delete(v15);
  return v10 + 144;
}

void std::swap[abi:nn180100]<gdc::LayerDataIndex>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  void *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  char v38;
  _OWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  void *v45;
  char *v46;
  void *v47;
  __int128 v48;
  char v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v43 = *(_BYTE *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v44, a1 + 8);
  v49 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v50 = *(_DWORD *)(a1 + 100);
    v49 = 1;
  }
  v51 = *(_QWORD *)(a1 + 104);
  LOWORD(v52) = *(_WORD *)(a1 + 112);
  *(_QWORD *)((char *)&v52 + 4) = *(_QWORD *)(a1 + 116);
  v54 = *(_QWORD *)(a1 + 136);
  gdc::LayerDataRequestKey::operator=(a1, a2);
  v4 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)a2 = v43;
  *(_WORD *)(a2 + 8) = v44;
  if (&v43 != (char *)a2)
  {
    v5 = (char *)(a2 + 48);
    v6 = *(void **)(a2 + 16);
    if (v6 != *(void **)(a2 + 32))
      free(v6);
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = 32;
    v7 = (char *)v45;
    v8 = v46;
    v9 = v46 - (_BYTE *)v45;
    if ((unint64_t)(v46 - (_BYTE *)v45) < 0x21)
    {
LABEL_27:
      if (v7 == v8)
      {
LABEL_45:
        *(_QWORD *)(a2 + 24) = &v5[v9];
        goto LABEL_46;
      }
      if (v9 < 8)
      {
        v28 = v5;
        goto LABEL_43;
      }
      if ((unint64_t)(v5 - v7) < 0x20)
      {
        v28 = v5;
        goto LABEL_43;
      }
      if (v9 >= 0x20)
      {
        v27 = v9 & 0xFFFFFFFFFFFFFFE0;
        v29 = (__int128 *)(v7 + 16);
        v30 = v5 + 16;
        v31 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v32 = *v29;
          *(v30 - 1) = *(v29 - 1);
          *v30 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 32;
        }
        while (v31);
        if (v9 == v27)
          goto LABEL_44;
        if ((v9 & 0x18) == 0)
        {
          v7 += v27;
          v28 = &v5[v27];
          goto LABEL_43;
        }
      }
      else
      {
        v27 = 0;
      }
      v33 = v9 & 0xFFFFFFFFFFFFFFF8;
      v28 = &v5[v9 & 0xFFFFFFFFFFFFFFF8];
      v34 = v27 - (v9 & 0xFFFFFFFFFFFFFFF8);
      v35 = (uint64_t *)&v7[v27];
      v36 = &v5[v27];
      do
      {
        v37 = *v35++;
        *(_QWORD *)v36 = v37;
        v36 += 8;
        v34 += 8;
      }
      while (v34);
      if (v9 == v33)
        goto LABEL_44;
      v7 += v33;
      do
      {
LABEL_43:
        v38 = *v7++;
        *v28++ = v38;
      }
      while (v7 != v8);
LABEL_44:
      v5 = *(char **)(a2 + 24);
      goto LABEL_45;
    }
    if (v9 <= 0x40)
      v10 = 64;
    else
      v10 = v46 - (_BYTE *)v45;
    v11 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
    v5 = v11;
    v12 = *(char **)(a2 + 16);
    v13 = *(char **)(a2 + 24);
    if (v12 == v13)
    {
LABEL_26:
      *(_QWORD *)(a2 + 16) = v11;
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)(a2 + 40) = v10;
      goto LABEL_27;
    }
    v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) < 8)
    {
      v15 = v11;
    }
    else
    {
      v15 = v11;
      if ((unint64_t)(v11 - v12) >= 0x20)
      {
        if (v14 < 0x20)
        {
          v16 = 0;
LABEL_20:
          v21 = v14 & 0xFFFFFFFFFFFFFFF8;
          v15 = &v11[v14 & 0xFFFFFFFFFFFFFFF8];
          v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
          v23 = (uint64_t *)&v12[v16];
          v24 = &v11[v16];
          do
          {
            v25 = *v23++;
            *(_QWORD *)v24 = v25;
            v24 += 8;
            v22 += 8;
          }
          while (v22);
          if (v14 == v21)
            goto LABEL_26;
          v12 += v21;
          goto LABEL_25;
        }
        v16 = v14 & 0xFFFFFFFFFFFFFFE0;
        v17 = (__int128 *)(v12 + 16);
        v18 = v11 + 16;
        v19 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          *v18 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 32;
        }
        while (v19);
        if (v14 == v16)
          goto LABEL_26;
        if ((v14 & 0x18) != 0)
          goto LABEL_20;
        v12 += v16;
        v15 = &v11[v16];
      }
    }
    do
    {
LABEL_25:
      v26 = *v12++;
      *v15++ = v26;
    }
    while (v12 != v13);
    goto LABEL_26;
  }
LABEL_46:
  v39 = (_OWORD *)(a2 + 112);
  *(_OWORD *)(a2 + 80) = v48;
  if (v49)
  {
    v40 = v50;
    if (!*(_BYTE *)(a2 + 96))
      *(_BYTE *)(a2 + 96) = 1;
    *(_DWORD *)(a2 + 100) = v40;
    v41 = v54;
    *(_QWORD *)(a2 + 104) = v51;
    *v39 = v52;
    *(_QWORD *)(a2 + 128) = v53;
    *(_QWORD *)(a2 + 136) = v41;
    v49 = 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 96))
      *(_BYTE *)(a2 + 96) = 0;
    v42 = v54;
    *(_QWORD *)(a2 + 104) = v51;
    *v39 = v52;
    *(_QWORD *)(a2 + 128) = v53;
    *(_QWORD *)(a2 + 136) = v42;
  }
  if (v45 != v47)
    free(v45);
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  size_t v17;
  const void *v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  const void *v28;
  size_t v29;
  const void *v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  const void *v40;
  size_t v41;
  const void *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  const void *v54;
  size_t v55;
  const void *v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  const void *v67;
  size_t v68;
  const void *v69;
  uint64_t v70;

  v6 = a2[113];
  v7 = a1[113];
  v8 = v6 >= v7;
  if (v6 != v7)
    goto LABEL_10;
  v9 = *((_DWORD *)a2 + 29);
  v10 = *((_DWORD *)a1 + 29);
  v11 = v9 < v10;
  if (v9 != v10 || (v12 = *((_DWORD *)a2 + 30), v13 = *((_DWORD *)a1 + 30), v11 = v12 < v13, v12 != v13))
  {
    if (!v11)
      goto LABEL_21;
    goto LABEL_11;
  }
  v14 = *((unsigned __int16 *)a2 + 4);
  v15 = *((unsigned __int16 *)a1 + 4);
  v8 = v14 >= v15;
  if (v14 != v15)
  {
LABEL_10:
    if (v8)
      goto LABEL_21;
    goto LABEL_11;
  }
  if (*((_QWORD *)a2 + 10) != *((_QWORD *)a1 + 10)
    || (v16 = (const void *)*((_QWORD *)a2 + 2),
        v17 = *((_QWORD *)a2 + 3) - (_QWORD)v16,
        v18 = (const void *)*((_QWORD *)a1 + 2),
        v17 != *((_QWORD *)a1 + 3) - (_QWORD)v18)
    || memcmp(v16, v18, v17))
  {
    if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3)))
      goto LABEL_21;
LABEL_11:
    v19 = a3[113];
    v20 = v19 >= v6;
    if (v19 == v6)
    {
      v21 = *((_DWORD *)a3 + 29);
      v22 = *((_DWORD *)a2 + 29);
      v23 = v21 < v22;
      if (v21 != v22 || (v24 = *((_DWORD *)a3 + 30), v25 = *((_DWORD *)a2 + 30), v23 = v24 < v25, v24 != v25))
      {
        if (!v23)
          goto LABEL_35;
        goto LABEL_31;
      }
      v26 = *((unsigned __int16 *)a3 + 4);
      v27 = *((unsigned __int16 *)a2 + 4);
      v20 = v26 >= v27;
      if (v26 == v27)
      {
        if (*((_QWORD *)a3 + 10) == *((_QWORD *)a2 + 10)
          && (v28 = (const void *)*((_QWORD *)a3 + 2),
              v29 = *((_QWORD *)a3 + 3) - (_QWORD)v28,
              v30 = (const void *)*((_QWORD *)a2 + 2),
              v29 == *((_QWORD *)a2 + 3) - (_QWORD)v30)
          && !memcmp(v28, v30, v29))
        {
          if (*a3 >= *a2)
          {
LABEL_35:
            std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)a2);
            v44 = a3[113];
            v45 = a2[113];
            v46 = v44 >= v45;
            if (v44 == v45)
            {
              v47 = *((_DWORD *)a3 + 29);
              v48 = *((_DWORD *)a2 + 29);
              v49 = v47 < v48;
              if (v47 != v48 || (v50 = *((_DWORD *)a3 + 30), v51 = *((_DWORD *)a2 + 30), v49 = v50 < v51, v50 != v51))
              {
                if (!v49)
                  return;
                goto LABEL_61;
              }
              v52 = *((unsigned __int16 *)a3 + 4);
              v53 = *((unsigned __int16 *)a2 + 4);
              v46 = v52 >= v53;
              if (v52 == v53)
              {
                if (*((_QWORD *)a3 + 10) == *((_QWORD *)a2 + 10)
                  && (v54 = (const void *)*((_QWORD *)a3 + 2),
                      v55 = *((_QWORD *)a3 + 3) - (_QWORD)v54,
                      v56 = (const void *)*((_QWORD *)a2 + 2),
                      v55 == *((_QWORD *)a2 + 3) - (_QWORD)v56)
                  && !memcmp(v54, v56, v55))
                {
                  if (*a3 >= *a2)
                    return;
                }
                else if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3)))
                {
                  return;
                }
                goto LABEL_61;
              }
            }
            if (v46)
              return;
LABEL_61:
            v43 = (uint64_t)a2;
            goto LABEL_62;
          }
        }
        else if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3)))
        {
          goto LABEL_35;
        }
LABEL_31:
        v43 = (uint64_t)a1;
LABEL_62:
        v70 = (uint64_t)a3;
LABEL_66:
        std::swap[abi:nn180100]<gdc::LayerDataIndex>(v43, v70);
        return;
      }
    }
    if (v20)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (*a2 < *a1)
    goto LABEL_11;
LABEL_21:
  v31 = a3[113];
  v32 = v31 >= v6;
  if (v31 == v6)
  {
    v33 = *((_DWORD *)a3 + 29);
    v34 = *((_DWORD *)a2 + 29);
    v35 = v33 < v34;
    if (v33 != v34 || (v36 = *((_DWORD *)a3 + 30), v37 = *((_DWORD *)a2 + 30), v35 = v36 < v37, v36 != v37))
    {
      if (!v35)
        return;
      goto LABEL_46;
    }
    v38 = *((unsigned __int16 *)a3 + 4);
    v39 = *((unsigned __int16 *)a2 + 4);
    v32 = v38 >= v39;
    if (v38 == v39)
    {
      if (*((_QWORD *)a3 + 10) == *((_QWORD *)a2 + 10)
        && (v40 = (const void *)*((_QWORD *)a3 + 2),
            v41 = *((_QWORD *)a3 + 3) - (_QWORD)v40,
            v42 = (const void *)*((_QWORD *)a2 + 2),
            v41 == *((_QWORD *)a2 + 3) - (_QWORD)v42)
        && !memcmp(v40, v42, v41))
      {
        if (*a3 >= *a2)
          return;
      }
      else if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3)))
      {
        return;
      }
      goto LABEL_46;
    }
  }
  if (v32)
    return;
LABEL_46:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
  v57 = a2[113];
  v58 = a1[113];
  v59 = v57 >= v58;
  if (v57 != v58)
  {
LABEL_57:
    if (v59)
      return;
    goto LABEL_65;
  }
  v60 = *((_DWORD *)a2 + 29);
  v61 = *((_DWORD *)a1 + 29);
  v62 = v60 < v61;
  if (v60 == v61)
  {
    v63 = *((_DWORD *)a2 + 30);
    v64 = *((_DWORD *)a1 + 30);
    v62 = v63 < v64;
    if (v63 == v64)
    {
      v65 = *((unsigned __int16 *)a2 + 4);
      v66 = *((unsigned __int16 *)a1 + 4);
      v59 = v65 >= v66;
      if (v65 == v66)
      {
        if (*((_QWORD *)a2 + 10) == *((_QWORD *)a1 + 10)
          && (v67 = (const void *)*((_QWORD *)a2 + 2),
              v68 = *((_QWORD *)a2 + 3) - (_QWORD)v67,
              v69 = (const void *)*((_QWORD *)a1 + 2),
              v68 == *((_QWORD *)a1 + 3) - (_QWORD)v69)
          && !memcmp(v67, v69, v68))
        {
          if (*a2 >= *a1)
            return;
        }
        else if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3)))
        {
          return;
        }
        goto LABEL_65;
      }
      goto LABEL_57;
    }
  }
  if (v62)
  {
LABEL_65:
    v43 = (uint64_t)a1;
    v70 = (uint64_t)a2;
    goto LABEL_66;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  const void *v18;
  size_t v19;
  const void *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  const void *v31;
  size_t v32;
  const void *v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  const void *v44;
  size_t v45;
  const void *v46;

  v8 = a4[113];
  v9 = a3[113];
  v10 = v8 >= v9;
  if (v8 == v9)
  {
    v11 = *((_DWORD *)a4 + 29);
    v12 = *((_DWORD *)a3 + 29);
    v13 = v11 < v12;
    if (v11 != v12 || (v14 = *((_DWORD *)a4 + 30), v15 = *((_DWORD *)a3 + 30), v13 = v14 < v15, v14 != v15))
    {
      if (!v13)
        return;
      goto LABEL_14;
    }
    v16 = *((unsigned __int16 *)a4 + 4);
    v17 = *((unsigned __int16 *)a3 + 4);
    v10 = v16 >= v17;
    if (v16 == v17)
    {
      if (*((_QWORD *)a4 + 10) == *((_QWORD *)a3 + 10)
        && (v18 = (const void *)*((_QWORD *)a4 + 2),
            v19 = *((_QWORD *)a4 + 3) - (_QWORD)v18,
            v20 = (const void *)*((_QWORD *)a3 + 2),
            v19 == *((_QWORD *)a3 + 3) - (_QWORD)v20)
        && !memcmp(v18, v20, v19))
      {
        if (*a4 >= *a3)
          return;
      }
      else if (!gdc::GenericKey::operator<(*((_QWORD *)a4 + 2), *((_QWORD *)a4 + 3), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3)))
      {
        return;
      }
      goto LABEL_14;
    }
  }
  if (v10)
    return;
LABEL_14:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a3, (uint64_t)a4);
  v21 = a3[113];
  v22 = a2[113];
  v23 = v21 >= v22;
  if (v21 != v22)
    goto LABEL_23;
  v24 = *((_DWORD *)a3 + 29);
  v25 = *((_DWORD *)a2 + 29);
  v26 = v24 < v25;
  if (v24 != v25 || (v27 = *((_DWORD *)a3 + 30), v28 = *((_DWORD *)a2 + 30), v26 = v27 < v28, v27 != v28))
  {
    if (!v26)
      return;
    goto LABEL_27;
  }
  v29 = *((unsigned __int16 *)a3 + 4);
  v30 = *((unsigned __int16 *)a2 + 4);
  v23 = v29 >= v30;
  if (v29 == v30)
  {
    if (*((_QWORD *)a3 + 10) == *((_QWORD *)a2 + 10)
      && (v31 = (const void *)*((_QWORD *)a3 + 2),
          v32 = *((_QWORD *)a3 + 3) - (_QWORD)v31,
          v33 = (const void *)*((_QWORD *)a2 + 2),
          v32 == *((_QWORD *)a2 + 3) - (_QWORD)v33)
      && !memcmp(v31, v33, v32))
    {
      if (*a3 >= *a2)
        return;
    }
    else if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3)))
    {
      return;
    }
  }
  else
  {
LABEL_23:
    if (v23)
      return;
  }
LABEL_27:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
  v34 = a2[113];
  v35 = a1[113];
  v36 = v34 >= v35;
  if (v34 != v35)
    goto LABEL_36;
  v37 = *((_DWORD *)a2 + 29);
  v38 = *((_DWORD *)a1 + 29);
  v39 = v37 < v38;
  if (v37 == v38)
  {
    v40 = *((_DWORD *)a2 + 30);
    v41 = *((_DWORD *)a1 + 30);
    v39 = v40 < v41;
    if (v40 == v41)
    {
      v42 = *((unsigned __int16 *)a2 + 4);
      v43 = *((unsigned __int16 *)a1 + 4);
      v36 = v42 >= v43;
      if (v42 == v43)
      {
        if (*((_QWORD *)a2 + 10) == *((_QWORD *)a1 + 10)
          && (v44 = (const void *)*((_QWORD *)a2 + 2),
              v45 = *((_QWORD *)a2 + 3) - (_QWORD)v44,
              v46 = (const void *)*((_QWORD *)a1 + 2),
              v45 == *((_QWORD *)a1 + 3) - (_QWORD)v46)
          && !memcmp(v44, v46, v45))
        {
          if (*a2 >= *a1)
            return;
        }
        else if (!gdc::GenericKey::operator<(*((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3)))
        {
          return;
        }
LABEL_40:
        std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)a2);
        return;
      }
LABEL_36:
      if (v36)
        return;
      goto LABEL_40;
    }
  }
  if (v39)
    goto LABEL_40;
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *,0>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  const void *v20;
  size_t v21;
  const void *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  size_t v34;
  const void *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  const void *v46;
  size_t v47;
  const void *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;

  v10 = a5[113];
  v11 = a4[113];
  v12 = v10 >= v11;
  if (v10 == v11)
  {
    v13 = *((_DWORD *)a5 + 29);
    v14 = *((_DWORD *)a4 + 29);
    v15 = v13 < v14;
    if (v13 != v14 || (v16 = *((_DWORD *)a5 + 30), v17 = *((_DWORD *)a4 + 30), v15 = v16 < v17, v16 != v17))
    {
      if (!v15)
        return;
      goto LABEL_14;
    }
    v18 = *((unsigned __int16 *)a5 + 4);
    v19 = *((unsigned __int16 *)a4 + 4);
    v12 = v18 >= v19;
    if (v18 == v19)
    {
      if (*((_QWORD *)a5 + 10) == *((_QWORD *)a4 + 10)
        && (v20 = (const void *)*((_QWORD *)a5 + 2),
            v21 = *((_QWORD *)a5 + 3) - (_QWORD)v20,
            v22 = (const void *)*((_QWORD *)a4 + 2),
            v21 == *((_QWORD *)a4 + 3) - (_QWORD)v22)
        && !memcmp(v20, v22, v21))
      {
        if (*a5 >= *a4)
          return;
      }
      else if (!gdc::GenericKey::operator<(*((_QWORD *)a5 + 2), *((_QWORD *)a5 + 3), *((_QWORD *)a4 + 2), *((_QWORD *)a4 + 3)))
      {
        return;
      }
      goto LABEL_14;
    }
  }
  if (v12)
    return;
LABEL_14:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a4, (uint64_t)a5);
  v23 = a4[113];
  v24 = a3[113];
  v25 = v23 >= v24;
  if (v23 != v24)
    goto LABEL_23;
  v26 = *((_DWORD *)a4 + 29);
  v27 = *((_DWORD *)a3 + 29);
  v28 = v26 < v27;
  if (v26 != v27 || (v29 = *((_DWORD *)a4 + 30), v30 = *((_DWORD *)a3 + 30), v28 = v29 < v30, v29 != v30))
  {
    if (!v28)
      return;
    goto LABEL_27;
  }
  v31 = *((unsigned __int16 *)a4 + 4);
  v32 = *((unsigned __int16 *)a3 + 4);
  v25 = v31 >= v32;
  if (v31 != v32)
  {
LABEL_23:
    if (v25)
      return;
    goto LABEL_27;
  }
  if (*((_QWORD *)a4 + 10) == *((_QWORD *)a3 + 10)
    && (v33 = (const void *)*((_QWORD *)a4 + 2),
        v34 = *((_QWORD *)a4 + 3) - (_QWORD)v33,
        v35 = (const void *)*((_QWORD *)a3 + 2),
        v34 == *((_QWORD *)a3 + 3) - (_QWORD)v35)
    && !memcmp(v33, v35, v34))
  {
    if (*a4 >= *a3)
      return;
  }
  else if (!gdc::GenericKey::operator<(*((_QWORD *)a4 + 2), *((_QWORD *)a4 + 3), *((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3)))
  {
    return;
  }
LABEL_27:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a3, (uint64_t)a4);
  v36 = a3[113];
  v37 = a2[113];
  v38 = v36 >= v37;
  if (v36 != v37)
    goto LABEL_36;
  v39 = *((_DWORD *)a3 + 29);
  v40 = *((_DWORD *)a2 + 29);
  v41 = v39 < v40;
  if (v39 == v40)
  {
    v42 = *((_DWORD *)a3 + 30);
    v43 = *((_DWORD *)a2 + 30);
    v41 = v42 < v43;
    if (v42 == v43)
    {
      v44 = *((unsigned __int16 *)a3 + 4);
      v45 = *((unsigned __int16 *)a2 + 4);
      v38 = v44 >= v45;
      if (v44 == v45)
      {
        if (*((_QWORD *)a3 + 10) == *((_QWORD *)a2 + 10)
          && (v46 = (const void *)*((_QWORD *)a3 + 2),
              v47 = *((_QWORD *)a3 + 3) - (_QWORD)v46,
              v48 = (const void *)*((_QWORD *)a2 + 2),
              v47 == *((_QWORD *)a2 + 3) - (_QWORD)v48)
          && !memcmp(v46, v48, v47))
        {
          if (*a3 >= *a2)
            return;
        }
        else if (!gdc::GenericKey::operator<(*((_QWORD *)a3 + 2), *((_QWORD *)a3 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3)))
        {
          return;
        }
        goto LABEL_40;
      }
LABEL_36:
      if (v38)
        return;
      goto LABEL_40;
    }
  }
  if (!v41)
    return;
LABEL_40:
  std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a2, (uint64_t)a3);
  v49 = a2[113];
  v50 = *(unsigned __int8 *)(a1 + 113);
  if (v49 == v50)
  {
    v51 = *((_DWORD *)a2 + 29);
    v52 = *(_DWORD *)(a1 + 116);
    v53 = v51 < v52;
    if (v51 == v52)
    {
      v54 = *((_DWORD *)a2 + 30);
      v55 = *(_DWORD *)(a1 + 120);
      v53 = v54 < v55;
      if (v54 == v55)
      {
        if (!gdc::LayerDataRequestKey::operator<(a2, (unsigned __int8 *)a1))
          return;
LABEL_49:
        std::swap[abi:nn180100]<gdc::LayerDataIndex>(a1, (uint64_t)a2);
        return;
      }
    }
    if (v53)
      goto LABEL_49;
  }
  else if (v49 < v50)
  {
    goto LABEL_49;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  size_t v17;
  const void *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  size_t v34;
  const void *v35;
  uint64_t i;
  BOOL v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  const void *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char *v68;
  __int128 *v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  char v78;
  int v79;
  size_t v81;
  unsigned __int8 v82;
  unsigned __int16 v83;
  void *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  char v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v4 = 1;
  switch(0x8E38E38E38E38E39 * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = a2 - 144;
      v6 = *(a2 - 31);
      v7 = a1[113];
      v8 = v6 >= v7;
      if (v6 != v7)
        goto LABEL_113;
      v9 = *((_DWORD *)a2 - 7);
      v10 = *((_DWORD *)a1 + 29);
      v11 = v9 < v10;
      if (v9 == v10 && (v12 = *((_DWORD *)a2 - 6), v13 = *((_DWORD *)a1 + 30), v11 = v12 < v13, v12 == v13))
      {
        v14 = *((unsigned __int16 *)a2 - 68);
        v15 = *((unsigned __int16 *)a1 + 4);
        v8 = v14 >= v15;
        if (v14 == v15)
        {
          if (*((_QWORD *)a2 - 8) != *((_QWORD *)a1 + 10)
            || (v16 = (const void *)*((_QWORD *)a2 - 16),
                v17 = *((_QWORD *)a2 - 15) - (_QWORD)v16,
                v18 = (const void *)*((_QWORD *)a1 + 2),
                v17 != *((_QWORD *)a1 + 3) - (_QWORD)v18)
            || memcmp(v16, v18, v17))
          {
            if (!gdc::GenericKey::operator<(*((_QWORD *)a2 - 16), *((_QWORD *)a2 - 15), *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3)))return v4;
            goto LABEL_114;
          }
          v8 = *v5 >= *a1;
        }
LABEL_113:
        if (v8)
          return v4;
      }
      else if (!v11)
      {
        return v4;
      }
LABEL_114:
      std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)a1, (uint64_t)(a2 - 144));
      return v4;
    case 3uLL:
      return v4;
    case 4uLL:
      return v4;
    case 5uLL:
      return v4;
    default:
      v19 = a1 + 288;
      v20 = a1 + 432;
      v4 = 1;
      if (a1 + 432 == a2)
        return v4;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (2)
  {
    v23 = v20[113];
    v24 = v19[113];
    v25 = v23 >= v24;
    if (v23 != v24)
      goto LABEL_28;
    v26 = *((_DWORD *)v20 + 29);
    v27 = *((_DWORD *)v19 + 29);
    v28 = v26 < v27;
    if (v26 != v27 || (v29 = *((_DWORD *)v20 + 30), v30 = *((_DWORD *)v19 + 30), v28 = v29 < v30, v29 != v30))
    {
      if (!v28)
        goto LABEL_14;
      goto LABEL_29;
    }
    v31 = *((unsigned __int16 *)v20 + 4);
    v32 = *((unsigned __int16 *)v19 + 4);
    v25 = v31 >= v32;
    if (v31 != v32)
      goto LABEL_28;
    if (*((_QWORD *)v20 + 10) == *((_QWORD *)v19 + 10))
    {
      v33 = (const void *)*((_QWORD *)v20 + 2);
      v34 = *((_QWORD *)v20 + 3) - (_QWORD)v33;
      v35 = (const void *)*((_QWORD *)v19 + 2);
      if (v34 == *((_QWORD *)v19 + 3) - (_QWORD)v35 && !memcmp(v33, v35, v34))
      {
        v25 = *v20 >= *v19;
LABEL_28:
        if (v25)
          goto LABEL_14;
        goto LABEL_29;
      }
    }
    if (!gdc::GenericKey::operator<(*((_QWORD *)v20 + 2), *((_QWORD *)v20 + 3), *((_QWORD *)v19 + 2), *((_QWORD *)v19 + 3)))goto LABEL_14;
LABEL_29:
    v82 = *v20;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v83, (uint64_t)(v20 + 8));
    v88 = 0;
    if (v20[96])
    {
      v89 = *((_DWORD *)v20 + 25);
      v88 = 1;
    }
    v90 = *((_QWORD *)v20 + 13);
    LOWORD(v91) = *((_WORD *)v20 + 56);
    *(_QWORD *)((char *)&v91 + 4) = *(_QWORD *)(v20 + 116);
    v93 = *((_QWORD *)v20 + 17);
    for (i = v21; ; i -= 144)
    {
      v38 = &a1[i];
      gdc::LayerDataRequestKey::operator=((uint64_t)&a1[i + 432], (uint64_t)&a1[i + 288]);
      *((_OWORD *)v38 + 34) = *((_OWORD *)v38 + 25);
      v39 = *(_QWORD *)&a1[i + 424];
      *((_QWORD *)v38 + 70) = *((_QWORD *)v38 + 52);
      *((_QWORD *)v38 + 71) = v39;
      if (i == -288)
        break;
      v40 = v38[257];
      v37 = BYTE1(v91) >= v40;
      if (BYTE1(v91) != v40)
        goto LABEL_33;
      v41 = *(_DWORD *)&a1[i + 260];
      if (DWORD1(v91) == v41)
      {
        v42 = *(_DWORD *)&a1[i + 264];
        if (DWORD2(v91) != v42)
        {
          if (SDWORD2(v91) >= v42)
          {
            v19 = &a1[i + 288];
            v45 = (uint64_t)&a1[i + 400];
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        v43 = *(unsigned __int16 *)&a1[i + 152];
        v37 = v83 >= v43;
        if (v83 != v43)
          goto LABEL_33;
        if ((_QWORD)v87 == *(_QWORD *)&a1[i + 224])
        {
          v44 = *(const void **)&a1[i + 160];
          if (v85 - (_QWORD)v84 == *(_QWORD *)&a1[i + 168] - (_QWORD)v44 && !memcmp(v84, v44, v85 - (_QWORD)v84))
          {
            v37 = v82 >= v38[144];
LABEL_33:
            if (v37)
              goto LABEL_50;
            goto LABEL_34;
          }
        }
        if (!gdc::GenericKey::operator<((uint64_t)v84, v85, *(_QWORD *)&a1[i + 160], *(_QWORD *)&a1[i + 168]))
          goto LABEL_50;
      }
      else if (SDWORD1(v91) >= v41)
      {
        goto LABEL_50;
      }
LABEL_34:
      v19 -= 144;
    }
    v19 = a1;
LABEL_50:
    v45 = (uint64_t)(v38 + 400);
LABEL_51:
    *v19 = v82;
    *((_WORD *)v19 + 4) = v83;
    if (v19 == &v82)
      goto LABEL_94;
    v46 = (void *)*((_QWORD *)v19 + 2);
    if (v46 != *((void **)v19 + 4))
      free(v46);
    v47 = (char *)(v19 + 48);
    *((_QWORD *)v19 + 2) = v19 + 48;
    *((_QWORD *)v19 + 3) = v19 + 48;
    *((_QWORD *)v19 + 4) = v19 + 48;
    *((_QWORD *)v19 + 5) = 32;
    v48 = (char *)v84;
    v49 = v85;
    v50 = v85 - (_QWORD)v84;
    if ((unint64_t)(v85 - (_QWORD)v84) < 0x21)
      goto LABEL_75;
    if (v50 <= 0x40)
      v51 = 64;
    else
      v51 = v85 - (_QWORD)v84;
    v81 = v51;
    v47 = (char *)malloc_type_malloc(v51, 0x100004077774924uLL);
    v52 = (char *)*((_QWORD *)v19 + 2);
    v53 = (char *)*((_QWORD *)v19 + 3);
    if (v52 == v53)
      goto LABEL_74;
    v54 = v53 - v52;
    if ((unint64_t)(v53 - v52) < 8)
    {
      v55 = v47;
      goto LABEL_73;
    }
    v55 = v47;
    if ((unint64_t)(v47 - v52) < 0x20)
      goto LABEL_73;
    if (v54 >= 0x20)
    {
      v56 = v54 & 0xFFFFFFFFFFFFFFE0;
      v57 = (__int128 *)(v52 + 16);
      v58 = v47 + 16;
      v59 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v60 = *v57;
        *(v58 - 1) = *(v57 - 1);
        *v58 = v60;
        v57 += 2;
        v58 += 2;
        v59 -= 32;
      }
      while (v59);
      if (v54 == v56)
        goto LABEL_74;
      if ((v54 & 0x18) != 0)
        goto LABEL_68;
      v52 += v56;
      v55 = &v47[v56];
      do
      {
LABEL_73:
        v66 = *v52++;
        *v55++ = v66;
      }
      while (v52 != v53);
      goto LABEL_74;
    }
    v56 = 0;
LABEL_68:
    v61 = v54 & 0xFFFFFFFFFFFFFFF8;
    v55 = &v47[v54 & 0xFFFFFFFFFFFFFFF8];
    v62 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
    v63 = (uint64_t *)&v52[v56];
    v64 = &v47[v56];
    do
    {
      v65 = *v63++;
      *(_QWORD *)v64 = v65;
      v64 += 8;
      v62 += 8;
    }
    while (v62);
    if (v54 != v61)
    {
      v52 += v61;
      goto LABEL_73;
    }
LABEL_74:
    *((_QWORD *)v19 + 2) = v47;
    *((_QWORD *)v19 + 3) = v47;
    *((_QWORD *)v19 + 5) = v81;
LABEL_75:
    if (v48 == (char *)v49)
      goto LABEL_93;
    if (v50 < 8)
    {
      v68 = v47;
      goto LABEL_91;
    }
    if ((unint64_t)(v47 - v48) < 0x20)
    {
      v68 = v47;
      goto LABEL_91;
    }
    if (v50 >= 0x20)
    {
      v67 = v50 & 0xFFFFFFFFFFFFFFE0;
      v69 = (__int128 *)(v48 + 16);
      v70 = v47 + 16;
      v71 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        *v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 32;
      }
      while (v71);
      if (v50 == v67)
        goto LABEL_92;
      if ((v50 & 0x18) != 0)
        goto LABEL_86;
      v48 += v67;
      v68 = &v47[v67];
      do
      {
LABEL_91:
        v78 = *v48++;
        *v68++ = v78;
      }
      while (v48 != (char *)v49);
      goto LABEL_92;
    }
    v67 = 0;
LABEL_86:
    v73 = v50 & 0xFFFFFFFFFFFFFFF8;
    v68 = &v47[v50 & 0xFFFFFFFFFFFFFFF8];
    v74 = v67 - (v50 & 0xFFFFFFFFFFFFFFF8);
    v75 = (uint64_t *)&v48[v67];
    v76 = &v47[v67];
    do
    {
      v77 = *v75++;
      *(_QWORD *)v76 = v77;
      v76 += 8;
      v74 += 8;
    }
    while (v74);
    if (v50 != v73)
    {
      v48 += v73;
      goto LABEL_91;
    }
LABEL_92:
    v47 = (char *)*((_QWORD *)v19 + 3);
LABEL_93:
    *((_QWORD *)v19 + 3) = &v47[v50];
LABEL_94:
    *((_OWORD *)v19 + 5) = v87;
    v79 = v19[96];
    if (v88)
    {
      *((_DWORD *)v19 + 25) = v89;
      if (!v79)
        v19[96] = 1;
    }
    else if (v19[96])
    {
      v19[96] = 0;
    }
    *((_QWORD *)v19 + 13) = v90;
    *(_OWORD *)v45 = v91;
    *(_QWORD *)(v45 + 16) = v92;
    *((_QWORD *)v19 + 17) = v93;
    if (v88)
      v88 = 0;
    if (v84 != v86)
      free(v84);
    if (++v22 == 8)
      return v20 + 144 == a2;
LABEL_14:
    v19 = v20;
    v21 += 144;
    v20 += 144;
    if (v20 != a2)
      continue;
    return 1;
  }
}

_QWORD *gdc::LayerDataCollector::virtualTilesBegin(_QWORD *this, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *this = a2;
  this[2] = a3;
  if (a2 == a3)
  {
LABEL_9:
    this[1] = a2;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a2 + 113);
    v4 = *(_DWORD *)(a2 + 116);
    v5 = *(_DWORD *)(a2 + 120);
    v6 = a2 + 144;
    v7 = *(unsigned __int8 *)(a2 + 112);
    while (v6 != a3)
    {
      v8 = v6;
      a2 += 144;
      if (*(unsigned __int8 *)(v6 + 112) != v7 || *(unsigned __int8 *)(v6 + 113) != v3 || *(_DWORD *)(v6 + 116) != v4)
        goto LABEL_9;
      v6 += 144;
      if (*(_DWORD *)(v8 + 120) != v5)
      {
        this[1] = v8;
        return this;
      }
    }
    this[1] = a3;
  }
  return this;
}

__n128 gdc::LayerDataCollector::data(gdc::LayerDataCollector *this, unsigned __int16 *a2, unsigned __int16 *a3, int a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 *v13;
  __n128 result;
  __int128 v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  if (a2 == a3)
    goto LABEL_34;
  v4 = a2;
  while (*v4 != a4)
  {
    v4 += 16;
    if (v4 == a3)
      goto LABEL_34;
  }
  if (v4 == a3)
  {
LABEL_34:
    v19[0] = 0;
    v19[1] = 0;
    v12 = v18;
    v13 = (__n128 *)v19;
    v18[0] = 0;
    v18[1] = 0;
  }
  else
  {
    v5 = a2;
    while (*v5 != a4)
    {
      v5 += 16;
      if (v5 == a3)
      {
        v5 = a3;
        break;
      }
    }
    v6 = *((_QWORD *)v5 + 1);
    v7 = a2;
    while (*v7 != a4)
    {
      v7 += 16;
      if (v7 == a3)
      {
        v7 = a3;
        break;
      }
    }
    v8 = *((_QWORD *)v7 + 2);
    v17[0] = v6;
    v17[1] = v8;
    if (v6 != v8)
    {
      while (!*(_QWORD *)(v6 + 112))
      {
        v6 += 144;
        if (v6 == v8)
        {
          v6 = v8;
          break;
        }
      }
      v17[0] = v6;
    }
    v9 = a2;
    while (*v9 != a4)
    {
      v9 += 16;
      if (v9 == a3)
      {
        v9 = a3;
        break;
      }
    }
    v10 = *((_QWORD *)v9 + 2);
    while (*a2 != a4)
    {
      a2 += 16;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
    v11 = *((_QWORD *)a2 + 2);
    v16[0] = v10;
    v16[1] = v11;
    if (v10 != v11)
    {
      while (!*(_QWORD *)(v10 + 112))
      {
        v10 += 144;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
      v16[0] = v10;
    }
    v12 = v16;
    v13 = (__n128 *)v17;
  }
  result = *v13;
  v15 = *(_OWORD *)v12;
  *(__n128 *)this = *v13;
  *((_OWORD *)this + 1) = v15;
  return result;
}

void gdc::FlatTileSelector::~FlatTileSelector(gdc::FlatTileSelector *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42B0928;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42B0928;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

void gdc::FlatTileSelector::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  int v6;
  double v7[7];
  int v8;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15[32];

  strcpy((char *)a2, "Flat Tile Selector");
  *(_WORD *)(a2 + 23) = 18;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v15[23] = 8;
  strcpy(v15, "Lod Bias");
  v4 = *(_QWORD *)(a1 + 16);
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 2;
  v10 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v15, (uint64_t)v9);
  v5 = *(double *)(a1 + 16);
  v15[23] = 17;
  v6 = *(_DWORD *)(a1 + 8);
  strcpy(v15, "Desired Tile Area");
  memset(&v7[4], 0, 24);
  v8 = 2;
  v7[2] = exp2(v5 * -2.0 + 1.98) * (double)(v6 * v6);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v15, (uint64_t)v7);
}

gdc::LayerDataStore *gdc::LayerDataStore::LayerDataStore(gdc::LayerDataStore *this)
{
  size_t prime;
  unint64_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 1065353216;
  *((_QWORD *)this + 8) = this;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB2DD0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 34) = 0;
  prime = std::__next_prime(0x64uLL);
  v3 = prime;
  v4 = *(int8x8_t *)((char *)this + 32);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_12;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*((unint64_t *)this + 6) / *((float *)this + 14));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (v3 <= v5)
      v3 = v5;
    if (v3 < *(_QWORD *)&v4)
LABEL_12:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 24, v3);
  }
  return this;
}

void gdc::LayerDataStore::get(gdc::LayerDataStore *this, const gdc::LayerDataRequestKey *a2, unsigned __int8 *a3)
{
  uint64_t **v5;
  uint64_t **v6;
  const gdc::LayerDataRequestKey *v7;
  const gdc::LayerDataRequestKey *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const gdc::LayerDataRequestKey *v15;
  const gdc::LayerDataRequestKey *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v5 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)a2 + 3, a3);
  if (!v5)
  {
LABEL_26:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v6 = v5;
  v7 = (const gdc::LayerDataRequestKey *)v5[16];
  v8 = (const gdc::LayerDataRequestKey *)operator new(0x98uLL);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_BYTE *)v8 + 16) = *((_BYTE *)v7 + 16);
  gdc::LayerDataKey::LayerDataKey((uint64_t)v8 + 24, (uint64_t)v7 + 24);
  *((_BYTE *)v8 + 112) = 0;
  if (*((_BYTE *)v7 + 112))
  {
    *((_DWORD *)v8 + 29) = *((_DWORD *)v7 + 29);
    *((_BYTE *)v8 + 112) = 1;
  }
  v9 = *((_QWORD *)v7 + 16);
  *((_QWORD *)v8 + 15) = *((_QWORD *)v7 + 15);
  *((_QWORD *)v8 + 16) = v9;
  v10 = *((_QWORD *)v7 + 17);
  *((_QWORD *)v8 + 17) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)v8 + 18) = *((_QWORD *)v7 + 18);
  v13 = *(_QWORD *)a2;
  *(_QWORD *)(v13 + 8) = v8;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)v8 = v13;
  *((_QWORD *)v8 + 1) = a2;
  v14 = *((_QWORD *)a2 + 2);
  v15 = (const gdc::LayerDataRequestKey *)*((_QWORD *)a2 + 8);
  if (v15 == v7)
  {
    v16 = (const gdc::LayerDataRequestKey *)*((_QWORD *)v7 + 1);
LABEL_11:
    *((_QWORD *)a2 + 8) = v16;
    goto LABEL_12;
  }
  v16 = v8;
  if (v15 == a2)
    goto LABEL_11;
LABEL_12:
  v17 = *(_QWORD *)v7;
  *(_QWORD *)(v17 + 8) = *((_QWORD *)v7 + 1);
  **((_QWORD **)v7 + 1) = v17;
  *((_QWORD *)a2 + 2) = v14;
  v18 = (std::__shared_weak_count *)*((_QWORD *)v7 + 17);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*((_BYTE *)v7 + 112))
    *((_BYTE *)v7 + 112) = 0;
  v21 = (void *)*((_QWORD *)v7 + 4);
  if (v21 != *((void **)v7 + 6))
    free(v21);
  operator delete(v7);
  v6[16] = (uint64_t *)v8;
  if (v8 == a2)
    goto LABEL_26;
  v22 = *((_QWORD *)v8 + 17);
  *(_QWORD *)this = *((_QWORD *)v8 + 16);
  *((_QWORD *)this + 1) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
}

void gdc::LayerDataStore::remove(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  void *__p;
  char v21;

  v3 = a1 + 3;
  v4 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(a1 + 3, a2);
  if (v4)
  {
    v5 = v4;
    v6 = v4[16];
    v7 = v6[18];
    v9 = (uint64_t *)a1[8];
    v8 = a1[9];
    v10 = v8 >= v7;
    v11 = v8 - v7;
    if (!v10)
      v11 = 0;
    a1[9] = v11;
    if (v9 == v6)
      a1[8] = v6[1];
    v12 = v4[16];
    v13 = *v12;
    *(_QWORD *)(v13 + 8) = v12[1];
    *(_QWORD *)v12[1] = v13;
    --a1[2];
    v14 = (std::__shared_weak_count *)v12[17];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (*((_BYTE *)v12 + 112))
      *((_BYTE *)v12 + 112) = 0;
    v17 = (void *)v12[4];
    if (v17 != (void *)v12[6])
      free(v17);
    operator delete(v12);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3, v5);
    v18 = __p;
    if (__p)
    {
      if (v21)
      {
        if (*((_BYTE *)__p + 112))
          *((_BYTE *)__p + 112) = 0;
        v19 = (void *)v18[4];
        if (v19 != (void *)v18[6])
          free(v19);
      }
      operator delete(v18);
    }
  }
}

char *std::vector<gdc::LayerDataRequestKeyPair>::__push_back_slow_path<gdc::LayerDataRequestKeyPair>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _DWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;

  v2 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[30 * v2];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v8[8] = *(_BYTE *)(a2 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v8 + 16), a2 + 16);
  v8[104] = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v7[30 * v2 + 27] = *(_DWORD *)(a2 + 108);
    v8[104] = 1;
  }
  v9 = (char *)&v7[30 * v6];
  *(_QWORD *)&v7[30 * v2 + 28] = *(_QWORD *)(a2 + 112);
  v10 = v8 + 120;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = &v8[v13];
      v15 = &v11[v13];
      *((_QWORD *)v14 - 15) = *(_QWORD *)&v11[v13 - 120];
      *(v14 - 112) = v11[v13 - 112];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v8[v13 - 104], (uint64_t)&v11[v13 - 104]);
      *(v14 - 16) = 0;
      if (v11[v13 - 16])
      {
        *((_DWORD *)v14 - 3) = *((_DWORD *)v15 - 3);
        *(v14 - 16) = 1;
      }
      *((_QWORD *)v14 - 1) = *((_QWORD *)v15 - 1);
      v13 -= 120;
    }
    while (&v11[v13] != v12);
    v16 = &v8[v13];
    v11 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v9;
    while (v17 != v11)
    {
      if (*(v17 - 16))
        *(v17 - 16) = 0;
      v18 = (void *)*((_QWORD *)v17 - 12);
      if (v18 != *((void **)v17 - 10))
        free(v18);
      v17 -= 120;
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

void gdc::LayerDataStore::pending(gdc::LayerDataStore *this, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::mutex *v43;
  char v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v4 = (std::mutex *)(a2 + 80);
  std::mutex::lock((std::mutex *)(a2 + 80));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *(_QWORD *)(a2 + 168);
  if (v5)
  {
    if (v5 >> 57)
LABEL_68:
      abort();
    v6 = v5 << 7;
    v7 = (char *)operator new(v5 << 7);
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = &v7[v6];
  }
  v43 = v4;
  for (i = *(uint64_t **)(a2 + 160); i; i = (uint64_t *)*i)
  {
    v44 = *((_BYTE *)i + 16);
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v45, (uint64_t)(i + 3));
    v48 = 0;
    if (*((_BYTE *)i + 112))
    {
      v49 = *((_DWORD *)i + 29);
      v48 = 1;
    }
    v9 = i[16];
    v50 = i[15];
    v51 = v9;
    v10 = (std::__shared_weak_count *)i[17];
    v52 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v14 = *((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 2);
    if (v14 >= v13)
    {
      v19 = (uint64_t)(v14 - *(_QWORD *)this) >> 7;
      if ((unint64_t)(v19 + 1) >> 57)
        goto LABEL_68;
      v20 = v13 - *(_QWORD *)this;
      v21 = v20 >> 6;
      if (v20 >> 6 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFF80)
        v22 = 0x1FFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        if (v22 >> 57)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = (char *)operator new(v22 << 7);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[128 * v19];
      *v24 = v44;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v24 + 8), (uint64_t)&v45);
      v24[96] = 0;
      if (v48)
      {
        *((_DWORD *)v24 + 25) = v49;
        v24[96] = 1;
      }
      v25 = v51;
      *((_QWORD *)v24 + 13) = v50;
      *((_QWORD *)v24 + 14) = v25;
      v26 = v52;
      *((_QWORD *)v24 + 15) = v52;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = &v23[128 * v22];
      v18 = v24 + 128;
      v30 = *(char **)this;
      v31 = (char *)*((_QWORD *)this + 1);
      if (v31 != *(char **)this)
      {
        v32 = 0;
        do
        {
          v33 = &v24[v32];
          v34 = &v31[v32];
          v24[v32 - 128] = v31[v32 - 128];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v24[v32 - 120], (uint64_t)&v31[v32 - 120]);
          v24[v32 - 32] = 0;
          if (v31[v32 - 32])
          {
            *((_DWORD *)v33 - 7) = *((_DWORD *)v34 - 7);
            *(v33 - 32) = 1;
          }
          *((_QWORD *)v33 - 3) = *((_QWORD *)v34 - 3);
          *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
          *((_QWORD *)v34 - 2) = 0;
          *((_QWORD *)v34 - 1) = 0;
          v32 -= 128;
        }
        while (&v31[v32] != v30);
        v31 = *(char **)this;
        v35 = (char *)*((_QWORD *)this + 1);
        *(_QWORD *)this = &v24[v32];
        *((_QWORD *)this + 1) = v18;
        *((_QWORD *)this + 2) = v29;
        if (v35 == v31)
        {
          if (!v31)
            goto LABEL_55;
LABEL_54:
          operator delete(v31);
          goto LABEL_55;
        }
        while (2)
        {
          v36 = (std::__shared_weak_count *)*((_QWORD *)v35 - 1);
          if (!v36)
            goto LABEL_72;
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            if (*(v35 - 32))
LABEL_47:
              *(v35 - 32) = 0;
          }
          else
          {
LABEL_72:
            if (*(v35 - 32))
              goto LABEL_47;
          }
          v39 = (void *)*((_QWORD *)v35 - 14);
          if (v39 != *((void **)v35 - 12))
            free(v39);
          v35 -= 128;
          if (v35 == v31)
            goto LABEL_53;
          continue;
        }
      }
      *(_QWORD *)this = v24;
      *((_QWORD *)this + 2) = v29;
LABEL_53:
      if (v31)
        goto LABEL_54;
    }
    else
    {
      *(_BYTE *)v14 = v44;
      gdc::LayerDataKey::LayerDataKey(v14 + 8, (uint64_t)&v45);
      *(_BYTE *)(v14 + 96) = 0;
      if (v48)
      {
        *(_DWORD *)(v14 + 100) = v49;
        *(_BYTE *)(v14 + 96) = 1;
      }
      *(_QWORD *)(v14 + 104) = v50;
      *(_QWORD *)(v14 + 112) = v51;
      v15 = v52;
      *(_QWORD *)(v14 + 120) = v52;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = (char *)(v14 + 128);
    }
LABEL_55:
    *((_QWORD *)this + 1) = v18;
    v40 = v52;
    if (v52)
    {
      v41 = (unint64_t *)&v52->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        if (!v48)
          goto LABEL_61;
LABEL_60:
        v48 = 0;
        goto LABEL_61;
      }
    }
    if (v48)
      goto LABEL_60;
LABEL_61:
    if (v46 != v47)
      free(v46);
  }
  std::mutex::unlock(v43);
}

void gdc::LayerDataStore::purge(gdc::LayerDataStore *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  void *__p;
  char v31;

  v3 = *((_QWORD *)this + 6);
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (v4)
    v6 = v5;
  else
    v6 = 0;
  v8 = (_BYTE *)*((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 9);
  v4 = v7 >= a3;
  v9 = v7 - a3;
  if (v4)
    v10 = v9;
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 1);
  if ((_BYTE *)v11 != v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)((char *)this + 24);
    while (v14 < v6 || v13 < v10)
    {
      v16 = *(_QWORD *)(v11 + 144);
      v17 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v15, (unsigned __int8 *)(v11 + 16));
      if (v17)
      {
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v15, v17);
        v18 = __p;
        if (__p)
        {
          if (v31)
          {
            if (*((_BYTE *)__p + 112))
              *((_BYTE *)__p + 112) = 0;
            v19 = (void *)v18[4];
            if (v19 != (void *)v18[6])
              free(v19);
          }
          operator delete(v18);
        }
        v8 = (_BYTE *)*((_QWORD *)this + 8);
      }
      v13 += v16;
      v11 = *(_QWORD *)(v11 + 8);
      ++v14;
      if ((_BYTE *)v11 == v8)
        goto LABEL_22;
    }
    v8 = (_BYTE *)v11;
LABEL_22:
    v20 = (_BYTE *)*((_QWORD *)this + 1);
    if (v20 != v8)
    {
      v21 = *(_QWORD *)v8;
      v22 = *(_QWORD *)v20;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(*(_QWORD *)v8 + 8);
      **(_QWORD **)(v21 + 8) = v22;
      while (1)
      {
        v23 = (_BYTE *)*((_QWORD *)v20 + 1);
        --*((_QWORD *)this + 2);
        v24 = (std::__shared_weak_count *)*((_QWORD *)v20 + 17);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
            break;
        }
        if (v20[112])
          goto LABEL_30;
LABEL_31:
        v27 = (void *)*((_QWORD *)v20 + 4);
        if (v27 != *((void **)v20 + 6))
          free(v27);
        operator delete(v20);
        v20 = v23;
        if (v23 == v8)
          goto LABEL_35;
      }
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!v20[112])
        goto LABEL_31;
LABEL_30:
      v20[112] = 0;
      goto LABEL_31;
    }
LABEL_35:
    v28 = *((_QWORD *)this + 9);
    v4 = v28 >= v13;
    v29 = v28 - v13;
    if (!v4)
      v29 = 0;
    *((_QWORD *)this + 9) = v29;
  }
}

void gdc::LayerDataStore::clearAllData(gdc::LayerDataStore *this)
{
  uint64_t v2;
  gdc::LayerDataStore *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t i;
  gdc::LayerDataStore *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  _BYTE *v13;
  void *v14;

  if (*((_QWORD *)this + 2))
  {
    v2 = *(_QWORD *)this;
    v3 = (gdc::LayerDataStore *)*((_QWORD *)this + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)this + 2) = 0;
    if (v3 != this)
    {
      while (1)
      {
        v8 = (gdc::LayerDataStore *)*((_QWORD *)v3 + 1);
        v9 = (std::__shared_weak_count *)*((_QWORD *)v3 + 17);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
            break;
        }
        if (*((_BYTE *)v3 + 112))
          goto LABEL_16;
LABEL_17:
        v12 = (void *)*((_QWORD *)v3 + 4);
        if (v12 != *((void **)v3 + 6))
          free(v12);
        operator delete(v3);
        v3 = v8;
        if (v8 == this)
          goto LABEL_3;
      }
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!*((_BYTE *)v3 + 112))
        goto LABEL_17;
LABEL_16:
      *((_BYTE *)v3 + 112) = 0;
      goto LABEL_17;
    }
  }
LABEL_3:
  if (*((_QWORD *)this + 6))
  {
    v5 = (_BYTE *)*((_QWORD *)this + 5);
    if (v5)
    {
      do
      {
        if (v5[112])
          v5[112] = 0;
        v13 = *(_BYTE **)v5;
        v14 = (void *)*((_QWORD *)v5 + 4);
        if (v14 != *((void **)v5 + 6))
          free(v14);
        operator delete(v5);
        v5 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 5) = 0;
    v6 = *((_QWORD *)this + 4);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * i) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  *((_QWORD *)this + 8) = this;
  *((_QWORD *)this + 9) = 0;
}

char *std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>(void ***a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char *v27;
  void **v28;
  char *v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  unint64_t v49;
  char v50;
  void **v51;
  void *v52;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 5) + 1;
  if (v3 > 0x199999999999999)
    abort();
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5) > v3)
    v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x199999999999999)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = operator new(160 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[32 * (v2 >> 5)];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = v8 + 48;
  *((_QWORD *)v8 + 2) = v8 + 48;
  v10 = *(char **)(a2 + 16);
  v12 = *(char **)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v8 + 4) = v8 + 48;
  *((_QWORD *)v8 + 5) = v11;
  v13 = v8 + 24;
  if (v10 != v12)
  {
    *((_QWORD *)v8 + 2) = v10;
    *v13 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    goto LABEL_28;
  }
  v14 = *(char **)(a2 + 24);
  v15 = v14 - v10;
  *v13 = &v9[v14 - v10];
  if (v14 != v10)
  {
    if (v15 < 8 || (unint64_t)(&v7[v2] - v10 + 48) < 0x20)
      goto LABEL_27;
    if (v15 >= 0x20)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFE0;
      v17 = (__int128 *)(v10 + 16);
      v18 = &v7[32 * (v2 >> 5) + 64];
      v19 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v15 == v16)
        goto LABEL_28;
      if ((v15 & 0x18) == 0)
      {
        v10 += v16;
        v9 += v16;
        do
        {
LABEL_27:
          v26 = *v10++;
          *v9++ = v26;
        }
        while (v10 != v14);
        goto LABEL_28;
      }
    }
    else
    {
      v16 = 0;
    }
    v21 = v15 & 0xFFFFFFFFFFFFFFF8;
    v9 += v15 & 0xFFFFFFFFFFFFFFF8;
    v22 = v16 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v23 = (uint64_t *)&v10[v16];
    v24 = &v7[32 * (v2 >> 5) + 48 + v16];
    do
    {
      v25 = *v23++;
      *v24++ = v25;
      v22 += 8;
    }
    while (v22);
    if (v15 != v21)
    {
      v10 += v21;
      goto LABEL_27;
    }
  }
LABEL_28:
  v27 = &v7[32 * (v2 >> 5)];
  *((_QWORD *)v27 + 10) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v27 + 88) = *(_OWORD *)(a2 + 88);
  v28 = (void **)&v7[160 * v6];
  *((_QWORD *)v27 + 13) = *(_QWORD *)(a2 + 104);
  *((_OWORD *)v27 + 7) = *(_OWORD *)(a2 + 112);
  *((_QWORD *)v27 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(v27 + 136) = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v27 + 19) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v29 = v8 + 160;
  v30 = *a1;
  v31 = a1[1];
  if (v31 != *a1)
  {
    v32 = 0;
    v33 = (uint64_t)&v7[v2 - 112];
    v34 = a1[1];
    while (1)
    {
      v38 = v8;
      v39 = (uint64_t)*(v34 - 20);
      v34 -= 20;
      *((_QWORD *)v8 - 20) = v39;
      v8 -= 160;
      v40 = v8 + 48;
      *((_QWORD *)v8 + 1) = *(v31 - 19);
      *((_QWORD *)v8 + 2) = v8 + 48;
      v41 = (char *)*(v31 - 18);
      *((_QWORD *)v8 + 3) = v8 + 48;
      *((_QWORD *)v8 + 4) = v8 + 48;
      v42 = (char *)*(v31 - 16);
      *((_QWORD *)v8 + 5) = *(v31 - 15);
      if (v41 == v42)
      {
        *((_QWORD *)v38 - 17) = &v40[(_BYTE *)*(v31 - 17) - v41];
        v43 = (char *)*(v31 - 17);
        if (v41 != v43)
        {
          v44 = v43 - v41;
          if ((unint64_t)(v43 - v41) >= 8 && (unint64_t)(v33 - 160 * v32 - (_QWORD)v41) >= 0x20)
          {
            if (v44 < 0x20)
            {
              v45 = 0;
              goto LABEL_42;
            }
            v46 = 0;
            v45 = v44 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v47 = &v38[v46];
              v48 = *(_OWORD *)&v41[v46 + 16];
              *((_OWORD *)v47 - 7) = *(_OWORD *)&v41[v46];
              *((_OWORD *)v47 - 6) = v48;
              v46 += 32;
            }
            while (v45 != v46);
            if (v44 == v45)
              goto LABEL_31;
            if ((v44 & 0x18) != 0)
            {
LABEL_42:
              v49 = v44 & 0xFFFFFFFFFFFFFFF8;
              v40 += v44 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(_QWORD *)&v38[v45 - 112] = *(_QWORD *)&v41[v45];
                v45 += 8;
              }
              while (v49 != v45);
              if (v44 == v49)
                goto LABEL_31;
              v41 += v49;
            }
            else
            {
              v41 += v45;
              v40 += v45;
            }
          }
          do
          {
            v50 = *v41++;
            *v40++ = v50;
          }
          while (v41 != v43);
        }
      }
      else
      {
        v35 = (uint64_t)*(v31 - 17);
        *((_QWORD *)v38 - 18) = v41;
        *((_QWORD *)v38 - 17) = v35;
        *((_OWORD *)v31 - 9) = 0uLL;
        *((_OWORD *)v31 - 8) = 0uLL;
      }
LABEL_31:
      *((_QWORD *)v38 - 10) = *(v31 - 10);
      *(_OWORD *)(v38 - 72) = *(_OWORD *)(v31 - 9);
      *((_QWORD *)v38 - 7) = *(v31 - 7);
      v36 = *((_OWORD *)v31 - 3);
      *((_QWORD *)v38 - 4) = *(v31 - 4);
      *((_OWORD *)v38 - 3) = v36;
      *(v31 - 5) = 0;
      *(v31 - 4) = 0;
      *(v31 - 6) = 0;
      v37 = *(_OWORD *)(v31 - 3);
      *((_QWORD *)v38 - 1) = *(v31 - 1);
      *(_OWORD *)(v38 - 24) = v37;
      *(v31 - 2) = 0;
      *(v31 - 1) = 0;
      *(v31 - 3) = 0;
      ++v32;
      v31 = v34;
      if (v34 == v30)
      {
        v31 = *a1;
        v51 = a1[1];
        *a1 = (void **)v8;
        a1[1] = (void **)v29;
        a1[2] = v28;
        while (1)
        {
          if (v51 == v31)
            goto LABEL_59;
          if (*((char *)v51 - 1) < 0)
          {
            operator delete(*(v51 - 3));
            if ((*((char *)v51 - 25) & 0x80000000) == 0)
              goto LABEL_54;
          }
          else if ((*((char *)v51 - 25) & 0x80000000) == 0)
          {
            goto LABEL_54;
          }
          operator delete(*(v51 - 6));
LABEL_54:
          v52 = *(v51 - 18);
          if (v52 != *(v51 - 16))
            free(v52);
          v51 -= 20;
        }
      }
    }
  }
  *a1 = (void **)v8;
  a1[1] = (void **)v29;
  a1[2] = v28;
LABEL_59:
  if (v31)
    operator delete(v31);
  return v29;
}

void gdc::ResourceStore::erase(int8x8_t *this, const gdc::ResourceKey *a2)
{
  int8x8_t v4;
  int8x8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  const void *v20;
  size_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  size_t v26;
  int v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  void *v30;
  int8x8_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t *v34;
  unint64_t v35;
  int8x8_t v36;
  uint64_t *v37;
  BOOL v38;
  int8x8_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  int8x8_t *v48;
  int8x8_t *v49;
  const void *v50;
  const void *v51;
  void *__p[2];
  char v53;

  v4 = this[34];
  if (v4)
  {
    v5 = this + 33;
    v6 = *(unsigned __int8 *)a2;
    v7 = *((unsigned __int16 *)a2 + 1);
    v8 = (v7
        + ((v6 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
    v9 = (uint64_t *)*((_QWORD *)a2 + 9);
    v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
    v11 = (uint8x8_t)vcnt_s8(v4);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= *(_QWORD *)&v4)
        v12 = v10 % *(_QWORD *)&v4;
    }
    else
    {
      v12 = v10 & (*(_QWORD *)&v4 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)v5 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = (const void *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2) - (_QWORD)v15;
        if (v11.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v23 = v14[1];
            if (v23 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
                && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
                && v14[11] == v9)
              {
                v24 = v14[3];
                if ((char *)v14[4] - (char *)v24 == v16)
                {
                  v49 = v5;
                  v51 = v15;
                  v25 = v15;
                  v26 = v16;
                  v27 = memcmp(v24, v25, v16);
                  v16 = v26;
                  v5 = v49;
                  v15 = v51;
                  if (!v27)
                    goto LABEL_29;
                }
              }
            }
            else if (((unint64_t)v23 & v17) != v12)
            {
              goto LABEL_36;
            }
            v14 = (uint64_t **)*v14;
            if (!v14)
              goto LABEL_36;
          }
        }
        do
        {
          v18 = (unint64_t)v14[1];
          if (v18 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
              && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
              && v14[11] == v9)
            {
              v19 = v14[3];
              if ((char *)v14[4] - (char *)v19 == v16)
              {
                v48 = v5;
                v50 = v15;
                v20 = v15;
                v21 = v16;
                v22 = memcmp(v19, v20, v16);
                v16 = v21;
                v5 = v48;
                v15 = v50;
                if (!v22)
                {
LABEL_29:
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v5, v14);
                  v28 = __p[0];
                  if (__p[0])
                  {
                    if (v53)
                    {
                      v29 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 15);
                      if (v29)
                        std::__shared_weak_count::__release_weak(v29);
                      v30 = (void *)v28[3];
                      if (v30 != (void *)v28[5])
                        free(v30);
                    }
                    operator delete(v28);
                  }
                  break;
                }
              }
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v4)
              v18 %= *(_QWORD *)&v4;
            if (v18 != v12)
              break;
          }
          v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_36:
  v31 = this + 46;
  v32 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(&this[46], (unsigned __int8 *)a2);
  if (v32)
  {
    v33 = v32;
    v34 = v32[14];
    v35 = v34[16];
    v37 = (uint64_t *)this[51];
    v36 = this[52];
    v38 = *(_QWORD *)&v36 >= v35;
    v39 = (int8x8_t)(*(_QWORD *)&v36 - v35);
    if (!v38)
      v39 = 0;
    this[52] = v39;
    if (v37 == v34)
      this[51] = (int8x8_t)v34[1];
    v40 = v32[14];
    v41 = *v40;
    *(_QWORD *)(v41 + 8) = v40[1];
    *(_QWORD *)v40[1] = v41;
    --*(_QWORD *)&this[45];
    v42 = (std::__shared_weak_count *)v40[15];
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (void *)v40[3];
    if (v45 != (void *)v40[5])
      free(v45);
    operator delete(v40);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v31, v33);
    v46 = __p[0];
    if (__p[0])
    {
      if (v53)
      {
        v47 = (void *)*((_QWORD *)__p[0] + 3);
        if (v47 != *((void **)__p[0] + 5))
          free(v47);
      }
      operator delete(v46);
    }
  }
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;
  void *v6;

  if (!a1[3])
    return;
  v2 = (void **)a1[2];
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 167) < 0)
      {
        operator delete(v2[18]);
        if (*((char *)v2 + 143) < 0)
LABEL_14:
          operator delete(v2[15]);
      }
      else if (*((char *)v2 + 143) < 0)
      {
        goto LABEL_14;
      }
      v6 = v2[3];
      if (v6 != v2[5])
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  a1[2] = 0;
  v3 = a1[1];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
  }
  a1[3] = 0;
}

uint64_t std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;

  v4 = (char *)(a1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 32;
  v5 = *(char **)(a2 + 8);
  v6 = *(char **)(a2 + 16);
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v5 == v6)
    goto LABEL_40;
  if (v7 < 8)
  {
    v25 = v4;
    goto LABEL_38;
  }
  if ((unint64_t)(v4 - v5) < 0x20)
  {
    v25 = v4;
    goto LABEL_38;
  }
  if (v7 >= 0x20)
  {
    v24 = v7 & 0xFFFFFFFFFFFFFFE0;
    v26 = (__int128 *)(v5 + 16);
    v27 = v4 + 16;
    v28 = v7 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 32;
    }
    while (v28);
    if (v7 == v24)
      goto LABEL_39;
    if ((v7 & 0x18) == 0)
    {
      v5 += v24;
      v25 = &v4[v24];
      goto LABEL_38;
    }
  }
  else
  {
    v24 = 0;
  }
  v30 = v7 & 0xFFFFFFFFFFFFFFF8;
  v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
  v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
  v32 = (uint64_t *)&v5[v24];
  v33 = &v4[v24];
  do
  {
    v34 = *v32++;
    *(_QWORD *)v33 = v34;
    v33 += 8;
    v31 += 8;
  }
  while (v31);
  if (v7 == v30)
    goto LABEL_39;
  v5 += v30;
  do
  {
LABEL_38:
    v35 = *v5++;
    *v25++ = v35;
  }
  while (v5 != v6);
LABEL_39:
  v4 = *(char **)(a1 + 16);
LABEL_40:
  *(_QWORD *)(a1 + 16) = &v4[v7];
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v36 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v37 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
  }
  v38 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
  }
  return a1;
}

void gdc::ResourceStore::clearAllResources(gdc::ResourceStore *this)
{
  float v2;
  size_t prime;
  char *v4;
  _QWORD *i;
  uint64_t j;
  _QWORD *v7;
  uint64_t v8;
  uint64_t k;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t m;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  void *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  unsigned __int8 v31[8];
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *__p;
  char v37;
  __int128 v38;
  __int128 v39;
  int v40;

  v38 = 0u;
  v39 = 0u;
  v40 = 1065353216;
  v2 = (float)(unint64_t)(*((_QWORD *)this + 41) + *((_QWORD *)this + 49));
  prime = (unint64_t)v2;
  if ((unint64_t)v2 == 1)
  {
    prime = 2;
LABEL_6:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v38, prime);
    goto LABEL_7;
  }
  if ((prime & ((unint64_t)v2 - 1)) != 0)
    prime = std::__next_prime((unint64_t)v2);
  if (prime)
    goto LABEL_6;
LABEL_7:
  v4 = (char *)this + 344;
  for (i = (_QWORD *)*((_QWORD *)this + 40); i; i = (_QWORD *)*i)
  {
    std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100]((uint64_t)v31, (uint64_t)(i + 2));
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v38, v31, (uint64_t)v31);
    if (v37 < 0)
    {
      operator delete(__p);
      if (v35 < 0)
LABEL_36:
        operator delete(v34);
    }
    else if (v35 < 0)
    {
      goto LABEL_36;
    }
    if (v32 != v33)
      free(v32);
  }
  for (j = *((_QWORD *)this + 44); (char *)j != v4; j = *(_QWORD *)(j + 8))
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v38, (unsigned __int8 *)(j + 16), j + 16);
  if (*((_QWORD *)this + 36))
  {
    v7 = (_QWORD *)*((_QWORD *)this + 35);
    if (v7)
    {
      do
      {
        v21 = (_QWORD *)*v7;
        v22 = (std::__shared_weak_count *)v7[15];
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        v23 = (void *)v7[3];
        if (v23 != (void *)v7[5])
          free(v23);
        operator delete(v7);
        v7 = v21;
      }
      while (v21);
    }
    *((_QWORD *)this + 35) = 0;
    v8 = *((_QWORD *)this + 34);
    if (v8)
    {
      for (k = 0; k != v8; ++k)
        *(_QWORD *)(*((_QWORD *)this + 33) + 8 * k) = 0;
    }
    *((_QWORD *)this + 36) = 0;
  }
  if (*((_QWORD *)this + 45))
  {
    v10 = *((_QWORD *)this + 43);
    v11 = (char *)*((_QWORD *)this + 44);
    v12 = *(_QWORD *)v11;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v12;
    *((_QWORD *)this + 45) = 0;
    if (v11 != v4)
    {
      do
      {
        v24 = (char *)*((_QWORD *)v11 + 1);
        v25 = (std::__shared_weak_count *)*((_QWORD *)v11 + 15);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = (void *)*((_QWORD *)v11 + 3);
        if (v28 != *((void **)v11 + 5))
          free(v28);
        operator delete(v11);
        v11 = v24;
      }
      while (v24 != v4);
    }
  }
  if (*((_QWORD *)this + 49))
  {
    v13 = (_QWORD *)*((_QWORD *)this + 48);
    if (v13)
    {
      do
      {
        v29 = (_QWORD *)*v13;
        v30 = (void *)v13[3];
        if (v30 != (void *)v13[5])
          free(v30);
        operator delete(v13);
        v13 = v29;
      }
      while (v29);
    }
    *((_QWORD *)this + 48) = 0;
    v14 = *((_QWORD *)this + 47);
    if (v14)
    {
      for (m = 0; m != v14; ++m)
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * m) = 0;
    }
    *((_QWORD *)this + 49) = 0;
  }
  *((_QWORD *)this + 51) = v4;
  *((_QWORD *)this + 52) = 0;
  std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear((_QWORD *)this + 38);
  v16 = *((_QWORD *)this + 11);
  if (v16)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(v16, &v38);
  v17 = (_QWORD *)v39;
  if ((_QWORD)v39)
  {
    do
    {
      v19 = (_QWORD *)*v17;
      v20 = (void *)v17[3];
      if (v20 != (void *)v17[5])
        free(v20);
      operator delete(v17);
      v17 = v19;
    }
    while (v19);
  }
  v18 = (void *)v38;
  *(_QWORD *)&v38 = 0;
  if (v18)
    operator delete(v18);
}

void gdc::ResourceStore::clearResources(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  void *__p[2];
  void *v47[2];
  int v48;

  v4 = (unsigned __int8 *)a1[35];
  if (!v4)
  {
LABEL_31:
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v47 = 0u;
    v48 = 1065353216;
    v26 = (char *)a1[40];
    if (!v26)
    {
LABEL_73:
      v41 = v47[0];
      if (v47[0])
      {
        do
        {
          v43 = (_QWORD *)*v41;
          v44 = (void *)v41[3];
          if (v44 != (void *)v41[5])
            free(v44);
          operator delete(v41);
          v41 = v43;
        }
        while (v43);
      }
      v42 = __p[0];
      __p[0] = 0;
      if (v42)
        operator delete(v42);
      return;
    }
    while (1)
    {
      while (1)
      {
        v27 = *(_QWORD *)(a2 + 24);
        if (!v27)
          goto LABEL_80;
        if ((*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v27 + 48))(v27, v26 + 16))
          break;
        v26 = *(char **)v26;
        if (!v26)
          goto LABEL_70;
      }
      std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)__p, (unsigned __int8 *)v26 + 16, (uint64_t)(v26 + 16));
      v28 = (int8x8_t)a1[39];
      v29 = *((_QWORD *)v26 + 1);
      v30 = (uint8x8_t)vcnt_s8(v28);
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.u32[0] > 1uLL)
      {
        if (v29 >= *(_QWORD *)&v28)
          v29 %= *(_QWORD *)&v28;
      }
      else
      {
        v29 &= *(_QWORD *)&v28 - 1;
      }
      v31 = *(char **)v26;
      v32 = a1[38];
      v33 = *(char **)(v32 + 8 * v29);
      do
      {
        v34 = v33;
        v33 = *(char **)v33;
      }
      while (v33 != v26);
      if (v34 != (char *)(a1 + 40))
      {
        v35 = *((_QWORD *)v34 + 1);
        if (v30.u32[0] > 1uLL)
        {
          if (v35 >= *(_QWORD *)&v28)
            v35 %= *(_QWORD *)&v28;
        }
        else
        {
          v35 &= *(_QWORD *)&v28 - 1;
        }
        v36 = *(_QWORD *)v26;
        if (v35 == v29)
          goto LABEL_55;
      }
      if (!v31)
        break;
      v37 = *((_QWORD *)v31 + 1);
      if (v30.u32[0] > 1uLL)
      {
        if (v37 >= *(_QWORD *)&v28)
          v37 %= *(_QWORD *)&v28;
      }
      else
      {
        v37 &= *(_QWORD *)&v28 - 1;
      }
      v36 = *(_QWORD *)v26;
      if (v37 != v29)
        break;
LABEL_56:
      v38 = *(_QWORD *)(v36 + 8);
      if (v30.u32[0] > 1uLL)
      {
        if (v38 >= *(_QWORD *)&v28)
          v38 %= *(_QWORD *)&v28;
      }
      else
      {
        v38 &= *(_QWORD *)&v28 - 1;
      }
      if (v38 != v29)
      {
        *(_QWORD *)(a1[38] + 8 * v38) = v34;
        v36 = *(_QWORD *)v26;
      }
LABEL_62:
      *(_QWORD *)v34 = v36;
      *(_QWORD *)v26 = 0;
      --a1[41];
      if (v26[167] < 0)
      {
        operator delete(*((void **)v26 + 18));
        if (v26[143] < 0)
LABEL_69:
          operator delete(*((void **)v26 + 15));
      }
      else if (v26[143] < 0)
      {
        goto LABEL_69;
      }
      v39 = (void *)*((_QWORD *)v26 + 3);
      if (v39 != *((void **)v26 + 5))
        free(v39);
      operator delete(v26);
      v26 = v31;
      if (!v31)
      {
LABEL_70:
        v40 = a1[11];
        if (v40 && v47[1])
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 48))(v40, __p);
        goto LABEL_73;
      }
    }
    *(_QWORD *)(v32 + 8 * v29) = 0;
    v36 = *(_QWORD *)v26;
LABEL_55:
    if (!v36)
      goto LABEL_62;
    goto LABEL_56;
  }
  while (1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      break;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, (uint64_t *)v4 + 2))
    {
      v6 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a1 + 46, v4 + 16);
      if (v6)
      {
        v7 = v6;
        v8 = v6[14];
        v9 = v8[16];
        v11 = (uint64_t *)a1[51];
        v10 = a1[52];
        v12 = v10 >= v9;
        v13 = v10 - v9;
        if (!v12)
          v13 = 0;
        a1[52] = v13;
        if (v11 == v8)
          a1[51] = v8[1];
        v14 = v6[14];
        v15 = *v14;
        *(_QWORD *)(v15 + 8) = v14[1];
        *(_QWORD *)v14[1] = v15;
        --a1[45];
        v16 = (std::__shared_weak_count *)v14[15];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (void *)v14[3];
        if (v19 != (void *)v14[5])
          free(v19);
        operator delete(v14);
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 46, v7);
        v20 = __p[0];
        if (__p[0])
        {
          if (LOBYTE(v47[0]))
          {
            v21 = (void *)*((_QWORD *)__p[0] + 3);
            if (v21 != *((void **)__p[0] + 5))
              free(v21);
          }
          operator delete(v20);
        }
      }
      v22 = *(unsigned __int8 **)v4;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 33, v4);
      v23 = __p[0];
      if (__p[0])
      {
        if (LOBYTE(v47[0]))
        {
          v24 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 15);
          if (v24)
            std::__shared_weak_count::__release_weak(v24);
          v25 = (void *)v23[3];
          if (v25 != (void *)v23[5])
            free(v25);
        }
        operator delete(v23);
      }
      v4 = v22;
      if (!v22)
        goto LABEL_31;
    }
    else
    {
      v4 = *(unsigned __int8 **)v4;
      if (!v4)
        goto LABEL_31;
    }
  }
LABEL_80:
  std::__throw_bad_function_call[abi:nn180100]();
  std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>(v45);
}

_QWORD *std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char *v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  v2 = operator new(0x88uLL);
  *v2 = 0;
  v2[1] = 0;
  v3 = (char *)(v2 + 7);
  v4 = *(char **)(a1 + 8);
  v2[2] = *(_QWORD *)a1;
  v2[3] = v2 + 7;
  v2[4] = v2 + 7;
  v2[5] = v2 + 7;
  v2[6] = 32;
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x21)
  {
    if (v6 <= 0x40)
      v7 = 64;
    else
      v7 = v5 - v4;
    v3 = (char *)malloc_type_malloc(v7, 0x100004077774924uLL);
    v8 = (char *)v2[3];
    v9 = (char *)v2[4];
    if (v8 == v9)
      goto LABEL_21;
    v10 = v9 - v8;
    if ((unint64_t)(v9 - v8) < 8)
    {
      v11 = v3;
      goto LABEL_20;
    }
    v11 = v3;
    if ((unint64_t)(v3 - v8) < 0x20)
      goto LABEL_20;
    if (v10 >= 0x20)
    {
      v12 = v10 & 0xFFFFFFFFFFFFFFE0;
      v13 = (__int128 *)(v8 + 16);
      v14 = v3 + 16;
      v15 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v10 == v12)
        goto LABEL_21;
      if ((v10 & 0x18) == 0)
      {
        v8 += v12;
        v11 = &v3[v12];
        goto LABEL_20;
      }
    }
    else
    {
      v12 = 0;
    }
    v17 = v10 & 0xFFFFFFFFFFFFFFF8;
    v11 = &v3[v10 & 0xFFFFFFFFFFFFFFF8];
    v18 = v12 - (v10 & 0xFFFFFFFFFFFFFFF8);
    v19 = (uint64_t *)&v8[v12];
    v20 = &v3[v12];
    do
    {
      v21 = *v19++;
      *(_QWORD *)v20 = v21;
      v20 += 8;
      v18 += 8;
    }
    while (v18);
    if (v10 == v17)
      goto LABEL_21;
    v8 += v17;
    do
    {
LABEL_20:
      v22 = *v8++;
      *v11++ = v22;
    }
    while (v8 != v9);
LABEL_21:
    v2[3] = v3;
    v2[4] = v3;
    v2[6] = v7;
  }
  if (v4 == v5)
    goto LABEL_40;
  if (v6 < 8)
  {
    v24 = v3;
    goto LABEL_38;
  }
  if ((unint64_t)(v3 - v4) < 0x20)
  {
    v24 = v3;
    goto LABEL_38;
  }
  if (v6 >= 0x20)
  {
    v23 = v6 & 0xFFFFFFFFFFFFFFE0;
    v25 = (__int128 *)(v4 + 16);
    v26 = v3 + 16;
    v27 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 32;
    }
    while (v27);
    if (v6 == v23)
      goto LABEL_39;
    if ((v6 & 0x18) == 0)
    {
      v4 += v23;
      v24 = &v3[v23];
      goto LABEL_38;
    }
  }
  else
  {
    v23 = 0;
  }
  v29 = v6 & 0xFFFFFFFFFFFFFFF8;
  v24 = &v3[v6 & 0xFFFFFFFFFFFFFFF8];
  v30 = v23 - (v6 & 0xFFFFFFFFFFFFFFF8);
  v31 = (uint64_t *)&v4[v23];
  v32 = &v3[v23];
  do
  {
    v33 = *v31++;
    *(_QWORD *)v32 = v33;
    v32 += 8;
    v30 += 8;
  }
  while (v30);
  if (v6 == v29)
    goto LABEL_39;
  v4 += v29;
  do
  {
LABEL_38:
    v34 = *v4++;
    *v24++ = v34;
  }
  while (v4 != v5);
LABEL_39:
  v3 = (char *)v2[4];
LABEL_40:
  v2[4] = &v3[v6];
  v2[11] = *(_QWORD *)(a1 + 72);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 80);
  v35 = *(_QWORD *)(a1 + 104);
  v2[14] = *(_QWORD *)(a1 + 96);
  v2[15] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v2[16] = *(_QWORD *)(a1 + 112);
  return v2;
}

void gdc::ResourceStore::createDebugNode(std::string *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  const std::string::value_type *v14;
  unint64_t v15;
  const std::string::value_type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void **v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *i;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void **v44;
  void **v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void **v54;
  uint64_t v55;
  char *ChildNode;
  char *v57;
  char v58[32];
  __int128 v59;
  uint64_t v60;
  int v61;
  char v62[32];
  __int128 v63;
  uint64_t v64;
  int v65;
  _QWORD v66[7];
  int v67;
  __int128 v68;
  _BYTE v69[18];
  __int128 v70;
  _BYTE v71[32];
  char v72;
  char v73[8];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD v79[7];
  int v80;
  _QWORD v81[7];
  int v82;
  _QWORD v83[7];
  int v84;
  char v85[32];
  std::string __p;
  int v87;
  char v88[23];
  char v89;
  std::string v90;
  int v91;
  _BYTE v92[24];
  void *v93;
  char v94;
  void **v95[3];
  void *v96;
  uint64_t v97;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    *this = *(std::string *)a3;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[2] + 7) = 0u;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 7) = 0u;
  *(_OWORD *)((char *)this[3].__r_.__value_.__r.__words + 7) = 0u;
  *((_BYTE *)&this[3].__r_.__value_.__s + 23) = 0;
  v92[23] = 9;
  strcpy(v92, "Resources");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)this, (__int128 *)v92);
  v55 = a2;
  v5 = *(_QWORD **)(a2 + 280);
  if (v5)
  {
    while (1)
    {
      v6 = (std::__shared_weak_count *)v5[15];
      if (v6)
      {
        v7 = std::__shared_weak_count::lock(v6);
        if (v7)
          break;
      }
LABEL_6:
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_59;
    }
    v8 = v7;
    v9 = v5[14];
    if (!v9)
    {
LABEL_51:
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_6;
    }
    strcpy((char *)&v68, "Resource");
    strcpy(v69, "\b");
    v70 = 0u;
    memset(v71, 0, sizeof(v71));
    v72 = 0;
    gdc::ResourceKey::createDebugNode((uint64_t)v92, (unsigned __int8 *)v9);
    gdc::DebugTreeNode::addChildNode(&v68, (__int128 *)v92);
    v10 = v96;
    if (v96)
    {
      v11 = v97;
      v12 = v96;
      if ((void *)v97 != v96)
      {
        do
        {
          v11 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v11);
        }
        while ((void *)v11 != v10);
        v12 = v96;
      }
      v97 = (uint64_t)v10;
      operator delete(v12);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v95);
    if (v94 < 0)
    {
      operator delete(v93);
      if ((v92[23] & 0x80000000) == 0)
        goto LABEL_17;
    }
    else if ((v92[23] & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(*(void **)v92);
LABEL_17:
    v92[23] = 18;
    strcpy(v92, "OriginalLoadReason");
    v13 = *(unsigned __int8 *)(v9 + 120);
    v14 = "<Invalid>";
    if (v13 <= 4)
      v14 = off_1E42FB0B8[v13];
    memset(&v90, 0, sizeof(v90));
    v91 = 4;
    std::string::__assign_external(&v90, v14);
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v88);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v15 = *(unsigned __int8 *)(v9 + 121);
    v92[23] = 6;
    strcpy(v92, "Source");
    v16 = "<Invalid>";
    if (v15 <= 3)
      v16 = off_1E42FB118[v15];
    memset(&__p, 0, sizeof(__p));
    v87 = 4;
    std::string::__assign_external(&__p, v16);
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v85);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = *(_QWORD *)(v9 + 96);
    v92[23] = 16;
    strcpy(v92, "CreatedTimestamp");
    memset(&v83[4], 0, 24);
    v84 = 0;
    v83[0] = v17;
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v83);
    v18 = *(_QWORD *)(v9 + 104);
    v92[23] = 13;
    strcpy(v92, "LastTimestamp");
    memset(&v81[4], 0, 24);
    v82 = 0;
    v81[0] = v18;
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v81);
    v19 = *(_QWORD *)(v9 + 112);
    v92[23] = 10;
    strcpy(v92, "TimeToLive");
    memset(&v79[4], 0, 24);
    v80 = 0;
    v79[0] = v19;
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v79);
    v20 = *(_QWORD *)(v9 + 128);
    v92[23] = 9;
    strcpy(v92, "RequestId");
    v76 = 0;
    v77 = 0;
    v75 = 0;
    v78 = 1;
    v74 = v20;
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v92, (uint64_t)v73);
    gdc::DebugTreeNode::addChildNode(ChildNode, &v68);
    v21 = *(void ***)&v71[9];
    if (*(_QWORD *)&v71[9])
    {
      v22 = *(_QWORD *)&v71[17];
      v23 = *(void **)&v71[9];
      if (*(_QWORD *)&v71[17] != *(_QWORD *)&v71[9])
      {
        do
        {
          v24 = *(_QWORD *)(v22 - 24);
          if (v24)
          {
            v25 = *(_QWORD *)(v22 - 16);
            v26 = *(void **)(v22 - 24);
            if (v25 != v24)
            {
              do
              {
                if (*(char *)(v25 - 1) < 0)
                  operator delete(*(void **)(v25 - 24));
                v25 -= 24;
              }
              while (v25 != v24);
              v26 = *(void **)(v22 - 24);
            }
            *(_QWORD *)(v22 - 16) = v24;
            operator delete(v26);
          }
          v27 = *(_QWORD *)(v22 - 48);
          if (v27)
          {
            v28 = *(_QWORD *)(v22 - 40);
            v29 = *(void **)(v22 - 48);
            if (v28 != v27)
            {
              do
              {
                if (*(char *)(v28 - 9) < 0)
                  operator delete(*(void **)(v28 - 32));
                v28 -= 64;
              }
              while (v28 != v27);
              v29 = *(void **)(v22 - 48);
            }
            *(_QWORD *)(v22 - 40) = v27;
            operator delete(v29);
          }
          v30 = (void **)(v22 - 80);
          if (*(char *)(v22 - 57) < 0)
            operator delete(*v30);
          v22 -= 80;
        }
        while (v30 != v21);
        v23 = *(void **)&v71[9];
      }
      *(_QWORD *)&v71[17] = v21;
      operator delete(v23);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v70 + 1));
    if ((char)v70 < 0)
    {
      operator delete(*(void **)&v69[1]);
      if ((v69[0] & 0x80000000) == 0)
        goto LABEL_51;
    }
    else if ((v69[0] & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete((void *)v68);
    goto LABEL_51;
  }
LABEL_59:
  v92[23] = 16;
  strcpy(v92, "Failed Resources");
  v57 = gdc::DebugTreeNode::createChildNode((uint64_t)this, (__int128 *)v92);
  for (i = *(uint64_t **)(v55 + 320); i; i = (uint64_t *)*i)
  {
    gdc::ResourceKey::createDebugNode((uint64_t)v92, (unsigned __int8 *)i + 16);
    strcpy((char *)&v68, "Error");
    *(_WORD *)v69 = 5;
    v70 = 0u;
    memset(v71, 0, sizeof(v71));
    v72 = 0;
    v89 = 4;
    strcpy(v88, "Code");
    v34 = i[14];
    memset(&v66[4], 0, 24);
    v67 = 0;
    v66[0] = v34;
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v88, (uint64_t)v66);
    v89 = 6;
    strcpy(v88, "Domain");
    v64 = 0;
    v63 = 0uLL;
    v65 = 4;
    if (&v63 != (__int128 *)(i + 15))
    {
      if (*((char *)i + 143) < 0)
      {
        std::string::__assign_no_alias<true>(&v63, (void *)i[15], i[16]);
      }
      else
      {
        v63 = *(_OWORD *)(i + 15);
        v64 = i[17];
      }
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v88, (uint64_t)v62);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    v89 = 11;
    strcpy(v88, "Description");
    v60 = 0;
    v59 = 0uLL;
    v61 = 4;
    if (&v59 != (__int128 *)(i + 18))
    {
      if (*((char *)i + 167) < 0)
      {
        std::string::__assign_no_alias<true>(&v59, (void *)i[18], i[19]);
      }
      else
      {
        v59 = *((_OWORD *)i + 9);
        v60 = i[20];
      }
    }
    gdc::DebugTreeNode::addProperty((uint64_t)&v68, (uint64_t)v88, (uint64_t)v58);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)v59);
    gdc::DebugTreeNode::addChildNode(v92, &v68);
    gdc::DebugTreeNode::addChildNode(v57, (__int128 *)v92);
    v35 = *(void ***)&v71[9];
    if (*(_QWORD *)&v71[9])
    {
      v36 = *(_QWORD *)&v71[17];
      v37 = *(void **)&v71[9];
      if (*(_QWORD *)&v71[17] != *(_QWORD *)&v71[9])
      {
        do
        {
          v38 = *(_QWORD *)(v36 - 24);
          if (v38)
          {
            v39 = *(_QWORD *)(v36 - 16);
            v40 = *(void **)(v36 - 24);
            if (v39 != v38)
            {
              do
              {
                if (*(char *)(v39 - 1) < 0)
                  operator delete(*(void **)(v39 - 24));
                v39 -= 24;
              }
              while (v39 != v38);
              v40 = *(void **)(v36 - 24);
            }
            *(_QWORD *)(v36 - 16) = v38;
            operator delete(v40);
          }
          v41 = *(_QWORD *)(v36 - 48);
          if (v41)
          {
            v42 = *(_QWORD *)(v36 - 40);
            v43 = *(void **)(v36 - 48);
            if (v42 != v41)
            {
              do
              {
                if (*(char *)(v42 - 9) < 0)
                  operator delete(*(void **)(v42 - 32));
                v42 -= 64;
              }
              while (v42 != v41);
              v43 = *(void **)(v36 - 48);
            }
            *(_QWORD *)(v36 - 40) = v41;
            operator delete(v43);
          }
          v44 = (void **)(v36 - 80);
          if (*(char *)(v36 - 57) < 0)
            operator delete(*v44);
          v36 -= 80;
        }
        while (v44 != v35);
        v37 = *(void **)&v71[9];
      }
      *(_QWORD *)&v71[17] = v35;
      operator delete(v37);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v70 + 1));
    if ((char)v70 < 0)
    {
      operator delete(*(void **)&v69[1]);
      if ((v69[0] & 0x80000000) == 0)
      {
LABEL_100:
        v45 = (void **)v96;
        if (!v96)
          goto LABEL_127;
        goto LABEL_104;
      }
    }
    else if ((v69[0] & 0x80000000) == 0)
    {
      goto LABEL_100;
    }
    operator delete((void *)v68);
    v45 = (void **)v96;
    if (!v96)
      goto LABEL_127;
LABEL_104:
    v46 = v97;
    v47 = v45;
    if ((void **)v97 != v45)
    {
      do
      {
        v48 = *(_QWORD *)(v46 - 24);
        if (v48)
        {
          v49 = *(_QWORD *)(v46 - 16);
          v50 = *(void **)(v46 - 24);
          if (v49 != v48)
          {
            do
            {
              if (*(char *)(v49 - 1) < 0)
                operator delete(*(void **)(v49 - 24));
              v49 -= 24;
            }
            while (v49 != v48);
            v50 = *(void **)(v46 - 24);
          }
          *(_QWORD *)(v46 - 16) = v48;
          operator delete(v50);
        }
        v51 = *(_QWORD *)(v46 - 48);
        if (v51)
        {
          v52 = *(_QWORD *)(v46 - 40);
          v53 = *(void **)(v46 - 48);
          if (v52 != v51)
          {
            do
            {
              if (*(char *)(v52 - 9) < 0)
                operator delete(*(void **)(v52 - 32));
              v52 -= 64;
            }
            while (v52 != v51);
            v53 = *(void **)(v46 - 48);
          }
          *(_QWORD *)(v46 - 40) = v51;
          operator delete(v53);
        }
        v54 = (void **)(v46 - 80);
        if (*(char *)(v46 - 57) < 0)
          operator delete(*v54);
        v46 -= 80;
      }
      while (v54 != v45);
      v47 = (void **)v96;
    }
    v97 = (uint64_t)v45;
    operator delete(v47);
LABEL_127:
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v95);
    if (v94 < 0)
    {
      operator delete(v93);
      if ((v92[23] & 0x80000000) != 0)
LABEL_131:
        operator delete(*(void **)v92);
    }
    else if ((v92[23] & 0x80000000) != 0)
    {
      goto LABEL_131;
    }
  }
}

_QWORD *gdc::ResourceStore::setNewResourceNotification(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 32);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 56);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
        *(_QWORD *)(a1 + 56) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 56) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 32) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)(a1 + 56) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

_QWORD *gdc::ResourceStore::setRetryResourceNotification(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 64);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 88);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88));
        *(_QWORD *)(a1 + 88) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 88) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 64) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88));
      *(_QWORD *)(a1 + 88) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t gdc::LayerData::estimatedCost(gdc::LayerData *this)
{
  return 1;
}

void gdc::LayerData::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  _QWORD v12[7];
  int v13;
  char v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[7];
  int v21;
  _QWORD v22[7];
  int v23;
  _QWORD v24[7];
  int v25;
  _BYTE v26[24];
  void *v27;
  char v28;
  void **v29;
  void *v30;
  uint64_t v31;

  strcpy((char *)a2, "Layer Data");
  *(_WORD *)(a2 + 23) = 10;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  gdc::LayerDataRequestKey::createDebugNode((uint64_t)v26, (unsigned __int8 *)(a1 + 16));
  gdc::DebugTreeNode::addChildNode((_QWORD *)a2, (__int128 *)v26);
  v4 = v30;
  if (v30)
  {
    v5 = v31;
    v6 = v30;
    if ((void *)v31 != v30)
    {
      do
      {
        v5 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v5);
      }
      while ((void *)v5 != v4);
      v6 = v30;
    }
    v31 = (uint64_t)v4;
    operator delete(v6);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v29);
  if (v28 < 0)
    operator delete(v27);
  if ((v26[23] & 0x80000000) != 0)
    operator delete(*(void **)v26);
  v26[23] = 16;
  strcpy(v26, "CreatedTimestamp");
  v7 = *(_QWORD *)(a1 + 136);
  v25 = 0;
  memset(&v24[4], 0, 24);
  v24[0] = v7;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v26, (uint64_t)v24);
  v8 = *(_QWORD *)(a1 + 144);
  v26[23] = 13;
  strcpy(v26, "LastTimestamp");
  v23 = 0;
  memset(&v22[4], 0, 24);
  v22[0] = v8;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v26, (uint64_t)v22);
  v9 = *(_QWORD *)(a1 + 152);
  v26[23] = 10;
  strcpy(v26, "TimeToLive");
  v21 = 0;
  memset(&v20[4], 0, 24);
  v20[0] = v9;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v26, (uint64_t)v20);
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16);
  v26[23] = 13;
  strcpy(v26, "EstimatedCost");
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v16 = 0;
  v15 = v10(a1);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v26, (uint64_t)v14);
  v11 = *(unsigned __int8 *)(a1 + 160);
  v26[23] = 8;
  strcpy(v26, "Complete");
  v13 = 0;
  memset(&v12[4], 0, 24);
  v12[0] = v11;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v26, (uint64_t)v12);
}

uint64_t gdc::Timer::Timer(uint64_t a1, dispatch_queue_t queue, _QWORD *a3)
{
  dispatch_source_t v5;
  void *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E42B46F8;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, queue);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;

  v7 = *(NSObject **)(a1 + 80);
  if (!v7)
    return a1;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = ___ZN3gdc5TimerC2EPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvvEEE_block_invoke;
  v12[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  v12[4] = a1;
  v8 = v13;
  v9 = a3[3];
  if (v9)
  {
    if ((_QWORD *)v9 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v13);
      goto LABEL_7;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v14 = (_BYTE *)v9;
LABEL_7:
  dispatch_source_set_event_handler(v7, v12);
  dispatch_resume(*(dispatch_object_t *)(a1 + 80));
  if (v14 == v13)
  {
    v10 = 4;
    goto LABEL_11;
  }
  if (v14)
  {
    v10 = 5;
    v8 = v14;
LABEL_11:
    (*(void (**)(_QWORD *))(*v8 + 8 * v10))(v8);
  }
  return a1;
}

void sub_19FF3D7A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

void gdc::ResourceFetcher::resourceTileForTile(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::downloadZoomRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::tileSize(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gdc::ResourceFetcher::createDebugNode(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t **v9;
  char *v10;
  char v11;
  std::string::size_type v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  char *ChildNode;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  char *v28;
  uint64_t v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  void **v33;
  void **v34;
  void *v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  void **v40;
  void *v41;
  void **v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  std::string v52;
  std::string v53;
  _BYTE v54[32];
  uint64_t v55;
  char v56;
  void **v57;
  void *__p;
  void **v59;
  char v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66[32];
  std::string v67;
  int v68;
  char *v69;
  void **v70;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  std::string v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_OWORD *)(a3 + 63) = 0u;
  *(_OWORD *)(a3 + 79) = 0u;
  *(_BYTE *)(a3 + 95) = 0;
  v50 = a3;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 64))(&v72, a1);
  v51 = a1;
  if ((_BYTE)v72)
  {
    v54[23] = 19;
    strcpy(v54, "Download Zoom Range");
    v6 = HIDWORD(v72);
    v5 = v73;
    v7 = (char *)operator new(0x80uLL);
    v70 = (void **)(v7 + 128);
    v71 = v7 + 128;
    *((_QWORD *)v7 + 1) = v6;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 9) = v5;
    *((_QWORD *)v7 + 12) = 0;
    *((_DWORD *)v7 + 14) = 1;
    *((_QWORD *)v7 + 13) = 0;
    *((_QWORD *)v7 + 14) = 0;
    *((_DWORD *)v7 + 30) = 1;
    v69 = v7;
    gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t *)&v69);
    if (v7[119] < 0)
      operator delete(*((void **)v7 + 12));
    a1 = v51;
    if (v7[55] < 0)
      operator delete(*((void **)v7 + 4));
    v8 = v7;
    goto LABEL_10;
  }
  v54[23] = 19;
  strcpy(v54, "Download Zoom Range");
  memset(&v67, 0, sizeof(v67));
  v68 = 4;
  std::string::__assign_external(&v67, "None");
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t)v66);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)v67.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v8);
  }
  v54[23] = 9;
  strcpy(v54, "Tile Size");
  (*(void (**)(char **__return_ptr, _QWORD *))(*a1 + 72))(&v69, a1);
  if ((_BYTE)v69)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 72))(&v74, a1);
    v63 = 0;
    v64 = 0;
    v65 = 1;
    v62 = 0;
    v61 = HIDWORD(v74.__r_.__value_.__r.__words[0]);
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 1;
    v62 = 0;
    v61 = 0;
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t)v60);
  v9 = (uint64_t **)a1[10];
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (v9)
  {
    v10 = 0;
    do
    {
      v14 = *((unsigned __int16 *)v9 + 8);
      *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = 0;
      v74.__r_.__value_.__r.__words[0] = 0;
      if (v10 < v71)
      {
        *(_QWORD *)v10 = v14;
        v11 = v54[16];
        *(_OWORD *)(v10 + 8) = *(_OWORD *)v54;
        v10[24] = v11;
        v12 = v74.__r_.__value_.__r.__words[0];
        *((_QWORD *)v10 + 4) = 0;
        *((_QWORD *)v10 + 5) = v12;
        *(_QWORD *)(v10 + 47) = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7);
        v10[55] = 0;
        *((_DWORD *)v10 + 14) = 0;
        v13 = (void **)(v10 + 64);
      }
      else
      {
        v15 = (uint64_t)v69;
        v16 = (v10 - v69) >> 6;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58)
          abort();
        v18 = v71 - v69;
        if ((v71 - v69) >> 5 > v17)
          v17 = v18 >> 5;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0)
          v19 = 0x3FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19 >> 58)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(v19 << 6);
        v21 = (uint64_t)&v20[64 * v16];
        *(_QWORD *)v21 = v14;
        *(_QWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 32) = 0;
        v74.__r_.__value_.__r.__words[0] = 0;
        *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = 0;
        v13 = (void **)(v21 + 64);
        *(_DWORD *)(v21 + 56) = 0;
        if (v10 == (char *)v15)
        {
          v69 = &v20[64 * v16];
          v70 = (void **)(v21 + 64);
          v71 = &v20[64 * v19];
        }
        else
        {
          do
          {
            v22 = *((_OWORD *)v10 - 4);
            *(_OWORD *)(v21 - 55) = *(_OWORD *)(v10 - 55);
            *(_OWORD *)(v21 - 64) = v22;
            v23 = *((_OWORD *)v10 - 2);
            *(_QWORD *)(v21 - 16) = *((_QWORD *)v10 - 2);
            *(_OWORD *)(v21 - 32) = v23;
            *((_QWORD *)v10 - 3) = 0;
            *((_QWORD *)v10 - 2) = 0;
            *((_QWORD *)v10 - 4) = 0;
            *(_DWORD *)(v21 - 8) = *((_DWORD *)v10 - 2);
            v21 -= 64;
            v10 -= 64;
          }
          while (v10 != (char *)v15);
          v10 = v69;
          v24 = v70;
          v69 = (char *)v21;
          v70 = v13;
          v71 = &v20[64 * v19];
          while (v24 != (void **)v10)
          {
            if (*((char *)v24 - 9) < 0)
              operator delete(*(v24 - 4));
            v24 -= 8;
          }
        }
        if (v10)
          operator delete(v10);
      }
      v70 = v13;
      v9 = (uint64_t **)*v9;
      v10 = (char *)v13;
    }
    while (v9);
  }
  else
  {
    v13 = 0;
  }
  v54[23] = 14;
  strcpy(v54, "Resource Types");
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v54, (uint64_t *)&v69);
  v54[23] = 6;
  strcpy(v54, "Stores");
  ChildNode = gdc::DebugTreeNode::createChildNode(a3, (__int128 *)v54);
  v26 = (unsigned __int16 *)v51[2];
  v27 = (unsigned __int16 *)v51[3];
  if (v26 != v27)
  {
    v28 = ChildNode;
    do
    {
      v29 = *((_QWORD *)v26 + 1);
      *((_BYTE *)&v53.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v53, "Store ");
      std::to_string(&v52, *v26);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v52;
      else
        v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      else
        size = v52.__r_.__value_.__l.__size_;
      v32 = std::string::append(&v53, (const std::string::value_type *)v30, size);
      v74 = *v32;
      v32->__r_.__value_.__r.__words[0] = 0;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      gdc::ResourceStore::createDebugNode((std::string *)v54, v29, (uint64_t)&v74);
      gdc::DebugTreeNode::addChildNode(v28, (__int128 *)v54);
      v33 = (void **)__p;
      if (__p)
      {
        v34 = v59;
        v35 = __p;
        if (v59 != __p)
        {
          do
          {
            v36 = (void **)*(v34 - 3);
            if (v36)
            {
              v37 = (void **)*(v34 - 2);
              v38 = *(v34 - 3);
              if (v37 != v36)
              {
                do
                {
                  if (*((char *)v37 - 1) < 0)
                    operator delete(*(v37 - 3));
                  v37 -= 3;
                }
                while (v37 != v36);
                v38 = *(v34 - 3);
              }
              *(v34 - 2) = v36;
              operator delete(v38);
            }
            v39 = (void **)*(v34 - 6);
            if (v39)
            {
              v40 = (void **)*(v34 - 5);
              v41 = *(v34 - 6);
              if (v40 != v39)
              {
                do
                {
                  if (*((char *)v40 - 9) < 0)
                    operator delete(*(v40 - 4));
                  v40 -= 8;
                }
                while (v40 != v39);
                v41 = *(v34 - 6);
              }
              *(v34 - 5) = v39;
              operator delete(v41);
            }
            v42 = v34 - 10;
            if (*((char *)v34 - 57) < 0)
              operator delete(*v42);
            v34 -= 10;
          }
          while (v42 != v33);
          v35 = __p;
        }
        v59 = v33;
        operator delete(v35);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v57);
      if (v56 < 0)
      {
        operator delete(*(void **)&v54[24]);
        if ((v54[23] & 0x80000000) == 0)
        {
LABEL_73:
          if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_74;
          goto LABEL_79;
        }
      }
      else if ((v54[23] & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete(*(void **)v54);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_75;
        goto LABEL_80;
      }
LABEL_79:
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_75:
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_81;
        goto LABEL_40;
      }
LABEL_80:
      operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
LABEL_81:
        operator delete(v53.__r_.__value_.__l.__data_);
LABEL_40:
      v26 += 12;
    }
    while (v26 != v27);
  }
  v54[23] = 10;
  strcpy(v54, "DecodeTime");
  v43 = gdc::DebugTreeNode::createChildNode(v50, (__int128 *)v54);
  std::mutex::lock((std::mutex *)(v51 + 42));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 0, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 1, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 2, (uint64_t)(v51 + 50), 1000.0);
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v43, 3, (uint64_t)(v51 + 50), 1000.0);
  std::mutex::unlock((std::mutex *)(v51 + 42));
  v54[23] = 5;
  strcpy(v54, "Bytes");
  v44 = gdc::DebugTreeNode::createChildNode(v50, (__int128 *)v54);
  std::mutex::lock((std::mutex *)(v51 + 14));
  v45 = *((_OWORD *)v51 + 12);
  *(_OWORD *)v54 = *((_OWORD *)v51 + 11);
  *(_OWORD *)&v54[16] = v45;
  v55 = v51[26];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 0, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  v46 = *(_OWORD *)(v51 + 29);
  *(_OWORD *)v54 = *(_OWORD *)(v51 + 27);
  *(_OWORD *)&v54[16] = v46;
  v55 = v51[31];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 1, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  v47 = *((_OWORD *)v51 + 17);
  *(_OWORD *)v54 = *((_OWORD *)v51 + 16);
  *(_OWORD *)&v54[16] = v47;
  v55 = v51[36];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 2, (uint64_t)v54, 1.0);
  std::mutex::lock((std::mutex *)(v51 + 14));
  v48 = *(_OWORD *)(v51 + 39);
  *(_OWORD *)v54 = *(_OWORD *)(v51 + 37);
  *(_OWORD *)&v54[16] = v48;
  v55 = v51[41];
  std::mutex::unlock((std::mutex *)(v51 + 14));
  gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()((uint64_t)v44, 3, (uint64_t)v54, 1.0);
  v49 = v69;
  if (v69)
  {
    while (v13 != (void **)v49)
    {
      if (*((char *)v13 - 9) < 0)
        operator delete(*(v13 - 4));
      v13 -= 8;
    }
    operator delete(v49);
  }
}

void sub_19FF3E058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  gdc::DebugTreeNode::~DebugTreeNode(a9);
  _Unwind_Resume(a1);
}

void gdc::ResourceFetcher::tileSetInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gdc::ResourceFetcher::setContentScale(uint64_t this, float a2)
{
  *(float *)(this + 8) = a2;
  return this;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D58D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D5890;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0,std::allocator<gdc::ResourceFetcher::createResource(unsigned long long,gdc::ResourceKey const&,gdc::ResourceOriginalLoadReason,gdc::ResourceSource,long long,BOOL,gdc::RawResourceSourceData const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5890;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void gdc::ResourceFetcher::createDebugNode(std::string const&,std::bitset<4ul> const&)const::$_0::operator()(uint64_t a1, int a2, uint64_t a3, double a4)
{
  const char *v7;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  _BYTE v19[16];
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE v25[16];
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[16];
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE v43[16];
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 __dst;
  unint64_t v50;

  v7 = off_1E42FB118[a2];
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v50 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v50) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memcpy(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  v13 = gdc::DebugTreeNode::createChildNode(a1, &__dst);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)__dst);
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 6780481;
  v14 = *(double *)(a3 + 16) * a4;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v48 = 2;
  v44 = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v43);
  v15 = *(_QWORD *)(a3 + 32);
  HIBYTE(v50) = 5;
  strcpy((char *)&__dst, "Count");
  v40 = 0;
  v41 = 0;
  v42 = 1;
  v39 = 0;
  v38 = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v37);
  v16 = *(double *)(a3 + 24);
  HIBYTE(v50) = 5;
  strcpy((char *)&__dst, "Total");
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v36 = 2;
  v32 = v16 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v31);
  v17 = *(double *)a3;
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 7235917;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v30 = 2;
  v26 = v17 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v25);
  v18 = *(double *)(a3 + 8);
  HIBYTE(v50) = 3;
  LODWORD(__dst) = 7889229;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 2;
  v20 = v18 * a4;
  gdc::DebugTreeNode::addProperty((uint64_t)v13, (uint64_t)&__dst, (uint64_t)v19);
}

void gdc::ResourceFetcher::~ResourceFetcher(gdc::ResourceFetcher *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = off_1E42B07F8;
  std::mutex::~mutex((std::mutex *)((char *)this + 336));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    operator delete(v4);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = (void *)*((_QWORD *)this + 5);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v5;
    operator delete(v7);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *((_QWORD *)this + 3);
    v13 = (void *)*((_QWORD *)this + 2);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v11;
    operator delete(v13);
  }
}

void gdc::ResourceManager::~ResourceManager(gdc::ResourceManager *this)
{
  gdc::ResourceManager::~ResourceManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  gdc::ResourceManager *v22;
  uint64_t v23;
  gdc::ResourceManager *v24;
  uint64_t v25;
  gdc::ResourceManager *v26;
  uint64_t v27;
  gdc::ResourceManager *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  char *v57;
  char *v58;
  void *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  _QWORD v79[3];
  _QWORD *v80;
  _QWORD v81[3];
  _QWORD *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  v2 = (void **)((char *)this + 56);
  while (v3 != v4)
  {
    v6 = *(_QWORD **)(v3 + 8);
    v5 = *(std::__shared_weak_count **)(v3 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v82 = 0;
    md::LabelsLogic::setNeedsDisplayCallback(v6, v81);
    v9 = v82;
    if (v82 == v81)
    {
      v9 = v81;
      v10 = 4;
    }
    else
    {
      if (!v82)
        goto LABEL_12;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_12:
    v80 = 0;
    gdc::ResourceStore::setNewResourceNotification((uint64_t)v6, v79);
    v11 = v80;
    if (v80 == v79)
    {
      v11 = v79;
      v12 = 4;
    }
    else
    {
      if (!v80)
        goto LABEL_17;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
    v78 = 0;
    gdc::ResourceStore::setRetryResourceNotification((uint64_t)v6, v77);
    v13 = v78;
    if (v78 == v77)
    {
      v13 = v77;
      v14 = 4;
    }
    else
    {
      if (!v78)
        goto LABEL_22;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_22:
    if (v5)
    {
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 += 24;
  }
  v17 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); v17 != i; v17 += 16)
    (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 8) + 40))(*(_QWORD *)(v17 + 8));
  v19 = *((_QWORD *)this + 34);
  if (v19)
  {
    v75[0] = &off_1E42D5B18;
    v76 = v75;
    geo::TaskQueue::barrierSync(v19, v75);
    v20 = v76;
    if (v76 == v75)
    {
      v21 = 4;
      v20 = v75;
LABEL_34:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
    else if (v76)
    {
      v21 = 5;
      goto LABEL_34;
    }
  }
  v22 = (gdc::ResourceManager *)*((_QWORD *)this + 54);
  if (v22 == (gdc::ResourceManager *)((char *)this + 408))
  {
    v23 = 4;
    v22 = (gdc::ResourceManager *)((char *)this + 408);
LABEL_39:
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  }
  else if (v22)
  {
    v23 = 5;
    goto LABEL_39;
  }
  v24 = (gdc::ResourceManager *)*((_QWORD *)this + 50);
  if (v24 == (gdc::ResourceManager *)((char *)this + 376))
  {
    v25 = 4;
    v24 = (gdc::ResourceManager *)((char *)this + 376);
LABEL_44:
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  }
  else if (v24)
  {
    v25 = 5;
    goto LABEL_44;
  }
  v26 = (gdc::ResourceManager *)*((_QWORD *)this + 46);
  if (v26 == (gdc::ResourceManager *)((char *)this + 344))
  {
    v27 = 4;
    v26 = (gdc::ResourceManager *)((char *)this + 344);
LABEL_49:
    (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
  }
  else if (v26)
  {
    v27 = 5;
    goto LABEL_49;
  }
  v28 = (gdc::ResourceManager *)*((_QWORD *)this + 42);
  if (v28 == (gdc::ResourceManager *)((char *)this + 312))
  {
    v29 = 4;
    v28 = (gdc::ResourceManager *)((char *)this + 312);
LABEL_54:
    (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  }
  else if (v28)
  {
    v29 = 5;
    goto LABEL_54;
  }
  v30 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v30)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*(_QWORD **)(v30 + 56));
    v31 = *(_QWORD **)(v30 + 24);
    if (v31)
    {
      do
      {
        v36 = (_QWORD *)*v31;
        v37 = (void *)v31[3];
        if (v37 != (void *)v31[5])
          free(v37);
        operator delete(v31);
        v31 = v36;
      }
      while (v36);
    }
    v32 = *(void **)(v30 + 8);
    *(_QWORD *)(v30 + 8) = 0;
    if (v32)
      operator delete(v32);
    MEMORY[0x1A1AF4E00](v30, 0x10A1C40AAFFF269);
  }
  v33 = *((_QWORD *)this + 35);
  if (v33)
  {
    v34 = *((_QWORD *)this + 36);
    v35 = (void *)*((_QWORD *)this + 35);
    if (v34 != v33)
    {
      do
      {
        v38 = *(std::__shared_weak_count **)(v34 - 8);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v34 -= 16;
      }
      while (v34 != v33);
      v35 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v33;
    operator delete(v35);
  }
  v41 = *((_QWORD *)this + 31);
  if (v41)
  {
    v42 = *((_QWORD *)this + 32);
    v43 = (void *)*((_QWORD *)this + 31);
    if (v42 != v41)
    {
      do
      {
        v44 = *(_QWORD **)(v42 - 24);
        if (v44)
        {
          do
          {
            v46 = (_QWORD *)*v44;
            v47 = (void *)v44[3];
            if (v47 != (void *)v44[5])
              free(v47);
            operator delete(v44);
            v44 = v46;
          }
          while (v46);
        }
        v45 = *(void **)(v42 - 40);
        *(_QWORD *)(v42 - 40) = 0;
        if (v45)
          operator delete(v45);
        v42 -= 48;
      }
      while (v42 != v41);
      v43 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v41;
    operator delete(v43);
  }
  v48 = (_QWORD *)*((_QWORD *)this + 28);
  if (v48)
  {
    do
    {
      v60 = (_QWORD *)*v48;
      v61 = (void *)v48[3];
      if (v61 != (void *)v48[5])
        free(v61);
      operator delete(v48);
      v48 = v60;
    }
    while (v60);
  }
  v49 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v49)
    operator delete(v49);
  v50 = (_QWORD *)*((_QWORD *)this + 23);
  if (v50)
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v52)
    operator delete(v52);
  v53 = (_QWORD *)*((_QWORD *)this + 18);
  if (v53)
  {
    do
    {
      v62 = (_QWORD *)*v53;
      v63 = (void *)v53[3];
      if (v63 != (void *)v53[5])
        free(v63);
      operator delete(v53);
      v53 = v62;
    }
    while (v62);
  }
  v54 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v54)
    operator delete(v54);
  v55 = (_QWORD *)*((_QWORD *)this + 13);
  if (v55)
  {
    do
    {
      v64 = (_QWORD *)*v55;
      v65 = (void *)v55[3];
      if (v65 != (void *)v55[5])
        free(v65);
      operator delete(v55);
      v55 = v64;
    }
    while (v64);
  }
  v56 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v56)
    operator delete(v56);
  v57 = (char *)*v2;
  if (*v2)
  {
    v58 = (char *)*((_QWORD *)this + 8);
    v59 = *v2;
    if (v58 != v57)
    {
      do
      {
        v66 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v58 -= 24;
      }
      while (v58 != v57);
      v59 = *v2;
    }
    *((_QWORD *)this + 8) = v57;
    operator delete(v59);
  }
  v69 = (void *)*((_QWORD *)this + 4);
  if (v69)
  {
    *((_QWORD *)this + 5) = v69;
    operator delete(v69);
  }
  v70 = (_QWORD *)*((_QWORD *)this + 1);
  if (v70)
  {
    v71 = (_QWORD *)*((_QWORD *)this + 2);
    v72 = (void *)*((_QWORD *)this + 1);
    if (v71 != v70)
    {
      do
      {
        v74 = *--v71;
        v73 = v74;
        *v71 = 0;
        if (v74)
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      }
      while (v71 != v70);
      v72 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v70;
    operator delete(v72);
  }
}

void sub_19FF3EB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  void **v14;
  char *v15;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  v19 = *(_QWORD **)(v13 + 432);
  if (v19 == (_QWORD *)(v13 + 408))
  {
    v20 = 4;
    v19 = (_QWORD *)(v13 + 408);
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = *(_QWORD **)(v13 + 400);
  if (v21 == (_QWORD *)(v13 + 376))
  {
    v22 = 4;
    v21 = (_QWORD *)(v13 + 376);
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_16:
  v23 = *(_QWORD **)(v13 + 368);
  if (v23 == (_QWORD *)(v13 + 344))
  {
    v24 = 4;
    v23 = (_QWORD *)(v13 + 344);
  }
  else
  {
    if (!v23)
      goto LABEL_21;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_21:
  v25 = *(_QWORD **)(v13 + 336);
  if (v25 == (_QWORD *)(v13 + 312))
  {
    v26 = 4;
    v25 = (_QWORD *)(v13 + 312);
  }
  else
  {
    if (!v25)
      goto LABEL_26;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_26:
  std::unique_ptr<gdc::ResourceStatusContainer>::~unique_ptr[abi:nn180100]((uint64_t *)(v13 + 304));
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v13 + 280));
  geo::linear_map<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>,std::equal_to<gdc::ResourceFetcher *>,std::allocator<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>,std::vector<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>>::~linear_map((void **)(v13 + 248));
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v13 + 208);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v13 + 168);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v13 + 128);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v13 + 88);
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(v14);
  v27 = *(void **)(v13 + 32);
  if (v27)
  {
    *(_QWORD *)(v13 + 40) = v27;
    operator delete(v27);
  }
  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100]((_QWORD *)(v13 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<gdc::ResourceStatusContainer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  void *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__tree<gdc::ResourceKey,gdc::ResourceKeyLessThan,std::allocator<gdc::ResourceKey>>::destroy(*(_QWORD **)(v2 + 56));
    v3 = *(_QWORD **)(v2 + 24);
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = (void *)v3[3];
        if (v7 != (void *)v3[5])
          free(v7);
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v2, 0x10A1C40AAFFF269);
  }
  return a1;
}

void **geo::linear_map<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>,std::equal_to<gdc::ResourceFetcher *>,std::allocator<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>,std::vector<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          do
          {
            v7 = (_QWORD *)*v5;
            v8 = (void *)v5[3];
            if (v8 != (void *)v5[5])
              free(v8);
            operator delete(v5);
            v5 = v7;
          }
          while (v7);
        }
        v6 = (void *)*((_QWORD *)v3 - 5);
        *((_QWORD *)v3 - 5) = 0;
        if (v6)
          operator delete(v6);
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D5B18;
  return result;
}

void std::__function::__func<gdc::ResourceManager::~ResourceManager()::$_0,std::allocator<gdc::ResourceManager::~ResourceManager()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5B18;
}

uint64_t **gdc::ResourceStatusContainer::resourceResetActive(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 0;
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceReset(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 0;
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceLoading(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 1;
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceArrived(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 2;
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceFailed(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 3;
  return result;
}

uint64_t **gdc::ResourceStatusContainer::resourceCancelled(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t **result;

  result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (result)
    *((_DWORD *)result + 28) = 4;
  return result;
}

void std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D5AD0;
  return result;
}

void std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5AD0;
}

std::string *std::__function::__func<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0,std::allocator<gdc::ResourceManager::ResourceManager(geo::TaskQueue *,std::function<void ()(void)>)::$_0>,std::string ()(unsigned short)>::operator()@<X0>(unsigned __int16 *a1@<X1>, std::string *a2@<X8>)
{
  return std::to_string(a2, *a1);
}

char *geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(uint64_t a1, unsigned __int16 *a2)
{
  char *v4;
  char *v5;
  char *result;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  result = v4;
  if (v4 != v5)
  {
    result = v4;
    while (*a2 != *(unsigned __int16 *)result)
    {
      result += 16;
      if (result == v5)
        goto LABEL_7;
    }
  }
  if (result == v5)
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      v9 = (v5 - v4) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_OWORD *)v14 = *(_OWORD *)a2;
      v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        v4 = *(char **)a1;
      }
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v13[16 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      v8 = v5 + 16;
    }
    *(_QWORD *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

uint64_t std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6 != (void *)v2[5])
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::__split_buffer<std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(_QWORD **)(i - 24);
    if (v4)
    {
      do
      {
        v6 = (_QWORD *)*v4;
        v7 = (void *)v4[3];
        if (v7 != (void *)v4[5])
          free(v7);
        operator delete(v4);
        v4 = v6;
      }
      while (v6);
    }
    v5 = *(void **)(i - 40);
    *(_QWORD *)(i - 40) = 0;
    if (v5)
      operator delete(v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5A40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5A40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 432);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D59F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D59F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 400);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D59B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D59B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  int8x8_t v41;
  uint64_t *v42;
  uint8x8_t v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t result;
  uint64_t v52;
  void *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD v57[5];
  __int128 v58;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    v4 = v2 + 16;
    while (1)
    {
      v52 = v3[2];
      v53 = v57;
      v54 = (char *)v57;
      v55 = v57;
      v56 = 32;
      v6 = (char *)v3[3];
      v5 = (char *)v3[4];
      v7 = v5 - v6;
      v8 = v57;
      if ((unint64_t)(v5 - v6) < 0x21)
        goto LABEL_25;
      v9 = v7 <= 0x40 ? 64 : v5 - v6;
      v8 = malloc_type_malloc(v9, 0x100004077774924uLL);
      v10 = (char *)v53;
      v11 = v54;
      if (v53 != v54)
        break;
LABEL_24:
      v53 = v8;
      v54 = (char *)v8;
      v56 = v9;
LABEL_25:
      if (v6 != v5)
      {
        if (v7 < 8)
        {
          v26 = v8;
        }
        else if ((unint64_t)((char *)v8 - v6) < 0x20)
        {
          v26 = v8;
        }
        else
        {
          if (v7 < 0x20)
          {
            v25 = 0;
LABEL_36:
            v31 = v7 & 0xFFFFFFFFFFFFFFF8;
            v26 = (char *)v8 + (v7 & 0xFFFFFFFFFFFFFFF8);
            v32 = v25 - (v7 & 0xFFFFFFFFFFFFFFF8);
            v33 = (uint64_t *)&v6[v25];
            v34 = (_QWORD *)((char *)v8 + v25);
            do
            {
              v35 = *v33++;
              *v34++ = v35;
              v32 += 8;
            }
            while (v32);
            if (v7 != v31)
            {
              v6 += v31;
              goto LABEL_41;
            }
LABEL_42:
            v8 = v54;
            goto LABEL_43;
          }
          v25 = v7 & 0xFFFFFFFFFFFFFFE0;
          v27 = (__int128 *)(v6 + 16);
          v28 = v8 + 2;
          v29 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 32;
          }
          while (v29);
          if (v7 == v25)
            goto LABEL_42;
          if ((v7 & 0x18) != 0)
            goto LABEL_36;
          v6 += v25;
          v26 = (char *)v8 + v25;
        }
        do
        {
LABEL_41:
          v36 = *v6++;
          *v26++ = v36;
        }
        while (v6 != v5);
        goto LABEL_42;
      }
LABEL_43:
      v37 = v3[11];
      v54 = (char *)v8 + v7;
      v57[4] = v37;
      v58 = *((_OWORD *)v3 + 6);
      v38 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v2[38] + 8), (unsigned __int8 *)&v52);
      if (v38)
        *((_DWORD *)v38 + 28) = 0;
      v39 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v2 + 16, (unsigned __int8 *)&v52);
      if (v39)
      {
        v40 = v39;
        v41 = (int8x8_t)v2[17];
        v42 = v39[1];
        v43 = (uint8x8_t)vcnt_s8(v41);
        v43.i16[0] = vaddlv_u8(v43);
        if (v43.u32[0] > 1uLL)
        {
          if ((unint64_t)v42 >= *(_QWORD *)&v41)
            v42 = (uint64_t *)((unint64_t)v42 % *(_QWORD *)&v41);
        }
        else
        {
          v42 = (uint64_t *)((*(_QWORD *)&v41 - 1) & (unint64_t)v42);
        }
        v44 = *(uint64_t ***)(*v4 + 8 * (_QWORD)v42);
        do
        {
          v45 = v44;
          v44 = (uint64_t **)*v44;
        }
        while (v44 != v39);
        if (v45 == v2 + 18)
          goto LABEL_63;
        v46 = v45[1];
        if (v43.u32[0] > 1uLL)
        {
          if ((unint64_t)v46 >= *(_QWORD *)&v41)
            v46 = (uint64_t *)((unint64_t)v46 % *(_QWORD *)&v41);
        }
        else
        {
          v46 = (uint64_t *)((unint64_t)v46 & (*(_QWORD *)&v41 - 1));
        }
        if (v46 != v42)
        {
LABEL_63:
          if (!*v39)
            goto LABEL_64;
          v47 = (*v39)[1];
          if (v43.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&v41)
              v47 %= *(_QWORD *)&v41;
          }
          else
          {
            v47 &= *(_QWORD *)&v41 - 1;
          }
          if ((uint64_t *)v47 != v42)
LABEL_64:
            *(_QWORD *)(*v4 + 8 * (_QWORD)v42) = 0;
        }
        v48 = *v39;
        if (*v39)
        {
          v49 = (uint64_t *)v48[1];
          if (v43.u32[0] > 1uLL)
          {
            if ((unint64_t)v49 >= *(_QWORD *)&v41)
              v49 = (uint64_t *)((unint64_t)v49 % *(_QWORD *)&v41);
          }
          else
          {
            v49 = (uint64_t *)((unint64_t)v49 & (*(_QWORD *)&v41 - 1));
          }
          if (v49 != v42)
          {
            *(_QWORD *)(*v4 + 8 * (_QWORD)v49) = v45;
            v48 = *v39;
          }
        }
        *v45 = v48;
        *v39 = 0;
        --v2[19];
        v50 = v39[3];
        if (v50 != v40[5])
          free(v50);
        operator delete(v40);
      }
      if (v53 != v55)
        free(v53);
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_77;
    }
    v12 = v54 - (_BYTE *)v53;
    if ((unint64_t)(v54 - (_BYTE *)v53) < 8)
    {
      v13 = v8;
    }
    else
    {
      v13 = v8;
      if ((unint64_t)((char *)v8 - (_BYTE *)v53) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v14 = 0;
LABEL_18:
          v19 = v12 & 0xFFFFFFFFFFFFFFF8;
          v13 = (char *)v8 + (v12 & 0xFFFFFFFFFFFFFFF8);
          v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
          v21 = (uint64_t *)&v10[v14];
          v22 = (_QWORD *)((char *)v8 + v14);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            v20 += 8;
          }
          while (v20);
          if (v12 == v19)
            goto LABEL_24;
          v10 += v19;
          goto LABEL_23;
        }
        v14 = v12 & 0xFFFFFFFFFFFFFFE0;
        v15 = (__int128 *)((char *)v53 + 16);
        v16 = v8 + 2;
        v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 32;
        }
        while (v17);
        if (v12 == v14)
          goto LABEL_24;
        if ((v12 & 0x18) != 0)
          goto LABEL_18;
        v10 += v14;
        v13 = (char *)v8 + v14;
      }
    }
    do
    {
LABEL_23:
      v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
    goto LABEL_24;
  }
LABEL_77:
  result = v2[42];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D5968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::operator()(uint64_t a1, unsigned __int8 ***a2, uint64_t *a3, unsigned __int8 **a4)
{
  _QWORD *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  NSObject *v8;
  uint64_t *v9;
  std::string *p_p;
  unsigned __int8 *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  NSObject *v23;
  uint64_t *v24;
  std::string *v25;
  uint64_t **v26;
  void *v27;
  void *v28;
  NSObject *v29;
  uint64_t *v30;
  std::string *v31;
  NSObject *v32;
  uint64_t *v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  std::string *v39;
  uint64_t *v40;
  uint64_t **v41;
  int8x8_t v42;
  uint64_t *v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD **v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t **v51;
  std::string::size_type v52;
  void *v53;
  NSObject *v54;
  std::string *v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  uint64_t **v58;
  void *v59;
  NSObject *v60;
  std::string *v61;
  uint64_t *v62;
  uint64_t *v63;
  int8x8_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t **v74;
  std::string::size_type v75;
  void *v76;
  NSObject *v77;
  std::string *v78;
  uint64_t *v79;
  uint64_t result;
  std::string __p;
  uint8_t buf[4];
  std::string *v84;
  __int16 v85;
  uint64_t *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v8 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, *v6);
        v9 = (uint64_t *)*((_QWORD *)*v6 + 16);
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        *(_DWORD *)buf = 136315394;
        v84 = p_p;
        v85 = 2048;
        v86 = v9;
        _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_DEBUG, "Received resource: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      v11 = *v6;
      v12 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, *v6);
      v13 = v12;
      v14 = (uint64_t *)*((_QWORD *)v11 + 16);
      v15 = (int8x8_t)v5[22];
      if (!*(_QWORD *)&v15)
        goto LABEL_32;
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = *((_QWORD *)v11 + 16);
        if ((unint64_t)v14 >= *(_QWORD *)&v15)
          v17 = (unint64_t)v14 % *(_QWORD *)&v15;
      }
      else
      {
        v17 = (*(_QWORD *)&v15 - 1) & (unint64_t)v14;
      }
      v18 = *(_QWORD ***)(v5[21] + 8 * v17);
      if (!v18 || (v19 = *v18) == 0)
      {
LABEL_32:
        if (v12 && v12[14] == v14)
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v23 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&__p, *v6);
            v24 = (uint64_t *)*((_QWORD *)*v6 + 16);
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &__p;
            *(_DWORD *)buf = 136315394;
            v84 = v25;
            v85 = 2048;
            v86 = v24;
            _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_DEBUG, "** Received resource: %s, rid: %llu", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }

          v26 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v5[38] + 8), *v6);
          if (v26)
            *((_DWORD *)v26 + 28) = 2;
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v13);
          v27 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0])
          {
            if (__p.__r_.__value_.__s.__data_[16])
            {
              v28 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
              if (v28 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40))
                free(v28);
            }
            operator delete(v27);
          }
        }
        else
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v29 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&__p, *v6);
            v30 = (uint64_t *)*((_QWORD *)*v6 + 16);
            v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &__p;
            *(_DWORD *)buf = 136315394;
            v84 = v31;
            v85 = 2048;
            v86 = v30;
            _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_DEBUG, "** Received esource should either be in progress or canceled: %s, rid: %llu", buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }

        }
        goto LABEL_4;
      }
      if (v16.u32[0] < 2uLL)
      {
        v20 = *(_QWORD *)&v15 - 1;
        while (1)
        {
          v22 = (uint64_t *)v19[1];
          if (v22 == v14)
          {
            if ((uint64_t *)v19[2] == v14)
              goto LABEL_55;
          }
          else if (((unint64_t)v22 & v20) != v17)
          {
            goto LABEL_32;
          }
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_32;
        }
      }
      while (1)
      {
        v21 = (uint64_t *)v19[1];
        if (v21 == v14)
          break;
        if ((unint64_t)v21 >= *(_QWORD *)&v15)
          v21 = (uint64_t *)((unint64_t)v21 % *(_QWORD *)&v15);
        if (v21 != (uint64_t *)v17)
          goto LABEL_32;
LABEL_22:
        v19 = (_QWORD *)*v19;
        if (!v19)
          goto LABEL_32;
      }
      if ((uint64_t *)v19[2] != v14)
        goto LABEL_22;
LABEL_55:
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v32 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, *v6);
        v33 = (uint64_t *)*((_QWORD *)*v6 + 16);
        v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &__p;
        *(_DWORD *)buf = 136315394;
        v84 = v34;
        v85 = 2048;
        v86 = v33;
        _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_DEBUG, "Removing resource from cancelled list: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v19);
      if (__p.__r_.__value_.__r.__words[0])
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_4:
      v6 += 2;
    }
    while (v6 != v7);
  }
  v35 = *a3;
  v36 = a3[1];
  while (v35 != v36)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v38 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)(v35 + 8));
      v39 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v40 = *(uint64_t **)v35;
      *(_DWORD *)buf = 136315394;
      v84 = v39;
      v85 = 2048;
      v86 = v40;
      _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_DEBUG, "Received failed resource: %s, %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v41 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, (unsigned __int8 *)(v35 + 8));
    v42 = (int8x8_t)v5[22];
    if (!*(_QWORD *)&v42)
      goto LABEL_96;
    v43 = *(uint64_t **)v35;
    v44 = (uint8x8_t)vcnt_s8(v42);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      v45 = *(_QWORD *)v35;
      if ((unint64_t)v43 >= *(_QWORD *)&v42)
        v45 = (unint64_t)v43 % *(_QWORD *)&v42;
    }
    else
    {
      v45 = (*(_QWORD *)&v42 - 1) & (unint64_t)v43;
    }
    v46 = *(_QWORD ***)(v5[21] + 8 * v45);
    if (v46)
    {
      v47 = *v46;
      if (*v46)
      {
        if (v44.u32[0] < 2uLL)
        {
          v48 = *(_QWORD *)&v42 - 1;
          while (1)
          {
            v50 = (uint64_t *)v47[1];
            if (v50 == v43)
            {
              if ((uint64_t *)v47[2] == v43)
                goto LABEL_97;
            }
            else if (((unint64_t)v50 & v48) != v45)
            {
              goto LABEL_96;
            }
            v47 = (_QWORD *)*v47;
            if (!v47)
              goto LABEL_97;
          }
        }
        do
        {
          v49 = v47[1];
          if ((uint64_t *)v49 == v43)
          {
            if ((uint64_t *)v47[2] == v43)
              break;
          }
          else
          {
            if (v49 >= *(_QWORD *)&v42)
              v49 %= *(_QWORD *)&v42;
            if (v49 != v45)
              goto LABEL_96;
          }
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
    }
    else
    {
LABEL_96:
      v47 = 0;
    }
LABEL_97:
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)(v5 + 16), (unsigned __int8 *)(v35 + 8), v35 + 8);
    if (v41 && v41[14] == *(uint64_t **)v35)
    {
      v51 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v5[38] + 8), (unsigned __int8 *)(v35 + 8));
      if (v51)
        *((_DWORD *)v51 + 28) = 3;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v41);
      v52 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_68;
      if (__p.__r_.__value_.__s.__data_[16])
      {
        v53 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v53 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40))
          free(v53);
      }
      v37 = (void *)v52;
    }
    else
    {
      if (!v47)
        goto LABEL_68;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v54 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)(v35 + 8));
        v55 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v56 = *(uint64_t **)v35;
        *(_DWORD *)buf = 136315394;
        v84 = v55;
        v85 = 2048;
        v86 = v56;
        _os_log_impl(&dword_19F029000, v54, OS_LOG_TYPE_DEBUG, "Removing fsailed resource from cancelled list: %s, rid: %llu", buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }

      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v47);
      v37 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_68;
    }
    operator delete(v37);
LABEL_68:
    v35 += 160;
  }
  v57 = *a4;
  v58 = (uint64_t **)a4[1];
  if (*a4 == (unsigned __int8 *)v58)
    goto LABEL_164;
  while (2)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v60 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, v57 + 8);
      v61 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v62 = *(uint64_t **)v57;
      *(_DWORD *)buf = 136315394;
      v84 = v61;
      v85 = 2048;
      v86 = v62;
      _os_log_impl(&dword_19F029000, v60, OS_LOG_TYPE_DEBUG, "Received cancelled resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v63 = *(uint64_t **)v57;
    v64 = (int8x8_t)v5[22];
    if (!*(_QWORD *)&v64)
      goto LABEL_147;
    v65 = (uint8x8_t)vcnt_s8(v64);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      v66 = *(_QWORD *)v57;
      if ((unint64_t)v63 >= *(_QWORD *)&v64)
        v66 = (unint64_t)v63 % *(_QWORD *)&v64;
    }
    else
    {
      v66 = (*(_QWORD *)&v64 - 1) & (unint64_t)v63;
    }
    v67 = *(_QWORD ***)(v5[21] + 8 * v66);
    if (!v67 || (v68 = *v67) == 0)
    {
LABEL_147:
      v72 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v5 + 11, v57 + 8);
      if (!v72)
        goto LABEL_119;
      v73 = v72;
      if (v72[14] != v63)
        goto LABEL_119;
      v74 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v5[38] + 8), v57 + 8);
      if (v74)
        *((_DWORD *)v74 + 28) = 4;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 11, v73);
      v75 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_119;
      if (__p.__r_.__value_.__s.__data_[16])
      {
        v76 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v76 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40))
          free(v76);
      }
      v59 = (void *)v75;
      goto LABEL_118;
    }
    if (v65.u32[0] < 2uLL)
    {
      v69 = *(_QWORD *)&v64 - 1;
      while (1)
      {
        v71 = (uint64_t *)v68[1];
        if (v71 == v63)
        {
          if ((uint64_t *)v68[2] == v63)
            goto LABEL_155;
        }
        else if (((unint64_t)v71 & v69) != v66)
        {
          goto LABEL_147;
        }
        v68 = (_QWORD *)*v68;
        if (!v68)
          goto LABEL_147;
      }
    }
    while (1)
    {
      v70 = (uint64_t *)v68[1];
      if (v70 == v63)
        break;
      if ((unint64_t)v70 >= *(_QWORD *)&v64)
        v70 = (uint64_t *)((unint64_t)v70 % *(_QWORD *)&v64);
      if (v70 != (uint64_t *)v66)
        goto LABEL_147;
LABEL_137:
      v68 = (_QWORD *)*v68;
      if (!v68)
        goto LABEL_147;
    }
    if ((uint64_t *)v68[2] != v63)
      goto LABEL_137;
LABEL_155:
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v77 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, v57 + 8);
      v78 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v79 = *(uint64_t **)v57;
      *(_DWORD *)buf = 136315394;
      v84 = v78;
      v85 = 2048;
      v86 = v79;
      _os_log_impl(&dword_19F029000, v77, OS_LOG_TYPE_DEBUG, "Removing cancelled resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5 + 21, v68);
    v59 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
LABEL_118:
      operator delete(v59);
LABEL_119:
    v57 += 160;
    if (v57 != (unsigned __int8 *)v58)
      continue;
    break;
  }
LABEL_164:
  result = v5[42];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void std::__shared_ptr_emplace<gdc::ResourceStore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::ResourceStore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_emplace<gdc::ResourceStore>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void **v16;
  void *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  void *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *result;
  uint64_t v44;

  v2 = *(_QWORD **)(a1 + 408);
  if (v2)
  {
    do
    {
      v14 = (_QWORD *)*v2;
      v15 = (void *)v2[3];
      if (v15 != (void *)v2[5])
        free(v15);
      operator delete(v2);
      v2 = v14;
    }
    while (v14);
  }
  v3 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v3)
    operator delete(v3);
  if (*(_QWORD *)(a1 + 384))
  {
    v4 = *(_QWORD *)(a1 + 368);
    v5 = *(uint64_t **)(a1 + 376);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *(_QWORD *)(a1 + 384) = 0;
    if (v5 != (uint64_t *)(a1 + 368))
    {
      do
      {
        v21 = (uint64_t *)v5[1];
        v22 = (std::__shared_weak_count *)v5[15];
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (void *)v5[3];
        if (v25 != (void *)v5[5])
          free(v25);
        operator delete(v5);
        v5 = v21;
      }
      while (v21 != (uint64_t *)(a1 + 368));
    }
  }
  v7 = *(void ***)(a1 + 344);
  if (v7)
  {
    do
    {
      v16 = (void **)*v7;
      if (*((char *)v7 + 167) < 0)
      {
        operator delete(v7[18]);
        if (*((char *)v7 + 143) < 0)
LABEL_24:
          operator delete(v7[15]);
      }
      else if (*((char *)v7 + 143) < 0)
      {
        goto LABEL_24;
      }
      v17 = v7[3];
      if (v17 != v7[5])
        free(v17);
      operator delete(v7);
      v7 = v16;
    }
    while (v16);
  }
  v8 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 304);
  if (v9)
  {
    do
    {
      v18 = (_QWORD *)*v9;
      v19 = (std::__shared_weak_count *)v9[15];
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v20 = (void *)v9[3];
      if (v20 != (void *)v9[5])
        free(v20);
      operator delete(v9);
      v9 = v18;
    }
    while (v18);
  }
  v10 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(_QWORD *)(a1 + 264);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 272);
    v13 = *(void **)(a1 + 264);
    if (v12 == v11)
    {
LABEL_46:
      *(_QWORD *)(a1 + 272) = v11;
      operator delete(v13);
      goto LABEL_47;
    }
    while (1)
    {
      if (*(char *)(v12 - 1) < 0)
      {
        operator delete(*(void **)(v12 - 24));
        if (*(char *)(v12 - 25) < 0)
LABEL_44:
          operator delete(*(void **)(v12 - 48));
      }
      else if (*(char *)(v12 - 25) < 0)
      {
        goto LABEL_44;
      }
      v26 = *(void **)(v12 - 144);
      if (v26 != *(void **)(v12 - 128))
        free(v26);
      v12 -= 160;
      if (v12 == v11)
      {
        v13 = *(void **)(a1 + 264);
        goto LABEL_46;
      }
    }
  }
LABEL_47:
  v27 = *(_QWORD *)(a1 + 240);
  if (!v27)
    goto LABEL_59;
  v28 = *(_QWORD *)(a1 + 248);
  v29 = *(void **)(a1 + 240);
  if (v28 != v27)
  {
    while (1)
    {
      if (*(char *)(v28 - 1) < 0)
      {
        operator delete(*(void **)(v28 - 24));
        if (*(char *)(v28 - 25) < 0)
LABEL_56:
          operator delete(*(void **)(v28 - 48));
      }
      else if (*(char *)(v28 - 25) < 0)
      {
        goto LABEL_56;
      }
      v30 = *(void **)(v28 - 144);
      if (v30 != *(void **)(v28 - 128))
        free(v30);
      v28 -= 160;
      if (v28 == v27)
      {
        v29 = *(void **)(a1 + 240);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 248) = v27;
  operator delete(v29);
LABEL_59:
  v31 = *(_QWORD *)(a1 + 216);
  if (v31)
  {
    v32 = *(_QWORD *)(a1 + 224);
    v33 = *(void **)(a1 + 216);
    if (v32 != v31)
    {
      do
      {
        v34 = *(std::__shared_weak_count **)(v32 - 8);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v32 -= 16;
      }
      while (v32 != v31);
      v33 = *(void **)(a1 + 216);
    }
    *(_QWORD *)(a1 + 224) = v31;
    operator delete(v33);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  v37 = *(_QWORD **)(a1 + 144);
  if (v37 == (_QWORD *)(a1 + 120))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 120);
  }
  else
  {
    if (!v37)
      goto LABEL_75;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_75:
  v39 = *(_QWORD **)(a1 + 112);
  if (v39 == (_QWORD *)(a1 + 88))
  {
    v40 = 4;
    v39 = (_QWORD *)(a1 + 88);
  }
  else
  {
    if (!v39)
      goto LABEL_80;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_80:
  v41 = *(_QWORD **)(a1 + 80);
  if (v41 == (_QWORD *)(a1 + 56))
  {
    v42 = 4;
    v41 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v41)
      goto LABEL_85;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_85:
  result = *(_QWORD **)(a1 + 48);
  if (result == (_QWORD *)(a1 + 24))
  {
    v44 = 4;
    result = (_QWORD *)(a1 + 24);
  }
  else
  {
    if (!result)
      return result;
    v44 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v44))();
}

void std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D5920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D5920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<gdc::ResourceManager::updateExpired(long long)::$_0,std::allocator<gdc::ResourceManager::updateExpired(long long)::$_0>,void ()(gdc::ResourceKey const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int16 *v5;
  int8x8_t **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  std::string *v10;
  uint64_t **v11;
  char *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  std::string *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 8);
  v6 = (int8x8_t **)v4[7];
  v5 = (unsigned __int16 *)v4[8];
  if (v6 != (int8x8_t **)v5)
  {
    while (*(unsigned __int16 *)(a2 + 2) != *(unsigned __int16 *)v6)
    {
      v6 += 3;
      if (v6 == (int8x8_t **)v5)
        return;
    }
  }
  if (v6 != (int8x8_t **)v5)
  {
    gdc::ResourceStore::resource((gdc::ResourceStore *)&v19, v6[1], (unsigned __int8 *)a2);
    v7 = v19;
    if (v19)
    {
      v8 = *(_QWORD *)(v19 + 112);
      if (v8 >= 1 && *(_QWORD *)(v19 + 96) + v8 < *(_QWORD *)(a1 + 16))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
          v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v22 = v10;
          _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Requested resource expired: %s", buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

        gdc::ResourceStore::erase(v6[1], (const gdc::ResourceKey *)a2);
        v11 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v4[38] + 8), (unsigned __int8 *)a2);
        if (v11)
          *((_DWORD *)v11 + 28) = 0;
        v12 = (char *)v4[4];
        v13 = (char *)v4[5];
        v14 = (uint64_t)(v4 + 4);
        if (v12 != v13)
        {
          while (*(unsigned __int16 *)(v7 + 2) != *(unsigned __int16 *)v12)
          {
            v12 += 16;
            if (v12 == v13)
              goto LABEL_24;
          }
        }
        if (v12 == v13)
        {
LABEL_24:
          LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(v7 + 2);
          __p.__r_.__value_.__l.__size_ = 0;
          v12 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(v14, (unsigned __int16 *)&__p);
        }
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 1) + 48))(*((_QWORD *)v12 + 1), a2);
      }
    }
    v15 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_19FF409D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FF409E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5A88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5A88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  NSObject *v9;
  std::string *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t **v13;
  NSObject *v14;
  std::string *v15;
  uint64_t *v16;
  unsigned __int16 *v17;
  int v18;
  unsigned __int16 *v19;
  int v20;
  void *v21;
  void *v22;
  std::string __p;
  uint8_t buf[4];
  std::string *v25;
  __int16 v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 8);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v4 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v6 = *(uint64_t **)(a2 + 80);
    *(_DWORD *)buf = 136315394;
    v25 = v5;
    v26 = 2048;
    v27 = v6;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_DEBUG, "ResourceManager cancelling resource: %s, rid: %llu", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  v7 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v3 + 11, (unsigned __int8 *)a2);
  if (v7)
  {
    v8 = v7;
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
      v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v11 = v8[14];
      *(_DWORD *)buf = 136315394;
      v25 = v10;
      v26 = 2048;
      v27 = v11;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "* ResourceManager cancelling resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v12 = *(_DWORD *)(a2 + 96);
    if (v12 <= 1)
    {
      v13 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(v3[38] + 8), (unsigned __int8 *)a2);
      if (v13)
        *((_DWORD *)v13 + 28) = 4;
      if (v12 == 1)
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v14 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
          v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v16 = v8[14];
          *(_DWORD *)buf = 136315394;
          v25 = v15;
          v26 = 2048;
          v27 = v16;
          _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_DEBUG, "Adding cancelled resource: %s, rid: %llu", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

        v17 = (unsigned __int16 *)v3[4];
        if (v17 != (unsigned __int16 *)v3[5])
        {
          v18 = *(unsigned __int16 *)(a2 + 2);
          if (*v17 != v18)
          {
            v19 = v17 + 8;
            do
            {
              v20 = *v19;
              v19 += 8;
            }
            while (v20 != v18);
            v17 = v19 - 8;
          }
        }
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v17 + 1) + 32))(*((_QWORD *)v17 + 1), a2);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v3 + 21), (unint64_t)v8[14], (uint64_t)v8[14]);
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3 + 11, v8);
    v21 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      if (__p.__r_.__value_.__s.__data_[16])
      {
        v22 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v22 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40))
          free(v22);
      }
      operator delete(v21);
    }
  }
}

void gdc::ResourceManager::clearFailedResources(gdc::ResourceManager *this, gdc::ResourceManager *a2)
{
  uint64_t v2;
  uint64_t v3;
  gdc::ResourceManager *v5;
  _QWORD *v6;
  float v7;
  size_t prime;
  _QWORD *i;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  unsigned __int8 v15[8];
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (this == a2)
    return;
  v25 = v2;
  v26 = v3;
  v5 = this;
  do
  {
    v6 = (_QWORD *)*((_QWORD *)v5 + 1);
    v22 = 0u;
    v23 = 0u;
    v24 = 1065353216;
    v7 = (float)(unint64_t)v6[41];
    prime = (unint64_t)v7;
    if ((unint64_t)v7 == 1)
    {
      prime = 2;
LABEL_9:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v22, prime);
      goto LABEL_10;
    }
    if ((prime & ((unint64_t)v7 - 1)) != 0)
      prime = std::__next_prime((unint64_t)v7);
    if (prime)
      goto LABEL_9;
LABEL_10:
    for (i = (_QWORD *)v6[40]; i; i = (_QWORD *)*i)
    {
      std::pair<gdc::ResourceKey const,gdc::Error>::pair[abi:nn180100]((uint64_t)v15, (uint64_t)(i + 2));
      std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)&v22, v15, (uint64_t)v15);
      if (v21 < 0)
      {
        operator delete(__p);
        if (v19 < 0)
LABEL_22:
          operator delete(v18);
      }
      else if (v19 < 0)
      {
        goto LABEL_22;
      }
      if (v16 != v17)
        free(v16);
    }
    std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::Error>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::Error>>>::clear(v6 + 38);
    v10 = v6[11];
    if (v10)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 48))(v10, &v22);
    v11 = (_QWORD *)v23;
    if ((_QWORD)v23)
    {
      do
      {
        v13 = (_QWORD *)*v11;
        v14 = (void *)v11[3];
        if (v14 != (void *)v11[5])
          free(v14);
        operator delete(v11);
        v11 = v13;
      }
      while (v13);
    }
    v12 = (void *)v22;
    *(_QWORD *)&v22 = 0;
    if (v12)
      operator delete(v12);
    v5 = (gdc::ResourceManager *)((char *)v5 + 24);
  }
  while (v5 != a2);
}

void gdc::ConsistentZTileSelector::~ConsistentZTileSelector(gdc::ConsistentZTileSelector *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ConsistentZTileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  double v6;
  long double v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  const double *v31;
  uint64_t v32;
  float64x2_t v33;
  const double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  long double v41;
  float v42;
  int v43;
  double v44;
  unsigned int v45;
  double v46;
  int v47;
  int v48;
  void **v49;
  void **v50;
  char *v51;
  char *v52;
  void **v53;
  void **v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void **v63;
  void **v64;
  BOOL v65;
  int64_t v66;
  unint64_t v67;
  char *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void **v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  _BYTE *v89;
  void **v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  double v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char v103;
  int v104;
  int v105;
  double v106;
  double v107;
  int v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  int v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  int v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  int v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  int v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  int32x2_t *v170;
  int v171;
  int v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  int32x2_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char v182;
  __int32 v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  char v188;
  int32x2_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  __int32 v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char v199;
  int32x2_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  __int32 v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  int32x2_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  int v217;
  _QWORD *v218;
  _QWORD *v219;
  void *v220;
  _QWORD *v221;
  _QWORD *v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  double *v229;
  double *v230;
  uint64_t v231;
  int v232;
  int *v233;
  uint64_t v234;
  double v235;
  void *v236[2];
  void *v237[2];
  int v238;
  void *v239[2];
  void *v240[2];
  int v241;
  void *v242;
  void **v243;
  void **v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  void *__p[2];
  __int128 v249;
  __int128 v250;
  _BYTE v251[4];
  double v252;
  uint64_t v253;
  float64x2x3_t v254;
  float64x2x3_t v255;

  v253 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(a2 + 16);
  v7 = tan(*(double *)(a2 + 8) * 0.5 + 0.785398163);
  v8 = log(v7);
  if ((v9 & 1) == 0
  {
    gdc::ConsistentZTileSelector::minZ(gdc::CameraView const&)::groundPlane[0] = 0.0;
    unk_1EE58D380 = 0;
    xmmword_1EE58D388 = xmmword_19FFB6330;
  }
  v234 = *(uint64_t *)(a2 + 496);
  v231 = *(uint64_t *)(a2 + 504);
  v225 = *(uint64_t *)(a2 + 512);
  v10 = *(double *)(a2 + 528);
  v11 = *(double *)(a2 + 536);
  v12 = *(double *)(a2 + 520);
  v229 = (double *)a2;
  v230 = (double *)(a2 + 984);
  v13 = *(double *)(a2 + 544);
  geo::Intersect::intersection<double>((double **)__p, a2 + 984, gdc::ConsistentZTileSelector::minZ(gdc::CameraView const&)::groundPlane);
  if (__p[0] == __p[1])
  {
    v23 = INFINITY;
    goto LABEL_12;
  }
  v14 = -((v12 + v12) * v11 - v13 * (v10 * -2.0));
  v15 = v10 * -2.0 * v11 + (v12 + v12) * v13;
  v16 = -(v10 * -2.0 * v10 + 1.0 - (v12 + v12) * v12);
  v17 = (char *)__p[1] - (char *)__p[0] - 24;
  if (v17 > 0x47)
  {
    v24 = v17 / 0x18 + 1;
    v21 = *(double *)&v231;
    v20 = *(double *)&v234;
    v25 = (float64x2_t)vdupq_lane_s64(v234, 0);
    v26 = (float64x2_t)vdupq_lane_s64(v231, 0);
    v22 = *(double *)&v225;
    v27 = (float64x2_t)vdupq_lane_s64(v225, 0);
    v28 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
    v29 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
    v30 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v31 = (const double *)__p[0];
    v32 = v24 & 0x1FFFFFFFFFFFFFFCLL;
    v33 = v30;
    do
    {
      v34 = v31;
      v31 += 12;
      v254 = vld3q_f64(v34);
      v34 += 6;
      v255 = vld3q_f64(v34);
      v30 = vminnmq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v254.val[0], v25), v14), v28, vsubq_f64(v254.val[1], v26)), v29, vsubq_f64(v254.val[2], v27)), v30);
      v33 = vminnmq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(vsubq_f64(v255.val[0], v25), v14), v28, vsubq_f64(v255.val[1], v26)), v29, vsubq_f64(v255.val[2], v27)), v33);
      v32 -= 4;
    }
    while (v32);
    v18 = vminnmvq_f64(vminnmq_f64(v30, v33));
    if (v24 == (v24 & 0x1FFFFFFFFFFFFFFCLL))
      goto LABEL_11;
    v19 = (double *)((char *)__p[0] + 24 * (v24 & 0x1FFFFFFFFFFFFFFCLL));
  }
  else
  {
    v18 = 1.79769313e308;
    v19 = (double *)__p[0];
    v21 = *(double *)&v231;
    v20 = *(double *)&v234;
    v22 = *(double *)&v225;
  }
  do
  {
    v18 = fmin((*v19 - v20) * v14 + (v19[1] - v21) * v15 + (v19[2] - v22) * v16, v18);
    v19 += 3;
  }
  while (v19 != __p[1]);
LABEL_11:
  v23 = v18 + v18;
LABEL_12:
  v35 = v6 * 0.159154943 + 0.5;
  v36 = v8 * 0.159154943 + 0.5;
  v37 = *(double *)(a2 + 960);
  v38 = *(double *)(a2 + 944);
  v39 = *(double *)(a2 + 368);
  if (__p[0])
    operator delete(__p[0]);
  v40 = log2(v39 * 0.001953125);
  v41 = tan(v37 * 0.5);
  v42 = v40 - log2(v23 * v38 * v41);
  v43 = (int)fmax(floorf(v42), 0.0);
  v44 = (double)(1 << v43);
  v45 = vcvtmd_s64_f64(v35 * v44);
  LODWORD(v44) = (1 << v43) + ~vcvtmd_s64_f64(v36 * v44);
  HIDWORD(v44) = v45;
  v235 = v44;
  v232 = *(_DWORD *)(a1 + 8);
  v226 = a1;
  v46 = exp2(1.98 - (*(double *)(a1 + 16) + *(double *)(a1 + 16)));
  v47 = *(unsigned __int16 *)(a2 + 952);
  v48 = *(unsigned __int16 *)(a2 + 954);
  *(_OWORD *)v239 = 0u;
  *(_OWORD *)v240 = 0u;
  v241 = 1065353216;
  *(_OWORD *)v236 = 0u;
  *(_OWORD *)v237 = 0u;
  v238 = 1065353216;
  v49 = v236;
  if (!a3)
    v49 = 0;
  v224 = (uint64_t)v49;
  v251[0] = -1;
  v251[1] = v43;
  v252 = v235;
  *(_OWORD *)__p = 0uLL;
  v249 = 0uLL;
  v250 = 0uLL;
  v50 = (void **)operator new(8uLL);
  *v50 = operator new(0xFF0uLL);
  v51 = (char *)(v50 + 1);
  v52 = (char *)v249;
  if ((void *)v249 != __p[1])
  {
    v53 = v50;
    v54 = v50 + 1;
    while (v53 != v50)
    {
LABEL_19:
      v55 = (void *)*((_QWORD *)v52 - 1);
      v52 -= 8;
      *--v53 = v55;
      if (v52 == __p[1])
        goto LABEL_42;
    }
    if (v54 < (void **)v51)
    {
      v56 = (v51 - (char *)v54) >> 3;
      if (v56 >= -1)
        v57 = v56 + 1;
      else
        v57 = v56 + 2;
      v58 = v57 >> 1;
      v53 = &v50[v57 >> 1];
      v59 = v50;
      if (v54 != v50)
      {
        memmove(v53, v50, (char *)v54 - (char *)v50);
        v59 = v54;
      }
      v54 = &v59[v58];
      goto LABEL_19;
    }
    v60 = (v51 - (char *)v50) >> 2;
    if (v51 == (char *)v50)
      v60 = 1;
    if (v60 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v61 = (v60 + 3) >> 2;
    v62 = v60;
    v63 = (void **)operator new(8 * v60);
    v64 = v63;
    v53 = &v63[v61];
    v51 = (char *)&v63[v62];
    v66 = (char *)v54 - (char *)v50;
    v65 = v54 == v50;
    v54 = v53;
    if (!v65)
    {
      v54 = (void **)((char *)v53 + (v66 & 0xFFFFFFFFFFFFFFF8));
      v67 = v66 - 8;
      v68 = (char *)&v63[v61];
      v69 = v50;
      if (v67 >= 0x38)
      {
        v68 = (char *)&v63[v61];
        v69 = v50;
        if ((unint64_t)(v68 - (char *)v50) >= 0x20)
        {
          v70 = (v67 >> 3) + 1;
          v71 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          v68 = (char *)&v53[v71];
          v72 = (__int128 *)(v50 + 2);
          v73 = (char *)&v63[v61 + 2];
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *v72;
            *((_OWORD *)v73 - 1) = *(v72 - 1);
            *(_OWORD *)v73 = v75;
            v72 += 2;
            v73 += 32;
            v74 -= 4;
          }
          while (v74);
          if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_39;
          v69 = &v50[v71];
        }
      }
      do
      {
        v76 = (uint64_t)*v69++;
        *(_QWORD *)v68 = v76;
        v68 += 8;
      }
      while (v68 != (char *)v54);
    }
    if (!v50)
    {
LABEL_40:
      v50 = v64;
      goto LABEL_19;
    }
LABEL_39:
    operator delete(v50);
    goto LABEL_40;
  }
  v54 = v50 + 1;
  v53 = v50;
LABEL_42:
  v77 = __p[0];
  __p[0] = v50;
  __p[1] = v53;
  *(_QWORD *)&v249 = v54;
  *((_QWORD *)&v249 + 1) = v51;
  if (v77)
    operator delete(v77);
  v78 = (uint64_t)*v53;
  if (v54 == v53)
    v79 = 0;
  else
    v79 = (char *)*v53;
  if (v54 == v53)
    v80 = -v78;
  else
    v80 = 0;
  v81 = v80 / 24;
  if (v80 < -23)
  {
    v86 = 168 - v81;
    v83 = &v53[-((168 - v81) / 0xAAuLL)];
    v84 = (char *)*v83;
    v85 = 169 - v86 % 0xAA;
  }
  else
  {
    v82 = v81 + 1;
    v83 = &v53[(v81 + 1) / 0xAAuLL];
    v84 = (char *)*v83;
    v85 = v82 % 0xAA;
  }
  v87 = &v84[24 * v85];
  if (v79 == v87)
  {
    v88 = *((_QWORD *)&v250 + 1);
  }
  else
  {
    v88 = 0;
    v89 = v251;
    v90 = v53;
    do
    {
      v91 = (char *)(v78 + 4080);
      if (v90 == v83)
        v91 = v87;
      if (v79 == v91)
      {
        v91 = v79;
      }
      else
      {
        v92 = v79;
        do
        {
          *(_WORD *)v92 = *(_WORD *)v89;
          *(_QWORD *)(v92 + 4) = *(_QWORD *)(v89 + 4);
          v89 += 24;
          v92 += 24;
        }
        while (v92 != v91);
      }
      v88 -= 0x5555555555555555 * ((v91 - v79) >> 3);
      if (v90 == v83)
        break;
      v93 = (char *)v90[1];
      ++v90;
      v78 = (uint64_t)v93;
      v79 = v93;
    }
    while (v93 != v87);
    v51 = (char *)*((_QWORD *)&v249 + 1);
  }
  v242 = v50;
  v243 = v53;
  v244 = v54;
  v245 = v51;
  v247 = v88;
  if (v88)
  {
    v94 = 0;
    v95 = (double)(v232 * v232) * (0.00390625 * v46) / (double)(v48 * v47);
    do
    {
      v97 = (char *)v53[v94 / 0xAA];
      --v88;
      v98 = v94 + 1;
      v246 = v94 + 1;
      v247 = v88;
      if (v94 + 1 >= 0x154)
      {
        v99 = *v53++;
        operator delete(v99);
        v98 = v94 - 169;
        v243 = v53;
        v246 = v94 - 169;
      }
      v100 = v94 % 0xAA;
      v101 = &v97[24 * (v94 % 0xAA)];
      v103 = v101[1];
      v102 = v101 + 1;
      v104 = 1 << v103;
      v105 = *(_DWORD *)(v102 + 7);
      v233 = (int *)(v102 + 7);
      v106 = 1.0 / (double)(1 << v103);
      v107 = v106 * (double)v105;
      v108 = *(_DWORD *)(v102 + 3);
      v109 = v106 * (double)((1 << v103) + ~v108);
      v110 = v107 + v106;
      *(double *)__p = v107;
      __p[1] = *(void **)&v109;
      *(_QWORD *)&v249 = 0;
      v111 = v109 + v106;
      *((double *)&v249 + 1) = v107 + v106;
      *(double *)&v250 = v109 + v106;
      *((_QWORD *)&v250 + 1) = 0;
      if (geo::Intersect::encloses<double>(v230, (double *)__p))
      {
        v112 = v229[103];
        v113 = v112 * v110;
        v114 = v229[107];
        v115 = v229[115];
        v116 = v115 + v112 * v110 + v114 * v111;
        v117 = v229[104];
        v118 = v117 * v110;
        v119 = v229[108];
        v120 = v229[116];
        v121 = v120 + v117 * v110 + v119 * v111;
        v122 = -v121;
        if (v116 >= -v121)
        {
          if (v116 <= v121)
            v123 = 0;
          else
            v123 = 2;
        }
        else
        {
          v123 = 1;
        }
        v124 = v229[101];
        v125 = v124 * v110;
        v126 = v229[105];
        v127 = v126 * v111;
        v128 = v229[113];
        v129 = v128 + v124 * v110 + v126 * v111;
        if (v129 >= v122)
        {
          if (v129 > v121)
            v123 |= 8u;
        }
        else
        {
          v123 |= 4u;
        }
        v130 = v229[102];
        v131 = v130 * v110;
        v132 = v229[106];
        v133 = v132 * v111;
        v134 = v229[114];
        v135 = v134 + v131 + v132 * v111;
        if (v135 >= v122)
        {
          if (v135 > v121)
            v123 |= 0x20u;
        }
        else
        {
          v123 |= 0x10u;
        }
        v136 = v112 * v107;
        v137 = v115 + v112 * v107 + v114 * v111;
        v138 = v117 * v107;
        v139 = v120 + v117 * v107 + v119 * v111;
        v140 = -v139;
        if (v137 >= -v139)
        {
          if (v137 <= v139)
            v141 = 0;
          else
            v141 = 2;
        }
        else
        {
          v141 = 1;
        }
        v142 = v124 * v107;
        v143 = v128 + v124 * v107 + v127;
        if (v143 >= v140)
        {
          if (v143 > v139)
            v141 |= 8u;
        }
        else
        {
          v141 |= 4u;
        }
        v144 = v130 * v107;
        v145 = v134 + v130 * v107 + v133;
        if (v145 >= v140)
        {
          if (v145 > v139)
            v141 |= 0x20u;
        }
        else
        {
          v141 |= 0x10u;
        }
        v146 = v114 * v109;
        v147 = v114 * v109 + v115 + v113;
        v148 = v119 * v109;
        v149 = v148 + v120 + v118;
        v150 = -v149;
        if (v147 >= -v149)
        {
          if (v147 <= v149)
            v151 = 0;
          else
            v151 = 2;
        }
        else
        {
          v151 = 1;
        }
        v152 = v126 * v109;
        v153 = v152 + v128 + v125;
        if (v153 >= v150)
        {
          if (v153 > v149)
            v151 |= 8u;
        }
        else
        {
          v151 |= 4u;
        }
        v154 = v132 * v109 + v134 + v131;
        if (v154 >= v150)
        {
          if (v154 > v149)
            v151 |= 0x20u;
        }
        else
        {
          v151 |= 0x10u;
        }
        v155 = v146 + v136 + v115;
        v156 = v148 + v138 + v120;
        v157 = -v156;
        if (v155 >= -v156)
        {
          if (v155 <= v156)
            v158 = 0;
          else
            v158 = 2;
        }
        else
        {
          v158 = 1;
        }
        v159 = v152 + v142 + v128;
        if (v159 >= v157)
        {
          if (v159 > v156)
            v158 |= 8u;
        }
        else
        {
          v158 |= 4u;
        }
        v160 = v132 * v109 + v144 + v134;
        if (v160 >= v157)
        {
          if (v160 > v156)
            v158 |= 0x20u;
        }
        else
        {
          v158 |= 0x10u;
        }
        if ((v141 & v123 & v151 & v158) == 0)
        {
          v161 = 1.0 / v121;
          v162 = v161 * v129;
          v163 = v161 * v135;
          v164 = 1.0 / v139;
          if (fabs(((v162 - 1.0 / v149 * v153) * (v164 * v145 - v163)+ (1.0 / v149 * v154 - v163) * (1.0 / v139 * v143 - v162))* 0.5)+ fabs(((1.0 / v139 * v143 - 1.0 / v156 * v159) * (1.0 / v149 * v154 - v164 * v145)+ -(v164 * v145 - 1.0 / v156 * v160) * (1.0 / v149 * v153 - 1.0 / v139 * v143))* 0.5) > v95)
          {
            v165 = (unsigned __int8 *)&v97[24 * v100];
            if (std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v239, v165))
            {
              if (a3 && (v108 & 0x80000000) == 0 && v105 < v104)
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v224, v165, (uint64_t)v165);
            }
            else
            {
              v166 = v54 - v53;
              v167 = 170 * v166 - 1;
              if (v54 == v53)
                v168 = 0;
              else
                v168 = 170 * v166 - 1;
              std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v239, v165, (uint64_t)v165);
              v169 = *v102;
              v170 = (int32x2_t *)(v102 + 3);
              v171 = *(_DWORD *)(v102 + 3);
              v172 = *v233;
              v173 = v88 + v98;
              if (v168 == v88 + v98)
              {
                v174 = *v102;
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v169 = v174;
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v88 = v247;
                v173 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v175 = (unint64_t)v53[v173 / 0xAA] + 24 * (v173 % 0xAA);
              *(_BYTE *)v175 = -1;
              *(_BYTE *)(v175 + 1) = v169;
              *(_DWORD *)(v175 + 4) = v171;
              *(_DWORD *)(v175 + 8) = v172 + 1;
              v176 = v88 + 1;
              v247 = v88 + 1;
              v177 = *v102;
              v178 = *v170;
              v179 = v98 + v88 + 1;
              if (v167 == v179)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v176 = v247;
                v179 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v180 = (unint64_t)v53[v179 / 0xAA] + 24 * (v179 % 0xAA);
              *(_BYTE *)v180 = -1;
              *(_BYTE *)(v180 + 1) = v177;
              *(int32x2_t *)(v180 + 4) = vadd_s32(v178, (int32x2_t)0x100000001);
              v181 = v176 + 1;
              v247 = v181;
              v182 = *v102;
              v183 = v170->i32[0];
              v184 = *v233;
              v185 = v98 + v181;
              if (v167 == v98 + v181)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v181 = v247;
                v185 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v186 = (unint64_t)v53[v185 / 0xAA] + 24 * (v185 % 0xAA);
              *(_BYTE *)v186 = -1;
              *(_BYTE *)(v186 + 1) = v182;
              *(_DWORD *)(v186 + 4) = v183 + 1;
              *(_DWORD *)(v186 + 8) = v184;
              v187 = v181 + 1;
              v247 = v187;
              v188 = *v102;
              v189 = *v170;
              v190 = v98 + v187;
              if (v167 == v98 + v187)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v187 = v247;
                v190 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v191 = (unint64_t)v53[v190 / 0xAA] + 24 * (v190 % 0xAA);
              *(_BYTE *)v191 = -1;
              *(_BYTE *)(v191 + 1) = v188;
              *(int32x2_t *)(v191 + 4) = vadd_s32(v189, (int32x2_t)0xFFFFFFFF00000001);
              v192 = v187 + 1;
              v247 = v192;
              v193 = *v102;
              v194 = v170->i32[0];
              v195 = *v233;
              v196 = v98 + v192;
              if (v167 == v98 + v192)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v192 = v247;
                v196 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v197 = (unint64_t)v53[v196 / 0xAA] + 24 * (v196 % 0xAA);
              *(_BYTE *)v197 = -1;
              *(_BYTE *)(v197 + 1) = v193;
              *(_DWORD *)(v197 + 4) = v194;
              *(_DWORD *)(v197 + 8) = v195 - 1;
              v198 = v192 + 1;
              v247 = v198;
              v199 = *v102;
              v200 = *v170;
              v201 = v98 + v198;
              if (v167 == v98 + v198)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v198 = v247;
                v201 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v202 = (unint64_t)v53[v201 / 0xAA] + 24 * (v201 % 0xAA);
              *(_BYTE *)v202 = -1;
              *(_BYTE *)(v202 + 1) = v199;
              *(int32x2_t *)(v202 + 4) = vadd_s32(v200, (int32x2_t)-1);
              v203 = v198 + 1;
              v247 = v203;
              v204 = *v102;
              v205 = v170->i32[0];
              v206 = *v233;
              v207 = v98 + v203;
              if (v167 == v98 + v203)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v170 = (int32x2_t *)(v102 + 3);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v203 = v247;
                v207 = v246 + v247;
                v167 = 170 * (v244 - v243) - 1;
              }
              v208 = (unint64_t)v53[v207 / 0xAA] + 24 * (v207 % 0xAA);
              *(_BYTE *)v208 = -1;
              *(_BYTE *)(v208 + 1) = v204;
              *(_DWORD *)(v208 + 4) = v205 - 1;
              *(_DWORD *)(v208 + 8) = v206;
              v209 = v203 + 1;
              v247 = v209;
              v210 = *v102;
              v211 = *v170;
              v212 = v98 + v209;
              if (v167 == v98 + v209)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v242);
                v53 = v243;
                v54 = v244;
                v98 = v246;
                v209 = v247;
                v212 = v246 + v247;
              }
              v96 = (unint64_t)v53[v212 / 0xAA] + 24 * (v212 % 0xAA);
              *(_BYTE *)v96 = -1;
              *(_BYTE *)(v96 + 1) = v210;
              *(int32x2_t *)(v96 + 4) = vadd_s32(v211, (int32x2_t)0x1FFFFFFFFLL);
              v88 = v209 + 1;
              v247 = v209 + 1;
            }
          }
        }
      }
      v94 = v98;
    }
    while (v88);
  }
  v213 = (char *)v54 - (char *)v53;
  if ((unint64_t)((char *)v54 - (char *)v53) < 0x11)
  {
    v214 = v226;
  }
  else
  {
    v214 = v226;
    do
    {
      v215 = *v53++;
      operator delete(v215);
      v243 = v53;
      v213 -= 8;
    }
    while (v213 > 0x10);
  }
  while (v53 != v54)
  {
    v216 = *v53++;
    operator delete(v216);
  }
  if (v242)
    operator delete(v242);
  v217 = *(_DWORD *)(v214 + 8);
  *a4 = v217;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 2), (uint64_t)v239);
  a4[12] = v217;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 14), (uint64_t)v236);
  v218 = v237[0];
  if (v237[0])
  {
    do
    {
      v219 = (_QWORD *)*v218;
      operator delete(v218);
      v218 = v219;
    }
    while (v219);
  }
  v220 = v236[0];
  v236[0] = 0;
  if (v220)
    operator delete(v220);
  v221 = v240[0];
  if (v240[0])
  {
    do
    {
      v222 = (_QWORD *)*v221;
      operator delete(v221);
      v221 = v222;
    }
    while (v222);
  }
  v223 = v239[0];
  v239[0] = 0;
  if (v223)
    operator delete(v223);
}

void gdc::ConsistentZTileSelector::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  int v6;
  long double v7;
  double v8[7];
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16[32];

  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "Consistent Z Tile Selector");
  std::string::__init_copy_ctor_external((std::string *)a2, v4, 0x1AuLL);
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  operator delete(v4);
  v16[23] = 8;
  strcpy(v16, "Lod Bias");
  v5 = *(_QWORD *)(a1 + 16);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v15 = 2;
  v11 = v5;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v10);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = 1.98 - (*(double *)(a1 + 16) + *(double *)(a1 + 16));
  v16[23] = 17;
  strcpy(v16, "Desired Tile Area");
  memset(&v8[4], 0, 24);
  v9 = 2;
  v8[2] = (double)(v6 * v6) * (0.00390625 * exp2(v7));
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v8);
}

void gdc::DataObject::~DataObject(gdc::DataObject *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  *((_QWORD *)this + 1) = &off_1E42B5310;
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

  *((_QWORD *)this + 1) = &off_1E42B5310;
  JUMPOUT(0x1A1AF4E00);
}

unint64_t gdc::DataObject::getBytes(gdc::DataObject *this, void *a2, unint64_t a3)
{
  void *v4;
  unint64_t result;

  if (!a2)
    return 0;
  v4 = (void *)*((_QWORD *)this + 2);
  if (!v4)
    return 0;
  objc_msgSend(v4, "getBytes:length:", a2, a3);
  result = gdc::DataObject::length((id *)this);
  if (result >= a3)
    return a3;
  return result;
}

void gdc::GlobeTileSelector::~GlobeTileSelector(gdc::GlobeTileSelector *this)
{
  gdc::GlobeTileSelector::~GlobeTileSelector(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  gdc::GlobeTileSelector *v5;
  uint64_t v6;
  gdc::GlobeTileSelector *v7;
  uint64_t v8;
  gdc::GlobeTileSelector *v9;
  uint64_t v10;
  gdc::GlobeTileSelector *v11;
  uint64_t v12;
  uint64_t v13;
  gdc::GlobeTileSelector *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  gdc::GlobeTileSelector *v18;
  uint64_t v19;
  uint64_t v20;
  gdc::GlobeTileSelector *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  gdc::GlobeTileSelector *v25;
  uint64_t v26;
  uint64_t v27;
  gdc::GlobeTileSelector *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;

  *(_QWORD *)this = &off_1E42B09F8;
  v2 = (char *)this + 400;
  v3 = (char *)*((_QWORD *)this + 53);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 49);
  if (v5 == (gdc::GlobeTileSelector *)((char *)this + 368))
  {
    v6 = 4;
    v5 = (gdc::GlobeTileSelector *)((char *)this + 368);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  if (!*((_BYTE *)this + 352))
    goto LABEL_17;
  v7 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 43);
  if (v7 == (gdc::GlobeTileSelector *)((char *)this + 320))
  {
    v8 = 4;
    v7 = (gdc::GlobeTileSelector *)((char *)this + 320);
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_17:
  if (*((_BYTE *)this + 312))
  {
    v9 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 38);
    if (v9 == (gdc::GlobeTileSelector *)((char *)this + 280))
    {
      v10 = 4;
      v9 = (gdc::GlobeTileSelector *)((char *)this + 280);
      goto LABEL_22;
    }
    if (v9)
    {
      v10 = 5;
LABEL_22:
      (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
    }
  }
  if (*((_QWORD *)this + 33))
  {
    v12 = *((_QWORD *)this + 31);
    v11 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 32);
    v13 = *(_QWORD *)v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    *((_QWORD *)this + 33) = 0;
    if (v11 != (gdc::GlobeTileSelector *)((char *)this + 248))
    {
      do
      {
        v14 = (gdc::GlobeTileSelector *)*((_QWORD *)v11 + 1);
        operator delete(v11);
        v11 = v14;
      }
      while (v14 != (gdc::GlobeTileSelector *)((char *)this + 248));
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 28);
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v17)
    operator delete(v17);
  if (*((_QWORD *)this + 24))
  {
    v19 = *((_QWORD *)this + 22);
    v18 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 23);
    v20 = *(_QWORD *)v18;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v19 + 8);
    **(_QWORD **)(v19 + 8) = v20;
    *((_QWORD *)this + 24) = 0;
    if (v18 != (gdc::GlobeTileSelector *)((char *)this + 176))
    {
      do
      {
        v21 = (gdc::GlobeTileSelector *)*((_QWORD *)v18 + 1);
        operator delete(v18);
        v18 = v21;
      }
      while (v21 != (gdc::GlobeTileSelector *)((char *)this + 176));
    }
  }
  v22 = (_QWORD *)*((_QWORD *)this + 19);
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
    operator delete(v24);
  if (*((_QWORD *)this + 15))
  {
    v26 = *((_QWORD *)this + 13);
    v25 = (gdc::GlobeTileSelector *)*((_QWORD *)this + 14);
    v27 = *(_QWORD *)v25;
    *(_QWORD *)(v27 + 8) = *(_QWORD *)(v26 + 8);
    **(_QWORD **)(v26 + 8) = v27;
    *((_QWORD *)this + 15) = 0;
    if (v25 != (gdc::GlobeTileSelector *)((char *)this + 104))
    {
      do
      {
        v28 = (gdc::GlobeTileSelector *)*((_QWORD *)v25 + 1);
        operator delete(v25);
        v25 = v28;
      }
      while (v28 != (gdc::GlobeTileSelector *)((char *)this + 104));
    }
  }
  v29 = (_QWORD *)*((_QWORD *)this + 10);
  if (v29)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v31)
    operator delete(v31);
  v32 = (void *)*((_QWORD *)this + 3);
  if (v32)
  {
    *((_QWORD *)this + 4) = v32;
    operator delete(v32);
  }
}

double gdc::GlobeTileSelector::tilesInView@<D0>(gdc::GlobeTileSelector *this@<X0>, const gdc::CameraView *a2@<X1>, double a3@<D0>, int a4@<W2>, _DWORD *a5@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  double result;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _OWORD *v28;
  _BYTE v29[40];
  __int128 v30;
  char v31[8];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  __int128 v71;
  __int128 v72;
  int v73;
  __int128 v74;
  __int128 v75;
  int v76;

  v10 = *((_QWORD *)this + 49);
  if (v10)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, (char *)this + 272);
  v74 = 0u;
  v75 = 0u;
  v76 = 1065353216;
  v71 = 0u;
  v72 = 0u;
  v73 = 1065353216;
  memset(v29, 0, 32);
  *(_DWORD *)&v29[32] = 1065353216;
  v11 = gdc::GlobeTileSelector::tilesInViewInternal((uint64_t)this, (double *)a2, (uint64_t)&v74, v29, a3);
  if (!a4 || !*((_BYTE *)this + 312))
    goto LABEL_13;
  v12 = *((_QWORD *)this + 38);
  if (!v12)
    goto LABEL_22;
  (*(void (**)(double *__return_ptr, double))(*(_QWORD *)v12 + 48))(&v66, v11);
  v13 = (__n128)vceqzq_f64(v70);
  v14 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v69), (int32x4_t)v13));
  v14.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v14);
  v14.n128_u16[0] = vmaxv_u16((uint16x4_t)v14.n128_u64[0]);
  if ((v14.n128_u8[0] & 1) == 0)
  {
    v13.n128_f64[0] = v66;
    v14.n128_u64[0] = 0xC00921FB54442D18;
    if (v66 == -3.14159265)
    {
      v13.n128_f64[0] = v67;
      if (v67 == -3.14159265)
      {
        v14.n128_f64[0] = v68;
        if (v68 == 0.0)
          goto LABEL_13;
      }
    }
  }
  if (!*((_BYTE *)this + 312))
  {
LABEL_23:
    std::__throw_bad_optional_access[abi:nn180100]();
    return gdc::GlobeTileSelector::createDebugNode(v28);
  }
  v15 = *((_QWORD *)this + 38);
  if (!v15)
  {
LABEL_22:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_23;
  }
  (*(void (**)(_BYTE *__return_ptr, __n128, __n128))(*(_QWORD *)v15 + 48))(v29, v14, v13);
  v16 = *((_QWORD *)a2 + 60);
  v32 = *(_QWORD *)v29;
  v33 = *(_OWORD *)&v29[8];
  v34 = *(_OWORD *)&v29[24];
  v35 = v30;
  v37 = 0;
  v36 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v41 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v42 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v43 = v41;
  v44 = v42;
  v45 = v41;
  v46 = v42;
  v47 = v41;
  v48 = v42;
  v49 = v41;
  v50 = v42;
  v51 = v41;
  v52 = v42;
  v53 = 1;
  v54 = 0;
  v55 = 0;
  v17 = *((_OWORD *)a2 + 24);
  v56 = *((_OWORD *)a2 + 23);
  v57 = v17;
  v18 = *((_OWORD *)a2 + 26);
  v58 = *((_OWORD *)a2 + 25);
  v59 = v18;
  v60 = *((_OWORD *)a2 + 27);
  v61 = *((_DWORD *)a2 + 112);
  v19 = *((_QWORD *)a2 + 57);
  v63 = *((_OWORD *)a2 + 29);
  v62 = v19;
  v64 = v16;
  v65 = 0;
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)v29, (const Camera *)v31);
  gdc::GlobeTileSelector::tilesInViewInternal((uint64_t)this, (double *)v29, (uint64_t)&v71, &v74, a3);
LABEL_13:
  v20 = *((_DWORD *)this + 2);
  *a5 = v20;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 2), (uint64_t)&v74);
  a5[12] = v20;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a5 + 14), (uint64_t)&v71);
  v22 = (_QWORD *)v72;
  if ((_QWORD)v72)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = (void *)v71;
  *(_QWORD *)&v71 = 0;
  if (v24)
    operator delete(v24);
  v25 = (_QWORD *)v75;
  if ((_QWORD)v75)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = (void *)v74;
  *(_QWORD *)&v74 = 0;
  if (v27)
    operator delete(v27);
  return result;
}

double gdc::GlobeTileSelector::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double gdc::GlobeTileSelector::tilesInViewInternal(uint64_t a1, double *a2, uint64_t a3, _QWORD *a4, double a5)
{
  double *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  long double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unsigned int v33;
  long double v34;
  double v35;
  double v36;
  unsigned int v37;
  double v38;
  double *v39;
  double *v40;
  unint64_t v41;
  double v42;
  char *v43;
  unint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  const double *v49;
  uint64_t v50;
  float64x2_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  long double v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  double result;
  double v69;
  double v70;
  int v71;
  long double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double *v78;
  double *v79;
  char *v80;
  long double v81;
  long double v82;
  long double v83;
  double v84;
  double v85;
  double v86;
  __double2 v87;
  double v88;
  __double2 v89;
  double v90;
  long double v91;
  double v92;
  double v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  double *v97;
  double *v98;
  char *v99;
  __int128 v100;
  double *v101;
  double *v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  double *v106;
  __int128 v107;
  uint64_t v108;
  double v109;
  char v110;
  double v111;
  void *v112;
  double v113;
  double v114;
  __double2 v115;
  double v116;
  __double2 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  double *v124;
  double *v125;
  double v126;
  double *v127;
  long double v128;
  long double v129;
  long double v130;
  double v131;
  double v132;
  double v133;
  __double2 v134;
  double v135;
  __double2 v136;
  double v137;
  long double v138;
  double v139;
  double v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  double *v144;
  __int128 v145;
  void *v146;
  void *v147;
  double v148;
  double v149;
  double v150;
  double v151;
  __double2 v152;
  double v153;
  __double2 v154;
  double v155;
  long double v156;
  double v157;
  double v158;
  void *v159;
  unint64_t v160;
  double v161;
  double *v162;
  double v163;
  double v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  float64x2_t v169;
  float64x2_t v170;
  const double *v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  const double *v178;
  double v179;
  double v180;
  double v181;
  unsigned int v182;
  int v183;
  signed int v184;
  _QWORD *v185;
  double v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  double *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  double v195;
  double v196;
  double v197;
  uint64_t v198;
  void *v199;
  double v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  char *v205;
  char v206;
  uint64_t v207;
  void *v208;
  _QWORD *v209;
  unint64_t v210;
  unsigned __int8 v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint8x8_t v216;
  uint64_t **v217;
  uint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  _QWORD *v222;
  float v223;
  float v224;
  _BOOL8 v225;
  unint64_t v226;
  unint64_t v227;
  size_t v228;
  _QWORD *v229;
  size_t v230;
  uint64_t v231;
  _QWORD *v232;
  void *v233;
  void *v234;
  uint64_t v235;
  _QWORD *v236;
  size_t v237;
  size_t v238;
  size_t v239;
  _QWORD *v240;
  size_t v241;
  uint64_t v242;
  unint64_t v243;
  uint8x8_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  size_t v248;
  uint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  _QWORD *v252;
  void *v253;
  _QWORD *v254;
  char *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  void **v262;
  uint64_t *v263;
  int v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  int v274;
  void *v275;
  double v276;
  double v277;
  int v278;
  uint64_t *v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t v282;
  char *v283;
  __int128 v284;
  _QWORD *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint8x8_t v295;
  unint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  int8x8_t v303;
  unint64_t v304;
  char *v305;
  float v306;
  float v307;
  _BOOL8 v308;
  unint64_t v309;
  unint64_t v310;
  size_t v311;
  char *v312;
  size_t prime;
  char *v314;
  void *v315;
  void *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  size_t v320;
  size_t v321;
  size_t v322;
  _QWORD *v323;
  size_t v324;
  uint64_t v325;
  unint64_t v326;
  uint8x8_t v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  size_t v331;
  char *v332;
  int8x8_t v333;
  void *v334;
  char *v335;
  _QWORD *v336;
  _QWORD *v337;
  unint64_t v338;
  unsigned __int8 *v339;
  unsigned int v340;
  char v341;
  double v342;
  double v347;
  double v348;
  double v349;
  double v350;
  __int128 v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  int i;
  int j;
  unint64_t v371;
  unsigned __int8 v372;
  int v373;
  int v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t **v378;
  uint64_t *v379;
  unint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  double v386;
  double v387;
  double v388;
  double v389;
  unsigned int v390;
  long double v391;
  double v392;
  double v393;
  int v394;
  _QWORD *v396;
  uint64_t v397;
  int32x2_t v398;
  unsigned __int8 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  int v408;
  int v409;
  unint64_t v410;
  int v411;
  uint64_t v412;
  unint64_t v413;
  int v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t *v421;
  void **v422;
  void **v423;
  unint64_t v424;
  void *v425;
  void *v426;
  _QWORD *v427;
  _QWORD *v428;
  void *v429;
  int v430;
  int v431;
  _BYTE *v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  signed int v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char *v441;
  double *v442;
  __int128 v443;
  _QWORD *v444;
  unint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  _BOOL4 v448;
  unsigned int v449;
  int v450;
  uint64_t *v452;
  unint64_t v453;
  double v454;
  float64x2_t v455;
  long double v456;
  unsigned __int8 *v458;
  double v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  void *v463;
  double v464;
  uint64_t v465;
  double *v466;
  _QWORD *v467;
  double v468;
  double v469;
  double v470;
  int v471;
  __int128 v472;
  double v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  unsigned int v480;
  double *v481;
  void *v482;
  double v483;
  int v484;
  int v485;
  signed int v486;
  char v487;
  void *v488[2];
  __int128 v489;
  __int128 v490;
  uint64_t v491;
  _BYTE v492[48];
  _BYTE v493[56];
  unsigned __int8 v494[4];
  void *v495;
  void *v496[2];
  _BYTE v497[48];
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  void *v503[2];
  __int128 v504;
  __int128 v505;
  void *v506[2];
  void *v507[2];
  int v508;
  _BYTE v509[984];
  double v510;
  uint64_t v511;
  void *__p[3];
  __int128 v513;
  void *v514;
  void *v515[2];
  _BYTE v516[32];
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int64x2_t v529;
  int64x2_t v530;
  int64x2_t v531;
  int64x2_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  char v536;
  char v537;
  char v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  int v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  float64x2x3_t v550;
  float64x2x3_t v551;
  float64x2x3_t v552;
  float64x2x3_t v553;

  v6 = a2;
  v7 = a1;
  v549 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 273);
  v11 = a2[46];
  v10 = a2[47];
  v12 = v10 * v11;
  if (v10 >= v11)
  {
    v16 = a2[57];
  }
  else
  {
    if (v12 <= 0.0)
      v13 = 1.0;
    else
      v13 = v10 / v11;
    v14 = tan(a2[57] * 0.5);
    v15 = atan(v13 * v14);
    v16 = v15 + v15;
  }
  v17 = v6[1];
  v18 = 1.0;
  if (v9)
  {
    v19 = cos(v6[1]);
    v18 = 1.0 / v19 * (1.0 / v19);
  }
  v20 = tan(v16 * 0.5);
  v21 = v20 * (double)v8 * (v20 * (double)v8) * (v11 * (4.0 * v18)) / (a5 * a5 * v10 * v12);
  v455 = *(float64x2_t *)(v6 + 63);
  v456 = v6[62];
  v22 = v6[64];
  v473 = vmulq_f64(v455, v455).f64[0] + v456 * v456;
  v23 = sqrt(v473);
  v24 = atan2(v22, v23 * 0.996647189);
  v470 = atan2(v455.f64[0], v456);
  v25 = __sincos_stret(v24);
  v454 = v22;
  v26 = atan2(v22 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
  v27 = __sincos_stret(v26);
  v28 = tan(v26 * 0.5 + 0.785398163);
  v29 = log(v28);
  v30 = v6[2];
  v468 = v6[3];
  v31 = v6[4];
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)v509, (const Camera *)v6);
  *(_OWORD *)v507 = 0u;
  *(_OWORD *)v506 = 0u;
  v508 = 1065353216;
  v505 = 0u;
  v504 = 0u;
  *(_OWORD *)v503 = 0u;
  v32 = v6[5];
  v469 = v31;
  if (v31 * 0.0000000249532021 == 0.0)
  {
    v33 = *(unsigned __int8 *)(v7 + 274);
  }
  else
  {
    v34 = log2(v31 * 0.0000000249532021 * (v31 * 0.0000000249532021) * v21);
    v35 = *(double *)(v7 + 16);
    v36 = v35 + v34 * -0.5;
    LOBYTE(v35) = *(_BYTE *)(v7 + 274);
    v33 = (int)fmin(fmax(v36, 0.0), (double)*(unint64_t *)&v35);
  }
  v478 = v7;
  if (*(_BYTE *)(v7 + 361))
  {
    if (v33 <= 2)
      v37 = 2;
    else
      v37 = v33;
    v449 = v37;
    v448 = v37 > 0xB;
    if (v33 >= *(unsigned __int8 *)(v7 + 360))
      goto LABEL_23;
  }
  else
  {
    if (v33 <= 2)
      v33 = 2;
    v449 = v33;
    v448 = v33 > 0xB;
  }
  if (v32 <= 0.699999988)
  {
    v471 = 0;
    goto LABEL_33;
  }
LABEL_23:
  if (*(_BYTE *)(v7 + 272))
  {
    v38 = sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
    v488[0] = 0;
    v488[1] = 0;
    *(_QWORD *)&v489 = 0;
    std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(v488, (unint64_t)(v6 + 147), (uint64_t)(v6 + 171));
    v39 = (double *)v488[0];
    v40 = (double *)v488[1];
    if (v488[0] == v488[1])
    {
      v42 = 0.0;
    }
    else
    {
      v41 = (char *)v488[1] - (char *)v488[0] - 24;
      v42 = 0.0;
      v43 = (char *)v488[0];
      if (v41 > 0x47)
      {
        v44 = v41 / 0x18 + 1;
        v45 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v456, 0);
        v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v455.f64[0], 0);
        v47 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v455, 1);
        v48 = 0uLL;
        v49 = (const double *)v488[0];
        v50 = v44 & 0x1FFFFFFFFFFFFFFCLL;
        v51 = 0uLL;
        do
        {
          v52 = v49;
          v49 += 12;
          v550 = vld3q_f64(v52);
          v52 += 6;
          v53 = vsubq_f64(v550.val[0], v45);
          v552 = vld3q_f64(v52);
          v54 = vsubq_f64(v552.val[0], v45);
          v55 = vsubq_f64(v550.val[1], v46);
          v550.val[0] = vsubq_f64(v550.val[2], v47);
          v550.val[1] = vsubq_f64(v552.val[1], v46);
          v550.val[2] = vsubq_f64(v552.val[2], v47);
          v48 = vmaxnmq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53, v53), v55, v55), v550.val[0], v550.val[0])), v48);
          v51 = vmaxnmq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54, v54), v550.val[1], v550.val[1]), v550.val[2], v550.val[2])), v51);
          v50 -= 4;
        }
        while (v50);
        v42 = vmaxnmvq_f64(vmaxnmq_f64(v48, v51));
        if (v44 == (v44 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_39;
        v43 = (char *)v488[0] + 24 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
      }
      do
      {
        v56 = vsubq_f64(*(float64x2_t *)(v43 + 8), v455);
        v57 = vmulq_f64(v56, v56);
        v42 = fmax(sqrt(v57.f64[0] + (*(double *)v43 - v456) * (*(double *)v43 - v456) + v57.f64[1]), v42);
        v43 += 24;
      }
      while (v43 != v488[1]);
    }
LABEL_39:
    v69 = -6378137.0 / v38;
    v70 = v42 * 0.0000000249532021;
    if (v70 == 0.0)
    {
      LOBYTE(v71) = *(_BYTE *)(v7 + 274);
    }
    else
    {
      v72 = log2(v70 * v70 * v21);
      v73 = *(double *)(v7 + 16);
      v74 = v73 + v72 * -0.5;
      LOBYTE(v73) = *(_BYTE *)(v7 + 274);
      v71 = (int)fmin(fmax(v74, 0.0), (double)*(unint64_t *)&v73);
    }
    v487 = v71;
    v466 = v6;
    v75 = v23 / v27.__cosval + v69;
    v76 = v470 * 0.159154943 + 0.5;
    v77 = v29 * 0.159154943 + 0.5;
    if (v39 == v40)
    {
      v102 = 0;
      v79 = 0;
      v80 = 0;
    }
    else
    {
      v464 = v29 * 0.159154943 + 0.5;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      do
      {
        v81 = *v39;
        v82 = v39[1];
        v83 = v39[2];
        v84 = sqrt(v81 * v81 + v82 * v82);
        v85 = atan2(v83, v84 * 0.996647189);
        v86 = atan2(v82, v81);
        v87 = __sincos_stret(v85);
        v88 = atan2(v83 + v87.__sinval * v87.__sinval * 42841.3115 * v87.__sinval, v84 + v87.__cosval * v87.__cosval * -42697.6727 * v87.__cosval);
        v89 = __sincos_stret(v88);
        v90 = v84 / v89.__cosval + -6378137.0 / sqrt(v89.__sinval * v89.__sinval * -0.00669437999 + 1.0);
        v91 = tan(v88 * 0.5 + 0.785398163);
        v92 = v86 * 0.159154943 + 0.5;
        v93 = log(v91) * 0.159154943 + 0.5;
        if (v79 < (double *)v80)
        {
          *v79 = v92;
          v79[1] = v93;
          v79[2] = v90;
          v79 += 3;
        }
        else
        {
          v94 = 0xAAAAAAAAAAAAAAABLL * (v79 - v78) + 1;
          if (v94 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_506;
          if (0x5555555555555556 * ((v80 - (char *)v78) >> 3) > v94)
            v94 = 0x5555555555555556 * ((v80 - (char *)v78) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v80 - (char *)v78) >> 3) >= 0x555555555555555)
            v95 = 0xAAAAAAAAAAAAAAALL;
          else
            v95 = v94;
          if (v95)
          {
            if (v95 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_505;
            v96 = (char *)operator new(24 * v95);
          }
          else
          {
            v96 = 0;
          }
          v97 = (double *)&v96[8 * (v79 - v78)];
          *v97 = v92;
          v97[1] = v93;
          v97[2] = v90;
          if (v79 == v78)
          {
            v99 = &v96[8 * (v79 - v78)];
          }
          else
          {
            v98 = (double *)&v96[8 * (v79 - v78)];
            do
            {
              v99 = (char *)(v98 - 3);
              v100 = *(_OWORD *)(v79 - 3);
              *(v98 - 1) = *(v79 - 1);
              *(_OWORD *)(v98 - 3) = v100;
              v79 -= 3;
              v98 -= 3;
            }
            while (v79 != v78);
          }
          v80 = &v96[24 * v95];
          v79 = v97 + 3;
          if (v78)
            operator delete(v78);
          v78 = (double *)v99;
        }
        v39 += 3;
      }
      while (v39 != v40);
      if (v79 < (double *)v80)
      {
        *v79 = v470 * 0.159154943 + 0.5;
        v79[1] = v464;
        v101 = v79 + 3;
        v79[2] = v75;
        goto LABEL_83;
      }
      v102 = v78;
      v76 = v470 * 0.159154943 + 0.5;
      v77 = v464;
    }
    v103 = 0xAAAAAAAAAAAAAAABLL * (v79 - v102) + 1;
    if (v103 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_506;
    if (0x5555555555555556 * ((v80 - (char *)v102) >> 3) > v103)
      v103 = 0x5555555555555556 * ((v80 - (char *)v102) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v80 - (char *)v102) >> 3) >= 0x555555555555555)
      v104 = 0xAAAAAAAAAAAAAAALL;
    else
      v104 = v103;
    if (v104)
    {
      if (v104 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_505;
      v105 = (char *)operator new(24 * v104);
    }
    else
    {
      v105 = 0;
    }
    v106 = (double *)&v105[8 * (v79 - v102)];
    v80 = &v105[24 * v104];
    *v106 = v76;
    v106[1] = v77;
    v106[2] = v75;
    v101 = v106 + 3;
    if (v79 == v102)
    {
      v78 = (double *)&v105[8 * (v79 - v102)];
      if (!v102)
        goto LABEL_83;
    }
    else
    {
      do
      {
        v78 = v106 - 3;
        v107 = *(_OWORD *)(v79 - 3);
        *(v106 - 1) = *(v79 - 1);
        *(_OWORD *)(v106 - 3) = v107;
        v79 -= 3;
        v106 -= 3;
      }
      while (v79 != v102);
      if (!v102)
        goto LABEL_83;
    }
    operator delete(v102);
LABEL_83:
    if (!*(_BYTE *)(v478 + 352))
      goto LABEL_109;
    v108 = *(_QWORD *)(v478 + 344);
    if (!v108)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(v444, v445, v446);
    }
    v109 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108));
    v111 = v110 ? v109 : 0.0;
    if (v111 == 0.0)
    {
LABEL_109:
      v450 = 0;
      goto LABEL_117;
    }
    v113 = v6[2];
    *(double *)v492 = v6[1];
    v112 = *(void **)v492;
    *(double *)&v492[8] = v113;
    v472 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)&v492[16] = *(_OWORD *)(v6 + 3);
    v459 = *(double *)&v492[16];
    *(_OWORD *)&v492[32] = v472;
    *(double *)v493 = v6[7];
    v465 = *(_QWORD *)v493;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v496, (double *)v492);
    v461 = v496[1];
    v463 = v496[0];
    v114 = *(double *)v497;
    v115 = __sincos_stret(*(double *)&v112);
    v116 = 6378137.0 / sqrt(v115.__sinval * v115.__sinval * -0.00669437999 + 1.0);
    v117 = __sincos_stret(v113);
    *(_QWORD *)v492 = v112;
    *(double *)&v492[8] = v113;
    *(double *)&v492[16] = v459 - v111;
    *(_QWORD *)&v492[24] = fmax(sqrt((*(double *)&v463 - (v116 + *(double *)&v492[16]) * v115.__cosval * v117.__cosval)* (*(double *)&v463 - (v116 + *(double *)&v492[16]) * v115.__cosval * v117.__cosval)+ (*(double *)&v461 - (v116 + *(double *)&v492[16]) * v115.__cosval * v117.__sinval)* (*(double *)&v461 - (v116 + *(double *)&v492[16]) * v115.__cosval * v117.__sinval)+ (v114 - (*(double *)&v492[16] + v116 * 0.99330562) * v115.__sinval)* (v114 - (*(double *)&v492[16] + v116 * 0.99330562) * v115.__sinval)), v469);
    v118 = *((_OWORD *)v6 + 23);
    v119 = *((_OWORD *)v6 + 24);
    v120 = *((_OWORD *)v6 + 26);
    v541 = *((_OWORD *)v6 + 25);
    v542 = v120;
    v543 = *((_OWORD *)v6 + 27);
    v544 = *((_DWORD *)v6 + 112);
    v121 = *((_QWORD *)v6 + 57);
    v122 = *((_OWORD *)v6 + 29);
    v123 = *((_QWORD *)v6 + 60);
    v515[1] = v112;
    v517 = *((_QWORD *)&v472 + 1);
    *(_OWORD *)v516 = *(_OWORD *)&v492[8];
    *(_OWORD *)&v516[16] = *(_OWORD *)&v492[24];
    v518 = v465;
    v520 = 0;
    v519 = 0;
    v522 = 0;
    v521 = 0;
    v523 = 0;
    v524 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v525 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v526 = v524;
    v527 = v525;
    v528 = v524;
    v529 = v525;
    v530 = v524;
    v531 = v525;
    v532 = v524;
    v533 = v525;
    v534 = v524;
    v535 = v525;
    v536 = 1;
    v537 = 0;
    v538 = 0;
    v539 = v118;
    v540 = v119;
    v545 = v121;
    v546 = v122;
    v547 = v123;
    v548 = 0;
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)v496, (const Camera *)v515);
    gdc::CameraView::operator=((uint64_t)v509, (uint64_t)v496);
    memset(__p, 0, sizeof(__p));
    std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(__p, (unint64_t)&v511, (uint64_t)__p);
    v124 = (double *)__p[1];
    v125 = (double *)__p[0];
    if (__p[0] != __p[1])
    {
      v126 = 1.0;
      while (1)
      {
        v128 = *v125;
        v129 = v125[1];
        v130 = v125[2];
        v131 = sqrt(v128 * v128 + v129 * v129);
        v132 = atan2(v130, v131 * 0.996647189);
        v133 = atan2(v129, v128);
        v134 = __sincos_stret(v132);
        v135 = atan2(v130 + v134.__sinval * v134.__sinval * 42841.3115 * v134.__sinval, v131 + v134.__cosval * v134.__cosval * -42697.6727 * v134.__cosval);
        v136 = __sincos_stret(v135);
        v137 = v131 / v136.__cosval + -6378137.0 / sqrt(v136.__sinval * v136.__sinval * -0.00669437999 + 1.0);
        v138 = tan(v135 * 0.5 + 0.785398163);
        v139 = v133 * 0.159154943 + 0.5;
        v140 = log(v138) * 0.159154943 + 0.5;
        if (v101 < (double *)v80)
        {
          *v101 = v139;
          v101[1] = v140;
          v127 = v101 + 3;
          v101[2] = v137;
        }
        else
        {
          v141 = 0xAAAAAAAAAAAAAAABLL * (v101 - v78) + 1;
          if (v141 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_506;
          if (0x5555555555555556 * ((v80 - (char *)v78) >> 3) > v141)
            v141 = 0x5555555555555556 * ((v80 - (char *)v78) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v80 - (char *)v78) >> 3) >= 0x555555555555555)
            v142 = 0xAAAAAAAAAAAAAAALL;
          else
            v142 = v141;
          if (v142)
          {
            if (v142 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_505;
            v143 = (char *)operator new(24 * v142);
          }
          else
          {
            v143 = 0;
          }
          v144 = (double *)&v143[8 * (v101 - v78)];
          v80 = &v143[24 * v142];
          *v144 = v139;
          v144[1] = v140;
          v144[2] = v137;
          v127 = v144 + 3;
          if (v101 == v78)
            goto LABEL_107;
          do
          {
            v145 = *(_OWORD *)(v101 - 3);
            *(v144 - 1) = *(v101 - 1);
            *(_OWORD *)(v144 - 3) = v145;
            v144 -= 3;
            v101 -= 3;
          }
          while (v101 != v78);
          if (v78)
LABEL_107:
            operator delete(v78);
          v78 = v144;
        }
        v125 += 3;
        v101 = v127;
        if (v125 == v124)
          goto LABEL_113;
      }
    }
    v127 = v101;
    v126 = 1.0;
LABEL_113:
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v496, (double *)v492);
    v146 = v496[0];
    v147 = v496[1];
    v148 = *(double *)v497;
    v149 = sqrt(*(double *)&v146 * *(double *)&v146 + *(double *)&v147 * *(double *)&v147);
    v150 = atan2(*(long double *)v497, v149 * 0.996647189);
    v151 = atan2(*(long double *)&v147, *(long double *)&v146);
    v152 = __sincos_stret(v150);
    v153 = atan2(v148 + v152.__sinval * v152.__sinval * 42841.3115 * v152.__sinval, v149 + v152.__cosval * v152.__cosval * -42697.6727 * v152.__cosval);
    v154 = __sincos_stret(v153);
    v155 = v149 / v154.__cosval + -6378137.0 / sqrt(v126 + v154.__sinval * v154.__sinval * -0.00669437999);
    v156 = tan(v153 * 0.5 + 0.785398163);
    v157 = v151 * 0.159154943 + 0.5;
    v158 = log(v156) * 0.159154943 + 0.5;
    if (v127 < (double *)v80)
    {
      *v127 = v157;
      v127[1] = v158;
      v101 = v127 + 3;
      v127[2] = v155;
      v159 = __p[0];
      if (!__p[0])
      {
LABEL_116:
        v450 = 1;
LABEL_117:
        v481 = v78;
        if (v78 == v101)
        {
          result = -1.79769313e308;
          v163 = 1.79769313e308;
          v161 = 1.79769313e308;
          v164 = -1.79769313e308;
        }
        else
        {
          v160 = (char *)v101 - (char *)v78 - 24;
          if (v160 >= 0x60)
          {
            v165 = v160 / 0x18 + 1;
            v166 = v165 & 3;
            if ((v165 & 3) == 0)
              v166 = 4;
            v167 = v165 - v166;
            v168 = 3 * v167;
            v169 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            v170 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
            v171 = v78;
            v172 = v170;
            v173 = v170;
            v174 = v170;
            v175 = v169;
            v176 = v169;
            v177 = v169;
            do
            {
              v178 = v171;
              v171 += 12;
              v551 = vld3q_f64(v178);
              v178 += 6;
              v173 = vminnmq_f64(v551.val[0], v173);
              v553 = vld3q_f64(v178);
              v174 = vminnmq_f64(v553.val[0], v174);
              v169 = vmaxnmq_f64(v169, v551.val[0]);
              v175 = vmaxnmq_f64(v175, v553.val[0]);
              v170 = vminnmq_f64(v551.val[1], v170);
              v172 = vminnmq_f64(v553.val[1], v172);
              v176 = vmaxnmq_f64(v176, v551.val[1]);
              v177 = vmaxnmq_f64(v177, v553.val[1]);
              v167 -= 4;
            }
            while (v167);
            v162 = &v78[v168];
            v164 = vmaxnmvq_f64(vmaxnmq_f64(v176, v177));
            result = vmaxnmvq_f64(vmaxnmq_f64(v169, v175));
            v163 = vminnmvq_f64(vminnmq_f64(v173, v174));
            v161 = vminnmvq_f64(vminnmq_f64(v170, v172));
          }
          else
          {
            result = -1.79769313e308;
            v161 = 1.79769313e308;
            v162 = v78;
            v163 = 1.79769313e308;
            v164 = -1.79769313e308;
          }
          do
          {
            v179 = *v162;
            v180 = v162[1];
            v162 += 3;
            v163 = fmin(v179, v163);
            result = fmax(result, v179);
            v161 = fmin(v180, v161);
            v164 = fmax(v164, v180);
          }
          while (v162 != v101);
        }
        v181 = (double)(1 << v487);
        v182 = vcvtmd_s64_f64(v161 * v181);
        v183 = vcvtmd_s64_f64(v164 * v181) - v182;
        if (v183 >= 0)
        {
          result = result * v181;
          v184 = vcvtmd_s64_f64(result);
          v486 = vcvtmd_s64_f64(v163 * v181);
          if (v184 >= v486)
          {
            v430 = 0;
            v485 = (1 << v487) + ~v182;
            v431 = v184 + 1;
            v484 = v183 + 1;
            v432 = (_BYTE *)v504;
            v433 = v503[1];
            v434 = *((_QWORD *)&v505 + 1);
            v435 = v505;
            do
            {
              v436 = v486;
              do
              {
                if (v432 == (_BYTE *)v433)
                  v438 = 0;
                else
                  v438 = 170 * ((v432 - (_BYTE *)v433) >> 3) - 1;
                v439 = v434 + v435;
                if (v438 == v434 + v435)
                {
                  std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                  v433 = v503[1];
                  v432 = (_BYTE *)v504;
                  v434 = *((_QWORD *)&v505 + 1);
                  v435 = v505;
                  v439 = v505 + *((_QWORD *)&v505 + 1);
                }
                v437 = v433[v439 / 0xAA] + 24 * (v439 % 0xAA);
                *(_BYTE *)v437 = -1;
                *(_BYTE *)(v437 + 1) = v487;
                *(_DWORD *)(v437 + 4) = v485 - v430;
                *(_DWORD *)(v437 + 8) = v436;
                *((_QWORD *)&v505 + 1) = ++v434;
                ++v436;
              }
              while (v431 != v436);
              ++v430;
            }
            while (v430 != v484);
          }
        }
        if (v481)
          operator delete(v481);
        v7 = v478;
        v6 = v466;
        if (v488[0])
          operator delete(v488[0]);
        v471 = 1;
        v67 = *((_QWORD *)&v505 + 1);
        if (*((_QWORD *)&v505 + 1))
          goto LABEL_134;
        goto LABEL_467;
      }
LABEL_115:
      operator delete(v159);
      goto LABEL_116;
    }
    v440 = 0xAAAAAAAAAAAAAAABLL * (v127 - v78) + 1;
    if (v440 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * ((v80 - (char *)v78) >> 3) > v440)
        v440 = 0x5555555555555556 * ((v80 - (char *)v78) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v80 - (char *)v78) >> 3) >= 0x555555555555555)
        v440 = 0xAAAAAAAAAAAAAAALL;
      if (!v440)
      {
        v441 = 0;
LABEL_497:
        v442 = (double *)&v441[8 * (v127 - v78)];
        *v442 = v157;
        v442[1] = v158;
        v442[2] = v155;
        v101 = v442 + 3;
        if (v127 == v78)
        {
          v78 = v127;
        }
        else
        {
          do
          {
            v443 = *(_OWORD *)(v127 - 3);
            *(v442 - 1) = *(v127 - 1);
            *(_OWORD *)(v442 - 3) = v443;
            v442 -= 3;
            v127 -= 3;
          }
          while (v127 != v78);
          if (!v78)
          {
LABEL_503:
            v78 = v442;
            v159 = __p[0];
            if (!__p[0])
              goto LABEL_116;
            goto LABEL_115;
          }
        }
        operator delete(v78);
        goto LABEL_503;
      }
      if (v440 <= 0xAAAAAAAAAAAAAAALL)
      {
        v441 = (char *)operator new(24 * v440);
        goto LABEL_497;
      }
LABEL_505:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_506:
    abort();
  }
  v471 = 1;
LABEL_33:
  v58 = fmax(v17, -1.48352986);
  v59 = v58 * 0.5 + 0.785398163;
  v60 = v58 <= 1.48352986;
  v61 = 1.5271631;
  if (v60)
    v61 = v59;
  v62 = tan(v61);
  v63 = vcvtmd_s64_f64((v30 * 0.159154943 + 0.5) * (double)(1 << v449));
  v64 = (1 << v449) + ~vcvtmd_s64_f64((log(v62) * 0.159154943 + 0.5) * (double)(1 << v449));
  LOBYTE(v496[0]) = -1;
  BYTE1(v496[0]) = v449;
  HIDWORD(v496[0]) = v64;
  LODWORD(v496[1]) = v63;
  std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
  v65 = *((_QWORD *)&v505 + 1);
  v66 = *((_QWORD *)v503[1] + ((_QWORD)v505 + *((_QWORD *)&v505 + 1)) / 0xAAuLL)
      + 24 * (((_QWORD)v505 + *((_QWORD *)&v505 + 1)) % 0xAAuLL);
  *(_BYTE *)v66 = -1;
  *(_BYTE *)(v66 + 1) = v449;
  v67 = v65 + 1;
  *(_DWORD *)(v66 + 4) = v64;
  *(_DWORD *)(v66 + 8) = v63;
  std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v506, (unsigned __int8 *)v496, (uint64_t)v496);
  v450 = 0;
  if (v67)
  {
LABEL_134:
    v458 = (unsigned __int8 *)(v7 + 275);
    v452 = (uint64_t *)(v7 + 248);
    v185 = (_QWORD *)(v7 + 208);
    v447 = (_QWORD *)(v7 + 224);
    v460 = v7 + 56;
    v462 = v7 + 128;
    v467 = (_QWORD *)(v7 + 208);
    v186 = v473 + v454 * v454;
    while (1)
    {
      v187 = (char *)v503[1];
      v188 = v505;
      v189 = *((_QWORD *)v503[1] + (unint64_t)v505 / 0xAA) + 24 * ((unint64_t)v505 % 0xAA);
      *(_WORD *)v494 = *(_WORD *)v189;
      v495 = *(void **)(v189 + 4);
      *((_QWORD *)&v505 + 1) = v67 - 1;
      *(_QWORD *)&v505 = v505 + 1;
      if ((unint64_t)(v188 + 1) >= 0x154)
      {
        operator delete(*(void **)v503[1]);
        v503[1] = v187 + 8;
        *(_QWORD *)&v505 = v188 - 169;
      }
      v190 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v185, v494);
      if (v190)
      {
        v191 = *(double **)(v7 + 256);
        v192 = (uint64_t *)v190[5];
        if (v191 != (double *)v192)
        {
          v193 = (uint64_t *)v192[1];
          if (v193 != (uint64_t *)v191)
          {
            v194 = *v192;
            *(_QWORD *)(v194 + 8) = v193;
            *(_QWORD *)v192[1] = v194;
            v195 = *v191;
            *(_QWORD *)(*(_QWORD *)&v195 + 8) = v192;
            *(double *)v192 = v195;
            *(_QWORD *)v191 = v192;
            v192[1] = (uint64_t)v191;
            v191 = *(double **)(v7 + 256);
          }
        }
        if (*(_BYTE *)(v7 + 48) && v191 != (double *)v452)
        {
          v197 = v191[5];
          v196 = v191[6];
          goto LABEL_254;
        }
      }
      v198 = *(_QWORD *)(v7 + 424);
      v197 = v468;
      v196 = v468 + 300.0;
      if (v198)
      {
        (*(void (**)(void **__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)v198 + 48))(v488, v198, v494);
        v196 = v468 + 300.0;
        v197 = v468;
        if (LOBYTE(v488[0]))
        {
          v199 = v488[1];
          v200 = *(double *)&v489;
          v196 = v468 + 300.0;
          v197 = v468;
          if (*(double *)&v489 >= *(double *)&v488[1])
            break;
        }
      }
LABEL_254:
      memset(&v492[16], 0, 32);
      v258 = 56;
      if (v197 == 0.0 && v196 == 0.0)
        v258 = 128;
      v474 = v258;
      if (v197 == 0.0 && v196 == 0.0)
        v259 = v462;
      else
        v259 = v460;
      *(_OWORD *)v492 = 0uLL;
      v260 = v494[1];
      v261 = v494[0];
      LOWORD(v496[0]) = *(_WORD *)v494;
      v475 = v495;
      *(void **)((char *)v496 + 4) = v495;
      *(double *)&v497[8] = v197;
      *(double *)&v497[16] = v196;
      v479 = (uint64_t *)(v259 + 48);
      v262 = (void **)(v259 + 8);
      v263 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((_QWORD *)(v259 + 8), (double *)v496);
      if (!v263)
      {
        v264 = HIDWORD(v475);
        v274 = (int)v475;
        v275 = v475;
        goto LABEL_268;
      }
      v264 = HIDWORD(v475);
      v265 = *(uint64_t **)(v259 + 56);
      v266 = (uint64_t *)v263[7];
      if (v265 != v266)
      {
        v267 = (uint64_t *)v266[1];
        if (v267 != v265)
        {
          v268 = *v266;
          *(_QWORD *)(v268 + 8) = v267;
          *(_QWORD *)v266[1] = v268;
          v269 = *v265;
          *(_QWORD *)(v269 + 8) = v266;
          *v266 = v269;
          *v265 = (uint64_t)v266;
          v266[1] = (uint64_t)v265;
          v265 = *(uint64_t **)(v259 + 56);
        }
        if (v265 != v479)
          goto LABEL_264;
LABEL_267:
        v260 = v494[1];
        v274 = (int)v495;
        v261 = v494[0];
        v275 = v495;
LABEL_268:
        v482 = v275;
        v276 = 1.0 / (double)(1 << v260);
        v277 = (double)v264;
        v278 = (1 << v260) + ~v274;
        *(double *)v515 = v276 * v277;
        *(double *)&v515[1] = v276 * (double)v278;
        *(double *)v516 = v276 + v277 * v276;
        *(double *)&v516[8] = v276 + (double)v278 * v276;
        gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)v496, (double *)v515, v197, v196);
        *(_OWORD *)v492 = *(_OWORD *)v496;
        *(_OWORD *)&v492[16] = *(_OWORD *)v497;
        *(_OWORD *)&v492[32] = *(_OWORD *)&v497[16];
        *(_OWORD *)v493 = *(_OWORD *)&v497[32];
        v476 = *(_QWORD *)&v497[32];
        *(_OWORD *)&v493[16] = v498;
        *(_OWORD *)&v493[32] = v499;
        *(_QWORD *)&v493[48] = v500;
        LOBYTE(__p[0]) = v261;
        BYTE1(__p[0]) = v260;
        *(void **)((char *)__p + 4) = v482;
        *(double *)&v513 = v197;
        *((double *)&v513 + 1) = v196;
        *(_QWORD *)v516 = *(_QWORD *)v497;
        *(_OWORD *)v515 = *(_OWORD *)v496;
        *(_OWORD *)&v516[8] = *(_OWORD *)&v492[24];
        *(_QWORD *)&v516[24] = *(_QWORD *)&v497[24];
        *(_OWORD *)v488 = *(_OWORD *)&v493[8];
        v489 = *(_OWORD *)&v493[24];
        v490 = *(_OWORD *)&v493[40];
        v279 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((_QWORD *)(v259 + 8), (double *)__p);
        if (v279)
        {
          v280 = v279;
          v281 = (uint64_t *)v279[7];
          v282 = *v281;
          *(_QWORD *)(v282 + 8) = v281[1];
          *(_QWORD *)v281[1] = v282;
          --*(_QWORD *)(v259 + 64);
          operator delete(v281);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v496, (_QWORD *)(v259 + 8), v280);
          if (v496[0])
            operator delete(v496[0]);
          v260 = BYTE1(__p[0]);
          v261 = LOBYTE(__p[0]);
          v482 = *(void **)((char *)__p + 4);
          v196 = *((double *)&v513 + 1);
          v197 = *(double *)&v513;
        }
        v283 = (char *)operator new(0xA0uLL);
        v283[16] = v261;
        v283[17] = v260;
        *(_QWORD *)(v283 + 20) = v482;
        *(_OWORD *)(v283 + 40) = v513;
        *(_OWORD *)(v283 + 56) = *(_OWORD *)v515;
        *((_QWORD *)v283 + 9) = *(_QWORD *)v516;
        *((_OWORD *)v283 + 5) = *(_OWORD *)&v516[8];
        *((_QWORD *)v283 + 12) = *(_QWORD *)&v516[24];
        *((_QWORD *)v283 + 13) = v476;
        v284 = v489;
        *((_OWORD *)v283 + 7) = *(_OWORD *)v488;
        *((_OWORD *)v283 + 8) = v284;
        *((_OWORD *)v283 + 9) = v490;
        v285 = *(_QWORD **)(v259 + 56);
        *(_QWORD *)v283 = v479;
        *((_QWORD *)v283 + 1) = v285;
        *v285 = v283;
        v286 = *(_QWORD *)(v259 + 64) + 1;
        *(_QWORD *)(v259 + 56) = v283;
        *(_QWORD *)(v259 + 64) = v286;
        v480 = v260;
        v287 = (v260
              - 0x61C8864680B583EBLL
              + ((v261 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v261 - 0x61C8864680B583EBLL) >> 2)) ^ (v261 - 0x61C8864680B583EBLL);
        v288 = ((int)v482 - 0x61C8864680B583EBLL + (v287 << 6) + (v287 >> 2)) ^ v287;
        v289 = ((SHIDWORD(v482) - 0x61C8864680B583EBLL + (v288 << 6) + (v288 >> 2)) ^ v288) - 0x61C8864680B583EBLL;
        v290 = *(_QWORD *)&v197 - 0x61C8864680B583EBLL;
        if (v197 == 0.0)
          v290 = 0x9E3779B97F4A7C15;
        v291 = (v290 + (v289 << 6) + (v289 >> 2)) ^ v289;
        v292 = *(_QWORD *)&v196 - 0x61C8864680B583EBLL;
        if (v196 == 0.0)
          v292 = 0x9E3779B97F4A7C15;
        v293 = (v292 + (v291 << 6) + (v291 >> 2)) ^ v291;
        v294 = *(_QWORD *)(v259 + 16);
        if (v294)
        {
          v295 = (uint8x8_t)vcnt_s8((int8x8_t)v294);
          v295.i16[0] = vaddlv_u8(v295);
          if (v295.u32[0] > 1uLL)
          {
            v296 = (v292 + (v291 << 6) + (v291 >> 2)) ^ v291;
            if (v293 >= v294)
              v296 = v293 % v294;
          }
          else
          {
            v296 = v293 & (v294 - 1);
          }
          v297 = (uint64_t **)*((_QWORD *)*v262 + v296);
          v453 = v296;
          if (v297)
          {
            v298 = *v297;
            if (v298)
            {
              if (v295.u32[0] < 2uLL)
              {
                while (1)
                {
                  v300 = v298[1];
                  if (v300 == v293)
                  {
                    if (*((unsigned __int8 *)v298 + 16) == v261
                      && *((unsigned __int8 *)v298 + 17) == v480
                      && *(void **)((char *)v298 + 20) == v482
                      && *((double *)v298 + 5) == v197
                      && *((double *)v298 + 6) == v196)
                    {
                      goto LABEL_304;
                    }
                  }
                  else if ((v300 & (v294 - 1)) != v296)
                  {
                    goto LABEL_305;
                  }
                  v298 = (uint64_t *)*v298;
                  if (!v298)
                    goto LABEL_305;
                }
              }
              do
              {
                v299 = v298[1];
                if (v299 == v293)
                {
                  if (*((unsigned __int8 *)v298 + 16) == v261
                    && *((unsigned __int8 *)v298 + 17) == v480
                    && *(void **)((char *)v298 + 20) == v482
                    && *((double *)v298 + 5) == v197
                    && *((double *)v298 + 6) == v196)
                  {
LABEL_304:
                    v7 = v478;
                    v301 = v474;
                    goto LABEL_463;
                  }
                }
                else
                {
                  if (v299 >= v294)
                    v299 %= v294;
                  if (v299 != v296)
                    break;
                }
                v298 = (uint64_t *)*v298;
              }
              while (v298);
            }
          }
        }
LABEL_305:
        v477 = v293;
        v302 = (char *)operator new(0x40uLL);
        v303 = (int8x8_t)v294;
        v304 = v477;
        v305 = v302;
        *(_QWORD *)v302 = 0;
        *((_QWORD *)v302 + 1) = v477;
        v302[16] = v261;
        v302[17] = v480;
        *(_QWORD *)(v302 + 20) = v482;
        *(_OWORD *)(v302 + 40) = v513;
        *((_QWORD *)v302 + 7) = v283;
        v306 = (float)(unint64_t)(*(_QWORD *)(v259 + 32) + 1);
        v307 = *(float *)(v259 + 40);
        if (v294 && (float)(v307 * (float)v294) >= v306)
        {
          v7 = v478;
          v304 = v453;
          goto LABEL_362;
        }
        v308 = (v294 & (v294 - 1)) != 0;
        if (v294 < 3)
          v308 = 1;
        v309 = v308 | (2 * v294);
        v310 = vcvtps_u32_f32(v306 / v307);
        if (v309 <= v310)
          v311 = v310;
        else
          v311 = v309;
        if (v311 == 1)
        {
          v311 = 2;
        }
        else if ((v311 & (v311 - 1)) != 0)
        {
          v312 = v302;
          prime = std::__next_prime(v311);
          v305 = v312;
          v304 = v477;
          v311 = prime;
          v303 = *(int8x8_t *)(v259 + 16);
        }
        if (v311 <= *(_QWORD *)&v303)
        {
          if (v311 >= *(_QWORD *)&v303)
            goto LABEL_358;
          v326 = vcvtps_u32_f32((float)*(unint64_t *)(v259 + 32) / *(float *)(v259 + 40));
          if (*(_QWORD *)&v303 < 3uLL
            || (v327 = (uint8x8_t)vcnt_s8(v303), v327.i16[0] = vaddlv_u8(v327), v327.u32[0] > 1uLL))
          {
            v332 = v305;
            v333 = v303;
            v326 = std::__next_prime(v326);
            v303 = v333;
            v305 = v332;
            v304 = v477;
          }
          else
          {
            v328 = 1 << -(char)__clz(v326 - 1);
            if (v326 >= 2)
              v326 = v328;
          }
          if (v311 <= v326)
            v311 = v326;
          if (v311 >= *(_QWORD *)&v303)
            goto LABEL_358;
          if (!v311)
          {
            v334 = *v262;
            *v262 = 0;
            if (v334)
            {
              v335 = v305;
              operator delete(v334);
              v305 = v335;
              v304 = v477;
            }
            *(_QWORD *)(v259 + 16) = 0;
            goto LABEL_358;
          }
        }
        if (v311 >> 61)
          goto LABEL_505;
        v314 = v305;
        v315 = operator new(8 * v311);
        v316 = *v262;
        *v262 = v315;
        if (v316)
          operator delete(v316);
        v317 = 0;
        *(_QWORD *)(v259 + 16) = v311;
        do
          *((_QWORD *)*v262 + v317++) = 0;
        while (v311 != v317);
        v319 = v259 + 24;
        v318 = *(_QWORD **)(v259 + 24);
        v304 = v477;
        v305 = v314;
        if (!v318)
          goto LABEL_358;
        v320 = v318[1];
        v321 = v311 - 1;
        if ((v311 & (v311 - 1)) == 0)
        {
          v322 = v320 & v321;
          *((_QWORD *)*v262 + v322) = v319;
          while (1)
          {
            v323 = (_QWORD *)*v318;
            if (!*v318)
              break;
            v324 = v323[1] & v321;
            if (v324 == v322)
            {
              v318 = (_QWORD *)*v318;
            }
            else if (*((_QWORD *)*v262 + v324))
            {
              *v318 = *v323;
              v325 = 8 * v324;
              *v323 = **(_QWORD **)((char *)*v262 + v325);
              **(_QWORD **)((char *)*v262 + v325) = v323;
            }
            else
            {
              *((_QWORD *)*v262 + v324) = v318;
              v318 = v323;
              v322 = v324;
            }
          }
LABEL_358:
          v303 = *(int8x8_t *)(v259 + 16);
          if ((*(_QWORD *)&v303 & (*(_QWORD *)&v303 - 1)) != 0)
          {
            v7 = v478;
            if (v304 >= *(_QWORD *)&v303)
              v304 %= *(_QWORD *)&v303;
          }
          else
          {
            v304 &= *(_QWORD *)&v303 - 1;
            v7 = v478;
          }
LABEL_362:
          v336 = *v262;
          v337 = (_QWORD *)*((_QWORD *)*v262 + v304);
          if (v337)
          {
            *(_QWORD *)v305 = *v337;
            v301 = v474;
          }
          else
          {
            *(_QWORD *)v305 = *(_QWORD *)(v259 + 24);
            *(_QWORD *)(v259 + 24) = v305;
            v336[v304] = v259 + 24;
            v301 = v474;
            if (!*(_QWORD *)v305)
              goto LABEL_371;
            v338 = *(_QWORD *)(*(_QWORD *)v305 + 8);
            if ((*(_QWORD *)&v303 & (*(_QWORD *)&v303 - 1)) != 0)
            {
              if (v338 >= *(_QWORD *)&v303)
                v338 %= *(_QWORD *)&v303;
            }
            else
            {
              v338 &= *(_QWORD *)&v303 - 1;
            }
            v337 = (char *)*v262 + 8 * v338;
          }
          *v337 = v305;
LABEL_371:
          ++*(_QWORD *)(v259 + 32);
          while (1)
          {
            v286 = *(_QWORD *)(v259 + 64);
LABEL_463:
            if (v286 <= *(_QWORD *)(v7 + v301))
              break;
            v419 = *(char **)(v259 + 48);
            LOWORD(v496[0]) = *((_WORD *)v419 + 8);
            *(void **)((char *)v496 + 4) = *(void **)(v419 + 20);
            *(_OWORD *)&v497[8] = *(_OWORD *)(v419 + 40);
            *(_OWORD *)&v497[24] = *(_OWORD *)(v419 + 56);
            *(_QWORD *)&v497[40] = *((_QWORD *)v419 + 9);
            v498 = *((_OWORD *)v419 + 5);
            v499 = *((_OWORD *)v419 + 6);
            v502 = *((_OWORD *)v419 + 9);
            v501 = *((_OWORD *)v419 + 8);
            v500 = *((_OWORD *)v419 + 7);
            v420 = *(_QWORD *)v419;
            *(_QWORD *)(v420 + 8) = *((_QWORD *)v419 + 1);
            **((_QWORD **)v419 + 1) = v420;
            *(_QWORD *)(v259 + 64) = v286 - 1;
            operator delete(v419);
            v421 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((_QWORD *)(v259 + 8), (double *)v496);
            if (v421)
            {
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v514, (_QWORD *)(v259 + 8), v421);
              if (v514)
                operator delete(v514);
            }
          }
          goto LABEL_372;
        }
        if (v320 >= v311)
          v320 %= v311;
        *((_QWORD *)*v262 + v320) = v319;
        v329 = (_QWORD *)*v318;
        if (!*v318)
          goto LABEL_358;
        while (1)
        {
          v331 = v329[1];
          if (v331 >= v311)
            v331 %= v311;
          if (v331 != v320)
          {
            if (!*((_QWORD *)*v262 + v331))
            {
              *((_QWORD *)*v262 + v331) = v318;
              goto LABEL_344;
            }
            *v318 = *v329;
            v330 = 8 * v331;
            *v329 = **(_QWORD **)((char *)*v262 + v330);
            **(_QWORD **)((char *)*v262 + v330) = v329;
            v329 = v318;
          }
          v331 = v320;
LABEL_344:
          v318 = v329;
          v329 = (_QWORD *)*v329;
          v320 = v331;
          if (!v329)
            goto LABEL_358;
        }
      }
      if (v265 == v479)
        goto LABEL_267;
LABEL_264:
      v270 = *(_OWORD *)(v265 + 11);
      v271 = *(_OWORD *)(v265 + 9);
      *(_OWORD *)v492 = *(_OWORD *)(v265 + 7);
      *(_OWORD *)&v492[16] = v271;
      v272 = *(_OWORD *)(v265 + 13);
      *(_OWORD *)&v492[32] = v270;
      *(_OWORD *)v493 = v272;
      v273 = *(_OWORD *)(v265 + 17);
      *(_OWORD *)&v493[16] = *(_OWORD *)(v265 + 15);
      *(_OWORD *)&v493[32] = v273;
      *(_QWORD *)&v493[48] = v265[19];
LABEL_372:
      v339 = v458;
      if (!*(_BYTE *)(v7 + 276))
      v340 = v494[1];
      v60 = v494[1] > *v339;
      v341 = v471;
      if (v60)
        v341 = 1;
      if ((v341 & 1) != 0)
        goto LABEL_379;
      v342 = (*(double *)&v493[24] - *(double *)&v493[48]) / ((*(double *)&v493[32] - *(double *)&v493[8]) * 0.5);
      __asm { FMOV            V0.2D, #0.5 }
      *(_OWORD *)v496 = _Q0;
      *(_QWORD *)v497 = 0x3FE0000000000000;
      v347 = geo::OrientedBox<double,3u,double,double>::pointAt((double *)v492, (double *)v496);
      result = (v454 * v348 + v347 * v456 + v349 * v455.f64[0]) / sqrt((v347 * v347 + v349 * v349 + v348 * v348) * v186);
      if (result > v342)
      {
LABEL_379:
        v350 = *(double *)&v492[24];
        v351 = *(_OWORD *)&v492[32];
        v352 = *(double *)v493;
        v353 = -(*(double *)&v492[16] * *(double *)&v492[32] - *(double *)&v492[8] * *(double *)&v492[40])
             - (*(double *)&v492[16] * *(double *)&v492[32]
              - *(double *)&v492[8] * *(double *)&v492[40]);
        v354 = -(*(double *)v492 * *(double *)&v492[40] - *(double *)&v492[16] * *(double *)&v492[24])
             - (*(double *)v492 * *(double *)&v492[40]
              - *(double *)&v492[16] * *(double *)&v492[24]);
        v355 = -(*(double *)&v492[8] * *(double *)&v492[24] - *(double *)v492 * *(double *)&v492[32])
             - (*(double *)&v492[8] * *(double *)&v492[24]
              - *(double *)v492 * *(double *)&v492[32]);
        *(double *)v488 = -(*(double *)v492
                          + v353 * *(double *)v493
                          + v354 * *(double *)&v492[40]
                          - v355 * *(double *)&v492[32]);
        *(double *)&v488[1] = -(v355 * *(double *)&v492[24]
                              - (-(*(double *)&v492[8] - v353 * *(double *)&v492[40])
                               - v354 * *(double *)v493));
        *(double *)&v489 = -(*(double *)&v492[16]
                           + v353 * *(double *)&v492[32]
                           + v355 * *(double *)v493
                           - v354 * *(double *)&v492[24]);
        *((double *)&v489 + 1) = -*(double *)&v492[24];
        *(double *)&v490 = -*(double *)&v492[32];
        *((double *)&v490 + 1) = -*(double *)&v492[40];
        v491 = *(_QWORD *)v493;
        geo::Frustum<double>::transformed((double *)v496, v6 + 123, (uint64_t)v488);
        if (geo::Intersect::encloses<double>((double *)v496, (double *)&v493[8])
          || v450
          && (geo::Frustum<double>::transformed((double *)v515, &v510, (uint64_t)v488),
              geo::Intersect::encloses<double>((double *)v515, (double *)&v493[8])))
        {
          if (v471 && *(_BYTE *)(v478 + 272))
          {
            __asm { FMOV            V0.2D, #0.5 }
            *(_OWORD *)v515 = _Q0;
            *(_QWORD *)v516 = 0x3FE0000000000000;
            v357 = v456 - geo::OrientedBox<double,3u,double,double>::pointAt((double *)v492, (double *)v515);
            v359 = v455.f64[0] - v358;
            v361 = v454 - v360;
            v362 = (*(double *)&v493[32] - *(double *)&v493[8]) * 0.5;
            v363 = -(v350 * (*(double *)&v351 * -2.0) - v352 * (*((double *)&v351 + 1) + *((double *)&v351 + 1))) * v359
                 - -(*(double *)&v351 * -2.0 * *(double *)&v351
                   + 1.0
                   - (*((double *)&v351 + 1) + *((double *)&v351 + 1)) * *((double *)&v351 + 1))
                 * v357
                 + ((*((double *)&v351 + 1) + *((double *)&v351 + 1)) * v350 + v352 * (*(double *)&v351 * -2.0)) * v361;
            v364 = v363 - v362;
            if (v363 <= v362)
              v364 = 0.0;
            if (v363 < -v362)
              v365 = v363 + v362;
            else
              v365 = v364;
            v366 = (*(double *)&v493[48] - *(double *)&v493[24]) * 0.5;
            v367 = ((v350 + v350) * *(double *)&v351 + v352 * (*((double *)&v351 + 1) * -2.0)) * v357
                 - -(*((double *)&v351 + 1) * -2.0 * *((double *)&v351 + 1) + 1.0 - (v350 + v350) * v350) * v359
                 + -(*((double *)&v351 + 1) * -2.0 * *(double *)&v351 - (v350 + v350) * v352) * v361;
            if (v367 >= -v366)
            {
              v368 = 0.0;
              if (v367 > v366)
                v368 = v367 - v366;
            }
            else
            {
              v368 = v366 + v367;
            }
            v386 = (*(double *)&v493[40] - *(double *)&v493[16]) * 0.5;
            v387 = -(v350 * -2.0 * *((double *)&v351 + 1) - v352 * (*(double *)&v351 + *(double *)&v351)) * v357
                 + ((*(double *)&v351 + *(double *)&v351) * *((double *)&v351 + 1) + v350 * -2.0 * v352) * v359
                 + -((*(double *)&v351 + *(double *)&v351) * *(double *)&v351 + -1.0 - v350 * -2.0 * v350) * v361;
            if (v387 >= -v386)
            {
              v388 = 0.0;
              if (v387 > v386)
                v388 = v387 - v386;
            }
            else
            {
              v388 = v386 + v387;
            }
            v389 = sqrt(v365 * v365 + v368 * v368 + v388 * v388) * 0.0000000249532021;
            if (v389 == 0.0)
            {
              v390 = *(unsigned __int8 *)(v478 + 274);
            }
            else
            {
              v391 = log2(v389 * v389 * v21);
              v392 = *(double *)(v478 + 16);
              v393 = v392 + v391 * -0.5;
              LOBYTE(v392) = *(_BYTE *)(v478 + 274);
              v390 = (int)fmin(fmax(v393, 0.0), (double)*(unint64_t *)&v392);
            }
            v394 = v448;
            if (v340 < v449)
              v394 = 1;
            if (v340 >= v390 || v394 == 0)
            {
              if (!a4[3]
                || !std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, v494))
              {
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a3, v494, (uint64_t)v494);
              }
            }
            else
            {
              v396 = v503[1];
              v397 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
              v398 = (int32x2_t)v495;
              v399 = v494[0];
              if ((void *)v504 == v503[1])
                v400 = 0;
              else
                v400 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
              v402 = *((_QWORD *)&v505 + 1);
              v401 = v505;
              v403 = *((_QWORD *)&v505 + 1) + v505;
              if (v400 == *((_QWORD *)&v505 + 1) + (_QWORD)v505)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                v396 = v503[1];
                v402 = *((_QWORD *)&v505 + 1);
                v401 = v505;
                v403 = v505 + *((_QWORD *)&v505 + 1);
                v397 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
              }
              v404 = v340 + 1;
              result = COERCE_DOUBLE(vadd_s32(v398, v398));
              v405 = v396[v403 / 0xAA] + 24 * (v403 % 0xAA);
              *(_BYTE *)v405 = v399;
              *(_BYTE *)(v405 + 1) = v340 + 1;
              *(double *)(v405 + 4) = result;
              v406 = v402 + 1;
              *((_QWORD *)&v505 + 1) = v406;
              v407 = v406 + v401;
              if (v397 == v406 + v401)
              {
                v483 = result;
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                result = v483;
                v396 = v503[1];
                v406 = *((_QWORD *)&v505 + 1);
                v401 = v505;
                v407 = v505 + *((_QWORD *)&v505 + 1);
                v397 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
              }
              v408 = HIDWORD(result);
              v409 = HIDWORD(result) | 1;
              v410 = v396[v407 / 0xAA] + 24 * (v407 % 0xAA);
              *(_BYTE *)v410 = v399;
              *(_BYTE *)(v410 + 1) = v404;
              v411 = LODWORD(result);
              *(_DWORD *)(v410 + 4) = LODWORD(result);
              *(_DWORD *)(v410 + 8) = HIDWORD(result) | 1;
              v412 = v406 + 1;
              *((_QWORD *)&v505 + 1) = v412;
              v413 = v412 + v401;
              if (v397 == v412 + v401)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                v396 = v503[1];
                v412 = *((_QWORD *)&v505 + 1);
                v401 = v505;
                v413 = v505 + *((_QWORD *)&v505 + 1);
                v397 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
              }
              v414 = v411 | 1;
              v415 = v396[v413 / 0xAA] + 24 * (v413 % 0xAA);
              *(_BYTE *)v415 = v399;
              *(_BYTE *)(v415 + 1) = v404;
              *(_DWORD *)(v415 + 4) = v414;
              *(_DWORD *)(v415 + 8) = v408;
              v416 = v412 + 1;
              *((_QWORD *)&v505 + 1) = v416;
              v417 = v416 + v401;
              if (v397 == v417)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                v416 = *((_QWORD *)&v505 + 1);
                v396 = v503[1];
                v417 = v505 + *((_QWORD *)&v505 + 1);
              }
              v418 = v396[v417 / 0xAA] + 24 * (v417 % 0xAA);
              *(_BYTE *)v418 = v399;
              *(_BYTE *)(v418 + 1) = v404;
              *(_DWORD *)(v418 + 4) = v414;
              *(_DWORD *)(v418 + 8) = v409;
              *((_QWORD *)&v505 + 1) = v416 + 1;
            }
          }
          else
          {
            if (!a4[3]
              || !std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, v494))
            {
              std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a3, v494, (uint64_t)v494);
            }
            for (i = -1; i != 2; ++i)
            {
              for (j = -1; j != 2; ++j)
              {
                if (j | i)
                {
                  v372 = v494[1];
                  v373 = ((int)v495 + i + (1 << v494[1])) % (1 << v494[1]);
                  v374 = ((1 << v494[1]) + j + HIDWORD(v495)) % (1 << v494[1]);
                  LOBYTE(v515[0]) = -1;
                  BYTE1(v515[0]) = v494[1];
                  HIDWORD(v515[0]) = v373;
                  LODWORD(v515[1]) = v374;
                  if (v506[1])
                  {
                    v375 = (v373
                          - 0x61C8864680B583EBLL
                          + (((v494[1] + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
                          + (((v494[1] + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v494[1]
                                                                                               + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
                    v376 = (v374 - 0x61C8864680B583EBLL + (v375 << 6) + (v375 >> 2)) ^ v375;
                    result = COERCE_DOUBLE(vcnt_s8((int8x8_t)v506[1]));
                    LOWORD(result) = vaddlv_u8(*(uint8x8_t *)&result);
                    if (LODWORD(result) > 1uLL)
                    {
                      v377 = v376;
                      if ((void *)v376 >= v506[1])
                        v377 = v376 % (unint64_t)v506[1];
                    }
                    else
                    {
                      v377 = v376 & ((unint64_t)v506[1] - 1);
                    }
                    v378 = (uint64_t **)*((_QWORD *)v506[0] + v377);
                    if (v378)
                    {
                      v379 = *v378;
                      if (v379)
                      {
                        if (LODWORD(result) < 2uLL)
                        {
                          while (1)
                          {
                            v381 = v379[1];
                            if (v376 == v381)
                            {
                              if (__PAIR64__(*((unsigned __int8 *)v379 + 17), *((unsigned __int8 *)v379 + 16)) == __PAIR64__(v494[1], 255)
                                && *((_DWORD *)v379 + 5) == v373
                                && *((_DWORD *)v379 + 6) == v374)
                              {
                                goto LABEL_396;
                              }
                            }
                            else if ((v381 & ((uint64_t)v506[1] - 1)) != v377)
                            {
                              goto LABEL_423;
                            }
                            v379 = (uint64_t *)*v379;
                            if (!v379)
                              goto LABEL_423;
                          }
                        }
                        do
                        {
                          v380 = v379[1];
                          if (v376 == v380)
                          {
                            if (__PAIR64__(*((unsigned __int8 *)v379 + 17), *((unsigned __int8 *)v379 + 16)) == __PAIR64__(v494[1], 255)
                              && *((_DWORD *)v379 + 5) == v373
                              && *((_DWORD *)v379 + 6) == v374)
                            {
                              goto LABEL_396;
                            }
                          }
                          else
                          {
                            if ((void *)v380 >= v506[1])
                              v380 %= (unint64_t)v506[1];
                            if (v380 != v377)
                              break;
                          }
                          v379 = (uint64_t *)*v379;
                        }
                        while (v379);
                      }
                    }
                  }
LABEL_423:
                  v382 = v503[1];
                  if ((void *)v504 == v503[1])
                    v383 = 0;
                  else
                    v383 = 170 * ((uint64_t)(v504 - (unint64_t)v503[1]) >> 3) - 1;
                  v384 = *((_QWORD *)&v505 + 1);
                  v385 = *((_QWORD *)&v505 + 1) + v505;
                  if (v383 == *((_QWORD *)&v505 + 1) + (_QWORD)v505)
                  {
                    std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v503);
                    v384 = *((_QWORD *)&v505 + 1);
                    v382 = v503[1];
                    v385 = v505 + *((_QWORD *)&v505 + 1);
                  }
                  v371 = v382[v385 / 0xAA] + 24 * (v385 % 0xAA);
                  *(_BYTE *)v371 = -1;
                  *(_BYTE *)(v371 + 1) = v372;
                  *(_DWORD *)(v371 + 4) = v373;
                  *(_DWORD *)(v371 + 8) = v374;
                  *((_QWORD *)&v505 + 1) = v384 + 1;
                  std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v506, (unsigned __int8 *)v515, (uint64_t)v515);
                }
LABEL_396:
                ;
              }
            }
          }
        }
        v7 = v478;
      }
      v67 = *((_QWORD *)&v505 + 1);
      v185 = v467;
      if (!*((_QWORD *)&v505 + 1))
        goto LABEL_467;
    }
    if (!*(_BYTE *)(v7 + 48))
    {
LABEL_253:
      v196 = v200;
      v197 = *(double *)&v199;
      goto LABEL_254;
    }
    v201 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v185, v494);
    if (v201)
    {
      v202 = v201;
      v203 = (uint64_t *)v201[5];
      v204 = *v203;
      *(_QWORD *)(v204 + 8) = v203[1];
      *(_QWORD *)v203[1] = v204;
      --*(_QWORD *)(v7 + 264);
      operator delete(v203);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v496, v467, v202);
      if (v496[0])
        operator delete(v496[0]);
    }
    v205 = (char *)operator new(0x38uLL);
    v206 = v494[1];
    v207 = v494[0];
    v205[16] = v494[0];
    v205[17] = v206;
    v208 = v495;
    *(_QWORD *)(v205 + 20) = v495;
    *((double *)v205 + 5) = *(double *)&v199;
    *((double *)v205 + 6) = v200;
    v209 = *(_QWORD **)(v7 + 256);
    *(_QWORD *)v205 = v452;
    *((_QWORD *)v205 + 1) = v209;
    *v209 = v205;
    v210 = *(_QWORD *)(v7 + 264) + 1;
    *(_QWORD *)(v7 + 256) = v205;
    *(_QWORD *)(v7 + 264) = v210;
    v211 = v494[1];
    v212 = (v494[1]
          - 0x61C8864680B583EBLL
          + ((v207 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(v207 - 0x61C8864680B583EBLL) >> 2)) ^ (v207 - 0x61C8864680B583EBLL);
    v213 = ((int)v208 - 0x61C8864680B583EBLL + (v212 << 6) + (v212 >> 2)) ^ v212;
    v214 = (SHIDWORD(v208) - 0x61C8864680B583EBLL + (v213 << 6) + (v213 >> 2)) ^ v213;
    v215 = *(_QWORD *)(v7 + 216);
    if (v215)
    {
      v216 = (uint8x8_t)vcnt_s8((int8x8_t)v215);
      v216.i16[0] = vaddlv_u8(v216);
      if (v216.u32[0] > 1uLL)
      {
        v67 = (SHIDWORD(v208) - 0x61C8864680B583EBLL + (v213 << 6) + (v213 >> 2)) ^ v213;
        if (v214 >= v215)
          v67 = v214 % v215;
      }
      else
      {
        v67 = v214 & (v215 - 1);
      }
      v217 = *(uint64_t ***)(*v467 + 8 * v67);
      if (v217)
      {
        v218 = *v217;
        if (v218)
        {
          if (v216.u32[0] < 2uLL)
          {
            while (1)
            {
              v220 = v218[1];
              if (v220 == v214)
              {
                if (__PAIR64__(*((unsigned __int8 *)v218 + 17), *((unsigned __int8 *)v218 + 16)) == __PAIR64__(v494[1], v207)
                  && *(void **)((char *)v218 + 20) == v208)
                {
                  goto LABEL_176;
                }
              }
              else if ((v220 & (v215 - 1)) != v67)
              {
                goto LABEL_177;
              }
              v218 = (uint64_t *)*v218;
              if (!v218)
                goto LABEL_177;
            }
          }
          do
          {
            v219 = v218[1];
            if (v219 == v214)
            {
              if (__PAIR64__(*((unsigned __int8 *)v218 + 17), *((unsigned __int8 *)v218 + 16)) == __PAIR64__(v494[1], v207)&& *(void **)((char *)v218 + 20) == v208)
              {
LABEL_176:
                v7 = v478;
                v221 = v467;
                goto LABEL_248;
              }
            }
            else
            {
              if (v219 >= v215)
                v219 %= v215;
              if (v219 != v67)
                break;
            }
            v218 = (uint64_t *)*v218;
          }
          while (v218);
        }
      }
    }
LABEL_177:
    v222 = operator new(0x30uLL);
    *v222 = 0;
    v222[1] = v214;
    *((_BYTE *)v222 + 16) = v494[0];
    *((_BYTE *)v222 + 17) = v211;
    *(_QWORD *)((char *)v222 + 20) = v495;
    v222[5] = v205;
    v223 = (float)(unint64_t)(*(_QWORD *)(v478 + 232) + 1);
    v224 = *(float *)(v478 + 240);
    if (v215 && (float)(v224 * (float)v215) >= v223)
    {
      v221 = v467;
      goto LABEL_229;
    }
    v225 = (v215 & (v215 - 1)) != 0;
    if (v215 < 3)
      v225 = 1;
    v226 = v225 | (2 * v215);
    v227 = vcvtps_u32_f32(v223 / v224);
    if (v226 <= v227)
      v228 = v227;
    else
      v228 = v226;
    if (v228 == 1)
    {
      v228 = 2;
    }
    else if ((v228 & (v228 - 1)) != 0)
    {
      v229 = v222;
      v230 = std::__next_prime(v228);
      v222 = v229;
      v228 = v230;
      v215 = *(_QWORD *)(v478 + 216);
    }
    if (v228 <= v215)
    {
      if (v228 >= v215)
      {
LABEL_215:
        v221 = v467;
LABEL_216:
        if ((v215 & (v215 - 1)) != 0)
        {
          if (v214 >= v215)
            v67 = v214 % v215;
          else
            v67 = v214;
        }
        else
        {
          v67 = (v215 - 1) & v214;
        }
LABEL_229:
        v249 = *v221;
        v250 = *(_QWORD **)(*v221 + 8 * v67);
        if (v250)
        {
          *v222 = *v250;
        }
        else
        {
          *v222 = *v447;
          *v447 = v222;
          *(_QWORD *)(v249 + 8 * v67) = v447;
          if (!*v222)
            goto LABEL_238;
          v251 = *(_QWORD *)(*v222 + 8);
          if ((v215 & (v215 - 1)) != 0)
          {
            if (v251 >= v215)
              v251 %= v215;
          }
          else
          {
            v251 &= v215 - 1;
          }
          v250 = (_QWORD *)(*v221 + 8 * v251);
        }
        *v250 = v222;
LABEL_238:
        v7 = v478;
        ++*(_QWORD *)(v478 + 232);
        while (1)
        {
          v210 = *(_QWORD *)(v7 + 264);
LABEL_248:
          if (v210 <= *(_QWORD *)(v7 + 200))
            break;
          v255 = *(char **)(v7 + 248);
          LOWORD(v496[0]) = *((_WORD *)v255 + 8);
          *(void **)((char *)v496 + 4) = *(void **)(v255 + 20);
          *(_OWORD *)&v497[8] = *(_OWORD *)(v255 + 40);
          v256 = *(_QWORD *)v255;
          *(_QWORD *)(v256 + 8) = *((_QWORD *)v255 + 1);
          **((_QWORD **)v255 + 1) = v256;
          *(_QWORD *)(v7 + 264) = v210 - 1;
          operator delete(v255);
          v257 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v221, (unsigned __int8 *)v496);
          if (v257)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v515, v221, v257);
            if (v515[0])
              operator delete(v515[0]);
          }
        }
        goto LABEL_253;
      }
      v243 = vcvtps_u32_f32((float)*(unint64_t *)(v478 + 232) / *(float *)(v478 + 240));
      if (v215 < 3 || (v244 = (uint8x8_t)vcnt_s8((int8x8_t)v215), v244.i16[0] = vaddlv_u8(v244), v244.u32[0] > 1uLL))
      {
        v252 = v222;
        v243 = std::__next_prime(v243);
        v222 = v252;
      }
      else
      {
        v245 = 1 << -(char)__clz(v243 - 1);
        if (v243 >= 2)
          v243 = v245;
      }
      if (v228 <= v243)
        v228 = v243;
      if (v228 >= v215)
      {
        v215 = *(_QWORD *)(v478 + 216);
        goto LABEL_215;
      }
      v231 = v478;
      if (!v228)
      {
        v221 = v467;
        v253 = (void *)*v467;
        *v467 = 0;
        if (v253)
        {
          v254 = v222;
          operator delete(v253);
          v222 = v254;
        }
        v215 = 0;
        *(_QWORD *)(v478 + 216) = 0;
        goto LABEL_216;
      }
    }
    else
    {
      v231 = v478;
    }
    if (v228 >> 61)
      goto LABEL_505;
    v232 = v222;
    v233 = operator new(8 * v228);
    v234 = (void *)*v467;
    *v467 = v233;
    if (v234)
      operator delete(v234);
    v235 = 0;
    *(_QWORD *)(v231 + 216) = v228;
    v222 = v232;
    do
      *(_QWORD *)(*v467 + 8 * v235++) = 0;
    while (v228 != v235);
    v236 = (_QWORD *)*v447;
    if (!*v447)
    {
LABEL_214:
      v215 = v228;
      goto LABEL_215;
    }
    v237 = v236[1];
    v238 = v228 - 1;
    if ((v228 & (v228 - 1)) == 0)
    {
      v239 = v237 & v238;
      *(_QWORD *)(*v467 + 8 * v239) = v447;
      while (1)
      {
        v240 = (_QWORD *)*v236;
        if (!*v236)
          break;
        v241 = v240[1] & v238;
        if (v241 == v239)
        {
          v236 = (_QWORD *)*v236;
        }
        else if (*(_QWORD *)(*v467 + 8 * v241))
        {
          *v236 = *v240;
          v242 = 8 * v241;
          *v240 = **(_QWORD **)(*v467 + v242);
          **(_QWORD **)(*v467 + v242) = v240;
        }
        else
        {
          *(_QWORD *)(*v467 + 8 * v241) = v236;
          v236 = v240;
          v239 = v241;
        }
      }
      goto LABEL_214;
    }
    if (v237 >= v228)
      v237 %= v228;
    *(_QWORD *)(*v467 + 8 * v237) = v447;
    v246 = (_QWORD *)*v236;
    if (!*v236)
      goto LABEL_214;
    while (1)
    {
      v248 = v246[1];
      if (v248 >= v228)
        v248 %= v228;
      if (v248 != v237)
      {
        if (!*(_QWORD *)(*v467 + 8 * v248))
        {
          *(_QWORD *)(*v467 + 8 * v248) = v236;
          goto LABEL_220;
        }
        *v236 = *v246;
        v247 = 8 * v248;
        *v246 = **(_QWORD **)(*v467 + v247);
        **(_QWORD **)(*v467 + v247) = v246;
        v246 = v236;
      }
      v248 = v237;
LABEL_220:
      v236 = v246;
      v246 = (_QWORD *)*v246;
      v237 = v248;
      if (!v246)
        goto LABEL_214;
    }
  }
LABEL_467:
  v422 = (void **)v503[1];
  v423 = (void **)v504;
  v424 = v504 - (unint64_t)v503[1];
  if ((unint64_t)v504 - (unint64_t)v503[1] >= 0x11)
  {
    do
    {
      v425 = *v422++;
      operator delete(v425);
      v424 -= 8;
    }
    while (v424 > 0x10);
  }
  while (v422 != v423)
  {
    v426 = *v422++;
    operator delete(v426);
  }
  if (v503[0])
    operator delete(v503[0]);
  v427 = v507[0];
  if (v507[0])
  {
    do
    {
      v428 = (_QWORD *)*v427;
      operator delete(v427);
      v427 = v428;
    }
    while (v428);
  }
  v429 = v506[0];
  v506[0] = 0;
  if (v429)
    operator delete(v429);
  return result;
}

double std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *i;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  const double *v36;
  double *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v3 = a2;
  v5 = (char *)*a1;
  v6 = a1[1];
  v7 = -*a1 / 24;
  v8 = (_OWORD *)(*a1 + 24 * v7);
  v9 = a1[2];
  if ((uint64_t)(v9 - v6) >= 192)
  {
    v14 = v6 - (_QWORD)v8;
    if ((uint64_t)(v6 - (_QWORD)v8) > 191)
    {
      v15 = a2 + 192;
      v17 = a1[1];
    }
    else
    {
      v15 = a2 + v14;
      if (a2 + v14 == a3)
      {
        v17 = a1[1];
      }
      else
      {
        v16 = a2 + v14;
        v17 = a1[1];
        do
        {
          v18 = *(_OWORD *)v16;
          *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
          *(_OWORD *)v17 = v18;
          v17 += 24;
          v16 += 24;
        }
        while (v16 != a3);
      }
      a1[1] = v17;
      if (v14 < 1)
        return *(double *)&v18;
    }
    v27 = v17 - (_QWORD)(v8 + 12);
    v28 = v17 - 192;
    v29 = v17;
    if (v17 - 192 < v6)
    {
      v30 = v17 - 192;
      v29 = v17;
      do
      {
        v18 = *(_OWORD *)v30;
        *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
        *(_OWORD *)v29 = v18;
        v29 += 24;
        v30 += 24;
      }
      while (v30 < v6);
    }
    a1[1] = v29;
    if ((_OWORD *)v17 != v8 + 12)
    {
      if (v27 - 24 < 0x138
        || ((v31 = (v27 - 24) / 0x18,
             v32 = (unint64_t)&v5[v27 + 24 * v7 - 24 * v31 - 24],
             v17 - 24 * v31 - 24 < v28)
          ? (v33 = v32 >= v17)
          : (v33 = 1),
            !v33))
      {
        v35 = v17;
LABEL_43:
        v39 = (_QWORD *)(v35 - 8);
        do
        {
          v40 = *(_QWORD *)(v28 - 24);
          v28 -= 24;
          *(v39 - 2) = v40;
          *(v39 - 1) = *(_QWORD *)(v28 + 8);
          *(_QWORD *)&v18 = *(_QWORD *)(v28 + 16);
          *v39 = v18;
          v39 -= 3;
        }
        while ((_OWORD *)v28 != v8);
        goto LABEL_45;
      }
      v34 = v31 + 1;
      v35 = v17 - 24 * (v34 & 0x1FFFFFFFFFFFFFFELL);
      v36 = (const double *)(v17 - 240);
      v37 = (double *)(v17 - 48);
      v38 = v34 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(float64x2x3_t *)&v18 = vld3q_f64(v36);
        vst3q_f64(v37, *(float64x2x3_t *)&v18);
        v37 -= 6;
        v36 -= 6;
        v38 -= 2;
      }
      while (v38);
      if (v34 != (v34 & 0x1FFFFFFFFFFFFFFELL))
      {
        v28 -= 24 * (v34 & 0x1FFFFFFFFFFFFFFELL);
        goto LABEL_43;
      }
    }
LABEL_45:
    if (v15 == a2)
      return *(double *)&v18;
    v41 = v15 - a2 - 24;
    if (v41 >= 0x138)
    {
      v43 = v41 / 0x18;
      if ((unint64_t)v8 < a2 + 24 * v43 + 24 && (unint64_t)&v5[24 * v7 + 24 + 24 * v43] > a2)
      {
        v42 = v8;
      }
      else
      {
        v45 = v43 + 1;
        v46 = (v43 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v42 = (_QWORD *)v8 + 3 * v46;
        v47 = (_OWORD *)a2;
        v48 = v46;
        do
        {
          v18 = v47[1];
          v50 = v47[4];
          v49 = v47[5];
          v51 = v47[2];
          v52 = v47[3];
          *v8 = *v47;
          v8[1] = v18;
          v8[2] = v51;
          v8[3] = v52;
          v47 += 6;
          v8[4] = v50;
          v8[5] = v49;
          v8 += 6;
          v48 -= 4;
        }
        while (v48);
        if (v45 == v46)
          return *(double *)&v18;
        v3 = a2 + 24 * v46;
      }
    }
    else
    {
      v42 = v8;
    }
    do
    {
      *v42 = *(_QWORD *)v3;
      v42[1] = *(_QWORD *)(v3 + 8);
      *(_QWORD *)&v18 = *(_QWORD *)(v3 + 16);
      v42[2] = v18;
      v3 += 24;
      v42 += 3;
    }
    while (v3 != v15);
    return *(double *)&v18;
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 8;
  if (v10 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v19 = &v13[24 * v7];
  *(_OWORD *)v19 = *(_OWORD *)v3;
  *((_QWORD *)v19 + 2) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v3 + 24);
  *((_QWORD *)v19 + 5) = *(_QWORD *)(v3 + 40);
  *((_OWORD *)v19 + 3) = *(_OWORD *)(v3 + 48);
  *((_QWORD *)v19 + 8) = *(_QWORD *)(v3 + 64);
  *((_QWORD *)v19 + 11) = *(_QWORD *)(v3 + 88);
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(v3 + 72);
  v20 = *(_OWORD *)(v3 + 96);
  *((_QWORD *)v19 + 14) = *(_QWORD *)(v3 + 112);
  *((_OWORD *)v19 + 6) = v20;
  *((_QWORD *)v19 + 17) = *(_QWORD *)(v3 + 136);
  *(_OWORD *)(v19 + 120) = *(_OWORD *)(v3 + 120);
  *((_QWORD *)v19 + 20) = *(_QWORD *)(v3 + 160);
  *((_OWORD *)v19 + 9) = *(_OWORD *)(v3 + 144);
  *((_QWORD *)v19 + 23) = *(_QWORD *)(v3 + 184);
  v18 = *(_OWORD *)(v3 + 168);
  v21 = v19 + 192;
  *(_OWORD *)(v19 + 168) = v18;
  if ((unint64_t)(v5 + 23) >= 0x2F)
  {
    v22 = 24 * v7;
    v23 = v5 - 24;
    do
    {
      v24 = &v13[v22];
      v18 = *(_OWORD *)&v23[v22];
      *((_QWORD *)v24 - 1) = *(_QWORD *)&v23[v22 + 16];
      *(_OWORD *)(v24 - 24) = v18;
      v22 -= 24;
    }
    while (v22);
    v19 = v13;
    v6 = a1[1];
  }
  for (i = &v13[24 * v12]; v8 != (_OWORD *)v6; v8 = (_OWORD *)((char *)v8 + 24))
  {
    v18 = *v8;
    *((_QWORD *)v21 + 2) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v21 = v18;
    v21 += 24;
  }
  v26 = (char *)*a1;
  *a1 = v19;
  a1[1] = v21;
  a1[2] = i;
  if (v26)
    operator delete(v26);
  return *(double *)&v18;
}

double geo::OrientedBox<double,3u,double,double>::pointAt(double *a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD __b[3];

  v3 = a1[10];
  v4 = a1[7];
  if (v3 >= v4 && (v5 = a1[11], v6 = a1[8], v5 >= v6) && (v7 = a1[12], v8 = a1[9], v7 >= v8))
  {
    v9 = v4 + *a2 * (v3 - v4);
    v10 = v6 + a2[1] * (v5 - v6);
    v11 = v8 + a2[2] * (v7 - v8);
  }
  else
  {
    memset_pattern16(__b, &unk_19FFB63B0, 0x18uLL);
    v9 = *(double *)__b;
    v10 = *(double *)&__b[1];
    v11 = *(double *)&__b[2];
  }
  v12 = a1[4];
  v13 = a1[5];
  v14 = a1[3];
  return *a1
       + v9
       + (-(v12 * v9 - v14 * v10) - (v12 * v9 - v14 * v10)) * v12
       + (-(v13 * v10 - v12 * v11) - (v13 * v10 - v12 * v11)) * a1[6]
       - (-(v14 * v11 - v13 * v9) - (v14 * v11 - v13 * v9)) * v13;
}

uint64_t *std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>(_QWORD *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = a2[3];
  v3 = a2[4];
  if (v2 == 0.0)
    v4 = 0x9E3779B97F4A7C15;
  else
    v4 = *((_QWORD *)a2 + 3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v5 = 0x9E3779B97F4A7C15;
  else
    v5 = *(_QWORD *)&v3 - 0x61C8864680B583EBLL;
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = *(unsigned __int8 *)a2;
  v8 = *((unsigned __int8 *)a2 + 1);
  v9 = (v8
      + ((v7 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v7 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v7 - 0x61C8864680B583EBLL);
  v10 = *((int *)a2 + 1);
  v11 = *((int *)a2 + 2);
  v12 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v13 = (v11 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  v14 = (v4 + ((v13 - 0x61C8864680B583EBLL) << 6) + ((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2)) ^ (v13 - 0x61C8864680B583EBLL);
  v15 = (v5 + (v14 << 6) + (v14 >> 2)) ^ v14;
  v16 = (uint8x8_t)vcnt_s8(v6);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = v15;
    if (v15 >= *(_QWORD *)&v6)
      v17 = v15 % *(_QWORD *)&v6;
  }
  else
  {
    v17 = v15 & (*(_QWORD *)&v6 - 1);
  }
  v18 = *(uint64_t ***)(*a1 + 8 * v17);
  if (!v18)
    return 0;
  result = *v18;
  if (*v18)
  {
    if (v16.u32[0] < 2uLL)
    {
      v20 = *(_QWORD *)&v6 - 1;
      while (1)
      {
        v22 = result[1];
        if (v22 == v15)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v8, v7)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v11, v10)
            && *((double *)result + 5) == v2
            && *((double *)result + 6) == v3)
          {
            return result;
          }
        }
        else if ((v22 & v20) != v17)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v21 = result[1];
      if (v21 == v15)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v8, v7)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v11, v10)
          && *((double *)result + 5) == v2
          && *((double *)result + 6) == v3)
        {
          return result;
        }
      }
      else
      {
        if (v21 >= *(_QWORD *)&v6)
          v21 %= *(_QWORD *)&v6;
        if (v21 != v17)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t gdc::GlobeTileSelector::GlobeTileSelector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = 256;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B09F8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 1024;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_OWORD *)(a1 + 120) = xmmword_19FFB5540;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = xmmword_19FFB5540;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_QWORD *)(a1 + 248) = a1 + 248;
  *(_QWORD *)(a1 + 256) = a1 + 248;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 1638656;
  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 360) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    *(_QWORD *)(a1 + 392) = 0;
    v6 = *(_QWORD *)(a3 + 24);
    if (v6)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v5 == a2)
  {
    *(_QWORD *)(a1 + 392) = a1 + 368;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 368);
    v6 = *(_QWORD *)(a3 + 24);
    if (v6)
      goto LABEL_6;
LABEL_9:
    *(_QWORD *)(a1 + 424) = 0;
    return a1;
  }
  *(_QWORD *)(a1 + 392) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    goto LABEL_9;
LABEL_6:
  if (v6 == a3)
  {
    *(_QWORD *)(a1 + 424) = a1 + 400;
    (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
  }
  else
  {
    *(_QWORD *)(a1 + 424) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  return a1;
}

_QWORD *gdc::GlobeTileSelector::purgeCache(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t k;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = this;
  if (this[29])
  {
    this = (_QWORD *)this[28];
    if (this)
    {
      do
      {
        v2 = (_QWORD *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[28] = 0;
    v3 = v1[27];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(v1[26] + 8 * i) = 0;
    }
    v1[29] = 0;
  }
  if (v1[33])
  {
    v5 = v1[31];
    this = (_QWORD *)v1[32];
    v6 = *this;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[33] = 0;
    if (this != v1 + 31)
    {
      do
      {
        v7 = (_QWORD *)this[1];
        operator delete(this);
        this = v7;
      }
      while (v7 != v1 + 31);
    }
  }
  if (v1[11])
  {
    this = (_QWORD *)v1[10];
    if (this)
    {
      do
      {
        v8 = (_QWORD *)*this;
        operator delete(this);
        this = v8;
      }
      while (v8);
    }
    v1[10] = 0;
    v9 = v1[9];
    if (v9)
    {
      for (j = 0; j != v9; ++j)
        *(_QWORD *)(v1[8] + 8 * j) = 0;
    }
    v1[11] = 0;
  }
  if (v1[15])
  {
    v11 = v1[13];
    this = (_QWORD *)v1[14];
    v12 = *this;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v11 + 8) = v12;
    v1[15] = 0;
    if (this != v1 + 13)
    {
      do
      {
        v13 = (_QWORD *)this[1];
        operator delete(this);
        this = v13;
      }
      while (v13 != v1 + 13);
    }
  }
  if (v1[20])
  {
    this = (_QWORD *)v1[19];
    if (this)
    {
      do
      {
        v14 = (_QWORD *)*this;
        operator delete(this);
        this = v14;
      }
      while (v14);
    }
    v1[19] = 0;
    v15 = v1[18];
    if (v15)
    {
      for (k = 0; k != v15; ++k)
        *(_QWORD *)(v1[17] + 8 * k) = 0;
    }
    v1[20] = 0;
  }
  if (v1[24])
  {
    v17 = v1 + 22;
    v18 = v1[22];
    this = (_QWORD *)v1[23];
    v19 = *this;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v18 + 8);
    **(_QWORD **)(v18 + 8) = v19;
    v1[24] = 0;
    if (this != v1 + 22)
    {
      do
      {
        v20 = (_QWORD *)this[1];
        operator delete(this);
        this = v20;
      }
      while (v20 != v17);
    }
  }
  return this;
}

unsigned __int16 *gdc::LayerDataKey::LayerDataKey(unsigned __int16 *a1, unsigned __int16 a2, uint64_t a3)
{
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;

  *a1 = a2;
  v5 = (char *)(a1 + 20);
  *((_QWORD *)a1 + 1) = v5;
  *((_QWORD *)a1 + 2) = v5;
  *((_QWORD *)a1 + 3) = v5;
  *((_QWORD *)a1 + 4) = 32;
  v6 = *(char **)a3;
  v7 = *(char **)(a3 + 8);
  v8 = (unint64_t)&v7[-*(_QWORD *)a3];
  if (v8 >= 0x21)
  {
    if (v8 <= 0x40)
      v9 = 64;
    else
      v9 = (size_t)&v7[-*(_QWORD *)a3];
    v5 = (char *)malloc_type_malloc(v9, 0x100004077774924uLL);
    v10 = (char *)*((_QWORD *)a1 + 1);
    v11 = (char *)*((_QWORD *)a1 + 2);
    if (v10 == v11)
      goto LABEL_21;
    v12 = v11 - v10;
    if ((unint64_t)(v11 - v10) < 8)
    {
      v13 = v5;
      goto LABEL_20;
    }
    v13 = v5;
    if ((unint64_t)(v5 - v10) < 0x20)
      goto LABEL_20;
    if (v12 >= 0x20)
    {
      v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      v15 = (__int128 *)(v10 + 16);
      v16 = v5 + 16;
      v17 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v12 == v14)
        goto LABEL_21;
      if ((v12 & 0x18) == 0)
      {
        v10 += v14;
        v13 = &v5[v14];
        goto LABEL_20;
      }
    }
    else
    {
      v14 = 0;
    }
    v19 = v12 & 0xFFFFFFFFFFFFFFF8;
    v13 = &v5[v12 & 0xFFFFFFFFFFFFFFF8];
    v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
    v21 = (uint64_t *)&v10[v14];
    v22 = &v5[v14];
    do
    {
      v23 = *v21++;
      *(_QWORD *)v22 = v23;
      v22 += 8;
      v20 += 8;
    }
    while (v20);
    if (v12 == v19)
      goto LABEL_21;
    v10 += v19;
    do
    {
LABEL_20:
      v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
LABEL_21:
    *((_QWORD *)a1 + 1) = v5;
    *((_QWORD *)a1 + 2) = v5;
    *((_QWORD *)a1 + 4) = v9;
  }
  if (v6 != v7)
  {
    if (v8 < 8)
    {
      v26 = v5;
      goto LABEL_38;
    }
    if ((unint64_t)(v5 - v6) < 0x20)
    {
      v26 = v5;
      goto LABEL_38;
    }
    if (v8 >= 0x20)
    {
      v25 = v8 & 0xFFFFFFFFFFFFFFE0;
      v27 = (__int128 *)(v6 + 16);
      v28 = v5 + 16;
      v29 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30 = *v27;
        *(v28 - 1) = *(v27 - 1);
        *v28 = v30;
        v27 += 2;
        v28 += 2;
        v29 -= 32;
      }
      while (v29);
      if (v8 == v25)
        goto LABEL_39;
      if ((v8 & 0x18) == 0)
      {
        v6 += v25;
        v26 = &v5[v25];
        goto LABEL_38;
      }
    }
    else
    {
      v25 = 0;
    }
    v31 = v8 & 0xFFFFFFFFFFFFFFF8;
    v26 = &v5[v8 & 0xFFFFFFFFFFFFFFF8];
    v32 = v25 - (v8 & 0xFFFFFFFFFFFFFFF8);
    v33 = (uint64_t *)&v6[v25];
    v34 = &v5[v25];
    do
    {
      v35 = *v33++;
      *(_QWORD *)v34 = v35;
      v34 += 8;
      v32 += 8;
    }
    while (v32);
    if (v8 == v31)
      goto LABEL_39;
    v6 += v31;
    do
    {
LABEL_38:
      v36 = *v6++;
      *v26++ = v36;
    }
    while (v6 != v7);
LABEL_39:
    v5 = (char *)*((_QWORD *)a1 + 2);
  }
  *((_QWORD *)a1 + 2) = &v5[v8];
  v37 = *(_QWORD *)(a3 + 64);
  v38 = (v37
       + ((*a1 - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  *((_QWORD *)a1 + 9) = v37;
  *((_QWORD *)a1 + 10) = v38;
  return a1;
}

uint64_t gdc::LayerDataKey::LayerDataKey(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = (char *)(a1 + 40);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 32;
  v5 = *(char **)(a2 + 8);
  v6 = *(char **)(a2 + 16);
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)(a1 + 8);
    v10 = *(char **)(a1 + 16);
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = v4 + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &v4[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    v4 = *(char **)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = &v4[v7];
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

void gdc::LayerDataKey::createDebugNode(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  int v5;
  std::string v6;
  _BYTE v7[32];
  std::string __p;
  int v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16[23];
  char v17;

  strcpy((char *)a1, "Layer Data Key");
  *(_WORD *)(a1 + 23) = 14;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  v17 = 9;
  strcpy(v16, "Data Type");
  v4 = *a2;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v12 = 0;
  v11 = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v16, (uint64_t)v10);
  v17 = 5;
  strcpy(v16, "Value");
  gdc::LayerDataKey::keysInt32Str(&v6, a2);
  memset(&__p, 0, sizeof(__p));
  v9 = 4;
  v5 = SHIBYTE(v6.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__assign_no_alias<true>(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)v16, (uint64_t)v7);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 < 0)
    goto LABEL_8;
}

void gdc::Registry::~Registry(gdc::Registry *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  _QWORD *v11;
  uint64_t v12;
  uint64_t m;
  _QWORD *v14;
  uint64_t v15;
  uint64_t n;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t ii;
  void *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  uint64_t v86;
  gdc::Registry *v87;

  if (!*((_QWORD *)this + 24))
    goto LABEL_7;
  v2 = (_QWORD *)*((_QWORD *)this + 23);
  if (v2)
  {
    do
    {
      v24 = (_QWORD *)*v2;
      v22 = (_QWORD *)v2[6];
      if (v22 == v2 + 3)
      {
        v22 = v2 + 3;
        v23 = 4;
      }
      else
      {
        if (!v22)
          goto LABEL_39;
        v23 = 5;
      }
      (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_39:
      operator delete(v2);
      v2 = v24;
    }
    while (v24);
  }
  *((_QWORD *)this + 23) = 0;
  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*((_QWORD *)this + 21) + 8 * i) = 0;
  }
  *((_QWORD *)this + 24) = 0;
LABEL_7:
  if (!*((_QWORD *)this + 30))
    goto LABEL_13;
  v5 = (_QWORD *)*((_QWORD *)this + 29);
  if (v5)
  {
    do
    {
      v27 = (_QWORD *)*v5;
      v25 = (_QWORD *)v5[6];
      if (v25 == v5 + 3)
      {
        v25 = v5 + 3;
        v26 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_45;
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_45:
      operator delete(v5);
      v5 = v27;
    }
    while (v27);
  }
  *((_QWORD *)this + 29) = 0;
  v6 = *((_QWORD *)this + 28);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
      *(_QWORD *)(*((_QWORD *)this + 27) + 8 * j) = 0;
  }
  *((_QWORD *)this + 30) = 0;
LABEL_13:
  if (!*((_QWORD *)this + 36))
    goto LABEL_19;
  v8 = (_QWORD *)*((_QWORD *)this + 35);
  if (v8)
  {
    do
    {
      v30 = (_QWORD *)*v8;
      v28 = (_QWORD *)v8[6];
      if (v28 == v8 + 3)
      {
        v28 = v8 + 3;
        v29 = 4;
      }
      else
      {
        if (!v28)
          goto LABEL_51;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
      operator delete(v8);
      v8 = v30;
    }
    while (v30);
  }
  *((_QWORD *)this + 35) = 0;
  v9 = *((_QWORD *)this + 34);
  if (v9)
  {
    for (k = 0; k != v9; ++k)
      *(_QWORD *)(*((_QWORD *)this + 33) + 8 * k) = 0;
  }
  *((_QWORD *)this + 36) = 0;
LABEL_19:
  if (!*((_QWORD *)this + 42))
    goto LABEL_25;
  v11 = (_QWORD *)*((_QWORD *)this + 41);
  if (v11)
  {
    do
    {
      v33 = (_QWORD *)*v11;
      v31 = (_QWORD *)v11[6];
      if (v31 == v11 + 3)
      {
        v31 = v11 + 3;
        v32 = 4;
      }
      else
      {
        if (!v31)
          goto LABEL_57;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_57:
      operator delete(v11);
      v11 = v33;
    }
    while (v33);
  }
  *((_QWORD *)this + 41) = 0;
  v12 = *((_QWORD *)this + 40);
  if (v12)
  {
    for (m = 0; m != v12; ++m)
      *(_QWORD *)(*((_QWORD *)this + 39) + 8 * m) = 0;
  }
  *((_QWORD *)this + 42) = 0;
LABEL_25:
  if (!*((_QWORD *)this + 48))
    goto LABEL_31;
  v14 = (_QWORD *)*((_QWORD *)this + 47);
  if (v14)
  {
    do
    {
      v36 = (_QWORD *)*v14;
      v34 = (_QWORD *)v14[6];
      if (v34 == v14 + 3)
      {
        v34 = v14 + 3;
        v35 = 4;
      }
      else
      {
        if (!v34)
          goto LABEL_63;
        v35 = 5;
      }
      (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_63:
      operator delete(v14);
      v14 = v36;
    }
    while (v36);
  }
  *((_QWORD *)this + 47) = 0;
  v15 = *((_QWORD *)this + 46);
  if (v15)
  {
    for (n = 0; n != v15; ++n)
      *(_QWORD *)(*((_QWORD *)this + 45) + 8 * n) = 0;
  }
  *((_QWORD *)this + 48) = 0;
LABEL_31:
  v17 = (_QWORD *)*((_QWORD *)this + 53);
  if (!v17)
  {
    v19 = (void **)((char *)this + 408);
    if (*((_QWORD *)this + 54))
    {
      v21 = (_QWORD *)((char *)this + 432);
      goto LABEL_75;
    }
    goto LABEL_82;
  }
  do
  {
    v87 = this;
    v18 = v17[6];
    if (!v18)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      gdc::Registry::destroy();
      return;
    }
    (*(void (**)(uint64_t, gdc::Registry **))(*(_QWORD *)v18 + 48))(v18, &v87);
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v19 = (void **)((char *)this + 408);
  v20 = (_QWORD *)*((_QWORD *)this + 53);
  if (!*((_QWORD *)this + 54))
    goto LABEL_81;
  v21 = (_QWORD *)((char *)this + 432);
  if (v20)
  {
    do
    {
      v39 = (_QWORD *)*v20;
      v37 = (_QWORD *)v20[6];
      if (v37 == v20 + 3)
      {
        v37 = v20 + 3;
        v38 = 4;
      }
      else
      {
        if (!v37)
          goto LABEL_69;
        v38 = 5;
      }
      (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_69:
      operator delete(v20);
      v20 = v39;
    }
    while (v39);
  }
LABEL_75:
  *((_QWORD *)this + 53) = 0;
  v40 = *((_QWORD *)this + 52);
  if (v40)
  {
    for (ii = 0; ii != v40; ++ii)
      *((_QWORD *)*v19 + ii) = 0;
    v20 = (_QWORD *)*((_QWORD *)this + 53);
  }
  else
  {
    v20 = 0;
  }
  *v21 = 0;
LABEL_81:
  if (v20)
  {
    do
    {
      v80 = (_QWORD *)*v20;
      v78 = (_QWORD *)v20[6];
      if (v78 == v20 + 3)
      {
        v78 = v20 + 3;
        v79 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_145;
        v79 = 5;
      }
      (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_145:
      operator delete(v20);
      v20 = v80;
    }
    while (v80);
  }
LABEL_82:
  v42 = *v19;
  *v19 = 0;
  if (v42)
    operator delete(v42);
  v43 = (_QWORD *)*((_QWORD *)this + 47);
  if (v43)
  {
    do
    {
      v65 = (_QWORD *)*v43;
      v63 = (_QWORD *)v43[6];
      if (v63 == v43 + 3)
      {
        v63 = v43 + 3;
        v64 = 4;
      }
      else
      {
        if (!v63)
          goto LABEL_115;
        v64 = 5;
      }
      (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_115:
      operator delete(v43);
      v43 = v65;
    }
    while (v65);
  }
  v44 = (void *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v44)
    operator delete(v44);
  v45 = (_QWORD *)*((_QWORD *)this + 41);
  if (v45)
  {
    do
    {
      v68 = (_QWORD *)*v45;
      v66 = (_QWORD *)v45[6];
      if (v66 == v45 + 3)
      {
        v66 = v45 + 3;
        v67 = 4;
      }
      else
      {
        if (!v66)
          goto LABEL_121;
        v67 = 5;
      }
      (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_121:
      operator delete(v45);
      v45 = v68;
    }
    while (v68);
  }
  v46 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v46)
    operator delete(v46);
  v47 = (_QWORD *)*((_QWORD *)this + 35);
  if (v47)
  {
    do
    {
      v71 = (_QWORD *)*v47;
      v69 = (_QWORD *)v47[6];
      if (v69 == v47 + 3)
      {
        v69 = v47 + 3;
        v70 = 4;
      }
      else
      {
        if (!v69)
          goto LABEL_127;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_127:
      operator delete(v47);
      v47 = v71;
    }
    while (v71);
  }
  v48 = (void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v48)
    operator delete(v48);
  v49 = (_QWORD *)*((_QWORD *)this + 29);
  if (v49)
  {
    do
    {
      v74 = (_QWORD *)*v49;
      v72 = (_QWORD *)v49[6];
      if (v72 == v49 + 3)
      {
        v72 = v49 + 3;
        v73 = 4;
      }
      else
      {
        if (!v72)
          goto LABEL_133;
        v73 = 5;
      }
      (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_133:
      operator delete(v49);
      v49 = v74;
    }
    while (v74);
  }
  v50 = (void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v50)
    operator delete(v50);
  v51 = (_QWORD *)*((_QWORD *)this + 23);
  if (v51)
  {
    do
    {
      v77 = (_QWORD *)*v51;
      v75 = (_QWORD *)v51[6];
      if (v75 == v51 + 3)
      {
        v75 = v51 + 3;
        v76 = 4;
      }
      else
      {
        if (!v75)
          goto LABEL_139;
        v76 = 5;
      }
      (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_139:
      operator delete(v51);
      v51 = v77;
    }
    while (v77);
  }
  v52 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v52)
    operator delete(v52);
  v53 = (_QWORD *)*((_QWORD *)this + 17);
  if (v53)
  {
    do
    {
      v58 = (_QWORD *)*v53;
      v59 = v53[3];
      v53[3] = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      operator delete(v53);
      v53 = v58;
    }
    while (v58);
  }
  v54 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v54)
    operator delete(v54);
  v55 = (_QWORD *)*((_QWORD *)this + 12);
  if (v55)
  {
    v56 = (_QWORD *)*((_QWORD *)this + 13);
    v57 = (void *)*((_QWORD *)this + 12);
    if (v56 != v55)
    {
      do
      {
        v61 = *--v56;
        v60 = v61;
        *v56 = 0;
        if (v61)
        {
          v62 = *(void **)v60;
          if (*(_QWORD *)v60)
          {
            *(_QWORD *)(v60 + 8) = v62;
            operator delete(v62);
          }
          MEMORY[0x1A1AF4E00](v60, 0x20C40960023A9);
        }
      }
      while (v56 != v55);
      v57 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v55;
    operator delete(v57);
  }
  v81 = (void *)*((_QWORD *)this + 9);
  if (v81)
  {
    *((_QWORD *)this + 10) = v81;
    operator delete(v81);
  }
  v82 = (void *)*((_QWORD *)this + 6);
  if (v82)
  {
    *((_QWORD *)this + 7) = v82;
    operator delete(v82);
  }
  v83 = (_QWORD *)*((_QWORD *)this + 2);
  if (v83)
  {
    do
    {
      v85 = (_QWORD *)*v83;
      v86 = v83[5];
      v83[5] = 0;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      operator delete(v83);
      v83 = v85;
    }
    while (v85);
  }
  v84 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v84)
    operator delete(v84);
}

uint64_t gdc::Registry::destroy(uint64_t result, unint64_t a2)
{
  int v3;
  int8x8_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int8x8_t v15;
  unsigned __int16 *v16;
  unint64_t *v17;
  unint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _DWORD *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int8x8_t *v50;
  _QWORD v51[2];

  v49 = a2;
  v3 = (unsigned __int16)a2;
  if (*(unsigned __int16 *)(result + 40) == (unsigned __int16)a2)
  {
    v4 = (int8x8_t *)result;
    v5 = HIDWORD(a2);
    v6 = *(_QWORD *)(result + 48);
    if (HIDWORD(a2) < (unint64_t)((*(_QWORD *)(result + 56) - v6) >> 3))
    {
      v7 = (unsigned __int16 *)(v6 + 8 * v5);
      if (*v7 == (unsigned __int16)a2)
      {
        v8 = WORD1(a2);
        if (v7[1] == WORD1(a2) && *((_DWORD *)v7 + 1) == HIDWORD(a2))
        {
          v9 = *(_QWORD *)(result + 96);
          v10 = 8 * v5;
          v11 = *(unint64_t ***)(v9 + 8 * v5);
          *(_QWORD *)(v9 + v10) = 0;
          v12 = *(_QWORD *)(result + 96);
          v13 = *(_QWORD *)(v12 + 8 * v5);
          *(_QWORD *)(v12 + v10) = 0;
          if (!v13)
            goto LABEL_73;
          v14 = *(void **)v13;
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)(v13 + 8) = v14;
            operator delete(v14);
          }
          MEMORY[0x1A1AF4E00](v13, 0x20C40960023A9);
          if (v4[5].u16[0] == v3)
          {
LABEL_73:
            v15 = v4[6];
            if (v5 < (uint64_t)(*(_QWORD *)&v4[7] - *(_QWORD *)&v15) >> 3)
            {
              v16 = (unsigned __int16 *)(*(_QWORD *)&v15 + 8 * v5);
              if (*v16 == v3 && v16[1] == v8 && *((_DWORD *)v16 + 1) == (_DWORD)v5)
              {
                v17 = *v11;
                v18 = v11[1];
                if (*v11 != v18)
                {
                  v19 = v4[16];
                  if (v19)
                  {
LABEL_16:
                    v20 = *v17;
                    v21 = (uint8x8_t)vcnt_s8(v19);
                    v21.i16[0] = vaddlv_u8(v21);
                    if (v21.u32[0] > 1uLL)
                    {
                      v22 = *v17;
                      if (v20 >= *(_QWORD *)&v19)
                        v22 = v20 % *(_QWORD *)&v19;
                    }
                    else
                    {
                      v22 = (*(_QWORD *)&v19 - 1) & v20;
                    }
                    v23 = *(uint64_t ****)(*(_QWORD *)&v4[15] + 8 * v22);
                    if (v23)
                    {
                      v24 = *v23;
                      if (v24)
                      {
                        if (v21.u32[0] < 2uLL)
                        {
                          v25 = *(_QWORD *)&v19 - 1;
                          while (1)
                          {
                            v27 = v24[1];
                            if (v27 == (uint64_t *)v20)
                            {
                              if (v24[2] == (uint64_t *)v20)
                                goto LABEL_36;
                            }
                            else if (((unint64_t)v27 & v25) != v22)
                            {
                              goto LABEL_37;
                            }
                            v24 = (uint64_t **)*v24;
                            if (!v24)
                              goto LABEL_37;
                          }
                        }
                        do
                        {
                          v26 = (unint64_t)v24[1];
                          if (v26 == v20)
                          {
                            if (v24[2] == (uint64_t *)v20)
                            {
LABEL_36:
                              (*(void (**)(uint64_t *, unint64_t))(*v24[3] + 16))(v24[3], a2);
                              break;
                            }
                          }
                          else
                          {
                            if (v26 >= *(_QWORD *)&v19)
                              v26 %= *(_QWORD *)&v19;
                            if (v26 != v22)
                              break;
                          }
                          v24 = (uint64_t **)*v24;
                        }
                        while (v24);
                      }
                    }
LABEL_37:
                    while (1)
                    {
                      v17 += 3;
                      if (v17 == v18)
                        break;
                      v19 = v4[16];
                      if (v19)
                        goto LABEL_16;
                    }
                  }
                }
              }
            }
          }
          v29 = (char *)v4[10];
          v28 = (unint64_t)v4[11];
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)v4[9];
            v32 = (v29 - v31) >> 2;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              goto LABEL_69;
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 1 > v33)
              v33 = v34 >> 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              if (v35 >> 62)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v36 = operator new(4 * v35);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[4 * v32];
            v38 = &v36[4 * v35];
            *v37 = v5;
            v30 = v37 + 1;
            if (v29 != v31)
            {
              v39 = v29 - v31 - 4;
              if (v39 < 0x2C)
                goto LABEL_74;
              if ((unint64_t)(v31 - v36) < 0x20)
                goto LABEL_74;
              v40 = (v39 >> 2) + 1;
              v41 = &v36[4 * v32 - 16];
              v42 = v29 - 16;
              v43 = v40 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v44 = *(_OWORD *)v42;
                *(v41 - 1) = *((_OWORD *)v42 - 1);
                *v41 = v44;
                v41 -= 2;
                v42 -= 32;
                v43 -= 8;
              }
              while (v43);
              v37 -= v40 & 0x7FFFFFFFFFFFFFF8;
              v29 -= 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
              if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_74:
                do
                {
                  v45 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *--v37 = v45;
                }
                while (v29 != v31);
              }
            }
            v4[9] = (int8x8_t)v37;
            v4[10] = (int8x8_t)v30;
            v4[11] = (int8x8_t)v38;
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_DWORD *)v29 = v5;
            v30 = v29 + 4;
          }
          v4[10] = (int8x8_t)v30;
          *(_QWORD *)(*(_QWORD *)&v4[6] + 8 * v5) = v49 | 0xFFFFFFFF00000000;
          v46 = (_QWORD *)v4[35];
          if (v46)
          {
            while (1)
            {
              v51[0] = &v49;
              v51[1] = 1;
              v50 = v4;
              v47 = v46[6];
              if (!v47)
                break;
              (*(void (**)(uint64_t, int8x8_t **, _QWORD *))(*(_QWORD *)v47 + 48))(v47, &v50, v51);
              v46 = (_QWORD *)*v46;
              if (!v46)
                goto LABEL_64;
            }
            std::__throw_bad_function_call[abi:nn180100]();
LABEL_69:
            abort();
          }
LABEL_64:
          v48 = *v11;
          if (*v11)
          {
            v11[1] = v48;
            operator delete(v48);
          }
          return MEMORY[0x1A1AF4E00](v11, 0x20C40960023A9);
        }
      }
    }
  }
  return result;
}

std::string *gdc::Registry::stringForComponentTypeId(std::string *this, int8x8_t *a2, unint64_t a3)
{
  std::string::__raw *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  std::string::__raw *v17;

  v3 = (std::string::__raw *)this;
  v4 = a2[16];
  if (!*(_QWORD *)&v4)
    return std::to_string(this, a3);
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a3;
    if (*(_QWORD *)&v4 <= a3)
      v6 = a3 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & a3;
  }
  v7 = *(_QWORD **)(*(_QWORD *)&a2[15] + 8 * v6);
  if (!v7)
    return std::to_string(this, a3);
  v8 = (_QWORD *)*v7;
  if (!v8)
    return std::to_string(this, a3);
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == a3)
      {
        if (v8[2] == a3)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        return std::to_string(this, a3);
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return std::to_string(this, a3);
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == a3)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      return std::to_string(this, a3);
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return std::to_string(this, a3);
  }
  if (v8[2] != a3)
    goto LABEL_11;
LABEL_22:
  v12 = v8[3];
  v13 = *(_QWORD *)(v12 + 24);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = *(const void **)(v12 + 16);
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v17 = (std::string::__raw *)operator new(v15 + 1);
    v3->__words[1] = v13;
    v3->__words[2] = v16 | 0x8000000000000000;
    v3->__words[0] = (std::string::size_type)v17;
    v3 = v17;
    goto LABEL_29;
  }
  *((_BYTE *)&this->__r_.__value_.__s + 23) = v13;
  if (v13)
LABEL_29:
    this = (std::string *)memmove(v3, v14, v13);
  *((_BYTE *)v3->__words + v13) = 0;
  return this;
}

void gdc::Timer::~Timer(gdc::Timer *this)
{
  std::mutex *v2;
  NSObject *v3;

  *(_QWORD *)this = &off_1E42B46F8;
  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((_QWORD *)this + 10) = 0;
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
}

{
  std::mutex *v2;
  NSObject *v3;

  *(_QWORD *)this = &off_1E42B46F8;
  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((_QWORD *)this + 10) = 0;
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::Timer::start(gdc::Timer *this, double a2, double a3)
{
  std::mutex *v6;
  NSObject *v7;
  dispatch_time_t v8;

  v6 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((_QWORD *)this + 10))
  {
    *((_BYTE *)this + 96) = 1;
    *((double *)this + 1) = a3;
    *((CFAbsoluteTime *)this + 11) = CFAbsoluteTimeGetCurrent() + a2;
    v7 = *((_QWORD *)this + 10);
    v8 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
    dispatch_source_set_timer(v7, v8, (unint64_t)(a3 * 1000000000.0), 0xF4240uLL);
  }
  std::mutex::unlock(v6);
}

void gdc::Timer::shutdown(gdc::Timer *this)
{
  std::mutex *v2;
  NSObject *v3;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*((dispatch_object_t *)this + 10));
    *((_QWORD *)this + 10) = 0;
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 1) = 0xBFF0000000000000;
  }
  std::mutex::unlock(v2);
}

_QWORD *__destroy_helper_block_8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void gdc::Statistics::~Statistics(gdc::Statistics *this)
{
  gdc::Statistics::~Statistics(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  *(_QWORD *)this = &off_1E42B06B8;
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v2[4] = &off_1E42B4748;
      v4 = v2[13];
      v2[13] = 0;
      if (v4)
        MEMORY[0x1A1AF4E00](v4, 0x1000C4000313F17);
      if (*((_BYTE *)v2 + 88))
        *((_BYTE *)v2 + 88) = 0;
      v5 = (_QWORD *)v2[8];
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      v7 = (void *)v2[6];
      v2[6] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v8 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)*((_QWORD *)this + 11);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
    operator delete(v11);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void gdc::Statistics::reset(gdc::Statistics *this)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t j;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (*((_QWORD *)this + 12))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 11);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    *((_QWORD *)this + 11) = 0;
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * i) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  if (*((_QWORD *)this + 17))
  {
    v7 = (_QWORD *)*((_QWORD *)this + 16);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        v7[4] = &off_1E42B4748;
        v9 = v7[13];
        v7[13] = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v9, 0x1000C4000313F17);
        if (*((_BYTE *)v7 + 88))
          *((_BYTE *)v7 + 88) = 0;
        v10 = (_QWORD *)v7[8];
        if (v10)
        {
          do
          {
            v11 = (_QWORD *)*v10;
            operator delete(v10);
            v10 = v11;
          }
          while (v11);
        }
        v12 = (void *)v7[6];
        v7[6] = 0;
        if (v12)
          operator delete(v12);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 16) = 0;
    v13 = *((_QWORD *)this + 15);
    if (v13)
    {
      for (j = 0; j != v13; ++j)
        *(_QWORD *)(*((_QWORD *)this + 14) + 8 * j) = 0;
    }
    *((_QWORD *)this + 17) = 0;
  }
  std::mutex::unlock(v2);
}

void gdc::Statistics::getAllSamplers(gdc::Statistics *this, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  std::mutex *v22;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 96);
  v22 = v4;
  if (!v5)
  {
    v7 = 0;
    v8 = *(uint64_t **)(a2 + 88);
    if (!v8)
      goto LABEL_24;
LABEL_6:
    v9 = v7;
    while (1)
    {
      v11 = v8[2];
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)v9 < v12)
      {
        *(_QWORD *)v9 = v11;
        *(_OWORD *)(v9 + 8) = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v9 + 24) = *((_OWORD *)v8 + 3);
        *((_QWORD *)v9 + 5) = v8[8];
        v10 = v9 + 48;
      }
      else
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 4) + 1;
        if (v13 > 0x555555555555555)
          goto LABEL_25;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v7) >> 4);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x2AAAAAAAAAAAAAALL)
          v15 = 0x555555555555555;
        else
          v15 = v13;
        if (v15 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = 48 * v15;
        v17 = (char *)operator new(48 * v15);
        v18 = &v17[16 * ((v9 - v7) >> 4)];
        *(_QWORD *)v18 = v11;
        *(_OWORD *)(v18 + 8) = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v18 + 24) = *((_OWORD *)v8 + 3);
        *((_QWORD *)v18 + 5) = v8[8];
        v19 = *(char **)this;
        if (v9 == *(char **)this)
        {
          v7 = &v17[16 * ((v9 - v7) >> 4)];
        }
        else
        {
          v20 = 0;
          do
          {
            v21 = &v18[v20];
            *((_QWORD *)v21 - 6) = *(_QWORD *)&v9[v20 - 48];
            *(_OWORD *)(v21 - 40) = *(_OWORD *)&v9[v20 - 40];
            *(_OWORD *)(v21 - 24) = *(_OWORD *)&v9[v20 - 24];
            *((_QWORD *)v21 - 1) = *(_QWORD *)&v9[v20 - 8];
            v20 -= 48;
          }
          while (&v9[v20] != v19);
          v7 = &v18[v20];
          v9 = *(char **)this;
        }
        v10 = v18 + 48;
        *(_QWORD *)this = v7;
        *((_QWORD *)this + 1) = v18 + 48;
        *((_QWORD *)this + 2) = &v17[v16];
        if (v9)
          operator delete(v9);
      }
      *((_QWORD *)this + 1) = v10;
      v8 = (uint64_t *)*v8;
      v9 = v10;
      if (!v8)
        goto LABEL_24;
    }
  }
  if (v5 > 0x555555555555555)
LABEL_25:
    abort();
  v6 = 48 * v5;
  v7 = (char *)operator new(48 * v5);
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = &v7[v6];
  v8 = *(uint64_t **)(a2 + 88);
  if (v8)
    goto LABEL_6;
LABEL_24:
  std::mutex::unlock(v22);
}

void gdc::Statistics::dumpSamplerValues(uint64_t a1, uint64_t *a2)
{
  float v4;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  void *p_p;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void *__p;
  size_t v50;
  unint64_t v51;
  void **__dst;
  size_t v53;
  int64_t v54;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v4 = (float)(unint64_t)(0x5555555555555557 * ((a2[1] - *a2) >> 4));
  prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v4);
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *a2;
  v48 = a2[1];
  if (*a2 != v48)
  {
    while (1)
    {
      v12 = *(const char **)v11;
      v13 = strlen(*(const char **)v11);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_98:
        abort();
      v14 = v13;
      if (v13 >= 0x17)
        break;
      HIBYTE(v54) = v13;
      p_dst = (void **)&__dst;
      if (v13)
        goto LABEL_28;
LABEL_29:
      *((_BYTE *)p_dst + v14) = 0;
      v18 = SHIBYTE(v54);
      if (v54 >= 0)
        v19 = HIBYTE(v54);
      else
        v19 = v53;
      v20 = v19 + 5;
      if (v19 + 5 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_98;
      v21 = *(_QWORD *)(v11 + 8);
      if (v20 >= 0x17)
      {
        v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v24 = v20 | 7;
        v25 = v24 + 1;
        p_p = operator new(v24 + 1);
        v50 = v19 + 5;
        v51 = v25 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v50 = 0;
        v51 = 0;
        __p = 0;
        p_p = &__p;
        HIBYTE(v51) = v19 + 5;
        if (!v19)
        {
          v23 = 1;
          goto LABEL_43;
        }
      }
      if (v18 >= 0)
        v26 = (void **)&__dst;
      else
        v26 = __dst;
      memmove(p_p, v26, v19);
      v23 = 0;
LABEL_43:
      strcpy((char *)p_p + v19, "->min");
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v21;
      if (SHIBYTE(v51) < 0)
        operator delete(__p);
      v27 = *(_QWORD *)(v11 + 16);
      if (v20 <= 0x16)
      {
        v50 = 0;
        v51 = 0;
        __p = 0;
        v28 = &__p;
        HIBYTE(v51) = v19 + 5;
        if ((v23 & 1) != 0)
          goto LABEL_55;
LABEL_51:
        if (v18 >= 0)
          v31 = (void **)&__dst;
        else
          v31 = __dst;
        memmove(v28, v31, v19);
        goto LABEL_55;
      }
      v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v29 = v20 | 7;
      v30 = v29 + 1;
      v28 = operator new(v29 + 1);
      v50 = v19 + 5;
      v51 = v30 | 0x8000000000000000;
      __p = v28;
      if ((v23 & 1) == 0)
        goto LABEL_51;
LABEL_55:
      strcpy((char *)v28 + v19, "->max");
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v27;
      if (SHIBYTE(v51) < 0)
        operator delete(__p);
      v32 = *(_QWORD *)(v11 + 24);
      if (v20 <= 0x16)
      {
        v50 = 0;
        v51 = 0;
        __p = 0;
        v33 = &__p;
        HIBYTE(v51) = v19 + 5;
        if ((v23 & 1) != 0)
          goto LABEL_67;
LABEL_63:
        if (v18 >= 0)
          v36 = (void **)&__dst;
        else
          v36 = __dst;
        memmove(v33, v36, v19);
        goto LABEL_67;
      }
      v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v34 = v20 | 7;
      v35 = v34 + 1;
      v33 = operator new(v34 + 1);
      v50 = v19 + 5;
      v51 = v35 | 0x8000000000000000;
      __p = v33;
      if ((v23 & 1) == 0)
        goto LABEL_63;
LABEL_67:
      strcpy((char *)v33 + v19, "->avg");
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v32;
      if (SHIBYTE(v51) < 0)
        operator delete(__p);
      v37 = *(_QWORD *)(v11 + 32);
      if (v20 <= 0x16)
      {
        v50 = 0;
        v51 = 0;
        __p = 0;
        v38 = &__p;
        HIBYTE(v51) = v19 + 5;
        if ((v23 & 1) != 0)
          goto LABEL_79;
LABEL_75:
        if (v18 >= 0)
          v41 = (void **)&__dst;
        else
          v41 = __dst;
        memmove(v38, v41, v19);
        goto LABEL_79;
      }
      v39 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v39 = v20 | 7;
      v40 = v39 + 1;
      v38 = operator new(v39 + 1);
      v50 = v19 + 5;
      v51 = v40 | 0x8000000000000000;
      __p = v38;
      if ((v23 & 1) == 0)
        goto LABEL_75;
LABEL_79:
      strcpy((char *)v38 + v19, "->sum");
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = v37;
      if (SHIBYTE(v51) < 0)
        operator delete(__p);
      v42 = v19 + 7;
      if (v19 + 7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_98;
      v43 = *(_QWORD *)(v11 + 40);
      if (v42 <= 0x16)
      {
        v50 = 0;
        v51 = 0;
        __p = 0;
        v44 = &__p;
        HIBYTE(v51) = v19 + 7;
        if ((v23 & 1) != 0)
          goto LABEL_92;
LABEL_88:
        if (v18 >= 0)
          v47 = (void **)&__dst;
        else
          v47 = __dst;
        memmove(v44, v47, v19);
        goto LABEL_92;
      }
      v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v45 = v42 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      v50 = v19 + 7;
      v51 = v46 | 0x8000000000000000;
      __p = v44;
      if ((v23 & 1) == 0)
        goto LABEL_88;
LABEL_92:
      strcpy((char *)v44 + v19, "->count");
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&__p, (uint64_t)&__p)+ 5) = (double)v43;
      if (SHIBYTE(v51) < 0)
      {
        operator delete(__p);
        if (v18 < 0)
LABEL_96:
          operator delete(__dst);
      }
      else if (v18 < 0)
      {
        goto LABEL_96;
      }
      v11 += 48;
      if (v11 == v48)
        return;
    }
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v53 = v14;
    v54 = v17 | 0x8000000000000000;
    __dst = p_dst;
LABEL_28:
    memmove(p_dst, v12, v14);
    goto LABEL_29;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v14 + 1);
            if (v19 == v10)
            {
              v20 = v14[39];
              if ((v20 & 0x80u) == 0)
                v21 = v14[39];
              else
                v21 = *((_QWORD *)v14 + 3);
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v22 = 0;
                  while (v14[v22 + 16] == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            v16 = v14[39];
            if ((v16 & 0x80u) == 0)
              v17 = v14[39];
            else
              v17 = *((_QWORD *)v14 + 3);
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v18 = 0;
                while (v14[v18 + 16] == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v23 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)v14 + 4) = v23;
  *((_QWORD *)v14 + 5) = 0;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_71;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_71:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v34 = *(_QWORD *)a1;
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v35)
  {
    *(_QWORD *)v14 = *v35;
LABEL_85:
    *v35 = v14;
    goto LABEL_86;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v34 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v36 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_85;
  }
LABEL_86:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void gdc::Statistics::getAllHistograms(gdc::Statistics *this, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  std::mutex *v20;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 136);
  v20 = v4;
  if (!v5)
  {
    v8 = 0;
    v7 = 0;
    v9 = *(_QWORD **)(a2 + 128);
    if (!v9)
      goto LABEL_24;
LABEL_6:
    v10 = v7;
    while (1)
    {
      v11 = v9[2];
      v12 = v9 + 4;
      if (v7 < v8)
      {
        *(_QWORD *)v7 = v11;
        *((_QWORD *)v7 + 1) = v12;
        v7 += 16;
      }
      else
      {
        v13 = (v7 - v10) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          goto LABEL_25;
        if ((v8 - v10) >> 3 > v14)
          v14 = (v8 - v10) >> 3;
        if ((unint64_t)(v8 - v10) >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        if (v14 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = 16 * v14;
        v16 = (char *)operator new(16 * v14);
        v17 = &v16[16 * v13];
        *(_QWORD *)v17 = v11;
        *((_QWORD *)v17 + 1) = v12;
        if (v7 == v10)
        {
          v19 = &v16[16 * v13];
        }
        else
        {
          v18 = &v16[16 * v13];
          do
          {
            v19 = v18 - 16;
            *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
            v7 -= 16;
            v18 -= 16;
          }
          while (v7 != v10);
        }
        v8 = &v16[v15];
        v7 = v17 + 16;
        *(_QWORD *)this = v19;
        *((_QWORD *)this + 1) = v17 + 16;
        *((_QWORD *)this + 2) = v8;
        if (v10)
          operator delete(v10);
        v10 = v19;
      }
      *((_QWORD *)this + 1) = v7;
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  if (v5 >> 60)
LABEL_25:
    abort();
  v6 = 16 * v5;
  v7 = (char *)operator new(16 * v5);
  v8 = &v7[v6];
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v7;
  *((_QWORD *)this + 2) = v8;
  v9 = *(_QWORD **)(a2 + 128);
  if (v9)
    goto LABEL_6;
LABEL_24:
  std::mutex::unlock(v20);
}

void gdc::Tiled::mapDataKeyFromTile(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, __int16 a4, int a5)
{
  uint64_t v7;
  int v8;
  int v9;
  void **v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v7 = *(_QWORD *)(a3 + 4);
  v17 = v7;
  v8 = a3[1];
  v9 = *a3;
  *a1 = a2;
  *((_WORD *)a1 + 4) = a4;
  *((_QWORD *)a1 + 2) = a1 + 48;
  v10 = (void **)(a1 + 16);
  *((_QWORD *)a1 + 3) = a1 + 48;
  *((_QWORD *)a1 + 4) = a1 + 48;
  *((_QWORD *)a1 + 5) = 32;
  *((_QWORD *)a1 + 10) = 0;
  v18 = HIDWORD(v7);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)a1 + 2, *((char **)a1 + 3), (char *)&v18, (char *)&v19);
  v18 = v17;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(v10, *((char **)a1 + 3), (char *)&v18, (char *)&v19);
  v18 = v8;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(v10, *((char **)a1 + 3), (char *)&v18, (char *)&v19);
  v18 = v9;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(v10, *((char **)a1 + 3), (char *)&v18, (char *)&v19);
  v11 = (_BYTE *)*((_QWORD *)a1 + 3);
  v12 = (unsigned __int8 *)*v10;
  v13 = v11 - (_BYTE *)*v10;
  if (v11 == *v10)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    if (v13 <= 1)
      v13 = 1;
    do
    {
      v15 = *v12++;
      v14 ^= (v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + v15;
      --v13;
    }
    while (v13);
  }
  v16 = (v14
       - 0x61C8864680B583EBLL
       + ((*((unsigned __int16 *)a1 + 4) - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*((unsigned __int16 *)a1 + 4) - 0x61C8864680B583EBLL) >> 2)) ^ (*((unsigned __int16 *)a1 + 4)
                                                                                           - 0x61C8864680B583EBLL);
  *((_QWORD *)a1 + 10) = v14;
  *((_QWORD *)a1 + 11) = v16;
  a1[96] = 1;
  *((_DWORD *)a1 + 25) = a5;
  *((_QWORD *)a1 + 13) = (v16
                        - 0x61C8864680B583EBLL
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)) ^ (*a1 - 0x61C8864680B583EBLL);
}

uint64_t gdc::Tiled::stringFromLayerDataKey(gdc::Tiled *this, const gdc::LayerDataRequestKey *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  gdc::Tiled *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21 = v6;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v21 + *(_QWORD *)(v21 - 24));
  std::ios_base::init(v8, &v22);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v21 = v3 + 24;
  v29[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v22 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Tile ", 5);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" t:", 3);
  std::ostream::operator<<();
  if ((v28 & 0x10) != 0)
  {
    v14 = *((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1) < v25)
    {
      *((_QWORD *)&v27 + 1) = v25;
      v14 = v25;
    }
    v15 = (const void **)&v24;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      v13 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_16;
    }
    v15 = (const void **)v23;
    v14 = v23[2];
  }
  v16 = *v15;
  v13 = v14 - (_QWORD)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v19 = (gdc::Tiled *)operator new(v17 + 1);
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)this = v19;
    this = v19;
    goto LABEL_15;
  }
  *((_BYTE *)this + 23) = v13;
  if (v13)
LABEL_15:
    memmove(this, v16, v13);
LABEL_16:
  *((_BYTE *)this + v13) = 0;
  v21 = *v5;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = v5[3];
  v22 = v9 + 16;
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v29);
}

void ecs2::Runtime::queueCommand(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v5 = (char *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)a1[3];
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v8) >> 3) + 1;
    if (v9 > 0x666666666666666)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * ((v5 - v8) >> 3)];
    *v13 = 0;
    *((_DWORD *)v13 + 8) = -1;
    v14 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E42FB2E0[v14])(&v23, &v12[8 * ((v5 - v8) >> 3)], a2);
      *((_DWORD *)v13 + 8) = v14;
      v8 = (char *)a1[3];
      v5 = (char *)a1[4];
    }
    v7 = v13 + 40;
    if (v5 == v8)
    {
      a1[3] = v13;
      a1[4] = v7;
      a1[5] = &v12[40 * v11];
    }
    else
    {
      v21 = &v12[40 * v11];
      v15 = 0;
      do
      {
        v13[v15 - 40] = 0;
        *(_DWORD *)&v13[v15 - 8] = -1;
        v16 = *(unsigned int *)&v5[v15 - 8];
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(char *, char *, char *))off_1E42FB300[v16])(&v24, &v13[v15 - 40], &v5[v15 - 40]);
          *(_DWORD *)&v13[v15 - 8] = v16;
        }
        v15 -= 40;
      }
      while (&v5[v15] != v8);
      v17 = &v13[v15];
      v8 = (char *)a1[3];
      v18 = (char *)a1[4];
      a1[3] = v17;
      a1[4] = v7;
      a1[5] = v21;
      if (v18 != v8)
      {
        do
        {
          v19 = v18 - 40;
          v20 = *((unsigned int *)v18 - 2);
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, char *))off_1E42FB340[v20])(&v25, v18 - 40);
          *((_DWORD *)v18 - 2) = -1;
          v18 -= 40;
        }
        while (v19 != v8);
      }
    }
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = 0;
    *((_DWORD *)v5 + 8) = -1;
    v6 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1E42FB2E0[v6])(&v22, v5, a2);
      *((_DWORD *)v5 + 8) = v6;
    }
    v7 = v5 + 40;
  }
  a1[4] = v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(_QWORD *)(a2 + 24) = a2;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a2);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a2 + 24) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *(_QWORD *)(**(_QWORD **)a1 + 8));
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *(_QWORD *)(**(_QWORD **)a1 + 8));
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, unint64_t *a2)
{
  return gdc::Registry::destroy(*(_QWORD *)(**(_QWORD **)a1 + 8), *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, *(_QWORD *)(**(_QWORD **)a1 + 8));
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<ecs2::TaskDisabled>(v5);
}

uint64_t gdc::Registry::storage<ecs2::TaskDisabled>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7A28FF81262113F5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7A28FF81262113F5;
      if (*(_QWORD *)&v3 <= 0x7A28FF81262113F5uLL)
        v5 = 0x7A28FF81262113F5uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7A28FF81262113F5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7A28FF81262113F5)
            {
              if (v7[2] == 0x7A28FF81262113F5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7A28FF81262113F5)
          {
            if (v7[2] == 0x7A28FF81262113F5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::TaskDisabled]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42745C8;
  *(_QWORD *)(v11 + 8) = 0x7A28FF81262113F5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7A28FF81262113F5uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7A28FF81262113F5;
  v15[1] = "ecs2::TaskDisabled]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7A28FF81262113F5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<ecs2::TaskDisabled>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<ecs2::FunctionHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x754C5349192ADF5ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x754C5349192ADF5ELL;
      if (*(_QWORD *)&v3 <= 0x754C5349192ADF5EuLL)
        v5 = 0x754C5349192ADF5EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x754C5349192ADF5ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x754C5349192ADF5ELL)
            {
              if (v7[2] == 0x754C5349192ADF5ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x754C5349192ADF5ELL)
          {
            if (v7[2] == 0x754C5349192ADF5ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::FunctionHandle]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42745F8;
  *(_QWORD *)(v11 + 8) = 0x754C5349192ADF5ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x754C5349192ADF5EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x754C5349192ADF5ELL;
  v15[1] = "ecs2::FunctionHandle]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0x754C5349192ADF5ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

uint64_t gdc::Registry::storage<ecs2::DebugTasks>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6BD0065F8F6CBF27;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6BD0065F8F6CBF27;
      if (*(_QWORD *)&v3 <= 0x6BD0065F8F6CBF27uLL)
        v5 = 0x6BD0065F8F6CBF27uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6BD0065F8F6CBF27;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6BD0065F8F6CBF27)
            {
              if (v7[2] == 0x6BD0065F8F6CBF27)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6BD0065F8F6CBF27)
          {
            if (v7[2] == 0x6BD0065F8F6CBF27)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::DebugTasks]";
  *(_QWORD *)(v11 + 24) = 16;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274538;
  *(_QWORD *)(v11 + 8) = 0x6BD0065F8F6CBF27;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6BD0065F8F6CBF27uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6BD0065F8F6CBF27;
  v15[1] = "ecs2::DebugTasks]";
  v15[2] = 16;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6BD0065F8F6CBF27, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<ecs2::DebugTasks>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 + 48 * v7 != v15 - 48)
  {
    std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>((void **)(v14 + 48 * v7), *(void ***)(v15 - 48), *(void ***)(v15 - 40), (uint64_t)(*(_QWORD *)(v15 - 40) - *(_QWORD *)(v15 - 48)) >> 5);
    std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>((void **)(v14 + 48 * v7 + 24), *(void ***)(v15 - 24), *(void ***)(v15 - 16), (uint64_t)(*(_QWORD *)(v15 - 16) - *(_QWORD *)(v15 - 24)) >> 5);
    v15 = a1[11];
  }
  std::vector<ecs2::DebugTasks>::__base_destruct_at_end[abi:nn180100]((uint64_t)(a1 + 10), (void **)(v15 - 48));
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::DebugTasks>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<ecs2::DebugTasks>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void **std::vector<std::function<void ()(ecs2::ExecutionDebugTaskContext)>>::__assign_with_size[abi:nn180100]<std::function<void ()(ecs2::ExecutionDebugTaskContext)>*,std::function<void ()(ecs2::ExecutionDebugTaskContext)>*>(void **result, void **a2, void **a3, size_t __sz)
{
  void **v6;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[3];
  void **v31;
  uint64_t v32;

  v6 = a2;
  v7 = result;
  v32 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - (uint64_t)*result) >> 5)
  {
    if (!v9)
      goto LABEL_40;
    v10 = (char *)result[1];
    v11 = *result;
    if (v10 == v9)
    {
LABEL_39:
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
LABEL_40:
      if (__sz >> 59)
        goto LABEL_74;
      v23 = v8 >> 4;
      if (v8 >> 4 <= __sz)
        v23 = __sz;
      v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v25 = 0x7FFFFFFFFFFFFFFLL;
      if (!v24)
        v25 = v23;
      if (v25 >> 59)
LABEL_74:
        abort();
      v26 = 4 * v25;
      result = (void **)operator new(32 * v25);
      v9 = (char *)result;
      *v7 = result;
      v7[1] = result;
      v7[2] = &result[v26];
      while (v6 != a3)
      {
        result = (void **)v6[3];
        if (result)
        {
          if (v6 == result)
          {
            *((_QWORD *)v9 + 3) = v9;
            result = (void **)(*((uint64_t (**)(void **, char *))*v6 + 3))(v6, v9);
          }
          else
          {
            result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
            *((_QWORD *)v9 + 3) = result;
          }
        }
        else
        {
          *((_QWORD *)v9 + 3) = 0;
        }
        v6 += 4;
        v9 += 32;
      }
      goto LABEL_66;
    }
    while (1)
    {
      v14 = v10 - 32;
      v12 = (char *)*((_QWORD *)v10 - 1);
      if (v10 - 32 == v12)
      {
        v12 = v10 - 32;
        v13 = 4;
      }
      else
      {
        if (!v12)
          goto LABEL_7;
        v13 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_7:
      v10 = v14;
      if (v14 == v9)
      {
        v11 = *v7;
        goto LABEL_39;
      }
    }
  }
  v15 = (char *)result[1];
  v16 = (v15 - v9) >> 5;
  if (v16 >= __sz)
  {
    if (a2 == a3)
      goto LABEL_65;
    while (1)
    {
      v22 = (void **)v6[3];
      if (v22)
      {
        if (v6 == v22)
        {
          v31 = (void **)v30;
          (*((void (**)(void **, _QWORD *))*v6 + 3))(v6, v30);
        }
        else
        {
          v31 = (void **)(*((uint64_t (**)(void **))*v22 + 2))(v22);
        }
      }
      else
      {
        v31 = 0;
      }
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v30, v9);
      result = v31;
      if (v31 == v30)
      {
        result = (void **)v30;
        v21 = 4;
      }
      else
      {
        if (!v31)
          goto LABEL_29;
        v21 = 5;
      }
      result = (void **)(*((uint64_t (**)(void))*result + v21))();
LABEL_29:
      v6 += 4;
      v9 += 32;
      if (v6 == a3)
      {
        v15 = (char *)v7[1];
LABEL_65:
        if (v15 == v9)
        {
LABEL_66:
          v7[1] = v9;
          return result;
        }
        while (2)
        {
          v29 = v15 - 32;
          result = (void **)*((_QWORD *)v15 - 1);
          if (v15 - 32 != (char *)result)
          {
            if (result)
            {
              v28 = 5;
LABEL_69:
              result = (void **)(*((uint64_t (**)(void))*result + v28))();
            }
            v15 = v29;
            if (v29 == v9)
              goto LABEL_66;
            continue;
          }
          break;
        }
        result = (void **)(v15 - 32);
        v28 = 4;
        goto LABEL_69;
      }
    }
  }
  v17 = &a2[4 * v16];
  if (v15 == v9)
    goto LABEL_55;
  v18 = 32 * v16;
  do
  {
    v20 = (void **)v6[3];
    if (v20)
    {
      if (v6 == v20)
      {
        v31 = (void **)v30;
        (*((void (**)(void **, _QWORD *))*v6 + 3))(v6, v30);
      }
      else
      {
        v31 = (void **)(*((uint64_t (**)(void **))*v20 + 2))(v20);
      }
    }
    else
    {
      v31 = 0;
    }
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v30, v9);
    result = v31;
    if (v31 == v30)
    {
      result = (void **)v30;
      v19 = 4;
LABEL_15:
      result = (void **)(*((uint64_t (**)(void))*result + v19))();
      goto LABEL_16;
    }
    if (v31)
    {
      v19 = 5;
      goto LABEL_15;
    }
LABEL_16:
    v6 += 4;
    v9 += 32;
    v18 -= 32;
  }
  while (v18);
  v9 = (char *)v7[1];
LABEL_55:
  v27 = v9;
  if (v17 != a3)
  {
    v27 = v9;
    do
    {
      result = (void **)v17[3];
      if (result)
      {
        if (v17 == result)
        {
          *((_QWORD *)v27 + 3) = v27;
          result = (void **)(*(uint64_t (**)(void *, char *))(*(_QWORD *)v17[3] + 24))(v17[3], v27);
        }
        else
        {
          result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
          *((_QWORD *)v27 + 3) = result;
        }
      }
      else
      {
        *((_QWORD *)v27 + 3) = 0;
      }
      v17 += 4;
      v27 += 32;
    }
    while (v17 != a3);
  }
  v7[1] = v27;
  return result;
}

void std::vector<ecs2::DebugTasks>::__base_destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void **v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      v6 = (char *)*(v4 - 3);
      if (!v6)
        goto LABEL_17;
      v7 = (char *)*(v4 - 2);
      v8 = *(v4 - 3);
      if (v7 != v6)
        break;
LABEL_16:
      *(v4 - 2) = v6;
      operator delete(v8);
LABEL_17:
      v12 = v4 - 6;
      v13 = (char *)*(v4 - 6);
      if (!v13)
        goto LABEL_5;
      v14 = (char *)*(v4 - 5);
      v5 = *(v4 - 6);
      if (v14 != v13)
      {
        while (1)
        {
          v17 = v14 - 32;
          v15 = (char *)*((_QWORD *)v14 - 1);
          if (v14 - 32 == v15)
          {
            v15 = v14 - 32;
            v16 = 4;
          }
          else
          {
            if (!v15)
              goto LABEL_22;
            v16 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_22:
          v14 = v17;
          if (v17 == v13)
          {
            v5 = *v12;
            break;
          }
        }
      }
      *(v4 - 5) = v13;
      operator delete(v5);
LABEL_5:
      v4 -= 6;
      if (v12 == a2)
        goto LABEL_2;
    }
    while (1)
    {
      v11 = v7 - 32;
      v9 = (char *)*((_QWORD *)v7 - 1);
      if (v7 - 32 == v9)
      {
        v9 = v7 - 32;
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_11;
        v10 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_11:
      v7 = v11;
      if (v11 == v6)
      {
        v8 = *(v4 - 3);
        goto LABEL_16;
      }
    }
  }
LABEL_2:
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::DebugTasks>::~ComponentStorageWrapper(uint64_t a1)
{
  void **v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  v2 = *(void ***)(a1 + 80);
  if (v2)
  {
    std::vector<ecs2::DebugTasks>::__base_destruct_at_end[abi:nn180100](a1 + 80, v2);
    operator delete(*(void **)(a1 + 80));
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD **)(a1 + 40);
    v6 = *(void **)(a1 + 32);
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          MEMORY[0x1A1AF4E00](v7, 0x1000C40104B78CFLL);
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v6);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_QWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v17 = v15 - 32;
    if (v16 == v17)
    {
      v31 = v30;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 24))(v17, v30);
    }
    else
    {
      v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  else
  {
    v31 = 0;
  }
  if (v14 != v30)
  {
    v18 = v31;
    v19 = (_QWORD *)v14[3];
    if (v31 == v30)
    {
      if (v19 == v14)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v32);
        (*(void (**)(_QWORD *))(*v31 + 32))(v31);
        v31 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v14[3] + 24))(v14[3], v30);
        (*(void (**)(_QWORD))(*(_QWORD *)v14[3] + 32))(v14[3]);
        v14[3] = 0;
        v31 = v30;
        (*(void (**)(_QWORD *, _QWORD *))(v32[0] + 24))(v32, v14);
        (*(void (**)(_QWORD *))(v32[0] + 32))(v32);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v14);
        (*(void (**)(_QWORD *))(*v31 + 32))(v31);
        v31 = (_QWORD *)v14[3];
      }
      v14[3] = v14;
    }
    else if (v19 == v14)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v14 + 24))(v14, v30);
      (*(void (**)(_QWORD))(*(_QWORD *)v14[3] + 32))(v14[3]);
      v14[3] = v31;
      v31 = v30;
    }
    else
    {
      v31 = (_QWORD *)v14[3];
      v14[3] = v18;
    }
  }
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_29;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_29:
  v22 = a1[11];
  v23 = (_QWORD *)(v22 - 32);
  v24 = *(_QWORD **)(v22 - 8);
  if (v24 == (_QWORD *)(v22 - 32))
  {
    v25 = 4;
    v24 = v23;
    goto LABEL_33;
  }
  if (v24)
  {
    v25 = 5;
LABEL_33:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  a1[11] = v23;
  v26 = (_QWORD *)a1[28];
  if (v26)
  {
    v27 = a1[31];
    do
    {
      v30[0] = &v29;
      v30[1] = 1;
      v32[0] = v27;
      v28 = v26[6];
      if (!v28)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v32, v30);
      v26 = (_QWORD *)*v26;
    }
    while (v26);
  }
  return 1;
}

BOOL gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 == v2)
    {
LABEL_11:
      a1[11] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)a1[10];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (_QWORD *)a1[4];
  if (v9)
  {
    v10 = (_QWORD *)a1[5];
    v11 = (void *)a1[4];
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          MEMORY[0x1A1AF4E00](v12, 0x1000C40104B78CFLL);
      }
      while (v10 != v9);
      v11 = (void *)a1[4];
    }
    a1[5] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t geo::IntrusiveNodeGraph<gdc::tf::TaskData>::emplace<std::in_place_type_t<gdc::tf::TaskData::StaticModule>,gdc::tf::Taskflow &>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v6 = *(_QWORD *)(v4 + 40);
  if (!v6)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(*(uint64_t ***)(a1 + 24));
    v6 = *(_QWORD *)(v4 + 40);
  }
  *(_QWORD *)(v4 + 40) = *(_QWORD *)v6;
  *(_QWORD *)v6 = a2 + 56;
  *(_DWORD *)(v6 + 64) = 3;
  *(_BYTE *)(v6 + 95) = 0;
  *(_BYTE *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  v8 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_BYTE **)a1;
    v11 = (uint64_t)v8 - *(_QWORD *)a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = v7 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v6;
    v9 = v17 + 1;
    if (v8 == (_QWORD *)v10)
    {
      v10 = v8;
    }
    else
    {
      v19 = (char *)v8 - v10 - 8;
      if (v19 < 0x58)
        goto LABEL_31;
      if ((unint64_t)((char *)v8 - v16 - v11) < 0x20)
        goto LABEL_31;
      v20 = (v19 >> 3) + 1;
      v21 = &v16[8 * v12 - 16];
      v22 = (__int128 *)(v8 - 2);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v25 = *--v8;
          *--v17 = v25;
        }
        while (v8 != (_QWORD *)v10);
        v10 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v18;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  return *(v9 - 1);
}

unint64_t ecs2::Graph::addTask(gdc::tf::TaskflowBuilder **this, const ecs2::UtlityTaskDescriptor *a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const ecs2::UtlityTaskDescriptor *v10;
  uint64_t *v11;
  std::string *v12;
  uint64_t v13;
  std::string v15;
  std::string *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = gdc::tf::TaskflowBuilder::placeholder(this[6]);
  if (*((char *)a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  else
    v15 = *(std::string *)((char *)a2 + 40);
  v5 = (void **)(v4 + 72);
  if (*(char *)(v4 + 95) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 88) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  v6 = gdc::Registry::create(this[1]);
  v7 = (uint64_t)this[1];
  v15.__r_.__value_.__r.__words[0] = v4;
  v8 = (uint64_t *)gdc::Registry::storage<ecs2::TaskHandle>(v7);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v8, v6, &v15);
  v9 = (uint64_t)this[1];
  v10 = (const ecs2::UtlityTaskDescriptor *)*((_QWORD *)a2 + 4);
  if (v10)
  {
    if (v10 == (const ecs2::UtlityTaskDescriptor *)((char *)a2 + 8))
    {
      v16 = &v15;
      (*(void (**)(const ecs2::UtlityTaskDescriptor *, std::string *))(*(_QWORD *)v10 + 24))(v10, &v15);
    }
    else
    {
      v16 = (std::string *)(*(uint64_t (**)(const ecs2::UtlityTaskDescriptor *))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  else
  {
    v16 = 0;
  }
  v11 = (uint64_t *)gdc::Registry::storage<ecs2::FunctionHandle>(v9);
  gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::emplace(v11, v6, &v15);
  v12 = v16;
  if (v16 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_15;
  }
  if (v16)
  {
    v13 = 5;
LABEL_15:
    (*(void (**)(void))(v12->__r_.__value_.__r.__words[0] + 8 * v13))();
  }
  gdc::tf::Task::work<RuntimeTaskRunner>(v4, v6);
  return v6;
}

uint64_t gdc::Registry::storage<ecs2::TaskHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x635AB0F10A15F363;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x635AB0F10A15F363;
      if (*(_QWORD *)&v3 <= 0x635AB0F10A15F363uLL)
        v5 = 0x635AB0F10A15F363uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x635AB0F10A15F363;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x635AB0F10A15F363)
            {
              if (v7[2] == 0x635AB0F10A15F363)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x635AB0F10A15F363)
          {
            if (v7[2] == 0x635AB0F10A15F363)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::TaskHandle]";
  *(_QWORD *)(v11 + 24) = 16;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274568;
  *(_QWORD *)(v11 + 8) = 0x635AB0F10A15F363;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x635AB0F10A15F363uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x635AB0F10A15F363;
  v15[1] = "ecs2::TaskHandle]";
  v15[2] = 16;
  gdc::Registry::_registerStorageDataSignals(a1, 0x635AB0F10A15F363, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void gdc::ComponentStorageWrapper<ecs2::FunctionHandle>::emplace(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v38 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v38);
  if ((v6 & 1) != 0)
  {
    v11 = a1[11];
    v10 = a1[12];
    if (v11 < v10)
    {
      v12 = (_QWORD *)a3[3];
      if (v12)
      {
        if (v12 == a3)
        {
          *(_QWORD *)(v11 + 24) = v11;
          (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a3[3] + 24))(a3[3], v11);
        }
        else
        {
          *(_QWORD *)(v11 + 24) = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
        }
        v13 = v11 + 32;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = 0;
        v13 = v11 + 32;
      }
LABEL_50:
      a1[11] = v13;
      v21 = a1[31];
      goto LABEL_51;
    }
    v14 = a1[10];
    v15 = (uint64_t)(v11 - v14) >> 5;
    if ((unint64_t)(v15 + 1) >> 59)
      goto LABEL_62;
    v16 = v10 - v14;
    v17 = v16 >> 4;
    if (v16 >> 4 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      if (v18 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(32 * v18);
    }
    else
    {
      v19 = 0;
    }
    v24 = &v19[32 * v15];
    v25 = (_QWORD *)a3[3];
    if (v25)
    {
      if (v25 == a3)
      {
        *((_QWORD *)v24 + 3) = v24;
        (*(void (**)(_QWORD *, char *))(*a3 + 24))(a3, v24);
      }
      else
      {
        *((_QWORD *)v24 + 3) = (*(uint64_t (**)(_QWORD *))(*v25 + 16))(v25);
      }
    }
    else
    {
      *((_QWORD *)v24 + 3) = 0;
    }
    v26 = &v19[32 * v18];
    v13 = (uint64_t)(v24 + 32);
    v28 = (char *)a1[10];
    v27 = (char *)a1[11];
    if (v27 == v28)
    {
      a1[10] = (uint64_t)v24;
      a1[11] = v13;
      a1[12] = (uint64_t)v26;
LABEL_48:
      if (v27)
        operator delete(v27);
      goto LABEL_50;
    }
    do
    {
      v29 = v24;
      v24 -= 32;
      v30 = v27 - 32;
      v31 = (char *)*((_QWORD *)v27 - 1);
      if (v31)
      {
        if (v30 == v31)
        {
          *((_QWORD *)v29 - 1) = v24;
          (*(void (**)(_QWORD, char *))(**((_QWORD **)v27 - 1) + 24))(*((_QWORD *)v27 - 1), v24);
        }
        else
        {
          *((_QWORD *)v29 - 1) = v31;
          *((_QWORD *)v27 - 1) = 0;
        }
      }
      else
      {
        *((_QWORD *)v29 - 1) = 0;
      }
      v27 -= 32;
    }
    while (v30 != v28);
    v27 = (char *)a1[10];
    v32 = (char *)a1[11];
    a1[10] = (uint64_t)v24;
    a1[11] = v13;
    a1[12] = (uint64_t)v26;
    if (v32 == v27)
      goto LABEL_48;
    while (1)
    {
      v37 = v32 - 32;
      v35 = (char *)*((_QWORD *)v32 - 1);
      if (v32 - 32 == v35)
      {
        v35 = v32 - 32;
        v36 = 4;
      }
      else
      {
        if (!v35)
          goto LABEL_57;
        v36 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_57:
      v32 = v37;
      if (v37 == v27)
        goto LABEL_48;
    }
  }
  v7 = a1[10] + 4 * ((_QWORD)v5 - a1[7]);
  v8 = *(_QWORD **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = 0;
  if (v8 == (_QWORD *)v7)
  {
    v9 = 4;
    v8 = (_QWORD *)v7;
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v20 = (_QWORD *)a3[3];
  if (v20)
  {
    if (v20 == a3)
    {
      *(_QWORD *)(v7 + 24) = v7;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a3[3] + 24))(a3[3], v7);
    }
    else
    {
      *(_QWORD *)(v7 + 24) = v20;
      a3[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
  }
  v21 = a1[31];
  if (v7 != a1[11])
  {
    v22 = (_QWORD *)a1[16];
    if (v22)
    {
      while (1)
      {
        v40 = &v38;
        v41 = 1;
        v39 = v21;
        v23 = v22[6];
        if (!v23)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v39, &v40);
        v22 = (_QWORD *)*v22;
        if (!v22)
          return;
      }
LABEL_61:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_62:
      abort();
    }
    return;
  }
LABEL_51:
  v33 = (_QWORD *)a1[22];
  if (v33)
  {
    while (1)
    {
      v40 = &v38;
      v41 = 1;
      v39 = v21;
      v34 = v33[6];
      if (!v34)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v34 + 48))(v34, &v39, &v40);
      v33 = (_QWORD *)*v33;
      if (!v33)
        return;
    }
    goto LABEL_61;
  }
}

_QWORD *gdc::tf::Task::work<RuntimeTaskRunner>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (**v4)();
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E4275AA8;
  v11[1] = a2;
  v12 = v11;
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 == 2)
  {
    v5 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5 == (_QWORD *)a1)
    {
      v6 = 4;
      v5 = (_QWORD *)a1;
    }
    else
    {
      if (!v5)
      {
LABEL_15:
        *(_QWORD *)(a1 + 24) = a1;
        (*(void (**)(_QWORD *, uint64_t))(v11[0] + 24))(v11, a1);
        goto LABEL_18;
      }
      v6 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*v5 + 8 * v6))();
    if (!v12)
    {
      *(_QWORD *)(a1 + 24) = 0;
      return result;
    }
    if (v12 != v11)
    {
      *(_QWORD *)(a1 + 24) = v12;
      return result;
    }
    goto LABEL_15;
  }
  if ((_DWORD)v3 == -1)
  {
    *(_DWORD *)(a1 + 64) = -1;
    v4 = &off_1E4275AA8;
  }
  else
  {
    ((void (*)(char *, uint64_t))off_1E42FB360[v3])(&v10, a1);
    v7 = v12;
    *(_DWORD *)(a1 + 64) = -1;
    if (!v7)
    {
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_17;
    }
    if (v7 != v11)
    {
      *(_QWORD *)(a1 + 24) = v7;
      v12 = 0;
      goto LABEL_17;
    }
    v4 = (uint64_t (**)())v11[0];
  }
  *(_QWORD *)(a1 + 24) = a1;
  ((void (*)(_QWORD *, uint64_t))v4[3])(v11, a1);
LABEL_17:
  *(_DWORD *)(a1 + 64) = 2;
LABEL_18:
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275AA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275AA8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<RuntimeTaskRunner,std::allocator<RuntimeTaskRunner>,void ()(gdc::Context &)>::operator()(_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;

  v2 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v2)
    return result;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xD60F4F992ECB1F94;
    if (*(_QWORD *)&v2 <= 0xD60F4F992ECB1F94)
      v4 = 0xD60F4F992ECB1F94 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & 0xD60F4F992ECB1F94;
  }
  v5 = *(_QWORD **)(*a2 + 8 * v4);
  if (!v5)
    return result;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return result;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == 0xD60F4F992ECB1F94)
      {
        if (v6[2] == 0xD60F4F992ECB1F94)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        return result;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return result;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == 0xD60F4F992ECB1F94)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return result;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return result;
  }
  if (v6[2] != 0xD60F4F992ECB1F94)
    goto LABEL_11;
LABEL_22:
  v10 = v6[5];
  if (*(_QWORD *)(v10 + 8) != 0xD60F4F992ECB1F94)
    return result;
  v11 = *(__int128 **)(v10 + 32);
  if (!v11)
    return result;
  v12 = result[1];
  result = (_QWORD *)gdc::Registry::storage<ecs2::FunctionHandle>(*(_QWORD *)(*((_QWORD *)v11 + 2) + 200));
  v13 = v12 >> 39;
  v14 = result[4];
  if (v12 >> 39 >= (result[5] - v14) >> 3)
    return result;
  v15 = *(_QWORD *)(v14 + 8 * v13);
  if (!v15)
    return result;
  v16 = HIDWORD(v12) & 0x7F;
  v17 = *(unsigned __int16 *)(v15 + 2 * v16);
  v19 = result[7];
  v18 = result[8];
  if (v17 >= (v18 - v19) >> 3)
    return result;
  v20 = HIDWORD(v12);
  v21 = v19 + 8 * v17;
  if (v21 == v18 || *(_DWORD *)(v21 + 4) != HIDWORD(v12))
    return result;
  v23 = result[10];
  v24 = v23 + 32 * v17;
  if (v24 == result[11] || v23 == 0)
    return result;
  result = (_QWORD *)gdc::Registry::storage<ecs2::TaskDisabled>(*(_QWORD *)(*((_QWORD *)v11 + 2) + 200));
  v26 = result[4];
  if (v13 < (result[5] - v26) >> 3)
  {
    v27 = *(_QWORD *)(v26 + 8 * v13);
    if (v27)
    {
      v28 = *(unsigned __int16 *)(v27 + 2 * v16);
      v30 = result[7];
      v29 = result[8];
      if (v28 < (v29 - v30) >> 3)
      {
        v31 = v30 + 8 * v28;
        if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v20)
        {
          v33 = result[10];
          if (v33 + v28 != result[11] && v33 != 0)
            return result;
        }
      }
    }
  }
  v35 = (_QWORD *)gdc::Registry::storage<ecs2::DebugTasks>(*(_QWORD *)(*((_QWORD *)v11 + 2) + 200));
  v36 = v35[4];
  if (v13 >= (v35[5] - v36) >> 3)
    goto LABEL_64;
  v37 = *(_QWORD *)(v36 + 8 * v13);
  if (!v37)
    goto LABEL_64;
  v38 = *(unsigned __int16 *)(v37 + 2 * v16);
  v40 = v35[7];
  v39 = v35[8];
  if (v38 >= (v39 - v40) >> 3)
    goto LABEL_64;
  v41 = v40 + 8 * v38;
  v42 = v41 != v39 && *(_DWORD *)(v41 + 4) == (_DWORD)v20;
  if (!v42
    || ((v43 = v35[10], v44 = (uint64_t *)(v43 + 48 * v38), v44 != (uint64_t *)v35[11])
      ? (v45 = v43 == 0)
      : (v45 = 1),
        v45))
  {
LABEL_64:
    v46 = *(_QWORD *)(v24 + 24);
    if (v46)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v46 + 48))(v46, v11);
    goto LABEL_74;
  }
  v47 = *v44;
  v48 = v44[1];
  if (*v44 != v48)
  {
    do
    {
      v55 = *v11;
      v49 = *(_QWORD *)(v47 + 24);
      if (!v49)
        goto LABEL_74;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v49 + 48))(v49, &v55);
      v47 += 32;
    }
    while (v47 != v48);
  }
  v50 = *(_QWORD *)(v24 + 24);
  if (!v50)
  {
LABEL_74:
    std::__throw_bad_function_call[abi:nn180100]();
    return (_QWORD *)gdc::ComponentStorageWrapper<ecs2::TaskHandle>::~ComponentStorageWrapper();
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v50 + 48))(v50, v11);
  v51 = v43 + 48 * v38;
  v52 = *(_QWORD *)(v51 + 24);
  v53 = *(_QWORD *)(v51 + 32);
  while (v52 != v53)
  {
    v55 = *v11;
    v54 = *(_QWORD *)(v52 + 24);
    if (!v54)
      goto LABEL_74;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v54 + 48))(v54, &v55);
    v52 += 32;
  }
  return result;
}

void gdc::ComponentStorageWrapper<ecs2::TaskHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<ecs2::TaskHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::TaskHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<ecs2::TaskHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

char *std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unordered_set<gdc::tf::Task>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unordered_set<gdc::tf::Task>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unordered_set<gdc::tf::Task>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unordered_set<gdc::tf::Task>>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (char *)operator new(0x50uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *((_DWORD *)v10 + 18) = 1065353216;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2)
            v3 = a2 % v7;
          else
            v3 = a2;
        }
        else
        {
          v3 = (v7 - 1) & a2;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

_QWORD *ecs2::DebugTasks::DebugTasks(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (int64_t)v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD **)a2)
  {
    if (v6 < 0)
      goto LABEL_22;
    v7 = v6 >> 5;
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v7];
    do
    {
      v9 = (_QWORD *)v4[3];
      if (v9)
      {
        if (v4 == v9)
        {
          v8[3] = v8;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v8);
        }
        else
        {
          v8[3] = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
        }
      }
      else
      {
        v8[3] = 0;
      }
      v4 += 4;
      v8 += 4;
    }
    while (v4 != v5);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(char **)(a2 + 24);
  v11 = *(char **)(a2 + 32);
  v12 = v11 - v10;
  if (v11 == v10)
    return a1;
  if (v12 < 0)
LABEL_22:
    abort();
  v13 = v12 >> 5;
  v14 = operator new(v12);
  a1[3] = v14;
  a1[4] = v14;
  a1[5] = &v14[4 * v13];
  do
  {
    v15 = (char *)*((_QWORD *)v10 + 3);
    if (v15)
    {
      if (v10 == v15)
      {
        v14[3] = v14;
        (*(void (**)(char *, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v14);
      }
      else
      {
        v14[3] = (*(uint64_t (**)(char *))(*(_QWORD *)v15 + 16))(v15);
      }
    }
    else
    {
      v14[3] = 0;
    }
    v10 += 32;
    v14 += 4;
  }
  while (v10 != v11);
  a1[4] = v14;
  return a1;
}

char *geo::Pool<ecs2::Graph>::allocateSlab(uint64_t **a1)
{
  char *result;
  char *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  v3 = result;
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if ((unint64_t)result >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)result)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v11 = a1[5];
  v12 = 248 * (_QWORD)a1[3] - 248;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = &v3[v12];
    v14 = &v3[v12];
    do
    {
      *(_QWORD *)v14 = v11;
      v14 -= 248;
      v11 = (uint64_t *)v13;
      v13 = v14;
    }
    while (v14 >= v3);
    v11 = (uint64_t *)(v14 + 248);
  }
  a1[5] = v11;
  return result;
}

void std::__format::__output_buffer<char>::__output_buffer[abi:nn180100]<std::__format::__format_buffer<std::back_insert_iterator<std::string>,char>>(char *,unsigned long,std::__format::__format_buffer<std::back_insert_iterator<std::string>,char> *)::{lambda(char *,unsigned long,void *)#1}::__invoke(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  size_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  size_t v20;
  size_t v21;
  char *p_p;
  char *v23;
  char v24;
  void *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  size_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 *v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72;
  char v73;
  char *__src;
  char *__srca;
  void *__p;
  size_t v77;
  int64_t v78;

  v4 = (char *)a1;
  v5 = *(_QWORD *)(a3 + 296);
  LODWORD(v6) = *(char *)(v5 + 23);
  if ((v6 & 0x80000000) != 0)
  {
    if (!a2)
      return;
    v8 = (char *)(a1 + a2);
    v9 = *(_QWORD *)(v5 + 8);
    if (*(_QWORD *)v5 > a1 || *(_QWORD *)v5 + *(_QWORD *)(v5 + 8) + 1 <= a1)
    {
      v7 = *(_QWORD *)(v5 + 8);
      v14 = *(_QWORD *)(v5 + 16);
      v15 = v14 & 0x7FFFFFFFFFFFFFFFLL;
      v12 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v12 - v7 < a2)
      {
        v11 = v7 + a2;
        if (0x7FFFFFFFFFFFFFF8 - v15 < v7 + a2 - v12)
          goto LABEL_133;
        __src = *(char **)v5;
        if (v12 >= 0x3FFFFFFFFFFFFFF3)
        {
          v17 = 0x7FFFFFFFFFFFFFF7;
LABEL_25:
          v18 = (char *)operator new(v17);
          v19 = v18;
          if (v9)
            memmove(v18, __src, v9);
          if (v7 != v9)
            memmove(&v19[v9 + a2], &__src[v9], v7 - v9);
          if (v12 != 22)
            operator delete(__src);
          *(_QWORD *)v5 = v19;
          *(_QWORD *)(v5 + 16) = v17 | 0x8000000000000000;
          v20 = v7 + a2;
          goto LABEL_89;
        }
LABEL_18:
        if (v11 <= 2 * v12)
          v11 = 2 * v12;
        v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v16 = v11 | 7;
        if (v11 >= 0x17)
          v17 = v16 + 1;
        else
          v17 = 23;
        goto LABEL_25;
      }
      v6 = HIBYTE(v14);
      v19 = *(char **)v5;
LABEL_85:
      v46 = v9;
      if (v7 != v9)
      {
        memmove(&v19[v9 + a2], &v19[v9], v7 - v9);
        LOBYTE(v6) = *(_BYTE *)(v5 + 23);
        v46 = v7;
      }
      v20 = v46 + a2;
      if ((v6 & 0x80) == 0)
      {
        *(_BYTE *)(v5 + 23) = v20 & 0x7F;
        goto LABEL_90;
      }
LABEL_89:
      *(_QWORD *)(v5 + 8) = v20;
LABEL_90:
      v19[v20] = 0;
      v47 = &v19[v9];
      if (a2 < 8)
      {
        v48 = v4;
        goto LABEL_126;
      }
      if ((unint64_t)(&v19[v9] - v4) < 0x20)
      {
        v48 = v4;
        goto LABEL_126;
      }
      if (a2 >= 0x20)
      {
        v49 = a2 & 0xFFFFFFFFFFFFFFE0;
        v54 = &v19[v9 + 16];
        v55 = (__int128 *)(v4 + 16);
        v56 = a2 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v57 = *v55;
          *((_OWORD *)v54 - 1) = *(v55 - 1);
          *(_OWORD *)v54 = v57;
          v54 += 32;
          v55 += 2;
          v56 -= 32;
        }
        while (v56);
        if (v49 == a2)
          return;
        if ((a2 & 0x18) == 0)
        {
          v47 += v49;
          v48 = &v4[v49];
          goto LABEL_126;
        }
      }
      else
      {
        v49 = 0;
      }
      v58 = a2 & 0xFFFFFFFFFFFFFFF8;
      v48 = &v4[a2 & 0xFFFFFFFFFFFFFFF8];
      v59 = v49 - (a2 & 0xFFFFFFFFFFFFFFF8);
      v60 = &v19[v9 + v49];
      v61 = (uint64_t *)&v4[v49];
      do
      {
        v62 = *v61++;
        *(_QWORD *)v60 = v62;
        v60 += 8;
        v59 += 8;
      }
      while (v59);
      if (v58 == a2)
        return;
      v47 += v58;
      do
      {
LABEL_126:
        v72 = *v48++;
        *v47++ = v72;
      }
      while (v48 != v8);
      return;
    }
  }
  else
  {
    if (!a2)
      return;
    v7 = *(unsigned __int8 *)(v5 + 23);
    v8 = (char *)(a1 + a2);
    v9 = v7;
    if (v5 > a1 || v5 + *(unsigned __int8 *)(v5 + 23) + 1 <= a1)
    {
      if (22 - v7 < a2)
      {
        v11 = v7 + a2;
        if (v7 + a2 - 0x7FFFFFFFFFFFFFF8 < 0x800000000000001ELL)
          goto LABEL_133;
        v12 = 22;
        __src = *(char **)(a3 + 296);
        goto LABEL_18;
      }
      v19 = *(char **)(a3 + 296);
      goto LABEL_85;
    }
  }
  __srca = (char *)v9;
  __p = 0;
  v77 = 0;
  v78 = 0;
  do
  {
    v24 = *v4;
    if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      if (HIBYTE(v78) != 22)
      {
        v21 = HIBYTE(v78);
        HIBYTE(v78) = (HIBYTE(v78) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_34;
      }
      v25 = &__p;
      v21 = 22;
LABEL_41:
      if (v21 + 1 > 2 * v21)
        v27 = v21 + 1;
      else
        v27 = 2 * v21;
      v28 = (v27 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v28 = v27 | 7;
      if (v27 >= 0x17)
        v26 = v28 + 1;
      else
        v26 = 23;
LABEL_49:
      v29 = (char *)operator new(v26);
      p_p = v29;
      if (!v21 || (memmove(v29, v25, v21), v21 != 22))
        operator delete(v25);
      __p = p_p;
      v78 = v26 | 0x8000000000000000;
      goto LABEL_54;
    }
    v21 = (v78 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v77 == v21)
    {
      if ((v78 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_133;
      v25 = __p;
      v26 = 0x7FFFFFFFFFFFFFF7;
      if (v21 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_49;
      goto LABEL_41;
    }
    p_p = (char *)__p;
    v21 = v77;
LABEL_54:
    v77 = v21 + 1;
LABEL_34:
    v23 = &p_p[v21];
    *v23 = v24;
    v23[1] = 0;
    ++v4;
  }
  while (v4 != v8);
  if (v78 >= 0)
    v30 = (char *)&__p;
  else
    v30 = (char *)__p;
  if (v78 >= 0)
    v31 = HIBYTE(v78);
  else
    v31 = v77;
  LODWORD(v32) = *(char *)(v5 + 23);
  if ((v32 & 0x80000000) != 0)
  {
    v33 = *(char **)(v5 + 8);
    v37 = *(_QWORD *)(v5 + 16);
    v38 = v37 & 0x7FFFFFFFFFFFFFFFLL;
    v35 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v35 - (unint64_t)v33 >= a2)
    {
      v32 = HIBYTE(v37);
      v40 = *(_QWORD *)v5;
      goto LABEL_97;
    }
    v34 = (unint64_t)&v33[a2];
    v39 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF8 - v38 < (unint64_t)&v33[a2 - v35])
      goto LABEL_133;
    v36 = *(_QWORD *)v5;
    if (v35 < 0x3FFFFFFFFFFFFFF3)
    {
LABEL_68:
      if (v34 <= 2 * v35)
        v34 = 2 * v35;
      if (v34 >= 0x17)
      {
        v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        v42 = v34 | 7;
        if (v42 == 23)
          v42 = v41;
        v39 = v42 + 1;
      }
      else
      {
        v39 = 23;
      }
    }
    v43 = (char *)operator new(v39);
    v40 = (unint64_t)v43;
    if (__srca)
      memmove(v43, (const void *)v36, (size_t)__srca);
    if (v33 != __srca)
      memmove(&__srca[v40 + a2], &__srca[v36], v33 - __srca);
    if (v35 != 22)
      operator delete((void *)v36);
    *(_QWORD *)v5 = v40;
    *(_QWORD *)(v5 + 16) = v39 | 0x8000000000000000;
    v44 = &v33[a2];
    v45 = __srca;
  }
  else
  {
    v33 = (char *)*(unsigned __int8 *)(v5 + 23);
    if (22 - (uint64_t)v33 < a2)
    {
      v34 = (unint64_t)&v33[a2];
      if ((unint64_t)&v33[a2 - 0x7FFFFFFFFFFFFFF8] >= 0x800000000000001ELL)
      {
        v35 = 22;
        v36 = v5;
        goto LABEL_68;
      }
LABEL_133:
      abort();
    }
    v40 = v5;
LABEL_97:
    v45 = __srca;
    v50 = __srca;
    if (v33 != __srca)
    {
      memmove(&__srca[v40 + a2], &__srca[v40], v33 - __srca);
      LOBYTE(v32) = *(_BYTE *)(v5 + 23);
      v50 = v33;
    }
    v44 = &v50[a2];
    if ((v32 & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 23) = v44 & 0x7F;
      v44[v40] = 0;
      if (!v31)
        goto LABEL_130;
LABEL_103:
      v51 = &v45[v40];
      if (v31 < 8)
      {
        v52 = v30;
        goto LABEL_129;
      }
      v52 = v30;
      if ((unint64_t)(&v45[v40] - v30) >= 0x20)
      {
        if (v31 < 0x20)
        {
          v53 = 0;
LABEL_121:
          v67 = v31 & 0xFFFFFFFFFFFFFFF8;
          v51 += v31 & 0xFFFFFFFFFFFFFFF8;
          v68 = v53 - (v31 & 0xFFFFFFFFFFFFFFF8);
          v69 = &v30[v53];
          v70 = &v45[v53 + v40];
          do
          {
            v71 = *(_QWORD *)v69;
            v69 += 8;
            *(_QWORD *)v70 = v71;
            v70 += 8;
            v68 += 8;
          }
          while (v68);
          if (v31 == v67)
            goto LABEL_130;
          v52 = &v30[v67];
          goto LABEL_129;
        }
        v53 = v31 & 0xFFFFFFFFFFFFFFE0;
        v63 = (__int128 *)(v30 + 16);
        v64 = &v45[v40 + 16];
        v65 = v31 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v66 = *v63;
          *((_OWORD *)v64 - 1) = *(v63 - 1);
          *(_OWORD *)v64 = v66;
          v63 += 2;
          v64 += 32;
          v65 -= 32;
        }
        while (v65);
        if (v31 == v53)
          goto LABEL_130;
        if ((v31 & 0x18) != 0)
          goto LABEL_121;
        v52 = &v30[v53];
        v51 += v53;
      }
      do
      {
LABEL_129:
        v73 = *v52++;
        *v51++ = v73;
      }
      while (v52 != &v30[v31]);
      goto LABEL_130;
    }
  }
  *(_QWORD *)(v5 + 8) = v44;
  v44[v40] = 0;
  if (v31)
    goto LABEL_103;
LABEL_130:
  if (SHIBYTE(v78) < 0)
    operator delete(__p);
}

void std::__format::__vformat_to[abi:nn180100]<std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD v21[3];
  BOOL v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 **)a1;
  v2 = *(unsigned __int8 **)(a1 + 8);
  if (*(unsigned __int8 **)a1 != v2)
  {
    do
    {
      v6 = *a2;
      while (1)
      {
        v7 = (char)*v3;
        if (v7 != 125)
          break;
        if (++v3 == v2 || (v7 = *v3, v7 != 125))
        {
          std::__throw_format_error[abi:nn180100]("The format string contains an invalid escape sequence");
LABEL_27:
          std::__throw_format_error[abi:nn180100]("The replacement field misses a terminating '}'");
LABEL_28:
          std::__throw_format_error[abi:nn180100]("The argument index should end with a ':' or a '}'");
LABEL_29:
          std::__throw_format_error[abi:nn180100]("The format string terminates at a '{'");
        }
LABEL_11:
        v8 = *v6;
        v9 = v6[2];
        v6[2] = v9 + 1;
        *(_BYTE *)(v8 + v9) = v7;
        if (v6[2] == v6[1])
        {
          ((void (*)(_QWORD))v6[3])(*v6);
          v6[2] = 0;
        }
        if (++v3 == v2)
          return;
      }
      if (v7 != 123)
        goto LABEL_11;
      if (++v3 == v2)
        goto LABEL_29;
      v7 = *v3;
      if (v7 == 123)
        goto LABEL_11;
      *a2 = v6;
      v10 = (unsigned __int8 *)std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)v3, v2, a1);
      if (v2 == v10)
        goto LABEL_28;
      v12 = (char)*v10;
      v22 = v12 == 58;
      if (v12 == 125)
        goto LABEL_17;
      if (v12 != 58)
        goto LABEL_28;
      ++v10;
LABEL_17:
      *(_QWORD *)a1 = v10;
      v21[0] = a1;
      v21[1] = a2;
      v21[2] = &v22;
      v13 = (unint64_t)a2[1];
      if (v13 <= v11)
      {
        LOBYTE(v24) = 0;
      }
      else if (v13 > 0xC)
      {
        v18 = (__int128 *)&a2[2][4 * v11];
        v19 = v18[1];
        v23 = *v18;
        v24 = v19;
      }
      else
      {
        v14 = &a2[2][2 * v11];
        v16 = *v14;
        v15 = v14[1];
        v17 = ((unint64_t)a2[3] >> (5 * v11)) & 0x1F;
        *(_QWORD *)&v23 = v16;
        *((_QWORD *)&v23 + 1) = v15;
        LOBYTE(v24) = v17;
      }
      std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)v21, (uint64_t)&v23);
      v20 = *(unsigned __int8 **)a1;
      if (*(unsigned __int8 **)a1 == v2 || *v20 != 125)
        goto LABEL_27;
      v3 = v20 + 1;
    }
    while (v20 + 1 != v2);
  }
}

uint64_t gdc::Registry::storage<ecs2::GraphHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x15E974F8019C956ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x15E974F8019C956ALL;
      if (*(_QWORD *)&v3 <= 0x15E974F8019C956AuLL)
        v5 = 0x15E974F8019C956AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x15E974F8019C956ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x15E974F8019C956ALL)
            {
              if (v7[2] == 0x15E974F8019C956ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x15E974F8019C956ALL)
          {
            if (v7[2] == 0x15E974F8019C956ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::GraphHandle]";
  *(_QWORD *)(v11 + 24) = 17;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274598;
  *(_QWORD *)(v11 + 8) = 0x15E974F8019C956ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x15E974F8019C956AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x15E974F8019C956ALL;
  v15[1] = "ecs2::GraphHandle]";
  v15[2] = 17;
  gdc::Registry::_registerStorageDataSignals(a1, 0x15E974F8019C956ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

uint64_t gdc::Registry::storage<ecs2::ExecutionMetadata>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6106C25540188653;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6106C25540188653;
      if (*(_QWORD *)&v3 <= 0x6106C25540188653uLL)
        v5 = 0x6106C25540188653uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6106C25540188653;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6106C25540188653)
            {
              if (v7[2] == 0x6106C25540188653)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6106C25540188653)
          {
            if (v7[2] == 0x6106C25540188653)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "ecs2::ExecutionMetadata]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274628;
  *(_QWORD *)(v11 + 8) = 0x6106C25540188653;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6106C25540188653uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6106C25540188653;
  v15[1] = "ecs2::ExecutionMetadata]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6106C25540188653, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275E08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275E08;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = result;
  *(_QWORD *)(result + 8) = a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4 != v5)
  {
    do
    {
      v11 = a2;
      v6 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v6 == -1)
      {
        v10 = std::__throw_bad_variant_access[abi:nn180100]();
        return gdc::ComponentStorageWrapper<ecs2::GraphHandle>::~ComponentStorageWrapper(v10);
      }
      v12 = &v11;
      result = ((uint64_t (*)(uint64_t **, uint64_t))off_1E42FB320[v6])(&v12, v4);
      v4 += 40;
    }
    while (v4 != v5);
    v7 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    if (v4 != v7)
    {
      do
      {
        v8 = v4 - 40;
        v9 = *(unsigned int *)(v4 - 8);
        if ((_DWORD)v9 != -1)
          result = ((uint64_t (*)(uint64_t **, uint64_t))off_1E42FB340[v9])(&v12, v4 - 40);
        *(_DWORD *)(v4 - 8) = -1;
        v4 -= 40;
      }
      while (v8 != v7);
      v4 = v7;
    }
  }
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(v3 + 8) = 0;
  return result;
}

void gdc::ComponentStorageWrapper<ecs2::GraphHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<ecs2::GraphHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::GraphHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<ecs2::GraphHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,ecs2::ExecutionMetadata>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,ecs2::ExecutionMetadata>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v40 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = a1[10] + 32 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = v15 - 32;
  v17 = v15;
  if (v14 != v15 - 32)
  {
    v18 = *(_QWORD *)(v15 - 24);
    for (i = *(uint64_t **)(v14 + 8); v18 != v16 && i != (uint64_t *)v14; i = (uint64_t *)i[1])
    {
      i[2] = *(_QWORD *)(v18 + 16);
      v18 = *(_QWORD *)(v18 + 8);
    }
    if (i == (uint64_t *)v14)
    {
      if (v18 != v16)
      {
        v24 = operator new(0x18uLL);
        v25 = v24;
        *v24 = 0;
        v24[1] = 0;
        v24[2] = *(_QWORD *)(v18 + 16);
        v26 = *(_QWORD *)(v18 + 8);
        v27 = 1;
        if (v26 != v16)
        {
          v28 = v24;
          do
          {
            v24 = operator new(0x18uLL);
            *v24 = v28;
            v24[1] = 0;
            v24[2] = *(_QWORD *)(v26 + 16);
            v28[1] = v24;
            ++v27;
            v26 = *(_QWORD *)(v26 + 8);
            v28 = v24;
          }
          while (v26 != v16);
        }
        v29 = *(_QWORD *)v14;
        *(_QWORD *)(v29 + 8) = v25;
        *v25 = v29;
        *(_QWORD *)v14 = v24;
        v24[1] = v14;
        *(_QWORD *)(v14 + 16) += v27;
      }
    }
    else
    {
      v21 = *(_QWORD *)v14;
      v22 = *i;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(*(_QWORD *)v14 + 8);
      **(_QWORD **)(v21 + 8) = v22;
      do
      {
        v23 = (uint64_t *)i[1];
        --*(_QWORD *)(v14 + 16);
        operator delete(i);
        i = v23;
      }
      while (v23 != (uint64_t *)v14);
    }
    v17 = a1[11];
  }
  *(_BYTE *)(v14 + 24) = *(_BYTE *)(v15 - 8);
  v30 = (uint64_t *)(v17 - 32);
  if (*(_QWORD *)(v17 - 16))
  {
    v32 = *(_QWORD *)(v17 - 32);
    v31 = *(uint64_t **)(v17 - 24);
    v33 = *v31;
    *(_QWORD *)(v33 + 8) = *(_QWORD *)(v32 + 8);
    **(_QWORD **)(v32 + 8) = v33;
    *(_QWORD *)(v17 - 16) = 0;
    if (v31 != v30)
    {
      do
      {
        v34 = (uint64_t *)v31[1];
        operator delete(v31);
        v31 = v34;
      }
      while (v34 != v30);
    }
  }
  a1[11] = v30;
  v35 = (_QWORD *)a1[28];
  if (!v35)
    return 1;
  v36 = a1[31];
  while (1)
  {
    v42[0] = &v40;
    v42[1] = 1;
    v41 = v36;
    v37 = v35[6];
    if (!v37)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v37 + 48))(v37, &v41, v42);
    v35 = (_QWORD *)*v35;
    if (!v35)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::contains(v38, v39);
}

BOOL gdc::ComponentStorageWrapper<ecs2::ExecutionMetadata>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *geo::sparse_map<gdc::Entity,ecs2::ExecutionMetadata>::~sparse_map(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t *)a1[6];
  if (v2)
  {
    v3 = (uint64_t *)a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 4;
        if (*(v3 - 2))
        {
          v7 = *(v3 - 4);
          v6 = (uint64_t *)*(v3 - 3);
          v8 = *v6;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
          **(_QWORD **)(v7 + 8) = v8;
          *(v3 - 2) = 0;
          if (v6 != v5)
          {
            do
            {
              v9 = (uint64_t *)v6[1];
              operator delete(v6);
              v6 = v9;
            }
            while (v9 != v5);
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  v11 = (_QWORD *)*a1;
  if (*a1)
  {
    v12 = (_QWORD *)a1[1];
    v13 = (_QWORD *)*a1;
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          MEMORY[0x1A1AF4E00](v14, 0x1000C40104B78CFLL);
      }
      while (v12 != v11);
      v13 = (_QWORD *)*a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t std::__throw_format_error[abi:nn180100](const char *a1)
{
  std::__libcpp_verbose_abort("format_error was thrown in -fno-exceptions mode with message \"%s\"", a1);
  return std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>();
}

uint64_t std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned __int8 v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = *(char *)result;
  if (v3 == 125 || (v4 = v3 - 58, v3 == 58))
  {
    v7 = *(_DWORD *)(a3 + 16);
    if (!v7)
    {
LABEL_26:
      *(_DWORD *)(a3 + 16) = 2;
      goto LABEL_27;
    }
    if (v7 != 1)
    {
LABEL_27:
      ++*(_QWORD *)(a3 + 24);
      return result;
    }
    result = std::__throw_format_error[abi:nn180100]("Using automatic argument numbering in manual argument numbering mode");
  }
  else
  {
    v5 = v3 - 48;
    if (!v5)
    {
      v6 = *(_DWORD *)(a3 + 16);
      if (v6)
      {
        if (v6 == 2)
          goto LABEL_25;
      }
      else
      {
        *(_DWORD *)(a3 + 16) = 1;
      }
      return ++result;
    }
  }
  if (v4 <= 0xF5u)
  {
    std::__throw_format_error[abi:nn180100]("The argument index starts with an invalid character");
    goto LABEL_36;
  }
  v8 = (unsigned __int8 *)(result + 9);
  if ((uint64_t)&a2[-result] <= 9)
    v8 = a2;
  v9 = (unsigned __int8 *)(result + 1);
  if ((unsigned __int8 *)(result + 1) != v8)
  {
    result += (uint64_t)&v8[~result];
    while (1)
    {
      v10 = *v9;
      if ((v10 - 58) < 0xFFFFFFF6)
        break;
      v5 = v10 + 10 * v5 - 48;
      if (++v9 == v8)
      {
        v9 = v8;
        goto LABEL_18;
      }
    }
LABEL_28:
    result = (uint64_t)v9;
    v12 = *(_DWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_29;
    goto LABEL_24;
  }
LABEL_18:
  if (v9 == a2)
  {
    result = (uint64_t)a2;
    v12 = *(_DWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_29;
    goto LABEL_24;
  }
  v11 = *v9;
  if ((v11 - 48) > 9)
    goto LABEL_28;
  if ((v11 + 10 * (unint64_t)v5 - 48) >> 31
    || (result += 2, (unsigned __int8 *)result != a2) && *(unsigned __int8 *)result - 48 <= 9)
  {
LABEL_36:
    v13 = std::__throw_format_error[abi:nn180100]("The numeric value of the format specifier is too large");
    return std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v13);
  }
  v12 = *(_DWORD *)(a3 + 16);
  if (!v12)
  {
LABEL_29:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
LABEL_24:
  if (v12 == 2)
  {
LABEL_25:
    result = std::__throw_format_error[abi:nn180100]("Using manual argument numbering in automatic argument numbering mode");
    goto LABEL_26;
  }
  return result;
}

void std::__visit_format_arg[abi:nn180100]<char const* std::__format::__handle_replacement_field[abi:nn180100]<char const*,std::basic_format_parse_context<char>,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char const*,char const*,std::basic_format_parse_context<char> &,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char> &)::{lambda(char const*)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_19FF4C7C0(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 ***v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  __int16 v8;
  unsigned __int8 *v9;
  std::locale *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  size_t v15;
  std::locale::__imp *v16;
  char *v17;
  const std::locale::facet *v18;
  uint64_t v19;
  unsigned __int8 *locale;
  size_t v21;
  std::locale::__imp *v22;
  uint64_t v23;
  int v24;
  char v25;
  __int16 v26;
  char v27;
  std::locale v28[2];
  unsigned __int8 v29;

  v3 = *a2;
  v23 = 0;
  v24 = -1;
  v25 = 32;
  v26 = 0;
  v27 = 0;
  if (*(_BYTE *)v2[2])
  {
    v4 = *v2;
    v5 = std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>((uint64_t)&v23, *v2, 55);
    v6 = v5;
    if (BYTE1(v23) - 2 < 6)
    {
      *v4 = v5;
      v7 = v2[1];
      v8 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v23, v7);
      std::__formatter::__format_integer[abi:nn180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3, (uint64_t)v7, v8);
      *v7 = v9;
      return;
    }
    if (BYTE1(v23) > 1u)
    {
      std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a BOOL");
      std::__format_spec::__throw_invalid_type_format_error[abi:nn180100]("a character");
      __break(1u);
      return;
    }
    std::__format_spec::__parser<char>::__validate[abi:nn180100]((uint64_t)&v23, "a BOOL");
    if ((v23 & 7) == 0)
      LOBYTE(v23) = v23 & 0xF8 | 1;
    *v4 = v6;
  }
  v10 = (std::locale *)v2[1];
  v11 = std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((char *)&v23, v10);
  v13 = v12;
  if ((v11 & 0x40) != 0)
  {
    if (!LOBYTE(v10[5].__locale_))
    {
      MEMORY[0x1A1AF4C5C](v28);
      if (LOBYTE(v10[5].__locale_))
      {
        std::locale::operator=(v10 + 4, v28);
      }
      else
      {
        std::locale::locale(v10 + 4, v28);
        LOBYTE(v10[5].__locale_) = 1;
      }
      std::locale::~locale(v28);
    }
    std::locale::locale(v28, v10 + 4);
    v18 = std::locale::use_facet(v28, MEMORY[0x1E0DE4CC0]);
    std::locale::~locale(v28);
    v19 = 48;
    if (!(_DWORD)v3)
      v19 = 56;
    (*(void (**)(std::locale *__return_ptr, const std::locale::facet *))((char *)&v18->~facet + v19))(v28, v18);
    if ((v29 & 0x80u) == 0)
      locale = (unsigned __int8 *)v28;
    else
      locale = (unsigned __int8 *)v28[0].__locale_;
    if ((v29 & 0x80u) == 0)
      v21 = v29;
    else
      v21 = (size_t)v28[1].__locale_;
    v22 = (std::locale::__imp *)std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(locale, v21, v10->__locale_, v11, v13);
    if ((char)v29 < 0)
      operator delete(v28[0].__locale_);
    v10->__locale_ = v22;
  }
  else
  {
    v14 = (_DWORD)v3 == 0;
    if ((_DWORD)v3)
      v15 = 4;
    else
      v15 = 5;
    v16 = v10->__locale_;
    if (v14)
      v17 = "false";
    else
      v17 = "true";
    std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v17, v15, v10->__locale_, v11, v13, v15);
    v10->__locale_ = v16;
  }
}

unsigned __int8 *std::__format_spec::__parser<char>::__parse[abi:nn180100]<std::basic_format_parse_context<char>>(uint64_t a1, _QWORD *a2, char a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v8;
  int v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  unsigned __int8 *v36[2];

  v4 = (unsigned __int8 *)*a2;
  v3 = (unsigned __int8 *)a2[1];
  if ((unsigned __int8 *)*a2 == v3)
    return (unsigned __int8 *)*a2;
  v36[0] = *(unsigned __int8 **)a2;
  v36[1] = v3;
  if ((std::__unicode::__code_point_view<char>::__consume[abi:nn180100](v36) & 0x80000000) != 0)
  {
    std::__throw_format_error[abi:nn180100]("The format specifier contains malformed Unicode characters");
    goto LABEL_117;
  }
  v8 = v36[0];
  if (v36[0] < v3)
  {
    v9 = (char)*v36[0];
    switch(v9)
    {
      case '<':
        v10 = 1;
        goto LABEL_18;
      case '>':
        v10 = 3;
        goto LABEL_18;
      case '^':
        v10 = 2;
LABEL_18:
        *(_BYTE *)a1 = *(_BYTE *)a1 & 0xF8 | v10;
        v14 = v8 - v4;
        if (v8 - v4 == 1)
        {
          v15 = *v4;
          if (v15 == 125 || v15 == 123)
            goto LABEL_118;
          *(_BYTE *)(a1 + 12) = v15;
        }
        else if (v8 != v4)
        {
          memmove((void *)(a1 + 12), v4, v8 - v4);
        }
        v13 = v14 + 1;
        goto LABEL_25;
    }
  }
  v11 = (char)*v4;
  switch(v11)
  {
    case '<':
      v12 = 1;
      break;
    case '>':
      v12 = 3;
      break;
    case '^':
      v12 = 2;
      break;
    default:
      goto LABEL_26;
  }
  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xF8 | v12;
  v13 = 1;
LABEL_25:
  v4 += v13;
  if (v4 == v3)
    return v3;
LABEL_26:
  if ((a3 & 1) != 0)
  {
    v16 = (char)*v4;
    switch(v16)
    {
      case ' ':
        v17 = *(_BYTE *)a1 | 0x18;
        break;
      case '+':
        v17 = *(_BYTE *)a1 & 0xE7 | 0x10;
        break;
      case '-':
        v17 = *(_BYTE *)a1 & 0xE7 | 8;
        break;
      default:
        goto LABEL_34;
    }
    *(_BYTE *)a1 = v17;
    if (++v4 == v3)
      return v3;
  }
LABEL_34:
  if ((a3 & 2) != 0 && *v4 == 35)
  {
    *(_BYTE *)a1 |= 0x20u;
    if (++v4 == v3)
      return v3;
  }
  if ((a3 & 4) != 0)
  {
    v18 = *v4;
    if (v18 != 48)
      goto LABEL_43;
    if ((*(_BYTE *)a1 & 7) == 0)
      *(_BYTE *)a1 = *(_BYTE *)a1 & 0xF8 | 4;
    if (++v4 == v3)
      return v3;
  }
  v18 = *v4;
LABEL_43:
  if (v18 == 123)
  {
    if (v4 + 1 == v3)
      goto LABEL_119;
    v24 = (unsigned __int8 *)std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)(v4 + 1), v3, (uint64_t)a2);
    if (v3 != v24 && *v24 == 125)
    {
      v21 = v24 + 1;
      *(_WORD *)(a1 + 2) |= 0x4000u;
LABEL_63:
      *(_DWORD *)(a1 + 4) = v19;
      v4 = v21;
      if (v21 == v3)
        return v3;
      goto LABEL_64;
    }
LABEL_117:
    std::__throw_format_error[abi:nn180100]("The argument index is invalid");
LABEL_118:
    std::__throw_format_error[abi:nn180100]("The fill option contains an invalid value");
    goto LABEL_119;
  }
  LODWORD(v19) = v18 - 48;
  if (v18 == 48)
  {
LABEL_120:
    std::__throw_format_error[abi:nn180100]("The width option should not have a leading zero");
LABEL_121:
    std::__throw_format_error[abi:nn180100]("The format specifier should consume the input or end with a '}'");
    goto LABEL_122;
  }
  if ((v18 - 58) >= 0xFFFFFFF6)
  {
    v20 = v4 + 9;
    if (v3 - v4 <= 9)
      v20 = v3;
    v21 = v4 + 1;
    if (v4 + 1 == v20)
    {
LABEL_53:
      if (v21 == v3)
      {
LABEL_86:
        *(_DWORD *)(a1 + 4) = v19;
        return v3;
      }
      v23 = *v21;
      if ((v23 - 48) <= 9)
      {
        v19 = v23 + 10 * v19 - 48;
        if (v19 >> 31 || (v21 = v4 + 2, v4 + 2 != v3) && *v21 - 48 <= 9)
        {
LABEL_85:
          std::__throw_format_error[abi:nn180100]("The numeric value of the format specifier is too large");
          goto LABEL_86;
        }
      }
    }
    else
    {
      v4 = &v4[~(unint64_t)v4 + (_QWORD)v20];
      while (1)
      {
        v22 = *v21;
        if ((v22 - 58) < 0xFFFFFFF6)
          break;
        LODWORD(v19) = v22 + 10 * v19 - 48;
        if (++v21 == v20)
        {
          v21 = v20;
          goto LABEL_53;
        }
      }
    }
    goto LABEL_63;
  }
LABEL_64:
  if ((a3 & 8) == 0 || *v4 != 46)
    goto LABEL_91;
  v25 = (unint64_t)(v4 + 1);
  if (v4 + 1 == v3)
  {
LABEL_122:
    std::__throw_format_error[abi:nn180100]("End of input while parsing format specifier precision");
    goto LABEL_123;
  }
  v26 = *(unsigned __int8 *)v25;
  if (v26 == 123)
  {
    if (v4 + 2 != v3)
    {
      v27 = (unsigned __int8 *)std::__format::__parse_arg_id[abi:nn180100]<char const*,std::basic_format_parse_context<char>>((uint64_t)(v4 + 2), v3, (uint64_t)a2);
      if (v3 != v27 && *v27 == 125)
      {
        v4 = v27 + 1;
        *(_WORD *)(a1 + 2) |= 0x8000u;
        *(_DWORD *)(a1 + 8) = v28;
        goto LABEL_90;
      }
      goto LABEL_117;
    }
LABEL_119:
    std::__throw_format_error[abi:nn180100]("End of input while parsing an argument index");
    goto LABEL_120;
  }
  if ((v26 - 58) > 0xFFFFFFF5)
  {
    if ((uint64_t)&v3[-v25] <= 9)
      v29 = v3;
    else
      v29 = v4 + 10;
    LODWORD(v30) = v26 - 48;
    v4 += 2;
    if (v4 != v29)
    {
      v25 += (unint64_t)&v29[~v25];
      do
      {
        v31 = *v4;
        if ((v31 - 58) < 0xFFFFFFF6)
          goto LABEL_89;
        LODWORD(v30) = v31 + 10 * v30 - 48;
      }
      while (++v4 != v29);
    }
    if (v29 == v3)
    {
      v4 = v3;
    }
    else
    {
      v32 = *v29;
      if ((v32 - 48) > 9)
      {
        v4 = v29;
      }
      else
      {
        v30 = v32 + 10 * v30 - 48;
        if (v30 >> 31)
          goto LABEL_85;
        v4 = (unsigned __int8 *)(v25 + 2);
        if ((unsigned __int8 *)(v25 + 2) != v3 && *v4 - 48 <= 9)
          goto LABEL_85;
      }
    }
LABEL_89:
    *(_DWORD *)(a1 + 8) = v30;
    *(_WORD *)(a1 + 2) &= ~0x8000u;
LABEL_90:
    if (v4 != v3)
    {
LABEL_91:
      if ((a3 & 0x10) != 0 && *v4 == 76)
      {
        *(_BYTE *)a1 |= 0x40u;
        if (++v4 == v3)
          return v3;
      }
      v33 = 12;
      switch(*v4)
      {
        case 'A':
          goto LABEL_112;
        case 'B':
          v33 = 3;
          goto LABEL_112;
        case 'E':
          v33 = 14;
          goto LABEL_112;
        case 'F':
          v33 = 16;
          goto LABEL_112;
        case 'G':
          v33 = 18;
          goto LABEL_112;
        case 'P':
          v33 = 9;
          goto LABEL_112;
        case 'X':
          v33 = 7;
          goto LABEL_112;
        case 'a':
          v33 = 11;
          goto LABEL_112;
        case 'b':
          v33 = 2;
          goto LABEL_112;
        case 'c':
          v33 = 10;
          goto LABEL_112;
        case 'd':
          v33 = 5;
          goto LABEL_112;
        case 'e':
          v33 = 13;
          goto LABEL_112;
        case 'f':
          v33 = 15;
          goto LABEL_112;
        case 'g':
          v33 = 17;
          goto LABEL_112;
        case 'o':
          v33 = 4;
          goto LABEL_112;
        case 'p':
          v33 = 8;
          goto LABEL_112;
        case 's':
          v33 = 1;
          goto LABEL_112;
        case 'x':
          v33 = 6;
LABEL_112:
          *(_BYTE *)(a1 + 1) = v33;
          ++v4;
          break;
        default:
          break;
      }
      if (v4 == v3)
        return v3;
      v3 = v4;
      if (*v4 == 125)
        return v3;
      goto LABEL_121;
    }
    return v3;
  }
LABEL_123:
  v35 = std::__throw_format_error[abi:nn180100]("The precision option does not contain a value or an argument index");
  return (unsigned __int8 *)std::__format_spec::__throw_invalid_type_format_error[abi:nn180100](v35);
}

uint64_t std::__format_spec::__throw_invalid_type_format_error[abi:nn180100](char *a1)
{
  std::string *v2;
  uint64_t v3;
  std::string v5;
  std::string v6;
  std::string v7;

  std::string::basic_string[abi:nn180100]<0>(&v5, "The type option contains an invalid value for ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v6, &v5, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, &v6, " formatting argument");
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v7;
  else
    v2 = (std::string *)v7.__r_.__value_.__r.__words[0];
  v3 = std::__throw_format_error[abi:nn180100]((const char *)v2);
  return std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3);
}

uint64_t std::__format_spec::__parser<char>::__get_parsed_std_specifications[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(char *a1, _QWORD *a2)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[15];
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[31];

  *(_QWORD *)&v26[23] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a1[1];
  v7 = *((_WORD *)a1 + 1);
  v8 = *((unsigned int *)a1 + 1);
  if ((v7 & 0x4000) != 0)
  {
    v9 = (int)v8;
    v10 = a2[1];
    if (v10 <= (int)v8)
    {
      LOBYTE(v12) = 0;
    }
    else if (v10 > 0xC)
    {
      v13 = a2[2] + 32 * (int)v8;
      v2 = *(_QWORD *)v13;
      v9 = *(_QWORD *)(v13 + 8);
      LOBYTE(v12) = *(_BYTE *)(v13 + 16);
      *(_QWORD *)v22 = *(_QWORD *)(v13 + 17);
      *(_QWORD *)&v22[7] = *(_QWORD *)(v13 + 24);
    }
    else
    {
      v11 = a2[2];
      v12 = (a2[3] >> (5 * v8)) & 0x1FLL;
      v2 = *(_QWORD *)(v11 + 16 * (int)v8);
      v9 = *(_QWORD *)(v11 + 16 * (int)v8 + 8);
    }
    v23 = v2;
    v24 = v9;
    v25 = v12;
    *(_QWORD *)v26 = *(_QWORD *)v22;
    *(_QWORD *)&v26[7] = *(_QWORD *)&v22[7];
    std::__visit_format_arg[abi:nn180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v23);
    v8 = v14;
    v7 = *((_WORD *)a1 + 1);
  }
  v15 = *((_DWORD *)a1 + 2);
  if (v7 < 0)
  {
    v16 = v15;
    v17 = a2[1];
    if (v17 <= v15)
    {
      LOBYTE(v19) = 0;
    }
    else if (v17 > 0xC)
    {
      v20 = a2[2] + 32 * v15;
      v2 = *(_QWORD *)v20;
      v16 = *(_QWORD *)(v20 + 8);
      LOBYTE(v19) = *(_BYTE *)(v20 + 16);
      *(_QWORD *)v22 = *(_QWORD *)(v20 + 17);
      *(_QWORD *)&v22[7] = *(_QWORD *)(v20 + 24);
    }
    else
    {
      v18 = a2[2];
      v19 = (a2[3] >> (5 * v15)) & 0x1FLL;
      v2 = *(_QWORD *)(v18 + 16 * v15);
      v16 = *(_QWORD *)(v18 + 16 * v15 + 8);
    }
    v23 = v2;
    v24 = v16;
    v25 = v19;
    *(_QWORD *)v26 = *(_QWORD *)v22;
    *(_QWORD *)&v26[7] = *(_QWORD *)&v22[7];
    std::__visit_format_arg[abi:nn180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>((uint64_t)&v23);
  }
  return (v6 << 8) | (v8 << 32) | v5 & 0x7F;
}

uint64_t *std::__formatter::__format_integer[abi:nn180100]<unsigned long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char *a5, uint64_t a6, _BYTE *a7, unsigned int a8)
{
  unsigned int v11;
  int8x16_t *v12;
  char v13;
  __int8 v14;
  unsigned __int8 *v15;
  int v16;
  char *v17;
  int64_t v18;
  const std::locale::facet *v19;
  unsigned __int8 *locale;
  uint64_t v21;
  std::locale::__imp *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  void *v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *p_p;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t *v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  size_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  char *v49;
  char *v50;
  size_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  char v56;
  unsigned int v57;
  int v58;
  const std::locale::facet *v59;
  int8x16_t *v60;
  void *v61;
  size_t v62;
  char *v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t *v71;
  const std::locale::facet *v72;
  int v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  void *__src;
  void *__p;
  size_t v79;
  unint64_t v80;
  std::locale v81;
  uint64_t v82;
  unsigned __int8 v83;

  v11 = (a3 >> 3) & 3;
  if (v11 == 2)
  {
    v13 = 43;
    goto LABEL_5;
  }
  v12 = (int8x16_t *)a5;
  if (v11 == 3)
  {
    v13 = 32;
LABEL_5:
    *a5 = v13;
    v12 = (int8x16_t *)(a5 + 1);
  }
  __src = a5;
  if ((a3 & 0x20) != 0)
  {
    if (a7)
    {
      v14 = *a7;
      if (*a7)
      {
        v15 = a7 + 1;
        do
        {
          v12->i8[0] = v14;
          v12 = (int8x16_t *)((char *)v12 + 1);
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
    }
  }
  v17 = (char *)std::__to_chars_integral[abi:nn180100]<unsigned long long>(v12, a6, a1, a8);
  if ((a3 & 0x40) == 0)
    goto LABEL_60;
  if (!*(_BYTE *)(a2 + 40))
  {
    MEMORY[0x1A1AF4C5C](&v81);
    if (*(_BYTE *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v81);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v81);
      *(_BYTE *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v81);
  }
  v18 = v17 - (char *)v12;
  std::locale::locale(&v81, (const std::locale *)(a2 + 32));
  v19 = std::locale::use_facet(&v81, MEMORY[0x1E0DE4CC0]);
  std::locale::~locale(&v81);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v19->__vftable[1].__on_zero_shared)(&v81, v19);
  if ((char)v83 < 0)
  {
    locale = (unsigned __int8 *)v81.__locale_;
    v21 = v82;
    if (v82 && v18 > *(char *)v81.__locale_)
    {
      v72 = v19;
      v73 = (int)v17;
      v22 = v81.__locale_;
      goto LABEL_24;
    }
    operator delete(v81.__locale_);
LABEL_60:
    v41 = HIDWORD(a3);
    v42 = *(uint64_t **)a2;
    if ((a3 & 7) == 4)
    {
      v76 = a4;
      v43 = (char *)v12 - (_BYTE *)__src;
      v45 = v42[1];
      v44 = v42[2];
      if (v44 + (char *)v12 - (_BYTE *)__src >= v45)
      {
        ((void (*)(uint64_t))v42[3])(*v42);
        v44 = 0;
        v42[2] = 0;
        v45 = v42[1];
      }
      v46 = v43 - v45;
      v74 = v17;
      if (v43 >= v45)
      {
        v49 = (char *)__src;
        if (v45)
          memmove((void *)(*v42 + v44), __src, v45);
        v42[2] = v45;
        ((void (*)(uint64_t, size_t, uint64_t))v42[3])(*v42, v45, v42[4]);
        v42[2] = 0;
        if (v46)
        {
          v50 = &v49[v45];
          do
          {
            if (v42[1] >= v46)
              v51 = v46;
            else
              v51 = v42[1];
            if (v51)
              memmove((void *)*v42, v50, v51);
            v42[2] = v51;
            v50 += v51;
            v46 -= v51;
            ((void (*)(uint64_t, size_t, uint64_t))v42[3])(*v42, v51, v42[4]);
            v42[2] = 0;
          }
          while (v46);
        }
      }
      else
      {
        if (v12 != __src)
        {
          memmove((void *)(*v42 + v44), __src, v43);
          v44 = v42[2];
        }
        v42[2] = v44 + v43;
      }
      v48 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v43)
        v52 = v43;
      else
        v52 = HIDWORD(a3);
      v41 = (HIDWORD(a3) - v52);
      v42 = *(uint64_t **)a2;
      v47 = 48;
      v17 = v74;
      a4 = v76;
    }
    else
    {
      v47 = BYTE4(a4);
      v48 = a3;
      v12 = (int8x16_t *)__src;
    }
    v53 = a3 & 0xFFFFFF00 | (v41 << 32) | v48;
    v54 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v47 << 32);
    if ((a3 & 0xFF00) == 0x700)
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v12, v17, v42, v53);
    else
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v12->i8, v17 - (char *)v12, v42, v53, v54, v17 - (char *)v12);
    return v42;
  }
  if (!v83 || v18 <= SLOBYTE(v81.__locale_))
    goto LABEL_60;
  v72 = v19;
  v73 = (int)v17;
  locale = (unsigned __int8 *)&v81;
  v22 = v81.__locale_;
  v21 = v82;
LABEL_24:
  v71 = *(uint64_t **)a2;
  __p = 0;
  v79 = 0;
  v80 = 0;
  v23 = (char *)v22 + v21;
  v24 = (char *)&v81 + v83;
  if ((v83 & 0x80u) != 0)
    v24 = v23;
  v25 = (char)*locale;
  v26 = *locale;
  v27 = v18 - v25;
  v75 = a4;
  if (v18 <= v25)
  {
    v57 = 0;
    v56 = v26 + v27;
    v59 = v72;
    v58 = v73;
    v60 = (int8x16_t *)__src;
    goto LABEL_89;
  }
  v28 = v24 - 1;
  do
  {
    if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
      if (HIBYTE(v80) != 22)
      {
        v30 = HIBYTE(v80);
        HIBYTE(v80) = (HIBYTE(v80) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_51;
      }
      v29 = &__p;
      v30 = 22;
LABEL_36:
      if (v30 + 1 > 2 * v30)
        v32 = v30 + 1;
      else
        v32 = 2 * v30;
      v33 = (v32 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v33 = v32 | 7;
      if (v32 >= 0x17)
        v31 = v33 + 1;
      else
        v31 = 23;
LABEL_44:
      v34 = (char *)operator new(v31);
      p_p = v34;
      if (!v30 || (memmove(v34, v29, v30), v30 != 22))
        operator delete(v29);
      __p = p_p;
      v80 = v31 | 0x8000000000000000;
      goto LABEL_50;
    }
    v30 = (v80 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v79 == v30)
    {
      if ((v80 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_112;
      v29 = __p;
      v31 = 0x7FFFFFFFFFFFFFF7;
      if (v30 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_44;
      goto LABEL_36;
    }
    p_p = (char *)__p;
    v30 = v79;
LABEL_50:
    v79 = v30 + 1;
LABEL_51:
    v36 = &p_p[v30];
    *v36 = v26;
    v36[1] = 0;
    if (locale == (unsigned __int8 *)v28)
    {
      v26 = *v28;
      locale = (unsigned __int8 *)v28;
    }
    else
    {
      v37 = (char *)(locale + 1);
      v38 = (char *)(locale + 1);
      do
      {
        v39 = *v38++;
        v26 = v39;
        if (v39)
          v40 = 1;
        else
          v40 = v37 == v28;
        v37 = v38;
      }
      while (!v40);
      locale = (unsigned __int8 *)(v38 - 1);
    }
    v27 -= v26;
  }
  while (v27 > 0);
  v56 = v26 + v27;
  if (SHIBYTE(v80) < 0)
  {
    v62 = (v80 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v59 = v72;
    v58 = v73;
    v60 = (int8x16_t *)__src;
    if (v79 == v62)
    {
      if ((v80 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_112:
        abort();
      v61 = __p;
      v64 = 0x7FFFFFFFFFFFFFF7;
      if (v62 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_93:
        if (v62 + 1 > 2 * v62)
          v65 = v62 + 1;
        else
          v65 = 2 * v62;
        v66 = (v65 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17)
          v66 = v65 | 7;
        if (v65 >= 0x17)
          v64 = v66 + 1;
        else
          v64 = 23;
      }
      v67 = v64;
      v68 = (char *)operator new(v64);
      v63 = v68;
      if (!v62 || (memmove(v68, v61, v62), v62 != 22))
        operator delete(v61);
      __p = v63;
      v80 = v67 | 0x8000000000000000;
    }
    else
    {
      v63 = (char *)__p;
      v62 = v79;
    }
    v79 = v62 + 1;
  }
  else
  {
    v57 = HIBYTE(v80);
    v59 = v72;
    v58 = v73;
    v60 = (int8x16_t *)__src;
    if (HIBYTE(v80) == 22)
    {
      v61 = &__p;
      v62 = 22;
      goto LABEL_93;
    }
LABEL_89:
    v62 = v57;
    HIBYTE(v80) = (v57 + 1) & 0x7F;
    v63 = (char *)&__p;
  }
  v69 = &v63[v62];
  *v69 = v56;
  v69[1] = 0;
  v70 = ((uint64_t (*)(const std::locale::facet *))v59->__vftable[1].~facet_0)(v59);
  v42 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v71, v60, v12, v58, (uint64_t *)&__p, v70, a3, v75);
  if (SHIBYTE(v80) < 0)
    operator delete(__p);
  if ((char)v83 < 0)
    operator delete(v81.__locale_);
  return v42;
}

_WORD *std::__to_chars_integral[abi:nn180100]<unsigned long long>(_WORD *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  BOOL v15;
  _WORD *v17;

  v4 = a3;
  HIDWORD(v6) = a4;
  LODWORD(v6) = a4 - 2;
  v5 = v6 >> 1;
  if (v5 == 4)
  {
    if (a2 - (uint64_t)a1 > 19
      || (v7 = (1233 * (64 - __clz(a3 | 1))) >> 12,
          a2 - (uint64_t)a1 >= v7 - (std::__itoa::__pow10_64[v7] > a3) + 1))
    {
      if (HIDWORD(a3))
      {
        if (a3 > 0x2540BE3FFLL)
        {
          v8 = a3 / 0x2540BE400;
          a1 = std::__itoa::__base_10_u32[abi:nn180100](a1, a3 / 0x2540BE400);
          v4 -= 10000000000 * v8;
        }
        *a1 = std::__itoa::__digits_base_10[v4 / 0x5F5E100];
        v9 = v4 % 0x5F5E100;
        a1[1] = std::__itoa::__digits_base_10[v9 / 0xF4240uLL];
        v9 %= 0xF4240u;
        a1[2] = std::__itoa::__digits_base_10[v9 / 0x2710uLL];
        LOWORD(v9) = v9 % 0x2710;
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 5;
      }
      else
      {
        return std::__itoa::__base_10_u32[abi:nn180100](a1, a3);
      }
    }
  }
  else if (v5)
  {
    if (v5 == 3)
    {
      return (_WORD *)std::__to_chars_integral[abi:nn180100]<8u,unsigned long long,0>((uint64_t)a1, a2, a3);
    }
    else if (v5 == 7)
    {
      return (_WORD *)std::__to_chars_integral[abi:nn180100]<16u,unsigned long long,0>((uint64_t)a1, a2, a3);
    }
    else
    {
      v11 = a2 - (_QWORD)a1;
      v17 = a1;
      v12 = a2;
      v13 = std::__to_chars_integral_width[abi:nn180100]<unsigned long long>(a3, a4);
      a2 = v12;
      if (v11 >= v13)
      {
        a2 = (uint64_t)v17 + v13;
        v14 = (_BYTE *)(a2 - 1);
        do
        {
          *v14-- = a0123456789abcd[v4 % a4];
          v15 = v4 >= a4;
          v4 /= a4;
        }
        while (v15);
      }
    }
  }
  else
  {
    return (_WORD *)std::__to_chars_integral[abi:nn180100]<2u,unsigned long long,0>((uint64_t)a1, a2, a3);
  }
  return (_WORD *)a2;
}

_QWORD *std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(_QWORD *a1, int8x16_t *__src, int8x16_t *a3, int a4, uint64_t *a5, char a6, unint64_t a7, unint64_t a8)
{
  __int16 v8;
  int8x16_t *v11;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  char *v23;
  size_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int32x4_t v42;
  uint32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  char *v53;
  _BYTE *v54;
  size_t v55;
  unint64_t v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int8x8_t *v67;
  int8x8_t *v68;
  unint64_t v69;
  int8x8_t v70;
  int16x8_t v71;
  char v72;
  int v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x8_t *v82;
  int8x8_t *v83;
  unint64_t v84;
  int8x8_t v85;
  int16x8_t v86;
  char v87;
  int v88;
  char v89;
  _BYTE *v90;
  uint64_t v91;
  size_t v92;
  size_t v93;
  size_t v94;
  size_t v95;
  char *v96;
  size_t v97;
  _BYTE *v98;
  int __c[2];
  __int16 v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x4_t v104;
  int8x16x4_t v105;

  v8 = a7;
  v11 = a3;
  v14 = HIDWORD(a7);
  *(_QWORD *)__c = HIDWORD(a8);
  v15 = (char *)a3 - (char *)__src;
  LODWORD(v16) = *((unsigned __int8 *)a5 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = a5[1];
  v17 = a4 - (_DWORD)__src - 1 + v16;
  v18 = a7 & 7;
  if ((_DWORD)v18 == 4)
  {
    v20 = a1[1];
    v19 = a1[2];
    v101 = a7;
    if (v19 + v15 >= v20)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v19 = 0;
      a1[2] = 0;
      v20 = a1[1];
    }
    v21 = v15 - v20;
    if (v15 < v20)
    {
      if (v11 != __src)
      {
        memmove((void *)(*a1 + v19), __src, v15);
        v19 = a1[2];
      }
      v8 = v101;
      v22 = v19 + v15;
      a1[2] = v22;
      if ((int)v14 <= v17)
        goto LABEL_60;
      goto LABEL_25;
    }
    if (v20)
      memmove((void *)(*a1 + v19), __src, v20);
    a1[2] = v20;
    ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v20, a1[4]);
    a1[2] = 0;
    if (v21)
    {
      v23 = &__src->i8[v20];
      do
      {
        if (a1[1] >= v21)
          v24 = v21;
        else
          v24 = a1[1];
        if (v24)
          memmove((void *)*a1, v23, v24);
        a1[2] = v24;
        v23 += v24;
        v21 -= v24;
        ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v24, a1[4]);
        a1[2] = 0;
      }
      while (v21);
    }
    v22 = 0;
    v8 = v101;
    if ((int)v14 > v17)
    {
LABEL_25:
      v25 = v8;
      v26 = (v14 - v17);
      v27 = (int)v26;
      v28 = a1[1];
      if (v22 + (int)v26 >= v28)
      {
        ((void (*)(_QWORD))a1[3])(*a1);
        v22 = 0;
        a1[2] = 0;
        v28 = a1[1];
      }
      v29 = (int)v26 - v28;
      if ((int)v26 >= v28)
      {
        v30 = (char *)*a1;
        if (v28)
        {
          memset(&v30[v22], 48, v28);
          v30 = (char *)*a1;
        }
        v8 = v25;
        a1[2] = v28;
        while (1)
        {
          ((void (*)(char *, size_t, _QWORD))a1[3])(v30, v28, a1[4]);
          a1[2] = 0;
          if (!v29)
            break;
          v30 = (char *)*a1;
          if (a1[1] >= v29)
            v28 = v29;
          else
            v28 = a1[1];
          if (v28)
          {
            memset(v30, 48, v28);
            v30 = (char *)*a1;
          }
          a1[2] = v28;
          v29 -= v28;
        }
        v22 = 0;
        goto LABEL_60;
      }
      if (v26 << 32)
      {
        memset((void *)(*a1 + v22), 48, (int)v26);
        v22 = a1[2];
      }
      v8 = v25;
      v22 += v27;
LABEL_48:
      a1[2] = v22;
    }
  }
  else
  {
    if (SHIDWORD(a7) > v17)
      __asm { BR              X10 }
    v32 = a1[1];
    v31 = a1[2];
    if (v31 + v15 >= v32)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v31 = 0;
      a1[2] = 0;
      v32 = a1[1];
    }
    v33 = v15 - v32;
    if (v15 < v32)
    {
      if (v11 != __src)
      {
        memmove((void *)(*a1 + v31), __src, v15);
        v31 = a1[2];
      }
      v22 = v31 + v15;
      goto LABEL_48;
    }
    if (v32)
      memmove((void *)(*a1 + v31), __src, v32);
    a1[2] = v32;
    ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v32, a1[4]);
    a1[2] = 0;
    if (v33)
    {
      v34 = &__src->i8[v32];
      do
      {
        if (a1[1] >= v33)
          v35 = v33;
        else
          v35 = a1[1];
        if (v35)
          memmove((void *)*a1, v34, v35);
        a1[2] = v35;
        v34 += v35;
        v33 -= v35;
        ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v35, a1[4]);
        a1[2] = 0;
      }
      while (v33);
    }
    v22 = 0;
  }
LABEL_60:
  v36 = *((unsigned __int8 *)a5 + 23);
  v37 = (char)v36;
  v38 = (uint64_t)a5 + v36;
  if (v37 >= 0)
    v39 = v38;
  else
    v39 = *a5 + a5[1];
  if (v37 >= 0)
    v40 = a5;
  else
    v40 = (uint64_t *)*a5;
  v41 = (uint64_t)v40 + 1;
  if ((v8 & 0xFF00) == 0x700)
  {
    v42.i64[0] = 0x6000000060;
    v42.i64[1] = 0x6000000060;
    v43.i64[0] = 0x600000006;
    v43.i64[1] = 0x600000006;
    v44 = (int8x16_t)xmmword_19FFB5D40;
    v45 = (int8x16_t)xmmword_19FFB4E00;
    v46.i64[0] = 0x4141414141414141;
    v46.i64[1] = 0x4141414141414141;
    while (1)
    {
      v47 = v39 - 1;
      v48 = *(char *)(v39 - 1);
      v49 = a1[1];
      if (v22 + v48 >= v49)
      {
        ((void (*)(_QWORD))a1[3])(*a1);
        v46.i64[0] = 0x4141414141414141;
        v46.i64[1] = 0x4141414141414141;
        v45 = (int8x16_t)xmmword_19FFB4E00;
        v44 = (int8x16_t)xmmword_19FFB5D40;
        v43.i64[0] = 0x600000006;
        v43.i64[1] = 0x600000006;
        v42.i64[0] = 0x6000000060;
        v42.i64[1] = 0x6000000060;
        v22 = 0;
        a1[2] = 0;
        v49 = a1[1];
      }
      v50 = &v11->i8[v48];
      if (v49 <= v48)
        break;
      if ((_DWORD)v48)
      {
        v51 = (_BYTE *)*a1;
        v52 = (_BYTE *)(*a1 + v22);
        if (v48 < 8)
        {
          v53 = (char *)v11;
          goto LABEL_109;
        }
        if ((unint64_t)(&v51[v22] - (_BYTE *)v11) < 0x10)
        {
          v53 = (char *)v11;
          goto LABEL_109;
        }
        if (v48 >= 0x10)
        {
          v75 = v48 & 0xFFFFFFFFFFFFFFF0;
          v76 = v48 & 0xFFFFFFFFFFFFFFF0;
          v77 = v11;
          v78 = (int8x16_t *)(*a1 + v22);
          do
          {
            v79 = *v77++;
            v80 = vmovl_high_s8(v79);
            v81 = vmovl_s8(*(int8x8_t *)v79.i8);
            v105.val[0] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v81.i8);
            v105.val[1] = (int8x16_t)vaddw_high_s16(v42, v81);
            v105.val[2] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v80.i8);
            v105.val[3] = (int8x16_t)vaddw_high_s16(v42, v80);
            *v78++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v105.val[0]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v105.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v105.val[2]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v105.val[3]))), vaddq_s8(vqtbl4q_s8(v105, v45), v46), v79);
            v76 -= 16;
          }
          while (v76);
          if (v75 == v48)
            goto LABEL_112;
          if ((v48 & 8) == 0)
          {
            v52 += v75;
            v53 = &v11->i8[v75];
            goto LABEL_109;
          }
        }
        else
        {
          v75 = 0;
        }
        v53 = &v11->i8[v48 & 0xFFFFFFFFFFFFFFF8];
        v52 += v48 & 0xFFFFFFFFFFFFFFF8;
        v82 = (int8x8_t *)&v51[v22 + v75];
        v83 = (int8x8_t *)&v11->i8[v75];
        v84 = v75 - (v48 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v85 = *v83++;
          v86 = vmovl_s8(v85);
          v103.val[0] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v86.i8);
          v103.val[1] = (int8x16_t)vaddw_high_s16(v42, v86);
          *v82++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v103.val[0]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v103.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v103, v44), (int8x8_t)0x4141414141414141), v85);
          v84 += 8;
        }
        while (v84);
        if ((v48 & 0xFFFFFFFFFFFFFFF8) != v48)
        {
          do
          {
LABEL_109:
            v88 = *v53++;
            v87 = v88;
            v89 = v88 - 32;
            if ((v88 - 97) < 6)
              v87 = v89;
            *v52++ = v87;
          }
          while (v53 != v50);
        }
LABEL_112:
        v22 = a1[2];
      }
      v55 = v22 + v48;
      a1[2] = v22 + v48;
LABEL_114:
      if (v39 == v41)
        return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, __c[0]);
      v90 = (_BYTE *)*a1;
      a1[2] = v55 + 1;
      v90[v55] = a6;
      v22 = a1[2];
      --v39;
      v11 = (int8x16_t *)v50;
      if (v22 == a1[1])
      {
        ((void (*)(_QWORD))a1[3])(*a1);
        v46.i64[0] = 0x4141414141414141;
        v46.i64[1] = 0x4141414141414141;
        v45 = (int8x16_t)xmmword_19FFB4E00;
        v44 = (int8x16_t)xmmword_19FFB5D40;
        v43.i64[0] = 0x600000006;
        v43.i64[1] = 0x600000006;
        v42.i64[0] = 0x6000000060;
        v42.i64[1] = 0x6000000060;
        v22 = 0;
        a1[2] = 0;
        v39 = v47;
        v11 = (int8x16_t *)v50;
      }
    }
    while (1)
    {
      v54 = (_BYTE *)*a1;
      v56 = a1[1];
      if (v56 >= v48)
        v56 = v48;
      v57 = &v11->i8[v56];
      if (!v56)
        goto LABEL_75;
      v58 = &v54[v22];
      if (v56 < 8)
      {
        v59 = (char *)v11;
        goto LABEL_93;
      }
      if ((unint64_t)(&v54[v22] - (_BYTE *)v11) < 0x10)
      {
        v59 = (char *)v11;
        goto LABEL_93;
      }
      if (v56 >= 0x10)
      {
        v60 = v56 & 0xFFFFFFFFFFFFFFF0;
        v61 = v56 & 0xFFFFFFFFFFFFFFF0;
        v62 = v11;
        v63 = (int8x16_t *)&v54[v22];
        do
        {
          v64 = *v62++;
          v65 = vmovl_high_s8(v64);
          v66 = vmovl_s8(*(int8x8_t *)v64.i8);
          v104.val[0] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v66.i8);
          v104.val[1] = (int8x16_t)vaddw_high_s16(v42, v66);
          v104.val[2] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v65.i8);
          v104.val[3] = (int8x16_t)vaddw_high_s16(v42, v65);
          *v63++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v104.val[0]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v104.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v104.val[2]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v104.val[3]))), vaddq_s8(vqtbl4q_s8(v104, v45), v46), v64);
          v61 -= 16;
        }
        while (v61);
        if (v56 == v60)
          goto LABEL_74;
        if ((v56 & 8) == 0)
        {
          v58 += v60;
          v59 = &v11->i8[v60];
          do
          {
LABEL_93:
            v73 = *v59++;
            v72 = v73;
            v74 = v73 - 32;
            if ((v73 - 97) < 6)
              v72 = v74;
            *v58++ = v72;
          }
          while (v59 != v57);
          goto LABEL_74;
        }
      }
      else
      {
        v60 = 0;
      }
      v59 = &v11->i8[v56 & 0xFFFFFFFFFFFFFFF8];
      v58 += v56 & 0xFFFFFFFFFFFFFFF8;
      v67 = (int8x8_t *)&v54[v60 + v22];
      v68 = (int8x8_t *)&v11->i8[v60];
      v69 = v60 - (v56 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v70 = *v68++;
        v71 = vmovl_s8(v70);
        v102.val[0] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v71.i8);
        v102.val[1] = (int8x16_t)vaddw_high_s16(v42, v71);
        *v67++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v102.val[0]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v102.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v102, v44), (int8x8_t)0x4141414141414141), v70);
        v69 += 8;
      }
      while (v69);
      if (v56 != (v56 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_93;
LABEL_74:
      v54 = (_BYTE *)*a1;
LABEL_75:
      a1[2] = v56;
      v48 -= v56;
      ((void (*)(_BYTE *, unint64_t, _QWORD))a1[3])(v54, v56, a1[4]);
      v22 = 0;
      v55 = 0;
      a1[2] = 0;
      v11 = (int8x16_t *)v57;
      v42.i64[0] = 0x6000000060;
      v42.i64[1] = 0x6000000060;
      v43.i64[0] = 0x600000006;
      v43.i64[1] = 0x600000006;
      v45 = (int8x16_t)xmmword_19FFB4E00;
      v44 = (int8x16_t)xmmword_19FFB5D40;
      v46.i64[0] = 0x4141414141414141;
      v46.i64[1] = 0x4141414141414141;
      if (!v48)
        goto LABEL_114;
    }
  }
  while (1)
  {
    v91 = v39 - 1;
    v92 = *(char *)(v39 - 1);
    v93 = a1[1];
    if (v22 + v92 >= v93)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v22 = 0;
      a1[2] = 0;
      v93 = a1[1];
    }
    v94 = v92 - v93;
    if (v92 >= v93)
      break;
    if ((_DWORD)v92)
    {
      memmove((void *)(*a1 + v22), v11, v92);
      v22 = a1[2];
    }
    v95 = v22 + v92;
    a1[2] = v22 + v92;
    if (v39 == v41)
      return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, __c[0]);
LABEL_135:
    v11 = (int8x16_t *)((char *)v11 + *(char *)(v39 - 1));
    v98 = (_BYTE *)*a1;
    a1[2] = v95 + 1;
    v98[v95] = a6;
    v22 = a1[2];
    --v39;
    if (v22 == a1[1])
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v22 = 0;
      a1[2] = 0;
      v39 = v91;
    }
  }
  if (v93)
    memmove((void *)(*a1 + v22), v11, v93);
  a1[2] = v93;
  ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v93, a1[4]);
  a1[2] = 0;
  if (v94)
  {
    v96 = &v11->i8[v93];
    do
    {
      if (a1[1] >= v94)
        v97 = v94;
      else
        v97 = a1[1];
      if (v97)
        memmove((void *)*a1, v96, v97);
      a1[2] = v97;
      v96 += v97;
      v94 -= v97;
      ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v97, a1[4]);
      a1[2] = 0;
    }
    while (v94);
  }
  v95 = 0;
  if (v39 != v41)
    goto LABEL_135;
  return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, __c[0]);
}

_QWORD *std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(char *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;

  if (a4 >> 32 > a6)
    __asm { BR              X10 }
  v10 = a3[1];
  v9 = a3[2];
  if (v9 + __len >= v10)
  {
    ((void (*)(_QWORD))a3[3])(*a3);
    v9 = 0;
    a3[2] = 0;
    v10 = a3[1];
  }
  v11 = __len - v10;
  if (__len >= v10)
  {
    if (v10)
      memmove((void *)(*a3 + v9), __src, v10);
    a3[2] = v10;
    ((void (*)(_QWORD, size_t, _QWORD))a3[3])(*a3, v10, a3[4]);
    a3[2] = 0;
    if (v11)
    {
      v12 = &__src[v10];
      do
      {
        if (a3[1] >= v11)
          v13 = v11;
        else
          v13 = a3[1];
        if (v13)
          memmove((void *)*a3, v12, v13);
        a3[2] = v13;
        v12 += v13;
        v11 -= v13;
        ((void (*)(_QWORD, size_t, _QWORD))a3[3])(*a3, v13, a3[4]);
        a3[2] = 0;
      }
      while (v11);
    }
  }
  else
  {
    if (__len)
    {
      memmove((void *)(*a3 + v9), __src, __len);
      v9 = a3[2];
    }
    a3[2] = v9 + __len;
  }
  return a3;
}

uint64_t *std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(int8x16_t *a1, char *a2, uint64_t *a3, uint64_t a4)
{
  int8x16_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  int32x4_t v13;
  uint32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  unint64_t v23;
  int8x8_t *v24;
  int8x8_t *v25;
  unint64_t v26;
  int8x8_t v27;
  int16x8_t v28;
  unint64_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t v32;
  int16x8_t v33;
  int16x8_t v34;
  char v35;
  int v36;
  char v37;
  unint64_t v38;
  int8x8_t *v39;
  int8x8_t *v40;
  unint64_t v41;
  int32x4_t v42;
  uint32x4_t v43;
  int8x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  uint32x4_t v47;
  int8x16_t v48;
  unint64_t v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  char v55;
  int v56;
  char v57;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x4_t v61;
  int8x16x4_t v62;

  v6 = a1;
  v7 = a2 - (char *)a1;
  if (a4 >> 32 > a2 - (char *)a1)
    __asm { BR              X10 }
  v9 = a3[1];
  v8 = a3[2];
  if (v8 + v7 >= v9)
  {
    ((void (*)(_QWORD))a3[3])(*a3);
    v8 = 0;
    a3[2] = 0;
    v9 = a3[1];
  }
  if (v7 >= v9)
  {
    v13.i64[0] = 0x6000000060;
    v13.i64[1] = 0x6000000060;
    v14.i64[0] = 0x600000006;
    v14.i64[1] = 0x600000006;
    v15 = (int8x16_t)xmmword_19FFB5D40;
    v16 = (int8x16_t)xmmword_19FFB4E00;
    v17.i64[0] = 0x4141414141414141;
    for (v17.i64[1] = 0x4141414141414141; ; v17.i64[1] = 0x4141414141414141)
    {
      v18 = *a3;
      v19 = a3[1];
      if (v19 >= v7)
        v19 = v7;
      v20 = &v6->i8[v19];
      if (!v19)
        goto LABEL_11;
      v21 = (_BYTE *)(v18 + v8);
      if (v19 < 8)
      {
        v22 = (char *)v6;
        goto LABEL_30;
      }
      if ((unint64_t)(v8 + v18 - (_QWORD)v6) < 0x10)
      {
        v22 = (char *)v6;
        goto LABEL_30;
      }
      if (v19 >= 0x10)
      {
        v23 = v19 & 0xFFFFFFFFFFFFFFF0;
        v29 = v19 & 0xFFFFFFFFFFFFFFF0;
        v30 = v6;
        v31 = (int8x16_t *)(v18 + v8);
        do
        {
          v32 = *v30++;
          v33 = vmovl_high_s8(v32);
          v34 = vmovl_s8(*(int8x8_t *)v32.i8);
          v61.val[0] = (int8x16_t)vaddw_s16(v13, *(int16x4_t *)v34.i8);
          v61.val[1] = (int8x16_t)vaddw_high_s16(v13, v34);
          v61.val[2] = (int8x16_t)vaddw_s16(v13, *(int16x4_t *)v33.i8);
          v61.val[3] = (int8x16_t)vaddw_high_s16(v13, v33);
          *v31++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v14, (uint32x4_t)v61.val[0]), (int16x8_t)vcgtq_u32(v14, (uint32x4_t)v61.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v14, (uint32x4_t)v61.val[2]), (int16x8_t)vcgtq_u32(v14, (uint32x4_t)v61.val[3]))), vaddq_s8(vqtbl4q_s8(v61, v16), v17), v32);
          v29 -= 16;
        }
        while (v29);
        if (v19 == v23)
          goto LABEL_10;
        v15 = (int8x16_t)xmmword_19FFB5D40;
        if ((v19 & 8) == 0)
        {
          v21 += v23;
          v22 = &v6->i8[v23];
          do
          {
LABEL_30:
            v36 = *v22++;
            v35 = v36;
            v37 = v36 - 32;
            if ((v36 - 97) < 6)
              v35 = v37;
            *v21++ = v35;
          }
          while (v22 != v20);
          goto LABEL_10;
        }
      }
      else
      {
        v23 = 0;
      }
      v22 = &v6->i8[v19 & 0xFFFFFFFFFFFFFFF8];
      v21 += v19 & 0xFFFFFFFFFFFFFFF8;
      v24 = (int8x8_t *)(v18 + v23 + v8);
      v25 = (int8x8_t *)&v6->i8[v23];
      v26 = v23 - (v19 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v27 = *v25++;
        v28 = vmovl_s8(v27);
        v59.val[0] = (int8x16_t)vaddw_s16(v13, *(int16x4_t *)v28.i8);
        v59.val[1] = (int8x16_t)vaddw_high_s16(v13, v28);
        *v24++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v14, (uint32x4_t)v59.val[0]), (int16x8_t)vcgtq_u32(v14, (uint32x4_t)v59.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v59, v15), (int8x8_t)0x4141414141414141), v27);
        v26 += 8;
      }
      while (v26);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_30;
LABEL_10:
      v18 = *a3;
LABEL_11:
      a3[2] = v19;
      v7 -= v19;
      ((void (*)(uint64_t, unint64_t, uint64_t))a3[3])(v18, v19, a3[4]);
      v8 = 0;
      a3[2] = 0;
      v6 = (int8x16_t *)v20;
      v13.i64[0] = 0x6000000060;
      v13.i64[1] = 0x6000000060;
      v14.i64[0] = 0x600000006;
      v14.i64[1] = 0x600000006;
      v16 = (int8x16_t)xmmword_19FFB4E00;
      v15 = (int8x16_t)xmmword_19FFB5D40;
      v17.i64[0] = 0x4141414141414141;
      if (!v7)
        return a3;
    }
  }
  if (v6 != (int8x16_t *)a2)
  {
    v10 = *a3;
    v11 = (_BYTE *)(*a3 + v8);
    if (v7 < 8)
    {
      v12 = (char *)v6;
      goto LABEL_47;
    }
    if ((unint64_t)(v8 + v10 - (_QWORD)v6) < 0x10)
    {
      v12 = (char *)v6;
      goto LABEL_47;
    }
    if (v7 >= 0x10)
    {
      v38 = v7 & 0xFFFFFFFFFFFFFFF0;
      v46.i64[0] = 0x6000000060;
      v46.i64[1] = 0x6000000060;
      v47.i64[0] = 0x600000006;
      v47.i64[1] = 0x600000006;
      v48.i64[0] = 0x4141414141414141;
      v48.i64[1] = 0x4141414141414141;
      v49 = v7 & 0xFFFFFFFFFFFFFFF0;
      v50 = v6;
      v51 = (int8x16_t *)(*a3 + v8);
      do
      {
        v52 = *v50++;
        v53 = vmovl_high_s8(v52);
        v54 = vmovl_s8(*(int8x8_t *)v52.i8);
        v62.val[0] = (int8x16_t)vaddw_s16(v46, *(int16x4_t *)v54.i8);
        v62.val[1] = (int8x16_t)vaddw_high_s16(v46, v54);
        v62.val[2] = (int8x16_t)vaddw_s16(v46, *(int16x4_t *)v53.i8);
        v62.val[3] = (int8x16_t)vaddw_high_s16(v46, v53);
        *v51++ = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v47, (uint32x4_t)v62.val[0]), (int16x8_t)vcgtq_u32(v47, (uint32x4_t)v62.val[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v47, (uint32x4_t)v62.val[2]), (int16x8_t)vcgtq_u32(v47, (uint32x4_t)v62.val[3]))), vaddq_s8(vqtbl4q_s8(v62, (int8x16_t)xmmword_19FFB4E00), v48), v52);
        v49 -= 16;
      }
      while (v49);
      if (v7 == v38)
        goto LABEL_50;
      if ((v7 & 8) == 0)
      {
        v11 += v38;
        v12 = &v6->i8[v38];
        goto LABEL_47;
      }
    }
    else
    {
      v38 = 0;
    }
    v12 = &v6->i8[v7 & 0xFFFFFFFFFFFFFFF8];
    v11 += v7 & 0xFFFFFFFFFFFFFFF8;
    v39 = (int8x8_t *)(v10 + v8 + v38);
    v40 = (int8x8_t *)&v6->i8[v38];
    v41 = v38 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v42.i64[0] = 0x6000000060;
    v42.i64[1] = 0x6000000060;
    v43.i64[0] = 0x600000006;
    v43.i64[1] = 0x600000006;
    do
    {
      v44 = *v40++;
      v45 = vmovl_s8(v44);
      v60.val[0] = (int8x16_t)vaddw_s16(v42, *(int16x4_t *)v45.i8);
      v60.val[1] = (int8x16_t)vaddw_high_s16(v42, v45);
      *v39++ = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v43, (uint32x4_t)v60.val[0]), (int16x8_t)vcgtq_u32(v43, (uint32x4_t)v60.val[1]))), vadd_s8((int8x8_t)*(_OWORD *)&vqtbl2q_s8(v60, (int8x16_t)xmmword_19FFB5D40), (int8x8_t)0x4141414141414141), v44);
      v41 += 8;
    }
    while (v41);
    if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_50:
      v8 = a3[2];
      goto LABEL_51;
    }
    do
    {
LABEL_47:
      v56 = *v12++;
      v55 = v56;
      v57 = v56 - 32;
      if ((v56 - 97) < 6)
        v55 = v57;
      *v11++ = v55;
    }
    while (v12 != a2);
    goto LABEL_50;
  }
LABEL_51:
  a3[2] = v8 + v7;
  return a3;
}

_QWORD *std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(_QWORD *a1, size_t __len, int __c)
{
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  char *v18;
  void *v19;
  size_t v20;
  int __src;

  v6 = __clz(~(_BYTE)__c) - 24;
  __src = __c;
  if ((_BYTE)__c == 0xFF)
    v7 = 8;
  else
    v7 = v6;
  if ((_DWORD)v7)
  {
    if (__len)
    {
      v8 = 0;
      v9 = a1[2];
      do
      {
        v10 = a1[1];
        if (v9 + v7 >= v10)
        {
          ((void (*)(_QWORD))a1[3])(*a1);
          v9 = 0;
          a1[2] = 0;
          v10 = a1[1];
        }
        v11 = v7 - v10;
        if (v7 < v10)
        {
          memcpy((void *)(*a1 + v9), &__src, v7);
          v9 = a1[2] + v7;
          a1[2] = v9;
        }
        else
        {
          if (v10)
            memcpy((void *)(*a1 + v9), &__src, v10);
          a1[2] = v10;
          ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v10, a1[4]);
          a1[2] = 0;
          if (v11)
          {
            v12 = (char *)&__src + v10;
            do
            {
              if (a1[1] >= v11)
                v13 = v11;
              else
                v13 = a1[1];
              if (v13)
                memcpy((void *)*a1, v12, v13);
              a1[2] = v13;
              v12 += v13;
              v11 -= v13;
              ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v13, a1[4]);
              a1[2] = 0;
            }
            while (v11);
          }
          v9 = 0;
        }
        ++v8;
      }
      while (v8 != __len);
    }
  }
  else
  {
    v15 = a1[1];
    v14 = a1[2];
    if (v14 + __len >= v15)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v14 = 0;
      a1[2] = 0;
      v15 = a1[1];
    }
    v16 = __len - v15;
    if (__len >= v15)
    {
      v18 = (char *)*a1;
      if (v15)
      {
        memset(&v18[v14], __c, v15);
        v18 = (char *)*a1;
      }
      a1[2] = v15;
      ((void (*)(char *, size_t, _QWORD))a1[3])(v18, v15, a1[4]);
      while (1)
      {
        a1[2] = 0;
        if (!v16)
          break;
        v19 = (void *)*a1;
        if (a1[1] >= v16)
          v20 = v16;
        else
          v20 = a1[1];
        if (v20)
        {
          memset(v19, __c, v20);
          v19 = (void *)*a1;
        }
        a1[2] = v20;
        v16 -= v20;
        ((void (*)(void *, size_t, _QWORD))a1[3])(v19, v20, a1[4]);
      }
    }
    else
    {
      if (__len)
      {
        memset((void *)(*a1 + v14), __c, __len);
        v14 = a1[2];
      }
      a1[2] = v14 + __len;
    }
  }
  return a1;
}

_WORD *std::__itoa::__base_10_u32[abi:nn180100](_WORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned __int16 v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;

  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      v7 = a2 / 0x5F5E100;
      if (a2 > 0x3B9AC9FF)
      {
        *a1 = std::__itoa::__digits_base_10[v7];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        a1[2] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
        v12 = a2 % 0x5F5E100 % 0xF4240 % 0x2710;
        a1[3] = std::__itoa::__digits_base_10[v12 / 0x64u];
        a1[4] = std::__itoa::__digits_base_10[v12 % 0x64u];
        return a1 + 5;
      }
      else
      {
        *(_BYTE *)a1 = v7 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 % 0xF4240 / 0x2710uLL];
        v8 = a2 % 0x5F5E100 % 0xF4240 % 0x2710;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v8 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[v8 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        v10 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[v10 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[v10 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(_BYTE *)a1 = v3 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        v4 = a2 % 0xF4240 % 0x2710;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v4 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v4 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    v5 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v5];
      v11 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v11 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v11 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(_BYTE *)a1 = v5 + 48;
      v6 = a2 % 0x2710;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v6 / 0x64u];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v6 % 0x64u];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    v9 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v9];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(_BYTE *)a1 = v9 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(_BYTE *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BYTE *v9;

  v3 = 64 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x11)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 4;
      *(_DWORD *)(v6 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v6 -= 4;
      v8 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v8);
  }
  v9 = (_BYTE *)(v6 - 1);
  do
  {
    *v9-- = a01_0[v7 & 1];
    v8 = v7 > 1;
    v7 >>= 1;
  }
  while (v8);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  BOOL v9;

  v3 = (86 * (66 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x41)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 6;
      *(_WORD *)(v6 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x40);
  }
  v8 = (_BYTE *)(v6 - 1);
  do
  {
    *v8-- = a01234567[v7 & 7];
    v9 = v7 > 7;
    v7 >>= 3;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned long long,0>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  BOOL v9;

  v3 = (67 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x101)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 8;
      *(_WORD *)(v6 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x100);
  }
  v8 = (_BYTE *)(v6 - 1);
  do
  {
    *v8-- = a0123456789abcd_0[v7 & 0xF];
    v9 = v7 > 0xF;
    v7 >>= 4;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned long long>(unint64_t a1, unsigned int a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;

  if (a2 > a1)
    return 1;
  v3 = 0;
  v4 = a2 * a2;
  v5 = (v4 * v4);
  while (1)
  {
    if (a1 < v4)
      return v3 | 2u;
    if (a1 < v4 * a2)
      return v3 | 3u;
    if (a1 < v5)
      break;
    a1 /= v5;
    v3 += 4;
    if (a1 < a2)
      return v3 | 1u;
  }
  return (v3 + 4);
}

void std::__visit_format_arg[abi:nn180100]<unsigned int std::__format_spec::__substitute_arg_id[abi:nn180100]<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(std::basic_format_arg<std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>)::{lambda(std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>)#1},std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19FF52F9C(unsigned int *a1)
{
  uint64_t result;
  unsigned __int8 **v2;

  result = *a1;
  if ((result & 0x80000000) != 0)
  {
    std::__throw_format_error[abi:nn180100]("An argument index may not have a negative value");
    v2 = (unsigned __int8 **)std::__throw_format_error[abi:nn180100]("The argument index value is too large for the number of arguments supplied");
    return std::__unicode::__code_point_view<char>::__consume[abi:nn180100](v2);
  }
  return result;
}

uint64_t std::__unicode::__code_point_view<char>::__consume[abi:nn180100](unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v1 = *a1;
  v2 = **a1;
  v3 = __clz(v2 ^ 0xFF) - 24;
  if (v2 == 255)
    v4 = 8;
  else
    v4 = v3;
  switch(v4)
  {
    case 0:
      *a1 = v1 + 1;
      result = *v1;
      break;
    case 2:
      if (a1[1] - v1 < 2 || (v1[1] & 0xC0) != 0x80)
        goto LABEL_26;
      *a1 = v1 + 1;
      v6 = *v1;
      *a1 = v1 + 2;
      v7 = v1[1] & 0x3F | ((v6 & 0x1F) << 6);
      if (v7 >= 0x80)
        result = v7;
      else
        result = 2147549181;
      break;
    case 3:
      if (a1[1] - v1 < 3 || (v1[1] & 0xC0) != 0x80 || (v1[2] & 0xC0) != 0x80)
        goto LABEL_26;
      *a1 = v1 + 1;
      v8 = *v1 & 0xF;
      *a1 = v1 + 2;
      v9 = (v8 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v10 = v9 & 0xFFFFFFC0 | v1[2] & 0x3F;
      if (v10 < 0x800)
        goto LABEL_27;
      if ((v9 & 0xF800) == 0xD800)
        result = 2147549181;
      else
        result = v10;
      break;
    case 4:
      if (a1[1] - v1 < 4 || (v1[1] & 0xC0) != 0x80 || (v1[2] & 0xC0) != 0x80 || (v1[3] & 0xC0) != 0x80)
        goto LABEL_26;
      *a1 = v1 + 1;
      v11 = *v1 & 7;
      *a1 = v1 + 2;
      v12 = (v11 << 12) | ((v1[1] & 0x3F) << 6);
      *a1 = v1 + 3;
      v13 = v12 & 0xFFFFFFC0 | v1[2] & 0x3F;
      *a1 = v1 + 4;
      v14 = v1[3] & 0x3F | (v13 << 6);
      if (v14 < 0x10000)
        goto LABEL_27;
      if (v14 >= 0x110000)
        result = 2147549181;
      else
        result = v14;
      break;
    default:
LABEL_26:
      *a1 = v1 + 1;
LABEL_27:
      result = 2147549181;
      break;
  }
  return result;
}

_QWORD *std::__formatter::__write_string[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned __int8 *__src, size_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  unsigned __int8 *v17;

  v8 = (char *)__src;
  if ((a5 & 0x80000000) != 0)
    return std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(__src, a2, a3, a4, a5);
  v9 = 0;
  v10 = __src;
  if (a2 && (_DWORD)a5)
  {
    v11 = a5;
    if (((char)*__src & 0x80000000) == 0)
    {
      v12 = 0;
      __src += a5 - 1;
      v10 = (unsigned __int8 *)&v8[a5];
      while (1)
      {
        if (a2 - 1 == v12)
        {
          v9 = a2;
          v10 = (unsigned __int8 *)&v8[a2];
          return std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v8, v10 - (unsigned __int8 *)v8, a3, a4, a5, v9);
        }
        if (a5 - 1 == v12)
          break;
        v13 = v8[++v12];
        if (v13 < 0)
        {
          v11 = a5 - v12 + 1;
          __src = (unsigned __int8 *)&v8[v12 - 1];
          goto LABEL_11;
        }
      }
      if (((char)*v10 & 0x80000000) == 0)
      {
        v9 = a5;
        return std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v8, v10 - (unsigned __int8 *)v8, a3, a4, a5, v9);
      }
      v11 = 1;
    }
LABEL_11:
    v15 = (_DWORD)__src - (_DWORD)v8;
    v16 = std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(__src, (unsigned __int8 *)&v8[a2], v11, 0);
    v10 = v17;
    v9 = v15 + v16;
  }
  return std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v8, v10 - (unsigned __int8 *)v8, a3, a4, a5, v9);
}

_QWORD *std::__formatter::__write_string_no_precision[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(unsigned __int8 *__src, size_t __len, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  unint64_t v8;
  uint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;

  v7 = (char *)__src;
  v8 = HIDWORD(a4);
  if (a4 > 0)
  {
    if (__len)
    {
      if (((char)*__src & 0x80000000) == 0)
      {
        v11 = 0;
        __src += v8 - 1;
        while (1)
        {
          if (__len - 1 == v11)
          {
            v16 = (char *)__len;
            goto LABEL_30;
          }
          if (v8 - 1 == v11)
            break;
          v12 = v7[++v11];
          if (v12 < 0)
          {
            v8 = v8 - v11 + 1;
            __src = (unsigned __int8 *)&v7[v11 - 1];
            goto LABEL_26;
          }
        }
        if ((v7[v8] & 0x80000000) == 0)
        {
          v16 = (char *)HIDWORD(a4);
          goto LABEL_30;
        }
        v8 = 1;
      }
LABEL_26:
      v16 = (char *)(__src
                   - (unsigned __int8 *)v7
                   + std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(__src, (unsigned __int8 *)&v7[__len], v8, 1));
    }
    else
    {
      v16 = 0;
    }
LABEL_30:
    std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v7, __len, a3, a4, a5, (uint64_t)v16);
    return a3;
  }
  v14 = a3[1];
  v13 = a3[2];
  if (v13 + __len >= v14)
  {
    ((void (*)(_QWORD))a3[3])(*a3);
    v13 = 0;
    a3[2] = 0;
    v14 = a3[1];
  }
  v15 = __len - v14;
  if (__len >= v14)
  {
    if (v14)
      memmove((void *)(*a3 + v13), v7, v14);
    a3[2] = v14;
    ((void (*)(_QWORD, size_t, _QWORD))a3[3])(*a3, v14, a3[4]);
    a3[2] = 0;
    if (v15)
    {
      v17 = &v7[v14];
      do
      {
        if (a3[1] >= v15)
          v18 = v15;
        else
          v18 = a3[1];
        if (v18)
          memmove((void *)*a3, v17, v18);
        a3[2] = v18;
        v17 += v18;
        v15 -= v18;
        ((void (*)(_QWORD, size_t, _QWORD))a3[3])(*a3, v18, a3[4]);
        a3[2] = 0;
      }
      while (v15);
    }
  }
  else
  {
    if (__len)
    {
      memmove((void *)(*a3 + v13), v7, __len);
      v13 = a3[2];
    }
    a3[2] = v13 + __len;
  }
  return a3;
}

uint64_t std::__format_spec::__detail::__estimate_column_width_grapheme_clustering[abi:nn180100]<char const*>(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  BOOL v25;
  int v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v39;
  _BOOL4 v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  unsigned int *v55;
  _DWORD *v56;
  unsigned int v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unsigned int *v61;
  _DWORD *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _DWORD *v67;
  unint64_t v68;
  unsigned int *v69;
  _DWORD *v70;
  unsigned int v71;
  unint64_t v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  char v80;

  v77 = a1;
  v78 = a2;
  v7 = std::__unicode::__code_point_view<char>::__consume[abi:nn180100](&v77);
  v8 = v7 & 0x7FFFFFFF;
  v79 = v7 & 0x7FFFFFFF;
  v9 = 1496;
  v10 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
  do
  {
    v11 = v9 >> 1;
    v12 = &v10[v9 >> 1];
    v14 = *v12;
    v13 = v12 + 1;
    v9 += ~(v9 >> 1);
    if (((v7 << 11) | 0x7FFu) < v14)
      v9 = v11;
    else
      v10 = v13;
  }
  while (v9);
  v15 = 16;
  if (v10 != (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
  {
    v16 = *(v10 - 1);
    v17 = ((v16 >> 4) & 0x7F) + (v16 >> 11);
    v18 = v16 & 0xF;
    if (v17 >= v8)
      v15 = v18;
    else
      v15 = 16;
  }
  v80 = v15;
  if (a1 == a2)
    return 0;
  if (v77 == v78)
  {
    if (v8 - 262142 >= 0xFFFC1102)
    {
      v50 = (v7 << 14) | 0x3FFF;
      if (v77 != a2)
      {
        if (!a4)
        {
          v64 = 0;
          do
          {
            v19 = v64;
            v66 = 108;
            v67 = &std::__width_estimation_table::__entries;
            do
            {
              v68 = v66 >> 1;
              v69 = &v67[v66 >> 1];
              v71 = *v69;
              v70 = v69 + 1;
              v66 += ~(v66 >> 1);
              if (v50 < v71)
                v66 = v68;
              else
                v67 = v70;
            }
            while (v66);
            if (v67 == (_DWORD *)&std::__width_estimation_table::__entries)
            {
              v65 = 1;
            }
            else if ((*(v67 - 1) & 0x3FFFu) + (*(v67 - 1) >> 14) < v8)
            {
              v65 = 1;
            }
            else
            {
              v65 = 2;
            }
            v64 = v19 + v65;
          }
          while (v64 <= a3);
          return v19;
        }
        v49 = 0;
        do
        {
          v52 = 108;
          v53 = &std::__width_estimation_table::__entries;
          do
          {
            v54 = v52 >> 1;
            v55 = &v53[v52 >> 1];
            v57 = *v55;
            v56 = v55 + 1;
            v52 += ~(v52 >> 1);
            if (v50 < v57)
              v52 = v54;
            else
              v53 = v56;
          }
          while (v52);
          if (v53 == (_DWORD *)&std::__width_estimation_table::__entries)
          {
            v51 = 1;
          }
          else if ((*(v53 - 1) & 0x3FFFu) + (*(v53 - 1) >> 14) < v8)
          {
            v51 = 1;
          }
          else
          {
            v51 = 2;
          }
          v49 += v51;
        }
        while (v49 <= a3);
        return v49;
      }
      v58 = 108;
      v59 = &std::__width_estimation_table::__entries;
      do
      {
        v60 = v58 >> 1;
        v61 = &v59[v58 >> 1];
        v63 = *v61;
        v62 = v61 + 1;
        v58 += ~(v58 >> 1);
        if (v50 < v63)
          v58 = v60;
        else
          v59 = v62;
      }
      while (v58);
      if (v59 == (_DWORD *)&std::__width_estimation_table::__entries)
      {
        v49 = 1;
      }
      else if ((*(v59 - 1) & 0x3FFFu) + (*(v59 - 1) >> 14) < v8)
      {
        v49 = 1;
      }
      else
      {
        v49 = 2;
      }
      if (a4 || v49 <= a3)
        return v49;
    }
    else if (a4 || a3)
    {
      if (v77 == a2)
        return 1;
      if (a4)
      {
        if (a3 + 1 > 1)
          return a3 + 1;
        else
          return 1;
      }
      else
      {
        v73 = 1;
        do
        {
          v49 = v73;
          if (v73 > a3)
            break;
          ++v73;
        }
        while (v49 + 1 <= a3);
      }
      return v49;
    }
    return 0;
  }
  v75 = a2;
  v19 = 0;
  while (2)
  {
    v21 = a3;
    v22 = v8;
    v23 = v77;
    if (v77 == v78)
    {
LABEL_77:
      v15 = 15;
      v80 = 15;
      goto LABEL_78;
    }
    v24 = 0;
    v74 = 1;
    while (1)
    {
      v27 = std::__unicode::__code_point_view<char>::__consume[abi:nn180100](&v77);
      v8 = v27 & 0x7FFFFFFF;
      v79 = v27 & 0x7FFFFFFF;
      v28 = 1496;
      v29 = (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries;
      do
      {
        v30 = v28 >> 1;
        v31 = &v29[v28 >> 1];
        v33 = *v31;
        v32 = v31 + 1;
        v28 += ~(v28 >> 1);
        if (((v27 << 11) | 0x7FFu) < v33)
          v28 = v30;
        else
          v29 = v32;
      }
      while (v28);
      if (v29 == (unsigned int *)&std::__extended_grapheme_custer_property_boundary::__entries)
      {
        v36 = 16;
        v80 = 16;
        v24 |= v15 == 3;
      }
      else
      {
        v34 = *(v29 - 1);
        v35 = ((v34 >> 4) & 0x7F) + (v34 >> 11);
        v36 = v34 & 0xF;
        if (v35 < v8)
          v36 = 16;
        v80 = v36;
        v24 |= v15 == 3;
        if (!v15 && v36 == 5)
          goto LABEL_27;
      }
      if (v15 <= 5u && ((1 << v15) & 0x23) != 0)
        break;
      if (v36 <= 5 && ((1 << v36) & 0x23) != 0)
        break;
      if (v15 == 12 || v15 == 6)
      {
        if (v36 - 11 < 2)
          goto LABEL_27;
      }
      else if (v15 == 4 && v36 <= 0xC && ((1 << v36) & 0x10D0) != 0)
      {
        goto LABEL_27;
      }
      v39 = v15 == 11 || v15 == 7;
      if (!v39 || v36 != 11)
      {
        v25 = v36 > 0xD || ((1 << v36) & 0x2404) == 0;
        if (v25 && v15 != 8)
        {
          v41 = v15 == 13 && v36 == 3;
          if ((v24 & v41 & 1) != 0)
          {
            v24 = 1;
            LOBYTE(v36) = 3;
          }
          else
          {
            if (v15 != 9 || v36 != 9 || !v74)
              break;
            v74 = 0;
            LOBYTE(v36) = 9;
          }
        }
      }
LABEL_27:
      v23 = v77;
      v15 = v36;
      if (v77 == v78)
        goto LABEL_77;
    }
    v15 = v36;
LABEL_78:
    a3 = v21;
    if (v22 - 262142 < 0xFFFC1102)
      goto LABEL_88;
    v42 = 108;
    v43 = (unsigned int *)&std::__width_estimation_table::__entries;
    do
    {
      v44 = v42 >> 1;
      v45 = &v43[v42 >> 1];
      v47 = *v45;
      v46 = v45 + 1;
      v42 += ~(v42 >> 1);
      if (((v22 << 14) | 0x3FFF) < v47)
        v42 = v44;
      else
        v43 = v46;
    }
    while (v42);
    if (v43 == (unsigned int *)&std::__width_estimation_table::__entries)
    {
LABEL_88:
      v48 = 1;
    }
    else if ((*(v43 - 1) & 0x3FFF) + (*(v43 - 1) >> 14) < v22)
    {
      v48 = 1;
    }
    else
    {
      v48 = 2;
    }
    v49 = v19 + v48;
    if (a4 || v49 <= v21)
    {
      v20 = v23 == v75 || v49 > v21;
      v19 += v48;
      if (v20)
        return v49;
      continue;
    }
    return v19;
  }
}

_QWORD *std::__formatter::__format_locale_specific_form[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,double,char>(_QWORD *a1, uint64_t a2, char **a3, std::locale *this, uint64_t a5, unint64_t a6)
{
  const std::locale::facet *v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  void *v16;
  int64_t v17;
  void **v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void **v22;
  __int128 *v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  _BYTE *v30;
  void **v31;
  void **v32;
  int v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  size_t v37;
  __int128 *v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  __int128 *v44;
  _BYTE *v45;
  size_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void **v61;
  char *v62;
  char v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  char *v76;
  size_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  size_t v91;
  size_t v92;
  size_t v93;
  uint64_t v94;
  void *v95;
  size_t v96;
  char *v97;
  char *v98;
  size_t v99;
  size_t v100;
  size_t v101;
  char *v102;
  size_t v103;
  __int128 *__src;
  uint64_t v106;
  char *v107;
  const std::locale::facet *v108;
  const std::locale::facet *v109;
  uint64_t v110;
  char **v111;
  unint64_t v112;
  int v113;
  int64_t v114;
  __int128 v115;
  unint64_t v116;
  void *__p[2];
  int64_t v118;

  v11 = std::locale::use_facet(this, MEMORY[0x1E0DE4CC0]);
  ((void (*)(void **__return_ptr))v11->__vftable[1].__on_zero_shared)(__p);
  v12 = a3[2];
  v13 = *a3;
  if (v12 >= a3[1])
    v12 = a3[1];
  v107 = v12;
  v14 = v12 - v13;
  v110 = a2;
  v111 = a3;
  if (SHIBYTE(v118) < 0)
  {
    v15 = (char *)__p[1];
    if (!__p[1])
      goto LABEL_73;
    v112 = a6;
    v18 = (void **)__p[0];
    v17 = *(char *)__p[0];
    if (v14 <= v17)
    {
      *(_BYTE *)__p[0] = 0;
      __p[1] = 0;
      goto LABEL_72;
    }
    v106 = a5;
    v114 = v12 - v13;
    LOBYTE(a5) = v17;
    v16 = __p[0];
  }
  else
  {
    if (!HIBYTE(v118))
      goto LABEL_73;
    if (v14 <= SLOBYTE(__p[0]))
    {
      LOBYTE(__p[0]) = 0;
      HIBYTE(v118) = 0;
      goto LABEL_73;
    }
    v112 = a6;
    v114 = v12 - v13;
    v106 = a5;
    v16 = __p[0];
    v15 = (char *)__p[1];
    v17 = SLOBYTE(__p[0]);
    v18 = __p;
    LOBYTE(a5) = __p[0];
  }
  v115 = 0uLL;
  v116 = 0;
  v19 = &v15[(_QWORD)v16];
  v20 = (char *)__p + HIBYTE(v118);
  if (v118 < 0)
    v20 = v19;
  v21 = v114 - v17;
  if (v114 <= v17)
  {
    v36 = 0;
    LOBYTE(v35) = a5 + v21;
    a3 = v111;
    v14 = v114;
    a5 = v106;
    goto LABEL_51;
  }
  v108 = v11;
  v22 = (void **)(v20 - 1);
  do
  {
    if ((SHIBYTE(v116) & 0x80000000) == 0)
    {
      if (HIBYTE(v116) != 22)
      {
        v24 = HIBYTE(v116);
        HIBYTE(v116) = (HIBYTE(v116) + 1) & 0x7F;
        v29 = &v115;
        goto LABEL_37;
      }
      v23 = &v115;
      v24 = 22;
LABEL_22:
      if (v24 + 1 > 2 * v24)
        v26 = v24 + 1;
      else
        v26 = 2 * v24;
      v27 = (v26 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v27 = v26 | 7;
      if (v26 >= 0x17)
        v25 = v27 + 1;
      else
        v25 = 23;
LABEL_30:
      v28 = (__int128 *)operator new(v25);
      v29 = v28;
      if (!v24 || (memmove(v28, v23, v24), v24 != 22))
        operator delete(v23);
      *(_QWORD *)&v115 = v29;
      v116 = v25 | 0x8000000000000000;
      goto LABEL_36;
    }
    v24 = (v116 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*((_QWORD *)&v115 + 1) == v24)
    {
      if ((v116 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_187;
      v23 = (__int128 *)v115;
      v25 = 0x7FFFFFFFFFFFFFF7;
      if (v24 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_30;
      goto LABEL_22;
    }
    v24 = *((_QWORD *)&v115 + 1);
    v29 = (__int128 *)v115;
LABEL_36:
    *((_QWORD *)&v115 + 1) = v24 + 1;
LABEL_37:
    v30 = (char *)v29 + v24;
    *v30 = a5;
    v30[1] = 0;
    if (v18 == v22)
    {
      LODWORD(a5) = *(unsigned __int8 *)v22;
      v18 = v22;
    }
    else
    {
      v31 = (void **)((char *)v18 + 1);
      v32 = (void **)((char *)v18 + 1);
      do
      {
        v33 = *(unsigned __int8 *)v32;
        v32 = (void **)((char *)v32 + 1);
        LODWORD(a5) = v33;
        if (v33)
          v34 = 1;
        else
          v34 = v31 == v22;
        v31 = v32;
      }
      while (!v34);
      v18 = (void **)((char *)v32 - 1);
    }
    v21 -= (char)a5;
  }
  while (v21 > 0);
  v35 = a5 + v21;
  if (SHIBYTE(v116) < 0)
  {
    v37 = (v116 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    a2 = v110;
    a3 = v111;
    v11 = v108;
    v14 = v114;
    a5 = v106;
    if (*((_QWORD *)&v115 + 1) == v37)
    {
      if ((v116 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_187:
        abort();
      __src = (__int128 *)v115;
      v39 = 0x7FFFFFFFFFFFFFF7;
      if (v37 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_55:
        if (v37 + 1 > 2 * v37)
          v40 = v37 + 1;
        else
          v40 = 2 * v37;
        if (v40 >= 0x17)
        {
          v41 = (v40 & 0x7FFFFFFFFFFFFFF8) + 8;
          v42 = v40 | 7;
          if (v42 == 23)
            v42 = v41;
          v39 = v42 + 1;
        }
        else
        {
          v39 = 23;
        }
      }
      LODWORD(v114) = v35;
      v43 = v39;
      v44 = (__int128 *)operator new(v39);
      v38 = v44;
      if (!v37 || (memmove(v44, __src, v37), v37 != 22))
        operator delete(__src);
      *(_QWORD *)&v115 = v38;
      v116 = v43 | 0x8000000000000000;
      LOBYTE(v35) = v114;
    }
    else
    {
      v37 = *((_QWORD *)&v115 + 1);
      v38 = (__int128 *)v115;
    }
    *((_QWORD *)&v115 + 1) = v37 + 1;
  }
  else
  {
    v36 = HIBYTE(v116);
    a2 = v110;
    a3 = v111;
    v11 = v108;
    v14 = v114;
    a5 = v106;
    if (HIBYTE(v116) == 22)
    {
      __src = &v115;
      v37 = 22;
      goto LABEL_55;
    }
LABEL_51:
    v37 = v36;
    HIBYTE(v116) = (v36 + 1) & 0x7F;
    v38 = &v115;
  }
  v45 = (char *)v38 + v37;
  *v45 = v35;
  v45[1] = 0;
  if (SHIBYTE(v118) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v115;
  v118 = v116;
LABEL_72:
  a6 = v112;
LABEL_73:
  v46 = v14;
  v47 = HIDWORD(a6);
  v48 = *(char **)(a2 + 16);
  v49 = (void *)HIBYTE(v118);
  if (v118 < 0)
    v49 = __p[1];
  v50 = a5 & 7;
  if (a5 >> 32 > (uint64_t)v49 + a3[3] - v48 + *(int *)(a2 + 4) - (v49 != 0))
  {
    if (v50 == 4)
      v51 = 3;
    else
      v51 = a5 & 7;
    __asm { BR              X12 }
  }
  v114 = 0;
  if (v50 == 4 && v13 != v48)
  {
    v52 = *v48;
    v53 = *a1;
    v54 = a1[2];
    a1[2] = v54 + 1;
    *(_BYTE *)(v53 + v54) = v52;
    if (a1[2] == a1[1])
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      a1[2] = 0;
    }
  }
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, 0, v47);
  if (v50 != 4)
  {
    v55 = *(char **)(a2 + 16);
    if (v13 != v55)
    {
      v56 = *v55;
      v57 = *a1;
      v58 = a1[2];
      a1[2] = v58 + 1;
      *(_BYTE *)(v57 + v58) = v56;
      if (a1[2] == a1[1])
      {
        ((void (*)(_QWORD))a1[3])(*a1);
        a1[2] = 0;
      }
    }
  }
  v113 = v47;
  if (SHIBYTE(v118) < 0)
  {
    v59 = (char *)__p[1];
    if (__p[1])
    {
      v61 = (void **)__p[0];
      v60 = (char *)__p[0] + 1;
      goto LABEL_93;
    }
  }
  else
  {
    v59 = (char *)HIBYTE(v118);
    if (HIBYTE(v118))
    {
      v60 = (char *)__p + 1;
      v61 = __p;
LABEL_93:
      v62 = &v59[(_QWORD)v61];
      v109 = v11;
      v63 = ((uint64_t (*)(const std::locale::facet *))v11->__vftable[1].~facet_0)(v11);
      v64 = a1[2];
      while (1)
      {
        v65 = v62 - 1;
        v66 = *(v62 - 1);
        v67 = a1[1];
        if (v64 + v66 >= v67)
        {
          ((void (*)(_QWORD))a1[3])(*a1);
          v64 = 0;
          a1[2] = 0;
          v67 = a1[1];
        }
        v68 = v66 - v67;
        if (v66 >= v67)
        {
          if (v67)
            memmove((void *)(*a1 + v64), v13, v67);
          a1[2] = v67;
          ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v67, a1[4]);
          a1[2] = 0;
          if (v68)
          {
            v70 = &v13[v67];
            do
            {
              if (a1[1] >= v68)
                v71 = v68;
              else
                v71 = a1[1];
              if (v71)
                memmove((void *)*a1, v70, v71);
              a1[2] = v71;
              v70 += v71;
              v68 -= v71;
              ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v71, a1[4]);
              a1[2] = 0;
            }
            while (v68);
          }
          v69 = 0;
          if (v62 == v60)
          {
LABEL_114:
            a3 = v111;
            v11 = v109;
            goto LABEL_132;
          }
        }
        else
        {
          if ((_DWORD)v66)
          {
            memmove((void *)(*a1 + v64), v13, v66);
            v64 = a1[2];
          }
          v69 = v64 + v66;
          a1[2] = v69;
          if (v62 == v60)
            goto LABEL_114;
        }
        v13 += *v65;
        v72 = *a1;
        a1[2] = v69 + 1;
        *(_BYTE *)(v72 + v69) = v63;
        v64 = a1[2];
        --v62;
        if (v64 == a1[1])
        {
          ((void (*)(_QWORD))a1[3])(*a1);
          v64 = 0;
          a1[2] = 0;
          v62 = v65;
        }
      }
    }
  }
  v74 = a1[1];
  v73 = a1[2];
  if (v73 + v46 >= v74)
  {
    ((void (*)(_QWORD))a1[3])(*a1);
    v73 = 0;
    a1[2] = 0;
    v74 = a1[1];
  }
  v75 = v46 - v74;
  if (v46 >= v74)
  {
    if (v74)
      memmove((void *)(*a1 + v73), v13, v74);
    a1[2] = v74;
    ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v74, a1[4]);
    a1[2] = 0;
    if (v75)
    {
      v76 = &v13[v74];
      do
      {
        if (a1[1] >= v75)
          v77 = v75;
        else
          v77 = a1[1];
        if (v77)
          memmove((void *)*a1, v76, v77);
        a1[2] = v77;
        v76 += v77;
        v75 -= v77;
        ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v77, a1[4]);
        a1[2] = 0;
      }
      while (v75);
    }
    v69 = 0;
  }
  else
  {
    if (v107 != v13)
    {
      memmove((void *)(*a1 + v73), v13, v46);
      v73 = a1[2];
    }
    v69 = v73 + v46;
    a1[2] = v69;
  }
LABEL_132:
  if (a3[1] != a3[3])
  {
    v78 = ((uint64_t (*)(const std::locale::facet *, size_t))v11->__vftable[1].~facet)(v11, v69);
    v79 = *a1;
    v80 = a1[2];
    a1[2] = v80 + 1;
    *(_BYTE *)(v79 + v80) = v78;
    v82 = a1[1];
    v81 = a1[2];
    if (v81 == v82)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v81 = 0;
      a1[2] = 0;
      v82 = a1[1];
    }
    v83 = a3[2];
    v84 = a3[1] + 1;
    v85 = v83 - v84;
    if (v83 - v84 + v81 >= v82)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v81 = 0;
      a1[2] = 0;
      v82 = a1[1];
    }
    v86 = v85 - v82;
    if (v85 >= v82)
    {
      if (v82)
        memmove((void *)(*a1 + v81), v84, v82);
      a1[2] = v82;
      ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v82, a1[4]);
      a1[2] = 0;
      v88 = v110;
      if (v86)
      {
        v89 = &v84[v82];
        do
        {
          if (a1[1] >= v86)
            v90 = v86;
          else
            v90 = a1[1];
          if (v90)
            memmove((void *)*a1, v89, v90);
          a1[2] = v90;
          v89 += v90;
          v86 -= v90;
          ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v90, a1[4]);
          a1[2] = 0;
        }
        while (v86);
      }
      v87 = 0;
    }
    else
    {
      if (v83 != v84)
      {
        memmove((void *)(*a1 + v81), v84, v83 - v84);
        v81 = a1[2];
      }
      v87 = v81 + v85;
      a1[2] = v87;
      v88 = v110;
    }
    v91 = *(int *)(v88 + 4);
    v92 = a1[1];
    if (v87 + v91 >= v92)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v87 = 0;
      a1[2] = 0;
      v92 = a1[1];
    }
    v93 = v91 - v92;
    if (v91 >= v92)
    {
      v94 = *a1;
      if (v92)
      {
        memset((void *)(v94 + v87), 48, v92);
        v94 = *a1;
      }
      a1[2] = v92;
      ((void (*)(uint64_t, size_t, _QWORD))a1[3])(v94, v92, a1[4]);
      while (1)
      {
        a1[2] = 0;
        if (!v93)
          break;
        v95 = (void *)*a1;
        if (a1[1] >= v93)
          v96 = v93;
        else
          v96 = a1[1];
        if (v96)
        {
          memset(v95, 48, v96);
          v95 = (void *)*a1;
        }
        a1[2] = v96;
        v93 -= v96;
        ((void (*)(void *, size_t, _QWORD))a1[3])(v95, v96, a1[4]);
      }
      v69 = 0;
    }
    else
    {
      if ((_DWORD)v91)
      {
        memset((void *)(*a1 + v87), 48, v91);
        v87 = a1[2];
      }
      v69 = v87 + v91;
      a1[2] = v69;
    }
  }
  v98 = a3[2];
  v97 = a3[3];
  if (v98 != v97)
  {
    v99 = v97 - v98;
    v100 = a1[1];
    if (v69 + v97 - v98 >= v100)
    {
      ((void (*)(_QWORD))a1[3])(*a1);
      v69 = 0;
      a1[2] = 0;
      v100 = a1[1];
    }
    v101 = v99 - v100;
    if (v99 >= v100)
    {
      if (v100)
        memmove((void *)(*a1 + v69), v98, v100);
      a1[2] = v100;
      ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v100, a1[4]);
      a1[2] = 0;
      if (v101)
      {
        v102 = &v98[v100];
        do
        {
          if (a1[1] >= v101)
            v103 = v101;
          else
            v103 = a1[1];
          if (v103)
            memmove((void *)*a1, v102, v103);
          a1[2] = v103;
          v102 += v103;
          v101 -= v103;
          ((void (*)(_QWORD, size_t, _QWORD))a1[3])(*a1, v103, a1[4]);
          a1[2] = 0;
        }
        while (v101);
      }
    }
    else
    {
      memmove((void *)(*a1 + v69), v98, v99);
      a1[2] += v99;
    }
  }
  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(a1, v114, v113);
  if (SHIBYTE(v118) < 0)
    operator delete(__p[0]);
  return a1;
}

void std::__formatter::__write_using_trailing_zeros[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

_QWORD *sub_19FF545D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  int v21;
  size_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  void *v38;
  size_t v39;
  unint64_t v40;
  size_t v41;
  size_t v42;
  char *v43;
  size_t v44;

  std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, v22, v21);
  v27 = v23 - v26;
  v29 = v20[1];
  v28 = v20[2];
  if (v28 + v23 - v26 >= v29)
  {
    ((void (*)(_QWORD))v20[3])(*v20);
    v28 = 0;
    v20[2] = 0;
    v29 = v20[1];
  }
  v30 = v27 - v29;
  if (v27 >= v29)
  {
    if (v29)
      memmove((void *)(*v20 + v28), v26, v29);
    v20[2] = v29;
    ((void (*)(_QWORD, size_t, _QWORD))v20[3])(*v20, v29, v20[4]);
    v20[2] = 0;
    if (v30)
    {
      v32 = &v26[v29];
      do
      {
        if (v20[1] >= v30)
          v33 = v30;
        else
          v33 = v20[1];
        if (v33)
          memmove((void *)*v20, v32, v33);
        v20[2] = v33;
        v32 += v33;
        v30 -= v33;
        ((void (*)(_QWORD, size_t, _QWORD))v20[3])(*v20, v33, v20[4]);
        v20[2] = 0;
      }
      while (v30);
    }
    v31 = 0;
  }
  else
  {
    if (v23 != v26)
    {
      memmove((void *)(*v20 + v28), v26, v23 - v26);
      v28 = v20[2];
    }
    v31 = v28 + v27;
    v20[2] = v31;
  }
  v34 = v20[1];
  if (v31 + v25 >= v34)
  {
    ((void (*)(_QWORD))v20[3])(*v20);
    v31 = 0;
    v20[2] = 0;
    v34 = v20[1];
  }
  v35 = v25 - v34;
  if (v25 >= v34)
  {
    v37 = *v20;
    if (v34)
    {
      memset((void *)(v37 + v31), 48, v34);
      v37 = *v20;
    }
    v20[2] = v34;
    ((void (*)(uint64_t, size_t, _QWORD))v20[3])(v37, v34, v20[4]);
    while (1)
    {
      v20[2] = 0;
      if (!v35)
        break;
      v38 = (void *)*v20;
      if (v20[1] >= v35)
        v39 = v35;
      else
        v39 = v20[1];
      if (v39)
      {
        memset(v38, 48, v39);
        v38 = (void *)*v20;
      }
      v20[2] = v39;
      v35 -= v39;
      ((void (*)(void *, size_t, _QWORD))v20[3])(v38, v39, v20[4]);
    }
    v36 = 0;
  }
  else
  {
    if (v25)
    {
      memset((void *)(*v20 + v31), 48, v25);
      v31 = v20[2];
    }
    v36 = v31 + v25;
    v20[2] = v36;
  }
  v40 = v24 - v23;
  v41 = v20[1];
  if (v36 + v24 - v23 >= v41)
  {
    ((void (*)(_QWORD))v20[3])(*v20);
    v36 = 0;
    v20[2] = 0;
    v41 = v20[1];
  }
  v42 = v40 - v41;
  if (v40 >= v41)
  {
    if (v41)
      memmove((void *)(*v20 + v36), v23, v41);
    v20[2] = v41;
    ((void (*)(_QWORD, size_t, _QWORD))v20[3])(*v20, v41, v20[4]);
    v20[2] = 0;
    if (v42)
    {
      v43 = &v23[v41];
      do
      {
        if (v20[1] >= v42)
          v44 = v42;
        else
          v44 = v20[1];
        if (v44)
          memmove((void *)*v20, v43, v44);
        v20[2] = v44;
        v43 += v44;
        v42 -= v44;
        ((void (*)(_QWORD, size_t, _QWORD))v20[3])(*v20, v44, v20[4]);
        v20[2] = 0;
      }
      while (v42);
    }
  }
  else
  {
    if (v24 != v23)
    {
      memmove((void *)(*v20 + v36), v23, v24 - v23);
      v36 = v20[2];
    }
    v20[2] = v36 + v40;
  }
  return std::__formatter::__fill[abi:nn180100]<char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v20, 0, v21);
}

uint64_t std::__format_spec::__parser<char>::__validate[abi:nn180100](uint64_t result, char *a2)
{
  char *v2;
  uint64_t v3;

  if ((*(_BYTE *)result & 0x18) != 0)
  {
    v2 = "sign";
LABEL_11:
    std::__format_spec::__throw_invalid_option_format_error[abi:nn180100](a2, v2);
    goto LABEL_12;
  }
  if ((*(_BYTE *)result & 0x20) != 0)
  {
    v2 = "alternate form";
    goto LABEL_11;
  }
  if ((*(_BYTE *)result & 7) == 4)
  {
    v2 = "zero-padding";
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 8) != -1)
  {
    v2 = "precision";
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(result + 1) >= 0x20u)
  {
LABEL_12:
    v3 = std::__throw_format_error[abi:nn180100]("The type does not fit in the mask");
    return std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v3);
  }
  return result;
}

void std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X10 }
}

uint64_t *sub_19FF5496C(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  char v7;
  _BYTE v8[3];

  return std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, a6, &v7, (uint64_t)v8, 0, 0xAu);
}

uint64_t *std::__formatter::__format_integer[abi:nn180100]<unsigned __int128,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6, char *a7, uint64_t a8, _BYTE *a9, unsigned int a10)
{
  char *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  int v18;
  int8x16_t *v19;
  __int8 v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  int8x16_t *v34;
  unsigned int v35;
  int8x16_t *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int64_t v41;
  const std::locale::facet *v42;
  unsigned __int8 *locale;
  uint64_t v44;
  std::locale::__imp *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  void *v52;
  size_t v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *p_p;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  uint64_t *v65;
  int8x16_t *v66;
  size_t v67;
  uint64_t v68;
  size_t v69;
  unint64_t v70;
  size_t v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  char *v74;
  size_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  char v80;
  unsigned int v81;
  unint64_t v82;
  void *v83;
  size_t v84;
  char *v85;
  size_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  char *v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t *v99;
  const std::locale::facet *v100;
  unint64_t v102;
  char *v103;
  void *__src;
  void *__p;
  size_t v107;
  unint64_t v108;
  std::locale v109;
  uint64_t v110;
  unsigned __int8 v111;

  v10 = (char *)a8;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  v16 = a4;
  if ((a6 & 1) != 0)
  {
    v17 = 45;
LABEL_7:
    *a7 = v17;
    v19 = (int8x16_t *)(a7 + 1);
    goto LABEL_8;
  }
  v18 = (a4 >> 3) & 3;
  if (v18 == 2)
  {
    v17 = 43;
    goto LABEL_7;
  }
  v19 = (int8x16_t *)a7;
  if (v18 == 3)
  {
    v17 = 32;
    goto LABEL_7;
  }
LABEL_8:
  __src = a7;
  if ((a4 & 0x20) != 0)
  {
    if (a9)
    {
      v20 = *a9;
      if (*a9)
      {
        v21 = a9 + 1;
        do
        {
          v19->i8[0] = v20;
          v19 = (int8x16_t *)((char *)v19 + 1);
          v22 = *v21++;
          v20 = v22;
        }
        while (v22);
      }
    }
  }
  HIDWORD(v24) = a10;
  LODWORD(v24) = a10 - 2;
  v23 = v24 >> 1;
  if (v23 == 4)
  {
    v25 = a8 - (_QWORD)v19;
    if (a2)
    {
      if (v25 > 38
        || (v26 = (1233 * (128 - __clz(a2))) >> 12,
            v25 >= v26 - (__PAIR128__(a2, a1) < std::__itoa::__pow10_128[v26]) + 1))
      {
        if (__PAIR128__(a2, a1) >= __PAIR128__(0x4B3B4CA85A86C47ALL, 0x98A224000000000))
        {
          v19->i8[0] = __udivti3() | 0x30;
          v30 = __udivti3();
          v19->i8[1] = v30 / 0x5F5E100 + 48;
          v19->i16[1] = std::__itoa::__digits_base_10[v30 % 0x5F5E100 / 0xF4240];
          v31 = v30 % 0x5F5E100 % 0xF4240;
          v19->i16[2] = std::__itoa::__digits_base_10[v31 / 0x2710uLL];
          LOWORD(v31) = v31 % 0x2710;
          v19->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v31 / 0x64u];
          v19->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v31 % 0x64u];
          v12 = a4;
          v32 = __udivti3();
          v19->i16[5] = std::__itoa::__digits_base_10[v32 / 0x5F5E100];
          v33 = v32 % 0x5F5E100;
          v19->i16[6] = std::__itoa::__digits_base_10[v33 / 0xF4240];
          v33 %= 0xF4240u;
          v19->i16[7] = std::__itoa::__digits_base_10[v33 / 0x2710uLL];
          LOWORD(v33) = v33 % 0x2710;
          v19[1].i16[0] = std::__itoa::__digits_base_10[(unsigned __int16)v33 / 0x64u];
          v19[1].i16[1] = std::__itoa::__digits_base_10[(unsigned __int16)v33 % 0x64u];
          v28 = &v19[1].i16[2];
        }
        else
        {
          v27 = __udivti3();
          if (HIDWORD(v27))
          {
            v36 = v19;
            if (v27 > 0x2540BE3FFLL)
            {
              v36 = (int8x16_t *)std::__itoa::__base_10_u32[abi:nn180100](v19, v27 / 0x2540BE400);
              v27 %= 0x2540BE400uLL;
              v12 = a4;
            }
            v36->i16[0] = std::__itoa::__digits_base_10[v27 / 0x5F5E100];
            v37 = v27 % 0x5F5E100;
            v36->i16[1] = std::__itoa::__digits_base_10[v37 / 0xF4240];
            v37 %= 0xF4240u;
            v36->i16[2] = std::__itoa::__digits_base_10[v37 / 0x2710uLL];
            LOWORD(v37) = v37 % 0x2710;
            v36->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v37 / 0x64u];
            v36->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v37 % 0x64u];
            v28 = &v36->i16[5];
          }
          else
          {
            v28 = std::__itoa::__base_10_u32[abi:nn180100](v19, v27);
          }
        }
        v38 = __umodti3();
        *(_BYTE *)v28 = v38 / 0x2540BE400 / 0x5F5E100 + 48;
        v39 = v38 / 0x2540BE400 % 0x5F5E100;
        *(__int16 *)((char *)v28 + 1) = std::__itoa::__digits_base_10[v39 / 0xF4240];
        v39 %= 0xF4240u;
        *(__int16 *)((char *)v28 + 3) = std::__itoa::__digits_base_10[v39 / 0x2710uLL];
        LOWORD(v39) = v39 % 0x2710;
        *(__int16 *)((char *)v28 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v39 / 0x64u];
        *(__int16 *)((char *)v28 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v39 % 0x64u];
        *(__int16 *)((char *)v28 + 9) = std::__itoa::__digits_base_10[v38 % 0x2540BE400 / 0x5F5E100];
        v40 = v38 % 0x2540BE400 % 0x5F5E100;
        *(__int16 *)((char *)v28 + 11) = std::__itoa::__digits_base_10[v40 / 0xF4240];
        v40 %= 0xF4240u;
        *(__int16 *)((char *)v28 + 13) = std::__itoa::__digits_base_10[v40 / 0x2710uLL];
        LOWORD(v40) = v40 % 0x2710;
        *(__int16 *)((char *)v28 + 15) = std::__itoa::__digits_base_10[(unsigned __int16)v40 / 0x64u];
        *(__int16 *)((char *)v28 + 17) = std::__itoa::__digits_base_10[(unsigned __int16)v40 % 0x64u];
        v10 = (char *)v28 + 19;
        v13 = a3;
      }
    }
    else if (v25 > 19
           || (v29 = (1233 * (64 - __clz(a1 | 1))) >> 12,
               v25 >= v29 - (std::__itoa::__pow10_64[v29] > a1) + 1))
    {
      if (HIDWORD(a1))
      {
        v34 = v19;
        if (v15 > 0x2540BE3FFLL)
        {
          v34 = (int8x16_t *)std::__itoa::__base_10_u32[abi:nn180100](v19, v15 / 0x2540BE400);
          v15 %= 0x2540BE400uLL;
          v12 = a4;
        }
        v34->i16[0] = std::__itoa::__digits_base_10[v15 / 0x5F5E100];
        v35 = v15 % 0x5F5E100;
        v34->i16[1] = std::__itoa::__digits_base_10[v35 / 0xF4240uLL];
        v35 %= 0xF4240u;
        v34->i16[2] = std::__itoa::__digits_base_10[v35 / 0x2710uLL];
        LOWORD(v35) = v35 % 0x2710;
        v34->i16[3] = std::__itoa::__digits_base_10[(unsigned __int16)v35 / 0x64u];
        v34->i16[4] = std::__itoa::__digits_base_10[(unsigned __int16)v35 % 0x64u];
        v10 = &v34->i8[10];
      }
      else
      {
        v10 = (char *)std::__itoa::__base_10_u32[abi:nn180100](v19, a1);
      }
    }
  }
  else if (v23)
  {
    if (v23 == 3)
    {
      v10 = (char *)std::__to_chars_integral[abi:nn180100]<8u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
    }
    else if (v23 == 7)
    {
      v10 = (char *)std::__to_chars_integral[abi:nn180100]<16u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
    }
    else
    {
      v92 = a8 - (_QWORD)v19;
      v93 = std::__to_chars_integral_width[abi:nn180100]<unsigned __int128>(a1, a2, a10);
      v94 = v92 < v93;
      v12 = a4;
      if (!v94)
      {
        v10 = &v19->i8[v93];
        v95 = v10 - 1;
        do
        {
          v96 = __udivti3();
          v97 = __PAIR128__(v14, v15) >= a10;
          *v95-- = a0123456789abcd[v15 - (_DWORD)v96 * a10];
          v15 = v96;
          v14 = v98;
        }
        while (v97);
        v12 = a4;
      }
    }
  }
  else
  {
    v10 = (char *)std::__to_chars_integral[abi:nn180100]<2u,unsigned __int128,0>((uint64_t)v19, a8, a1, a2);
  }
  if ((v16 & 0x40) == 0)
    goto LABEL_82;
  if (!*(_BYTE *)(v13 + 40))
  {
    MEMORY[0x1A1AF4C5C](&v109);
    if (*(_BYTE *)(v13 + 40))
    {
      std::locale::operator=((std::locale *)(v13 + 32), &v109);
    }
    else
    {
      std::locale::locale((std::locale *)(v13 + 32), &v109);
      *(_BYTE *)(v13 + 40) = 1;
    }
    std::locale::~locale(&v109);
  }
  v41 = v10 - (char *)v19;
  std::locale::locale(&v109, (const std::locale *)(v13 + 32));
  v42 = std::locale::use_facet(&v109, MEMORY[0x1E0DE4CC0]);
  std::locale::~locale(&v109);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v42->__vftable[1].__on_zero_shared)(&v109, v42);
  if ((char)v111 < 0)
  {
    locale = (unsigned __int8 *)v109.__locale_;
    v44 = v110;
    if (v110 && v41 > *(char *)v109.__locale_)
    {
      v100 = v42;
      v102 = a5;
      v45 = v109.__locale_;
      goto LABEL_45;
    }
    operator delete(v109.__locale_);
    goto LABEL_81;
  }
  if (!v111 || v41 <= SLOBYTE(v109.__locale_))
  {
LABEL_81:
    v12 = a4;
LABEL_82:
    v64 = HIDWORD(v12);
    v65 = *(uint64_t **)v13;
    if ((v16 & 7) == 4)
    {
      v66 = (int8x16_t *)__src;
      v67 = (char *)v19 - (_BYTE *)__src;
      v69 = v65[1];
      v68 = v65[2];
      if (v68 + (char *)v19 - (_BYTE *)__src >= v69)
      {
        ((void (*)(uint64_t))v65[3])(*v65);
        v66 = (int8x16_t *)__src;
        v68 = 0;
        v65[2] = 0;
        v69 = v65[1];
      }
      v103 = v10;
      v70 = a5;
      v71 = v67 - v69;
      if (v67 >= v69)
      {
        if (v69)
          memmove((void *)(*v65 + v68), __src, v69);
        v65[2] = v69;
        ((void (*)(uint64_t, size_t, uint64_t))v65[3])(*v65, v69, v65[4]);
        v65[2] = 0;
        if (v71)
        {
          v74 = (char *)__src + v69;
          do
          {
            if (v65[1] >= v71)
              v75 = v71;
            else
              v75 = v65[1];
            if (v75)
              memmove((void *)*v65, v74, v75);
            v65[2] = v75;
            v74 += v75;
            v71 -= v75;
            ((void (*)(uint64_t, size_t, uint64_t))v65[3])(*v65, v75, v65[4]);
            v65[2] = 0;
          }
          while (v71);
        }
      }
      else
      {
        if (v19 != v66)
        {
          memmove((void *)(*v65 + v68), v66, v67);
          v68 = v65[2];
        }
        v65[2] = v68 + v67;
      }
      LODWORD(v12) = a4;
      v73 = a4 & 0xF8 | 3;
      if ((int)v64 >= (int)v67)
        v76 = v67;
      else
        v76 = v64;
      v64 = (v64 - v76);
      v65 = *(uint64_t **)v13;
      v72 = 48;
      a5 = v70;
      v10 = v103;
    }
    else
    {
      v72 = BYTE4(a5);
      v73 = v12;
      v19 = (int8x16_t *)__src;
    }
    v77 = v12 & 0xFFFFFF00 | (v64 << 32) | v73;
    v78 = a5 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v72 << 32);
    if ((v12 & 0xFF00) == 0x700)
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19, v10, v65, v77);
    else
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v19->i8, v10 - (char *)v19, v65, v77, v78, v10 - (char *)v19);
    return v65;
  }
  v100 = v42;
  v102 = a5;
  locale = (unsigned __int8 *)&v109;
  v45 = v109.__locale_;
  v44 = v110;
LABEL_45:
  v99 = *(uint64_t **)v13;
  __p = 0;
  v107 = 0;
  v108 = 0;
  v46 = (char *)v45 + v44;
  v47 = (char *)&v109 + v111;
  if ((v111 & 0x80u) != 0)
    v47 = v46;
  v48 = (char)*locale;
  v49 = *locale;
  v50 = v41 - v48;
  if (v41 <= v48)
  {
    v81 = 0;
    v80 = v49 + v50;
    v82 = v102;
    goto LABEL_111;
  }
  v51 = v47 - 1;
  do
  {
    if ((SHIBYTE(v108) & 0x80000000) == 0)
    {
      if (HIBYTE(v108) != 22)
      {
        v53 = HIBYTE(v108);
        HIBYTE(v108) = (HIBYTE(v108) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_72;
      }
      v52 = &__p;
      v53 = 22;
LABEL_57:
      if (v53 + 1 > 2 * v53)
        v55 = v53 + 1;
      else
        v55 = 2 * v53;
      v56 = (v55 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v56 = v55 | 7;
      if (v55 >= 0x17)
        v54 = v56 + 1;
      else
        v54 = 23;
LABEL_65:
      v57 = (char *)operator new(v54);
      p_p = v57;
      if (!v53 || (memmove(v57, v52, v53), v53 != 22))
        operator delete(v52);
      __p = p_p;
      v108 = v54 | 0x8000000000000000;
      goto LABEL_71;
    }
    v53 = (v108 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v107 == v53)
    {
      if ((v108 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_144;
      v52 = __p;
      v54 = 0x7FFFFFFFFFFFFFF7;
      if (v53 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_65;
      goto LABEL_57;
    }
    p_p = (char *)__p;
    v53 = v107;
LABEL_71:
    v107 = v53 + 1;
LABEL_72:
    v59 = &p_p[v53];
    *v59 = v49;
    v59[1] = 0;
    if (locale == (unsigned __int8 *)v51)
    {
      v49 = *v51;
      locale = (unsigned __int8 *)v51;
    }
    else
    {
      v60 = (char *)(locale + 1);
      v61 = (char *)(locale + 1);
      do
      {
        v62 = *v61++;
        v49 = v62;
        if (v62)
          v63 = 1;
        else
          v63 = v60 == v51;
        v60 = v61;
      }
      while (!v63);
      locale = (unsigned __int8 *)(v61 - 1);
    }
    v50 -= v49;
  }
  while (v50 > 0);
  v80 = v49 + v50;
  if (SHIBYTE(v108) < 0)
  {
    v84 = (v108 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v82 = v102;
    if (v107 == v84)
    {
      if ((v108 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_144:
        abort();
      v83 = __p;
      v86 = 0x7FFFFFFFFFFFFFF7;
      if (v84 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_115:
        if (v84 + 1 > 2 * v84)
          v87 = v84 + 1;
        else
          v87 = 2 * v84;
        v88 = (v87 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v87 | 7) != 0x17)
          v88 = v87 | 7;
        if (v87 >= 0x17)
          v86 = v88 + 1;
        else
          v86 = 23;
      }
      v89 = (char *)operator new(v86);
      v85 = v89;
      if (!v84 || (memmove(v89, v83, v84), v84 != 22))
        operator delete(v83);
      __p = v85;
      v108 = v86 | 0x8000000000000000;
    }
    else
    {
      v85 = (char *)__p;
      v84 = v107;
    }
    v107 = v84 + 1;
  }
  else
  {
    v81 = HIBYTE(v108);
    v82 = v102;
    if (HIBYTE(v108) == 22)
    {
      v83 = &__p;
      v84 = 22;
      goto LABEL_115;
    }
LABEL_111:
    v84 = v81;
    HIBYTE(v108) = (v81 + 1) & 0x7F;
    v85 = (char *)&__p;
  }
  v90 = &v85[v84];
  *v90 = v80;
  v90[1] = 0;
  v91 = ((uint64_t (*)(const std::locale::facet *))v100->__vftable[1].~facet_0)(v100);
  v65 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v99, (int8x16_t *)__src, v19, (int)v10, (uint64_t *)&__p, v91, a4, v82);
  if (SHIBYTE(v108) < 0)
    operator delete(__p);
  if ((char)v111 < 0)
    operator delete(v109.__locale_);
  return v65;
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  BOOL v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  __int128 v16;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = 128 - v4;
  if (a2 - a1 < v6)
    return a2;
  v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x11)
  {
    v10 = a3;
    v13 = a4;
    v9 = v8;
  }
  else
  {
    v9 = a1 + v6;
    do
    {
      *((_QWORD *)&v11 + 1) = a4;
      *(_QWORD *)&v11 = a3;
      v10 = v11 >> 4;
      v12 = a3 <= 0x10F;
      v13 = a4 >> 4;
      *(_DWORD *)(v9 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v9 -= 4;
      a3 = v10;
      a4 >>= 4;
    }
    while (!v12);
  }
  v14 = (_BYTE *)(v9 - 1);
  do
  {
    v15 = v10 & 1;
    v12 = v10 <= 1;
    *((_QWORD *)&v16 + 1) = v13;
    *(_QWORD *)&v16 = v10;
    v10 = v16 >> 1;
    v13 >>= 1;
    *v14-- = a01_0[v15];
  }
  while (!v12);
  return v8;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  _BYTE *v12;
  unint64_t v13;
  BOOL v14;
  __int128 v15;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = (-126 - v4) / 3u;
  if (a2 - a1 < v6)
    return a2;
  v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x41)
  {
    v10 = a3;
    v9 = v8;
  }
  else
  {
    v9 = a1 + v6;
    do
    {
      *((_QWORD *)&v11 + 1) = a4;
      *(_QWORD *)&v11 = a3;
      v10 = v11 >> 6;
      a4 >>= 6;
      *(_WORD *)(v9 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v9 -= 2;
      a3 = v10;
    }
    while (v10 > 0x40);
  }
  v12 = (_BYTE *)(v9 - 1);
  do
  {
    v13 = v10 & 7;
    v14 = v10 <= 7;
    *((_QWORD *)&v15 + 1) = a4;
    *(_QWORD *)&v15 = v10;
    v10 = v15 >> 3;
    a4 >>= 3;
    *v12-- = a01234567[v13];
  }
  while (!v14);
  return v8;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned __int128,0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  _BYTE *v12;
  unint64_t v13;
  BOOL v14;
  __int128 v15;

  v4 = __clz(a3 | 1) | 0x40;
  v5 = __clz(a4);
  if (a4)
    v4 = v5;
  v6 = (131 - v4) >> 2;
  if (a2 - a1 < v6)
    return a2;
  v8 = a1 + v6;
  if (__PAIR128__(a4, a3) < 0x101)
  {
    v10 = a3;
    v9 = v8;
  }
  else
  {
    v9 = a1 + v6;
    do
    {
      *((_QWORD *)&v11 + 1) = a4;
      *(_QWORD *)&v11 = a3;
      v10 = v11 >> 8;
      a4 >>= 8;
      *(_WORD *)(v9 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v9 -= 2;
      a3 = v10;
    }
    while (v10 > 0x100);
  }
  v12 = (_BYTE *)(v9 - 1);
  do
  {
    v13 = v10 & 0xF;
    v14 = v10 <= 0xF;
    *((_QWORD *)&v15 + 1) = a4;
    *(_QWORD *)&v15 = v10;
    v10 = v15 >> 4;
    a4 >>= 4;
    *v12-- = a0123456789abcd_0[v13];
  }
  while (!v14);
  return v8;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned __int128>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;

  if (__PAIR128__(a2, a1) < a3)
    return 1;
  v5 = 0;
  v6 = a3 * a3;
  v7 = a3 * a3 * a3;
  while (1)
  {
    if (__PAIR128__(a2, a1) < v6)
      return v5 | 2u;
    if (__PAIR128__(a2, a1) < v7)
      return v5 | 3u;
    if (__PAIR128__(a2, a1) < v6 * v6)
      break;
    a1 = __udivti3();
    v5 += 4;
    if (__PAIR128__(a2, a1) < a3)
      return v5 | 1u;
  }
  return (v5 + 4);
}

uint64_t std::__format_spec::__throw_invalid_option_format_error[abi:nn180100](char *a1, char *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;

  std::string::basic_string[abi:nn180100]<0>(&v7, "The format specifier for ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v8, &v7, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v9, &v8, " does not allow the ");
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, a2);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, " option");
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v11;
  else
    v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v5 = std::__throw_format_error[abi:nn180100]((const char *)v4);
  return std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(v5);
}

void std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

uint64_t *sub_19FF55B4C(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  char v6;
  _BYTE v7[6];

  return std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v6, (uint64_t)v7, 0, 0xAu);
}

uint64_t *std::__formatter::__format_integer[abi:nn180100]<unsigned long long,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, char *a6, uint64_t a7, _BYTE *a8, unsigned int a9)
{
  char v12;
  char v13;
  int v14;
  int8x16_t *v15;
  __int8 v16;
  unsigned __int8 *v17;
  int v18;
  char *v19;
  int64_t v20;
  const std::locale::facet *v21;
  unsigned __int8 *locale;
  uint64_t v23;
  std::locale::__imp *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  void *v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *p_p;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  uint64_t *v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  size_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  char *v51;
  char *v52;
  size_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  char v58;
  unsigned int v59;
  int v60;
  const std::locale::facet *v61;
  int8x16_t *v62;
  void *v63;
  size_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t *v73;
  const std::locale::facet *v74;
  int v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  void *__src;
  void *__p;
  size_t v81;
  unint64_t v82;
  std::locale v83;
  uint64_t v84;
  unsigned __int8 v85;

  v12 = a3;
  if ((a5 & 1) != 0)
  {
    v13 = 45;
LABEL_7:
    *a6 = v13;
    v15 = (int8x16_t *)(a6 + 1);
    goto LABEL_8;
  }
  v14 = (a3 >> 3) & 3;
  if (v14 == 2)
  {
    v13 = 43;
    goto LABEL_7;
  }
  v15 = (int8x16_t *)a6;
  if (v14 == 3)
  {
    v13 = 32;
    goto LABEL_7;
  }
LABEL_8:
  __src = a6;
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v16 = *a8;
      if (*a8)
      {
        v17 = a8 + 1;
        do
        {
          v15->i8[0] = v16;
          v15 = (int8x16_t *)((char *)v15 + 1);
          v18 = *v17++;
          v16 = v18;
        }
        while (v18);
      }
    }
  }
  v19 = (char *)std::__to_chars_integral[abi:nn180100]<unsigned long long>(v15, a7, a1, a9);
  if ((v12 & 0x40) == 0)
    goto LABEL_62;
  if (!*(_BYTE *)(a2 + 40))
  {
    MEMORY[0x1A1AF4C5C](&v83);
    if (*(_BYTE *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v83);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v83);
      *(_BYTE *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v83);
  }
  v20 = v19 - (char *)v15;
  std::locale::locale(&v83, (const std::locale *)(a2 + 32));
  v21 = std::locale::use_facet(&v83, MEMORY[0x1E0DE4CC0]);
  std::locale::~locale(&v83);
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v21->__vftable[1].__on_zero_shared)(&v83, v21);
  if ((char)v85 < 0)
  {
    locale = (unsigned __int8 *)v83.__locale_;
    v23 = v84;
    if (v84 && v20 > *(char *)v83.__locale_)
    {
      v74 = v21;
      v75 = (int)v19;
      v24 = v83.__locale_;
      goto LABEL_26;
    }
    operator delete(v83.__locale_);
LABEL_62:
    v43 = HIDWORD(a3);
    v44 = *(uint64_t **)a2;
    if ((v12 & 7) == 4)
    {
      v78 = a4;
      v45 = (char *)v15 - (_BYTE *)__src;
      v47 = v44[1];
      v46 = v44[2];
      if (v46 + (char *)v15 - (_BYTE *)__src >= v47)
      {
        ((void (*)(uint64_t))v44[3])(*v44);
        v46 = 0;
        v44[2] = 0;
        v47 = v44[1];
      }
      v48 = v45 - v47;
      v76 = v19;
      if (v45 >= v47)
      {
        v51 = (char *)__src;
        if (v47)
          memmove((void *)(*v44 + v46), __src, v47);
        v44[2] = v47;
        ((void (*)(uint64_t, size_t, uint64_t))v44[3])(*v44, v47, v44[4]);
        v44[2] = 0;
        if (v48)
        {
          v52 = &v51[v47];
          do
          {
            if (v44[1] >= v48)
              v53 = v48;
            else
              v53 = v44[1];
            if (v53)
              memmove((void *)*v44, v52, v53);
            v44[2] = v53;
            v52 += v53;
            v48 -= v53;
            ((void (*)(uint64_t, size_t, uint64_t))v44[3])(*v44, v53, v44[4]);
            v44[2] = 0;
          }
          while (v48);
        }
      }
      else
      {
        if (v15 != __src)
        {
          memmove((void *)(*v44 + v46), __src, v45);
          v46 = v44[2];
        }
        v44[2] = v46 + v45;
      }
      v50 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v45)
        v54 = v45;
      else
        v54 = HIDWORD(a3);
      v43 = (HIDWORD(a3) - v54);
      v44 = *(uint64_t **)a2;
      v49 = 48;
      v19 = v76;
      a4 = v78;
    }
    else
    {
      v49 = BYTE4(a4);
      v50 = a3;
      v15 = (int8x16_t *)__src;
    }
    v55 = a3 & 0xFFFFFF00 | (v43 << 32) | v50;
    v56 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v49 << 32);
    if ((a3 & 0xFF00) == 0x700)
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v15, v19, v44, v55);
    else
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v15->i8, v19 - (char *)v15, v44, v55, v56, v19 - (char *)v15);
    return v44;
  }
  if (!v85 || v20 <= SLOBYTE(v83.__locale_))
    goto LABEL_62;
  v74 = v21;
  v75 = (int)v19;
  locale = (unsigned __int8 *)&v83;
  v24 = v83.__locale_;
  v23 = v84;
LABEL_26:
  v73 = *(uint64_t **)a2;
  __p = 0;
  v81 = 0;
  v82 = 0;
  v25 = (char *)v24 + v23;
  v26 = (char *)&v83 + v85;
  if ((v85 & 0x80u) != 0)
    v26 = v25;
  v27 = (char)*locale;
  v28 = *locale;
  v29 = v20 - v27;
  v77 = a4;
  if (v20 <= v27)
  {
    v59 = 0;
    v58 = v28 + v29;
    v61 = v74;
    v60 = v75;
    v62 = (int8x16_t *)__src;
    goto LABEL_91;
  }
  v30 = v26 - 1;
  do
  {
    if ((SHIBYTE(v82) & 0x80000000) == 0)
    {
      if (HIBYTE(v82) != 22)
      {
        v32 = HIBYTE(v82);
        HIBYTE(v82) = (HIBYTE(v82) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_53;
      }
      v31 = &__p;
      v32 = 22;
LABEL_38:
      if (v32 + 1 > 2 * v32)
        v34 = v32 + 1;
      else
        v34 = 2 * v32;
      v35 = (v34 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v35 = v34 | 7;
      if (v34 >= 0x17)
        v33 = v35 + 1;
      else
        v33 = 23;
LABEL_46:
      v36 = (char *)operator new(v33);
      p_p = v36;
      if (!v32 || (memmove(v36, v31, v32), v32 != 22))
        operator delete(v31);
      __p = p_p;
      v82 = v33 | 0x8000000000000000;
      goto LABEL_52;
    }
    v32 = (v82 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v81 == v32)
    {
      if ((v82 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_114;
      v31 = __p;
      v33 = 0x7FFFFFFFFFFFFFF7;
      if (v32 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_46;
      goto LABEL_38;
    }
    p_p = (char *)__p;
    v32 = v81;
LABEL_52:
    v81 = v32 + 1;
LABEL_53:
    v38 = &p_p[v32];
    *v38 = v28;
    v38[1] = 0;
    if (locale == (unsigned __int8 *)v30)
    {
      v28 = *v30;
      locale = (unsigned __int8 *)v30;
    }
    else
    {
      v39 = (char *)(locale + 1);
      v40 = (char *)(locale + 1);
      do
      {
        v41 = *v40++;
        v28 = v41;
        if (v41)
          v42 = 1;
        else
          v42 = v39 == v30;
        v39 = v40;
      }
      while (!v42);
      locale = (unsigned __int8 *)(v40 - 1);
    }
    v29 -= v28;
  }
  while (v29 > 0);
  v58 = v28 + v29;
  if (SHIBYTE(v82) < 0)
  {
    v64 = (v82 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v61 = v74;
    v60 = v75;
    v62 = (int8x16_t *)__src;
    if (v81 == v64)
    {
      if ((v82 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_114:
        abort();
      v63 = __p;
      v66 = 0x7FFFFFFFFFFFFFF7;
      if (v64 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_95:
        if (v64 + 1 > 2 * v64)
          v67 = v64 + 1;
        else
          v67 = 2 * v64;
        v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v68 = v67 | 7;
        if (v67 >= 0x17)
          v66 = v68 + 1;
        else
          v66 = 23;
      }
      v69 = v66;
      v70 = (char *)operator new(v66);
      v65 = v70;
      if (!v64 || (memmove(v70, v63, v64), v64 != 22))
        operator delete(v63);
      __p = v65;
      v82 = v69 | 0x8000000000000000;
    }
    else
    {
      v65 = (char *)__p;
      v64 = v81;
    }
    v81 = v64 + 1;
  }
  else
  {
    v59 = HIBYTE(v82);
    v61 = v74;
    v60 = v75;
    v62 = (int8x16_t *)__src;
    if (HIBYTE(v82) == 22)
    {
      v63 = &__p;
      v64 = 22;
      goto LABEL_95;
    }
LABEL_91:
    v64 = v59;
    HIBYTE(v82) = (v59 + 1) & 0x7F;
    v65 = (char *)&__p;
  }
  v71 = &v65[v64];
  *v71 = v58;
  v71[1] = 0;
  v72 = ((uint64_t (*)(const std::locale::facet *))v61->__vftable[1].~facet_0)(v61);
  v44 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v73, v62, v15, v60, (uint64_t *)&__p, v72, a3, v77);
  if (SHIBYTE(v82) < 0)
    operator delete(__p);
  if ((char)v85 < 0)
    operator delete(v83.__locale_);
  return v44;
}

void std::__formatter::__format_integer[abi:nn180100]<unsigned int,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }
}

uint64_t *sub_19FF562C4(unsigned int a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, int a6, int a7, int a8, int a9, char a10, char __src, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char v19;
  uint64_t v20;

  return std::__formatter::__format_integer[abi:nn180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(a1, a2, a3, a4, a5, &v19, (uint64_t)&v20, 0, 0xAu);
}

uint64_t *std::__formatter::__format_integer[abi:nn180100]<unsigned int,char *,char,std::basic_format_context<std::back_insert_iterator<std::__format::__output_buffer<char>>,char>>(unsigned int a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, char *__src, uint64_t a7, _BYTE *a8, unsigned int a9)
{
  char *v9;
  int8x16_t *v10;
  unsigned int v14;
  char v15;
  char v16;
  int v17;
  int8x16_t *v18;
  __int8 v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int64_t v26;
  const std::locale::facet *v27;
  unsigned __int8 *locale;
  uint64_t v29;
  std::locale::__imp *v30;
  char *v31;
  char *v32;
  int64_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  void *v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *p_p;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  size_t v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  char *v59;
  size_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  char v65;
  unsigned int v66;
  int v67;
  int8x16_t *v68;
  void *v69;
  size_t v70;
  char *v71;
  size_t v72;
  unint64_t v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  int v80;
  char *v81;
  BOOL v82;
  uint64_t *v83;
  int v84;
  int8x16_t *v85;
  const std::locale::facet *v86;
  unint64_t v87;
  void *__p;
  size_t v89;
  unint64_t v90;
  std::locale v91;
  uint64_t v92;
  unsigned __int8 v93;

  v9 = (char *)a7;
  v10 = (int8x16_t *)__src;
  v14 = a1;
  v15 = a3;
  if ((a5 & 1) != 0)
  {
    v16 = 45;
LABEL_7:
    *__src = v16;
    v18 = (int8x16_t *)(__src + 1);
    goto LABEL_8;
  }
  v17 = (a3 >> 3) & 3;
  if (v17 == 2)
  {
    v16 = 43;
    goto LABEL_7;
  }
  v18 = (int8x16_t *)__src;
  if (v17 == 3)
  {
    v16 = 32;
    goto LABEL_7;
  }
LABEL_8:
  if ((a3 & 0x20) != 0)
  {
    if (a8)
    {
      v19 = *a8;
      if (*a8)
      {
        v20 = a8 + 1;
        do
        {
          v18->i8[0] = v19;
          v18 = (int8x16_t *)((char *)v18 + 1);
          v21 = *v20++;
          v19 = v21;
        }
        while (v21);
      }
    }
  }
  HIDWORD(v23) = a9;
  LODWORD(v23) = a9 - 2;
  v22 = v23 >> 1;
  switch(v22)
  {
    case 4:
      if (a7 - (uint64_t)v18 > 9
        || (v24 = (1233 * (32 - __clz(a1 | 1))) >> 12,
            a7 - (uint64_t)v18 >= (((__PAIR64__(v24, a1) - std::__itoa::__pow10_32[v24]) >> 32) + 1)))
      {
        v25 = (uint64_t)std::__itoa::__base_10_u32[abi:nn180100](v18, a1);
LABEL_17:
        v9 = (char *)v25;
      }
      break;
    case 0:
      v25 = std::__to_chars_integral[abi:nn180100]<2u,unsigned int,0>((uint64_t)v18, a7, a1);
      goto LABEL_17;
    case 3:
      v25 = std::__to_chars_integral[abi:nn180100]<8u,unsigned int,0>((uint64_t)v18, a7, a1);
      goto LABEL_17;
    case 7:
      v25 = std::__to_chars_integral[abi:nn180100]<16u,unsigned int,0>((uint64_t)v18, a7, a1);
      goto LABEL_17;
    default:
      v79 = a7 - (_QWORD)v18;
      v80 = std::__to_chars_integral_width[abi:nn180100]<unsigned int>(a1, a9);
      if (v79 >= v80)
      {
        v9 = &v18->i8[v80];
        v81 = v9 - 1;
        do
        {
          *v81-- = a0123456789abcd[v14 - v14 / a9 * a9];
          v82 = v14 >= a9;
          v14 /= a9;
        }
        while (v82);
      }
      break;
  }
  if ((v15 & 0x40) == 0)
    goto LABEL_67;
  if (!*(_BYTE *)(a2 + 40))
  {
    MEMORY[0x1A1AF4C5C](&v91);
    if (*(_BYTE *)(a2 + 40))
    {
      std::locale::operator=((std::locale *)(a2 + 32), &v91);
    }
    else
    {
      std::locale::locale((std::locale *)(a2 + 32), &v91);
      *(_BYTE *)(a2 + 40) = 1;
    }
    std::locale::~locale(&v91);
  }
  v26 = v9 - (char *)v18;
  std::locale::locale(&v91, (const std::locale *)(a2 + 32));
  v27 = std::locale::use_facet(&v91, MEMORY[0x1E0DE4CC0]);
  std::locale::~locale(&v91);
  v86 = v27;
  ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v27->__vftable[1].__on_zero_shared)(&v91, v27);
  if ((char)v93 < 0)
  {
    v85 = v10;
    locale = (unsigned __int8 *)v91.__locale_;
    v29 = v92;
    if (v92 && v26 > *(char *)v91.__locale_)
    {
      v84 = (int)v9;
      v30 = v91.__locale_;
      goto LABEL_31;
    }
    operator delete(v91.__locale_);
    v10 = v85;
LABEL_67:
    v50 = HIDWORD(a3);
    v51 = *(uint64_t **)a2;
    if ((v15 & 7) == 4)
    {
      v87 = a4;
      v52 = (char *)v18 - (char *)v10;
      v54 = v51[1];
      v53 = v51[2];
      v55 = v9;
      if (v53 + (char *)v18 - (char *)v10 >= v54)
      {
        ((void (*)(uint64_t))v51[3])(*v51);
        v53 = 0;
        v51[2] = 0;
        v54 = v51[1];
      }
      v56 = v52 - v54;
      if (v52 >= v54)
      {
        if (v54)
          memmove((void *)(*v51 + v53), v10, v54);
        v51[2] = v54;
        ((void (*)(uint64_t, size_t, uint64_t))v51[3])(*v51, v54, v51[4]);
        v51[2] = 0;
        if (v56)
        {
          v59 = &v10->i8[v54];
          do
          {
            if (v51[1] >= v56)
              v60 = v56;
            else
              v60 = v51[1];
            if (v60)
              memmove((void *)*v51, v59, v60);
            v51[2] = v60;
            v59 += v60;
            v56 -= v60;
            ((void (*)(uint64_t, size_t, uint64_t))v51[3])(*v51, v60, v51[4]);
            v51[2] = 0;
          }
          while (v56);
        }
      }
      else
      {
        if (v18 != v10)
        {
          memmove((void *)(*v51 + v53), v10, (char *)v18 - (char *)v10);
          v53 = v51[2];
        }
        v51[2] = v53 + v52;
      }
      v58 = a3 & 0xF8 | 3;
      if (SHIDWORD(a3) >= (int)v52)
        v61 = v52;
      else
        v61 = HIDWORD(a3);
      v50 = (HIDWORD(a3) - v61);
      v51 = *(uint64_t **)a2;
      v57 = 48;
      a4 = v87;
      v9 = v55;
    }
    else
    {
      v57 = BYTE4(a4);
      v58 = a3;
      v18 = v10;
    }
    v62 = a3 & 0xFFFFFF00 | (v50 << 32) | v58;
    v63 = a4 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v57 << 32);
    if ((a3 & 0xFF00) == 0x700)
      std::__formatter::__write_transformed[abi:nn180100]<char *,char,char,char (*)(char),std::back_insert_iterator<std::__format::__output_buffer<char>>>(v18, v9, v51, v62);
    else
      std::__formatter::__write[abi:nn180100]<char,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>(v18->i8, v9 - (char *)v18, v51, v62, v63, v9 - (char *)v18);
    return v51;
  }
  if (!v93 || v26 <= SLOBYTE(v91.__locale_))
    goto LABEL_67;
  v84 = (int)v9;
  v85 = v10;
  locale = (unsigned __int8 *)&v91;
  v30 = v91.__locale_;
  v29 = v92;
LABEL_31:
  v83 = *(uint64_t **)a2;
  __p = 0;
  v89 = 0;
  v90 = 0;
  v31 = (char *)v30 + v29;
  v32 = (char *)&v91 + v93;
  if ((v93 & 0x80u) != 0)
    v32 = v31;
  v33 = (char)*locale;
  v34 = *locale;
  v35 = v26 <= v33;
  v36 = v26 - v33;
  v87 = a4;
  if (v35)
  {
    v66 = 0;
    v65 = v34 + v36;
    v67 = v84;
    v68 = v85;
    goto LABEL_96;
  }
  v37 = v32 - 1;
  do
  {
    if ((SHIBYTE(v90) & 0x80000000) == 0)
    {
      if (HIBYTE(v90) != 22)
      {
        v39 = HIBYTE(v90);
        HIBYTE(v90) = (HIBYTE(v90) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_58;
      }
      v38 = &__p;
      v39 = 22;
LABEL_43:
      if (v39 + 1 > 2 * v39)
        v41 = v39 + 1;
      else
        v41 = 2 * v39;
      v42 = (v41 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17)
        v42 = v41 | 7;
      if (v41 >= 0x17)
        v40 = v42 + 1;
      else
        v40 = 23;
LABEL_51:
      v43 = (char *)operator new(v40);
      p_p = v43;
      if (!v39 || (memmove(v43, v38, v39), v39 != 22))
        operator delete(v38);
      __p = p_p;
      v90 = v40 | 0x8000000000000000;
      goto LABEL_57;
    }
    v39 = (v90 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v89 == v39)
    {
      if ((v90 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        goto LABEL_129;
      v38 = __p;
      v40 = 0x7FFFFFFFFFFFFFF7;
      if (v39 >= 0x3FFFFFFFFFFFFFF3)
        goto LABEL_51;
      goto LABEL_43;
    }
    p_p = (char *)__p;
    v39 = v89;
LABEL_57:
    v89 = v39 + 1;
LABEL_58:
    v45 = &p_p[v39];
    *v45 = v34;
    v45[1] = 0;
    if (locale == (unsigned __int8 *)v37)
    {
      v34 = *v37;
      locale = (unsigned __int8 *)v37;
    }
    else
    {
      v46 = (char *)(locale + 1);
      v47 = (char *)(locale + 1);
      do
      {
        v48 = *v47++;
        v34 = v48;
        if (v48)
          v49 = 1;
        else
          v49 = v46 == v37;
        v46 = v47;
      }
      while (!v49);
      locale = (unsigned __int8 *)(v47 - 1);
    }
    v36 -= v34;
  }
  while (v36 > 0);
  v65 = v34 + v36;
  if (SHIBYTE(v90) < 0)
  {
    v70 = (v90 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v67 = v84;
    v68 = v85;
    if (v89 == v70)
    {
      if ((v90 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_129:
        abort();
      v69 = __p;
      v72 = 0x7FFFFFFFFFFFFFF7;
      if (v70 < 0x3FFFFFFFFFFFFFF3)
      {
LABEL_100:
        if (v70 + 1 > 2 * v70)
          v73 = v70 + 1;
        else
          v73 = 2 * v70;
        v74 = (v73 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v73 | 7) != 0x17)
          v74 = v73 | 7;
        if (v73 >= 0x17)
          v72 = v74 + 1;
        else
          v72 = 23;
      }
      v75 = v72;
      v76 = (char *)operator new(v72);
      v71 = v76;
      if (!v70 || (memmove(v76, v69, v70), v70 != 22))
        operator delete(v69);
      __p = v71;
      v90 = v75 | 0x8000000000000000;
    }
    else
    {
      v71 = (char *)__p;
      v70 = v89;
    }
    v89 = v70 + 1;
  }
  else
  {
    v66 = HIBYTE(v90);
    v67 = v84;
    v68 = v85;
    if (HIBYTE(v90) == 22)
    {
      v69 = &__p;
      v70 = 22;
      goto LABEL_100;
    }
LABEL_96:
    v70 = v66;
    HIBYTE(v90) = (v66 + 1) & 0x7F;
    v71 = (char *)&__p;
  }
  v77 = &v71[v70];
  *v77 = v65;
  v77[1] = 0;
  v78 = ((uint64_t (*)(const std::locale::facet *))v86->__vftable[1].~facet_0)(v86);
  v51 = std::__formatter::__write_using_decimal_separators[abi:nn180100]<std::back_insert_iterator<std::__format::__output_buffer<char>>,char *,char>(v83, v68, v18, v67, (uint64_t *)&__p, v78, a3, v87);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  if ((char)v93 < 0)
    operator delete(v91.__locale_);
  return v51;
}

uint64_t std::__to_chars_integral[abi:nn180100]<2u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  _BYTE *v9;

  v3 = 32 - __clz(a3 | 1);
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x11)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 4;
      *(_DWORD *)(v6 - 4) = std::__itoa::__base_2_lut[a3 & 0xF];
      v6 -= 4;
      v8 = a3 > 0x10F;
      a3 >>= 4;
    }
    while (v8);
  }
  v9 = (_BYTE *)(v6 - 1);
  do
  {
    *v9-- = a01_0[v7 & 1];
    v8 = v7 > 1;
    v7 >>= 1;
  }
  while (v8);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<8u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  BOOL v9;

  v3 = (86 * (34 - __clz(a3 | 1))) >> 8;
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x41)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 6;
      *(_WORD *)(v6 - 2) = std::__itoa::__base_8_lut[a3 & 0x3F];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x40);
  }
  v8 = (_BYTE *)(v6 - 1);
  do
  {
    *v8-- = a01234567[v7 & 7];
    v9 = v7 > 7;
    v7 >>= 3;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral[abi:nn180100]<16u,unsigned int,0>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  BOOL v9;

  v3 = (35 - __clz(a3 | 1)) >> 2;
  if (a2 - a1 < v3)
    return a2;
  v5 = a1 + v3;
  if (a3 < 0x101)
  {
    v7 = a3;
    v6 = v5;
  }
  else
  {
    v6 = a1 + v3;
    do
    {
      v7 = a3 >> 8;
      *(_WORD *)(v6 - 2) = *(_WORD *)&std::__itoa::__base_16_lut[2 * a3];
      v6 -= 2;
      a3 = v7;
    }
    while (v7 > 0x100);
  }
  v8 = (_BYTE *)(v6 - 1);
  do
  {
    *v8-- = a0123456789abcd_0[v7 & 0xF];
    v9 = v7 > 0xF;
    v7 >>= 4;
  }
  while (v9);
  return v5;
}

uint64_t std::__to_chars_integral_width[abi:nn180100]<unsigned int>(unsigned int a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (a1 < a2)
    return 1;
  v3 = 0;
  v4 = a2 * a2;
  v5 = v4 * v4;
  while (1)
  {
    if (a1 < v4)
      return v3 | 2u;
    if (a1 < a2 * a2 * a2)
      return v3 | 3u;
    if (a1 < v5)
      break;
    a1 /= v5;
    v3 += 4;
    if (a1 < a2)
      return v3 | 1u;
  }
  return (v3 + 4);
}

void std::vector<ecs2::ModuleBucketDescriptor>::__init_with_size[abi:nn180100]<ecs2::ModuleBucketDescriptor*,ecs2::ModuleBucketDescriptor*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;

  if (a4)
  {
    if (a4 >> 57)
      abort();
    v7 = a4 << 7;
    v8 = operator new(a4 << 7);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = (char *)v8 + v7;
    if (a2 != a3)
    {
      v9 = a2 + 1;
      do
      {
        *(_WORD *)v8 = *((_WORD *)v9 - 4);
        ecs2::ModuleBucketExecutionDescriptor::ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v8 + 1), (const ecs2::ModuleBucketExecutionDescriptor *)v9);
        v8[11] = 0;
        v8[12] = 0;
        v8[10] = 0;
        std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v8 + 10, v9[9], v9[10], (v9[10] - v9[9]) >> 6);
        v8[13] = 0;
        v8[14] = 0;
        v10 = v8 + 13;
        v10[2] = 0;
        std::vector<ecs2::UtlityTaskDescriptor>::__init_with_size[abi:nn180100]<ecs2::UtlityTaskDescriptor*,ecs2::UtlityTaskDescriptor*>(v10, v9[12], v9[13], (v9[13] - v9[12]) >> 6);
        v8 = v10 + 3;
        v11 = v9 + 15;
        v9 += 16;
      }
      while (v11 != a3);
    }
    a1[1] = v8;
  }
}

void gdc::UnmanagedObjectHolder<ecs2::Runtime>::~UnmanagedObjectHolder()
{
  JUMPOUT(0x1A1AF4E00);
}

void gdc::UnmanagedObjectHolder<ecs2::Runtime>::extract(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned __int8 *gdc::LayerDataRequestKey::LayerDataRequestKey(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int16 a3, uint64_t a4, int a5)
{
  unsigned __int16 *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  _BYTE *v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[5];

  *a1 = a2;
  v9 = (unsigned __int16 *)(a1 + 8);
  v10 = v48;
  v44 = v48;
  v45 = (char *)v48;
  v46 = v48;
  v47 = 32;
  v11 = *(char **)a4;
  v12 = *(char **)(a4 + 8);
  v13 = (unint64_t)&v12[-*(_QWORD *)a4];
  if (v13 >= 0x21)
  {
    if (v13 <= 0x40)
      v14 = 64;
    else
      v14 = (size_t)&v12[-*(_QWORD *)a4];
    v10 = malloc_type_malloc(v14, 0x100004077774924uLL);
    v15 = (char *)v44;
    v16 = v45;
    if (v44 == v45)
      goto LABEL_21;
    v17 = v45 - (_BYTE *)v44;
    if ((unint64_t)(v45 - (_BYTE *)v44) < 8)
    {
      v18 = v10;
      goto LABEL_20;
    }
    v18 = v10;
    if ((unint64_t)((char *)v10 - (_BYTE *)v44) < 0x20)
      goto LABEL_20;
    if (v17 >= 0x20)
    {
      v19 = v17 & 0xFFFFFFFFFFFFFFE0;
      v20 = (__int128 *)((char *)v44 + 16);
      v21 = v10 + 2;
      v22 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = *v20;
        *(v21 - 1) = *(v20 - 1);
        *v21 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      if (v17 == v19)
        goto LABEL_21;
      if ((v17 & 0x18) == 0)
      {
        v15 += v19;
        v18 = (char *)v10 + v19;
        goto LABEL_20;
      }
    }
    else
    {
      v19 = 0;
    }
    v24 = v17 & 0xFFFFFFFFFFFFFFF8;
    v18 = (char *)v10 + (v17 & 0xFFFFFFFFFFFFFFF8);
    v25 = v19 - (v17 & 0xFFFFFFFFFFFFFFF8);
    v26 = &v15[v19];
    v27 = (_QWORD *)((char *)v10 + v19);
    do
    {
      v28 = *(_QWORD *)v26;
      v26 += 8;
      *v27++ = v28;
      v25 += 8;
    }
    while (v25);
    if (v17 == v24)
      goto LABEL_21;
    v15 += v24;
    do
    {
LABEL_20:
      v29 = *v15++;
      *v18++ = v29;
    }
    while (v15 != v16);
LABEL_21:
    v44 = v10;
    v45 = (char *)v10;
    v47 = v14;
  }
  if (v11 == v12)
    goto LABEL_40;
  if (v13 < 8)
  {
    v31 = v10;
    goto LABEL_38;
  }
  if ((unint64_t)((char *)v10 - v11) < 0x20)
  {
    v31 = v10;
    goto LABEL_38;
  }
  if (v13 >= 0x20)
  {
    v30 = v13 & 0xFFFFFFFFFFFFFFE0;
    v32 = (__int128 *)(v11 + 16);
    v33 = v10 + 2;
    v34 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v35 = *v32;
      *(v33 - 1) = *(v32 - 1);
      *v33 = v35;
      v32 += 2;
      v33 += 2;
      v34 -= 32;
    }
    while (v34);
    if (v13 == v30)
      goto LABEL_39;
    if ((v13 & 0x18) == 0)
    {
      v11 += v30;
      v31 = (char *)v10 + v30;
      goto LABEL_38;
    }
  }
  else
  {
    v30 = 0;
  }
  v36 = v13 & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)v10 + (v13 & 0xFFFFFFFFFFFFFFF8);
  v37 = v30 - (v13 & 0xFFFFFFFFFFFFFFF8);
  v38 = (uint64_t *)&v11[v30];
  v39 = (_QWORD *)((char *)v10 + v30);
  do
  {
    v40 = *v38++;
    *v39++ = v40;
    v37 += 8;
  }
  while (v37);
  if (v13 == v36)
    goto LABEL_39;
  v11 += v36;
  do
  {
LABEL_38:
    v41 = *v11++;
    *v31++ = v41;
  }
  while (v11 != v12);
LABEL_39:
  v10 = v45;
LABEL_40:
  v42 = *(_QWORD *)(a4 + 64);
  v45 = (char *)v10 + v13;
  v48[4] = v42;
  gdc::LayerDataKey::LayerDataKey(v9, a3, (uint64_t)&v44);
  if (v44 != v46)
    free(v44);
  a1[96] = 1;
  *((_DWORD *)a1 + 25) = a5;
  *((_QWORD *)a1 + 13) = (*((_QWORD *)a1 + 11)
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
                        - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  return a1;
}

char *gdc::LayerDataRequestKey::keyData(gdc::LayerDataRequestKey *this, _QWORD *a2)
{
  char *result;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;

  result = (char *)this + 32;
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = result;
  *((_QWORD *)this + 2) = result;
  *((_QWORD *)this + 3) = 32;
  v5 = (char *)a2[2];
  v6 = (char *)a2[3];
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    result = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)this;
    v10 = (char *)*((_QWORD *)this + 1);
    if (*(char **)this == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = result;
      goto LABEL_20;
    }
    v12 = result;
    if ((unint64_t)(result - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = result + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &result[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &result[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &result[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)this = result;
    *((_QWORD *)this + 1) = result;
    *((_QWORD *)this + 3) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = result;
      goto LABEL_38;
    }
    if ((unint64_t)(result - v5) < 0x20)
    {
      v25 = result;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = result + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &result[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &result[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &result[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    result = (char *)*((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 1) = &result[v7];
  *((_QWORD *)this + 8) = a2[10];
  return result;
}

void gdc::LayerDataRequestKey::createDebugNode(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[7];
  int v11;
  __int128 v12;
  char v13;
  void *v14;
  char v15;
  void **v16;
  void *__p;
  void *v18;
  _QWORD v19[7];
  int v20;

  strcpy((char *)a1, "Layer Data Key");
  *(_WORD *)(a1 + 23) = 14;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_BYTE *)(a1 + 95) = 0;
  v13 = 12;
  strcpy((char *)&v12, "Request Type");
  v5 = (unsigned __int16 *)(a2 + 8);
  v4 = *a2;
  v20 = 0;
  memset(&v19[4], 0, 24);
  v19[0] = v4;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)&v12, (uint64_t)v19);
  gdc::LayerDataKey::createDebugNode((uint64_t)&v12, v5);
  gdc::DebugTreeNode::addChildNode((_QWORD *)a1, &v12);
  v6 = __p;
  if (__p)
  {
    v7 = (uint64_t)v18;
    v8 = __p;
    if (v18 != __p)
    {
      do
      {
        v7 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v7);
      }
      while ((void *)v7 != v6);
      v8 = __p;
    }
    v18 = v6;
    operator delete(v8);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v16);
  if (v15 < 0)
  {
    operator delete(v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete((void *)v12);
LABEL_8:
  v13 = 8;
  strcpy((char *)&v12, "Priority");
  if (a2[96])
    v9 = *((unsigned int *)a2 + 25);
  else
    v9 = 0xFFFFFFFFLL;
  v11 = 1;
  memset(&v10[4], 0, 24);
  v10[1] = v9;
  gdc::DebugTreeNode::addProperty(a1, (uint64_t)&v12, (uint64_t)v10);
}

void gdc::tf::Executor::consumeGraph(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32[2];
  void *v33[2];
  int v34;
  uint64_t **v35;
  __int128 __p;
  __int128 v37;
  int64x2_t v38;
  void *v39[2];
  void *v40[2];
  int v41;
  unint64_t v42;

  *(_OWORD *)v39 = 0u;
  *(_OWORD *)v40 = 0u;
  v41 = 1065353216;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    goto LABEL_59;
  do
  {
    if (*(_QWORD *)(*v2 + 104) != *(_QWORD *)(*v2 + 112))
      goto LABEL_4;
    v6 = *(_QWORD *)(*v2 + 96);
    if ((std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v39, v6, v6) & 1) == 0)goto LABEL_4;
    v7 = *v2;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)v33 = 0u;
    v34 = 1065353216;
    v35 = a2;
    __p = 0u;
    v37 = 0u;
    v38 = 0u;
    v9 = *a2;
    v8 = a2[1];
    if (*a2 == v8)
    {
      v11 = *a2;
      if (*(_QWORD *)(*v9 + 128) == *(_QWORD *)(*v9 + 136))
        goto LABEL_40;
      goto LABEL_17;
    }
    v10 = *a2;
    while (*(_QWORD *)(*v10 + 96) != v6)
    {
      if (++v10 == v8)
      {
        v10 = a2[1];
        break;
      }
    }
    v11 = *a2;
    if (*(_QWORD *)(*v10 + 128) != *(_QWORD *)(*v10 + 136))
    {
      while (*(_QWORD *)(*v11 + 96) != v6)
      {
        if (++v11 == v8)
        {
          v11 = a2[1];
          break;
        }
      }
LABEL_17:
      v12 = 0;
      v13 = *(_QWORD *)(*v11 + 128);
      if (v9 != v8)
        goto LABEL_20;
LABEL_24:
      while (v13 != *(_QWORD *)(*v8 + 136))
      {
        if (!v12)
        {
          std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity((uint64_t)&__p);
          v12 = v38.i64[0];
        }
        v14 = (_QWORD *)(*((_QWORD *)&__p + 1) + 8 * (v12 >> 8));
        v15 = *v14 + 16 * v12;
        if ((_QWORD)v37 == *((_QWORD *)&__p + 1))
          v16 = 0;
        else
          v16 = v15;
        if (v16 == *v14)
          v16 = *(v14 - 1) + 4096;
        *(_QWORD *)(v16 - 16) = v6;
        *(_QWORD *)(v16 - 8) = v13;
        v38 = vaddq_s64(v38, (int64x2_t)xmmword_19FFB5050);
        v13 += 8;
        v9 = *v35;
        v8 = v35[1];
        v12 = v38.i64[0];
        if (*v35 != v8)
        {
LABEL_20:
          while (*(_QWORD *)(*v9 + 96) != v6)
          {
            if (++v9 == v8)
              goto LABEL_24;
          }
          v8 = v9;
        }
      }
      v42 = v6;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v32, v6, &v42)+ 24) = 1;
      while (1)
      {
        geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::advance((uint64_t)v32);
        if (!v38.i64[1])
          break;
        v17 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                                  + (((unint64_t)v38.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v38.u8[0]
                                      + 8)
                        + 96);
        v19 = *v35;
        v18 = v35[1];
        if (*v35 != v18)
        {
          while (*(_QWORD *)(*v19 + 96) != v17)
          {
            if (++v19 == v18)
            {
              v19 = v35[1];
              break;
            }
          }
        }
        if ((std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v39, v17, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)&__p + 1)+ (((unint64_t)v38.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v38.u8[0]+ 8)+ 96)) & 1) != 0)gdc::tf::Executor::invokeNode(a1, *v19);
      }
    }
LABEL_40:
    v20 = (void **)*((_QWORD *)&__p + 1);
    v21 = (void **)v37;
    v38.i64[1] = 0;
    v22 = v37 - *((_QWORD *)&__p + 1);
    if ((_QWORD)v37 - *((_QWORD *)&__p + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v20);
        v21 = (void **)v37;
        v20 = (void **)(*((_QWORD *)&__p + 1) + 8);
        *((_QWORD *)&__p + 1) = v20;
        v22 = v37 - (_QWORD)v20;
      }
      while ((_QWORD)v37 - (_QWORD)v20 > 0x10uLL);
    }
    v23 = v22 >> 3;
    if (v23 == 1)
    {
      v24 = 128;
    }
    else
    {
      if (v23 != 2)
        goto LABEL_47;
      v24 = 256;
    }
    v38.i64[0] = v24;
LABEL_47:
    if (v20 != v21)
    {
      do
      {
        v25 = *v20++;
        operator delete(v25);
      }
      while (v20 != v21);
      if ((_QWORD)v37 != *((_QWORD *)&__p + 1))
        *(_QWORD *)&v37 = v37 + ((*((_QWORD *)&__p + 1) - v37 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if ((_QWORD)__p)
      operator delete((void *)__p);
    v26 = v33[0];
    if (v33[0])
    {
      do
      {
        v27 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v27;
      }
      while (v27);
    }
    v28 = v32[0];
    v32[0] = 0;
    if (v28)
      operator delete(v28);
    gdc::tf::Executor::invokeNode(a1, v7);
LABEL_4:
    ++v2;
  }
  while (v2 != v3);
  v29 = v40[0];
  if (v40[0])
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
LABEL_59:
  v31 = v39[0];
  v39[0] = 0;
  if (v31)
    operator delete(v31);
}

void geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::advance(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(a1 + 88);
  if (!v1)
    return;
  v3 = a1 + 48;
  do
  {
    v4 = *(void ***)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_QWORD *)(*(*(_QWORD ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1] + 96);
    v7 = *(int8x8_t *)(a1 + 8);
    if (!*(_QWORD *)&v7)
    {
LABEL_51:
      v42 = *(_QWORD *)(*(*(_QWORD ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1, v6, &v42)+ 24) = 1;
      v21 = *(uint64_t **)(a1 + 40);
      v22 = *v21;
      v23 = v21[1];
      v24 = v22;
      if (v22 != v23)
      {
        v24 = v22;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)v24 + 96) == v6)
            goto LABEL_56;
          v24 += 8;
        }
        while (v24 != v23);
        v24 = v23;
      }
LABEL_56:
      v25 = *(_QWORD *)(*(_QWORD *)v24 + 128);
      v26 = (int64x2_t)xmmword_19FFB5050;
LABEL_59:
      v28 = v23;
      if (v22 != v23)
      {
        v28 = v22;
        while (*(_QWORD *)(*(_QWORD *)v28 + 96) != v6)
        {
          v28 += 8;
          if (v28 == v23)
          {
            v28 = v23;
            break;
          }
        }
      }
      if (v25 == *(_QWORD *)(*(_QWORD *)v28 + 136))
        goto LABEL_48;
      v29 = *(int8x8_t *)(a1 + 8);
      if (!*(_QWORD *)&v29)
        goto LABEL_87;
      v30 = *(_QWORD *)(*(_QWORD *)v25 + 96);
      v31 = (uint8x8_t)vcnt_s8(v29);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        v32 = *(_QWORD *)(*(_QWORD *)v25 + 96);
        if (*(_QWORD *)&v29 <= v30)
          v32 = v30 % *(_QWORD *)&v29;
      }
      else
      {
        v32 = (*(_QWORD *)&v29 - 1) & v30;
      }
      v33 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v32);
      if (!v33 || (v34 = *v33) == 0)
      {
LABEL_87:
        v38 = *(_QWORD *)(a1 + 80);
        if (!v38)
        {
          std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity(v3);
          v26 = (int64x2_t)xmmword_19FFB5050;
          v38 = *(_QWORD *)(a1 + 80);
        }
        v39 = *(_QWORD *)(a1 + 56);
        v40 = (_QWORD *)(v39 + 8 * (v38 >> 8));
        v41 = *v40 + 16 * v38;
        if (*(_QWORD *)(a1 + 64) == v39)
          v41 = 0;
        if (v41 == *v40)
          v41 = *(v40 - 1) + 4096;
        *(_QWORD *)(v41 - 16) = v6;
        *(_QWORD *)(v41 - 8) = v25;
        *(int64x2_t *)(a1 + 80) = vaddq_s64(*(int64x2_t *)(a1 + 80), v26);
        v27 = *(uint64_t **)(a1 + 40);
        v22 = *v27;
        v23 = v27[1];
        goto LABEL_58;
      }
      if (v31.u32[0] < 2uLL)
      {
        v35 = *(_QWORD *)&v29 - 1;
        while (1)
        {
          v37 = v34[1];
          if (v37 == v30)
          {
            if (v34[2] == v30)
              goto LABEL_86;
          }
          else if ((v37 & v35) != v32)
          {
            goto LABEL_87;
          }
          v34 = (uint64_t *)*v34;
          if (!v34)
            goto LABEL_87;
        }
      }
      while (1)
      {
        v36 = v34[1];
        if (v36 == v30)
        {
          if (v34[2] == v30)
          {
LABEL_86:
            if (!*((_BYTE *)v34 + 24))
              goto LABEL_87;
LABEL_58:
            v25 += 8;
            goto LABEL_59;
          }
        }
        else
        {
          if (v36 >= *(_QWORD *)&v29)
            v36 %= *(_QWORD *)&v29;
          if (v36 != v32)
            goto LABEL_87;
        }
        v34 = (uint64_t *)*v34;
        if (!v34)
          goto LABEL_87;
      }
    }
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *(_QWORD *)(*(*(_QWORD ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                     + 96);
      if (*(_QWORD *)&v7 <= v6)
        v9 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v9);
    if (!v10)
      goto LABEL_25;
    v11 = *v10;
    if (!v11)
      goto LABEL_25;
    if (v8.u32[0] < 2uLL)
    {
      while (1)
      {
        v13 = v11[1];
        if (v13 == v6)
        {
          if (v11[2] == v6)
            goto LABEL_24;
        }
        else if ((v13 & (*(_QWORD *)&v7 - 1)) != v9)
        {
          goto LABEL_25;
        }
        v11 = (uint64_t *)*v11;
        if (!v11)
          goto LABEL_25;
      }
    }
    while (1)
    {
      v12 = v11[1];
      if (v12 == v6)
        break;
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
      if (v12 != v9)
        goto LABEL_25;
LABEL_13:
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_25;
    }
    if (v11[2] != v6)
      goto LABEL_13;
LABEL_24:
    if (*((_BYTE *)v11 + 24) == 1)
    {
      v42 = *(_QWORD *)(*(*(_QWORD ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1, v6, &v42)+ 24) = 2;
      return;
    }
LABEL_25:
    if (v8.u32[0] > 1uLL)
    {
      v14 = *(_QWORD *)(*(*(_QWORD ***)((char *)v4 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5 + 1]
                      + 96);
      if (*(_QWORD *)&v7 <= v6)
        v14 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v14 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v14);
    if (!v15)
      goto LABEL_51;
    v16 = *v15;
    if (!v16)
      goto LABEL_51;
    if (v8.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v19 = v16[1];
        if (v19 == v6)
        {
          if (v16[2] == v6)
            goto LABEL_45;
        }
        else if ((v19 & v17) != v14)
        {
          goto LABEL_51;
        }
        v16 = (uint64_t *)*v16;
        if (!v16)
          goto LABEL_51;
      }
    }
    while (2)
    {
      v18 = v16[1];
      if (v18 != v6)
      {
        if (v18 >= *(_QWORD *)&v7)
          v18 %= *(_QWORD *)&v7;
        if (v18 != v14)
          goto LABEL_51;
        goto LABEL_34;
      }
      if (v16[2] != v6)
      {
LABEL_34:
        v16 = (uint64_t *)*v16;
        if (!v16)
          goto LABEL_51;
        continue;
      }
      break;
    }
LABEL_45:
    if (*((_BYTE *)v16 + 24) != 2)
      goto LABEL_51;
    --v1;
    v20 = v5 + 1;
    *(_QWORD *)(a1 + 80) = v20;
    *(_QWORD *)(a1 + 88) = v1;
    if (v20 >= 0x200)
    {
      operator delete(*v4);
      *(_QWORD *)(a1 + 56) += 8;
      *(_QWORD *)(a1 + 80) -= 256;
LABEL_48:
      v1 = *(_QWORD *)(a1 + 88);
    }
  }
  while (v1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,geo::graph::views::VisitationState>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  *((_BYTE *)v10 + 24) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2)
            v3 = a2 % v7;
          else
            v3 = a2;
        }
        else
        {
          v3 = (v7 - 1) & a2;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_63:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void std::deque<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem,std::allocator<geo::graph::views::TopologicalSortViewBase<geo::IntrusiveNodeGraph<gdc::tf::TaskData> const>::StackItem>>::__add_front_capacity(uint64_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  BOOL v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;

  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x100)
  {
    *(_QWORD *)(a1 + 32) = v6 + 256;
    v64 = *((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v64);
    return;
  }
  v7 = *(char **)(a1 + 24);
  v8 = *(char **)a1;
  v9 = (uint64_t)&v7[-*(_QWORD *)a1];
  if (v4 >= v9)
  {
    v13 = v9 >> 2;
    if (v7 == v8)
      v14 = 1;
    else
      v14 = v13;
    if (v14 >> 61)
      goto LABEL_69;
    v15 = (char *)operator new(8 * v14);
    v16 = operator new(0x1000uLL);
    if (v14)
    {
      v17 = &v15[8 * v14];
    }
    else
    {
      v34 = (char *)operator new(8uLL);
      v17 = v34 + 8;
      operator delete(v15);
      v2 = *(char **)(a1 + 8);
      v3 = *(char **)(a1 + 16);
      v15 = v34;
    }
    *(_QWORD *)v15 = v16;
    v35 = v15 + 8;
    v36 = v15;
    if (v2 == v3)
    {
      v37 = v15;
      v38 = v15 + 8;
LABEL_30:
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v36;
      *(_QWORD *)(a1 + 8) = v37;
      *(_QWORD *)(a1 + 16) = v38;
      *(_QWORD *)(a1 + 24) = v17;
      if (v38 - v37 == 8)
      {
        *(_QWORD *)(a1 + 32) = 128;
        if (!v39)
          return;
      }
      else
      {
        *(_QWORD *)(a1 + 32) += 256;
        if (!v39)
          return;
      }
      operator delete(v39);
      return;
    }
    while (1)
    {
      if (v35 == v17)
      {
        if (v15 <= v36)
        {
          v47 = (v35 - v36) >> 2;
          if (v35 == v36)
            v47 = 1;
          if (v47 >> 61)
            goto LABEL_69;
          v48 = v47 >> 2;
          v49 = 8 * v47;
          v50 = (char *)operator new(8 * v47);
          v51 = v50;
          v37 = &v50[8 * v48];
          v40 = v37;
          v52 = v35 - v15;
          if (v35 != v15)
          {
            v40 = &v37[v52 & 0xFFFFFFFFFFFFFFF8];
            v53 = v52 - 8;
            if (v53 >= 0x38)
            {
              if ((unint64_t)(&v50[8 * v48] - v15) < 0x20)
              {
                v54 = &v50[8 * v48];
                goto LABEL_55;
              }
              v55 = (v53 >> 3) + 1;
              v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
              v54 = &v37[v56];
              v57 = (__int128 *)(v15 + 16);
              v58 = &v50[8 * v48 + 16];
              v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v60 = *v57;
                *((_OWORD *)v58 - 1) = *(v57 - 1);
                *(_OWORD *)v58 = v60;
                v57 += 2;
                v58 += 32;
                v59 -= 4;
              }
              while (v59);
              if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v15 += v56;
                goto LABEL_55;
              }
            }
            else
            {
              v54 = &v50[8 * v48];
              do
              {
LABEL_55:
                v61 = *(_QWORD *)v15;
                v15 += 8;
                *(_QWORD *)v54 = v61;
                v54 += 8;
              }
              while (v54 != v40);
            }
          }
          v35 = &v50[v49];
          if (v36)
            operator delete(v36);
          v36 = v51;
          goto LABEL_34;
        }
        v42 = (v15 - v36) >> 3;
        if (v42 >= -1)
          v43 = v42 + 1;
        else
          v43 = v42 + 2;
        v44 = v43 >> 1;
        v45 = &v15[-8 * (v43 >> 1)];
        v46 = v35;
        if (v35 != v15)
        {
          memmove(v45, v15, v35 - v15);
          v46 = v15;
        }
        v40 = &v45[v35 - v15];
        v37 = &v46[-8 * v44];
      }
      else
      {
        v37 = v15;
        v40 = v35;
        v35 = v17;
      }
LABEL_34:
      v17 = v35;
      v41 = *(_QWORD *)v2;
      v2 += 8;
      *(_QWORD *)v40 = v41;
      v38 = v40 + 8;
      v35 = v38;
      v15 = v37;
      if (v2 == *(char **)(a1 + 16))
        goto LABEL_30;
    }
  }
  v10 = operator new(0x1000uLL);
  v11 = v10;
  if (v2 != v8)
  {
    *((_QWORD *)v2 - 1) = v10;
    v12 = *(_QWORD *)(a1 + 8) - 8;
    *(_QWORD *)(a1 + 8) = v12;
    goto LABEL_66;
  }
  if (v3 != v7)
    goto LABEL_65;
  v18 = (v3 - v8) >> 2;
  if (v3 == v2)
    v18 = 1;
  if (v18 >> 61)
LABEL_69:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v19 = v18 >> 2;
  v20 = 8 * v18;
  v21 = (char *)operator new(8 * v18);
  v22 = &v21[8 * v19];
  v23 = &v21[v20];
  v24 = v3 == v2;
  v3 = v22;
  if (!v24)
  {
    v3 = &v22[v4 & 0xFFFFFFFFFFFFFFF8];
    v25 = &v21[8 * v19];
    v26 = v2;
    if (v4 - 8 > 0x37)
    {
      v27 = &v21[8 * v19];
      v25 = v27;
      v26 = v2;
      if ((unint64_t)(v27 - v2) >= 0x20)
      {
        v28 = ((v4 - 8) >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v25 = &v22[v29];
        v30 = (__int128 *)(v2 + 16);
        v31 = v27 + 16;
        v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *v30;
          *(v31 - 1) = *(v30 - 1);
          *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
          *(_QWORD *)a1 = v21;
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = v23;
LABEL_64:
          operator delete(v2);
          v3 = *(char **)(a1 + 16);
          goto LABEL_65;
        }
        v26 = &v2[v29];
      }
    }
    do
    {
      v62 = *(_QWORD *)v26;
      v26 += 8;
      *(_QWORD *)v25 = v62;
      v25 += 8;
    }
    while (v25 != v3);
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v23;
  if (v2)
    goto LABEL_64;
LABEL_65:
  *(_QWORD *)v3 = v11;
  v63 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v63 + 1;
  v64 = *v63;
  *(_QWORD *)(a1 + 16) = v63;
  std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v64);
  v12 = *(_QWORD *)(a1 + 8);
LABEL_66:
  if (*(_QWORD *)(a1 + 16) - v12 == 8)
    *(_QWORD *)(a1 + 32) = 128;
  else
    *(_QWORD *)(a1 + 32) += 256;
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::vector<std::__list_iterator<gdc::LayerDataRequestTracker::RequestStatus,void *>>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataRequestKey const&>,std::tuple<>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  const void *v17;
  int v18;
  uint64_t v19;
  const void *v20;
  int v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v49;
  void *__s2;
  uint64_t v51;
  uint64_t v52;

  v6 = *((_QWORD *)a2 + 13);
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((_QWORD *)a2 + 13);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        v12 = *((unsigned __int16 *)a2 + 4);
        v13 = *((_QWORD *)a2 + 10);
        v14 = (const void *)*((_QWORD *)a2 + 2);
        v15 = *((_QWORD *)a2 + 3) - (_QWORD)v14;
        if (v8.u32[0] < 2uLL)
        {
          __s2 = (void *)*((_QWORD *)a2 + 2);
          while (1)
          {
            v19 = v10[1];
            if (v19 == v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                v20 = (const void *)v10[4];
                if (v10[5] - (_QWORD)v20 == v15)
                {
                  v52 = v13;
                  v21 = memcmp(v20, __s2, v15);
                  v13 = v52;
                  if (!v21)
                    return v10;
                }
              }
            }
            else if ((v19 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              v17 = (const void *)v10[4];
              if (v10[5] - (_QWORD)v17 == v15)
              {
                v51 = v13;
                v18 = memcmp(v17, v14, v15);
                v13 = v51;
                if (!v18)
                  return v10;
              }
            }
          }
          else
          {
            if (v16 >= v7)
              v16 %= v7;
            if (v16 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v10 = operator new(0x98uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 3), a3 + 8);
  *((_BYTE *)v10 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v10 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v10 + 112) = 1;
  }
  v10[15] = *(_QWORD *)(a3 + 104);
  v10[16] = 0;
  v10[17] = 0;
  v10[18] = 0;
  v22 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v23 = a1[8];
  if (!v7 || (float)(v23 * (float)v7) < v22)
  {
    v24 = 1;
    if (v7 >= 3)
      v24 = (v7 & (v7 - 1)) != 0;
    v25 = v24 | (2 * v7);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_70;
      v39 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_70:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = (v7 - 1) & v6;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v49 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v49)
          operator delete(v49);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v28 = operator new(8 * prime);
    v29 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30++) = 0;
    while (prime != v30);
    v32 = (uint64_t *)(a1 + 4);
    v31 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v31)
    {
LABEL_69:
      v7 = prime;
      goto LABEL_70;
    }
    v33 = v31[1];
    v34 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v35 = v33 & v34;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v32;
      for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
      {
        v37 = i[1] & v34;
        if (v37 == v35)
        {
          v31 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *v31 = *i;
          v38 = 8 * v37;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v38);
          **(_QWORD **)(*(_QWORD *)a1 + v38) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v31;
          v31 = i;
          v35 = v37;
        }
      }
      goto LABEL_69;
    }
    if (v33 >= prime)
      v33 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v32;
    v42 = (_QWORD *)*v31;
    if (!*v31)
      goto LABEL_69;
    while (1)
    {
      v44 = v42[1];
      if (v44 >= prime)
        v44 %= prime;
      if (v44 != v33)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v31;
          goto LABEL_74;
        }
        *v31 = *v42;
        v43 = 8 * v44;
        *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
        **(_QWORD **)(*(_QWORD *)a1 + v43) = v42;
        v42 = v31;
      }
      v44 = v33;
LABEL_74:
      v31 = v42;
      v42 = (_QWORD *)*v42;
      v33 = v44;
      if (!v42)
        goto LABEL_69;
    }
  }
LABEL_83:
  v45 = *(_QWORD **)a1;
  v46 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v46)
  {
    *v10 = *v46;
LABEL_91:
    *v46 = v10;
    goto LABEL_92;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v45[v3] = a1 + 4;
  if (*v10)
  {
    v47 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v47 >= v7)
        v47 %= v7;
    }
    else
    {
      v47 &= v7 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

uint64_t gdc::tf::TaskflowBuilder::placeholder(gdc::tf::TaskflowBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;

  v2 = *((_QWORD *)this + 3);
  v3 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  v4 = *(_QWORD *)(v2 + 40);
  if (!v4)
  {
    geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(*((uint64_t ***)this + 3));
    v4 = *(_QWORD *)(v2 + 40);
  }
  *(_QWORD *)(v2 + 40) = *(_QWORD *)v4;
  *(_DWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 95) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 96) = v3;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_BYTE **)this;
    v9 = (uint64_t)v6 - *(_QWORD *)this;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v4;
    v7 = v15 + 1;
    if (v6 == (_QWORD *)v8)
    {
      v8 = v6;
    }
    else
    {
      v17 = (char *)v6 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_36;
      if ((unint64_t)((char *)v6 - v14 - v9) < 0x20)
        goto LABEL_36;
      v18 = (v17 >> 3) + 1;
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v6 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      v6 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)this;
      }
    }
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  v24 = *(_QWORD **)this;
  if (*(_QWORD **)this != v7)
  {
    while (*(_QWORD *)(*v24 + 96) != *(_QWORD *)(*(v7 - 1) + 96))
    {
      if (++v24 == v7)
        return *v7;
    }
    v7 = v24;
  }
  return *v7;
}

void gdc::S2TileSelector::~S2TileSelector(gdc::S2TileSelector *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B06F8;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    operator delete(v4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E42B06F8;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x1A1AF4E00);
}

double gdc::S2TileSelector::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t gdc::S2TileSelector::S2TileSelector(unsigned int,double)::$_0::operator()(char *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __double2 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __double2 v28;
  long double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  long double v37;
  long double v38;
  long double v39;
  int32x2_t v40;
  char v41;
  char v42;

  v40 = vrev64_s32(*(int32x2_t *)(a1 + 4));
  v41 = a1[1];
  v42 = *a1;
  v1 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 0.0, 0.0);
  v4 = v3 * 6356752.31;
  v5 = sqrt(v1 * 6378137.0 * (v1 * 6378137.0) + v2 * 6378137.0 * (v2 * 6378137.0));
  v6 = atan2(v3 * 6356752.31, v5 * 0.996647189);
  v7 = __sincos_stret(v6);
  v39 = atan2(v4 + v7.__sinval * v7.__sinval * 42841.3115 * v7.__sinval, v5 - v7.__cosval * v7.__cosval * 42697.6727 * v7.__cosval);
  v8 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 1.0, 0.0);
  v11 = v10 * 6356752.31;
  v12 = sqrt(v8 * 6378137.0 * (v8 * 6378137.0) + v9 * 6378137.0 * (v9 * 6378137.0));
  v13 = atan2(v10 * 6356752.31, v12 * 0.996647189);
  v14 = __sincos_stret(v13);
  v38 = atan2(v11 + v14.__sinval * v14.__sinval * 42841.3115 * v14.__sinval, v12 - v14.__cosval * v14.__cosval * 42697.6727 * v14.__cosval);
  v15 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 1.0, 1.0);
  v18 = v17 * 6356752.31;
  v19 = sqrt(v15 * 6378137.0 * (v15 * 6378137.0) + v16 * 6378137.0 * (v16 * 6378137.0));
  v20 = atan2(v17 * 6356752.31, v19 * 0.996647189);
  v21 = __sincos_stret(v20);
  v37 = atan2(v18 + v21.__sinval * v21.__sinval * 42841.3115 * v21.__sinval, v19 - v21.__cosval * v21.__cosval * 42697.6727 * v21.__cosval);
  v22 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 0.0, 1.0);
  v25 = v24 * 6356752.31;
  v26 = sqrt(v22 * 6378137.0 * (v22 * 6378137.0) + v23 * 6378137.0 * (v23 * 6378137.0));
  v27 = atan2(v24 * 6356752.31, v26 * 0.996647189);
  v28 = __sincos_stret(v27);
  v29 = atan2(v25 + v28.__sinval * v28.__sinval * 42841.3115 * v28.__sinval, v26 - v28.__cosval * v28.__cosval * 42697.6727 * v28.__cosval);
  v31.f64[0] = v37;
  v30.f64[0] = v38;
  v31.f64[1] = v29;
  v30.f64[1] = v39;
  v32 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  v33 = vmulq_f64(v30, v32);
  v34 = vabsq_f64(vmulq_f64(v31, v32));
  v35 = (float64x2_t)vdupq_n_s64(0x4055400000000000uLL);
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgeq_f64(v34, v35), (int32x4_t)vcgeq_f64(vabsq_f64(v33), v35)))) & 1;
}

void gdc::SelectionContext::setLayerDataTypes(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 32);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 32) = 0;
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 24);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15) = a1 + 32;
    *v11 = 0;
    v11[1] = 0;
  }
}

void gdc::LoadingStatusTracker::~LoadingStatusTracker(gdc::LoadingStatusTracker *this)
{
  gdc::LoadingStatusTracker::~LoadingStatusTracker(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::mutex *v2;
  void *v3;
  gdc::LoadingStatusTracker *v4;
  uint64_t v5;
  gdc::LoadingStatusTracker *v6;
  uint64_t v7;
  gdc::LoadingStatusTracker *v8;
  uint64_t v9;
  gdc::LoadingStatusTracker *v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E42B1728;
  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;

  }
  std::mutex::unlock(v2);
  v4 = (gdc::LoadingStatusTracker *)*((_QWORD *)this + 27);
  if (v4 == (gdc::LoadingStatusTracker *)((char *)this + 192))
  {
    v5 = 4;
    v4 = (gdc::LoadingStatusTracker *)((char *)this + 192);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = (gdc::LoadingStatusTracker *)*((_QWORD *)this + 23);
  if (v6 == (gdc::LoadingStatusTracker *)((char *)this + 160))
  {
    v7 = 4;
    v6 = (gdc::LoadingStatusTracker *)((char *)this + 160);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_13:
  v8 = (gdc::LoadingStatusTracker *)*((_QWORD *)this + 19);
  if (v8 == (gdc::LoadingStatusTracker *)((char *)this + 128))
  {
    v9 = 4;
    v8 = (gdc::LoadingStatusTracker *)((char *)this + 128);
  }
  else
  {
    if (!v8)
      goto LABEL_18;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_18:
  v10 = (gdc::LoadingStatusTracker *)*((_QWORD *)this + 15);
  if (v10 == (gdc::LoadingStatusTracker *)((char *)this + 96))
  {
    v11 = 4;
    v10 = (gdc::LoadingStatusTracker *)((char *)this + 96);
  }
  else
  {
    if (!v10)
      goto LABEL_23;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_23:
  if (*((_BYTE *)this + 88))
    *((_BYTE *)this + 88) = 0;

  std::mutex::~mutex(v2);
}

void sub_19FF59208(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *(_QWORD **)(v2 + 216);
  if (v4 == (_QWORD *)(v2 + 192))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 + 192);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 + 184);
  if (v6 == (_QWORD *)(v2 + 160))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 + 160);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v2 + 152);
  if (v8 == (_QWORD *)(v2 + 128))
  {
    v9 = 4;
    v8 = (_QWORD *)(v2 + 128);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = *(_QWORD **)(v2 + 120);
  if (v10 == (_QWORD *)(v2 + 96))
  {
    v11 = 4;
    v10 = (_QWORD *)(v2 + 96);
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  if (*(_BYTE *)(v2 + 88))
    *(_BYTE *)(v2 + 88) = 0;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void gdc::Histogram::~Histogram(gdc::Histogram *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *(_QWORD *)this = &off_1E42B4748;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4000313F17);
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    operator delete(v5);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *(_QWORD *)this = &off_1E42B4748;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C4000313F17);
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    operator delete(v5);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::Histogram::addSample(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  _QWORD *v46;
  double v47;
  uint64_t v48;
  std::chrono::steady_clock::time_point *v49;
  void *v50;
  gdc::Histogram *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;

  v6 = vcvtmd_s64_f64(a3 / *(double *)(a1 + 8));
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                goto LABEL_82;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              goto LABEL_82;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = v6;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v14 = *(float *)(a1 + 48);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 24);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 24);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v50 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (v50)
          operator delete(v50);
        v7 = 0;
        *(_QWORD *)(a1 + 24) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *(_QWORD *)(a1 + 24) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21++) = 0;
    while (prime != v21);
    v23 = a1 + 32;
    v22 = *(_QWORD **)(a1 + 32);
    if (!v22)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else
        {
          v29 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(v29 + 8 * v28))
          {
            *v22 = *i;
            v30 = 8 * v28;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v30);
            **(_QWORD **)(*(_QWORD *)(a1 + 16) + v30) = i;
          }
          else
          {
            *(_QWORD *)(v29 + 8 * v28) = v22;
            v22 = i;
            v26 = v28;
          }
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24) = v23;
    v34 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v24)
      {
        v37 = *(_QWORD *)(a1 + 16);
        if (!*(_QWORD *)(v37 + 8 * v36))
        {
          *(_QWORD *)(v37 + 8 * v36) = v22;
          goto LABEL_63;
        }
        *v22 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + v35);
        **(_QWORD **)(*(_QWORD *)(a1 + 16) + v35) = v34;
        v34 = v22;
      }
      v36 = v24;
LABEL_63:
      v22 = v34;
      v34 = (_QWORD *)*v34;
      v24 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD *)(a1 + 16);
  v39 = *(_QWORD **)(v38 + 8 * v3);
  if (v39)
  {
    *v10 = *v39;
LABEL_80:
    *v39 = v10;
    goto LABEL_81;
  }
  v40 = *(_QWORD *)(a1 + 32);
  *v10 = v40;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(v38 + 8 * v3) = a1 + 32;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++*(_QWORD *)(a1 + 40);
LABEL_82:
  ++v10[3];
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_87;
  v42 = *(_QWORD *)(a1 + 64);
  if (v42 == v6 || !*(_QWORD *)(a2 + 24))
    goto LABEL_89;
  v43 = *(double *)(a1 + 8);
  v44 = v43 * (double)(uint64_t)v6;
  v45 = v43 * (double)v42;
  v46 = *(_QWORD **)(a1 + 72);
  v47 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - *v46) * 0.000000001;
  v54 = v45;
  v55 = v44;
  v53 = v47;
  v48 = *(_QWORD *)(a2 + 24);
  if (v48)
  {
    (*(void (**)(uint64_t, double *, double *, double *))(*(_QWORD *)v48 + 48))(v48, &v55, &v54, &v53);
LABEL_87:
    v49 = *(std::chrono::steady_clock::time_point **)(a1 + 72);
    v49->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (!*(_BYTE *)(a1 + 56))
      *(_BYTE *)(a1 + 56) = 1;
LABEL_89:
    *(_QWORD *)(a1 + 64) = v6;
    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  gdc::Histogram::getHistogramData(v51, v52);
}

void gdc::Histogram::getHistogramData(gdc::Histogram *this, uint64_t a2)
{
  gdc::Histogram *v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  double v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  gdc::Histogram *v40;
  unint64_t v41;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*(_QWORD *)(a2 + 40))
  {
    v3 = this;
    v4 = *(_QWORD **)(a2 + 32);
    if (v4)
    {
      v5 = 0x8000000000000000;
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v7 = v4[2];
        if (v7 < v6)
          v6 = v4[2];
        if (v5 <= v7)
          v5 = v4[2];
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      v5 = 0x8000000000000000;
    }
    v8 = *(double *)(a2 + 8);
    *(double *)this = v8 * (double)v6;
    *((double *)this + 1) = v8 * (double)(v5 + 1);
    *((double *)this + 2) = v8;
    v9 = v5 - v6 + 1;
    if (v5 - v6 == -1)
    {
      v10 = 0;
      v11 = 0;
      if (v5 < v6)
        return;
      goto LABEL_17;
    }
    if (v9 >> 61)
LABEL_68:
      abort();
    v12 = 8 * v9;
    v11 = (char *)operator new(8 * v9);
    v10 = &v11[v12];
    *((_QWORD *)v3 + 3) = v11;
    *((_QWORD *)v3 + 4) = v11;
    *((_QWORD *)v3 + 5) = &v11[v12];
    if (v5 >= v6)
    {
LABEL_17:
      v13 = v11;
      v40 = v3;
      do
      {
        v16 = *(int8x8_t *)(a2 + 24);
        if (!*(_QWORD *)&v16)
          goto LABEL_40;
        v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v18 = v6;
          if ((unint64_t)v6 >= *(_QWORD *)&v16)
            v18 = (unint64_t)v6 % *(_QWORD *)&v16;
        }
        else
        {
          v18 = (*(_QWORD *)&v16 - 1) & v6;
        }
        v19 = *(_QWORD **)(*(_QWORD *)(a2 + 16) + 8 * v18);
        if (!v19 || (v20 = (_QWORD *)*v19) == 0)
        {
LABEL_40:
          v24 = 0;
          if (v11 >= v10)
            goto LABEL_41;
LABEL_18:
          *(_QWORD *)v11 = v24;
          v14 = v11 + 8;
          goto LABEL_19;
        }
        if (v17.u32[0] < 2uLL)
        {
          v21 = *(_QWORD *)&v16 - 1;
          while (1)
          {
            v23 = v20[1];
            if (v6 == v23)
            {
              if (v20[2] == v6)
                goto LABEL_62;
            }
            else if ((v23 & v21) != v18)
            {
              goto LABEL_40;
            }
            v20 = (_QWORD *)*v20;
            if (!v20)
              goto LABEL_40;
          }
        }
        while (1)
        {
          v22 = v20[1];
          if (v6 == v22)
            break;
          if (v22 >= *(_QWORD *)&v16)
            v22 %= *(_QWORD *)&v16;
          if (v22 != v18)
            goto LABEL_40;
LABEL_30:
          v20 = (_QWORD *)*v20;
          if (!v20)
            goto LABEL_40;
        }
        if (v20[2] != v6)
          goto LABEL_30;
LABEL_62:
        v24 = v20[3];
        if (v11 < v10)
          goto LABEL_18;
LABEL_41:
        v25 = (v11 - v13) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          goto LABEL_68;
        if ((v10 - v13) >> 2 > v26)
          v26 = (v10 - v13) >> 2;
        v27 = 0x1FFFFFFFFFFFFFFFLL;
        if ((unint64_t)(v10 - v13) < 0x7FFFFFFFFFFFFFF8)
          v27 = v26;
        v41 = v27;
        if (v27)
        {
          if (v27 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v28 = operator new(8 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v25];
        *(_QWORD *)v29 = v24;
        v14 = v29 + 8;
        if (v11 == v13)
        {
          v3 = v40;
          v32 = v41;
        }
        else
        {
          v30 = v11 - 8 - v13;
          if (v30 < 0x168
            || &v28[v11 - v13 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v11 - v13 - 8]
            || &v11[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8
            || (unint64_t)(v13 - v28) < 0x20)
          {
            v31 = v11;
            v3 = v40;
            v32 = v41;
            goto LABEL_56;
          }
          v35 = (v30 >> 3) + 1;
          v31 = &v11[-8 * (v35 & 0x3FFFFFFFFFFFFFFCLL)];
          v36 = &v28[8 * v25 - 16];
          v37 = (__int128 *)(v11 - 16);
          v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          v29 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v3 = v40;
          v32 = v41;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_56:
              v33 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v29 - 1) = v33;
              v29 -= 8;
            }
            while (v31 != v13);
          }
        }
        v10 = &v28[8 * v32];
        *((_QWORD *)v3 + 3) = v29;
        *((_QWORD *)v3 + 4) = v14;
        *((_QWORD *)v3 + 5) = v10;
        if (v13)
        {
          v34 = &v28[8 * v32];
          operator delete(v13);
          v10 = v34;
        }
        v13 = v29;
LABEL_19:
        *((_QWORD *)v3 + 4) = v14;
        v11 = v14;
      }
      while (v6++ != v5);
    }
  }
}

double gdc::ViewDataAccess::rigidTransformForFrame(double *a1, unsigned __int8 a2, double *a3)
{
  double result;
  double v6;
  double v7;
  double v8;
  __double2 v9;
  __double2 v10;
  __double2 v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;

  if (a2 - 1 < 2)
    return gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(a1, a3);
  if (a2 == 3)
    return gdc::CameraFrame<geo::Radians,double>::toRigidTransformEcefNoOffset((uint64_t)a1, a3);
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  v17 = *a3;
  v9 = __sincos_stret((v7 - v8) * 0.5);
  v10 = __sincos_stret(v6 * 0.5);
  v11 = __sincos_stret((v8 + v7) * 0.5);
  v13 = a3[1];
  v12 = a3[2];
  v14 = tan(v17 * 0.5 + 0.785398163);
  v15 = log(v14);
  v16 = a3[3] * 0.0000000249532021;
  *a1 = v13 * 0.159154943
      + 0.5
      + -(v9.__cosval * v10.__sinval * -2.0 * (v11.__sinval * v10.__cosval)
        - (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v11.__cosval * v10.__cosval))
      * v16;
  a1[1] = v15 * 0.159154943
        + 0.5
        + (v9.__cosval * v10.__sinval * -2.0 * (v11.__cosval * v10.__cosval)
         + (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v11.__sinval * v10.__cosval))
        * v16;
  result = v12 * 0.0000000249532021
         - -(v9.__cosval * v10.__sinval * -2.0 * (v9.__cosval * v10.__sinval)
           + 1.0
           - (v9.__sinval * v10.__sinval + v9.__sinval * v10.__sinval) * (v9.__sinval * v10.__sinval))
         * v16;
  a1[2] = result;
  a1[3] = v9.__cosval * v10.__sinval;
  a1[4] = v9.__sinval * v10.__sinval;
  a1[5] = v11.__sinval * v10.__cosval;
  a1[6] = v11.__cosval * v10.__cosval;
  return result;
}

long double gdc::ViewDataAccess::worldRayFromScreenNormalizedPoint(uint64_t a1, uint64_t a2, double *a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  long double v26;
  long double v27;
  long double result;
  long double v29;
  long double v30;
  double v31;
  __int128 v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;

  gdc::ViewDataAccess::rigidTransformForFrame((double *)&v32, *(_BYTE *)a2, a3);
  v10 = *(double *)(a2 + 368);
  v9 = *(double *)(a2 + 376);
  v11 = v9 * v10;
  if (v9 >= v10)
  {
    v13 = *(double *)(a2 + 456);
    v16 = v13;
    if (v10 >= v9)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v11 <= 0.0)
    v12 = 1.0;
  else
    v12 = v9 / v10;
  v13 = *(double *)(a2 + 456);
  v14 = tan(v13 * 0.5);
  v15 = atan(v12 * v14);
  v16 = v15 + v15;
  if (v10 < v9)
  {
LABEL_8:
    if (v11 <= 0.0)
      v17 = 1.0;
    else
      v17 = v10 / v9;
    v18 = tan(v13 * 0.5);
    v19 = atan(v17 * v18);
    v13 = v19 + v19;
  }
LABEL_12:
  v20 = tan(v16 * 0.5);
  v21 = tan(v13 * 0.5) * a4;
  v22 = 1.0 / sqrt(v21 * v21 + 1.0 + v20 * a5 * (v20 * a5));
  v23 = v22 * v21;
  v24 = v22 * (v20 * a5);
  v25 = -(v24 * v36 + v22 * v35) - (v24 * v36 + v22 * v35);
  v26 = v22 * v34 + v23 * v36 + v22 * v34 + v23 * v36;
  v27 = -(v23 * v35 - v24 * v34) - (v23 * v35 - v24 * v34);
  result = v23 + v25 * v37 + v27 * v35 - v26 * v36;
  v29 = v24 + v25 * v36 + v26 * v37 - v27 * v34;
  v30 = v27 * v37 + v26 * v34;
  v31 = v22 + v25 * v35;
  *(_OWORD *)a1 = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(long double *)(a1 + 24) = result;
  *(long double *)(a1 + 32) = v29;
  *(long double *)(a1 + 40) = v30 - v31;
  return result;
}

double gdc::ViewDataAccess::worldViewProjectionMatrix(uint64_t a1, double *a2, uint64_t *a3)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[1368];
  _BYTE v13[8];
  int64x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  char v59[8];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  char v81;
  char v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  if (a2[47] * a2[46] == 0.0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
    return result;
  }
  v60 = *a3;
  v5 = *(_OWORD *)(a3 + 3);
  v61 = *(_OWORD *)(a3 + 1);
  v62 = v5;
  v63 = *(_OWORD *)(a3 + 5);
  v65 = 0;
  v64 = 0;
  v68 = 0;
  v66 = 0;
  v67 = 0;
  v69 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v70 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v71 = v69;
  v72 = v70;
  v73 = v69;
  v74 = v70;
  v75 = v69;
  v76 = v70;
  v77 = v69;
  v78 = v70;
  v79 = v69;
  v80 = v70;
  v81 = 1;
  v82 = 0;
  v83 = 0;
  v6 = *((_OWORD *)a2 + 24);
  v84 = *((_OWORD *)a2 + 23);
  v85 = v6;
  v7 = *((_OWORD *)a2 + 26);
  v86 = *((_OWORD *)a2 + 25);
  v87 = v7;
  v88 = *((_OWORD *)a2 + 27);
  v89 = *((_DWORD *)a2 + 112);
  v90 = *((_QWORD *)a2 + 57);
  v91 = *((_OWORD *)a2 + 29);
  *(double *)&v7 = a2[61];
  v92 = *((_QWORD *)a2 + 60);
  v93 = v7;
  v59[0] = *(_BYTE *)a2;
  v14 = vdupq_n_s64(0xC00921FB54442D18);
  v21 = 0;
  v20 = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0;
  v18 = 0;
  v22 = v69;
  v23 = v70;
  v24 = v69;
  v25 = v70;
  v26 = v69;
  v27 = v70;
  v28 = v69;
  v29 = v70;
  v30 = v69;
  v31 = v70;
  v32 = v69;
  v33 = v70;
  v34 = 1;
  v35 = 0;
  v36 = 0;
  v37 = 0u;
  v38 = 0u;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v42 = xmmword_19FFB4C90;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0x3FF0000000000000;
  v56 = 0xBFF0000000000000;
  v57 = 0x3FF0000000000000;
  v58 = 2;
  if (v59[0] - 1 < 2)
  {
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)v12, (const Camera *)v59);
    goto LABEL_9;
  }
  if (v59[0] == 3)
  {
    gdc::CameraView::ecefCameraView((gdc::CameraView *)v12, (const Camera *)v59);
    goto LABEL_9;
  }
  if (!v59[0])
  {
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)v12, (const Camera *)v59);
LABEL_9:
    gdc::CameraView::operator=((uint64_t)v13, (uint64_t)v12);
  }
  v8 = v53;
  *(_OWORD *)(a1 + 64) = v52;
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v55;
  *(_OWORD *)(a1 + 96) = v54;
  *(_OWORD *)(a1 + 112) = v9;
  v10 = v49;
  *(_OWORD *)a1 = v48;
  *(_OWORD *)(a1 + 16) = v10;
  result = *(double *)&v50;
  v11 = v51;
  *(_OWORD *)(a1 + 32) = v50;
  *(_OWORD *)(a1 + 48) = v11;
  return result;
}

void gdc::ViewDataAccess::screenPointForCoordinate(double *a1, double *a2, uint64_t *a3)
{
  double v5;
  long double v6;
  __int128 v12;

  if (a1[47] * a1[46] != 0.0)
  {
    if (*(unsigned __int8 *)a1 - 1 >= 3)
    {
      if (!*(_BYTE *)a1)
      {
        v6 = tan(*a2 * 0.5 + 0.785398163);
        log(v6);
      }
    }
    else
    {
      v5 = a2[1];
      __sincos_stret(*a2);
      __sincos_stret(v5);
    }
    gdc::ViewDataAccess::worldViewProjectionMatrix((uint64_t)&v12, a1, a3);
    __asm { FMOV            V1.2D, #0.5 }
  }
}

void gdc::DebugTreeProperty::addValue(gdc::DebugTreeProperty *this, DebugTreeValue *a2)
{
  unint64_t v4;
  void **v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  std::string *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  void **v21;

  v5 = (void **)*((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  if ((unint64_t)v5 >= v4)
  {
    v9 = (void **)*((_QWORD *)this + 4);
    v10 = ((char *)v5 - (char *)v9) >> 6;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 58)
      abort();
    v12 = v4 - (_QWORD)v9;
    if (v12 >> 5 > v11)
      v11 = v12 >> 5;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(v13 << 6);
    }
    else
    {
      v14 = 0;
    }
    v16 = (char *)&v14[16 * v10];
    *(_OWORD *)v16 = *(_OWORD *)&a2->var0.var0;
    *(_OWORD *)(v16 + 9) = *(_OWORD *)((char *)&a2->var0.var1 + 1);
    v17 = (std::string *)(v16 + 32);
    if (*((char *)&a2->var0.var4.__r_.__value_.var0.__l + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, a2->var0.var4.__r_.__value_.var0.__l.__data_, a2->var0.var4.__r_.__value_.var0.__l.__size_);
      v9 = (void **)*((_QWORD *)this + 4);
      v5 = (void **)*((_QWORD *)this + 5);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a2->var0.var4.__r_.__value_.var0.__s.__data_;
      *((_QWORD *)v16 + 6) = *((_QWORD *)&a2->var0.var4.__r_.__value_.var0.__l + 2);
    }
    v18 = (char *)&v14[16 * v13];
    v14[16 * v10 + 14] = a2->var0.var4.__r_.var0;
    v15 = v16 + 64;
    if (v5 == v9)
    {
      *((_QWORD *)this + 4) = v16;
      *((_QWORD *)this + 5) = v15;
      *((_QWORD *)this + 6) = v18;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v5 - 4);
        *(_OWORD *)(v16 - 55) = *(_OWORD *)((char *)v5 - 55);
        *((_OWORD *)v16 - 4) = v19;
        v20 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v16 - 2) = *(v5 - 2);
        *((_OWORD *)v16 - 2) = v20;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 4) = 0;
        *((_DWORD *)v16 - 2) = *((_DWORD *)v5 - 2);
        v16 -= 64;
        v5 -= 8;
      }
      while (v5 != v9);
      v9 = (void **)*((_QWORD *)this + 4);
      v21 = (void **)*((_QWORD *)this + 5);
      *((_QWORD *)this + 4) = v16;
      *((_QWORD *)this + 5) = v15;
      *((_QWORD *)this + 6) = v18;
      while (v21 != v9)
      {
        if (*((char *)v21 - 9) < 0)
          operator delete(*(v21 - 4));
        v21 -= 8;
      }
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    v6 = *(_OWORD *)&a2->var0.var0;
    *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)&a2->var0.var1 + 1);
    *(_OWORD *)v5 = v6;
    v7 = (std::string *)(v5 + 4);
    if (*((char *)&a2->var0.var4.__r_.__value_.var0.__l + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, a2->var0.var4.__r_.__value_.var0.__l.__data_, a2->var0.var4.__r_.__value_.var0.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)a2->var0.var4.__r_.__value_.var0.__s.__data_;
      v5[6] = (void *)*((_QWORD *)&a2->var0.var4.__r_.__value_.var0.__l + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_DWORD *)v5 + 14) = a2->var0.var4.__r_.var0;
    v15 = (char *)(v5 + 8);
  }
  *((_QWORD *)this + 5) = v15;
}

char *gdc::DebugTreeNode::createChildNode(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void **v22;

  v5 = *(void ***)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(void ***)(a1 + 48);
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v7) >> 5);
    v9 = v8 + 1;
    if (v8 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v7) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = operator new(96 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[32 * (((char *)v5 - (char *)v7) >> 5)];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v12[32 * (((char *)v5 - (char *)v7) >> 5)], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      v7 = *(void ***)(a1 + 48);
      v5 = *(void ***)(a1 + 56);
    }
    else
    {
      *(_OWORD *)v14 = *a2;
      *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    }
    v12[96 * v8 + 24] = 0;
    *(_OWORD *)(v14 + 47) = 0u;
    *(_OWORD *)(v14 + 63) = 0u;
    v15 = &v12[96 * v11];
    *(_OWORD *)(v14 + 79) = 0u;
    v14[95] = 0;
    v13 = v14 + 96;
    if (v5 == v7)
    {
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
    }
    else
    {
      do
      {
        v16 = *((_OWORD *)v5 - 6);
        *((_QWORD *)v14 - 10) = *(v5 - 10);
        *((_OWORD *)v14 - 6) = v16;
        *(v5 - 11) = 0;
        *(v5 - 10) = 0;
        *(v5 - 12) = 0;
        v17 = *(_OWORD *)(v5 - 9);
        *((_QWORD *)v14 - 7) = *(v5 - 7);
        *(_OWORD *)(v14 - 72) = v17;
        *(v5 - 8) = 0;
        *(v5 - 7) = 0;
        *(v5 - 9) = 0;
        *((_QWORD *)v14 - 6) = 0;
        *((_QWORD *)v14 - 5) = 0;
        *((_QWORD *)v14 - 4) = 0;
        *((_OWORD *)v14 - 3) = *((_OWORD *)v5 - 3);
        *((_QWORD *)v14 - 4) = *(v5 - 4);
        *(v5 - 6) = 0;
        *(v5 - 5) = 0;
        *(v5 - 4) = 0;
        *((_QWORD *)v14 - 3) = 0;
        *((_QWORD *)v14 - 2) = 0;
        *((_QWORD *)v14 - 1) = 0;
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 96;
        *(v5 - 3) = 0;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        v5 -= 12;
      }
      while (v5 != v7);
      v7 = *(void ***)(a1 + 48);
      v18 = *(void ***)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
      if (v18 != v7)
      {
        do
        {
          v19 = *(v18 - 3);
          if (v19)
          {
            v20 = (uint64_t)*(v18 - 2);
            v21 = *(v18 - 3);
            if ((void *)v20 != v19)
            {
              do
              {
                v20 -= 80;
                std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v20);
              }
              while ((void *)v20 != v19);
              v21 = *(v18 - 3);
            }
            *(v18 - 2) = v19;
            operator delete(v21);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v18 - 6);
          if (*((char *)v18 - 49) < 0)
            operator delete(*(v18 - 9));
          v22 = v18 - 12;
          if (*((char *)v18 - 73) < 0)
            operator delete(*v22);
          v18 -= 12;
        }
        while (v22 != v7);
      }
    }
    if (v7)
      operator delete(v7);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 56), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v6 = *a2;
      v5[2] = (void *)*((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
    }
    *((_BYTE *)v5 + 24) = 0;
    *(_OWORD *)((char *)v5 + 47) = 0u;
    *(_OWORD *)((char *)v5 + 63) = 0u;
    *(_OWORD *)((char *)v5 + 79) = 0u;
    *((_BYTE *)v5 + 95) = 0;
    v13 = (char *)(v5 + 12);
  }
  *(_QWORD *)(a1 + 56) = v13;
  return v13 - 96;
}

char *gdc::DebugTreeNode::createChildNode(uint64_t a1, __int128 *a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  void **v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  void **v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void **v30;

  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 5);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x155555555555555)
      v13 = 0x2AAAAAAAAAAAAAALL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (std::string *)operator new(96 * v13);
    }
    else
    {
      v14 = 0;
    }
    v18 = v14 + 4 * v10;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14 + 4 * v10, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *a2;
      v18->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    }
    v19 = v14 + 4 * v10 + 1;
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *a3;
      v14[1].__r_.__value_.__r.__words[12 * v10 + 2] = *((_QWORD *)a3 + 2);
    }
    v20 = &v14[4 * v13];
    v21 = v14 + 4 * v10;
    *(_OWORD *)&v21[2].__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&v21[3].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&v21[2].__r_.__value_.__l.__data_ = 0u;
    v17 = (char *)&v18[4];
    v22 = *(void ***)(a1 + 48);
    v23 = *(void ***)(a1 + 56);
    if (v23 == v22)
    {
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 64) = v20;
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v23 - 6);
        v18[-4].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 10);
        *(_OWORD *)&v18[-4].__r_.__value_.__l.__data_ = v24;
        *(v23 - 11) = 0;
        *(v23 - 10) = 0;
        *(v23 - 12) = 0;
        v25 = *(_OWORD *)(v23 - 9);
        v18[-3].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 7);
        *(_OWORD *)&v18[-3].__r_.__value_.__l.__data_ = v25;
        *(v23 - 8) = 0;
        *(v23 - 7) = 0;
        *(v23 - 9) = 0;
        v18[-2].__r_.__value_.__r.__words[0] = 0;
        v18[-2].__r_.__value_.__l.__size_ = 0;
        v18[-2].__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18[-2].__r_.__value_.__l.__data_ = *((_OWORD *)v23 - 3);
        v18[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 4);
        *(v23 - 6) = 0;
        *(v23 - 5) = 0;
        *(v23 - 4) = 0;
        v18[-1].__r_.__value_.__r.__words[0] = 0;
        v18[-1].__r_.__value_.__l.__size_ = 0;
        v18[-1].__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_ = *(_OWORD *)(v23 - 3);
        v18[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v23 - 1);
        v18 -= 4;
        *(v23 - 3) = 0;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        v23 -= 12;
      }
      while (v23 != v22);
      v23 = *(void ***)(a1 + 48);
      v26 = *(void ***)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v17;
      *(_QWORD *)(a1 + 64) = v20;
      if (v26 != v23)
      {
        do
        {
          v27 = *(v26 - 3);
          if (v27)
          {
            v28 = (uint64_t)*(v26 - 2);
            v29 = *(v26 - 3);
            if ((void *)v28 != v27)
            {
              do
              {
                v28 -= 80;
                std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v28);
              }
              while ((void *)v28 != v27);
              v29 = *(v26 - 3);
            }
            *(v26 - 2) = v27;
            operator delete(v29);
          }
          std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)v26 - 6);
          if (*((char *)v26 - 49) < 0)
            operator delete(*(v26 - 9));
          v30 = v26 - 12;
          if (*((char *)v26 - 73) < 0)
            operator delete(*v30);
          v26 -= 12;
        }
        while (v30 != v23);
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 56), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
    }
    v15 = (std::string *)(v7 + 24);
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v16 = *a3;
      *(_QWORD *)(v7 + 40) = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    v17 = (char *)(v7 + 96);
  }
  *(_QWORD *)(a1 + 56) = v17;
  return v17 - 96;
}

