void sub_19F1DBA6C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelImageLoader::loadImage(uint64_t *a1, uint64_t a2, md::LabelImageKey **a3)
{
  uint64_t *v3;
  unsigned __int8 v4;
  md::LabelImageKey **v5;
  uint64_t *v7;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  void (__cdecl *v11)(std::__shared_weak_count *__hidden);
  void (__cdecl *v12)(std::__shared_weak_count *__hidden);
  void (__cdecl *v13)(std::__shared_weak_count *__hidden);
  uint64_t v14;
  std::__shared_weak_count *v15;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t shared_owners;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t size;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  md::LabelImageKey *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  md::LabelImageKey *v50;
  __int128 *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::string *p_dst;
  std::__shared_weak_count_vtbl *v55;
  size_t v57;
  std::string *v58;
  VKImage *v59;
  _QWORD *v60;
  void *v61;
  float v62;
  id v63;
  void *v64;
  double v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *p_shared_weak_owners;
  unint64_t v82;
  unint64_t v83;
  VKImage *v84;
  char *v85;
  VKImage *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  float v91;
  float v92;
  float v93;
  int v94;
  float v95;
  float v96;
  float v97;
  grl::Allocator *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  __int128 *v127;
  std::string *v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  __int128 *v132;
  _BYTE *p_p;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  __int128 v138;
  std::__shared_weak_count *v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  void **v146;
  void *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  uint64_t v152;
  void **v153;
  const void *v154;
  size_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void **v166;
  void **v167;
  void *v168;
  std::__shared_weak_count *v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  __int128 v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  md::LabelImageKey *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t **v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  BOOL v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint8x8_t v199;
  uint64_t **v200;
  uint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  md::LabelImageKey *v207;
  unint64_t *v208;
  unint64_t v209;
  float v210;
  float v211;
  uint64_t *v212;
  _BOOL8 v213;
  unint64_t v214;
  unint64_t v215;
  size_t prime;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  size_t v222;
  size_t v223;
  size_t v224;
  _QWORD *i;
  size_t v226;
  uint64_t v227;
  unint64_t v228;
  uint8x8_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  size_t v233;
  uint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t v237;
  uint64_t *v238;
  _QWORD *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unsigned int v247;
  uint64_t *v248;
  int v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  __int128 *v260;
  uint64_t *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t *v266;
  md::LabelImageKey **v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  char v270;
  void *__p;
  size_t v272;
  unint64_t v273;
  __int128 v274;
  void *v275;
  char *v276;
  char *v277;
  uint64_t *v278;
  std::__shared_weak_count *v279;
  int v280;
  char v281;
  int v282;
  __int16 v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  std::string __dst;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  IconModifiers v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;

  v3 = a1;
  v298 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a2 + 112) + 3393));
  if ((v4 & 1) != 0)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v5 = a3;
  v7 = (uint64_t *)(a2 + 32);
  shared_weak_owners = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>((_QWORD *)(a2 + 32), *a3);
  v267 = v5;
  if (shared_weak_owners)
  {
    v9 = shared_weak_owners;
    v10 = shared_weak_owners[2].__vftable;
    if (v10 != (std::__shared_weak_count_vtbl *)a2)
    {
      v11 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(a2 + 8);
      if ((char *)v11 != (char *)v10)
      {
        v12 = v10->~__shared_weak_count_0;
        if (v12 != v11)
        {
          v13 = v10->~__shared_weak_count;
          *((_QWORD *)v13 + 1) = v12;
          *(_QWORD *)v10->~__shared_weak_count_0 = v13;
          v14 = *(_QWORD *)v11;
          *(_QWORD *)(v14 + 8) = v10;
          v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
          *(_QWORD *)v11 = v10;
          v10->~__shared_weak_count_0 = v11;
        }
      }
      ++*(_DWORD *)(a2 + 92);
      on_zero_shared_weak = v10->__on_zero_shared_weak;
      v15 = (std::__shared_weak_count *)v10[1].~__shared_weak_count;
      v268 = (uint64_t)on_zero_shared_weak;
      v269 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      goto LABEL_14;
    }
    if (LOBYTE(shared_weak_owners[2].__shared_owners_))
    {
      ++*(_DWORD *)(a2 + 92);
      v268 = 0;
      v269 = 0;
LABEL_14:
      v270 = 1;
      *v3 = v268;
      v3[1] = (uint64_t)v269;
      if (v269)
      {
        v19 = (unint64_t *)&v269->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      goto LABEL_393;
    }
    shared_weak_owners = (std::__shared_weak_count *)shared_weak_owners[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
      *(_QWORD *)&v293._opacity = shared_weak_owners;
      if (shared_weak_owners)
      {
        v21 = shared_weak_owners;
        shared_owners = v9[1].__shared_owners_;
        *(_QWORD *)&v293._isClusterIcon = shared_owners;
        if (shared_owners)
        {
          v23 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 48, 8);
          *v23 = 0;
          v23[1] = 0;
          v23[2] = (uint64_t)*v267;
          v24 = (uint64_t)v267[1];
          v23[3] = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v23[4] = shared_owners;
          v23[5] = (uint64_t)v21;
          v27 = (unint64_t *)&v21->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          *v23 = a2;
          v29 = *(uint64_t ***)(a2 + 8);
          v23[1] = (uint64_t)v29;
          *v29 = v23;
          v30 = *(_QWORD *)(a2 + 16) + 1;
          *(_QWORD *)(a2 + 8) = v23;
          *(_QWORD *)(a2 + 16) = v30;
          v9[2].__vftable = (std::__shared_weak_count_vtbl *)v23;
          ++*(_DWORD *)(a2 + 92);
          v268 = shared_owners;
          v269 = v21;
          goto LABEL_14;
        }
        v31 = (unint64_t *)&shared_weak_owners->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        v5 = v267;
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  v33 = 0;
  ++*(_DWORD *)(a2 + 96);
  v270 = 0;
  *v3 = 0;
  v3[1] = 0;
  size = (uint64_t)*v5;
  v266 = v7;
  v261 = v3;
  switch(*((_BYTE *)*v5 + 112))
  {
    case 1:
      *(_QWORD *)&v293._isClusterIcon = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v293._opacity = _D0;
      v293._pathScale._hasValue = 0;
      LOWORD(v293._pathScale._value.type) = 0;
      v293._pathScale._value.data[6] = 0;
      *(&v293._component + 4) = 0;
      *(&v293._customColor._hasValue + 4) = 0;
      v293._shapeColor._hasValue = 0;
      v293._tailDirection._value.type = 0.0;
      *(_QWORD *)&v293._textLocale._hasValue = grl::Allocator::instance((grl::Allocator *)shared_weak_owners);
      v293._textLocale._value.type = 0.0;
      *(_QWORD *)&v293._tailDirection._hasValue = &v293._tailDirection._value;
      v297 = 0;
      v294 = 0u;
      v295 = 0u;
      v296 = 0u;
      v50 = *v267;
      if (*((_BYTE *)*v267 + 180))
      {
        grl::IconModifiers::setTailDirection((uint64_t)&v293, *((float *)v50 + 46));
        v50 = *v267;
      }
      grl::IconModifiers::setScale((grl::IconModifiers *)&v293, *((float *)v50 + 47));
      v51 = (__int128 *)(size + 120);
      if (*(char *)(size + 143) < 0)
      {
        v52 = *(_QWORD *)(size + 128);
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v53 = *(std::__shared_weak_count_vtbl **)(size + 120);
        if (v52 < 0x17)
        {
LABEL_45:
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v52;
          p_dst = &__dst;
          if (!v52)
          {
LABEL_111:
            p_dst->__r_.__value_.__s.__data_[v52] = 0;
            v102 = grl::IconModifiers::setText(&v293, &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            LOBYTE(v102) = *(_BYTE *)(size + 160);
            v103 = (float)LODWORD(v102);
            LOBYTE(v102) = *(_BYTE *)(size + 161);
            v104 = (float)LODWORD(v102);
            LOBYTE(v102) = *(_BYTE *)(size + 162);
            v105 = (float)LODWORD(v102);
            v106 = *(unsigned __int8 *)(size + 163);
            if ((float)(v103 * 0.0039216) >= 0.0031308)
              v107 = (float)(powf(v103 * 0.0039216, 0.41667) * 1.055) + -0.055;
            else
              v107 = v103 * 0.050667;
            if ((float)(v104 * 0.0039216) >= 0.0031308)
              v108 = (float)(powf(v104 * 0.0039216, 0.41667) * 1.055) + -0.055;
            else
              v108 = v104 * 0.050667;
            if ((float)(v105 * 0.0039216) >= 0.0031308)
              v109 = (float)(powf(v105 * 0.0039216, 0.41667) * 1.055) + -0.055;
            else
              v109 = v105 * 0.050667;
            LODWORD(__dst.__r_.__value_.__l.__data_) = (v106 << 24) | ((int)(float)(v109 * 255.0) << 16) | ((int)(float)(v108 * 255.0) << 8) | (int)(float)(v107 * 255.0);
            grl::IconModifiers::setTransitLineColor((uint64_t)&v293, &__dst);
            v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 168) + 64);
            v111 = (int64_t)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, md::LabelImageKey *))(*(_QWORD *)v110 + 48))(&v292, v110, *v267);
            if ((_QWORD)v292)
            {
              v275 = 0;
              v276 = 0;
              v277 = 0;
              v112 = *(_QWORD *)v292;
              v113 = *(_QWORD *)(v292 + 8);
              v111 = v113 - *(_QWORD *)v292;
              if (v113 != *(_QWORD *)v292)
              {
                v114 = 0xAAAAAAAAAAAAAAABLL * (v111 >> 3);
                if (v114 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v115 = (char *)operator new(v111);
                v116 = 0;
                v275 = v115;
                v276 = v115;
                v277 = &v115[24 * v114];
                v51 = (__int128 *)(size + 120);
                do
                {
                  v118 = (__int128 *)(v112 + v116);
                  v111 = (int64_t)&v115[v116];
                  if (*(char *)(v112 + v116 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v111, *(const std::string::value_type **)v118, *((_QWORD *)v118 + 1));
                  }
                  else
                  {
                    v117 = *v118;
                    *(_QWORD *)(v111 + 16) = *((_QWORD *)v118 + 2);
                    *(_OWORD *)v111 = v117;
                  }
                  v116 += 24;
                }
                while (v112 + v116 != v113);
                v276 = &v115[v116];
              }
            }
            else
            {
              v275 = 0;
              v276 = 0;
              v277 = 0;
            }
            v280 = 1065353216;
            v281 = 4;
            v283 = -1;
            v282 = 0;
            v284 = 0;
            v286 = 0;
            v287 = 0;
            v285 = 0;
            v288 = grl::Allocator::instance((grl::Allocator *)v111);
            grl::IconRequestOptions::setContentScale((float *)&v280, *((float *)*v267 + 14));
            grl::IconRequestOptions::setSizeGroup((uint64_t)&v280, *((_BYTE *)*v267 + 168));
            grl::IconRequestOptions::setVariant((uint64_t)&v280, *((_WORD *)*v267 + 86));
            grl::IconRequestOptions::setDataVariant((uint64_t)&v280, *((_WORD *)*v267 + 88));
            grl::IconRequestOptions::setCountryCode((uint64_t)&v280, *((_WORD *)*v267 + 96));
            grl::IconRequestOptions::setResourceNames((uint64_t)&v280, (__int128 **)&v275);
            v291 = 0u;
            v290 = 0u;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
            v3 = v261;
            v129 = objc_msgSend(*(id *)(*(_QWORD *)(a2 + 112) + 96), "grlIconManager");
            v130 = *(_QWORD *)(size + 152);
            if (*(char *)(size + 143) < 0)
            {
              v131 = *(_QWORD *)(size + 128);
              if (v131 > 0x7FFFFFFFFFFFFFF7)
                abort();
              v132 = *(__int128 **)(size + 120);
              if (v131 < 0x17)
              {
LABEL_144:
                HIBYTE(v273) = v131;
                p_p = &__p;
                if (!v131)
                {
LABEL_157:
                  p_p[v131] = 0;
                  grl::IconManager::imageForDataIDAndText(v129, v130, (char *)&__p, &v293, (float *)&v280, (unsigned int *)&__dst, &v278);
                  if (SHIBYTE(v273) < 0)
                    operator delete(__p);
                  if (v278)
                  {
                    md::LabelImageKey::setDebugInfo((void **)*v267, (uint64_t)&__dst);
                    *((_BYTE *)*v267 + 113) = 1;
                    v137 = (char *)operator new(0xE0uLL);
                    std::__shared_ptr_emplace<md::ShieldLabelIcon>::__shared_ptr_emplace[abi:nn180100]<std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,std::allocator<md::ShieldLabelIcon>,0>((uint64_t)v137, v267, (uint64_t)v278, v279, v51);
                    *(_QWORD *)&v138 = v137 + 24;
                    *((_QWORD *)&v138 + 1) = v137;
                  }
                  else
                  {
                    v138 = 0uLL;
                  }
                  v264 = v138;
                  v139 = v279;
                  if (v279)
                  {
                    v140 = &v279->__shared_owners_;
                    do
                      v141 = __ldaxr((unint64_t *)v140);
                    while (__stlxr(v141 - 1, (unint64_t *)v140));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                      std::__shared_weak_count::__release_weak(v139);
                    }
                  }
                  if (SHIBYTE(v291) < 0)
                  {
                    operator delete(*((void **)&v290 + 1));
                    if ((SBYTE7(v290) & 0x80000000) == 0)
                    {
LABEL_169:
                      v142 = v285;
                      if (!v285)
                        goto LABEL_180;
                      goto LABEL_173;
                    }
                  }
                  else if ((SBYTE7(v290) & 0x80000000) == 0)
                  {
                    goto LABEL_169;
                  }
                  operator delete((void *)__dst.__r_.__value_.__l.__size_);
                  v142 = v285;
                  if (!v285)
                    goto LABEL_180;
LABEL_173:
                  v143 = v286;
                  v144 = v142;
                  if (v286 != v142)
                  {
                    do
                    {
                      if (*(char *)(v143 - 1) < 0)
                        operator delete(*(void **)(v143 - 24));
                      v143 -= 24;
                    }
                    while (v143 != v142);
                    v144 = v285;
                  }
                  v286 = v142;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288 + 40))(v288, v144, v287 - v144);
LABEL_180:
                  v145 = (void **)v275;
                  if (v275)
                  {
                    v146 = (void **)v276;
                    v147 = v275;
                    if (v276 != v275)
                    {
                      do
                      {
                        if (*((char *)v146 - 1) < 0)
                          operator delete(*(v146 - 3));
                        v146 -= 3;
                      }
                      while (v146 != v145);
                      v147 = v275;
                    }
                    v276 = (char *)v145;
                    operator delete(v147);
                  }
                  v148 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
                  v7 = v266;
                  v5 = v267;
                  if (*((_QWORD *)&v292 + 1))
                  {
                    v149 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v293);
                  size = v261[1];
                  *(_OWORD *)v261 = v264;
                  if (size)
                  {
                    v151 = (unint64_t *)(size + 8);
                    do
                      v76 = __ldaxr(v151);
                    while (__stlxr(v76 - 1, v151));
                    goto LABEL_258;
                  }
                  goto LABEL_260;
                }
LABEL_156:
                memmove(p_p, v132, v131);
                goto LABEL_157;
              }
            }
            else
            {
              v131 = *(unsigned __int8 *)(size + 143);
              v132 = v51;
              if (v131 < 0x17)
                goto LABEL_144;
            }
            v135 = (v131 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v131 | 7) != 0x17)
              v135 = v131 | 7;
            v136 = v135 + 1;
            p_p = operator new(v135 + 1);
            v272 = v131;
            v273 = v136 | 0x8000000000000000;
            __p = p_p;
            goto LABEL_156;
          }
LABEL_110:
          memmove(p_dst, v53, v52);
          goto LABEL_111;
        }
      }
      else
      {
        v52 = *(unsigned __int8 *)(size + 143);
        v53 = (std::__shared_weak_count_vtbl *)(size + 120);
        if (v52 < 0x17)
          goto LABEL_45;
      }
      v100 = (v52 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v100 = v52 | 7;
      v101 = v100 + 1;
      p_dst = (std::string *)operator new(v100 + 1);
      __dst.__r_.__value_.__l.__size_ = v52;
      __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      goto LABEL_110;
    case 4:
    case 6:
      md::LabelImageLoader::loadIconImage((grl::Allocator *)&v293, a2, v5);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
      v35 = *(_QWORD *)&v293._isClusterIcon;
      if (*(_QWORD *)&v293._isClusterIcon)
      {
        v36 = (char *)md::LabelSettingsStyleCache::styleCaps(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 336)
                                                                                             + 200));
        v37 = (char *)operator new(0xC8uLL);
        *((_QWORD *)v37 + 1) = 0;
        *((_QWORD *)v37 + 2) = 0;
        *((_QWORD *)v37 + 3) = &off_1E42AF880;
        *(_QWORD *)v37 = &off_1E42DB240;
        v38 = *v36;
        *((_QWORD *)v37 + 4) = &off_1E42B5430;
        *((_QWORD *)v37 + 5) = 0;
        v39 = v267[1];
        *((_QWORD *)v37 + 7) = *v267;
        *((_QWORD *)v37 + 8) = v39;
        if (v39)
        {
          v40 = (unint64_t *)((char *)v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        *(_OWORD *)(v37 + 72) = xmmword_19FFB2E30;
        *(_OWORD *)(v37 + 88) = xmmword_19FFB2E30;
        *((_QWORD *)v37 + 13) = 0;
        *((_QWORD *)v37 + 14) = 0;
        *((_QWORD *)v37 + 15) = v35 + 136;
        *((_QWORD *)v37 + 16) = v35 + 24;
        *((_QWORD *)v37 + 17) = 0;
        *((_QWORD *)v37 + 18) = 0;
        *((_QWORD *)v37 + 19) = 0;
        *((_QWORD *)v37 + 20) = 1065353216;
        v37[168] = 0;
        *((_QWORD *)v37 + 3) = &off_1E428FBF0;
        v42 = *(std::__shared_weak_count **)&v293._opacity;
        *((_QWORD *)v37 + 22) = v35;
        *((_QWORD *)v37 + 23) = v42;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        v37[192] = v38;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v37 + 24);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
        v5 = v267;
        if (!v42)
        {
LABEL_62:
          v71 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
          v72 = (std::__shared_weak_count *)v3[1];
          *(_OWORD *)v3 = v71;
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          size = __dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            goto LABEL_260;
          v75 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          goto LABEL_258;
        }
      }
      else
      {
        v42 = *(std::__shared_weak_count **)&v293._opacity;
        v5 = v267;
        if (!*(_QWORD *)&v293._opacity)
          goto LABEL_62;
      }
      v69 = (unint64_t *)&v42->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      goto LABEL_62;
    case 5:
      v55 = (std::__shared_weak_count_vtbl *)(size + 120);
      *(_QWORD *)&v293._isClusterIcon = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&v293._opacity = _D0;
      v293._pathScale._hasValue = 0;
      LOWORD(v293._pathScale._value.type) = 0;
      v293._pathScale._value.data[6] = 0;
      *(&v293._component + 4) = 0;
      *(&v293._customColor._hasValue + 4) = 0;
      v293._shapeColor._hasValue = 0;
      v293._tailDirection._value.type = 0.0;
      *(_QWORD *)&v293._textLocale._hasValue = grl::Allocator::instance((grl::Allocator *)shared_weak_owners);
      v293._textLocale._value.type = 0.0;
      *(_QWORD *)&v293._tailDirection._hasValue = &v293._tailDirection._value;
      v297 = 0;
      v294 = 0u;
      v295 = 0u;
      v296 = 0u;
      v260 = (__int128 *)(size + 120);
      if (*(char *)(size + 143) < 0)
      {
        v57 = *(_QWORD *)(size + 128);
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v55 = *(std::__shared_weak_count_vtbl **)(size + 120);
        if (v57 < 0x17)
        {
LABEL_49:
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v57;
          v58 = &__dst;
          if (!v57)
            goto LABEL_92;
LABEL_91:
          memmove(v58, v55, v57);
LABEL_92:
          v58->__r_.__value_.__s.__data_[v57] = 0;
          v90 = grl::IconModifiers::setText(&v293, &__dst);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          LOBYTE(v90) = *(_BYTE *)(size + 160);
          v91 = (float)LODWORD(v90);
          LOBYTE(v90) = *(_BYTE *)(size + 161);
          v92 = (float)LODWORD(v90);
          LOBYTE(v90) = *(_BYTE *)(size + 162);
          v93 = (float)LODWORD(v90);
          v94 = *(unsigned __int8 *)(size + 163);
          if ((float)(v91 * 0.0039216) >= 0.0031308)
            v95 = (float)(powf(v91 * 0.0039216, 0.41667) * 1.055) + -0.055;
          else
            v95 = v91 * 0.050667;
          if ((float)(v92 * 0.0039216) >= 0.0031308)
            v96 = (float)(powf(v92 * 0.0039216, 0.41667) * 1.055) + -0.055;
          else
            v96 = v92 * 0.050667;
          if ((float)(v93 * 0.0039216) >= 0.0031308)
            v97 = (float)(powf(v93 * 0.0039216, 0.41667) * 1.055) + -0.055;
          else
            v97 = v93 * 0.050667;
          LODWORD(__dst.__r_.__value_.__l.__data_) = (v94 << 24) | ((int)(float)(v97 * 255.0) << 16) | ((int)(float)(v96 * 255.0) << 8) | (int)(float)(v95 * 255.0);
          v98 = (grl::Allocator *)grl::IconModifiers::setTransitLineColor((uint64_t)&v293, &__dst);
          v292 = 0uLL;
          v291 = 0u;
          v290 = 0u;
          *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0u;
          v5 = v267;
          if (*((char *)*v267 + 39) < 0)
            v99 = *((_QWORD *)*v267 + 3);
          else
            v99 = *((unsigned __int8 *)*v267 + 39);
          v262 = 0uLL;
          if (!v99)
          {
LABEL_245:
            if (SHIBYTE(v291) < 0)
            {
              operator delete(*((void **)&v290 + 1));
              if ((SBYTE7(v290) & 0x80000000) == 0)
              {
LABEL_247:
                v178 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
                if (!*((_QWORD *)&v292 + 1))
                  goto LABEL_255;
                goto LABEL_251;
              }
            }
            else if ((SBYTE7(v290) & 0x80000000) == 0)
            {
              goto LABEL_247;
            }
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
            v178 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
            if (!*((_QWORD *)&v292 + 1))
              goto LABEL_255;
LABEL_251:
            v179 = (unint64_t *)&v178->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
LABEL_255:
            grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&v293);
            size = v3[1];
            *(_OWORD *)v3 = v262;
            if (size)
            {
              v181 = (unint64_t *)(size + 8);
              do
                v76 = __ldaxr(v181);
              while (__stlxr(v76 - 1, v181));
              goto LABEL_258;
            }
            goto LABEL_260;
          }
          v280 = 1065353216;
          v281 = 4;
          v283 = -1;
          v282 = 0;
          v284 = 0;
          v286 = 0;
          v287 = 0;
          v285 = 0;
          v288 = grl::Allocator::instance(v98);
          grl::IconRequestOptions::setContentScale((float *)&v280, *((float *)*v267 + 14));
          grl::IconRequestOptions::setSizeGroup((uint64_t)&v280, *((_BYTE *)*v267 + 168));
          grl::IconRequestOptions::setVariant((uint64_t)&v280, *((_WORD *)*v267 + 86));
          grl::IconRequestOptions::setDataVariant((uint64_t)&v280, *((_WORD *)*v267 + 88));
          grl::IconRequestOptions::setCountryCode((uint64_t)&v280, *((_WORD *)*v267 + 96));
          v119 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 168) + 64);
          (*(void (**)(uint64_t **__return_ptr, uint64_t, md::LabelImageKey *))(*(_QWORD *)v119 + 48))(&v278, v119, *v267);
          if (v278)
          {
            v275 = 0;
            v276 = 0;
            v277 = 0;
            v120 = *v278;
            v121 = v278[1];
            v122 = v121 - *v278;
            if (v121 != *v278)
            {
              v123 = 0xAAAAAAAAAAAAAAABLL * (v122 >> 3);
              if (v123 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v124 = (char *)operator new(v122);
              v125 = 0;
              v275 = v124;
              v276 = v124;
              v277 = &v124[24 * v123];
              do
              {
                v127 = (__int128 *)(v120 + v125);
                v128 = (std::string *)&v124[v125];
                if (*(char *)(v120 + v125 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v128, *(const std::string::value_type **)v127, *((_QWORD *)v127 + 1));
                }
                else
                {
                  v126 = *v127;
                  v128->__r_.__value_.__r.__words[2] = *((_QWORD *)v127 + 2);
                  *(_OWORD *)&v128->__r_.__value_.__l.__data_ = v126;
                }
                v125 += 24;
              }
              while (v120 + v125 != v121);
              v276 = &v124[v125];
            }
          }
          else
          {
            v275 = 0;
            v276 = 0;
            v277 = 0;
          }
          grl::IconRequestOptions::setResourceNames((uint64_t)&v280, (__int128 **)&v275);
          v3 = v261;
          v152 = objc_msgSend(*(id *)(*(_QWORD *)(a2 + 112) + 96), "grlIconManager");
          v153 = (void **)*v267;
          if (*((char *)*v267 + 39) < 0)
          {
            v155 = (size_t)v153[3];
            if (v155 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v154 = v153[2];
          }
          else
          {
            v154 = v153 + 2;
            v155 = *((unsigned __int8 *)*v267 + 39);
          }
          if (v155 >= 0x17)
          {
            v157 = (v155 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v155 | 7) != 0x17)
              v157 = v155 | 7;
            v158 = v157 + 1;
            v156 = operator new(v157 + 1);
            v272 = v155;
            v273 = v158 | 0x8000000000000000;
            __p = v156;
          }
          else
          {
            HIBYTE(v273) = v155;
            v156 = &__p;
            if (!v155)
            {
LABEL_210:
              *((_BYTE *)v156 + v155) = 0;
              grl::IconManager::imageForName(v152, (uint64_t)&__p, &v293, (float *)&v280, &__dst, &v274);
              v159 = v274;
              v274 = 0uLL;
              v160 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
              v292 = v159;
              if (v160)
              {
                v161 = (unint64_t *)&v160->__shared_owners_;
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
              v163 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
              if (*((_QWORD *)&v274 + 1))
              {
                v164 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
                do
                  v165 = __ldaxr(v164);
                while (__stlxr(v165 - 1, v164));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              if (SHIBYTE(v273) < 0)
                operator delete(__p);
              v166 = (void **)v275;
              if (v275)
              {
                v167 = (void **)v276;
                v168 = v275;
                if (v276 != v275)
                {
                  do
                  {
                    if (*((char *)v167 - 1) < 0)
                      operator delete(*(v167 - 3));
                    v167 -= 3;
                  }
                  while (v167 != v166);
                  v168 = v275;
                }
                v276 = (char *)v166;
                operator delete(v168);
              }
              v169 = v279;
              if (v279)
              {
                v170 = &v279->__shared_owners_;
                do
                  v171 = __ldaxr((unint64_t *)v170);
                while (__stlxr(v171 - 1, (unint64_t *)v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              v172 = v285;
              if (v285)
              {
                v173 = v286;
                v174 = v285;
                if (v286 != v285)
                {
                  do
                  {
                    if (*(char *)(v173 - 1) < 0)
                      operator delete(*(void **)(v173 - 24));
                    v173 -= 24;
                  }
                  while (v173 != v172);
                  v174 = v285;
                }
                v286 = v172;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288 + 40))(v288, v174, v287 - v174);
              }
              v175 = v292;
              v7 = v266;
              v5 = v267;
              if ((_QWORD)v292)
              {
                md::LabelImageKey::setDebugInfo((void **)*v267, (uint64_t)&__dst);
                *((_BYTE *)*v267 + 113) = 5;
                v176 = (char *)operator new(0xE0uLL);
                std::__shared_ptr_emplace<md::ShieldLabelIcon>::__shared_ptr_emplace[abi:nn180100]<std::shared_ptr<md::LabelImageKey const> const&,std::shared_ptr<grl::IconImage> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&,std::allocator<md::ShieldLabelIcon>,0>((uint64_t)v176, v267, v175, *((std::__shared_weak_count **)&v292 + 1), v260);
                *(_QWORD *)&v177 = v176 + 24;
                *((_QWORD *)&v177 + 1) = v176;
                v262 = v177;
              }
              goto LABEL_245;
            }
          }
          memmove(v156, v154, v155);
          goto LABEL_210;
        }
      }
      else
      {
        v57 = *(unsigned __int8 *)(size + 143);
        if (v57 < 0x17)
          goto LABEL_49;
      }
      v88 = (v57 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v88 = v57 | 7;
      v89 = v88 + 1;
      v58 = (std::string *)operator new(v88 + 1);
      __dst.__r_.__value_.__l.__size_ = v57;
      __dst.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      goto LABEL_91;
    case 7:
      v59 = [VKImage alloc];
      v60 = (_QWORD *)((char *)*v5 + 16);
      if (*((char *)*v5 + 39) < 0)
        v60 = (_QWORD *)*v60;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = *((float *)*v5 + 14);
      v63 = *(id *)(*(_QWORD *)(a2 + 112) + 96);
      objc_msgSend(v63, "resourceManager");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = v62;
      v66 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 112);
      v67 = *(_QWORD **)v66;
      v68 = *(_QWORD **)(v66 + 8);
      if (v67 == v68)
        goto LABEL_71;
      while (*v67 != 0x6F66BE14E10A8F81)
      {
        v67 += 5;
        if (v67 == v68)
          goto LABEL_80;
      }
LABEL_71:
      if (v67 == v68)
      {
LABEL_80:
        v77 = 0;
        goto LABEL_81;
      }
      v77 = v67[3];
      v78 = (std::__shared_weak_count *)v67[4];
      if (!v78)
      {
LABEL_81:
        *(_QWORD *)&v293._isClusterIcon = v77;
        *(_QWORD *)&v293._opacity = 0;
        goto LABEL_82;
      }
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
      *(_QWORD *)&v293._isClusterIcon = v77;
      *(_QWORD *)&v293._opacity = v78;
      p_shared_weak_owners = (unint64_t *)&v78->__shared_weak_owners_;
      do
        v82 = __ldxr(p_shared_weak_owners);
      while (__stxr(v82 + 1, p_shared_weak_owners));
      do
        v83 = __ldaxr(v79);
      while (__stlxr(v83 - 1, v79));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
LABEL_82:
      v84 = -[VKImage initWithName:scale:resourceManager:resourceStore:](v59, "initWithName:scale:resourceManager:resourceStore:", v61, v64, &v293, v65);
      if (*(_QWORD *)&v293._opacity)
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v293._opacity);

      if (v84)
      {
        *((_BYTE *)*v5 + 113) = 4;
        v85 = (char *)operator new(0xD0uLL);
        *((_QWORD *)v85 + 1) = 0;
        *((_QWORD *)v85 + 2) = 0;
        *(_QWORD *)v85 = &off_1E428A0D0;
        v86 = v84;
        *((_QWORD *)v85 + 4) = &off_1E42B5430;
        *((_QWORD *)v85 + 5) = 0;
        *((_QWORD *)v85 + 7) = 0;
        *((_QWORD *)v85 + 8) = 0;
        *(_OWORD *)(v85 + 72) = xmmword_19FFB2E30;
        *(_OWORD *)(v85 + 88) = xmmword_19FFB2E30;
        *(_OWORD *)(v85 + 104) = 0u;
        *(_OWORD *)(v85 + 120) = 0u;
        *(_OWORD *)(v85 + 136) = 0u;
        *((_QWORD *)v85 + 19) = 0;
        *((_QWORD *)v85 + 20) = 1065353216;
        v85[168] = 0;
        *((_QWORD *)v85 + 3) = &off_1E426F420;
        *((_QWORD *)v85 + 22) = &off_1E42B5430;
        *((_QWORD *)v85 + 23) = v86;
        v85[200] = 0;
        *(_QWORD *)&v87 = v85 + 24;
        *((_QWORD *)&v87 + 1) = v85;
      }
      else
      {
        v87 = 0uLL;
      }
      v263 = v87;

      size = v3[1];
      *(_OWORD *)v3 = v263;
      if (size)
      {
        v134 = (unint64_t *)(size + 8);
        do
          v76 = __ldaxr(v134);
        while (__stlxr(v76 - 1, v134));
LABEL_258:
        if (!v76)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)size + 16))(size);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
        }
      }
LABEL_260:
      v33 = *v3;
      if (*v3)
      {
        *(_DWORD *)(v33 + 136) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 432) + 44);
        md::LabelImageLoader::enqueueIconForRendering((_QWORD *)a2, v3);
      }
LABEL_262:
      v182 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 48, 8);
      v183 = v182;
      *v182 = 0;
      v182[1] = 0;
      v182[2] = (uint64_t)*v5;
      v184 = v5[1];
      v182[3] = (uint64_t)v184;
      if (v184)
      {
        v185 = (unint64_t *)((char *)v184 + 8);
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      v182[4] = v33;
      v187 = v3[1];
      v182[5] = v187;
      if (v187)
      {
        v188 = (unint64_t *)(v187 + 8);
        do
          v189 = __ldxr(v188);
        while (__stxr(v189 + 1, v188));
      }
      *v182 = a2;
      v190 = *(uint64_t ***)(a2 + 8);
      v182[1] = (uint64_t)v190;
      *v190 = v182;
      v191 = *(_QWORD *)(a2 + 16) + 1;
      *(_QWORD *)(a2 + 8) = v182;
      *(_QWORD *)(a2 + 16) = v191;
      if (v187)
      {
        v192 = (unint64_t *)(v187 + 16);
        do
          v193 = __ldxr(v192);
        while (__stxr(v193 + 1, v192));
      }
      v194 = v33 == 0;
      v195 = (uint64_t)*v5;
      v196 = md::LabelImageKey::hash(*v5);
      v197 = v196;
      v198 = *(_QWORD *)(a2 + 40);
      if (!v198)
        goto LABEL_293;
      v199 = (uint8x8_t)vcnt_s8((int8x8_t)v198);
      v199.i16[0] = vaddlv_u8(v199);
      if (v199.u32[0] > 1uLL)
      {
        size = v196;
        if (v196 >= v198)
          size = v196 % v198;
      }
      else
      {
        size = (v198 - 1) & v196;
      }
      v200 = *(uint64_t ***)(*v7 + 8 * size);
      if (!v200)
        goto LABEL_293;
      v201 = *v200;
      if (!*v200)
      {
LABEL_292:
        v194 = v33 == 0;
LABEL_293:
        *(_QWORD *)&v204 = v33;
        *((_QWORD *)&v204 + 1) = v187;
        v265 = v204;
        v205 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 16))(*(_QWORD *)(a2 + 64), 64, 8);
        v206 = v205;
        *(_QWORD *)&v293._isClusterIcon = v205;
        *(_QWORD *)&v293._opacity = a2 + 64;
        *(_QWORD *)v205 = 0;
        *(_QWORD *)(v205 + 8) = v197;
        *(_QWORD *)(v205 + 16) = *v267;
        v207 = v267[1];
        *(_QWORD *)(v205 + 24) = v207;
        if (v207)
        {
          v208 = (unint64_t *)((char *)v207 + 8);
          do
            v209 = __ldxr(v208);
          while (__stxr(v209 + 1, v208));
        }
        *(_OWORD *)(v205 + 32) = v265;
        *(_QWORD *)(v205 + 48) = v183;
        *(_BYTE *)(v205 + 56) = v194;
        v293._pathScale._hasValue = 1;
        v210 = (float)(unint64_t)(*(_QWORD *)(a2 + 72) + 1);
        v211 = *(float *)(a2 + 80);
        v212 = v266;
        if (v198 && (float)(v211 * (float)v198) >= v210)
        {
LABEL_345:
          v234 = *(uint64_t **)(*v266 + 8 * size);
          if (v234)
          {
            *(_QWORD *)v206 = *v234;
          }
          else
          {
            *(_QWORD *)v206 = *(_QWORD *)(a2 + 56);
            *(_QWORD *)(a2 + 56) = v206;
            *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * size) = a2 + 56;
            if (!*(_QWORD *)v206)
            {
LABEL_354:
              ++*(_QWORD *)(a2 + 72);
              goto LABEL_359;
            }
            v235 = *(_QWORD *)(*(_QWORD *)v206 + 8);
            if ((v198 & (v198 - 1)) != 0)
            {
              if (v235 >= v198)
                v235 %= v198;
            }
            else
            {
              v235 &= v198 - 1;
            }
            v234 = (uint64_t *)(*v266 + 8 * v235);
          }
          *v234 = v206;
          goto LABEL_354;
        }
        v213 = 1;
        if (v198 >= 3)
          v213 = (v198 & (v198 - 1)) != 0;
        v214 = v213 | (2 * v198);
        v215 = vcvtps_u32_f32(v210 / v211);
        if (v214 <= v215)
          prime = v215;
        else
          prime = v214;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v198 = *(_QWORD *)(a2 + 40);
        if (prime <= v198)
        {
          if (prime >= v198)
            goto LABEL_332;
          v228 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 72) / *(float *)(a2 + 80));
          if (v198 < 3
            || (v229 = (uint8x8_t)vcnt_s8((int8x8_t)v198), v229.i16[0] = vaddlv_u8(v229), v229.u32[0] > 1uLL))
          {
            v228 = std::__next_prime(v228);
          }
          else
          {
            v230 = 1 << -(char)__clz(v228 - 1);
            if (v228 >= 2)
              v228 = v230;
          }
          if (prime <= v228)
            prime = v228;
          if (prime >= v198)
          {
            v198 = *(_QWORD *)(a2 + 40);
LABEL_332:
            if ((v198 & (v198 - 1)) != 0)
            {
              if (v197 >= v198)
                size = v197 % v198;
              else
                size = v197;
            }
            else
            {
              size = (v198 - 1) & v197;
            }
            goto LABEL_345;
          }
          if (!prime)
          {
            v259 = *v266;
            *v266 = 0;
            if (v259)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v259, 8 * *(_QWORD *)(a2 + 40));
            v198 = 0;
            *(_QWORD *)(a2 + 40) = 0;
            goto LABEL_332;
          }
        }
        v217 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48), 8 * prime, 8);
        v218 = *v266;
        *v266 = v217;
        if (v218)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v218, 8 * *(_QWORD *)(a2 + 40));
        v219 = 0;
        *(_QWORD *)(a2 + 40) = prime;
        do
          *(_QWORD *)(*v266 + 8 * v219++) = 0;
        while (prime != v219);
        v221 = a2 + 56;
        v220 = *(_QWORD **)(a2 + 56);
        if (!v220)
        {
LABEL_331:
          v198 = prime;
          goto LABEL_332;
        }
        v222 = v220[1];
        v223 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v224 = v222 & v223;
          *(_QWORD *)(*v266 + 8 * v224) = v221;
          for (i = (_QWORD *)*v220; *v220; i = (_QWORD *)*v220)
          {
            v226 = i[1] & v223;
            if (v226 == v224)
            {
              v220 = i;
            }
            else if (*(_QWORD *)(*v266 + 8 * v226))
            {
              *v220 = *i;
              v227 = 8 * v226;
              *i = **(_QWORD **)(*v266 + v227);
              **(_QWORD **)(*v266 + v227) = i;
            }
            else
            {
              *(_QWORD *)(*v266 + 8 * v226) = v220;
              v220 = i;
              v224 = v226;
            }
          }
          goto LABEL_331;
        }
        if (v222 >= prime)
          v222 %= prime;
        *(_QWORD *)(*v266 + 8 * v222) = v221;
        v231 = (_QWORD *)*v220;
        if (!*v220)
          goto LABEL_331;
        while (1)
        {
          v233 = v231[1];
          if (v233 >= prime)
            v233 %= prime;
          if (v233 != v222)
          {
            if (!*(_QWORD *)(*v266 + 8 * v233))
            {
              *(_QWORD *)(*v266 + 8 * v233) = v220;
              goto LABEL_336;
            }
            *v220 = *v231;
            v232 = 8 * v233;
            *v231 = **(_QWORD **)(*v266 + v232);
            **(_QWORD **)(*v266 + v232) = v231;
            v231 = v220;
          }
          v233 = v222;
LABEL_336:
          v220 = v231;
          v231 = (_QWORD *)*v231;
          v222 = v233;
          if (!v231)
            goto LABEL_331;
        }
      }
      if (v199.u32[0] < 2uLL)
      {
        while (1)
        {
          v203 = v201[1];
          if (v203 == v197)
          {
            if (md::LabelImageKey::operator==(v201[2], v195))
              goto LABEL_355;
          }
          else if ((v203 & (v198 - 1)) != size)
          {
            goto LABEL_292;
          }
          v201 = (uint64_t *)*v201;
          if (!v201)
            goto LABEL_292;
        }
      }
      while (1)
      {
        v202 = v201[1];
        if (v202 == v197)
          break;
        if (v202 >= v198)
          v202 %= v198;
        if (v202 != size)
          goto LABEL_292;
LABEL_282:
        v201 = (uint64_t *)*v201;
        if (!v201)
          goto LABEL_292;
      }
      if (!md::LabelImageKey::operator==(v201[2], v195))
        goto LABEL_282;
LABEL_355:
      v236 = (std::__shared_weak_count *)v201[5];
      v201[4] = v33;
      v201[5] = v187;
      v212 = v266;
      if (v236)
        std::__shared_weak_count::__release_weak(v236);
      v201[6] = (uint64_t)v183;
      *((_BYTE *)v201 + 56) = v33 == 0;
LABEL_359:
      while (2)
      {
        v237 = *(_QWORD *)(a2 + 16);
        if (v237 > *(unsigned int *)(a2 + 88))
        {
          v238 = *(uint64_t **)a2;
          v239 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>(v212, *(md::LabelImageKey **)(*(_QWORD *)a2 + 16));
          if (v239 && (uint64_t *)v239[6] == v238)
          {
            v239[6] = a2;
            v238 = *(uint64_t **)a2;
          }
          v240 = *v238;
          *(_QWORD *)(v240 + 8) = v238[1];
          *(_QWORD *)v238[1] = v240;
          *(_QWORD *)(a2 + 16) = v237 - 1;
          v241 = (std::__shared_weak_count *)v238[5];
          if (!v241)
            goto LABEL_367;
          v242 = (unint64_t *)&v241->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
            v244 = (std::__shared_weak_count *)v238[3];
            if (v244)
            {
LABEL_368:
              v245 = (unint64_t *)&v244->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
          }
          else
          {
LABEL_367:
            v244 = (std::__shared_weak_count *)v238[3];
            if (v244)
              goto LABEL_368;
          }
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v238, 48);
          continue;
        }
        break;
      }
      v247 = *(_DWORD *)(a2 + 104) + 1;
      *(_DWORD *)(a2 + 104) = v247;
      if (v247 < 0x65)
        goto LABEL_393;
      *(_DWORD *)(a2 + 104) = 0;
      v248 = *(uint64_t **)(a2 + 56);
      if (v248)
      {
        v249 = 0;
        do
        {
          while (1)
          {
            if (!*((_BYTE *)v248 + 56))
            {
              v250 = v248[5];
              if (!v250 || *(_QWORD *)(v250 + 8) == -1)
                break;
            }
            v248 = (uint64_t *)*v248;
            ++v249;
            if (!v248)
              goto LABEL_392;
          }
          v251 = (uint64_t *)*v248;
          std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v293, v212, v248);
          v252 = *(_QWORD *)&v293._isClusterIcon;
          *(_QWORD *)&v293._isClusterIcon = 0;
          if (v252)
          {
            if (v293._pathScale._hasValue)
            {
              v253 = *(std::__shared_weak_count **)(v252 + 40);
              if (v253)
                std::__shared_weak_count::__release_weak(v253);
              v254 = *(std::__shared_weak_count **)(v252 + 24);
              if (v254)
              {
                v255 = (unint64_t *)&v254->__shared_owners_;
                do
                  v256 = __ldaxr(v255);
                while (__stlxr(v256 - 1, v255));
                if (!v256)
                {
                  ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                  std::__shared_weak_count::__release_weak(v254);
                }
              }
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)&v293._opacity + 40))(**(_QWORD **)&v293._opacity, v252, 64);
          }
          v248 = v251;
        }
        while (v251);
LABEL_392:
        *(_DWORD *)(a2 + 100) = v249;
LABEL_393:
        if (v270 && v269)
        {
          v257 = (unint64_t *)&v269->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 100) = 0;
      }
      return;
    default:
      goto LABEL_262;
  }
}

void sub_19F1DD6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_19F1DD704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50,std::__shared_weak_count *a51)
{
  void *v51;

  operator delete(v51);
  gdc::Error::~Error(&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  grl::IconModifiers::~IconModifiers((grl::IconModifiers *)&a50);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::find<std::shared_ptr<md::LabelImageKey const>>(_QWORD *a1, md::LabelImageKey *this)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = md::LabelImageKey::hash(this);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v13 == v6)
        {
          if (md::LabelImageKey::operator==(v10[2], (uint64_t)this))
            return v10;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = v10[1];
      if (v12 == v6)
      {
        if (md::LabelImageKey::operator==(v10[2], (uint64_t)this))
          return v10;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (_QWORD *)*v10;
    }
    while (v10);
  }
  return v10;
}

unint64_t md::LabelImageKey::hash(md::LabelImageKey *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  unint64_t result;
  uint16x4_t *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint16x4_t *v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v2 = *((unsigned __int8 *)this + 39);
  v3 = *((_QWORD *)this + 3);
  if ((v2 & 0x80u) == 0)
    v4 = (uint64_t *)((char *)this + 16);
  else
    v4 = (uint64_t *)*((_QWORD *)this + 2);
  if ((v2 & 0x80u) == 0)
    v5 = v2;
  else
    v5 = v3;
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v61 = *((_QWORD *)this + 6);
  v62 = v6;
  v8 = *((float *)this + 14);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v60 = v9;
  v10 = *((unsigned int *)this + 15);
  v11 = *((unsigned __int16 *)this + 32);
  v12 = *((unsigned __int8 *)this + 112);
  v13 = *((unsigned __int8 *)this + 114);
  v14 = *((unsigned __int8 *)this + 115);
  v15 = *((unsigned __int8 *)this + 116);
  v16 = *((unsigned __int8 *)this + 117);
  v17 = *((char *)this + 143);
  if (v17 >= 0)
    v18 = (uint64_t *)((char *)this + 120);
  else
    v18 = (uint64_t *)*((_QWORD *)this + 15);
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)this + 143);
  else
    v19 = *((_QWORD *)this + 16);
  v20 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v18, v19);
  v21 = (*((unsigned __int8 *)this + 161)
       + ((*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*((unsigned __int8 *)this + 160) - 0x61C8864680B583EBLL);
  v22 = (*((unsigned __int8 *)this + 162) + (v21 << 6) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
  v23 = (*((unsigned __int8 *)this + 163) + (v22 << 6) + (v22 >> 2) - 0x61C8864680B583EBLL) ^ v22;
  if (*((_BYTE *)this + 180))
  {
    v24 = *((float *)this + 46);
    v25 = (LODWORD(v24) - 0x61C8864680B583ABLL) ^ 1;
    if (v24 == 0.0)
      v25 = 0x9E3779B97F4A7C54;
  }
  else
  {
    v25 = 0;
  }
  v26 = *((float *)this + 47);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v28 = *((float *)this + 50);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v7 = (char *)this + 120;
  result = v61 ^ v62 ^ v10 ^ v60 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v20 ^ *((_QWORD *)v7 + 4) ^ v7[44] ^ v7[48] ^ *((unsigned int *)v7 + 13) ^ *((unsigned int *)v7 + 14) ^ v25 ^ *((unsigned int *)this + 48) ^ v27 ^ *((unsigned __int8 *)this + 196) ^ v29 ^ (*((_QWORD *)this + 37) != 0) ^ v23 ^ ((v23 << 6) + (v23 >> 2) - 0x61C8864680B583EBLL);
  v31 = (uint16x4_t *)*((_QWORD *)this + 9);
  v32 = (unsigned __int16 *)*((_QWORD *)this + 10);
  if (v31 != (uint16x4_t *)v32)
  {
    v33 = (char *)v32 - (char *)v31 - 2;
    if (v33 <= 0x1D)
      goto LABEL_30;
    v34 = (int8x16_t)result;
    v35 = 0uLL;
    v36 = (v33 >> 1) + 1;
    v37 = v31 + 2;
    v38 = v36 & 0xFFFFFFFFFFFFFFF0;
    v39 = 0uLL;
    v40 = 0uLL;
    v41 = 0uLL;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
    do
    {
      v45 = *(uint16x8_t *)v37[-2].i8;
      v46 = vmovl_u16(*(uint16x4_t *)v45.i8);
      v47.i64[0] = v46.u32[0];
      v47.i64[1] = v46.u32[1];
      v48 = v47;
      v47.i64[0] = v46.u32[2];
      v47.i64[1] = v46.u32[3];
      v49 = v47;
      v50 = vmovl_high_u16(v45);
      v47.i64[0] = v50.u32[0];
      v47.i64[1] = v50.u32[1];
      v51 = v47;
      v47.i64[0] = v50.u32[2];
      v47.i64[1] = v50.u32[3];
      v52 = v47;
      v53 = vmovl_u16(*v37);
      v47.i64[0] = v53.u32[0];
      v47.i64[1] = v53.u32[1];
      v54 = v47;
      v47.i64[0] = v53.u32[2];
      v47.i64[1] = v53.u32[3];
      v55 = v47;
      v56 = vmovl_high_u16(*(uint16x8_t *)v37->i8);
      v47.i64[0] = v56.u32[0];
      v47.i64[1] = v56.u32[1];
      v57 = v47;
      v47.i64[0] = v56.u32[2];
      v47.i64[1] = v56.u32[3];
      v40 = veorq_s8(v40, v52);
      v39 = veorq_s8(v39, v51);
      v35 = veorq_s8(v35, v49);
      v34 = veorq_s8(v34, v48);
      v44 = veorq_s8(v44, v47);
      v43 = veorq_s8(v43, v57);
      v42 = veorq_s8(v42, v55);
      v41 = veorq_s8(v41, v54);
      v37 += 4;
      v38 -= 16;
    }
    while (v38);
    v58 = veorq_s8(veorq_s8(veorq_s8(v41, v34), veorq_s8(v43, v39)), veorq_s8(veorq_s8(v42, v35), veorq_s8(v44, v40)));
    result = (unint64_t)veor_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
    if (v36 != (v36 & 0xFFFFFFFFFFFFFFF0))
    {
      v31 = (uint16x4_t *)((char *)v31 + 2 * (v36 & 0xFFFFFFFFFFFFFFF0));
      do
      {
LABEL_30:
        v59 = v31->u16[0];
        v31 = (uint16x4_t *)((char *)v31 + 2);
        result ^= v59;
      }
      while (v31 != (uint16x4_t *)v32);
    }
  }
  return result;
}

BOOL md::LabelImageKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  int v20;

  v2 = *(unsigned __int8 *)(a1 + 39);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 39);
  else
    v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a2 + 39);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 24);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 16);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 16);
  else
    v9 = *(unsigned __int8 **)(a2 + 16);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
    return 0;
  if (*(float *)(a1 + 56) != *(float *)(a2 + 56))
    return 0;
  if (*(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
    return 0;
  if (*(unsigned __int16 *)(a1 + 64) != *(unsigned __int16 *)(a2 + 64))
    return 0;
  v11 = *(unsigned __int16 **)(a1 + 72);
  v10 = *(unsigned __int16 **)(a1 + 80);
  v12 = v10 - v11;
  v13 = *(unsigned __int16 **)(a2 + 72);
  if (v12 != (uint64_t)(*(_QWORD *)(a2 + 80) - (_QWORD)v13) >> 1)
    return 0;
  if (v10 != v11)
  {
    if (v12 <= 1)
      v14 = 1;
    else
      v14 = v10 - v11;
    if (*v11 != *v13)
      return 0;
    v15 = 0;
    v16 = v11 + 1;
    v17 = v13 + 1;
    v18 = v14 - 1;
    while (v18 != v15)
    {
      v19 = v16[v15];
      v20 = v17[v15++];
      if (v19 != v20)
      {
        if (v15 < v12)
          return 0;
        break;
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)
    || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114)
    || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115)
    || *(unsigned __int8 *)(a1 + 116) != *(unsigned __int8 *)(a2 + 116)
    || *(unsigned __int8 *)(a1 + 117) != *(unsigned __int8 *)(a2 + 117)
    || md::LabelShieldEntry::operator!=((unsigned __int8 *)(a1 + 120), (unsigned __int8 *)(a2 + 120))
    || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168)
    || *(_DWORD *)(a2 + 172) != *(_DWORD *)(a1 + 172)
    || *(_DWORD *)(a2 + 176) != *(_DWORD *)(a1 + 176))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 180) && *(_BYTE *)(a2 + 180))
  {
    if (*(float *)(a1 + 184) == *(float *)(a2 + 184))
      goto LABEL_44;
    return 0;
  }
  if ((*(_BYTE *)(a1 + 180) != 0) != (*(_BYTE *)(a2 + 180) != 0))
    return 0;
LABEL_44:
  if (*(float *)(a1 + 188) != *(float *)(a2 + 188)
    || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)
    || *(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196)
    || *(float *)(a1 + 200) != *(float *)(a2 + 200))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 264) == *(_QWORD *)(a2 + 264);
}

void md::LabelImageLoader::enqueueIconForRendering(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unsigned int *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*(_BYTE *)(*a2 + 140))
    return;
  v5 = *(_QWORD *)(v2 + 112);
  v6 = *(_QWORD *)(v2 + 120);
  if (v5 == v6)
  {
LABEL_11:
    *(_BYTE *)(v2 + 140) = 1;
    v9 = atomic_load((unsigned __int8 *)(v2 + 142));
    if ((v9 & 1) != 0)
      return;
    v10 = a1[14];
    v11 = *(_QWORD *)(v10 + 256);
    if (*(_BYTE *)(v11 + 40))
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = 0;
    v13 = *(_QWORD *)(v10 + 112);
    v14 = *(_QWORD **)v13;
    v15 = *(_QWORD **)(v13 + 8);
    if (v14 != v15)
    {
      while (*v14 != 0x6F66BE14E10A8F81)
      {
        v14 += 5;
        if (v14 == v15)
          goto LABEL_28;
      }
    }
    if (v14 == v15)
    {
LABEL_28:
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v17 = v14[3];
      v16 = (std::__shared_weak_count *)v14[4];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v21 = __ldxr(p_shared_weak_owners);
        while (__stxr(v21 + 1, p_shared_weak_owners));
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    if (*(_BYTE *)(a1[14] + 3383))
    {
      v23 = *a2;
      v74 = v17;
      v75 = v16;
      if (v16)
      {
        v24 = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v23 + 16))(v23, 0, v12, &v74);
      v26 = v75;
      if (!v75)
        goto LABEL_80;
      goto LABEL_34;
    }
    v27 = (unsigned int *)a1 + 35;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    v30 = *a2;
    v29 = (std::__shared_weak_count *)a2[1];
    v72 = *a2;
    v73 = v29;
    if (v29)
    {
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = a1[15];
    v34 = (std::__shared_weak_count *)a1[16];
    v70 = v33;
    v71 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = a1[14];
    v39 = *(_QWORD *)(v37 + 8);
    v38 = *(std::__shared_weak_count **)(v37 + 16);
    v68 = v39;
    if (!v38 || (v40 = std::__shared_weak_count::lock(v38), (v69 = v40) == 0))
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      __break(1u);
      return;
    }
    v41 = v40;
    v65 = *(_QWORD *)(*(_QWORD *)(a1[14] + 152) + 96);
    if (v29)
    {
      v42 = (unint64_t *)&v29->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    if (v16)
    {
      v44 = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = (unint64_t *)&v40->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    if (v34)
    {
      v48 = (unint64_t *)&v34->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v77 = 0;
    v50 = operator new(0x50uLL);
    *v50 = &off_1E42CD4A8;
    v50[1] = v30;
    v50[2] = v29;
    v50[3] = v12;
    v50[4] = v17;
    v50[5] = v16;
    v50[6] = v39;
    v50[7] = v41;
    v50[8] = v33;
    v50[9] = v34;
    v77 = v50;
    geo::TaskQueue::async(&v66, v65, v76);
    v51 = v67;
    if (v67)
    {
      v52 = (unint64_t *)&v67->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v77;
    if (v77 == v76)
    {
      v55 = 4;
      v54 = v76;
    }
    else
    {
      if (!v77)
        goto LABEL_66;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_66:
    v56 = v69;
    if (v69)
    {
      v57 = (unint64_t *)&v69->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = v71;
    if (v71)
    {
      v60 = (unint64_t *)&v71->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = v73;
    if (!v73)
      goto LABEL_80;
    v63 = (unint64_t *)&v73->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (v64)
      goto LABEL_80;
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    v26 = v62;
LABEL_34:
    std::__shared_weak_count::__release_weak(v26);
LABEL_80:
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    return;
  }
  v7 = 0;
  do
  {
    v8 = atomic_load((unsigned __int8 *)(*(_QWORD *)v5 + 142));
    if ((v8 & 1) == 0)
    {
      ++v7;
      if (!*(_BYTE *)(*(_QWORD *)v5 + 140))
        md::LabelImageLoader::enqueueIconForRendering(a1, v5);
    }
    v5 += 16;
  }
  while (v5 != v6);
  if (!v7)
  {
    v2 = *a2;
    goto LABEL_11;
  }
}

void sub_19F1DE4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 104);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 128);
  }
  else
  {
    if (!v31)
    {
LABEL_6:
      md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::~$_0(&a12);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
      if (v27)
      {
        std::__shared_weak_count::__release_weak(v27);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
  goto LABEL_6;
}

void md::DaVinciGroundRenderLayer::layout(md::DaVinciGroundRenderLayer *this, const md::LayoutContext *a2)
{
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  md::DaVinciGroundRenderLayer *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t j;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t k;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t m;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t n;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t ii;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t jj;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t kk;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  std::chrono::steady_clock::time_point v64;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _BYTE *v66;
  _QWORD *v67;
  unsigned __int16 *v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  int v77;
  unsigned __int16 *v79;
  unsigned __int16 *v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  int v84;
  BOOL v85;
  unsigned __int16 *v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::ios_base *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int8x16_t *v108;
  int64x2_t v109;
  uint64_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  uint8x16_t v124;
  uint16x8_t v125;
  uint32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int64x2_t v129;
  uint32x4_t v130;
  int64x2_t v131;
  uint16x8_t v132;
  uint32x4_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  uint32x4_t v137;
  int64x2_t v138;
  int64x2_t v139;
  uint8x16_t v140;
  uint16x8_t v141;
  uint32x4_t v142;
  int64x2_t v143;
  int64x2_t v144;
  uint32x4_t v145;
  int64x2_t v146;
  uint16x8_t v147;
  uint32x4_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  uint32x4_t v152;
  int64x2_t v153;
  uint64_t v154;
  int64x2_t v155;
  int64x2_t v156;
  uint64_t v157;
  int8x8_t *v158;
  int64x2_t v159;
  int64x2_t v160;
  int8x8_t v161;
  uint16x8_t v162;
  uint32x4_t v163;
  int8x16_t v164;
  int64x2_t v165;
  int64x2_t v166;
  uint32x4_t v167;
  int64x2_t v168;
  int v169;
  _BYTE *v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  size_t v178;
  void **v179;
  NSObject *v180;
  unint64_t v181;
  const void **v182;
  const void *v183;
  uint64_t v184;
  uint64_t v185;
  void **p_dst;
  _QWORD *v187;
  _QWORD *v188;
  int8x8_t v189;
  uint8x8_t v190;
  uint64_t v191;
  uint64_t v192;
  md::StyleLogicContext *v193;
  _BOOL4 v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint8x8_t v200;
  unint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int8x8_t v214;
  uint8x8_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned __int8 *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unsigned __int8 *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  uint64_t v240;
  unsigned __int8 *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned __int8 *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned __int8 *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float v262;
  uint64_t v263;
  unsigned __int8 *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unsigned __int8 *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  __int128 v301;
  _WORD *v302;
  id v303;
  _QWORD *v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  _DWORD *v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  id v312;
  _QWORD *v313;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  uint8x8_t v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t v326;
  int32x4_t v327;
  __int128 v328;
  int v329;
  _QWORD *v330;
  unint64_t v331;
  float16x4_t *v332;
  double *v333;
  float v334;
  float v335;
  float v336;
  float v337;
  double v343;
  _QWORD *v346;
  unint64_t v347;
  _WORD *v348;
  _QWORD *v350;
  unint64_t v351;
  _WORD *v352;
  _QWORD *v353;
  unint64_t v354;
  _WORD *v355;
  _QWORD *v356;
  unint64_t v357;
  _WORD *v358;
  _QWORD *v359;
  unint64_t v360;
  _WORD *v361;
  uint64_t v364;
  unint64_t v365;
  uint64_t *v367;
  int8x8_t v368;
  uint8x8_t v369;
  unint64_t v370;
  const md::LayoutContext *v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  int8x8_t *v391;
  int v392;
  BOOL v393;
  uint64_t v394;
  uint64x2_t v395;
  float64x2_t v396;
  double v397;
  double v398;
  double v399;
  double v400;
  float64x2_t v401;
  float64x2_t v402;
  float v403;
  uint64_t v404;
  float64x2_t v405;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  const md::DaVinciGroundRenderable **v414;
  void **v415;
  float v417;
  const md::DaVinciGroundRenderable *v418;
  uint64_t v419;
  double *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  float v428;
  float v429;
  float v430;
  float32_t v431;
  float v432;
  float v433;
  float v434;
  float32_t v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float32x2_t v453;
  float32x2_t v454;
  float32x2_t v455;
  uint64_t *v456;
  int32x4_t v457;
  unint64_t v458;
  int8x16_t *v459;
  int8x16_t *v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  int8x16_t *v464;
  uint64_t v465;
  int64x2_t *v466;
  uint64_t v467;
  uint64_t v468;
  int8x16_t *v469;
  uint64_t v470;
  int v471;
  unint64_t *v472;
  void *v473;
  uint64_t v474;
  unint64_t v475;
  char *v476;
  int8x16_t *v477;
  int8x16_t *v478;
  _QWORD *v479;
  uint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  _BYTE *v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  unint64_t v488;
  _BYTE *v489;
  _QWORD *v490;
  unint64_t v491;
  uint64_t v492;
  int32x4_t *v493;
  int32x4_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  int8x16_t *v499;
  float *v500;
  int8x16_t *v501;
  uint64_t v502;
  unint64_t *v503;
  float *v504;
  int v505;
  uint64_t v506;
  unint64_t v507;
  char *v508;
  char *v509;
  unint64_t v510;
  void *v511;
  void *v512;
  BOOL v513;
  double v514;
  double v515;
  double v516;
  double v517;
  double v518;
  double v519;
  double v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  double v557;
  double v558;
  double v559;
  float v560;
  _QWORD *v561;
  unint64_t v562;
  uint64_t v563;
  float v564;
  float v565;
  float v566;
  float v567;
  float v568;
  float v569;
  float v570;
  float v571;
  float v572;
  float v573;
  float v574;
  float v575;
  float v576;
  md::DaVinciGroundRenderable *v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  _QWORD *v581;
  unint64_t v582;
  float32x4_t *v583;
  uint64_t *v584;
  uint64_t *v585;
  char v586;
  uint64_t *v587;
  uint64_t *v588;
  uint64_t *v589;
  uint64_t *v590;
  uint64_t *v591;
  uint64_t *v592;
  int32x4_t v593;
  __int128 v594;
  uint64_t *v595;
  uint64_t *v596;
  int8x16_t *v597;
  int8x16_t *v598;
  int8x16_t *v599;
  int8x16_t *v600;
  int8x16_t *v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t *v604;
  unint64_t v605;
  uint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  int64x2_t *v609;
  uint64_t v610;
  uint64_t *v611;
  md::MeshRenderable *v612;
  md::MeshRenderable *v613;
  md::MeshRenderable *v614;
  uint64_t v615;
  char v616;
  int8x16_t v617;
  uint64_t *v618;
  float32x4_t v619;
  float32x4_t v620;
  float v621;
  float v622;
  float v623;
  float v624;
  uint64_t v625;
  uint64_t v626;
  BOOL v627;
  _QWORD *v629;
  int8x8_t v630;
  int v631;
  uint8x8_t v632;
  unint64_t v633;
  _QWORD *v634;
  _QWORD *v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  unsigned __int8 *v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  unsigned __int8 *v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  float v656;
  double v657;
  int8x16_t v658;
  __n128 v659;
  const md::DaVinciGroundRenderable **v660;
  const md::DaVinciGroundRenderable **v661;
  int v662;
  unint64_t v663;
  uint64_t *v664;
  unint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t *v668;
  unint64_t v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t *v672;
  unint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t *v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t *v680;
  unint64_t v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t *v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  double v689;
  float v690;
  double v691;
  float v692;
  uint64_t v693;
  std::__shared_weak_count *v694;
  unint64_t *p_shared_owners;
  unint64_t v696;
  uint64_t v697;
  std::__shared_weak_count *v698;
  double v699;
  unint64_t *v700;
  unint64_t v701;
  char v702;
  float v703;
  int v704;
  float v705;
  unint64_t *v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t *v709;
  unint64_t v710;
  float64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  std::ios_base *v715;
  void **v716;
  int v717;
  void **v718;
  uint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  char *v722;
  const std::locale::facet *v723;
  int v724;
  uint64_t v725;
  _BYTE *v726;
  const std::locale::facet *v727;
  _QWORD *v728;
  _QWORD *v729;
  _QWORD *v730;
  _QWORD *v731;
  _QWORD *v732;
  _QWORD *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  _QWORD *v737;
  _QWORD *v738;
  _QWORD *v739;
  size_t v740;
  std::locale::__imp *v741;
  uint64_t v742;
  const void **v743;
  const void *v744;
  uint64_t v745;
  uint64_t v746;
  float v747;
  unsigned int v748;
  float v749;
  float v750;
  float32_t v751;
  double v752;
  int32x2_t v753;
  int8x16_t *locale;
  unint64_t v755;
  void *v756;
  int v757;
  const md::LayoutContext *v758;
  uint64_t v759;
  double v760;
  double v761;
  double v762;
  double v763;
  float v764;
  float v765;
  uint64_t v766;
  std::__shared_weak_count *v767;
  unint64_t *v768;
  unint64_t v769;
  uint64_t v770;
  std::__shared_weak_count *v771;
  double v772;
  unint64_t *v773;
  unint64_t v774;
  char v775;
  float v776;
  int v777;
  float v778;
  unint64_t *v779;
  unint64_t v780;
  uint64_t v781;
  unint64_t *v782;
  unint64_t v783;
  float64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  std::ios_base *v788;
  uint64_t *v789;
  int8x8_t v790;
  uint8x8_t v791;
  unint64_t v792;
  uint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  unint64_t v796;
  _QWORD *v797;
  _QWORD *v798;
  uint64_t v799;
  _QWORD *v800;
  _QWORD *v801;
  _QWORD *v802;
  _QWORD *v803;
  size_t v804;
  void **v805;
  uint64_t v806;
  const void **v807;
  const void *v808;
  uint64_t v809;
  uint64_t v810;
  float v811;
  unsigned int v812;
  unsigned int v813;
  float v814;
  float v815;
  double v816;
  int32x2_t v817;
  int8x16_t *v818;
  unint64_t v819;
  NSObject *v820;
  NSObject *v821;
  os_signpost_id_t v822;
  const char *v823;
  NSObject *v824;
  NSObject *v825;
  os_signpost_type_t v826;
  NSObject *v827;
  md::StyleLogicContext *v828;
  uint64_t v829;
  uint64_t v830;
  _QWORD *v831;
  uint64_t v832;
  __int128 v833;
  double v834;
  double v835;
  double v836;
  double v837;
  double v838;
  double v839;
  double v840;
  double v841;
  double v842;
  double v843;
  double v844;
  double v845;
  double v846;
  double v847;
  uint64_t v848;
  double *v849;
  uint64_t v850;
  _QWORD *v851;
  double v852;
  double v853;
  double *v854;
  const md::DaVinciGroundRenderable **v855;
  BOOL v856;
  _QWORD *v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  int v862;
  uint64_t *v863;
  const md::DaVinciGroundRenderable **v864;
  _BYTE *v865;
  uint64_t v866;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v867;
  uint64_t v868;
  int8x16_t v869;
  int v870;
  md::DaVinciGroundRenderLayer *v871;
  void **v872;
  uint64_t v873;
  __int128 v874;
  int64x2_t v875;
  __int128 v876;
  int8x16_t *v877;
  double v878;
  int8x16_t v879;
  int8x16_t v880;
  float32x2_t v881;
  __int16 v882;
  __int16 v883;
  unsigned __int8 v884[2];
  __int16 v885;
  __int16 v886;
  __int16 v887;
  __int16 v888;
  __int16 v889;
  _QWORD v890[3];
  int8x16_t *v891;
  int8x16_t *v892;
  void **v893;
  uint64_t *v894;
  md::DaVinciGroundRenderable **v895;
  BOOL *v896;
  std::locale v897;
  unint64_t v898;
  int64_t v899;
  unsigned int v900;
  float v901;
  float v902;
  float v903;
  float32_t v904;
  float v905;
  float v906;
  float v907;
  float32_t v908;
  float v909;
  md::DaVinciGroundRenderable *v910;
  void *v911;
  int8x16_t *v912;
  uint64_t v913;
  BOOL v914;
  uint8_t *v915;
  uint8_t buf[8];
  uint64_t v917;
  char v918;
  _DWORD v919[4];
  unint64_t v920;
  _DWORD v921[2];
  unint64_t v922;
  __int128 v923;
  __int128 v924;
  int v925;
  uint64_t v926[4];
  float32x4_t v927;
  float32x4_t v928;
  char v929;
  BOOL v930;
  int8x16_t v931;
  unint64_t v932;
  void **__dst;
  __int128 v934;
  unint64_t v935;
  void *v936[2];
  double v937;
  double v938;
  void *v939;
  double v940;
  double v941;
  double v942;
  double v943;
  double v944;
  double v945;
  double v946;
  _BYTE __p[112];
  float64x2_t v948;
  int v949;
  __int128 v950;
  __int128 v951;
  int v952;
  __int128 v953;
  __int128 v954;
  int v955;
  uint64_t v956;

  v956 = *MEMORY[0x1E0C80C00];
  switch(*((_BYTE *)this + 3560))
  {
    case 0:
    case 1:
    case 4:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v4 = (id)GEOGetVectorKitPerformanceLog_log;
      v5 = v4;
      v6 = *((_QWORD *)a2 + 10);
      if (v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v4))
        goto LABEL_18;
      *(_WORD *)buf = 0;
      v7 = "DaVinciGroundLayout";
      break;
    case 2:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v9 = (id)GEOGetVectorKitPerformanceLog_log;
      v5 = v9;
      v6 = *((_QWORD *)a2 + 10);
      if (v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v9))
        goto LABEL_18;
      *(_WORD *)buf = 0;
      v7 = "DaVinciBuildingsLayout";
      break;
    case 3:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v8 = (id)GEOGetVectorKitPerformanceLog_log;
      v5 = v8;
      v6 = *((_QWORD *)a2 + 10);
      if (v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v8))
        goto LABEL_18;
      *(_WORD *)buf = 0;
      v7 = "DaVinciNonTiledLayout";
      break;
    default:
      goto LABEL_19;
  }
  _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v6, v7, (const char *)&unk_1A0189141, buf, 2u);
LABEL_18:

LABEL_19:
  md::DaVinciGroundRenderResources::resetPools((md::DaVinciGroundRenderLayer *)((char *)this + 568));
  v10 = this;
  v871 = this;
  if (*((_QWORD *)this + 433))
  {
    v11 = (_QWORD *)*((_QWORD *)this + 432);
    if (v11)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v10 = this;
    *((_QWORD *)this + 432) = 0;
    v13 = *((_QWORD *)this + 431);
    if (v13)
    {
      for (i = 0; i != v13; ++i)
        *(_QWORD *)(*((_QWORD *)this + 430) + 8 * i) = 0;
    }
    *((_QWORD *)this + 433) = 0;
  }
  v831 = (_QWORD *)((char *)v10 + 3480);
  if (*((_QWORD *)v10 + 438))
  {
    v15 = (_QWORD *)*((_QWORD *)v10 + 437);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    *((_QWORD *)this + 437) = 0;
    v17 = *((_QWORD *)this + 436);
    if (v17)
    {
      for (j = 0; j != v17; ++j)
        *(_QWORD *)(*v831 + 8 * j) = 0;
    }
    v10 = this;
    *((_QWORD *)this + 438) = 0;
  }
  v851 = (_QWORD *)((char *)v10 + 3520);
  if (*((_QWORD *)v10 + 443))
  {
    v19 = (_QWORD *)*((_QWORD *)v10 + 442);
    if (v19)
    {
      do
      {
        v20 = (_QWORD *)*v19;
        operator delete(v19);
        v19 = v20;
      }
      while (v20);
    }
    *((_QWORD *)this + 442) = 0;
    v21 = *((_QWORD *)this + 441);
    if (v21)
    {
      for (k = 0; k != v21; ++k)
        *(_QWORD *)(*v851 + 8 * k) = 0;
    }
    v10 = this;
    *((_QWORD *)this + 443) = 0;
  }
  if (*((_QWORD *)v10 + 69))
  {
    v23 = (_QWORD *)*((_QWORD *)v10 + 68);
    if (v23)
    {
      do
      {
        v24 = (_QWORD *)*v23;
        operator delete(v23);
        v23 = v24;
      }
      while (v24);
    }
    v10 = this;
    *((_QWORD *)this + 68) = 0;
    v25 = *((_QWORD *)this + 67);
    if (v25)
    {
      for (m = 0; m != v25; ++m)
        *(_QWORD *)(*((_QWORD *)this + 66) + 8 * m) = 0;
    }
    *((_QWORD *)this + 69) = 0;
  }
  if (*((_QWORD *)v10 + 59))
  {
    v27 = (_QWORD *)*((_QWORD *)v10 + 58);
    if (v27)
    {
      do
      {
        v28 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v28;
      }
      while (v28);
    }
    v10 = this;
    *((_QWORD *)this + 58) = 0;
    v29 = *((_QWORD *)this + 57);
    if (v29)
    {
      for (n = 0; n != v29; ++n)
        *(_QWORD *)(*((_QWORD *)this + 56) + 8 * n) = 0;
    }
    *((_QWORD *)this + 59) = 0;
  }
  if (*((_QWORD *)v10 + 54))
  {
    v31 = (_QWORD *)*((_QWORD *)v10 + 53);
    if (v31)
    {
      do
      {
        v32 = (_QWORD *)*v31;
        operator delete(v31);
        v31 = v32;
      }
      while (v32);
    }
    v10 = this;
    *((_QWORD *)this + 53) = 0;
    v33 = *((_QWORD *)this + 52);
    if (v33)
    {
      for (ii = 0; ii != v33; ++ii)
        *(_QWORD *)(*((_QWORD *)this + 51) + 8 * ii) = 0;
    }
    *((_QWORD *)this + 54) = 0;
  }
  if (*((_QWORD *)v10 + 64))
  {
    v35 = (_QWORD *)*((_QWORD *)v10 + 63);
    if (v35)
    {
      do
      {
        v36 = (_QWORD *)*v35;
        operator delete(v35);
        v35 = v36;
      }
      while (v36);
    }
    v10 = this;
    *((_QWORD *)this + 63) = 0;
    v37 = *((_QWORD *)this + 62);
    if (v37)
    {
      for (jj = 0; jj != v37; ++jj)
        *(_QWORD *)(*((_QWORD *)this + 61) + 8 * jj) = 0;
    }
    *((_QWORD *)this + 64) = 0;
  }
  if (*((_QWORD *)v10 + 49))
  {
    v39 = (_QWORD *)*((_QWORD *)v10 + 48);
    if (v39)
    {
      do
      {
        v40 = (_QWORD *)*v39;
        operator delete(v39);
        v39 = v40;
      }
      while (v40);
    }
    v10 = this;
    *((_QWORD *)this + 48) = 0;
    v41 = *((_QWORD *)this + 47);
    if (v41)
    {
      for (kk = 0; kk != v41; ++kk)
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * kk) = 0;
    }
    *((_QWORD *)this + 49) = 0;
  }
  v43 = (uint64_t *)(*(uint64_t (**)(md::DaVinciGroundRenderLayer *, const md::LayoutContext *))(*(_QWORD *)v10 + 96))(v10, a2);
  v44 = (uint64_t)v10;
  v45 = (uint64_t *)*((_QWORD *)a2 + 1);
  v46 = (int8x8_t)v45[1];
  if (!*(_QWORD *)&v46)
  {
    v49 = 0;
    goto LABEL_122;
  }
  v47 = (uint8x8_t)vcnt_s8(v46);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] > 1uLL)
  {
    v48 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v46 <= 0x99BED48DEFBBD82BLL)
      v48 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v46;
  }
  else
  {
    v48 = (*(_QWORD *)&v46 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v50 = *v45;
  v51 = *(_QWORD **)(v50 + 8 * v48);
  if (!v51)
    goto LABEL_103;
  v52 = (_QWORD *)*v51;
  if (!v52)
    goto LABEL_103;
  if (v47.u32[0] < 2uLL)
  {
    while (1)
    {
      v54 = v52[1];
      if (v54 == 0x99BED48DEFBBD82BLL)
      {
        if (v52[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_97;
      }
      else if ((v54 & (*(_QWORD *)&v46 - 1)) != v48)
      {
        goto LABEL_103;
      }
      v52 = (_QWORD *)*v52;
      if (!v52)
        goto LABEL_103;
    }
  }
  while (1)
  {
    v53 = v52[1];
    if (v53 == 0x99BED48DEFBBD82BLL)
      break;
    if (v53 >= *(_QWORD *)&v46)
      v53 %= *(_QWORD *)&v46;
    if (v53 != v48)
      goto LABEL_103;
LABEL_86:
    v52 = (_QWORD *)*v52;
    if (!v52)
      goto LABEL_103;
  }
  if (v52[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_86;
LABEL_97:
  v55 = v52[5];
  if (*(_QWORD *)(v55 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_103:
    v49 = 0;
    if (v47.u32[0] > 1uLL)
      goto LABEL_99;
    goto LABEL_104;
  }
  v49 = *(_QWORD *)(v55 + 32);
  if (v47.u32[0] > 1uLL)
  {
LABEL_99:
    v56 = 0xF014CCE28176CA44;
    if (*(_QWORD *)&v46 <= 0xF014CCE28176CA44)
      v56 = 0xF014CCE28176CA44 % *(_QWORD *)&v46;
    v57 = *(_QWORD **)(v50 + 8 * v56);
    if (!v57)
      goto LABEL_122;
    goto LABEL_105;
  }
LABEL_104:
  v56 = (*(_QWORD *)&v46 - 1) & 0xF014CCE28176CA44;
  v57 = *(_QWORD **)(v50 + 8 * v56);
  if (!v57)
    goto LABEL_122;
LABEL_105:
  v58 = (_QWORD *)*v57;
  if (!v58)
    goto LABEL_122;
  if (v47.u32[0] < 2uLL)
  {
    v59 = *(_QWORD *)&v46 - 1;
    while (1)
    {
      v61 = v58[1];
      if (v61 == 0xF014CCE28176CA44)
      {
        if (v58[2] == 0xF014CCE28176CA44)
          goto LABEL_120;
      }
      else if ((v61 & v59) != v56)
      {
        goto LABEL_122;
      }
      v58 = (_QWORD *)*v58;
      if (!v58)
        goto LABEL_122;
    }
  }
  while (2)
  {
    v60 = v58[1];
    if (v60 != 0xF014CCE28176CA44)
    {
      if (v60 >= *(_QWORD *)&v46)
        v60 %= *(_QWORD *)&v46;
      if (v60 != v56)
        goto LABEL_122;
      goto LABEL_109;
    }
    if (v58[2] != 0xF014CCE28176CA44)
    {
LABEL_109:
      v58 = (_QWORD *)*v58;
      if (!v58)
        goto LABEL_122;
      continue;
    }
    break;
  }
LABEL_120:
  v62 = v58[5];
  if (*(_QWORD *)(v62 + 8) == 0xF014CCE28176CA44)
  {
    v63 = *(_QWORD **)(v62 + 32);
    goto LABEL_123;
  }
LABEL_122:
  v63 = 0;
LABEL_123:
  v64.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v64.__d_.__rep_;
  if (*(_BYTE *)(v44 + 3608))
  {
    v66 = (_BYTE *)(v44 + 3616);
    if (*(_BYTE *)(v44 + 3616) && v64.__d_.__rep_ - *(_QWORD *)(v44 + 3600) < 10000000000)
      goto LABEL_247;
  }
  else
  {
    v66 = (_BYTE *)(v44 + 3616);
  }
  if (*(_BYTE *)(v44 + 3560) != 1)
    goto LABEL_247;
  v67 = *(_QWORD **)v49;
  v68 = *(unsigned __int16 **)(*(_QWORD *)v49 + 184);
  v69 = *(unsigned __int16 **)(*(_QWORD *)v49 + 192);
  if (v68 != v69)
  {
    v70 = (unsigned __int16 *)v67[15];
    v71 = *(unsigned __int16 **)(*(_QWORD *)v49 + 184);
    do
    {
      v72 = (unsigned __int16 *)v67[14];
      if (v72 != v70)
      {
        v72 = (unsigned __int16 *)v67[14];
        while (*v72 != *v71)
        {
          v72 += 56;
          if (v72 == v70)
          {
            v72 = (unsigned __int16 *)v67[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v72 + 8))
        goto LABEL_247;
      ++v71;
    }
    while (v71 != v69);
  }
  v73 = (unsigned __int16 *)v67[26];
  v74 = (unsigned __int16 *)v67[27];
  if (v73 != v74)
  {
    v75 = (unsigned __int16 *)v67[15];
    v76 = (unsigned __int16 *)v67[26];
    do
    {
      v79 = (unsigned __int16 *)v67[14];
      if (v79 != v75)
      {
        v79 = (unsigned __int16 *)v67[14];
        while (*v79 != *v76)
        {
          v79 += 56;
          if (v79 == v75)
          {
            v79 = (unsigned __int16 *)v67[15];
            break;
          }
        }
      }
      v77 = *((unsigned __int8 *)v79 + 8);
      ++v76;
      if (v77)
        _ZF = v76 == v74;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v77)
      goto LABEL_247;
  }
  if (v68 == v69)
  {
LABEL_159:
    if (v73 == v74)
      goto LABEL_171;
    v83 = (unsigned __int16 *)v67[14];
    v82 = (unsigned __int16 *)v67[15];
    do
    {
      v86 = v83;
      if (v83 != v82)
      {
        v86 = v83;
        while (*v86 != *v73)
        {
          v86 += 56;
          if (v86 == v82)
          {
            v86 = v82;
            break;
          }
        }
      }
      v84 = *((unsigned __int8 *)v86 + 8);
      ++v73;
      if (v84)
        v85 = v73 == v74;
      else
        v85 = 1;
    }
    while (!v85);
    if (v84)
    {
LABEL_171:
      if (v43[1] == *v43)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v87 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v87, OS_LOG_TYPE_ERROR, "Missing DaVinciGroundRenderables for ground mesh layer", buf, 2u);
        }

      }
    }
  }
  else
  {
    v80 = (unsigned __int16 *)v67[15];
    while (1)
    {
      v81 = (unsigned __int16 *)v67[14];
      if (v81 != v80)
      {
        v81 = (unsigned __int16 *)v67[14];
        while (*v81 != *v68)
        {
          v81 += 56;
          if (v81 == v80)
          {
            v81 = (unsigned __int16 *)v67[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v81 + 8))
        break;
      if (++v68 == v69)
        goto LABEL_159;
    }
  }
  v88 = MEMORY[0x1E0DE4FE0];
  v89 = MEMORY[0x1E0DE4FE0] + 64;
  v90 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v91 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v926[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v90;
  *(_QWORD *)&buf[*(_QWORD *)(v90 - 24)] = v91;
  v92 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v92, &v917);
  v867 = rep;
  v92[1].__vftable = 0;
  v92[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v88 + 24;
  v926[0] = v89;
  std::streambuf::basic_streambuf();
  v917 = MEMORY[0x1E0DE4FB8] + 16;
  v923 = 0u;
  v924 = 0u;
  v925 = 16;
  v93 = *v43;
  v94 = v43[1];
  v863 = v43;
  v44 = (uint64_t)v871;
  if (*v43 == v94)
    goto LABEL_989;
  v865 = v66;
  v95 = 0;
  v869 = (int8x16_t)vdupq_n_s64(1uLL);
  while (2)
  {
    v96 = *(_QWORD *)(*(_QWORD *)v93 + 384);
    v97 = md::MeshRenderableContext::renderablesForRegistry(v63, *(_QWORD *)(v96 + 1320));
    if (*((_BYTE *)v871 + 3560) == 1 && v97[1] == *v97)
    {
      v98 = (_QWORD *)gdc::Registry::storage<md::components::Visibility>(*(_QWORD *)(v96 + 1320));
      v99 = v98[7];
      v100 = v98[8];
      if (v99 == v100)
        goto LABEL_200;
      v101 = (int8x16_t *)v98[10];
      v102 = v100 - v99 - 8;
      if (v102 >= 0x38)
      {
        v104 = (v102 >> 3) + 1;
        if (v102 >= 0xF8)
        {
          v106 = 0uLL;
          v105 = v104 & 0x3FFFFFFFFFFFFFE0;
          v107 = 0uLL;
          v108 = v101 + 1;
          v109 = 0uLL;
          v110 = v104 & 0x3FFFFFFFFFFFFFE0;
          v111 = 0uLL;
          v112 = 0uLL;
          v113 = 0uLL;
          v114 = 0uLL;
          v115 = 0uLL;
          v116 = 0uLL;
          v117 = 0uLL;
          v118 = 0uLL;
          v119 = 0uLL;
          v120 = 0uLL;
          v121 = 0uLL;
          v122 = 0uLL;
          v123 = 0uLL;
          do
          {
            v124 = (uint8x16_t)vceqzq_s8(v108[-1]);
            v125 = vmovl_u8(*(uint8x8_t *)v124.i8);
            v126 = vmovl_u16(*(uint16x4_t *)v125.i8);
            v127.i64[0] = v126.u32[0];
            v127.i64[1] = v126.u32[1];
            v128 = (int8x16_t)vdupq_n_s64(1uLL);
            v875 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v126.u32[2];
            v127.i64[1] = v126.u32[3];
            v129 = (int64x2_t)vandq_s8(v127, v128);
            v130 = vmovl_high_u16(v125);
            v127.i64[0] = v130.u32[0];
            v127.i64[1] = v130.u32[1];
            v131 = (int64x2_t)vandq_s8(v127, v128);
            v132 = vmovl_high_u8(v124);
            v133 = vmovl_u16(*(uint16x4_t *)v132.i8);
            v127.i64[0] = v133.u32[0];
            v127.i64[1] = v133.u32[1];
            v134 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v130.u32[2];
            v127.i64[1] = v130.u32[3];
            v135 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v133.u32[2];
            v127.i64[1] = v133.u32[3];
            v136 = (int64x2_t)vandq_s8(v127, v128);
            v137 = vmovl_high_u16(v132);
            v127.i64[0] = v137.u32[0];
            v127.i64[1] = v137.u32[1];
            v138 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v137.u32[2];
            v127.i64[1] = v137.u32[3];
            v139 = (int64x2_t)vandq_s8(v127, v128);
            v140 = (uint8x16_t)vceqzq_s8(*v108);
            v141 = vmovl_u8(*(uint8x8_t *)v140.i8);
            v142 = vmovl_u16(*(uint16x4_t *)v141.i8);
            v127.i64[0] = v142.u32[0];
            v127.i64[1] = v142.u32[1];
            v143 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v142.u32[2];
            v127.i64[1] = v142.u32[3];
            v144 = (int64x2_t)vandq_s8(v127, v128);
            v145 = vmovl_high_u16(v141);
            v127.i64[0] = v145.u32[0];
            v127.i64[1] = v145.u32[1];
            v146 = (int64x2_t)vandq_s8(v127, v128);
            v147 = vmovl_high_u8(v140);
            v148 = vmovl_u16(*(uint16x4_t *)v147.i8);
            v127.i64[0] = v148.u32[0];
            v127.i64[1] = v148.u32[1];
            v149 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v145.u32[2];
            v127.i64[1] = v145.u32[3];
            v150 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v148.u32[2];
            v127.i64[1] = v148.u32[3];
            v151 = (int64x2_t)vandq_s8(v127, v128);
            v152 = vmovl_high_u16(v147);
            v127.i64[0] = v152.u32[0];
            v127.i64[1] = v152.u32[1];
            v153 = (int64x2_t)vandq_s8(v127, v128);
            v127.i64[0] = v152.u32[2];
            v127.i64[1] = v152.u32[3];
            v115 = vaddq_s64(v115, v139);
            v114 = vaddq_s64(v114, v138);
            v113 = vaddq_s64(v113, v136);
            v111 = vaddq_s64(v111, v135);
            v112 = vaddq_s64(v112, v134);
            v109 = vaddq_s64(v109, v131);
            v107 = vaddq_s64(v107, v129);
            v106 = vaddq_s64(v106, v875);
            v123 = vaddq_s64(v123, (int64x2_t)vandq_s8(v127, v128));
            v122 = vaddq_s64(v122, v153);
            v121 = vaddq_s64(v121, v151);
            v119 = vaddq_s64(v119, v150);
            v120 = vaddq_s64(v120, v149);
            v118 = vaddq_s64(v118, v146);
            v117 = vaddq_s64(v117, v144);
            v116 = vaddq_s64(v116, v143);
            v108 += 2;
            v110 -= 32;
          }
          while (v110);
          v103 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v116, v106), vaddq_s64(v120, v112)), vaddq_s64(vaddq_s64(v118, v109), vaddq_s64(v122, v114))), vaddq_s64(vaddq_s64(vaddq_s64(v117, v107), vaddq_s64(v121, v113)), vaddq_s64(vaddq_s64(v119, v111), vaddq_s64(v123, v115)))));
          if (v104 == v105)
            goto LABEL_200;
          if ((v104 & 0x18) == 0)
          {
            v99 += 8 * v105;
            v101 = (int8x16_t *)((char *)v101 + v105);
            goto LABEL_197;
          }
        }
        else
        {
          v103 = 0;
          v105 = 0;
        }
        v154 = v104 & 0x3FFFFFFFFFFFFFF8;
        v155 = 0uLL;
        v156 = (int64x2_t)(unint64_t)v103;
        v157 = v105 - (v104 & 0x3FFFFFFFFFFFFFF8);
        v158 = (int8x8_t *)&v101->i8[v105];
        v159 = 0uLL;
        v160 = 0uLL;
        do
        {
          v161 = *v158++;
          v162 = vmovl_u8((uint8x8_t)vceqz_s8(v161));
          v163 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v164.i64[0] = v163.u32[0];
          v164.i64[1] = v163.u32[1];
          v165 = (int64x2_t)vandq_s8(v164, v869);
          v164.i64[0] = v163.u32[2];
          v164.i64[1] = v163.u32[3];
          v166 = (int64x2_t)vandq_s8(v164, v869);
          v167 = vmovl_high_u16(v162);
          v164.i64[0] = v167.u32[0];
          v164.i64[1] = v167.u32[1];
          v168 = (int64x2_t)vandq_s8(v164, v869);
          v164.i64[0] = v167.u32[2];
          v164.i64[1] = v167.u32[3];
          v160 = vaddq_s64(v160, (int64x2_t)vandq_s8(v164, v869));
          v159 = vaddq_s64(v159, v168);
          v155 = vaddq_s64(v155, v166);
          v156 = vaddq_s64(v156, v165);
          v157 += 8;
        }
        while (v157);
        v103 = vaddvq_s64(vaddq_s64(vaddq_s64(v156, v159), vaddq_s64(v155, v160)));
        if (v104 != v154)
        {
          v101 = (int8x16_t *)((char *)v101 + v154);
          v99 += 8 * (v104 & 0x3FFFFFFFFFFFFFF8);
          goto LABEL_197;
        }
      }
      else
      {
        v103 = 0;
        do
        {
LABEL_197:
          v169 = v101->u8[0];
          v101 = (int8x16_t *)((char *)v101 + 1);
          if (!v169)
            ++v103;
          v99 += 8;
        }
        while (v99 != v100);
      }
LABEL_200:
      if (v95)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)" | ", 3);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"Key: ", 5);
      gdc::LayerDataRequestKey::keysInt32Str((std::string *)__p, (unsigned __int16 *)(v96 + 16));
      if (__p[23] >= 0)
        v170 = __p;
      else
        v170 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v171 = __p[23];
      else
        v171 = *(_QWORD *)&__p[8];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)v170, v171);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)", ", 2);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"Has mesh errors: ", 17);
      v172 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v172, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"MeshInstance count: ", 20);
      gdc::Registry::storage<md::components::MeshInstance>(*(_QWORD *)(v96 + 1320));
      v173 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v173, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"PendingMaterial count: ", 23);
      gdc::Registry::storage<md::components::PendingMaterial>(*(_QWORD *)(v96 + 1320));
      v174 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v174, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(buf, (uint64_t)"Invisible MeshInstances count: ", 31);
      std::ostream::operator<<();
      ++v95;
    }
    v93 += 8;
    if (v93 != v94)
      continue;
    break;
  }
  v66 = v865;
  if (!v95)
  {
LABEL_989:
    if (*v66)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v180 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_19F029000, v180, OS_LOG_TYPE_INFO, "No longer missing MeshRenderables for ground mesh layer.", __p, 2u);
      }

    }
    *v66 = 0;
    goto LABEL_244;
  }
  if (!*((_BYTE *)v871 + 3608))
    *((_BYTE *)v871 + 3608) = 1;
  *((_QWORD *)v871 + 450) = v867;
  *((_BYTE *)v871 + 3616) = 1;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v175 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
  {
    v177 = *v863;
    v176 = v863[1];
    if ((v925 & 0x10) != 0)
    {
      v181 = *((_QWORD *)&v924 + 1);
      if (*((_QWORD *)&v924 + 1) < v922)
      {
        *((_QWORD *)&v924 + 1) = v922;
        v181 = v922;
      }
      v182 = (const void **)v921;
    }
    else
    {
      if ((v925 & 8) == 0)
      {
        v178 = 0;
        HIBYTE(v934) = 0;
        *(double *)&v179 = COERCE_DOUBLE(&__dst);
        goto LABEL_239;
      }
      v182 = (const void **)v919;
      v181 = v920;
    }
    v183 = *v182;
    v178 = v181 - (_QWORD)*v182;
    if (v178 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v178 >= 0x17)
    {
      v184 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v178 | 7) != 0x17)
        v184 = v178 | 7;
      v185 = v184 + 1;
      *(double *)&v179 = COERCE_DOUBLE(operator new(v184 + 1));
      *((_QWORD *)&v934 + 1) = v185 | 0x8000000000000000;
      __dst = v179;
      *(_QWORD *)&v934 = v178;
    }
    else
    {
      HIBYTE(v934) = v181 - *(_BYTE *)v182;
      *(double *)&v179 = COERCE_DOUBLE(&__dst);
      if (!v178)
      {
LABEL_239:
        *((_BYTE *)v179 + v178) = 0;
        p_dst = (void **)&__dst;
        if (v934 < 0)
          p_dst = __dst;
        *(_DWORD *)__p = 134218498;
        *(_QWORD *)&__p[4] = v95;
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = (v176 - v177) >> 3;
        *(_WORD *)&__p[22] = 2080;
        *(_QWORD *)&__p[24] = p_dst;
        _os_log_impl(&dword_19F029000, v175, OS_LOG_TYPE_ERROR, "Missing MeshRenderables for ground mesh layer for (%lu/%lu) of ground tiles. Tile debug info: (%s)", __p, 0x20u);
        if (SHIBYTE(v934) < 0)
          operator delete(__dst);
        goto LABEL_243;
      }
    }
    memmove(v179, v183, v178);
    goto LABEL_239;
  }
LABEL_243:

LABEL_244:
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v917 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v924) < 0)
    operator delete((void *)v923);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v926);
LABEL_247:
  v187 = *(_QWORD **)(*(_QWORD *)(v44 + 40) + 24);
  v188 = (_QWORD *)*((_QWORD *)a2 + 1);
  v189 = (int8x8_t)v188[1];
  if (!*(_QWORD *)&v189)
  {
    v192 = 0;
    v193 = 0;
    v194 = MEMORY[0xE0] == 0;
    goto LABEL_297;
  }
  v190 = (uint8x8_t)vcnt_s8(v189);
  v190.i16[0] = vaddlv_u8(v190);
  if (v190.u32[0] > 1uLL)
  {
    v191 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v189 <= 0x41E8D6E445F4145uLL)
      v191 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v189;
  }
  else
  {
    v191 = (*(_QWORD *)&v189 - 1) & 0x41E8D6E445F4145;
  }
  v195 = *(_QWORD **)(*v188 + 8 * v191);
  if (!v195 || (v196 = (_QWORD *)*v195) == 0)
  {
    v192 = 0;
    v194 = MEMORY[0xE0] == 0;
    goto LABEL_274;
  }
  if (v190.u32[0] < 2uLL)
  {
    while (1)
    {
      v198 = v196[1];
      if (v198 == 0x41E8D6E445F4145)
      {
        if (v196[2] == 0x41E8D6E445F4145)
          goto LABEL_270;
      }
      else if ((v198 & (*(_QWORD *)&v189 - 1)) != v191)
      {
        goto LABEL_272;
      }
      v196 = (_QWORD *)*v196;
      if (!v196)
        goto LABEL_272;
    }
  }
  while (2)
  {
    v197 = v196[1];
    if (v197 != 0x41E8D6E445F4145)
    {
      if (v197 >= *(_QWORD *)&v189)
        v197 %= *(_QWORD *)&v189;
      if (v197 != v191)
        goto LABEL_272;
      goto LABEL_258;
    }
    if (v196[2] != 0x41E8D6E445F4145)
    {
LABEL_258:
      v196 = (_QWORD *)*v196;
      if (!v196)
        goto LABEL_272;
      continue;
    }
    break;
  }
LABEL_270:
  v199 = v196[5];
  if (*(_QWORD *)(v199 + 8) == 0x41E8D6E445F4145)
  {
    v192 = *(_QWORD *)(v199 + 32);
    goto LABEL_273;
  }
LABEL_272:
  v192 = 0;
LABEL_273:
  v194 = *(_BYTE *)(v192 + 224) == 0;
LABEL_274:
  v200 = (uint8x8_t)vcnt_s8(v189);
  v200.i16[0] = vaddlv_u8(v200);
  if (v200.u32[0] > 1uLL)
  {
    v201 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v189 <= 0xE42D19AFCA302E68)
      v201 = 0xE42D19AFCA302E68 % *(_QWORD *)&v189;
  }
  else
  {
    v201 = (*(_QWORD *)&v189 - 1) & 0xE42D19AFCA302E68;
  }
  v202 = *(_QWORD **)(*v188 + 8 * v201);
  if (!v202)
    goto LABEL_296;
  v203 = (_QWORD *)*v202;
  if (!v203)
    goto LABEL_296;
  if (v200.u32[0] < 2uLL)
  {
    v204 = *(_QWORD *)&v189 - 1;
    while (1)
    {
      v206 = v203[1];
      if (v206 == 0xE42D19AFCA302E68)
      {
        if (v203[2] == 0xE42D19AFCA302E68)
          goto LABEL_294;
      }
      else if ((v206 & v204) != v201)
      {
        goto LABEL_296;
      }
      v203 = (_QWORD *)*v203;
      if (!v203)
        goto LABEL_296;
    }
  }
  while (2)
  {
    v205 = v203[1];
    if (v205 != 0xE42D19AFCA302E68)
    {
      if (v205 >= *(_QWORD *)&v189)
        v205 %= *(_QWORD *)&v189;
      if (v205 != v201)
        goto LABEL_296;
      goto LABEL_283;
    }
    if (v203[2] != 0xE42D19AFCA302E68)
    {
LABEL_283:
      v203 = (_QWORD *)*v203;
      if (!v203)
        goto LABEL_296;
      continue;
    }
    break;
  }
LABEL_294:
  v207 = v203[5];
  if (*(_QWORD *)(v207 + 8) == 0xE42D19AFCA302E68)
  {
    v193 = *(md::StyleLogicContext **)(v207 + 32);
    goto LABEL_297;
  }
LABEL_296:
  v193 = 0;
LABEL_297:
  v208 = *(_QWORD *)(v44 + 2032);
  v209 = *(_QWORD *)(v208 + 8);
  _S0 = *(_DWORD *)(*((_QWORD *)v193 + 4) + 256);
  __asm { FCVT            H0, S0 }
  **(_WORD **)(v208 + 72) = _S0;
  if (*(_QWORD *)(v208 + 64) > v209)
    v209 = *(_QWORD *)(v208 + 64);
  *(_QWORD *)(v208 + 56) = 0;
  *(_QWORD *)(v208 + 64) = v209;
  v214 = (int8x8_t)v188[1];
  if (!*(_QWORD *)&v214)
    goto LABEL_322;
  v215 = (uint8x8_t)vcnt_s8(v214);
  v215.i16[0] = vaddlv_u8(v215);
  if (v215.u32[0] > 1uLL)
  {
    v216 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v214 <= 0x1AF456233693CD46uLL)
      v216 = 0x1AF456233693CD46uLL % *(_QWORD *)&v214;
  }
  else
  {
    v216 = (*(_QWORD *)&v214 - 1) & 0x1AF456233693CD46;
  }
  v217 = *(_QWORD **)(*v188 + 8 * v216);
  if (!v217)
    goto LABEL_322;
  v218 = (_QWORD *)*v217;
  if (!v218)
    goto LABEL_322;
  if (v215.u32[0] < 2uLL)
  {
    v219 = *(_QWORD *)&v214 - 1;
    while (1)
    {
      v221 = v218[1];
      if (v221 == 0x1AF456233693CD46)
      {
        if (v218[2] == 0x1AF456233693CD46)
          goto LABEL_320;
      }
      else if ((v221 & v219) != v216)
      {
        goto LABEL_322;
      }
      v218 = (_QWORD *)*v218;
      if (!v218)
        goto LABEL_322;
    }
  }
  while (1)
  {
    v220 = v218[1];
    if (v220 == 0x1AF456233693CD46)
      break;
    if (v220 >= *(_QWORD *)&v214)
      v220 %= *(_QWORD *)&v214;
    if (v220 != v216)
      goto LABEL_322;
LABEL_309:
    v218 = (_QWORD *)*v218;
    if (!v218)
      goto LABEL_322;
  }
  if (v218[2] != 0x1AF456233693CD46)
    goto LABEL_309;
LABEL_320:
  v222 = v218[5];
  if (*(_QWORD *)(v222 + 8) != 0x1AF456233693CD46)
  {
LABEL_322:
    v223 = 0;
    goto LABEL_323;
  }
  v223 = *(_QWORD *)(v222 + 32);
LABEL_323:
  v930 = *(unsigned __int8 *)(v223 + 3776) - 1 < 3;
  if (!v194 || *(_BYTE *)(v44 + 3560) == 3)
  {
    v224 = (_QWORD *)v187[1];
    v225 = v224[3];
    v226 = v224[4];
    if (v226 == v225)
    {
      v866 = 0;
    }
    else
    {
      v227 = 0;
      while (1)
      {
        v228 = *(unsigned __int8 **)(v225 + 8 * v227);
        if (*v228 == *(unsigned __int8 *)(v44 + 3356))
        {
          v229 = *((_QWORD *)v228 + 1);
          v230 = v224[15];
          if (v229 < (v224[16] - v230) >> 3)
            break;
        }
        if (++v227 >= (unint64_t)((v226 - v225) >> 3))
          goto LABEL_333;
      }
      v231 = *(_QWORD *)(v230 + 8 * v229);
      if (v231)
      {
        v866 = *(_QWORD *)(*(_QWORD *)(v231 + 24) + 8 * *(unsigned __int8 *)(v44 + 3357));
        v232 = v226 - v225;
        if (v226 == v225)
          goto LABEL_341;
        goto LABEL_334;
      }
LABEL_333:
      v866 = 0;
      v232 = v226 - v225;
      if (v226 == v225)
        goto LABEL_341;
LABEL_334:
      v233 = 0;
      v234 = v232 >> 3;
      while (1)
      {
        v235 = *(unsigned __int8 **)(v225 + 8 * v233);
        if (*v235 == *(unsigned __int8 *)(v44 + 3352))
        {
          v236 = *((_QWORD *)v235 + 1);
          v237 = v224[15];
          if (v236 < (v224[16] - v237) >> 3)
            break;
        }
        if (++v233 >= v234)
          goto LABEL_341;
      }
      v238 = *(_QWORD *)(v237 + 8 * v236);
      if (v238)
      {
        v858 = *(_QWORD *)(*(_QWORD *)(v238 + 24) + 8 * *(unsigned __int8 *)(v44 + 3353));
        v239 = (unsigned __int8 *)(v44 + 3354);
        goto LABEL_342;
      }
    }
LABEL_341:
    v858 = 0;
    v239 = (unsigned __int8 *)(v44 + 3354);
    goto LABEL_342;
  }
  v262 = *(double *)(v223 + 40);
  v224 = (_QWORD *)v187[1];
  v225 = v224[3];
  v226 = v224[4];
  if (v262 >= 0.0001)
  {
    if (v226 == v225)
    {
      v866 = 0;
    }
    else
    {
      v378 = 0;
      while (1)
      {
        v379 = *(unsigned __int8 **)(v225 + 8 * v378);
        if (*v379 == *(unsigned __int8 *)(v44 + 3368))
        {
          v380 = *((_QWORD *)v379 + 1);
          v381 = v224[15];
          if (v380 < (v224[16] - v381) >> 3)
            break;
        }
        if (++v378 >= (unint64_t)((v226 - v225) >> 3))
          goto LABEL_770;
      }
      v382 = *(_QWORD *)(v381 + 8 * v380);
      if (v382)
      {
        v866 = *(_QWORD *)(*(_QWORD *)(v382 + 24) + 8 * *(unsigned __int8 *)(v44 + 3369));
        v383 = v226 - v225;
        if (v226 == v225)
          goto LABEL_781;
        goto LABEL_771;
      }
LABEL_770:
      v866 = 0;
      v383 = v226 - v225;
      if (v226 == v225)
        goto LABEL_781;
LABEL_771:
      v649 = 0;
      v650 = v383 >> 3;
      while (1)
      {
        v651 = *(unsigned __int8 **)(v225 + 8 * v649);
        if (*v651 == *(unsigned __int8 *)(v44 + 3362))
        {
          v652 = *((_QWORD *)v651 + 1);
          v653 = v224[15];
          if (v652 < (v224[16] - v653) >> 3)
            break;
        }
        if (++v649 >= v650)
          goto LABEL_781;
      }
      v654 = *(_QWORD *)(v653 + 8 * v652);
      if (v654)
      {
        v858 = *(_QWORD *)(*(_QWORD *)(v654 + 24) + 8 * *(unsigned __int8 *)(v44 + 3363));
LABEL_782:
        v239 = (unsigned __int8 *)(v44 + 3365);
        goto LABEL_342;
      }
    }
LABEL_781:
    v858 = 0;
    goto LABEL_782;
  }
  if (v226 == v225)
  {
    v866 = 0;
  }
  else
  {
    v263 = 0;
    while (1)
    {
      v264 = *(unsigned __int8 **)(v225 + 8 * v263);
      if (*v264 == *(unsigned __int8 *)(v44 + 3377))
      {
        v265 = *((_QWORD *)v264 + 1);
        v266 = v224[15];
        if (v265 < (v224[16] - v266) >> 3)
          break;
      }
      if (++v263 >= (unint64_t)((v226 - v225) >> 3))
        goto LABEL_763;
    }
    v267 = *(_QWORD *)(v266 + 8 * v265);
    if (v267)
    {
      v866 = *(_QWORD *)(*(_QWORD *)(v267 + 24) + 8 * *(unsigned __int8 *)(v44 + 3378));
      v268 = v226 - v225;
      if (v226 == v225)
        goto LABEL_779;
      goto LABEL_764;
    }
LABEL_763:
    v866 = 0;
    v268 = v226 - v225;
    if (v226 == v225)
      goto LABEL_779;
LABEL_764:
    v643 = 0;
    v644 = v268 >> 3;
    while (1)
    {
      v645 = *(unsigned __int8 **)(v225 + 8 * v643);
      if (*v645 == *(unsigned __int8 *)(v44 + 3371))
      {
        v646 = *((_QWORD *)v645 + 1);
        v647 = v224[15];
        if (v646 < (v224[16] - v647) >> 3)
          break;
      }
      if (++v643 >= v644)
        goto LABEL_779;
    }
    v648 = *(_QWORD *)(v647 + 8 * v646);
    if (v648)
    {
      v858 = *(_QWORD *)(*(_QWORD *)(v648 + 24) + 8 * *(unsigned __int8 *)(v44 + 3372));
      v239 = (unsigned __int8 *)(v44 + 3374);
      goto LABEL_342;
    }
  }
LABEL_779:
  v858 = 0;
  v239 = (unsigned __int8 *)(v44 + 3374);
LABEL_342:
  v828 = v193;
  if (v226 == v225)
  {
    v246 = (double *)v223;
    v832 = 0;
    v848 = 0;
    v868 = 0;
LABEL_359:
    v859 = 0;
    v856 = 1;
    goto LABEL_388;
  }
  v240 = 0;
  while (1)
  {
    v241 = *(unsigned __int8 **)(v225 + 8 * v240);
    if (*v241 == *v239)
    {
      v242 = *((_QWORD *)v241 + 1);
      v243 = v224[15];
      if (v242 < (v224[16] - v243) >> 3)
        break;
    }
    if (++v240 >= (unint64_t)((v226 - v225) >> 3))
      goto LABEL_350;
  }
  v244 = *(_QWORD *)(v243 + 8 * v242);
  if (!v244)
  {
LABEL_350:
    v868 = 0;
    v245 = v226 - v225;
    if (v226 != v225)
      goto LABEL_351;
LABEL_349:
    v246 = (double *)v223;
    v832 = 0;
    v848 = 0;
    goto LABEL_359;
  }
  v868 = *(_QWORD *)(*(_QWORD *)(v244 + 24) + 8 * v239[1]);
  v245 = v226 - v225;
  if (v226 == v225)
    goto LABEL_349;
LABEL_351:
  v247 = 0;
  v248 = v245 >> 3;
  while (1)
  {
    v249 = *(unsigned __int8 **)(v225 + 8 * v247);
    if (*v249 == *(unsigned __int8 *)(v44 + 3389))
    {
      v250 = *((_QWORD *)v249 + 1);
      v251 = v224[15];
      if (v250 < (v224[16] - v251) >> 3)
        break;
    }
    if (++v247 >= v248)
      goto LABEL_360;
  }
  v252 = *(_QWORD *)(v251 + 8 * v250);
  if (v252)
  {
    v253 = *(_QWORD *)(*(_QWORD *)(v252 + 24) + 8 * *(unsigned __int8 *)(v44 + 3390));
    v254 = v226 - v225;
    if (v226 == v225)
    {
LABEL_357:
      v246 = (double *)v223;
      v859 = 0;
      goto LABEL_385;
    }
  }
  else
  {
LABEL_360:
    v253 = 0;
    v254 = v226 - v225;
    if (v226 == v225)
      goto LABEL_357;
  }
  v255 = 0;
  v256 = v254 >> 3;
  while (1)
  {
    v257 = *(unsigned __int8 **)(v225 + 8 * v255);
    if (*v257 == *(unsigned __int8 *)(v44 + 3387))
    {
      v258 = *((_QWORD *)v257 + 1);
      v259 = v224[15];
      if (v258 < (v224[16] - v259) >> 3)
        break;
    }
    if (++v255 >= v256)
      goto LABEL_377;
  }
  v260 = *(_QWORD *)(v259 + 8 * v258);
  if (v260)
  {
    v859 = *(_QWORD *)(*(_QWORD *)(v260 + 24) + 8 * *(unsigned __int8 *)(v44 + 3388));
    v261 = v226 - v225;
    if (v226 == v225)
      goto LABEL_384;
    goto LABEL_378;
  }
LABEL_377:
  v859 = 0;
  v261 = v226 - v225;
  if (v226 == v225)
    goto LABEL_384;
LABEL_378:
  v269 = 0;
  v270 = v261 >> 3;
  while (1)
  {
    v271 = *(unsigned __int8 **)(v225 + 8 * v269);
    if (*v271 == *(unsigned __int8 *)(v44 + 3385))
    {
      v272 = *((_QWORD *)v271 + 1);
      v273 = v224[15];
      if (v272 < (v224[16] - v273) >> 3)
        break;
    }
    if (++v269 >= v270)
      goto LABEL_384;
  }
  v274 = *(_QWORD *)(v273 + 8 * v272);
  if (v274)
  {
    v246 = (double *)v223;
    v832 = *(_QWORD *)(*(_QWORD *)(v274 + 24) + 8 * *(unsigned __int8 *)(v44 + 3386));
    goto LABEL_386;
  }
LABEL_384:
  v246 = (double *)v223;
LABEL_385:
  v832 = 0;
LABEL_386:
  v856 = v253 == 0;
  v848 = v253;
  if (v253)
    *(_QWORD *)(v253 + 32) = *(_QWORD *)(v44 + 3176);
LABEL_388:
  v829 = (*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v44 + 96))(v44, a2);
  md::DaVinciGroundRenderLayer::createMeshLayoutContext((md::DaVinciGroundRenderLayer *)buf, (const md::LayoutContext *)v44, a2);
  v860 = *(unsigned __int8 *)(v192 + 228);
  if (!buf[6])
  {
    v830 = 0;
    if (v918)
      goto LABEL_405;
    goto LABEL_420;
  }
  v275 = *(unsigned __int8 *)(v44 + 3560);
  v276 = 2;
  if (v275 == 2)
    v276 = 3;
  if (v275 == 3)
    v276 = 4;
  v277 = (_QWORD *)v187[1];
  v278 = v277[3];
  v279 = v277[4];
  v280 = v279 - v278;
  if (v279 == v278)
    goto LABEL_401;
  v281 = 0;
  v282 = v280 >> 3;
  while (1)
  {
    v283 = *(_QWORD *)(v278 + 8 * v281);
    if (!*(_BYTE *)v283)
    {
      v284 = *(_QWORD *)(v283 + 8);
      v285 = v277[15];
      if (v284 < (v277[16] - v285) >> 3)
        break;
    }
    if (++v281 >= v282)
      goto LABEL_401;
  }
  v286 = *(_QWORD *)(v285 + 8 * v284);
  if (!v286)
  {
LABEL_401:
    v830 = 0;
    if (*(_BYTE *)(v192 + 228))
      goto LABEL_404;
  }
  else
  {
    v830 = *(_QWORD *)(*(_QWORD *)(v286 + 24) + 8 * v276);
    if (*(_BYTE *)(v192 + 228))
      goto LABEL_404;
  }
  if (v275 == 1)
    *(_QWORD *)(v830 + 32) = *(_QWORD *)(v44 + 3160);
LABEL_404:
  if (!v918)
  {
LABEL_420:
    v850 = 0;
    goto LABEL_421;
  }
LABEL_405:
  v287 = *(unsigned __int8 *)(v44 + 3560);
  v288 = 2;
  if (v287 == 2)
    v288 = 3;
  if (v287 == 3)
    v288 = 4;
  v289 = (_QWORD *)v187[1];
  v290 = v289[3];
  v291 = v289[4];
  v292 = v291 - v290;
  if (v291 == v290)
    goto LABEL_417;
  v293 = 0;
  v294 = v292 >> 3;
  while (1)
  {
    v295 = *(_QWORD *)(v290 + 8 * v293);
    if (*(_BYTE *)v295 == 3)
    {
      v296 = *(_QWORD *)(v295 + 8);
      v297 = v289[15];
      if (v296 < (v289[16] - v297) >> 3)
        break;
    }
    if (++v293 >= v294)
      goto LABEL_417;
  }
  v298 = *(_QWORD *)(v297 + 8 * v296);
  if (!v298)
  {
LABEL_417:
    v850 = 0;
    if (v287 != 1)
      goto LABEL_421;
    goto LABEL_418;
  }
  v850 = *(_QWORD *)(*(_QWORD *)(v298 + 24) + 8 * v288);
  if (v287 == 1)
LABEL_418:
    *(_QWORD *)(v850 + 32) = *(_QWORD *)(v44 + 3160);
LABEL_421:
  v299 = v187[40];
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)__p = 0;
  v300 = *(_QWORD *)(v299 + 8);
  *(_QWORD *)&v301 = 0;
  *((_QWORD *)&v301 + 1) = v299;
  v876 = v301;
  if (v300)
    v302 = *(_WORD **)(v299 + 72);
  else
    v302 = 0;
  *(_OWORD *)__p = v301;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)&__p[24] = v300;
  *(_QWORD *)&__p[40] = v302;
  *(_WORD *)&__p[32] = 1;
  v303 = *(id *)a2;
  v304 = (_QWORD *)objc_msgSend(v303, "finalRenderTarget");
  v305 = v304[42];
  if (v305)
  {
    v306 = *(_DWORD *)(v305 + 36);
    goto LABEL_437;
  }
  v307 = v304[11];
  if (v307)
  {
    v308 = v304 + 12;
    goto LABEL_430;
  }
  v307 = v304[35];
  if (v307)
  {
    v308 = v304 + 36;
LABEL_430:
    v309 = 80;
    if (*(_DWORD *)(v307 + 56) == 3)
      v309 = 196;
    v310 = *(_DWORD *)(v307 + v309);
    v311 = v310 >> *v308;
    if (v311 <= 1)
      v311 = 1;
    if (v310)
      v306 = v311;
    else
      v306 = 0;
  }
  else
  {
    v306 = 0;
  }
LABEL_437:
  v312 = *(id *)a2;
  v313 = (_QWORD *)objc_msgSend(v312, "finalRenderTarget");
  _S0 = (float)v306;
  __asm { FCVT            H0, S0 }
  v316 = v313[42];
  if (v316)
  {
    LODWORD(v316) = *(_DWORD *)(v316 + 40);
    goto LABEL_450;
  }
  v316 = v313[11];
  if (v316)
  {
    v317 = v313 + 12;
    goto LABEL_443;
  }
  v316 = v313[35];
  if (v316)
  {
    v317 = v313 + 36;
LABEL_443:
    v318 = 84;
    if (*(_DWORD *)(v316 + 56) == 3)
      v318 = 196;
    v319 = *(_DWORD *)(v316 + v318);
    v320 = v319 >> *v317;
    if (v320 <= 1)
      v320 = 1;
    if (v319)
      LODWORD(v316) = v320;
    else
      LODWORD(v316) = 0;
  }
LABEL_450:
  _S1 = (float)v316;
  __asm { FCVT            H1, S1 }
  *v302 = _H0;
  v302[1] = LOWORD(_S1);

  if (v300)
  {
    v322.i32[1] = DWORD1(v876);
    if ((_QWORD)v876 && *(_BYTE *)(*((_QWORD *)&v876 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v876 + 64))();
    v323 = *(_QWORD *)(*((_QWORD *)&v876 + 1) + 64);
    if (v323 <= v300)
      v323 = v300;
    *(_QWORD *)(*((_QWORD *)&v876 + 1) + 56) = 0;
    *(_QWORD *)(*((_QWORD *)&v876 + 1) + 64) = v323;
  }
  v324 = (_QWORD *)v187[42];
  v325 = v324[1];
  v326 = v324[9];
  v322.i32[0] = *(_DWORD *)((char *)&v917 + 2);
  v327 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v322));
  *(_QWORD *)&v328 = vrev64q_s32(v327).u64[0];
  *((_QWORD *)&v328 + 1) = v327.i64[1];
  *(_OWORD *)v326 = v328;
  v329 = BYTE6(v917);
  *(_DWORD *)(v326 + 16) = v917;
  *(_DWORD *)(v326 + 20) = v329;
  if (v324[8] > v325)
    v325 = v324[8];
  v324[7] = 0;
  v324[8] = v325;
  v330 = *(_QWORD **)(v44 + 1752);
  v331 = v330[1];
  v332 = (float16x4_t *)v330[9];
  *v332 = vcvt_f16_f32(v927);
  v332[1] = vcvt_f16_f32(v928);
  v333 = v246;
  v334 = v246[122];
  v335 = v246[121];
  v336 = (float)((float)(1.0309 / v334) - (float)(1.0 / v335)) / (float)((float)(1.0 / v334) - (float)(1.0 / v335));
  v337 = 1.0 / (float)(1.0 - v336);
  _S1 = v336 / (float)(1.0 - v336);
  _S2 = v337 - _S1;
  _S3 = v923;
  _S4 = 1.0 - *(float *)&v921[1];
  __asm
  {
    FCVT            H3, S3
    FCVT            H2, S2
    FCVT            H1, S1
    FCVT            H4, S4
  }
  v332[2].i16[0] = _S3;
  v332[2].i16[1] = LOWORD(_S2);
  v332[2].i16[2] = LOWORD(_S1);
  v332[2].i16[3] = LOWORD(_S4);
  _KR00_8 = v922;
  __asm
  {
    FCVT            H1, S1
    FCVT            H2, S2
  }
  v332[3].i16[0] = LOWORD(_S1);
  v332[3].i16[1] = LOWORD(_S2);
  if (v330[8] > v331)
    v331 = v330[8];
  v330[7] = 0;
  v330[8] = v331;
  v343 = v246[4];
  _D2 = v343 * 0.5;
  _D1 = v343 * 1.5;
  v346 = *(_QWORD **)(v44 + 1848);
  v347 = v346[1];
  v348 = (_WORD *)v346[9];
  _S3 = v921[0];
  __asm { FCVT            H3, S3 }
  *v348 = _S3;
  v348[1] = 7193;
  __asm { FCVT            H2, D2 }
  v348[3] = LOWORD(_D2);
  __asm { FCVT            H1, D1 }
  v348[2] = LOWORD(_D1);
  v350 = *(_QWORD **)(v44 + 1864);
  v351 = v350[1];
  v352 = (_WORD *)v350[9];
  *v352 = _S3;
  v352[1] = 6588;
  v352[3] = LOWORD(_D2);
  v352[2] = LOWORD(_D1);
  v353 = *(_QWORD **)(v44 + 1880);
  v354 = v353[1];
  v355 = (_WORD *)v353[9];
  *v355 = _S3;
  v355[1] = 2702;
  v355[3] = LOWORD(_D2);
  v355[2] = LOWORD(_D1);
  v356 = *(_QWORD **)(v44 + 1896);
  v357 = v356[1];
  v358 = (_WORD *)v356[9];
  *v358 = _S3;
  v358[1] = 15360;
  v358[3] = LOWORD(_D2);
  v358[2] = LOWORD(_D1);
  if (v356[8] > v357)
    v357 = v356[8];
  v356[7] = 0;
  v356[8] = v357;
  if (v353[8] > v354)
    v354 = v353[8];
  v353[7] = 0;
  v353[8] = v354;
  if (v350[8] > v351)
    v351 = v350[8];
  v350[7] = 0;
  v350[8] = v351;
  if (v346[8] > v347)
    v347 = v346[8];
  v346[7] = 0;
  v346[8] = v347;
  v359 = *(_QWORD **)(v44 + 1816);
  v360 = v359[1];
  v361 = (_WORD *)v359[9];
  _S1 = v919[1];
  _S2 = v919[2];
  __asm
  {
    FCVT            H1, S1
    FCVT            H2, S2
  }
  *v361 = _S1;
  v361[1] = _S2;
  if (v359[8] > v360)
    v360 = v359[8];
  v359[7] = 0;
  v359[8] = v360;
  v364 = *(_QWORD *)(v44 + 1832);
  v365 = *(_QWORD *)(v364 + 8);
  _S0 = 1.0 - *((float *)&v920 + 1);
  __asm { FCVT            H0, S0 }
  **(_WORD **)(v364 + 72) = LOWORD(_S0);
  if (*(_QWORD *)(v364 + 64) > v365)
    v365 = *(_QWORD *)(v364 + 64);
  *(_QWORD *)(v364 + 56) = 0;
  *(_QWORD *)(v364 + 64) = v365;
  v367 = (uint64_t *)*((_QWORD *)a2 + 1);
  v368 = (int8x8_t)v367[1];
  if (v368)
  {
    v369 = (uint8x8_t)vcnt_s8(v368);
    v369.i16[0] = vaddlv_u8(v369);
    if (v369.u32[0] > 1uLL)
    {
      v370 = 0xF014CCE28176CA44;
      if (*(_QWORD *)&v368 <= 0xF014CCE28176CA44)
        v370 = 0xF014CCE28176CA44 % *(_QWORD *)&v368;
    }
    else
    {
      v370 = (*(_QWORD *)&v368 - 1) & 0xF014CCE28176CA44;
    }
    v373 = *v367;
    v374 = *(_QWORD **)(v373 + 8 * v370);
    if (!v374)
      goto LABEL_505;
    v375 = (_QWORD *)*v374;
    if (!v375)
      goto LABEL_505;
    if (v369.u32[0] < 2uLL)
    {
      while (1)
      {
        v377 = v375[1];
        if (v377 == 0xF014CCE28176CA44)
        {
          if (v375[2] == 0xF014CCE28176CA44)
            goto LABEL_503;
        }
        else if ((v377 & (*(_QWORD *)&v368 - 1)) != v370)
        {
          goto LABEL_505;
        }
        v375 = (_QWORD *)*v375;
        if (!v375)
          goto LABEL_505;
      }
    }
    while (1)
    {
      v376 = v375[1];
      if (v376 == 0xF014CCE28176CA44)
      {
        if (v375[2] == 0xF014CCE28176CA44)
        {
LABEL_503:
          v384 = v375[5];
          if (*(_QWORD *)(v384 + 8) == 0xF014CCE28176CA44)
          {
            v857 = *(_QWORD **)(v384 + 32);
LABEL_506:
            v371 = a2;
            v372 = v859;
            if (v369.u32[0] > 1uLL)
            {
              v385 = 0x8BD499FBD96FBB9ELL;
              if (*(_QWORD *)&v368 <= 0x8BD499FBD96FBB9ELL)
                v385 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v368;
            }
            else
            {
              v385 = (*(_QWORD *)&v368 - 1) & 0x8BD499FBD96FBB9ELL;
            }
            v386 = *(_QWORD **)(v373 + 8 * v385);
            if (!v386)
              goto LABEL_528;
            v387 = (_QWORD *)*v386;
            if (!v387)
              goto LABEL_528;
            if (v369.u32[0] < 2uLL)
            {
              v388 = *(_QWORD *)&v368 - 1;
              while (1)
              {
                v390 = v387[1];
                if (v390 == 0x8BD499FBD96FBB9ELL)
                {
                  if (v387[2] == 0x8BD499FBD96FBB9ELL)
                    goto LABEL_526;
                }
                else if ((v390 & v388) != v385)
                {
                  goto LABEL_528;
                }
                v387 = (_QWORD *)*v387;
                if (!v387)
                  goto LABEL_528;
              }
            }
            while (1)
            {
              v389 = v387[1];
              if (v389 == 0x8BD499FBD96FBB9ELL)
              {
                if (v387[2] == 0x8BD499FBD96FBB9ELL)
                {
LABEL_526:
                  v391 = (int8x8_t *)v387[5];
                  if (*(_QWORD *)&v391[1] == 0x8BD499FBD96FBB9ELL)
                  {
                    v368 = v391[4];
                    goto LABEL_529;
                  }
LABEL_528:
                  v368 = 0;
                  goto LABEL_529;
                }
              }
              else
              {
                if (v389 >= *(_QWORD *)&v368)
                  v389 %= *(_QWORD *)&v368;
                if (v389 != v385)
                  goto LABEL_528;
              }
              v387 = (_QWORD *)*v387;
              if (!v387)
                goto LABEL_528;
            }
          }
LABEL_505:
          v857 = 0;
          goto LABEL_506;
        }
      }
      else
      {
        if (v376 >= *(_QWORD *)&v368)
          v376 %= *(_QWORD *)&v368;
        if (v376 != v370)
          goto LABEL_505;
      }
      v375 = (_QWORD *)*v375;
      if (!v375)
        goto LABEL_505;
    }
  }
  v857 = 0;
  v371 = a2;
  v372 = v859;
LABEL_529:
  v915 = buf;
  if (*(float *)(*(_QWORD *)&v368 + 16) <= 0.01
    && *(_BYTE *)(*(_QWORD *)&v368 + 3)
    && (v392 = *(unsigned __int8 *)(v44 + 3560), v914 = 0, v392 != 3))
  {
    v870 = 0;
    v393 = **(_BYTE **)&v368 != 0;
    v862 = 1;
  }
  else
  {
    v862 = 0;
    v393 = 0;
    v870 = 1;
  }
  v914 = v393;
  v846 = 0.0;
  v847 = 1.0;
  if (v860)
  {
    v845 = 1.0;
    v843 = 0.0;
    v844 = 0.0;
    v842 = 0.0;
    v840 = 0.0;
    v841 = 1.0;
    v838 = 0.0;
    v839 = 0.0;
    v837 = 0.0;
    v835 = 0.0;
    v836 = 1.0;
    v834 = 0.0;
    v833 = 0uLL;
  }
  else
  {
    v845 = 1.0;
    v843 = 0.0;
    v844 = 0.0;
    v842 = 0.0;
    v840 = 0.0;
    v841 = 1.0;
    v838 = 0.0;
    v839 = 0.0;
    v837 = 0.0;
    v835 = 0.0;
    v836 = 1.0;
    v834 = 0.0;
    v833 = 0uLL;
    if (buf[6])
    {
      v394 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v187[1] + 96) + 8 * *(_QWORD *)(v187[10] + 32)) + 16);
      v395.i64[0] = *(unsigned int *)(v394 + 80);
      v395.i64[1] = *(unsigned int *)(v394 + 84);
      v396 = vcvtq_f64_u64(v395);
      v397 = *(double *)(v192 + 264);
      v398 = *(double *)(v192 + 288);
      v399 = *(double *)(v192 + 232);
      LODWORD(v394) = *(unsigned __int8 *)(v192 + 240);
      memset(&__p[8], 0, 32);
      v400 = v399 + -1.0;
      if (!(_DWORD)v394)
        v400 = 1.0 - v399;
      memset(&__p[48], 0, 32);
      *(double *)&__p[80] = v400 / (v397 - v398);
      *(_QWORD *)&__p[88] = 0;
      v401 = *(float64x2_t *)(v192 + 248);
      v402 = vsubq_f64(*(float64x2_t *)(v192 + 272), v401);
      v403 = fmax(v402.f64[0], v402.f64[1]);
      *(double *)&v404 = v403;
      v405 = vdivq_f64((float64x2_t)vdupq_lane_s64(v404, 0), v396);
      __asm { FMOV            V16.2D, #0.5 }
      v407 = vmlaq_f64(v401, _Q16, v402);
      v408 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v404 * 0.5), 0);
      v409 = vsubq_f64(v407, v408);
      v410 = vaddq_f64(v408, v407);
      v411 = vmulq_f64(vrndmq_f64(vdivq_f64(v409, v405)), v405);
      v412 = vmulq_f64(vrndmq_f64(vdivq_f64(v410, v405)), v405);
      v413 = vsubq_f64(v412, v411);
      *(double *)__p = 2.0 / v413.f64[0];
      *(double *)&__p[40] = 2.0 / v413.f64[1];
      *(float64x2_t *)&__p[96] = vdivq_f64(vnegq_f64(vaddq_f64(v412, v411)), v413);
      v948.f64[0] = -(v398 - v399 * v397) / (v397 - v398);
      v948.f64[1] = 1.0;
      gm::operator*<double,4,4,4>((double *)&__dst, (double *)__p, (double *)(v192 + 296));
      v847 = *(double *)&__dst;
      v833 = v934;
      v834 = *(double *)&v935;
      v835 = *(double *)v936;
      v836 = *(double *)&v936[1];
      v837 = v937;
      v838 = v938;
      v839 = *(double *)&v939;
      v840 = v940;
      v841 = v941;
      v842 = v942;
      v843 = v943;
      v846 = v945;
      v844 = v944;
      v845 = v946;
    }
  }
  v912 = 0;
  v911 = 0;
  v913 = 0;
  v414 = *(const md::DaVinciGroundRenderable ***)v829;
  v855 = *(const md::DaVinciGroundRenderable ***)(v829 + 8);
  *(_QWORD *)(v44 + 3624) = ((uint64_t)v855 - *(_QWORD *)v829) >> 3;
  if (v855 != v414)
  {
    v415 = (void **)(v44 + 3328);
    v854 = v246;
    v849 = v246 + 101;
    __asm { FMOV            V8.2S, #1.0 }
    v417 = 1.0;
    v872 = (void **)(v44 + 3328);
    while (1)
    {
      v910 = 0;
      v864 = v414;
      v418 = *v414;
      v910 = v418;
      v419 = *((_QWORD *)v418 + 48);
      v420 = (double *)*((_QWORD *)v333 + 698);
      if (!v420)
        v420 = v333;
      gm::operator*<double,4,4,4>((double *)__p, v420 + 101, (double *)v418 + 11);
      *(float *)&v421 = *(double *)__p;
      *(float *)&v422 = *(double *)&__p[8];
      v897.__locale_ = (std::locale::__imp *)__PAIR64__(v422, v421);
      *(float *)&v423 = *(double *)&__p[16];
      *(float *)&v424 = *(double *)&__p[24];
      v898 = __PAIR64__(v424, v423);
      *(float *)&v425 = *(double *)&__p[32];
      *(float *)&v426 = *(double *)&__p[40];
      v899 = __PAIR64__(v426, v425);
      *(float *)&v427 = *(double *)&__p[48];
      v428 = *(double *)&__p[56];
      v900 = v427;
      v901 = v428;
      v429 = *(double *)&__p[64];
      v430 = *(double *)&__p[72];
      v902 = v429;
      v903 = v430;
      v431 = *(double *)&__p[80];
      v432 = *(double *)&__p[88];
      v904 = v431;
      v905 = v432;
      v433 = *(double *)&__p[96];
      v434 = *(double *)&__p[104];
      v906 = v433;
      v907 = v434;
      v435 = v948.f64[0];
      v436 = v948.f64[1];
      v908 = v435;
      v909 = v436;
      v437 = *(float *)&v424 + *(float *)&v421;
      v438 = v428 + *(float *)&v425;
      v439 = v432 + v429;
      v440 = v436 + v433;
      v441 = *(float *)&v424 - *(float *)&v421;
      v442 = v428 - *(float *)&v425;
      v443 = v432 - v429;
      v444 = v436 - v433;
      v445 = *(float *)&v424 + *(float *)&v422;
      v446 = v428 + *(float *)&v426;
      v447 = v432 + v430;
      v448 = sqrtf((float)((float)(v445 * v445) + (float)(v446 * v446)) + (float)(v447 * v447));
      v449 = *(float *)&v424 - *(float *)&v422;
      v450 = v428 - *(float *)&v426;
      v451 = v432 - v430;
      v452 = v428 - *(float *)&v427;
      v453.i32[0] = v423;
      v453.f32[1] = *(float *)&v424 - *(float *)&v423;
      v454.f32[0] = v431;
      v454.f32[1] = v432 - v431;
      v455 = vdiv_f32(_D8, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v453, v453), (float32x2_t)__PAIR64__(LODWORD(v452), v427), (float32x2_t)__PAIR64__(LODWORD(v452), v427)), v454, v454)));
      *(float *)&__dst = *(float *)&v423 * v455.f32[0];
      *((float *)&__dst + 1) = *(float *)&v427 * v455.f32[0];
      v453.f32[0] = v435;
      *(float32x2_t *)((char *)&v934 + 4) = vmul_f32(v455, v453);
      *(float *)&v934 = v431 * v455.f32[0];
      HIDWORD(v934) = vmuls_lane_f32(v452, v455, 1);
      *(double *)&v935 = COERCE_DOUBLE(__PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(v436 - v435, v455, 1)), COERCE_UNSIGNED_INT(vmuls_lane_f32(v432 - v431, v455, 1))));
      *(float *)v936 = (float)(v417 / v448) * v445;
      *((float *)v936 + 1) = (float)(v417 / v448) * v446;
      *(float *)&v936[1] = (float)(v417 / v448) * v447;
      *((float *)&v936[1] + 1) = (float)(v436 + v434) * (float)(v417 / v448);
      v453.f32[0] = v417 / sqrtf((float)((float)(v449 * v449) + (float)(v450 * v450)) + (float)(v451 * v451));
      *(float *)&v937 = v453.f32[0] * v449;
      *((float *)&v937 + 1) = v453.f32[0] * v450;
      *(float *)&v938 = v453.f32[0] * v451;
      *((float *)&v938 + 1) = (float)(v436 - v434) * v453.f32[0];
      v453.f32[0] = v417 / sqrtf((float)((float)(v437 * v437) + (float)(v438 * v438)) + (float)(v439 * v439));
      *(float *)&v939 = v453.f32[0] * v437;
      *((float *)&v939 + 1) = v453.f32[0] * v438;
      *(float *)&v940 = v453.f32[0] * v439;
      *((float *)&v940 + 1) = v440 * v453.f32[0];
      v453.f32[0] = v417 / sqrtf((float)((float)(v441 * v441) + (float)(v442 * v442)) + (float)(v443 * v443));
      *(float *)&v941 = v453.f32[0] * v441;
      *((float *)&v941 + 1) = v453.f32[0] * v442;
      *(float *)&v942 = v453.f32[0] * v443;
      *((float *)&v942 + 1) = v444 * v453.f32[0];
      geo::Frustum<float>::calculateCorners((float *)&__dst, (float *)&v897);
      v456 = md::MeshRenderableContext::renderablesForRegistry(v857, *(_QWORD *)(v419 + 1320));
      v458 = (v456[1] - *v456) >> 3;
      v459 = v912;
      v460 = (int8x16_t *)v911;
      v461 = ((char *)v912 - (_BYTE *)v911) >> 3;
      if (v458 <= v461)
      {
        if (v458 < v461)
        {
          v459 = (int8x16_t *)((char *)v911 + 8 * v458);
          v912 = v459;
        }
      }
      else
      {
        std::vector<unsigned long>::__append((uint64_t)&v911, v458 - v461);
        v460 = (int8x16_t *)v911;
        v459 = v912;
      }
      if (v460 == v459)
      {
        v460 = v459;
        goto LABEL_565;
      }
      v462 = (char *)v459 - (char *)v460 - 8;
      if (v462 <= 0x17)
        break;
      v465 = (v462 >> 3) + 1;
      v463 = v465 & 0x3FFFFFFFFFFFFFFCLL;
      v457 = (int32x4_t)xmmword_19FFB2E40;
      v466 = (int64x2_t *)&v460[1];
      v467 = v465 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v466[-1] = (int64x2_t)v457;
        *v466 = vaddq_s64((int64x2_t)v457, vdupq_n_s64(2uLL));
        v457 = (int32x4_t)vaddq_s64((int64x2_t)v457, vdupq_n_s64(4uLL));
        v466 += 2;
        v467 -= 4;
      }
      while (v467);
      if (v465 != v463)
      {
        v464 = (int8x16_t *)((char *)v460 + 8 * (v465 & 0x3FFFFFFFFFFFFFFCLL));
        do
        {
LABEL_555:
          v464->i64[0] = v463;
          v464 = (int8x16_t *)((char *)v464 + 8);
          ++v463;
        }
        while (v464 != v459);
      }
      *(_QWORD *)__p = v456;
      *(_QWORD *)&__p[8] = &v915;
      v468 = *v456;
      v469 = v460;
      while (1)
      {
        v470 = *(_QWORD *)(v468 + 8 * v469->i64[0]);
        v471 = *(unsigned __int8 *)(*(_QWORD *)(v470 + 216) + 32);
        if ((v471 - 4) < 0xFFFFFFFD || !v915[3] && (v471 - 1) < 2)
          break;
        if (!*(_BYTE *)(v470 + 144))
          break;
        v469 = (int8x16_t *)((char *)v469 + 8);
        if (v469 == v459)
          goto LABEL_565;
      }
      v472 = &v459[-1].u64[1];
      if (v469 == (int8x16_t *)v472)
      {
LABEL_564:
        v459 = v469;
      }
      else
      {
        while (1)
        {
          v497 = *(_QWORD *)(v468 + 8 * *v472);
          v498 = *(unsigned __int8 *)(*(_QWORD *)(v497 + 216) + 32);
          if ((v498 - 4) >= 0xFFFFFFFD && (v915[3] || (v498 - 1) >= 2))
          {
            if (*(_BYTE *)(v497 + 144))
              break;
          }
          if (--v472 == (unint64_t *)v469)
            goto LABEL_564;
        }
        if ((char *)v472 - (char *)v469 < 17)
        {
LABEL_631:
          v512 = 0;
          v510 = 0;
        }
        else
        {
          if ((((char *)v472 - (char *)v469) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
            v510 = 0xFFFFFFFFFFFFFFFLL;
          else
            v510 = (((char *)v472 - (char *)v469) >> 3) + 1;
          while (1)
          {
            v511 = operator new(8 * v510, MEMORY[0x1E0DE4E10]);
            if (v511)
              break;
            v627 = v510 > 1;
            v510 >>= 1;
            if (!v627)
              goto LABEL_631;
          }
          v512 = v511;
        }
        v459 = (int8x16_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_2 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v469, v472, (uint64_t **)__p, (((char *)v472 - (char *)v469) >> 3) + 1, (unint64_t)v512, v510);
        if (v512)
        {
          operator delete(v512);
          v460 = (int8x16_t *)v911;
        }
        v415 = v872;
      }
LABEL_565:
      v473 = *(void **)(v44 + 3328);
      *(_QWORD *)(v44 + 3336) = v473;
      v474 = v44;
      if (v459 >= v460)
        v475 = ((char *)v459 - (char *)v460) >> 3;
      else
        v475 = 0;
      if (v475 > (uint64_t)(*(_QWORD *)(v474 + 3344) - (_QWORD)v473) >> 3)
      {
        if (v475 >> 61)
          abort();
        v476 = (char *)operator new(8 * v475);
        *((_QWORD *)v871 + 416) = v476;
        *((_QWORD *)v871 + 417) = v476;
        *((_QWORD *)v871 + 418) = &v476[8 * v475];
        if (v473)
          operator delete(v473);
      }
      v873 = v419;
      v477 = v460;
      v877 = v460;
      v44 = (uint64_t)v871;
      if (v460 == v459)
      {
        v893 = (void **)&__dst;
        v894 = v456;
        v478 = v460;
        v459 = v460;
        v895 = &v910;
        v896 = &v930;
        v371 = a2;
      }
      else
      {
        do
        {
          v480 = *(_QWORD *)(*v456 + 8 * v477->i64[0]);
          if (*(_BYTE *)(v480 + 72) && *(_BYTE *)(v480 + 146))
          {
            v481 = *(_QWORD **)(v44 + 3336);
            v482 = *(_QWORD *)(v44 + 3344);
            if ((unint64_t)v481 < v482)
            {
              *v481 = v480;
              v479 = v481 + 1;
            }
            else
            {
              v483 = *v415;
              v484 = (char *)v481 - (_BYTE *)*v415;
              v485 = v484 >> 3;
              v486 = (v484 >> 3) + 1;
              if (v486 >> 61)
                abort();
              v487 = v482 - (_QWORD)v483;
              if (v487 >> 2 > v486)
                v486 = v487 >> 2;
              if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFF8)
                v488 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v488 = v486;
              if (v488)
              {
                if (v488 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v489 = operator new(8 * v488);
              }
              else
              {
                v489 = 0;
              }
              v490 = &v489[8 * v485];
              *v490 = v480;
              v479 = v490 + 1;
              if (v481 == (_QWORD *)v483)
              {
                v483 = v481;
              }
              else
              {
                v491 = (char *)(v481 - 1) - v483;
                if (v491 < 0x58)
                  goto LABEL_990;
                if ((unint64_t)((char *)v481 - &v489[v484]) < 0x20)
                  goto LABEL_990;
                v492 = (v491 >> 3) + 1;
                v493 = (int32x4_t *)&v489[8 * v485 - 16];
                v494 = (int32x4_t *)(v481 - 2);
                v495 = v492 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v457 = *v494;
                  v493[-1] = v494[-1];
                  *v493 = v457;
                  v493 -= 2;
                  v494 -= 2;
                  v495 -= 4;
                }
                while (v495);
                v490 -= v492 & 0x3FFFFFFFFFFFFFFCLL;
                v481 -= v492 & 0x3FFFFFFFFFFFFFFCLL;
                if (v492 != (v492 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_990:
                  do
                  {
                    v496 = *--v481;
                    *--v490 = v496;
                  }
                  while (v481 != (_QWORD *)v483);
                  v483 = *v872;
                }
              }
              v44 = (uint64_t)v871;
              *((_QWORD *)v871 + 416) = v490;
              *((_QWORD *)v871 + 417) = v479;
              *((_QWORD *)v871 + 418) = &v489[8 * v488];
              if (v483)
                operator delete(v483);
              v415 = v872;
            }
            *(_QWORD *)(v44 + 3336) = v479;
          }
          v477 = (int8x16_t *)((char *)v477 + 8);
        }
        while (v477 != v459);
        v893 = (void **)&__dst;
        v894 = v456;
        v478 = v877;
        v499 = v877;
        v895 = &v910;
        v896 = &v930;
        v371 = a2;
        while (1)
        {
          v500 = (float *)v893;
          md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)__p, *(md::MeshRenderable **)(*v894 + 8 * v499->i64[0]), *v895, *v896, v457);
          if (!geo::Intersect::encloses<float>(v500, (float *)__p))
            break;
          v499 = (int8x16_t *)((char *)v499 + 8);
          if (v499 == v459)
            goto LABEL_636;
        }
        v501 = (int8x16_t *)((char *)v459 - 8);
        do
        {
          v502 = (char *)v501 - (char *)v499;
          if (v501 == v499)
          {
            v459 = v499;
            v44 = (uint64_t)v871;
            goto LABEL_636;
          }
          v503 = (unint64_t *)v501;
          v504 = (float *)v893;
          md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)__p, *(md::MeshRenderable **)(*v894 + 8 * v501->i64[0]), *v895, *v896, v457);
          v505 = geo::Intersect::encloses<float>(v504, (float *)__p);
          v501 = (int8x16_t *)(v503 - 1);
        }
        while (!v505);
        v506 = (v502 >> 3) + 1;
        if (v502 < 17)
        {
          v509 = 0;
          v507 = 0;
          v44 = (uint64_t)v871;
        }
        else
        {
          if (v506 >= 0xFFFFFFFFFFFFFFFLL)
            v507 = 0xFFFFFFFFFFFFFFFLL;
          else
            v507 = (v502 >> 3) + 1;
          v44 = (uint64_t)v871;
          while (1)
          {
            v508 = (char *)operator new(8 * v507, MEMORY[0x1E0DE4E10]);
            if (v508)
              break;
            v627 = v507 > 1;
            v507 >>= 1;
            if (!v627)
            {
              v509 = 0;
              v507 = 0;
              goto LABEL_633;
            }
          }
          v509 = v508;
        }
LABEL_633:
        v459 = (int8x16_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_3 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v499, v503, (uint64_t)&v893, v506, v509, v507, v457);
        if (v509)
          operator delete(v509);
        v415 = v872;
      }
LABEL_636:
      v891 = v478;
      v892 = v459;
      if (buf[6])
        v513 = v860 == 0;
      else
        v513 = 0;
      if (v513)
      {
        v514 = *((double *)v910 + 11);
        v515 = *((double *)v910 + 12);
        v516 = *((double *)v910 + 13);
        v517 = *((double *)v910 + 14);
        v878 = v514 * v847 + v515 * v835 + v516 * v839 + v517 * v843;
        v518 = *((double *)v910 + 15);
        v519 = *((double *)v910 + 16);
        v520 = *((double *)v910 + 17);
        v521 = *((double *)v910 + 18);
        v522 = *((double *)v910 + 19);
        v523 = *((double *)v910 + 20);
        v524 = *((double *)v910 + 21);
        v525 = *((double *)v910 + 22);
        v852 = v522 * v847 + v523 * v835 + v524 * v839 + v525 * v843;
        v853 = v518 * v847 + v519 * v835 + v520 * v839 + v521 * v843;
        v526 = v514 * *(double *)&v833 + v515 * v836;
        v527 = v514 * *((double *)&v833 + 1) + v515 * v837;
        v528 = v514 * v834 + v515 * v838;
        v529 = *((double *)v910 + 23);
        v530 = *((double *)v910 + 24);
        v531 = v526 + v516 * v840 + v517 * v844;
        v532 = v527 + v516 * v841;
        v533 = v528 + v516 * v842;
        v534 = v518 * *(double *)&v833 + v519 * v836;
        v535 = v532 + v517 * v846;
        v536 = v533 + v517 * v845;
        v537 = v518 * *((double *)&v833 + 1) + v519 * v837;
        v538 = v518 * v834 + v519 * v838;
        v539 = v529 * v847 + v530 * v835;
        v540 = v534 + v520 * v840 + v521 * v844;
        v541 = v537 + v520 * v841;
        v542 = v538 + v520 * v842;
        v543 = v522 * *(double *)&v833 + v523 * v836 + v524 * v840 + v525 * v844;
        v544 = v541 + v521 * v846;
        v545 = v542 + v521 * v845;
        v546 = v522 * *((double *)&v833 + 1) + v523 * v837;
        v547 = v522 * v834 + v523 * v838;
        v548 = v529 * *(double *)&v833 + v530 * v836;
        v549 = v546 + v524 * v841 + v525 * v846;
        v550 = v547 + v524 * v842;
        v551 = v529 * *((double *)&v833 + 1) + v530 * v837;
        v552 = v550 + v525 * v845;
        v553 = v529 * v834 + v530 * v838;
        v554 = *((double *)v910 + 25);
        v555 = *((double *)v910 + 26);
        v417 = 1.0;
        v556 = v539 + v554 * v839 + v555 * v843;
        v557 = v548 + v554 * v840 + v555 * v844;
        v558 = v551 + v554 * v841 + v555 * v846;
        v559 = v553 + v554 * v842 + v555 * v845;
        v560 = v878;
        *(float *)&v554 = v531;
        v561 = (_QWORD *)*((_QWORD *)v910 + 50);
        v562 = v561[1];
        v563 = v561[9];
        *(float *)v563 = v560;
        *(_DWORD *)(v563 + 4) = LODWORD(v554);
        v564 = v535;
        *(float *)&v536 = v536;
        *(float *)(v563 + 8) = v564;
        *(_DWORD *)(v563 + 12) = LODWORD(v536);
        v565 = v853;
        v566 = v540;
        *(float *)(v563 + 16) = v565;
        *(float *)(v563 + 20) = v566;
        v567 = v544;
        v568 = v545;
        *(float *)(v563 + 24) = v567;
        *(float *)(v563 + 28) = v568;
        v569 = v852;
        v570 = v543;
        *(float *)(v563 + 32) = v569;
        *(float *)(v563 + 36) = v570;
        v571 = v549;
        v572 = v552;
        *(float *)(v563 + 40) = v571;
        *(float *)(v563 + 44) = v572;
        v573 = v556;
        v574 = v557;
        *(float *)(v563 + 48) = v573;
        *(float *)(v563 + 52) = v574;
        v575 = v558;
        v576 = v559;
        *(float *)(v563 + 56) = v575;
        *(float *)(v563 + 60) = v576;
        if (v561[8] > v562)
          v562 = v561[8];
        v561[7] = 0;
        v561[8] = v562;
      }
      if (v918)
      {
        v577 = v910;
        gm::operator*<double,4,4,4>((double *)__p, v849, (double *)v910 + 11);
        v578 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&__p[32]), *(float64x2_t *)&__p[48]);
        v579 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&__p[64]), *(float64x2_t *)&__p[80]);
        v580 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&__p[96]), v948);
        v581 = (_QWORD *)*((_QWORD *)v577 + 52);
        v582 = v581[1];
        v583 = (float32x4_t *)v581[9];
        *v583 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__p), *(float64x2_t *)&__p[16]);
        v583[1] = v578;
        v583[2] = v579;
        v583[3] = v580;
        if (v581[8] > v582)
          v582 = v581[8];
        v581[7] = 0;
        v581[8] = v582;
      }
      v890[0] = &v891;
      v890[1] = v456;
      v890[2] = &v914;
      v889 = 257;
      v585 = (uint64_t *)md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, (unsigned __int8 *)&v889);
      v372 = v859;
      if ((_BYTE)v889)
        LOBYTE(v889) = 0;
      memset(__p, 0, 32);
      memset(&__p[40], 0, 32);
      *(_DWORD *)&__p[32] = 1065353216;
      *(_DWORD *)&__p[72] = 1065353216;
      memset(&__p[80], 0, 32);
      memset(&v948.f64[1], 0, 32);
      LODWORD(v948.f64[0]) = 1065353216;
      v949 = 1065353216;
      v950 = 0u;
      v951 = 0u;
      v953 = 0u;
      v954 = 0u;
      v952 = 1065353216;
      v955 = 1065353216;
      v586 = v862;
      md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v585, v584, v456, v858, v862);
      v888 = 513;
      v588 = (uint64_t *)md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, (unsigned __int8 *)&v888);
      if ((_BYTE)v888)
        LOBYTE(v888) = 0;
      md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v588, v587, v456, v868, v862);
      v887 = 769;
      v590 = (uint64_t *)md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, (unsigned __int8 *)&v887);
      if ((_BYTE)v887)
        LOBYTE(v887) = 0;
      md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v590, v589, v456, v868, v862);
      v886 = 1;
      v592 = (uint64_t *)md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, (unsigned __int8 *)&v886);
      if ((_BYTE)v886)
        LOBYTE(v886) = 0;
      md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v592, v591, v456, v866, v862);
      if (!v856)
      {
        v885 = 1025;
        v596 = (uint64_t *)md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, (unsigned __int8 *)&v885);
        if ((_BYTE)v885)
          LOBYTE(v885) = 0;
        md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v596, v595, v456, v848, v862);
      }
      if (v914 && v859)
      {
        v884[0] = 0;
        md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()((uint64_t)v890, v884);
        v598 = v597;
        if (v884[0])
          v884[0] = 0;
        v599 = v892;
        v883 = 769;
        v600 = md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator()(v597, v892, v456, (uint64_t)&v883);
        if ((_BYTE)v883)
          LOBYTE(v883) = 0;
        md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v598->i64, v600->i64, v456, v832, v862);
        v882 = 1;
        v601 = md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_5::operator()(v598, v599, v456, (uint64_t)&v882);
        if ((_BYTE)v882)
          LOBYTE(v882) = 0;
        md::DaVinciGroundRenderLayer::layoutMainPass(v44, v371, (uint64_t)buf, (uint64_t)__p, (uint64_t)v910, v598->i64, v601->i64, v456, v859, v862);
      }
      v602 = (uint64_t *)v911;
      v912 = (int8x16_t *)v911;
      v603 = *(_QWORD *)(v44 + 3336) - *(_QWORD *)(v44 + 3328);
      if (!v603
        || (std::vector<unsigned long>::__append((uint64_t)&v911, v603 >> 3),
            v602 = (uint64_t *)v911,
            v604 = (uint64_t *)v912,
            v911 == v912))
      {
        v604 = v602;
        goto LABEL_700;
      }
      v605 = (char *)v912 - (_BYTE *)v911 - 8;
      if (v605 < 0x18)
      {
        v606 = 0;
        v607 = (uint64_t *)v911;
        goto LABEL_678;
      }
      v608 = (v605 >> 3) + 1;
      v606 = v608 & 0x3FFFFFFFFFFFFFFCLL;
      v593 = (int32x4_t)xmmword_19FFB2E40;
      v609 = (int64x2_t *)((char *)v911 + 16);
      v610 = v608 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v609[-1] = (int64x2_t)v593;
        *v609 = vaddq_s64((int64x2_t)v593, vdupq_n_s64(2uLL));
        v593 = (int32x4_t)vaddq_s64((int64x2_t)v593, vdupq_n_s64(4uLL));
        v609 += 2;
        v610 -= 4;
      }
      while (v610);
      if (v608 != v606)
      {
        v607 = &v602[v608 & 0x3FFFFFFFFFFFFFFCLL];
        do
LABEL_678:
          *v607++ = v606++;
        while (v607 != v604);
      }
      v611 = v602;
      while (1)
      {
        if ((v870 & 1) != 0)
        {
          while (1)
          {
            v612 = (md::MeshRenderable *)*((_QWORD *)*v415 + *v611);
            if (!*((_BYTE *)v612 + 72))
              break;
            md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)&v931, v612, v910, v930, v593);
            if (!geo::Intersect::encloses<float>((float *)&__dst, (float *)v931.i32))
              break;
            if (++v611 == v604)
              goto LABEL_699;
          }
        }
        else
        {
          while (1)
          {
            v613 = (md::MeshRenderable *)*((_QWORD *)*v415 + *v611);
            if (!*((_BYTE *)v613 + 72))
              break;
            if (!*((_BYTE *)v613 + 147))
              break;
            md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)&v931, v613, v910, v930, v593);
            if (!geo::Intersect::encloses<float>((float *)&__dst, (float *)v931.i32))
              break;
            if (++v611 == v604)
              goto LABEL_699;
          }
        }
        if (v611 == --v604)
          break;
        while (1)
        {
          v614 = (md::MeshRenderable *)*((_QWORD *)*v415 + *v604);
          if (*((_BYTE *)v614 + 72))
          {
            if (((*((_BYTE *)v614 + 147) == 0) & ~v870) == 0)
            {
              md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)&v931, v614, v910, v930, v593);
              if (geo::Intersect::encloses<float>((float *)&__dst, (float *)v931.i32))
                break;
            }
          }
          if (--v604 == v611)
            goto LABEL_698;
        }
        v615 = *v611;
        *v611++ = *v604;
        *v604 = v615;
        if (v611 == v604)
          goto LABEL_699;
      }
LABEL_698:
      v604 = v611;
LABEL_699:
      v586 = v862;
LABEL_700:
      v616 = *(_BYTE *)(v44 + 3560);
      v931 = 0uLL;
      v932 = 0;
      if ((v616 & 0xFE) == 2)
      {
        if (v602 == v604)
        {
          v604 = v602;
          if (!buf[6])
            goto LABEL_723;
          goto LABEL_719;
        }
        v617 = 0uLL;
        *(_QWORD *)&v594 = 0;
        v618 = v602;
        do
        {
          v874 = v594;
          v879 = v617;
          md::DaVinciGroundRenderLayer::adjustedMeshBounds((float32x4_t *)&v880, *((md::MeshRenderable **)*v415 + *v618), v910, v930, v593);
          v593.i64[1] = v880.i64[1];
          v619 = (float32x4_t)v880;
          v619.i32[3] = v879.i32[3];
          v620 = (float32x4_t)v879;
          v620.i32[3] = v880.i32[3];
          v617 = vbslq_s8((int8x16_t)vcgtq_f32(v620, v619), v880, v879);
          *(float32x2_t *)v593.i8 = v881;
          *((_QWORD *)&v594 + 1) = *((_QWORD *)&v874 + 1);
          *(float32x2_t *)&v594 = vmaxnm_f32(*(float32x2_t *)&v874, v881);
          ++v618;
        }
        while (v618 != v604);
        v931 = v617;
        v932 = v594;
        v621 = *((float *)&v594 + 1);
        v622 = *(float *)&v617.i32[3];
        v623 = *(float *)&v617.i32[2];
        v624 = *(float *)&v617.i32[1];
        v586 = v862;
        if (!buf[6])
          goto LABEL_723;
      }
      else
      {
        if (*((unsigned __int8 *)v910 + 24) == 255)
        {
          v626 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v873 + 32))(v873);
          md::GeometryLogic::adjustedMeshBounds((uint64_t)&v880, v626, *((_QWORD *)v910 + 29));
          v624 = *(float *)&v880.i32[1];
          v617.i32[0] = v880.i32[0];
          v931 = v880;
          v622 = *(float *)&v880.i32[3];
          v623 = *(float *)&v880.i32[2];
          v621 = v881.f32[1];
          LODWORD(v594) = v881.i32[0];
        }
        else
        {
          v625 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v873 + 32))(v873);
          v617.i32[0] = *(_DWORD *)v625;
          v624 = *(float *)(v625 + 4);
          v931.i32[0] = *(_DWORD *)v625;
          *(float *)&v931.i32[1] = v624;
          v623 = *(float *)(v625 + 8);
          v622 = *(float *)(v625 + 12);
          v931.i64[1] = __PAIR64__(LODWORD(v622), LODWORD(v623));
          LODWORD(v594) = *(_DWORD *)(v625 + 16);
          v621 = *(float *)(v625 + 20);
        }
        v932 = __PAIR64__(LODWORD(v621), v594);
        if (!buf[6])
          goto LABEL_723;
      }
      v627 = v622 < *(float *)v617.i32 || *(float *)&v594 < v624;
      if (v627 || v621 < v623)
      {
LABEL_720:
        if (*(_BYTE *)(v44 + 3560) != 3 && !v860)
          md::DaVinciGroundRenderLayer::layoutShadowMap(v44, *((uint64_t **)v371 + 1), (uint64_t)buf, (uint64_t)v910, 0, v602, v604, v415, v830, 0, v831);
        goto LABEL_723;
      }
LABEL_719:
      if (geo::Intersect::encloses<float>((float *)&__dst, (float *)v931.i32))
        goto LABEL_720;
LABEL_723:
      if (v918
        && (*(float *)&v931.i32[3] < *(float *)v931.i32
         || *(float *)&v932 < *(float *)&v931.i32[1]
         || *((float *)&v932 + 1) < *(float *)&v931.i32[2]
         || geo::Intersect::encloses<float>((float *)&__dst, (float *)v931.i32)))
      {
        md::DaVinciGroundRenderLayer::layoutShadowMap(v44, *((uint64_t **)v371 + 1), (uint64_t)buf, (uint64_t)v910, 1, v602, v604, v415, v850, 1u, v851);
      }
      md::DaVinciGroundRenderLayer::layoutRibbons(v44, (uint64_t)v371, (uint64_t)buf, (uint64_t)v910, v866, v586);
      md::DaVinciGroundRenderLayer::MaterialConstants::~MaterialConstants((md::DaVinciGroundRenderLayer::MaterialConstants *)__p);
      v414 = v864 + 1;
      v333 = v854;
      if (v864 + 1 == v855)
        goto LABEL_735;
    }
    v463 = 0;
    v464 = v460;
    goto LABEL_555;
  }
LABEL_735:
  v629 = (_QWORD *)*((_QWORD *)v371 + 1);
  v630 = (int8x8_t)v629[1];
  v631 = v862;
  if (!*(_QWORD *)&v630)
    goto LABEL_789;
  v632 = (uint8x8_t)vcnt_s8(v630);
  v632.i16[0] = vaddlv_u8(v632);
  if (v632.u32[0] > 1uLL)
  {
    v633 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v630 <= 0xC97B9E962ADF4AD4)
      v633 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v630;
  }
  else
  {
    v633 = (*(_QWORD *)&v630 - 1) & 0xC97B9E962ADF4AD4;
  }
  v634 = *(_QWORD **)(*v629 + 8 * v633);
  if (!v634)
    goto LABEL_789;
  v635 = (_QWORD *)*v634;
  if (!v635)
    goto LABEL_789;
  if (v632.u32[0] < 2uLL)
  {
    v636 = *(_QWORD *)&v630 - 1;
    while (1)
    {
      v638 = v635[1];
      if (v638 == 0xC97B9E962ADF4AD4)
      {
        if (v635[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_757;
      }
      else if ((v638 & v636) != v633)
      {
        goto LABEL_789;
      }
      v635 = (_QWORD *)*v635;
      if (!v635)
        goto LABEL_789;
    }
  }
  while (1)
  {
    v637 = v635[1];
    if (v637 == 0xC97B9E962ADF4AD4)
      break;
    if (v637 >= *(_QWORD *)&v630)
      v637 %= *(_QWORD *)&v630;
    if (v637 != v633)
      goto LABEL_789;
LABEL_745:
    v635 = (_QWORD *)*v635;
    if (!v635)
      goto LABEL_789;
  }
  if (v635[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_745;
LABEL_757:
  v639 = v635[5];
  if (*(_QWORD *)(v639 + 8) == 0xC97B9E962ADF4AD4)
  {
    v640 = *(uint64_t **)(v639 + 32);
    if (v640)
    {
      v641 = *v640;
      v642 = v640[1];
      if (v641 != v642)
      {
        while (*(_BYTE *)v641 != 11)
        {
          v641 += 16;
          if (v641 == v642)
            goto LABEL_789;
        }
      }
      if (v641 != v642 && *(_QWORD *)(v641 + 8) && *(_BYTE *)(v44 + 3560) == 1)
      {
        md::ElevatedPolygonRenderResources::resetPools(*(void (****)(void))(v44 + 3424));
        v655 = *(_QWORD *)(v44 + 3424);
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v655 + 792));
        *(_QWORD *)(v655 + 784) = v655 + 792;
        *(_QWORD *)(v655 + 800) = 0;
        *(_QWORD *)(v655 + 792) = 0;
        md::ElevatedPolygonContext::ElevatedPolygonContext((md::ElevatedPolygonContext *)__p, v371, *(_BYTE *)(v44 + 3192), *(const md::StandardPassList **)(*(_QWORD *)(v44 + 40) + 24), v656);
        v660 = *(const md::DaVinciGroundRenderable ***)v829;
        v661 = *(const md::DaVinciGroundRenderable ***)(v829 + 8);
        if (*(const md::DaVinciGroundRenderable ***)v829 != v661)
        {
          do
            md::DaVinciGroundRenderLayer::layoutPredrapedPolygons(v871, v371, *v660++, (const md::ElevatedPolygonContext *)__p, v828, v657, v658, v659);
          while (v660 != v661);
        }
        v44 = (uint64_t)v871;
        v631 = v862;
      }
    }
  }
LABEL_789:
  if (v372)
    v662 = v631;
  else
    v662 = 0;
  if (v662 == 1)
  {
    v663 = *(_QWORD *)(v372 + 72);
    v664 = *(uint64_t **)(v372 + 80);
    v665 = 126 - 2 * __clz((uint64_t)((uint64_t)v664 - v663) >> 3);
    if (v664 == (uint64_t *)v663)
      v666 = 0;
    else
      v666 = v665;
    std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v663, v664, v666, 1);
    v667 = *(_QWORD *)(v832 + 72);
    v668 = *(uint64_t **)(v832 + 80);
    v669 = 126 - 2 * __clz((uint64_t)((uint64_t)v668 - v667) >> 3);
    if (v668 == (uint64_t *)v667)
      v670 = 0;
    else
      v670 = v669;
    std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v667, v668, v670, 1);
  }
  v671 = *(_QWORD *)(v866 + 72);
  v672 = *(uint64_t **)(v866 + 80);
  v673 = 126 - 2 * __clz((uint64_t)((uint64_t)v672 - v671) >> 3);
  if (v672 == (uint64_t *)v671)
    v674 = 0;
  else
    v674 = v673;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v671, v672, v674, 1);
  v675 = *(_QWORD *)(v858 + 72);
  v676 = *(uint64_t **)(v858 + 80);
  v677 = 126 - 2 * __clz((uint64_t)((uint64_t)v676 - v675) >> 3);
  if (v676 == (uint64_t *)v675)
    v678 = 0;
  else
    v678 = v677;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v675, v676, v678, 1);
  v679 = *(_QWORD *)(v868 + 72);
  v680 = *(uint64_t **)(v868 + 80);
  v681 = 126 - 2 * __clz((uint64_t)((uint64_t)v680 - v679) >> 3);
  if (v680 == (uint64_t *)v679)
    v682 = 0;
  else
    v682 = v681;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v679, v680, v682, 1);
  v683 = *(_QWORD *)(v848 + 72);
  v684 = *(uint64_t **)(v848 + 80);
  v685 = 126 - 2 * __clz((uint64_t)((uint64_t)v684 - v683) >> 3);
  if (v684 == (uint64_t *)v683)
    v686 = 0;
  else
    v686 = v685;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v683, v684, v686, 1);
  if (!v929)
    goto LABEL_877;
  HIBYTE(v934) = 6;
  strcpy((char *)&__dst, "Ground");
  LODWORD(v935) = 14;
  HIBYTE(v937) = 9;
  strcpy((char *)v936, "Buidlings");
  HIBYTE(v941) = 7;
  LODWORD(v938) = 15;
  strcpy((char *)&v939, "NonTile");
  LODWORD(v942) = 16;
  if (*(_QWORD *)v371
    && (v687 = LODWORD(v936[4 * *(unsigned __int8 *)(v44 + 3560) - 1]), (objc_opt_respondsToSelector() & 1) != 0))
  {
    v688 = objc_msgSend(*(id *)v371, "debugConsoleForId:", v687);
  }
  else
  {
    v688 = 0;
  }
  ggl::DebugConsole::begin((ggl::DebugConsole *)v688);
  *(_QWORD *)(v688 + 80) = 0;
  objc_msgSend(*(id *)v371, "size");
  v690 = v689;
  v692 = v691;
  v693 = *((_QWORD *)v371 + 4);
  v694 = (std::__shared_weak_count *)*((_QWORD *)v371 + 5);
  if (v694)
  {
    p_shared_owners = (unint64_t *)&v694->__shared_owners_;
    do
      v696 = __ldxr(p_shared_owners);
    while (__stxr(v696 + 1, p_shared_owners));
    v697 = *((_QWORD *)v371 + 4);
    v698 = (std::__shared_weak_count *)*((_QWORD *)v371 + 5);
    v699 = *(double *)(v693 + 64);
    if (v698)
    {
      v700 = (unint64_t *)&v698->__shared_owners_;
      do
        v701 = __ldxr(v700);
      while (__stxr(v701 + 1, v700));
      v702 = 0;
    }
    else
    {
      v702 = 1;
    }
    v693 = v697;
  }
  else
  {
    v698 = 0;
    v699 = *(double *)(v693 + 64);
    v702 = 1;
  }
  v703 = v699;
  v704 = *(unsigned __int8 *)(v693 + 72);
  *(_OWORD *)&__p[4] = 0uLL;
  *(float *)__p = 2.0 / v690;
  *(float *)&__p[20] = -2.0 / v692;
  v705 = v703 + -1.0;
  if (!v704)
    v705 = 1.0 - v703;
  *(_QWORD *)&__p[32] = 0;
  *(_QWORD *)&__p[24] = 0;
  *(_QWORD *)&__p[40] = LODWORD(v705);
  *(float *)&__p[48] = (float)-v690 / v690;
  *(_DWORD *)&__p[52] = 1065353216;
  *(float *)&__p[56] = v703;
  *(_DWORD *)&__p[60] = 1065353216;
  ggl::DebugConsole::setProjection(v688, __p);
  if ((v702 & 1) == 0)
  {
    v706 = (unint64_t *)&v698->__shared_owners_;
    do
      v707 = __ldaxr(v706);
    while (__stlxr(v707 - 1, v706));
    if (!v707)
    {
      ((void (*)(std::__shared_weak_count *))v698->__on_zero_shared)(v698);
      std::__shared_weak_count::__release_weak(v698);
    }
  }
  v708 = MEMORY[0x1E0DE4FE0];
  if (v694)
  {
    v709 = (unint64_t *)&v694->__shared_owners_;
    do
      v710 = __ldaxr(v709);
    while (__stlxr(v710 - 1, v709));
    if (!v710)
    {
      ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
      std::__shared_weak_count::__release_weak(v694);
    }
  }
  *(_QWORD *)&v711 = v708 + 64;
  v712 = v708;
  v713 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v714 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)&v948.f64[0] = v708 + 64;
  *(_QWORD *)__p = v713;
  *(_QWORD *)&__p[*(_QWORD *)(v713 - 24)] = v714;
  v715 = (std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)];
  std::ios_base::init(v715, &__p[8]);
  v715[1].__vftable = 0;
  v715[1].__fmtflags_ = -1;
  *(_QWORD *)__p = v712 + 24;
  v948.f64[0] = v711;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
  memset(&__p[72], 0, 32);
  *(_DWORD *)&__p[104] = 16;
  v44 = (uint64_t)v871;
  v716 = (void **)&(&__dst)[4 * *((unsigned __int8 *)v871 + 3560)];
  v717 = *((char *)v716 + 23);
  if (v717 >= 0)
    v718 = (void **)&(&__dst)[4 * *((unsigned __int8 *)v871 + 3560)];
  else
    v718 = (void **)*v716;
  if (v717 >= 0)
    v719 = *((unsigned __int8 *)v716 + 23);
  else
    v719 = (uint64_t)v716[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)v718, v719);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Tiles ", 7);
  v720 = (uint64_t *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v720, (uint64_t)"\n\n", 2);
  v721 = *v720;
  v722 = (char *)v720 + *(_QWORD *)(*v720 - 24);
  if (*((_DWORD *)v722 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v720 + *(_QWORD *)(*v720 - 24)));
    v723 = std::locale::use_facet(&v897, MEMORY[0x1E0DE4A90]);
    v724 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v723->__vftable[2].~facet_0)(v723, 32);
    std::locale::~locale(&v897);
    *((_DWORD *)v722 + 36) = v724;
    v721 = *v720;
  }
  *((_DWORD *)v722 + 36) = 32;
  *(uint64_t *)((char *)v720 + *(_QWORD *)(v721 - 24) + 24) = 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Vertex Counts:\n", 15);
  v725 = *(_QWORD *)__p;
  v726 = &__p[*(_QWORD *)(*(_QWORD *)__p - 24)];
  if (*((_DWORD *)v726 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)]);
    v727 = std::locale::use_facet(&v897, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v727->__vftable[2].~facet_0)(v727, 32);
    std::locale::~locale(&v897);
    v725 = *(_QWORD *)__p;
  }
  *((_DWORD *)v726 + 36) = 32;
  *(_QWORD *)&__p[*(_QWORD *)(v725 - 24) + 24] = 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Total:   ", 10);
  v728 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v728, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Main:    ", 10);
  v729 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v729, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Shadow:  ", 10);
  v730 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v730, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" SSAO:    ", 10);
  v731 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v731, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Ribbons: ", 10);
  v732 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v732, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Decals:  ", 10);
  v733 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v733, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"\nDraw Calls:\n", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Total:   ", 10);
  v734 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v734, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Main:    ", 10);
  v735 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v735, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Shadow:  ", 10);
  v736 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v736, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" SSAO:    ", 10);
  v737 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v737, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Ribbons: ", 10);
  v738 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v738, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" Decals:  ", 10);
  v739 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v739, (uint64_t)"\n", 1);
  if ((__p[104] & 0x10) != 0)
  {
    v742 = *(_QWORD *)&__p[96];
    if (*(_QWORD *)&__p[96] < *(_QWORD *)&__p[56])
    {
      *(_QWORD *)&__p[96] = *(_QWORD *)&__p[56];
      v742 = *(_QWORD *)&__p[56];
    }
    v743 = (const void **)&__p[48];
  }
  else
  {
    if ((__p[104] & 8) == 0)
    {
      v740 = 0;
      HIBYTE(v899) = 0;
      v741 = (std::locale::__imp *)&v897;
      goto LABEL_864;
    }
    v743 = (const void **)&__p[24];
    v742 = *(_QWORD *)&__p[40];
  }
  v744 = *v743;
  v740 = v742 - (_QWORD)*v743;
  if (v740 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v740 >= 0x17)
  {
    v745 = (v740 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v740 | 7) != 0x17)
      v745 = v740 | 7;
    v746 = v745 + 1;
    v741 = (std::locale::__imp *)operator new(v745 + 1);
    v899 = v746 | 0x8000000000000000;
    v897.__locale_ = v741;
    v898 = v740;
    goto LABEL_863;
  }
  HIBYTE(v899) = v742 - *(_BYTE *)v743;
  v741 = (std::locale::__imp *)&v897;
  if (v740)
LABEL_863:
    memmove(v741, v744, v740);
LABEL_864:
  *((_BYTE *)v741 + v740) = 0;
  v747 = *(float *)(v688 + 28);
  v748 = 20.0;
  v749 = (float)(*(float *)(v688 + 24) * 18.0) + 20.0;
  LOBYTE(v748) = *((_BYTE *)v871 + 3560);
  v750 = v749 * (float)v748;
  v751 = v750 + v749;
  *(_DWORD *)(v688 + 96) = 2130706432;
  v931.i64[0] = LODWORD(v750) | 0x4396000000000000;
  *(float32_t *)&v931.i32[2] = v751;
  *(float *)&v931.i32[3] = (float)(v747 * 17.0) + 320.0;
  *(float *)(v688 + 8) = v750;
  *(_DWORD *)(v688 + 12) = 1133903872;
  ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)v688, (float32x2_t *)&v931.u64[1], v751);
  *(float *)(v688 + 8) = v750 + 10.0;
  *(_DWORD *)(v688 + 12) = 1134231552;
  *(_DWORD *)(v688 + 96) = -1;
  if (v899 >= 0)
    locale = (int8x16_t *)&v897;
  else
    locale = (int8x16_t *)v897.__locale_;
  if (v899 >= 0)
    v755 = HIBYTE(v899);
  else
    v755 = v898;
  *(float *)&v752 = v750 + 10.0;
  ggl::DebugConsole::drawString(v688, locale, v755, v752, v753);
  ggl::DebugConsole::end(v688);
  if (SHIBYTE(v899) < 0)
    operator delete(v897.__locale_);
  *(_QWORD *)__p = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
  if ((__p[95] & 0x80000000) != 0)
    operator delete(*(void **)&__p[72]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](&v948);
  if (SHIBYTE(v941) < 0)
  {
    operator delete(v939);
    if (SHIBYTE(v937) < 0)
      goto LABEL_890;
LABEL_876:
    if (SHIBYTE(v934) < 0)
LABEL_891:
      operator delete(__dst);
  }
  else
  {
    if ((SHIBYTE(v937) & 0x80000000) == 0)
      goto LABEL_876;
LABEL_890:
    operator delete(v936[0]);
    if (SHIBYTE(v934) < 0)
      goto LABEL_891;
  }
LABEL_877:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v756 = (void *)objc_claimAutoreleasedReturnValue();
  v757 = objc_msgSend(v756, "drawDaVinciElevationScalingDebug");

  v758 = a2;
  if (v757)
  {
    if (*(_QWORD *)a2 && (objc_opt_respondsToSelector() & 1) != 0)
      v759 = objc_msgSend(*(id *)a2, "debugConsoleForId:", 14);
    else
      v759 = 0;
    ggl::DebugConsole::begin((ggl::DebugConsole *)v759);
    *(_QWORD *)(v759 + 80) = 0;
    objc_msgSend(*(id *)a2, "size");
    v761 = v760;
    v763 = v762;
    v764 = v760;
    v765 = v762;
    v766 = *((_QWORD *)a2 + 4);
    v767 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    if (v767)
    {
      v768 = (unint64_t *)&v767->__shared_owners_;
      do
        v769 = __ldxr(v768);
      while (__stxr(v769 + 1, v768));
      v770 = *((_QWORD *)a2 + 4);
      v771 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
      v772 = *(double *)(v766 + 64);
      if (v771)
      {
        v773 = (unint64_t *)&v771->__shared_owners_;
        do
          v774 = __ldxr(v773);
        while (__stxr(v774 + 1, v773));
        v775 = 0;
      }
      else
      {
        v775 = 1;
      }
      v766 = v770;
    }
    else
    {
      v771 = 0;
      v772 = *(double *)(v766 + 64);
      v775 = 1;
    }
    v776 = v772;
    v777 = *(unsigned __int8 *)(v766 + 72);
    *(_QWORD *)&__p[12] = 0;
    *(_QWORD *)&__p[4] = 0;
    *(float *)__p = 2.0 / v764;
    *(float *)&__p[20] = -2.0 / v765;
    v778 = v776 + -1.0;
    if (!v777)
      v778 = 1.0 - v776;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[40] = LODWORD(v778);
    *(float *)&__p[48] = (float)-v764 / v764;
    *(_DWORD *)&__p[52] = 1065353216;
    *(float *)&__p[56] = v776;
    *(_DWORD *)&__p[60] = 1065353216;
    ggl::DebugConsole::setProjection(v759, __p);
    if ((v775 & 1) == 0)
    {
      v779 = (unint64_t *)&v771->__shared_owners_;
      do
        v780 = __ldaxr(v779);
      while (__stlxr(v780 - 1, v779));
      if (!v780)
      {
        ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
        std::__shared_weak_count::__release_weak(v771);
      }
    }
    v781 = MEMORY[0x1E0DE4FE0];
    if (v767)
    {
      v782 = (unint64_t *)&v767->__shared_owners_;
      do
        v783 = __ldaxr(v782);
      while (__stlxr(v783 - 1, v782));
      if (!v783)
      {
        ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
        std::__shared_weak_count::__release_weak(v767);
      }
    }
    *(_QWORD *)&v784 = v781 + 64;
    v785 = v781;
    v786 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v787 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&v948.f64[0] = v781 + 64;
    *(_QWORD *)__p = v786;
    *(_QWORD *)&__p[*(_QWORD *)(v786 - 24)] = v787;
    v788 = (std::ios_base *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)];
    std::ios_base::init(v788, &__p[8]);
    v788[1].__vftable = 0;
    v788[1].__fmtflags_ = -1;
    *(_QWORD *)__p = v785 + 24;
    v948.f64[0] = v784;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
    memset(&__p[72], 0, 32);
    *(_DWORD *)&__p[104] = 16;
    v789 = (uint64_t *)*((_QWORD *)a2 + 1);
    v790 = (int8x8_t)v789[1];
    v791 = (uint8x8_t)vcnt_s8(v790);
    v791.i16[0] = vaddlv_u8(v791);
    v44 = (uint64_t)v871;
    if (v791.u32[0] > 1uLL)
    {
      v792 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v790 <= 0x8BD499FBD96FBB9ELL)
        v792 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v790;
    }
    else
    {
      v792 = (*(_QWORD *)&v790 - 1) & 0x8BD499FBD96FBB9ELL;
    }
    v793 = *v789;
    v794 = *(_QWORD **)(v793 + 8 * v792);
    if (v794 && (v795 = (_QWORD *)*v794) != 0)
    {
      if (v791.u32[0] >= 2uLL)
      {
        while (v795[1] != 0x8BD499FBD96FBB9ELL || v795[2] != 0x8BD499FBD96FBB9ELL)
          v795 = (_QWORD *)*v795;
      }
      else
      {
        while (v795[1] != 0x8BD499FBD96FBB9ELL || v795[2] != 0x8BD499FBD96FBB9ELL)
          v795 = (_QWORD *)*v795;
      }
      if (v791.u32[0] >= 2uLL)
      {
LABEL_923:
        v796 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v790 <= 0x1AF456233693CD46uLL)
          v796 = 0x1AF456233693CD46uLL % *(_QWORD *)&v790;
        v797 = *(_QWORD **)(v793 + 8 * v796);
        do
        {
          do
            v797 = (_QWORD *)*v797;
          while (v797[1] != 0x1AF456233693CD46);
        }
        while (v797[2] != 0x1AF456233693CD46);
LABEL_933:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Style Z: ", 9);
        v799 = *(_QWORD *)__p;
        *(_DWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24) + 8] = *(_DWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24) + 8] & 0xFFFFFEFB | 4;
        *(_QWORD *)&__p[*(_QWORD *)(v799 - 24) + 16] = 2;
        v800 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v800, (uint64_t)&__dst, 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Ground Elevation Scale: ", 24);
        v801 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v801, (uint64_t)&__dst, 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"World Elevation Scale: ", 23);
        v802 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v802, (uint64_t)&__dst, 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Normals Scale: ", 15);
        v803 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 10;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v803, (uint64_t)&__dst, 1);
        if ((__p[104] & 0x10) != 0)
        {
          v806 = *(_QWORD *)&__p[96];
          if (*(_QWORD *)&__p[96] < *(_QWORD *)&__p[56])
          {
            *(_QWORD *)&__p[96] = *(_QWORD *)&__p[56];
            v806 = *(_QWORD *)&__p[56];
          }
          v807 = (const void **)&__p[48];
        }
        else
        {
          if ((__p[104] & 8) == 0)
          {
            v804 = 0;
            HIBYTE(v934) = 0;
            *(double *)&v805 = COERCE_DOUBLE(&__dst);
            goto LABEL_948;
          }
          v807 = (const void **)&__p[24];
          v806 = *(_QWORD *)&__p[40];
        }
        v808 = *v807;
        v804 = v806 - (_QWORD)*v807;
        if (v804 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v804 >= 0x17)
        {
          v809 = (v804 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v804 | 7) != 0x17)
            v809 = v804 | 7;
          v810 = v809 + 1;
          *(double *)&v805 = COERCE_DOUBLE(operator new(v809 + 1));
          *((_QWORD *)&v934 + 1) = v810 | 0x8000000000000000;
          __dst = v805;
          *(_QWORD *)&v934 = v804;
        }
        else
        {
          HIBYTE(v934) = v806 - *(_BYTE *)v807;
          *(double *)&v805 = COERCE_DOUBLE(&__dst);
          if (!v804)
          {
LABEL_948:
            *((_BYTE *)v805 + v804) = 0;
            v811 = *(float *)(v759 + 28);
            *(float *)&v812 = v761 + -100.0;
            *(float *)&v813 = v763 + -100.0;
            v814 = (float)(*(float *)&v812 + -40.0) + (float)(*(float *)(v759 + 24) * -30.0);
            *(_DWORD *)(v759 + 96) = 2130706432;
            v815 = (float)(*(float *)&v813 + -40.0) + (float)(v811 * -4.0);
            *(float *)&v897.__locale_ = v814;
            *((float *)&v897.__locale_ + 1) = v815;
            v898 = __PAIR64__(v813, v812);
            *(float *)(v759 + 8) = v814;
            *(float *)(v759 + 12) = v815;
            ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)v759, (float32x2_t *)&v898, *(float *)&v813 + -40.0);
            *(float *)(v759 + 8) = v814 + 20.0;
            *(float *)(v759 + 12) = v815 + 20.0;
            *(_DWORD *)(v759 + 96) = -1;
            if (v934 >= 0)
              v818 = (int8x16_t *)&__dst;
            else
              v818 = (int8x16_t *)__dst;
            if (v934 >= 0)
              v819 = HIBYTE(v934);
            else
              v819 = v934;
            *(float *)&v816 = v814 + 20.0;
            *(float *)v817.i32 = v815 + 20.0;
            ggl::DebugConsole::drawString(v759, v818, v819, v816, v817);
            ggl::DebugConsole::end(v759);
            if (SHIBYTE(v934) < 0)
              operator delete(__dst);
            *(_QWORD *)__p = *MEMORY[0x1E0DE4F60];
            *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
            *(_QWORD *)&__p[8] = MEMORY[0x1E0DE4FB8] + 16;
            v758 = a2;
            if ((__p[95] & 0x80000000) != 0)
              operator delete(*(void **)&__p[72]);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1A1AF4D64](&v948);
            goto LABEL_959;
          }
        }
        memmove(v805, v808, v804);
        goto LABEL_948;
      }
    }
    else if (v791.u32[0] >= 2uLL)
    {
      goto LABEL_923;
    }
    v798 = *(_QWORD **)(v793 + 8 * ((*(_QWORD *)&v790 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v798 = (_QWORD *)*v798;
      while (v798[1] != 0x1AF456233693CD46);
    }
    while (v798[2] != 0x1AF456233693CD46);
    goto LABEL_933;
  }
LABEL_959:
  *(_QWORD *)(v44 + 3336) = *(_QWORD *)(v44 + 3328);
  switch(*(_BYTE *)(v44 + 3560))
  {
    case 0:
    case 1:
    case 4:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v820 = (id)GEOGetVectorKitPerformanceLog_log;
      v821 = v820;
      v822 = *((_QWORD *)v758 + 10);
      if (v822 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v820))
        goto LABEL_977;
      *(_WORD *)__p = 0;
      v823 = "DaVinciGroundLayout";
      goto LABEL_975;
    case 2:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v827 = (id)GEOGetVectorKitPerformanceLog_log;
      v821 = v827;
      v822 = *((_QWORD *)v758 + 10);
      if (v822 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v827))
        goto LABEL_977;
      *(_WORD *)__p = 0;
      v823 = "DaVinciBuildingsLayout";
LABEL_975:
      v825 = v821;
      v826 = OS_SIGNPOST_INTERVAL_END;
      break;
    case 3:
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v824 = (id)GEOGetVectorKitPerformanceLog_log;
      v821 = v824;
      v822 = *((_QWORD *)v758 + 10);
      if (v822 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v824))
        goto LABEL_977;
      *(_WORD *)__p = 0;
      v823 = "DaVinciNonTiledLayout";
      v825 = v821;
      v826 = OS_SIGNPOST_INTERVAL_BEGIN;
      break;
    default:
      goto LABEL_978;
  }
  _os_signpost_emit_with_name_impl(&dword_19F029000, v825, v826, v822, v823, (const char *)&unk_1A0189141, __p, 2u);
LABEL_977:

LABEL_978:
  if (v911)
    operator delete(v911);
}

void sub_19F1E302C(_Unwind_Exception *a1)
{
  if (!STACK[0x278])
    _Unwind_Resume(a1);
  operator delete((void *)STACK[0x278]);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int8x16_t *v4;
  int8x16_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  const std::nothrow_t *v18;
  void *v19;
  BOOL v20;
  void *v21;
  unsigned __int8 *v23[3];

  v3 = *(unsigned __int8 **)(a1 + 8);
  v5 = **(int8x16_t ***)a1;
  v4 = *(int8x16_t **)(*(_QWORD *)a1 + 8);
  v23[0] = a2;
  v23[1] = v3;
  v6 = *(unsigned __int8 **)(a1 + 16);
  v23[2] = v6;
  if (v5 != v4)
  {
    v7 = *(_QWORD *)v3;
    if (*a2)
    {
      v8 = a2[1];
      while (1)
      {
        v9 = *(_QWORD *)(v7 + 8 * v5->i64[0]);
        v10 = *(unsigned __int8 *)(v9 + 145);
        if (*(_BYTE *)(v9 + 147))
        {
          if (*v6)
            v11 = 0;
          else
            v11 = v10 == v8;
          if (!v11)
            goto LABEL_15;
        }
        else if (v10 != v8)
        {
          goto LABEL_15;
        }
        v5 = (int8x16_t *)((char *)v5 + 8);
        if (v5 == v4)
          return **(_QWORD **)a1;
      }
    }
    while (!*(_BYTE *)(*(_QWORD *)(v7 + 8 * v5->i64[0]) + 147) || !*v6)
    {
      v5 = (int8x16_t *)((char *)v5 + 8);
      if (v5 == v4)
        return **(_QWORD **)a1;
    }
LABEL_15:
    v12 = &v4[-1].u64[1];
    if (v5 != (int8x16_t *)&v4[-1].u64[1])
    {
      if (*a2)
      {
        v13 = a2[1];
        while (1)
        {
          v14 = *(_QWORD *)(v7 + 8 * *v12);
          v15 = *(unsigned __int8 *)(v14 + 145);
          if (*(_BYTE *)(v14 + 147))
          {
            if (*v6)
              v16 = 0;
            else
              v16 = v15 == v13;
            if (v16)
              goto LABEL_30;
          }
          else if (v15 == v13)
          {
            goto LABEL_30;
          }
          if (--v12 == (unint64_t *)v5)
            return **(_QWORD **)a1;
        }
      }
      while (*(_BYTE *)(*(_QWORD *)(v7 + 8 * *v12) + 147) && *v6)
      {
        if (--v12 == (unint64_t *)v5)
          return **(_QWORD **)a1;
      }
LABEL_30:
      if ((char *)v12 - (char *)v5 < 17)
      {
LABEL_37:
        v21 = 0;
        v17 = 0;
      }
      else
      {
        if ((((char *)v12 - (char *)v5) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = (((char *)v12 - (char *)v5) >> 3) + 1;
        v18 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        while (1)
        {
          v19 = operator new(8 * v17, v18);
          if (v19)
            break;
          v20 = v17 > 1;
          v17 >>= 1;
          if (!v20)
            goto LABEL_37;
        }
        v21 = v19;
      }
      std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v5, v12, v23, (((char *)v12 - (char *)v5) >> 3) + 1, (unint64_t)v21, v17);
      if (v21)
        operator delete(v21);
    }
  }
  return **(_QWORD **)a1;
}

uint64_t *md::MeshRenderableContext::renderablesForRegistry(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  if ((v2 & 1) == 0)
  {
    v14 = a2;
    v15 = a1;
    a2 = v14;
    a1 = v15;
    if (v13)
    {
      __cxa_atexit((void (*)(void *))std::vector<md::MeshRenderable *>::~vector[abi:nn180100], &md::MeshRenderableContext::renderablesForRegistry(gdc::Registry const*)const::sentinal, &dword_19F029000);
      a2 = v14;
      a1 = v15;
    }
  }
  if (a2)
  {
    v3 = (int8x8_t)a1[1];
    if (v3)
    {
      v4 = *(unsigned __int16 *)(a2 + 40);
      v5 = (uint8x8_t)vcnt_s8(v3);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        v6 = *(unsigned __int16 *)(a2 + 40);
        if (*(_QWORD *)&v3 <= v4)
          v6 = v4 % *(_QWORD *)&v3;
      }
      else
      {
        v6 = (v3.i32[0] - 1) & v4;
      }
      v7 = *(uint64_t ****)(*a1 + 8 * v6);
      if (v7)
      {
        v8 = *v7;
        if (v8)
        {
          if (v5.u32[0] < 2uLL)
          {
            v9 = *(_QWORD *)&v3 - 1;
            result = (uint64_t *)&md::MeshRenderableContext::renderablesForRegistry(gdc::Registry const*)const::sentinal;
            while (1)
            {
              v11 = v8[1];
              if (v11 == (uint64_t *)v4)
              {
                if (*((unsigned __int16 *)v8 + 8) == (_DWORD)v4)
                  return (uint64_t *)(v8 + 3);
              }
              else if (((unint64_t)v11 & v9) != v6)
              {
                return result;
              }
              v8 = (uint64_t **)*v8;
              if (!v8)
                return result;
            }
          }
          result = (uint64_t *)&md::MeshRenderableContext::renderablesForRegistry(gdc::Registry const*)const::sentinal;
          while (1)
          {
            v12 = (unint64_t)v8[1];
            if (v12 == v4)
            {
              if (*((unsigned __int16 *)v8 + 8) == (_DWORD)v4)
                return (uint64_t *)(v8 + 3);
            }
            else
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
              if (v12 != v6)
                return result;
            }
            v8 = (uint64_t **)*v8;
            if (!v8)
              return result;
          }
        }
      }
    }
  }
  return (uint64_t *)&md::MeshRenderableContext::renderablesForRegistry(gdc::Registry const*)const::sentinal;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(int8x16_t *a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;

  if (a4 == 3)
  {
    v11 = &a1->i8[8];
    v12 = a1->i64[1];
    v13 = *(_QWORD *)(*(_QWORD *)a3[1] + 8 * v12);
    if (**a3)
    {
      v14 = *(unsigned __int8 *)(v13 + 145);
      v15 = (*a3)[1];
      v16 = v14 == v15;
      if (!*(_BYTE *)(v13 + 147))
      {
        if (v14 != v15)
        {
LABEL_42:
          a1->i64[1] = *a2;
          *a2 = v12;
          *a1 = vextq_s8(*a1, *a1, 8uLL);
          return (uint64_t *)v11;
        }
LABEL_41:
        v41 = a1->i64[0];
        a1->i64[0] = v12;
        a1->i64[1] = v41;
        a1->i64[1] = *a2;
        *a2 = v41;
        return (uint64_t *)a2;
      }
    }
    else
    {
      if (!*(_BYTE *)(v13 + 147))
        goto LABEL_41;
      v16 = 1;
    }
    if (*a3[2] || !v16)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
    *a2 = v10;
    return (uint64_t *)a2;
  }
  v17 = (uint64_t *)a5;
  if (a6 < a4)
  {
    if (a4 >= 0)
      v18 = a4;
    else
      v18 = a4 + 1;
    v19 = v18 >> 1;
    v20 = &a1->i64[v18 >> 1];
    v21 = *(_QWORD *)a3[1];
    v22 = a3[2];
    if (**a3)
    {
      v23 = (*a3)[1];
      v24 = 8 * v19 - 8;
      for (i = v19; ; --i)
      {
        v26 = *(_QWORD *)(v21 + 8 * *(uint64_t *)((char *)a1->i64 + v24));
        v27 = *(unsigned __int8 *)(v26 + 145);
        if (*(_BYTE *)(v26 + 147))
        {
          if (*v22)
            v28 = 0;
          else
            v28 = v27 == v23;
          if (v28)
          {
LABEL_60:
            v42 = &a1->i8[v24];
            goto LABEL_62;
          }
        }
        else if (v27 == v23)
        {
          goto LABEL_60;
        }
        if (!v24)
          break;
        v24 -= 8;
      }
      v11 = (char *)(a2 + 1);
      v55 = a4 - v19;
      v56 = (uint64_t *)a1;
LABEL_64:
      v57 = v20;
      while (1)
      {
        v58 = *(_QWORD *)(v21 + 8 * *v57);
        v59 = *(unsigned __int8 *)(v58 + 145);
        if (*(_BYTE *)(v58 + 147))
        {
          if (*v22)
            v60 = 0;
          else
            v60 = v59 == v23;
          if (!v60)
            goto LABEL_83;
        }
        else if (v59 != v23)
        {
          goto LABEL_83;
        }
        if (++v57 == (uint64_t *)a2)
          goto LABEL_84;
        --v55;
      }
    }
    v42 = (__int8 *)(v20 - 1);
    if (*(_BYTE *)(*(_QWORD *)(v21 + 8 * *(v20 - 1)) + 147) && *v22)
    {
      v43 = 8 - 8 * v19;
      v44 = v19;
      while (v43)
      {
        v45 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 8 * a1[-1].i64[v44]) + 147);
        v43 += 8;
        --v44;
        if (!v45)
        {
          v42 = &a1->i8[-v43];
          goto LABEL_62;
        }
      }
      v11 = (char *)(a2 + 1);
      v55 = a4 - v19;
      v56 = (uint64_t *)a1;
    }
    else
    {
LABEL_62:
      v56 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(a1, v42, a3);
      v21 = *(_QWORD *)a3[1];
      v22 = a3[2];
      v11 = (char *)(a2 + 1);
      v55 = a4 - v19;
      if (**a3)
      {
        v23 = (*a3)[1];
        goto LABEL_64;
      }
    }
    v57 = v20;
    while (!*(_BYTE *)(*(_QWORD *)(v21 + 8 * *v57) + 147) || !*v22)
    {
      if (++v57 == (uint64_t *)a2)
        goto LABEL_84;
      --v55;
    }
LABEL_83:
    v11 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_4::operator() const(geo::optional<md::SceneLayer>)::{lambda(unsigned long)#1} &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v57, a2, a3);
LABEL_84:
    if (v56 != v20)
    {
      if (v20 == (uint64_t *)v11)
      {
        return v56;
      }
      else if (v56 + 1 == v20)
      {
        v67 = *v56;
        v68 = v11 - (char *)v20;
        memmove(v56, v20, v68);
        v11 = (char *)v56 + v68;
        *(_QWORD *)v11 = v67;
      }
      else if (v20 + 1 == (uint64_t *)v11)
      {
        v69 = v11 - 8;
        v70 = *((_QWORD *)v11 - 1);
        v11 = (char *)(v56 + 1);
        if (v69 != (char *)v56)
          memmove(v56 + 1, v56, v69 - (char *)v56);
        *v56 = v70;
      }
      else
      {
        v62 = v20 - v56;
        v63 = (v11 - (char *)v20) >> 3;
        if (v62 == v63)
        {
          v64 = v56 + 1;
          v65 = (uint64_t)&a1->i64[v19 + 1];
          do
          {
            v66 = *(v64 - 1);
            *(v64 - 1) = *(_QWORD *)(v65 - 8);
            *(_QWORD *)(v65 - 8) = v66;
            if (v64 == v20)
              break;
            ++v64;
            v28 = v65 == (_QWORD)v11;
            v65 += 8;
          }
          while (!v28);
          return v20;
        }
        else
        {
          v71 = (v11 - (char *)v20) >> 3;
          v72 = v20 - v56;
          do
          {
            v73 = v72;
            v72 = v71;
            v71 = v73 % v71;
          }
          while (v71);
          if (v72)
          {
            v74 = &v56[v72];
            do
            {
              v76 = *--v74;
              v75 = v76;
              v77 = &v74[v62];
              v78 = v74;
              do
              {
                v79 = v77;
                *v78 = *v77;
                v80 = (v11 - (char *)v77) >> 3;
                v81 = __OFSUB__(v62, v80);
                v83 = v62 - v80;
                v82 = (v83 < 0) ^ v81;
                v77 = &v56[v83];
                if (v82)
                  v77 = &v79[v62];
                v78 = v79;
              }
              while (v77 != v74);
              *v79 = v75;
            }
            while (v74 != v56);
          }
          return &v56[v63];
        }
      }
    }
    return (uint64_t *)v11;
  }
  v29 = &a1->i64[1];
  *(_QWORD *)a5 = a1->i64[0];
  v30 = (uint64_t *)(a5 + 8);
  if (&a1->u64[1] == a2)
  {
    a1->i64[0] = *a2;
    v11 = (char *)a2;
    goto LABEL_52;
  }
  v31 = *a3;
  v32 = *(_QWORD *)a3[1];
  v33 = **a3;
  v34 = a3[2];
  v35 = (uint64_t *)a1;
  do
  {
    v36 = *v29;
    v37 = *(_QWORD *)(v32 + 8 * *v29);
    if (v33)
    {
      v38 = *(unsigned __int8 *)(v37 + 145);
      v39 = v31[1];
      v40 = v38 == v39;
      if (!*(_BYTE *)(v37 + 147))
      {
        if (v38 != v39)
          goto LABEL_26;
        goto LABEL_36;
      }
    }
    else
    {
      if (!*(_BYTE *)(v37 + 147))
        goto LABEL_36;
      v40 = 1;
    }
    if (*v34 || !v40)
    {
LABEL_26:
      *v30++ = v36;
      goto LABEL_27;
    }
LABEL_36:
    *v35++ = v36;
LABEL_27:
    ++v29;
  }
  while (v29 != (uint64_t *)a2);
  *v35 = *a2;
  v11 = (char *)(v35 + 1);
  if ((unint64_t)v30 <= a5)
    return (uint64_t *)v11;
LABEL_52:
  v46 = (uint64_t *)(a5 + 8);
  if ((unint64_t)v30 > a5 + 8)
    v46 = v30;
  v47 = (unint64_t)v46 + ~a5;
  if (v47 < 0x18)
  {
    v48 = v11;
    goto LABEL_75;
  }
  v48 = v11;
  if ((unint64_t)&v11[-a5] < 0x20)
  {
    do
    {
LABEL_75:
      v61 = *v17++;
      *(_QWORD *)v48 = v61;
      v48 += 8;
    }
    while (v17 < v30);
  }
  else
  {
    v49 = 0;
    v50 = (v47 >> 3) + 1;
    v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
    v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = &v11[v49];
      v54 = *(_OWORD *)(a5 + v49 + 16);
      *(_OWORD *)v53 = *(_OWORD *)(a5 + v49);
      *((_OWORD *)v53 + 1) = v54;
      v49 += 32;
      v52 -= 4;
    }
    while (v52);
    if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v48 = &v11[v51];
      v17 = (uint64_t *)(a5 + v51);
      goto LABEL_75;
    }
  }
  return (uint64_t *)v11;
}

void gdc::LayerDataRequestKey::keysInt32Str(std::string *this, unsigned __int16 *a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string __p;
  std::string v10;
  std::string v11;

  gdc::LayerDataKey::keysInt32Str(&v10, a2 + 4);
  v4 = std::string::append(&v10, " kt:", 4uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(unsigned __int8 *)a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *this = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void gdc::LayerDataKey::keysInt32Str(std::string *this, unsigned __int16 *a2)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string __p;
  std::string v10;
  std::string v11;

  gdc::GenericKey::keysInt32Str((gdc::GenericKey *)&v10, (_QWORD *)a2 + 1);
  v4 = std::string::append(&v10, " t:", 3uLL);
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *this = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

uint64_t gdc::GenericKey::keysInt32Str(gdc::GenericKey *this, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  const void **v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  gdc::GenericKey *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21 = v7;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v21 + *(_QWORD *)(v21 - 24));
  std::ios_base::init(v9, &v22);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v21 = v4 + 24;
  v29[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = 0;
  v11 = MEMORY[0x1E0DE4FB8];
  v22 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  v12 = a2[1] - *a2;
  if (v12 < 4)
    goto LABEL_9;
  std::ostream::operator<<();
  if (v12 >= 8)
  {
    v13 = 1;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v21, (uint64_t)".", 1);
      std::ostream::operator<<();
      ++v13;
    }
    while (v12 >> 2 != v13);
  }
  if ((v28 & 0x10) != 0)
  {
    v10 = *((_QWORD *)&v27 + 1);
LABEL_9:
    if (v10 < v25)
    {
      *((_QWORD *)&v27 + 1) = v25;
      v10 = v25;
    }
    v15 = (const void **)&v24;
    goto LABEL_12;
  }
  if ((v28 & 8) == 0)
  {
    v14 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_20;
  }
  v15 = (const void **)v23;
  v10 = v23[2];
LABEL_12:
  v16 = *v15;
  v14 = v10 - (_QWORD)*v15;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v19 = (gdc::GenericKey *)operator new(v17 + 1);
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)this = v19;
    this = v19;
    goto LABEL_19;
  }
  *((_BYTE *)this + 23) = v14;
  if (v14)
LABEL_19:
    memmove(this, v16, v14);
LABEL_20:
  *((_BYTE *)this + v14) = 0;
  v21 = *v6;
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = v6[3];
  v22 = v11 + 16;
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v29);
}

void commandBufferLocationsForType(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

_WORD *sub_19F1E3FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  __int16 v4;
  _WORD *v5;
  _WORD *result;

  v4 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 34);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v5 = operator new(2uLL);
  *v3 = v5;
  *v5 = v4;
  result = v5 + 1;
  v3[1] = result;
  v3[2] = result;
  return result;
}

uint64_t md::DaVinciMaterialResourceFetcher::resourceKey(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v8;

  v4 = a2;
  v5 = **(_QWORD **)(a3 + 8);
  objc_msgSend(v4, "style");
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "gglDevice");
  LOBYTE(v8) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v8 + 1) = v5;

  return v8;
}

void sub_19F1E418C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t md::GEOVectorTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  v3 = objc_msgSend(v2, "style");
  v4 = GEOTileKeyMake();
  if (v3 <= 0x19 && ((1 << v3) & 0x200101C) != 0)
    v5 = 128;
  else
    v5 = (unint64_t)(v3 == 26) << 7;
  v6 = v5 | v4 & 0xFFFFFFFFFFFFFF7FLL;

  return v6;
}

void sub_19F1E4294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1E42FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1E4354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1E4428(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::runBeforeLayout(uint64_t a1, const md::LayoutContext *a2, uint64_t a3, uint64_t a4)
{
  const md::LayoutContext *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  double v22;
  BOOL v23;
  BOOL v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  std::mutex *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void (**v35)(char *);
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t prime;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (**v47)(char *);
  uint64_t v48;
  char *v49;
  id *v50;
  id *v51;
  id v52;
  unsigned int v53;
  id v54;
  void *v55;
  id v56;
  unsigned int v57;
  id v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (**v62)(char *);
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void (**v68)(char *);
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  uint8x8_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (**v80)(char *);
  uint64_t v81;
  char *v82;
  id *v83;
  id *v84;
  id v85;
  unsigned int v86;
  id v87;
  void *v88;
  id v89;
  unsigned int v90;
  id v91;
  uint64_t v92;
  char *v93;
  char *v94;
  void (**v95)(char *);
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t j;
  int8x8_t v100;
  void *v101;
  int8x8_t v102;
  int8x8_t v103;
  int8x8_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t k;
  void *v110;
  void *v111;
  unint64_t v112;
  _QWORD *v113;
  void *v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t m;
  void *v120;
  void *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  void *v127;
  _QWORD *v128;
  _QWORD *v129;
  void *v130;
  _QWORD *v131;
  _QWORD *v132;
  void *v133;
  uint64_t v134;
  void (***v135)(_QWORD);
  int8x8_t v136;
  void (***v137)(_QWORD);
  void (***v138)(_QWORD);
  void (**v139)(_QWORD);
  uint64_t v140;
  void (***v141)(_QWORD);
  int8x8_t v142;
  void (***v143)(_QWORD);
  void (***v144)(_QWORD);
  void (**v145)(_QWORD);
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t n;
  uint64_t (***v150)();
  uint64_t v151;
  uint64_t (***v152)();
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t ii;
  uint64_t (***v158)();
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t jj;
  uint64_t (***v164)();
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t kk;
  uint64_t (***v170)();
  uint64_t v171;
  uint64_t (***v172)();
  uint64_t v173;
  uint64_t (***v174)();
  uint64_t v175;
  uint64_t (***v176)();
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __n128 v181;
  float v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  void *v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  void *v193;
  _BOOL4 v194;
  uint64_t v195;
  float *v196;
  std::__shared_weak_count *v197;
  unint64_t *p_shared_owners;
  unint64_t v199;
  float *v200;
  uint64_t v201;
  void *v202;
  unint64_t v203;
  char *v204;
  _QWORD *v205;
  _QWORD *v206;
  int8x8_t v207;
  uint8x8_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char v217;
  int v218;
  int v219;
  char v220;
  unint64_t v221;
  _BYTE *v222;
  char *v223;
  NSObject *v224;
  _QWORD *v225;
  _QWORD *v226;
  _BYTE *v227;
  unint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char v242;
  char v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  const md::LayoutContext *v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  __int16 v252;
  uint64_t v253;
  char v254;
  char v255;
  char *v256;
  char *v257;
  uint64_t v258;
  void *__p[2];
  __int128 v260;
  int v261;
  void *v262[2];
  void *v263[2];
  float v264;
  _QWORD v265[3];
  float *v266;
  uint64_t (**v267)();
  uint64_t v268;
  uint64_t (***v269)();
  uint64_t (**v270)();
  uint64_t v271;
  uint64_t (***v272)();
  int8x8_t buf[4];
  float v274;
  _QWORD v275[4];
  _QWORD v276[3];
  _QWORD *v277;
  _QWORD v278[3];
  _QWORD *v279;
  _QWORD v280[3];
  _QWORD *v281;
  _QWORD v282[3];
  _QWORD *v283;
  uint64_t v284;

  v6 = a2;
  v284 = *MEMORY[0x1E0C80C00];
  v280[0] = &off_1E42CB450;
  v280[1] = a2;
  v281 = v280;
  v278[0] = &off_1E42CB498;
  v278[1] = a2;
  v279 = v278;
  v283 = v282;
  v282[0] = &off_1E42CB498;
  v282[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__1NS_9allocatorISM_EEFvvEEclEv((uint64_t)v280);
  v8 = v279;
  if (v279 == v278)
  {
    v9 = 4;
    v8 = v278;
  }
  else
  {
    if (!v279)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v281;
  if (v281 == v280)
  {
    v11 = 4;
    v10 = v280;
  }
  else
  {
    if (!v281)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  md::OverlayContainer::flushCommandQueue(*(md::OverlayContainer **)(a1 + 712));
  v12 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a4 + 160) = v12;
  *(_QWORD *)(a4 + 168) = *(_QWORD *)(a1 + 152);
  v248 = a4;
  if (!*(_BYTE *)(v12 + 345))
    goto LABEL_28;
  v276[0] = &off_1E42CB4E0;
  v276[1] = a1;
  v277 = v276;
  buf[0] = 0;
  v262[0] = 0;
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(a1 + 640));
  buf[0] = 0;
  v262[0] = (void *)1;
  if (!v277
    || ((*(void (**)(_QWORD *, int8x8_t *, void **))(*v277 + 48))(v277, buf, v262),
        buf[0] = (int8x8_t)1,
        v262[0] = 0,
        !v277)
    || ((*(void (**)(_QWORD *, int8x8_t *, void **))(*v277 + 48))(v277, buf, v262),
        buf[0] = (int8x8_t)1,
        v262[0] = (void *)1,
        !v277))
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_375:
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *, int8x8_t *, void **))(*v277 + 48))(v277, buf, v262);
  v13 = v277;
  if (v277 == v276)
  {
    v14 = 4;
    v13 = v276;
    goto LABEL_19;
  }
  if (v277)
  {
    v14 = 5;
LABEL_19:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if (*(_QWORD *)(a1 + 696))
  {
    v15 = *(_QWORD **)(a1 + 688);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        buf[0] = (int8x8_t)(v15 + 3);
        std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 688) = 0;
    v17 = *(_QWORD *)(a1 + 680);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 696) = 0;
    a4 = v248;
  }
  v12 = *(_QWORD *)(a1 + 712);
  *(_BYTE *)(v12 + 345) = 0;
LABEL_28:
  v19 = *(_BYTE **)(a3 + 8);
  v20 = *(_QWORD *)(a3 + 16);
  v21 = v19[1];
  *(_BYTE *)(a1 + 921) = v21;
  v22 = fabs(*(double *)(v20 + 40));
  v23 = *(_QWORD *)(v12 + 320) != 0;
  *(_BYTE *)(a1 + 920) = v22 > 0.0001;
  *(_BYTE *)(a4 + 209) = v23;
  v24 = v22 > 0.0001 && v21 == 0;
  v26 = !v24 || !*v19 || (v25 = *(_QWORD **)(a4 + 160), v25[21] != v25[20]) || v25[24] != v25[23];
  *(_BYTE *)(a4 + 177) = v26;
  v275[0] = &off_1E42CB528;
  v275[1] = a1;
  v275[2] = a4;
  v275[3] = v275;
  if (*(_QWORD *)(a4 + 80))
  {
    if (*(_QWORD *)(a4 + 88))
      goto LABEL_38;
  }
  else
  {
    *(_QWORD *)(a4 + 80) = *(_QWORD *)(a1 + 640);
    if (*(_QWORD *)(a4 + 88))
    {
LABEL_38:
      if (*(_QWORD *)(a4 + 96))
        goto LABEL_39;
      goto LABEL_50;
    }
  }
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a1 + 648);
  if (*(_QWORD *)(a4 + 96))
  {
LABEL_39:
    if (*(_QWORD *)(a4 + 104))
      goto LABEL_40;
LABEL_51:
    *(_QWORD *)(a4 + 104) = *(_QWORD *)(a1 + 664);
    if (*(_QWORD *)(a4 + 152))
      goto LABEL_41;
    goto LABEL_52;
  }
LABEL_50:
  *(_QWORD *)(a4 + 96) = *(_QWORD *)(a1 + 656);
  if (!*(_QWORD *)(a4 + 104))
    goto LABEL_51;
LABEL_40:
  if (*(_QWORD *)(a4 + 152))
    goto LABEL_41;
LABEL_52:
  *(_QWORD *)(a4 + 152) = *(_QWORD *)(a1 + 744);
LABEL_41:
  v27 = *(_QWORD *)(a1 + 712);
  v28 = (std::mutex *)(v27 + 232);
  std::mutex::lock((std::mutex *)(v27 + 232));
  v29 = *(_DWORD *)(v27 + 348);
  std::mutex::unlock(v28);
  if (v29 == *(_DWORD *)(a1 + 728))
    goto LABEL_200;
  v244 = v29;
  memset(buf, 0, sizeof(buf));
  v274 = 1.0;
  *(_OWORD *)v262 = 0u;
  *(_OWORD *)v263 = 0u;
  v264 = 1.0;
  *(_OWORD *)__p = 0u;
  v260 = 0u;
  v261 = 1065353216;
  v30 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v30 + 232));
  v256 = 0;
  v257 = 0;
  v258 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v30 + 160), *(_QWORD *)(v30 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v30 + 168) - *(_QWORD *)(v30 + 160)) >> 3));
  std::mutex::unlock((std::mutex *)(v30 + 232));
  v32 = v256;
  v31 = v257;
  if (v256)
  {
    if (v257 == v256)
    {
      v36 = v257;
    }
    else
    {
      v33 = v257 - 24;
      v34 = v257 - 24;
      do
      {
        v35 = *(void (***)(char *))v34;
        v34 -= 24;
        (*v35)(v33);
        v24 = v33 == v32;
        v33 = v34;
      }
      while (!v24);
      v36 = v256;
      a4 = v248;
    }
    operator delete(v36);
  }
  v249 = v6;
  v246 = v20;
  if (v31 != v32)
  {
    v37 = *(_QWORD *)(a1 + 712);
    std::mutex::lock((std::mutex *)(v37 + 232));
    v256 = 0;
    v257 = 0;
    v258 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v37 + 160), *(_QWORD *)(v37 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 168) - *(_QWORD *)(v37 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v37 + 232));
    v38 = v256;
    v39 = v257;
    prime = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((v257 - v256) >> 3)) / v274);
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v41 = buf[1];
    if (prime > *(_QWORD *)&buf[1])
      goto LABEL_62;
    if (prime < *(_QWORD *)&buf[1])
    {
      v42 = vcvtps_u32_f32((float)(unint64_t)buf[3] / v274);
      if (*(_QWORD *)&buf[1] < 3uLL
        || (v43 = (uint8x8_t)vcnt_s8(buf[1]), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < *(_QWORD *)&v41)
LABEL_62:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)buf, prime);
    }
    if (v38)
    {
      if (v39 != v38)
      {
        v45 = v39 - 24;
        v46 = v45;
        do
        {
          v47 = *(void (***)(char *))v46;
          v46 -= 24;
          (*v47)(v45);
          v24 = v45 == v38;
          v45 = v46;
        }
        while (!v24);
        v39 = v256;
      }
      operator delete(v39);
    }
    v48 = *(_QWORD *)(a1 + 712);
    std::mutex::lock((std::mutex *)(v48 + 232));
    v256 = 0;
    v257 = 0;
    v258 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v48 + 160), *(_QWORD *)(v48 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v48 + 168) - *(_QWORD *)(v48 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v48 + 232));
    v49 = v256;
    v50 = (id *)v257;
    if (v256 == v257)
    {
      if (!v256)
      {
LABEL_94:
        a4 = v248;
        v6 = v249;
        v20 = v246;
        goto LABEL_95;
      }
    }
    else
    {
      v51 = (id *)v256;
      do
      {
        v52 = v51[1];
        v53 = objc_msgSend(v52, "identifier");
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int,unsigned int>((uint64_t)buf, v53, v53, buf[3].i32[0]);

        v54 = v52;
        objc_msgSend(v54, "rasterTileProvider");
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        if (v55 && objc_msgSend(v55, "keyframesCount") >= 2)
        {
          v56 = v54;
          v57 = objc_msgSend(v56, "identifier");
          v58 = v55;
          v252 = objc_msgSend(v58, "keyframesCount");
          objc_msgSend(v58, "duration");
          v253 = v59;
          v254 = objc_msgSend(v58, "crossfadeKeyframes");
          v255 = 0;

          std::__hash_table<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>>>::__emplace_unique_key_args<unsigned int,unsigned int,md::OverlaysContext::KeyframeAnimationParameters>((float *)__p, v57, v57, (uint64_t)&v252);
        }

        v51 += 3;
      }
      while (v51 != v50);
      if (!v49)
        goto LABEL_94;
      if (v49 != (char *)v50)
      {
        v60 = (char *)(v50 - 3);
        v61 = (char *)(v50 - 3);
        do
        {
          v62 = *(void (***)(char *))v61;
          v61 -= 24;
          (*v62)(v60);
          v24 = v60 == v49;
          v60 = v61;
        }
        while (!v24);
        v49 = v256;
      }
    }
    operator delete(v49);
    goto LABEL_94;
  }
LABEL_95:
  v63 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v63 + 232));
  v256 = 0;
  v257 = 0;
  v258 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v63 + 184), *(_QWORD *)(v63 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v63 + 192) - *(_QWORD *)(v63 + 184)) >> 3));
  std::mutex::unlock((std::mutex *)(v63 + 232));
  v65 = v256;
  v64 = v257;
  if (v256)
  {
    if (v257 == v256)
    {
      v69 = v257;
    }
    else
    {
      v66 = v257 - 24;
      v67 = v257 - 24;
      do
      {
        v68 = *(void (***)(char *))v67;
        v67 -= 24;
        (*v68)(v66);
        v24 = v66 == v65;
        v66 = v67;
      }
      while (!v24);
      v69 = v256;
      a4 = v248;
    }
    operator delete(v69);
  }
  if (v64 == v65)
    goto LABEL_142;
  v70 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v70 + 232));
  v256 = 0;
  v257 = 0;
  v258 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v70 + 184), *(_QWORD *)(v70 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v70 + 192) - *(_QWORD *)(v70 + 184)) >> 3));
  std::mutex::unlock((std::mutex *)(v70 + 232));
  v71 = v256;
  v72 = v257;
  v73 = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((v257 - v256) >> 3)) / v264);
  if (v73 == 1)
  {
    v73 = 2;
  }
  else if ((v73 & (v73 - 1)) != 0)
  {
    v73 = std::__next_prime(v73);
  }
  v74 = v262[1];
  if ((void *)v73 > v262[1])
    goto LABEL_109;
  if ((void *)v73 < v262[1])
  {
    v75 = vcvtps_u32_f32((float)(unint64_t)v263[1] / v264);
    if (v262[1] < (void *)3
      || (v76 = (uint8x8_t)vcnt_s8((int8x8_t)v262[1]), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
    {
      v75 = std::__next_prime(v75);
    }
    else
    {
      v77 = 1 << -(char)__clz(v75 - 1);
      if (v75 >= 2)
        v75 = v77;
    }
    if (v73 <= v75)
      v73 = v75;
    if (v73 < (unint64_t)v74)
LABEL_109:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v262, v73);
  }
  if (v71)
  {
    if (v72 != v71)
    {
      v78 = v72 - 24;
      v79 = v78;
      do
      {
        v80 = *(void (***)(char *))v79;
        v79 -= 24;
        (*v80)(v78);
        v24 = v78 == v71;
        v78 = v79;
      }
      while (!v24);
      v72 = v256;
    }
    operator delete(v72);
  }
  v81 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v81 + 232));
  v256 = 0;
  v257 = 0;
  v258 = 0;
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v256, *(_QWORD *)(v81 + 184), *(_QWORD *)(v81 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v81 + 192) - *(_QWORD *)(v81 + 184)) >> 3));
  std::mutex::unlock((std::mutex *)(v81 + 232));
  v82 = v256;
  v83 = (id *)v257;
  if (v256 != v257)
  {
    v84 = (id *)v256;
    do
    {
      v85 = v84[1];
      v86 = objc_msgSend(v85, "identifier");
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int,unsigned int>((uint64_t)v262, v86, v86, (int)v263[1]);

      v87 = v85;
      objc_msgSend(v87, "rasterTileProvider");
      v88 = (void *)objc_claimAutoreleasedReturnValue();

      if (v88 && objc_msgSend(v88, "keyframesCount") >= 2)
      {
        v89 = v87;
        v90 = objc_msgSend(v89, "identifier");
        v91 = v88;
        v252 = objc_msgSend(v91, "keyframesCount");
        objc_msgSend(v91, "duration");
        v253 = v92;
        v254 = objc_msgSend(v91, "crossfadeKeyframes");
        v255 = 0;

        std::__hash_table<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>>>::__emplace_unique_key_args<unsigned int,unsigned int,md::OverlaysContext::KeyframeAnimationParameters>((float *)__p, v90, v90, (uint64_t)&v252);
      }

      v84 += 3;
    }
    while (v84 != v83);
    if (!v82)
      goto LABEL_141;
    if (v82 != (char *)v83)
    {
      v93 = (char *)(v83 - 3);
      v94 = (char *)(v83 - 3);
      do
      {
        v95 = *(void (***)(char *))v94;
        v94 -= 24;
        (*v95)(v93);
        v24 = v93 == v82;
        v93 = v94;
      }
      while (!v24);
      v82 = v256;
    }
    goto LABEL_140;
  }
  if (v256)
LABEL_140:
    operator delete(v82);
LABEL_141:
  a4 = v248;
  v6 = v249;
  v20 = v246;
LABEL_142:
  *(_DWORD *)(a1 + 728) = v244;
  if (*(_QWORD *)(a4 + 24))
  {
    v96 = *(_QWORD **)(a4 + 16);
    if (v96)
    {
      do
      {
        v97 = (_QWORD *)*v96;
        operator delete(v96);
        v96 = v97;
      }
      while (v97);
    }
    *(_QWORD *)(a4 + 16) = 0;
    v98 = *(_QWORD *)(a4 + 8);
    if (v98)
    {
      for (j = 0; j != v98; ++j)
        *(_QWORD *)(*(_QWORD *)a4 + 8 * j) = 0;
    }
    *(_QWORD *)(a4 + 24) = 0;
  }
  v100 = buf[0];
  buf[0] = 0;
  v101 = *(void **)a4;
  *(int8x8_t *)a4 = v100;
  if (v101)
    operator delete(v101);
  v102 = buf[1];
  v103 = buf[2];
  *(int8x8_t *)(a4 + 16) = buf[2];
  *(int8x8_t *)(a4 + 8) = v102;
  buf[1] = 0;
  v104 = buf[3];
  *(int8x8_t *)(a4 + 24) = buf[3];
  *(float *)(a4 + 32) = v274;
  if (v104)
  {
    v105 = *(_QWORD *)(*(_QWORD *)&v103 + 8);
    if ((*(_QWORD *)&v102 & (*(_QWORD *)&v102 - 1)) != 0)
    {
      if (v105 >= *(_QWORD *)&v102)
        v105 %= *(_QWORD *)&v102;
    }
    else
    {
      v105 &= *(_QWORD *)&v102 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v105) = a4 + 16;
    buf[2] = 0;
    buf[3] = 0;
  }
  if (*(_QWORD *)(a4 + 64))
  {
    v106 = *(_QWORD **)(a4 + 56);
    if (v106)
    {
      do
      {
        v107 = (_QWORD *)*v106;
        operator delete(v106);
        v106 = v107;
      }
      while (v107);
    }
    *(_QWORD *)(a4 + 56) = 0;
    v108 = *(_QWORD *)(a4 + 48);
    if (v108)
    {
      for (k = 0; k != v108; ++k)
        *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * k) = 0;
    }
    *(_QWORD *)(a4 + 64) = 0;
  }
  v110 = v262[0];
  v262[0] = 0;
  v111 = *(void **)(a4 + 40);
  *(_QWORD *)(a4 + 40) = v110;
  if (v111)
    operator delete(v111);
  v112 = (unint64_t)v262[1];
  v113 = v263[0];
  *(void **)(a4 + 56) = v263[0];
  *(_QWORD *)(a4 + 48) = v112;
  v262[1] = 0;
  v114 = v263[1];
  *(void **)(a4 + 64) = v263[1];
  *(float *)(a4 + 72) = v264;
  if (v114)
  {
    v115 = v113[1];
    if ((v112 & (v112 - 1)) != 0)
    {
      if (v115 >= v112)
        v115 %= v112;
    }
    else
    {
      v115 &= v112 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v115) = a4 + 56;
    v263[0] = 0;
    v263[1] = 0;
  }
  if (*(_QWORD *)(a4 + 136))
  {
    v116 = *(_QWORD **)(a4 + 128);
    if (v116)
    {
      do
      {
        v117 = (_QWORD *)*v116;
        operator delete(v116);
        v116 = v117;
      }
      while (v117);
    }
    *(_QWORD *)(a4 + 128) = 0;
    v118 = *(_QWORD *)(a4 + 120);
    if (v118)
    {
      for (m = 0; m != v118; ++m)
        *(_QWORD *)(*(_QWORD *)(a4 + 112) + 8 * m) = 0;
    }
    *(_QWORD *)(a4 + 136) = 0;
  }
  v120 = __p[0];
  __p[0] = 0;
  v121 = *(void **)(a4 + 112);
  *(_QWORD *)(a4 + 112) = v120;
  if (v121)
    operator delete(v121);
  v123 = (unint64_t)__p[1];
  v122 = (_QWORD *)v260;
  *(_QWORD *)(a4 + 128) = v260;
  *(_QWORD *)(a4 + 120) = v123;
  __p[1] = 0;
  v124 = *((_QWORD *)&v260 + 1);
  *(_QWORD *)(a4 + 136) = *((_QWORD *)&v260 + 1);
  *(_DWORD *)(a4 + 144) = v261;
  if (v124)
  {
    v125 = v122[1];
    if ((v123 & (v123 - 1)) != 0)
    {
      if (v125 >= v123)
        v125 %= v123;
    }
    else
    {
      v125 &= v123 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 112) + 8 * v125) = a4 + 128;
    v260 = 0uLL;
  }
  else if (v122)
  {
    do
    {
      v126 = (_QWORD *)*v122;
      operator delete(v122);
      v122 = v126;
    }
    while (v126);
  }
  v127 = __p[0];
  __p[0] = 0;
  if (v127)
    operator delete(v127);
  v128 = v263[0];
  if (v263[0])
  {
    do
    {
      v129 = (_QWORD *)*v128;
      operator delete(v128);
      v128 = v129;
    }
    while (v129);
  }
  v130 = v262[0];
  v262[0] = 0;
  if (v130)
    operator delete(v130);
  v131 = (_QWORD *)buf[2];
  if (buf[2])
  {
    do
    {
      v132 = (_QWORD *)*v131;
      operator delete(v131);
      v131 = v132;
    }
    while (v132);
  }
  v133 = (void *)buf[0];
  buf[0] = 0;
  if (v133)
    operator delete(v133);
LABEL_200:
  v134 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v134 + 232));
  memset(buf, 0, 24);
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(buf, *(_QWORD *)(v134 + 160), *(_QWORD *)(v134 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v134 + 168) - *(_QWORD *)(v134 + 160)) >> 3));
  std::mutex::unlock((std::mutex *)(v134 + 232));
  v135 = (void (***)(_QWORD))buf[0];
  v136 = buf[1];
  md::OverlaysLogic::updateKeyframeAnimationOverrides(*(_QWORD *)buf, *(_QWORD *)&buf[1], v248);
  if (v135)
  {
    if (*(void (****)(_QWORD))&v136 != v135)
    {
      v137 = (void (***)(_QWORD))(*(_QWORD *)&v136 - 24);
      v138 = v137;
      do
      {
        v139 = *v138;
        v138 -= 3;
        (*v139)(v137);
        v24 = v137 == v135;
        v137 = v138;
      }
      while (!v24);
      v135 = (void (***)(_QWORD))buf[0];
    }
    operator delete(v135);
  }
  v140 = *(_QWORD *)(a1 + 712);
  std::mutex::lock((std::mutex *)(v140 + 232));
  memset(buf, 0, 24);
  std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(buf, *(_QWORD *)(v140 + 184), *(_QWORD *)(v140 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v140 + 192) - *(_QWORD *)(v140 + 184)) >> 3));
  std::mutex::unlock((std::mutex *)(v140 + 232));
  v141 = (void (***)(_QWORD))buf[0];
  v142 = buf[1];
  md::OverlaysLogic::updateKeyframeAnimationOverrides(*(_QWORD *)buf, *(_QWORD *)&buf[1], v248);
  if (v141)
  {
    if (*(void (****)(_QWORD))&v142 != v141)
    {
      v143 = (void (***)(_QWORD))(*(_QWORD *)&v142 - 24);
      v144 = v143;
      do
      {
        v145 = *v144;
        v144 -= 3;
        (*v145)(v143);
        v24 = v143 == v141;
        v143 = v144;
      }
      while (!v24);
      v141 = (void (***)(_QWORD))buf[0];
    }
    operator delete(v141);
  }
  md::OverlaysLogic::updateOverlays((md::OverlaysLogic *)a1, v6);
  if (*(_BYTE *)(a1 + 923))
  {
    v270 = &off_1E42CB570;
    v271 = a1;
    v272 = &v270;
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(a1 + 640));
    if (*(_QWORD *)(a1 + 696))
    {
      v146 = *(_QWORD **)(a1 + 688);
      if (v146)
      {
        do
        {
          v147 = (_QWORD *)*v146;
          buf[0] = (int8x8_t)(v146 + 3);
          std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
          operator delete(v146);
          v146 = v147;
        }
        while (v147);
      }
      *(_QWORD *)(a1 + 688) = 0;
      v148 = *(_QWORD *)(a1 + 680);
      if (v148)
      {
        for (n = 0; n != v148; ++n)
          *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * n) = 0;
      }
      *(_QWORD *)(a1 + 696) = 0;
    }
    v150 = v272;
    if (v272 == &v270)
    {
      v151 = 4;
      v150 = &v270;
    }
    else
    {
      if (!v272)
        goto LABEL_230;
      v151 = 5;
    }
    (*v150)[v151]();
LABEL_230:
    v270 = &off_1E42CB570;
    v271 = a1;
    v272 = &v270;
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(a1 + 648));
    if (*(_QWORD *)(a1 + 696))
    {
      v154 = *(_QWORD **)(a1 + 688);
      if (v154)
      {
        do
        {
          v155 = (_QWORD *)*v154;
          buf[0] = (int8x8_t)(v154 + 3);
          std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
          operator delete(v154);
          v154 = v155;
        }
        while (v155);
      }
      *(_QWORD *)(a1 + 688) = 0;
      v156 = *(_QWORD *)(a1 + 680);
      if (v156)
      {
        for (ii = 0; ii != v156; ++ii)
          *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * ii) = 0;
      }
      *(_QWORD *)(a1 + 696) = 0;
    }
    v158 = v272;
    if (v272 == &v270)
    {
      v159 = 4;
      v158 = &v270;
    }
    else
    {
      if (!v272)
        goto LABEL_242;
      v159 = 5;
    }
    (*v158)[v159]();
LABEL_242:
    v270 = &off_1E42CB570;
    v271 = a1;
    v272 = &v270;
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(a1 + 656));
    if (*(_QWORD *)(a1 + 696))
    {
      v160 = *(_QWORD **)(a1 + 688);
      if (v160)
      {
        do
        {
          v161 = (_QWORD *)*v160;
          buf[0] = (int8x8_t)(v160 + 3);
          std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
          operator delete(v160);
          v160 = v161;
        }
        while (v161);
      }
      *(_QWORD *)(a1 + 688) = 0;
      v162 = *(_QWORD *)(a1 + 680);
      if (v162)
      {
        for (jj = 0; jj != v162; ++jj)
          *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * jj) = 0;
      }
      *(_QWORD *)(a1 + 696) = 0;
    }
    v164 = v272;
    if (v272 == &v270)
    {
      v165 = 4;
      v164 = &v270;
    }
    else
    {
      if (!v272)
        goto LABEL_254;
      v165 = 5;
    }
    (*v164)[v165]();
LABEL_254:
    v270 = &off_1E42CB570;
    v271 = a1;
    v272 = &v270;
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*(_QWORD **)(a1 + 664));
    if (*(_QWORD *)(a1 + 696))
    {
      v166 = *(_QWORD **)(a1 + 688);
      if (v166)
      {
        do
        {
          v167 = (_QWORD *)*v166;
          buf[0] = (int8x8_t)(v166 + 3);
          std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
          operator delete(v166);
          v166 = v167;
        }
        while (v167);
      }
      *(_QWORD *)(a1 + 688) = 0;
      v168 = *(_QWORD *)(a1 + 680);
      if (v168)
      {
        for (kk = 0; kk != v168; ++kk)
          *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * kk) = 0;
      }
      *(_QWORD *)(a1 + 696) = 0;
    }
    v170 = v272;
    if (v272 == &v270)
    {
      v171 = 4;
      v170 = &v270;
    }
    else
    {
      if (!v272)
      {
LABEL_266:
        *(_BYTE *)(a1 + 923) = 0;
        goto LABEL_284;
      }
      v171 = 5;
    }
    (*v170)[v171]();
    goto LABEL_266;
  }
  v267 = &off_1E42CB5B8;
  v268 = a1;
  v269 = &v267;
  _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_((uint64_t)&v267, (int8x8_t **)(a1 + 640), (_QWORD *)(a1 + 344));
  v152 = v269;
  if (v269 == &v267)
  {
    v153 = 4;
    v152 = &v267;
  }
  else
  {
    if (!v269)
      goto LABEL_269;
    v153 = 5;
  }
  (*v152)[v153]();
LABEL_269:
  v267 = &off_1E42CB5B8;
  v268 = a1;
  v269 = &v267;
  _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_((uint64_t)&v267, (int8x8_t **)(a1 + 648), (_QWORD *)(a1 + 384));
  v172 = v269;
  if (v269 == &v267)
  {
    v173 = 4;
    v172 = &v267;
  }
  else
  {
    if (!v269)
      goto LABEL_274;
    v173 = 5;
  }
  (*v172)[v173]();
LABEL_274:
  v267 = &off_1E42CB5B8;
  v268 = a1;
  v269 = &v267;
  _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_((uint64_t)&v267, (int8x8_t **)(a1 + 656), (_QWORD *)(a1 + 424));
  v174 = v269;
  if (v269 == &v267)
  {
    v175 = 4;
    v174 = &v267;
  }
  else
  {
    if (!v269)
      goto LABEL_279;
    v175 = 5;
  }
  (*v174)[v175]();
LABEL_279:
  v267 = &off_1E42CB5B8;
  v268 = a1;
  v269 = &v267;
  _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__6NS_9allocatorISM_EEFvRNS_10unique_ptrINS_13unordered_mapINS2_10SurfaceKeyENSQ_ImNS_10shared_ptrIN3ggl16IOSurfaceTextureEEENS_4hashImEENS_8equal_toImEENSN_INS_4pairIKmSV_EEEEEENS2_14SurfaceKeyHashENS2_15SurfaceKeyEqualENSN_INS10_IKSR_S14_EEEEEENS_14default_deleteIS1A_EEEERKNS_13unordered_setIN3geo8QuadTileENS1G_12QuadTileHashENSY_IS1H_EENSN_IS1H_EEEEEEclES1E_S1N_((uint64_t)&v267, (int8x8_t **)(a1 + 664), (_QWORD *)(a1 + 464));
  v176 = v269;
  if (v269 == &v267)
  {
    v177 = 4;
    v176 = &v267;
  }
  else
  {
    if (!v269)
      goto LABEL_284;
    v177 = 5;
  }
  (*v176)[v177]();
LABEL_284:
  md::LayoutContext::frameState(v6);
  v179 = *(_QWORD *)(v178 + 88);
  v180 = *((_QWORD *)v6 + 10);
  v181.n128_f32[0] = *(float *)(v20 + 3080) + *(float *)(v20 + 3076);
  v182 = fmaxf(v181.n128_f32[0], 1.0);
  v183 = *(_QWORD **)(a1 + 712);
  v184 = v183[20];
  v185 = v183[21];
  if (v184 == v185)
  {
LABEL_287:
    v189 = v183[23];
    v190 = v183[24];
    if (v189 == v190)
      goto LABEL_304;
    v191 = v189 + 24;
    do
    {
      v192 = *(id *)(v191 - 16);
      objc_msgSend(v192, "customTileProvider");
      v193 = (void *)objc_claimAutoreleasedReturnValue();

      v194 = v191 == v190 || v193 != 0;
      v191 += 24;
    }
    while (!v194);
    if (!v193)
      goto LABEL_304;
  }
  else
  {
    while (1)
    {
      v186 = *(id *)(v184 + 8);
      objc_msgSend(v186, "customTileProvider");
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      v188 = v187 == 0;

      if (!v188)
        break;
      v184 += 24;
      if (v184 == v185)
        goto LABEL_287;
    }
  }
  v195 = *(_QWORD *)(a1 + 744);
  v266 = 0;
  v196 = (float *)operator new(0x28uLL);
  *(_QWORD *)v196 = &off_1E42CB408;
  *((_QWORD *)v196 + 1) = a1;
  *((_QWORD *)v196 + 2) = v179;
  *((_QWORD *)v196 + 3) = v180;
  v196[8] = v182;
  v266 = v196;
  geo::TaskQueue::async(&v250, v195, v265);
  v197 = v251;
  if (v251)
  {
    p_shared_owners = (unint64_t *)&v251->__shared_owners_;
    do
      v199 = __ldaxr(p_shared_owners);
    while (__stlxr(v199 - 1, p_shared_owners));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v266;
  if (v266 == (float *)v265)
  {
    v201 = 4;
    v200 = (float *)v265;
  }
  else
  {
    if (!v266)
      goto LABEL_304;
    v201 = 5;
  }
  v181 = ((__n128 (*)(void))*(_QWORD *)(*(_QWORD *)v200 + 8 * v201))();
LABEL_304:
  v181.n128_u8[0] = *(_BYTE *)(a1 + 924);
  *(_BYTE *)(v248 + 176) = v182 >= (float)v181.n128_u32[0];
  v202 = *(void **)(v248 + 184);
  *(_QWORD *)(v248 + 192) = v202;
  v203 = *(_QWORD *)(a1 + 176);
  if (v203 > (uint64_t)(*(_QWORD *)(v248 + 200) - (_QWORD)v202) >> 5)
  {
    if (v203 >> 59)
      abort();
    v204 = (char *)operator new(32 * v203);
    *(_QWORD *)(v248 + 184) = v204;
    *(_QWORD *)(v248 + 192) = v204;
    *(_QWORD *)(v248 + 200) = &v204[32 * v203];
    if (v202)
      operator delete(v202);
  }
  v205 = *(_QWORD **)(a1 + 160);
  if (v205 != (_QWORD *)(a1 + 168))
  {
    do
    {
      v206 = (_QWORD *)v205[5];
      v207 = (int8x8_t)v206[1];
      if (!*(_QWORD *)&v207)
        goto LABEL_336;
      v208 = (uint8x8_t)vcnt_s8(v207);
      v208.i16[0] = vaddlv_u8(v208);
      if (v208.u32[0] > 1uLL)
      {
        v209 = 0x64A448A5CD5D38DBLL;
        if (*(_QWORD *)&v207 <= 0x64A448A5CD5D38DBuLL)
          v209 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v207;
      }
      else
      {
        v209 = (*(_QWORD *)&v207 - 1) & 0x64A448A5CD5D38DBLL;
      }
      v210 = *(_QWORD **)(*v206 + 8 * v209);
      if (!v210 || (v211 = (_QWORD *)*v210) == 0)
      {
LABEL_336:
        if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_18_13304);
        v224 = (id)GEOGetVectorKitOverlaysLogicLog(void)::log;
        if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
        {
          buf[0].i32[0] = 136315650;
          *(int8x8_t *)((char *)buf + 4) = (int8x8_t)"transformData";
          buf[1].i16[2] = 2080;
          *(int8x8_t *)((char *)&buf[1] + 6) = (int8x8_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
          buf[2].i16[3] = 1024;
          buf[3].i32[0] = 743;
          _os_log_impl(&dword_19F029000, v224, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)buf, 0x1Cu);
        }

        v225 = (_QWORD *)v205[1];
        if (!v225)
          goto LABEL_357;
        do
        {
LABEL_341:
          v226 = v225;
          v225 = (_QWORD *)*v225;
        }
        while (v225);
        goto LABEL_310;
      }
      if (v208.u32[0] < 2uLL)
      {
        v212 = *(_QWORD *)&v207 - 1;
        while (1)
        {
          v214 = v211[1];
          if (v214 == 0x64A448A5CD5D38DBLL)
          {
            if (v211[2] == 0x64A448A5CD5D38DBLL)
              goto LABEL_332;
          }
          else if ((v214 & v212) != v209)
          {
            goto LABEL_336;
          }
          v211 = (_QWORD *)*v211;
          if (!v211)
            goto LABEL_336;
        }
      }
      while (1)
      {
        v213 = v211[1];
        if (v213 == 0x64A448A5CD5D38DBLL)
          break;
        if (v213 >= *(_QWORD *)&v207)
          v213 %= *(_QWORD *)&v207;
        if (v213 != v209)
          goto LABEL_336;
LABEL_321:
        v211 = (_QWORD *)*v211;
        if (!v211)
          goto LABEL_336;
      }
      if (v211[2] != 0x64A448A5CD5D38DBLL)
        goto LABEL_321;
LABEL_332:
      v215 = v211[5];
      if (*(_QWORD *)(v215 + 8) != 0x64A448A5CD5D38DBLL)
        goto LABEL_336;
      v216 = *(char **)(v215 + 32);
      if (!v216)
        goto LABEL_336;
      v217 = v216[1];
      v219 = *((_DWORD *)v216 + 1);
      v218 = *((_DWORD *)v216 + 2);
      v220 = *v216;
      v222 = *(_BYTE **)(v248 + 192);
      v221 = *(_QWORD *)(v248 + 200);
      if ((unint64_t)v222 >= v221)
      {
        v227 = *(_BYTE **)(v248 + 184);
        v228 = ((v222 - v227) >> 5) + 1;
        if (v228 >> 59)
          abort();
        v242 = v220;
        v243 = v217;
        v245 = v219;
        v247 = v218;
        v229 = v221 - (_QWORD)v227;
        if (v229 >> 4 > v228)
          v228 = v229 >> 4;
        if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFE0)
          v228 = 0x7FFFFFFFFFFFFFFLL;
        if (v228 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v240 = v228;
        v230 = (char *)operator new(32 * v228);
        v241 = (v222 - v227) >> 5;
        v231 = &v230[32 * v241];
        *v231 = v242;
        v231[1] = v243;
        *((_DWORD *)v231 + 1) = v245;
        *((_DWORD *)v231 + 2) = v247;
        *((_QWORD *)v231 + 3) = v206;
        if (v222 == v227)
        {
          v234 = &v230[32 * v241];
        }
        else
        {
          v232 = 0;
          do
          {
            v233 = &v231[v232];
            *((_WORD *)v233 - 16) = *(_WORD *)&v222[v232 - 32];
            *(_QWORD *)(v233 - 28) = *(_QWORD *)&v222[v232 - 28];
            *((_QWORD *)v233 - 1) = *(_QWORD *)&v222[v232 - 8];
            v232 -= 32;
          }
          while (&v222[v232] != v227);
          v234 = &v231[v232];
        }
        v223 = v231 + 32;
        *(_QWORD *)(v248 + 184) = v234;
        *(_QWORD *)(v248 + 192) = v231 + 32;
        *(_QWORD *)(v248 + 200) = &v230[32 * v240];
        if (v227)
        {
          v235 = v231 + 32;
          operator delete(v227);
          v223 = v235;
        }
      }
      else
      {
        *v222 = v220;
        v222[1] = v217;
        *((_DWORD *)v222 + 1) = v219;
        *((_DWORD *)v222 + 2) = v218;
        v223 = v222 + 32;
        *((_QWORD *)v222 + 3) = v206;
      }
      *(_QWORD *)(v248 + 192) = v223;
      v225 = (_QWORD *)v205[1];
      if (v225)
        goto LABEL_341;
      do
      {
LABEL_357:
        v226 = (_QWORD *)v205[2];
        v24 = *v226 == (_QWORD)v205;
        v205 = v226;
      }
      while (!v24);
LABEL_310:
      v205 = v226;
    }
    while (v226 != (_QWORD *)(a1 + 168));
  }
  *(_BYTE *)(v248 + 208) = *(_BYTE *)(a1 + 922);
  if (*(_BYTE *)(a1 + 856))
  {
    v236 = (char *)operator new(4uLL);
    *(_DWORD *)v236 = 3735610;
    v237 = v236 + 4;
  }
  else
  {
    v236 = (char *)operator new(2uLL);
    *(_WORD *)v236 = 58;
    v237 = v236 + 2;
  }
  std::vector<md::MapDataType>::__assign_with_size[abi:nn180100]<md::MapDataType*,md::MapDataType*>((_QWORD *)(v248 + 216), v236, v237, (v237 - v236) >> 1);
  operator delete(v236);
  if (!v283)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_375;
  }
  (*(void (**)(_QWORD *))(*v283 + 48))(v283);
  v238 = v283;
  if (v283 == v282)
  {
    v239 = 4;
    v238 = v282;
  }
  else
  {
    if (!v283)
      return;
    v239 = 5;
  }
  (*(void (**)(void))(*v238 + 8 * v239))();
}

void sub_19F1E5C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 152));
  _Unwind_Resume(a1);
}

void md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = a2;
  a1[1] = a4;
  v6 = a1 + 2;
  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
  {
    if (v7 == a3)
    {
      a1[5] = v6;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v6);
    }
    else
    {
      a1[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    a1[5] = 0;
  }
  if (a1[1] != *(_QWORD *)(*a1 + 8))
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      {
        do
        {
          v9 = *a1;
          v10 = a1[1] + 8;
          a1[1] = v10;
          if (v10 == *(_QWORD *)(v9 + 8))
            break;
          v11 = a1[5];
          if (!v11)
            goto LABEL_13;
        }
        while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) == 0);
      }
    }
    else
    {
LABEL_13:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
  }
}

void sub_19F1E6058(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 40);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 40);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::OverlaysLogic::updateKeyframeAnimationOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 == a2)
    return;
  v5 = a1;
  while (2)
  {
    v6 = *(id *)(v5 + 8);
    objc_msgSend(v6, "rasterTileProvider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7 || objc_msgSend(v7, "keyframesCount") < 2)
      goto LABEL_4;
    v8 = v6;
    v9 = objc_msgSend(v8, "identifier");
    v10 = *(_QWORD *)(a3 + 120);
    if (!v10)
      goto LABEL_33;
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v9;
      if (v10 <= v9)
        v12 = v9 % v10;
    }
    else
    {
      v12 = ((_DWORD)v10 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)(a3 + 112) + 8 * v12);
    if (!v13 || (v14 = *v13) == 0)
LABEL_33:
      abort();
    if (v11.u32[0] < 2uLL)
    {
      v15 = v10 - 1;
      while (1)
      {
        v17 = v14[1];
        if (v17 == v9)
        {
          if (*((_DWORD *)v14 + 4) == v9)
            goto LABEL_27;
        }
        else if ((v17 & v15) != v12)
        {
          goto LABEL_33;
        }
        v14 = (uint64_t *)*v14;
        if (!v14)
          goto LABEL_33;
      }
    }
    while (1)
    {
      v16 = v14[1];
      if (v16 == v9)
        break;
      if (v16 >= v10)
        v16 %= v10;
      if (v16 != v12)
        goto LABEL_33;
LABEL_17:
      v14 = (uint64_t *)*v14;
      if (!v14)
        goto LABEL_33;
    }
    if (*((_DWORD *)v14 + 4) != v9)
      goto LABEL_17;
LABEL_27:

    v18 = objc_msgSend(v7, "keyframeIndexOverride");
    if (v18 < 0)
    {
      if (*((_BYTE *)v14 + 42))
        *((_BYTE *)v14 + 42) = 0;
    }
    else
    {
      if (!*((_BYTE *)v14 + 42))
        *((_BYTE *)v14 + 42) = 1;
      *((_WORD *)v14 + 22) = v18;
    }
LABEL_4:

    v5 += 24;
    if (v5 != a2)
      continue;
    break;
  }
}

void sub_19F1E624C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4719908BF4103968;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4719908BF4103968;
      if (*(_QWORD *)&v3 <= 0x4719908BF4103968uLL)
        v5 = 0x4719908BF4103968uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4719908BF4103968;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4719908BF4103968)
            {
              if (v7[2] == 0x4719908BF4103968)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4719908BF4103968)
          {
            if (v7[2] == 0x4719908BF4103968)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>]";
  *(_QWORD *)(v11 + 24) = 91;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3798;
  *(_QWORD *)(v11 + 8) = 0x4719908BF4103968;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4719908BF4103968uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4719908BF4103968;
  v15[1] = "md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>]";
  v15[2] = 91;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4719908BF4103968, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1E6494(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6BD391B11DF783CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6BD391B11DF783CLL;
      if (*(_QWORD *)&v3 <= 0x6BD391B11DF783CuLL)
        v5 = 0x6BD391B11DF783CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6BD391B11DF783CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6BD391B11DF783CLL)
            {
              if (v7[2] == 0x6BD391B11DF783CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6BD391B11DF783CLL)
          {
            if (v7[2] == 0x6BD391B11DF783CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>]";
  *(_QWORD *)(v11 + 24) = 94;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3768;
  *(_QWORD *)(v11 + 8) = 0x6BD391B11DF783CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6BD391B11DF783CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6BD391B11DF783CLL;
  v15[1] = "md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>]";
  v15[2] = 94;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6BD391B11DF783CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1E66BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::TileIsInView>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9956BFA43F1B46A6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9956BFA43F1B46A6;
      if (*(_QWORD *)&v3 <= 0x9956BFA43F1B46A6)
        v5 = 0x9956BFA43F1B46A6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9956BFA43F1B46A6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9956BFA43F1B46A6)
            {
              if (v7[2] == 0x9956BFA43F1B46A6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9956BFA43F1B46A6)
          {
            if (v7[2] == 0x9956BFA43F1B46A6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::TileIsInView]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B36A8;
  *(_QWORD *)(v11 + 8) = 0x9956BFA43F1B46A6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9956BFA43F1B46A6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9956BFA43F1B46A6;
  v15[1] = "md::overlayComponents::TileIsInView]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9956BFA43F1B46A6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1E68E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::OverlayContainer::flushCommandQueue(md::OverlayContainer *this)
{
  std::mutex *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  v3 = *((_OWORD *)this + 7);
  *((_OWORD *)this + 7) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)((char *)this + 136) = v3;
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v4;
  std::mutex::unlock(v2);
  v5 = *((_QWORD *)this + 17);
  v6 = *((_QWORD *)this + 18);
  if (v5 == v6)
  {
LABEL_13:
    *((_QWORD *)this + 18) = v5;
  }
  else
  {
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 32);
      if (!v7)
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v5 += 40;
      if (v5 == v6)
      {
        v8 = *((_QWORD *)this + 17);
        v5 = *((_QWORD *)this + 18);
        if (v5 == v8)
          goto LABEL_13;
        while (2)
        {
          v9 = *(_QWORD **)(v5 - 8);
          if ((_QWORD *)(v5 - 32) != v9)
          {
            if (v9)
            {
              v10 = 5;
LABEL_7:
              (*(void (**)(void))(*v9 + 8 * v10))();
            }
            v5 -= 40;
            if (v5 == v8)
            {
              v5 = v8;
              goto LABEL_13;
            }
            continue;
          }
          break;
        }
        v9 = (_QWORD *)(v5 - 32);
        v10 = 4;
        goto LABEL_7;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear();
  }
}

void std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1[3])
  {
    v2 = (_QWORD *)a1[2];
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (_QWORD *)v2[8];
        while (v6)
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
          v9 = (std::__shared_weak_count *)v8[4];
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          operator delete(v8);
        }
        v7 = (void *)v2[6];
        v2[6] = 0;
        if (v7)
          operator delete(v7);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x835FA63A3E4A7413;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x835FA63A3E4A7413;
      if (*(_QWORD *)&v3 <= 0x835FA63A3E4A7413)
        v5 = 0x835FA63A3E4A7413 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x835FA63A3E4A7413;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x835FA63A3E4A7413)
            {
              if (v7[2] == 0x835FA63A3E4A7413)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x835FA63A3E4A7413)
          {
            if (v7[2] == 0x835FA63A3E4A7413)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::Terrain>]";
  *(_QWORD *)(v11 + 24) = 65;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B38E8;
  *(_QWORD *)(v11 + 8) = 0x835FA63A3E4A7413;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x835FA63A3E4A7413, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x835FA63A3E4A7413;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::Terrain>]";
  v15[2] = 65;
  gdc::Registry::_registerStorageDataSignals(a1, 0x835FA63A3E4A7413, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1E6CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7C0BC22858AB748ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7C0BC22858AB748ALL;
      if (*(_QWORD *)&v3 <= 0x7C0BC22858AB748AuLL)
        v5 = 0x7C0BC22858AB748AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7C0BC22858AB748ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7C0BC22858AB748ALL)
            {
              if (v7[2] == 0x7C0BC22858AB748ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7C0BC22858AB748ALL)
          {
            if (v7[2] == 0x7C0BC22858AB748ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::WaterSurface>]";
  *(_QWORD *)(v11 + 24) = 70;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3828;
  *(_QWORD *)(v11 + 8) = 0x7C0BC22858AB748ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7C0BC22858AB748AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7C0BC22858AB748ALL;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::WaterSurface>]";
  v15[2] = 70;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7C0BC22858AB748ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1E6EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21))
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[4];
        if (*((_BYTE *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 21);
            if (v28 > (unsigned __int16)v30)
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[4];
          v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 21);
          v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21))
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[4];
  if (*((_BYTE *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 21);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[4];
    v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 21);
    v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  return result;
}

__n128 md::MaterialTextureManager::textureFromMaterial(__n128 *a1, uint64_t a2, uint64_t a3, unint64_t *a4, _BYTE *a5, unsigned int a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  __n128 result;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t ***v36;
  uint64_t **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  geo::read_write_lock *v44;
  const char *v45;
  geo::read_write_lock *v46;
  const char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  geo::read_write_lock *v53;
  const char *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  geo::read_write_lock *v59;
  const char *v60;
  unint64_t *v61;
  unint64_t v62;
  geo::read_write_lock *v63;
  const char *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *p_shared_weak_owners;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  void **v80;
  unsigned __int16 *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  float v85;
  float v86;
  _BOOL8 v87;
  unint64_t v88;
  unint64_t v89;
  size_t prime;
  void *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  size_t v95;
  size_t v96;
  size_t v97;
  _QWORD *i;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t (***v120)();
  uint64_t v121;
  uint64_t v122;
  uint64_t (**v123)();
  uint64_t (**v124)();
  uint64_t (**v125)();
  geo::read_write_lock *v126;
  const char *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  __n128 v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t (**v140)();
  pthread_rwlock_t *v141;
  __int128 v142;
  _BYTE v143[2];
  uint64_t (**v144)();
  std::__shared_weak_count *v145;
  char v146;
  uint64_t (***v147)();
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a3
    || (*a5 - 1) > 3u
    || ((*(void (**)(_BYTE *__return_ptr, float))(**(_QWORD **)a3 + 16 * (*a5 - 1) + 24))(v143, (float)a6), !v143[0]))
  {
    v137 = 0uLL;
    goto LABEL_10;
  }
  v11 = v143[1];
  v12 = *a4;
  v13 = *a5;
  v14 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)a2);
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"read lock", v15);
  v16 = ((v12 >> 34) + v12 + (HIDWORD(v12) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(v12);
  v17 = (v13 + (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL) ^ v16;
  v18 = v11 + (v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL;
  v19 = v18 ^ v17;
  v20 = *(int8x8_t *)(a2 + 208);
  if (v20)
  {
    v21 = (uint8x8_t)vcnt_s8(v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = v18 ^ v17;
      if (v19 >= *(_QWORD *)&v20)
        v22 = v19 % *(_QWORD *)&v20;
    }
    else
    {
      v22 = v19 & (*(_QWORD *)&v20 - 1);
    }
    v36 = *(uint64_t ****)(*(_QWORD *)(a2 + 200) + 8 * v22);
    if (v36)
    {
      v37 = *v36;
      if (v37)
      {
        if (v21.u32[0] < 2uLL)
        {
          v38 = *(_QWORD *)&v20 - 1;
          while (1)
          {
            v40 = v37[1];
            if (v40 == (uint64_t *)v19)
            {
              if (v37[2] == (uint64_t *)v12
                && *((unsigned __int16 *)v37 + 12) == (_DWORD)v13
                && *((unsigned __int8 *)v37 + 26) == (_DWORD)v11)
              {
                goto LABEL_48;
              }
            }
            else if (((unint64_t)v40 & v38) != v22)
            {
              goto LABEL_53;
            }
            v37 = (uint64_t **)*v37;
            if (!v37)
              goto LABEL_53;
          }
        }
        do
        {
          v39 = (unint64_t)v37[1];
          if (v39 == v19)
          {
            if (v37[2] == (uint64_t *)v12
              && *((unsigned __int16 *)v37 + 12) == (_DWORD)v13
              && *((unsigned __int8 *)v37 + 26) == (_DWORD)v11)
            {
LABEL_48:
              v41 = (unint64_t)v37[5];
              v137.n128_u64[0] = (unint64_t)v37[4];
              v137.n128_u64[1] = v41;
              if (v41)
              {
                v42 = (unint64_t *)(v41 + 8);
                do
                  v43 = __ldxr(v42);
                while (__stxr(v43 + 1, v42));
              }
              v44 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a2);
              if ((_DWORD)v44)
                geo::read_write_lock::logFailure(v44, (uint64_t)"unlock", v45);
              goto LABEL_204;
            }
          }
          else
          {
            if (v39 >= *(_QWORD *)&v20)
              v39 %= *(_QWORD *)&v20;
            if (v39 != v22)
              break;
          }
          v37 = (uint64_t **)*v37;
        }
        while (v37);
      }
    }
  }
LABEL_53:
  v46 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a2);
  if ((_DWORD)v46)
    geo::read_write_lock::logFailure(v46, (uint64_t)"unlock", v47);
  v137 = 0uLL;
  v48 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v49 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 24);
  v144 = (uint64_t (**)())v48;
  v145 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  v52 = *(_QWORD *)(v48 + 48);
  v53 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)v52);
  if ((_DWORD)v53)
    geo::read_write_lock::logFailure(v53, (uint64_t)"read lock", v54);
  v55 = *(_QWORD *)(v52 + 200);
  if (v11 >= (*(_QWORD *)(v52 + 208) - v55) >> 4)
  {
    v142 = 0uLL;
  }
  else
  {
    v56 = *(_OWORD *)(v55 + 16 * v11);
    v142 = v56;
    if (*((_QWORD *)&v56 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
  }
  v59 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v52);
  if ((_DWORD)v59)
    geo::read_write_lock::logFailure(v59, (uint64_t)"unlock", v60);
  if (v49)
  {
    v61 = (unint64_t *)&v49->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if ((_QWORD)v142)
  {
    v141 = (pthread_rwlock_t *)a2;
    v63 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)a2);
    if ((_DWORD)v63)
      geo::read_write_lock::logFailure(v63, (uint64_t)"write lock", v64);
    v65 = (std::__shared_weak_count *)operator new(0x48uLL);
    v66 = v65;
    v65->__shared_owners_ = 0;
    v67 = (unint64_t *)&v65->__shared_owners_;
    v65->__shared_weak_owners_ = 0;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
    v68 = v65 + 1;
    v65[1].__shared_weak_owners_ = *(_QWORD *)(a2 + 328);
    LODWORD(v65[2].__vftable) = 0;
    v69 = *((_QWORD *)&v142 + 1);
    v65[2].__shared_owners_ = v142;
    v65[2].__shared_weak_owners_ = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = v13 | (v11 << 16);
    do
      v73 = __ldxr(v67);
    while (__stxr(v73 + 1, v67));
    p_shared_weak_owners = (unint64_t *)&v65->__shared_weak_owners_;
    do
      v75 = __ldxr(p_shared_weak_owners);
    while (__stxr(v75 + 1, p_shared_weak_owners));
    v65[1].__vftable = (std::__shared_weak_count_vtbl *)&v65[1];
    v65[1].__shared_owners_ = (uint64_t)v65;
    do
      v76 = __ldaxr(v67);
    while (__stlxr(v76 - 1, v67));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v66);
    }
    v77 = 0;
    v137.n128_u64[0] = (unint64_t)v68;
    v137.n128_u64[1] = (unint64_t)v66;
    v78 = *(_QWORD *)(a2 + 208);
    if (v78)
    {
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
      v79.i16[0] = vaddlv_u8(v79);
      if (v79.u32[0] > 1uLL)
      {
        v77 = v19;
        if (v19 >= v78)
          v77 = v19 % v78;
      }
      else
      {
        v77 = v19 & (v78 - 1);
      }
      v80 = *(void ***)(*(_QWORD *)(a2 + 200) + 8 * v77);
      if (v80)
      {
        v81 = (unsigned __int16 *)*v80;
        if (*v80)
        {
          if (v79.u32[0] < 2uLL)
          {
            while (1)
            {
              v83 = *((_QWORD *)v81 + 1);
              if (v83 == v19)
              {
                if (*((_QWORD *)v81 + 2) == v12
                  && v81[12] == (_DWORD)v13
                  && *((unsigned __int8 *)v81 + 26) == (_DWORD)v11)
                {
                  goto LABEL_173;
                }
              }
              else if ((v83 & (v78 - 1)) != v77)
              {
                goto LABEL_113;
              }
              v81 = *(unsigned __int16 **)v81;
              if (!v81)
                goto LABEL_113;
            }
          }
          do
          {
            v82 = *((_QWORD *)v81 + 1);
            if (v82 == v19)
            {
              if (*((_QWORD *)v81 + 2) == v12
                && v81[12] == (_DWORD)v13
                && *((unsigned __int8 *)v81 + 26) == (_DWORD)v11)
              {
                goto LABEL_173;
              }
            }
            else
            {
              if (v82 >= v78)
                v82 %= v78;
              if (v82 != v77)
                break;
            }
            v81 = *(unsigned __int16 **)v81;
          }
          while (v81);
        }
      }
    }
LABEL_113:
    v81 = (unsigned __int16 *)operator new(0x30uLL);
    v84 = (_QWORD *)(a2 + 216);
    v144 = (uint64_t (**)())v81;
    v145 = (std::__shared_weak_count *)(a2 + 216);
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 1) = v19;
    *((_QWORD *)v81 + 2) = v12;
    *((_QWORD *)v81 + 3) = v72;
    *((_QWORD *)v81 + 4) = 0;
    *((_QWORD *)v81 + 5) = 0;
    v146 = 1;
    v85 = (float)(unint64_t)(*(_QWORD *)(a2 + 224) + 1);
    v86 = *(float *)(a2 + 232);
    if (v78 && (float)(v86 * (float)v78) >= v85)
    {
LABEL_163:
      v109 = *(_QWORD *)(a2 + 200);
      v110 = *(_QWORD **)(v109 + 8 * v77);
      if (v110)
      {
        *(_QWORD *)v81 = *v110;
      }
      else
      {
        *(_QWORD *)v81 = *v84;
        *v84 = v81;
        *(_QWORD *)(v109 + 8 * v77) = v84;
        if (!*(_QWORD *)v81)
        {
LABEL_172:
          ++*(_QWORD *)(a2 + 224);
LABEL_173:
          if (v137.n128_u64[1])
          {
            v112 = (unint64_t *)(v137.n128_u64[1] + 8);
            do
              v113 = __ldxr(v112);
            while (__stxr(v113 + 1, v112));
          }
          v114 = (std::__shared_weak_count *)*((_QWORD *)v81 + 5);
          *((__n128 *)v81 + 2) = v137;
          if (v114)
          {
            v115 = (unint64_t *)&v114->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          if (!(_QWORD)v142)
            goto LABEL_197;
          (*(void (**)(uint64_t (***__return_ptr)()))(**(_QWORD **)(a2 + 304) + 24))(&v140);
          v144 = &off_1E42D0F28;
          v145 = (std::__shared_weak_count *)&v142;
          v147 = &v144;
          v138 = 0;
          v139 = 0;
          (*((void (**)(uint64_t (**)(), uint64_t (***)(), uint64_t *))*v140 + 2))(v140, &v144, &v138);
          v117 = v139;
          if (v139)
          {
            v118 = (unint64_t *)&v139->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v120 = v147;
          if (v147 == &v144)
          {
            v121 = 4;
            v120 = &v144;
          }
          else
          {
            if (!v147)
              goto LABEL_192;
            v121 = 5;
          }
          (*v120)[v121]();
LABEL_192:
          if (v140)
          {
            v122 = (*((uint64_t (**)(uint64_t (**)()))*v140 + 3))(v140);
            v123 = v140;
            v140 = 0;
            v144 = v123;
            (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v122 + 48))(v122, &v144);
            v124 = v144;
            v144 = 0;
            if (v124)
              (*((void (**)(uint64_t (**)()))*v124 + 1))(v124);
            v125 = v140;
            v140 = 0;
            if (v125)
              (*((void (**)(uint64_t (**)()))*v125 + 1))(v125);
          }
LABEL_197:
          v126 = (geo::read_write_lock *)pthread_rwlock_unlock(v141);
          if ((_DWORD)v126)
            geo::read_write_lock::logFailure(v126, (uint64_t)"unlock", v127);
          goto LABEL_199;
        }
        v111 = *(_QWORD *)(*(_QWORD *)v81 + 8);
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v111 >= v78)
            v111 %= v78;
        }
        else
        {
          v111 &= v78 - 1;
        }
        v110 = (_QWORD *)(*(_QWORD *)(a2 + 200) + 8 * v111);
      }
      *v110 = v81;
      goto LABEL_172;
    }
    v87 = 1;
    if (v78 >= 3)
      v87 = (v78 & (v78 - 1)) != 0;
    v88 = v87 | (2 * v78);
    v89 = vcvtps_u32_f32(v85 / v86);
    if (v88 <= v89)
      prime = v89;
    else
      prime = v88;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v78 = *(_QWORD *)(a2 + 208);
    }
    if (prime <= v78)
    {
      if (prime >= v78)
        goto LABEL_150;
      v102 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 224) / *(float *)(a2 + 232));
      if (v78 < 3 || (v103 = (uint8x8_t)vcnt_s8((int8x8_t)v78), v103.i16[0] = vaddlv_u8(v103), v103.u32[0] > 1uLL))
      {
        v102 = std::__next_prime(v102);
      }
      else
      {
        v104 = 1 << -(char)__clz(v102 - 1);
        if (v102 >= 2)
          v102 = v104;
      }
      if (prime <= v102)
        prime = v102;
      if (prime >= v78)
      {
        v78 = *(_QWORD *)(a2 + 208);
LABEL_150:
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v19 >= v78)
            v77 = v19 % v78;
          else
            v77 = v19;
        }
        else
        {
          v77 = (v78 - 1) & v19;
        }
        goto LABEL_163;
      }
      if (!prime)
      {
        v136 = *(void **)(a2 + 200);
        *(_QWORD *)(a2 + 200) = 0;
        if (v136)
          operator delete(v136);
        v78 = 0;
        *(_QWORD *)(a2 + 208) = 0;
        goto LABEL_150;
      }
    }
    if (prime >> 61)
      goto LABEL_224;
    v91 = operator new(8 * prime);
    v92 = *(void **)(a2 + 200);
    *(_QWORD *)(a2 + 200) = v91;
    if (v92)
      operator delete(v92);
    v93 = 0;
    *(_QWORD *)(a2 + 208) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a2 + 200) + 8 * v93++) = 0;
    while (prime != v93);
    v94 = (_QWORD *)*v84;
    if (!*v84)
    {
LABEL_149:
      v78 = prime;
      goto LABEL_150;
    }
    v95 = v94[1];
    v96 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v97 = v95 & v96;
      *(_QWORD *)(*(_QWORD *)(a2 + 200) + 8 * v97) = v84;
      for (i = (_QWORD *)*v94; *v94; i = (_QWORD *)*v94)
      {
        v99 = i[1] & v96;
        if (v99 == v97)
        {
          v94 = i;
        }
        else
        {
          v100 = *(_QWORD *)(a2 + 200);
          if (*(_QWORD *)(v100 + 8 * v99))
          {
            *v94 = *i;
            v101 = 8 * v99;
            *i = **(_QWORD **)(*(_QWORD *)(a2 + 200) + v101);
            **(_QWORD **)(*(_QWORD *)(a2 + 200) + v101) = i;
          }
          else
          {
            *(_QWORD *)(v100 + 8 * v99) = v94;
            v94 = i;
            v97 = v99;
          }
        }
      }
      goto LABEL_149;
    }
    if (v95 >= prime)
      v95 %= prime;
    *(_QWORD *)(*(_QWORD *)(a2 + 200) + 8 * v95) = v84;
    v105 = (_QWORD *)*v94;
    if (!*v94)
      goto LABEL_149;
    while (1)
    {
      v107 = v105[1];
      if (v107 >= prime)
        v107 %= prime;
      if (v107 != v95)
      {
        v108 = *(_QWORD *)(a2 + 200);
        if (!*(_QWORD *)(v108 + 8 * v107))
        {
          *(_QWORD *)(v108 + 8 * v107) = v94;
          goto LABEL_154;
        }
        *v94 = *v105;
        v106 = 8 * v107;
        *v105 = **(_QWORD **)(*(_QWORD *)(a2 + 200) + v106);
        **(_QWORD **)(*(_QWORD *)(a2 + 200) + v106) = v105;
        v105 = v94;
      }
      v107 = v95;
LABEL_154:
      v94 = v105;
      v105 = (_QWORD *)*v105;
      v95 = v107;
      if (!v105)
        goto LABEL_149;
    }
  }
LABEL_199:
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
LABEL_204:
  if (!v137.n128_u64[0])
    goto LABEL_10;
  if (!*(_QWORD *)(v137.n128_u64[0] + 16))
    goto LABEL_212;
  v131 = *(std::__shared_weak_count **)(v137.n128_u64[0] + 8);
  if (!v131 || (v132 = std::__shared_weak_count::lock(v131)) == 0)
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
LABEL_224:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v133 = v132;
  v134 = (unint64_t *)&v132->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v133);
  }
LABEL_212:
  if (*(_QWORD *)(v137.n128_u64[0] + 32))
  {
    result = v137;
    *a1 = v137;
    return result;
  }
LABEL_10:
  v23 = (std::__shared_weak_count *)operator new(0x48uLL);
  v25 = v23;
  v23->__shared_owners_ = 0;
  v26 = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
  v23[1].__shared_weak_owners_ = 0;
  LODWORD(v23[2].__vftable) = 0;
  v27 = *(_QWORD *)(a2 + 320);
  v23[2].__shared_owners_ = *(_QWORD *)(a2 + 312);
  v23[2].__shared_weak_owners_ = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  a1->n128_u64[0] = (unint64_t)&v23[1];
  a1->n128_u64[1] = (unint64_t)v23;
  do
    v30 = __ldxr(v26);
  while (__stxr(v30 + 1, v26));
  v31 = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&v23[1];
  v23[1].__shared_owners_ = (uint64_t)v23;
  do
    v33 = __ldaxr(v26);
  while (__stlxr(v33 - 1, v26));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v137.n128_u64[1])
  {
    v34 = (unint64_t *)(v137.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v137.n128_u64[1] + 16))(v137.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v137.n128_u64[1]);
    }
  }
  return result;
}

void sub_19F1E7EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_rwlock_t *a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a18);
  geo::write_lock_guard::~write_lock_guard(&a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::MaterialTextureManager::hasAlpha(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  geo::read_write_lock *v16;
  const char *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD **)a1;
  if (!v4 || (*a2 - 1) > 3u)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, float))(*v4 + 16 * (*a2 - 1) + 24))(&v20, (float)a3);
  v6 = 0;
  if ((_BYTE)v20 && *a2 == 1)
  {
    v7 = BYTE1(v20);
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v9 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 24);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(_QWORD *)(v8 + 48);
    v13 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)v12);
    if ((_DWORD)v13)
      geo::read_write_lock::logFailure(v13, (uint64_t)"read lock", v14);
    if (*(_QWORD *)(v12 + 232) <= v7)
      v6 = 0;
    else
      v6 = (*(_QWORD *)(*(_QWORD *)(v12 + 224) + ((v7 >> 3) & 0x18)) >> v7) & 1;
    v16 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)v12);
    if ((_DWORD)v16)
      geo::read_write_lock::logFailure(v16, (uint64_t)"unlock", v17);
    if (v9)
    {
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v6;
}

void sub_19F1E805C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

void gms::Material<ggl::Texture2D>::roughnessMetallic(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::BasicMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minCastShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 384))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 384))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  *a2 = 0;
  return result;
}

void md::RouteRenderLayer::setActive(md::RouteRenderLayer *this, char a2)
{
  id v4;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 32) = a2 & ~objc_msgSend(v4, "disableRoute");

}

void sub_19F1E8270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ggl::MetalSwapchainDrawableRef::texture@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v3 = *(_QWORD *)(this + 8);
    v5 = *(_QWORD *)(v3 + 96);
    v4 = *(_QWORD *)(v3 + 104);
    *a3 = v5;
    a3[1] = v4;
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  return this;
}

void ggl::MetalSwapchain::nextDrawable(ggl::MetalSwapchain *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  char *v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  objc_msgSend(*(id *)(v4 + 16), "contentsScale");
  v6 = v5;
  objc_msgSend(*(id *)(v4 + 16), "bounds");
  v8 = (v7 * v6);
  v10 = (v9 * v6);
  if (*((_QWORD *)this + 9) != v8 || *((_QWORD *)this + 10) != v10)
  {
    ggl::MetalSwapchain::resize(this, v8, v10);
    v8 = *((_QWORD *)this + 9);
    v10 = *((_QWORD *)this + 10);
  }
  if (!(v10 * v8))
    goto LABEL_34;
  v45 = a2;
  if (!*((_QWORD *)this + 12))
  {
LABEL_30:
    if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1)
      dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_40830);
    a2 = v45;
    v37 = GEOGetGeoGLMetalSwapchainLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v50 = "false";
      v51 = 2080;
      v52 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchain.mm";
      v53 = 1024;
      v54 = 119;
      _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "Exhaused pool of swapchain drawables: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
LABEL_34:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v12 = 0;
  v13 = *((_QWORD *)this + 13);
  while (1)
  {
    v14 = *((_QWORD *)this + 5);
    v15 = (__int128 *)(v14 + 16 * v13);
    if (!*(_QWORD *)v15)
    {
      v46 = *((_DWORD *)this + 20);
      v47 = *((_DWORD *)this + 18);
      v18 = *((_DWORD *)this + 16);
      v19 = (char *)operator new(0xA8uLL);
      v20 = v19;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = &off_1E42E3BA0;
      *((_QWORD *)v19 + 3) = 850045863;
      v48 = v19 + 24;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      *((_OWORD *)v19 + 4) = 0u;
      v22 = *((_QWORD *)this + 1);
      v21 = *((_QWORD *)this + 2);
      *((_QWORD *)v19 + 10) = 0;
      *((_QWORD *)v19 + 11) = v22;
      *((_QWORD *)v19 + 12) = v21;
      if (v21)
      {
        v23 = (unint64_t *)(v21 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *((_QWORD *)this + 4);
      *((_QWORD *)v19 + 13) = *((_QWORD *)this + 3);
      *((_QWORD *)v19 + 14) = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      *(_OWORD *)(v19 + 148) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      v28 = (std::__shared_weak_count *)operator new(0x58uLL);
      v28->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      v28->__shared_weak_owners_ = 0;
      v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
      v28[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
      v28[1].__shared_weak_owners_ = 0;
      v28[2].__vftable = 0;
      v28[1].__shared_owners_ = 0;
      LODWORD(v28[2].__shared_owners_) = 0;
      *(_OWORD *)((char *)&v28[2].__shared_owners_ + 4) = xmmword_19FFB3C50;
      *(std::__shared_weak_count_vtbl **)((char *)&v28[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000000;
      HIDWORD(v28[3].__shared_owners_) = 0;
      v30 = operator new(0xB0uLL);
      v30[1] = 0;
      v30[2] = 0;
      *v30 = &off_1E42E53B0;
      v30[3] = &off_1E42BE438;
      v30[5] = 0;
      v30[6] = 0;
      v30[4] = 0;
      *((_DWORD *)v30 + 14) = 0;
      v30[10] = 0x100000001;
      *((_DWORD *)v30 + 22) = 0;
      *((_DWORD *)v30 + 23) = v18;
      v30[12] = 0x100000001;
      v30[14] = 0;
      v30[15] = 0;
      v30[8] = &unk_1E42BE458;
      v30[9] = "";
      *((_DWORD *)v30 + 32) = 1;
      v30[17] = 0;
      v30[18] = 0;
      *((_WORD *)v30 + 76) = 0;
      *((_BYTE *)v30 + 154) = 1;
      v30[20] = v28 + 1;
      v30[21] = v28;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      *((_DWORD *)v30 + 26) = v47;
      *((_DWORD *)v30 + 27) = v46;
      *((_QWORD *)v20 + 15) = v30 + 3;
      *((_QWORD *)v20 + 16) = v30;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      *(_QWORD *)v15 = v48;
      v33 = v14 + 16 * v13;
      v34 = *(std::__shared_weak_count **)(v33 + 8);
      *(_QWORD *)(v33 + 8) = v20;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    if (!atomic_load((unsigned int *)(*(_QWORD *)v15 + 132)))
      break;
    v17 = *((_QWORD *)this + 12);
    v13 = (*((_QWORD *)this + 13) + v12) % v17;
    *((_QWORD *)this + 13) = v13;
    if (++v12 >= v17)
      goto LABEL_30;
  }
  v38 = operator new(0x30uLL);
  v39 = v38;
  v38[1] = 0;
  v38[2] = 0;
  *v38 = &off_1E42E3EB0;
  v38[3] = &off_1E42BB420;
  v40 = (char *)(v38 + 3);
  v41 = *v15;
  *((_OWORD *)v38 + 2) = *v15;
  if (*((_QWORD *)&v41 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v44 = v38[4];
    if (!v44)
      goto LABEL_42;
    goto LABEL_41;
  }
  v44 = v41;
  if ((_QWORD)v41)
  {
LABEL_41:
    std::mutex::lock((std::mutex *)v44);
    ++*(_DWORD *)(v44 + 128);
    std::mutex::unlock((std::mutex *)v44);
  }
LABEL_42:
  *v45 = v40;
  v45[1] = v39;
}

void sub_19F1E87A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;

  shared_weak_owners = (std::__shared_weak_count *)v14[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v19);
  _Unwind_Resume(a1);
}

void md::NavigationLogic::runBeforeLayout(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  float v45;
  float v46;
  double v47;
  double v48;
  long double v49;
  long double v50;
  long double v51;
  double v52;
  long double v53;
  double v54;
  long double v55;
  long double v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  double v61;
  double v62;
  double v63;
  long double v64;
  long double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  char v77;

  v8 = *a3;
  v7 = a3[1];
  v9 = a3[3];
  *(_BYTE *)a4 = *(_BYTE *)(*a3 + 84) == 3;
  objc_storeStrong((id *)(a4 + 40), *(id *)(a1 + 184));
  objc_storeStrong((id *)(a4 + 48), *(id *)(a1 + 160));
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a1 + 120);
  v10 = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a4 + 64) = v10;
  *(_QWORD *)(a4 + 24) = 0xBFF0000000000000;
  *(_QWORD *)(a4 + 12) = *(_QWORD *)(a1 + 208);
  v11 = *(unsigned __int8 *)(v8 + 96);
  if (*(unsigned __int8 *)(a1 + 224) != v11)
  {
    *(_BYTE *)(a1 + 224) = v11;
    md::NavigationLogic::_updatePolygonSelection((md::NavigationLogic *)a1);
  }
  if (*(_BYTE *)a4 || *(_BYTE *)(v8 + 84) == 7)
  {
    if (v9 && (v12 = *(void **)(v9 + 184)) != 0)
    {
      v13 = v12;
      objc_msgSend(v13, "routeMatch");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v15) = objc_msgSend(v14, "legIndex");
    }
    else
    {
      *(_QWORD *)(a4 + 4) = *(_QWORD *)(a1 + 200);
      v16 = *(id *)(a1 + 184);
      v13 = v16;
      if (!v16
        || (objc_msgSend(v16, "routeInfo"),
            v17 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v17, "route"),
            v18 = (void *)objc_claimAutoreleasedReturnValue(),
            v18,
            v17,
            !v18))
      {
LABEL_20:

        if (!*(_BYTE *)v7)
          goto LABEL_21;
        goto LABEL_23;
      }
      objc_msgSend(v13, "routeInfo");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "route");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v19) = *(_DWORD *)(a1 + 200);
      if (v19 >= objc_msgSend(v14, "pointCount")
        || (v15 = objc_msgSend(v14, "legIndexForStepIndex:", objc_msgSend(v14, "stepIndexForPointIndex:", *(unsigned int *)(a1 + 200))), v15 == 0x7FFFFFFFFFFFFFFFLL))
      {
LABEL_19:

        goto LABEL_20;
      }
    }
    if (!*(_BYTE *)(a4 + 32))
      *(_BYTE *)(a4 + 32) = 1;
    *(_DWORD *)(a4 + 36) = v15;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a4 + 32))
    *(_BYTE *)(a4 + 32) = 1;
  *(_DWORD *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 4) = *MEMORY[0x1E0D26A38];
  if (!*(_BYTE *)v7)
  {
LABEL_21:
    v20 = *(_DWORD *)(v8 + 88);
    v21 = 0.0;
    if (v20 > 0xA || ((1 << v20) & 0x418) == 0)
      goto LABEL_27;
  }
LABEL_23:
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
  v23 = fmaxf((float)(v22 * -0.28571) + 4.8571, 0.0);
  v24 = 1.0811 - v23;
  v25 = v23 <= 1.0;
  v26 = 0.081081;
  if (v25)
    v26 = v24;
  v21 = (float)(fminf(*(float *)(v7 + 16), 1.0) * 1.6216) / v26;
LABEL_27:
  *(float *)(a4 + 88) = v21;
  if (*(_QWORD *)(a4 + 128))
  {
    v27 = *(_QWORD **)(a4 + 120);
    if (v27)
    {
      do
      {
        v28 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v28;
      }
      while (v28);
    }
    *(_QWORD *)(a4 + 120) = 0;
    v29 = *(_QWORD *)(a4 + 112);
    if (v29)
    {
      for (i = 0; i != v29; ++i)
        *(_QWORD *)(*(_QWORD *)(a4 + 104) + 8 * i) = 0;
    }
    *(_QWORD *)(a4 + 128) = 0;
  }
  v31 = *(_QWORD *)(a4 + 104);
  *(_QWORD *)(a4 + 104) = 0;
  v32 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  v33 = *(void **)(a4 + 104);
  *(_QWORD *)(a4 + 104) = v32;
  if (v33)
    operator delete(v33);
  v34 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v31;
  if (v34)
    operator delete(v34);
  v35 = *(_QWORD *)(a4 + 120);
  v36 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 112) = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v36;
  *(_QWORD *)(a4 + 120) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v35;
  v37 = *(_QWORD *)(a4 + 128);
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v37;
  v38 = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 280) = v38;
  if (*(_QWORD *)(a4 + 128))
  {
    v39 = *(_QWORD *)(a4 + 112);
    v40 = *(_QWORD *)(*(_QWORD *)(a4 + 120) + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v40 >= v39)
        v40 %= v39;
    }
    else
    {
      v40 &= v39 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 104) + 8 * v40) = a4 + 120;
  }
  if (v37)
  {
    v41 = *(_QWORD *)(a1 + 256);
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v42 >= v41)
        v42 %= v41;
    }
    else
    {
      v42 &= v41 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v42) = a1 + 264;
  }
  v43 = *(id *)(a1 + 296);
  v44 = v43;
  if (v43 && (objc_msgSend(v43, "currentSnappedSegment"), v77))
  {
    v46 = *(float *)(v7 + 16);
    v45 = *(float *)(v7 + 20);
    objc_msgSend(v44, "currentSnappedSegment");
    objc_msgSend(v44, "currentSnappedSegment");
    v47 = (float)(v46 * v45);
    v48 = *(double *)(a1 + 128);
    v49 = cos(v48 + v48) * -559.82 + 111132.92;
    v50 = v49 + cos(v48 * 4.0) * 1.175;
    v51 = v50 + cos(v48 * 6.0) * -0.0023;
    v52 = v48 * 0.5;
    v53 = tan(v48 * 0.5 + 0.78103484);
    v54 = log(v53);
    v55 = tan(v52 + 0.789761487);
    v56 = (v76 - v73) * v47 * fabs((log(v55) - v54) * 0.159154943) / v51;
    v57 = 1.0 / sqrt((v74 - v71) * (v74 - v71) + (v75 - v72) * (v75 - v72) + v56 * v56);
    v58 = v57 * (v74 - v71);
    v59 = v57 * (v75 - v72);
    v60 = v57 * v56;
    v61 = 1.0 / sqrt(v59 * v59 + v58 * v58);
    v62 = v61 * v59;
    v63 = -(v58 * v61);
    v64 = v63 * v60;
    v65 = -(v60 * v62);
    v66 = -(v63 * v58 - v62 * v59);
    v67 = 1.0 / sqrt(v64 * v64 + v65 * v65 + v66 * v66);
    v68 = v67 * v64;
    v69 = v67 * v65;
    v70 = v67 * v66;
    if (v70 <= 0.860000014)
    {
      v68 = 0.0;
      v69 = 0.0;
      v70 = 1.0;
    }
    *(double *)(a4 + 144) = v68;
    *(double *)(a4 + 152) = v69;
    *(double *)(a4 + 160) = v70;
  }
  else
  {
    *(_QWORD *)(a4 + 144) = 0;
    *(_QWORD *)(a4 + 152) = 0;
    *(_QWORD *)(a4 + 160) = 0x3FF0000000000000;
  }
  *(_BYTE *)(a4 + 168) = *(_BYTE *)(a1 + 240);

}

void sub_19F1E8EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F1E8F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::CameraLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  long double v71;
  long double v72;
  double v73;
  long double v74;
  int v75;
  double v76;
  const Camera *v77;
  double v78;
  double v79;
  long double v80;
  long double v81;
  long double v82;
  double v83;
  long double v84;
  double v85;
  long double v86;
  float v87;
  float v88;
  float v89;
  void *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  double v121;
  __int128 v122;
  __int128 v123;
  double v124;
  long double v125;
  long double v126;
  long double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  __double2 v132;
  __double2 v133;
  double v134;
  double v135;
  double v136;
  double v137;
  __double2 v138;
  double v139;
  double v140;
  double v141;
  double v142;
  long double v143;
  long double v144;
  long double v145;
  double v146;
  long double v147;
  long double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  int v162;
  id v163;
  float64_t v164;
  float64_t v165;
  double v166;
  double v167;
  double v168;
  __double2 v169;
  double v170;
  double v171;
  __double2 v172;
  float64x2_t *v173;
  double *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  id v178;
  float64_t v179;
  float64_t v180;
  BOOL v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  long double v212;
  double v213;
  double v214;
  long double v215;
  double v216;
  long double v217;
  long double v218;
  long double v219;
  long double v220;
  double v221;
  long double v222;
  double v223;
  __double2 v224;
  double v225;
  uint64_t v226;
  double v227;
  long double v228;
  long double v229;
  double v230;
  id v231;
  unsigned __int8 *v232;
  double v233;
  uint64_t v234;
  long double v235;
  long double v236;
  long double v237;
  double v238;
  double v239;
  double v240;
  __double2 v241;
  _QWORD *result;
  uint64_t v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  double v279;
  double v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  int v285;
  double v286;
  double v287;
  double v288;
  __int128 v289;
  float64x2_t v290;
  double v291;
  void *__p;
  void *v293;
  double v294;
  _WORD v295[2];
  double v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  int v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  _QWORD v332[3];
  _QWORD *v333;
  _QWORD v334[3];
  _QWORD *v335;
  _QWORD v336[3];
  _QWORD *v337;
  uint64_t v338;

  v338 = *MEMORY[0x1E0C80C00];
  v334[0] = &off_1E42C8C18;
  v334[1] = a2;
  v335 = v334;
  v332[0] = &off_1E42C8C60;
  v332[1] = a2;
  v333 = v332;
  v337 = v336;
  v336[0] = &off_1E42C8C60;
  v336[1] = a2;
  _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v334);
  v8 = v333;
  if (v333 == v332)
  {
    v9 = 4;
    v8 = v332;
  }
  else
  {
    if (!v333)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v335;
  if (v335 == v334)
  {
    v11 = 4;
    v10 = v334;
  }
  else
  {
    if (!v335)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *a3;
  *(_DWORD *)(a4 + 5596) = *(_DWORD *)(a1 + 120);
  if (*(_BYTE *)(v12 + 5))
    v13 = *(_QWORD *)(a1 + 128);
  else
    v13 = 0;
  *(_DWORD *)(a4 + 5592) = 0;
  objc_msgSend(*(id *)a2, "size");
  if (v14 <= 0.0 || v15 <= 0.0)
  {
    v16 = *(float *)(a4 + 5592);
  }
  else
  {
    v16 = log2(v14 * 0.001953125 * *(float *)(a4 + 5596));
    *(float *)(a4 + 5592) = v16;
  }
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  *(_BYTE *)(a4 + 3776) = *(_BYTE *)(v17 + 128);
  v18 = *(id *)a2;
  objc_msgSend(v18, "sizeInPixels");
  *(_QWORD *)(a4 + 1368) = v19;
  *(_QWORD *)(a4 + 1376) = v20;

  v21 = *(id *)a2;
  objc_msgSend(v21, "contentScale");
  *(_QWORD *)(a4 + 1384) = v22;

  v23 = *(id *)a2;
  objc_msgSend(v23, "size");
  v25 = v24;
  objc_msgSend(*(id *)a2, "size");
  v27 = v26;

  md::LayoutContext::frameState((md::LayoutContext *)a2);
  LOBYTE(v296) = *(_BYTE *)(v28 + 128);
  v297 = *(_OWORD *)(v28 + 136);
  v298 = *(_OWORD *)(v28 + 152);
  v299 = *(_OWORD *)(v28 + 168);
  v300 = *(_OWORD *)(v28 + 184);
  v301 = *(_QWORD *)(v28 + 200);
  v29 = *(_OWORD *)(v28 + 224);
  v302 = *(_OWORD *)(v28 + 208);
  v303 = v29;
  v304 = *(_OWORD *)(v28 + 240);
  v30 = *(_OWORD *)(v28 + 440);
  v316 = *(_OWORD *)(v28 + 424);
  v317 = v30;
  v31 = *(_OWORD *)(v28 + 408);
  v32 = *(_QWORD *)(v28 + 256);
  v314 = *(_OWORD *)(v28 + 392);
  v315 = v31;
  v33 = *(_QWORD *)(v28 + 456);
  v305 = v32;
  v318 = v33;
  v311 = *(_OWORD *)(v28 + 344);
  v312 = *(_OWORD *)(v28 + 360);
  v313 = *(_OWORD *)(v28 + 376);
  v307 = *(_OWORD *)(v28 + 280);
  v308 = *(_OWORD *)(v28 + 296);
  v309 = *(_OWORD *)(v28 + 312);
  v310 = *(_OWORD *)(v28 + 328);
  v306 = *(_OWORD *)(v28 + 264);
  v319 = 0;
  if (*(_BYTE *)(v28 + 464))
  {
    v320 = *(_QWORD *)(v28 + 472);
    v319 = 1;
  }
  v321 = 0;
  if (*(_BYTE *)(v28 + 480))
  {
    v322 = *(_QWORD *)(v28 + 488);
    v321 = 1;
  }
  v34 = *(_OWORD *)(v28 + 512);
  v323 = *(_OWORD *)(v28 + 496);
  v324 = v34;
  v35 = *(_OWORD *)(v28 + 544);
  v325 = *(_OWORD *)(v28 + 528);
  v326 = v35;
  v327 = *(_OWORD *)(v28 + 560);
  v328 = *(_DWORD *)(v28 + 576);
  v329 = *(_QWORD *)(v28 + 584);
  v36 = *(_OWORD *)(v28 + 608);
  v330 = *(_OWORD *)(v28 + 592);
  v331 = v36;
  if (*(_BYTE *)(a4 + 3776) == 3)
  {
    gdc::CameraView::ecefCameraView((gdc::CameraView *)&v290, (const Camera *)&v296);
  }
  else if (*(_BYTE *)(a4 + 3776))
  {
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v290, (const Camera *)&v296);
  }
  else
  {
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)&v290, (const Camera *)&v296);
  }
  gdc::CameraView::operator=(a4, (uint64_t)&v290);
  v37 = (int)v25;
  v38 = *(double *)(a4 + 528);
  v39 = *(double *)(a4 + 536);
  v40 = *(double *)(a4 + 520);
  v41 = v38 * -2.0;
  v42 = *(double *)(a4 + 544);
  v43 = v42 * (v38 * -2.0);
  v44 = (v40 + v40) * v42;
  v45 = (v40 + v40) * v40;
  v46 = -1.0 - v38 * -2.0 * v38;
  *(double *)(a4 + 3088) = v43 - (v40 + v40) * v39;
  *(double *)(a4 + 3096) = v44 + v38 * -2.0 * v39;
  *(double *)(a4 + 3104) = v46 + v45;
  *(double *)(a4 + 3136) = -(v46 + (v39 + v39) * v39);
  *(double *)(a4 + 3144) = -(v40 * (v38 * -2.0) - v42 * (v39 + v39));
  *(double *)(a4 + 3152) = v43 + (v39 + v39) * v40;
  v47 = v42 * (v39 * -2.0);
  *(double *)(a4 + 3112) = v47 + (v40 + v40) * v38;
  *(double *)(a4 + 3120) = v39 * -2.0 * v39 + 1.0 - v45;
  *(double *)(a4 + 3128) = v44 - v39 * -2.0 * v38;
  v49 = *(double *)(a4 + 504);
  v48 = *(double *)(a4 + 512);
  v50 = *(double *)(a4 + 496);
  v51 = -(v48 * v38 - v49 * v39) - (v48 * v38 - v49 * v39);
  v52 = -(v50 * v39 - v48 * v40) - (v50 * v39 - v48 * v40);
  v53 = -(v49 * v40 - v50 * v38) - (v49 * v40 - v50 * v38);
  v54 = -(v53 * v40 - (-(v49 - v51 * v39) - v52 * v42));
  v55 = -(v50 + v51 * v42 + v52 * v39 - v53 * v38);
  v56 = -(v48 + v51 * v38 + v53 * v42 - v52 * v40);
  v57 = -(v38 * (v38 * -2.0));
  v58 = 1.0 - (v57 - v39 * (v39 * -2.0));
  v59 = v40 * -2.0;
  v60 = -(v38 * (v40 * -2.0));
  v61 = -(v39 * (v40 * -2.0));
  v62 = v43 - v39 * (v40 * -2.0);
  v63 = v40 * -2.0 * v40 + 1.0;
  v64 = v63 - -(v39 * (v39 * -2.0));
  v65 = -(v39 * v41);
  *(double *)(a4 + 3160) = v58;
  *(double *)(a4 + 3168) = v47 + v60;
  *(double *)(a4 + 3176) = v61 - v43;
  *(_QWORD *)(a4 + 3184) = 0;
  *(double *)(a4 + 3192) = v60 - v47;
  *(double *)(a4 + 3200) = v64;
  *(double *)(a4 + 3208) = v42 * v59 + v65;
  *(_QWORD *)(a4 + 3216) = 0;
  *(double *)(a4 + 3224) = v62;
  *(double *)(a4 + 3232) = v65 - v42 * v59;
  *(double *)(a4 + 3240) = v63 - v57;
  *(_QWORD *)(a4 + 3248) = 0;
  *(double *)(a4 + 3256) = v55;
  *(double *)(a4 + 3264) = v54;
  *(double *)(a4 + 3272) = v56;
  *(_QWORD *)(a4 + 3280) = 0x3FF0000000000000;
  v67 = *(double *)(a4 + 368);
  v66 = *(double *)(a4 + 376);
  if (v66 >= v67)
  {
    v73 = *(double *)(a4 + 456);
  }
  else
  {
    v68 = v66 * v67;
    v69 = v66 / v67;
    if (v68 <= 0.0)
      v70 = 1.0;
    else
      v70 = v69;
    v71 = tan(*(double *)(a4 + 456) * 0.5);
    v72 = atan(v70 * v71);
    v73 = v72 + v72;
  }
  v74 = tan(v73 * 0.5);
  *(long double *)(a4 + 3752) = v74;
  *(long double *)(a4 + 3760) = v74 * (double)v37 / (double)(int)v27;
  v75 = *(unsigned __int8 *)(a4 + 3776);
  v76 = 0.0;
  if (v13)
  {
    switch(*(_BYTE *)a4)
    {
      case 0:
      case 1:
      case 3:
        v76 = *(double *)(a4 + 24) * 0.0000000249532021;
        break;
      case 2:
        v78 = fmin(fmax(*(double *)(a4 + 8), -1.48352986), 1.48352986);
        v79 = *(double *)(a4 + 24);
        v80 = cos(v78 + v78) * -559.82 + 111132.92;
        v81 = v80 + cos(v78 * 4.0) * 1.175;
        v82 = v81 + cos(v78 * 6.0) * -0.0023;
        v83 = v78 * 0.5;
        v84 = tan(v78 * 0.5 + 0.78103484);
        v85 = log(v84);
        v86 = tan(v83 + 0.789761487);
        v76 = fabs((log(v86) - v85) * 0.159154943) * v79 / v82;
        if (!v75)
          goto LABEL_42;
        goto LABEL_37;
      default:
        break;
    }
  }
  if (*(_BYTE *)(a4 + 3776))
  {
LABEL_37:
    gdc::CameraView::mercatorCameraView((gdc::CameraView *)&v252, (const Camera *)&v296);
    if (v75 == 3)
      md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v290, (uint64_t)&v252, 0, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), 0.0);
    else
      md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v290, (uint64_t)&v252, 0, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), v76);
    md::MercatorCameraContext::operator=(a4 + 1392, (uint64_t)&v290);
  }
  else
  {
LABEL_42:
    md::MercatorCameraContext::MercatorCameraContext((uint64_t)&v290, a4, v13, *(double *)(a4 + 1368), *(double *)(a4 + 1376), *(double *)(a4 + 1384), v76);
    md::MercatorCameraContext::operator=(a4 + 1392, (uint64_t)&v290);
  }
  if (__p)
  {
    v293 = __p;
    operator delete(__p);
  }
  v87 = gdc::DisplayZoomLevel::centerZoomLevel((gdc::DisplayZoomLevel *)a4, v77);
  *(long double *)(a4 + 3768) = exp2((float)-v87);
  v88 = v87;
  if (!v75)
  {
    v89 = log2(*(long double *)(a4 + 2984));
    v88 = -v89;
  }
  *(_QWORD *)(a4 + 3064) = a4;
  *(float *)(a4 + 3072) = fmaxf(v88, 1.0);
  *(float *)(a4 + 3076) = fmaxf(v87, 1.0);
  *(float *)(a4 + 3080) = v16;
  *(_BYTE *)(a4 + 3084) = v75 == 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = objc_msgSend(v90, "shouldFreezeLayoutCamera");

  v92 = *(_QWORD *)(a4 + 5584);
  if (!v91)
  {
    if (!v92)
      goto LABEL_68;
    *(_QWORD *)(a4 + 5584) = 0;
    v110 = *(void **)(v92 + 2960);
    if (!v110)
      goto LABEL_56;
    goto LABEL_55;
  }
  if (!v92)
  {
    v93 = operator new();
    v94 = v93;
    *(_BYTE *)v93 = *(_BYTE *)a4;
    *(_QWORD *)(v93 + 8) = *(_QWORD *)(a4 + 8);
    v95 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(v93 + 16) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v93 + 32) = v95;
    v96 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v93 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v93 + 64) = v96;
    v97 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(v93 + 80) = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(v93 + 96) = v97;
    *(_OWORD *)(v93 + 112) = *(_OWORD *)(a4 + 112);
    *(_QWORD *)(v93 + 128) = *(_QWORD *)(a4 + 128);
    v98 = *(_OWORD *)(a4 + 312);
    *(_OWORD *)(v93 + 296) = *(_OWORD *)(a4 + 296);
    *(_OWORD *)(v93 + 312) = v98;
    *(_QWORD *)(v93 + 328) = *(_QWORD *)(a4 + 328);
    *(_OWORD *)(v93 + 216) = *(_OWORD *)(a4 + 216);
    *(_OWORD *)(v93 + 232) = *(_OWORD *)(a4 + 232);
    *(_OWORD *)(v93 + 248) = *(_OWORD *)(a4 + 248);
    v99 = *(_OWORD *)(a4 + 280);
    *(_OWORD *)(v93 + 264) = *(_OWORD *)(a4 + 264);
    *(_OWORD *)(v93 + 280) = v99;
    *(_OWORD *)(v93 + 152) = *(_OWORD *)(a4 + 152);
    *(_OWORD *)(v93 + 168) = *(_OWORD *)(a4 + 168);
    *(_OWORD *)(v93 + 184) = *(_OWORD *)(a4 + 184);
    *(_OWORD *)(v93 + 200) = *(_OWORD *)(a4 + 200);
    *(_OWORD *)(v93 + 136) = *(_OWORD *)(a4 + 136);
    *(_BYTE *)(v93 + 336) = 0;
    if (*(_BYTE *)(a4 + 336))
    {
      *(_QWORD *)(v93 + 344) = *(_QWORD *)(a4 + 344);
      *(_BYTE *)(v93 + 336) = 1;
    }
    *(_BYTE *)(v93 + 352) = 0;
    if (*(_BYTE *)(a4 + 352))
    {
      *(_QWORD *)(v93 + 360) = *(_QWORD *)(a4 + 360);
      *(_BYTE *)(v93 + 352) = 1;
    }
    v100 = *(_OWORD *)(a4 + 384);
    *(_OWORD *)(v93 + 368) = *(_OWORD *)(a4 + 368);
    *(_OWORD *)(v93 + 384) = v100;
    v101 = *(_OWORD *)(a4 + 416);
    *(_OWORD *)(v93 + 400) = *(_OWORD *)(a4 + 400);
    *(_OWORD *)(v93 + 416) = v101;
    *(_OWORD *)(v93 + 432) = *(_OWORD *)(a4 + 432);
    *(_DWORD *)(v93 + 448) = *(_DWORD *)(a4 + 448);
    *(_QWORD *)(v93 + 456) = *(_QWORD *)(a4 + 456);
    v102 = *(_OWORD *)(a4 + 480);
    *(_OWORD *)(v93 + 464) = *(_OWORD *)(a4 + 464);
    *(_OWORD *)(v93 + 480) = v102;
    geo::View<double>::View(v93 + 496, (__int128 *)(a4 + 496), (double *)(a4 + 552), (__int128 *)(a4 + 680), (_WORD *)(a4 + 952), *(_DWORD *)(a4 + 956), *(double *)(a4 + 936));
    *(_OWORD *)(v94 + 960) = *(_OWORD *)(a4 + 960);
    *(_QWORD *)(v94 + 976) = *(_QWORD *)(a4 + 976);
    memcpy((void *)(v94 + 984), (const void *)(a4 + 984), 0x198uLL);
    md::MercatorCameraContext::MercatorCameraContext(v94 + 1392, a4 + 1392);
    v103 = *(_OWORD *)(a4 + 3240);
    *(_OWORD *)(v94 + 3224) = *(_OWORD *)(a4 + 3224);
    *(_OWORD *)(v94 + 3240) = v103;
    v104 = *(_OWORD *)(a4 + 3272);
    *(_OWORD *)(v94 + 3256) = *(_OWORD *)(a4 + 3256);
    *(_OWORD *)(v94 + 3272) = v104;
    v105 = *(_OWORD *)(a4 + 3176);
    *(_OWORD *)(v94 + 3160) = *(_OWORD *)(a4 + 3160);
    *(_OWORD *)(v94 + 3176) = v105;
    v106 = *(_OWORD *)(a4 + 3208);
    *(_OWORD *)(v94 + 3192) = *(_OWORD *)(a4 + 3192);
    *(_OWORD *)(v94 + 3208) = v106;
    v107 = *(_OWORD *)(a4 + 3112);
    *(_OWORD *)(v94 + 3096) = *(_OWORD *)(a4 + 3096);
    *(_OWORD *)(v94 + 3112) = v107;
    v108 = *(_OWORD *)(a4 + 3144);
    *(_OWORD *)(v94 + 3128) = *(_OWORD *)(a4 + 3128);
    *(_OWORD *)(v94 + 3144) = v108;
    v109 = *(_OWORD *)(a4 + 3080);
    *(_OWORD *)(v94 + 3064) = *(_OWORD *)(a4 + 3064);
    *(_OWORD *)(v94 + 3080) = v109;
    *(_OWORD *)(v94 + 3288) = *(_OWORD *)(a4 + 3288);
    *(_QWORD *)(v94 + 3304) = *(_QWORD *)(a4 + 3304);
    *(_OWORD *)(v94 + 3312) = *(_OWORD *)(a4 + 3312);
    *(_QWORD *)(v94 + 3328) = *(_QWORD *)(a4 + 3328);
    *(_QWORD *)(v94 + 3336) = *(_QWORD *)(a4 + 3336);
    memcpy((void *)(v94 + 3344), (const void *)(a4 + 3344), 0x1A8uLL);
    *(_OWORD *)(v94 + 3761) = *(_OWORD *)(a4 + 3761);
    v92 = *(_QWORD *)(a4 + 5584);
    *(_QWORD *)(a4 + 5584) = v94;
    if (v92)
    {
      v110 = *(void **)(v92 + 2960);
      if (!v110)
      {
LABEL_56:
        if (*(_BYTE *)(v92 + 1752))
          *(_BYTE *)(v92 + 1752) = 0;
        if (*(_BYTE *)(v92 + 1736))
          *(_BYTE *)(v92 + 1736) = 0;
        if (*(_BYTE *)(v92 + 352))
          *(_BYTE *)(v92 + 352) = 0;
        if (*(_BYTE *)(v92 + 336))
          *(_BYTE *)(v92 + 336) = 0;
        MEMORY[0x1A1AF4E00](v92, 0x1060C409A3A3550);
        goto LABEL_68;
      }
LABEL_55:
      *(_QWORD *)(v92 + 2968) = v110;
      operator delete(v110);
      goto LABEL_56;
    }
  }
LABEL_68:
  v111 = *(_QWORD *)(a2 + 72);
  if (v111 && *(_BYTE *)v111)
  {
    md::LayoutContext::frameState((md::LayoutContext *)a2);
    v113 = v112;
    LOBYTE(v252) = *(_BYTE *)(v112 + 128);
    v114 = *(_OWORD *)(v112 + 152);
    v253 = *(_OWORD *)(v112 + 136);
    v254 = v114;
    v115 = *(_OWORD *)(v112 + 184);
    v255 = *(_OWORD *)(v112 + 168);
    v256 = v115;
    v257 = *(_QWORD *)(v112 + 200);
    v116 = *(_OWORD *)(v112 + 224);
    v258 = *(_OWORD *)(v112 + 208);
    v259 = v116;
    v260 = *(_OWORD *)(v112 + 240);
    v117 = *(_QWORD *)(v112 + 256);
    v118 = *(_OWORD *)(v112 + 440);
    v272 = *(_OWORD *)(v112 + 424);
    v273 = v118;
    v119 = *(_OWORD *)(v112 + 408);
    v270 = *(_OWORD *)(v112 + 392);
    v271 = v119;
    v120 = *(_QWORD *)(v112 + 456);
    v261 = v117;
    v274 = v120;
    v267 = *(_OWORD *)(v112 + 344);
    v268 = *(_OWORD *)(v112 + 360);
    v269 = *(_OWORD *)(v112 + 376);
    v263 = *(_OWORD *)(v112 + 280);
    v264 = *(_OWORD *)(v112 + 296);
    v265 = *(_OWORD *)(v112 + 312);
    v266 = *(_OWORD *)(v112 + 328);
    v262 = *(_OWORD *)(v112 + 264);
    v275 = 0;
    if (*(_BYTE *)(v112 + 464))
    {
      v276 = *(_QWORD *)(v112 + 472);
      v275 = 1;
    }
    v277 = 0;
    if (*(_BYTE *)(v112 + 480))
    {
      v278 = *(_QWORD *)(v112 + 488);
      v277 = 1;
    }
    v121 = *(double *)(v112 + 504);
    v248 = *(double *)(v112 + 496);
    v279 = v248;
    v280 = v121;
    v246 = v121;
    v122 = *(_OWORD *)(v112 + 528);
    v281 = *(_OWORD *)(v112 + 512);
    v282 = v122;
    v123 = *(_OWORD *)(v112 + 560);
    v283 = *(_OWORD *)(v112 + 544);
    v284 = v123;
    v285 = *(_DWORD *)(v112 + 576);
    v124 = *(double *)(v112 + 592);
    v247 = *(double *)(v112 + 584);
    v286 = v247;
    v250 = v124;
    v287 = v124;
    v249 = *(double *)(v112 + 600);
    v288 = v249;
    v289 = *(_OWORD *)(v112 + 608);
    v125 = *(double *)(v111 + 16);
    v126 = *(double *)(v111 + 24);
    v127 = *(double *)(v111 + 32);
    v128 = v125 * v125 + v126 * v126;
    v129 = sqrt(v128);
    v130 = atan2(v127, v129 * 0.996647189);
    v131 = atan2(v126, v125);
    v132 = __sincos_stret(v130);
    v251 = atan2(v127 + v132.__sinval * v132.__sinval * 42841.3115 * v132.__sinval, v129 + v132.__cosval * v132.__cosval * -42697.6727 * v132.__cosval);
    v133 = __sincos_stret(v251);
    v134 = 6378137.0 / sqrt(v133.__sinval * v133.__sinval * -0.00669437999 + 1.0);
    v245 = v131;
    v135 = v131 + 0.00001;
    v136 = v129 / v133.__cosval - v134;
    v137 = v129 / v133.__cosval * v133.__cosval;
    v138 = __sincos_stret(v135);
    v139 = 1.0 / sqrt(v128 + v127 * v127);
    v140 = v139 * v125;
    v141 = v139 * v126;
    v142 = v139 * v127;
    v143 = -(v125 - v137 * v138.__cosval);
    v144 = -(v126 - v137 * v138.__sinval);
    v145 = -(v127 - (v136 + v134 * 0.99330562) * v133.__sinval);
    v146 = 1.0 / sqrt(v143 * v143 + v144 * v144 + v145 * v145);
    v147 = v146 * v143;
    v148 = v146 * v144;
    v149 = -(v146 * v144 * v142 - v146 * v145 * v141);
    v150 = -(v146 * v145 * v140 - v146 * v143 * v142);
    v151 = -(v147 * v141 - v148 * v140);
    v152 = -(v151 * v141 - v150 * v142);
    v153 = -(v149 * v142 - v151 * v140);
    v154 = -(v150 * v140 - v149 * v141);
    v155 = v150 - (v151 * v141 - v150 * v142);
    if (v155 + v142 <= 0.0)
    {
      if (v152 <= v150 || v152 <= v142)
      {
        v182 = v150 <= v142;
        v183 = sqrt(v142 + 1.0 - v155);
        v184 = 1.0 / (v183 + v183);
        v185 = (v140 - (v150 * v140 - v149 * v141)) * v184;
        v186 = v151 + v141;
        v187 = v186 * v184;
        v188 = v183 * 0.5;
        v189 = (v153 - v149) * v184;
        v190 = sqrt(v150 + 1.0 - (v142 + v152));
        v191 = 1.0 / (v190 + v190);
        v192 = (v153 + v149) * v191;
        v193 = v190 * 0.5;
        v194 = v186 * v191;
        v160 = (v140 - v154) * v191;
        if (v182)
          v157 = v185;
        else
          v157 = v192;
        if (v182)
          v158 = v187;
        else
          v158 = v193;
        if (v182)
          v159 = v188;
        else
          v159 = v194;
        if (v182)
          v160 = v189;
      }
      else
      {
        v195 = sqrt(1.0 - (v142 + v150) - (v151 * v141 - v150 * v142));
        v196 = v195 + v195;
        v157 = v195 * 0.5;
        v158 = (v149 - (v149 * v142 - v151 * v140)) * (1.0 / v196);
        v159 = (v154 + v140) * (1.0 / v196);
        v160 = (v151 - v141) * (1.0 / v196);
      }
    }
    else
    {
      v156 = 0.5 / sqrt(v155 + v142 + 1.0);
      v157 = v156 * (v151 - v141);
      v158 = v156 * (v140 - v154);
      v159 = v156 * (v153 - v149);
      v160 = 0.25 / v156;
    }
    v197 = *(double *)(v111 + 40);
    v198 = *(double *)(v111 + 48);
    v199 = *(double *)(v111 + 56);
    v200 = *(double *)(v111 + 64);
    v201 = v197 * v160 + v198 * v159 - (v199 * v158 + v200 * v157);
    v202 = v198 * v160 + v199 * v157 - (v197 * v159 + v200 * v158);
    v203 = v197 * v158 + v199 * v160 - (v198 * v157 + v200 * v159);
    v204 = v197 * v157 + v198 * v158 + v199 * v159 + v200 * v160;
    v205 = v203 * v203 + v204 * v204 - (v202 * v202 + v201 * v201);
    if (v205 >= 1.0)
    {
      v213 = acos((v203 * v203 + v202 * v202) * -2.0 + 1.0);
      v244 = 0.0;
      v211 = 0.0;
    }
    else
    {
      v206 = v204 * v202;
      v207 = v136;
      v208 = v201 * v203;
      v209 = v201 * v204;
      v210 = v203 * v202;
      v244 = atan2(v201 * v203 - v204 * v202, v201 * v204 + v203 * v202);
      v211 = acos(v205);
      v212 = v208 + v206;
      v136 = v207;
      v213 = atan2(v212, v209 - v210);
    }
    v214 = v251;
    if (v211 + -1.57079633 == 0.0)
    {
      v223 = 0.0;
    }
    else
    {
      v215 = v136 / cos(v211);
      v216 = tan(v211);
      v217 = cos(v251 + v251) * -559.82 + 111132.92;
      v218 = v217 + cos(v251 * 4.0) * 1.175;
      v219 = v218 + cos(v251 * 6.0) * -0.0023;
      v220 = tan(v251 * 0.5 + 0.78103484);
      v221 = log(v220);
      v222 = tan(v251 * 0.5 + 0.789761487);
      v223 = v216 * fabs((log(v222) - v221) * 0.159154943) * v136 / v219;
      v214 = v251;
      v136 = v215;
    }
    v224 = __sincos_stret(v213);
    *(double *)&v253 = v214 + v223 * v224.__cosval;
    *((double *)&v253 + 1) = v245 + v223 * v224.__sinval;
    *(_QWORD *)&v254 = 0;
    *((double *)&v254 + 1) = v136;
    *(double *)&v255 = v211;
    *((double *)&v255 + 1) = v213;
    *(double *)&v256 = -v244;
    v225 = *(double *)(v113 + 504);
    v295[0] = (int)*(double *)(v113 + 496);
    v295[1] = (int)v225;
    v226 = *((_QWORD *)&v289 + 1);
    if (v246 >= v248)
    {
      v230 = v247;
    }
    else
    {
      if (v246 * v248 <= 0.0)
        v227 = 1.0;
      else
        v227 = v246 / v248;
      v228 = tan(v247 * 0.5);
      v229 = atan(v228 * v227);
      v230 = v229 + v229;
    }
    v294 = v230;
    gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)&v296, v111 + 16, v295, &v294, *(float *)&v226, *((float *)&v226 + 1), 1.0, v250, v249, *(double *)&v289);
    gdc::CameraView::CameraView((uint64_t)&v290, (uint64_t)&v252, (uint64_t)&v296);
    v231 = *(id *)a2;
    objc_msgSend(v231, "sizeInPixels");
    v232 = (unsigned __int8 *)(a4 + 3784);
    v252 = v233;
    *(_QWORD *)&v253 = v234;
    md::ViewTransform::setCoordinateSpaceEtc(v232, 1u, (float64x2_t *)&v252, (uint64_t)&v290);

    v235 = *(double *)(v111 + 72);
    v236 = *(double *)(v111 + 80);
    v237 = *(double *)(v111 + 88);
    v252 = v235;
    *(long double *)&v253 = v236;
    *((long double *)&v253 + 1) = v237;
    v238 = sqrt(v235 * v235 + v236 * v236);
    v239 = atan2(v237, v238 * 0.996647189);
    v240 = atan2(v236, v235);
    v241 = __sincos_stret(v239);
    v296 = atan2(v237 + v241.__sinval * v241.__sinval * 42841.3115 * v241.__sinval, v238 + v241.__cosval * v241.__cosval * -42697.6727 * v241.__cosval)* 57.2957795;
    *(double *)&v297 = v240 * 57.2957795;
    v173 = (float64x2_t *)&v252;
    v174 = &v296;
    v175 = (uint64_t)v232;
  }
  else
  {
    if (*(unsigned __int8 *)(a4 + 3776) - 1 > 2)
    {
      md::LayoutContext::frameState((md::LayoutContext *)a2);
      v177 = *(unsigned __int8 *)(v176 + 128);
      v178 = *(id *)a2;
      objc_msgSend(v178, "sizeInPixels");
      v290.f64[0] = v179;
      v290.f64[1] = v180;
      md::ViewTransform::setCoordinateSpaceEtc((unsigned __int8 *)(a4 + 3784), (v177 - 1) < 3, &v290, a4);

      goto LABEL_109;
    }
    md::LayoutContext::frameState((md::LayoutContext *)a2);
    v162 = *(unsigned __int8 *)(v161 + 128);
    v163 = *(id *)a2;
    objc_msgSend(v163, "sizeInPixels");
    v290.f64[0] = v164;
    v290.f64[1] = v165;
    md::ViewTransform::setCoordinateSpaceEtc((unsigned __int8 *)(a4 + 3784), (v162 - 1) < 3, &v290, a4);

    v166 = *(double *)(a4 + 8);
    v167 = *(double *)(a4 + 16);
    v168 = *(double *)(a4 + 24);
    v169 = __sincos_stret(v166);
    v170 = 6378137.0 / sqrt(v169.__sinval * v169.__sinval * -0.00669437999 + 1.0);
    v171 = (v170 + v168) * v169.__cosval;
    v172 = __sincos_stret(v167);
    v290.f64[0] = v171 * v172.__cosval;
    v290.f64[1] = v171 * v172.__sinval;
    v291 = (v168 + v170 * 0.99330562) * v169.__sinval;
    v252 = v166 * 57.2957795;
    *(double *)&v253 = v167 * 57.2957795;
    v173 = &v290;
    v174 = &v252;
    v175 = a4 + 3784;
  }
  md::ViewTransform::setFocus(v175, (uint64_t)v173, v174);
LABEL_109:
  if (!v337)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v337 + 48))(v337);
  result = v337;
  if (v337 == v336)
  {
    v243 = 4;
    result = v336;
  }
  else
  {
    if (!v337)
      return result;
    v243 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v243))();
}

void sub_19F1EA208(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 352))
    *(_BYTE *)(v1 + 352) = 0;
  if (*(_BYTE *)(v1 + 336))
    *(_BYTE *)(v1 + 336) = 0;
  MEMORY[0x1A1AF4E00](v1, 0x1060C409A3A3550);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 168));
  _Unwind_Resume(a1);
}

md::RibbonLayoutContext *md::RibbonLayoutContext::RibbonLayoutContext(md::RibbonLayoutContext *this, const md::LayoutContext *a2)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  double v22;
  int8x8_t v23;
  float v24;

  *(_QWORD *)this = a2;
  *((_BYTE *)this + 76) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *(id *)a2;
  objc_msgSend(v14, "sizeInPixels");
  *((_QWORD *)this + 3) = v15;
  *((_QWORD *)this + 4) = v16;
  objc_msgSend(v14, "size");
  *((_QWORD *)this + 5) = v17;
  *((_QWORD *)this + 6) = v18;
  *(float *)&v17 = fmaxf(*(float *)(v13 + 3080) + *(float *)(v13 + 3076), 1.0);
  *((_DWORD *)this + 2) = v17;
  v19 = vcvtms_s32_f32(*(float *)&v17);
  v20 = v19 & ~(v19 >> 31);
  if (v20 >= 23)
    v21 = 23;
  else
    v21 = v20;
  *((_BYTE *)this + 12) = v21;
  if (v20 >= 22)
    LOBYTE(v20) = 22;
  *((_BYTE *)this + 13) = v20 + 1;
  objc_msgSend(v14, "contentScale");
  *(float *)&v22 = v22;
  v23.i8[0] = *((_BYTE *)this + 12);
  *((float *)this + 4) = *((float *)this + 2) - (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v23)).i32[0];
  *((_DWORD *)this + 5) = LODWORD(v22);
  *(float *)&v22 = 0.9 / *(float *)&v22;
  v24 = *(double *)(v13 + 40);
  *((_DWORD *)this + 15) = LODWORD(v22);
  *((float *)this + 16) = fminf(v24 * 1.2732, 1.0);
  *((_WORD *)this + 28) = 0;

  return this;
}

void sub_19F1EA5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::DaVinciGroundMetaData::flagsForPoint(char *a1, const QuadTile *a2, double *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  double v9;
  float32_t v10;
  float v11;
  float32x2_t v12;
  int32x2_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;

  v5 = vcvtmd_s64_f64(a3[1] * 33554432.0);
  v6 = vcvtmd_s64_f64(*a3 * 33554432.0);
  v20 = 6655;
  v21 = 0x1FFFFFF - v5;
  v22 = v6;
  md::DaVinciGroundMetaData::queryMetaTileFromTile((md::DaVinciGroundMetaData *)&v18, a2);
  if (v18)
  {
    v7 = 1;
    v8 = 1 << *(_BYTE *)(v18 + 169);
    v9 = 1.0 / (double)v8;
    v10 = (*a3 - v9 * (double)*(int *)(v18 + 176)) * (double)v8;
    v11 = -(a3[1] - v9 * (double)(v8 + ~*(_DWORD *)(v18 + 172))) * (double)v8;
    v12.f32[0] = v11 + 1.0;
    v12.f32[1] = v10;
    v13 = vmin_s32(vmax_s32(vcvt_s32_f32(vrndm_f32(vmul_n_f32(v12, (float)*(unsigned __int16 *)(v18 + 800)))), 0), vdup_n_s32(*(unsigned __int16 *)(v18 + 800) - 1));
    v14 = *(unsigned __int16 *)(v18 + 800) * (unint64_t)v13.u16[0] + v13.u16[2];
    a1[1] = (((1 << v14) & *(_QWORD *)(*(_QWORD *)(v18 + 728) + ((v14 >> 3) & 0x3FFFFFF8))) != 0) | (2 * (((1 << v14) & *(_QWORD *)(*(_QWORD *)(v18 + 752) + ((v14 >> 3) & 0x3FFFFFF8))) != 0));
  }
  else
  {
    v7 = 0;
  }
  *a1 = v7;
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

float gdc::DisplayZoomLevel::centerZoomLevel(gdc::DisplayZoomLevel *this, const Camera *a2)
{
  double v3;
  double v4;
  double v5;
  long double v6;
  long double v7;
  long double v8;
  double v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  float v22;

  switch(*(_BYTE *)this)
  {
    case 0:
    case 1:
    case 3:
      v3 = *((double *)this + 4) * 0.0000000249532021;
      break;
    case 2:
      v4 = fmin(fmax(*((double *)this + 1), -1.48352986), 1.48352986);
      v5 = *((double *)this + 4);
      v6 = cos(v4 + v4) * -559.82 + 111132.92;
      v7 = v6 + cos(v4 * 4.0) * 1.175;
      v8 = v7 + cos(v4 * 6.0) * -0.0023;
      v9 = v4 * 0.5;
      v10 = tan(v4 * 0.5 + 0.78103484);
      v11 = log(v10);
      v12 = tan(v9 + 0.789761487);
      v3 = fabs((log(v12) - v11) * 0.159154943) * v5 / v8;
      break;
    default:
      v3 = 0.0;
      break;
  }
  v13 = *((double *)this + 46);
  v14 = *((double *)this + 47);
  if (v13 >= v14)
  {
    v20 = *((double *)this + 57);
  }
  else
  {
    v15 = v14 * v13;
    v16 = v13 / v14;
    if (v15 <= 0.0)
      v17 = 1.0;
    else
      v17 = v16;
    v18 = tan(*((double *)this + 57) * 0.5);
    v19 = atan(v17 * v18);
    v20 = v19 + v19;
  }
  v21 = tan(v20 * 0.5);
  v22 = log2(v3 * (v21 + v21));
  return fminf(fmaxf(-v22, 1.0), 25.0);
}

uint64_t gdc::CameraView::mercatorCameraView(gdc::CameraView *this, const Camera *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  long double v20;
  long double v21;
  long double v22;
  double v24;
  _WORD v25[2];
  _BYTE v26[496];
  double v27[7];

  gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(v27, (double *)a2 + 1, *(_BYTE *)a2 == 0);
  v4 = *((double *)a2 + 1);
  v5 = *((double *)a2 + 58);
  v6 = *((double *)a2 + 59);
  v7 = *((double *)a2 + 46);
  v8 = *((double *)a2 + 47);
  v25[0] = (int)v7;
  v25[1] = (int)v8;
  v9 = *((float *)a2 + 122);
  if (v8 >= v7)
  {
    v15 = *((double *)a2 + 57);
  }
  else
  {
    v10 = v8 * v7;
    v11 = v8 / v7;
    if (v10 <= 0.0)
      v12 = 1.0;
    else
      v12 = v11;
    v13 = tan(*((double *)a2 + 57) * 0.5);
    v14 = atan(v13 * v12);
    v15 = v14 + v14;
  }
  v16 = tan(v4 * 0.5 + 0.789761487);
  v17 = log(v16);
  v18 = tan(v4 * 0.5 + 0.78103484);
  v19 = fabs((v17 - log(v18)) * 0.159154943);
  v20 = cos(v4 + v4) * -559.82 + 111132.92;
  v21 = v20 + cos(v4 * 4.0) * 1.175;
  v22 = cos(v4 * 6.0);
  v24 = v15;
  gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView((uint64_t)v26, (uint64_t)v27, v25, &v24, v9, 0.0, 16.0, v19 / (v21 + v22 * -0.0023) * v5, v19 / (v21 + v22 * -0.0023) * v6, *((double *)a2 + 60));
  return gdc::CameraView::CameraView((uint64_t)this, (uint64_t)a2, (uint64_t)v26);
}

double gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(double *a1, double *a2, int a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  long double v12;
  double v13;
  long double v14;
  double v15;
  long double v16;
  __double2 v17;
  __double2 v18;
  __double2 v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  double v24;
  double result;
  double v26;
  double v27;

  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *a2;
  if (a3)
  {
    v27 = v8 * 0.5;
    v9 = 0.0000000249532021;
  }
  else
  {
    v10 = cos(v8 + v8) * -559.82 + 111132.92;
    v11 = v10 + cos(v8 * 4.0) * 1.175;
    v12 = v11 + cos(v8 * 6.0) * -0.0023;
    v13 = v8 * 0.5;
    v14 = tan(v8 * 0.5 + 0.78103484);
    v15 = log(v14);
    v27 = v13;
    v16 = tan(v13 + 0.789761487);
    v9 = fabs((log(v16) - v15) * 0.159154943) / v12;
  }
  v26 = v9;
  v17 = __sincos_stret((v6 - v7) * 0.5);
  v18 = __sincos_stret(v5 * 0.5);
  v19 = __sincos_stret((v7 + v6) * 0.5);
  v20 = a2[1];
  v21 = a2[2];
  v22 = tan(v27 + 0.785398163);
  v23 = log(v22);
  v24 = a2[3] * v26;
  *a1 = v20 * 0.159154943
      + 0.5
      + v24
      * -(v17.__cosval * v18.__sinval * -2.0 * (v19.__sinval * v18.__cosval)
        - (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v19.__cosval * v18.__cosval));
  a1[1] = v23 * 0.159154943
        + 0.5
        + v24
        * (v17.__cosval * v18.__sinval * -2.0 * (v19.__cosval * v18.__cosval)
         + (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v19.__sinval * v18.__cosval));
  result = -(v21 * -0.0000000249532021
           + v24
           * -(v17.__cosval * v18.__sinval * -2.0 * (v17.__cosval * v18.__sinval)
             + 1.0
             - (v17.__sinval * v18.__sinval + v17.__sinval * v18.__sinval) * (v17.__sinval * v18.__sinval)));
  a1[2] = result;
  a1[3] = v17.__cosval * v18.__sinval;
  a1[4] = v17.__sinval * v18.__sinval;
  a1[5] = v19.__sinval * v18.__cosval;
  a1[6] = v19.__cosval * v18.__cosval;
  return result;
}

void md::LayoutContext::zoomAtCentrePoint(int8x8_t *this)
{
  int8x8_t v1;
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  double v22;
  long double v23;
  long double v24;

  v1 = this[1];
  if (!*(_QWORD *)&v1)
    return;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v1 <= 0xE42D19AFCA302E68)
      v3 = 0xE42D19AFCA302E68 % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0xE42D19AFCA302E68;
  }
  v4 = *(_QWORD **)(*(_QWORD *)this + 8 * v3);
  if (v4)
  {
    v5 = (_QWORD *)*v4;
    if (v5)
    {
      if (v2.u32[0] < 2uLL)
      {
        while (1)
        {
          v7 = v5[1];
          if (v7 == 0xE42D19AFCA302E68)
          {
            if (v5[2] == 0xE42D19AFCA302E68)
              goto LABEL_21;
          }
          else if ((v7 & (*(_QWORD *)&v1 - 1)) != v3)
          {
            goto LABEL_21;
          }
          v5 = (_QWORD *)*v5;
          if (!v5)
            goto LABEL_21;
        }
      }
      do
      {
        v6 = v5[1];
        if (v6 == 0xE42D19AFCA302E68)
        {
          if (v5[2] == 0xE42D19AFCA302E68)
            break;
        }
        else
        {
          if (v6 >= *(_QWORD *)&v1)
            v6 %= *(_QWORD *)&v1;
          if (v6 != v3)
            break;
        }
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
  }
LABEL_21:
  if (v2.u32[0] > 1uLL)
  {
    v8 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v1 <= 0x1AF456233693CD46uLL)
      v8 = 0x1AF456233693CD46uLL % *(_QWORD *)&v1;
  }
  else
  {
    v8 = (*(_QWORD *)&v1 - 1) & 0x1AF456233693CD46;
  }
  v9 = *(_QWORD **)(*(_QWORD *)this + 8 * v8);
  if (v9)
  {
    v10 = (_QWORD *)*v9;
    if (v10)
    {
      if (v2.u32[0] < 2uLL)
      {
        v11 = *(_QWORD *)&v1 - 1;
        while (1)
        {
          v13 = v10[1];
          if (v13 == 0x1AF456233693CD46)
          {
            if (v10[2] == 0x1AF456233693CD46)
              goto LABEL_41;
          }
          else if ((v13 & v11) != v8)
          {
            return;
          }
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
      }
      do
      {
        v12 = v10[1];
        if (v12 == 0x1AF456233693CD46)
        {
          if (v10[2] == 0x1AF456233693CD46)
          {
LABEL_41:
            v14 = v10[5];
            if (*(_QWORD *)(v14 + 8) == 0x1AF456233693CD46)
            {
              v15 = *(double **)(v14 + 32);
              if (v15)
              {
                v16 = v15[1];
                v17 = cos(v16 + v16) * -559.82 + 111132.92;
                v18 = v17 + cos(v16 * 4.0) * 1.175;
                v19 = v18 + cos(v16 * 6.0) * -0.0023;
                v20 = v16 * 0.5;
                v21 = tan(v16 * 0.5 + 0.78103484);
                v22 = log(v21);
                v23 = tan(v20 + 0.789761487);
                v24 = log(v23);
                log2(fabs((v24 - v22) * 0.159154943) * (v15[4] * (v15[470] + v15[470])) / v19);
              }
            }
            return;
          }
        }
        else
        {
          if (v12 >= *(_QWORD *)&v1)
            v12 %= *(_QWORD *)&v1;
          if (v12 != v8)
            return;
        }
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
  }
}

uint64_t gdc::ScaledOffsetPerspectiveView<double>::ScaledOffsetPerspectiveView(uint64_t a1, uint64_t a2, _WORD *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  _OWORD *v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  double v67;
  double v69[16];
  double v70[16];
  double v71[16];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  __int128 v90;
  double v91;
  __int128 v92;
  __int128 v93;
  double v94;
  __int128 v95;
  __int128 v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  __int128 v104;
  __int128 v105;
  double v106[5];
  double v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v67 = a5;
  v18 = (_OWORD *)(a1 + 312);
  v19 = *a4;
  LOWORD(a5) = *a3;
  v20 = (double)*(unint64_t *)&a5;
  LOWORD(a5) = a3[1];
  v21 = (double)*(unint64_t *)&a5;
  v22 = tan(*a4 * 0.5);
  v23 = (a8 + a8) * v20 * v22 / v21;
  v104 = 0u;
  v105 = 0u;
  v103 = (a8 + a8) / v23;
  v106[0] = 1.0 / v22;
  v24 = -(a9 - a10 * a8);
  memset(&v106[1], 0, 32);
  v107 = v24 / (a9 - a8);
  v25 = a9 * a8 * (a10 + -1.0);
  *(_QWORD *)&v109 = 0;
  v108 = 0xBFF0000000000000;
  *((double *)&v109 + 1) = v25 / (a9 - a8);
  v110 = 0;
  v92 = 0u;
  v93 = 0u;
  v91 = v23 / (a8 + a8);
  v94 = v22;
  v95 = 0u;
  v96 = 0u;
  v97 = 0.0;
  v98 = (a9 - a8) / v25;
  v100 = 0;
  v99 = 0;
  v101 = -1.0;
  v102 = v24 / v25;
  geo::View<double>::View(a1, (__int128 *)a2, &v103, (__int128 *)&v91, a3, 0, a10);
  *(double *)(a1 + 464) = v19;
  *(double *)(a1 + 472) = a8;
  *(double *)(a1 + 480) = a9;
  *(double *)(a1 + 488) = a7;
  memset(v106, 0, sizeof(v106));
  v109 = 0u;
  v108 = 0u;
  v105 = 0u;
  v104 = 0u;
  v110 = 0x3FF0000000000000;
  v103 = a7;
  v106[0] = a7;
  v26 = a8 * a7;
  v107 = a7;
  v27 = a9 * a7;
  v28 = *(double *)(a1 + 448);
  v29 = tan(*a4 * 0.5);
  v92 = 0u;
  v93 = 0u;
  v91 = (v26 + v26) / ((v26 + v26) * v28 * v29);
  v94 = 1.0 / v29;
  v95 = 0u;
  v96 = 0u;
  v97 = -(v27 - v26 * a10) / (v27 - v26);
  v100 = 0;
  v98 = -1.0;
  v99 = 0;
  v101 = v27 * v26 * (a10 + -1.0) / (v27 - v26);
  v102 = 0.0;
  v83 = 0u;
  v85 = 0;
  v84 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0x3FF0000000000000;
  *(_QWORD *)&v83 = 0x3FF0000000000000;
  v87 = 0;
  v86 = 0x3FF0000000000000;
  v88 = v67 + v67;
  v89 = a6 + a6;
  v90 = xmmword_19FFB33A0;
  gm::operator*<double,4,4,4>((double *)&v72, (double *)&v80, (double *)(a1 + 56));
  v30 = v73;
  *(_OWORD *)(a1 + 56) = v72;
  *(_OWORD *)(a1 + 72) = v30;
  v31 = v75;
  *(_OWORD *)(a1 + 88) = v74;
  *(_OWORD *)(a1 + 104) = v31;
  v32 = v77;
  *(_OWORD *)(a1 + 120) = v76;
  *(_OWORD *)(a1 + 136) = v32;
  v33 = v79;
  *(_OWORD *)(a1 + 152) = v78;
  *(_OWORD *)(a1 + 168) = v33;
  gm::operator*<double,4,4,4>(v70, (double *)&v80, &v91);
  gm::operator*<double,4,4,4>(v71, v70, &v103);
  v34 = *(double *)(a2 + 32);
  v35 = *(double *)(a2 + 40);
  v36 = *(double *)(a2 + 48);
  v38 = *(double *)(a2 + 16);
  v37 = *(double *)(a2 + 24);
  v39 = *(double *)(a2 + 8);
  v40 = -(*(double *)a2 * v35 - v38 * v37);
  v41 = -(v39 * v37 - *(double *)a2 * v34);
  v42 = -(v38 * v34 - v39 * v35) - (v38 * v34 - v39 * v35);
  v43 = v40 + v40;
  v44 = v41 + v41;
  v45 = -(v44 * v37 - (-(v39 - v42 * v35) - v43 * v36));
  v46 = -(*(double *)a2 + v42 * v36 + v43 * v35 - v44 * v34);
  v47 = v38 + v42 * v34 + v44 * v36;
  v48 = v34 * -2.0;
  v49 = -(v34 * (v34 * -2.0));
  v50 = 1.0 - (v49 - v35 * (v35 * -2.0));
  v51 = -(v34 * (v37 * -2.0));
  v52 = v35 * -2.0 * v36;
  v53 = v51 - v52;
  v54 = -(v35 * (v37 * -2.0));
  v55 = v36 * v48;
  v56 = v52 + v51;
  v57 = v36 * v48 - v35 * (v37 * -2.0);
  v58 = v37 * -2.0 * v37 + 1.0;
  v59 = v58 - -(v35 * (v35 * -2.0));
  v60 = -(v35 * v48);
  v61 = v36 * (v37 * -2.0);
  v69[0] = v50;
  v69[1] = v56;
  v69[4] = v53;
  v69[5] = v59;
  v69[8] = v57;
  v69[9] = v60 - v61;
  v69[2] = v54 - v55;
  v69[6] = v61 + v60;
  v69[10] = v58 - v49;
  v69[3] = 0.0;
  v69[7] = 0.0;
  v69[11] = 0.0;
  v69[12] = v46;
  v69[13] = v45;
  v69[14] = -(v47 - v43 * v37);
  v69[15] = 1.0;
  gm::operator*<double,4,4,4>((double *)&v72, v71, v69);
  v62 = v73;
  *v18 = v72;
  v18[1] = v62;
  v63 = v75;
  v18[2] = v74;
  v18[3] = v63;
  v64 = v77;
  v18[4] = v76;
  v18[5] = v64;
  v65 = v79;
  v18[6] = v78;
  v18[7] = v65;
  return a1;
}

uint64_t gdc::CameraView::CameraView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float64x2_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  double v44;
  double v45;
  float64x2_t v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  float64x2_t v52;
  double v53;
  double v54;
  float64x2_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  v8 = *(_OWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  v11 = *(_OWORD *)(a2 + 216);
  v12 = *(_OWORD *)(a2 + 232);
  v13 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v13;
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 216) = v11;
  v14 = *(_OWORD *)(a2 + 280);
  v15 = *(_OWORD *)(a2 + 296);
  v16 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v15;
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a1 + 280) = v14;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 336) = 1;
  }
  v17 = (float64x2_t *)(a1 + 1000);
  *(_BYTE *)(a1 + 352) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_BYTE *)(a1 + 352) = 1;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  v18 = *(_OWORD *)(a2 + 400);
  v19 = *(_OWORD *)(a2 + 416);
  v20 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 416) = v19;
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 400) = v18;
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v19;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  geo::View<double>::View(a1 + 496, (__int128 *)a3, (double *)(a3 + 56), (__int128 *)(a3 + 184), (_WORD *)(a3 + 456), *(_DWORD *)(a3 + 460), *(double *)(a3 + 440));
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a3 + 464);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a3 + 480);
  v21 = *(double *)(a3 + 440);
  v23 = *(double *)(a3 + 312);
  v22 = *(double *)(a3 + 320);
  v25 = *(double *)(a3 + 344);
  v24 = *(double *)(a3 + 352);
  v27 = *(double *)(a3 + 376);
  v26 = *(double *)(a3 + 384);
  v28 = *(double *)(a3 + 328);
  v29 = *(double *)(a3 + 336);
  v30 = *(double *)(a3 + 360);
  v31 = *(double *)(a3 + 368);
  v32 = *(double *)(a3 + 392);
  v33 = *(double *)(a3 + 400);
  v34 = v28 - v29 * v21;
  v35 = v30 - v31 * v21;
  v36.f64[0] = v32 - v33 * v21;
  v38 = *(double *)(a3 + 408);
  v37 = *(double *)(a3 + 416);
  v39 = *(double *)(a3 + 424);
  v40 = *(double *)(a3 + 432);
  v41 = v29 + v23;
  v42 = v31 + v25;
  v43.f64[0] = v33 + v27;
  v43.f64[1] = v40 + v38;
  v44 = v29 - v23;
  v45 = v31 - v25;
  v46.f64[0] = v33 - v27;
  v46.f64[1] = v40 - v38;
  v47 = v29 + v22;
  v48 = v31 + v24;
  v49.f64[0] = v33 + v26;
  v49.f64[1] = v40 + v37;
  v50 = v29 - v22;
  v51 = v31 - v24;
  v52.f64[0] = v33 - v26;
  v52.f64[1] = v40 - v37;
  v36.f64[1] = v39 - v40 * v21;
  v53 = v29 - v28;
  v54 = v31 - v30;
  v55.f64[0] = v33 - v32;
  v56 = 1.0 / sqrt(v34 * v34 + v35 * v35 + v36.f64[0] * v36.f64[0]);
  v55.f64[1] = v40 - v39;
  *(double *)(a1 + 984) = v56 * v34;
  *(double *)(a1 + 992) = v56 * v35;
  *v17 = vmulq_n_f64(v36, v56);
  v57 = 1.0 / sqrt(v53 * v53 + v54 * v54 + v55.f64[0] * v55.f64[0]);
  *(double *)(a1 + 1016) = v57 * v53;
  *(double *)(a1 + 1024) = v57 * v54;
  *(float64x2_t *)(a1 + 1032) = vmulq_n_f64(v55, v57);
  v58 = 1.0 / sqrt(v47 * v47 + v48 * v48 + v49.f64[0] * v49.f64[0]);
  *(double *)(a1 + 1048) = v58 * v47;
  *(double *)(a1 + 1056) = v58 * v48;
  *(float64x2_t *)(a1 + 1064) = vmulq_n_f64(v49, v58);
  v59 = 1.0 / sqrt(v50 * v50 + v51 * v51 + v52.f64[0] * v52.f64[0]);
  *(double *)(a1 + 1080) = v59 * v50;
  *(double *)(a1 + 1088) = v59 * v51;
  *(float64x2_t *)(a1 + 1096) = vmulq_n_f64(v52, v59);
  v60 = 1.0 / sqrt(v41 * v41 + v42 * v42 + v43.f64[0] * v43.f64[0]);
  *(double *)(a1 + 1112) = v60 * v41;
  *(double *)(a1 + 1120) = v60 * v42;
  *(float64x2_t *)(a1 + 1128) = vmulq_n_f64(v43, v60);
  v61 = 1.0 / sqrt(v44 * v44 + v45 * v45 + v46.f64[0] * v46.f64[0]);
  *(double *)(a1 + 1144) = v61 * v44;
  *(double *)(a1 + 1152) = v61 * v45;
  *(float64x2_t *)(a1 + 1160) = vmulq_n_f64(v46, v61);
  geo::Frustum<double>::calculateCorners((double *)(a1 + 984), (double *)(a3 + 312), v21);
  return a1;
}

double geo::Frustum<double>::calculateCorners(double *a1, double *a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double result;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;

  gm::Matrix<double,4,4>::inverted<int,void>(&v48, a2);
  v5 = v48;
  v6 = v49;
  v8 = v52;
  v7 = v53;
  v9 = v52 + v48;
  v10 = v56;
  v11 = v57;
  v12 = v60;
  v13 = v61;
  v14 = v60 + v56 * a3;
  v15 = v53 + v49;
  v16 = v61 + v57 * a3;
  v17 = v50;
  v18 = v51;
  v19 = v54;
  v20 = v55;
  v21 = v54 + v50;
  v23 = v58;
  v22 = v59;
  v24 = v62;
  v25 = v63;
  v26 = v62 + v58 * a3;
  v27 = v55 + v51;
  v28 = v63 + v59 * a3;
  v29 = 1.0 / (v28 - (v55 + v51));
  v30 = v29 * (v14 - (v52 + v48));
  v31 = v29 * (v16 - (v53 + v49));
  v32 = v29 * (v26 - (v54 + v50));
  a1[24] = v30;
  a1[25] = v31;
  v33 = v12 + v10;
  v34 = v13 + v11;
  v35 = v25 + v22;
  v36 = 1.0 / (v25 + v22 - v27);
  a1[26] = v32;
  a1[27] = v36 * (v33 - v9);
  a1[28] = v36 * (v34 - v15);
  a1[29] = v36 * (v24 + v23 - v21);
  v37 = 1.0 / (v28 + v20 - v18);
  a1[30] = v37 * (v14 + v8 - v5);
  a1[31] = v37 * (v16 + v7 - v6);
  v38 = 1.0 / (v35 + v20 - v18);
  a1[32] = v37 * (v26 + v19 - v17);
  a1[33] = v38 * (v33 + v8 - v5);
  a1[34] = v38 * (v34 + v7 - v6);
  a1[35] = v38 * (v24 + v23 + v19 - v17);
  v39 = v5 - v8;
  v40 = v6 - v7;
  v41 = v17 - v19;
  v42 = v18 - v20;
  v43 = 1.0 / (v28 + v18 - v20);
  a1[36] = v43 * (v14 + v39);
  a1[37] = v43 * (v16 + v40);
  v44 = 1.0 / (v35 + v42);
  a1[38] = v43 * (v26 + v41);
  a1[39] = v44 * (v33 + v39);
  a1[40] = v44 * (v34 + v40);
  a1[41] = v44 * (v24 + v23 + v41);
  v45 = 1.0 / (v28 + v27);
  a1[42] = v45 * (v14 + v9);
  a1[43] = v45 * (v16 + v15);
  v46 = 1.0 / (v35 + v27);
  a1[44] = v45 * (v26 + v21);
  a1[45] = v46 * (v33 + v9);
  result = v46 * (v24 + v23 + v21);
  a1[46] = v46 * (v34 + v15);
  a1[47] = result;
  return result;
}

double gm::Matrix<double,4,4>::inverted<int,void>(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double result;

  v4 = gm::Matrix<double,4,4>::determinant<int,void>(a2);
  v5 = a2[14];
  v6 = a2[15];
  v8 = a2[8];
  v7 = a2[9];
  v9 = a2[10];
  v10 = a2[11];
  v12 = a2[12];
  v11 = a2[13];
  v13 = a2[6];
  v14 = a2[7];
  v16 = a2[4];
  v15 = a2[5];
  v17 = 1.0 / v4;
  v18 = a2[2];
  v19 = a2[3];
  v20 = *a2;
  v21 = a2[1];
  *a1 = (v13 * v11 * v10 + (v5 * v7 - v9 * v11) * v14 + v15 * v9 * v6 - (v6 * (v13 * v7) + v15 * v5 * v10)) * v17;
  a1[1] = (v19 * (v9 * v11 - v5 * v7) + v18 * v7 * v6 + v21 * v5 * v10 - (v18 * v11 * v10 + v21 * v9 * v6)) * v17;
  a1[2] = (v19 * (v15 * v5 - v13 * v11) + v18 * v11 * v14 + v21 * v13 * v6 - (v18 * v15 * v6 + v21 * v5 * v14)) * v17;
  a1[3] = (v19 * (v13 * v7 - v15 * v9) + v18 * v15 * v10 + v21 * v9 * v14 - (v18 * v7 * v14 + v21 * v13 * v10)) * v17;
  a1[4] = ((v12 * v9 - v8 * v5) * v14 + (v8 * v13 - v16 * v9) * v6 + (v16 * v5 - v12 * v13) * v10) * v17;
  a1[5] = (v12 * v18 * v10 + (v8 * v5 - v12 * v9) * v19 + v20 * v9 * v6 - (v8 * v18 * v6 + v20 * v5 * v10)) * v17;
  a1[6] = ((v12 * v13 - v16 * v5) * v19 + (v16 * v18 - v20 * v13) * v6 + (v20 * v5 - v12 * v18) * v14) * v17;
  a1[7] = (v8 * v18 * v14 + (v16 * v9 - v8 * v13) * v19 + v20 * v13 * v10 - (v16 * v18 * v10 + v20 * v9 * v14)) * v17;
  v22 = v8 * v11 - v12 * v7;
  v23 = v12 * v15;
  v24 = v16 * v11;
  v25 = v8 * v15;
  v26 = v16 * v7;
  v27 = (v12 * v15 * v10 + v22 * v14 + v16 * v7 * v6 - (v8 * v15 * v6 + v16 * v11 * v10)) * v17;
  v28 = v12 * v7 - v8 * v11;
  v29 = v12 * v21;
  v30 = v20 * v11;
  v31 = v8 * v21;
  v32 = v20 * v7;
  a1[8] = v27;
  a1[9] = (v28 * v19 + (v31 - v32) * v6 + (v30 - v29) * v10) * v17;
  v33 = v16 * v21;
  v34 = v20 * v15;
  a1[10] = (v29 * v14 + (v24 - v23) * v19 + v34 * v6 - (v33 * v6 + v30 * v14)) * v17;
  a1[11] = ((v25 - v26) * v19 + (v33 - v34) * v10 + (v32 - v31) * v14) * v17;
  a1[12] = (v28 * v13 + (v25 - v26) * v5 + (v24 - v23) * v9) * v17;
  a1[13] = (v29 * v9 + v22 * v18 + v32 * v5 - (v31 * v5 + v30 * v9)) * v17;
  v35 = ((v23 - v24) * v18 + (v33 - v34) * v5 + (v30 - v29) * v13) * v17;
  result = (v31 * v13 + (v26 - v25) * v18 + v34 * v9 - (v33 * v9 + v32 * v13)) * v17;
  a1[14] = v35;
  a1[15] = result;
  return result;
}

double gm::Matrix<double,4,4>::determinant<int,void>(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = a1[8];
  v1 = a1[9];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[6];
  v6 = a1[7];
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[14];
  v10 = a1[15];
  v11 = a1[10];
  v12 = a1[11];
  v13 = a1[2];
  v14 = a1[1];
  return ((v1 * v3 - v4 * v2) * v5 + (v7 * v2 - v8 * v1) * v9 + (v8 * v4 - v7 * v3) * v11) * a1[3]
       + (v14 * v8 * v9 + v13 * (v7 * v3) + *a1 * v4 * v5) * v12
       + (v13 * (v8 * v1) + v14 * v2 * v5 + *a1 * v7 * v11) * v10
       + (v13 * (v4 * v2) + v14 * v3 * v11 + *a1 * v1 * v9) * v6
       - (v10 * v13 * (v7 * v2)
        + v6 * v13 * (v1 * v3)
        + v12 * v9 * (*a1 * v7)
        + (v13 * (v8 * v4) + v14 * v3 * v5) * v12
        + (v14 * v2 * v9 + *a1 * v4 * v11) * v6
        + (v14 * v8 * v11 + *a1 * v1 * v5) * v10);
}

uint64_t md::MercatorCameraContext::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  gdc::CameraView::operator=(a1 + 8, a2 + 8);
  v4 = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = v4;
  *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a2 + 1408);
  *(_QWORD *)(a1 + 1416) = *(_QWORD *)(a2 + 1416);
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a2 + 1424);
  *(_QWORD *)(a1 + 1432) = *(_QWORD *)(a2 + 1432);
  *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a2 + 1440);
  *(_QWORD *)(a1 + 1448) = *(_QWORD *)(a2 + 1448);
  *(_QWORD *)(a1 + 1456) = *(_QWORD *)(a2 + 1456);
  *(_QWORD *)(a1 + 1464) = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a1 + 1480) = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a1 + 1504) = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a1 + 1528) = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 1536);
  *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a2 + 1544);
  *(_QWORD *)(a1 + 1552) = *(_QWORD *)(a2 + 1552);
  *(_QWORD *)(a1 + 1560) = *(_QWORD *)(a2 + 1560);
  if (a1 != a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a1 + 1568, *(_QWORD *)(a2 + 1568), *(char **)(a2 + 1576), (uint64_t)(*(_QWORD *)(a2 + 1576) - *(_QWORD *)(a2 + 1568)) >> 4);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a2 + 1608);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a2 + 1616);
  *(_QWORD *)(a1 + 1624) = *(_QWORD *)(a2 + 1624);
  *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a2 + 1632);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a2 + 1640);
  v5 = *(_OWORD *)(a2 + 1648);
  *(_BYTE *)(a1 + 1664) = *(_BYTE *)(a2 + 1664);
  *(_OWORD *)(a1 + 1648) = v5;
  return a1;
}

void md::NavigationLogic::_updatePolygonSelection(md::NavigationLogic *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD *);
  void (*v27)(uint64_t);
  void *v28[2];
  void *__p[2];
  uint64_t v30;
  int v31;

  v1 = *((_QWORD *)this + 27);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = v2;
  if (v2 != v3)
  {
    v4 = v2;
    while (*(_WORD *)v4 != 41)
    {
      v4 += 16;
      if (v4 == v3)
        goto LABEL_8;
    }
  }
  if (v4 == v3)
LABEL_8:
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 + 8);
  v6 = v2;
  if (v2 != v3)
  {
    v6 = v2;
    while (*(_WORD *)v6 != 58)
    {
      v6 += 16;
      if (v6 == v3)
        goto LABEL_16;
    }
  }
  if (v6 == v3)
LABEL_16:
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 + 8);
  v8 = v2;
  if (v2 != v3)
  {
    v8 = v2;
    while (*(_WORD *)v8 != 42)
    {
      v8 += 16;
      if (v8 == v3)
        goto LABEL_25;
    }
  }
  if (v8 == v3)
  {
LABEL_25:
    v9 = 0;
    if (v2 != v3)
    {
LABEL_26:
      while (*(_WORD *)v2 != 49)
      {
        v2 += 16;
        if (v2 == v3)
          goto LABEL_32;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v2 != v3)
      goto LABEL_26;
  }
  if (v2 == v3)
  {
LABEL_32:
    v10 = 0;
    if (v5)
      goto LABEL_36;
LABEL_33:
    if (!v7 && !v9 && !v10)
      return;
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(v2 + 8);
  if (!v5)
    goto LABEL_33;
LABEL_36:
  v23 = 0;
  v24 = &v23;
  v25 = 0x5812000000;
  v26 = __Block_byref_object_copy__28794;
  v27 = __Block_byref_object_dispose__28795;
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = 0;
  v31 = 1065353216;
  v11 = (void *)*((_QWORD *)this + 23);
  if (v11)
  {
    v12 = *((unsigned __int8 *)this + 225);
    if (v12 == 1 || v12 == 2 && !*((_BYTE *)this + 224))
    {
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = ___ZN2md15NavigationLogic23_updatePolygonSelectionEv_block_invoke;
      v22[3] = &unk_1E42F66C0;
      v22[4] = &v23;
      objc_msgSend(v11, "forEachRouteInfo:", v22);
    }
  }
  if (v5)
  {
    v13 = v24;
    v14 = v24 + 6;
    if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v5 + 824), *(_QWORD *)(v5 + 832), v24 + 6))
    {
      gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v5);
      gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v5 + 16));
      if ((_QWORD *)(v5 + 808) != v14)
      {
        *(_DWORD *)(v5 + 840) = *((_DWORD *)v13 + 20);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v5 + 808), (_QWORD *)v13[8]);
      }
    }
  }
  if (v7)
    md::SelectedDaVinciPolygonLayerDataSource::setSelectedPolygons(v7, (uint64_t)(v24 + 6));
  if (v9)
  {
    v15 = v24;
    v16 = v24 + 6;
    if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v9 + 824), *(_QWORD *)(v9 + 832), v24 + 6))
    {
      gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v9);
      gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v9 + 16));
      if ((_QWORD *)(v9 + 808) != v16)
      {
        *(_DWORD *)(v9 + 840) = *((_DWORD *)v15 + 20);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v9 + 808), (_QWORD *)v15[8]);
      }
    }
  }
  if (v10)
  {
    v17 = v24;
    v18 = v24 + 6;
    if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v10 + 848), *(_QWORD *)(v10 + 856), v24 + 6))
    {
      gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v10);
      gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v10 + 16));
      if ((_QWORD *)(v10 + 832) != v18)
      {
        *(_DWORD *)(v10 + 864) = *((_DWORD *)v17 + 20);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v10 + 832), (_QWORD *)v17[8]);
      }
    }
  }
  _Block_object_dispose(&v23, 8);
  v19 = __p[1];
  if (__p[1])
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = v28[1];
  v28[1] = 0;
  if (v21)
    operator delete(v21);
}

void sub_19F1EC1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v6 + 48);
  _Unwind_Resume(a1);
}

void md::SelectedDaVinciPolygonLayerDataSource::setSelectedPolygons(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v5[16];

  if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(a1 + 824), *(_QWORD *)(a1 + 832), (uint64_t *)a2))
  {
    gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)a1);
    if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
    v4 = (id)GEOGetVectorKitElevatedStrokesLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_DEBUG, "clearing SelectedDVPoly datastore", v5, 2u);
    }

    gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(a1 + 16));
    if (a1 + 808 != a2)
    {
      *(_DWORD *)(a1 + 840) = *(_DWORD *)(a2 + 32);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(a1 + 808), *(_QWORD **)(a2 + 16));
    }
  }
}

void md::World::addMapLayerDataSource(_QWORD *a1, int a2, uint64_t *a3, uint64_t *a4, gdc::LayerDataStore **a5)
{
  uint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  gdc::LayerDataStore *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  uint64_t v57;
  unsigned __int16 *v58;
  gdc::LayerDataStore *v59;
  uint64_t v60;

  v9 = *a3;
  *a3 = 0;
  v10 = (unsigned __int16 *)a1[4];
  v11 = a1[5];
  v12 = v10;
  if (v10 != (unsigned __int16 *)v11)
  {
    v12 = (unsigned __int16 *)a1[4];
    while (*v12 != a2)
    {
      v12 += 8;
      if (v12 == (unsigned __int16 *)v11)
        goto LABEL_9;
    }
  }
  if (v12 == (unsigned __int16 *)v11)
  {
LABEL_9:
    v13 = a1[6];
    if (v11 >= v13)
    {
      v15 = (uint64_t)(v11 - (_QWORD)v10) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        abort();
      v17 = v13 - (_QWORD)v10;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18 >> 60)
        goto LABEL_86;
      v19 = (char *)operator new(16 * v18);
      v20 = &v19[16 * v15];
      v21 = &v19[16 * v18];
      *(_WORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v9;
      v14 = v20 + 16;
      if (v10 == (unsigned __int16 *)v11)
      {
        a1[4] = v20;
        a1[5] = v14;
        a1[6] = v21;
      }
      else
      {
        do
        {
          v22 = *(_WORD *)(v11 - 16);
          v11 -= 16;
          *((_WORD *)v20 - 8) = v22;
          v20 -= 16;
          v23 = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          *((_QWORD *)v20 + 1) = v23;
        }
        while ((unsigned __int16 *)v11 != v10);
        v10 = (unsigned __int16 *)a1[4];
        v24 = (unsigned __int16 *)a1[5];
        a1[4] = v20;
        a1[5] = v14;
        a1[6] = v21;
        while (v24 != v10)
        {
          v25 = *((_QWORD *)v24 - 1);
          *((_QWORD *)v24 - 1) = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v24 -= 8;
        }
      }
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_WORD *)v11 = a2;
      *(_QWORD *)(v11 + 8) = v9;
      v14 = (char *)(v11 + 16);
    }
    a1[5] = v14;
  }
  else if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v26 = *a4;
  *a4 = 0;
  v27 = (unsigned __int16 *)a1[7];
  v28 = a1[8];
  v29 = v27;
  if (v27 != (unsigned __int16 *)v28)
  {
    v29 = (unsigned __int16 *)a1[7];
    while (*v29 != a2)
    {
      v29 += 8;
      if (v29 == (unsigned __int16 *)v28)
        goto LABEL_37;
    }
  }
  if (v29 == (unsigned __int16 *)v28)
  {
LABEL_37:
    v30 = a1[9];
    if (v28 >= v30)
    {
      v32 = (uint64_t)(v28 - (_QWORD)v27) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        abort();
      v34 = v30 - (_QWORD)v27;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35 >> 60)
        goto LABEL_86;
      v36 = (char *)operator new(16 * v35);
      v37 = &v36[16 * v32];
      v38 = &v36[16 * v35];
      *(_WORD *)v37 = a2;
      *((_QWORD *)v37 + 1) = v26;
      v31 = v37 + 16;
      if (v27 == (unsigned __int16 *)v28)
      {
        a1[7] = v37;
        a1[8] = v31;
        a1[9] = v38;
      }
      else
      {
        do
        {
          v39 = *(_WORD *)(v28 - 16);
          v28 -= 16;
          *((_WORD *)v37 - 8) = v39;
          v37 -= 16;
          v40 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *((_QWORD *)v37 + 1) = v40;
        }
        while ((unsigned __int16 *)v28 != v27);
        v27 = (unsigned __int16 *)a1[7];
        v41 = (unsigned __int16 *)a1[8];
        a1[7] = v37;
        a1[8] = v31;
        a1[9] = v38;
        while (v41 != v27)
        {
          v42 = *((_QWORD *)v41 - 1);
          *((_QWORD *)v41 - 1) = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v41 -= 8;
        }
      }
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_WORD *)v28 = a2;
      *(_QWORD *)(v28 + 8) = v26;
      v31 = (char *)(v28 + 16);
    }
    a1[8] = v31;
  }
  else if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v43 = *a5;
  *a5 = 0;
  v44 = (unsigned __int16 *)a1[10];
  v45 = a1[11];
  v46 = v44;
  if (v44 != (unsigned __int16 *)v45)
  {
    v46 = (unsigned __int16 *)a1[10];
    while (*v46 != a2)
    {
      v46 += 8;
      if (v46 == (unsigned __int16 *)v45)
        goto LABEL_65;
    }
  }
  if (v46 == (unsigned __int16 *)v45)
  {
LABEL_65:
    v47 = a1[12];
    if (v45 < v47)
    {
      *(_WORD *)v45 = a2;
      *(_QWORD *)(v45 + 8) = v43;
      v48 = (char *)(v45 + 16);
LABEL_84:
      a1[11] = v48;
      return;
    }
    v49 = (uint64_t)(v45 - (_QWORD)v44) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      abort();
    v51 = v47 - (_QWORD)v44;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (!(v52 >> 60))
    {
      v53 = (char *)operator new(16 * v52);
      v54 = &v53[16 * v49];
      v55 = &v53[16 * v52];
      *(_WORD *)v54 = a2;
      *((_QWORD *)v54 + 1) = v43;
      v48 = v54 + 16;
      if (v44 == (unsigned __int16 *)v45)
      {
        a1[10] = v54;
        a1[11] = v48;
        a1[12] = v55;
      }
      else
      {
        do
        {
          v56 = *(_WORD *)(v45 - 16);
          v45 -= 16;
          *((_WORD *)v54 - 8) = v56;
          v54 -= 16;
          v57 = *(_QWORD *)(v45 + 8);
          *(_QWORD *)(v45 + 8) = 0;
          *((_QWORD *)v54 + 1) = v57;
        }
        while ((unsigned __int16 *)v45 != v44);
        v44 = (unsigned __int16 *)a1[10];
        v58 = (unsigned __int16 *)a1[11];
        a1[10] = v54;
        a1[11] = v48;
        a1[12] = v55;
        while (v58 != v44)
        {
          v59 = (gdc::LayerDataStore *)*((_QWORD *)v58 - 1);
          *((_QWORD *)v58 - 1) = 0;
          if (v59)
          {
            gdc::LayerDataStore::~LayerDataStore(v59);
            MEMORY[0x1A1AF4E00](v60, 0x10A0C40001197D2);
          }
          v58 -= 8;
        }
      }
      if (v44)
        operator delete(v44);
      goto LABEL_84;
    }
LABEL_86:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v43)
  {
    gdc::LayerDataStore::~LayerDataStore(v43);
    JUMPOUT(0x1A1AF4E00);
  }
}

void sub_19F1EC718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<md::MapDataType,std::unique_ptr<gdc::LayerDataStore>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F1EC72C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_8(_QWORD *a1, void *a2)
{
  id v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  v11 = v3;
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    objc_msgSend(v3, "GPUStartTime");
    atomic_store(v4, *(unint64_t **)(*(_QWORD *)(a1[6] + 8) + 48));
    v3 = v11;
  }
  objc_msgSend(v3, "GPUEndTime");
  v6 = v5;
  v7 = COERCE_DOUBLE(atomic_load(*(unint64_t **)(*(_QWORD *)(a1[6] + 8) + 48)));
  objc_msgSend(v11, "error");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "domain");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 == (void *)*MEMORY[0x1E0CC6958])
      objc_msgSend(v9, "code");

  }
  (*(void (**)(double))(a1[4] + 16))(v6 - v7);

}

void sub_19F1EC86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_6(_QWORD *a1, int a2, void *a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_signpost_id_t v23;
  int v24;
  double v25;
  __int128 block;
  _QWORD *(*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v9 = a1[6];
  v8 = a1[7];
  atomic_store(2u, (unsigned int *)(v8 + 8));
  v10 = atomic_load((unsigned int *)(v8 + 8));
  if (v10 == 2 && (v11 = *(_QWORD *)(v8 + 56)) != 0)
  {
    *(_QWORD *)&block = *(_QWORD *)v8;
    v25 = a4;
    v24 = a2;
    (*(void (**)(uint64_t, __int128 *, double *, int *))(*(_QWORD *)v11 + 48))(v11, &block, &v25, &v24);
  }
  else
  {
    v12 = atomic_load((unsigned int *)(v8 + 8));
    if (v12 == 1)
    {
      v13 = *(_QWORD *)(v8 + 88);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    }
  }
  atomic_store(1u, *(unsigned __int8 **)(a1[7] + 16));
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 80);
  v15 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v16 = *(NSObject **)(v14 + 272);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 3221225472;
  v27 = ___ZN3ggl20MetalResourceManager22commandBufferCompletedEy_block_invoke;
  v28 = &__block_descriptor_48_e5_v8__0l;
  v29 = v14;
  v30 = v15;
  dispatch_async(v16, &block);
  v17 = *(uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
  v18 = *v17;
  v19 = v17[1];
  while (v18 != v19)
  {
    if (*(_QWORD *)(v18 + 24))
    {
      *(_QWORD *)&block = v7;
      v20 = *(_QWORD *)(v18 + 24);
      if (!v20)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v20 + 48))(v20, &block);

    }
    v18 += 32;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 64));
  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v21 = (id)GEOGetGeoGLPerformanceLog_log;
  v22 = v21;
  v23 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    LODWORD(block) = 134217984;
    *(double *)((char *)&block + 4) = a4 * 1000.0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v22, OS_SIGNPOST_INTERVAL_END, v23, "GPUFrame", "time=%f", (uint8_t *)&block, 0xCu);
  }

}

void sub_19F1ECB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::TextureManager::cubeTexture(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float a5)
{
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  char v38[8];
  _QWORD v39[2];
  char v40[4];
  unsigned int v41;
  _QWORD v42[2];
  uint8_t buf[4];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = vcvtps_s32_f32(a5);
  if (v9 >= 2)
  {
    do
    {
      v10 = (std::__shared_weak_count *)a4[1];
      v42[0] = *a4;
      v42[1] = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v40[0] = 1;
      v41 = v9;
      md::TextureManager::_cubeTexture(a1, a2, a3, v42, (uint64_t)v40);
      v40[0] = 0;
      if (!v10)
        goto LABEL_11;
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        v15 = (_QWORD *)*a1;
        if (!*a1)
          goto LABEL_20;
      }
      else
      {
LABEL_11:
        v15 = (_QWORD *)*a1;
        if (!*a1)
          goto LABEL_20;
      }
      if (v15[2])
      {
        v16 = (std::__shared_weak_count *)v15[1];
        if (!v16 || (v17 = std::__shared_weak_count::lock(v16)) == 0)
        {
          std::__throw_bad_weak_ptr[abi:nn180100]();
          goto LABEL_57;
        }
        v18 = v17;
        v19 = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v15[4])
        return;
LABEL_20:
      v21 = (std::__shared_weak_count *)a1[1];
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      --v9;
    }
    while (v9 > 1);
  }
  v24 = *a4;
  v25 = (std::__shared_weak_count *)a4[1];
  v39[0] = v24;
  v39[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v38[0] = 0;
  md::TextureManager::_cubeTexture(a1, a2, a3, v39, (uint64_t)v38);
  if (!v25)
    goto LABEL_34;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_34:
    v30 = (_QWORD *)*a1;
    if (*a1)
      goto LABEL_35;
LABEL_46:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v36 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a3 + 23) >= 0)
        v37 = a3;
      else
        v37 = *(_QWORD *)a3;
      *(_DWORD *)buf = 136315138;
      v44 = v37;
      _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_ERROR, "Missing cube texture: '%s'", buf, 0xCu);
    }

    return;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  v30 = (_QWORD *)*a1;
  if (!*a1)
    goto LABEL_46;
LABEL_35:
  if (!v30[2])
  {
LABEL_41:
    if (v30[4])
      return;
    goto LABEL_46;
  }
  v31 = (std::__shared_weak_count *)v30[1];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
        if (v30[4])
          return;
        goto LABEL_46;
      }
      goto LABEL_41;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_57:
  __break(1u);
}

void sub_19F1ECE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F1ECE88()
{
  JUMPOUT(0x19F1ECE90);
}

void md::SharedResource::addFrameRef(md::SharedResource *this, uint64_t a2)
{
  unint64_t v2;
  std::__shared_mutex_base *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  char *v9;
  uint64_t v10;
  std::__shared_mutex_base *v11;
  int8x8_t *v12;
  int8x8_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int8x8_t *v32;
  unint64_t *v33;
  unint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  size_t v45;
  size_t v46;
  size_t v47;
  _QWORD *i;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  size_t v56;
  int8x8_t v57;
  _QWORD *v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  char v67;
  std::__shared_mutex_base *v68;
  char v69;
  _QWORD *v70;
  int8x8_t *v71;
  char v72;

  v3 = (std::__shared_mutex_base *)*((_QWORD *)this + 2);
  if (!v3)
    return;
  v5 = *(_QWORD *)this;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4), (v65 = v7) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    goto LABEL_131;
  }
  v8 = v7;
  if (!a2)
  {
LABEL_114:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  md::SharedResourcesManager::getReferencesForFrameStamp((md::SharedResourcesManager *)&v66, v3, a2, 1);
  if (!v67)
    goto LABEL_111;
  v9 = &v3[1].__gate2_.__cv_.__opaque[16];
  v10 = v66;
  v11 = (std::__shared_mutex_base *)((char *)v3 + 208 * v66 + 304);
  std::__shared_mutex_base::lock_shared(v11);
  v12 = (int8x8_t *)&v9[208 * v10];
  v13 = v12 + 21;
  v14 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v14 >> 47) ^ v14);
  v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  v17 = v12[22];
  if (!*(_QWORD *)&v17)
    goto LABEL_26;
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = v16;
    if (v16 >= *(_QWORD *)&v17)
      v19 = v16 % *(_QWORD *)&v17;
  }
  else
  {
    v19 = v16 & (*(_QWORD *)&v17 - 1);
  }
  v20 = *(_QWORD **)(*(_QWORD *)v13 + 8 * v19);
  if (!v20 || (v21 = (_QWORD *)*v20) == 0)
  {
LABEL_26:
    std::__shared_mutex_base::unlock_shared(v11);
    std::__shared_mutex_base::lock(v11);
    v25 = (unint64_t)v13[1];
    if (v25)
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v2 = v16;
        if (v16 >= v25)
          v2 = v16 % v25;
      }
      else
      {
        v2 = v16 & (v25 - 1);
      }
      v27 = *(_QWORD **)(*(_QWORD *)v13 + 8 * v2);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v26.u32[0] < 2uLL)
          {
            while (1)
            {
              v30 = v28[1];
              if (v30 == v16)
              {
                if (v28[2] == v5)
                  goto LABEL_110;
              }
              else if ((v30 & (v25 - 1)) != v2)
              {
                goto LABEL_47;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_47;
            }
          }
          do
          {
            v29 = v28[1];
            if (v29 == v16)
            {
              if (v28[2] == v5)
                goto LABEL_110;
            }
            else
            {
              if (v29 >= v25)
                v29 %= v25;
              if (v29 != v2)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_47:
    v31 = operator new(0x20uLL);
    v32 = v13 + 2;
    v70 = v31;
    v71 = v13 + 2;
    *v31 = 0;
    v31[1] = v16;
    v33 = (unint64_t *)&v8->__shared_owners_;
    v31[2] = v5;
    v31[3] = v8;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v72 = 1;
    v35 = (float)(unint64_t)(*(_QWORD *)&v13[3] + 1);
    v36 = *(float *)v13[4].i32;
    if (v25 && (float)(v36 * (float)v25) >= v35)
    {
LABEL_99:
      v57 = *v13;
      v58 = *(_QWORD **)(*(_QWORD *)v13 + 8 * v2);
      if (v58)
      {
        *v31 = *v58;
      }
      else
      {
        *v31 = *v32;
        *v32 = (int8x8_t)v31;
        *(_QWORD *)(*(_QWORD *)&v57 + 8 * v2) = v32;
        if (!*v31)
        {
LABEL_108:
          ++*(_QWORD *)&v13[3];
          v60 = (unsigned int *)(v5 + 24);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
LABEL_110:
          std::__shared_mutex_base::unlock(v11);
LABEL_111:
          if (!v69)
            goto LABEL_113;
          goto LABEL_112;
        }
        v59 = *(_QWORD *)(*v31 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v59 >= v25)
            v59 %= v25;
        }
        else
        {
          v59 &= v25 - 1;
        }
        v58 = (_QWORD *)(*(_QWORD *)v13 + 8 * v59);
      }
      *v58 = v31;
      goto LABEL_108;
    }
    v37 = 1;
    if (v25 >= 3)
      v37 = (v25 & (v25 - 1)) != 0;
    v38 = v37 | (2 * v25);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v25 = (unint64_t)v13[1];
    if (prime <= v25)
    {
      if (prime >= v25)
        goto LABEL_86;
      v51 = vcvtps_u32_f32((float)(unint64_t)v13[3] / *(float *)v13[4].i32);
      if (v25 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        v51 = std::__next_prime(v51);
      }
      else
      {
        v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2)
          v51 = v53;
      }
      if (prime <= v51)
        prime = v51;
      if (prime >= v25)
      {
        v25 = (unint64_t)v13[1];
LABEL_86:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v16 >= v25)
            v2 = v16 % v25;
          else
            v2 = v16;
        }
        else
        {
          v2 = (v25 - 1) & v16;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        v64 = (void *)*v13;
        *v13 = 0;
        if (v64)
          operator delete(v64);
        v25 = 0;
        v13[1] = 0;
        goto LABEL_86;
      }
    }
    if (!(prime >> 61))
    {
      v41 = operator new(8 * prime);
      v42 = (void *)*v13;
      *v13 = (int8x8_t)v41;
      if (v42)
        operator delete(v42);
      v43 = 0;
      v13[1] = (int8x8_t)prime;
      do
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v43++) = 0;
      while (prime != v43);
      v44 = (_QWORD *)*v32;
      if (!*(_QWORD *)v32)
        goto LABEL_85;
      v45 = v44[1];
      v46 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v47 = v45 & v46;
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v47) = v32;
        for (i = (_QWORD *)*v44; *v44; i = (_QWORD *)*v44)
        {
          v49 = i[1] & v46;
          if (v49 == v47)
          {
            v44 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)v13 + 8 * v49))
          {
            *v44 = *i;
            v50 = 8 * v49;
            *i = **(_QWORD **)(*(_QWORD *)v13 + v50);
            **(_QWORD **)(*(_QWORD *)v13 + v50) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v13 + 8 * v49) = v44;
            v44 = i;
            v47 = v49;
          }
        }
LABEL_85:
        v25 = prime;
        goto LABEL_86;
      }
      if (v45 >= prime)
        v45 %= prime;
      *(_QWORD *)(*(_QWORD *)v13 + 8 * v45) = v32;
      v54 = (_QWORD *)*v44;
      if (!*v44)
        goto LABEL_85;
      while (1)
      {
        v56 = v54[1];
        if (v56 >= prime)
          v56 %= prime;
        if (v56 != v45)
        {
          if (!*(_QWORD *)(*(_QWORD *)v13 + 8 * v56))
          {
            *(_QWORD *)(*(_QWORD *)v13 + 8 * v56) = v44;
            goto LABEL_90;
          }
          *v44 = *v54;
          v55 = 8 * v56;
          *v54 = **(_QWORD **)(*(_QWORD *)v13 + v55);
          **(_QWORD **)(*(_QWORD *)v13 + v55) = v54;
          v54 = v44;
        }
        v56 = v45;
LABEL_90:
        v44 = v54;
        v54 = (_QWORD *)*v54;
        v45 = v56;
        if (!v54)
          goto LABEL_85;
      }
    }
LABEL_131:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v16 == v24)
      {
        if (v21[2] == v5)
          goto LABEL_119;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_26;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v16 == v23)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_26;
LABEL_16:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_26;
  }
  if (v21[2] != v5)
    goto LABEL_16;
LABEL_119:
  std::__shared_mutex_base::unlock_shared(v11);
  if (v69)
LABEL_112:
    std::__shared_mutex_base::unlock_shared(v68);
LABEL_113:
  v8 = v65;
  if (v65)
    goto LABEL_114;
}

void sub_19F1ED50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_mutex_base *a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_mutex_base *v19;

  std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a17);
  std::__shared_mutex_base::unlock(v19);
  if (a15)
    std::__shared_mutex_base::unlock_shared(a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::SharedResourcesManager::getReferencesForFrameStamp(md::SharedResourcesManager *this, std::__shared_mutex_base *a2, uint64_t a3, int a4)
{
  char *opaque;
  uint64_t sig;
  std::__shared_mutex_base *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::__shared_mutex_base::lock_shared(a2);
  if (*(_QWORD *)a2[1].__mut_.__m_.__opaque == a3)
  {
    opaque = a2[1].__mut_.__m_.__opaque;
LABEL_24:
    *(_QWORD *)this = (opaque - a2[1].__mut_.__m_.__opaque) >> 3;
LABEL_25:
    *((_BYTE *)this + 8) = 1;
    *((_QWORD *)this + 2) = a2;
    *((_BYTE *)this + 24) = 1;
    return;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[8];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[8] == a3)
    goto LABEL_24;
  opaque = &a2[1].__mut_.__m_.__opaque[16];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[16] == a3)
    goto LABEL_24;
  opaque = &a2[1].__mut_.__m_.__opaque[24];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[24] == a3)
    goto LABEL_24;
  opaque = &a2[1].__mut_.__m_.__opaque[32];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[32] == a3)
    goto LABEL_24;
  opaque = &a2[1].__mut_.__m_.__opaque[40];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[40] == a3)
    goto LABEL_24;
  opaque = &a2[1].__mut_.__m_.__opaque[48];
  if (*(_QWORD *)&a2[1].__mut_.__m_.__opaque[48] == a3)
    goto LABEL_24;
  opaque = (char *)&a2[1].__gate1_;
  if (a2[1].__gate1_.__cv_.__sig == a3)
    goto LABEL_24;
  opaque = a2[1].__gate1_.__cv_.__opaque;
  if (*(_QWORD *)a2[1].__gate1_.__cv_.__opaque == a3)
    goto LABEL_24;
  opaque = &a2[1].__gate1_.__cv_.__opaque[8];
  if (*(_QWORD *)&a2[1].__gate1_.__cv_.__opaque[8] == a3)
    goto LABEL_24;
  if (*(_QWORD *)&a2[1].__gate1_.__cv_.__opaque[16] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[16];
    goto LABEL_24;
  }
  if (*(_QWORD *)&a2[1].__gate1_.__cv_.__opaque[24] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[24];
    goto LABEL_24;
  }
  if (*(_QWORD *)&a2[1].__gate1_.__cv_.__opaque[32] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[32];
    goto LABEL_24;
  }
  if (a2[1].__gate2_.__cv_.__sig == a3)
  {
    opaque = (char *)&a2[1].__gate2_;
    goto LABEL_24;
  }
  if (*(_QWORD *)a2[1].__gate2_.__cv_.__opaque == a3)
  {
    opaque = a2[1].__gate2_.__cv_.__opaque;
    goto LABEL_24;
  }
  if (*(_QWORD *)&a2[1].__gate2_.__cv_.__opaque[8] == a3)
  {
    opaque = &a2[1].__gate2_.__cv_.__opaque[8];
    goto LABEL_24;
  }
  if (a4)
  {
    std::__shared_mutex_base::unlock_shared(a2);
    std::__shared_mutex_base::lock(a2);
    sig = a2[1].__mut_.__m_.__sig;
    a2[1].__mut_.__m_.__sig = ((_BYTE)sig + 1) & 0xF;
    *(_QWORD *)&a2[1].__mut_.__m_.__opaque[8 * sig] = a3;
    v10 = (std::__shared_mutex_base *)((char *)a2 + 208 * sig + 304);
    std::__shared_mutex_base::lock_shared(v10);
    v11 = *(_QWORD *)&v10[1].__mut_.__m_.__opaque[16];
    std::__shared_mutex_base::unlock_shared(v10);
    if (v11)
    {
      if (GEOGetVectorKitSharedResourcesLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitSharedResourcesLog(void)::onceToken, &__block_literal_global_30980);
      v12 = GEOGetVectorKitSharedResourcesLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitSharedResourcesLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        v13 = 136315650;
        v14 = "wasEmpty";
        v15 = 2080;
        v16 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/SharedResourcesManager.mm";
        v17 = 1024;
        v18 = 117;
        _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, "We may not be tracking resources correctly: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v13, 0x1Cu);
      }
    }
    md::SharedResourcesManager::FrameReferences::clear(v10);
    std::__shared_mutex_base::unlock(a2);
    std::__shared_mutex_base::lock_shared(a2);
    *(_QWORD *)this = sig;
    goto LABEL_25;
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  std::__shared_mutex_base::unlock_shared(a2);
}

void sub_19F1ED864(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;

  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

void md::TextureManager::_cubeTexture(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  geo::read_write_lock *v9;
  const char *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  geo::read_write_lock *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _OWORD *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  _OWORD *v31;
  geo::read_write_lock *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  const std::string::value_type *v55;
  std::string::size_type size;
  std::string *v57;
  std::string::size_type v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t **v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void **v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void **v75;
  std::string *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void **v80;
  std::string *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void **v85;
  std::string *v86;
  char *v87;
  _QWORD *v88;
  std::string *v89;
  float v90;
  float v91;
  _BOOL8 v92;
  unint64_t v93;
  unint64_t v94;
  size_t prime;
  int v96;
  void *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  size_t v101;
  size_t v102;
  size_t v103;
  _QWORD *i;
  size_t v105;
  uint64_t v106;
  unint64_t v107;
  uint8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  size_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  geo::read_write_lock *v130;
  const char *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  std::string::size_type v139;
  unsigned int v140;
  int v141;
  std::string *__s2;
  _OWORD *v143;
  void **v144;
  int v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  pthread_rwlock_t *v150;
  __int128 v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  char v154[4];
  int v155;
  char v156[4];
  int v157;
  _OWORD v158[6];
  std::string v159;
  unsigned __int8 v160;
  unsigned int v161;
  __int128 v162;
  char v163;
  __int128 *v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v159 = *(std::string *)a3;
  v160 = 0;
  if (*(_BYTE *)a5)
  {
    v161 = *(_DWORD *)(a5 + 4);
    v160 = 1;
  }
  v9 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 264));
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"read lock", v10);
  v11 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((_QWORD *)(a2 + 504), (uint64_t)&v159);
  if (!v11)
  {
    v143 = a1;
    v144 = (void **)(a2 + 504);
    v17 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 264));
    if ((_DWORD)v17)
      geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
    v19 = 0;
    memset(v158, 0, sizeof(v158));
    while (1)
    {
      v156[0] = 0;
      if (*(_BYTE *)a5)
      {
        v157 = *(_DWORD *)(a5 + 4);
        v156[0] = 1;
      }
      v154[0] = 1;
      v155 = v19;
      md::TextureManager::_loadData(a2, (uint64_t *)a3, (uint64_t)v156, (uint64_t)v154);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v154[0] = 0;
      v156[0] = 0;
      v21 = &v158[v19];
      v22 = v162;
      v162 = 0uLL;
      v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
      *v21 = v22;
      if (!v23)
        goto LABEL_28;
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        if (!*((_QWORD *)&v162 + 1))
          goto LABEL_34;
      }
      else
      {
LABEL_28:
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
        if (!*((_QWORD *)&v162 + 1))
          goto LABEL_34;
      }
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
LABEL_34:
      v29 = *(_QWORD *)v21 == 0;

      if (v29)
      {
        v152 = 0;
        v153 = 0;
LABEL_38:
        v31 = a1;
        v151 = 0uLL;
        v150 = (pthread_rwlock_t *)(a2 + 264);
        v32 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 264));
        if ((_DWORD)v32)
          geo::read_write_lock::logFailure(v32, (uint64_t)"write lock", v33);
        v34 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>(v144, (uint64_t)&v159);
        v35 = v34;
        if (v34)
        {
          v36 = v34[7];
          *a1 = v34[6];
          a1[1] = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          goto LABEL_241;
        }
        v39 = v152;
        if (!v152)
          goto LABEL_241;
        v40 = (std::__shared_weak_count *)operator new(0x48uLL);
        v41 = v40;
        v40->__shared_owners_ = 0;
        v42 = (unint64_t *)&v40->__shared_owners_;
        v40->__shared_weak_owners_ = 0;
        v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA20;
        v43 = v40 + 1;
        v40[1].__shared_weak_owners_ = *(_QWORD *)(a2 + 576);
        LODWORD(v40[2].__vftable) = 0;
        v44 = v153;
        v40[2].__shared_owners_ = v39;
        v40[2].__shared_weak_owners_ = (uint64_t)v44;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        do
          v47 = __ldxr(v42);
        while (__stxr(v47 + 1, v42));
        p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
        do
          v49 = __ldxr(p_shared_weak_owners);
        while (__stxr(v49 + 1, p_shared_weak_owners));
        v40[1].__vftable = (std::__shared_weak_count_vtbl *)&v40[1];
        v40[1].__shared_owners_ = (uint64_t)v40;
        do
          v50 = __ldaxr(v42);
        while (__stlxr(v50 - 1, v42));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v41);
        }
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
        *(_QWORD *)&v151 = v43;
        *((_QWORD *)&v151 + 1) = v41;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
        size = v159.__r_.__value_.__l.__size_;
        v55 = (const std::string::value_type *)v159.__r_.__value_.__r.__words[0];
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v159;
        else
          v57 = (std::string *)v159.__r_.__value_.__r.__words[0];
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
        else
          v58 = v159.__r_.__value_.__l.__size_;
        __s2 = v57;
        v59 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v57, v58);
        v60 = ((v161 - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
        v141 = v160;
        if (!v160)
          v60 = 0x9E3779B97F4A7C15;
        v61 = ((v59 >> 2) + (v59 << 6) + v60) ^ v59;
        v62 = *(_QWORD *)(a2 + 512);
        v146 = v54;
        if (v62)
        {
          v63 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
          v63.i16[0] = vaddlv_u8(v63);
          if (v63.u32[0] > 1uLL)
          {
            v26 = (std::__shared_weak_count *)(((v59 >> 2) + (v59 << 6) + v60) ^ v59);
            if (v61 >= v62)
              v26 = (std::__shared_weak_count *)(v61 % v62);
          }
          else
          {
            v26 = (std::__shared_weak_count *)((v62 - 1) & v61);
          }
          v64 = (uint64_t **)*((_QWORD *)*v144 + (_QWORD)v26);
          if (v64)
          {
            v65 = *v64;
            if (*v64)
            {
              v140 = v161;
              if (v63.u32[0] <= 1uLL)
              {
                v139 = size;
                v66 = v62 - 1;
                if (!v160)
                {
                  while (1)
                  {
                    v72 = v65[1];
                    if (v72 != v61)
                    {
                      if ((std::__shared_weak_count *)(v72 & v66) != v26)
                        goto LABEL_152;
                      goto LABEL_98;
                    }
                    v73 = *((unsigned __int8 *)v65 + 39);
                    if ((v73 & 0x80u) == 0)
                      v74 = *((unsigned __int8 *)v65 + 39);
                    else
                      v74 = v65[3];
                    if (v74 == v58)
                    {
                      v75 = (const void **)(v65 + 2);
                      if ((v73 & 0x80) != 0)
                      {
                        if (memcmp(*v75, __s2, v65[3]))
                          goto LABEL_98;
                      }
                      else if (*((_BYTE *)v65 + 39))
                      {
                        v76 = __s2;
                        while (*(unsigned __int8 *)v75 == v76->__r_.__value_.__s.__data_[0])
                        {
                          v75 = (const void **)((char *)v75 + 1);
                          v76 = (std::string *)((char *)v76 + 1);
                          if (!--v73)
                            goto LABEL_111;
                        }
                        goto LABEL_98;
                      }
LABEL_111:
                      if (!*((_BYTE *)v65 + 40))
                        goto LABEL_217;
                    }
LABEL_98:
                    v65 = (uint64_t *)*v65;
                    if (!v65)
                      goto LABEL_152;
                  }
                }
                while (2)
                {
                  v67 = v65[1];
                  if (v67 == v61)
                  {
                    v68 = *((unsigned __int8 *)v65 + 39);
                    if ((v68 & 0x80u) == 0)
                      v69 = *((unsigned __int8 *)v65 + 39);
                    else
                      v69 = v65[3];
                    if (v69 != v58)
                      goto LABEL_81;
                    v70 = (const void **)(v65 + 2);
                    if ((v68 & 0x80) != 0)
                    {
                      if (memcmp(*v70, __s2, v65[3]))
                        goto LABEL_81;
                    }
                    else if (*((_BYTE *)v65 + 39))
                    {
                      v71 = __s2;
                      while (*(unsigned __int8 *)v70 == v71->__r_.__value_.__s.__data_[0])
                      {
                        v70 = (const void **)((char *)v70 + 1);
                        v71 = (std::string *)((char *)v71 + 1);
                        if (!--v68)
                          goto LABEL_94;
                      }
                      goto LABEL_81;
                    }
LABEL_94:
                    if (*((_BYTE *)v65 + 40) && *((_DWORD *)v65 + 11) == v140)
                      goto LABEL_217;
                  }
                  else if ((std::__shared_weak_count *)(v67 & v66) != v26)
                  {
                    goto LABEL_152;
                  }
LABEL_81:
                  v65 = (uint64_t *)*v65;
                  if (!v65)
                  {
LABEL_152:
                    size = v139;
                    goto LABEL_153;
                  }
                  continue;
                }
              }
              if (!v160)
              {
                while (2)
                {
                  v82 = v65[1];
                  if (v82 != v61)
                  {
                    if (v82 >= v62)
                      v82 %= v62;
                    if ((std::__shared_weak_count *)v82 != v26)
                      goto LABEL_153;
                    goto LABEL_135;
                  }
                  v83 = *((unsigned __int8 *)v65 + 39);
                  if ((v83 & 0x80u) == 0)
                    v84 = *((unsigned __int8 *)v65 + 39);
                  else
                    v84 = v65[3];
                  if (v84 == v58)
                  {
                    v85 = (const void **)(v65 + 2);
                    if ((v83 & 0x80) == 0)
                    {
                      if (*((_BYTE *)v65 + 39))
                      {
                        v86 = __s2;
                        while (*(unsigned __int8 *)v85 == v86->__r_.__value_.__s.__data_[0])
                        {
                          v85 = (const void **)((char *)v85 + 1);
                          v86 = (std::string *)((char *)v86 + 1);
                          if (!--v83)
                            goto LABEL_150;
                        }
                        goto LABEL_135;
                      }
LABEL_150:
                      if (!*((_BYTE *)v65 + 40))
                        goto LABEL_217;
                      goto LABEL_135;
                    }
                    if (!memcmp(*v85, __s2, v65[3]))
                      goto LABEL_150;
                  }
LABEL_135:
                  v65 = (uint64_t *)*v65;
                  if (!v65)
                    goto LABEL_153;
                  continue;
                }
              }
              while (2)
              {
                v77 = v65[1];
                if (v77 != v61)
                {
                  if (v77 >= v62)
                    v77 %= v62;
                  if ((std::__shared_weak_count *)v77 != v26)
                    break;
                  goto LABEL_116;
                }
                v78 = *((unsigned __int8 *)v65 + 39);
                if ((v78 & 0x80u) == 0)
                  v79 = *((unsigned __int8 *)v65 + 39);
                else
                  v79 = v65[3];
                if (v79 == v58)
                {
                  v80 = (const void **)(v65 + 2);
                  if ((v78 & 0x80) == 0)
                  {
                    if (*((_BYTE *)v65 + 39))
                    {
                      v81 = __s2;
                      while (*(unsigned __int8 *)v80 == v81->__r_.__value_.__s.__data_[0])
                      {
                        v80 = (const void **)((char *)v80 + 1);
                        v81 = (std::string *)((char *)v81 + 1);
                        if (!--v78)
                          goto LABEL_131;
                      }
                      goto LABEL_116;
                    }
LABEL_131:
                    if (*((_BYTE *)v65 + 40) && *((_DWORD *)v65 + 11) == v140)
                      goto LABEL_217;
                    goto LABEL_116;
                  }
                  if (!memcmp(*v80, __s2, v65[3]))
                    goto LABEL_131;
                }
LABEL_116:
                v65 = (uint64_t *)*v65;
                if (!v65)
                  break;
                continue;
              }
            }
          }
        }
LABEL_153:
        v87 = (char *)operator new(0x40uLL);
        v88 = (_QWORD *)(a2 + 520);
        *(_QWORD *)&v162 = v87;
        *((_QWORD *)&v162 + 1) = a2 + 520;
        v163 = 0;
        v89 = (std::string *)(v87 + 16);
        *(_QWORD *)v87 = 0;
        *((_QWORD *)v87 + 1) = v61;
        if (v146 < 0)
        {
          std::string::__init_copy_ctor_external(v89, v55, size);
          v96 = v160;
          v87[40] = 0;
          if (v96)
          {
LABEL_155:
            *((_DWORD *)v87 + 11) = v161;
            v87[40] = 1;
          }
        }
        else
        {
          *(_OWORD *)&v89->__r_.__value_.__l.__data_ = *(_OWORD *)&v159.__r_.__value_.__l.__data_;
          *((_QWORD *)v87 + 4) = *((_QWORD *)&v159.__r_.__value_.__l + 2);
          v87[40] = 0;
          if (v141)
            goto LABEL_155;
        }
        *((_QWORD *)v87 + 6) = 0;
        *((_QWORD *)v87 + 7) = 0;
        v163 = 1;
        v90 = (float)(unint64_t)(*(_QWORD *)(a2 + 528) + 1);
        v91 = *(float *)(a2 + 536);
        if (!v62 || (float)(v91 * (float)v62) < v90)
        {
          v92 = 1;
          if (v62 >= 3)
            v92 = (v62 & (v62 - 1)) != 0;
          v93 = v92 | (2 * v62);
          v94 = vcvtps_u32_f32(v90 / v91);
          if (v93 <= v94)
            prime = v94;
          else
            prime = v93;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v62 = *(_QWORD *)(a2 + 512);
          if (prime > v62)
          {
LABEL_170:
            if (prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v97 = operator new(8 * prime);
            v98 = *v144;
            *v144 = v97;
            if (v98)
              operator delete(v98);
            v99 = 0;
            *(_QWORD *)(a2 + 512) = prime;
            do
              *((_QWORD *)*v144 + v99++) = 0;
            while (prime != v99);
            v100 = (_QWORD *)*v88;
            if (!*v88)
              goto LABEL_194;
            v101 = v100[1];
            v102 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v103 = v101 & v102;
              *((_QWORD *)*v144 + v103) = v88;
              for (i = (_QWORD *)*v100; *v100; i = (_QWORD *)*v100)
              {
                v105 = i[1] & v102;
                if (v105 == v103)
                {
                  v100 = i;
                }
                else if (*((_QWORD *)*v144 + v105))
                {
                  *v100 = *i;
                  v106 = 8 * v105;
                  *i = **(_QWORD **)((char *)*v144 + v106);
                  **(_QWORD **)((char *)*v144 + v106) = i;
                }
                else
                {
                  *((_QWORD *)*v144 + v105) = v100;
                  v100 = i;
                  v103 = v105;
                }
              }
              goto LABEL_194;
            }
            if (v101 >= prime)
              v101 %= prime;
            *((_QWORD *)*v144 + v101) = v88;
            v110 = (_QWORD *)*v100;
            if (!*v100)
            {
LABEL_194:
              v62 = prime;
              goto LABEL_195;
            }
            while (2)
            {
              v112 = v110[1];
              if (v112 >= prime)
                v112 %= prime;
              if (v112 != v101)
              {
                if (!*((_QWORD *)*v144 + v112))
                {
                  *((_QWORD *)*v144 + v112) = v100;
LABEL_199:
                  v100 = v110;
                  v110 = (_QWORD *)*v110;
                  v101 = v112;
                  if (!v110)
                    goto LABEL_194;
                  continue;
                }
                *v100 = *v110;
                v111 = 8 * v112;
                *v110 = **(_QWORD **)((char *)*v144 + v111);
                **(_QWORD **)((char *)*v144 + v111) = v110;
                v110 = v100;
              }
              break;
            }
            v112 = v101;
            goto LABEL_199;
          }
          if (prime < v62)
          {
            v107 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 528) / *(float *)(a2 + 536));
            if (v62 < 3
              || (v108 = (uint8x8_t)vcnt_s8((int8x8_t)v62), v108.i16[0] = vaddlv_u8(v108), v108.u32[0] > 1uLL))
            {
              v107 = std::__next_prime(v107);
            }
            else
            {
              v109 = 1 << -(char)__clz(v107 - 1);
              if (v107 >= 2)
                v107 = v109;
            }
            if (prime <= v107)
              prime = v107;
            if (prime >= v62)
            {
              v62 = *(_QWORD *)(a2 + 512);
            }
            else
            {
              if (prime)
                goto LABEL_170;
              v138 = *v144;
              *v144 = 0;
              if (v138)
                operator delete(v138);
              v62 = 0;
              *(_QWORD *)(a2 + 512) = 0;
            }
          }
LABEL_195:
          if ((v62 & (v62 - 1)) != 0)
          {
            if (v61 >= v62)
              v26 = (std::__shared_weak_count *)(v61 % v62);
            else
              v26 = (std::__shared_weak_count *)v61;
          }
          else
          {
            v26 = (std::__shared_weak_count *)((v62 - 1) & v61);
          }
        }
        v113 = (_QWORD *)*((_QWORD *)*v144 + (_QWORD)v26);
        if (v113)
        {
          *(_QWORD *)v162 = *v113;
          *v113 = v162;
        }
        else
        {
          *(_QWORD *)v162 = *v88;
          *v88 = v162;
          *((_QWORD *)*v144 + (_QWORD)v26) = v88;
          if (*(_QWORD *)v162)
          {
            v114 = *(_QWORD *)(*(_QWORD *)v162 + 8);
            if ((v62 & (v62 - 1)) != 0)
            {
              if (v114 >= v62)
                v114 %= v62;
            }
            else
            {
              v114 &= v62 - 1;
            }
            *((_QWORD *)*v144 + v114) = v162;
          }
        }
        v65 = (uint64_t *)v162;
        ++*(_QWORD *)(a2 + 528);
LABEL_217:
        v115 = *((_QWORD *)&v151 + 1);
        v31 = v143;
        if (*((_QWORD *)&v151 + 1))
        {
          v116 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        v118 = (std::__shared_weak_count *)v65[7];
        v65[6] = v151;
        v65[7] = v115;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        if (v152)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 568) + 24))(&v149);
          *(_QWORD *)&v162 = &off_1E42CC1D0;
          *((_QWORD *)&v162 + 1) = &v152;
          v164 = &v162;
          v147 = 0;
          v148 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v149 + 16))(v149, &v162, &v147);
          v121 = v148;
          if (v148)
          {
            v122 = (unint64_t *)&v148->__shared_owners_;
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          v124 = v164;
          if (v164 == &v162)
          {
            v125 = 4;
            v124 = &v162;
LABEL_235:
            (*(void (**)(void))(*(_QWORD *)v124 + 8 * v125))();
          }
          else if (v164)
          {
            v125 = 5;
            goto LABEL_235;
          }
          if (v149)
          {
            v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149);
            v127 = v149;
            v149 = 0;
            *(_QWORD *)&v162 = v127;
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v126 + 48))(v126, &v162);
            v128 = v162;
            *(_QWORD *)&v162 = 0;
            if (v128)
              (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
            v129 = v149;
            v149 = 0;
            if (v129)
              (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
          }
        }
LABEL_241:
        v130 = (geo::read_write_lock *)pthread_rwlock_unlock(v150);
        if ((_DWORD)v130)
          geo::read_write_lock::logFailure(v130, (uint64_t)"unlock", v131);
        if (v35)
        {
          v132 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
          {
            v133 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
        }
        else
        {
          *v31 = v151;
        }
        v135 = v153;
        if (v153)
        {
          v136 = (unint64_t *)&v153->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((md::realistic::RoadRenderLayer::RoadModelPipelineStates *)v158);
        if (v160)
          goto LABEL_15;
        goto LABEL_16;
      }
      if (++v19 == 6)
      {
        v30 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v30->__shared_owners_ = 0;
        v30->__shared_weak_owners_ = 0;
        v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEAB0;
        v152 = ggl::TextureCube::TextureCube((uint64_t)&v30[1], v158, a4);
        v153 = v30;
        goto LABEL_38;
      }
    }
  }
  v12 = v11[7];
  *a1 = v11[6];
  a1[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 264));
  if ((_DWORD)v15)
    geo::read_write_lock::logFailure(v15, (uint64_t)"unlock", v16);
  if (v160)
LABEL_15:
    v160 = 0;
LABEL_16:
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
}

void sub_19F1EE5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  pthread_rwlock_t *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, pthread_rwlock_t *);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v10 - 128));
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  md::realistic::RoadRenderLayer::RoadModelPipelineStates::~RoadModelPipelineStates((md::realistic::RoadRenderLayer::RoadModelPipelineStates *)va3);
  if (*(_BYTE *)(v10 - 136))
    *(_BYTE *)(v10 - 136) = 0;
  if (*(char *)(v10 - 137) < 0)
  {
    operator delete(*(void **)(v10 - 160));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  uint64_t *v22;
  uint64_t *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  uint64_t *v38;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (uint64_t *)a2;
  else
    v5 = *(uint64_t **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  v8 = *(unsigned __int8 *)(a2 + 24);
  v9 = ((*(unsigned int *)(a2 + 28) - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
  if (!*(_BYTE *)(a2 + 24))
    v9 = 0x9E3779B97F4A7C15;
  v10 = (int8x8_t)a1[1];
  if (v10)
  {
    v11 = ((v7 >> 2) + (v7 << 6) + v9) ^ v7;
    v12 = (uint8x8_t)vcnt_s8(v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = ((v7 >> 2) + (v7 << 6) + v9) ^ v7;
      if (v11 >= *(_QWORD *)&v10)
        v13 = v11 % *(_QWORD *)&v10;
    }
    else
    {
      v13 = (*(_QWORD *)&v10 - 1) & v11;
    }
    v14 = *(uint64_t ***)(*a1 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = *(_DWORD *)(a2 + 28);
        if (v12.u32[0] <= 1uLL)
        {
          v17 = *(_QWORD *)&v10 - 1;
          if (!v8)
          {
            while (1)
            {
              v24 = v15[1];
              if (v24 != v11)
              {
                if ((v24 & v17) != v13)
                  return 0;
                goto LABEL_37;
              }
              v25 = *((unsigned __int8 *)v15 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v15 + 39);
              else
                v26 = v15[3];
              if (v26 == v6)
              {
                v27 = (const void **)(v15 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (memcmp(*v27, v5, v15[3]))
                    goto LABEL_37;
                }
                else if (*((_BYTE *)v15 + 39))
                {
                  v28 = v5;
                  while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v28)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    v28 = (uint64_t *)((char *)v28 + 1);
                    if (!--v25)
                      goto LABEL_50;
                  }
                  goto LABEL_37;
                }
LABEL_50:
                if (!*((_BYTE *)v15 + 40))
                  return v15;
              }
LABEL_37:
              result = 0;
              v15 = (uint64_t *)*v15;
              if (!v15)
                return result;
            }
          }
          while (1)
          {
            v18 = v15[1];
            if (v18 != v11)
            {
              if ((v18 & v17) != v13)
                return 0;
              goto LABEL_20;
            }
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v6)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (memcmp(*v21, v5, v15[3]))
                  goto LABEL_20;
              }
              else if (*((_BYTE *)v15 + 39))
              {
                v22 = v5;
                while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v22)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  v22 = (uint64_t *)((char *)v22 + 1);
                  if (!--v19)
                    goto LABEL_33;
                }
                goto LABEL_20;
              }
LABEL_33:
              if (*((_BYTE *)v15 + 40) && *((_DWORD *)v15 + 11) == v16)
                return v15;
            }
LABEL_20:
            v15 = (uint64_t *)*v15;
            if (!v15)
              return 0;
          }
        }
        if (!v8)
        {
          while (1)
          {
            v34 = v15[1];
            if (v34 == v11)
            {
              v35 = *((unsigned __int8 *)v15 + 39);
              if ((v35 & 0x80u) == 0)
                v36 = *((unsigned __int8 *)v15 + 39);
              else
                v36 = v15[3];
              if (v36 != v6)
                goto LABEL_74;
              v37 = (const void **)(v15 + 2);
              if ((v35 & 0x80) != 0)
              {
                if (memcmp(*v37, v5, v15[3]))
                  goto LABEL_74;
              }
              else if (*((_BYTE *)v15 + 39))
              {
                v38 = v5;
                while (*(unsigned __int8 *)v37 == *(unsigned __int8 *)v38)
                {
                  v37 = (const void **)((char *)v37 + 1);
                  v38 = (uint64_t *)((char *)v38 + 1);
                  if (!--v35)
                    goto LABEL_89;
                }
                goto LABEL_74;
              }
LABEL_89:
              if (!*((_BYTE *)v15 + 40))
                return v15;
            }
            else
            {
              if (v34 >= *(_QWORD *)&v10)
                v34 %= *(_QWORD *)&v10;
              if (v34 != v13)
                return 0;
            }
LABEL_74:
            result = 0;
            v15 = (uint64_t *)*v15;
            if (!v15)
              return result;
          }
        }
        do
        {
          v29 = v15[1];
          if (v29 == v11)
          {
            v30 = *((unsigned __int8 *)v15 + 39);
            if ((v30 & 0x80u) == 0)
              v31 = *((unsigned __int8 *)v15 + 39);
            else
              v31 = v15[3];
            if (v31 != v6)
              goto LABEL_55;
            v32 = (const void **)(v15 + 2);
            if ((v30 & 0x80) != 0)
            {
              if (memcmp(*v32, v5, v15[3]))
                goto LABEL_55;
            }
            else if (*((_BYTE *)v15 + 39))
            {
              v33 = v5;
              while (*(unsigned __int8 *)v32 == *(unsigned __int8 *)v33)
              {
                v32 = (const void **)((char *)v32 + 1);
                v33 = (uint64_t *)((char *)v33 + 1);
                if (!--v30)
                  goto LABEL_70;
              }
              goto LABEL_55;
            }
LABEL_70:
            if (*((_BYTE *)v15 + 40) && *((_DWORD *)v15 + 11) == v16)
              return v15;
          }
          else
          {
            if (v29 >= *(_QWORD *)&v10)
              v29 %= *(_QWORD *)&v10;
            if (v29 != v13)
              return 0;
          }
LABEL_55:
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  return 0;
}

void md::SharedResourcesManager::FrameReferences::clear(std::__shared_mutex_base *this)
{
  _QWORD *i;
  _QWORD *v3;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  std::__shared_mutex_base::lock(this);
  for (i = *(_QWORD **)&this[1].__mut_.__m_.__opaque[8]; i; i = (_QWORD *)*i)
  {
    v6 = i[2];
    v7 = (std::__shared_weak_count *)i[3];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = (unsigned int *)(v6 + 24);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v13 = (unsigned int *)(v6 + 24);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
  }
  if (*(_QWORD *)&this[1].__mut_.__m_.__opaque[16])
  {
    v3 = *(_QWORD **)&this[1].__mut_.__m_.__opaque[8];
    while (v3)
    {
      v15 = v3;
      v3 = (_QWORD *)*v3;
      v16 = (std::__shared_weak_count *)v15[3];
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      operator delete(v15);
    }
    *(_QWORD *)&this[1].__mut_.__m_.__opaque[8] = 0;
    v4 = *(_QWORD *)this[1].__mut_.__m_.__opaque;
    if (v4)
    {
      for (j = 0; j != v4; ++j)
        *(_QWORD *)(this[1].__mut_.__m_.__sig + 8 * j) = 0;
    }
    *(_QWORD *)&this[1].__mut_.__m_.__opaque[16] = 0;
  }
  std::__shared_mutex_base::unlock(this);
}

void sub_19F1EEB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_mutex_base *a11, char a12)
{
  if (a12)
    std::__shared_mutex_base::unlock_shared(a11);
  _Unwind_Resume(exception_object);
}

void md::MapEngine::renderScene(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _BYTE *v41;
  std::unique_lock<std::mutex>::mutex_type *m;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  std::unique_lock<std::mutex> __lk;
  _QWORD v51[3];
  _QWORD *v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint8_t buf[24];
  uint8_t *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (!md::MapEngine::canRenderAsync((md::MapEngine *)a1))
  {
    md::MapEngine::renderSceneSync((md::MapEngine *)a1, a4);
    v9 = a2[3];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    v10 = a3[3];
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
      return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_89;
  }
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v49 = v48;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v48);
    }
    else
    {
      v49 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v49 = 0;
  }
  v11 = a3[3];
  if (!v11)
    goto LABEL_14;
  if ((_QWORD *)v11 != a3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_14:
    v47 = (_QWORD *)v11;
    goto LABEL_16;
  }
  v47 = v46;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v46);
LABEL_16:
  objc_msgSend(*(id *)(a1 + 840), "size");
  v13 = v12;
  v15 = v14;
  v16 = *(_BYTE *)(a1 + 1177);
  if (v16)
    v16 = *(_BYTE *)(a1 + 1178) == 0;
  if ((v16 & 1) != 0
    || *(_BYTE *)(a1 + 1176)
    || (objc_msgSend(*(id *)(a1 + 840), "hasRenderTarget") & 1) == 0 && *(_QWORD *)(a1 + 1200) != 1
    || v15 * v13 <= 0.0
    || (v17 = atomic_load((unsigned __int8 *)(a1 + 1181)), (v17 & 1) != 0))
  {
    if (v47)
    {
      (*(void (**)(_QWORD *))(*v47 + 48))(v47);
      goto LABEL_39;
    }
LABEL_89:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  md::MapEngine::runUpdatePhase((md::MapEngine *)a1, a4, 0);
  v18 = *(_QWORD *)(a1 + 4536);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v18 + 176);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v18 + 176));
  while (*(_BYTE *)(v18 + 292))
    std::condition_variable::wait((std::condition_variable *)(v18 + 240), &__lk);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v19 = (id)GEOGetVectorKitPerformanceLog_log;
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 296);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v21, "HomeQueueReservation", (const char *)&unk_1A0189141, buf, 2u);
  }

  v22 = (md::HomeQueueScheduler::waitForReservation(void)::reservationKey + 1);
  md::HomeQueueScheduler::waitForReservation(void)::reservationKey = v22;
  *(_DWORD *)(v18 + 288) = v22;
  *(_BYTE *)(v18 + 292) = 1;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v23 = (uint64_t)v49;
  if (!v49)
    goto LABEL_36;
  if (v49 != v48)
  {
    v23 = (*(uint64_t (**)(void))(*v49 + 16))();
LABEL_36:
    v56 = (uint8_t *)v23;
    goto LABEL_51;
  }
  v56 = buf;
  (*(void (**)(_QWORD *, uint8_t *))(v48[0] + 24))(v48, buf);
LABEL_51:
  v28 = md::MapEngine::buildFrameRequest(a1, v22 | 0x100000000, (uint64_t)buf);
  v29 = v56;
  if (v56 == buf)
  {
    v30 = 4;
    v29 = buf;
  }
  else
  {
    if (!v56)
      goto LABEL_56;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_56:
  v31 = *(_QWORD *)(a1 + 4512);
  v32 = *(_QWORD **)v31;
  v33 = *(_QWORD **)(v31 + 8);
  if (v32 != v33)
  {
    while (*v32 != 0x8C3843AC816FCBCLL)
    {
      v32 += 5;
      if (v32 == v33)
        goto LABEL_67;
    }
  }
  if (v32 == v33)
  {
LABEL_67:
    v34 = 0;
  }
  else
  {
    v34 = v32[3];
    v35 = (std::__shared_weak_count *)v32[4];
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  *(_DWORD *)&__lk.__owns_ = v22;
  v39 = v51;
  if (v47)
  {
    if (v47 == v46)
    {
      v52 = v51;
      (*(void (**)(_QWORD *, _QWORD *))(v46[0] + 24))(v46, v51);
    }
    else
    {
      v52 = v47;
      v47 = 0;
    }
  }
  else
  {
    v52 = 0;
  }
  v54 = 0;
  v40 = operator new(0x38uLL);
  v41 = v40;
  m = __lk.__m_;
  *v40 = &off_1E427CB28;
  v40[1] = m;
  *((_DWORD *)v40 + 4) = *(_DWORD *)&__lk.__owns_;
  if (v52)
  {
    if (v52 == v51)
    {
      v40[6] = v40 + 3;
      (*(void (**)(_QWORD *))(v51[0] + 24))(v51);
    }
    else
    {
      v40[6] = v52;
      v52 = 0;
    }
  }
  else
  {
    v40[6] = 0;
  }
  v54 = v41;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v34 + 24))(v34, v28, v53);
  v43 = v54;
  if (v54 == v53)
  {
    v44 = 4;
    v43 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_83;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_83:
  if (v52 == v51)
  {
    v45 = 4;
  }
  else
  {
    if (!v52)
      goto LABEL_39;
    v45 = 5;
    v39 = v52;
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v45))(v39);
LABEL_39:
  v24 = v47;
  if (v47 == v46)
  {
    v25 = 4;
    v24 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_44;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_44:
  v26 = v49;
  if (v49 == v48)
  {
    v27 = 4;
    v26 = v48;
  }
  else
  {
    if (!v49)
      return;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
}

void sub_19F1EF14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  _QWORD *v26;
  char *v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v29 = a26;
  if (a26 == v27)
  {
    v30 = 4;
    v29 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  if (a22 == v26)
  {
    v31 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v31 = 5;
    v26 = a22;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v31))(v26);
LABEL_11:
  v32 = a12;
  if (a12 == &a9)
  {
    v33 = 4;
    v32 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_16;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_16:
  v34 = a16;
  if (a16 == &a13)
  {
    v35 = 4;
    v34 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_21;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_21:
  _Unwind_Resume(exception_object);
}

void gdc::Statistics::addSampleValue(uint64_t a1, const void *a2, unint64_t a3, double a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  std::mutex *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  double **v14;
  double *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  uint8x8_t v25;
  uint64_t ***v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t *v29;
  int64x2_t *v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t **v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  int64x2_t v62;

  v5 = atomic_load((unsigned __int8 *)(a1 + 152));
  if ((v5 & 1) == 0)
    return;
  v9 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v10 = HIDWORD(a3);
  v11 = *(_QWORD *)(a1 + 80);
  if (!v11)
  {
    v62 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
LABEL_49:
    v30 = (int64x2_t *)operator new(0x48uLL);
    v30->i64[0] = 0;
    v30->i64[1] = v10;
    v30[1].i64[0] = (uint64_t)a2;
    v30[1].i64[1] = a3;
    v30[2] = v62;
    v30[3] = v62;
    v30[4].i64[0] = 1;
    v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 96) + 1);
    v32 = *(float *)(a1 + 104);
    if (v11 && (float)(v32 * (float)v11) >= v31)
    {
LABEL_99:
      v56 = *(_QWORD *)(a1 + 72);
      v57 = *(int64x2_t ***)(v56 + 8 * v4);
      if (v57)
      {
        v30->i64[0] = (uint64_t)*v57;
      }
      else
      {
        v58 = *(_QWORD *)(a1 + 88);
        v30->i64[0] = v58;
        *(_QWORD *)(a1 + 88) = v30;
        *(_QWORD *)(v56 + 8 * v4) = a1 + 88;
        if (!v58)
        {
LABEL_108:
          ++*(_QWORD *)(a1 + 96);
          goto LABEL_109;
        }
        v59 = *(_QWORD *)(v58 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v59 >= v11)
            v59 %= v11;
        }
        else
        {
          v59 &= v11 - 1;
        }
        v57 = (int64x2_t **)(*(_QWORD *)(a1 + 72) + 8 * v59);
      }
      *v57 = v30;
      goto LABEL_108;
    }
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 80);
    }
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_86;
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v11 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (prime <= v49)
        prime = v49;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 80);
LABEL_86:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v11 <= v10)
            v4 = v10 % v11;
          else
            v4 = v10;
        }
        else
        {
          v4 = ((_DWORD)v11 - 1) & v10;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        v60 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = 0;
        if (v60)
          operator delete(v60);
        v11 = 0;
        *(_QWORD *)(a1 + 80) = 0;
        goto LABEL_86;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v37 = operator new(8 * prime);
    v38 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v37;
    if (v38)
      operator delete(v38);
    v39 = 0;
    *(_QWORD *)(a1 + 80) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v39++) = 0;
    while (prime != v39);
    v41 = a1 + 88;
    v40 = *(_QWORD **)(a1 + 88);
    if (!v40)
    {
LABEL_85:
      v11 = prime;
      goto LABEL_86;
    }
    v42 = v40[1];
    v43 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v44 = v42 & v43;
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v44) = v41;
      for (i = (_QWORD *)*v40; *v40; i = (_QWORD *)*v40)
      {
        v46 = i[1] & v43;
        if (v46 == v44)
        {
          v40 = i;
        }
        else
        {
          v47 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v47 + 8 * v46))
          {
            *v40 = *i;
            v48 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 72) + v48);
            **(_QWORD **)(*(_QWORD *)(a1 + 72) + v48) = i;
          }
          else
          {
            *(_QWORD *)(v47 + 8 * v46) = v40;
            v40 = i;
            v44 = v46;
          }
        }
      }
      goto LABEL_85;
    }
    if (v42 >= prime)
      v42 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v42) = v41;
    v52 = (_QWORD *)*v40;
    if (!*v40)
      goto LABEL_85;
    while (1)
    {
      v54 = v52[1];
      if (v54 >= prime)
        v54 %= prime;
      if (v54 != v42)
      {
        v55 = *(_QWORD *)(a1 + 72);
        if (!*(_QWORD *)(v55 + 8 * v54))
        {
          *(_QWORD *)(v55 + 8 * v54) = v40;
          goto LABEL_90;
        }
        *v40 = *v52;
        v53 = 8 * v54;
        *v52 = **(_QWORD **)(*(_QWORD *)(a1 + 72) + v53);
        **(_QWORD **)(*(_QWORD *)(a1 + 72) + v53) = v52;
        v52 = v40;
      }
      v54 = v42;
LABEL_90:
      v40 = v52;
      v52 = (_QWORD *)*v52;
      v42 = v54;
      if (!v52)
        goto LABEL_85;
    }
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = HIDWORD(a3);
    if (v11 <= v10)
      v13 = v10 % v11;
  }
  else
  {
    v13 = (v11 - 1) & HIDWORD(a3);
  }
  v14 = *(double ***)(*(_QWORD *)(a1 + 72) + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_27:
    v62 = vdupq_lane_s64(*(uint64_t *)&a4, 0);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v4 = HIDWORD(a3);
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & HIDWORD(a3);
    }
    v26 = *(uint64_t ****)(*(_QWORD *)(a1 + 72) + 8 * v4);
    if (v26)
    {
      v27 = *v26;
      if (*v26)
      {
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v29 = v27[1];
            if (v29 == (uint64_t *)v10)
            {
              if (v27[3] == (uint64_t *)a3 && !memcmp(v27[2], a2, a3))
                goto LABEL_109;
            }
            else if (((unint64_t)v29 & (v11 - 1)) != v4)
            {
              goto LABEL_49;
            }
            v27 = (uint64_t **)*v27;
            if (!v27)
              goto LABEL_49;
          }
        }
        while (1)
        {
          v28 = (unint64_t)v27[1];
          if (v28 == v10)
          {
            if (v27[3] == (uint64_t *)a3 && !memcmp(v27[2], a2, a3))
              goto LABEL_109;
          }
          else
          {
            if (v28 >= v11)
              v28 %= v11;
            if (v28 != v4)
              goto LABEL_49;
          }
          v27 = (uint64_t **)*v27;
          if (!v27)
            goto LABEL_49;
        }
      }
    }
    goto LABEL_49;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = *((_QWORD *)v15 + 1);
      if (v17 == v10)
      {
        if (*((_QWORD *)v15 + 3) == a3 && !memcmp(*((const void **)v15 + 2), a2, a3))
          goto LABEL_25;
      }
      else if ((v17 & (v11 - 1)) != v13)
      {
        goto LABEL_27;
      }
      v15 = *(double **)v15;
      if (!v15)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (v16 == v10)
      break;
    if (v16 >= v11)
      v16 %= v11;
    if (v16 != v13)
      goto LABEL_27;
LABEL_13:
    v15 = *(double **)v15;
    if (!v15)
      goto LABEL_27;
  }
  if (*((_QWORD *)v15 + 3) != a3 || memcmp(*((const void **)v15 + 2), a2, a3))
    goto LABEL_13;
LABEL_25:
  v18 = *((_QWORD *)v15 + 8);
  if (v18)
  {
    v19 = fmax(v15[5], a4);
    v15[4] = fmin(v15[4], a4);
    v15[5] = v19;
    v20 = (double)v18;
    v21 = v15[6] + a4 / (double)v18;
    v22 = v18 + 1;
    v23 = v21 * v20 / (double)v22;
    v24 = v15[7] + a4;
    v15[6] = v23;
    v15[7] = v24;
    *((_QWORD *)v15 + 8) = v22;
  }
  else
  {
    v15[4] = a4;
    v15[5] = a4;
    v15[6] = a4;
    v15[7] = a4;
    *((_QWORD *)v15 + 8) = 1;
  }
LABEL_109:
  std::mutex::unlock(v9);
}

void gdc::Statistics::addHistogramValue(uint64_t a1, const void *a2, unint64_t a3, double a4, double a5)
{
  unsigned __int8 v5;
  std::mutex *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  std::chrono::steady_clock::time_point *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  size_t v31;
  const void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t prime;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  _QWORD *i;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  void *v69;
  std::mutex *v70;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v5 = atomic_load((unsigned __int8 *)(a1 + 153));
  if ((v5 & 1) == 0)
    return;
  v9 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v10 = *(int8x8_t *)(a1 + 120);
  if (!*(_QWORD *)&v10)
    goto LABEL_27;
  v11 = HIDWORD(a3);
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = HIDWORD(a3);
    if (*(_QWORD *)&v10 <= v11)
      v13 = v11 % *(_QWORD *)&v10;
  }
  else
  {
    v13 = (v10.i32[0] - 1) & HIDWORD(a3);
  }
  v14 = *(uint64_t ****)(*(_QWORD *)(a1 + 112) + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_27:
    v70 = v9;
    v21 = operator new(0x70uLL);
    *v21 = 0;
    v21[1] = 0;
    v21[2] = a2;
    v21[3] = a3;
    v21[4] = &off_1E42B4748;
    *((double *)v21 + 5) = a5;
    *((_OWORD *)v21 + 3) = 0u;
    v22 = (void **)(v21 + 6);
    *((_OWORD *)v21 + 4) = 0u;
    *((_DWORD *)v21 + 20) = 1065353216;
    *((_BYTE *)v21 + 88) = 0;
    v21[13] = 0;
    v23 = (std::chrono::steady_clock::time_point *)operator new();
    v23->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v24 = v21[13];
    v21[13] = v23;
    if (v24)
      MEMORY[0x1A1AF4E00](v24, 0x1000C4000313F17);
    v74 = 0;
    gdc::Histogram::addSample((uint64_t)(v21 + 4), (uint64_t)v73, a4);
    v25 = *((unsigned int *)v21 + 7);
    v21[1] = v25;
    v26 = *(_QWORD *)(a1 + 120);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v28 = v25;
        if (v26 <= v25)
          v28 = v25 % v26;
      }
      else
      {
        v28 = ((_DWORD)v26 - 1) & v25;
      }
      v29 = *(uint64_t ***)(*(_QWORD *)(a1 + 112) + 8 * v28);
      if (v29)
      {
        v30 = *v29;
        if (*v29)
        {
          v31 = *((unsigned int *)v21 + 6);
          v32 = (const void *)v21[2];
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v34 = v30[1];
              if (v34 == v25)
              {
                if (*((_DWORD *)v30 + 7) == (_DWORD)v25
                  && *((_DWORD *)v30 + 6) == (_DWORD)v31
                  && !memcmp((const void *)v30[2], v32, v31))
                {
                  goto LABEL_53;
                }
              }
              else if ((v34 & (v26 - 1)) != v28)
              {
                goto LABEL_62;
              }
              v30 = (uint64_t *)*v30;
              if (!v30)
                goto LABEL_62;
            }
          }
          do
          {
            v33 = v30[1];
            if (v33 == v25)
            {
              if (*((_DWORD *)v30 + 7) == (_DWORD)v25
                && *((_DWORD *)v30 + 6) == (_DWORD)v31
                && !memcmp((const void *)v30[2], v32, v31))
              {
LABEL_53:
                v21[4] = &off_1E42B4748;
                v35 = v21[13];
                v21[13] = 0;
                if (v35)
                  MEMORY[0x1A1AF4E00](v35, 0x1000C4000313F17);
                if (*((_BYTE *)v21 + 88))
                  *((_BYTE *)v21 + 88) = 0;
                v36 = (_QWORD *)v21[8];
                v9 = v70;
                if (v36)
                {
                  do
                  {
                    v37 = (_QWORD *)*v36;
                    operator delete(v36);
                    v36 = v37;
                  }
                  while (v37);
                }
                v38 = *v22;
                *v22 = 0;
                if (v38)
                  operator delete(v38);
                operator delete(v21);
                goto LABEL_121;
              }
            }
            else
            {
              if (v33 >= v26)
                v33 %= v26;
              if (v33 != v28)
                break;
            }
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
      }
    }
LABEL_62:
    v39 = (float)(unint64_t)(*(_QWORD *)(a1 + 136) + 1);
    v40 = *(float *)(a1 + 144);
    if (!v26 || (float)(v40 * (float)v26) < v39)
    {
      v41 = 1;
      if (v26 >= 3)
        v41 = (v26 & (v26 - 1)) != 0;
      v42 = v41 | (2 * v26);
      v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43)
        prime = v43;
      else
        prime = v42;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v26 = *(_QWORD *)(a1 + 120);
      }
      if (prime > v26)
        goto LABEL_74;
      if (prime >= v26)
        goto LABEL_99;
      v57 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 136) / *(float *)(a1 + 144));
      if (v26 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        v57 = std::__next_prime(v57);
      }
      else
      {
        v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2)
          v57 = v59;
      }
      if (prime <= v57)
        prime = v57;
      if (prime >= v26)
      {
        v26 = *(_QWORD *)(a1 + 120);
      }
      else
      {
        if (prime)
        {
LABEL_74:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v45 = operator new(8 * prime);
          v46 = *(void **)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v45;
          if (v46)
            operator delete(v46);
          v47 = 0;
          *(_QWORD *)(a1 + 120) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v47++) = 0;
          while (prime != v47);
          v49 = a1 + 128;
          v48 = *(_QWORD **)(a1 + 128);
          if (!v48)
            goto LABEL_98;
          v50 = v48[1];
          v51 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v52 = v50 & v51;
            *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v52) = v49;
            for (i = (_QWORD *)*v48; *v48; i = (_QWORD *)*v48)
            {
              v54 = i[1] & v51;
              if (v54 == v52)
              {
                v48 = i;
              }
              else
              {
                v55 = *(_QWORD *)(a1 + 112);
                if (*(_QWORD *)(v55 + 8 * v54))
                {
                  *v48 = *i;
                  v56 = 8 * v54;
                  *i = **(_QWORD **)(*(_QWORD *)(a1 + 112) + v56);
                  **(_QWORD **)(*(_QWORD *)(a1 + 112) + v56) = i;
                }
                else
                {
                  *(_QWORD *)(v55 + 8 * v54) = v48;
                  v48 = i;
                  v52 = v54;
                }
              }
            }
LABEL_98:
            v26 = prime;
            goto LABEL_99;
          }
          if (v50 >= prime)
            v50 %= prime;
          *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v50) = v49;
          v60 = (_QWORD *)*v48;
          if (!*v48)
            goto LABEL_98;
          while (1)
          {
            v64 = v60[1];
            if (v64 >= prime)
              v64 %= prime;
            if (v64 != v50)
            {
              v65 = *(_QWORD *)(a1 + 112);
              if (!*(_QWORD *)(v65 + 8 * v64))
              {
                *(_QWORD *)(v65 + 8 * v64) = v48;
                goto LABEL_103;
              }
              *v48 = *v60;
              v63 = 8 * v64;
              *v60 = **(_QWORD **)(*(_QWORD *)(a1 + 112) + v63);
              **(_QWORD **)(*(_QWORD *)(a1 + 112) + v63) = v60;
              v60 = v48;
            }
            v64 = v50;
LABEL_103:
            v48 = v60;
            v60 = (_QWORD *)*v60;
            v50 = v64;
            if (!v60)
              goto LABEL_98;
          }
        }
        v69 = *(void **)(a1 + 112);
        *(_QWORD *)(a1 + 112) = 0;
        if (v69)
          operator delete(v69);
        v26 = 0;
        *(_QWORD *)(a1 + 120) = 0;
      }
    }
LABEL_99:
    v61 = v21[1];
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v9 = v70;
      if (v61 >= v26)
        v61 %= v26;
    }
    else
    {
      v61 &= v26 - 1;
      v9 = v70;
    }
    v66 = *(_QWORD *)(a1 + 112);
    v67 = *(_QWORD **)(v66 + 8 * v61);
    if (v67)
    {
      *v21 = *v67;
    }
    else
    {
      *v21 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v21;
      *(_QWORD *)(v66 + 8 * v61) = a1 + 128;
      if (!*v21)
      {
LABEL_120:
        ++*(_QWORD *)(a1 + 136);
        goto LABEL_121;
      }
      v68 = *(_QWORD *)(*v21 + 8);
      if (v62.u32[0] > 1uLL)
      {
        if (v68 >= v26)
          v68 %= v26;
      }
      else
      {
        v68 &= v26 - 1;
      }
      v67 = (_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v68);
    }
    *v67 = v21;
    goto LABEL_120;
  }
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == (uint64_t *)v11)
      {
        if (v15[3] == (uint64_t *)a3 && !memcmp(v15[2], a2, a3))
          goto LABEL_24;
      }
      else if (((unint64_t)v18 & v16) != v13)
      {
        goto LABEL_27;
      }
      v15 = (uint64_t **)*v15;
      if (!v15)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v17 = (unint64_t)v15[1];
    if (v17 == v11)
      break;
    if (v17 >= *(_QWORD *)&v10)
      v17 %= *(_QWORD *)&v10;
    if (v17 != v13)
      goto LABEL_27;
LABEL_12:
    v15 = (uint64_t **)*v15;
    if (!v15)
      goto LABEL_27;
  }
  if (v15[3] != (uint64_t *)a3 || memcmp(v15[2], a2, a3))
    goto LABEL_12;
LABEL_24:
  v74 = 0;
  gdc::Histogram::addSample((uint64_t)(v15 + 4), (uint64_t)v73, a4);
  v19 = v74;
  if (v74 == v73)
  {
    v20 = 4;
    v19 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_121;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_121:
  std::mutex::unlock(v9);
}

uint64_t md::MapEngine::renderSceneSync(md::MapEngine *this, double a2)
{
  double v4;
  double v5;
  char v6;
  uint64_t result;
  double v8;
  unsigned __int8 v9;
  NSObject *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint8_t v26[8];
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*((id *)this + 105), "size");
  v6 = *((_BYTE *)this + 1177);
  if (v6)
    v6 = *((_BYTE *)this + 1178) == 0;
  result = 0;
  if ((v6 & 1) == 0 && !*((_BYTE *)this + 1176))
  {
    v8 = v5 * v4;
    if ((objc_msgSend(*((id *)this + 105), "hasRenderTarget") & 1) != 0)
    {
      if (v8 <= 0.0)
        return 0;
LABEL_10:
      v9 = atomic_load((unsigned __int8 *)this + 1181);
      if ((v9 & 1) != 0)
        return 0;
      if (GEOGetVectorKitPerformanceLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
      v10 = (id)GEOGetVectorKitPerformanceLog_log;
      if (os_signpost_enabled(v10))
      {
        v11 = md::MapEngine::canRenderAsync(this);

        if (v11)
        {
          if (GEOGetVectorKitPerformanceLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
          v12 = (id)GEOGetVectorKitPerformanceLog_log;
          if (os_signpost_enabled(v12))
          {
            *(_WORD *)v26 = 0;
            _os_signpost_emit_with_name_impl(&dword_19F029000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ForceSyncRender", (const char *)&unk_1A0189141, v26, 2u);
          }

        }
      }
      else
      {

      }
      md::HomeQueueScheduler::waitForSynchronization(*((md::HomeQueueScheduler **)this + 567), "BOOL md::MapEngine::renderSceneSync(double)");
      md::MapEngine::runUpdatePhase(this, a2, 0);
      v30 = 0;
      v13 = md::MapEngine::buildFrameRequest((uint64_t)this, 0, (uint64_t)v29);
      v14 = v30;
      if (v30 == v29)
      {
        v15 = 4;
        v14 = v29;
      }
      else
      {
        if (!v30)
        {
LABEL_27:
          v16 = (uint64_t *)**((_QWORD **)this + 564);
          if (v16 != *(uint64_t **)(*((_QWORD *)this + 564) + 8) && *v16 != 0x8C3843AC816FCBCLL)
          {
            v17 = v16 + 5;
            do
            {
              v18 = *v17;
              v17 += 5;
            }
            while (v18 != 0x8C3843AC816FCBCLL);
            v16 = v17 - 5;
          }
          v19 = v16[3];
          v20 = (std::__shared_weak_count *)v16[4];
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v28 = 0;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v19 + 32))(v19, v13, v27);
          v24 = v28;
          if (v28 == v27)
          {
            v25 = 4;
            v24 = v27;
          }
          else
          {
            if (!v28)
              return 1;
            v25 = 5;
          }
          (*(void (**)(void))(*v24 + 8 * v25))();
          return 1;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_27;
    }
    result = 0;
    if (*((_QWORD *)this + 150) == 1 && v8 > 0.0)
      goto LABEL_10;
  }
  return result;
}

void sub_19F1F0368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F1F0378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  _Unwind_Resume(exception_object);
}

void md::HomeQueueScheduler::waitForSynchronization(md::HomeQueueScheduler *this, const char *a2)
{
  std::mutex *v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  const char *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::chrono::steady_clock::time_point v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::chrono::steady_clock::time_point v31;
  NSObject *v32;
  void **v33;
  uint64_t v34;
  std::mutex *v35;
  char v36;
  const char *v37;
  std::unique_lock<std::mutex> __lk;
  _QWORD v39[3];
  _QWORD *v40;
  void *v41;
  __int128 v42;
  void **v43;
  _QWORD v44[2];
  const char **v45;
  _QWORD *v46;
  void *v47;
  __int128 v48;
  void **v49;
  _QWORD v50[3];
  _QWORD *i;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  double v55;
  uint8_t *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v37 = a2;
  v3 = (std::mutex *)((char *)this + 176);
  v35 = (std::mutex *)((char *)this + 176);
  v36 = 1;
  std::mutex::lock((std::mutex *)((char *)this + 176));
  if (!*((_BYTE *)this + 292)
    || (std::mutex::lock((std::mutex *)((char *)this + 8)),
        v4 = *(unsigned __int8 *)this,
        std::mutex::unlock((std::mutex *)((char *)this + 8)),
        !v4))
  {
LABEL_77:
    std::mutex::unlock(v3);
    return;
  }
  v44[0] = &off_1E42CECD8;
  v44[1] = this;
  v45 = &v37;
  v46 = v44;
  v41 = &unk_1E42CED20;
  *(_QWORD *)&v42 = this;
  *((_QWORD *)&v42 + 1) = &v37;
  v43 = &v41;
  v49 = &v47;
  v47 = &unk_1E42CED20;
  v48 = v42;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v5 = (id)GEOGetVectorKitPerformanceLog_log;
  v6 = v5;
  v7 = *((_QWORD *)this + 37);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    v8 = *v45;
    if (!*v45)
      v8 = "";
    *(_DWORD *)buf = 136315138;
    v53 = v8;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "WaitForSynchronization", "SyncPoint:%s", buf, 0xCu);
  }

  v9 = v43;
  if (v43 == &v41)
  {
    v10 = 4;
    v9 = &v41;
  }
  else
  {
    if (!v43)
      goto LABEL_15;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_15:
  v11 = v46;
  if (v46 == v44)
  {
    v12 = 4;
    v11 = v44;
    goto LABEL_19;
  }
  if (v46)
  {
    v12 = 5;
LABEL_19:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v39[0] = &off_1E42CED68;
  v39[1] = &v35;
  v40 = v39;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v14 = *(unsigned __int8 *)this;
  std::mutex::unlock((std::mutex *)((char *)this + 8));
  if (!v14)
    goto LABEL_60;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(_BYTE *)this = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 8));
  if (v40)
    (*(void (**)(_QWORD *))(*v40 + 48))(v40);
  for (i = 0; ; (*(void (**)(void))(*i + 48))())
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 8));
    if (*(_BYTE *)this)
    {
      v15 = 3;
LABEL_51:
      std::mutex::unlock(__lk.__m_);
      goto LABEL_52;
    }
    while (!*((_QWORD *)this + 20))
    {
      if (*(_BYTE *)this)
      {
        v15 = 1;
        if (__lk.__owns_)
          goto LABEL_51;
        goto LABEL_52;
      }
      std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &__lk);
    }
    v16 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + ((*((_QWORD *)this + 19) >> 4) & 0xFFFFFFFFFFFFFF8))
                   + 32 * (*((_QWORD *)this + 19) & 0x7FLL));
    v17 = (_QWORD *)v16[3];
    if (!v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
    if (v17 != v16)
    {
      v18 = (*(uint64_t (**)(_QWORD))(*v17 + 16))(v16[3]);
LABEL_35:
      v56 = (uint8_t *)v18;
      goto LABEL_37;
    }
    v56 = buf;
    (*(void (**)(_QWORD *, uint8_t *))(*v16 + 24))(v16, buf);
LABEL_37:
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](buf, v50);
    v19 = v56;
    if (v56 == buf)
    {
      v19 = buf;
      v20 = 4;
    }
    else
    {
      if (!v56)
        goto LABEL_42;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_42:
    v21 = *((_QWORD *)this + 19);
    v22 = *(_QWORD *)(*((_QWORD *)this + 16) + ((v21 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v21 & 0x7F);
    v23 = *(_QWORD **)(v22 + 24);
    if (v23 == (_QWORD *)v22)
    {
      v23 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + ((*((_QWORD *)this + 19) >> 4) & 0xFFFFFFFFFFFFFF8))
                     + 32 * (*((_QWORD *)this + 19) & 0x7FLL));
      v24 = 4;
    }
    else
    {
      if (!v23)
        goto LABEL_47;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
    v21 = *((_QWORD *)this + 19);
LABEL_47:
    v25 = *((_QWORD *)this + 20) - 1;
    v26 = v21 + 1;
    *((_QWORD *)this + 19) = v26;
    *((_QWORD *)this + 20) = v25;
    if (v26 >= 0x100)
    {
      operator delete(**((void ***)this + 16));
      v15 = 0;
      *((_QWORD *)this + 16) += 8;
      *((_QWORD *)this + 19) -= 128;
      if (!__lk.__owns_)
        goto LABEL_52;
      goto LABEL_51;
    }
    v15 = 0;
    if (__lk.__owns_)
      goto LABEL_51;
LABEL_52:
    v27 = i;
    if (v15)
      break;
    if (!i)
      goto LABEL_79;
  }
  if (i == v50)
  {
    v28 = 4;
    v27 = v50;
LABEL_59:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (i)
  {
    v28 = 5;
    goto LABEL_59;
  }
LABEL_60:
  v29 = v40;
  if (v40 == v39)
  {
    v30 = 4;
    v29 = v39;
LABEL_64:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v40)
  {
    v30 = 5;
    goto LABEL_64;
  }
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v32 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v53 = v37;
    v54 = 2048;
    v55 = (double)(v31.__d_.__rep_ - v13.__d_.__rep_) * 0.000001;
    _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_INFO, "Waited for synchronization with background (reason:%s, %f ms)", buf, 0x16u);
  }

  if (v49)
  {
    (*((void (**)(void **))*v49 + 6))(v49);
    v33 = v49;
    if (v49 == &v47)
    {
      v34 = 4;
      v33 = &v47;
LABEL_74:
      (*((void (**)(void))*v33 + v34))();
    }
    else if (v49)
    {
      v34 = 5;
      goto LABEL_74;
    }
    if (v36)
    {
      v3 = v35;
      goto LABEL_77;
    }
  }
  else
  {
LABEL_79:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_19F1F0968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::mutex *v33;

  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::_textureDataWithData(_QWORD *a1, void *a2, int a3, unsigned int a4, int a5, _BYTE *a6)
{
  const __CFData *v10;
  CGImageSource *v11;
  CGImageSource *v12;
  CGImage *ImageAtIndex;
  CGImage *v14;
  CGImageAlphaInfo AlphaInfo;
  CGColorSpaceRef ColorSpace;
  CGColorSpaceRef v17;
  int v18;
  size_t v19;
  int v20;
  double v21;
  unsigned int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint32_t v26;
  int v27;
  char v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  size_t v33;
  CGContext *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  size_t height;
  unint64_t width;
  uint64_t v72;
  const __CFData *v73;
  unint64_t v74;
  __int128 v75;
  CGRect v76;

  v10 = a2;
  v73 = v10;
  if (!v10)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_92;
  }
  v68 = a1;
  v11 = CGImageSourceCreateWithData(v10, 0);
  v12 = v11;
  if (!v11)
  {
LABEL_21:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_92;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v11, 0, 0);
  v14 = ImageAtIndex;
  if (a6)
  {
    AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
    *a6 = (AlphaInfo > kCGImageAlphaNoneSkipFirst) | (0x1Eu >> AlphaInfo) & 1;
  }
  if (a5)
  {
    ColorSpace = CGImageGetColorSpace(v14);
    v17 = ColorSpace;
    if (ColorSpace)
    {
      CFRetain(ColorSpace);
      v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = 1;
LABEL_11:
  CFRelease(v12);
  if (!v14)
  {
    if ((v18 & 1) == 0)
      CFRelease(v17);
    goto LABEL_21;
  }
  width = CGImageGetWidth(v14);
  v19 = CGImageGetHeight(v14);
  v20 = width;
  v21 = (float)v19;
  height = v19;
  if (width <= v19)
    v20 = v19;
  v22 = 32 - __clz(v20 | 1);
  if (a3)
    v23 = v22;
  else
    v23 = 1;
  v24 = (std::__shared_weak_count *)operator new(0x60uLL);
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v25 = ggl::TextureData2D::TextureData2D((uint64_t)&v24[1], width, height, v23, a4, 0);
  v26 = 0;
  *(_QWORD *)&v75 = v25;
  *((_QWORD *)&v75 + 1) = v24;
  v74 = 1;
  v66 = 1;
  v65 = a4;
  v27 = 0;
  v28 = 1;
  switch(a4)
  {
    case 0u:
    case 0x16u:
    case 0x17u:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
      v27 = 0;
      v66 = 0;
      v74 = 0;
      v26 = 0x4000;
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x19u:
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0x1Au:
    case 0x2Au:
    case 0x2Bu:
      v28 = 0;
      v27 = 1;
      v26 = 0x4000;
      v29 = 2;
      goto LABEL_25;
    case 0xAu:
    case 0xBu:
    case 0x18u:
      v28 = 0;
      v27 = 1;
      v26 = 0x4000;
      v29 = 3;
      goto LABEL_25;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x1Bu:
    case 0x3Au:
      v28 = 0;
      v27 = 1;
      v26 = 0x4000;
      v29 = 4;
LABEL_25:
      v74 = v29;
      v66 = 1;
      break;
    default:
      v27 = 0;
      v28 = 1;
      break;
  }
  v30 = (void *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v25 + 16))(v25, 0);
  v31 = v18;
  if (a4 > 0x3A)
  {
    v32 = 1;
    if (!v27)
      goto LABEL_35;
  }
  else
  {
    v32 = qword_1A00836F8[a4];
    if (!v27)
    {
LABEL_35:
      v33 = height;
      if (!v31)
        goto LABEL_37;
      goto LABEL_36;
    }
  }
  if (a4 > 0x3A)
    goto LABEL_35;
  v33 = height;
  if (((1 << v65) & 0x7FFF3FFF807F000) != 0)
    v26 |= 1u;
  if (!v31)
    goto LABEL_37;
LABEL_36:
  v17 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  if (!v17)
  {
    CGImageRelease(v14);
    *v68 = 0;
    v68[1] = 0;
    goto LABEL_85;
  }
LABEL_37:
  v34 = CGBitmapContextCreate(v30, width, v33, 8uLL, v32 * width, v17, v26);
  CFRelease(v17);
  if (v34)
  {
    CGContextSetBlendMode(v34, kCGBlendModeCopy);
    v76.origin.x = 0.0;
    v76.origin.y = 0.0;
    v76.size.width = (float)width;
    v76.size.height = v21;
    CGContextDrawImage(v34, v76, v14);
    CGContextRelease(v34);
    CFRelease(v14);
    if (a3 && v23 >= 2)
    {
      if ((v66 & 1) != 0)
      {
        if (v74 <= 1)
          v35 = 1;
        else
          v35 = v74;
        v36 = 2 * v74;
        v37 = 1;
        v67 = v23;
        do
        {
          if (width >> v37 <= 1)
            v38 = 1;
          else
            v38 = width >> v37;
          if (v33 >> v37 <= 1)
            v39 = 1;
          else
            v39 = v33 >> v37;
          v40 = v37 - 1;
          v41 = width >> (v37 - 1);
          if (v41 <= 1)
            v42 = 1;
          else
            v42 = width >> (v37 - 1);
          v72 = v37;
          v43 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v75 + 16))(v75);
          v44 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v75 + 16))(v75, v40);
          v45 = height >> v40;
          v33 = height;
          v46 = v42 * v74;
          if (v41 <= 1)
          {
            v55 = 0;
            v56 = v44 + 3;
            v49 = v67;
            do
            {
              v57 = 0;
              v58 = v44 + v46 * 2 * v55;
              if (v45 > 1)
                v58 = v44 + v46 * ((2 * v55) | 1);
              v59 = v58 + 1;
              v60 = v38;
              do
              {
                *v43 = (*(unsigned __int8 *)(v56 + v57 - 3) + *(unsigned __int8 *)(v59 + v57 - 1)) >> 1;
                if ((v28 & 1) != 0)
                {
                  ++v43;
                }
                else
                {
                  v43[1] = (*(unsigned __int8 *)(v56 + v57 - 2) + *(unsigned __int8 *)(v59 + v57)) >> 1;
                  if (v35 == 2)
                  {
                    v43 += 2;
                  }
                  else
                  {
                    v43[2] = (*(unsigned __int8 *)(v56 + v57 - 1) + *(unsigned __int8 *)(v59 + v57 + 1)) >> 1;
                    if (v35 == 3)
                    {
                      v43 += 3;
                    }
                    else
                    {
                      v43[3] = (*(unsigned __int8 *)(v56 + v57) + *(unsigned __int8 *)(v59 + v57 + 2)) >> 1;
                      v43 += 4;
                    }
                  }
                }
                v57 += v36;
                --v60;
              }
              while (v60);
              ++v55;
              v56 += v36 * v42;
            }
            while (v55 != v39);
          }
          else
          {
            v47 = 0;
            v48 = v44;
            v49 = v67;
            do
            {
              v50 = 0;
              v51 = v44 + v46 * 2 * v47;
              if (v45 > 1)
                v51 = v44 + v46 * ((2 * v47) | 1);
              v52 = v48 + v74;
              v53 = v51 + v74;
              v54 = v38;
              do
              {
                *v43 = (*(unsigned __int8 *)(v52 + v50)
                      + *(unsigned __int8 *)(v48 + v50)
                      + *(unsigned __int8 *)(v51 + v50)
                      + *(unsigned __int8 *)(v53 + v50)) >> 2;
                if ((v28 & 1) != 0)
                {
                  ++v43;
                }
                else
                {
                  v43[1] = (*(unsigned __int8 *)(v52 + v50 + 1)
                          + *(unsigned __int8 *)(v48 + v50 + 1)
                          + *(unsigned __int8 *)(v51 + v50 + 1)
                          + *(unsigned __int8 *)(v53 + v50 + 1)) >> 2;
                  if (v35 == 2)
                  {
                    v43 += 2;
                  }
                  else
                  {
                    v43[2] = (*(unsigned __int8 *)(v52 + v50 + 2)
                            + *(unsigned __int8 *)(v48 + v50 + 2)
                            + *(unsigned __int8 *)(v51 + v50 + 2)
                            + *(unsigned __int8 *)(v53 + v50 + 2)) >> 2;
                    if (v35 == 3)
                    {
                      v43 += 3;
                    }
                    else
                    {
                      v43[3] = (*(unsigned __int8 *)(v52 + v50 + 3)
                              + *(unsigned __int8 *)(v48 + v50 + 3)
                              + *(unsigned __int8 *)(v51 + v50 + 3)
                              + *(unsigned __int8 *)(v53 + v50 + 3)) >> 2;
                      v43 += 4;
                    }
                  }
                }
                v50 += v36;
                --v54;
              }
              while (v54);
              ++v47;
              v48 += v36 * v42;
            }
            while (v47 != v39);
          }
          v37 = v72 + 1;
        }
        while (v72 + 1 != v49);
      }
      else
      {
        v63 = 1;
        do
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v75 + 16))(v75, v63);
          v64 = (v63 - 1);
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v75 + 16))(v75, v64);
          v63 = (v64 + 2);
        }
        while ((_DWORD)v63 != (_DWORD)v23);
      }
    }
    *(_OWORD *)v68 = v75;
    goto LABEL_92;
  }
  CGImageRelease(v14);
  *v68 = 0;
  v68[1] = 0;
  if (!v24)
    goto LABEL_92;
LABEL_85:
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v62 = __ldaxr(p_shared_owners);
  while (__stlxr(v62 - 1, p_shared_owners));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_92:

}

void sub_19F1F114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, char a19)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);

  _Unwind_Resume(a1);
}

void md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66[3];
  double v67;
  __int128 v68[16];
  double v69;
  _WORD v70[2];
  int v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[384];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void *__p;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[408];
  _OWORD v100[2];
  char v101;
  char v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138[3];
  double v139;
  __int128 v140[16];
  double v141;
  _WORD v142[2];
  int v143;
  __int128 v144;
  uint64_t v145;
  _BYTE v146[384];
  _BYTE v147[424];
  uint64_t v148;
  uint64_t v149;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = (_QWORD *)operator new();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 112))(v31, v1);
  v5 = operator new();
  v6 = v5;
  *(_BYTE *)v5 = v31[0];
  *(_QWORD *)(v5 + 8) = v31[1];
  v7 = v33;
  *(_OWORD *)(v5 + 16) = v32;
  *(_OWORD *)(v5 + 32) = v7;
  v8 = v35;
  *(_OWORD *)(v5 + 48) = v34;
  *(_OWORD *)(v5 + 64) = v8;
  v9 = v37;
  *(_OWORD *)(v5 + 80) = v36;
  *(_OWORD *)(v5 + 96) = v9;
  *(_OWORD *)(v5 + 112) = v38;
  v10 = v52;
  *(_QWORD *)(v5 + 128) = v39;
  v11 = v51;
  *(_OWORD *)(v5 + 296) = v50;
  *(_OWORD *)(v5 + 312) = v11;
  *(_QWORD *)(v5 + 328) = v10;
  *(_OWORD *)(v5 + 216) = v45;
  *(_OWORD *)(v5 + 232) = v46;
  *(_OWORD *)(v5 + 248) = v47;
  v12 = v49;
  *(_OWORD *)(v5 + 264) = v48;
  *(_OWORD *)(v5 + 280) = v12;
  *(_OWORD *)(v5 + 152) = v41;
  *(_OWORD *)(v5 + 168) = v42;
  *(_OWORD *)(v5 + 184) = v43;
  *(_OWORD *)(v5 + 200) = v44;
  *(_OWORD *)(v5 + 136) = v40;
  *(_BYTE *)(v5 + 336) = 0;
  if (v53)
  {
    *(_QWORD *)(v5 + 344) = v54;
    *(_BYTE *)(v5 + 336) = 1;
  }
  *(_BYTE *)(v5 + 352) = 0;
  if (v55)
  {
    *(_QWORD *)(v5 + 360) = v56;
    *(_BYTE *)(v5 + 352) = 1;
  }
  v13 = v58;
  *(_OWORD *)(v5 + 368) = v57;
  *(_OWORD *)(v5 + 384) = v13;
  v14 = v60;
  *(_OWORD *)(v5 + 400) = v59;
  *(_OWORD *)(v5 + 416) = v14;
  *(_OWORD *)(v5 + 432) = v61;
  *(_DWORD *)(v5 + 448) = v62;
  *(_QWORD *)(v5 + 456) = v63;
  v15 = v65;
  *(_OWORD *)(v5 + 464) = v64;
  *(_OWORD *)(v5 + 480) = v15;
  geo::View<double>::View(v5 + 496, v66, &v67, v68, v70, v71, v69);
  *(_OWORD *)(v6 + 960) = v72;
  *(_QWORD *)(v6 + 976) = v73;
  memcpy((void *)(v6 + 984), v74, 0x180uLL);
  *(_OWORD *)(v6 + 1368) = v75;
  *(_QWORD *)(v6 + 1384) = v76;
  md::MercatorCameraContext::MercatorCameraContext(v6 + 1392, (uint64_t)&v77);
  v16 = v91;
  *(_OWORD *)(v6 + 3224) = v90;
  *(_OWORD *)(v6 + 3240) = v16;
  v17 = v93;
  *(_OWORD *)(v6 + 3256) = v92;
  *(_OWORD *)(v6 + 3272) = v17;
  v18 = v87;
  *(_OWORD *)(v6 + 3160) = v86;
  *(_OWORD *)(v6 + 3176) = v18;
  v19 = v89;
  *(_OWORD *)(v6 + 3192) = v88;
  *(_OWORD *)(v6 + 3208) = v19;
  v20 = v83;
  *(_OWORD *)(v6 + 3096) = v82;
  *(_OWORD *)(v6 + 3112) = v20;
  v21 = v85;
  *(_OWORD *)(v6 + 3128) = v84;
  *(_OWORD *)(v6 + 3144) = v21;
  v22 = v81;
  *(_OWORD *)(v6 + 3064) = v80;
  *(_OWORD *)(v6 + 3080) = v22;
  *(_OWORD *)(v6 + 3288) = v94;
  *(_QWORD *)(v6 + 3304) = v95;
  *(_OWORD *)(v6 + 3312) = v96;
  *(_QWORD *)(v6 + 3328) = v97;
  *(_QWORD *)(v6 + 3336) = v98;
  memcpy((void *)(v6 + 3344), v99, 0x198uLL);
  *(_OWORD *)(v6 + 3752) = v100[0];
  *(_OWORD *)(v6 + 3761) = *(_OWORD *)((char *)v100 + 9);
  *(_BYTE *)(v6 + 3784) = v101;
  *(_BYTE *)(v6 + 3792) = v102;
  *(_QWORD *)(v6 + 3800) = v103;
  *(_OWORD *)(v6 + 3808) = v104;
  *(_OWORD *)(v6 + 3824) = v105;
  *(_OWORD *)(v6 + 3840) = v106;
  *(_OWORD *)(v6 + 3856) = v107;
  *(_OWORD *)(v6 + 3872) = v108;
  *(_OWORD *)(v6 + 3888) = v109;
  *(_OWORD *)(v6 + 3904) = v110;
  *(_QWORD *)(v6 + 3920) = v111;
  v23 = v123;
  *(_OWORD *)(v6 + 4088) = v122;
  *(_OWORD *)(v6 + 4104) = v23;
  *(_QWORD *)(v6 + 4120) = v124;
  v24 = v119;
  *(_OWORD *)(v6 + 4024) = v118;
  *(_OWORD *)(v6 + 4040) = v24;
  v25 = v121;
  *(_OWORD *)(v6 + 4056) = v120;
  *(_OWORD *)(v6 + 4072) = v25;
  v26 = v115;
  *(_OWORD *)(v6 + 3960) = v114;
  *(_OWORD *)(v6 + 3976) = v26;
  v27 = v117;
  *(_OWORD *)(v6 + 3992) = v116;
  *(_OWORD *)(v6 + 4008) = v27;
  v28 = v113;
  *(_OWORD *)(v6 + 3928) = v112;
  *(_OWORD *)(v6 + 3944) = v28;
  *(_BYTE *)(v6 + 4128) = 0;
  v29 = v125;
  if (v125)
  {
    *(_QWORD *)(v6 + 4136) = v126;
    *(_BYTE *)(v6 + 4128) = 1;
  }
  *(_BYTE *)(v6 + 4144) = 0;
  v30 = v127;
  if (v127)
  {
    *(_QWORD *)(v6 + 4152) = v128;
    *(_BYTE *)(v6 + 4144) = 1;
  }
  *(_OWORD *)(v6 + 4160) = v129;
  *(_OWORD *)(v6 + 4176) = v130;
  *(_OWORD *)(v6 + 4192) = v131;
  *(_OWORD *)(v6 + 4208) = v132;
  *(_OWORD *)(v6 + 4224) = v133;
  *(_DWORD *)(v6 + 4240) = v134;
  *(_QWORD *)(v6 + 4248) = v135;
  *(_OWORD *)(v6 + 4256) = v136;
  *(_OWORD *)(v6 + 4272) = v137;
  geo::View<double>::View(v6 + 4288, v138, &v139, v140, v142, v143, v141);
  *(_OWORD *)(v6 + 4752) = v144;
  *(_QWORD *)(v6 + 4768) = v145;
  memcpy((void *)(v6 + 4776), v146, 0x180uLL);
  memcpy((void *)(v6 + 5160), v147, 0x1A8uLL);
  *(_QWORD *)(v6 + 5584) = v148;
  *(_QWORD *)(v6 + 5592) = v149;
  v4[2] = "md::CameraContext]";
  v4[3] = 17;
  v4[4] = v6;
  *v4 = &off_1E42B0B68;
  v4[1] = 0x1AF456233693CD46;
  *v3 = v4;
  v148 = 0;
  if (v30)
    v127 = 0;
  if (v29)
    v125 = 0;
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
}

void sub_19F1F1660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v10 + 352))
    *(_BYTE *)(v10 + 352) = 0;
  if (*(_BYTE *)(v10 + 336))
    *(_BYTE *)(v10 + 336) = 0;
  MEMORY[0x1A1AF4E00](v10, 0x1060C408871453BLL);
  md::CameraContext::~CameraContext((md::CameraContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void gdc::FlatTileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>, double a5@<D0>)
{
  float64x2_t v8;
  float64x2_t v9;
  double *v10;
  __int128 v11;
  unint64_t v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  const double *v30;
  float64x2_t v31;
  double v32;
  double v33;
  int64x2_t *v35;
  unsigned int v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  float v71;
  double v72;
  unint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  long double v81;
  long double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  int v87;
  int v88;
  int v89;
  double v90;
  float64x2_t v91;
  int64x2_t v92;
  unint64_t v93;
  double v94;
  char v95;
  char v96;
  char v97;
  int64x2_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint32x2_t v103;
  float32x2_t v104;
  int64x2_t *v105;
  double v106;
  char v107;
  uint32x2_t v108;
  float32x2_t v109;
  char *v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t *v113;
  _QWORD *v114;
  long double v115;
  double v116;
  float v117;
  float v118;
  char v119;
  double v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  void *v127;
  int v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  char v143;
  double v144;
  int64x2_t v145;
  uint64_t v146;
  float v147;
  float64x2_t v148;
  __int128 v149;
  uint64_t v150;
  double v151;
  float64x2_t v152;
  void *v153[2];
  __int128 v154;
  int v155;
  void *v156[2];
  void *__p[2];
  int v158;
  void *v159[2];
  void *v160[2];
  int v161;
  double *v162;
  double *v163;
  float64x2x3_t v164;

  *(_OWORD *)v159 = 0u;
  *(_OWORD *)v160 = 0u;
  v161 = 1065353216;
  *(_OWORD *)v156 = 0u;
  *(_OWORD *)__p = 0u;
  v158 = 1065353216;
  v153[0] = 0;
  v153[1] = 0;
  v154 = xmmword_19FFB32C0;
  geo::Intersect::intersection<double>(&v162, a2 + 984, (double *)v153);
  v10 = v162;
  v11 = xmmword_19FFB2EA0;
  if (v162 == v163)
    goto LABEL_14;
  v12 = (char *)v163 - (char *)v162 - 24;
  if (v12 >= 0x60)
  {
    v18 = v12 / 0x18 + 1;
    v19 = v18 & 3;
    if ((v18 & 3) == 0)
      v19 = 4;
    v20 = v18 - v19;
    v21 = 3 * v20;
    v22 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v23 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v24 = v162;
    v25 = v23;
    v26 = v23;
    v27 = v23;
    v28 = v22;
    v29 = v22;
    v8 = v22;
    do
    {
      v30 = v24;
      v24 += 12;
      *(float64x2x3_t *)v9.f64 = vld3q_f64(v30);
      v30 += 6;
      v26 = vminnmq_f64(v9, v26);
      v164 = vld3q_f64(v30);
      v27 = vminnmq_f64(v164.val[0], v27);
      v22 = vmaxnmq_f64(v22, v9);
      v28 = vmaxnmq_f64(v28, v164.val[0]);
      v23 = vminnmq_f64(v31, v23);
      v25 = vminnmq_f64(v164.val[1], v25);
      v29 = vmaxnmq_f64(v29, v31);
      v8 = vmaxnmq_f64(v8, v164.val[1]);
      v20 -= 4;
    }
    while (v20);
    v15 = &v162[v21];
    v17 = vmaxnmvq_f64(vmaxnmq_f64(v29, v8));
    v13 = vmaxnmvq_f64(vmaxnmq_f64(v22, v28));
    v16 = vminnmvq_f64(vminnmq_f64(v26, v27));
    v14 = vminnmvq_f64(vminnmq_f64(v23, v25));
  }
  else
  {
    v13 = -1.79769313e308;
    v14 = 1.79769313e308;
    v15 = v162;
    v16 = 1.79769313e308;
    v17 = -1.79769313e308;
  }
  do
  {
    v32 = *v15;
    v33 = v15[1];
    v15 += 3;
    v16 = fmin(v32, v16);
    v13 = fmax(v13, v32);
    v14 = fmin(v33, v14);
    v17 = fmax(v17, v33);
  }
  while (v15 != v163);
  if (v16 > v13 || v14 > v17)
  {
LABEL_14:
    v143 = 1;
    if (!v162)
      goto LABEL_16;
    goto LABEL_15;
  }
  v56 = *(double *)(a2 + 528);
  v57 = *(double *)(a2 + 536);
  v58 = *(double *)(a2 + 520);
  v59 = *(double *)(a2 + 544);
  v60 = v56 * -2.0 * v57;
  v61 = -((v58 + v58) * v57 - v59 * (v56 * -2.0));
  v62 = v60 + (v58 + v58) * v59;
  v63 = 1.0;
  v64 = -(v56 * -2.0 * v56 + 1.0 - (v58 + v58) * v58);
  v65 = *(double *)(a2 + 496);
  v66 = *(double *)(a2 + 504);
  v67 = *(double *)(a2 + 512);
  v68 = 0.0;
  v69 = v162;
  do
  {
    v70 = sqrt((*v69 - v65) * (*v69 - v65) + (v69[1] - v66) * (v69[1] - v66) + (v69[2] - v67) * (v69[2] - v67));
    if (v70 > v68)
    {
      v9.f64[0] = *v69;
      v8.f64[0] = v69[1];
      v63 = v69[2];
      v68 = v70;
    }
    v69 += 3;
  }
  while (v69 != v163);
  v71 = (v9.f64[0] - v65) * v61 + (v8.f64[0] - v66) * v62 + (v63 - v67) * v64;
  v147 = v71;
  v72 = v67 - v63;
  *(double *)&v73 = sqrt((v65 - v9.f64[0]) * (v65 - v9.f64[0]) + (v66 - v8.f64[0]) * (v66 - v8.f64[0]) + v72 * v72);
  v151 = *(double *)&v73;
  LOWORD(v73) = *(_WORD *)(a2 + 952);
  v74 = (double)v73;
  LOWORD(v73) = *(_WORD *)(a2 + 954);
  v75 = (double)v73;
  v77 = *(double *)(a2 + 368);
  v76 = *(double *)(a2 + 376);
  if (v76 >= v77)
  {
    v83 = *(double *)(a2 + 456);
  }
  else
  {
    v78 = v76 * v77;
    v79 = v76 / v77;
    v144 = a5;
    if (v78 <= 0.0)
      v80 = 1.0;
    else
      v80 = v79;
    v81 = v80 * tan(*(double *)(a2 + 456) * 0.5);
    a5 = v144;
    v82 = atan(v81);
    v83 = v82 + v82;
  }
  v115 = tan(v83 * 0.5);
  v116 = v147 + v147;
  v117 = v116 * (v74 * v115) / (v75 * v74);
  *(float *)&v115 = v116 * v115 * v151 / (v72 * v75);
  v118 = *(double *)(a1 + 16)
       + -0.99
       + (float)(log2f((float)((float)((float)*(unsigned int *)(a1 + 8) * (float)*(unsigned int *)(a1 + 8)) * v117)* *(float *)&v115)* -0.5);
  v119 = vcvtms_s32_f32(fminf(fmaxf(v118, 1.0), 25.0));
  v120 = (double)(1 << v119);
  v121 = vcvtmd_s64_f64(v16 * v120);
  v122 = vcvtmd_s64_f64(v13 * v120);
  v123 = vcvtmd_s64_f64(v14 * v120);
  v124 = (1 << v119) - 1;
  v125 = v123 & ~(v123 >> 31);
  if (v125 >= v124)
    v125 = (1 << v119) - 1;
  v126 = vcvtmd_s64_f64(v17 * v120);
  if (v126 <= v125)
    v126 = v125;
  if (v126 >= v124)
    v126 = (1 << v119) - 1;
  LODWORD(v11) = v121;
  DWORD1(v11) = v124 - v126;
  DWORD2(v11) = v122;
  HIDWORD(v11) = v124 - v125;
  v143 = v119;
  if (v10)
  {
LABEL_15:
    v149 = v11;
    operator delete(v10);
    v11 = v149;
  }
LABEL_16:
  v141 = DWORD1(v11);
  v142 = v11;
  v35 = *(int64x2_t **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = v35;
  v137 = HIDWORD(v11) - DWORD1(v11);
  v139 = DWORD2(v11) - v11;
  if (HIDWORD(v11) - DWORD1(v11) >= -1 && DWORD2(v11) - (int)v11 >= -1)
  {
    v84 = 1.0 / (double)(1 << v143);
    v85 = (double)(int)v11;
    v86 = (double)((1 << v143) + ~DWORD1(v11));
    v87 = 0;
    do
    {
      v88 = 0;
      v89 = v87;
      v152 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v84 + (v86 - (double)v87) * v84), 0);
      do
      {
        v90 = ((double)v88 + v85) * v84;
        v91 = vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 904), *(float64x2_t *)(a2 + 808), v90), v152, *(float64x2_t *)(a2 + 840));
        v92 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 920), *(float64x2_t *)(a2 + 824), v90), v152, *(float64x2_t *)(a2 + 856));
        v93 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v35 < v93)
        {
          *v35 = (int64x2_t)v91;
          v35[1] = v92;
          v94 = -*(double *)&v92.i64[1];
          if (*(double *)v92.i64 > *(double *)&v92.i64[1])
            v95 = 2;
          else
            v95 = 0;
          if (*(double *)v92.i64 < v94)
            v95 = 1;
          v96 = v95 | 8;
          if (v91.f64[0] <= *(double *)&v92.i64[1])
            v96 = v95;
          v97 = v95 | 4;
          if (v91.f64[0] >= v94)
            v97 = v96;
          if (v91.f64[1] >= v94)
          {
            if (v91.f64[1] > *(double *)&v92.i64[1])
              v97 |= 0x20u;
          }
          else
          {
            v97 |= 0x10u;
          }
          v35[2].i8[0] = v97;
          if ((v97 & 1) == 0)
          {
            v103.i32[0] = *(unsigned __int16 *)(a2 + 952);
            v103.i32[1] = *(unsigned __int16 *)(a2 + 954);
            v104 = vcvt_f32_u32(v103);
            *(float32x2_t *)((char *)v35[2].i64 + 4) = vmul_f32(vmla_f32(v104, vcvt_f32_f64(vdivq_f64(v91, (float64x2_t)vdupq_laneq_s64(v92, 1))), v104), (float32x2_t)0x3F0000003F000000);
          }
          v35 += 3;
          goto LABEL_59;
        }
        v98 = *(int64x2_t **)(a1 + 24);
        v99 = 0xAAAAAAAAAAAAAAABLL * (v35 - v98) + 1;
        if (v99 > 0x555555555555555)
          abort();
        v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - (_QWORD)v98) >> 4);
        if (2 * v100 > v99)
          v99 = 2 * v100;
        if (v100 >= 0x2AAAAAAAAAAAAAALL)
          v101 = 0x555555555555555;
        else
          v101 = v99;
        if (v101)
        {
          v145 = v92;
          v148 = v91;
          if (v101 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v102 = (char *)operator new(48 * v101);
          v92 = v145;
          v91 = v148;
        }
        else
        {
          v102 = 0;
        }
        v105 = (int64x2_t *)&v102[16 * (v35 - v98)];
        *v105 = (int64x2_t)v91;
        v105[1] = v92;
        v106 = -*(double *)&v92.i64[1];
        if (*(double *)v92.i64 >= -*(double *)&v92.i64[1])
        {
          if (*(double *)v92.i64 <= *(double *)&v92.i64[1])
          {
            v107 = 0;
            if (v91.f64[0] >= v106)
            {
LABEL_93:
              if (v91.f64[0] > *(double *)&v92.i64[1])
                v107 |= 8u;
              goto LABEL_95;
            }
          }
          else
          {
            v107 = 2;
            if (v91.f64[0] >= v106)
              goto LABEL_93;
          }
        }
        else
        {
          v107 = 1;
          if (v91.f64[0] >= v106)
            goto LABEL_93;
        }
        v107 |= 4u;
LABEL_95:
        if (v91.f64[1] >= v106)
        {
          if (v91.f64[1] > *(double *)&v92.i64[1])
            v107 |= 0x20u;
        }
        else
        {
          v107 |= 0x10u;
        }
        v105[2].i8[0] = v107;
        if ((v107 & 1) == 0)
        {
          v108.i32[0] = *(unsigned __int16 *)(a2 + 952);
          v108.i32[1] = *(unsigned __int16 *)(a2 + 954);
          v109 = vcvt_f32_u32(v108);
          *(float32x2_t *)&v102[16 * (v35 - v98) + 36] = vmul_f32(vmla_f32(v109, vcvt_f32_f64(vdivq_f64(v91, (float64x2_t)vdupq_laneq_s64(v92, 1))), v109), (float32x2_t)0x3F0000003F000000);
        }
        if (v35 == v98)
        {
          v113 = v35;
          v110 = &v102[16 * (v35 - v98)];
        }
        else
        {
          v110 = &v102[16 * (v35 - v98)];
          do
          {
            v111 = v35[-3];
            v112 = v35[-1];
            *((int64x2_t *)v110 - 2) = v35[-2];
            *((int64x2_t *)v110 - 1) = v112;
            *((int64x2_t *)v110 - 3) = v111;
            v110 -= 48;
            v35 -= 3;
          }
          while (v35 != v98);
          v113 = *(int64x2_t **)(a1 + 24);
        }
        v35 = v105 + 3;
        *(_QWORD *)(a1 + 24) = v110;
        *(_QWORD *)(a1 + 32) = v105 + 3;
        *(_QWORD *)(a1 + 40) = &v102[48 * v101];
        if (v113)
          operator delete(v113);
LABEL_59:
        *(_QWORD *)(a1 + 32) = v35;
        ++v88;
      }
      while (v88 != v139 + 2);
      v87 = v89 + 1;
    }
    while (v89 + 1 != v137 + 2);
  }
  v37 = *(_DWORD *)(a2 + 952);
  WORD1(v162) = (int)((double)HIWORD(v37) * a5);
  LOWORD(v162) = (int)((double)(unsigned __int16)v37 * a5);
  if ((v137 & 0x80000000) == 0)
  {
    v38 = a3 ? v156 : 0;
    if ((v139 & 0x80000000) == 0)
    {
      v39 = 0;
      v40 = 0;
      v41 = v139 + 2;
      v138 = (v137 + 1);
      v140 = (v139 + 1);
      v42 = 48 * v41;
      do
      {
        v43 = v142;
        v44 = v141 + v40;
        v146 = v40 + 1;
        v150 = v39;
        v45 = v140;
        do
        {
          LOBYTE(v153[0]) = -1;
          BYTE1(v153[0]) = v143;
          HIDWORD(v153[0]) = v44;
          LODWORD(v153[1]) = v43;
          gdc::FlatTileSelector::processTile(a1, a2, (unsigned __int16 *)&v162, (uint64_t)v153, *(_QWORD *)(a1 + 24) + v39 + v42, *(_QWORD *)(a1 + 24) + v39 + v42 + 48, *(_QWORD *)(a1 + 24) + v39 + 48, *(_QWORD *)(a1 + 24) + v39, (uint64_t)v159, (uint64_t)v38);
          v39 += 48;
          ++v43;
          --v45;
        }
        while (v45);
        v39 = v150 + v42;
        v40 = v146;
      }
      while (v146 != v138);
    }
  }
  if ((a3 & 1) != 0)
  {
    *(_OWORD *)v153 = 0u;
    v154 = 0u;
    v155 = 1065353216;
    v46 = (unsigned __int8 *)__p[0];
    if (__p[0])
    {
      do
      {
        if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v159, v46 + 16))std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v153, v46 + 16, (uint64_t)(v46 + 16));
        v46 = *(unsigned __int8 **)v46;
      }
      while (v46);
    }
    if (__p[1])
    {
      v47 = __p[0];
      if (__p[0])
      {
        do
        {
          v48 = (_QWORD *)*v47;
          operator delete(v47);
          v47 = v48;
        }
        while (v48);
      }
      __p[0] = 0;
      v49 = (char *)v156[1];
      if (v156[1])
      {
        v50 = 0;
        do
          *((_QWORD *)v156[0] + (_QWORD)v50++) = 0;
        while (v49 != v50);
      }
      __p[1] = 0;
    }
    v51 = v153[0];
    v153[0] = 0;
    v52 = v156[0];
    v156[0] = v51;
    if (v52)
      operator delete(v52);
    v54 = (unint64_t)v153[1];
    v53 = (_QWORD *)v154;
    v153[1] = 0;
    *(_OWORD *)__p = v154;
    v158 = v155;
    v156[1] = (void *)v54;
    if (*((_QWORD *)&v154 + 1))
    {
      v55 = *(_QWORD *)(v154 + 8);
      if ((v54 & (v54 - 1)) != 0)
      {
        if (v55 >= v54)
          v55 %= v54;
      }
      else
      {
        v55 &= v54 - 1;
      }
      *((_QWORD *)v156[0] + v55) = __p;
      v154 = 0uLL;
    }
    else if ((_QWORD)v154)
    {
      do
      {
        v114 = (_QWORD *)*v53;
        operator delete(v53);
        v53 = v114;
      }
      while (v114);
    }
    v127 = v153[0];
    v153[0] = 0;
    if (v127)
      operator delete(v127);
  }
  v128 = *(_DWORD *)(a1 + 8);
  *a4 = v128;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 2), (uint64_t)v159);
  a4[12] = v128;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a4 + 14), (uint64_t)v156);
  v129 = __p[0];
  if (__p[0])
  {
    do
    {
      v130 = (_QWORD *)*v129;
      operator delete(v129);
      v129 = v130;
    }
    while (v130);
  }
  v131 = v156[0];
  v156[0] = 0;
  if (v131)
    operator delete(v131);
  v132 = v160[0];
  if (v160[0])
  {
    do
    {
      v133 = (_QWORD *)*v132;
      operator delete(v132);
      v132 = v133;
    }
    while (v133);
  }
  v134 = v159[0];
  v159[0] = 0;
  if (v134)
    operator delete(v134);
}

void gdc::FlatTileSelector::processTile(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v20;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v38;
  float64x2_t v39;
  int64x2_t v40;
  double v41;
  char v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float64x2_t v87;
  uint32x2_t v88;
  float32x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int64x2_t v93;
  double v94;
  char v95;
  float64x2_t v96;
  uint32x2_t v97;
  float32x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  double v103;
  char v104;
  float64x2_t v105;
  uint32x2_t v106;
  float32x2_t v107;
  float64x2_t v108;
  int64x2_t v109;
  double v110;
  char v111;
  float64x2_t v112;
  uint32x2_t v113;
  float32x2_t v114;
  float64x2_t v116;
  int64x2_t v117;
  double v118;
  char v119;
  float64x2_t v120;
  uint32x2_t v121;
  float32x2_t v122;
  int v123;
  int v124;
  char v125;
  char v126;
  int v127;
  int v128;
  char v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char v134;
  char v135;
  uint64_t v136;
  float64x2_t v137;
  int64x2_t v138;
  __int128 v139;
  _OWORD v140[2];
  char v141;
  float32x2_t v142;
  float64x2_t v143[2];
  char v144;
  float32x2_t v145;
  _OWORD v146[2];
  char v147;
  float32x2_t v148;
  _OWORD v149[2];
  char v150;
  float32x2_t v151;

  if (!a9)
    return;
  v14 = *(unsigned __int8 *)(a5 + 32);
  v15 = *(unsigned __int8 *)(a6 + 32);
  v16 = *(unsigned __int8 *)(a7 + 32);
  v17 = *(unsigned __int8 *)(a8 + 32);
  if ((v15 & v14 & v16 & v17) != 0)
    return;
  v20 = *(unsigned __int8 *)(a4 + 1);
  if (v20 <= 0x18)
  {
    if (((v15 | v14 | v16 | v17) & 1) != 0
      || (v23 = *(float32x2_t *)(a8 + 36),
          v24 = *(float32x2_t *)(a5 + 36),
          v25 = vsub_f32(*(float32x2_t *)(a7 + 36), v24),
          v26 = (float32x2_t)vext_s8((int8x8_t)v23, *(int8x8_t *)(a6 + 36), 4uLL),
          v23.i32[1] = HIDWORD(*(_QWORD *)(a6 + 36)),
          v27 = (double)(*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 8)),
          exp2(*(double *)(a1 + 16) * -2.0 + 1.98) * v27 < vaddv_f32(vabs_f32(vmul_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v25), vsub_f32(v24, v23)), vsub_f32(v26, (float32x2_t)vrev64_s32((int32x2_t)v24)), v25), (float32x2_t)0x3F0000003F000000)))))
    {
      v28 = *(float64x2_t *)a5;
      v29 = *(float64x2_t *)(a5 + 16);
      v31 = *(float64x2_t *)a6;
      v30 = *(float64x2_t *)(a6 + 16);
      v32 = vaddq_f64(*(float64x2_t *)a6, *(float64x2_t *)a5);
      __asm { FMOV            V5.2D, #0.5 }
      v38 = vmulq_f64(v32, _Q5);
      v39 = vaddq_f64(v30, v29);
      v40 = (int64x2_t)vmulq_f64(v39, _Q5);
      v137 = v38;
      v138 = v40;
      v41 = -*(double *)&v40.i64[1];
      if (*(double *)v40.i64 < -*(double *)&v40.i64[1])
      {
        v42 = 1;
        if (v38.f64[0] < v41)
          goto LABEL_42;
LABEL_39:
        if (v38.f64[0] > *(double *)&v40.i64[1])
          v42 |= 8u;
LABEL_43:
        if (v38.f64[1] >= v41)
        {
          if (v38.f64[1] > *(double *)&v40.i64[1])
            v42 |= 0x20u;
        }
        else
        {
          v42 |= 0x10u;
        }
        LOBYTE(v139) = v42;
        if ((v42 & 1) == 0)
        {
          v87 = vdivq_f64(v38, (float64x2_t)vdupq_laneq_s64(v40, 1));
          v88.i32[0] = *a3;
          v88.i32[1] = a3[1];
          v89 = vcvt_f32_u32(v88);
          *(float32x2_t *)((char *)&v139 + 4) = vmul_f32(vmla_f32(v89, vcvt_f32_f64(v87), v89), (float32x2_t)0x3F0000003F000000);
        }
        v91 = *(float64x2_t *)a7;
        v90 = *(float64x2_t *)(a7 + 16);
        v92 = vmulq_f64(vaddq_f64(*(float64x2_t *)a7, v31), _Q5);
        v93 = (int64x2_t)vmulq_f64(vaddq_f64(v90, v30), _Q5);
        v140[0] = v92;
        v140[1] = v93;
        v94 = -*(double *)&v93.i64[1];
        if (*(double *)v93.i64 < -*(double *)&v93.i64[1])
        {
          v95 = 1;
          if (v92.f64[0] < v94)
            goto LABEL_57;
LABEL_54:
          if (v92.f64[0] > *(double *)&v93.i64[1])
            v95 |= 8u;
LABEL_58:
          if (v92.f64[1] >= v94)
          {
            if (v92.f64[1] > *(double *)&v93.i64[1])
              v95 |= 0x20u;
          }
          else
          {
            v95 |= 0x10u;
          }
          v141 = v95;
          if ((v95 & 1) == 0)
          {
            v96 = vdivq_f64(v92, (float64x2_t)vdupq_laneq_s64(v93, 1));
            v97.i32[0] = *a3;
            v97.i32[1] = a3[1];
            v98 = vcvt_f32_u32(v97);
            v142 = vmul_f32(vmla_f32(v98, vcvt_f32_f64(v96), v98), (float32x2_t)0x3F0000003F000000);
          }
          v100 = *(float64x2_t *)a8;
          v99 = *(float64x2_t *)(a8 + 16);
          v101 = vmulq_f64(vaddq_f64(*(float64x2_t *)a8, v91), _Q5);
          v102 = (int64x2_t)vmulq_f64(vaddq_f64(v99, v90), _Q5);
          v143[0] = v101;
          v143[1] = (float64x2_t)v102;
          v103 = -*(double *)&v102.i64[1];
          if (*(double *)v102.i64 < -*(double *)&v102.i64[1])
          {
            v104 = 1;
            if (v101.f64[0] < v103)
              goto LABEL_72;
LABEL_69:
            if (v101.f64[0] > *(double *)&v102.i64[1])
              v104 |= 8u;
LABEL_73:
            if (v101.f64[1] >= v103)
            {
              if (v101.f64[1] > *(double *)&v102.i64[1])
                v104 |= 0x20u;
            }
            else
            {
              v104 |= 0x10u;
            }
            v144 = v104;
            if ((v104 & 1) == 0)
            {
              v105 = vdivq_f64(v101, (float64x2_t)vdupq_laneq_s64(v102, 1));
              v106.i32[0] = *a3;
              v106.i32[1] = a3[1];
              v107 = vcvt_f32_u32(v106);
              v145 = vmul_f32(vmla_f32(v107, vcvt_f32_f64(v105), v107), (float32x2_t)0x3F0000003F000000);
            }
            v108 = vmulq_f64(vaddq_f64(v28, v100), _Q5);
            v109 = (int64x2_t)vmulq_f64(vaddq_f64(v29, v99), _Q5);
            v146[0] = v108;
            v146[1] = v109;
            v110 = -*(double *)&v109.i64[1];
            if (*(double *)v109.i64 < -*(double *)&v109.i64[1])
            {
              v111 = 1;
              if (v108.f64[0] < v110)
                goto LABEL_87;
LABEL_84:
              if (v108.f64[0] > *(double *)&v109.i64[1])
                v111 |= 8u;
              goto LABEL_88;
            }
            if (*(double *)v109.i64 <= *(double *)&v109.i64[1])
            {
              v111 = 0;
              if (v108.f64[0] >= v110)
                goto LABEL_84;
            }
            else
            {
              v111 = 2;
              if (v108.f64[0] >= v110)
                goto LABEL_84;
            }
LABEL_87:
            v111 |= 4u;
LABEL_88:
            if (v108.f64[1] >= v110)
            {
              if (v108.f64[1] > *(double *)&v109.i64[1])
                v111 |= 0x20u;
            }
            else
            {
              v111 |= 0x10u;
            }
            v147 = v111;
            if ((v111 & 1) == 0)
            {
              v112 = vdivq_f64(v108, (float64x2_t)vdupq_laneq_s64(v109, 1));
              v113.i32[0] = *a3;
              v113.i32[1] = a3[1];
              v114 = vcvt_f32_u32(v113);
              v148 = vmul_f32(vmla_f32(v114, vcvt_f32_f64(v112), v114), (float32x2_t)0x3F0000003F000000);
            }
            __asm { FMOV            V2.2D, #0.25 }
            v116 = vmulq_f64(vaddq_f64(vaddq_f64(v32, v91), v100), _Q2);
            v117 = (int64x2_t)vmulq_f64(vaddq_f64(vaddq_f64(v39, v90), v99), _Q2);
            v149[0] = v116;
            v149[1] = v117;
            v118 = -*(double *)&v117.i64[1];
            if (*(double *)v117.i64 >= -*(double *)&v117.i64[1])
            {
              if (*(double *)v117.i64 <= *(double *)&v117.i64[1])
                v119 = 0;
              else
                v119 = 2;
            }
            else
            {
              v119 = 1;
            }
            if (v116.f64[0] >= v118)
            {
              if (v116.f64[0] > *(double *)&v117.i64[1])
                v119 |= 8u;
            }
            else
            {
              v119 |= 4u;
            }
            if (v116.f64[1] >= v118)
            {
              if (v116.f64[1] > *(double *)&v117.i64[1])
                v119 |= 0x20u;
            }
            else
            {
              v119 |= 0x10u;
            }
            v150 = v119;
            if ((v119 & 1) == 0)
            {
              v120 = vdivq_f64(v116, (float64x2_t)vdupq_laneq_s64(v117, 1));
              v121.i32[0] = *a3;
              v121.i32[1] = a3[1];
              v122 = vcvt_f32_u32(v121);
              v151 = vmul_f32(vmla_f32(v122, vcvt_f32_f64(v120), v122), (float32x2_t)0x3F0000003F000000);
            }
            v123 = *(_DWORD *)(a4 + 8);
            v124 = (2 * *(_DWORD *)(a4 + 4)) | 1;
            v134 = -1;
            v135 = v20 + 1;
            LODWORD(v136) = v124;
            HIDWORD(v136) = 2 * v123;
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, a5, &v137, v149, v146, a9, a10);
            v125 = *(_BYTE *)(a4 + 1) + 1;
            v134 = -1;
            v135 = v125;
            v136 = *(_QWORD *)&vadd_s32(*(int32x2_t *)(a4 + 4), *(int32x2_t *)(a4 + 4)) | 0x100000001;
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, &v137, a6, v140, v149, a9, a10);
            v126 = *(_BYTE *)(a4 + 1) + 1;
            v127 = 2 * *(_DWORD *)(a4 + 4);
            v128 = (2 * *(_DWORD *)(a4 + 8)) | 1;
            v134 = -1;
            v135 = v126;
            v136 = __PAIR64__(v128, v127);
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, v149, v140, a7, v143, a9, a10);
            v129 = *(_BYTE *)(a4 + 1) + 1;
            v134 = -1;
            v135 = v129;
            v136 = (uint64_t)vadd_s32(*(int32x2_t *)(a4 + 4), *(int32x2_t *)(a4 + 4));
            gdc::FlatTileSelector::processTile(a1, a2, a3, &v134, v146, v149, v143, a8, a9, a10);
            return;
          }
          if (*(double *)v102.i64 <= *(double *)&v102.i64[1])
          {
            v104 = 0;
            if (v101.f64[0] >= v103)
              goto LABEL_69;
          }
          else
          {
            v104 = 2;
            if (v101.f64[0] >= v103)
              goto LABEL_69;
          }
LABEL_72:
          v104 |= 4u;
          goto LABEL_73;
        }
        if (*(double *)v93.i64 <= *(double *)&v93.i64[1])
        {
          v95 = 0;
          if (v92.f64[0] >= v94)
            goto LABEL_54;
        }
        else
        {
          v95 = 2;
          if (v92.f64[0] >= v94)
            goto LABEL_54;
        }
LABEL_57:
        v95 |= 4u;
        goto LABEL_58;
      }
      if (*(double *)v40.i64 <= *(double *)&v40.i64[1])
      {
        v42 = 0;
        if (v38.f64[0] >= v41)
          goto LABEL_39;
      }
      else
      {
        v42 = 2;
        if (v38.f64[0] >= v41)
          goto LABEL_39;
      }
LABEL_42:
      v42 |= 4u;
      goto LABEL_43;
    }
  }
  v43 = 1.0 / (double)(1 << v20);
  v44 = v43 * (double)((1 << v20) + ~*(_DWORD *)(a4 + 4));
  v45 = v43 * (double)*(int *)(a4 + 8) + v43;
  v137.f64[0] = v43 * (double)*(int *)(a4 + 8);
  v137.f64[1] = v44;
  v138.i64[0] = 0;
  *(double *)&v138.i64[1] = v45;
  *(double *)&v139 = v44 + v43;
  *((_QWORD *)&v139 + 1) = 0;
  if (geo::Intersect::encloses<double>((double *)(a2 + 984), v137.f64))
  {
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a9, (unsigned __int8 *)a4, a4);
    if (a10)
    {
      v133 = a8;
      v46 = *(unsigned __int8 *)(a4 + 1);
      v47 = *(_DWORD *)(a4 + 4);
      v48 = -1 << v46;
      if (-1 << v46 <= -2 - v47)
        v48 = -2 - v47;
      if (v47 <= 1)
        v49 = 1;
      else
        v49 = *(_DWORD *)(a4 + 4);
      v132 = ~v48;
      v131 = ~v48 - 0x61C8864680B583EBLL;
      if (*(_BYTE *)(a5 + 32))
      {
        v130 = v49;
        v50 = *(int *)(a4 + 8);
        v51 = operator new(0x28uLL);
        v51[16] = -1;
        v51[17] = v46;
        *((_DWORD *)v51 + 5) = v47;
        *((_DWORD *)v51 + 6) = v50 - 1;
        v52 = (v47
             - 0x61C8864680B583EBLL
             + (((v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v46 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = ((v52 << 6) - 0x61C8864680B583EBLL + (v52 >> 2) + v50 - 1) ^ v52;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v51) & 1) == 0)operator delete(v51);
        v53 = operator new(0x28uLL);
        v54 = *(unsigned __int8 *)(a4 + 1);
        v55 = *(int *)(a4 + 8);
        v53[16] = -1;
        v53[17] = v54;
        *((_DWORD *)v53 + 5) = v132;
        *((_DWORD *)v53 + 6) = v55;
        v56 = (v131
             + (((v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v54 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v53 = 0;
        *((_QWORD *)v53 + 1) = (v55 - 0x61C8864680B583EBLL + (v56 << 6) + (v56 >> 2)) ^ v56;
        v49 = v130;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v53) & 1) == 0)operator delete(v53);
      }
      v57 = v49 - 1;
      if (*(_BYTE *)(a6 + 32))
      {
        v58 = *(int *)(a4 + 8);
        v59 = operator new(0x28uLL);
        v60 = *(unsigned __int8 *)(a4 + 1);
        v61 = *(int *)(a4 + 4);
        v59[16] = -1;
        v59[17] = v60;
        *((_DWORD *)v59 + 5) = v61;
        *((_DWORD *)v59 + 6) = v58 + 1;
        v62 = (v61
             - 0x61C8864680B583EBLL
             + (((v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v60 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = (v58 - 0x61C8864680B583EBLL + (v62 << 6) + (v62 >> 2) + 1) ^ v62;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v59) & 1) == 0)operator delete(v59);
        v63 = operator new(0x28uLL);
        v64 = *(unsigned __int8 *)(a4 + 1);
        v65 = *(int *)(a4 + 8);
        v63[16] = -1;
        v63[17] = v64;
        *((_DWORD *)v63 + 5) = v132;
        *((_DWORD *)v63 + 6) = v65;
        v66 = (v131
             + (((v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v64 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = (v65 - 0x61C8864680B583EBLL + (v66 << 6) + (v66 >> 2)) ^ v66;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v63) & 1) == 0)operator delete(v63);
      }
      v67 = *(unsigned __int8 *)(a7 + 32);
      v68 = v57 - 0x61C8864680B583EBLL;
      if (v67)
      {
        v69 = *(int *)(a4 + 8);
        v70 = operator new(0x28uLL);
        v71 = *(unsigned __int8 *)(a4 + 1);
        v72 = *(int *)(a4 + 4);
        v70[16] = -1;
        v70[17] = v71;
        *((_DWORD *)v70 + 5) = v72;
        *((_DWORD *)v70 + 6) = v69 + 1;
        v73 = (v72
             - 0x61C8864680B583EBLL
             + (((v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v71 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = (v69 - 0x61C8864680B583EBLL + (v73 << 6) + (v73 >> 2) + 1) ^ v73;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v70) & 1) == 0)operator delete(v70);
        v74 = operator new(0x28uLL);
        v75 = *(unsigned __int8 *)(a4 + 1);
        v76 = *(int *)(a4 + 8);
        v74[16] = -1;
        v74[17] = v75;
        *((_DWORD *)v74 + 5) = v57;
        *((_DWORD *)v74 + 6) = v76;
        v77 = (v68
             + (((v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v75 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 1) = (v76 - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v74) & 1) == 0)operator delete(v74);
      }
      if (*(_BYTE *)(v133 + 32))
      {
        v78 = *(int *)(a4 + 8);
        v79 = operator new(0x28uLL);
        v80 = *(unsigned __int8 *)(a4 + 1);
        v81 = *(int *)(a4 + 4);
        v79[16] = -1;
        v79[17] = v80;
        *((_DWORD *)v79 + 5) = v81;
        *((_DWORD *)v79 + 6) = v78 - 1;
        v82 = (v81
             - 0x61C8864680B583EBLL
             + (((v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v80 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v79 = 0;
        *((_QWORD *)v79 + 1) = (v78 - 0x61C8864680B583EBLL + (v82 << 6) + (v82 >> 2) - 1) ^ v82;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v79) & 1) == 0)operator delete(v79);
        v83 = operator new(0x28uLL);
        v84 = *(unsigned __int8 *)(a4 + 1);
        v85 = *(int *)(a4 + 8);
        v83[16] = -1;
        v83[17] = v84;
        *((_DWORD *)v83 + 5) = v57;
        *((_DWORD *)v83 + 6) = v85;
        v86 = (v68
             + (((v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v84 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = (v85 - 0x61C8864680B583EBLL + (v86 << 6) + (v86 >> 2)) ^ v86;
        if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a10, (uint64_t)v83) & 1) == 0)operator delete(v83);
      }
    }
  }
}

void gdc::S2TileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *v4;
  double *v5;
  char v6;
  double v7;
  double v8;
  double v9;
  double v10;
  __n128 v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  int64x2_t v19;
  int64x2_t v20;
  void *v21[2];
  void *__p[2];
  int v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  _OWORD v38[3];
  double v39[6];
  int32x2_t v40;
  unsigned __int8 v41;
  char v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)__p = 0u;
  v23 = 1065353216;
  v4 = *(uint64_t **)(a1 + 40);
  if (v4)
  {
    v5 = (double *)(a2 + 984);
    v20 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    while (1)
    {
      v6 = *((_BYTE *)v4 + 16);
      v40 = vrev64_s32(*(int32x2_t *)((char *)v4 + 20));
      v41 = *((_BYTE *)v4 + 17);
      v42 = v6;
      v7 = sqrt(ldexp(2.0943951, -2 * v41) * 4.0538689e13);
      v8 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v40, 0.5, 0.5);
      v39[0] = -(v7 * 0.5);
      v39[1] = v39[0];
      v39[2] = v39[0];
      v39[3] = v7 * 0.5;
      v39[4] = v7 * 0.5;
      v39[5] = v7 * 0.5;
      v33 = 0;
      v30 = 0u;
      v31 = 0;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      v26 = 0x3FF0000000000000;
      *(_QWORD *)&v29 = 0x3FF0000000000000;
      v32 = 0x3FF0000000000000;
      v37 = 0x3FF0000000000000;
      v34 = v8 * 6378137.0;
      v35 = v9 * 6378137.0;
      v36 = v10 * 6356752.31;
      v38[0] = v20;
      v38[1] = xmmword_19FFB2E00;
      v38[2] = v19;
      v43[0] = &off_1E42D8A68;
      v43[1] = v38;
      v43[2] = &v26;
      v44 = v43;
      v11.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v39, (uint64_t)v43);
      v12 = v44;
      if (v44 == v43)
        break;
      if (v44)
      {
        v13 = 5;
LABEL_8:
        (*(void (**)(__n128))(*v12 + 8 * v13))(v11);
      }
      if (geo::Intersect::encloses<double>(v5, (double *)v38))
        std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v21, (unsigned __int8 *)v4 + 16, (uint64_t)(v4 + 2));
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_11;
    }
    v12 = v43;
    v13 = 4;
    goto LABEL_8;
  }
LABEL_11:
  v14 = *(_DWORD *)(a1 + 8);
  *a3 = v14;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 2), (uint64_t)v21);
  a3[12] = v14;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 14), (uint64_t)v24);
  v15 = __p[0];
  if (__p[0])
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = v21[0];
  v21[0] = 0;
  if (v17)
    operator delete(v17);
}

uint64_t geo::Intersect::encloses<double>(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v6 = *a1;
  v5 = a1[1];
  if (*a1 >= 0.0)
    v7 = a2[3];
  else
    v7 = *a2;
  if (v5 >= 0.0)
    v8 = a2[4];
  else
    v8 = a2[1];
  v9 = a1[2];
  v10 = a1[3];
  if (v9 >= 0.0)
    v11 = a2[5];
  else
    v11 = a2[2];
  if (v10 + v7 * v6 + v5 * v8 + v9 * v11 < 0.0)
    return 0;
  v13 = a1[4];
  v12 = a1[5];
  v14 = v13 >= 0.0 ? a2[3] : *a2;
  v15 = v12 >= 0.0 ? a2[4] : a2[1];
  v16 = a1[6];
  v17 = a1[7];
  v18 = v16 >= 0.0 ? a2[5] : a2[2];
  if (v17 + v14 * v13 + v12 * v15 + v16 * v18 < 0.0)
    return 0;
  v20 = a1[8];
  v19 = a1[9];
  v21 = v20 >= 0.0 ? a2[3] : *a2;
  v22 = v19 >= 0.0 ? a2[4] : a2[1];
  v23 = a1[10];
  v24 = a1[11];
  v25 = v23 >= 0.0 ? a2[5] : a2[2];
  if (v24 + v21 * v20 + v19 * v22 + v23 * v25 < 0.0)
    return 0;
  v27 = a1[12];
  v26 = a1[13];
  v28 = v27 >= 0.0 ? a2[3] : *a2;
  v29 = v26 >= 0.0 ? a2[4] : a2[1];
  v31 = a1[14];
  v30 = a1[15];
  v32 = v31 >= 0.0 ? a2[5] : a2[2];
  if (v30 + v28 * v27 + v26 * v29 + v31 * v32 < 0.0)
    return 0;
  v34 = a1[16];
  v33 = a1[17];
  v35 = v34 >= 0.0 ? a2[3] : *a2;
  v36 = v33 >= 0.0 ? a2[4] : a2[1];
  v37 = a1[18];
  v38 = v37 >= 0.0 ? a2[5] : a2[2];
  if (a1[19] + v35 * v34 + v33 * v36 + v37 * v38 < 0.0)
    return 0;
  v39 = a1[20];
  v40 = a1[21];
  v41 = v39 >= 0.0 ? a2[3] : *a2;
  v42 = v40 >= 0.0 ? a2[4] : a2[1];
  v43 = a1[22];
  v44 = v43 >= 0.0 ? a2[5] : a2[2];
  if (a1[23] + v41 * v39 + v40 * v42 + v43 * v44 < 0.0)
    return 0;
  if (v6 <= 0.0)
    v45 = a2[3];
  else
    v45 = *a2;
  v46 = v10 + v45 * v6;
  if (v5 <= 0.0)
    v47 = a2[4];
  else
    v47 = a2[1];
  v48 = v46 + v47 * v5;
  if (v9 <= 0.0)
    v49 = a2[5];
  else
    v49 = a2[2];
  v50 = v48 + v49 * v9 >= 0.0;
  if (v13 <= 0.0)
    v51 = a2[3];
  else
    v51 = *a2;
  v52 = v17 + v51 * v13;
  if (v12 <= 0.0)
    v53 = a2[4];
  else
    v53 = a2[1];
  v54 = v52 + v53 * v12;
  if (v16 <= 0.0)
    v55 = a2[5];
  else
    v55 = a2[2];
  if (v54 + v55 * v16 >= 0.0)
    ++v50;
  if (v20 <= 0.0)
    v56 = a2[3];
  else
    v56 = *a2;
  v57 = v24 + v56 * v20;
  if (v19 <= 0.0)
    v58 = a2[4];
  else
    v58 = a2[1];
  v59 = v57 + v58 * v19;
  if (v23 <= 0.0)
    v60 = a2[5];
  else
    v60 = a2[2];
  if (v59 + v60 * v23 >= 0.0)
    ++v50;
  if (v27 <= 0.0)
    v61 = a2[3];
  else
    v61 = *a2;
  v62 = v30 + v61 * v27;
  if (v26 <= 0.0)
    v63 = a2[4];
  else
    v63 = a2[1];
  v64 = v62 + v63 * v26;
  if (v31 <= 0.0)
    v65 = a2[5];
  else
    v65 = a2[2];
  if (v64 + v65 * v31 >= 0.0)
    ++v50;
  if (v34 <= 0.0)
    v66 = a2[3];
  else
    v66 = *a2;
  v67 = a1[19] + v66 * v34;
  if (v33 <= 0.0)
    v68 = a2[4];
  else
    v68 = a2[1];
  v69 = v67 + v68 * v33;
  if (v37 <= 0.0)
    v70 = a2[5];
  else
    v70 = a2[2];
  if (v69 + v70 * v37 >= 0.0)
    ++v50;
  if (v39 <= 0.0)
    v2 = a2[3];
  if (v40 <= 0.0)
    v3 = a2[4];
  if (v43 <= 0.0)
    v4 = a2[5];
  if (a1[23] + v2 * v39 + v3 * v40 + v4 * v43 >= 0.0)
    ++v50;
  if (v50 == 6)
    return 1;
  else
    return 2;
}

float64_t geo::ConvexHull2<double>::getConvexHullPoints(double **a1, _QWORD *a2, float64x2_t a3)
{
  double *v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  float64x2_t *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  float64x2_t *v57;
  char *v58;
  float64x2_t *v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  int8x16_t v66;
  float64x2_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  float64x2_t *v75;
  char *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  int8x16_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  int64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  float64x2_t *v85;
  float64x2_t v88;

  v5 = *a1;
  v4 = a1[1];
  if (v4 == *a1)
  {
    if (a2[1] != *a2)
      a2[1] = *a2;
    return a3.f64[0];
  }
  v6 = ((char *)v4 - (char *)*a1) >> 4;
  v7 = *a1;
  v8 = *a1;
  do
  {
    if (*v8 < *v7 || *v8 == *v7 && v8[1] < v7[1])
      v7 = v8;
    v8 += 2;
  }
  while (v8 != v4);
  v9 = v6 - 1;
  if (v6 == 1)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 >> 60)
      abort();
    v10 = (double *)operator new(16 * v9);
    v11 = &v10[2 * v9];
  }
  v12 = v10;
  do
  {
    if (*(_QWORD *)v5 != *(_QWORD *)v7 || *((_QWORD *)v5 + 1) != *((_QWORD *)v7 + 1))
    {
      if (v12 < v11)
      {
        *(_OWORD *)v12 = *(_OWORD *)v5;
        v12 += 2;
      }
      else
      {
        v14 = ((char *)v12 - (char *)v10) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          abort();
        if (v11 - v10 > v15)
          v15 = v11 - v10;
        if ((unint64_t)((char *)v11 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 60)
            goto LABEL_144;
          v17 = (char *)operator new(16 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[16 * v14];
        *(_OWORD *)v18 = *(_OWORD *)v5;
        if (v12 == v10)
        {
          v20 = &v17[16 * v14];
        }
        else
        {
          v19 = &v17[16 * v14];
          do
          {
            v20 = v19 - 16;
            *((_OWORD *)v19 - 1) = *((_OWORD *)v12 - 1);
            v12 -= 2;
            v19 -= 16;
          }
          while (v12 != v10);
        }
        v11 = (double *)&v17[16 * v16];
        v12 = (double *)(v18 + 16);
        if (v10)
          operator delete(v10);
        v10 = (double *)v20;
      }
    }
    v5 += 2;
  }
  while (v5 != v4);
  if (v12 == v10)
  {
    v32 = (char *)*a2;
    v33 = (char *)a2[1];
    v34 = (uint64_t)&v33[-*a2];
    if (v33 != (char *)*a2)
    {
      if ((unint64_t)v34 >= 0x11)
        a2[1] = v32 + 16;
LABEL_54:
      v33 = v32;
      goto LABEL_141;
    }
    v41 = v34 >> 4;
    v42 = 1 - (v34 >> 4);
    v43 = a2[2];
    if (v42 <= (v43 - (uint64_t)v33) >> 4)
    {
      a2[1] = &v33[16 * v42];
    }
    else
    {
      v44 = v43 - (_QWORD)v32;
      v45 = v44 >> 3;
      if ((unint64_t)(v44 >> 3) <= 1)
        v45 = 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46 >> 60)
        goto LABEL_144;
      v47 = (char *)operator new(16 * v46);
      v32 = &v47[16 * v41];
      *a2 = v32;
      a2[1] = &v32[16 * v42];
      a2[2] = &v47[16 * v46];
      if (!v33)
        goto LABEL_54;
      operator delete(v33);
      v33 = (char *)*a2;
    }
LABEL_141:
    *(double *)v33 = *v7;
    a3.f64[0] = v7[1];
    *((_QWORD *)v33 + 1) = *(_QWORD *)&a3.f64[0];
    if (v10)
      goto LABEL_139;
    return a3.f64[0];
  }
  v88 = *(float64x2_t *)v7;
  std::__introsort<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*,false>(v10, v12, v88.f64, 126 - 2 * __clz(((char *)v12 - (char *)v10) >> 4), 1);
  v21 = (char *)a1[1] - (char *)*a1;
  v22 = v21 >> 4;
  v23 = (char *)a2[2];
  v24 = (char *)*a2;
  if (v21 >> 4 > (unint64_t)((uint64_t)&v23[-*a2] >> 4))
  {
    if (v21 < 0)
      goto LABEL_146;
    v25 = (_BYTE *)a2[1];
    v26 = (char *)operator new(v21);
    v23 = &v26[16 * v22];
    v27 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
    v28 = v27;
    if (v25 != v24)
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v28 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v25 - 1);
        v25 -= 16;
        v29 -= 16;
      }
      while (v25 != v24);
    }
    *a2 = v28;
    a2[1] = v27;
    a2[2] = v23;
    if (v24)
    {
      operator delete(v24);
      v23 = (char *)a2[2];
    }
  }
  v30 = (char *)a2[1];
  if (v30 >= v23)
  {
    v35 = (char *)*a2;
    v36 = (uint64_t)&v30[-*a2] >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      goto LABEL_146;
    v38 = v23 - v35;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 60)
        goto LABEL_144;
      v40 = (char *)operator new(16 * v39);
    }
    else
    {
      v40 = 0;
    }
    v48 = &v40[16 * v36];
    *(_OWORD *)v48 = *(_OWORD *)v7;
    v31 = (float64x2_t *)(v48 + 16);
    if (v30 != v35)
    {
      do
      {
        *((_OWORD *)v48 - 1) = *((_OWORD *)v30 - 1);
        v48 -= 16;
        v30 -= 16;
      }
      while (v30 != v35);
      v30 = (char *)*a2;
    }
    *a2 = v48;
    a2[1] = v31;
    a2[2] = &v40[16 * v39];
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)v7;
    v31 = (float64x2_t *)(v30 + 16);
  }
  a2[1] = v31;
  v49 = a2[2];
  if ((unint64_t)v31 < v49)
  {
    *v31 = *(float64x2_t *)v10;
    v50 = v31 + 1;
    goto LABEL_97;
  }
  v51 = (float64x2_t *)*a2;
  v52 = ((uint64_t)v31 - *a2) >> 4;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 60)
LABEL_146:
    abort();
  v54 = v49 - (_QWORD)v51;
  if (v54 >> 3 > v53)
    v53 = v54 >> 3;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
    v55 = 0xFFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (v55 >> 60)
      goto LABEL_144;
    v56 = (char *)operator new(16 * v55);
  }
  else
  {
    v56 = 0;
  }
  v57 = (float64x2_t *)&v56[16 * v52];
  v58 = &v56[16 * v55];
  *v57 = *(float64x2_t *)v10;
  v50 = v57 + 1;
  if (v31 == v51)
  {
    *a2 = v57;
    a2[1] = v50;
    a2[2] = v58;
  }
  else
  {
    do
    {
      v57[-1] = v31[-1];
      --v57;
      --v31;
    }
    while (v31 != v51);
    v31 = (float64x2_t *)*a2;
    *a2 = v57;
    a2[1] = v50;
    a2[2] = v58;
    if (!v31)
      goto LABEL_97;
  }
  operator delete(v31);
LABEL_97:
  a2[1] = v50;
  v59 = (float64x2_t *)(v10 + 2);
  v60 = 1;
  while (v59 != (float64x2_t *)v12)
  {
    if (*(_QWORD *)&v59->f64[0] != *(_QWORD *)&v50[-1].f64[0] || *(_QWORD *)&v59->f64[1] != *(_QWORD *)&v50[-1].f64[1])
    {
      v62 = (char *)*a2;
      v63 = *a2 - 16;
      v64 = *v59;
      v65 = v50 - 1;
      do
      {
        v66 = (int8x16_t)vsubq_f64(v64, *v65);
        v67 = vmulq_f64((float64x2_t)vextq_s8(v66, v66, 8uLL), vsubq_f64(*v65, *(float64x2_t *)(v63 + 16 * v60)));
        if (vsubq_f64(v67, (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1)).f64[0] > 0.0)
          break;
        a2[1] = v65--;
        --v60;
      }
      while (v60);
      v68 = (char *)&v65[1];
      v69 = a2[2];
      if ((unint64_t)&v65[1] < v69)
      {
        *(float64x2_t *)v68 = *v59;
        v50 = v65 + 2;
      }
      else
      {
        v70 = (v68 - v62) >> 4;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60)
          abort();
        v72 = v69 - (_QWORD)v62;
        if (v72 >> 3 > v71)
          v71 = v72 >> 3;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
          v73 = 0xFFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          if (v73 >> 60)
            goto LABEL_144;
          v74 = (char *)operator new(16 * v73);
        }
        else
        {
          v74 = 0;
        }
        v75 = (float64x2_t *)&v74[16 * v70];
        v76 = &v74[16 * v73];
        *v75 = *v59;
        v50 = v75 + 1;
        if (v68 == v62)
        {
          *a2 = v75;
          a2[1] = v50;
          a2[2] = v76;
        }
        else
        {
          do
          {
            v75[-1] = *((float64x2_t *)v68 - 1);
            --v75;
            v68 -= 16;
          }
          while (v68 != v62);
          v62 = (char *)*a2;
          *a2 = v75;
          a2[1] = v50;
          a2[2] = v76;
          if (!v62)
            goto LABEL_99;
        }
        operator delete(v62);
      }
LABEL_99:
      a2[1] = v50;
      ++v60;
    }
    ++v59;
  }
  v77 = (float64x2_t *)*a2;
  a3 = *(float64x2_t *)v7;
  v78 = v50 - 1;
  do
  {
    v79 = (int8x16_t)vsubq_f64(a3, *v78);
    v80 = vmulq_f64((float64x2_t)vextq_s8(v79, v79, 8uLL), vsubq_f64(*v78, v77[v60 - 1]));
    if (vsubq_f64(v80, (float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1)).f64[0] >= 0.0)
      break;
    a2[1] = v78--;
    --v60;
  }
  while (v60);
  v81 = v78 + 1;
  v82 = (char *)&v78[1] - (char *)v77;
  v83 = v82 >> 4;
  if (v82 >> 4 < (unint64_t)((uint64_t)(a2[2] - (_QWORD)v77) >> 4))
  {
    if (v81 == v77)
    {
      *a2 = 16 * v83;
      a2[1] = 16 * v83;
      a2[2] = 16 * v83;
      goto LABEL_137;
    }
    if ((v82 & 0x8000000000000000) == 0)
    {
      v84 = (float64x2_t *)((char *)operator new(v82) + 16 * v83);
      v85 = v84;
      do
      {
        a3 = v81[-1];
        v85[-1] = a3;
        --v85;
        --v81;
      }
      while (v81 != v77);
      *a2 = v85;
      a2[1] = v84;
      a2[2] = v84;
      if (!v77)
        goto LABEL_138;
LABEL_137:
      operator delete(v77);
      goto LABEL_138;
    }
LABEL_144:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_138:
  if (v10)
LABEL_139:
    operator delete(v10);
  return a3.f64[0];
}

void sub_19F1F389C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*,false>(double *a1, double *a2, double *a3, uint64_t a4, char a5)
{
  double *v9;
  double *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *k;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double *v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  BOOL v50;
  BOOL v51;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double *v59;
  double *j;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  double v71;
  double *v72;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double *v89;
  uint64_t v90;
  double v91;
  double *v92;
  double *v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  uint64_t v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  int64_t v114;
  int64_t v115;
  double *v116;
  int64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double *v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double *v153;
  double v154;
  double *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double *v165;
  double v166;
  double v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  uint64_t v177;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double *v182;
  double *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  double *v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  BOOL v210;
  double *v211;
  unint64_t v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double *v221;
  double *v222;
  double *v223;
  double *v224;

void geo::Intersect::intersection<double>(double **a1, uint64_t a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  double *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  double *v54;
  __int128 v55;
  double v56[6];
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  float64x2_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  float64x2_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  float64x2_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  float64x2_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)(a2 + 200);
  v6 = *(double *)(a2 + 224);
  v7 = *(double *)(a2 + 232);
  v8 = *(double *)(a2 + 208);
  v56[0] = *(double *)(a2 + 192);
  v56[1] = v5;
  v56[4] = v6 - v5;
  v56[5] = v7 - v8;
  v9 = *(double *)(a2 + 272);
  v10 = *(double *)(a2 + 280);
  v12 = *(double *)(a2 + 248);
  v11 = *(double *)(a2 + 256);
  v13 = *(_QWORD *)(a2 + 232);
  v57 = *(double *)(a2 + 240);
  v58 = v12;
  v61 = v9 - v12;
  v62 = v10 - v11;
  v14 = *(double *)(a2 + 320);
  v15 = *(double *)(a2 + 328);
  v17 = *(double *)(a2 + 296);
  v16 = *(double *)(a2 + 304);
  v18 = *(_QWORD *)(a2 + 280);
  v63 = *(double *)(a2 + 288);
  v64 = v17;
  v67 = v14 - v17;
  v68 = v15 - v16;
  v19 = *(double *)(a2 + 368);
  v20 = *(double *)(a2 + 376);
  v21 = *(double *)(a2 + 344);
  v22 = *(double *)(a2 + 352);
  v23 = *(_QWORD *)(a2 + 328);
  v69 = *(double *)(a2 + 336);
  v70 = v21;
  v73 = v19 - v21;
  v74 = v20 - v22;
  v77 = v8;
  v78 = v57 - v56[0];
  v75 = v56[0];
  v76 = v5;
  v79 = v12 - v5;
  v80 = v11 - v8;
  v81 = v57;
  v82 = v12;
  v83 = v11;
  v84 = v69 - v57;
  v85 = v21 - v12;
  v86 = v22 - v11;
  v87 = v69;
  v88 = v21;
  v89 = v22;
  v90 = v63 - v69;
  v91 = v17 - v21;
  v92 = v16 - v22;
  v93 = v63;
  v94 = v17;
  v95 = v16;
  v96 = v56[0] - v63;
  v97 = v5 - v17;
  v98 = v8 - v16;
  v24 = *(float64x2_t *)(a2 + 216);
  v56[2] = v8;
  v56[3] = v24.f64[0] - v56[0];
  v99 = v24;
  v102 = v9 - v6;
  v103 = v10 - v7;
  v25 = *(float64x2_t *)(a2 + 264);
  v59 = v11;
  v60 = v25.f64[0] - v57;
  v100 = v13;
  v101 = *(_OWORD *)&vsubq_f64(v25, v24);
  v104 = v25;
  v107 = v19 - v9;
  v108 = v20 - v10;
  v26 = *(_QWORD *)(a2 + 376);
  v27 = *(float64x2_t *)(a2 + 360);
  v71 = v22;
  v72 = v27.f64[0] - v69;
  v105 = v18;
  v106 = *(_OWORD *)&vsubq_f64(v27, v25);
  v109 = v27;
  v112 = v14 - v19;
  v113 = v15 - v20;
  v28 = *(float64x2_t *)(a2 + 312);
  v65 = v16;
  v66 = v28.f64[0] - v63;
  v110 = v26;
  v111 = *(_OWORD *)&vsubq_f64(v28, v27);
  v114 = v28;
  v115 = v23;
  v116 = *(_OWORD *)&vsubq_f64(v24, v28);
  v117 = v6 - v14;
  v118 = v7 - v15;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v29 = (double *)operator new(0x120uLL);
  v30 = 0;
  *a1 = v29;
  a1[1] = v29;
  a1[2] = v29 + 36;
  do
  {
    v32 = &v56[6 * v30];
    v33 = a3[1];
    v35 = v32[3];
    v34 = v32[4];
    v36 = a3[2];
    v37 = v32[5];
    v38 = v35 * *a3 + v34 * v33 + v37 * v36;
    if (fabs(v38) > 2.22044605e-16)
    {
      v39 = v32[1];
      v40 = v32[2];
      v41 = -(a3[3] + *v32 * *a3 + v39 * v33 + v40 * v36) / v38;
      if (v41 >= 0.0 && v41 <= 1.0)
      {
        v43 = *v32 + v41 * v35;
        v44 = v39 + v41 * v34;
        v45 = v40 + v41 * v37;
        v46 = (unint64_t)a1[2];
        if ((unint64_t)v29 < v46)
        {
          *v29 = v43;
          v29[1] = v44;
          v31 = v29 + 3;
          v29[2] = v45;
        }
        else
        {
          v47 = *a1;
          v48 = 0xAAAAAAAAAAAAAAABLL * (v29 - *a1);
          v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v47) >> 3);
          if (2 * v50 > v49)
            v49 = 2 * v50;
          if (v50 >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v49;
          if (v51)
          {
            if (v51 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v52 = (char *)operator new(24 * v51);
          }
          else
          {
            v52 = 0;
          }
          v53 = (double *)&v52[24 * v48];
          *v53 = v43;
          v53[1] = v44;
          v53[2] = v45;
          v54 = v53;
          if (v29 != v47)
          {
            do
            {
              v55 = *(_OWORD *)(v29 - 3);
              *(v54 - 1) = *(v29 - 1);
              *(_OWORD *)(v54 - 3) = v55;
              v54 -= 3;
              v29 -= 3;
            }
            while (v29 != v47);
            v29 = *a1;
          }
          v31 = v53 + 3;
          *a1 = v54;
          a1[1] = v53 + 3;
          a1[2] = (double *)&v52[24 * v51];
          if (v29)
            operator delete(v29);
        }
        a1[1] = v31;
        v29 = v31;
      }
    }
    ++v30;
  }
  while (v30 != 12);
}

void sub_19F1F4C50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_32c57_ZTSNSt3__18weak_ptrIN3ggl7RunLoop18_RunLoopCallbackerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_19F1F4CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ggl::MetalSwapchainDrawableRef::present(ggl::MetalSwapchainDrawableRef *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *((_QWORD *)this + 1);
  v2 = (unsigned int *)(v1 + 132);
  v3 = __ldaxr((unsigned int *)(v1 + 132));
  if (v3 == 3)
  {
    if (!__stlxr(5u, v2))
    {
      std::mutex::lock((std::mutex *)v1);
      objc_msgSend(**(id **)(v1 + 112), "present");
      ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(_QWORD *)(v1 + 64) + 80), *(const ggl::Texture **)(v1 + 96), 0);
      std::mutex::unlock((std::mutex *)v1);
      do
        __ldaxr(v2);
      while (__stlxr(6u, v2));
    }
  }
  else
  {
    __clrex();
  }
}

void sub_19F1F4D84(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F1F4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t ggl::MetalSwapchainDrawableRef::makeReady(ggl::MetalSwapchainDrawableRef *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  id v4;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  unsigned int *v18;
  unsigned int v19;
  int v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  v2 = (unsigned int *)(v1 + 132);
  v3 = __ldaxr((unsigned int *)(v1 + 132));
  if (v3)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(2u, v2))
  {
LABEL_23:
    if (v3 != 4)
      return 1;
    if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1)
      dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_40250);
    v17 = GEOGetGeoGLMetalSwapchainLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315650;
      v22 = "false";
      v23 = 2080;
      v24 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
      v25 = 1024;
      v26 = 115;
      _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "Failed to make drawable ready: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v21, 0x1Cu);
    }
    return 2;
  }
  v4 = *(id *)(*(_QWORD *)(v1 + 80) + 16);
  objc_msgSend(v4, "drawableSize");
  v7 = *(_QWORD *)(v1 + 96);
  LODWORD(v8) = *(_DWORD *)(v7 + 80);
  if (v5 == (double)v8 || (LODWORD(v5) = *(_DWORD *)(v7 + 84), v6 == (double)*(unint64_t *)&v5))
  {
    objc_msgSend(v4, "nextDrawable");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      std::mutex::lock((std::mutex *)v1);
      ggl::MetalResourceManager::updateTextureWithResource(*(ggl::MetalResourceManager **)(*(_QWORD *)(v1 + 64) + 80), *(const ggl::Texture **)(v1 + 96), (void *)objc_msgSend(v11, "texture"));
      v12 = (_QWORD *)operator new();
      *v12 = v11;
      v13 = (_QWORD *)operator new();
      *v13 = &off_1E42E7B80;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v12;
      v14 = *(std::__shared_weak_count **)(v1 + 120);
      *(_QWORD *)(v1 + 112) = v12;
      *(_QWORD *)(v1 + 120) = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::mutex::unlock((std::mutex *)v1);
      do
        __ldaxr(v2);
      while (__stlxr(3u, v2));
      v10 = 0;
      atomic_store(0, (unsigned int *)(v1 + 136));
    }
    else
    {
      v18 = (unsigned int *)(v1 + 136);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      if (v19 <= 0xA)
      {
        do
          __ldaxr(v2);
        while (__stlxr(0, v2));
        v10 = 1;
      }
      else
      {
        do
          __ldaxr(v2);
        while (__stlxr(4u, v2));
        v10 = 2;
      }
    }

  }
  else
  {
    do
      __ldaxr(v2);
    while (__stlxr(4u, v2));
    if (GEOGetGeoGLMetalSwapchainLog(void)::onceToken != -1)
      dispatch_once(&GEOGetGeoGLMetalSwapchainLog(void)::onceToken, &__block_literal_global_40250);
    v9 = GEOGetGeoGLMetalSwapchainLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalSwapchainLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315650;
      v22 = "false";
      v23 = 2080;
      v24 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalSwapchainDrawable.mm";
      v25 = 1024;
      v26 = 128;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Mismatching texture size: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v21, 0x1Cu);
    }
    v10 = 2;
  }

  return v10;
}

void sub_19F1F51D4(_Unwind_Exception *a1)
{
  void *v1;
  std::mutex *v2;
  void *v3;
  id *v4;
  id *v5;

  v5 = v4;

  MEMORY[0x1A1AF4E00](v5, 0x80C40B8603338);
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

void ggl::MetalResourceManager::updateTextureWithResource(ggl::MetalResourceManager *this, const ggl::Texture *a2, void *a3)
{
  void *v5;
  ggl::MetalTextureResource *v6;
  unsigned __int8 v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;

  v5 = a3;
  v6 = (ggl::MetalTextureResource *)*((_QWORD *)a2 + 3);
  if (v6)
    goto LABEL_14;
  {
    v16 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "GeoGL", 0xA3D02C1100000005);
  }
  v6 = (ggl::MetalTextureResource *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                                         + 16))(ggl::Allocator::instance(void)::alloc, 136, 8);
  ggl::MetalTextureResource::MetalTextureResource(v6);
  if (this)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v8)
    {
      v9 = *((_QWORD *)this + 1);
      v10 = std::__shared_weak_count::lock(v8);
      if (v10)
        goto LABEL_8;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
  v9 = 0;
  v10 = 0;
LABEL_8:
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = v9;
  *((_QWORD *)a2 + 2) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *((_QWORD *)a2 + 3) = v6;
  ++*((_DWORD *)a2 + 8);
LABEL_14:
  v14 = (void **)*((_QWORD *)v6 + 4);
  v15 = *v14;
  *v14 = v5;

}

void sub_19F1F5378(ggl::Allocator *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = ggl::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v2, 136);

  _Unwind_Resume((_Unwind_Exception *)a1);
}

BOOL geo::codec::MaterialSheet::decodeMaterial(geo::codec::MaterialSheet *this, geo::ibitstream *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _BOOL8 v8;
  unint64_t v9;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  _BOOL8 v23;
  char v25;
  int v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  _BOOL8 v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  char v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  char v60;
  _BOOL8 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned __int16 v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  __int16 v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned __int8 v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _BYTE *v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  unint64_t *v151;
  uint64_t v152;
  __int128 v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  int i;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  int v173;
  _BOOL8 v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  unint64_t v182;
  char v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  int v188;
  int v189;
  char v190;
  _BOOL8 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  unint64_t v199;
  unsigned int v200;
  int v201;
  int v202;
  unint64_t v203;
  char *v204;
  _QWORD *v205;
  void *v206;
  int64_t v207;
  char *v208;
  size_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  _BOOL8 v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unsigned __int8 v224;
  int v225;
  unint64_t v226;
  unsigned int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  uint64_t v234;
  uint64_t v235;
  char **v236;
  geo::codec::MaterialSheet::Material **v237;
  unsigned __int16 v239;
  char *v240;
  int v241;
  geo::codec::MaterialSheet *v242;
  unsigned __int8 v244;
  unsigned __int16 v245[2];
  unsigned int v246;
  uint64_t v247;
  void *__p;
  unint64_t *v249;
  unint64_t *v250;
  uint8_t buf[32];
  _QWORD v252[3];
  __int128 v253;
  int v254;
  __int128 v255;
  __int128 v256;
  int v257;
  __int128 v258;
  __int128 v259;
  int v260;
  __int128 v261;
  __int128 v262;
  int v263;
  __int128 v264;
  __int128 v265;
  int v266;
  __int128 v267;
  __int128 v268;
  int v269;
  __int128 v270;
  __int128 v271;
  int v272;
  __int128 v273;
  __int128 v274;
  int v275;
  __int128 v276;
  __int128 v277;
  int v278;
  __int16 v279;
  _DWORD v280[11];
  __int16 v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = v5 + 2;
  v7 = *((unsigned __int8 *)a2 + 24);
  v8 = *((_BYTE *)a2 + 24) != 0;
  v9 = v5 + 3;
  if (!*((_BYTE *)a2 + 24))
    v9 = v5 + 2;
  if (v4 < v9)
    return 0;
  v12 = *(_QWORD *)a2;
  if (*((_BYTE *)a2 + 24))
  {
    v13 = 8 - v7;
    v14 = 0xFFFF << (8 - v7);
    v15 = v5 + 1;
    v16 = v5 + 1 >= v4 ? 0 : *(unsigned __int8 *)(v12 + v15);
    v17 = ((v16 & v14) >> v13) | ((((1 << (8 - v7)) - 1) & *(_BYTE *)(v12 + v5)) << v7);
    *((_QWORD *)a2 + 2) = v15;
    v19 = *(unsigned __int8 *)(v12 + v15);
    v20 = v6 >= v4 ? 0 : *(unsigned __int8 *)(v12 + v6);
    v18 = ((v20 & v14) >> v13) | ((((1 << (8 - v7)) + 255) & v19) << v7);
  }
  else
  {
    v17 = *(unsigned __int16 *)(v12 + v5);
    v18 = v17 >> 8;
  }
  *((_QWORD *)a2 + 2) = v6;
  v21 = v17 | (unsigned __int16)((_WORD)v18 << 8);
  *(_WORD *)this = v21;
  v22 = v5 + 4;
  if (v4 < v5 + 4 + v8)
    return 0;
  if (v7)
  {
    v25 = 8 - v7;
    v26 = 0xFFFF << (8 - v7);
    v27 = *(_BYTE *)(v12 + v6);
    v28 = v5 + 3;
    if (v28 >= v4)
      v29 = 0;
    else
      v29 = *(unsigned __int8 *)(v12 + v28);
    *((_QWORD *)a2 + 2) = v28;
    v32 = *(unsigned __int8 *)(v12 + v28);
    if (v22 >= v4)
      v33 = 0;
    else
      v33 = *(unsigned __int8 *)(v12 + v22);
    *((_QWORD *)a2 + 2) = v22;
    v31 = (((v29 & v26) >> v25) | ((((1 << (8 - v7)) - 1) & v27) << v7)) | ((((v33 & v26) >> v25) | ((((1 << (8 - v7)) + 255) & v32) << v7)) << 8);
    v242 = this;
    if ((((v29 & v26) >> v25) | ((((1 << (8 - v7)) - 1) & v27) << v7)) | (unsigned __int16)(((unsigned __int16)((v33 & v26) >> v25) | (unsigned __int16)(((unsigned __int16)((1 << (8 - v7)) + 255) & (unsigned __int16)v32) << v7)) << 8))
      goto LABEL_26;
  }
  else
  {
    v30 = *(unsigned __int16 *)(v12 + v6);
    *((_QWORD *)a2 + 2) = v22;
    v31 = v30 | (v30 >> 8 << 8);
    v242 = this;
    if ((_WORD)v31)
    {
LABEL_26:
      v34 = 0;
      v35 = (char *)this + 56;
      v240 = (char *)this + 464;
      while (1)
      {
        v36 = *((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        v38 = v37 + 2;
        if (!*((_BYTE *)a2 + 24))
          v38 = v37 + 1;
        if (v36 < v38)
          return 0;
        v39 = v37 + 1;
        v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
        if (*((_BYTE *)a2 + 24))
        {
          if (v39 >= v36)
            v41 = 0;
          else
            v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v39);
          v40 = ((v41 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v40) << *((_BYTE *)a2 + 24));
        }
        *((_QWORD *)a2 + 2) = v39;
        if (a3 < 0x15)
        {
          v42 = 0;
          if (v40 < 0xAu)
            goto LABEL_42;
        }
        else
        {
          geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
          if (!buf[0])
            return 0;
          v42 = *(_QWORD *)&buf[8];
          if (v40 < 0xAu)
          {
LABEL_42:
            v43 = *((unsigned __int8 *)a2 + 24);
            v44 = *((_BYTE *)a2 + 24) != 0;
            v45 = *((_QWORD *)a2 + 1);
            v46 = *((_QWORD *)a2 + 2);
            v47 = v46 + 2;
            if (!*((_BYTE *)a2 + 24))
              v47 = v46 + 1;
            if (v45 < v47)
              return 0;
            v48 = v46 + 1;
            v49 = *(_QWORD *)a2;
            v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v46);
            if (*((_BYTE *)a2 + 24))
            {
              if (v48 >= v45)
                v51 = 0;
              else
                v51 = *(unsigned __int8 *)(v49 + v48);
              v54 = 0xFFFF << (8 - v43);
              v50 = ((v51 & v54) >> (8 - v43)) | ((((1 << (8 - v43)) + 255) & v50) << v43);
              *((_QWORD *)a2 + 2) = v48;
              LOBYTE(__p) = v50;
              v52 = v46 + 2;
              if (v45 < v46 + 2 + v44)
                return 0;
              if (v52 >= v45)
                v55 = 0;
              else
                v55 = *(unsigned __int8 *)(v49 + v52);
              v53 = ((v55 & v54) >> (8 - v43)) | ((((1 << (8 - v43)) - 1) & *(_BYTE *)(v49 + v48)) << v43);
              *((_QWORD *)a2 + 2) = v52;
              if (v53)
                goto LABEL_58;
LABEL_50:
              *(_WORD *)buf = 6144;
              if (!geo::codec::MaterialSheet::decodeProperty(a2, v40, (unsigned __int8 *)&__p, (unsigned __int16 *)buf, (uint64_t)v35))return 0;
            }
            else
            {
              *((_QWORD *)a2 + 2) = v48;
              LOBYTE(__p) = v50;
              v52 = v46 + 2;
              if (v45 < v46 + 2 + v44)
                return 0;
              v53 = *(_BYTE *)(v49 + v48);
              *((_QWORD *)a2 + 2) = v52;
              if (!v53)
                goto LABEL_50;
LABEL_58:
              v56 = v46 + 3;
              if (v45 < v56 + v44)
                return 0;
              v57 = *(unsigned __int8 *)(v49 + v52);
              if (v43)
              {
                if (v56 >= v45)
                  v58 = 0;
                else
                  v58 = *(unsigned __int8 *)(v49 + v56);
                v57 = (((v58 & (0xFFFF << (8 - v43))) >> (8 - v43)) | ((((1 << (8 - v43)) - 1) & v57) << v43));
              }
              *((_QWORD *)a2 + 2) = v56;
              if (v57)
              {
                v59 = 0;
                do
                {
                  v60 = *((_BYTE *)a2 + 24);
                  v61 = v60 != 0;
                  v63 = *((_QWORD *)a2 + 1);
                  v62 = *((_QWORD *)a2 + 2);
                  v64 = v62 + 2;
                  if (!v60)
                    v64 = v62 + 1;
                  if (v63 < v64)
                    return 0;
                  v65 = v62 + 1;
                  v66 = *(_QWORD *)a2;
                  v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v62);
                  if (*((_BYTE *)a2 + 24))
                  {
                    if (v65 >= v63)
                      v68 = 0;
                    else
                      v68 = *(unsigned __int8 *)(v66 + v65);
                    *((_QWORD *)a2 + 2) = v65;
                    v69 = v62 + 2;
                    if (v63 < v69 + v61)
                      return 0;
                    if (v69 >= v63)
                      v71 = 0;
                    else
                      v71 = *(unsigned __int8 *)(v66 + v69);
                    v72 = 0xFFFF << (8 - v60);
                    v67 = ((v68 & v72) >> (8 - v60)) | ((((1 << (8 - v60)) + 255) & v67) << v60);
                    v70 = ((v71 & v72) >> (8 - v60)) | ((((1 << (8 - v60)) - 1) & *(_BYTE *)(v66 + v65)) << v60);
                  }
                  else
                  {
                    *((_QWORD *)a2 + 2) = v65;
                    v69 = v62 + 2;
                    if (v63 < v69 + v61)
                      return 0;
                    LOBYTE(v70) = *(_BYTE *)(v66 + v65);
                  }
                  *((_QWORD *)a2 + 2) = v69;
                  buf[0] = v67;
                  buf[1] = v70;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v40, (unsigned __int8 *)&__p, (unsigned __int16 *)buf, (uint64_t)v35))return 0;
                }
                while (++v59 < v57);
              }
            }
            std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>((uint64_t)v240, v50, v50, v53);
            goto LABEL_28;
          }
        }
        *((_QWORD *)a2 + 2) += v42;
LABEL_28:
        this = v242;
        if ((unsigned __int16)++v34 >= (unsigned __int16)v31)
        {
          v21 = *(_WORD *)v242;
          v22 = *((_QWORD *)a2 + 2);
          break;
        }
      }
    }
  }
  *((_WORD *)this + 252) = v21;
  v73 = v22 + 2;
  v74 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
    v75 = v22 + 3;
  else
    v75 = v22 + 2;
  v76 = *((_QWORD *)a2 + 1);
  if (v76 < v75)
    return 0;
  v77 = *(_QWORD *)a2;
  if (*((_BYTE *)a2 + 24))
  {
    v78 = 8 - v74;
    v79 = (1 << (8 - v74)) + 255;
    v80 = 0xFFFF << (8 - v74);
    v81 = *(unsigned __int8 *)(v77 + v22);
    v82 = v22 + 1;
    if (v82 >= v76)
      v83 = 0;
    else
      v83 = *(unsigned __int8 *)(v77 + v82);
    v86 = ((v83 & v80) >> v78) | ((v79 & v81) << v74);
    *((_QWORD *)a2 + 2) = v82;
    v84 = *(unsigned __int8 *)(v77 + v82);
    if (v73 >= v76)
      v87 = 0;
    else
      v87 = *(unsigned __int8 *)(v77 + v73);
    v85 = ((v87 & v80) >> v78) | ((v79 & v84) << v74);
    LOBYTE(v84) = v86;
  }
  else
  {
    v84 = *(unsigned __int16 *)(v77 + v22);
    v85 = v84 >> 8;
  }
  *((_QWORD *)a2 + 2) = v73;
  v88 = v84 | (unsigned __int16)((_WORD)v85 << 8);
  if (v88)
  {
    v89 = 0;
    v237 = (geo::codec::MaterialSheet::Material **)((char *)this + 8);
    v236 = (char **)((char *)this + 32);
    v239 = v88;
    while (1)
    {
      v241 = v89;
      memset(buf, 0, sizeof(buf));
      *(_OWORD *)&v252[1] = 0u;
      v253 = 0u;
      LODWORD(v252[0]) = 1065353216;
      v254 = 1065353216;
      v255 = 0u;
      v256 = 0u;
      v257 = 1065353216;
      v258 = 0u;
      v259 = 0u;
      v260 = 1065353216;
      v261 = 0u;
      v262 = 0u;
      v263 = 1065353216;
      v264 = 0u;
      v265 = 0u;
      v266 = 1065353216;
      v267 = 0u;
      v268 = 0u;
      v269 = 1065353216;
      v270 = 0u;
      v271 = 0u;
      v272 = 1065353216;
      v273 = 0u;
      v274 = 0u;
      v275 = 1065353216;
      v276 = 0u;
      v277 = 0u;
      v278 = 1065353216;
      v279 = 0;
      memset(v280, 0, 36);
      v280[9] = 1065353216;
      v281 = *(_WORD *)this;
      v90 = *((unsigned __int8 *)a2 + 24);
      v91 = *((_QWORD *)a2 + 1);
      v92 = *((_QWORD *)a2 + 2);
      if (a3 < 0x13)
      {
        v93 = *((_QWORD *)a2 + 2);
        goto LABEL_113;
      }
      v93 = v92 + 2;
      v94 = v92 + 3;
      if (!*((_BYTE *)a2 + 24))
        v94 = v92 + 2;
      if (v91 < v94)
      {
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)buf);
        return 0;
      }
      v95 = *(_QWORD *)a2;
      if (*((_BYTE *)a2 + 24))
        break;
      v100 = *(unsigned __int16 *)(v95 + v92);
      v101 = v100;
      LODWORD(v95) = v100 >> 8;
LABEL_112:
      *((_QWORD *)a2 + 2) = v93;
      v279 = v101 | ((_WORD)v95 << 8);
LABEL_113:
      __p = 0;
      v249 = 0;
      v250 = 0;
      v103 = v93 + 2;
      v104 = v93 + 3;
      if (!v90)
        v104 = v93 + 2;
      if (v91 < v104)
        goto LABEL_116;
      v107 = *(_QWORD *)a2;
      if (!v90)
      {
        v112 = *(unsigned __int16 *)(v107 + v93);
        *((_QWORD *)a2 + 2) = v103;
        v113 = v112 | (v112 >> 8 << 8);
        if (!(_DWORD)v113)
          goto LABEL_123;
        goto LABEL_130;
      }
      v108 = v93 + 1;
      if (v93 + 1 >= v91)
      {
        v109 = 0;
        v110 = *(unsigned __int8 *)(v107 + v93);
        *((_QWORD *)a2 + 2) = v108;
        if (v103 >= v91)
        {
LABEL_121:
          v111 = 0;
          goto LABEL_129;
        }
      }
      else
      {
        v109 = *(unsigned __int8 *)(v107 + v108);
        v110 = *(unsigned __int8 *)(v107 + v93);
        *((_QWORD *)a2 + 2) = v108;
        if (v103 >= v91)
          goto LABEL_121;
      }
      v111 = *(unsigned __int8 *)(v107 + v103);
LABEL_129:
      v117 = 0xFFFF << (8 - v90);
      v118 = (((v111 & v117) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(_BYTE *)(v107 + v108)) << v90));
      *((_QWORD *)a2 + 2) = v103;
      v113 = (((v109 & v117) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v110) << v90)) | (v118 << 8);
      if (!(_DWORD)v113)
      {
LABEL_123:
        v114 = 0;
        v115 = v103 + 2;
        v116 = v103 + 3;
        if (!v90)
          v116 = v103 + 2;
        if (v91 >= v116)
        {
LABEL_175:
          v155 = *(_QWORD *)a2;
          if (v90)
          {
            v156 = v103 + 1;
            if (v103 + 1 >= v91)
              v157 = 0;
            else
              v157 = *(unsigned __int8 *)(v155 + v156);
            v161 = *(unsigned __int8 *)(v155 + v103);
            *((_QWORD *)a2 + 2) = v156;
            if (v115 >= v91)
              v162 = 0;
            else
              v162 = *(unsigned __int8 *)(v155 + v115);
            v163 = 0xFFFF << (8 - v90);
            v159 = (((v157 & v163) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v161) << v90));
            v160 = (((v162 & v163) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(_BYTE *)(v155 + v156)) << v90));
          }
          else
          {
            v158 = *(unsigned __int16 *)(v155 + v103);
            v159 = *(_WORD *)(v155 + v103);
            v160 = v158 >> 8;
          }
          *((_QWORD *)a2 + 2) = v115;
          v164 = v159 | (v160 << 8);
          if (v164)
          {
            for (i = 0; v164 > (unsigned __int16)i; ++i)
            {
              while (1)
              {
                v166 = *((_QWORD *)a2 + 1);
                v167 = *((_QWORD *)a2 + 2);
                v168 = v167 + 2;
                if (!*((_BYTE *)a2 + 24))
                  v168 = v167 + 1;
                if (v166 < v168)
                  goto LABEL_116;
                v169 = v167 + 1;
                v170 = *(unsigned __int8 *)(*(_QWORD *)a2 + v167);
                if (*((_BYTE *)a2 + 24))
                {
                  if (v169 >= v166)
                    v171 = 0;
                  else
                    v171 = *(unsigned __int8 *)(*(_QWORD *)a2 + v169);
                  v170 = ((v171 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v170) << *((_BYTE *)a2 + 24));
                }
                *((_QWORD *)a2 + 2) = v169;
                if (a3 >= 0x15)
                  break;
                v172 = 0;
                if (v170 < 0xAu)
                  goto LABEL_200;
LABEL_186:
                *((_QWORD *)a2 + 2) += v172;
                if (v164 <= (unsigned __int16)++i)
                  goto LABEL_241;
              }
              geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)v245);
              if (!LOBYTE(v245[0]))
                goto LABEL_116;
              v172 = v247;
              if (v170 >= 0xAu)
                goto LABEL_186;
LABEL_200:
              v173 = *((unsigned __int8 *)a2 + 24);
              v174 = *((_BYTE *)a2 + 24) != 0;
              v175 = *((_QWORD *)a2 + 1);
              v176 = *((_QWORD *)a2 + 2);
              v177 = v176 + 2;
              if (!*((_BYTE *)a2 + 24))
                v177 = v176 + 1;
              if (v175 < v177)
                goto LABEL_116;
              v178 = v176 + 1;
              v179 = *(_QWORD *)a2;
              v180 = *(unsigned __int8 *)(*(_QWORD *)a2 + v176);
              if (*((_BYTE *)a2 + 24))
              {
                if (v178 >= v175)
                  v181 = 0;
                else
                  v181 = *(unsigned __int8 *)(v179 + v178);
                v184 = 0xFFFF << (8 - v173);
                v180 = ((v181 & v184) >> (8 - v173)) | ((((1 << (8 - v173)) + 255) & v180) << v173);
                *((_QWORD *)a2 + 2) = v178;
                v244 = v180;
                v182 = v176 + 2;
                if (v175 < v176 + 2 + v174)
                  goto LABEL_246;
                if (v182 >= v175)
                  v185 = 0;
                else
                  v185 = *(unsigned __int8 *)(v179 + v182);
                v183 = ((v185 & v184) >> (8 - v173)) | ((((1 << (8 - v173)) - 1) & *(_BYTE *)(v179 + v178)) << v173);
                *((_QWORD *)a2 + 2) = v182;
                if (!v183)
                {
LABEL_208:
                  v245[0] = 6144;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v170, &v244, v245, (uint64_t)buf))
                    goto LABEL_246;
                  goto LABEL_240;
                }
              }
              else
              {
                *((_QWORD *)a2 + 2) = v178;
                v244 = v180;
                v182 = v176 + 2;
                if (v175 < v176 + 2 + v174)
                  goto LABEL_246;
                v183 = *(_BYTE *)(v179 + v178);
                *((_QWORD *)a2 + 2) = v182;
                if (!v183)
                  goto LABEL_208;
              }
              v186 = v176 + 3;
              if (v175 < v186 + v174)
                goto LABEL_246;
              v187 = *(unsigned __int8 *)(v179 + v182);
              if (v173)
              {
                if (v186 >= v175)
                  v188 = 0;
                else
                  v188 = *(unsigned __int8 *)(v179 + v186);
                v187 = (((v188 & (0xFFFF << (8 - v173))) >> (8 - v173)) | ((((1 << (8 - v173)) - 1) & v187) << v173));
              }
              *((_QWORD *)a2 + 2) = v186;
              if (v187)
              {
                v189 = 0;
                do
                {
                  v190 = *((_BYTE *)a2 + 24);
                  v191 = v190 != 0;
                  v193 = *((_QWORD *)a2 + 1);
                  v192 = *((_QWORD *)a2 + 2);
                  v194 = v192 + 2;
                  if (!v190)
                    v194 = v192 + 1;
                  if (v193 < v194)
                    goto LABEL_246;
                  v195 = v192 + 1;
                  v196 = *(_QWORD *)a2;
                  v197 = *(unsigned __int8 *)(*(_QWORD *)a2 + v192);
                  if (*((_BYTE *)a2 + 24))
                  {
                    if (v195 >= v193)
                      v198 = 0;
                    else
                      v198 = *(unsigned __int8 *)(v196 + v195);
                    *((_QWORD *)a2 + 2) = v195;
                    v199 = v192 + 2;
                    if (v193 < v199 + v191)
                      goto LABEL_246;
                    if (v199 >= v193)
                      v201 = 0;
                    else
                      v201 = *(unsigned __int8 *)(v196 + v199);
                    v202 = 0xFFFF << (8 - v190);
                    v197 = ((v198 & v202) >> (8 - v190)) | ((((1 << (8 - v190)) + 255) & v197) << v190);
                    v200 = ((v201 & v202) >> (8 - v190)) | ((((1 << (8 - v190)) - 1) & *(_BYTE *)(v196 + v195)) << v190);
                  }
                  else
                  {
                    *((_QWORD *)a2 + 2) = v195;
                    v199 = v192 + 2;
                    if (v193 < v199 + v191)
                      goto LABEL_246;
                    LOBYTE(v200) = *(_BYTE *)(v196 + v195);
                  }
                  *((_QWORD *)a2 + 2) = v199;
                  LOBYTE(v245[0]) = v197;
                  HIBYTE(v245[0]) = v200;
                  if (!geo::codec::MaterialSheet::decodeProperty(a2, v170, &v244, v245, (uint64_t)buf))
                    goto LABEL_246;
                }
                while (++v189 < v187);
              }
LABEL_240:
              std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>((uint64_t)&v280[1], v180, v180, v183);
              this = v242;
            }
          }
LABEL_241:
          if (a3 < 0x14)
          {
LABEL_244:
            v203 = *((_QWORD *)this + 2);
            if (v203 >= *((_QWORD *)this + 3))
            {
              v204 = std::vector<geo::codec::MaterialSheet::Material>::__push_back_slow_path<geo::codec::MaterialSheet::Material const&>(v237, (const geo::codec::MaterialSheet::Material *)buf);
            }
            else
            {
              geo::codec::MaterialSheet::Material::Material(*((geo::codec::MaterialSheet::Material **)this + 2), (const geo::codec::MaterialSheet::Material *)buf);
              v204 = (char *)(v203 + 456);
              *((_QWORD *)this + 2) = v203 + 456;
            }
            *((_QWORD *)this + 2) = v204;
            v205 = (_QWORD *)*((_QWORD *)this + 5);
            if ((unint64_t)v205 >= *((_QWORD *)this + 6))
            {
              v210 = std::vector<std::vector<std::pair<unsigned short,unsigned int>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,unsigned int>> const&>(v236, __p, (uint64_t)v114);
            }
            else
            {
              *v205 = 0;
              v205[1] = 0;
              v205[2] = 0;
              v206 = __p;
              v207 = (char *)v114 - (_BYTE *)__p;
              if (v207)
              {
                if (v207 < 0)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v208 = (char *)operator new(v207);
                *v205 = v208;
                v205[1] = v208;
                v205[2] = &v208[8 * (v207 >> 3)];
                v209 = v207 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v208, v206, v209);
                v205[1] = &v208[v209];
              }
              v210 = (char *)(v205 + 3);
              *((_QWORD *)this + 5) = v205 + 3;
            }
            *((_QWORD *)this + 5) = v210;
            v105 = 1;
            v106 = __p;
            if (__p)
              goto LABEL_247;
            goto LABEL_248;
          }
          geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)v245);
          if (LOBYTE(v245[0]))
          {
            v280[0] = v247;
            goto LABEL_244;
          }
        }
LABEL_116:
        v105 = 0;
        v106 = __p;
        if (__p)
          goto LABEL_247;
        goto LABEL_248;
      }
LABEL_130:
      v114 = (unint64_t *)operator new(8 * v113);
      v119 = 0;
      __p = v114;
      v249 = v114;
      v250 = &v114[v113];
      while (1)
      {
        v121 = *((_QWORD *)a2 + 1);
        v120 = *((_QWORD *)a2 + 2);
        v122 = v120 + 2;
        v123 = *((_BYTE *)a2 + 24);
        v124 = v120 + 3;
        if (!v123)
          v124 = v120 + 2;
        if (v121 < v124)
          break;
        v125 = *(_QWORD *)a2;
        if (*((_BYTE *)a2 + 24))
        {
          v126 = v120 + 1;
          if (v120 + 1 >= v121)
          {
            v127 = 0;
            v128 = *(_BYTE *)(v125 + v120);
            *((_QWORD *)a2 + 2) = v126;
            if (v122 < v121)
              goto LABEL_141;
LABEL_138:
            v129 = 0;
          }
          else
          {
            v127 = *(unsigned __int8 *)(v125 + v126);
            v128 = *(_BYTE *)(v125 + v120);
            *((_QWORD *)a2 + 2) = v126;
            if (v122 >= v121)
              goto LABEL_138;
LABEL_141:
            v129 = *(unsigned __int8 *)(v125 + v122);
          }
          v132 = 0xFFFF << (8 - v123);
          v130 = (((v127 & v132) >> (8 - v123)) | ((((1 << (8 - v123)) - 1) & v128) << v123));
          v131 = (((v129 & v132) >> (8 - v123)) | ((((1 << (8 - v123)) - 1) & *(_BYTE *)(v125 + v126)) << v123));
          goto LABEL_143;
        }
        v130 = *(_WORD *)(v125 + v120);
        v131 = HIBYTE(*(unsigned __int16 *)(v125 + v120));
LABEL_143:
        *((_QWORD *)a2 + 2) = v122;
        geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)v245);
        if (!LOBYTE(v245[0]))
          break;
        v133 = v130 | (v131 << 8);
        v134 = v246;
        if (v114 < v250)
        {
          *v114++ = v133 | ((unint64_t)v246 << 32);
          v249 = v114;
          if (v113 <= (unsigned __int16)++v119)
            goto LABEL_172;
        }
        else
        {
          v135 = (unint64_t *)__p;
          v136 = (char *)v114 - (_BYTE *)__p;
          v137 = ((char *)v114 - (_BYTE *)__p) >> 3;
          v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 61)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v139 = (char *)v250 - (_BYTE *)__p;
          if (((char *)v250 - (_BYTE *)__p) >> 2 > v138)
            v138 = v139 >> 2;
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
            v140 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v140 = v138;
          if (v140)
          {
            if (v140 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v141 = operator new(8 * v140);
          }
          else
          {
            v141 = 0;
          }
          v142 = (unint64_t *)&v141[8 * v137];
          *v142 = v133 | (v134 << 32);
          v143 = v142 + 1;
          if (v114 == v135)
          {
            __p = &v141[8 * v137];
            v249 = v142 + 1;
            v250 = (unint64_t *)&v141[8 * v140];
            goto LABEL_163;
          }
          v144 = (char *)v114 - (char *)v135 - 8;
          if (v144 < 0x168
            || (v147 = ((char *)(v114 - 1) - (char *)v135) & 0xFFFFFFFFFFFFFFF8,
                &v141[v136 - 8 - v147] > &v141[v136 - 8])
            || (unint64_t *)((char *)v114 - v147 - 8) > v114 - 1
            || (unint64_t)((char *)v114 - v141 - v136) < 0x20)
          {
            v145 = v114;
          }
          else
          {
            v148 = (v144 >> 3) + 1;
            v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
            v145 = &v114[v149 / 0xFFFFFFFFFFFFFFF8];
            v142 = (unint64_t *)((char *)v142 - v149);
            v150 = &v141[8 * v137 - 16];
            v151 = v114 - 2;
            v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *v150 = v153;
              v150 -= 2;
              v151 -= 4;
              v152 -= 4;
            }
            while (v152);
            if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_159;
          }
          do
          {
            v146 = *--v145;
            *--v142 = v146;
          }
          while (v145 != v135);
LABEL_159:
          v114 = (unint64_t *)__p;
          __p = v142;
          v249 = v143;
          v250 = (unint64_t *)&v141[8 * v140];
          if (v114)
          {
LABEL_163:
            operator delete(v114);
            v114 = v143;
            v249 = v143;
            if (v113 <= (unsigned __int16)++v119)
            {
LABEL_172:
              v90 = *((unsigned __int8 *)a2 + 24);
              v91 = *((_QWORD *)a2 + 1);
              v103 = *((_QWORD *)a2 + 2);
              this = v242;
              v115 = v103 + 2;
              v154 = v103 + 3;
              if (!*((_BYTE *)a2 + 24))
                v154 = v103 + 2;
              if (v91 >= v154)
                goto LABEL_175;
              goto LABEL_116;
            }
          }
          else
          {
            v114 = v143;
            v249 = v143;
            if (v113 <= (unsigned __int16)++v119)
              goto LABEL_172;
          }
        }
      }
LABEL_246:
      v105 = 0;
      this = v242;
      v106 = __p;
      if (!__p)
        goto LABEL_248;
LABEL_247:
      operator delete(v106);
LABEL_248:
      geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)buf);
      if ((v105 & 1) == 0)
        return 0;
      v89 = v241 + 1;
      if ((unsigned __int16)(v241 + 1) >= v239)
      {
        v74 = *((unsigned __int8 *)a2 + 24);
        v76 = *((_QWORD *)a2 + 1);
        v73 = *((_QWORD *)a2 + 2);
        goto LABEL_260;
      }
    }
    v96 = v92 + 1;
    if (v92 + 1 >= v91)
    {
      v97 = 0;
      v98 = *(unsigned __int8 *)(v95 + v92);
      *((_QWORD *)a2 + 2) = v96;
      if (v93 >= v91)
        goto LABEL_106;
    }
    else
    {
      v97 = *(unsigned __int8 *)(v95 + v96);
      v98 = *(unsigned __int8 *)(v95 + v92);
      *((_QWORD *)a2 + 2) = v96;
      if (v93 >= v91)
      {
LABEL_106:
        v99 = 0;
LABEL_111:
        v102 = 0xFFFF << (8 - v90);
        v101 = (((v97 & v102) >> (8 - v90)) | ((((1 << (8 - v90)) + 255) & v98) << v90));
        LOWORD(v95) = (((v99 & v102) >> (8 - v90)) | ((((1 << (8 - v90)) - 1) & *(_BYTE *)(v95 + v96)) << v90));
        goto LABEL_112;
      }
    }
    v99 = *(unsigned __int8 *)(v95 + v93);
    goto LABEL_111;
  }
LABEL_260:
  v211 = v73 + 2;
  if (!v74)
    v211 = v73 + 1;
  if (v76 < v211)
    return 0;
  v212 = v73 + 1;
  v213 = *(unsigned __int8 *)(*(_QWORD *)a2 + v73);
  if (v74)
  {
    if (v212 >= v76)
      v214 = 0;
    else
      v214 = *(unsigned __int8 *)(*(_QWORD *)a2 + v212);
    v213 = ((v214 & (0xFFFF << (8 - v74))) >> (8 - v74)) | ((((1 << (8 - v74)) - 1) & v213) << v74);
  }
  *((_QWORD *)a2 + 2) = v212;
  std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::resize((uint64_t)this + 512, v213);
  v215 = *((_QWORD *)this + 64);
  v216 = *((_QWORD *)v242 + 65);
  if (v215 == v216)
    return 1;
  if (a3 <= 0x13)
  {
    while (1)
    {
      geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
      if (!buf[0])
        return 0;
      v230 = *(_QWORD *)&buf[8];
      v23 = *(_QWORD *)&buf[8] != 0;
      if (!*(_QWORD *)&buf[8])
        return v23;
      v232 = *((_QWORD *)a2 + 2);
      if (*(_QWORD *)&buf[8] > *((_QWORD *)a2 + 1)
                              - ((v232 + ((unint64_t)*((unsigned __int8 *)a2 + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
        break;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((unint64_t *)v215, (char *)(*(_QWORD *)a2 + v232), (char *)(*(_QWORD *)a2 + v232 + *(_QWORD *)&buf[8]), *(unint64_t *)&buf[8]);
      *((_QWORD *)a2 + 2) += v230;
      v215 += 40;
      if (v215 == v216)
        return v23;
    }
LABEL_298:
    if (qword_1ECE65BD8 == -1)
    {
      v233 = _MergedGlobals_5;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_5, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&qword_1ECE65BD8, &__block_literal_global_4);
      v233 = _MergedGlobals_5;
      if (!os_log_type_enabled((os_log_t)_MergedGlobals_5, OS_LOG_TYPE_ERROR))
        return 0;
    }
    v234 = *((_QWORD *)a2 + 1);
    v235 = *((unsigned __int8 *)a2 + 24) + 8 * *((_QWORD *)a2 + 2);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v234;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v235;
    LOWORD(v252[0]) = 2048;
    *(_QWORD *)((char *)v252 + 2) = v230;
    _os_log_impl(&dword_19F029000, v233, OS_LOG_TYPE_ERROR, "Texture size overflows the buffer for MaterialID = %llu, binary size = %zu, current bit offset = %llu, raw texture size = %llu", buf, 0x2Au);
    return 0;
  }
  v23 = 1;
  while (1)
  {
    geo::ibitstream::readUInt32((uint64_t *)a2, (uint64_t)buf);
    if (!buf[0])
      return 0;
    *(_DWORD *)(v215 + 36) = *(_DWORD *)&buf[4];
    v217 = *((_BYTE *)a2 + 24);
    v218 = v217 != 0;
    v219 = *((_QWORD *)a2 + 1);
    v220 = *((_QWORD *)a2 + 2);
    v221 = v220 + 2;
    if (!v217)
      v221 = v220 + 1;
    if (v219 < v221)
      return 0;
    v222 = v220 + 1;
    v223 = *(_QWORD *)a2;
    v224 = *(_BYTE *)(*(_QWORD *)a2 + v220);
    if (*((_BYTE *)a2 + 24))
    {
      if (v222 >= v219)
        v225 = 0;
      else
        v225 = *(unsigned __int8 *)(v223 + v222);
      v228 = 0xFFFF << (8 - v217);
      *((_QWORD *)a2 + 2) = v222;
      *(_BYTE *)(v215 + 32) = ((v225 & v228) >> (8 - v217)) | ((((1 << (8 - v217)) - 1) & v224) << v217);
      v226 = v220 + 2;
      if (v219 < v226 + v218)
        return 0;
      if (v226 >= v219)
        v229 = 0;
      else
        v229 = *(unsigned __int8 *)(v223 + v226);
      v227 = ((v229 & v228) >> (8 - v217)) | ((((1 << (8 - v217)) + 255) & *(unsigned __int8 *)(v223 + v222)) << v217);
    }
    else
    {
      *((_QWORD *)a2 + 2) = v222;
      *(_BYTE *)(v215 + 32) = v224;
      v226 = v220 + 2;
      if (v219 < v226 + v218)
        return 0;
      LOBYTE(v227) = *(_BYTE *)(v223 + v222);
    }
    *((_QWORD *)a2 + 2) = v226;
    *(_BYTE *)(v215 + 33) = v227;
    geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)buf);
    if (!buf[0])
      return 0;
    v230 = *(_QWORD *)&buf[8];
    if (!*(_QWORD *)&buf[8])
      return 0;
    v231 = *((_QWORD *)a2 + 2);
    if (*(_QWORD *)&buf[8] > *((_QWORD *)a2 + 1)
                            - ((v231 + ((unint64_t)*((unsigned __int8 *)a2 + 24) >> 3)) & 0x1FFFFFFFFFFFFFFFLL))
      goto LABEL_298;
    std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((unint64_t *)v215, (char *)(*(_QWORD *)a2 + v231), (char *)(*(_QWORD *)a2 + v231 + *(_QWORD *)&buf[8]), *(unint64_t *)&buf[8]);
    *((_QWORD *)a2 + 2) += v230;
    v215 += 40;
    if (v215 == v216)
      return v23;
  }
}

void sub_19F1F6888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)v33;
  if (*(_QWORD *)v33)
  {
    *(_QWORD *)(v33 + 8) = v35;
    operator delete(v35);
  }
  *(_QWORD *)(a26 + 40) = v33;
  if (__p)
    operator delete(__p);
  geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)&a33);
  _Unwind_Resume(a1);
}

BOOL geo::codec::MaterialSheet::decodeProperty(geo::ibitstream *this, char a2, unsigned __int8 *a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5;
  unsigned __int16 *v7;
  int v10;
  _BOOL8 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  int v58;
  _BOOL8 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  int v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  unint64_t v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  void **v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  float v89;
  float v90;
  _BOOL8 v91;
  unint64_t v92;
  unint64_t v93;
  size_t v94;
  unsigned __int16 *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint8x8_t v115;
  unint64_t v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  size_t v120;
  void *v121;
  unint64_t v122;
  size_t v123;
  void *v124;
  void **v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  float v129;
  float v130;
  _BOOL8 v131;
  unint64_t v132;
  unint64_t v133;
  size_t prime;
  int v135;
  int v136;
  unsigned int v137;
  unint64_t v138;
  int v139;
  int v140;
  void **v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  float v145;
  float v146;
  _BOOL8 v147;
  unint64_t v148;
  unint64_t v149;
  size_t v150;
  int v151;
  int v152;
  uint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  void **v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  float v161;
  float v162;
  _BOOL8 v163;
  unint64_t v164;
  unint64_t v165;
  size_t v166;
  unint64_t v167;
  uint8x8_t v168;
  uint64_t v169;
  unsigned int v170;
  char v171;
  _BOOL8 v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  float v176;
  unint64_t v177;
  uint64_t v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  int v189;
  unint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  unint64_t v202;
  unint64_t v203;
  uint8x8_t v204;
  float **v205;
  float *v206;
  unint64_t v207;
  unint64_t v208;
  float *v209;
  float v210;
  _BOOL8 v211;
  unint64_t v212;
  unint64_t v213;
  size_t v214;
  unint64_t v215;
  uint8x8_t v216;
  uint64_t v217;
  _QWORD *v218;
  float **v219;
  unint64_t v220;
  uint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  uint8x8_t v224;
  unsigned int v225;
  uint64_t v226;
  char v227;
  _BOOL8 v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  float v232;
  unint64_t v233;
  uint64_t v234;
  unsigned int v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  unsigned int v240;
  unint64_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  unsigned __int16 *v252;
  float v253;
  unint64_t v254;
  unint64_t v255;
  uint8x8_t v256;
  float **v257;
  float *v258;
  unint64_t v259;
  unint64_t v260;
  float *v261;
  float v262;
  _BOOL8 v263;
  unint64_t v264;
  unint64_t v265;
  size_t v266;
  unint64_t v267;
  uint8x8_t v268;
  uint64_t v269;
  _QWORD *v270;
  float **v271;
  unint64_t v272;
  uint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  uint8x8_t v276;
  unint64_t v277;
  uint8x8_t v278;
  uint64_t v279;
  unint64_t v280;
  uint8x8_t v281;
  uint64_t v282;
  void **v283;
  unint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  float v287;
  float v288;
  _BOOL8 v289;
  unint64_t v290;
  unint64_t v291;
  size_t v292;
  unint64_t v293;
  uint8x8_t v294;
  uint64_t v295;
  unint64_t v296;
  uint8x8_t v297;
  uint64_t v298;
  unint64_t v299;
  uint8x8_t v300;
  uint64_t v301;
  unint64_t v302;
  uint8x8_t v303;
  uint64_t v304;
  unint64_t v305;
  unsigned int v306;
  int v307;
  unint64_t v308;
  float v309;
  float v310;
  unsigned int v311;
  int v312;
  void **v313;
  unsigned __int8 *v314;
  unint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  float v318;
  float v319;
  _BOOL8 v320;
  unint64_t v321;
  unint64_t v322;
  size_t v323;
  void **v324;
  unint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  float v328;
  float v329;
  _BOOL8 v330;
  unint64_t v331;
  unint64_t v332;
  size_t v333;
  void **v334;
  unsigned __int8 *v335;
  unint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  float v339;
  float v340;
  _BOOL8 v341;
  unint64_t v342;
  unint64_t v343;
  size_t v344;
  unint64_t v345;
  uint8x8_t v346;
  uint64_t v347;
  unint64_t v348;
  uint8x8_t v349;
  uint64_t v350;
  unint64_t v351;
  uint8x8_t v352;
  uint64_t v353;
  unsigned int v354;
  float v355;
  float v356;
  void **v357;
  unsigned int v358;
  void **v359;
  uint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  int v363;
  unint64_t v364;
  char *v365;
  char *v366;
  void **v367;
  _BYTE *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  unint64_t v387;
  unsigned __int16 v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  char *v396;
  char *v397;
  char *v398;
  __int16 v399;
  char v400;
  uint64_t v401;
  _QWORD *v402;
  unint64_t v403;
  BOOL v404;
  unsigned __int16 v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  char *v411;
  __int16 v412;
  char v413;
  uint64_t v414;
  _QWORD *v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _BYTE *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  char *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  char *v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  void *v435;
  uint64_t v436;
  _QWORD *v437;
  unint64_t v438;
  unsigned __int16 v439;
  unint64_t v440;
  unint64_t *v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  char *v446;
  char *v447;
  char *v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  _QWORD *v452;
  unint64_t v453;
  void *v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  _QWORD *v459;
  void *v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  _QWORD *v464;
  _QWORD *v465;
  void *v466;
  _QWORD *v467;
  uint64_t v468;
  _QWORD *v469;
  unint64_t v470;
  unsigned __int16 v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  char *v478;
  uint64_t v479;
  _QWORD *v480;
  unint64_t v481;
  void *v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  _QWORD *v486;
  _QWORD *v487;
  void *v488;
  unint64_t v489;
  unint64_t v490;
  char *v491;
  _QWORD *v492;
  _QWORD *v493;
  void *v494;
  _QWORD *v495;
  void *v496;
  unsigned int v498;
  char v499;
  unsigned int v500;
  unsigned __int8 *v501;
  void *v502;
  unint64_t v503;
  void *__p;
  void *v505;
  float v506;
  void *v507[2];
  void *v508[2];
  float v509;

  v7 = a4;
  switch(a2)
  {
    case 0:
      v10 = *((unsigned __int8 *)this + 24);
      v11 = *((_BYTE *)this + 24) != 0;
      v12 = *((_QWORD *)this + 1);
      v13 = *((_QWORD *)this + 2);
      v14 = v13 + 2;
      if (!*((_BYTE *)this + 24))
        v14 = v13 + 1;
      if (v12 < v14)
        return 0;
      v15 = v13 + 1;
      v16 = *(_QWORD *)this;
      v17 = *(unsigned __int8 *)(*(_QWORD *)this + v13);
      if (*((_BYTE *)this + 24))
      {
        if (v15 >= v12)
          v18 = 0;
        else
          v18 = *(unsigned __int8 *)(v16 + v15);
        v17 = ((v18 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v17) << v10);
      }
      *((_QWORD *)this + 2) = v15;
      v100 = v13 + 2;
      if (v12 < v13 + 2 + v11)
        return 0;
      v101 = *(unsigned __int8 *)(v16 + v15);
      if (v10)
      {
        if (v100 >= v12)
          v102 = 0;
        else
          v102 = *(unsigned __int8 *)(v16 + v100);
        v101 = ((v102 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v101) << v10);
      }
      *((_QWORD *)this + 2) = v100;
      v305 = v13 + 3;
      if (v12 < v305 + v11)
        return 0;
      v306 = *(unsigned __int8 *)(v16 + v100);
      if (v10)
      {
        if (v305 >= v12)
          v307 = 0;
        else
          v307 = *(unsigned __int8 *)(v16 + v305);
        v306 = ((v307 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) - 1) & v306) << v10);
      }
      *((_QWORD *)this + 2) = v305;
      geo::ibitstream::readByte((uint64_t)this, &v501);
      if (!(_BYTE)v501)
        return 0;
      *(float *)&v354 = (float)v306;
      v355 = *(float *)&v354 * 0.0039216;
      LOBYTE(v354) = BYTE1(v501);
      v356 = (float)v354 * 0.0039216;
      v357 = (void **)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a5, *a3, a3);
      LOWORD(v501) = *v7;
      *((float *)&v501 + 1) = (float)v17 * 0.0039216;
      *(float *)&v502 = (float)v101 * 0.0039216;
      *((float *)&v502 + 1) = v355;
      *(float *)&v503 = v356;
      std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>::push_back[abi:ne180100](v357 + 3, (uint64_t)&v501);
      return 1;
    case 1:
      v19 = *((_QWORD *)this + 1);
      v20 = *((_QWORD *)this + 2);
      v21 = v20 + 2;
      if (!*((_BYTE *)this + 24))
        v21 = v20 + 1;
      if (v19 < v21)
        return 0;
      v22 = v20 + 1;
      v23 = *(unsigned __int8 *)(*(_QWORD *)this + v20);
      if (*((_BYTE *)this + 24))
      {
        if (v22 >= v19)
          v24 = 0;
        else
          v24 = *(unsigned __int8 *)(*(_QWORD *)this + v22);
        v23 = ((v24 & (0xFFFF << (8 - *((_BYTE *)this + 24)))) >> (8 - *((_BYTE *)this + 24))) | ((((1 << (8 - *((_BYTE *)this + 24))) - 1) & v23) << *((_BYTE *)this + 24));
      }
      *((_QWORD *)this + 2) = v22;
      v103 = (uint64_t *)(a5 + 120);
      v104 = *a3;
      v105 = *(_QWORD *)(a5 + 128);
      if (!v105)
        goto LABEL_148;
      v106 = (uint8x8_t)vcnt_s8((int8x8_t)v105);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v105 <= v104)
          v5 = v104 % v105;
      }
      else
      {
        v5 = ((_DWORD)v105 - 1) & v104;
      }
      v125 = *(void ***)(*v103 + 8 * v5);
      if (!v125)
        goto LABEL_148;
      v85 = *v125;
      if (!*v125)
        goto LABEL_148;
      if (v106.u32[0] < 2uLL)
      {
        while (1)
        {
          v127 = v85[1];
          if (v127 == v104)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v104)
              goto LABEL_720;
          }
          else if ((v127 & (v105 - 1)) != v5)
          {
            goto LABEL_148;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_148;
        }
      }
      while (2)
      {
        v126 = v85[1];
        if (v126 == v104)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v104)
            goto LABEL_720;
        }
        else
        {
          if (v126 >= v105)
            v126 %= v105;
          if (v126 != v5)
          {
LABEL_148:
            v128 = (_QWORD *)(a5 + 136);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 136);
            *v85 = 0;
            v85[1] = v104;
            *((_BYTE *)v85 + 16) = v104;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v129 = (float)(unint64_t)(*(_QWORD *)(a5 + 144) + 1);
            v130 = *(float *)(a5 + 152);
            if (v105 && (float)(v130 * (float)v105) >= v129)
            {
              v104 = v5;
            }
            else
            {
              v131 = 1;
              if (v105 >= 3)
                v131 = (v105 & (v105 - 1)) != 0;
              v132 = v131 | (2 * v105);
              v133 = vcvtps_u32_f32(v129 / v130);
              if (v132 <= v133)
                prime = v133;
              else
                prime = v132;
              if (prime == 1)
              {
                prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(prime);
                v105 = *(_QWORD *)(a5 + 128);
              }
              if (prime > v105)
                goto LABEL_484;
              if (prime < v105)
              {
                v293 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 144) / *(float *)(a5 + 152));
                if (v105 < 3
                  || (v294 = (uint8x8_t)vcnt_s8((int8x8_t)v105), v294.i16[0] = vaddlv_u8(v294), v294.u32[0] > 1uLL))
                {
                  v293 = std::__next_prime(v293);
                }
                else
                {
                  v295 = 1 << -(char)__clz(v293 - 1);
                  if (v293 >= 2)
                    v293 = v295;
                }
                if (prime <= v293)
                  prime = v293;
                if (prime < v105)
LABEL_484:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 120, prime);
              }
              v105 = *(_QWORD *)(a5 + 128);
              if ((v105 & (v105 - 1)) != 0)
              {
                if (v105 <= v104)
                  v104 %= v105;
              }
              else
              {
                v104 = ((_DWORD)v105 - 1) & v104;
              }
            }
            v385 = *v103;
            v386 = *(_QWORD **)(*v103 + 8 * v104);
            if (v386)
            {
              *v85 = *v386;
            }
            else
            {
              *v85 = *v128;
              *v128 = v85;
              *(_QWORD *)(v385 + 8 * v104) = v128;
              if (!*v85)
                goto LABEL_719;
              v387 = *(_QWORD *)(*v85 + 8);
              if ((v105 & (v105 - 1)) != 0)
              {
                if (v387 >= v105)
                  v387 %= v105;
              }
              else
              {
                v387 &= v105 - 1;
              }
              v386 = (_QWORD *)(*v103 + 8 * v387);
            }
            *v386 = v85;
LABEL_719:
            ++*(_QWORD *)(a5 + 144);
LABEL_720:
            v388 = *v7;
            v390 = v85[4];
            v389 = v85[5];
            if (v390 < v389)
            {
              *(_WORD *)v390 = v388;
              *(_BYTE *)(v390 + 2) = v23;
              v366 = (char *)(v390 + 3);
              goto LABEL_919;
            }
            v391 = v85 + 3;
            v392 = v85[3];
            v393 = 0xAAAAAAAAAAAAAAABLL * (v390 - v392) + 1;
            if (v393 >= 0x5555555555555556)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v394 = 0xAAAAAAAAAAAAAAABLL * (v389 - v392);
            if (2 * v394 > v393)
              v393 = 2 * v394;
            if (v394 >= 0x2AAAAAAAAAAAAAAALL)
              v395 = 0x5555555555555555;
            else
              v395 = v393;
            if (!v395)
            {
              v396 = 0;
              goto LABEL_732;
            }
            if (v395 < 0x5555555555555556)
            {
              v396 = (char *)operator new(3 * v395);
LABEL_732:
              v397 = &v396[v390 - v392];
              v398 = &v396[3 * v395];
              *(_WORD *)v397 = v388;
              v397[2] = v23;
              v366 = v397 + 3;
              if (v390 == v392)
                goto LABEL_768;
              do
              {
                v399 = *(_WORD *)(v390 - 3);
                v390 -= 3;
                v400 = *(_BYTE *)(v390 + 2);
                *(_WORD *)(v397 - 3) = v399;
                v397 -= 3;
                v397[2] = v400;
              }
              while (v390 != v392);
              goto LABEL_767;
            }
LABEL_964:
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_148;
        continue;
      }
    case 2:
      v25 = *((_QWORD *)this + 1);
      v26 = *((_QWORD *)this + 2);
      v27 = v26 + 4;
      v28 = *((_BYTE *)this + 24);
      v29 = v26 + 5;
      if (!v28)
        v29 = v26 + 4;
      if (v25 < v29)
        return 0;
      v30 = *(_QWORD *)this;
      if (*((_BYTE *)this + 24))
      {
        v31 = 8 - v28;
        v32 = (1 << (8 - v28)) + 255;
        v33 = 0xFFFF << (8 - v28);
        v34 = v26 + 1;
        if (v26 + 1 >= v25)
          v35 = 0;
        else
          v35 = *(unsigned __int8 *)(v30 + v34);
        v107 = (((1 << (8 - v28)) - 1) & *(_BYTE *)(v30 + v26));
        v108 = v35 & v33;
        *((_QWORD *)this + 2) = v34;
        v109 = *(unsigned __int8 *)(v30 + v34);
        v110 = v26 + 2;
        if (v26 + 2 >= v25)
          v111 = 0;
        else
          v111 = *(unsigned __int8 *)(v30 + v110);
        v135 = v107 << v28;
        v96 = v108 >> v31;
        v136 = (v32 & v109) << v28;
        v137 = (v111 & v33) >> v31;
        *((_QWORD *)this + 2) = v110;
        v138 = v26 + 3;
        v139 = *(unsigned __int8 *)(v30 + v110);
        if (v138 >= v25)
          v140 = 0;
        else
          v140 = *(unsigned __int8 *)(v30 + v138);
        LOBYTE(v96) = v96 | v135;
        LOBYTE(v97) = v137 | v136;
        v98 = ((v140 & v33) >> v31) | ((v32 & v139) << v28);
        *((_QWORD *)this + 2) = v138;
        v151 = *(unsigned __int8 *)(v30 + v138);
        v95 = v7;
        if (v27 >= v25)
          v152 = 0;
        else
          v152 = *(unsigned __int8 *)(v30 + v27);
        v99 = ((v152 & v33) >> v31) | ((v32 & v151) << v28);
      }
      else
      {
        v95 = a4;
        v96 = *(_DWORD *)(v30 + v26);
        v97 = v96 >> 8;
        v98 = HIWORD(v96);
        v99 = HIBYTE(v96);
      }
      *((_QWORD *)this + 2) = v27;
      v153 = (uint64_t *)(a5 + 160);
      v154 = *a3;
      v155 = *(_QWORD *)(a5 + 168);
      v499 = v96;
      v498 = v99;
      if (!v155)
        goto LABEL_214;
      v156 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
      v156.i16[0] = vaddlv_u8(v156);
      if (v156.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v155 <= v154)
          v5 = v154 % v155;
      }
      else
      {
        v5 = ((_DWORD)v155 - 1) & v154;
      }
      v157 = *(void ***)(*v153 + 8 * v5);
      if (!v157)
        goto LABEL_214;
      v85 = *v157;
      if (!*v157)
        goto LABEL_214;
      if (v156.u32[0] < 2uLL)
      {
        while (1)
        {
          v159 = v85[1];
          if (v159 == v154)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v154)
              goto LABEL_788;
          }
          else if ((v159 & (v155 - 1)) != v5)
          {
            goto LABEL_214;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_214;
        }
      }
      while (2)
      {
        v158 = v85[1];
        if (v158 == v154)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v154)
            goto LABEL_788;
        }
        else
        {
          if (v158 >= v155)
            v158 %= v155;
          if (v158 != v5)
          {
LABEL_214:
            v160 = (_QWORD *)(a5 + 176);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 176);
            *v85 = 0;
            v85[1] = v154;
            *((_BYTE *)v85 + 16) = v154;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v161 = (float)(unint64_t)(*(_QWORD *)(a5 + 184) + 1);
            v162 = *(float *)(a5 + 192);
            if (v155 && (float)(v162 * (float)v155) >= v161)
            {
              v154 = v5;
            }
            else
            {
              v163 = 1;
              if (v155 >= 3)
                v163 = (v155 & (v155 - 1)) != 0;
              v164 = v163 | (2 * v155);
              v165 = vcvtps_u32_f32(v161 / v162);
              if (v164 <= v165)
                v166 = v165;
              else
                v166 = v164;
              if (v166 == 1)
              {
                v166 = 2;
              }
              else if ((v166 & (v166 - 1)) != 0)
              {
                v166 = std::__next_prime(v166);
                v155 = *(_QWORD *)(a5 + 168);
              }
              if (v166 > v155)
                goto LABEL_492;
              if (v166 < v155)
              {
                v299 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 184) / *(float *)(a5 + 192));
                if (v155 < 3
                  || (v300 = (uint8x8_t)vcnt_s8((int8x8_t)v155), v300.i16[0] = vaddlv_u8(v300), v300.u32[0] > 1uLL))
                {
                  v299 = std::__next_prime(v299);
                }
                else
                {
                  v301 = 1 << -(char)__clz(v299 - 1);
                  if (v299 >= 2)
                    v299 = v301;
                }
                if (v166 <= v299)
                  v166 = v299;
                if (v166 < v155)
LABEL_492:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 160, v166);
              }
              v155 = *(_QWORD *)(a5 + 168);
              if ((v155 & (v155 - 1)) != 0)
              {
                if (v155 <= v154)
                  v154 %= v155;
              }
              else
              {
                v154 = ((_DWORD)v155 - 1) & v154;
              }
            }
            v414 = *v153;
            v415 = *(_QWORD **)(*v153 + 8 * v154);
            if (v415)
            {
              *v85 = *v415;
              LOBYTE(v96) = v499;
              v99 = v498;
            }
            else
            {
              *v85 = *v160;
              *v160 = v85;
              *(_QWORD *)(v414 + 8 * v154) = v160;
              LOBYTE(v96) = v499;
              v99 = v498;
              if (!*v85)
              {
LABEL_787:
                ++*(_QWORD *)(a5 + 184);
LABEL_788:
                v417 = (v99 << 24) | (v98 << 16) | (v97 << 8) | v96;
                v418 = *v95;
                v365 = (char *)v85[4];
                v419 = v85[5];
                if ((unint64_t)v365 < v419)
                {
                  *(_QWORD *)v365 = v418 | (v417 << 32);
                  v366 = v365 + 8;
                  goto LABEL_919;
                }
                v367 = (void **)(v85 + 3);
                v420 = (_BYTE *)v85[3];
                v421 = (v365 - v420) >> 3;
                v422 = v421 + 1;
                if ((unint64_t)(v421 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v423 = v419 - (_QWORD)v420;
                if (v423 >> 2 > v422)
                  v422 = v423 >> 2;
                if ((unint64_t)v423 >= 0x7FFFFFFFFFFFFFF8)
                  v424 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v424 = v422;
                if (v424)
                {
                  if (v424 >> 61)
                    goto LABEL_964;
                  v425 = (char *)operator new(8 * v424);
                }
                else
                {
                  v425 = 0;
                }
                v374 = &v425[8 * v421];
                v375 = &v425[8 * v424];
                *(_QWORD *)v374 = v418 | (v417 << 32);
                v366 = v374 + 8;
                if (v365 != v420)
                {
                  v426 = v365 - v420 - 8;
                  if (v426 < 0x58)
                    goto LABEL_973;
                  if ((unint64_t)(v420 - v425) < 0x20)
                    goto LABEL_973;
                  v427 = (v426 >> 3) + 1;
                  v428 = 8 * (v427 & 0x3FFFFFFFFFFFFFFCLL);
                  v429 = &v365[-v428];
                  v374 -= v428;
                  v430 = &v425[8 * v421 - 16];
                  v431 = v365 - 16;
                  v432 = v427 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v433 = *(_OWORD *)v431;
                    *((_OWORD *)v430 - 1) = *((_OWORD *)v431 - 1);
                    *(_OWORD *)v430 = v433;
                    v430 -= 32;
                    v431 -= 32;
                    v432 -= 4;
                  }
                  while (v432);
                  v365 = v429;
                  if (v427 != (v427 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_973:
                    do
                    {
                      v434 = *((_QWORD *)v365 - 1);
                      v365 -= 8;
                      *((_QWORD *)v374 - 1) = v434;
                      v374 -= 8;
                    }
                    while (v365 != v420);
                  }
LABEL_807:
                  v365 = (char *)*v367;
                  goto LABEL_808;
                }
                goto LABEL_808;
              }
              v416 = *(_QWORD *)(*v85 + 8);
              if ((v155 & (v155 - 1)) != 0)
              {
                if (v416 >= v155)
                  v416 %= v155;
              }
              else
              {
                v416 &= v155 - 1;
              }
              v415 = (_QWORD *)(*v153 + 8 * v416);
            }
            *v415 = v85;
            goto LABEL_787;
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_214;
        continue;
      }
    case 3:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v36 = HIDWORD(v501);
      v37 = (uint64_t *)(a5 + 80);
      v38 = *a3;
      v39 = *(_QWORD *)(a5 + 88);
      if (!v39)
        goto LABEL_81;
      v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v39 <= v38)
          v5 = v38 % v39;
      }
      else
      {
        v5 = ((_DWORD)v39 - 1) & v38;
      }
      v84 = *(void ***)(*v37 + 8 * v5);
      if (!v84)
        goto LABEL_81;
      v85 = *v84;
      if (!*v84)
        goto LABEL_81;
      if (v40.u32[0] < 2uLL)
      {
        while (1)
        {
          v87 = v85[1];
          if (v87 == v38)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v38)
              goto LABEL_672;
          }
          else if ((v87 & (v39 - 1)) != v5)
          {
            goto LABEL_81;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_81;
        }
      }
      while (2)
      {
        v86 = v85[1];
        if (v86 == v38)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v38)
            goto LABEL_672;
        }
        else
        {
          if (v86 >= v39)
            v86 %= v39;
          if (v86 != v5)
          {
LABEL_81:
            v88 = (_QWORD *)(a5 + 96);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 96);
            *v85 = 0;
            v85[1] = v38;
            *((_BYTE *)v85 + 16) = v38;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v89 = (float)(unint64_t)(*(_QWORD *)(a5 + 104) + 1);
            v90 = *(float *)(a5 + 112);
            if (v39 && (float)(v90 * (float)v39) >= v89)
            {
              v38 = v5;
            }
            else
            {
              v91 = 1;
              if (v39 >= 3)
                v91 = (v39 & (v39 - 1)) != 0;
              v92 = v91 | (2 * v39);
              v93 = vcvtps_u32_f32(v89 / v90);
              if (v92 <= v93)
                v94 = v93;
              else
                v94 = v92;
              if (v94 == 1)
              {
                v94 = 2;
              }
              else if ((v94 & (v94 - 1)) != 0)
              {
                v94 = std::__next_prime(v94);
                v39 = *(_QWORD *)(a5 + 88);
              }
              if (v94 > v39)
                goto LABEL_227;
              if (v94 < v39)
              {
                v167 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 104) / *(float *)(a5 + 112));
                if (v39 < 3
                  || (v168 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v168.i16[0] = vaddlv_u8(v168), v168.u32[0] > 1uLL))
                {
                  v167 = std::__next_prime(v167);
                }
                else
                {
                  v169 = 1 << -(char)__clz(v167 - 1);
                  if (v167 >= 2)
                    v167 = v169;
                }
                if (v94 <= v167)
                  v94 = v167;
                if (v94 < v39)
LABEL_227:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 80, v94);
              }
              v39 = *(_QWORD *)(a5 + 88);
              if ((v39 & (v39 - 1)) != 0)
              {
                if (v39 <= v38)
                  v38 %= v39;
              }
              else
              {
                v38 = ((_DWORD)v39 - 1) & v38;
              }
            }
            v360 = *v37;
            v361 = *(_QWORD **)(*v37 + 8 * v38);
            if (v361)
            {
              *v85 = *v361;
            }
            else
            {
              *v85 = *v88;
              *v88 = v85;
              *(_QWORD *)(v360 + 8 * v38) = v88;
              if (!*v85)
              {
LABEL_671:
                ++*(_QWORD *)(a5 + 104);
LABEL_672:
                v363 = *v7;
                v365 = (char *)v85[4];
                v364 = v85[5];
                if ((unint64_t)v365 < v364)
                {
                  *(_DWORD *)v365 = v363;
                  *((_DWORD *)v365 + 1) = v36;
                  v366 = v365 + 8;
LABEL_919:
                  v85[4] = v366;
                  return 1;
                }
                v367 = (void **)(v85 + 3);
                v368 = (_BYTE *)v85[3];
                v369 = (v365 - v368) >> 3;
                v370 = v369 + 1;
                if ((unint64_t)(v369 + 1) >> 61)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v371 = v364 - (_QWORD)v368;
                if (v371 >> 2 > v370)
                  v370 = v371 >> 2;
                if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
                  v372 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v372 = v370;
                if (v372)
                {
                  if (v372 >> 61)
                    goto LABEL_964;
                  v373 = (char *)operator new(8 * v372);
                }
                else
                {
                  v373 = 0;
                }
                v374 = &v373[8 * v369];
                v375 = &v373[8 * v372];
                *(_DWORD *)v374 = v363;
                *((_DWORD *)v374 + 1) = v36;
                v366 = v374 + 8;
                if (v365 != v368)
                {
                  v376 = v365 - v368 - 8;
                  if (v376 < 0x58)
                    goto LABEL_974;
                  if ((unint64_t)(v368 - v373) < 0x20)
                    goto LABEL_974;
                  v377 = (v376 >> 3) + 1;
                  v378 = 8 * (v377 & 0x3FFFFFFFFFFFFFFCLL);
                  v379 = &v365[-v378];
                  v374 -= v378;
                  v380 = &v373[8 * v369 - 16];
                  v381 = v365 - 16;
                  v382 = v377 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v383 = *(_OWORD *)v381;
                    *((_OWORD *)v380 - 1) = *((_OWORD *)v381 - 1);
                    *(_OWORD *)v380 = v383;
                    v380 -= 32;
                    v381 -= 32;
                    v382 -= 4;
                  }
                  while (v382);
                  v365 = v379;
                  if (v377 != (v377 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_974:
                    do
                    {
                      v384 = *((_QWORD *)v365 - 1);
                      v365 -= 8;
                      *((_QWORD *)v374 - 1) = v384;
                      v374 -= 8;
                    }
                    while (v365 != v368);
                  }
                  goto LABEL_807;
                }
LABEL_808:
                v85[3] = v374;
                v85[4] = v366;
                v85[5] = v375;
                if (!v365)
                  goto LABEL_919;
                v435 = v365;
LABEL_918:
                operator delete(v435);
                goto LABEL_919;
              }
              v362 = *(_QWORD *)(*v85 + 8);
              if ((v39 & (v39 - 1)) != 0)
              {
                if (v362 >= v39)
                  v362 %= v39;
              }
              else
              {
                v362 &= v39 - 1;
              }
              v361 = (_QWORD *)(*v37 + 8 * v362);
            }
            *v361 = v85;
            goto LABEL_671;
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_81;
        continue;
      }
    case 4:
      v41 = *((_QWORD *)this + 1);
      v42 = *((_QWORD *)this + 2);
      v43 = v42 + 2;
      if (!*((_BYTE *)this + 24))
        v43 = v42 + 1;
      if (v41 < v43)
        return 0;
      v44 = v42 + 1;
      v45 = *(unsigned __int8 *)(*(_QWORD *)this + v42);
      if (*((_BYTE *)this + 24))
      {
        if (v44 >= v41)
          v46 = 0;
        else
          v46 = *(unsigned __int8 *)(*(_QWORD *)this + v44);
        v45 = (((v46 & (0xFFFF << (8 - *((_BYTE *)this + 24)))) >> (8
                                                                                                 - *((_BYTE *)this + 24))) | ((((1 << (8 - *((_BYTE *)this + 24))) - 1) & v45) << *((_BYTE *)this + 24)));
      }
      *((_QWORD *)this + 2) = v44;
      v112 = (uint64_t *)(a5 + 200);
      v113 = *a3;
      v114 = *(_QWORD *)(a5 + 208);
      if (!v114)
        goto LABEL_178;
      v115 = (uint8x8_t)vcnt_s8((int8x8_t)v114);
      v115.i16[0] = vaddlv_u8(v115);
      if (v115.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v114 <= v113)
          v5 = v113 % v114;
      }
      else
      {
        v5 = ((_DWORD)v114 - 1) & v113;
      }
      v141 = *(void ***)(*v112 + 8 * v5);
      if (!v141)
        goto LABEL_178;
      v85 = *v141;
      if (!*v141)
        goto LABEL_178;
      if (v115.u32[0] < 2uLL)
      {
        while (1)
        {
          v143 = v85[1];
          if (v143 == v113)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v113)
              goto LABEL_753;
          }
          else if ((v143 & (v114 - 1)) != v5)
          {
            goto LABEL_178;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_178;
        }
      }
      while (2)
      {
        v142 = v85[1];
        if (v142 == v113)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v113)
            goto LABEL_753;
        }
        else
        {
          if (v142 >= v114)
            v142 %= v114;
          if (v142 != v5)
          {
LABEL_178:
            v144 = (_QWORD *)(a5 + 216);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 216);
            *v85 = 0;
            v85[1] = v113;
            *((_BYTE *)v85 + 16) = v113;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v145 = (float)(unint64_t)(*(_QWORD *)(a5 + 224) + 1);
            v146 = *(float *)(a5 + 232);
            if (v114 && (float)(v146 * (float)v114) >= v145)
            {
              v113 = v5;
            }
            else
            {
              v147 = 1;
              if (v114 >= 3)
                v147 = (v114 & (v114 - 1)) != 0;
              v148 = v147 | (2 * v114);
              v149 = vcvtps_u32_f32(v145 / v146);
              if (v148 <= v149)
                v150 = v149;
              else
                v150 = v148;
              if (v150 == 1)
              {
                v150 = 2;
              }
              else if ((v150 & (v150 - 1)) != 0)
              {
                v150 = std::__next_prime(v150);
                v114 = *(_QWORD *)(a5 + 208);
              }
              if (v150 > v114)
                goto LABEL_488;
              if (v150 < v114)
              {
                v296 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 224) / *(float *)(a5 + 232));
                if (v114 < 3
                  || (v297 = (uint8x8_t)vcnt_s8((int8x8_t)v114), v297.i16[0] = vaddlv_u8(v297), v297.u32[0] > 1uLL))
                {
                  v296 = std::__next_prime(v296);
                }
                else
                {
                  v298 = 1 << -(char)__clz(v296 - 1);
                  if (v296 >= 2)
                    v296 = v298;
                }
                if (v150 <= v296)
                  v150 = v296;
                if (v150 < v114)
LABEL_488:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 200, v150);
              }
              v114 = *(_QWORD *)(a5 + 208);
              if ((v114 & (v114 - 1)) != 0)
              {
                if (v114 <= v113)
                  v113 %= v114;
              }
              else
              {
                v113 = ((_DWORD)v114 - 1) & v113;
              }
            }
            v401 = *v112;
            v402 = *(_QWORD **)(*v112 + 8 * v113);
            if (v402)
            {
              *v85 = *v402;
            }
            else
            {
              *v85 = *v144;
              *v144 = v85;
              *(_QWORD *)(v401 + 8 * v113) = v144;
              if (!*v85)
              {
LABEL_752:
                ++*(_QWORD *)(a5 + 224);
LABEL_753:
                v404 = v45 != 0;
                v405 = *v7;
                v390 = v85[4];
                v406 = v85[5];
                if (v390 < v406)
                {
                  *(_WORD *)v390 = v405;
                  *(_BYTE *)(v390 + 2) = v404;
                  v366 = (char *)(v390 + 3);
                  goto LABEL_919;
                }
                v391 = v85 + 3;
                v407 = v85[3];
                v408 = 0xAAAAAAAAAAAAAAABLL * (v390 - v407) + 1;
                if (v408 >= 0x5555555555555556)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v409 = 0xAAAAAAAAAAAAAAABLL * (v406 - v407);
                if (2 * v409 > v408)
                  v408 = 2 * v409;
                if (v409 >= 0x2AAAAAAAAAAAAAAALL)
                  v410 = 0x5555555555555555;
                else
                  v410 = v408;
                if (v410)
                {
                  if (v410 >= 0x5555555555555556)
                    goto LABEL_964;
                  v411 = (char *)operator new(3 * v410);
                }
                else
                {
                  v411 = 0;
                }
                v397 = &v411[v390 - v407];
                v398 = &v411[3 * v410];
                *(_WORD *)v397 = v405;
                v397[2] = v404;
                v366 = v397 + 3;
                if (v390 == v407)
                  goto LABEL_768;
                do
                {
                  v412 = *(_WORD *)(v390 - 3);
                  v390 -= 3;
                  v413 = *(_BYTE *)(v390 + 2);
                  *(_WORD *)(v397 - 3) = v412;
                  v397 -= 3;
                  v397[2] = v413;
                }
                while (v390 != v407);
LABEL_767:
                v390 = *v391;
LABEL_768:
                v85[3] = v397;
                v85[4] = v366;
                v85[5] = v398;
                if (!v390)
                  goto LABEL_919;
LABEL_917:
                v435 = (void *)v390;
                goto LABEL_918;
              }
              v403 = *(_QWORD *)(*v85 + 8);
              if ((v114 & (v114 - 1)) != 0)
              {
                if (v403 >= v114)
                  v403 %= v114;
              }
              else
              {
                v403 &= v114 - 1;
              }
              v402 = (_QWORD *)(*v112 + 8 * v403);
            }
            *v402 = v85;
            goto LABEL_752;
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_178;
        continue;
      }
    case 5:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v47 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v48 = HIDWORD(v501);
      v49 = (uint64_t *)(a5 + 240);
      v50 = *a3;
      v51 = *(_QWORD *)(a5 + 248);
      if (!v51)
        goto LABEL_471;
      v52 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v51 <= v50)
          v5 = v50 % v51;
      }
      else
      {
        v5 = ((_DWORD)v51 - 1) & v50;
      }
      v283 = *(void ***)(*v49 + 8 * v5);
      if (!v283)
        goto LABEL_471;
      v85 = *v283;
      if (!*v283)
        goto LABEL_471;
      if (v52.u32[0] < 2uLL)
      {
        while (1)
        {
          v285 = v85[1];
          if (v285 == v50)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v50)
              goto LABEL_828;
          }
          else if ((v285 & (v51 - 1)) != v5)
          {
            goto LABEL_471;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_471;
        }
      }
      while (2)
      {
        v284 = v85[1];
        if (v284 == v50)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v50)
            goto LABEL_828;
        }
        else
        {
          if (v284 >= v51)
            v284 %= v51;
          if (v284 != v5)
          {
LABEL_471:
            v286 = (_QWORD *)(a5 + 256);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 256);
            *v85 = 0;
            v85[1] = v50;
            *((_BYTE *)v85 + 16) = v50;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v287 = (float)(unint64_t)(*(_QWORD *)(a5 + 264) + 1);
            v288 = *(float *)(a5 + 272);
            if (v51 && (float)(v288 * (float)v51) >= v287)
            {
              v50 = v5;
            }
            else
            {
              v289 = 1;
              if (v51 >= 3)
                v289 = (v51 & (v51 - 1)) != 0;
              v290 = v289 | (2 * v51);
              v291 = vcvtps_u32_f32(v287 / v288);
              if (v290 <= v291)
                v292 = v291;
              else
                v292 = v290;
              if (v292 == 1)
              {
                v292 = 2;
              }
              else if ((v292 & (v292 - 1)) != 0)
              {
                v292 = std::__next_prime(v292);
                v51 = *(_QWORD *)(a5 + 248);
              }
              if (v292 > v51)
                goto LABEL_515;
              if (v292 < v51)
              {
                v302 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 264) / *(float *)(a5 + 272));
                if (v51 < 3
                  || (v303 = (uint8x8_t)vcnt_s8((int8x8_t)v51), v303.i16[0] = vaddlv_u8(v303), v303.u32[0] > 1uLL))
                {
                  v302 = std::__next_prime(v302);
                }
                else
                {
                  v304 = 1 << -(char)__clz(v302 - 1);
                  if (v302 >= 2)
                    v302 = v304;
                }
                if (v292 <= v302)
                  v292 = v302;
                if (v292 < v51)
LABEL_515:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 240, v292);
              }
              v51 = *(_QWORD *)(a5 + 248);
              if ((v51 & (v51 - 1)) != 0)
              {
                if (v51 <= v50)
                  v50 %= v51;
              }
              else
              {
                v50 = ((_DWORD)v51 - 1) & v50;
              }
            }
            v436 = *v49;
            v437 = *(_QWORD **)(*v49 + 8 * v50);
            if (v437)
            {
              *v85 = *v437;
            }
            else
            {
              *v85 = *v286;
              *v286 = v85;
              *(_QWORD *)(v436 + 8 * v50) = v286;
              if (!*v85)
              {
LABEL_827:
                ++*(_QWORD *)(a5 + 264);
LABEL_828:
                v439 = *v7;
                v390 = v85[4];
                v440 = v85[5];
                if (v390 < v440)
                {
                  *(_WORD *)v390 = v439;
                  *(_QWORD *)(v390 + 4) = v47 | (v48 << 32);
                  v366 = (char *)(v390 + 12);
                  goto LABEL_919;
                }
                v441 = v85 + 3;
                v442 = v85[3];
                v443 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v390 - v442) >> 2) + 1;
                if (v443 > 0x1555555555555555)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v444 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v440 - v442) >> 2);
                if (2 * v444 > v443)
                  v443 = 2 * v444;
                if (v444 >= 0xAAAAAAAAAAAAAAALL)
                  v445 = 0x1555555555555555;
                else
                  v445 = v443;
                if (v445)
                {
                  if (v445 > 0x1555555555555555)
                    goto LABEL_964;
                  v446 = (char *)operator new(12 * v445);
                }
                else
                {
                  v446 = 0;
                }
                v447 = &v446[4 * ((uint64_t)(v390 - v442) >> 2)];
                v448 = &v446[12 * v445];
                *(_WORD *)v447 = v439;
                *(_QWORD *)(v447 + 4) = v47 | (v48 << 32);
                v366 = v447 + 12;
                if (v390 != v442)
                {
                  do
                  {
                    v449 = *(_QWORD *)(v390 - 12);
                    v390 -= 12;
                    v450 = *(_DWORD *)(v390 + 8);
                    *(_QWORD *)(v447 - 12) = v449;
                    v447 -= 12;
                    *((_DWORD *)v447 + 2) = v450;
                  }
                  while (v390 != v442);
LABEL_915:
                  v390 = *v441;
                  goto LABEL_916;
                }
                goto LABEL_916;
              }
              v438 = *(_QWORD *)(*v85 + 8);
              if ((v51 & (v51 - 1)) != 0)
              {
                if (v438 >= v51)
                  v438 %= v51;
              }
              else
              {
                v438 &= v51 - 1;
              }
              v437 = (_QWORD *)(*v49 + 8 * v438);
            }
            *v437 = v85;
            goto LABEL_827;
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_471;
        continue;
      }
    case 6:
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v508 = 0u;
      v509 = 1.0;
      v54 = *((_QWORD *)this + 1);
      v53 = *((_QWORD *)this + 2);
      v55 = v53 + 2;
      if (!*((_BYTE *)this + 24))
        v55 = v53 + 1;
      if (v54 < v55)
        goto LABEL_38;
      v78 = v53 + 1;
      v79 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
      if (*((_BYTE *)this + 24))
      {
        if (v78 >= v54)
          v80 = 0;
        else
          v80 = *(unsigned __int8 *)(*(_QWORD *)this + v78);
        v79 = (((v80 & (0xFFFF << (8 - *((_BYTE *)this + 24)))) >> (8
                                                                                                 - *((_BYTE *)this + 24))) | ((((1 << (8 - *((_BYTE *)this + 24))) - 1) & v79) << *((_BYTE *)this + 24)));
      }
      *((_QWORD *)this + 2) = v78;
      v119 = v79;
      if (v79 == 1)
      {
        v120 = 2;
LABEL_237:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v120);
        goto LABEL_238;
      }
      if ((v79 & (v79 - 1)) != 0)
      {
        v120 = std::__next_prime(v79);
        v121 = v507[1];
      }
      else
      {
        v121 = 0;
        v120 = v79;
      }
      if (v120 > (unint64_t)v121)
        goto LABEL_237;
      if (v120 < (unint64_t)v121)
      {
        v277 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
        if ((unint64_t)v121 < 3
          || (v278 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v278.i16[0] = vaddlv_u8(v278), v278.u32[0] > 1uLL))
        {
          v277 = std::__next_prime(v277);
        }
        else
        {
          v279 = 1 << -(char)__clz(v277 - 1);
          if (v277 >= 2)
            v277 = v279;
        }
        if (v120 <= v277)
          v120 = v277;
        if (v120 < (unint64_t)v121)
          goto LABEL_237;
      }
LABEL_238:
      if (!(_DWORD)v119)
      {
LABEL_338:
        v221 = (uint64_t *)(a5 + 280);
        v222 = *a3;
        v223 = *(_QWORD *)(a5 + 288);
        if (v223)
        {
          v224 = (uint8x8_t)vcnt_s8((int8x8_t)v223);
          v224.i16[0] = vaddlv_u8(v224);
          if (v224.u32[0] > 1uLL)
          {
            v119 = *a3;
            if (v223 <= v222)
              v119 = v222 % v223;
          }
          else
          {
            v119 = ((_DWORD)v223 - 1) & v222;
          }
          v334 = *(void ***)(*v221 + 8 * v119);
          if (v334)
          {
            v335 = (unsigned __int8 *)*v334;
            if (*v334)
            {
              if (v224.u32[0] < 2uLL)
              {
                while (1)
                {
                  v337 = *((_QWORD *)v335 + 1);
                  if (v337 == v222)
                  {
                    if (v335[16] == (_DWORD)v222)
                      goto LABEL_938;
                  }
                  else if ((v337 & (v223 - 1)) != v119)
                  {
                    goto LABEL_607;
                  }
                  v335 = *(unsigned __int8 **)v335;
                  if (!v335)
                    goto LABEL_607;
                }
              }
              do
              {
                v336 = *((_QWORD *)v335 + 1);
                if (v336 == v222)
                {
                  if (v335[16] == (_DWORD)v222)
                    goto LABEL_938;
                }
                else
                {
                  if (v336 >= v223)
                    v336 %= v223;
                  if (v336 != v119)
                    break;
                }
                v335 = *(unsigned __int8 **)v335;
              }
              while (v335);
            }
          }
        }
LABEL_607:
        v335 = (unsigned __int8 *)operator new(0x30uLL);
        v338 = (_QWORD *)(a5 + 296);
        v501 = v335;
        v502 = (void *)(a5 + 296);
        *(_QWORD *)v335 = 0;
        *((_QWORD *)v335 + 1) = v222;
        v335[16] = v222;
        *((_QWORD *)v335 + 4) = 0;
        *((_QWORD *)v335 + 5) = 0;
        *((_QWORD *)v335 + 3) = 0;
        LOBYTE(v503) = 1;
        v339 = (float)(unint64_t)(*(_QWORD *)(a5 + 304) + 1);
        v340 = *(float *)(a5 + 312);
        if (v223 && (float)(v340 * (float)v223) >= v339)
        {
          v222 = v119;
        }
        else
        {
          v341 = 1;
          if (v223 >= 3)
            v341 = (v223 & (v223 - 1)) != 0;
          v342 = v341 | (2 * v223);
          v343 = vcvtps_u32_f32(v339 / v340);
          if (v342 <= v343)
            v344 = v343;
          else
            v344 = v342;
          if (v344 == 1)
          {
            v344 = 2;
          }
          else if ((v344 & (v344 - 1)) != 0)
          {
            v344 = std::__next_prime(v344);
            v223 = *(_QWORD *)(a5 + 288);
          }
          if (v344 > v223)
            goto LABEL_640;
          if (v344 < v223)
          {
            v351 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 304) / *(float *)(a5 + 312));
            if (v223 < 3
              || (v352 = (uint8x8_t)vcnt_s8((int8x8_t)v223), v352.i16[0] = vaddlv_u8(v352), v352.u32[0] > 1uLL))
            {
              v351 = std::__next_prime(v351);
            }
            else
            {
              v353 = 1 << -(char)__clz(v351 - 1);
              if (v351 >= 2)
                v351 = v353;
            }
            if (v344 <= v351)
              v344 = v351;
            if (v344 < v223)
LABEL_640:
              std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 280, v344);
          }
          v223 = *(_QWORD *)(a5 + 288);
          if ((v223 & (v223 - 1)) != 0)
          {
            if (v223 <= v222)
              v222 %= v223;
          }
          else
          {
            v222 = ((_DWORD)v223 - 1) & v222;
          }
        }
        v479 = *v221;
        v480 = *(_QWORD **)(*v221 + 8 * v222);
        if (v480)
        {
          *(_QWORD *)v335 = *v480;
        }
        else
        {
          *(_QWORD *)v335 = *v338;
          *v338 = v335;
          *(_QWORD *)(v479 + 8 * v222) = v338;
          if (!*(_QWORD *)v335)
          {
LABEL_937:
            ++*(_QWORD *)(a5 + 304);
LABEL_938:
            LOWORD(v501) = *v7;
            v482 = v507[0];
            v483 = (unint64_t)v507[1];
            v507[0] = 0;
            v507[1] = 0;
            v502 = v482;
            v503 = v483;
            __p = v508[0];
            v505 = v508[1];
            v506 = v509;
            if (v508[1])
            {
              v484 = *((_QWORD *)v508[0] + 1);
              if ((v483 & (v483 - 1)) != 0)
              {
                if (v484 >= v483)
                  v484 %= v483;
              }
              else
              {
                v484 &= v483 - 1;
              }
              *((_QWORD *)v482 + v484) = &__p;
              v508[0] = 0;
              v508[1] = 0;
            }
            v485 = *((_QWORD *)v335 + 4);
            if (v485 >= *((_QWORD *)v335 + 5))
            {
              v491 = std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>((void **)v335 + 3, (uint64_t)&v501);
            }
            else
            {
              *(_WORD *)v485 = (_WORD)v501;
              v486 = v502;
              v502 = 0;
              *(_QWORD *)(v485 + 8) = v486;
              *(_QWORD *)(v485 + 16) = v503;
              v503 = 0;
              v487 = __p;
              *(_QWORD *)(v485 + 24) = __p;
              v488 = v505;
              *(_QWORD *)(v485 + 32) = v505;
              *(float *)(v485 + 40) = v506;
              if (v488)
              {
                v489 = v487[1];
                v490 = *(_QWORD *)(v485 + 16);
                if ((v490 & (v490 - 1)) != 0)
                {
                  if (v489 >= v490)
                    v489 %= v490;
                }
                else
                {
                  v489 &= v490 - 1;
                }
                v486[v489] = v485 + 24;
                __p = 0;
                v505 = 0;
              }
              v491 = (char *)(v485 + 48);
            }
            *((_QWORD *)v335 + 4) = v491;
            v492 = __p;
            if (__p)
            {
              do
              {
                v493 = (_QWORD *)*v492;
                operator delete(v492);
                v492 = v493;
              }
              while (v493);
            }
            v494 = v502;
            v502 = 0;
            if (v494)
              operator delete(v494);
            v56 = 1;
            v57 = v508[0];
            if (v508[0])
              goto LABEL_958;
            goto LABEL_959;
          }
          v481 = *(_QWORD *)(*(_QWORD *)v335 + 8);
          if ((v223 & (v223 - 1)) != 0)
          {
            if (v481 >= v223)
              v481 %= v223;
          }
          else
          {
            v481 &= v223 - 1;
          }
          v480 = (_QWORD *)(*v221 + 8 * v481);
        }
        *v480 = v335;
        goto LABEL_937;
      }
      v170 = 0;
      v500 = v119;
      while (1)
      {
        geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
        if (!(_BYTE)v501)
          break;
        v171 = *((_BYTE *)this + 24);
        v172 = v171 != 0;
        v173 = *((_QWORD *)this + 1);
        v174 = *((_QWORD *)this + 2);
        v175 = v174 + 2;
        if (!v171)
          v175 = v174 + 1;
        if (v173 < v175)
          break;
        v176 = *((float *)&v501 + 1);
        v177 = v174 + 1;
        v178 = *(_QWORD *)this;
        v179 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
        if (*((_BYTE *)this + 24))
        {
          if (v177 >= v173)
            v180 = 0;
          else
            v180 = *(unsigned __int8 *)(v178 + v177);
          *((_QWORD *)this + 2) = v177;
          v187 = v174 + 2;
          if (v173 < v174 + 2 + v172)
            break;
          v188 = v187 >= v173 ? 0 : *(unsigned __int8 *)(v178 + v187);
          v189 = *(unsigned __int8 *)(v178 + v177);
          *((_QWORD *)this + 2) = v187;
          v190 = v174 + 3;
          if (v173 < v174 + 3 + v172)
            break;
          v191 = v190 >= v173 ? 0 : *(unsigned __int8 *)(v178 + v190);
          v192 = *(unsigned __int8 *)(v178 + v187);
          *((_QWORD *)this + 2) = v190;
          v185 = v174 + 4;
          if (v173 < v185 + v172)
            break;
          if (v185 >= v173)
            v193 = 0;
          else
            v193 = *(unsigned __int8 *)(v178 + v185);
          v194 = (1 << (8 - v171)) + 255;
          v195 = 0xFFFF << (8 - v171);
          v179 = ((v180 & v195) >> (8 - v171)) | ((v194 & v179) << v171);
          v182 = ((v188 & v195) >> (8 - v171)) | ((v194 & v189) << v171);
          v184 = ((v191 & v195) >> (8 - v171)) | ((v194 & v192) << v171);
          v186 = ((v193 & v195) >> (8 - v171)) | ((((1 << (8 - v171)) - 1) & *(_BYTE *)(v178 + v190)) << v171);
        }
        else
        {
          *((_QWORD *)this + 2) = v177;
          v181 = v174 + 2;
          if (v173 < v174 + 2 + v172)
            break;
          LOBYTE(v182) = *(_BYTE *)(v178 + v177);
          *((_QWORD *)this + 2) = v181;
          v183 = v174 + 3;
          if (v173 < v174 + 3 + v172)
            break;
          v184 = *(unsigned __int8 *)(v178 + v181);
          *((_QWORD *)this + 2) = v183;
          v185 = v174 + 4;
          if (v173 < v185 + v172)
            break;
          LOBYTE(v186) = *(_BYTE *)(v178 + v183);
        }
        *((_QWORD *)this + 2) = v185;
        v196 = (float)v179;
        if ((float)(v196 * 0.0039216) >= 0.04045)
        {
          v197 = powf((float)(v196 * 0.0037171) + 0.052133, 2.4);
          v198 = (float)v182;
          if ((float)(v198 * 0.0039216) >= 0.04045)
          {
LABEL_267:
            v199 = powf((float)(v198 * 0.0037171) + 0.052133, 2.4);
            goto LABEL_270;
          }
        }
        else
        {
          v197 = v196 * 0.00030353;
          v198 = (float)v182;
          if ((float)(v198 * 0.0039216) >= 0.04045)
            goto LABEL_267;
        }
        v199 = v198 * 0.00030353;
LABEL_270:
        v200 = (float)v184;
        v119 = (unint64_t)v7;
        if ((float)(v200 * 0.0039216) >= 0.04045)
        {
          v201 = powf((float)(v200 * 0.0037171) + 0.052133, 2.4);
          if (v176 == 0.0)
            v202 = 0;
          else
            v202 = LODWORD(v176);
          v203 = (unint64_t)v507[1];
          if (!v507[1])
            goto LABEL_299;
        }
        else
        {
          v201 = v200 * 0.00030353;
          if (v176 == 0.0)
            v202 = 0;
          else
            v202 = LODWORD(v176);
          v203 = (unint64_t)v507[1];
          if (!v507[1])
            goto LABEL_299;
        }
        v204 = (uint8x8_t)vcnt_s8((int8x8_t)v203);
        v204.i16[0] = vaddlv_u8(v204);
        if (v204.u32[0] > 1uLL)
        {
          v184 = v202;
          if (v202 >= v203)
            v184 = v202 % v203;
        }
        else
        {
          v184 = ((_DWORD)v203 - 1) & v202;
        }
        v205 = (float **)*((_QWORD *)v507[0] + v184);
        if (v205)
        {
          v206 = *v205;
          if (v206)
          {
            if (v204.u32[0] < 2uLL)
            {
              while (1)
              {
                v208 = *((_QWORD *)v206 + 1);
                if (v208 == v202)
                {
                  if (v206[4] == v176)
                    goto LABEL_337;
                }
                else if ((v208 & (v203 - 1)) != v184)
                {
                  goto LABEL_299;
                }
                v206 = *(float **)v206;
                if (!v206)
                  goto LABEL_299;
              }
            }
            do
            {
              v207 = *((_QWORD *)v206 + 1);
              if (v207 == v202)
              {
                if (v206[4] == v176)
                  goto LABEL_337;
              }
              else
              {
                if (v207 >= v203)
                  v207 %= v203;
                if (v207 != v184)
                  break;
              }
              v206 = *(float **)v206;
            }
            while (v206);
          }
        }
LABEL_299:
        v209 = (float *)operator new(0x28uLL);
        *(_QWORD *)v209 = 0;
        *((_QWORD *)v209 + 1) = v202;
        v209[4] = v176;
        v209[5] = v197;
        v209[6] = v199;
        v209[7] = v201;
        v209[8] = (float)v186 * 0.0039216;
        v210 = (float)((unint64_t)v508[1] + 1);
        if (!v203 || (float)(v509 * (float)v203) < v210)
        {
          v211 = (v203 & (v203 - 1)) != 0;
          if (v203 < 3)
            v211 = 1;
          v212 = v211 | (2 * v203);
          v213 = vcvtps_u32_f32(v210 / v509);
          if (v212 <= v213)
            v214 = v213;
          else
            v214 = v212;
          if (v214 == 1)
          {
            v214 = 2;
          }
          else if ((v214 & (v214 - 1)) != 0)
          {
            v214 = std::__next_prime(v214);
            v203 = (unint64_t)v507[1];
          }
          if (v214 > v203)
            goto LABEL_311;
          if (v214 < v203)
          {
            v215 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
            if (v203 < 3
              || (v216 = (uint8x8_t)vcnt_s8((int8x8_t)v203), v216.i16[0] = vaddlv_u8(v216), v216.u32[0] > 1uLL))
            {
              v215 = std::__next_prime(v215);
            }
            else
            {
              v217 = 1 << -(char)__clz(v215 - 1);
              if (v215 >= 2)
                v215 = v217;
            }
            if (v214 <= v215)
              v214 = v215;
            if (v214 < v203)
LABEL_311:
              std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v214);
          }
          v203 = (unint64_t)v507[1];
          if (((unint64_t)v507[1] & ((unint64_t)v507[1] - 1)) != 0)
          {
            if ((void *)v202 >= v507[1])
              v184 = v202 % (unint64_t)v507[1];
            else
              v184 = v202;
          }
          else
          {
            v184 = (LODWORD(v507[1]) - 1) & v202;
          }
        }
        v218 = v507[0];
        v219 = (float **)*((_QWORD *)v507[0] + v184);
        if (v219)
        {
          *(_QWORD *)v209 = *v219;
        }
        else
        {
          *(void **)v209 = v508[0];
          v508[0] = v209;
          v218[v184] = v508;
          if (!*(_QWORD *)v209)
            goto LABEL_336;
          v220 = *(_QWORD *)(*(_QWORD *)v209 + 8);
          if ((v203 & (v203 - 1)) != 0)
          {
            if (v220 >= v203)
              v220 %= v203;
          }
          else
          {
            v220 &= v203 - 1;
          }
          v219 = (float **)((char *)v507[0] + 8 * v220);
        }
        *v219 = v209;
LABEL_336:
        ++v508[1];
LABEL_337:
        ++v170;
        v7 = (unsigned __int16 *)v119;
        if (v170 >= v500)
          goto LABEL_338;
      }
LABEL_38:
      v56 = 0;
      v57 = v508[0];
      if (!v508[0])
        goto LABEL_959;
      do
      {
LABEL_958:
        v495 = (_QWORD *)*v57;
        operator delete(v57);
        v57 = v495;
      }
      while (v495);
LABEL_959:
      v496 = v507[0];
      v507[0] = 0;
      if (v496)
        operator delete(v496);
      return (v56 & 1) != 0;
    case 7:
      v58 = *((unsigned __int8 *)this + 24);
      v59 = *((_BYTE *)this + 24) != 0;
      v60 = *((_QWORD *)this + 1);
      v61 = *((_QWORD *)this + 2);
      v62 = v61 + 2;
      if (!*((_BYTE *)this + 24))
        v62 = v61 + 1;
      if (v60 < v62)
        return 0;
      v63 = v61 + 1;
      v64 = *(_QWORD *)this;
      v65 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
      if (*((_BYTE *)this + 24))
      {
        if (v63 >= v60)
          v66 = 0;
        else
          v66 = *(unsigned __int8 *)(v64 + v63);
        v65 = ((v66 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v65) << v58);
      }
      *((_QWORD *)this + 2) = v63;
      v116 = v61 + 2;
      if (v60 < v61 + 2 + v59)
        return 0;
      v117 = *(unsigned __int8 *)(v64 + v63);
      if (v58)
      {
        if (v116 >= v60)
          v118 = 0;
        else
          v118 = *(unsigned __int8 *)(v64 + v116);
        v117 = ((v118 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v117) << v58);
      }
      *((_QWORD *)this + 2) = v116;
      v308 = v61 + 3;
      if (v60 < v308 + v59)
        return 0;
      v309 = (float)v65 * 0.0039216;
      v310 = (float)v117 * 0.0039216;
      v311 = *(unsigned __int8 *)(v64 + v116);
      if (v58)
      {
        if (v308 >= v60)
          v312 = 0;
        else
          v312 = *(unsigned __int8 *)(v64 + v308);
        v311 = ((v312 & (0xFFFF << (8 - v58))) >> (8 - v58)) | ((((1 << (8 - v58)) - 1) & v311) << v58);
      }
      *((_QWORD *)this + 2) = v308;
      *(float *)&v358 = (float)v311 * 0.0039216;
      v359 = (void **)std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a5 + 40, *a3, a3);
      LOWORD(v501) = *v7;
      *((float *)&v501 + 1) = v309;
      v502 = (void *)__PAIR64__(v358, LODWORD(v310));
      std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>::push_back[abi:ne180100](v359 + 3, (uint64_t)&v501);
      return 1;
    case 8:
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v508 = 0u;
      v509 = 1.0;
      v68 = *((_QWORD *)this + 1);
      v67 = *((_QWORD *)this + 2);
      v69 = v67 + 2;
      if (!*((_BYTE *)this + 24))
        v69 = v67 + 1;
      if (v68 < v69)
        goto LABEL_49;
      v81 = v67 + 1;
      v82 = *(unsigned __int8 *)(*(_QWORD *)this + v67);
      if (*((_BYTE *)this + 24))
      {
        if (v81 >= v68)
          v83 = 0;
        else
          v83 = *(unsigned __int8 *)(*(_QWORD *)this + v81);
        v82 = (((v83 & (0xFFFF << (8 - *((_BYTE *)this + 24)))) >> (8
                                                                                                 - *((_BYTE *)this + 24))) | ((((1 << (8 - *((_BYTE *)this + 24))) - 1) & v82) << *((_BYTE *)this + 24)));
      }
      *((_QWORD *)this + 2) = v81;
      v122 = v82;
      if (v82 == 1)
      {
        v123 = 2;
LABEL_343:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v123);
        goto LABEL_344;
      }
      if ((v82 & (v82 - 1)) != 0)
      {
        v123 = std::__next_prime(v82);
        v124 = v507[1];
      }
      else
      {
        v124 = 0;
        v123 = v82;
      }
      if (v123 > (unint64_t)v124)
        goto LABEL_343;
      if (v123 < (unint64_t)v124)
      {
        v280 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
        if ((unint64_t)v124 < 3
          || (v281 = (uint8x8_t)vcnt_s8((int8x8_t)v124), v281.i16[0] = vaddlv_u8(v281), v281.u32[0] > 1uLL))
        {
          v280 = std::__next_prime(v280);
        }
        else
        {
          v282 = 1 << -(char)__clz(v280 - 1);
          if (v280 >= 2)
            v280 = v282;
        }
        if (v123 <= v280)
          v123 = v280;
        if (v123 < (unint64_t)v124)
          goto LABEL_343;
      }
LABEL_344:
      if ((_DWORD)v122)
      {
        v225 = 0;
        v226 = 1025879765;
        do
        {
          geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
          if (!(_BYTE)v501)
            goto LABEL_49;
          v227 = *((_BYTE *)this + 24);
          v228 = v227 != 0;
          v229 = *((_QWORD *)this + 1);
          v230 = *((_QWORD *)this + 2);
          v231 = v230 + 2;
          if (!v227)
            v231 = v230 + 1;
          if (v229 < v231)
          {
LABEL_49:
            v56 = 0;
            v70 = v508[0];
            if (!v508[0])
              goto LABEL_959;
            goto LABEL_881;
          }
          v232 = *((float *)&v501 + 1);
          v233 = v230 + 1;
          v234 = *(_QWORD *)this;
          v235 = *(unsigned __int8 *)(*(_QWORD *)this + v230);
          if (*((_BYTE *)this + 24))
          {
            if (v233 >= v229)
              v236 = 0;
            else
              v236 = *(unsigned __int8 *)(v234 + v233);
            *((_QWORD *)this + 2) = v233;
            v241 = v230 + 2;
            if (v229 < v230 + 2 + v228)
              goto LABEL_49;
            v242 = v241 >= v229 ? 0 : *(unsigned __int8 *)(v234 + v241);
            v243 = *(unsigned __int8 *)(v234 + v233);
            *((_QWORD *)this + 2) = v241;
            v239 = v230 + 3;
            if (v229 < v239 + v228)
              goto LABEL_49;
            if (v239 >= v229)
              v244 = 0;
            else
              v244 = *(unsigned __int8 *)(v234 + v239);
            v245 = (1 << (8 - v227)) + 255;
            v246 = 0xFFFF << (8 - v227);
            v235 = ((v236 & v246) >> (8 - v227)) | ((v245 & v235) << v227);
            v238 = ((v242 & v246) >> (8 - v227)) | ((v245 & v243) << v227);
            v240 = ((v244 & v246) >> (8 - v227)) | ((((1 << (8 - v227)) - 1) & *(_BYTE *)(v234 + v241)) << v227);
          }
          else
          {
            *((_QWORD *)this + 2) = v233;
            v237 = v230 + 2;
            if (v229 < v230 + 2 + v228)
              goto LABEL_49;
            LOBYTE(v238) = *(_BYTE *)(v234 + v233);
            *((_QWORD *)this + 2) = v237;
            v239 = v230 + 3;
            if (v229 < v239 + v228)
              goto LABEL_49;
            LOBYTE(v240) = *(_BYTE *)(v234 + v237);
          }
          *((_QWORD *)this + 2) = v239;
          v247 = (float)v235;
          if ((float)(v247 * 0.0039216) >= 0.04045)
          {
            v248 = powf((float)(v247 * 0.0037171) + 0.052133, 2.4);
            v249 = (float)v238;
            if ((float)(v249 * 0.0039216) >= 0.04045)
            {
LABEL_368:
              v250 = powf((float)(v249 * 0.0037171) + 0.052133, 2.4);
              goto LABEL_371;
            }
          }
          else
          {
            v248 = v247 * 0.00030353;
            v249 = (float)v238;
            if ((float)(v249 * 0.0039216) >= 0.04045)
              goto LABEL_368;
          }
          v250 = v249 * 0.00030353;
LABEL_371:
          v251 = (float)v240;
          v252 = v7;
          if ((float)(v251 * 0.0039216) >= 0.04045)
          {
            v253 = powf((float)(v251 * 0.0037171) + 0.052133, 2.4);
            if (v232 == 0.0)
              v254 = 0;
            else
              v254 = LODWORD(v232);
            v255 = (unint64_t)v507[1];
            if (!v507[1])
              goto LABEL_400;
          }
          else
          {
            v253 = v251 * 0.00030353;
            if (v232 == 0.0)
              v254 = 0;
            else
              v254 = LODWORD(v232);
            v255 = (unint64_t)v507[1];
            if (!v507[1])
              goto LABEL_400;
          }
          v256 = (uint8x8_t)vcnt_s8((int8x8_t)v255);
          v256.i16[0] = vaddlv_u8(v256);
          if (v256.u32[0] > 1uLL)
          {
            v226 = v254;
            if (v254 >= v255)
              v226 = v254 % v255;
          }
          else
          {
            v226 = ((_DWORD)v255 - 1) & v254;
          }
          v257 = (float **)*((_QWORD *)v507[0] + v226);
          if (v257)
          {
            v258 = *v257;
            if (v258)
            {
              if (v256.u32[0] < 2uLL)
              {
                while (1)
                {
                  v260 = *((_QWORD *)v258 + 1);
                  if (v260 == v254)
                  {
                    if (v258[4] == v232)
                      goto LABEL_438;
                  }
                  else if ((v260 & (v255 - 1)) != v226)
                  {
                    goto LABEL_400;
                  }
                  v258 = *(float **)v258;
                  if (!v258)
                    goto LABEL_400;
                }
              }
              do
              {
                v259 = *((_QWORD *)v258 + 1);
                if (v259 == v254)
                {
                  if (v258[4] == v232)
                    goto LABEL_438;
                }
                else
                {
                  if (v259 >= v255)
                    v259 %= v255;
                  if (v259 != v226)
                    break;
                }
                v258 = *(float **)v258;
              }
              while (v258);
            }
          }
LABEL_400:
          v261 = (float *)operator new(0x20uLL);
          *(_QWORD *)v261 = 0;
          *((_QWORD *)v261 + 1) = v254;
          v261[4] = v232;
          v261[5] = v248;
          v261[6] = v250;
          v261[7] = v253;
          v262 = (float)((unint64_t)v508[1] + 1);
          if (!v255 || (float)(v509 * (float)v255) < v262)
          {
            v263 = (v255 & (v255 - 1)) != 0;
            if (v255 < 3)
              v263 = 1;
            v264 = v263 | (2 * v255);
            v265 = vcvtps_u32_f32(v262 / v509);
            if (v264 <= v265)
              v266 = v265;
            else
              v266 = v264;
            if (v266 == 1)
            {
              v266 = 2;
            }
            else if ((v266 & (v266 - 1)) != 0)
            {
              v266 = std::__next_prime(v266);
              v255 = (unint64_t)v507[1];
            }
            if (v266 > v255)
              goto LABEL_412;
            if (v266 < v255)
            {
              v267 = vcvtps_u32_f32((float)(unint64_t)v508[1] / v509);
              if (v255 < 3
                || (v268 = (uint8x8_t)vcnt_s8((int8x8_t)v255), v268.i16[0] = vaddlv_u8(v268), v268.u32[0] > 1uLL))
              {
                v267 = std::__next_prime(v267);
              }
              else
              {
                v269 = 1 << -(char)__clz(v267 - 1);
                if (v267 >= 2)
                  v267 = v269;
              }
              if (v266 <= v267)
                v266 = v267;
              if (v266 < v255)
LABEL_412:
                std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>((uint64_t)v507, v266);
            }
            v255 = (unint64_t)v507[1];
            if (((unint64_t)v507[1] & ((unint64_t)v507[1] - 1)) != 0)
            {
              if ((void *)v254 >= v507[1])
                v226 = v254 % (unint64_t)v507[1];
              else
                v226 = v254;
            }
            else
            {
              v226 = (LODWORD(v507[1]) - 1) & v254;
            }
          }
          v270 = v507[0];
          v271 = (float **)*((_QWORD *)v507[0] + v226);
          if (v271)
          {
            *(_QWORD *)v261 = *v271;
          }
          else
          {
            *(void **)v261 = v508[0];
            v508[0] = v261;
            v270[v226] = v508;
            if (!*(_QWORD *)v261)
              goto LABEL_437;
            v272 = *(_QWORD *)(*(_QWORD *)v261 + 8);
            if ((v255 & (v255 - 1)) != 0)
            {
              if (v272 >= v255)
                v272 %= v255;
            }
            else
            {
              v272 &= v255 - 1;
            }
            v271 = (float **)((char *)v507[0] + 8 * v272);
          }
          *v271 = v261;
LABEL_437:
          ++v508[1];
LABEL_438:
          ++v225;
          v7 = v252;
          v226 = 1025879765;
        }
        while (v225 < v122);
      }
      v273 = (uint64_t *)(a5 + 320);
      v274 = *a3;
      v275 = *(_QWORD *)(a5 + 328);
      if (v275)
      {
        v276 = (uint8x8_t)vcnt_s8((int8x8_t)v275);
        v276.i16[0] = vaddlv_u8(v276);
        if (v276.u32[0] > 1uLL)
        {
          v122 = *a3;
          if (v275 <= v274)
            v122 = v274 % v275;
        }
        else
        {
          v122 = ((_DWORD)v275 - 1) & v274;
        }
        v313 = *(void ***)(*v273 + 8 * v122);
        if (v313)
        {
          v314 = (unsigned __int8 *)*v313;
          if (*v313)
          {
            if (v276.u32[0] < 2uLL)
            {
              while (1)
              {
                v316 = *((_QWORD *)v314 + 1);
                if (v316 == v274)
                {
                  if (v314[16] == (_DWORD)v274)
                    goto LABEL_861;
                }
                else if ((v316 & (v275 - 1)) != v122)
                {
                  goto LABEL_553;
                }
                v314 = *(unsigned __int8 **)v314;
                if (!v314)
                  goto LABEL_553;
              }
            }
            do
            {
              v315 = *((_QWORD *)v314 + 1);
              if (v315 == v274)
              {
                if (v314[16] == (_DWORD)v274)
                  goto LABEL_861;
              }
              else
              {
                if (v315 >= v275)
                  v315 %= v275;
                if (v315 != v122)
                  break;
              }
              v314 = *(unsigned __int8 **)v314;
            }
            while (v314);
          }
        }
      }
LABEL_553:
      v314 = (unsigned __int8 *)operator new(0x30uLL);
      v317 = (_QWORD *)(a5 + 336);
      v501 = v314;
      v502 = (void *)(a5 + 336);
      *(_QWORD *)v314 = 0;
      *((_QWORD *)v314 + 1) = v274;
      v314[16] = v274;
      *((_QWORD *)v314 + 4) = 0;
      *((_QWORD *)v314 + 5) = 0;
      *((_QWORD *)v314 + 3) = 0;
      LOBYTE(v503) = 1;
      v318 = (float)(unint64_t)(*(_QWORD *)(a5 + 344) + 1);
      v319 = *(float *)(a5 + 352);
      if (v275 && (float)(v319 * (float)v275) >= v318)
      {
        v274 = v122;
      }
      else
      {
        v320 = 1;
        if (v275 >= 3)
          v320 = (v275 & (v275 - 1)) != 0;
        v321 = v320 | (2 * v275);
        v322 = vcvtps_u32_f32(v318 / v319);
        if (v321 <= v322)
          v323 = v322;
        else
          v323 = v321;
        if (v323 == 1)
        {
          v323 = 2;
        }
        else if ((v323 & (v323 - 1)) != 0)
        {
          v323 = std::__next_prime(v323);
          v275 = *(_QWORD *)(a5 + 328);
        }
        if (v323 > v275)
          goto LABEL_620;
        if (v323 < v275)
        {
          v345 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 344) / *(float *)(a5 + 352));
          if (v275 < 3
            || (v346 = (uint8x8_t)vcnt_s8((int8x8_t)v275), v346.i16[0] = vaddlv_u8(v346), v346.u32[0] > 1uLL))
          {
            v345 = std::__next_prime(v345);
          }
          else
          {
            v347 = 1 << -(char)__clz(v345 - 1);
            if (v345 >= 2)
              v345 = v347;
          }
          if (v323 <= v345)
            v323 = v345;
          if (v323 < v275)
LABEL_620:
            std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 320, v323);
        }
        v275 = *(_QWORD *)(a5 + 328);
        if ((v275 & (v275 - 1)) != 0)
        {
          if (v275 <= v274)
            v274 %= v275;
        }
        else
        {
          v274 = ((_DWORD)v275 - 1) & v274;
        }
      }
      v451 = *v273;
      v452 = *(_QWORD **)(*v273 + 8 * v274);
      if (v452)
      {
        *(_QWORD *)v314 = *v452;
      }
      else
      {
        *(_QWORD *)v314 = *v317;
        *v317 = v314;
        *(_QWORD *)(v451 + 8 * v274) = v317;
        if (!*(_QWORD *)v314)
          goto LABEL_860;
        v453 = *(_QWORD *)(*(_QWORD *)v314 + 8);
        if ((v275 & (v275 - 1)) != 0)
        {
          if (v453 >= v275)
            v453 %= v275;
        }
        else
        {
          v453 &= v275 - 1;
        }
        v452 = (_QWORD *)(*v273 + 8 * v453);
      }
      *v452 = v314;
LABEL_860:
      ++*(_QWORD *)(a5 + 344);
LABEL_861:
      LOWORD(v501) = *v7;
      v454 = v507[0];
      v455 = (unint64_t)v507[1];
      v507[0] = 0;
      v507[1] = 0;
      v502 = v454;
      v503 = v455;
      __p = v508[0];
      v505 = v508[1];
      v506 = v509;
      if (v508[1])
      {
        v456 = *((_QWORD *)v508[0] + 1);
        if ((v455 & (v455 - 1)) != 0)
        {
          if (v456 >= v455)
            v456 %= v455;
        }
        else
        {
          v456 &= v455 - 1;
        }
        *((_QWORD *)v454 + v456) = &__p;
        v508[0] = 0;
        v508[1] = 0;
      }
      v457 = *((_QWORD *)v314 + 4);
      if (v457 >= *((_QWORD *)v314 + 5))
      {
        v463 = std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>::__push_back_slow_path<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>>((void **)v314 + 3, (uint64_t)&v501);
      }
      else
      {
        *(_WORD *)v457 = (_WORD)v501;
        v458 = v502;
        v502 = 0;
        *(_QWORD *)(v457 + 8) = v458;
        *(_QWORD *)(v457 + 16) = v503;
        v503 = 0;
        v459 = __p;
        *(_QWORD *)(v457 + 24) = __p;
        v460 = v505;
        *(_QWORD *)(v457 + 32) = v505;
        *(float *)(v457 + 40) = v506;
        if (v460)
        {
          v461 = v459[1];
          v462 = *(_QWORD *)(v457 + 16);
          if ((v462 & (v462 - 1)) != 0)
          {
            if (v461 >= v462)
              v461 %= v462;
          }
          else
          {
            v461 &= v462 - 1;
          }
          v458[v461] = v457 + 24;
          __p = 0;
          v505 = 0;
        }
        v463 = (char *)(v457 + 48);
      }
      *((_QWORD *)v314 + 4) = v463;
      v464 = __p;
      if (__p)
      {
        do
        {
          v465 = (_QWORD *)*v464;
          operator delete(v464);
          v464 = v465;
        }
        while (v465);
      }
      v466 = v502;
      v502 = 0;
      if (v466)
        operator delete(v466);
      v56 = 1;
      v70 = v508[0];
      if (!v508[0])
        goto LABEL_959;
      do
      {
LABEL_881:
        v467 = (_QWORD *)*v70;
        operator delete(v70);
        v70 = v467;
      }
      while (v467);
      goto LABEL_959;
    case 9:
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v71 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v72 = HIDWORD(v501);
      geo::ibitstream::readFloat((uint64_t *)this, (uint64_t)&v501);
      if (!(_BYTE)v501)
        return 0;
      v73 = HIDWORD(v501);
      v74 = (uint64_t *)(a5 + 360);
      v75 = *a3;
      v76 = *(_QWORD *)(a5 + 368);
      if (!v76)
        goto LABEL_580;
      v77 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.u32[0] > 1uLL)
      {
        v5 = *a3;
        if (v76 <= v75)
          v5 = v75 % v76;
      }
      else
      {
        v5 = ((_DWORD)v76 - 1) & v75;
      }
      v324 = *(void ***)(*v74 + 8 * v5);
      if (!v324)
        goto LABEL_580;
      v85 = *v324;
      if (!*v324)
        goto LABEL_580;
      if (v77.u32[0] < 2uLL)
      {
        while (1)
        {
          v326 = v85[1];
          if (v326 == v75)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v75)
              goto LABEL_901;
          }
          else if ((v326 & (v76 - 1)) != v5)
          {
            goto LABEL_580;
          }
          v85 = (_QWORD *)*v85;
          if (!v85)
            goto LABEL_580;
        }
      }
      while (2)
      {
        v325 = v85[1];
        if (v325 == v75)
        {
          if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v75)
            goto LABEL_901;
        }
        else
        {
          if (v325 >= v76)
            v325 %= v76;
          if (v325 != v5)
          {
LABEL_580:
            v327 = (_QWORD *)(a5 + 376);
            v85 = operator new(0x30uLL);
            v501 = (unsigned __int8 *)v85;
            v502 = (void *)(a5 + 376);
            *v85 = 0;
            v85[1] = v75;
            *((_BYTE *)v85 + 16) = v75;
            v85[4] = 0;
            v85[5] = 0;
            v85[3] = 0;
            LOBYTE(v503) = 1;
            v328 = (float)(unint64_t)(*(_QWORD *)(a5 + 384) + 1);
            v329 = *(float *)(a5 + 392);
            if (v76 && (float)(v329 * (float)v76) >= v328)
            {
              v75 = v5;
            }
            else
            {
              v330 = 1;
              if (v76 >= 3)
                v330 = (v76 & (v76 - 1)) != 0;
              v331 = v330 | (2 * v76);
              v332 = vcvtps_u32_f32(v328 / v329);
              if (v331 <= v332)
                v333 = v332;
              else
                v333 = v331;
              if (v333 == 1)
              {
                v333 = 2;
              }
              else if ((v333 & (v333 - 1)) != 0)
              {
                v333 = std::__next_prime(v333);
                v76 = *(_QWORD *)(a5 + 368);
              }
              if (v333 > v76)
                goto LABEL_630;
              if (v333 < v76)
              {
                v348 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 384) / *(float *)(a5 + 392));
                if (v76 < 3
                  || (v349 = (uint8x8_t)vcnt_s8((int8x8_t)v76), v349.i16[0] = vaddlv_u8(v349), v349.u32[0] > 1uLL))
                {
                  v348 = std::__next_prime(v348);
                }
                else
                {
                  v350 = 1 << -(char)__clz(v348 - 1);
                  if (v348 >= 2)
                    v348 = v350;
                }
                if (v333 <= v348)
                  v333 = v348;
                if (v333 < v76)
LABEL_630:
                  std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a5 + 360, v333);
              }
              v76 = *(_QWORD *)(a5 + 368);
              if ((v76 & (v76 - 1)) != 0)
              {
                if (v76 <= v75)
                  v75 %= v76;
              }
              else
              {
                v75 = ((_DWORD)v76 - 1) & v75;
              }
            }
            v468 = *v74;
            v469 = *(_QWORD **)(*v74 + 8 * v75);
            if (v469)
            {
              *v85 = *v469;
            }
            else
            {
              *v85 = *v327;
              *v327 = v85;
              *(_QWORD *)(v468 + 8 * v75) = v327;
              if (!*v85)
              {
LABEL_900:
                ++*(_QWORD *)(a5 + 384);
LABEL_901:
                v471 = *v7;
                v390 = v85[4];
                v472 = v85[5];
                if (v390 < v472)
                {
                  *(_WORD *)v390 = v471;
                  *(_DWORD *)(v390 + 4) = v71;
                  *(_DWORD *)(v390 + 8) = v72;
                  v366 = (char *)(v390 + 16);
                  *(_DWORD *)(v390 + 12) = v73;
                  goto LABEL_919;
                }
                v441 = v85 + 3;
                v473 = v85[3];
                v474 = (uint64_t)(v390 - v473) >> 4;
                v475 = v474 + 1;
                if ((unint64_t)(v474 + 1) >> 60)
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                v476 = v472 - v473;
                if (v476 >> 3 > v475)
                  v475 = v476 >> 3;
                if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFF0)
                  v477 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v477 = v475;
                if (v477)
                {
                  if (v477 >> 60)
                    goto LABEL_964;
                  v478 = (char *)operator new(16 * v477);
                }
                else
                {
                  v478 = 0;
                }
                v447 = &v478[16 * v474];
                *(_WORD *)v447 = v471;
                v448 = &v478[16 * v477];
                *((_DWORD *)v447 + 1) = v71;
                *((_DWORD *)v447 + 2) = v72;
                *((_DWORD *)v447 + 3) = v73;
                v366 = v447 + 16;
                if (v390 != v473)
                {
                  do
                  {
                    *((_OWORD *)v447 - 1) = *(_OWORD *)(v390 - 16);
                    v447 -= 16;
                    v390 -= 16;
                  }
                  while (v390 != v473);
                  goto LABEL_915;
                }
LABEL_916:
                v85[3] = v447;
                v85[4] = v366;
                v85[5] = v448;
                if (!v390)
                  goto LABEL_919;
                goto LABEL_917;
              }
              v470 = *(_QWORD *)(*v85 + 8);
              if ((v76 & (v76 - 1)) != 0)
              {
                if (v470 >= v76)
                  v470 %= v76;
              }
              else
              {
                v470 &= v76 - 1;
              }
              v469 = (_QWORD *)(*v74 + 8 * v470);
            }
            *v469 = v85;
            goto LABEL_900;
          }
        }
        v85 = (_QWORD *)*v85;
        if (!v85)
          goto LABEL_580;
        continue;
      }
    default:
      return 0;
  }
}

void sub_19F1F9B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F1F9BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F1F9BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F1F9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F1F9C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_19F1F9C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_19F1F9CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F1F9D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned char,BOOL>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,BOOL>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,BOOL>>>::__emplace_unique_key_args<unsigned char,unsigned char &,unsigned char &>(uint64_t a1, unsigned __int8 a2, char a3, char a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v12 + 16) == a2)
                return;
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int8 *)v12 + 16) == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_BYTE *)v15 + 16) = a3;
  *((_BYTE *)v15 + 17) = a4 != 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
    goto LABEL_50;
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v9)
    goto LABEL_34;
  if (prime < v9)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < v9)
LABEL_34:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      v4 = v8 % v9;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *v15 = *v26;
LABEL_59:
      *v26 = v15;
      goto LABEL_60;
    }
    v4 = v8;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v4 = ((_DWORD)v9 - 1) & v8;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F1FA01C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,4,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_50;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_34:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v24)
        goto LABEL_53;
LABEL_51:
      *v10 = *v24;
LABEL_59:
      *v24 = v10;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = ((_DWORD)v7 - 1) & v6;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
    goto LABEL_51;
LABEL_53:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F1FA330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,geo::Color<float,3,(geo::ColorSpace)2>>>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
    goto LABEL_50;
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < v7)
LABEL_34:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v24)
        goto LABEL_53;
LABEL_51:
      *v10 = *v24;
LABEL_59:
      *v24 = v10;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = ((_DWORD)v7 - 1) & v6;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
    goto LABEL_51;
LABEL_53:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F1FA644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<geo::codec::MaterialTexture,geo::StdAllocator<geo::codec::MaterialTexture,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *(_QWORD *)result) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v21 = v4 + 40 * a2;
    if (v5 != v21)
    {
      v22 = *(_QWORD *)(result + 8);
      do
      {
        v24 = *(_QWORD *)(v22 - 40);
        v22 -= 40;
        v23 = v24;
        if (v24)
        {
          *(_QWORD *)(v5 - 32) = v23;
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 - 16) + 40))(*(_QWORD *)(v5 - 16), v23, *(_QWORD *)(v5 - 24) - v23);
        }
        v5 = v22;
      }
      while (v22 != v21);
    }
LABEL_23:
    *(_QWORD *)(v3 + 8) = v21;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3) >= v7)
  {
    v21 = v5 + 40 * v7;
    v25 = 40 * a2 - 8 * ((v5 - *(_QWORD *)result) >> 3);
    do
    {
      if (v5)
      {
        *(_QWORD *)(v5 + 32) = 0;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *(_QWORD *)(v5 + 24) = result;
        *(_WORD *)(v5 + 32) = 512;
        *(_DWORD *)(v5 + 36) = 0;
      }
      v5 += 40;
      v25 -= 40;
    }
    while (v25);
    goto LABEL_23;
  }
  if (a2 > 0x666666666666666)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v10;
  v12 = 40 * v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 40 * v11, 8);
  v13 = result;
  v14 = 40 * v6;
  v15 = result + 40 * v6;
  v16 = result + v12;
  v17 = 40 * a2;
  v18 = result + v17;
  do
  {
    v20 = v13 + v14;
    if (v13 + v14)
    {
      *(_QWORD *)(v20 + 32) = 0;
      *(_OWORD *)v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      v19 = v13 + v14;
      *(_QWORD *)(v19 + 24) = result;
      *(_WORD *)(v19 + 32) = 512;
      *(_DWORD *)(v19 + 36) = 0;
    }
    v17 -= 40;
    v13 += 40;
  }
  while (v14 != v17);
  v26 = *(_QWORD *)v3;
  v27 = *(_QWORD *)(v3 + 8);
  if (v27 == *(_QWORD *)v3)
  {
    *(_QWORD *)v3 = v15;
    *(_QWORD *)(v3 + 8) = v18;
    v32 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v16;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = v15 + v28;
      v30 = v27 + v28;
      *(_QWORD *)(v29 - 40) = 0;
      *(_QWORD *)(v29 - 32) = 0;
      *(_QWORD *)(v29 - 24) = 0;
      *(_QWORD *)(v29 - 16) = *(_QWORD *)(v27 + v28 - 16);
      *(_OWORD *)(v29 - 40) = *(_OWORD *)(v27 + v28 - 40);
      *(_QWORD *)(v29 - 24) = *(_QWORD *)(v27 + v28 - 24);
      *(_QWORD *)(v30 - 40) = 0;
      *(_QWORD *)(v30 - 32) = 0;
      *(_QWORD *)(v30 - 24) = 0;
      *(_QWORD *)(v29 - 8) = *(_QWORD *)(v27 + v28 - 8);
      v28 -= 40;
    }
    while (v27 + v28 != v26);
    v27 = *(_QWORD *)v3;
    v31 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = v15 + v28;
    *(_QWORD *)(v3 + 8) = v18;
    v32 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v16;
    if (v31 != v27)
    {
      v33 = v31;
      do
      {
        v35 = *(_QWORD *)(v33 - 40);
        v33 -= 40;
        v34 = v35;
        if (v35)
        {
          *(_QWORD *)(v31 - 32) = v34;
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 - 16) + 40))(*(_QWORD *)(v31 - 16), v34, *(_QWORD *)(v31 - 24) - v34);
        }
        v31 = v33;
      }
      while (v33 != v27);
    }
  }
  if (v27)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v27, v32 - v27);
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

_QWORD *md::PolygonLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unsigned __int8 v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t *v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *result;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[1];
  v42[0] = &off_1E42CAA78;
  v42[1] = a2;
  v43 = v42;
  v40[0] = &off_1E42CAAC0;
  v40[1] = a2;
  v41 = v40;
  v45 = v44;
  v44[0] = &off_1E42CAAC0;
  v44[1] = a2;
  _ZNSt3__110__function6__funcIZN2md12PolygonLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15SettingsContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_14PolygonContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v42);
  v8 = v41;
  if (v41 == v40)
  {
    v9 = 4;
    v8 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v43;
  if (v43 == v42)
  {
    v11 = 4;
    v10 = v42;
    goto LABEL_10;
  }
  if (v43)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = *(double *)(a1 + 152);
  *(float *)a4 = v12;
  v13 = *v7;
  if ((v14 & 1) == 0)
  {
    v39 = *v7;
    v13 = v39;
    if (v38)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      v13 = v39;
    }
  }
  v15 = *(_WORD **)(v13 + 48);
  v16 = *(_WORD **)(v13 + 56);
  if (v15 == v16)
  {
    v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v18 = *(_WORD **)(v13 + 48);
    while (*v18 != 65)
    {
      v18 += 16;
      if (v18 == v16)
        goto LABEL_24;
    }
    if (v18 == v16)
    {
      v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v15 != 65)
      {
        v15 += 16;
        if (v15 == v16)
        {
          v15 = *(_WORD **)(v13 + 56);
          break;
        }
      }
      v17 = (uint64_t *)(v15 + 4);
    }
  }
LABEL_24:
  v19 = v17[2];
  v20 = *v6;
  v21 = v6[1];
  if (*v6 != v21)
  {
    while (*(_BYTE *)v20 != 34)
    {
      v20 += 16;
      if (v20 == v21)
        goto LABEL_36;
    }
  }
  if (v20 == v21
    || (*(_BYTE *)(a1 + 232) ? (v22 = v19 == 0) : (v22 = 1), v22 ? (v23 = 0) : (v23 = 1), !*(_QWORD *)(v20 + 8)))
  {
LABEL_36:
    v23 = 0;
  }
  *(_BYTE *)(a4 + 4) = v23;
  v24 = *v7;
  if ((v25 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v26 = *(_WORD **)(v24 + 48);
  v27 = *(_WORD **)(v24 + 56);
  v28 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v26 != v27)
  {
    v29 = *(_WORD **)(v24 + 48);
    while (*v29 != 64)
    {
      v29 += 16;
      if (v29 == v27)
        goto LABEL_49;
    }
    if (v29 == v27)
    {
      v28 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v26 != 64)
      {
        v26 += 16;
        if (v26 == v27)
        {
          v26 = *(_WORD **)(v24 + 56);
          break;
        }
      }
      v28 = (uint64_t *)(v26 + 4);
    }
  }
LABEL_49:
  v30 = v28[2];
  v31 = *v6;
  v32 = v6[1];
  if (*v6 != v32)
  {
    while (*(_BYTE *)v31 != 32)
    {
      v31 += 16;
      if (v31 == v32)
        goto LABEL_55;
    }
  }
  if (v31 == v32)
LABEL_55:
    v33 = 0;
  else
    v33 = *(_QWORD *)(v31 + 8) != 0;
  if (v30)
    v34 = v33;
  else
    v34 = 0;
  *(_BYTE *)(a4 + 5) = v34;
  v35 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a4 + 16) = *(_BYTE *)(a1 + 128);
  *(_QWORD *)(a4 + 8) = v35;
  if (!v45)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v45 + 48))(v45);
  result = v45;
  if (v45 == v44)
  {
    v37 = 4;
    result = v44;
  }
  else
  {
    if (!v45)
      return result;
    v37 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v37))();
}

void sub_19F1FAD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void md::RegistryManager::update(uint64_t a1, uint64_t a2, uint64_t *a3, os_signpost_id_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  gdc::Registry *v6;
  gdc::Registry *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  gdc::Registry *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  unsigned int **v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int ***v43;
  _QWORD *v44;
  NSObject *v45;
  NSObject *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  uint64_t v64;
  BOOL v65;
  NSObject *v66;
  uint64_t v67;
  uint8_t *v68;
  char v69;
  NSObject *v70;
  int v71;
  uint64_t v72;
  _WORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  NSObject *v87;
  uint64_t v88;
  _WORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unsigned int v104;
  unsigned __int16 *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  unsigned __int16 *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  BOOL v121;
  unsigned __int16 *v122;
  uint64_t v123;
  unint64_t v124;
  _OWORD *v125;
  char *v126;
  unint64_t v127;
  __int128 v128;
  unsigned __int16 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  _WORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  __int128 v150;
  __int16 v151;
  char *v152;
  int64_t v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  char *v167;
  _DWORD *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  gdc::Registry *v184;
  uint64_t v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t *v188;
  unsigned int v189;
  _QWORD *v190;
  uint64_t v191;
  unsigned int v193;
  uint64_t v194;
  BOOL v195;
  NSObject *v196;
  int v197;
  uint64_t v198;
  _WORD *v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _BYTE *v210;
  NSObject *v211;
  int v212;
  uint64_t v213;
  uint8_t *v214;
  int v215;
  unint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  _OWORD *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  char *v261;
  gdc::Registry *v262;
  gdc::Registry *v263;
  uint64_t v264;
  gdc::Registry *v265;
  NSObject *v266;
  NSObject *v267;
  os_signpost_id_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t (***v272)();
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  const __int16 *v276;
  int v277;
  uint64_t v278;
  unsigned __int8 v279;
  unsigned __int16 *v280;
  unsigned __int16 *v281;
  unsigned __int16 *v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t *v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int v289;
  int v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  int v294;
  int v295;
  unsigned int v296;
  _BOOL4 v298;
  int v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  _BYTE *v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t i;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t j;
  _QWORD *v330;
  _QWORD *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t k;
  _OWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *n;
  _QWORD *v341;
  _OWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  unint64_t v347;
  int v348;
  unsigned int *v349;
  unint64_t v350;
  unint64_t *v351;
  _QWORD *v352;
  int8x8_t v353;
  uint8x8_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  char *v369;
  unint64_t *v370;
  uint64_t v371;
  __int128 v372;
  unint64_t v373;
  uint64_t v374;
  __int16 v375;
  _WORD *v376;
  unint64_t v377;
  int8x8_t v378;
  uint8x8_t v379;
  unint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  int8x8_t v385;
  uint8x8_t v386;
  unint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  unint64_t *v399;
  _QWORD *v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  unint64_t *v404;
  uint64_t v405;
  __int128 v406;
  unint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  unint64_t v410;
  unint64_t *v411;
  _QWORD *v412;
  unint64_t v413;
  unint64_t *v414;
  _QWORD *v415;
  unint64_t *v416;
  int64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  _BYTE *v423;
  unint64_t *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  _BYTE *v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  _OWORD *v436;
  unint64_t *v437;
  uint64_t v438;
  __int128 v439;
  unint64_t v440;
  _QWORD *v441;
  int8x8_t v442;
  unint64_t v443;
  uint8x8_t v444;
  unint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _OWORD *v451;
  unint64_t *v452;
  uint64_t v453;
  __int128 v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  _BYTE *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  _BYTE *v465;
  unint64_t *v466;
  unint64_t v467;
  uint64_t v468;
  _OWORD *v469;
  __int128 *v470;
  uint64_t v471;
  __int128 v472;
  unint64_t v473;
  _QWORD *v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  uint8x8_t v479;
  _QWORD **v480;
  _QWORD *v481;
  unint64_t v482;
  uint64_t v483;
  _QWORD *v484;
  float v485;
  float v486;
  _BOOL8 v487;
  unint64_t v488;
  unint64_t v489;
  size_t prime;
  void *v491;
  void *v492;
  uint64_t v493;
  _QWORD *v494;
  size_t v495;
  size_t v496;
  size_t v497;
  _QWORD *m;
  size_t v499;
  uint64_t v500;
  unint64_t v501;
  uint8x8_t v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  size_t v506;
  uint64_t v507;
  _QWORD *v508;
  unint64_t v509;
  int v510;
  int v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  BOOL v515;
  unint64_t v516;
  char *v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  char *v522;
  char *v523;
  char *v524;
  _QWORD *v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  uint8_t *v529;
  void *v530;
  uint64_t *v531;
  unint64_t v532;
  char *v533;
  _QWORD *v534;
  char *v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  _BYTE *v539;
  uint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  _OWORD *v543;
  char *v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  unint64_t v551;
  uint8x8_t v552;
  _QWORD *v553;
  _QWORD *v554;
  uint64_t v555;
  unint64_t v556;
  char *v557;
  _QWORD *v558;
  float v559;
  float v560;
  _BOOL8 v561;
  unint64_t v562;
  unint64_t v563;
  size_t v564;
  BOOL v565;
  unint64_t v566;
  uint8x8_t v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  unint64_t v571;
  _QWORD *v572;
  _QWORD *v573;
  _QWORD *v574;
  char *v575;
  char *v576;
  unint64_t v577;
  char *v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  _BYTE *v583;
  _QWORD *v584;
  unint64_t v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  _OWORD *v589;
  char *v590;
  uint64_t v591;
  __int128 v592;
  unsigned int *v593;
  unsigned int *ii;
  int8x8_t v595;
  unint64_t v596;
  uint8x8_t v597;
  unint64_t v598;
  uint64_t **v599;
  uint64_t *v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  NSObject *v604;
  NSObject *v605;
  uint64_t v606;
  uint64_t v607;
  unsigned __int16 *v608;
  unsigned int v609;
  unsigned __int16 *v610;
  unsigned int v611;
  NSObject *v613;
  uint64_t v614;
  uint64_t v615;
  unsigned __int16 *v616;
  unsigned int v617;
  unsigned __int16 *v618;
  unsigned int v619;
  NSObject *v621;
  uint64_t v622;
  uint64_t v623;
  unsigned __int16 *v624;
  unsigned int v625;
  unsigned __int16 *v626;
  unsigned int v627;
  NSObject *v629;
  uint64_t v630;
  uint64_t v631;
  unsigned __int16 *v632;
  unsigned int v633;
  unsigned __int16 *v634;
  unsigned int v635;
  NSObject *v637;
  uint64_t v638;
  uint64_t *v639;
  unint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t *v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t *v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t *v654;
  unint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t *v658;
  _QWORD *v659;
  _QWORD *v660;
  unint64_t *v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unint64_t v665;
  _BYTE *v666;
  unint64_t *v667;
  unint64_t v668;
  uint64_t v669;
  _OWORD *v670;
  unint64_t *v671;
  uint64_t v672;
  __int128 v673;
  unint64_t v674;
  _QWORD *v675;
  uint64_t v676;
  _WORD *v677;
  uint64_t v678;
  char *__src;
  int v680;
  uint8_t *v681;
  _QWORD *v682;
  uint64_t **v683;
  _QWORD *v684;
  _QWORD *v685;
  _QWORD *v686;
  unint64_t v688;
  uint64_t *v689;
  _QWORD *v690;
  uint64_t v691;
  _QWORD *v692;
  uint8_t *v693;
  uint64_t *v694;
  int64x2_t v695;
  uint64_t *v696;
  uint8_t *v697;
  uint64_t *v698;
  unint64_t *v699;
  os_signpost_id_t v702;
  uint8_t *v703;
  uint64_t v704;
  char *v705;
  uint64_t v706;
  char *v707;
  uint64_t v708;
  __int128 v709;
  uint64_t v710;
  _QWORD v711[3];
  _QWORD *v712;
  uint64_t (**v713)();
  os_signpost_id_t *v714;
  uint64_t (***v715)();
  _WORD v716[12];
  _BYTE v717[20];
  __int16 v718;
  int v719;
  uint8_t buf[24];
  int v721;
  uint64_t v722;

  v722 = *MEMORY[0x1E0C80C00];
  v702 = a4;
  v4 = *(_QWORD **)(a1 + 328);
  v5 = *(_QWORD **)(a1 + 336);
  while (v5 != v4)
  {
    v7 = (gdc::Registry *)*--v5;
    v6 = v7;
    *v5 = 0;
    if (v7)
    {
      gdc::Registry::~Registry(v6);
      MEMORY[0x1A1AF4E00]();
    }
  }
  v8 = (_QWORD *)a1;
  *(_QWORD *)(a1 + 336) = v4;
  v10 = *(_QWORD *)(a1 + 352);
  v9 = *(_QWORD *)(a1 + 360);
  if (v10 == v9)
    goto LABEL_55;
  v11 = (uint64_t *)(a1 + 312);
  do
  {
    if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
      dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
    v12 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 104) + 40);
      memset(v716, 0, sizeof(v716));
      *(_QWORD *)&v709 = v716;
      *((_QWORD *)&v709 + 1) = v716;
      v14 = *(unsigned int *)(v10 + 96);
      if ((_DWORD)v14 == -1)
        goto LABEL_1195;
      v703 = (uint8_t *)&v709;
      ((void (*)(uint8_t **, uint64_t))off_1E42EEDB0[v14])(&v703, v10);
      if (v716[11] >= 0)
        v15 = v716;
      else
        v15 = *(_WORD **)v716;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v15;
      _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_DEBUG, "[RegistryDestroyed] Registry:%d key:%s", buf, 0x12u);
      if (SHIBYTE(v716[11]) < 0)
        operator delete(*(void **)v716);
    }

    v16 = *v11;
    if (*v11)
    {
      v17 = *(_DWORD *)(v10 + 96);
      if (v17 != -1)
      {
        v18 = a1 + 312;
        while (1)
        {
          v19 = *(unsigned int *)(v16 + 128);
          if ((_DWORD)v19 == -1 || v19 < v17)
          {
            v16 = *(_QWORD *)(v16 + 8);
            if (!v16)
              goto LABEL_36;
            goto LABEL_32;
          }
          if (v19 <= v17)
            break;
          do
          {
            v18 = v16;
            v16 = *(_QWORD *)v16;
            if (!v16)
              goto LABEL_36;
LABEL_32:
            v17 = *(_DWORD *)(v10 + 96);
          }
          while (v17 == -1);
        }
        *(_QWORD *)v716 = buf;
        if (((unsigned int (*)(_WORD *, uint64_t, uint64_t))off_1E42EEDE0[v19])(v716, v16 + 32, v10))
          v16 += 8;
        else
          v18 = v16;
        v16 = *(_QWORD *)v16;
        if (!v16)
          goto LABEL_36;
        goto LABEL_32;
      }
      do
      {
        v18 = v16;
        v16 = *(_QWORD *)v16;
      }
      while (v16);
LABEL_36:
      if ((uint64_t *)v18 != v11)
      {
        v21 = *(_DWORD *)(v18 + 128);
        if (v21 == -1
          || ((v22 = *(unsigned int *)(v10 + 96), (_DWORD)v22 != -1) ? (v23 = v22 >= v21) : (v23 = 0),
              v23
           && (v22 > v21
            || (*(_QWORD *)v716 = buf,
                (((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E42EEDE0[v22])(v716, v10, v18 + 32) & 1) == 0))))
        {
          std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase((_QWORD *)(a1 + 304), v18);
        }
      }
    }
    v10 += 112;
  }
  while (v10 != v9);
  v24 = *(_QWORD *)(a1 + 352);
  v10 = *(_QWORD *)(a1 + 360);
  if (v10 != v24)
  {
    do
    {
      v25 = *(gdc::Registry **)(v10 - 8);
      *(_QWORD *)(v10 - 8) = 0;
      if (v25)
      {
        gdc::Registry::~Registry(v25);
        MEMORY[0x1A1AF4E00]();
      }
      v26 = v10 - 112;
      v27 = *(unsigned int *)(v10 - 16);
      if ((_DWORD)v27 != -1)
        ((void (*)(_WORD *, uint64_t))off_1E42FA3C0[v27])(v716, v10 - 112);
      *(_DWORD *)(v10 - 16) = -1;
      v10 -= 112;
    }
    while (v26 != v24);
    v10 = v24;
  }
  v8 = (_QWORD *)a1;
LABEL_55:
  v8[45] = v10;
  v8[58] = v8[57];
  v8[112] = v8[111];
  v8[115] = v8[114];
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v28 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v29 = v28;
  if (v702 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v28))
  {
    v716[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v29, OS_SIGNPOST_INTERVAL_BEGIN, v702, "SynchPoint", (const char *)&unk_1A0189141, (uint8_t *)v716, 2u);
  }

  std::mutex::lock((std::mutex *)(a1 + 144));
  v30 = *(_QWORD *)(a1 + 288);
  v31 = *(_QWORD *)(a1 + 296);
  v32 = (_QWORD *)(v30 + 16);
  if (!v31)
    v32 = (_QWORD *)(a1 + 256);
  v33 = (_QWORD *)(a1 + 280);
  v34 = *(_OWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 264) = v30;
  *(_OWORD *)(a1 + 280) = v34;
  v35 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v31;
  *(_QWORD *)(a1 + 296) = v35;
  *v32 = a1 + 264;
  if (v35)
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 288) + 16);
  else
    v36 = (_QWORD *)(a1 + 280);
  v685 = (_QWORD *)(a1 + 288);
  *v36 = a1 + 288;
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*(_QWORD **)(a1 + 264));
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  std::mutex::unlock((std::mutex *)(a1 + 144));
  std::mutex::lock((std::mutex *)(a1 + 80));
  v38 = (_QWORD *)(a1 + 240);
  v37 = *(_QWORD *)(a1 + 240);
  v39 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 216) = v37;
  v40 = (unsigned int **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 232) = v39;
  v41 = *(_QWORD *)(a1 + 224);
  v42 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 224) = v42;
  *(_QWORD *)(a1 + 248) = v41;
  v43 = (unsigned int ***)(v37 + 16);
  if (!v42)
    v43 = (unsigned int ***)(a1 + 208);
  *v43 = v40;
  v44 = (_QWORD *)(*v38 + 16);
  v683 = (uint64_t **)(a1 + 232);
  if (!v41)
    v44 = (_QWORD *)(a1 + 232);
  v696 = (uint64_t *)(a1 + 240);
  *v44 = v38;
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*v40);
  *(_QWORD *)(a1 + 208) = v40;
  *v40 = 0;
  *(_QWORD *)(a1 + 224) = 0;
  std::mutex::unlock((std::mutex *)(a1 + 80));
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v45 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v46 = v45;
  if (v702 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
  {
    v716[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v46, OS_SIGNPOST_INTERVAL_END, v702, "SynchPoint", (const char *)&unk_1A0189141, (uint8_t *)v716, 2u);
  }

  v47 = (_QWORD *)*v33;
  v48 = a1;
  if ((_QWORD *)*v33 != v685)
  {
    v689 = (uint64_t *)(a1 + 312);
    while (2)
    {
      v49 = *v689;
      if (!*v689)
        goto LABEL_101;
      v50 = *((_DWORD *)v47 + 32);
      if (v50 != -1)
      {
        v51 = a1 + 312;
        while (1)
        {
          v52 = *(unsigned int *)(v49 + 128);
          if ((_DWORD)v52 == -1 || v52 < v50)
          {
            v49 = *(_QWORD *)(v49 + 8);
            if (!v49)
              goto LABEL_95;
            goto LABEL_91;
          }
          if (v52 <= v50)
            break;
          do
          {
            v51 = v49;
            v49 = *(_QWORD *)v49;
            if (!v49)
              goto LABEL_95;
LABEL_91:
            v50 = *((_DWORD *)v47 + 32);
          }
          while (v50 == -1);
        }
        *(_QWORD *)v716 = buf;
        if (((unsigned int (*)(_WORD *, uint64_t, _QWORD *))off_1E42EEDE0[v52])(v716, v49 + 32, v47 + 4))
          v49 += 8;
        else
          v51 = v49;
        v49 = *(_QWORD *)v49;
        if (!v49)
          goto LABEL_95;
        goto LABEL_91;
      }
      do
      {
        v51 = v49;
        v49 = *(_QWORD *)v49;
      }
      while (v49);
LABEL_95:
      if ((uint64_t *)v51 != v689
        && ((v54 = v51 + 32, v55 = *(_DWORD *)(v51 + 128), v55 == -1)
         || ((v56 = *((unsigned int *)v47 + 32), (_DWORD)v56 != -1) ? (v57 = v56 >= v55) : (v57 = 0),
             v57
          && (v56 > v55
           || (*(_QWORD *)v716 = buf,
               v69 = ((uint64_t (*)(_WORD *, _QWORD *))off_1E42EEDE0[v56])(v716, v47 + 4),
               v54 = v51 + 32,
               (v69 & 1) == 0)))))
      {
        v691 = v54;
        if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
          dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
        v70 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          v71 = *(unsigned __int16 *)(*(_QWORD *)(v51 + 136) + 40);
          memset(v716, 0, sizeof(v716));
          *(_QWORD *)&v709 = v716;
          *((_QWORD *)&v709 + 1) = v716;
          v72 = *((unsigned int *)v47 + 32);
          if ((_DWORD)v72 == -1)
            goto LABEL_1195;
          v703 = (uint8_t *)&v709;
          ((void (*)(uint8_t **, _QWORD *))off_1E42EEDB0[v72])(&v703, v47 + 4);
          if (v716[11] >= 0)
            v73 = v716;
          else
            v73 = *(_WORD **)v716;
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v71;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v73;
          _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_DEBUG, "[RegistryDestructionQueued] Registry:%d key:%s", buf, 0x12u);
          if (SHIBYTE(v716[11]) < 0)
            operator delete(*(void **)v716);
        }

        v74 = (_QWORD *)a1;
        v75 = *(_QWORD **)(a1 + 384);
        v76 = *(_QWORD **)(a1 + 392);
        v77 = *(_QWORD *)(v51 + 136);
        if (v76 != v75)
        {
          v78 = v76 - v75;
          v79 = *(unsigned __int16 *)(v77 + 40);
          do
          {
            v80 = v78 >> 1;
            v81 = &v75[v78 >> 1];
            v83 = *v81;
            v82 = v81 + 1;
            v78 += ~(v78 >> 1);
            if (*(unsigned __int16 *)(v83 + 40) < v79)
              v75 = v82;
            else
              v78 = v80;
          }
          while (v78);
          if (v75 != v76 && v79 >= *(unsigned __int16 *)(*v75 + 40) && *(_DWORD *)(v51 + 128) == 1)
          {
            v84 = *(char **)(a1 + 920);
            v85 = *(_QWORD *)(a1 + 928);
            if ((unint64_t)v84 < v85)
            {
              *(_QWORD *)v84 = v77;
              v86 = v84 + 8;
              goto LABEL_190;
            }
            v90 = *(char **)(a1 + 912);
            v91 = (v84 - v90) >> 3;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61)
              abort();
            v93 = v85 - (_QWORD)v90;
            if (v93 >> 2 > v92)
              v92 = v93 >> 2;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
              v94 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            if (v94)
            {
              if (v94 >> 61)
                goto LABEL_1190;
              v95 = operator new(8 * v94);
            }
            else
            {
              v95 = 0;
            }
            v96 = &v95[8 * v91];
            *v96 = v77;
            v86 = v96 + 1;
            if (v84 == v90)
            {
              v90 = v84;
              v74 = (_QWORD *)a1;
            }
            else
            {
              v97 = v84 - 8 - v90;
              if (v97 >= 0x58)
              {
                v74 = (_QWORD *)a1;
                if ((unint64_t)(v90 - v95) < 0x20)
                  goto LABEL_186;
                v98 = (v97 >> 3) + 1;
                v99 = &v95[8 * v91 - 16];
                v100 = v84 - 16;
                v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v102 = *(_OWORD *)v100;
                  *(v99 - 1) = *((_OWORD *)v100 - 1);
                  *v99 = v102;
                  v99 -= 2;
                  v100 -= 32;
                  v101 -= 4;
                }
                while (v101);
                v96 -= v98 & 0x3FFFFFFFFFFFFFFCLL;
                v84 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
                if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_186;
              }
              else
              {
                v74 = (_QWORD *)a1;
                do
                {
LABEL_186:
                  v103 = *((_QWORD *)v84 - 1);
                  v84 -= 8;
                  *--v96 = v103;
                }
                while (v84 != v90);
                v90 = (char *)v74[114];
              }
            }
            v74[114] = v96;
            v74[115] = v86;
            v74[116] = &v95[8 * v94];
            if (v90)
              operator delete(v90);
LABEL_190:
            v74[115] = v86;
            v77 = *(_QWORD *)(v51 + 136);
          }
        }
        v104 = *(unsigned __int16 *)(v77 + 40);
        v716[0] = *(_WORD *)(v77 + 40);
        v106 = (char *)v74[57];
        v105 = (unsigned __int16 *)v74[58];
        v107 = v106;
        if (v106 != (char *)v105)
        {
          v107 = (char *)v74[57];
          while (*(unsigned __int16 *)v107 < v104)
          {
            v107 += 2;
            if (v107 == (char *)v105)
            {
              v108 = (char *)v74[58];
              goto LABEL_198;
            }
          }
        }
        v108 = (char *)v74[58];
        if (v107 == (char *)v105 || (v108 = v107, v104 != *(unsigned __int16 *)v107))
        {
LABEL_198:
          v109 = v108 - v106;
          v110 = (v108 - v106) >> 1;
          v111 = &v106[(v108 - v106) & 0xFFFFFFFFFFFFFFFELL];
          v112 = v74[59];
          if ((unint64_t)v105 < v112)
          {
            if (v111 == (char *)v105)
            {
              *v105 = v104;
              v74[58] = v105 + 1;
            }
            else
            {
              v113 = (char *)v105 - (v111 + 2);
              v114 = v113 >> 1;
              v115 = v105 - 1;
              if ((unint64_t)v105 < 2)
              {
                v122 = (unsigned __int16 *)v74[58];
              }
              else
              {
                v116 = (v109 & 0xFFFFFFFFFFFFFFFELL) + v113;
                v117 = &v106[v116];
                v118 = (unint64_t)&v106[v116 + 2];
                if ((unint64_t)v105 > v118)
                  v118 = v74[58];
                v119 = v118 + ~(unint64_t)v106 - v116;
                v120 = (char *)v105 - v117;
                v121 = v119 >= 0x1E && v120 > 0x1F;
                v122 = (unsigned __int16 *)v74[58];
                if (!v121)
                  goto LABEL_1214;
                v123 = (v119 >> 1) + 1;
                v124 = v123 & 0xFFFFFFFFFFFFFFF0;
                v115 = (unsigned __int16 *)((char *)v115 + v124 * 2);
                v125 = v105 + 8;
                v126 = &v106[2 * v114 + 16 + 2 * v110];
                v127 = v123 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  v128 = *(_OWORD *)v126;
                  *(v125 - 1) = *((_OWORD *)v126 - 1);
                  *v125 = v128;
                  v125 += 2;
                  v126 += 32;
                  v127 -= 16;
                }
                while (v127);
                v122 = &v105[v124];
                if (v123 != (v123 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_1214:
                  do
                  {
                    v129 = *v115++;
                    *v122++ = v129;
                  }
                  while (v115 < v105);
                }
              }
              v74[58] = v122;
              if (v105 != (unsigned __int16 *)(v111 + 2))
              {
                memmove(&v105[-v114], v111, v113);
                v111 = &v106[(v108 - v106) & 0xFFFFFFFFFFFFFFFELL];
              }
              v140 = v716;
              if (v111 <= (char *)v716)
                v140 = &v716[v74[58] > (unint64_t)v716];
              *(_WORD *)v111 = *v140;
            }
            goto LABEL_259;
          }
          v130 = (char *)v105 - v106;
          if (v130 <= -3)
            abort();
          v131 = v130 >> 1;
          v132 = v112 - (_QWORD)v106;
          if (v132 <= v131 + 1)
            v133 = v131 + 1;
          else
            v133 = v132;
          if (v132 >= 0x7FFFFFFFFFFFFFFELL)
            v134 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v134 = v133;
          if (v134)
          {
            if (v134 < 0)
              goto LABEL_1190;
            v135 = (char *)operator new(2 * v134);
            v111 = &v106[(v108 - v106) & 0xFFFFFFFFFFFFFFFELL];
          }
          else
          {
            v135 = 0;
          }
          v136 = &v135[2 * v110];
          v137 = &v135[2 * v134];
          if (v110 == v134)
          {
            v74 = (_QWORD *)a1;
            if (v109 < 1)
            {
              __src = v111;
              if (v106 == v108)
                v141 = 1;
              else
                v141 = v108 - v106;
              if (v141 < 0)
                goto LABEL_1190;
              v136 = (char *)operator new(2 * v141);
              v137 = &v136[2 * v141];
              if (v135)
              {
                operator delete(v135);
                v137 = &v136[2 * v141];
                v74 = (_QWORD *)a1;
                v139 = *(char **)(a1 + 456);
                LOWORD(v104) = v716[0];
              }
              else
              {
                v139 = v106;
                v74 = (_QWORD *)a1;
              }
              v111 = __src;
            }
            else
            {
              v138 = v110 + 2;
              if (v110 >= -1)
                v138 = v110 + 1;
              v136 -= v138 & 0xFFFFFFFFFFFFFFFELL;
              v139 = v106;
            }
          }
          else
          {
            v139 = v106;
            v74 = (_QWORD *)a1;
          }
          *(_WORD *)v136 = v104;
          v142 = v136 + 2;
          if (v139 != v111)
          {
            v143 = &v106[v109 & 0xFFFFFFFFFFFFFFFELL];
            v144 = v143 - v139 - 2;
            if (v144 < 0x1E)
            {
              v146 = v111;
            }
            else if ((unint64_t)(v143 - v136) < 0x20)
            {
              v146 = v111;
            }
            else
            {
              v145 = (v144 >> 1) + 1;
              v146 = &v111[-2 * (v145 & 0xFFFFFFFFFFFFFFF0)];
              v147 = v136 - 16;
              v148 = &v106[2 * v110 - 16];
              v149 = v145 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v150 = *(_OWORD *)v148;
                *((_OWORD *)v147 - 1) = *((_OWORD *)v148 - 1);
                *(_OWORD *)v147 = v150;
                v147 -= 32;
                v148 -= 32;
                v149 -= 16;
              }
              while (v149);
              v136 -= 2 * (v145 & 0xFFFFFFFFFFFFFFF0);
              if (v145 == (v145 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_255;
            }
            do
            {
              v151 = *((_WORD *)v146 - 1);
              v146 -= 2;
              *((_WORD *)v136 - 1) = v151;
              v136 -= 2;
            }
            while (v146 != v139);
          }
LABEL_255:
          v152 = (char *)v74[58];
          v153 = v152 - v111;
          if (v152 != v111)
          {
            v154 = v137;
            memmove(v142, v111, v152 - v111);
            v137 = v154;
            v139 = (char *)v74[57];
          }
          v74[57] = v136;
          v74[58] = &v142[v153];
          v74[59] = v137;
          if (v139)
            operator delete(v139);
        }
LABEL_259:
        v156 = v74[45];
        v155 = v74[46];
        if (v156 < v155)
        {
          *(_BYTE *)v156 = 0;
          *(_DWORD *)(v156 + 96) = -1;
          v157 = *(unsigned int *)(v51 + 128);
          if ((_DWORD)v157 != -1)
          {
            ((void (*)(uint8_t *, unint64_t, uint64_t))off_1E42EEDC0[v157])(buf, v156, v691);
            *(_DWORD *)(v156 + 96) = v157;
          }
          v158 = *(_QWORD *)(v51 + 136);
          *(_QWORD *)(v51 + 136) = 0;
          *(_QWORD *)(v156 + 104) = v158;
          v159 = (char *)(v156 + 112);
          v160 = (_QWORD *)a1;
          *(_QWORD *)(a1 + 360) = v156 + 112;
          goto LABEL_286;
        }
        v161 = v74[44];
        v162 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v156 - v161) >> 4);
        v163 = v162 + 1;
        if ((unint64_t)(v162 + 1) > 0x249249249249249)
          abort();
        v164 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v155 - v161) >> 4);
        if (2 * v164 > v163)
          v163 = 2 * v164;
        if (v164 >= 0x124924924924924)
          v165 = 0x249249249249249;
        else
          v165 = v163;
        *(_QWORD *)&v717[8] = a1 + 368;
        if (v165)
        {
          if (v165 > 0x249249249249249)
            goto LABEL_1190;
          v166 = operator new(112 * v165);
        }
        else
        {
          v166 = 0;
        }
        v167 = (char *)&v166[14 * v162];
        *(_QWORD *)v716 = v166;
        *(_QWORD *)&v716[4] = v167;
        *(_QWORD *)&v716[8] = v167;
        *(_QWORD *)v717 = &v166[14 * v165];
        *v167 = 0;
        *((_DWORD *)v167 + 24) = -1;
        v168 = v167 + 96;
        v169 = *(unsigned int *)(v51 + 128);
        if ((_DWORD)v169 == -1)
        {
          v170 = (char *)&v166[14 * v162];
        }
        else
        {
          ((void (*)(__int128 *, _QWORD *, uint64_t))off_1E42EEDC0[v169])(&v709, &v166[14 * v162], v691);
          *v168 = v169;
          v167 = *(char **)&v716[4];
          v170 = *(char **)&v716[8];
        }
        v171 = *(_QWORD *)(v51 + 136);
        *(_QWORD *)(v51 + 136) = 0;
        v166[14 * v162 + 13] = v171;
        v159 = v170 + 112;
        *(_QWORD *)&v716[8] = v170 + 112;
        v172 = *(_QWORD **)(a1 + 360);
        v692 = *(_QWORD **)(a1 + 352);
        if (v172 == v692)
        {
          v180 = *(_QWORD **)(a1 + 360);
          v160 = (_QWORD *)a1;
        }
        else
        {
          v173 = 0;
          do
          {
            v175 = &v167[v173];
            v167[v173 - 112] = 0;
            v176 = (char *)&v172[v173 / 8];
            *(_DWORD *)&v167[v173 - 16] = -1;
            v177 = &v167[v173 - 16];
            v178 = LODWORD(v172[v173 / 8 - 2]);
            if ((_DWORD)v178 != -1)
            {
              v179 = v167;
              ((void (*)(__int128 *, char *, char *))off_1E42EEDD0[v178])(&v709, &v167[v173 - 112], v176 - 112);
              *(_DWORD *)v177 = v178;
              v167 = v179;
            }
            v174 = *((_QWORD *)v176 - 1);
            *((_QWORD *)v176 - 1) = 0;
            *((_QWORD *)v175 - 1) = v174;
            v173 -= 112;
          }
          while (&v172[v173 / 8] != v692);
          v167 += v173;
          v160 = (_QWORD *)a1;
          v180 = *(_QWORD **)(a1 + 352);
          v172 = *(_QWORD **)(a1 + 360);
          v159 = *(char **)&v716[8];
        }
        v160[44] = v167;
        v160[45] = v159;
        v181 = v160[46];
        v160[46] = *(_QWORD *)v717;
        *(_QWORD *)&v716[8] = v172;
        *(_QWORD *)v717 = v181;
        *(_QWORD *)v716 = v180;
        *(_QWORD *)&v716[4] = v180;
        if (v172 == v180)
        {
          if (!v172)
            goto LABEL_286;
          goto LABEL_285;
        }
        do
        {
          *(_QWORD *)&v716[8] = v172 - 14;
          v184 = (gdc::Registry *)*(v172 - 1);
          *(v172 - 1) = 0;
          if (v184)
          {
            gdc::Registry::~Registry(v184);
            MEMORY[0x1A1AF4E00]();
          }
          v185 = *((unsigned int *)v172 - 4);
          if ((_DWORD)v185 != -1)
            ((void (*)(uint8_t *, _QWORD *))off_1E42FA3C0[v185])(buf, v172 - 14);
          *((_DWORD *)v172 - 4) = -1;
          v172 = *(_QWORD **)&v716[8];
        }
        while (*(_QWORD **)&v716[8] != v180);
        v172 = *(_QWORD **)v716;
        if (*(_QWORD *)v716)
LABEL_285:
          operator delete(v172);
LABEL_286:
        v160[45] = v159;
        std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase((_QWORD *)(a1 + 304), v51);
      }
      else
      {
LABEL_101:
        v58 = *v696;
        if (!*v696)
          goto LABEL_125;
        v59 = *((_DWORD *)v47 + 32);
        if (v59 != -1)
        {
          v60 = a1 + 240;
          while (1)
          {
            v61 = *(unsigned int *)(v58 + 128);
            if ((_DWORD)v61 == -1 || v61 < v59)
            {
              v58 = *(_QWORD *)(v58 + 8);
              if (!v58)
                goto LABEL_119;
              goto LABEL_115;
            }
            if (v61 <= v59)
              break;
            do
            {
              v60 = v58;
              v58 = *(_QWORD *)v58;
              if (!v58)
                goto LABEL_119;
LABEL_115:
              v59 = *((_DWORD *)v47 + 32);
            }
            while (v59 == -1);
          }
          *(_QWORD *)v716 = buf;
          if (((unsigned int (*)(_WORD *, uint64_t, _QWORD *))off_1E42EEDE0[v61])(v716, v58 + 32, v47 + 4))
            v58 += 8;
          else
            v60 = v58;
          v58 = *(_QWORD *)v58;
          if (!v58)
            goto LABEL_119;
          goto LABEL_115;
        }
        do
        {
          v60 = v58;
          v58 = *(_QWORD *)v58;
        }
        while (v58);
LABEL_119:
        if ((uint64_t *)v60 != v696
          && ((v63 = *(_DWORD *)(v60 + 128), v63 == -1)
           || ((v64 = *((unsigned int *)v47 + 32), (_DWORD)v64 != -1) ? (v65 = v64 >= v63) : (v65 = 0),
               v65
            && (v64 > v63
             || (*(_QWORD *)v716 = buf,
                 (((uint64_t (*)(_WORD *, _QWORD *, uint64_t))off_1E42EEDE0[v64])(v716, v47 + 4, v60 + 32) & 1) == 0)))))
        {
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
          v87 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
          {
            memset(v716, 0, sizeof(v716));
            *(_QWORD *)buf = v716;
            *(_QWORD *)&buf[8] = v716;
            v88 = *((unsigned int *)v47 + 32);
            if ((_DWORD)v88 == -1)
              goto LABEL_1195;
            v703 = buf;
            ((void (*)(uint8_t **, _QWORD *))off_1E42EEDB0[v88])(&v703, v47 + 4);
            if (v716[11] >= 0)
              v89 = v716;
            else
              v89 = *(_WORD **)v716;
            LODWORD(v709) = 136315138;
            *(_QWORD *)((char *)&v709 + 4) = v89;
            _os_log_impl(&dword_19F029000, v87, OS_LOG_TYPE_DEBUG, "Key:%s is both incoming and outgoing, do nothing", (uint8_t *)&v709, 0xCu);
            if (SHIBYTE(v716[11]) < 0)
              operator delete(*(void **)v716);
          }

          std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::erase(v683, v60);
        }
        else
        {
LABEL_125:
          if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
            dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
          v66 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            memset(buf, 0, sizeof(buf));
            *(_QWORD *)&v709 = buf;
            *((_QWORD *)&v709 + 1) = buf;
            v67 = *((unsigned int *)v47 + 32);
            if ((_DWORD)v67 == -1)
              goto LABEL_1195;
            v703 = (uint8_t *)&v709;
            ((void (*)(uint8_t **, _QWORD *))off_1E42EEDB0[v67])(&v703, v47 + 4);
            v68 = buf;
            if ((buf[23] & 0x80u) != 0)
              v68 = *(uint8_t **)buf;
            *(_DWORD *)v716 = 136315906;
            *(_QWORD *)&v716[2] = v68;
            v716[6] = 2080;
            *(_QWORD *)&v716[7] = "false";
            v716[11] = 2080;
            *(_QWORD *)v717 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
            *(_WORD *)&v717[8] = 1024;
            *(_DWORD *)&v717[10] = 175;
            _os_log_impl(&dword_19F029000, v66, OS_LOG_TYPE_ERROR, "No registry for key:%s to destroy: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v716, 0x26u);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }

        }
      }
      v182 = (_QWORD *)v47[1];
      if (v182)
      {
        do
        {
          v183 = v182;
          v182 = (_QWORD *)*v182;
        }
        while (v182);
      }
      else
      {
        do
        {
          v183 = (_QWORD *)v47[2];
          v515 = *v183 == (_QWORD)v47;
          v47 = v183;
        }
        while (!v515);
      }
      v47 = v183;
      v48 = a1;
      if (v183 == v685)
        break;
      continue;
    }
  }
  v186 = *v683;
  if (*v683 != v696)
  {
    v187 = (_QWORD *)(v48 + 312);
    do
    {
      v188 = (uint64_t *)*v187;
      if (*v187)
      {
        v189 = *((_DWORD *)v186 + 32);
        if (v189 != -1)
        {
          v190 = v187;
          while (1)
          {
            v191 = *((unsigned int *)v188 + 32);
            if ((_DWORD)v191 == -1 || v191 < v189)
            {
              v188 = (uint64_t *)v188[1];
              if (!v188)
                goto LABEL_321;
              goto LABEL_317;
            }
            if (v191 <= v189)
              break;
            do
            {
              v190 = v188;
              v188 = (uint64_t *)*v188;
              if (!v188)
                goto LABEL_321;
LABEL_317:
              v189 = *((_DWORD *)v186 + 32);
            }
            while (v189 == -1);
          }
          *(_QWORD *)v716 = buf;
          if (((unsigned int (*)(_WORD *, uint64_t *, uint64_t *))off_1E42EEDE0[v191])(v716, v188 + 4, v186 + 4))
          {
            ++v188;
          }
          else
          {
            v190 = v188;
          }
          v188 = (uint64_t *)*v188;
          if (!v188)
            goto LABEL_321;
          goto LABEL_317;
        }
        do
        {
          v190 = v188;
          v188 = (uint64_t *)*v188;
        }
        while (v188);
LABEL_321:
        if (v190 != v187)
        {
          v193 = *((_DWORD *)v190 + 32);
          if (v193 == -1
            || ((v194 = *((unsigned int *)v186 + 32), (_DWORD)v194 != -1)
              ? (v195 = v194 >= v193)
              : (v195 = 0),
                v195
             && (v194 > v193
              || (*(_QWORD *)v716 = buf,
                  !((unsigned int (*)(_WORD *, uint64_t *, _QWORD *))off_1E42EEDE0[v194])(v716, v186 + 4, v190 + 4)))))
          {
            if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
              dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
            v211 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
            if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
            {
              v212 = *(unsigned __int16 *)(v190[17] + 40);
              memset(buf, 0, sizeof(buf));
              *(_QWORD *)&v709 = buf;
              *((_QWORD *)&v709 + 1) = buf;
              v213 = *((unsigned int *)v186 + 32);
              if ((_DWORD)v213 != -1)
              {
                v703 = (uint8_t *)&v709;
                ((void (*)(uint8_t **, uint64_t *))off_1E42EEDB0[v213])(&v703, v186 + 4);
                v214 = buf;
                if ((buf[23] & 0x80u) != 0)
                  v214 = *(uint8_t **)buf;
                v215 = *(unsigned __int16 *)(v186[17] + 40);
                *(_DWORD *)v716 = 67110402;
                *(_DWORD *)&v716[2] = v212;
                v716[4] = 2080;
                *(_QWORD *)&v716[5] = v214;
                v716[9] = 1024;
                *(_DWORD *)&v716[10] = v215;
                *(_WORD *)v717 = 2080;
                *(_QWORD *)&v717[2] = "false";
                *(_WORD *)&v717[10] = 2080;
                *(_QWORD *)&v717[12] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
                v718 = 1024;
                v719 = 193;
                _os_log_impl(&dword_19F029000, v211, OS_LOG_TYPE_ERROR, "Already have a registry(id:%d) associated with the key:%s for a new incoming registry(id:%d): Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v716, 0x32u);
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
                goto LABEL_358;
              }
LABEL_1195:
              std::__throw_bad_variant_access[abi:nn180100]();
              goto LABEL_1211;
            }
LABEL_358:

            v48 = a1;
            v217 = *(_QWORD **)(a1 + 336);
            v216 = *(_QWORD *)(a1 + 344);
            if ((unint64_t)v217 < v216)
            {
              v218 = v190[17];
              v190[17] = 0;
              *v217 = v218;
              v219 = v217 + 1;
              goto LABEL_428;
            }
            v220 = *(_QWORD *)(a1 + 328);
            v221 = (char *)v217 - v220;
            v222 = ((uint64_t)v217 - v220) >> 3;
            if ((unint64_t)(v222 + 1) >> 61)
              abort();
            v223 = v216 - v220;
            v224 = v223 >> 2;
            if (v223 >> 2 <= (unint64_t)(v222 + 1))
              v224 = v222 + 1;
            if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFF8)
              v225 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v225 = v224;
            if (v225)
            {
              if (v225 >> 61)
                goto LABEL_1190;
              v226 = (char *)operator new(8 * v225);
            }
            else
            {
              v226 = 0;
            }
            v248 = &v226[8 * v222];
            v249 = &v226[8 * v225];
            v250 = v190[17];
            v190[17] = 0;
            *(_QWORD *)v248 = v250;
            v219 = v248 + 8;
            v48 = a1;
            v251 = *(char **)(a1 + 328);
            v252 = *(char **)(a1 + 336);
            if (v252 == v251)
            {
              *(_QWORD *)(a1 + 328) = v248;
              *(_QWORD *)(a1 + 336) = v219;
              *(_QWORD *)(a1 + 344) = v249;
              if (v252)
                goto LABEL_427;
            }
            else
            {
              v253 = v252 - v251 - 8;
              if (v253 <= 0x77
                || &v252[-(v253 & 0xFFFFFFFFFFFFFFF8) - 8] < v248
                && &v221[(_QWORD)v226 - (v253 & 0xFFFFFFFFFFFFFFF8) - 8] < v252)
              {
                goto LABEL_1215;
              }
              v254 = (v253 >> 3) + 1;
              v255 = &v226[8 * v222 - 16];
              v256 = v252 - 32;
              v257 = v254 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v259 = *(_OWORD *)v256;
                v258 = *((_OWORD *)v256 + 1);
                *(_OWORD *)v256 = 0uLL;
                *((_OWORD *)v256 + 1) = 0uLL;
                v256 -= 32;
                *((_OWORD *)v255 - 1) = v259;
                *(_OWORD *)v255 = v258;
                v255 -= 32;
                v257 -= 4;
              }
              while (v257);
              v248 -= 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
              v252 -= 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
              if (v254 != (v254 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1215:
                do
                {
                  v260 = *((_QWORD *)v252 - 1);
                  v252 -= 8;
                  *(_QWORD *)v252 = 0;
                  *((_QWORD *)v248 - 1) = v260;
                  v248 -= 8;
                }
                while (v252 != v251);
              }
              v252 = *(char **)(a1 + 328);
              v261 = *(char **)(a1 + 336);
              *(_QWORD *)(a1 + 328) = v248;
              *(_QWORD *)(a1 + 336) = v219;
              *(_QWORD *)(a1 + 344) = v249;
              while (v261 != v252)
              {
                v263 = (gdc::Registry *)*((_QWORD *)v261 - 1);
                v261 -= 8;
                v262 = v263;
                *(_QWORD *)v261 = 0;
                if (v263)
                {
                  gdc::Registry::~Registry(v262);
                  MEMORY[0x1A1AF4E00]();
                }
              }
              v48 = a1;
              if (!v252)
                goto LABEL_428;
LABEL_427:
              operator delete(v252);
            }
LABEL_428:
            *(_QWORD *)(v48 + 336) = v219;
            v264 = v186[17];
            v186[17] = 0;
            v265 = (gdc::Registry *)v190[17];
            v190[17] = v264;
            if (v265)
            {
              gdc::Registry::~Registry(v265);
              MEMORY[0x1A1AF4E00]();
            }
            goto LABEL_407;
          }
        }
      }
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v196 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEBUG))
      {
        v197 = *(unsigned __int16 *)(v186[17] + 40);
        memset(v716, 0, sizeof(v716));
        *(_QWORD *)&v709 = v716;
        *((_QWORD *)&v709 + 1) = v716;
        v198 = *((unsigned int *)v186 + 32);
        if ((_DWORD)v198 == -1)
          goto LABEL_1195;
        v703 = (uint8_t *)&v709;
        ((void (*)(uint8_t **, uint64_t *))off_1E42EEDB0[v198])(&v703, v186 + 4);
        if (v716[11] >= 0)
          v199 = v716;
        else
          v199 = *(_WORD **)v716;
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v197;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v199;
        _os_log_impl(&dword_19F029000, v196, OS_LOG_TYPE_DEBUG, "[RegistryAdded] Registry:%d key:%s", buf, 0x12u);
        if (SHIBYTE(v716[11]) < 0)
          operator delete(*(void **)v716);
      }

      if (*((_DWORD *)v186 + 32) == 1)
      {
        v200 = v186[17];
        v201 = *(char **)(a1 + 896);
        v202 = *(_QWORD *)(a1 + 904);
        if ((unint64_t)v201 >= v202)
        {
          v205 = *(char **)(a1 + 888);
          v206 = (v201 - v205) >> 3;
          v207 = v206 + 1;
          if ((unint64_t)(v206 + 1) >> 61)
            abort();
          v208 = v202 - (_QWORD)v205;
          if (v208 >> 2 > v207)
            v207 = v208 >> 2;
          if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8)
            v209 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v209 = v207;
          if (v209)
          {
            if (v209 >> 61)
              goto LABEL_1190;
            v210 = operator new(8 * v209);
          }
          else
          {
            v210 = 0;
          }
          v227 = (uint64_t *)&v210[8 * v206];
          *v227 = v200;
          v203 = v227 + 1;
          if (v201 == v205)
          {
            v205 = v201;
            v204 = (_QWORD *)a1;
          }
          else
          {
            v228 = v201 - 8 - v205;
            v204 = (_QWORD *)a1;
            if (v228 < 0x58)
              goto LABEL_1216;
            if ((unint64_t)(v205 - v210) < 0x20)
              goto LABEL_1216;
            v229 = (v228 >> 3) + 1;
            v230 = &v210[8 * v206 - 16];
            v231 = v201 - 16;
            v232 = v229 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v233 = *(_OWORD *)v231;
              *(v230 - 1) = *((_OWORD *)v231 - 1);
              *v230 = v233;
              v230 -= 2;
              v231 -= 32;
              v232 -= 4;
            }
            while (v232);
            v227 -= v229 & 0x3FFFFFFFFFFFFFFCLL;
            v201 -= 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
            if (v229 != (v229 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1216:
              do
              {
                v234 = *((_QWORD *)v201 - 1);
                v201 -= 8;
                *--v227 = v234;
              }
              while (v201 != v205);
              v205 = *(char **)(a1 + 888);
            }
          }
          v204[111] = v227;
          v204[112] = v203;
          v204[113] = &v210[8 * v209];
          if (v205)
            operator delete(v205);
        }
        else
        {
          *(_QWORD *)v201 = v200;
          v203 = v201 + 8;
          v204 = (_QWORD *)a1;
        }
        v204[112] = v203;
      }
      v235 = (uint64_t *)*v187;
      v236 = v187;
      v237 = v187;
      v48 = a1;
      if (!*v187)
      {
LABEL_402:
        v242 = operator new(0x90uLL);
        v242[32] = 0;
        *((_DWORD *)v242 + 32) = -1;
        v243 = *((unsigned int *)v186 + 32);
        if ((_DWORD)v243 != -1)
        {
          ((void (*)(uint8_t *, _BYTE *, uint64_t *))off_1E42EEDC0[v243])(buf, v242 + 32, v186 + 4);
          *((_DWORD *)v242 + 32) = v243;
        }
        v244 = v186[17];
        v186[17] = 0;
        *((_QWORD *)v242 + 17) = v244;
        *(_QWORD *)v242 = 0;
        *((_QWORD *)v242 + 1) = 0;
        *((_QWORD *)v242 + 2) = v237;
        *v236 = v242;
        v48 = a1;
        v245 = **(_QWORD **)(a1 + 304);
        if (v245)
        {
          *(_QWORD *)(a1 + 304) = v245;
          v242 = (_BYTE *)*v236;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), (uint64_t *)v242);
        ++*(_QWORD *)(a1 + 320);
        goto LABEL_407;
      }
      v236 = v187;
      while (1)
      {
        while (1)
        {
          v237 = v235;
          v238 = v235 + 4;
          v239 = *((unsigned int *)v235 + 32);
          v240 = *((unsigned int *)v186 + 32);
          if ((_DWORD)v239 == -1)
            goto LABEL_386;
          if (v240 != 0xFFFFFFFF && v240 >= v239)
          {
            if (v240 > v239)
              goto LABEL_388;
            *(_QWORD *)v716 = buf;
            v48 = a1;
            if ((((uint64_t (*)(_WORD *, uint64_t *, uint64_t *))off_1E42EEDE0[v240])(v716, v186 + 4, v238) & 1) == 0)
              break;
          }
          v235 = (uint64_t *)*v237;
          v236 = v237;
          if (!*v237)
            goto LABEL_402;
        }
        v240 = *((unsigned int *)v186 + 32);
LABEL_386:
        if (v240 == 0xFFFFFFFF)
          goto LABEL_401;
        v239 = *((unsigned int *)v237 + 32);
        if ((_DWORD)v239 != -1)
          break;
LABEL_384:
        v236 = v237 + 1;
        v235 = (uint64_t *)v237[1];
        if (!v235)
          goto LABEL_402;
      }
LABEL_388:
      if (v239 < v240)
        goto LABEL_384;
      if (v239 <= v240)
      {
        *(_QWORD *)v716 = buf;
        v48 = a1;
        if (((unsigned int (*)(_WORD *, uint64_t *, uint64_t *))off_1E42EEDE0[v239])(v716, v238, v186 + 4))
          goto LABEL_384;
      }
LABEL_401:
      if (!*v236)
        goto LABEL_402;
LABEL_407:
      v246 = (uint64_t *)v186[1];
      if (v246)
      {
        do
        {
          v247 = v246;
          v246 = (uint64_t *)*v246;
        }
        while (v246);
      }
      else
      {
        do
        {
          v247 = (uint64_t *)v186[2];
          v515 = *v247 == (_QWORD)v186;
          v186 = v247;
        }
        while (!v515);
      }
      v186 = v247;
    }
    while (v247 != v696);
  }
  std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*(unsigned int **)(v48 + 240));
  *(_QWORD *)(v48 + 240) = 0;
  *(_QWORD *)(v48 + 248) = 0;
  *(_QWORD *)(v48 + 232) = v696;
  std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*(_QWORD **)(v48 + 288));
  *(_QWORD *)(v48 + 288) = 0;
  *(_QWORD *)(v48 + 296) = 0;
  *(_QWORD *)(v48 + 280) = v685;
  v713 = &off_1E42CC848;
  v714 = &v702;
  v715 = &v713;
  v711[0] = &off_1E42CC890;
  v711[1] = &v702;
  v712 = v711;
  *(_QWORD *)v717 = v716;
  *(_QWORD *)v716 = &off_1E42CC890;
  *(_QWORD *)&v716[4] = &v702;
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v266 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v267 = v266;
  v268 = *v714;
  if (*v714 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v266))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v267, OS_SIGNPOST_INTERVAL_BEGIN, v268, "ResolveRegistries", (const char *)&unk_1A0189141, buf, 2u);
  }

  v269 = v712;
  if (v712 == v711)
  {
    v271 = 4;
    v269 = v711;
    v270 = a2;
  }
  else
  {
    v270 = a2;
    if (!v712)
      goto LABEL_442;
    v271 = 5;
  }
  (*(void (**)(void))(*v269 + 8 * v271))();
LABEL_442:
  v272 = v715;
  if (v715 == &v713)
  {
    v273 = 4;
    v272 = &v713;
    goto LABEL_446;
  }
  if (v715)
  {
    v273 = 5;
LABEL_446:
    (*v272)[v273]();
  }
  v274 = (_QWORD *)(v270 + 128);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v270 + 128));
  *(_QWORD *)(v270 + 120) = v270 + 128;
  v697 = (uint8_t *)(v270 + 120);
  *(_QWORD *)(v270 + 136) = 0;
  *(_QWORD *)(v270 + 128) = 0;
  v275 = (_QWORD *)(v270 + 152);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v270 + 152));
  *(_QWORD *)(v270 + 144) = v270 + 152;
  *(_QWORD *)(v270 + 152) = 0;
  v693 = (uint8_t *)(v270 + 144);
  *(_QWORD *)(v270 + 160) = 0;
  v276 = kMapDataTypesWithRegistries;
  *((_QWORD *)&v709 + 1) = 0;
  v710 = 0;
  *(_QWORD *)&v709 = (char *)&v709 + 8;
  do
  {
    v277 = *(unsigned __int16 *)v276;
    v278 = *a3;
    if ((v279 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v280 = *(unsigned __int16 **)(v278 + 48);
    v281 = *(unsigned __int16 **)(v278 + 56);
    if (v280 == v281)
    {
      v284 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      v283 = (_QWORD *)a2;
    }
    else
    {
      v282 = *(unsigned __int16 **)(v278 + 48);
      v283 = (_QWORD *)a2;
      while (*v282 != v277)
      {
        v282 += 16;
        if (v282 == v281)
          goto LABEL_461;
      }
      if (v282 == v281)
      {
LABEL_461:
        v284 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        goto LABEL_462;
      }
      while (*v280 != v277)
      {
        v280 += 16;
        if (v280 == v281)
        {
          v280 = v281;
          break;
        }
      }
      v284 = (uint64_t *)(v280 + 4);
    }
LABEL_462:
    v287 = *v284;
    v285 = v284 + 1;
    v286 = (_QWORD *)v287;
    if ((uint64_t *)v287 != v285)
    {
      do
      {
        v288 = operator new(0x28uLL);
        v289 = *(_DWORD *)(v286[4] + 8);
        *((_DWORD *)v288 + 7) = v289;
        v290 = *((char *)v286 + 48);
        *((_BYTE *)v288 + 32) = *((_BYTE *)v286 + 48);
        v291 = *((_QWORD *)&v709 + 1);
        v292 = (_QWORD *)&v709 + 1;
        v293 = (_QWORD *)&v709 + 1;
        if (*((_QWORD *)&v709 + 1))
        {
          while (1)
          {
            while (1)
            {
              v293 = (_QWORD *)v291;
              v294 = *(unsigned __int8 *)(v291 + 32);
              v295 = (char)v294;
              v296 = *(_DWORD *)(v291 + 28);
              if (!(v294 == v290 ? v289 < v296 : v290 < (char)v294))
                break;
              v291 = *v293;
              v292 = v293;
              if (!*v293)
                goto LABEL_478;
            }
            v298 = v296 < v289;
            v299 = v290 == v295 ? v298 : v295 < v290;
            if (v299 != 1)
              break;
            v291 = v293[1];
            if (!v291)
            {
              v292 = v293 + 1;
              goto LABEL_478;
            }
          }
          operator delete(v288);
          v310 = (uint64_t *)v286[1];
          if (!v310)
          {
            do
            {
LABEL_513:
              v314 = (uint64_t *)v286[2];
              v515 = *v314 == (_QWORD)v286;
              v286 = v314;
            }
            while (!v515);
            goto LABEL_464;
          }
        }
        else
        {
LABEL_478:
          *v288 = 0;
          v288[1] = 0;
          v288[2] = v293;
          *v292 = v288;
          if (*(_QWORD *)v709)
          {
            *(_QWORD *)&v709 = *(_QWORD *)v709;
            v288 = (_QWORD *)*v292;
          }
          v300 = (uint64_t *)*((_QWORD *)&v709 + 1);
          v515 = v288 == *((_QWORD **)&v709 + 1);
          *((_BYTE *)v288 + 24) = v288 == *((_QWORD **)&v709 + 1);
          if (!v515)
          {
            do
            {
              v301 = v288[2];
              if (*(_BYTE *)(v301 + 24))
                break;
              v302 = *(uint64_t **)(v301 + 16);
              v303 = *v302;
              if (*v302 == v301)
              {
                v306 = v302[1];
                if (!v306 || (v307 = *(unsigned __int8 *)(v306 + 24), v304 = (_BYTE *)(v306 + 24), v307))
                {
                  if (*(_QWORD **)v301 == v288)
                  {
                    v308 = (uint64_t *)v288[2];
                  }
                  else
                  {
                    v308 = *(uint64_t **)(v301 + 8);
                    v309 = *v308;
                    *(_QWORD *)(v301 + 8) = *v308;
                    if (v309)
                    {
                      *(_QWORD *)(v309 + 16) = v301;
                      v302 = *(uint64_t **)(v301 + 16);
                    }
                    v308[2] = (uint64_t)v302;
                    *(_QWORD *)(*(_QWORD *)(v301 + 16) + 8 * (**(_QWORD **)(v301 + 16) != v301)) = v308;
                    *v308 = v301;
                    *(_QWORD *)(v301 + 16) = v308;
                    v302 = (uint64_t *)v308[2];
                    v301 = *v302;
                  }
                  *((_BYTE *)v308 + 24) = 1;
                  *((_BYTE *)v302 + 24) = 0;
                  v313 = *(_QWORD *)(v301 + 8);
                  *v302 = v313;
                  if (v313)
                    *(_QWORD *)(v313 + 16) = v302;
                  *(_QWORD *)(v301 + 16) = v302[2];
                  *(_QWORD *)(v302[2] + 8 * (*(_QWORD *)v302[2] != (_QWORD)v302)) = v301;
                  *(_QWORD *)(v301 + 8) = v302;
                  goto LABEL_509;
                }
              }
              else if (!v303 || (v305 = *(unsigned __int8 *)(v303 + 24), v304 = (_BYTE *)(v303 + 24), v305))
              {
                if (*(_QWORD **)v301 == v288)
                {
                  v311 = v288[1];
                  *(_QWORD *)v301 = v311;
                  if (v311)
                  {
                    *(_QWORD *)(v311 + 16) = v301;
                    v302 = *(uint64_t **)(v301 + 16);
                  }
                  v288[2] = v302;
                  *(_QWORD *)(*(_QWORD *)(v301 + 16) + 8 * (**(_QWORD **)(v301 + 16) != v301)) = v288;
                  v288[1] = v301;
                  *(_QWORD *)(v301 + 16) = v288;
                  v302 = (uint64_t *)v288[2];
                }
                else
                {
                  v288 = (_QWORD *)v288[2];
                }
                *((_BYTE *)v288 + 24) = 1;
                *((_BYTE *)v302 + 24) = 0;
                v301 = v302[1];
                v312 = *(_QWORD **)v301;
                v302[1] = *(_QWORD *)v301;
                if (v312)
                  v312[2] = v302;
                *(_QWORD *)(v301 + 16) = v302[2];
                *(_QWORD *)(v302[2] + 8 * (*(_QWORD *)v302[2] != (_QWORD)v302)) = v301;
                *(_QWORD *)v301 = v302;
LABEL_509:
                v302[2] = v301;
                break;
              }
              *(_BYTE *)(v301 + 24) = 1;
              v288 = v302;
              *((_BYTE *)v302 + 24) = v302 == v300;
              *v304 = 1;
            }
            while (v302 != v300);
          }
          ++v710;
          v310 = (uint64_t *)v286[1];
          if (!v310)
            goto LABEL_513;
        }
        do
        {
          v314 = v310;
          v310 = (uint64_t *)*v310;
        }
        while (v310);
LABEL_464:
        v286 = v314;
      }
      while (v314 != v285);
    }
    ++v276;
  }
  while (v276 != (const __int16 *)&ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref);
  v315 = v283[21];
  v316 = v283 + 22;
  v317 = v283[15];
  v707 = (char *)&v709 + 8;
  v708 = v709;
  v705 = (char *)(v283 + 22);
  v706 = v315;
  v703 = v697;
  v704 = v317;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>((uint64_t)buf, (uint64_t)&v708, &v707, (uint64_t)&v706, &v705, (_QWORD **)&v703);
  v318 = (uint64_t)v693;
  v319 = v283[21];
  v320 = v283[18];
  v707 = (char *)(v283 + 22);
  v708 = v319;
  v705 = (char *)&v709 + 8;
  v706 = v709;
  v703 = v693;
  v704 = v320;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long> &,std::insert_iterator<std::set<md::LayerDataIdentWithWorld>> &>((uint64_t)buf, (uint64_t)&v708, &v707, (uint64_t)&v706, &v705, (_QWORD **)&v703);
  v321 = v283 + 10;
  if (v283[13])
  {
    v322 = (_QWORD *)v283[12];
    if (v322)
    {
      do
      {
        v323 = (_QWORD *)*v322;
        operator delete(v322);
        v322 = v323;
      }
      while (v323);
    }
    v283 = (_QWORD *)a2;
    *(_QWORD *)(a2 + 96) = 0;
    v324 = *(_QWORD *)(a2 + 88);
    if (v324)
    {
      for (i = 0; i != v324; ++i)
        *(_QWORD *)(*v321 + 8 * i) = 0;
    }
    *(_QWORD *)(a2 + 104) = 0;
  }
  if (v283[3])
  {
    v326 = (_QWORD *)v283[2];
    if (v326)
    {
      do
      {
        v327 = (_QWORD *)*v326;
        operator delete(v326);
        v326 = v327;
      }
      while (v327);
    }
    v283 = (_QWORD *)a2;
    *(_QWORD *)(a2 + 16) = 0;
    v328 = *(_QWORD *)(a2 + 8);
    if (v328)
    {
      for (j = 0; j != v328; ++j)
        *(_QWORD *)(*(_QWORD *)a2 + 8 * j) = 0;
    }
    *(_QWORD *)(a2 + 24) = 0;
  }
  v330 = v283 + 5;
  if (v283[8])
  {
    v331 = (_QWORD *)v283[7];
    if (v331)
    {
      do
      {
        v332 = (_QWORD *)*v331;
        operator delete(v331);
        v331 = v332;
      }
      while (v332);
    }
    *(_QWORD *)(a2 + 56) = 0;
    v333 = *(_QWORD *)(a2 + 48);
    if (v333)
    {
      for (k = 0; k != v333; ++k)
        *(_QWORD *)(*v330 + 8 * k) = 0;
    }
    *(_QWORD *)(a2 + 64) = 0;
  }
  v335 = (_OWORD *)v709;
  if ((__int128 *)v709 != (__int128 *)((char *)&v709 + 8))
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a2, *((_DWORD *)v335 + 7), *((_DWORD *)v335 + 7));
      v341 = (_QWORD *)*((_QWORD *)v335 + 1);
      if (v341)
      {
        do
        {
          v342 = v341;
          v341 = (_QWORD *)*v341;
        }
        while (v341);
      }
      else
      {
        do
        {
          v342 = (_OWORD *)*((_QWORD *)v335 + 2);
          v515 = *(_QWORD *)v342 == (_QWORD)v335;
          v335 = v342;
        }
        while (!v515);
      }
      v335 = v342;
    }
    while (v342 != (__int128 *)((char *)&v709 + 8));
  }
  v336 = *(_QWORD **)v693;
  if (*(_QWORD **)v693 != v275)
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)v330, *((_DWORD *)v336 + 7), *((_DWORD *)v336 + 7));
      v343 = (_QWORD *)v336[1];
      if (v343)
      {
        do
        {
          v344 = v343;
          v343 = (_QWORD *)*v343;
        }
        while (v343);
      }
      else
      {
        do
        {
          v344 = (_QWORD *)v336[2];
          v515 = *v344 == (_QWORD)v336;
          v336 = v344;
        }
        while (!v515);
      }
      v336 = v344;
    }
    while (v344 != v275);
  }
  v337 = *(_QWORD **)v697;
  if (*(_QWORD **)v697 != v274)
  {
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)v321, *((_DWORD *)v337 + 7), *((_DWORD *)v337 + 7));
      v345 = (_QWORD *)v337[1];
      if (v345)
      {
        do
        {
          v346 = v345;
          v345 = (_QWORD *)*v345;
        }
        while (v345);
      }
      else
      {
        do
        {
          v346 = (_QWORD *)v337[2];
          v515 = *v346 == (_QWORD)v337;
          v337 = v346;
        }
        while (!v515);
      }
      v337 = v346;
    }
    while (v346 != v274);
  }
  v690 = v330;
  v686 = v316;
  v338 = a1;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  v339 = *(_QWORD **)(a1 + 304);
  n = (_QWORD *)(a1 + 312);
  if (v339 != (_QWORD *)(a1 + 312))
  {
    v694 = (uint64_t *)(a1 + 40);
    v684 = (_QWORD *)(a1 + 56);
    do
    {
      v347 = v339[17];
      v348 = *((_DWORD *)v339 + 32);
      if (v348)
        v349 = 0;
      else
        v349 = (unsigned int *)(v339 + 4);
      if (v348)
      {
        v351 = *(unint64_t **)(v338 + 392);
        v350 = *(_QWORD *)(v338 + 400);
        if ((unint64_t)v351 < v350)
        {
          *v351 = v347;
          v352 = v351 + 1;
LABEL_616:
          *(_QWORD *)(v338 + 392) = v352;
          goto LABEL_685;
        }
        v318 = *(_QWORD *)(v338 + 384);
        v356 = ((uint64_t)v351 - v318) >> 3;
        v357 = v356 + 1;
        if ((unint64_t)(v356 + 1) >> 61)
          abort();
        v358 = v350 - v318;
        if (v358 >> 2 > v357)
          v357 = v358 >> 2;
        if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFF8)
          v359 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v359 = v357;
        if (v359)
        {
          if (v359 >> 61)
            goto LABEL_1190;
          v360 = (char *)operator new(8 * v359);
        }
        else
        {
          v360 = 0;
        }
        v366 = (unint64_t *)&v360[8 * v356];
        *v366 = v347;
        v352 = v366 + 1;
        if (v351 == (unint64_t *)v318)
        {
          v318 = (uint64_t)v351;
          v338 = a1;
        }
        else
        {
          v367 = (unint64_t)v351 - v318 - 8;
          if (v367 >= 0x58)
          {
            v338 = a1;
            if ((unint64_t)(v318 - (_QWORD)v360) < 0x20)
              goto LABEL_611;
            v368 = (v367 >> 3) + 1;
            v369 = &v360[8 * v356 - 16];
            v370 = v351 - 2;
            v371 = v368 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v372 = *(_OWORD *)v370;
              *((_OWORD *)v369 - 1) = *((_OWORD *)v370 - 1);
              *(_OWORD *)v369 = v372;
              v369 -= 32;
              v370 -= 4;
              v371 -= 4;
            }
            while (v371);
            v366 -= v368 & 0x3FFFFFFFFFFFFFFCLL;
            v351 -= v368 & 0x3FFFFFFFFFFFFFFCLL;
            if (v368 != (v368 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_611;
          }
          else
          {
            v338 = a1;
            do
            {
LABEL_611:
              v373 = *--v351;
              *--v366 = v373;
            }
            while (v351 != (unint64_t *)v318);
            v318 = *(_QWORD *)(v338 + 384);
          }
        }
        *(_QWORD *)(v338 + 384) = v366;
        *(_QWORD *)(v338 + 392) = v352;
        *(_QWORD *)(v338 + 400) = &v360[8 * v359];
        if (v318)
          operator delete((void *)v318);
        n = (_QWORD *)(a1 + 312);
        goto LABEL_616;
      }
      v353 = *(int8x8_t *)(v347 + 8);
      if (!*(_QWORD *)&v353)
        goto LABEL_619;
      v354 = (uint8x8_t)vcnt_s8(v353);
      v354.i16[0] = vaddlv_u8(v354);
      if (v354.u32[0] > 1uLL)
      {
        v355 = 0x3B7BEE224038A636;
        if (*(_QWORD *)&v353 <= 0x3B7BEE224038A636uLL)
          v355 = 0x3B7BEE224038A636uLL % *(_QWORD *)&v353;
      }
      else
      {
        v355 = (*(_QWORD *)&v353 - 1) & 0x3B7BEE224038A636;
      }
      v361 = *(_QWORD **)(*(_QWORD *)v347 + 8 * v355);
      if (!v361 || (v362 = (_QWORD *)*v361) == 0)
      {
LABEL_619:
        v375 = *((_WORD *)v349 + 4);
        *(_QWORD *)buf = 0x3B7BEE224038A636;
        *(_QWORD *)&buf[8] = "md::MapDataType]";
        *(_QWORD *)&buf[16] = 15;
        v318 = operator new();
        v376 = (_WORD *)operator new();
        *v376 = v375;
        *(_QWORD *)(v318 + 16) = "md::MapDataType]";
        *(_QWORD *)(v318 + 24) = 15;
        *(_QWORD *)(v318 + 32) = v376;
        *(_QWORD *)v318 = &off_1E42B0AA0;
        *(_QWORD *)(v318 + 8) = 0x3B7BEE224038A636;
        std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo,gdc::ManagedObjectHolder<md::MapDataType> *>(v347, 0x3B7BEE224038A636uLL, (uint64_t)buf, v318);
        v338 = a1;
        goto LABEL_620;
      }
      if (v354.u32[0] < 2uLL)
      {
        v363 = *(_QWORD *)&v353 - 1;
        while (1)
        {
          v365 = v362[1];
          if (v365 == 0x3B7BEE224038A636)
          {
            if (v362[2] == 0x3B7BEE224038A636)
              goto LABEL_617;
          }
          else if ((v365 & v363) != v355)
          {
            goto LABEL_619;
          }
          v362 = (_QWORD *)*v362;
          if (!v362)
            goto LABEL_619;
        }
      }
      while (1)
      {
        v364 = v362[1];
        if (v364 == 0x3B7BEE224038A636)
          break;
        if (v364 >= *(_QWORD *)&v353)
          v364 %= *(_QWORD *)&v353;
        if (v364 != v355)
          goto LABEL_619;
LABEL_591:
        v362 = (_QWORD *)*v362;
        if (!v362)
          goto LABEL_619;
      }
      if (v362[2] != 0x3B7BEE224038A636)
        goto LABEL_591;
LABEL_617:
      v374 = v362[5];
      if (*(_QWORD *)(v374 + 8) != 0x3B7BEE224038A636 || !*(_QWORD *)(v374 + 32))
        goto LABEL_619;
LABEL_620:
      v377 = *v349;
      v378 = *(int8x8_t *)(a2 + 8);
      if (v378)
      {
        v379 = (uint8x8_t)vcnt_s8(v378);
        v379.i16[0] = vaddlv_u8(v379);
        if (v379.u32[0] > 1uLL)
        {
          v380 = *v349;
          if (*(_QWORD *)&v378 <= v377)
            v380 = v377 % *(_QWORD *)&v378;
        }
        else
        {
          v380 = (v378.i32[0] - 1) & v377;
        }
        v381 = *(uint64_t **)(*(_QWORD *)a2 + 8 * v380);
        if (v381)
        {
          v318 = *v381;
          if (*v381)
          {
            if (v379.u32[0] < 2uLL)
            {
              v382 = *(_QWORD *)&v378 - 1;
              while (1)
              {
                v384 = *(_QWORD *)(v318 + 8);
                if (v384 == v377)
                {
                  if (*(_DWORD *)(v318 + 16) == (_DWORD)v377)
                    goto LABEL_691;
                }
                else if ((v384 & v382) != v380)
                {
                  goto LABEL_640;
                }
                v318 = *(_QWORD *)v318;
                if (!v318)
                  goto LABEL_640;
              }
            }
            do
            {
              v383 = *(_QWORD *)(v318 + 8);
              if (v383 == v377)
              {
                if (*(_DWORD *)(v318 + 16) == (_DWORD)v377)
                {
LABEL_691:
                  v411 = *(unint64_t **)(v338 + 392);
                  v410 = *(_QWORD *)(v338 + 400);
                  if ((unint64_t)v411 < v410)
                  {
                    *v411 = v347;
                    v412 = v411 + 1;
                    goto LABEL_732;
                  }
                  v416 = *(unint64_t **)(v338 + 384);
                  v417 = (char *)v411 - (char *)v416;
                  v418 = v411 - v416;
                  v419 = v418 + 1;
                  if ((unint64_t)(v418 + 1) >> 61)
                    abort();
                  v420 = v410 - (_QWORD)v416;
                  if (v420 >> 2 > v419)
                    v419 = v420 >> 2;
                  if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF8)
                    v421 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v421 = v419;
                  if (v421)
                  {
                    if (v421 >> 61)
                      goto LABEL_1190;
                    v422 = v421;
                    v423 = operator new(8 * v421);
                    v421 = v422;
                    v418 = v411 - v416;
                    v417 = (char *)v411 - (char *)v416;
                  }
                  else
                  {
                    v423 = 0;
                  }
                  v431 = (unint64_t *)&v423[8 * v418];
                  *v431 = v347;
                  v412 = v431 + 1;
                  if (v411 == v416)
                  {
                    v416 = v411;
                    v338 = a1;
                  }
                  else
                  {
                    v432 = (char *)(v411 - 1) - (char *)v416;
                    if (v432 >= 0x58)
                    {
                      v338 = a1;
                      if ((unint64_t)((char *)v411 - &v423[v417]) < 0x20)
                        goto LABEL_727;
                      v435 = (v432 >> 3) + 1;
                      v436 = &v423[8 * v418 - 16];
                      v437 = v411 - 2;
                      v438 = v435 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v439 = *(_OWORD *)v437;
                        *(v436 - 1) = *((_OWORD *)v437 - 1);
                        *v436 = v439;
                        v436 -= 2;
                        v437 -= 4;
                        v438 -= 4;
                      }
                      while (v438);
                      v431 -= v435 & 0x3FFFFFFFFFFFFFFCLL;
                      v411 -= v435 & 0x3FFFFFFFFFFFFFFCLL;
                      if (v435 != (v435 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_727;
                    }
                    else
                    {
                      v338 = a1;
                      do
                      {
LABEL_727:
                        v440 = *--v411;
                        *--v431 = v440;
                      }
                      while (v411 != v416);
                      v416 = *(unint64_t **)(v338 + 384);
                    }
                  }
                  *(_QWORD *)(v338 + 384) = v431;
                  *(_QWORD *)(v338 + 392) = v412;
                  *(_QWORD *)(v338 + 400) = &v423[8 * v421];
                  if (v416)
                  {
                    v441 = v412;
                    operator delete(v416);
                    v412 = v441;
                  }
                  n = (_QWORD *)(a1 + 312);
LABEL_732:
                  *(_QWORD *)(v338 + 392) = v412;
                  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, (_QWORD *)a2, (_QWORD *)v318);
                  if (*(_QWORD *)buf)
                    operator delete(*(void **)buf);
                  v442 = *(int8x8_t *)(a2 + 88);
                  if (!*(_QWORD *)&v442)
                    goto LABEL_685;
                  v443 = *v349;
                  v444 = (uint8x8_t)vcnt_s8(v442);
                  v444.i16[0] = vaddlv_u8(v444);
                  if (v444.u32[0] > 1uLL)
                  {
                    v445 = *v349;
                    if (*(_QWORD *)&v442 <= v443)
                      v445 = v443 % *(_QWORD *)&v442;
                  }
                  else
                  {
                    v445 = (v442.i32[0] - 1) & v443;
                  }
                  v446 = *(uint64_t **)(*v321 + 8 * v445);
                  if (!v446)
                    goto LABEL_685;
                  v318 = *v446;
                  if (!*v446)
                    goto LABEL_685;
                  if (v444.u32[0] < 2uLL)
                  {
                    v447 = *(_QWORD *)&v442 - 1;
                    while (1)
                    {
                      v449 = *(_QWORD *)(v318 + 8);
                      if (v449 == v443)
                      {
                        if (*(_DWORD *)(v318 + 16) == (_DWORD)v443)
                          goto LABEL_766;
                      }
                      else if ((v449 & v447) != v445)
                      {
                        goto LABEL_685;
                      }
                      v318 = *(_QWORD *)v318;
                      if (!v318)
                        goto LABEL_685;
                    }
                  }
                  while (1)
                  {
                    v448 = *(_QWORD *)(v318 + 8);
                    if (v448 == v443)
                    {
                      if (*(_DWORD *)(v318 + 16) == (_DWORD)v443)
                      {
LABEL_766:
                        v457 = *(_QWORD *)(v338 + 440);
                        v456 = *(_QWORD *)(v338 + 448);
                        if (v457 < v456)
                        {
                          *(_QWORD *)v457 = v347;
                          v457 += 8;
                          v458 = (_QWORD *)v457;
                          goto LABEL_791;
                        }
                        v459 = *(_BYTE **)(v338 + 432);
                        v460 = (uint64_t)(v457 - (_QWORD)v459) >> 3;
                        v461 = v460 + 1;
                        if ((unint64_t)(v460 + 1) >> 61)
                          abort();
                        v462 = v456 - (_QWORD)v459;
                        if (v462 >> 2 > v461)
                          v461 = v462 >> 2;
                        if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFF8)
                          v463 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v463 = v461;
                        if (v463)
                        {
                          if (v463 >> 61)
                            goto LABEL_1190;
                          v464 = v463;
                          v465 = operator new(8 * v463);
                          v463 = v464;
                        }
                        else
                        {
                          v465 = 0;
                        }
                        v466 = (unint64_t *)&v465[8 * v460];
                        *v466 = v347;
                        v458 = v466 + 1;
                        if ((_BYTE *)v457 == v459)
                        {
                          v459 = (_BYTE *)v457;
                          v338 = a1;
                        }
                        else
                        {
                          v467 = v457 - 8 - (_QWORD)v459;
                          if (v467 >= 0x58)
                          {
                            v338 = a1;
                            if ((unint64_t)(v459 - v465) < 0x20)
                              goto LABEL_786;
                            v468 = (v467 >> 3) + 1;
                            v469 = &v465[8 * v460 - 16];
                            v470 = (__int128 *)(v457 - 16);
                            v471 = v468 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v472 = *v470;
                              *(v469 - 1) = *(v470 - 1);
                              *v469 = v472;
                              v469 -= 2;
                              v470 -= 2;
                              v471 -= 4;
                            }
                            while (v471);
                            v466 -= v468 & 0x3FFFFFFFFFFFFFFCLL;
                            v457 -= 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v468 != (v468 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_786;
                          }
                          else
                          {
                            v338 = a1;
                            do
                            {
LABEL_786:
                              v473 = *(_QWORD *)(v457 - 8);
                              v457 -= 8;
                              *--v466 = v473;
                            }
                            while ((_BYTE *)v457 != v459);
                            v459 = *(_BYTE **)(v338 + 432);
                          }
                        }
                        *(_QWORD *)(v338 + 432) = v466;
                        *(_QWORD *)(v338 + 440) = v458;
                        *(_QWORD *)(v338 + 448) = &v465[8 * v463];
                        if (v459)
                          operator delete(v459);
                        n = (_QWORD *)(a1 + 312);
LABEL_791:
                        *(_QWORD *)(v338 + 440) = v458;
                        v474 = *(_QWORD **)(v338 + 16);
                        if (!v474)
                        {
LABEL_917:
                          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, v321, (_QWORD *)v318);
                          if (*(_QWORD *)buf)
                            operator delete(*(void **)buf);
                          goto LABEL_685;
                        }
                        v475 = 0x9DDFEA08EB382D69 * (((8 * v347) + 8) ^ HIDWORD(v347));
                        v476 = 0x9DDFEA08EB382D69 * (HIDWORD(v347) ^ (v475 >> 47) ^ v475);
                        v688 = 0x9DDFEA08EB382D69 * (v476 ^ (v476 >> 47));
                        while (2)
                        {
                          *(_QWORD *)buf = v347;
                          v477 = v474[7];
                          if (v477)
                          {
                            (*(void (**)(uint8_t **__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v477 + 48))(&v703, v477, buf);
                            if (v703)
                            {
                              v682 = v474;
                              (*(void (**)(uint8_t *, unint64_t))(*(_QWORD *)v703 + 16))(v703, v347);
                              v478 = *(_QWORD *)(v338 + 48);
                              if (v478)
                              {
                                v479 = (uint8x8_t)vcnt_s8((int8x8_t)v478);
                                v479.i16[0] = vaddlv_u8(v479);
                                if (v479.u32[0] > 1uLL)
                                {
                                  v457 = v688;
                                  if (v688 >= v478)
                                    v457 = v688 % v478;
                                }
                                else
                                {
                                  v457 = v688 & (v478 - 1);
                                }
                                v480 = *(_QWORD ***)(*v694 + 8 * v457);
                                if (v480)
                                {
                                  v481 = *v480;
                                  if (*v480)
                                  {
                                    if (v479.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v483 = v481[1];
                                        if (v483 == v688)
                                        {
                                          if (v481[2] == v347)
                                            goto LABEL_816;
                                        }
                                        else if ((v483 & (v478 - 1)) != v457)
                                        {
                                          goto LABEL_817;
                                        }
                                        v481 = (_QWORD *)*v481;
                                        if (!v481)
                                          goto LABEL_817;
                                      }
                                    }
                                    do
                                    {
                                      v482 = v481[1];
                                      if (v482 == v688)
                                      {
                                        if (v481[2] == v347)
                                        {
LABEL_816:
                                          v484 = v682;
                                          goto LABEL_876;
                                        }
                                      }
                                      else
                                      {
                                        if (v482 >= v478)
                                          v482 %= v478;
                                        if (v482 != v457)
                                          break;
                                      }
                                      v481 = (_QWORD *)*v481;
                                    }
                                    while (v481);
                                  }
                                }
                              }
LABEL_817:
                              v481 = operator new(0x30uLL);
                              *(_QWORD *)buf = v481;
                              *(_QWORD *)&buf[8] = a1 + 56;
                              *v481 = 0;
                              v481[1] = v688;
                              v481[2] = v347;
                              v481[3] = 0;
                              v481[4] = 0;
                              v481[5] = 0;
                              buf[16] = 1;
                              v485 = (float)(unint64_t)(*(_QWORD *)(v338 + 64) + 1);
                              v486 = *(float *)(v338 + 72);
                              if (!v478 || (float)(v486 * (float)v478) < v485)
                              {
                                v487 = (v478 & (v478 - 1)) != 0;
                                if (v478 < 3)
                                  v487 = 1;
                                v488 = v487 | (2 * v478);
                                v489 = vcvtps_u32_f32(v485 / v486);
                                if (v488 <= v489)
                                  prime = v489;
                                else
                                  prime = v488;
                                if (prime == 1)
                                {
                                  prime = 2;
                                }
                                else if ((prime & (prime - 1)) != 0)
                                {
                                  prime = std::__next_prime(prime);
                                  v478 = *(_QWORD *)(v338 + 48);
                                }
                                if (prime > v478)
                                {
LABEL_829:
                                  if (prime >> 61)
                                    goto LABEL_1190;
                                  v491 = operator new(8 * prime);
                                  v492 = (void *)*v694;
                                  *v694 = (uint64_t)v491;
                                  if (v492)
                                    operator delete(v492);
                                  v493 = 0;
                                  *(_QWORD *)(v338 + 48) = prime;
                                  do
                                    *(_QWORD *)(*v694 + 8 * v493++) = 0;
                                  while (prime != v493);
                                  v494 = (_QWORD *)*v684;
                                  if (!*v684)
                                    goto LABEL_853;
                                  v495 = v494[1];
                                  v496 = prime - 1;
                                  if ((prime & (prime - 1)) == 0)
                                  {
                                    v497 = v495 & v496;
                                    *(_QWORD *)(*v694 + 8 * v497) = v684;
                                    for (m = (_QWORD *)*v494; *v494; m = (_QWORD *)*v494)
                                    {
                                      v499 = m[1] & v496;
                                      if (v499 == v497)
                                      {
                                        v494 = m;
                                      }
                                      else if (*(_QWORD *)(*v694 + 8 * v499))
                                      {
                                        *v494 = *m;
                                        v500 = 8 * v499;
                                        *m = **(_QWORD **)(*v694 + v500);
                                        **(_QWORD **)(*v694 + v500) = m;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(*v694 + 8 * v499) = v494;
                                        v494 = m;
                                        v497 = v499;
                                      }
                                    }
                                    goto LABEL_853;
                                  }
                                  if (v495 >= prime)
                                    v495 %= prime;
                                  *(_QWORD *)(*v694 + 8 * v495) = v684;
                                  v504 = (_QWORD *)*v494;
                                  if (!*v494)
                                  {
LABEL_853:
                                    v478 = prime;
                                    goto LABEL_854;
                                  }
                                  while (2)
                                  {
                                    v506 = v504[1];
                                    if (v506 >= prime)
                                      v506 %= prime;
                                    if (v506 != v495)
                                    {
                                      if (!*(_QWORD *)(*v694 + 8 * v506))
                                      {
                                        *(_QWORD *)(*v694 + 8 * v506) = v494;
LABEL_858:
                                        v494 = v504;
                                        v504 = (_QWORD *)*v504;
                                        v495 = v506;
                                        if (!v504)
                                          goto LABEL_853;
                                        continue;
                                      }
                                      *v494 = *v504;
                                      v505 = 8 * v506;
                                      *v504 = **(_QWORD **)(*v694 + v505);
                                      **(_QWORD **)(*v694 + v505) = v504;
                                      v504 = v494;
                                    }
                                    break;
                                  }
                                  v506 = v495;
                                  goto LABEL_858;
                                }
                                if (prime < v478)
                                {
                                  v501 = vcvtps_u32_f32((float)*(unint64_t *)(v338 + 64) / *(float *)(v338 + 72));
                                  if (v478 < 3
                                    || (v502 = (uint8x8_t)vcnt_s8((int8x8_t)v478),
                                        v502.i16[0] = vaddlv_u8(v502),
                                        v502.u32[0] > 1uLL))
                                  {
                                    v501 = std::__next_prime(v501);
                                  }
                                  else
                                  {
                                    v503 = 1 << -(char)__clz(v501 - 1);
                                    if (v501 >= 2)
                                      v501 = v503;
                                  }
                                  if (prime <= v501)
                                    prime = v501;
                                  if (prime >= v478)
                                  {
                                    v478 = *(_QWORD *)(v338 + 48);
                                  }
                                  else
                                  {
                                    if (prime)
                                      goto LABEL_829;
                                    v530 = (void *)*v694;
                                    *v694 = 0;
                                    if (v530)
                                      operator delete(v530);
                                    v478 = 0;
                                    *(_QWORD *)(v338 + 48) = 0;
                                  }
                                }
LABEL_854:
                                if ((v478 & (v478 - 1)) != 0)
                                {
                                  v457 = v688;
                                  if (v688 >= v478)
                                    v457 = v688 % v478;
                                }
                                else
                                {
                                  v457 = (v478 - 1) & v688;
                                }
                              }
                              v507 = *v694;
                              v508 = *(_QWORD **)(*v694 + 8 * v457);
                              if (v508)
                              {
                                *v481 = *v508;
                                v484 = v682;
                                goto LABEL_874;
                              }
                              *v481 = *v684;
                              *v684 = v481;
                              *(_QWORD *)(v507 + 8 * v457) = v684;
                              v484 = v682;
                              if (*v481)
                              {
                                v509 = *(_QWORD *)(*v481 + 8);
                                if ((v478 & (v478 - 1)) != 0)
                                {
                                  if (v509 >= v478)
                                    v509 %= v478;
                                }
                                else
                                {
                                  v509 &= v478 - 1;
                                }
                                v508 = (_QWORD *)(*v694 + 8 * v509);
LABEL_874:
                                *v508 = v481;
                              }
                              ++*(_QWORD *)(v338 + 64);
LABEL_876:
                              v457 = v484[2];
                              v511 = *((_DWORD *)v484 + 6);
                              v510 = *((_DWORD *)v484 + 7);
                              v681 = v703;
                              v703 = 0;
                              v512 = v481[3];
                              v513 = v481[4];
                              v514 = v512;
                              if (v512 != v513)
                              {
                                while (1)
                                {
                                  v515 = v457 == *(_QWORD *)v514 && v511 == *(_DWORD *)(v514 + 8);
                                  if (v515)
                                    break;
                                  v514 += 24;
                                  if (v514 == v513)
                                    goto LABEL_886;
                                }
                              }
                              if (v514 == v513)
                              {
LABEL_886:
                                v516 = v481[5];
                                if (v513 >= v516)
                                {
                                  v518 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v513 - v512) >> 3);
                                  v519 = v518 + 1;
                                  if (v518 + 1 > 0xAAAAAAAAAAAAAAALL)
                                    abort();
                                  v680 = v510;
                                  v520 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v516 - v512) >> 3);
                                  if (2 * v520 > v519)
                                    v519 = 2 * v520;
                                  if (v520 >= 0x555555555555555)
                                    v521 = 0xAAAAAAAAAAAAAAALL;
                                  else
                                    v521 = v519;
                                  if (v521 > 0xAAAAAAAAAAAAAAALL)
                                    goto LABEL_1190;
                                  v522 = (char *)operator new(24 * v521);
                                  v523 = &v522[24 * v518];
                                  v524 = &v522[24 * v521];
                                  *(_QWORD *)v523 = v457;
                                  *((_DWORD *)v523 + 2) = v511;
                                  *((_DWORD *)v523 + 3) = v680;
                                  *((_QWORD *)v523 + 2) = v681;
                                  v517 = v523 + 24;
                                  v525 = (_QWORD *)v481[3];
                                  v457 = v481[4];
                                  if ((_QWORD *)v457 == v525)
                                  {
                                    v481[3] = v523;
                                    v481[4] = v517;
                                    v481[5] = v524;
                                    n = (_QWORD *)(a1 + 312);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      *(_OWORD *)(v523 - 24) = *(_OWORD *)(v457 - 24);
                                      v526 = *(_QWORD *)(v457 - 8);
                                      *(_QWORD *)(v457 - 8) = 0;
                                      *((_QWORD *)v523 - 1) = v526;
                                      v523 -= 24;
                                      v457 -= 24;
                                    }
                                    while ((_QWORD *)v457 != v525);
                                    v457 = v481[3];
                                    v527 = (_QWORD *)v481[4];
                                    v481[3] = v523;
                                    v481[4] = v517;
                                    v481[5] = v524;
                                    for (n = (_QWORD *)(a1 + 312); v527 != (_QWORD *)v457; v527 -= 3)
                                    {
                                      v528 = *(v527 - 1);
                                      *(v527 - 1) = 0;
                                      if (v528)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v528 + 8))(v528);
                                    }
                                  }
                                  v338 = a1;
                                  if (v457)
                                    operator delete((void *)v457);
                                }
                                else
                                {
                                  *(_QWORD *)v513 = v457;
                                  *(_DWORD *)(v513 + 8) = v511;
                                  *(_DWORD *)(v513 + 12) = v510;
                                  v517 = (char *)(v513 + 24);
                                  *(_QWORD *)(v513 + 16) = v681;
                                }
                                v481[4] = v517;
                                v474 = v682;
                              }
                              else
                              {
                                v474 = v682;
                                if (v681)
                                  (*(void (**)(uint8_t *))(*(_QWORD *)v681 + 8))(v681);
                              }
                              v529 = v703;
                              v703 = 0;
                              if (v529)
                                (*(void (**)(uint8_t *))(*(_QWORD *)v529 + 8))(v529);
                            }
                            v474 = (_QWORD *)*v474;
                            if (!v474)
                              goto LABEL_917;
                            continue;
                          }
                          break;
                        }
LABEL_1205:
                        std::__throw_bad_function_call[abi:nn180100]();
LABEL_1211:
                        __break(1u);
                        return;
                      }
                    }
                    else
                    {
                      if (v448 >= *(_QWORD *)&v442)
                        v448 %= *(_QWORD *)&v442;
                      if (v448 != v445)
                        goto LABEL_685;
                    }
                    v318 = *(_QWORD *)v318;
                    if (!v318)
                      goto LABEL_685;
                  }
                }
              }
              else
              {
                if (v383 >= *(_QWORD *)&v378)
                  v383 %= *(_QWORD *)&v378;
                if (v383 != v380)
                  break;
              }
              v318 = *(_QWORD *)v318;
            }
            while (v318);
          }
        }
      }
LABEL_640:
      v385 = *(int8x8_t *)(a2 + 48);
      if (!*(_QWORD *)&v385)
        goto LABEL_660;
      v386 = (uint8x8_t)vcnt_s8(v385);
      v386.i16[0] = vaddlv_u8(v386);
      if (v386.u32[0] > 1uLL)
      {
        v387 = *v349;
        if (*(_QWORD *)&v385 <= v377)
          v387 = v377 % *(_QWORD *)&v385;
      }
      else
      {
        v387 = (v385.i32[0] - 1) & v377;
      }
      v388 = *(uint64_t **)(*v690 + 8 * v387);
      if (!v388 || (v318 = *v388) == 0)
      {
LABEL_660:
        v393 = *(unint64_t **)(v338 + 488);
        v392 = *(_QWORD *)(v338 + 496);
        if ((unint64_t)v393 < v392)
        {
          *v393 = v347;
          *(_QWORD *)(v338 + 488) = v393 + 1;
          goto LABEL_685;
        }
        v318 = *(_QWORD *)(v338 + 480);
        v394 = ((uint64_t)v393 - v318) >> 3;
        v395 = v394 + 1;
        if ((unint64_t)(v394 + 1) >> 61)
LABEL_1198:
          abort();
        v396 = v392 - v318;
        if (v396 >> 2 > v395)
          v395 = v396 >> 2;
        if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF8)
          v397 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v397 = v395;
        if (v397)
        {
          if (v397 >> 61)
            goto LABEL_1190;
          v398 = (char *)operator new(8 * v397);
        }
        else
        {
          v398 = 0;
        }
        v399 = (unint64_t *)&v398[8 * v394];
        *v399 = v347;
        v400 = v399 + 1;
        if (v393 == (unint64_t *)v318)
        {
          v318 = (uint64_t)v393;
          v338 = a1;
        }
        else
        {
          v401 = (unint64_t)v393 - v318 - 8;
          if (v401 >= 0x58)
          {
            v338 = a1;
            if ((unint64_t)(v318 - (_QWORD)v398) < 0x20)
              goto LABEL_680;
            v402 = (v401 >> 3) + 1;
            v403 = &v398[8 * v394 - 16];
            v404 = v393 - 2;
            v405 = v402 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v406 = *(_OWORD *)v404;
              *((_OWORD *)v403 - 1) = *((_OWORD *)v404 - 1);
              *(_OWORD *)v403 = v406;
              v403 -= 32;
              v404 -= 4;
              v405 -= 4;
            }
            while (v405);
            v399 -= v402 & 0x3FFFFFFFFFFFFFFCLL;
            v393 -= v402 & 0x3FFFFFFFFFFFFFFCLL;
            if (v402 != (v402 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_680;
          }
          else
          {
            v338 = a1;
            do
            {
LABEL_680:
              v407 = *--v393;
              *--v399 = v407;
            }
            while (v393 != (unint64_t *)v318);
            v318 = *(_QWORD *)(v338 + 480);
          }
        }
        *(_QWORD *)(v338 + 480) = v399;
        *(_QWORD *)(v338 + 488) = v400;
        *(_QWORD *)(v338 + 496) = &v398[8 * v397];
        if (v318)
          operator delete((void *)v318);
        n = (_QWORD *)(a1 + 312);
        *(_QWORD *)(v338 + 488) = v400;
        goto LABEL_685;
      }
      if (v386.u32[0] < 2uLL)
      {
        v389 = *(_QWORD *)&v385 - 1;
        while (1)
        {
          v391 = *(_QWORD *)(v318 + 8);
          if (v391 == v377)
          {
            if (*(_DWORD *)(v318 + 16) == (_DWORD)v377)
              goto LABEL_693;
          }
          else if ((v391 & v389) != v387)
          {
            goto LABEL_660;
          }
          v318 = *(_QWORD *)v318;
          if (!v318)
            goto LABEL_660;
        }
      }
      while (2)
      {
        v390 = *(_QWORD *)(v318 + 8);
        if (v390 != v377)
        {
          if (v390 >= *(_QWORD *)&v385)
            v390 %= *(_QWORD *)&v385;
          if (v390 != v387)
            goto LABEL_660;
          goto LABEL_650;
        }
        if (*(_DWORD *)(v318 + 16) != (_DWORD)v377)
        {
LABEL_650:
          v318 = *(_QWORD *)v318;
          if (!v318)
            goto LABEL_660;
          continue;
        }
        break;
      }
LABEL_693:
      v414 = *(unint64_t **)(v338 + 416);
      v413 = *(_QWORD *)(v338 + 424);
      if ((unint64_t)v414 < v413)
      {
        *v414 = v347;
        v415 = v414 + 1;
        goto LABEL_763;
      }
      v424 = *(unint64_t **)(v338 + 408);
      v425 = v414 - v424;
      v426 = v425 + 1;
      if ((unint64_t)(v425 + 1) >> 61)
        goto LABEL_1198;
      v427 = v413 - (_QWORD)v424;
      if (v427 >> 2 > v426)
        v426 = v427 >> 2;
      if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFF8)
        v428 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v428 = v426;
      if (v428)
      {
        if (!(v428 >> 61))
        {
          v429 = v428;
          v430 = operator new(8 * v428);
          v428 = v429;
          goto LABEL_719;
        }
LABEL_1190:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v430 = 0;
LABEL_719:
      v433 = (unint64_t *)&v430[8 * v425];
      *v433 = v347;
      v415 = v433 + 1;
      if (v414 == v424)
      {
        v424 = v414;
        v338 = a1;
      }
      else
      {
        v434 = (char *)(v414 - 1) - (char *)v424;
        if (v434 >= 0x58)
        {
          v338 = a1;
          if ((unint64_t)((char *)v424 - v430) < 0x20)
            goto LABEL_759;
          v450 = (v434 >> 3) + 1;
          v451 = &v430[8 * v425 - 16];
          v452 = v414 - 2;
          v453 = v450 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v454 = *(_OWORD *)v452;
            *(v451 - 1) = *((_OWORD *)v452 - 1);
            *v451 = v454;
            v451 -= 2;
            v452 -= 4;
            v453 -= 4;
          }
          while (v453);
          v433 -= v450 & 0x3FFFFFFFFFFFFFFCLL;
          v414 -= v450 & 0x3FFFFFFFFFFFFFFCLL;
          if (v450 != (v450 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_759;
        }
        else
        {
          v338 = a1;
          do
          {
LABEL_759:
            v455 = *--v414;
            *--v433 = v455;
          }
          while (v414 != v424);
          v424 = *(unint64_t **)(v338 + 408);
        }
      }
      *(_QWORD *)(v338 + 408) = v433;
      *(_QWORD *)(v338 + 416) = v415;
      *(_QWORD *)(v338 + 424) = &v430[8 * v428];
      if (v424)
        operator delete(v424);
LABEL_763:
      *(_QWORD *)(v338 + 416) = v415;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>(v694, v347);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)buf, v690, (_QWORD *)v318);
      if (*(_QWORD *)buf)
        operator delete(*(void **)buf);
      v338 = a1;
      n = (_QWORD *)(a1 + 312);
LABEL_685:
      v408 = (_QWORD *)v339[1];
      if (v408)
      {
        do
        {
          v409 = v408;
          v408 = (_QWORD *)*v408;
        }
        while (v408);
      }
      else
      {
        do
        {
          v409 = (_QWORD *)v339[2];
          v515 = *v409 == (_QWORD)v339;
          v339 = v409;
        }
        while (!v515);
      }
      v339 = v409;
    }
    while (v409 != n);
  }
  v531 = *(uint64_t **)(v338 + 888);
  v698 = *(uint64_t **)(v338 + 896);
  if (v531 != v698)
  {
    v695 = vdupq_n_s64(0xCBD572B797B24F09);
    do
    {
      v533 = *(char **)(v338 + 440);
      v532 = *(_QWORD *)(v338 + 448);
      if ((unint64_t)v533 < v532)
      {
        *(_QWORD *)v533 = *v531;
        v534 = v533 + 8;
        goto LABEL_945;
      }
      v535 = *(char **)(v338 + 432);
      v318 = (v533 - v535) >> 3;
      v536 = v318 + 1;
      if ((unint64_t)(v318 + 1) >> 61)
        abort();
      v537 = v532 - (_QWORD)v535;
      if (v537 >> 2 > v536)
        v536 = v537 >> 2;
      if ((unint64_t)v537 >= 0x7FFFFFFFFFFFFFF8)
        v538 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v538 = v536;
      if (v538)
      {
        if (v538 >> 61)
          goto LABEL_1190;
        v539 = operator new(8 * v538);
      }
      else
      {
        v539 = 0;
      }
      v540 = (uint64_t *)&v539[8 * v318];
      *v540 = *v531;
      v534 = v540 + 1;
      if (v533 == v535)
      {
        v535 = v533;
        v338 = a1;
        goto LABEL_943;
      }
      v541 = v533 - 8 - v535;
      if (v541 >= 0x58)
      {
        v338 = a1;
        if ((unint64_t)(v535 - v539) >= 0x20)
        {
          v542 = (v541 >> 3) + 1;
          v543 = &v539[8 * v318 - 16];
          v544 = v533 - 16;
          v545 = v542 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v546 = *(_OWORD *)v544;
            *(v543 - 1) = *((_OWORD *)v544 - 1);
            *v543 = v546;
            v543 -= 2;
            v544 -= 32;
            v545 -= 4;
          }
          while (v545);
          v540 -= v542 & 0x3FFFFFFFFFFFFFFCLL;
          v533 -= 8 * (v542 & 0x3FFFFFFFFFFFFFFCLL);
          if (v542 == (v542 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_943;
        }
      }
      else
      {
        v338 = a1;
      }
      do
      {
        v547 = *((_QWORD *)v533 - 1);
        v533 -= 8;
        *--v540 = v547;
      }
      while (v533 != v535);
      v535 = *(char **)(v338 + 432);
LABEL_943:
      *(_QWORD *)(v338 + 432) = v540;
      *(_QWORD *)(v338 + 440) = v534;
      *(_QWORD *)(v338 + 448) = &v539[8 * v538];
      if (v535)
        operator delete(v535);
LABEL_945:
      *(_QWORD *)(v338 + 440) = v534;
      v548 = *v531;
      v549 = (_QWORD *)operator new();
      v550 = operator new();
      v549[2] = "md::components::NonTiled]";
      v549[3] = 24;
      v549[4] = v550;
      *v549 = &off_1E42B0A50;
      v549[1] = 0xCBD572B797B24F09;
      v551 = *(_QWORD *)(v548 + 8);
      if (v551)
      {
        v552 = (uint8x8_t)vcnt_s8((int8x8_t)v551);
        v552.i16[0] = vaddlv_u8(v552);
        if (v552.u32[0] > 1uLL)
        {
          v318 = 0xCBD572B797B24F09;
          if (v551 <= 0xCBD572B797B24F09)
            v318 = 0xCBD572B797B24F09 % v551;
        }
        else
        {
          v318 = (v551 - 1) & 0xCBD572B797B24F09;
        }
        v553 = *(_QWORD **)(*(_QWORD *)v548 + 8 * v318);
        if (v553)
        {
          v554 = (_QWORD *)*v553;
          if (v554)
          {
            if (v552.u32[0] < 2uLL)
            {
              v338 = a1;
              while (1)
              {
                v555 = v554[1];
                if (v555 == 0xCBD572B797B24F09)
                {
                  if (v554[2] == 0xCBD572B797B24F09)
                    goto LABEL_1006;
                }
                else if ((v555 & (v551 - 1)) != v318)
                {
                  goto LABEL_966;
                }
                v554 = (_QWORD *)*v554;
                if (!v554)
                  goto LABEL_966;
              }
            }
            v338 = a1;
            do
            {
              v556 = v554[1];
              if (v556 == 0xCBD572B797B24F09)
              {
                if (v554[2] == 0xCBD572B797B24F09)
                  goto LABEL_1006;
              }
              else
              {
                if (v556 >= v551)
                  v556 %= v551;
                if (v556 != v318)
                  break;
              }
              v554 = (_QWORD *)*v554;
            }
            while (v554);
          }
        }
      }
LABEL_966:
      v557 = (char *)operator new(0x30uLL);
      v558 = (_QWORD *)(v548 + 16);
      *(_QWORD *)buf = v557;
      *(_QWORD *)&buf[8] = v548 + 16;
      *(_QWORD *)v557 = 0;
      *(int64x2_t *)(v557 + 8) = v695;
      *((_QWORD *)v557 + 3) = "md::components::NonTiled]";
      *((_QWORD *)v557 + 4) = 24;
      *((_QWORD *)v557 + 5) = v549;
      buf[16] = 1;
      v559 = (float)(unint64_t)(*(_QWORD *)(v548 + 24) + 1);
      v560 = *(float *)(v548 + 32);
      if (v551 && (float)(v560 * (float)v551) >= v559)
      {
        v338 = a1;
        goto LABEL_996;
      }
      v561 = (v551 & (v551 - 1)) != 0;
      if (v551 < 3)
        v561 = 1;
      v562 = v561 | (2 * v551);
      v563 = vcvtps_u32_f32(v559 / v560);
      if (v562 <= v563)
        v564 = v563;
      else
        v564 = v562;
      if (v564 == 1)
      {
        v564 = 2;
LABEL_977:
        v338 = a1;
        v565 = v564 >= v551;
        if (v564 <= v551)
          goto LABEL_980;
        goto LABEL_990;
      }
      if ((v564 & (v564 - 1)) == 0)
        goto LABEL_977;
      v338 = a1;
      v564 = std::__next_prime(v564);
      v551 = *(_QWORD *)(v548 + 8);
      v565 = v564 >= v551;
      if (v564 <= v551)
      {
LABEL_980:
        if (v565)
          goto LABEL_991;
        v566 = vcvtps_u32_f32((float)*(unint64_t *)(v548 + 24) / *(float *)(v548 + 32));
        if (v551 < 3 || (v567 = (uint8x8_t)vcnt_s8((int8x8_t)v551), v567.i16[0] = vaddlv_u8(v567), v567.u32[0] > 1uLL))
        {
          v566 = std::__next_prime(v566);
        }
        else
        {
          v568 = 1 << -(char)__clz(v566 - 1);
          if (v566 >= 2)
            v566 = v568;
        }
        if (v564 <= v566)
          v564 = v566;
        if (v564 >= v551)
          goto LABEL_991;
      }
LABEL_990:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v548, v564);
LABEL_991:
      v551 = *(_QWORD *)(v548 + 8);
      if ((v551 & (v551 - 1)) != 0)
      {
        if (v551 <= 0xCBD572B797B24F09)
          v318 = 0xCBD572B797B24F09 % v551;
        else
          v318 = 0xCBD572B797B24F09;
      }
      else
      {
        v318 = (v551 - 1) & 0xCBD572B797B24F09;
      }
LABEL_996:
      v569 = *(_QWORD *)v548;
      v570 = *(_QWORD **)(*(_QWORD *)v548 + 8 * v318);
      if (v570)
      {
        *(_QWORD *)v557 = *v570;
      }
      else
      {
        *(_QWORD *)v557 = *v558;
        *v558 = v557;
        *(_QWORD *)(v569 + 8 * v318) = v558;
        if (!*(_QWORD *)v557)
          goto LABEL_1005;
        v571 = *(_QWORD *)(*(_QWORD *)v557 + 8);
        if ((v551 & (v551 - 1)) != 0)
        {
          if (v571 >= v551)
            v571 %= v551;
        }
        else
        {
          v571 &= v551 - 1;
        }
        v570 = (_QWORD *)(*(_QWORD *)v548 + 8 * v571);
      }
      *v570 = v557;
LABEL_1005:
      ++*(_QWORD *)(v548 + 24);
LABEL_1006:
      ++v531;
    }
    while (v531 != v698);
  }
  v572 = *(_QWORD **)(v338 + 912);
  v573 = *(_QWORD **)(v338 + 920);
  v574 = v690;
  if (v572 != v573)
  {
    v575 = *(char **)(v338 + 416);
    while (1)
    {
      v577 = *(_QWORD *)(v338 + 424);
      if ((unint64_t)v575 >= v577)
        break;
      *(_QWORD *)v575 = *v572;
      v576 = v575 + 8;
LABEL_1010:
      *(_QWORD *)(v338 + 416) = v576;
      ++v572;
      v575 = v576;
      if (v572 == v573)
        goto LABEL_1037;
    }
    v578 = *(char **)(v338 + 408);
    v579 = (v575 - v578) >> 3;
    v580 = v579 + 1;
    if ((unint64_t)(v579 + 1) >> 61)
      abort();
    v581 = v577 - (_QWORD)v578;
    if (v581 >> 2 > v580)
      v580 = v581 >> 2;
    if ((unint64_t)v581 >= 0x7FFFFFFFFFFFFFF8)
      v582 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v582 = v580;
    if (v582)
    {
      if (v582 >> 61)
        goto LABEL_1190;
      v583 = operator new(8 * v582);
    }
    else
    {
      v583 = 0;
    }
    v584 = &v583[8 * v579];
    *v584 = *v572;
    v576 = (char *)(v584 + 1);
    if (v575 == v578)
    {
      v578 = v575;
      v574 = v690;
      goto LABEL_1028;
    }
    v585 = v575 - 8 - v578;
    if (v585 < 0x168
      || &v583[v575 - v578 - 8 - (v585 & 0xFFFFFFFFFFFFFFF8)] > &v583[v575 - v578 - 8]
      || &v575[-(v585 & 0xFFFFFFFFFFFFFFF8) - 8] > v575 - 8
      || (unint64_t)(v578 - v583) < 0x20)
    {
      v586 = v575;
      v574 = v690;
    }
    else
    {
      v588 = (v585 >> 3) + 1;
      v586 = &v575[-8 * (v588 & 0x3FFFFFFFFFFFFFFCLL)];
      v589 = &v583[8 * v579 - 16];
      v590 = v575 - 16;
      v591 = v588 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v592 = *(_OWORD *)v590;
        *(v589 - 1) = *((_OWORD *)v590 - 1);
        *v589 = v592;
        v589 -= 2;
        v590 -= 32;
        v591 -= 4;
      }
      while (v591);
      v584 -= v588 & 0x3FFFFFFFFFFFFFFCLL;
      v574 = v690;
      if (v588 == (v588 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1028;
    }
    do
    {
      v587 = *((_QWORD *)v586 - 1);
      v586 -= 8;
      *--v584 = v587;
    }
    while (v586 != v578);
    v578 = *(char **)(v338 + 408);
LABEL_1028:
    *(_QWORD *)(v338 + 408) = v584;
    *(_QWORD *)(v338 + 416) = v576;
    *(_QWORD *)(v338 + 424) = &v583[8 * v582];
    if (v578)
      operator delete(v578);
    goto LABEL_1010;
  }
LABEL_1037:
  v593 = *(unsigned int **)(v338 + 352);
  for (ii = *(unsigned int **)(v338 + 360); v593 != ii; v593 += 28)
  {
    std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>((uint64_t *)(v338 + 40), *((_QWORD *)v593 + 13));
    if (!v593[24])
    {
      v595 = *(int8x8_t *)(a2 + 48);
      if (v595)
      {
        v596 = *v593;
        v597 = (uint8x8_t)vcnt_s8(v595);
        v597.i16[0] = vaddlv_u8(v597);
        if (v597.u32[0] > 1uLL)
        {
          v598 = *v593;
          if (*(_QWORD *)&v595 <= v596)
            v598 = v596 % *(_QWORD *)&v595;
        }
        else
        {
          v598 = (v595.i32[0] - 1) & v596;
        }
        v599 = *(uint64_t ***)(*v574 + 8 * v598);
        if (v599)
        {
          v600 = *v599;
          if (v600)
          {
            if (v597.u32[0] < 2uLL)
            {
              v601 = *(_QWORD *)&v595 - 1;
              while (1)
              {
                v603 = v600[1];
                if (v603 == v596)
                {
                  if (*((_DWORD *)v600 + 4) == (_DWORD)v596)
                    goto LABEL_1039;
                }
                else if ((v603 & v601) != v598)
                {
                  goto LABEL_1040;
                }
                v600 = (uint64_t *)*v600;
                if (!v600)
                  goto LABEL_1040;
              }
            }
            do
            {
              v602 = v600[1];
              if (v602 == v596)
              {
                if (*((_DWORD *)v600 + 4) == (_DWORD)v596)
                {
LABEL_1039:
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(v574, v596);
                  break;
                }
              }
              else
              {
                if (v602 >= *(_QWORD *)&v595)
                  v602 %= *(_QWORD *)&v595;
                if (v602 != v598)
                  break;
              }
              v600 = (uint64_t *)*v600;
            }
            while (v600);
          }
        }
      }
    }
LABEL_1040:
    ;
  }
  if (*(_QWORD *)(a2 + 24))
  {
    if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
      dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
    v604 = GEOGetVectorKitRegistryManagerLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "layerDataSets.keys.active.empty()";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
      *(_WORD *)&buf[22] = 1024;
      v721 = 484;
      _os_log_impl(&dword_19F029000, v604, OS_LOG_TYPE_ERROR, "Tracking a LayerData with no associated Registry: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
  }
  if (*(_QWORD *)(a2 + 104))
  {
    if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
      dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
    v605 = GEOGetVectorKitRegistryManagerLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "layerDataSets.keys.entering.empty()";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
      *(_WORD *)&buf[22] = 1024;
      v721 = 486;
      _os_log_impl(&dword_19F029000, v605, OS_LOG_TYPE_ERROR, "Tracking a LayerData with no associated Registry: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
  }
  v606 = *(_QWORD *)(v338 + 480);
  v607 = *(_QWORD *)(v338 + 488);
  if (v606 != v607)
  {
    v608 = *(unsigned __int16 **)(v338 + 464);
    if (*(unsigned __int16 **)(v338 + 456) != v608)
    {
LABEL_1078:
      v609 = *(unsigned __int16 *)(*(_QWORD *)v606 + 40);
      v610 = *(unsigned __int16 **)(v338 + 456);
      while (1)
      {
        v611 = *v610;
        if (v611 == v609)
          break;
        ++v610;
        if (v611 > v609 || v610 == v608)
        {
LABEL_1077:
          v606 += 8;
          if (v606 == v607)
            goto LABEL_1090;
          goto LABEL_1078;
        }
      }
      if (v610 == v608)
        goto LABEL_1077;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v613 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!std::any_of(begin(_registries.cached), end(_registries.cached), f)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
        *(_WORD *)&buf[22] = 1024;
        v721 = 492;
        _os_log_impl(&dword_19F029000, v613, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any cached set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
  }
LABEL_1090:
  v614 = *(_QWORD *)(v338 + 432);
  v615 = *(_QWORD *)(v338 + 440);
  if (v614 != v615)
  {
    v616 = *(unsigned __int16 **)(v338 + 464);
    if (*(unsigned __int16 **)(v338 + 456) != v616)
    {
LABEL_1095:
      v617 = *(unsigned __int16 *)(*(_QWORD *)v614 + 40);
      v618 = *(unsigned __int16 **)(v338 + 456);
      while (1)
      {
        v619 = *v618;
        if (v619 == v617)
          break;
        ++v618;
        if (v619 > v617 || v618 == v616)
        {
LABEL_1094:
          v614 += 8;
          if (v614 == v615)
            goto LABEL_1107;
          goto LABEL_1095;
        }
      }
      if (v618 == v616)
        goto LABEL_1094;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v621 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!std::any_of(begin(_registries.entering), end(_registries.entering), f)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
        *(_WORD *)&buf[22] = 1024;
        v721 = 493;
        _os_log_impl(&dword_19F029000, v621, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any entering set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
  }
LABEL_1107:
  v622 = *(_QWORD *)(v338 + 408);
  v623 = *(_QWORD *)(v338 + 416);
  if (v622 != v623)
  {
    v624 = *(unsigned __int16 **)(v338 + 464);
    if (*(unsigned __int16 **)(v338 + 456) != v624)
    {
LABEL_1112:
      v625 = *(unsigned __int16 *)(*(_QWORD *)v622 + 40);
      v626 = *(unsigned __int16 **)(v338 + 456);
      while (1)
      {
        v627 = *v626;
        if (v627 == v625)
          break;
        ++v626;
        if (v627 > v625 || v626 == v624)
        {
LABEL_1111:
          v622 += 8;
          if (v622 == v623)
            goto LABEL_1124;
          goto LABEL_1112;
        }
      }
      if (v626 == v624)
        goto LABEL_1111;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v629 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!std::any_of(begin(_registries.exiting), end(_registries.exiting), f)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
        *(_WORD *)&buf[22] = 1024;
        v721 = 494;
        _os_log_impl(&dword_19F029000, v629, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any exiting set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
  }
LABEL_1124:
  v630 = *(_QWORD *)(v338 + 384);
  v631 = *(_QWORD *)(v338 + 392);
  if (v630 != v631)
  {
    v632 = *(unsigned __int16 **)(v338 + 464);
    if (*(unsigned __int16 **)(v338 + 456) != v632)
    {
LABEL_1129:
      v633 = *(unsigned __int16 *)(*(_QWORD *)v630 + 40);
      v634 = *(unsigned __int16 **)(v338 + 456);
      while (1)
      {
        v635 = *v634;
        if (v635 == v633)
          break;
        ++v634;
        if (v635 > v633 || v634 == v632)
        {
LABEL_1128:
          v630 += 8;
          if (v630 == v631)
            goto LABEL_1141;
          goto LABEL_1129;
        }
      }
      if (v634 == v632)
        goto LABEL_1128;
      if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
        dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
      v637 = GEOGetVectorKitRegistryManagerLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitRegistryManagerLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!std::any_of(begin(_registries.active), end(_registries.active), f)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RegistryManager.mm";
        *(_WORD *)&buf[22] = 1024;
        v721 = 495;
        _os_log_impl(&dword_19F029000, v637, OS_LOG_TYPE_ERROR, "Destroying registry should not be present in any active set: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
  }
LABEL_1141:
  v638 = *(_QWORD *)(v338 + 384);
  v639 = *(uint64_t **)(v338 + 392);
  v640 = 126 - 2 * __clz(((uint64_t)v639 - v638) >> 3);
  if (v639 == (uint64_t *)v638)
    v641 = 0;
  else
    v641 = v640;
  std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v638, v639, v641, 1);
  v642 = *(_QWORD *)(v338 + 432);
  v643 = *(uint64_t **)(v338 + 440);
  v644 = 126 - 2 * __clz(((uint64_t)v643 - v642) >> 3);
  if (v643 == (uint64_t *)v642)
    v645 = 0;
  else
    v645 = v644;
  std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v642, v643, v645, 1);
  v646 = *(_QWORD *)(v338 + 408);
  v647 = *(uint64_t **)(v338 + 416);
  v648 = 126 - 2 * __clz(((uint64_t)v647 - v646) >> 3);
  if (v647 == (uint64_t *)v646)
    v649 = 0;
  else
    v649 = v648;
  std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v646, v647, v649, 1);
  v650 = *(_QWORD *)(v338 + 480);
  v651 = *(uint64_t **)(v338 + 488);
  v652 = 126 - 2 * __clz(((uint64_t)v651 - v650) >> 3);
  if (v651 == (uint64_t *)v650)
    v653 = 0;
  else
    v653 = v652;
  std::__introsort<std::_ClassicAlgPolicy,md::RegistryManager::update(md::RegistryManager::LayerDataSets &,md::SceneContext const&,unsigned long long,BOOL)::$_0 &,gdc::Registry **,false>(v650, v651, v653, 1);
  v654 = *(unint64_t **)(v338 + 328);
  v655 = *(unint64_t **)(v338 + 336);
  if (v654 != v655)
  {
    v699 = *(unint64_t **)(v338 + 336);
    do
    {
      v656 = *v654;
      v658 = *(unint64_t **)(a1 + 416);
      v657 = *(_QWORD *)(a1 + 424);
      if ((unint64_t)v658 >= v657)
      {
        v661 = *(unint64_t **)(a1 + 408);
        v662 = v658 - v661;
        v663 = v662 + 1;
        if ((unint64_t)(v662 + 1) >> 61)
          abort();
        v664 = v657 - (_QWORD)v661;
        if (v664 >> 2 > v663)
          v663 = v664 >> 2;
        if ((unint64_t)v664 >= 0x7FFFFFFFFFFFFFF8)
          v665 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v665 = v663;
        if (v665)
        {
          if (v665 >> 61)
            goto LABEL_1190;
          v666 = operator new(8 * v665);
        }
        else
        {
          v666 = 0;
        }
        v667 = (unint64_t *)&v666[8 * v662];
        *v667 = v656;
        v659 = v667 + 1;
        if (v658 == v661)
        {
          v661 = v658;
          v660 = (_QWORD *)a1;
        }
        else
        {
          v668 = (char *)(v658 - 1) - (char *)v661;
          v660 = (_QWORD *)a1;
          if (v668 < 0x58)
            goto LABEL_1217;
          if ((unint64_t)((char *)v661 - v666) < 0x20)
            goto LABEL_1217;
          v669 = (v668 >> 3) + 1;
          v670 = &v666[8 * v662 - 16];
          v671 = v658 - 2;
          v672 = v669 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v673 = *(_OWORD *)v671;
            *(v670 - 1) = *((_OWORD *)v671 - 1);
            *v670 = v673;
            v670 -= 2;
            v671 -= 4;
            v672 -= 4;
          }
          while (v672);
          v667 -= v669 & 0x3FFFFFFFFFFFFFFCLL;
          v658 -= v669 & 0x3FFFFFFFFFFFFFFCLL;
          if (v669 != (v669 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1217:
            do
            {
              v674 = *--v658;
              *--v667 = v674;
            }
            while (v658 != v661);
            v661 = *(unint64_t **)(a1 + 408);
          }
        }
        v660[51] = v667;
        v660[52] = v659;
        v660[53] = &v666[8 * v665];
        if (v661)
          operator delete(v661);
        v655 = v699;
      }
      else
      {
        *v658 = v656;
        v659 = v658 + 1;
        v660 = (_QWORD *)a1;
      }
      v660[52] = v659;
      std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>((uint64_t *)(a1 + 40), *v654++);
    }
    while (v654 != v655);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a2 + 176));
  v675 = (_QWORD *)*((_QWORD *)&v709 + 1);
  *(_QWORD *)(a2 + 168) = v709;
  *(_QWORD *)(a2 + 176) = v675;
  v676 = v710;
  *(_QWORD *)(a2 + 184) = v710;
  if (v676)
  {
    v675[2] = v686;
    *(_QWORD *)&v709 = (char *)&v709 + 8;
    *((_QWORD *)&v709 + 1) = 0;
    v710 = 0;
    v675 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 168) = v686;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v675);
  if (!*(_QWORD *)v717)
    goto LABEL_1205;
  (*(void (**)(_QWORD))(**(_QWORD **)v717 + 48))(*(_QWORD *)v717);
  v677 = *(_WORD **)v717;
  if (*(_WORD **)v717 == v716)
  {
    v678 = 4;
    v677 = v716;
  }
  else
  {
    if (!*(_QWORD *)v717)
      return;
    v678 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v677 + 8 * v678))();
}

void sub_19F1FF3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_QWORD *a40)
{
  uint64_t v40;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a40);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v40 - 208));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(unsigned int *a1)
{
  gdc::Registry *v2;
  uint64_t v3;
  char v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::__map_value_compare<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>,std::less<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>,true>,std::allocator<std::__value_type<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>,std::unique_ptr<gdc::Registry>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (gdc::Registry *)*((_QWORD *)a1 + 17);
    *((_QWORD *)a1 + 17) = 0;
    if (v2)
    {
      gdc::Registry::~Registry(v2);
      MEMORY[0x1A1AF4E00]();
    }
    v3 = a1[32];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))off_1E42FA3C0[v3])(&v4, a1 + 8);
    operator delete(a1);
  }
}

void std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  char v3;

  if (a1)
  {
    std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(*a1);
    std::__tree<std::variant<gdc::LayerDataKeyIdPair,md::NonTiledRegistryKey>>::destroy(a1[1]);
    v2 = *((unsigned int *)a1 + 32);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, _QWORD *))off_1E42FA3C0[v2])(&v3, a1 + 4);
    operator delete(a1);
  }
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v10[0] = &off_1E42D00D0;
  v11 = v10;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = -1;
  *(_QWORD *)(v2 + 104) = -1;
  *(_QWORD *)(v2 + 112) = -1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E42B09C8;
  v13 = v12;
  std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone((uint64_t)v10, v12);
  v3 = (uint64_t)v13;
  if (!v13)
    goto LABEL_4;
  if (v13 != v12)
  {
    v3 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_4:
    v15 = (_QWORD *)v3;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v14);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v14, (_QWORD *)(v2 + 64));
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  *a1 = v2;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19F1FF988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(v17);
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  MEMORY[0x1A1AF4E00](v17, 0x10A1C4026EC0EDELL);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v10[0] = &off_1E42D00D0;
  v11 = v10;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = -1;
  *(_QWORD *)(v2 + 104) = -1;
  *(_QWORD *)(v2 + 112) = -1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E42B0998;
  v13 = v12;
  std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone((uint64_t)v10, v12);
  v3 = (uint64_t)v13;
  if (!v13)
    goto LABEL_4;
  if (v13 != v12)
  {
    v3 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_4:
    v15 = (_QWORD *)v3;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v14);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v14, (_QWORD *)(v2 + 64));
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  *a1 = v2;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19F1FFBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  gdc::RegistrySignalCollector<md::components::MeshInstance>::~RegistrySignalCollector(v17);
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  MEMORY[0x1A1AF4E00](v17, 0x10A1C4026EC0EDELL);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v10[0] = &off_1E42D00D0;
  v11 = v10;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = -1;
  *(_QWORD *)(v2 + 104) = -1;
  *(_QWORD *)(v2 + 112) = -1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E42B08F8;
  v13 = v12;
  std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone((uint64_t)v10, v12);
  v3 = (uint64_t)v13;
  if (!v13)
    goto LABEL_4;
  if (v13 != v12)
  {
    v3 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_4:
    v15 = (_QWORD *)v3;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v14);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v14, (_QWORD *)(v2 + 64));
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  *a1 = v2;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19F1FFDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(v17);
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  MEMORY[0x1A1AF4E00](v17, 0x10A1C4026EC0EDELL);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::operator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v10[0] = &off_1E42D00D0;
  v11 = v10;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = -1;
  *(_QWORD *)(v2 + 104) = -1;
  *(_QWORD *)(v2 + 112) = -1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E42B08C8;
  v13 = v12;
  std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone((uint64_t)v10, v12);
  v3 = (uint64_t)v13;
  if (!v13)
    goto LABEL_4;
  if (v13 != v12)
  {
    v3 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_4:
    v15 = (_QWORD *)v3;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v14);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v14, (_QWORD *)(v2 + 64));
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  *a1 = v2;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_19F200024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  gdc::RegistrySignalCollector<md::components::Visibility>::~RegistrySignalCollector(v17);
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  MEMORY[0x1A1AF4E00](v17, 0x10A1C4026EC0EDELL);
  _Unwind_Resume(a1);
}

void gdc::EnteringCollector<md::components::Material>::observe(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1[7] != a2)
    (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  a1[7] = a2;
  v4 = gdc::Registry::storage<md::components::Material>(a2);
  v6 = (uint64_t *)(v4 + 152);
  v5 = *(_QWORD *)(v4 + 152);
  v29 = &off_1E427D230;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v4 + 152) = v5 + 1;
  v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 160), v5 + 1, (_QWORD *)(v4 + 152));
  v8 = (uint64_t)v31;
  if (!v31)
    goto LABEL_6;
  if (v31 != &v29)
  {
    v8 = (*v31)[2]();
LABEL_6:
    v33 = (_QWORD *)v8;
    goto LABEL_8;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v7 + 3);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  v11 = *v6;
  v12 = v31;
  if (v31 == &v29)
  {
    v13 = 4;
    v12 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_18:
  if (v11 != -1)
  {
    if ((v14 & 1) == 0
    {
      v27 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v27;
    }
    a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId
     + 12] = v11;
  }
  v15 = gdc::Registry::storage<md::components::Material>(a1[7]);
  v17 = (uint64_t *)(v15 + 200);
  v16 = *(_QWORD *)(v15 + 200);
  v29 = &off_1E427D1E8;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v15 + 200) = v16 + 1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v15 + 208), v16 + 1, (_QWORD *)(v15 + 200));
  v19 = (uint64_t)v31;
  if (!v31)
    goto LABEL_24;
  if (v31 != &v29)
  {
    v19 = (*v31)[2]();
LABEL_24:
    v33 = (_QWORD *)v19;
    goto LABEL_26;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_26:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v18 + 3);
  v20 = v33;
  if (v33 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  v22 = *v17;
  v23 = v31;
  if (v31 == &v29)
  {
    v24 = 4;
    v23 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_36:
  if (v22 != -1)
  {
    v25 = a1 + 14;
    if ((v26 & 1) == 0)
    {
      {
        v28 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v28;
      }
    }
    v25[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = v22;
  }
}

void sub_19F2003C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,geo::linear_map<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::allocator<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>,std::vector<std::pair<std::pair<unsigned long,unsigned int>,std::unique_ptr<gdc::EntityCollector>>>>>>>::__erase_unique<gdc::Registry *>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v5;
      if (v5 >= *(_QWORD *)&v2)
        v7 = v5 % *(_QWORD *)&v2;
    }
    else
    {
      v7 = v5 & (*(_QWORD *)&v2 - 1);
    }
    v8 = *a1;
    v9 = *(uint64_t ***)(*a1 + 8 * v7);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *(_QWORD *)&v2 - 1;
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v5)
            {
              if (v10[2] == a2)
                goto LABEL_22;
            }
            else if ((v12 & v11) != v7)
            {
              return;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              return;
          }
        }
        do
        {
          v13 = v10[1];
          if (v13 == v5)
          {
            if (v10[2] == a2)
            {
LABEL_22:
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(_QWORD *)&v2)
                  v5 %= *(_QWORD *)&v2;
              }
              else
              {
                v5 &= v11;
              }
              v14 = *(uint64_t **)(v8 + 8 * v5);
              do
              {
                v15 = v14;
                v14 = (uint64_t *)*v14;
              }
              while (v14 != v10);
              if (v15 == a1 + 2)
                goto LABEL_39;
              v16 = v15[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v16 >= *(_QWORD *)&v2)
                  v16 %= *(_QWORD *)&v2;
              }
              else
              {
                v16 &= v11;
              }
              if (v16 != v5)
              {
LABEL_39:
                if (!*v10)
                  goto LABEL_40;
                v17 = *(_QWORD *)(*v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v17 >= *(_QWORD *)&v2)
                    v17 %= *(_QWORD *)&v2;
                }
                else
                {
                  v17 &= v11;
                }
                if (v17 != v5)
LABEL_40:
                  *(_QWORD *)(v8 + 8 * v5) = 0;
              }
              v18 = *v10;
              if (*v10)
              {
                v19 = *(_QWORD *)(v18 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v19 >= *(_QWORD *)&v2)
                    v19 %= *(_QWORD *)&v2;
                }
                else
                {
                  v19 &= v11;
                }
                if (v19 != v5)
                {
                  *(_QWORD *)(*a1 + 8 * v19) = v15;
                  v18 = *v10;
                }
              }
              *v15 = v18;
              *v10 = 0;
              --a1[3];
              v20 = v10[3];
              if (v20)
              {
                v21 = v10[4];
                v22 = (void *)v10[3];
                if (v21 != v20)
                {
                  do
                  {
                    v23 = *(_QWORD *)(v21 - 8);
                    *(_QWORD *)(v21 - 8) = 0;
                    if (v23)
                      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
                    v21 -= 24;
                  }
                  while (v21 != v20);
                  v22 = (void *)v10[3];
                }
                v10[4] = v20;
                operator delete(v22);
              }
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v2)
              v13 %= *(_QWORD *)&v2;
            if (v13 != v7)
              return;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

uint64_t gdc::Registry::storage<md::components::DynamicMeshInstance>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE6F642DE3173ADE3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE6F642DE3173ADE3;
      if (*(_QWORD *)&v3 <= 0xE6F642DE3173ADE3)
        v5 = 0xE6F642DE3173ADE3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE6F642DE3173ADE3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE6F642DE3173ADE3)
            {
              if (v7[2] == 0xE6F642DE3173ADE3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE6F642DE3173ADE3)
          {
            if (v7[2] == 0xE6F642DE3173ADE3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::DynamicMeshInstance]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B31C8;
  *(_QWORD *)(v11 + 8) = 0xE6F642DE3173ADE3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE6F642DE3173ADE3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE6F642DE3173ADE3;
  v15[1] = "md::components::DynamicMeshInstance]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE6F642DE3173ADE3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F200898(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  _BYTE *v27;
  unint64_t v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;

  v4 = a1[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (!v6)
  {
LABEL_5:
    while (a2)
    {
      v7 = operator new(0x30uLL);
      *v7 = 0;
      v7[1] = 0;
      v8 = *((unsigned __int16 *)a2 + 8);
      v7[3] = 0;
      *((_WORD *)v7 + 8) = v8;
      v7[4] = 0;
      v7[5] = 0;
      v10 = (_BYTE *)*((_QWORD *)a2 + 3);
      v9 = (_BYTE *)*((_QWORD *)a2 + 4);
      v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0)
          abort();
        v12 = (char *)operator new(v9 - v10);
        v7[3] = v12;
        v7[4] = v12;
        v13 = &v12[8 * (v11 >> 3)];
        v7[5] = v13;
        memcpy(v12, v10, v11);
        v7[4] = v13;
      }
      v7[1] = v8;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v7);
      a2 = *(char **)a2;
    }
    return;
  }
  while (a2)
  {
    *((_WORD *)v6 + 8) = *((_WORD *)a2 + 8);
    if (v6 == a2)
      goto LABEL_13;
    v15 = (char *)*((_QWORD *)v6 + 3);
    v16 = (char *)*((_QWORD *)a2 + 3);
    v17 = (_BYTE *)*((_QWORD *)a2 + 4);
    v18 = v17 - v16;
    v19 = (v17 - v16) >> 3;
    v20 = *((_QWORD *)v6 + 5);
    if (v19 > (v20 - (uint64_t)v15) >> 3)
    {
      if (v15)
      {
        *((_QWORD *)v6 + 4) = v15;
        operator delete(v15);
        v20 = 0;
        *((_QWORD *)v6 + 3) = 0;
        *((_QWORD *)v6 + 4) = 0;
        *((_QWORD *)v6 + 5) = 0;
      }
      if ((v18 & 0x8000000000000000) != 0)
        goto LABEL_38;
      v21 = v20 >> 2;
      if (v20 >> 2 <= v19)
        v21 = (v17 - v16) >> 3;
      v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v22)
        v23 = v21;
      if (v23 >> 61)
LABEL_38:
        abort();
      v24 = 8 * v23;
      v25 = (char *)operator new(8 * v23);
      v15 = v25;
      *((_QWORD *)v6 + 4) = v25;
      v26 = (void **)(v6 + 32);
      *((_QWORD *)v6 + 3) = v25;
      *((_QWORD *)v6 + 5) = &v25[v24];
      if (v17 != v16)
        memcpy(v25, v16, v17 - v16);
      goto LABEL_12;
    }
    v26 = (void **)(v6 + 32);
    v27 = (_BYTE *)*((_QWORD *)v6 + 4);
    v28 = (v27 - v15) >> 3;
    if (v28 >= v19)
    {
      if (v17 == v16)
        goto LABEL_12;
      v30 = (void *)*((_QWORD *)v6 + 3);
      v29 = (char *)*((_QWORD *)a2 + 3);
    }
    else
    {
      if (v27 != v15)
      {
        memmove(*((void **)v6 + 3), *((const void **)a2 + 3), v27 - v15);
        v15 = (char *)*v26;
      }
      v29 = &v16[8 * v28];
      v18 = v17 - v29;
      if (v17 == v29)
        goto LABEL_12;
      v30 = v15;
    }
    memmove(v30, v29, v18);
LABEL_12:
    *v26 = &v15[v18];
LABEL_13:
    v14 = *(char **)v6;
    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
    a2 = *(char **)a2;
    v6 = v14;
    if (!v14)
      goto LABEL_5;
  }
  do
  {
    v31 = *(char **)v6;
    v32 = (void *)*((_QWORD *)v6 + 3);
    if (v32)
    {
      *((_QWORD *)v6 + 4) = v32;
      operator delete(v32);
    }
    operator delete(v6);
    v6 = v31;
  }
  while (v31);
}

void sub_19F200B0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *md::AssetLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t *v27;
  unsigned __int16 *v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  size_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  __int128 *v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  _QWORD *result;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char v88;
  void *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE v102[32];
  void *v103;
  unint64_t *v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE v107[32];
  void *v108;
  uint64_t v109;
  void *__p;
  void **v111;
  uint64_t v112;
  float v113;
  _QWORD *v114;
  char v115;
  uint64_t v116;
  _QWORD v117[3];
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  _QWORD v121[3];
  _QWORD *v122;
  _QWORD v123[3];
  _QWORD *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v119[0] = &off_1E42C8558;
  v119[1] = a2;
  v120 = v119;
  v117[0] = &off_1E42C85A0;
  v117[1] = a2;
  v118 = v117;
  v122 = v121;
  v121[0] = &off_1E42C85A0;
  v121[1] = a2;
  _ZNSt3__110__function6__funcIZN2md10AssetLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_25IdentifiedResourceContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_12AssetContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v119);
  v5 = v118;
  if (v118 == v117)
  {
    v6 = 4;
    v5 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v120;
  if (v120 == v119)
  {
    v8 = 4;
    v7 = v119;
  }
  else
  {
    if (!v120)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v89 = *(void **)a3;
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 264);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = objc_msgSend(v10, "daVinciTintLODLevels");

  v103 = v107;
  v104 = (unint64_t *)v107;
  v105 = v107;
  v106 = 4;
  v98 = v102;
  v99 = v102;
  v100 = v102;
  v101 = 4;
  v93 = &v97;
  v94 = &v97;
  v95 = &v97;
  v96 = 4;
  v11 = *(_QWORD *)(a1 + 120);
  v12 = *(uint64_t **)(v11 + 384);
  v86 = a1;
  v87 = *(uint64_t **)(v11 + 392);
  if (v12 != v87)
  {
    while (1)
    {
      v14 = (_QWORD *)*v12;
      v15 = *(int8x8_t *)(*v12 + 8);
      if (!*(_QWORD *)&v15)
        goto LABEL_38;
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = 0x64A448A5CD5D38DBLL;
        if (*(_QWORD *)&v15 <= 0x64A448A5CD5D38DBuLL)
          v17 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v15;
      }
      else
      {
        v17 = (*(_QWORD *)&v15 - 1) & 0x64A448A5CD5D38DBLL;
      }
      v18 = *(_QWORD **)(*v14 + 8 * v17);
      if (!v18)
        goto LABEL_38;
      v19 = (_QWORD *)*v18;
      if (!v19)
        goto LABEL_38;
      if (v16.u32[0] < 2uLL)
      {
        v20 = *(_QWORD *)&v15 - 1;
        while (1)
        {
          v22 = v19[1];
          if (v22 == 0x64A448A5CD5D38DBLL)
          {
            if (v19[2] == 0x64A448A5CD5D38DBLL)
              goto LABEL_36;
          }
          else if ((v22 & v20) != v17)
          {
            goto LABEL_38;
          }
          v19 = (_QWORD *)*v19;
          if (!v19)
            goto LABEL_38;
        }
      }
      while (1)
      {
        v21 = v19[1];
        if (v21 == 0x64A448A5CD5D38DBLL)
          break;
        if (v21 >= *(_QWORD *)&v15)
          v21 %= *(_QWORD *)&v15;
        if (v21 != v17)
          goto LABEL_38;
LABEL_25:
        v19 = (_QWORD *)*v19;
        if (!v19)
          goto LABEL_38;
      }
      if (v19[2] != 0x64A448A5CD5D38DBLL)
        goto LABEL_25;
LABEL_36:
      v23 = v19[5];
      if (*(_QWORD *)(v23 + 8) == 0x64A448A5CD5D38DBLL)
      {
        v24 = *(_QWORD *)(v23 + 32);
        goto LABEL_39;
      }
LABEL_38:
      v24 = 0;
LABEL_39:
      v25 = (_QWORD *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(*v12);
      v108 = v89;
      v109 = (uint64_t)&v98;
      __p = &v93;
      v111 = &v103;
      v112 = v24;
      v113 = (float)(v9 * v9) * 4.0;
      v114 = v14;
      v115 = v88;
      v26 = (unint64_t *)v25[7];
      v27 = (unint64_t *)v25[8];
      if (v26 != v27)
      {
        v28 = (unsigned __int16 *)v25[10];
        do
        {
          md::AssetLogic::buildAssetMeshInstances(md::IdentifiedResourceContext const&)::$_0::operator()((int8x8_t **)&v108, *v26, v28);
          v28 += 48;
          ++v26;
        }
        while (v26 != v27);
      }
      v90 = v12;
      v29 = v99;
      v92 = (uint64_t)v14;
      if (v99 != v98)
        break;
LABEL_110:
      v75 = (unint64_t *)v103;
      v76 = v104;
      if (v103 == v104)
      {
        v13 = v90;
      }
      else
      {
        v13 = v90;
        do
        {
          v77 = *v75++;
          gdc::Registry::destroy(v92, v77);
        }
        while (v75 != v76);
        v75 = (unint64_t *)v103;
        v29 = v98;
      }
      v104 = v75;
      v99 = v29;
      v94 = (uint64_t *)v93;
      v12 = v13 + 1;
      if (v12 == v87)
        goto LABEL_114;
    }
    v30 = 0;
    v91 = v14 + 15;
    v29 = v98;
    while (1)
    {
      v31 = *(_QWORD *)&v29[8 * v30];
      v32 = *((_BYTE *)v93 + v30);
      v123[0] = 0x8AD11DEF4A920028;
      v33 = *(int8x8_t *)(v92 + 128);
      if (v33)
      {
        v34 = (uint8x8_t)vcnt_s8(v33);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          v35 = 0x8AD11DEF4A920028;
          if (*(_QWORD *)&v33 <= 0x8AD11DEF4A920028)
            v35 = 0x8AD11DEF4A920028 % *(_QWORD *)&v33;
        }
        else
        {
          v35 = (*(_QWORD *)&v33 - 1) & 0x8AD11DEF4A920028;
        }
        v36 = *(_QWORD **)(*v91 + 8 * v35);
        if (v36)
        {
          v37 = (_QWORD *)*v36;
          if (v37)
          {
            if (v34.u32[0] < 2uLL)
            {
              v38 = *(_QWORD *)&v33 - 1;
              while (1)
              {
                v40 = v37[1];
                if (v40 == 0x8AD11DEF4A920028)
                {
                  if (v37[2] == 0x8AD11DEF4A920028)
                    goto LABEL_90;
                }
                else if ((v40 & v38) != v35)
                {
                  goto LABEL_65;
                }
                v37 = (_QWORD *)*v37;
                if (!v37)
                  goto LABEL_65;
              }
            }
            do
            {
              v39 = v37[1];
              if (v39 == 0x8AD11DEF4A920028)
              {
                if (v37[2] == 0x8AD11DEF4A920028)
                {
LABEL_90:
                  v41 = v37[3];
                  goto LABEL_68;
                }
              }
              else
              {
                if (v39 >= *(_QWORD *)&v33)
                  v39 %= *(_QWORD *)&v33;
                if (v39 != v35)
                  break;
              }
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_65:
      v41 = operator new();
      *(_QWORD *)(v41 + 16) = "md::components::SubtileZone]";
      *(_QWORD *)(v41 + 24) = 27;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_OWORD *)(v41 + 128) = 0u;
      *(_DWORD *)(v41 + 144) = 1065353216;
      *(_OWORD *)(v41 + 152) = 0u;
      *(_OWORD *)(v41 + 168) = 0u;
      *(_QWORD *)(v41 + 184) = 0;
      *(_DWORD *)(v41 + 192) = 1065353216;
      *(_OWORD *)(v41 + 200) = 0u;
      *(_OWORD *)(v41 + 216) = 0u;
      *(_QWORD *)(v41 + 232) = 0;
      *(_DWORD *)(v41 + 240) = 1065353216;
      *(_QWORD *)v41 = &off_1E42B2EF8;
      *(_QWORD *)(v41 + 8) = 0x8AD11DEF4A920028;
      *(_QWORD *)(v41 + 248) = v92;
      v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v91, 0x8AD11DEF4A920028, v123);
      v43 = v42[3];
      v42[3] = v41;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v108 = (void *)0x8AD11DEF4A920028;
      v109 = (uint64_t)"md::components::SubtileZone]";
      __p = (void *)27;
      gdc::Registry::_registerStorageDataSignals(v92, 0x8AD11DEF4A920028, (uint64_t)&v108, (uint64_t *)(v41 + 104));
LABEL_68:
      v116 = v31;
      v44 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v41 + 32), (uint64_t)&v116);
      if ((v45 & 1) != 0)
        break;
      v46 = (_BYTE *)(*(_QWORD *)(v41 + 80) + (((uint64_t)v44 - *(_QWORD *)(v41 + 56)) >> 3));
      *v46 = v32;
      v47 = *(_QWORD *)(v41 + 248);
      if (v46 != *(_BYTE **)(v41 + 88))
      {
        v48 = *(_QWORD **)(v41 + 128);
        if (v48)
        {
          while (1)
          {
            v108 = &v116;
            v109 = 1;
            v123[0] = v47;
            v49 = v48[6];
            if (!v49)
              goto LABEL_138;
            (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v49 + 48))(v49, v123, &v108);
            v48 = (_QWORD *)*v48;
            if (!v48)
              goto LABEL_44;
          }
        }
        goto LABEL_44;
      }
LABEL_106:
      v73 = *(_QWORD **)(v41 + 176);
      if (v73)
      {
        while (1)
        {
          v108 = &v116;
          v109 = 1;
          v123[0] = v47;
          v74 = v73[6];
          if (!v74)
            break;
          (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v74 + 48))(v74, v123, &v108);
          v73 = (_QWORD *)*v73;
          if (!v73)
            goto LABEL_44;
        }
LABEL_138:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
LABEL_44:
      ++v30;
      v29 = v98;
      if (v30 >= (v99 - (_BYTE *)v98) >> 3)
        goto LABEL_110;
    }
    v51 = *(_BYTE **)(v41 + 88);
    v50 = *(_QWORD *)(v41 + 96);
    if ((unint64_t)v51 < v50)
    {
      *v51 = v32;
      v52 = (uint64_t)(v51 + 1);
LABEL_105:
      *(_QWORD *)(v41 + 88) = v52;
      v47 = *(_QWORD *)(v41 + 248);
      goto LABEL_106;
    }
    v53 = *(_BYTE **)(v41 + 80);
    v54 = v51 - v53;
    v55 = v51 - v53 + 1;
    if (v55 < 0)
      abort();
    v56 = v50 - (_QWORD)v53;
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
      v57 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      v58 = v57;
      v59 = (char *)operator new(v57);
      v57 = v58;
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[v54];
    v59[v54] = v32;
    v52 = (uint64_t)&v59[v54 + 1];
    if (v51 == v53)
    {
LABEL_103:
      *(_QWORD *)(v41 + 80) = v60;
      *(_QWORD *)(v41 + 88) = v52;
      *(_QWORD *)(v41 + 96) = &v59[v57];
      if (v51)
        operator delete(v51);
      goto LABEL_105;
    }
    if (v54 < 8 || (unint64_t)(v53 - v59) < 0x20)
      goto LABEL_100;
    if (v54 >= 0x20)
    {
      v61 = v54 & 0xFFFFFFFFFFFFFFE0;
      v62 = (__int128 *)(v51 - 16);
      v63 = &v59[v54 - 16];
      v64 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = *v62;
        *((_OWORD *)v63 - 1) = *(v62 - 1);
        *(_OWORD *)v63 = v65;
        v62 -= 2;
        v63 -= 32;
        v64 -= 32;
      }
      while (v64);
      if (v54 == v61)
        goto LABEL_102;
      if ((v54 & 0x18) == 0)
      {
        v60 -= v61;
        v51 -= v61;
        goto LABEL_100;
      }
    }
    else
    {
      v61 = 0;
    }
    v66 = v61 - (v54 & 0xFFFFFFFFFFFFFFF8);
    v67 = &v51[-v61];
    v68 = &v59[&v51[-v61] - v53 - 8];
    v69 = (uint64_t *)(v67 - 8);
    do
    {
      v70 = *v69--;
      *(_QWORD *)v68 = v70;
      v68 -= 8;
      v66 += 8;
    }
    while (v66);
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_102;
    v60 -= v54 & 0xFFFFFFFFFFFFFFF8;
    v51 -= v54 & 0xFFFFFFFFFFFFFFF8;
LABEL_100:
    v71 = v60 - 1;
    do
    {
      v72 = *--v51;
      *v71-- = v72;
    }
    while (v51 != v53);
LABEL_102:
    v51 = *(_BYTE **)(v41 + 80);
    v60 = v59;
    goto LABEL_103;
  }
LABEL_114:
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v108, (uint64_t)v89 + 120);
  LOBYTE(v116) = v111 != 0;
  v78 = *(_QWORD *)(v86 + 120);
  v123[0] = &off_1E42C8510;
  v123[1] = &v108;
  v123[2] = &v116;
  v124 = v123;
  md::RegistryManager::each(v78, (uint64_t)v123);
  v79 = v124;
  if (v124 == v123)
  {
    v80 = 4;
    v79 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_119;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_119:
  v81 = __p;
  if (__p)
  {
    do
    {
      v82 = (_QWORD *)*v81;
      operator delete(v81);
      v81 = v82;
    }
    while (v82);
  }
  v83 = v108;
  v108 = 0;
  if (v83)
    operator delete(v83);
  if (v93 != v95)
    free(v93);
  if (v98 != v100)
    free(v98);
  if (v103 != v105)
    free(v103);
  if (!v122)
    goto LABEL_138;
  (*(void (**)(_QWORD *))(*v122 + 48))(v122);
  result = v122;
  if (v122 == v121)
  {
    v85 = 4;
    result = v121;
  }
  else
  {
    if (!v122)
      return result;
    v85 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v85))();
}

void sub_19F201440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;

  v41 = *(_QWORD **)(v39 - 120);
  if (v41 == v38)
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 144);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a38);
  if (a17 != a19)
    free(a17);
  if (a22 != a24)
    free(a22);
  if (a30 != a32)
    free(a30);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v39 - 176));
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::ReferencedAssetInstance>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD7CF92E7713C257ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD7CF92E7713C257ALL;
      if (*(_QWORD *)&v3 <= 0xD7CF92E7713C257ALL)
        v5 = 0xD7CF92E7713C257ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD7CF92E7713C257ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD7CF92E7713C257ALL)
            {
              if (v7[2] == 0xD7CF92E7713C257ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD7CF92E7713C257ALL)
          {
            if (v7[2] == 0xD7CF92E7713C257ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::ReferencedAssetInstance]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3348;
  *(_QWORD *)(v11 + 8) = 0xD7CF92E7713C257ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD7CF92E7713C257ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD7CF92E7713C257ALL;
  v15[1] = "md::components::ReferencedAssetInstance]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD7CF92E7713C257ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F2017E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::RegistryManager::each(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *j;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)result;
  v4 = *(uint64_t **)(result + 384);
  for (i = *(uint64_t **)(result + 392); v4 != i; ++v4)
  {
    v13 = *v4;
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      goto LABEL_11;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13);
  }
  v7 = (uint64_t *)v3[51];
  for (j = (uint64_t *)v3[52]; v7 != j; ++v7)
  {
    v13 = *v7;
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      goto LABEL_11;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v13);
  }
  v11 = (uint64_t *)v3[60];
  v10 = (uint64_t *)v3[61];
  if (v11 != v10)
  {
    while (1)
    {
      v13 = *v11;
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v13);
      if (++v11 == v10)
        return result;
    }
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    return gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>();
  }
  return result;
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<md::AssetLogic>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD0D1B23DCFF48A8BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD0D1B23DCFF48A8BLL;
      if (*(_QWORD *)&v3 <= 0xD0D1B23DCFF48A8BLL)
        v5 = 0xD0D1B23DCFF48A8BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD0D1B23DCFF48A8BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD0D1B23DCFF48A8BLL)
            {
              if (v7[2] == 0xD0D1B23DCFF48A8BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD0D1B23DCFF48A8BLL)
          {
            if (v7[2] == 0xD0D1B23DCFF48A8BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::QueuedForDestruction<md::AssetLogic>]";
  *(_QWORD *)(v11 + 24) = 52;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3258;
  *(_QWORD *)(v11 + 8) = 0xD0D1B23DCFF48A8BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD0D1B23DCFF48A8BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD0D1B23DCFF48A8BLL;
  v15[1] = "md::components::QueuedForDestruction<md::AssetLogic>]";
  v15[2] = 52;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD0D1B23DCFF48A8BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F201AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x671E8E33A9A34C17;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x671E8E33A9A34C17;
      if (*(_QWORD *)&v3 <= 0x671E8E33A9A34C17uLL)
        v5 = 0x671E8E33A9A34C17uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x671E8E33A9A34C17;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x671E8E33A9A34C17)
            {
              if (v7[2] == 0x671E8E33A9A34C17)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x671E8E33A9A34C17)
          {
            if (v7[2] == 0x671E8E33A9A34C17)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::QueuedForMaterialDeletion]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3408;
  *(_QWORD *)(v11 + 8) = 0x671E8E33A9A34C17;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x671E8E33A9A34C17uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x671E8E33A9A34C17;
  v15[1] = "md::components::QueuedForMaterialDeletion]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0x671E8E33A9A34C17, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F201D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x257EF5A82043772ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x257EF5A82043772ELL;
      if (*(_QWORD *)&v3 <= 0x257EF5A82043772EuLL)
        v5 = 0x257EF5A82043772EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x257EF5A82043772ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x257EF5A82043772ELL)
            {
              if (v7[2] == 0x257EF5A82043772ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x257EF5A82043772ELL)
          {
            if (v7[2] == 0x257EF5A82043772ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::QueuedForDestruction<>]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3228;
  *(_QWORD *)(v11 + 8) = 0x257EF5A82043772ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x257EF5A82043772EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x257EF5A82043772ELL;
  v15[1] = "md::components::QueuedForDestruction<>]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x257EF5A82043772ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F201F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t geo::LRUPolicy<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash>::get(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::find<grl::codec::IconConfigPack::IconLocationIndex>(a2, a3);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = v4[3];
    if (v5 == v6)
      return *(_QWORD *)(a1 + 8);
    v7 = (uint64_t *)v6[1];
    if (v7 == v5)
    {
      return *(_QWORD *)(a1 + 8);
    }
    else
    {
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)v6[1] = v8;
      v9 = *v5;
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *v5 = (uint64_t)v6;
      v6[1] = (uint64_t)v5;
      return *(_QWORD *)(a1 + 8);
    }
  }
  return a1;
}

uint64_t **std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::find<grl::codec::IconConfigPack::IconLocationIndex>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **result;
  unint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((unsigned __int16 *)a2 + 2);
  v7 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
    if (v7 >= *(_QWORD *)&v2)
      v9 = v7 % *(_QWORD *)&v2;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v2 - 1);
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (result = *v10; result; result = (uint64_t **)*result)
  {
    v12 = (unint64_t)result[1];
    if (v12 == v7)
    {
      if (*((unsigned __int8 *)result + 16) == (_DWORD)v3
        && __PAIR64__(*((unsigned __int16 *)result + 10), *((unsigned __int16 *)result + 9)) == __PAIR64__(v6, v4))
      {
        return result;
      }
    }
    else
    {
      if (v8.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
      }
      else
      {
        v12 &= *(_QWORD *)&v2 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

_QWORD *md::LayerDataLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  os_signpost_id_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint8_t v14[8];
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t (***v19)();
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = &off_1E42CBD08;
  v18 = a2;
  v19 = &v17;
  v20[0] = &off_1E42CBD50;
  v15[0] = &off_1E42CBD50;
  v15[1] = a2;
  v16 = v15;
  v21 = v20;
  v20[1] = a2;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v6 = *(_QWORD *)(v18 + 80);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled((os_log_t)GEOGetVectorKitPerformanceLog_log))
    {
      *(_WORD *)v14 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LayerDataLogic", (const char *)&unk_1A0189141, v14, 2u);
    }
  }
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v19;
  if (v19 == &v17)
  {
    v11 = 4;
    v10 = &v17;
  }
  else
  {
    if (!v19)
      goto LABEL_16;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_16:
  *a4 = *(_QWORD *)(a1 + 120);
  if (!v21)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(_QWORD *))(*v21 + 48))(v21);
  result = v21;
  if (v21 == v20)
  {
    v13 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void md::VenueLogic::reset(md::VenueLogic *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t k;
  _QWORD *v13;
  uint64_t v14;
  uint64_t m;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  void *v21;

  if (*((_QWORD *)this + 29))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 28);
    while (v2)
    {
      v16 = v2;
      v2 = (_QWORD *)*v2;
      v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *((_QWORD *)this + 28) = 0;
    v3 = *((_QWORD *)this + 27);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 26) + 8 * i) = 0;
    }
    *((_QWORD *)this + 29) = 0;
  }
  if (*((_QWORD *)this + 34))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 33);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *((_QWORD *)this + 33) = 0;
    v7 = *((_QWORD *)this + 32);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 31) + 8 * j) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  if (*((_QWORD *)this + 39))
  {
    v9 = (_QWORD *)*((_QWORD *)this + 38);
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    *((_QWORD *)this + 38) = 0;
    v11 = *((_QWORD *)this + 37);
    if (v11)
    {
      for (k = 0; k != v11; ++k)
        *(_QWORD *)(*((_QWORD *)this + 36) + 8 * k) = 0;
    }
    *((_QWORD *)this + 39) = 0;
  }
  *((_QWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  if (*((_QWORD *)this + 78))
  {
    v13 = (_QWORD *)*((_QWORD *)this + 77);
    if (v13)
    {
      do
      {
        v20 = (_QWORD *)*v13;
        v21 = (void *)v13[3];
        if (v21)
        {
          v13[4] = v21;
          operator delete(v21);
        }
        operator delete(v13);
        v13 = v20;
      }
      while (v20);
    }
    *((_QWORD *)this + 77) = 0;
    v14 = *((_QWORD *)this + 76);
    if (v14)
    {
      for (m = 0; m != v14; ++m)
        *(_QWORD *)(*((_QWORD *)this + 75) + 8 * m) = 0;
    }
    *((_QWORD *)this + 78) = 0;
  }
}

void md::ElevatedStrokeLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v4;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  __int16 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  id *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v64;
  char *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  gss::Allocator *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  gss::Allocator *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  int64_t v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v115;
  float v116;
  _BOOL8 v117;
  unint64_t v118;
  unint64_t v119;
  size_t prime;
  void *v121;
  void *v122;
  uint64_t v123;
  _QWORD **v124;
  size_t v125;
  size_t v126;
  size_t v127;
  _QWORD *j;
  size_t v129;
  uint64_t v130;
  unint64_t v131;
  uint8x8_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  size_t v136;
  _QWORD *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char **v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  void *v156;
  void *v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  uint8x8_t v163;
  _QWORD **v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  float v168;
  float v169;
  _BOOL8 v170;
  unint64_t v171;
  unint64_t v172;
  size_t v173;
  void *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  size_t v179;
  size_t v180;
  size_t v181;
  _QWORD *v182;
  size_t v183;
  uint64_t v184;
  unint64_t v185;
  uint8x8_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  size_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unsigned int v203;
  _QWORD *v204;
  __int128 v205;
  void *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  __int128 *v217;
  uint64_t v218;
  __int128 v219;
  char *CharacteristicPointsForSection;
  unint64_t v221;
  char *v222;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  int v236;
  char *v237;
  int64x2_t v238;
  char **v239;
  char *v240;
  void **v241;
  __int128 v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  __int128 v250;
  char *v251;
  char *v252;
  char *v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  char *v257;
  void *v258;
  void *v259;
  unint64_t v260;
  uint64_t v261;
  int64x2_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  void *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  id v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void **v321;
  void *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  void **v327;
  void *v328;
  __int128 v329;
  char *v330;
  unint64_t *v331;
  unint64_t v332;
  char *v333;
  char *v334;
  void *v335;
  _QWORD *v336;
  _QWORD *v337;
  void *v338;
  _WORD *v339;
  _WORD *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t RegistryForKey;
  _WORD *v347;
  std::__shared_weak_count *v348;
  _QWORD *v349;
  std::__shared_weak_count *v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void **v357;
  char **v358;
  char **v359;
  _QWORD *v360;
  int64x2_t v361;
  __int128 v362;
  void *v363[2];
  void *v364;
  void *v365;
  _WORD *v366;
  char *v367;
  void *v368[3];
  void *__p[2];
  void *v370;
  __int128 v371;
  __int128 v372;
  void **v373;
  int v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  char *v377;
  std::__shared_weak_count *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  __int128 v387;
  float v388;
  int v389[5];

  memset(v368, 0, sizeof(v368));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v368);
  v365 = 0;
  v366 = 0;
  v367 = 0;
  v7 = (unsigned __int16 *)*a3;
  v8 = (unsigned __int16 *)a3[1];
  v352 = a1;
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*(unsigned __int16 *)(a1 + 584) != *v7)
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_46;
    }
  }
  if (v7 != v8)
  {
    v9 = (_QWORD *)*((_QWORD *)v7 + 3);
    if (v9)
    {
      while (1)
      {
        v11 = v9[14];
        v10 = v9[15];
        *(_QWORD *)&v371 = v11;
        *((_QWORD *)&v371 + 1) = v10;
        if (v10)
        {
          v12 = (unint64_t *)(v10 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = *(_WORD *)(v352 + 584);
        v15 = v366;
        if (v366 < (_WORD *)v367)
        {
          *v366 = v14;
          v15[1] = v11;
          v15[2] = v10;
          if (v10)
          {
            v16 = (unint64_t *)(v10 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = v15 + 3;
          goto LABEL_39;
        }
        v4 = (unint64_t)v365;
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v366 - (_BYTE *)v365) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v367 - (_BYTE *)v365) >> 3) > v20)
          v20 = 0x5555555555555556 * ((v367 - (_BYTE *)v365) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v367 - (_BYTE *)v365) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        if (v21 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_604;
        v22 = (char *)operator new(24 * v21);
        v23 = &v22[8 * (((char *)v366 - (_BYTE *)v365) >> 3)];
        *(_WORD *)v23 = v14;
        *((_QWORD *)v23 + 1) = v11;
        *((_QWORD *)v23 + 2) = v10;
        if (v10)
        {
          v24 = (unint64_t *)(v10 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v18 = v23 + 24;
        if (v15 != (_QWORD *)v4)
          break;
        v365 = &v22[24 * v19];
        v367 = &v22[24 * v21];
        if (v15)
          goto LABEL_38;
LABEL_39:
        v366 = v18;
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
        if (*((_QWORD *)&v371 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v9 = (_QWORD *)*v9;
        if (!v9)
          goto LABEL_46;
      }
      v26 = v15;
      do
      {
        v27 = *((_WORD *)v26 - 12);
        v26 -= 3;
        *((_WORD *)v23 - 12) = v27;
        v23 -= 24;
        *(_OWORD *)(v23 + 8) = *(_OWORD *)(v26 + 1);
        v26[1] = 0;
        v26[2] = 0;
      }
      while (v26 != (_QWORD *)v4);
      v365 = v23;
      v366 = v18;
      v367 = &v22[24 * v21];
      do
      {
        v28 = (std::__shared_weak_count *)*(v15 - 1);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v15 -= 3;
      }
      while (v15 != (_QWORD *)v4);
      v15 = (_QWORD *)v4;
      if (!v4)
        goto LABEL_39;
LABEL_38:
      operator delete(v15);
      goto LABEL_39;
    }
  }
LABEL_46:
  v34 = (id *)v352;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v352 + 160))(v363, v352);
  if (!*(_QWORD *)(v352 + 24))
  {
    v329 = 0uLL;
    goto LABEL_585;
  }
  v35 = *(_QWORD *)(v352 + 792);
  LOBYTE(v371) = 1;
  v374 = 1;
  RegistryForKey = md::RegistryManager::getRegistryForKey(v35, (uint64_t)&v371);
  if (v374 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E42FA3C0[v374])(&v386, &v371);
  __p[0] = 0;
  __p[1] = 0;
  v370 = 0;
  v386 = 0u;
  v387 = 0u;
  v388 = 1.0;
  v36 = v365;
  v347 = v366;
  if (v365 != v366)
  {
    v351 = (_QWORD *)(v352 + 776);
    do
    {
      v38 = v36[1];
      v37 = (std::__shared_weak_count *)v36[2];
      v350 = v37;
      v349 = v36;
      if (v37)
      {
        v39 = (unint64_t *)&v37->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        do
          v41 = __ldxr(v39);
        while (__stxr(v41 + 1, v39));
        v348 = v37;
      }
      else
      {
        v348 = 0;
      }
      v354 = v38;
      v42 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v38 + 144));
      v43 = v350;
      v44 = v350;
      if (!v42)
        goto LABEL_488;
      v355 = 0;
      v353 = v42;
      while (2)
      {
        v45 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(v354 + 144)) + (v355 << 7);
        if (((*((uint64_t (**)(id *, uint64_t, uint64_t))*v34 + 19))(v34, v354, v45) & 1) != 0
          || !*(_DWORD *)(v45 + 100))
        {
          goto LABEL_61;
        }
        md::createFeatureAttributeSet((gss::Allocator *)&v382, (uint64_t *)(v45 + 24));
        v46 = (char *)(v383 - v382);
        v47 = (v383 - v382) >> 3;
        if (v383 != v382)
        {
          v48 = v382;
          do
          {
            v49 = ((v47 << 6) - 0x61C8864680B583EBLL + (v47 >> 2) + *(unsigned int *)v48) ^ v47;
            v47 = (*((unsigned __int16 *)v48 + 2) - 0x61C8864680B583EBLL + (v49 << 6) + (v49 >> 2)) ^ v49;
            v48 += 8;
          }
          while (v48 != v383);
        }
        v360 = (_QWORD *)v45;
        if (*((_QWORD *)&v386 + 1))
        {
          v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v386 + 8));
          v50.i16[0] = vaddlv_u8(v50);
          if (v50.u32[0] > 1uLL)
          {
            v51 = v47;
            if (v47 >= *((_QWORD *)&v386 + 1))
              v51 = v47 % *((_QWORD *)&v386 + 1);
          }
          else
          {
            v51 = (*((_QWORD *)&v386 + 1) - 1) & v47;
          }
          v52 = *(_QWORD **)(v386 + 8 * v51);
          if (v52)
          {
            v53 = (_QWORD *)*v52;
            if (v53)
            {
              if (v50.u32[0] < 2uLL)
              {
                while (1)
                {
                  v59 = v53[1];
                  if (v59 == v47)
                  {
                    v61 = v53[2];
                    v60 = v53[3];
                    if ((char *)(v60 - v61) == v46)
                    {
                      if (v61 == v60)
                        goto LABEL_103;
                      v62 = v382;
                      while (*(_DWORD *)v61 == *(_DWORD *)v62
                           && *(unsigned __int16 *)(v61 + 4) == *((unsigned __int16 *)v62 + 2))
                      {
                        v61 += 8;
                        v62 += 8;
                        if (v61 == v60)
                          goto LABEL_103;
                      }
                    }
                  }
                  else if ((v59 & (*((_QWORD *)&v386 + 1) - 1)) != v51)
                  {
                    goto LABEL_104;
                  }
                  v53 = (_QWORD *)*v53;
                  if (!v53)
                    goto LABEL_104;
                }
              }
              do
              {
                v54 = v53[1];
                if (v54 == v47)
                {
                  v56 = v53[2];
                  v55 = v53[3];
                  if ((char *)(v55 - v56) == v46)
                  {
                    if (v56 == v55)
                    {
LABEL_103:
                      v64 = v53[6];
                      goto LABEL_261;
                    }
                    v57 = v382;
                    while (*(_DWORD *)v56 == *(_DWORD *)v57
                         && *(unsigned __int16 *)(v56 + 4) == *((unsigned __int16 *)v57 + 2))
                    {
                      v56 += 8;
                      v57 += 8;
                      if (v56 == v55)
                        goto LABEL_103;
                    }
                  }
                }
                else
                {
                  if (v54 >= *((_QWORD *)&v386 + 1))
                    v54 %= *((_QWORD *)&v386 + 1);
                  if (v54 != v51)
                    break;
                }
                v53 = (_QWORD *)*v53;
              }
              while (v53);
            }
          }
        }
LABEL_104:
        v65 = (char *)__p[1];
        v64 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
        if (__p[1] < v370)
        {
          md::ElevatedStrokeGroup::ElevatedStrokeGroup((uint64_t)__p[1], (uint64_t)&v382, v351);
          v66 = v65 + 160;
          goto LABEL_159;
        }
        if (v64 + 1 > 0x199999999999999)
          abort();
        v67 = 0x999999999999999ALL * ((int64_t)((uint64_t)v370 - (unint64_t)__p[0]) >> 5);
        if (v67 <= v64 + 1)
          v67 = v64 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((int64_t)((uint64_t)v370 - (unint64_t)__p[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL)
          v68 = 0x199999999999999;
        else
          v68 = v67;
        v373 = &v370;
        if (v68)
        {
          if (v68 > 0x199999999999999)
            goto LABEL_604;
          v69 = (char *)operator new(160 * v68);
        }
        else
        {
          v69 = 0;
        }
        *(_QWORD *)&v371 = v69;
        *((_QWORD *)&v371 + 1) = &v69[160 * v64];
        *(_QWORD *)&v372 = *((_QWORD *)&v371 + 1);
        *((_QWORD *)&v372 + 1) = &v69[160 * v68];
        v70 = (gss::Allocator *)md::ElevatedStrokeGroup::ElevatedStrokeGroup(*((uint64_t *)&v371 + 1), (uint64_t)&v382, v351);
        v4 = *((_QWORD *)&v371 + 1);
        v66 = (void *)(v372 + 160);
        *(_QWORD *)&v372 = v372 + 160;
        v72 = (char *)__p[0];
        v71 = (char *)__p[1];
        if (__p[1] == __p[0])
        {
          __p[0] = *((void **)&v371 + 1);
          __p[1] = v66;
          v370 = (void *)*((_QWORD *)&v372 + 1);
          if (v71)
            goto LABEL_158;
        }
        else
        {
          v73 = (_QWORD *)*((_QWORD *)&v371 + 1);
          do
          {
            *(v73 - 20) = 0;
            v73 -= 20;
            *(_QWORD *)(v4 - 152) = 0;
            *(_QWORD *)(v4 - 144) = 0;
            v70 = (gss::Allocator *)gss::Allocator::instance(v70);
            *(_QWORD *)(v4 - 136) = v70;
            if ((char *)v4 != v71)
            {
              v76 = *((_QWORD *)v71 - 20);
              v75 = (_QWORD *)*((_QWORD *)v71 - 19);
              v77 = ((uint64_t)v75 - v76) >> 3;
              v78 = *(_QWORD *)(v4 - 144);
              v79 = *(gss::Allocator **)(v4 - 160);
              if (v77 <= (v78 - (uint64_t)v79) >> 3)
              {
                v82 = (_QWORD *)(v4 - 152);
                v70 = *(gss::Allocator **)(v4 - 152);
                v84 = (v70 - v79) >> 3;
                if (v84 >= v77)
                {
                  for (i = *(_QWORD *)(v4 - 160); (_QWORD *)v76 != v75; v76 += 8)
                  {
                    *(_DWORD *)i = *(_DWORD *)v76;
                    *(_WORD *)(i + 4) = *(_WORD *)(v76 + 4);
                    i += 8;
                  }
                  v87 = i - (_QWORD)v79;
                  v70 = v79;
                }
                else
                {
                  v85 = (_QWORD *)(v76 + 8 * v84);
                  if (v70 != v79)
                  {
                    do
                    {
                      *(_DWORD *)v79 = *(_DWORD *)v76;
                      *((_WORD *)v79 + 2) = *(_WORD *)(v76 + 4);
                      v76 += 8;
                      v79 = (gss::Allocator *)((char *)v79 + 8);
                    }
                    while ((_QWORD *)v76 != v85);
                  }
                  v86 = (char *)v70;
                  while (v85 != v75)
                  {
                    if (v86)
                      *(_QWORD *)v86 = *v85;
                    ++v85;
                    v86 += 8;
                  }
                  v87 = v86 - (char *)v70;
                }
              }
              else
              {
                if (v79)
                {
                  *(_QWORD *)(v4 - 152) = v79;
                  (*(void (**)(gss::Allocator *))(*(_QWORD *)v70 + 40))(v70);
                  v78 = 0;
                  *v73 = 0;
                  v73[1] = 0;
                  v73[2] = 0;
                }
                if ((((unint64_t)v75 - v76) & 0x8000000000000000) != 0)
                  goto LABEL_608;
                v80 = v78 >> 2;
                if (v78 >> 2 <= v77)
                  v80 = ((uint64_t)v75 - v76) >> 3;
                v81 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v80;
                if (v81 >> 61)
LABEL_608:
                  abort();
                v70 = (gss::Allocator *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v4 - 136) + 16))(*(_QWORD *)(v4 - 136), 8 * v81, 4);
                *(_QWORD *)(v4 - 152) = v70;
                v82 = (_QWORD *)(v4 - 152);
                *(_QWORD *)(v4 - 160) = v70;
                *(_QWORD *)(v4 - 144) = (char *)v70 + 8 * v81;
                v83 = (char *)v70;
                if ((_QWORD *)v76 != v75)
                {
                  v83 = (char *)v70;
                  do
                  {
                    if (v83)
                      *(_QWORD *)v83 = *(_QWORD *)v76;
                    v76 += 8;
                    v83 += 8;
                  }
                  while ((_QWORD *)v76 != v75);
                }
                v87 = v83 - (char *)v70;
              }
              *v82 = (char *)v70 + v87;
            }
            *(_OWORD *)(v4 - 128) = *((_OWORD *)v71 - 8);
            *((_QWORD *)v71 - 16) = 0;
            *((_QWORD *)v71 - 15) = 0;
            v89 = *((_QWORD *)v71 - 14);
            *((_QWORD *)v71 - 14) = 0;
            *(_QWORD *)(v4 - 112) = v89;
            v90 = *((_QWORD *)v71 - 13);
            *((_QWORD *)v71 - 13) = 0;
            *(_QWORD *)(v4 - 104) = v90;
            *(_QWORD *)(v4 - 96) = 0;
            *(_QWORD *)(v4 - 88) = 0;
            *(_QWORD *)(v4 - 80) = 0;
            *(_OWORD *)(v4 - 96) = *((_OWORD *)v71 - 6);
            *(_QWORD *)(v4 - 80) = *((_QWORD *)v71 - 10);
            *((_QWORD *)v71 - 12) = 0;
            *((_QWORD *)v71 - 11) = 0;
            *((_QWORD *)v71 - 10) = 0;
            *(_OWORD *)(v4 - 72) = *(_OWORD *)(v71 - 72);
            *((_QWORD *)v71 - 9) = 0;
            *((_QWORD *)v71 - 8) = 0;
            *(_OWORD *)(v4 - 56) = *(_OWORD *)(v71 - 56);
            *((_QWORD *)v71 - 7) = 0;
            *((_QWORD *)v71 - 6) = 0;
            v91 = *((_QWORD *)v71 - 5);
            *((_QWORD *)v71 - 5) = 0;
            *(_QWORD *)(v4 - 40) = v91;
            *(_QWORD *)(v4 - 32) = *((_QWORD *)v71 - 4);
            *((_QWORD *)v71 - 4) = 0;
            v92 = *((_QWORD *)v71 - 3);
            *(_QWORD *)(v4 - 24) = v92;
            v93 = v4 - 24;
            v94 = *((_QWORD *)v71 - 2);
            *(_QWORD *)(v93 + 8) = v94;
            *(_DWORD *)(v93 + 16) = *((_DWORD *)v71 - 2);
            if (v94)
            {
              v74 = *(_QWORD *)(v92 + 8);
              v95 = *(_QWORD *)(v4 - 32);
              if ((v95 & (v95 - 1)) != 0)
              {
                if (v74 >= v95)
                  v74 %= v95;
              }
              else
              {
                v74 &= v95 - 1;
              }
              *(_QWORD *)(v91 + 8 * v74) = v93;
              *((_QWORD *)v71 - 3) = 0;
              *((_QWORD *)v71 - 2) = 0;
            }
            v71 -= 160;
            v4 = (unint64_t)v73;
          }
          while (v71 != v72);
          v71 = (char *)__p[0];
          v96 = (char *)__p[1];
          __p[0] = v73;
          __p[1] = v66;
          v370 = (void *)*((_QWORD *)&v372 + 1);
          while (v96 != v71)
            md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v96 - 160));
          if (v71)
LABEL_158:
            operator delete(v71);
        }
LABEL_159:
        __p[1] = v66;
        v97 = (char *)(v383 - v382);
        v98 = (v383 - v382) >> 3;
        if (v383 != v382)
        {
          v99 = v382;
          do
          {
            v100 = ((v98 << 6) - 0x61C8864680B583EBLL + (v98 >> 2) + *(unsigned int *)v99) ^ v98;
            v98 = (*((unsigned __int16 *)v99 + 2) - 0x61C8864680B583EBLL + (v100 << 6) + (v100 >> 2)) ^ v100;
            v99 += 8;
          }
          while (v99 != v383);
        }
        v101 = *((_QWORD *)&v386 + 1);
        if (*((_QWORD *)&v386 + 1))
        {
          v102 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v386 + 8));
          v102.i16[0] = vaddlv_u8(v102);
          if (v102.u32[0] > 1uLL)
          {
            v4 = v98;
            if (v98 >= *((_QWORD *)&v386 + 1))
              v4 = v98 % *((_QWORD *)&v386 + 1);
          }
          else
          {
            v4 = (*((_QWORD *)&v386 + 1) - 1) & v98;
          }
          v103 = *(_QWORD **)(v386 + 8 * v4);
          if (v103)
          {
            v104 = (_QWORD *)*v103;
            if (v104)
            {
              if (v102.u32[0] < 2uLL)
              {
                while (1)
                {
                  v110 = v104[1];
                  if (v110 == v98)
                  {
                    v112 = v104[2];
                    v111 = v104[3];
                    if ((char *)(v111 - v112) == v97)
                    {
                      if (v112 == v111)
                        goto LABEL_260;
                      v113 = v382;
                      while (*(_DWORD *)v112 == *(_DWORD *)v113
                           && *(unsigned __int16 *)(v112 + 4) == *((unsigned __int16 *)v113 + 2))
                      {
                        v112 += 8;
                        v113 += 8;
                        if (v112 == v111)
                          goto LABEL_260;
                      }
                    }
                  }
                  else if ((v110 & (*((_QWORD *)&v386 + 1) - 1)) != v4)
                  {
                    goto LABEL_199;
                  }
                  v104 = (_QWORD *)*v104;
                  if (!v104)
                    goto LABEL_199;
                }
              }
              do
              {
                v105 = v104[1];
                if (v105 == v98)
                {
                  v107 = v104[2];
                  v106 = v104[3];
                  if ((char *)(v106 - v107) == v97)
                  {
                    if (v107 == v106)
                      goto LABEL_260;
                    v108 = v382;
                    while (*(_DWORD *)v107 == *(_DWORD *)v108
                         && *(unsigned __int16 *)(v107 + 4) == *((unsigned __int16 *)v108 + 2))
                    {
                      v107 += 8;
                      v108 += 8;
                      if (v107 == v106)
                        goto LABEL_260;
                    }
                  }
                }
                else
                {
                  if (v105 >= *((_QWORD *)&v386 + 1))
                    v105 %= *((_QWORD *)&v386 + 1);
                  if (v105 != v4)
                    break;
                }
                v104 = (_QWORD *)*v104;
              }
              while (v104);
            }
          }
        }
LABEL_199:
        v115 = (uint64_t *)operator new(0x38uLL);
        *(_QWORD *)&v371 = v115;
        *((_QWORD *)&v371 + 1) = &v387;
        LOBYTE(v372) = 0;
        *v115 = 0;
        v115[1] = v98;
        v115[3] = 0;
        v115[4] = 0;
        v115[2] = 0;
        v115[5] = gss::Allocator::instance((gss::Allocator *)v115);
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v115 + 2, (uint64_t)v382, v383, (v383 - v382) >> 3);
        v115[6] = v64;
        LOBYTE(v372) = 1;
        v116 = (float)(unint64_t)(*((_QWORD *)&v387 + 1) + 1);
        if (v101 && (float)(v388 * (float)v101) >= v116)
          goto LABEL_251;
        v117 = (v101 & (v101 - 1)) != 0;
        if (v101 < 3)
          v117 = 1;
        v118 = v117 | (2 * v101);
        v119 = vcvtps_u32_f32(v116 / v388);
        if (v118 <= v119)
          prime = v119;
        else
          prime = v118;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v101 = *((_QWORD *)&v386 + 1);
        if (prime > *((_QWORD *)&v386 + 1))
          goto LABEL_211;
        if (prime >= *((_QWORD *)&v386 + 1))
          goto LABEL_238;
        v131 = vcvtps_u32_f32((float)*((unint64_t *)&v387 + 1) / v388);
        if (*((_QWORD *)&v386 + 1) < 3uLL
          || (v132 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v386 + 8)),
              v132.i16[0] = vaddlv_u8(v132),
              v132.u32[0] > 1uLL))
        {
          v131 = std::__next_prime(v131);
        }
        else
        {
          v133 = 1 << -(char)__clz(v131 - 1);
          if (v131 >= 2)
            v131 = v133;
        }
        if (prime <= v131)
          prime = v131;
        if (prime < v101)
        {
          if (!prime)
          {
            v272 = (void *)v386;
            *(_QWORD *)&v386 = 0;
            if (v272)
              operator delete(v272);
            v101 = 0;
            *((_QWORD *)&v386 + 1) = 0;
            goto LABEL_238;
          }
LABEL_211:
          if (prime >> 61)
            goto LABEL_604;
          v121 = operator new(8 * prime);
          v122 = (void *)v386;
          *(_QWORD *)&v386 = v121;
          if (v122)
            operator delete(v122);
          v123 = 0;
          *((_QWORD *)&v386 + 1) = prime;
          do
            *(_QWORD *)(v386 + 8 * v123++) = 0;
          while (prime != v123);
          v124 = (_QWORD **)v387;
          if (!(_QWORD)v387)
          {
LABEL_237:
            v101 = prime;
            goto LABEL_238;
          }
          v125 = *(_QWORD *)(v387 + 8);
          v126 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v127 = v125 & v126;
            *(_QWORD *)(v386 + 8 * v127) = &v387;
            for (j = *v124; *v124; j = *v124)
            {
              v129 = j[1] & v126;
              if (v129 == v127)
              {
                v124 = (_QWORD **)j;
              }
              else if (*(_QWORD *)(v386 + 8 * v129))
              {
                *v124 = (_QWORD *)*j;
                v130 = 8 * v129;
                *j = **(_QWORD **)(v386 + v130);
                **(_QWORD **)(v386 + v130) = j;
              }
              else
              {
                *(_QWORD *)(v386 + 8 * v129) = v124;
                v124 = (_QWORD **)j;
                v127 = v129;
              }
            }
            goto LABEL_237;
          }
          if (v125 >= prime)
            v125 %= prime;
          *(_QWORD *)(v386 + 8 * v125) = &v387;
          v134 = *v124;
          if (!*v124)
            goto LABEL_237;
          while (2)
          {
            v136 = v134[1];
            if (v136 >= prime)
              v136 %= prime;
            if (v136 != v125)
            {
              if (!*(_QWORD *)(v386 + 8 * v136))
              {
                *(_QWORD *)(v386 + 8 * v136) = v124;
LABEL_242:
                v124 = (_QWORD **)v134;
                v134 = (_QWORD *)*v134;
                v125 = v136;
                if (!v134)
                  goto LABEL_237;
                continue;
              }
              *v124 = (_QWORD *)*v134;
              v135 = 8 * v136;
              *v134 = **(_QWORD **)(v386 + v135);
              **(_QWORD **)(v386 + v135) = v134;
              v134 = v124;
            }
            break;
          }
          v136 = v125;
          goto LABEL_242;
        }
        v101 = *((_QWORD *)&v386 + 1);
LABEL_238:
        if ((v101 & (v101 - 1)) != 0)
        {
          if (v98 >= v101)
            v4 = v98 % v101;
          else
            v4 = v98;
        }
        else
        {
          v4 = (v101 - 1) & v98;
        }
LABEL_251:
        v137 = *(_QWORD **)(v386 + 8 * v4);
        if (v137)
        {
          *(_QWORD *)v371 = *v137;
          *v137 = v371;
        }
        else
        {
          *(_QWORD *)v371 = v387;
          *(_QWORD *)&v387 = v371;
          *(_QWORD *)(v386 + 8 * v4) = &v387;
          if (*(_QWORD *)v371)
          {
            v138 = *(_QWORD *)(*(_QWORD *)v371 + 8);
            if ((v101 & (v101 - 1)) != 0)
            {
              if (v138 >= v101)
                v138 %= v101;
            }
            else
            {
              v138 &= v101 - 1;
            }
            *(_QWORD *)(v386 + 8 * v138) = v371;
          }
        }
        ++*((_QWORD *)&v387 + 1);
LABEL_260:
        v45 = (uint64_t)v360;
LABEL_261:
        v139 = (char *)__p[0];
        v140 = (char *)__p[0] + 160 * v64;
        v143 = (char *)*((_QWORD *)v140 + 8);
        v142 = (char **)(v140 + 64);
        v141 = v143;
        v144 = v142[1];
        v359 = v142 + 1;
        v145 = *(unsigned int *)(v45 + 100);
        v146 = 0x2E8BA2E8BA2E8BA3 * ((v144 - v143) >> 3);
        v356 = v145;
        v147 = v146 + v145;
        v358 = v142 + 2;
        if (0x2E8BA2E8BA2E8BA3 * ((v142[2] - v143) >> 3) < (unint64_t)(v146 + v145))
        {
          if (v147 > 0x2E8BA2E8BA2E8BALL)
            abort();
          v148 = (char *)operator new(88 * v147);
          v149 = &v148[88 * v146];
          v150 = &v148[88 * v147];
          if (v144 == v141)
          {
            *v142 = v149;
            *v359 = v149;
            *v358 = v150;
          }
          else
          {
            v151 = &v148[88 * v146];
            do
            {
              v152 = *(_OWORD *)(v144 - 88);
              v144 -= 88;
              *(_OWORD *)(v151 - 88) = v152;
              v151 -= 88;
              *((_QWORD *)v151 + 2) = *((_QWORD *)v144 + 2);
              *(_QWORD *)v144 = 0;
              *((_QWORD *)v144 + 1) = 0;
              *((_QWORD *)v144 + 2) = 0;
              *(_OWORD *)(v151 + 24) = *(_OWORD *)(v144 + 24);
              *((_QWORD *)v151 + 5) = *((_QWORD *)v144 + 5);
              *((_QWORD *)v144 + 3) = 0;
              *((_QWORD *)v144 + 4) = 0;
              *((_QWORD *)v144 + 5) = 0;
              v153 = *((_OWORD *)v144 + 3);
              v154 = *((_OWORD *)v144 + 4);
              *((_QWORD *)v151 + 10) = *((_QWORD *)v144 + 10);
              *((_OWORD *)v151 + 3) = v153;
              *((_OWORD *)v151 + 4) = v154;
            }
            while (v144 != v141);
            v144 = *v142;
            v155 = *v359;
            *v142 = v151;
            *v359 = v149;
            *v358 = v150;
            while (v155 != v144)
            {
              v156 = (void *)*((_QWORD *)v155 - 8);
              if (v156)
              {
                *((_QWORD *)v155 - 7) = v156;
                operator delete(v156);
              }
              v157 = (void *)*((_QWORD *)v155 - 11);
              if (v157)
              {
                *((_QWORD *)v155 - 10) = v157;
                operator delete(v157);
              }
              v155 -= 88;
            }
          }
          if (v144)
            operator delete(v144);
        }
        v158 = *v359;
        v159 = *v142;
        v160 = &v139[160 * v64];
        v4 = (unint64_t)(v160 + 120);
        v161 = v360[5];
        v162 = *((_QWORD *)v160 + 16);
        if (v162)
        {
          v163 = (uint8x8_t)vcnt_s8((int8x8_t)v162);
          v163.i16[0] = vaddlv_u8(v163);
          if (v163.u32[0] > 1uLL)
          {
            v64 = v360[5];
            if (v161 >= v162)
              v64 = v161 % v162;
          }
          else
          {
            v64 = (v162 - 1) & v161;
          }
          v164 = *(_QWORD ***)(*(_QWORD *)v4 + 8 * v64);
          if (v164)
          {
            v165 = *v164;
            if (*v164)
            {
              if (v163.u32[0] < 2uLL)
              {
                while (1)
                {
                  v167 = v165[1];
                  if (v167 == v161)
                  {
                    if (v165[2] == v161)
                      goto LABEL_364;
                  }
                  else if ((v167 & (v162 - 1)) != v64)
                  {
                    goto LABEL_297;
                  }
                  v165 = (_QWORD *)*v165;
                  if (!v165)
                    goto LABEL_297;
                }
              }
              do
              {
                v166 = v165[1];
                if (v166 == v161)
                {
                  if (v165[2] == v161)
                    goto LABEL_364;
                }
                else
                {
                  if (v166 >= v162)
                    v166 %= v162;
                  if (v166 != v64)
                    break;
                }
                v165 = (_QWORD *)*v165;
              }
              while (v165);
            }
          }
        }
LABEL_297:
        v165 = operator new(0x20uLL);
        *v165 = 0;
        v165[1] = v161;
        v165[2] = v360[5];
        v168 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
        v169 = *(float *)(v4 + 32);
        if (!v162 || (float)(v169 * (float)v162) < v168)
        {
          v170 = (v162 & (v162 - 1)) != 0;
          if (v162 < 3)
            v170 = 1;
          v171 = v170 | (2 * v162);
          v172 = vcvtps_u32_f32(v168 / v169);
          if (v171 <= v172)
            v173 = v172;
          else
            v173 = v171;
          if (v173 == 1)
          {
            v173 = 2;
          }
          else if ((v173 & (v173 - 1)) != 0)
          {
            v173 = std::__next_prime(v173);
            v162 = *(_QWORD *)(v4 + 8);
          }
          if (v173 <= v162)
          {
            if (v173 >= v162)
              goto LABEL_349;
            v185 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 24) / *(float *)(v4 + 32));
            if (v162 < 3
              || (v186 = (uint8x8_t)vcnt_s8((int8x8_t)v162), v186.i16[0] = vaddlv_u8(v186), v186.u32[0] > 1uLL))
            {
              v185 = std::__next_prime(v185);
            }
            else
            {
              v187 = 1 << -(char)__clz(v185 - 1);
              if (v185 >= 2)
                v185 = v187;
            }
            if (v173 <= v185)
              v173 = v185;
            if (v173 >= v162)
              goto LABEL_349;
            if (!v173)
            {
              v191 = *(_QWORD **)v4;
              *(_QWORD *)v4 = 0;
              if (v191)
                operator delete(v191);
              *(_QWORD *)(v4 + 8) = 0;
              goto LABEL_349;
            }
          }
          if (v173 >> 61)
            goto LABEL_604;
          v174 = operator new(8 * v173);
          v175 = *(_QWORD **)v4;
          *(_QWORD *)v4 = v174;
          if (v175)
            operator delete(v175);
          v176 = 0;
          *(_QWORD *)(v4 + 8) = v173;
          do
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v176++) = 0;
          while (v173 != v176);
          v178 = v4 + 16;
          v177 = *(_QWORD **)(v4 + 16);
          if (!v177)
            goto LABEL_349;
          v179 = v177[1];
          v180 = v173 - 1;
          if ((v173 & (v173 - 1)) == 0)
          {
            v181 = v179 & v180;
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v181) = v178;
            while (1)
            {
              v182 = (_QWORD *)*v177;
              if (!*v177)
                break;
              v183 = v182[1] & v180;
              if (v183 == v181)
              {
                v177 = (_QWORD *)*v177;
              }
              else if (*(_QWORD *)(*(_QWORD *)v4 + 8 * v183))
              {
                *v177 = *v182;
                v184 = 8 * v183;
                *v182 = **(_QWORD **)(*(_QWORD *)v4 + v184);
                **(_QWORD **)(*(_QWORD *)v4 + v184) = v182;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v4 + 8 * v183) = v177;
                v177 = v182;
                v181 = v183;
              }
            }
LABEL_349:
            v162 = *(_QWORD *)(v4 + 8);
            if ((v162 & (v162 - 1)) != 0)
            {
              if (v161 >= v162)
                v64 = v161 % v162;
              else
                v64 = v161;
            }
            else
            {
              v64 = (v162 - 1) & v161;
            }
            goto LABEL_354;
          }
          if (v179 >= v173)
            v179 %= v173;
          *(_QWORD *)(*(_QWORD *)v4 + 8 * v179) = v178;
          v188 = (_QWORD *)*v177;
          if (!*v177)
            goto LABEL_349;
          while (1)
          {
            v190 = v188[1];
            if (v190 >= v173)
              v190 %= v173;
            if (v190 != v179)
            {
              if (!*(_QWORD *)(*(_QWORD *)v4 + 8 * v190))
              {
                *(_QWORD *)(*(_QWORD *)v4 + 8 * v190) = v177;
                goto LABEL_335;
              }
              *v177 = *v188;
              v189 = 8 * v190;
              *v188 = **(_QWORD **)(*(_QWORD *)v4 + v189);
              **(_QWORD **)(*(_QWORD *)v4 + v189) = v188;
              v188 = v177;
            }
            v190 = v179;
LABEL_335:
            v177 = v188;
            v188 = (_QWORD *)*v188;
            v179 = v190;
            if (!v188)
              goto LABEL_349;
          }
        }
LABEL_354:
        v192 = *(_QWORD **)v4;
        v193 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v64);
        if (v193)
        {
          *v165 = *v193;
        }
        else
        {
          *v165 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = v165;
          v192[v64] = v4 + 16;
          if (!*v165)
            goto LABEL_363;
          v194 = *(_QWORD *)(*v165 + 8);
          if ((v162 & (v162 - 1)) != 0)
          {
            if (v194 >= v162)
              v194 %= v162;
          }
          else
          {
            v194 &= v162 - 1;
          }
          v193 = (_QWORD *)(*(_QWORD *)v4 + 8 * v194);
        }
        *v193 = v165;
LABEL_363:
        ++*(_QWORD *)(v4 + 24);
LABEL_364:
        v195 = -1171354717 * ((v158 - v159) >> 3);
        v196 = v356;
        v165[3] = v195 | ((unint64_t)(v356 + v195) << 32);
        v197 = v360;
        if (!(_DWORD)v356)
          goto LABEL_476;
        v198 = 0;
        v357 = (void **)v142;
        while (2)
        {
          v379 = 0;
          v199 = geo::codec::multiSectionFeaturePoints(v197, v198, &v379);
          if (geo::codec::multiSectionFeaturePrecision((uint64_t)v197) > 0x10)
            goto LABEL_367;
          v200 = v379;
          if (v379 < 3)
            goto LABEL_367;
          *(_QWORD *)&v371 = 0;
          if (v379 >> 61)
            abort();
          v201 = operator new(8 * v379);
          v202 = 0;
          v203 = 0;
          v4 = (unint64_t)&v201[v200];
          *(_QWORD *)&v362 = vdupq_n_s64((unint64_t)v201).u64[0];
          do
          {
            if ((unint64_t)v201 < v4)
            {
              *v201 = v199[v202];
              v204 = v201 + 1;
              goto LABEL_373;
            }
            v206 = (void *)v362;
            v207 = (uint64_t)((uint64_t)v201 - v362) >> 3;
            v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 61)
              abort();
            if ((uint64_t)(v4 - v362) >> 2 > v208)
              v208 = (uint64_t)(v4 - v362) >> 2;
            if (v4 - (unint64_t)v362 >= 0x7FFFFFFFFFFFFFF8)
              v209 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v209 = v208;
            if (v209)
            {
              if (v209 >> 61)
                goto LABEL_604;
              v210 = (char *)operator new(8 * v209);
            }
            else
            {
              v210 = 0;
            }
            v211 = &v210[8 * v207];
            v4 = (unint64_t)&v210[8 * v209];
            *(_QWORD *)v211 = v199[v202];
            v204 = v211 + 8;
            if (v201 == (_QWORD *)v362)
            {
              *(_QWORD *)&v362 = &v210[8 * v207];
              v206 = v201;
LABEL_392:
              operator delete(v206);
              goto LABEL_373;
            }
            v212 = (unint64_t)v201 - v362 - 8;
            if (v212 <= 0x167
              || (char *)v201 + (unint64_t)v210 - v362 - (v212 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v201 + (unint64_t)v210 - v362 - 8
              || (_QWORD *)((char *)v201 - (v212 & 0xFFFFFFFFFFFFFFF8) - 8) > v201 - 1
              || (_QWORD)v362 - (_QWORD)v210 < 0x20uLL)
            {
              v213 = v201;
              do
              {
LABEL_388:
                v214 = *--v213;
                *((_QWORD *)v211 - 1) = v214;
                v211 -= 8;
              }
              while (v213 != (_QWORD *)v362);
              goto LABEL_389;
            }
            v215 = (v212 >> 3) + 1;
            v213 = &v201[-(v215 & 0x3FFFFFFFFFFFFFFCLL)];
            v216 = &v210[8 * v207 - 16];
            v217 = (__int128 *)(v201 - 2);
            v218 = v215 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v219 = *v217;
              *((_OWORD *)v216 - 1) = *(v217 - 1);
              *(_OWORD *)v216 = v219;
              v216 -= 32;
              v217 -= 2;
              v218 -= 4;
            }
            while (v218);
            v211 -= 8 * (v215 & 0x3FFFFFFFFFFFFFFCLL);
            if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_388;
LABEL_389:
            *(_QWORD *)&v362 = v211;
            if (v206)
              goto LABEL_392;
LABEL_373:
            *(_QWORD *)&v205 = v362;
            *((_QWORD *)&v205 + 1) = v204;
            v362 = v205;
            v201 = v204;
            v202 = ++v203;
          }
          while (v379 > v203);
          v377 = 0;
          CharacteristicPointsForSection = geo::codec::polygonFeatureGetCharacteristicPointsForSection(v360, v198, (uint64_t *)&v377);
          v221 = v379;
          if (v379)
          {
            if ((v379 & 0x8000000000000000) != 0)
              abort();
            v222 = CharacteristicPointsForSection;
            v223 = operator new(8 * ((v379 - 1) >> 6) + 8);
            v224 = v223;
            if (v221 >= 0x41)
              v225 = (v221 - 1) >> 6;
            else
              v225 = 0;
            v223[v225] = 0;
            if (v221 >= 0x40)
              bzero(v223, 8 * (v221 >> 6));
            if ((v221 & 0x3F) != 0)
              v224[v221 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v221 & 0x3F));
            v226 = v221;
            if (!v222)
            {
LABEL_424:
              if (v226 >> 60)
                abort();
              v237 = (char *)operator new(16 * v226);
              v226 = (unint64_t)&v237[16 * v226];
              v238 = vdupq_n_s64((unint64_t)v237);
              goto LABEL_455;
            }
            v227 = 0;
            v228 = 0;
            v226 = 0;
            v229 = v377;
            if (v221 <= 1)
              v230 = 1;
            else
              v230 = v221;
            while (2)
            {
              if (v228 >= (unint64_t)v229)
              {
LABEL_413:
                v231 = &v224[v227 >> 6];
                v232 = 1 << v227;
                v233 = v228;
              }
              else
              {
                v235 = &v222[100 * v228 + 12];
                v233 = v228;
                while (1)
                {
                  v236 = *(_DWORD *)v235;
                  v235 += 100;
                  if (v227 == v236)
                    break;
                  if (v229 == (char *)++v233)
                    goto LABEL_413;
                }
                v231 = &v224[v227 >> 6];
                v232 = 1 << v227;
                if (v222[100 * v233 + 28])
                {
                  v234 = 0;
                  *v231 |= v232;
LABEL_415:
                  v226 += v234;
                  ++v227;
                  v228 = v233;
                  if (v227 == v230)
                  {
                    if (v226)
                      goto LABEL_424;
                    v238 = 0uLL;
LABEL_455:
                    v361 = v238;
                    v260 = 0;
                    while (1)
                    {
                      v263 = v260 + 1;
                      if (((*(_QWORD *)((char *)v224 + ((v260 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v260) & 1) == 0)
                      {
                        v264 = v263 % v221;
                        v265 = (char *)v361.i64[1];
                        if (v361.i64[1] < v226)
                        {
                          *(_QWORD *)v361.i64[1] = v260;
                          *(_QWORD *)(v361.i64[1] + 8) = v264;
                          v261 = v361.i64[1] + 16;
                        }
                        else
                        {
                          v266 = (v361.i64[1] - v361.i64[0]) >> 4;
                          v267 = v266 + 1;
                          if ((unint64_t)(v266 + 1) >> 60)
                            abort();
                          if ((uint64_t)(v226 - v361.i64[0]) >> 3 > v267)
                            v267 = (uint64_t)(v226 - v361.i64[0]) >> 3;
                          if (v226 - v361.i64[0] >= 0x7FFFFFFFFFFFFFF0)
                            v268 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v268 = v267;
                          if (v268)
                          {
                            if (v268 >> 60)
                              goto LABEL_604;
                            v269 = (char *)operator new(16 * v268);
                          }
                          else
                          {
                            v269 = 0;
                          }
                          v270 = &v269[16 * v266];
                          *(_QWORD *)v270 = v260;
                          *((_QWORD *)v270 + 1) = v264;
                          v271 = v270;
                          if (v361.i64[1] != v361.i64[0])
                          {
                            do
                            {
                              *((_OWORD *)v271 - 1) = *((_OWORD *)v265 - 1);
                              v271 -= 16;
                              v265 -= 16;
                            }
                            while (v265 != (char *)v361.i64[0]);
                            v265 = (char *)v361.i64[0];
                          }
                          v226 = (unint64_t)&v269[16 * v268];
                          v261 = (uint64_t)(v270 + 16);
                          v361.i64[0] = (uint64_t)v271;
                          if (v265)
                            operator delete(v265);
                        }
                        v262.i64[0] = v361.i64[0];
                        v262.i64[1] = v261;
                        v361 = v262;
                        v221 = v379;
                      }
                      v260 = v263;
                      if (v263 >= v221)
                        goto LABEL_427;
                    }
                  }
                  continue;
                }
              }
              break;
            }
            *v231 &= ~v232;
            v234 = 1;
            goto LABEL_415;
          }
          v224 = 0;
          v226 = 0;
          v361 = 0u;
LABEL_427:
          v239 = v359;
          v240 = *v359;
          v241 = v357;
          if (*v359 < *v358)
          {
            *(_OWORD *)v240 = v362;
            *((_QWORD *)v240 + 2) = v4;
            *(int64x2_t *)(v240 + 24) = v361;
            *((_QWORD *)v240 + 5) = v226;
            v242 = v372;
            *((_OWORD *)v240 + 3) = v371;
            *((_OWORD *)v240 + 4) = v242;
            *((_QWORD *)v240 + 10) = v373;
            v243 = v240 + 88;
            goto LABEL_450;
          }
          v244 = 0x2E8BA2E8BA2E8BA3 * ((v240 - (_BYTE *)*v357) >> 3);
          v245 = v244 + 1;
          if ((unint64_t)(v244 + 1) > 0x2E8BA2E8BA2E8BALL)
            abort();
          if (0x5D1745D1745D1746 * ((*v358 - (_BYTE *)*v357) >> 3) > v245)
            v245 = 0x5D1745D1745D1746 * ((*v358 - (_BYTE *)*v357) >> 3);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((*v358 - (_BYTE *)*v357) >> 3)) >= 0x1745D1745D1745DLL)
            v246 = 0x2E8BA2E8BA2E8BALL;
          else
            v246 = v245;
          if (v246)
          {
            if (v246 <= 0x2E8BA2E8BA2E8BALL)
            {
              v247 = (char *)operator new(88 * v246);
              v241 = v357;
              goto LABEL_439;
            }
LABEL_604:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v247 = 0;
LABEL_439:
          v248 = &v247[88 * v244];
          v249 = &v247[88 * v246];
          *(_OWORD *)v248 = v362;
          *((_QWORD *)v248 + 2) = v4;
          *(int64x2_t *)(v248 + 24) = v361;
          *((_QWORD *)v248 + 5) = v226;
          v250 = v372;
          *((_OWORD *)v248 + 3) = v371;
          *((_OWORD *)v248 + 4) = v250;
          *((_QWORD *)v248 + 10) = v373;
          v243 = v248 + 88;
          v239 = v359;
          v251 = *v359;
          v252 = (char *)*v241;
          if (*v359 == *v241)
          {
            *v241 = v248;
            *v359 = v243;
            *v358 = v249;
            if (v251)
              goto LABEL_449;
          }
          else
          {
            do
            {
              v253 = v248;
              *((_QWORD *)v248 - 10) = 0;
              *((_QWORD *)v248 - 9) = 0;
              v254 = *(_OWORD *)(v251 - 88);
              v251 -= 88;
              *(_OWORD *)(v248 - 88) = v254;
              v248 -= 88;
              *((_QWORD *)v253 - 9) = *((_QWORD *)v251 + 2);
              *(_QWORD *)v251 = 0;
              *((_QWORD *)v251 + 1) = 0;
              *((_QWORD *)v251 + 2) = 0;
              *((_QWORD *)v248 + 4) = 0;
              *((_QWORD *)v248 + 5) = 0;
              *(_OWORD *)(v248 + 24) = *(_OWORD *)(v251 + 24);
              *((_QWORD *)v248 + 5) = *((_QWORD *)v251 + 5);
              *((_QWORD *)v251 + 3) = 0;
              *((_QWORD *)v251 + 4) = 0;
              *((_QWORD *)v251 + 5) = 0;
              v255 = *((_OWORD *)v251 + 3);
              v256 = *((_OWORD *)v251 + 4);
              *((_QWORD *)v248 + 10) = *((_QWORD *)v251 + 10);
              *((_OWORD *)v248 + 3) = v255;
              *((_OWORD *)v248 + 4) = v256;
            }
            while (v251 != v252);
            v251 = (char *)*v241;
            v257 = *v359;
            *v241 = v248;
            *v359 = v243;
            *v358 = v249;
            while (v257 != v251)
            {
              v258 = (void *)*((_QWORD *)v257 - 8);
              if (v258)
              {
                *((_QWORD *)v257 - 7) = v258;
                operator delete(v258);
              }
              v259 = (void *)*((_QWORD *)v257 - 11);
              if (v259)
              {
                *((_QWORD *)v257 - 10) = v259;
                operator delete(v259);
              }
              v257 -= 88;
            }
            v239 = v359;
            if (v251)
LABEL_449:
              operator delete(v251);
          }
LABEL_450:
          *v239 = v243;
          if (v224)
            operator delete(v224);
          v197 = v360;
          v196 = v356;
LABEL_367:
          if (++v198 != v196)
            continue;
          break;
        }
LABEL_476:
        if (v382)
        {
          v383 = v382;
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v385 + 40))(v385, v382, v384 - (_QWORD)v382);
        }
        v34 = (id *)v352;
LABEL_61:
        if (++v355 != v353)
          continue;
        break;
      }
      v44 = v348;
      v43 = v350;
      if (!v44)
        goto LABEL_492;
LABEL_488:
      v273 = (unint64_t *)&v44->__shared_owners_;
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v43 = v350;
        if (v350)
        {
LABEL_493:
          v275 = (unint64_t *)&v43->__shared_owners_;
          do
            v276 = __ldaxr(v275);
          while (__stlxr(v276 - 1, v275));
          if (!v276)
          {
            v277 = v43;
            ((void (*)(void))v43->__on_zero_shared)();
            std::__shared_weak_count::__release_weak(v277);
          }
        }
      }
      else
      {
LABEL_492:
        if (v43)
          goto LABEL_493;
      }
      v36 = v349 + 3;
    }
    while (v349 + 3 != (_QWORD *)v347);
  }
  v278 = v34[95];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v278, "gglDevice") + 24))(&v381);

  v279 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v279 + 1) = 0;
  *((_QWORD *)v279 + 2) = 0;
  *(_QWORD *)v279 = &off_1E42E2278;
  v280 = (char *)ggl::BufferData::BufferData((uint64_t)(v279 + 24), qword_1EE54ADE0, 2, 1, 6, 1);
  *((_QWORD *)v279 + 28) = ggl::Tile::View::reflection(void)::reflection;
  *((_QWORD *)v279 + 3) = &off_1E42B97B0;
  v382 = v280;
  v383 = v279;
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v379);
  v281 = (char *)__p[0];
  v282 = (char *)__p[1];
  if (__p[0] != __p[1])
  {
    while (1)
    {
      v377 = v382;
      v378 = (std::__shared_weak_count *)v383;
      if (v383)
      {
        v283 = (unint64_t *)(v383 + 8);
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
      }
      v375 = v379;
      v376 = v380;
      if (v380)
      {
        v285 = (unint64_t *)&v380->__shared_owners_;
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
      }
      v389[0] = 1057360530;
      md::PolygonOverlayMeshBuilder::buildPolygonMeshesFromMeshInfos(&v371, (uint64_t **)v281 + 8, &v381, (uint64_t *)&v377, (uint64_t *)&v375, (uint64_t *)v281 + 4, v389);
      v287 = v371;
      *(_QWORD *)&v371 = 0;
      v288 = *((_QWORD *)v281 + 6);
      *((_QWORD *)v281 + 6) = v287;
      if (v288)
        break;
LABEL_520:
      v295 = *((_QWORD *)&v371 + 1);
      *((_QWORD *)&v371 + 1) = 0;
      v296 = *((_QWORD *)v281 + 7);
      *((_QWORD *)v281 + 7) = v295;
      if (v296)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
        v297 = *((_QWORD *)&v371 + 1);
        *((_QWORD *)&v371 + 1) = 0;
        if (v297)
          (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
      }
      v298 = v371;
      *(_QWORD *)&v371 = 0;
      if (v298)
      {
        v299 = *(std::__shared_weak_count **)(v298 + 72);
        if (!v299)
          goto LABEL_528;
        v300 = (unint64_t *)&v299->__shared_owners_;
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
          v302 = *(std::__shared_weak_count **)(v298 + 8);
          if (v302)
          {
LABEL_529:
            v303 = (unint64_t *)&v302->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
            }
          }
        }
        else
        {
LABEL_528:
          v302 = *(std::__shared_weak_count **)(v298 + 8);
          if (v302)
            goto LABEL_529;
        }
        MEMORY[0x1A1AF4E00](v298, 0x1020C408635837CLL);
      }
      v305 = v376;
      if (!v376)
        goto LABEL_539;
      v306 = (unint64_t *)&v376->__shared_owners_;
      do
        v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
        v308 = v378;
        if (v378)
        {
LABEL_540:
          v309 = (unint64_t *)&v308->__shared_owners_;
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
            std::__shared_weak_count::__release_weak(v308);
          }
        }
      }
      else
      {
LABEL_539:
        v308 = v378;
        if (v378)
          goto LABEL_540;
      }
      v281 += 160;
      if (v281 == v282)
        goto LABEL_546;
    }
    v289 = *(std::__shared_weak_count **)(v288 + 72);
    if (!v289)
      goto LABEL_513;
    v290 = (unint64_t *)&v289->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
      v292 = *(std::__shared_weak_count **)(v288 + 8);
      if (v292)
        goto LABEL_514;
    }
    else
    {
LABEL_513:
      v292 = *(std::__shared_weak_count **)(v288 + 8);
      if (v292)
      {
LABEL_514:
        v293 = (unint64_t *)&v292->__shared_owners_;
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
    }
    MEMORY[0x1A1AF4E00](v288, 0x1020C408635837CLL);
    goto LABEL_520;
  }
LABEL_546:
  v311 = v380;
  if (v380)
  {
    v312 = (unint64_t *)&v380->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = (std::__shared_weak_count *)v383;
  if (v383)
  {
    v315 = (unint64_t *)(v383 + 8);
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
  if (v381)
  {
    v317 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v381 + 24))(v381);
    v318 = v381;
    v381 = 0;
    *(_QWORD *)&v371 = v318;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v317 + 48))(v317, &v371);
    v319 = v371;
    *(_QWORD *)&v371 = 0;
    if (v319)
      (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
    v320 = v381;
    v381 = 0;
    if (v320)
      (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  }
  v321 = (void **)v387;
  if ((_QWORD)v387)
  {
    do
    {
      v327 = (void **)*v321;
      v328 = v321[2];
      if (v328)
      {
        v321[3] = v328;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v321[5] + 40))(v321[5], v328, (_BYTE *)v321[4] - (_BYTE *)v328);
      }
      operator delete(v321);
      v321 = v327;
    }
    while (v327);
  }
  v322 = (void *)v386;
  *(_QWORD *)&v386 = 0;
  if (v322)
    operator delete(v322);
  if (v366 == v365)
  {
    v324 = 0;
    v371 = 0uLL;
  }
  else
  {
    v323 = *((_QWORD *)v365 + 1);
    v324 = *(std::__shared_weak_count **)(v323 + 152);
    *(_QWORD *)&v371 = *(_QWORD *)(v323 + 144);
    *((_QWORD *)&v371 + 1) = v324;
    if (v324)
    {
      v325 = (unint64_t *)&v324->__shared_owners_;
      do
        v326 = __ldxr(v325);
      while (__stxr(v326 + 1, v325));
    }
  }
  v330 = (char *)operator new(0x348uLL);
  *((_QWORD *)v330 + 1) = 0;
  *((_QWORD *)v330 + 2) = 0;
  *(_QWORD *)v330 = &off_1E42DC9A8;
  md::MapTileData::MapTileData((uint64_t)(v330 + 24), a2, (uint64_t)v368, (uint64_t)&v371, 1);
  *((_QWORD *)v330 + 3) = &off_1E429CC10;
  *((_QWORD *)v330 + 82) = &unk_1E429CC50;
  *((_QWORD *)v330 + 93) = RegistryForKey;
  *((_QWORD *)v330 + 94) = 0;
  *((_QWORD *)v330 + 96) = 0;
  *((_QWORD *)v330 + 95) = 0;
  *(_OWORD *)(v330 + 776) = *(_OWORD *)__p;
  *((_QWORD *)v330 + 99) = v370;
  __p[0] = 0;
  __p[1] = 0;
  v370 = 0;
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)(v330 + 800), (uint64_t)v363);
  if (v324)
  {
    v331 = (unint64_t *)&v324->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  *(_QWORD *)&v329 = v330 + 24;
  v333 = (char *)__p[0];
  if (__p[0])
  {
    v334 = (char *)__p[1];
    v335 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v334 - 160));
      while (v334 != v333);
      v335 = __p[0];
    }
    __p[1] = v333;
    operator delete(v335);
    *(_QWORD *)&v329 = v330 + 24;
  }
  *((_QWORD *)&v329 + 1) = v330;
LABEL_585:
  *a4 = v329;
  v336 = v364;
  if (v364)
  {
    do
    {
      v337 = (_QWORD *)*v336;
      operator delete(v336);
      v336 = v337;
    }
    while (v337);
  }
  v338 = v363[0];
  v363[0] = 0;
  if (v338)
    operator delete(v338);
  v339 = v365;
  if (v365)
  {
    v340 = v366;
    if (v366 != v365)
    {
      do
      {
        v341 = (std::__shared_weak_count *)*((_QWORD *)v340 - 1);
        if (v341)
        {
          v342 = (unint64_t *)&v341->__shared_owners_;
          do
            v343 = __ldaxr(v342);
          while (__stlxr(v343 - 1, v342));
          if (!v343)
          {
            ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
            std::__shared_weak_count::__release_weak(v341);
          }
        }
        v340 -= 12;
      }
      while (v340 != v339);
      v339 = v365;
    }
    operator delete(v339);
  }
  if (v368[0])
    operator delete(v368[0]);
}

void sub_19F204780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char *__p,char *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  std::__shared_weak_count *v59;
  md::MapTileData *v60;
  void **v61;
  void **v62;
  void *v64;
  uint64_t shared_weak_owners;
  void *v66;
  void *v67;
  void *v68;
  char *v69;
  char *v70;
  char *v71;

  v64 = *v62;
  if (*v62)
  {
    shared_weak_owners = v59[32].__shared_weak_owners_;
    v66 = *v62;
    if ((void *)shared_weak_owners != v64)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(shared_weak_owners - 160));
      while ((void *)shared_weak_owners != v64);
      v66 = *v62;
    }
    v59[32].__shared_weak_owners_ = (uint64_t)v64;
    operator delete(v66);
  }
  v67 = *v61;
  if (*v61)
  {
    v59[31].__shared_weak_owners_ = (uint64_t)v67;
    operator delete(v67);
  }
  md::MapTileData::~MapTileData(v60);
  std::__shared_weak_count::~__shared_weak_count(v59);
  operator delete(v68);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  v69 = __p;
  if (__p)
  {
    v70 = a44;
    v71 = __p;
    if (a44 != __p)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v70 - 160));
      while (v70 != v69);
      v71 = __p;
    }
    a44 = v69;
    operator delete(v71);
  }
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a32);
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(&a37);
  if (a40)
    operator delete(a40);
  _Unwind_Resume(a1);
}

BOOL md::ElevatedStrokeLayerDataSource::shouldFilterFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_BYTE *)(a3 + 127) == 1;
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  gdc::LayerDataManager *v12;
  uint64_t *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t *v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  _WORD *v109;
  _WORD *v110;
  uint64_t *v111;
  _WORD *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *i;
  uint64_t *v120;
  uint64_t *v121;
  _QWORD *v122;
  unsigned __int8 *v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  gdc::LayerDataCollector *v127;
  _QWORD *j;
  _QWORD *v129;
  unsigned __int8 *v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  gdc::LayerDataCollector *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t k;
  _QWORD *v139;
  std::__shared_weak_count *v140;
  unint64_t *p_shared_owners;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t m;
  _QWORD *v154;
  uint64_t v155;
  uint64_t n;
  _QWORD *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t ii;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  unint64_t prime;
  int8x8_t v187;
  unint64_t v188;
  uint8x8_t v189;
  uint64_t v190;
  int v191;
  int v192;
  _QWORD *v193;
  unint64_t *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  _QWORD *v202;
  int8x8_t v203;
  unint64_t v204;
  uint8x8_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD **v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  unsigned __int8 *v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  gdc::LayerDataCollector *v233;
  _QWORD *v234;
  _QWORD *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  BOOL v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  unint64_t v256;
  int8x8_t v257;
  unint64_t v258;
  uint8x8_t v259;
  uint64_t v260;
  _BYTE *v261;
  _BYTE *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  __int128 *v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  int v276;
  char v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint8x8_t v287;
  BOOL v288;
  char v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  _QWORD *v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  _QWORD *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  _BYTE *v303;
  _QWORD **v304;
  _QWORD *v305;
  unint64_t v306;
  uint64_t v307;
  float v308;
  float v309;
  _BOOL8 v310;
  unint64_t v311;
  unint64_t v312;
  size_t v313;
  unint64_t v314;
  uint8x8_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  _BYTE *v323;
  _QWORD *v324;
  _QWORD *v325;
  unint64_t v326;
  uint64_t v327;
  _OWORD *v328;
  char *v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  int8x8_t v341;
  unint64_t v342;
  uint8x8_t v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD **v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  unint64_t v353;
  uint64_t v354;
  _OWORD *v355;
  char *v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  int8x8_t v371;
  unint64_t v372;
  uint8x8_t v373;
  uint64_t v374;
  unint64_t v375;
  int8x8_t v376;
  unint64_t v377;
  uint8x8_t v378;
  uint64_t v379;
  char v380;
  _QWORD *v381;
  uint64_t v382;
  std::__shared_weak_count *v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t v386;
  unsigned int v387;
  gdc::LayerDataManager *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  md::LayoutContext *v392;
  md::LayoutContext *v393;
  uint64_t *v394;
  int v395;
  _QWORD *v396;
  uint64_t *v397;
  int v398;
  void *v399;
  char *v400;
  char *v401;
  uint64_t v402;
  char v403[32];
  unint64_t v404;
  _QWORD *v405;
  std::__shared_weak_count *v406;
  void *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  char v411[32];
  unint64_t v412;
  void *v413;
  char *v414;
  char *v415;
  uint64_t v416;
  char v417[32];
  unint64_t v418;
  _QWORD *v419;
  _QWORD *v420;
  void *v421;
  void *v422;
  char v423;
  QuadTile v424;
  _QWORD v425[3];
  _QWORD *v426;
  _QWORD v427[3];
  _QWORD *v428;
  _QWORD v429[3];
  _QWORD *v430;
  uint64_t v431;

  v431 = *MEMORY[0x1E0C80C00];
  v427[0] = &off_1E42D1A20;
  v427[1] = a2;
  v428 = v427;
  v425[0] = &off_1E42D1A68;
  v425[1] = a2;
  v426 = v425;
  v430 = v429;
  v429[0] = &off_1E42D1A68;
  v429[1] = a2;
  std::__function::__func<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0,std::allocator<md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_0>,void ()(void)>::operator()((uint64_t)v427);
  v8 = v426;
  if (v426 == v425)
  {
    v9 = 4;
    v8 = v425;
  }
  else
  {
    if (!v426)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v428;
  if (v428 == v427)
  {
    v11 = 4;
    v10 = v427;
  }
  else
  {
    if (!v428)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  gdc::LayerDataCollector::clear(*(gdc::LayerDataCollector **)(a1 + 128));
  v12 = **(gdc::LayerDataManager ***)(a3 + 8);
  if (!v12)
    goto LABEL_669;
  v13 = *(uint64_t **)a3;
  v14 = *(_BYTE **)(a3 + 24);
  v15 = *((_QWORD *)v12 + 7);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 40);
    v17 = *(_QWORD *)(v15 + 32);
    if (v17 != v16)
    {
      while (*(_WORD *)v17 != 27)
        v17 += 16;
    }
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v17 + 8) + 72))(&v419);
    if ((_BYTE)v419)
      v18 = HIDWORD(v419);
    else
      v18 = 512;
    *(_DWORD *)(a4 + 264) = v18;
  }
  v392 = a2;
  v394 = v13;
  v388 = v12;
  v389 = a3;
  if (*v14)
    v19 = 2;
  else
    v19 = 1;
  *(_BYTE *)(a1 + 216) = v19;
  v396 = (_QWORD *)a4;
  if (!*(_BYTE *)(a1 + 192))
  {
    v26 = *(_QWORD *)(a1 + 136);
    v28 = *(uint64_t **)(v26 + 384);
    v27 = *(uint64_t **)(v26 + 392);
    v397 = v27;
    while (v28 != v27)
    {
      v29 = (_QWORD *)a1;
      v30 = *v28;
      v31 = (_QWORD *)gdc::Registry::storage<md::components::ReferencedAssetInstance>(*v28);
      v32 = gdc::Registry::storage<md::components::NonTiled>(v30);
      v33 = (_QWORD *)v32;
      v34 = v32 + 32;
      v35 = v31[7];
      v36 = v31[8];
      if (*(_QWORD *)(v32 + 64) - *(_QWORD *)(v32 + 56) >= (unint64_t)(v36 - v35))
        v37 = v31 + 4;
      else
        v37 = (_QWORD *)(v32 + 32);
      v38 = v36 != v35 && v31 + 4 == v37;
      if (v38)
      {
        v55 = (unint64_t *)(v31[10] + 16);
        do
        {
          v56 = *(unsigned int *)(v35 + 4);
          v57 = v33[4];
          if (v56 >> 7 < (v33[5] - v57) >> 3)
          {
            v58 = *(_QWORD *)(v57 + 8 * (v56 >> 7));
            if (v58)
            {
              v59 = *(unsigned __int16 *)(v58 + 2 * (v56 & 0x7F));
              v61 = v33[7];
              v60 = v33[8];
              if (v59 < (v60 - v61) >> 3)
              {
                v62 = v61 + 8 * v59;
                if (v62 != v60 && *(_DWORD *)(v62 + 4) == (_DWORD)v56)
                  md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v29, *v55);
              }
            }
          }
          v35 += 8;
          v55 += 12;
        }
        while (v35 != v36);
      }
      if ((_QWORD *)v34 == v37)
      {
        v65 = (unint64_t *)v33[7];
        v64 = (uint64_t *)v33[8];
        while (v65 != (unint64_t *)v64)
        {
          v67 = *((unsigned int *)v65 + 1);
          v68 = v31[4];
          v69 = (v31[5] - v68) >> 3;
          if (v67 >> 7 < v69)
          {
            v70 = *(_QWORD *)(v68 + 8 * (v67 >> 7));
            if (v70)
            {
              v71 = *(unsigned __int16 *)(v70 + 2 * (v67 & 0x7F));
              v73 = v31[7];
              v72 = v31[8];
              v74 = (v72 - v73) >> 3;
              if (v74 > v71)
              {
                v75 = v73 + 8 * v71;
                if (v75 != v72 && *(_DWORD *)(v75 + 4) == (_DWORD)v67)
                {
                  v77 = *v65;
                  v78 = *v65 >> 39;
                  if (v78 < v69
                    && (v79 = *(_QWORD *)(v68 + 8 * v78)) != 0
                    && (v80 = *(unsigned __int16 *)(v79 + 2 * (HIDWORD(v77) & 0x7F)), v74 > v80)
                    && ((v81 = HIDWORD(v77), v82 = v73 + 8 * v80, v82 != v72)
                      ? (v83 = *(_DWORD *)(v82 + 4) == (_DWORD)v81)
                      : (v83 = 0),
                        v83))
                  {
                    v66 = v31[10] + 96 * v80;
                  }
                  else
                  {
                    v66 = v31[11];
                  }
                  md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v29, *(_QWORD *)(v66 + 16));
                }
              }
            }
          }
          ++v65;
        }
      }
      v39 = (_QWORD *)gdc::Registry::storage<md::components::Asset>(v30);
      v40 = gdc::Registry::storage<md::components::NonTiled>(v30);
      v41 = (_QWORD *)v40;
      v42 = v40 + 32;
      v44 = v39[7];
      v43 = v39[8];
      if (*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56) >= (unint64_t)(v43 - v44))
        v45 = v39 + 4;
      else
        v45 = (_QWORD *)(v40 + 32);
      if (v43 != v44 && v39 + 4 == v45)
      {
        v46 = (unint64_t *)v39[10];
        do
        {
          v47 = *(unsigned int *)(v44 + 4);
          v48 = v41[4];
          if (v47 >> 7 < (v41[5] - v48) >> 3)
          {
            v49 = *(_QWORD *)(v48 + 8 * (v47 >> 7));
            if (v49)
            {
              v50 = *(unsigned __int16 *)(v49 + 2 * (v47 & 0x7F));
              v52 = v41[7];
              v51 = v41[8];
              if (v50 < (v51 - v52) >> 3)
              {
                v53 = v52 + 8 * v50;
                if (v53 != v51 && *(_DWORD *)(v53 + 4) == (_DWORD)v47)
                  md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v29, *v46);
              }
            }
          }
          v46 += 9;
          v44 += 8;
        }
        while (v44 != v43);
      }
      a4 = (uint64_t)v396;
      a1 = (uint64_t)v29;
      if ((_QWORD *)v42 == v45)
      {
        v85 = (unint64_t *)v41[7];
        v84 = (uint64_t *)v41[8];
        while (v85 != (unint64_t *)v84)
        {
          v87 = *((unsigned int *)v85 + 1);
          v88 = v39[4];
          v89 = (v39[5] - v88) >> 3;
          if (v87 >> 7 < v89)
          {
            v90 = *(_QWORD *)(v88 + 8 * (v87 >> 7));
            if (v90)
            {
              v91 = *(unsigned __int16 *)(v90 + 2 * (v87 & 0x7F));
              v93 = v39[7];
              v92 = v39[8];
              v94 = (v92 - v93) >> 3;
              if (v94 > v91)
              {
                v95 = v93 + 8 * v91;
                if (v95 != v92 && *(_DWORD *)(v95 + 4) == (_DWORD)v87)
                {
                  v97 = *v85;
                  v98 = *v85 >> 39;
                  if (v98 < v89
                    && (v99 = *(_QWORD *)(v88 + 8 * v98)) != 0
                    && (v100 = *(unsigned __int16 *)(v99 + 2 * (HIDWORD(v97) & 0x7F)), v94 > v100)
                    && ((v101 = HIDWORD(v97), v102 = v93 + 8 * v100, v102 != v92)
                      ? (v103 = *(_DWORD *)(v102 + 4) == (_DWORD)v101)
                      : (v103 = 0),
                        v103))
                  {
                    v86 = (unint64_t *)(v39[10] + 72 * v100);
                  }
                  else
                  {
                    v86 = (unint64_t *)v39[11];
                  }
                  md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_3::operator()(v29, *v86);
                }
              }
            }
          }
          ++v85;
        }
      }
      ++v28;
      v27 = v397;
    }
  }
  v20 = *v394;
  if ((v21 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  if (v22 == v23)
  {
    v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 33)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_120;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 33)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_120:
  v106 = *v24;
  v105 = v24 + 1;
  v104 = (_QWORD *)v106;
  if ((uint64_t *)v106 != v105)
  {
    do
    {
      md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(a1, (_QWORD *)v104[4], (std::__shared_weak_count *)v104[5]);
      v113 = (uint64_t *)v104[1];
      if (v113)
      {
        do
        {
          v114 = v113;
          v113 = (uint64_t *)*v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          v114 = (uint64_t *)v104[2];
          v38 = *v114 == (_QWORD)v104;
          v104 = v114;
        }
        while (!v38);
      }
      v104 = v114;
    }
    while (v114 != v105);
  }
  v107 = *v394;
  if ((v108 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v109 = *(_WORD **)(v107 + 48);
  v110 = *(_WORD **)(v107 + 56);
  v111 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v109 != v110)
  {
    v112 = v109;
    while (*v112 != 54)
    {
      v112 += 16;
      if (v112 == v110)
        goto LABEL_140;
    }
    if (v112 == v110)
    {
      v111 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v109 != 54)
      {
        v109 += 16;
        if (v109 == v110)
        {
          v109 = v110;
          break;
        }
      }
      v111 = (uint64_t *)(v109 + 4);
    }
  }
LABEL_140:
  v117 = *v111;
  v115 = v111 + 1;
  v116 = (_QWORD *)v117;
  if ((uint64_t *)v117 != v115)
  {
    do
    {
      md::IdentifiedResourceLogic::runBeforeLayoutAtVariableRate(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::ResolvedDependencies const&,md::IdentifiedResourceContext &)::$_2::operator()(a1, (_QWORD *)v116[4], (std::__shared_weak_count *)v116[5]);
      v120 = (uint64_t *)v116[1];
      if (v120)
      {
        do
        {
          v121 = v120;
          v120 = (uint64_t *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          v121 = (uint64_t *)v116[2];
          v38 = *v121 == (_QWORD)v116;
          v116 = v121;
        }
        while (!v38);
      }
      v116 = v121;
    }
    while (v121 != v115);
  }
  v118 = *(_QWORD *)(v389 + 32);
  if (v118)
  {
    for (i = *(_QWORD **)(v118 + 16); i; i = (_QWORD *)*i)
    {
      v122 = (_QWORD *)i[2];
      v413 = v417;
      v414 = v417;
      v415 = v417;
      v416 = 32;
      v418 = 0;
      v419 = v122;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v413, v417, (char *)&v419, (char *)&v420);
      v419 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v413, v414, (char *)&v419, (char *)&v420);
      v123 = (unsigned __int8 *)v413;
      v124 = v414 - (_BYTE *)v413;
      if (v414 == v413)
      {
        v125 = 0;
      }
      else
      {
        v125 = 0;
        if (v124 <= 1)
          v124 = 1;
        do
        {
          v126 = *v123++;
          v125 ^= (v125 << 6) - 0x61C8864680B583EBLL + (v125 >> 2) + v126;
          --v124;
        }
        while (v124);
      }
      v418 = v125;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v419, 0, 0x37u, (uint64_t)&v413, -1073741827);
      if (v413 != v415)
        free(v413);
      v127 = *(gdc::LayerDataCollector **)(a1 + 120);
      *(_WORD *)&v424._type = 255;
      *(_QWORD *)&v424._yIdx = 0;
      gdc::LayerDataCollector::addDataKey(v127, (const gdc::LayerDataRequestKey *)&v419, &v424);
      if (v423)
        v423 = 0;
      if (v421 != v422)
        free(v421);
    }
    for (j = *(_QWORD **)(v118 + 56); j; j = (_QWORD *)*j)
    {
      v129 = (_QWORD *)j[2];
      v407 = v411;
      v408 = v411;
      v409 = v411;
      v410 = 32;
      v412 = 0;
      v419 = v129;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v407, v411, (char *)&v419, (char *)&v420);
      v419 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v407, v408, (char *)&v419, (char *)&v420);
      v130 = (unsigned __int8 *)v407;
      v131 = v408 - (_BYTE *)v407;
      if (v408 == v407)
      {
        v132 = 0;
      }
      else
      {
        v132 = 0;
        if (v131 <= 1)
          v131 = 1;
        do
        {
          v133 = *v130++;
          v132 ^= (v132 << 6) - 0x61C8864680B583EBLL + (v132 >> 2) + v133;
          --v131;
        }
        while (v131);
      }
      v412 = v132;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v419, 0, 0x38u, (uint64_t)&v407, -1073741827);
      if (v407 != v409)
        free(v407);
      v134 = *(gdc::LayerDataCollector **)(a1 + 128);
      *(_WORD *)&v424._type = 255;
      *(_QWORD *)&v424._yIdx = 0;
      gdc::LayerDataCollector::addDataKey(v134, (const gdc::LayerDataRequestKey *)&v419, &v424);
      if (v423)
        v423 = 0;
      if (v421 != v422)
        free(v421);
    }
  }
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(a1 + 120));
  md::LayoutContext::frameState(v392);
  v386 = (uint64_t)(*(double *)(v135 + 88) * 1000.0);
  gdc::LayerDataManager::createDataRequests(v388, *(gdc::LayerDataCollector **)(a1 + 120), v386);
  gdc::LayerDataManager::getData(v388, *(gdc::LayerDataCollector **)(a1 + 120));
  if (*(_QWORD *)(a4 + 248))
  {
    v136 = *(_QWORD **)(a4 + 240);
    while (v136)
    {
      v139 = v136;
      v136 = (_QWORD *)*v136;
      v140 = (std::__shared_weak_count *)v139[4];
      if (v140)
      {
        p_shared_owners = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(p_shared_owners);
        while (__stlxr(v142 - 1, p_shared_owners));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      operator delete(v139);
    }
    *(_QWORD *)(a4 + 240) = 0;
    v137 = *(_QWORD *)(a4 + 232);
    if (v137)
    {
      for (k = 0; k != v137; ++k)
        *(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * k) = 0;
    }
    *(_QWORD *)(a4 + 248) = 0;
  }
  else
  {
    v137 = *(_QWORD *)(a4 + 232);
  }
  v143 = *(_QWORD *)a4;
  v144 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = *(_QWORD *)(a4 + 224);
  *(_QWORD *)(a4 + 8) = v137;
  *(_QWORD *)(a4 + 224) = v143;
  *(_QWORD *)(a4 + 232) = v144;
  v145 = *(_QWORD *)(a4 + 16);
  v146 = (_QWORD *)(a4 + 240);
  v385 = (_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a4 + 240);
  *(_QWORD *)(a4 + 240) = v145;
  v147 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 248) = v147;
  v148 = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a4 + 256);
  *(_DWORD *)(a4 + 256) = v148;
  if (v147)
  {
    v149 = *(_QWORD *)(v145 + 8);
    if ((v144 & (v144 - 1)) != 0)
    {
      if (v149 >= v144)
        v149 %= v144;
    }
    else
    {
      v149 &= v144 - 1;
    }
    *(_QWORD *)(v143 + 8 * v149) = v146;
  }
  if (*(_QWORD *)(a4 + 104))
  {
    v150 = *(_QWORD **)(a4 + 96);
    if (v150)
    {
      do
      {
        v151 = (_QWORD *)*v150;
        operator delete(v150);
        v150 = v151;
      }
      while (v151);
    }
    *(_QWORD *)(a4 + 96) = 0;
    v152 = *(_QWORD *)(a4 + 88);
    if (v152)
    {
      for (m = 0; m != v152; ++m)
        *(_QWORD *)(*(_QWORD *)(a4 + 80) + 8 * m) = 0;
    }
    *(_QWORD *)(a4 + 104) = 0;
  }
  *(_QWORD *)(a4 + 168) = *(_QWORD *)(a4 + 160);
  v393 = (md::LayoutContext *)(a4 + 80);
  if (*(_QWORD *)(a4 + 208))
  {
    v154 = *(_QWORD **)(a4 + 200);
    while (v154)
    {
      v157 = v154;
      v154 = (_QWORD *)*v154;
      v158 = (std::__shared_weak_count *)v157[4];
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      operator delete(v157);
    }
    *(_QWORD *)(a4 + 200) = 0;
    v155 = *(_QWORD *)(a4 + 192);
    if (v155)
    {
      for (n = 0; n != v155; ++n)
        *(_QWORD *)(*(_QWORD *)(a4 + 184) + 8 * n) = 0;
    }
    *(_QWORD *)(a4 + 208) = 0;
  }
  else
  {
    v155 = *(_QWORD *)(a4 + 192);
  }
  v162 = (_QWORD *)(a4 + 200);
  v161 = *(_QWORD *)(a4 + 200);
  v163 = *(_QWORD *)(a4 + 40);
  v164 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a4 + 184);
  *(_QWORD *)(a4 + 48) = v155;
  *(_QWORD *)(a4 + 184) = v163;
  *(_QWORD *)(a4 + 192) = v164;
  v165 = *(_QWORD *)(a4 + 56);
  v166 = *(_QWORD *)(a4 + 64);
  *(_QWORD *)(a4 + 56) = v161;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 200) = v165;
  *(_QWORD *)(a4 + 208) = v166;
  v167 = *(_DWORD *)(a4 + 72);
  *(_DWORD *)(a4 + 72) = *(_DWORD *)(a4 + 216);
  *(_DWORD *)(a4 + 216) = v167;
  if (v166)
  {
    v168 = *(_QWORD *)(v165 + 8);
    if ((v164 & (v164 - 1)) != 0)
    {
      if (v168 >= v164)
        v168 %= v164;
    }
    else
    {
      v168 &= v164 - 1;
    }
    *(_QWORD *)(v163 + 8 * v168) = v162;
  }
  v384 = (_QWORD *)(a4 + 120);
  if (*(_QWORD *)(a4 + 144))
  {
    v169 = *(_QWORD **)(a4 + 136);
    if (v169)
    {
      do
      {
        v170 = (_QWORD *)*v169;
        operator delete(v169);
        v169 = v170;
      }
      while (v170);
    }
    *(_QWORD *)(a4 + 136) = 0;
    v171 = *(_QWORD *)(a4 + 128);
    if (v171)
    {
      for (ii = 0; ii != v171; ++ii)
        *(_QWORD *)(*v384 + 8 * ii) = 0;
    }
    *(_QWORD *)(a4 + 144) = 0;
  }
  v173 = *(_QWORD *)(a1 + 120);
  v174 = *(_QWORD *)(v173 + 24);
  v175 = *(_QWORD *)(v173 + 32);
  if (v174 != v175)
  {
    while (*(_WORD *)v174 != 55)
    {
      v174 += 32;
      if (v174 == v175)
        goto LABEL_238;
    }
  }
  if (v174 == v175)
  {
LABEL_238:
    v177 = 0;
    v176 = 0;
    goto LABEL_237;
  }
  v177 = *(_QWORD *)(v174 + 8);
  v176 = *(_QWORD *)(v174 + 16);
  if (v177 == v176)
  {
LABEL_237:
    v178 = 0;
    goto LABEL_252;
  }
  v179 = v176 - v177 - 144;
  if (v179 <= 0x8F)
  {
    v178 = 0;
    v180 = v177;
    goto LABEL_249;
  }
  v181 = 0;
  v182 = 0;
  v183 = v179 / 0x90 + 1;
  v184 = (_DWORD *)(v177 + 272);
  v185 = v183 & 0x3FFFFFFFFFFFFFELL;
  do
  {
    if (*(v184 - 36) == 3)
      ++v181;
    if (*v184 == 3)
      ++v182;
    v184 += 72;
    v185 -= 2;
  }
  while (v185);
  v178 = v182 + v181;
  if (v183 != (v183 & 0x3FFFFFFFFFFFFFELL))
  {
    v180 = v177 + 144 * (v183 & 0x3FFFFFFFFFFFFFELL);
    do
    {
LABEL_249:
      if (*(_DWORD *)(v180 + 128) == 3)
        ++v178;
      v180 += 144;
    }
    while (v180 != v176);
  }
LABEL_252:
  prime = vcvtps_u32_f32((float)v178 / *(float *)(a4 + 72));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v390 = a4 + 40;
  v187 = *(int8x8_t *)(a4 + 48);
  if (prime > *(_QWORD *)&v187)
    goto LABEL_257;
  if (prime < *(_QWORD *)&v187)
  {
    v188 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 64) / *(float *)(a4 + 72));
    if (*(_QWORD *)&v187 < 3uLL || (v189 = (uint8x8_t)vcnt_s8(v187), v189.i16[0] = vaddlv_u8(v189), v189.u32[0] > 1uLL))
    {
      v188 = std::__next_prime(v188);
    }
    else
    {
      v190 = 1 << -(char)__clz(v188 - 1);
      if (v188 >= 2)
        v188 = v190;
    }
    if (prime <= v188)
      prime = v188;
    if (prime < *(_QWORD *)&v187)
LABEL_257:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v390, prime);
  }
  if (v177 != v176)
  {
    v398 = 0;
    v395 = 0;
    while (1)
    {
      v192 = *(_DWORD *)(v177 + 128);
      if (v192 == 2)
      {
        if ((v395 & 1) == 0)
        {
          v395 = 1;
          goto LABEL_273;
        }
LABEL_270:
        v191 = v398;
        if ((v398 & 1) == 0)
          v191 = 1;
        v398 = v191;
        goto LABEL_273;
      }
      if (v192 != 3)
        goto LABEL_270;
      v193 = *(_QWORD **)(v177 + 112);
      v194 = *(unint64_t **)(v177 + 120);
      v405 = v193;
      v406 = (std::__shared_weak_count *)v194;
      if (v194)
      {
        v195 = v194 + 1;
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
        v197 = v193[21];
        do
          v198 = __ldxr(v195);
        while (__stxr(v198 + 1, v195));
      }
      else
      {
        v197 = v193[21];
      }
      v419 = (_QWORD *)v197;
      v420 = v193;
      v421 = v194;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::shared_ptr<md::AssetData>>>(v390, v197, (uint64_t)&v419);
      v199 = (std::__shared_weak_count *)v421;
      if (v421)
      {
        v200 = (unint64_t *)((char *)v421 + 8);
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      v202 = v405;
      v203 = (int8x8_t)v396[24];
      if (!*(_QWORD *)&v203)
        goto LABEL_310;
      v204 = v405[21];
      v205 = (uint8x8_t)vcnt_s8(v203);
      v205.i16[0] = vaddlv_u8(v205);
      if (v205.u32[0] > 1uLL)
      {
        v206 = v405[21];
        v207 = v396;
        if (v204 >= *(_QWORD *)&v203)
          v206 = v204 % *(_QWORD *)&v203;
      }
      else
      {
        v206 = (*(_QWORD *)&v203 - 1) & v204;
        v207 = v396;
      }
      v208 = v207[23];
      v209 = *(_QWORD ***)(v208 + 8 * v206);
      if (!v209 || (v210 = *v209) == 0)
      {
LABEL_310:
        if (!v405[42])
          goto LABEL_349;
        goto LABEL_311;
      }
      v211 = *(_QWORD *)&v203 - 1;
      if (v205.u32[0] < 2uLL)
      {
        while (1)
        {
          v212 = v210[1];
          if (v212 == v204)
          {
            if (v210[2] == v204)
              goto LABEL_317;
          }
          else if ((v212 & v211) != v206)
          {
            goto LABEL_310;
          }
          v210 = (_QWORD *)*v210;
          if (!v210)
            goto LABEL_310;
        }
      }
      while (1)
      {
        v213 = v210[1];
        if (v213 == v204)
          break;
        if (v213 >= *(_QWORD *)&v203)
          v213 %= *(_QWORD *)&v203;
        if (v213 != v206)
          goto LABEL_310;
LABEL_305:
        v210 = (_QWORD *)*v210;
        if (!v210)
          goto LABEL_310;
      }
      if (v210[2] != v204)
        goto LABEL_305;
LABEL_317:
      if (v205.u32[0] > 1uLL)
      {
        if (v204 >= *(_QWORD *)&v203)
          v204 %= *(_QWORD *)&v203;
      }
      else
      {
        v204 &= v211;
      }
      v217 = *(_QWORD **)(v208 + 8 * v204);
      do
      {
        v218 = v217;
        v217 = (_QWORD *)*v217;
      }
      while (v217 != v210);
      if (v218 == v162)
        goto LABEL_334;
      v219 = v218[1];
      if (v205.u32[0] > 1uLL)
      {
        if (v219 >= *(_QWORD *)&v203)
          v219 %= *(_QWORD *)&v203;
      }
      else
      {
        v219 &= v211;
      }
      if (v219 != v204)
      {
LABEL_334:
        if (!*v210)
          goto LABEL_335;
        v220 = *(_QWORD *)(*v210 + 8);
        if (v205.u32[0] > 1uLL)
        {
          if (v220 >= *(_QWORD *)&v203)
            v220 %= *(_QWORD *)&v203;
        }
        else
        {
          v220 &= v211;
        }
        if (v220 != v204)
LABEL_335:
          *(_QWORD *)(v208 + 8 * v204) = 0;
      }
      v221 = *v210;
      if (*v210)
      {
        v222 = *(_QWORD *)(v221 + 8);
        if (v205.u32[0] > 1uLL)
        {
          if (v222 >= *(_QWORD *)&v203)
            v222 %= *(_QWORD *)&v203;
        }
        else
        {
          v222 &= v211;
        }
        if (v222 != v204)
        {
          *(_QWORD *)(v396[23] + 8 * v222) = v218;
          v221 = *v210;
        }
      }
      *v218 = v221;
      *v210 = 0;
      --v396[26];
      v223 = (std::__shared_weak_count *)v210[4];
      if (v223)
      {
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          v383 = v223;
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v383);
        }
      }
      operator delete(v210);
      if (!v202[42])
      {
LABEL_349:
        v226 = (_QWORD *)v202[32];
        v227 = v202 + 33;
        if (v226 != v227)
        {
          do
          {
            v228 = (_QWORD *)v226[4];
            v399 = v403;
            v400 = v403;
            v401 = v403;
            v402 = 32;
            v404 = 0;
            v419 = v228;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v399, v403, (char *)&v419, (char *)&v420);
            v419 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v399, v400, (char *)&v419, (char *)&v420);
            v229 = (unsigned __int8 *)v399;
            v230 = v400 - (_BYTE *)v399;
            if (v400 == v399)
            {
              v231 = 0;
            }
            else
            {
              v231 = 0;
              if (v230 <= 1)
                v230 = 1;
              do
              {
                v232 = *v229++;
                v231 ^= (v231 << 6) - 0x61C8864680B583EBLL + (v231 >> 2) + v232;
                --v230;
              }
              while (v230);
            }
            v404 = v231;
            gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v419, 0, 0x38u, (uint64_t)&v399, -1073741827);
            if (v399 != v401)
              free(v399);
            v233 = *(gdc::LayerDataCollector **)(a1 + 128);
            *(_WORD *)&v424._type = 255;
            *(_QWORD *)&v424._yIdx = 0;
            gdc::LayerDataCollector::addDataKey(v233, (const gdc::LayerDataRequestKey *)&v419, &v424);
            if (v423)
              v423 = 0;
            if (v421 != v422)
              free(v421);
            v234 = (_QWORD *)v226[1];
            if (v234)
            {
              do
              {
                v235 = v234;
                v234 = (_QWORD *)*v234;
              }
              while (v234);
            }
            else
            {
              do
              {
                v235 = (_QWORD *)v226[2];
                v38 = *v235 == (_QWORD)v226;
                v226 = v235;
              }
              while (!v38);
            }
            v226 = v235;
          }
          while (v235 != v227);
        }
      }
LABEL_311:
      v214 = v406;
      if (v406)
      {
        v215 = (unint64_t *)&v406->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      a4 = (uint64_t)v396;
LABEL_273:
      v177 += 144;
      if (v177 == v176)
        goto LABEL_371;
    }
  }
  v395 = 0;
  v398 = 0;
LABEL_371:
  gdc::LayerDataCollector::sortIndexList(*(unsigned __int8 ***)(a1 + 128));
  gdc::LayerDataManager::createDataRequests(v388, *(gdc::LayerDataCollector **)(a1 + 128), v386);
  gdc::LayerDataManager::getData(v388, *(gdc::LayerDataCollector **)(a1 + 128));
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v387 = objc_msgSend(v236, "daVinciShowMissingMaterials");
  v237 = (uint64_t)v393;

  v238 = *(_QWORD *)(a1 + 128);
  v239 = *(_QWORD *)(v238 + 24);
  v240 = *(_QWORD *)(v238 + 32);
  if (v239 != v240)
  {
    while (*(_WORD *)v239 != 56)
    {
      v239 += 32;
      if (v239 == v240)
        goto LABEL_399;
    }
  }
  if (v239 == v240)
  {
LABEL_399:
    v241 = 0;
    v242 = 0;
    v244 = 0;
    v243 = 0;
    v255 = 1;
  }
  else
  {
    v242 = *(_QWORD *)(v239 + 8);
    v241 = *(_QWORD *)(v239 + 16);
    if (v242 == v241)
    {
      v244 = 0;
      v243 = 0;
      v255 = 1;
      v241 = *(_QWORD *)(v239 + 8);
    }
    else
    {
      v243 = 0;
      v244 = 0;
      v245 = *(_QWORD *)(v239 + 8);
      do
      {
        v246 = *(_DWORD *)(v245 + 128);
        if (v246 == 2)
        {
          v244 += v387;
        }
        else if (v246 == 3)
        {
          v247 = *(_QWORD *)(v245 + 112);
          v248 = *(std::__shared_weak_count **)(v245 + 120);
          if (v248)
          {
            v249 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldxr(v249);
            while (__stxr(v250 + 1, v249));
            v251 = *(_QWORD *)(v247 + 176) == 0;
            if (*(_QWORD *)(v247 + 176))
              v252 = 0;
            else
              v252 = v387;
            v244 += v252;
            if (!v251)
              ++v243;
            do
              v253 = __ldaxr(v249);
            while (__stlxr(v253 - 1, v249));
            if (!v253)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }
          else
          {
            if (*(_QWORD *)(v247 + 176))
              v254 = 0;
            else
              v254 = v387;
            v244 += v254;
            if (*(_QWORD *)(v247 + 176))
              ++v243;
          }
        }
        v245 += 144;
      }
      while (v245 != v241);
      v255 = 0;
      v237 = (uint64_t)v393;
    }
  }
  v256 = vcvtps_u32_f32((float)v243 / *(float *)(a4 + 32));
  if (v256 == 1)
  {
    v256 = 2;
  }
  else if ((v256 & (v256 - 1)) != 0)
  {
    v256 = std::__next_prime(v256);
  }
  v257 = *(int8x8_t *)(a4 + 8);
  if (v256 > *(_QWORD *)&v257)
    goto LABEL_407;
  if (v256 < *(_QWORD *)&v257)
  {
    v258 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
    if (*(_QWORD *)&v257 < 3uLL || (v259 = (uint8x8_t)vcnt_s8(v257), v259.i16[0] = vaddlv_u8(v259), v259.u32[0] > 1uLL))
    {
      v258 = std::__next_prime(v258);
    }
    else
    {
      v260 = 1 << -(char)__clz(v258 - 1);
      if (v258 >= 2)
        v258 = v260;
    }
    if (v256 <= v258)
      v256 = v258;
    if (v256 < *(_QWORD *)&v257)
LABEL_407:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, v256);
  }
  v261 = *(_BYTE **)(a4 + 160);
  if (v244 > (uint64_t)(*(_QWORD *)(a4 + 176) - (_QWORD)v261) >> 3)
  {
    if (v244 >> 61)
      abort();
    v262 = *(_BYTE **)(a4 + 168);
    v263 = (char *)operator new(8 * v244);
    v264 = v262 - v261;
    v265 = &v263[(v262 - v261) & 0xFFFFFFFFFFFFFFF8];
    v266 = v265;
    if (v262 == v261)
      goto LABEL_428;
    if ((unint64_t)(v264 - 8) >= 0x58)
    {
      v266 = &v263[(v262 - v261) & 0xFFFFFFFFFFFFFFF8];
      if (v262 - v263 - (v264 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v267 = v264 >> 3;
        v268 = ((unint64_t)(v264 - 8) >> 3) + 1;
        v269 = &v263[8 * v267 - 16];
        v270 = (__int128 *)(v262 - 16);
        v271 = v268 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v272 = *v270;
          *((_OWORD *)v269 - 1) = *(v270 - 1);
          *(_OWORD *)v269 = v272;
          v269 -= 32;
          v270 -= 2;
          v271 -= 4;
        }
        while (v271);
        v266 = &v265[-8 * (v268 & 0x3FFFFFFFFFFFFFFCLL)];
        v262 -= 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
        if (v268 == (v268 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_428:
          *(_QWORD *)(a4 + 160) = v266;
          *(_QWORD *)(a4 + 168) = v265;
          *(_QWORD *)(a4 + 176) = &v263[8 * v244];
          if (v261)
            operator delete(v261);
          goto LABEL_430;
        }
      }
    }
    else
    {
      v266 = &v263[(v262 - v261) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v273 = *((_QWORD *)v262 - 1);
      v262 -= 8;
      *((_QWORD *)v266 - 1) = v273;
      v266 -= 8;
    }
    while (v262 != v261);
    goto LABEL_428;
  }
LABEL_430:
  if ((v255 & 1) == 0)
  {
    v391 = v241;
    do
    {
      v280 = *(_DWORD *)(v242 + 128);
      if (v280 != 3)
      {
        v288 = v280 == 2;
        v289 = v387 ^ 1;
        if (!v288)
          v289 = 1;
        if ((v289 & 1) != 0)
        {
          v275 = !v288;
          v276 = v395;
          v277 = v275 | v395;
          v278 = v398;
          if ((v398 & 1) != 0)
            v279 = v398;
          else
            v279 = 1;
          if ((v277 & 1) == 0)
            v276 = 1;
          v395 = v276;
          if ((v277 & 1) != 0)
            v278 = v279;
          v398 = v278;
          goto LABEL_445;
        }
        v290 = **(_QWORD **)(v242 + 16);
        v292 = *(char **)(a4 + 168);
        v291 = *(_QWORD *)(a4 + 176);
        if ((unint64_t)v292 < v291)
        {
          *(_QWORD *)v292 = v290;
          v241 = v391;
          *(_QWORD *)(a4 + 168) = v292 + 8;
          goto LABEL_445;
        }
        v298 = *(char **)(a4 + 160);
        v299 = (v292 - v298) >> 3;
        v300 = v299 + 1;
        if ((unint64_t)(v299 + 1) >> 61)
          abort();
        v301 = v291 - (_QWORD)v298;
        if (v301 >> 2 > v300)
          v300 = v301 >> 2;
        if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8)
          v302 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v302 = v300;
        if (v302)
        {
          if (v302 >> 61)
            goto LABEL_677;
          v303 = operator new(8 * v302);
        }
        else
        {
          v303 = 0;
        }
        v324 = &v303[8 * v299];
        *v324 = v290;
        v325 = v324 + 1;
        if (v292 == v298)
        {
          a4 = (uint64_t)v396;
          v241 = v391;
        }
        else
        {
          v326 = v292 - 8 - v298;
          v241 = v391;
          if (v326 < 0x58)
          {
            a4 = (uint64_t)v396;
            goto LABEL_527;
          }
          a4 = (uint64_t)v396;
          if ((unint64_t)(v298 - v303) < 0x20)
            goto LABEL_687;
          v327 = (v326 >> 3) + 1;
          v328 = &v303[8 * v299 - 16];
          v329 = v292 - 16;
          v330 = v327 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v331 = *(_OWORD *)v329;
            *(v328 - 1) = *((_OWORD *)v329 - 1);
            *v328 = v331;
            v328 -= 2;
            v329 -= 32;
            v330 -= 4;
          }
          while (v330);
          v324 -= v327 & 0x3FFFFFFFFFFFFFFCLL;
          v292 -= 8 * (v327 & 0x3FFFFFFFFFFFFFFCLL);
          if (v327 != (v327 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_687:
            do
            {
LABEL_527:
              v332 = *((_QWORD *)v292 - 1);
              v292 -= 8;
              *--v324 = v332;
            }
            while (v292 != v298);
          }
        }
        *(_QWORD *)(a4 + 160) = v324;
        *(_QWORD *)(a4 + 168) = v325;
        *(_QWORD *)(a4 + 176) = &v303[8 * v302];
        if (v298)
          operator delete(v298);
        v237 = (uint64_t)v393;
        *(_QWORD *)(a4 + 168) = v325;
        goto LABEL_445;
      }
      v281 = *(_QWORD *)(v242 + 112);
      v282 = *(std::__shared_weak_count **)(v242 + 120);
      *(_QWORD *)&v424._type = v281;
      *(_QWORD *)&v424._xIdx = v282;
      if (v282)
      {
        v283 = (unint64_t *)&v282->__shared_owners_;
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
      }
      if (!*(_QWORD *)(v281 + 176))
      {
        if (!v387)
          goto LABEL_624;
        v293 = (_QWORD *)a4;
        v294 = *(_QWORD *)(v281 + 168);
        v296 = (char *)v293[21];
        v295 = v293[22];
        if ((unint64_t)v296 < v295)
        {
          *(_QWORD *)v296 = v294;
          v297 = v296 + 8;
          a4 = (uint64_t)v293;
          v237 = (uint64_t)v393;
          v293[21] = v297;
          goto LABEL_624;
        }
        v317 = (char *)v293[20];
        v318 = (v296 - v317) >> 3;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 61)
          abort();
        v320 = v295 - (_QWORD)v317;
        if (v320 >> 2 > v319)
          v319 = v320 >> 2;
        if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8)
          v321 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v321 = v319;
        if (!v321)
        {
          v323 = 0;
          goto LABEL_581;
        }
        if (!(v321 >> 61))
        {
          v322 = v321;
          v323 = operator new(8 * v321);
          v321 = v322;
LABEL_581:
          v351 = &v323[8 * v318];
          *v351 = v294;
          v352 = v351 + 1;
          if (v296 == v317)
          {
            a4 = (uint64_t)v396;
          }
          else
          {
            v353 = v296 - 8 - v317;
            a4 = (uint64_t)v396;
            if (v353 < 0x58)
              goto LABEL_688;
            if ((unint64_t)(v317 - v323) < 0x20)
              goto LABEL_688;
            v354 = (v353 >> 3) + 1;
            v355 = &v323[8 * v318 - 16];
            v356 = v296 - 16;
            v357 = v354 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v358 = *(_OWORD *)v356;
              *(v355 - 1) = *((_OWORD *)v356 - 1);
              *v355 = v358;
              v355 -= 2;
              v356 -= 32;
              v357 -= 4;
            }
            while (v357);
            v351 -= v354 & 0x3FFFFFFFFFFFFFFCLL;
            v296 -= 8 * (v354 & 0x3FFFFFFFFFFFFFFCLL);
            if (v354 != (v354 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_688:
              do
              {
                v359 = *((_QWORD *)v296 - 1);
                v296 -= 8;
                *--v351 = v359;
              }
              while (v296 != v317);
            }
          }
          *(_QWORD *)(a4 + 160) = v351;
          *(_QWORD *)(a4 + 168) = v352;
          *(_QWORD *)(a4 + 176) = &v323[8 * v321];
          if (v317)
            operator delete(v317);
          v241 = v391;
          v237 = (uint64_t)v393;
          *(_QWORD *)(a4 + 168) = v352;
          goto LABEL_624;
        }
LABEL_677:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v285 = *(_QWORD *)(v281 + 168);
      v286 = *(_QWORD *)(a4 + 8);
      if (!v286)
        goto LABEL_490;
      v287 = (uint8x8_t)vcnt_s8((int8x8_t)v286);
      v287.i16[0] = vaddlv_u8(v287);
      if (v287.u32[0] > 1uLL)
      {
        v237 = *(_QWORD *)(v281 + 168);
        if (v285 >= v286)
          v237 = v285 % v286;
      }
      else
      {
        v237 = (v286 - 1) & v285;
      }
      v304 = *(_QWORD ***)(*(_QWORD *)a4 + 8 * v237);
      if (!v304 || (v305 = *v304) == 0)
      {
LABEL_490:
        v305 = operator new(0x28uLL);
        v419 = v305;
        v420 = v385;
        *v305 = 0;
        v305[1] = v285;
        v305[3] = 0;
        v305[4] = 0;
        v305[2] = v285;
        LOBYTE(v421) = 1;
        v308 = (float)(unint64_t)(*(_QWORD *)(a4 + 24) + 1);
        v309 = *(float *)(a4 + 32);
        if (!v286 || (float)(v309 * (float)v286) < v308)
        {
          v310 = (v286 & (v286 - 1)) != 0;
          if (v286 < 3)
            v310 = 1;
          v311 = v310 | (2 * v286);
          v312 = vcvtps_u32_f32(v308 / v309);
          if (v311 <= v312)
            v313 = v312;
          else
            v313 = v311;
          if (v313 == 1)
          {
            v313 = 2;
          }
          else if ((v313 & (v313 - 1)) != 0)
          {
            v313 = std::__next_prime(v313);
            v286 = *(_QWORD *)(a4 + 8);
          }
          if (v313 > v286)
            goto LABEL_502;
          if (v313 < v286)
          {
            v314 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
            if (v286 < 3
              || (v315 = (uint8x8_t)vcnt_s8((int8x8_t)v286), v315.i16[0] = vaddlv_u8(v315), v315.u32[0] > 1uLL))
            {
              v314 = std::__next_prime(v314);
            }
            else
            {
              v316 = 1 << -(char)__clz(v314 - 1);
              if (v314 >= 2)
                v314 = v316;
            }
            if (v313 <= v314)
              v313 = v314;
            if (v313 < v286)
LABEL_502:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a4, v313);
          }
          v286 = *(_QWORD *)(a4 + 8);
          if ((v286 & (v286 - 1)) != 0)
          {
            if (v285 >= v286)
              v237 = v285 % v286;
            else
              v237 = v285;
          }
          else
          {
            v237 = (v286 - 1) & v285;
          }
        }
        v333 = *(_QWORD *)a4;
        v334 = *(_QWORD **)(*(_QWORD *)a4 + 8 * v237);
        v241 = v391;
        if (v334)
        {
          *v305 = *v334;
          goto LABEL_548;
        }
        *v305 = *v385;
        *v385 = v305;
        *(_QWORD *)(v333 + 8 * v237) = v385;
        if (*v305)
        {
          v335 = *(_QWORD *)(*v305 + 8);
          if ((v286 & (v286 - 1)) != 0)
          {
            if (v335 >= v286)
              v335 %= v286;
          }
          else
          {
            v335 &= v286 - 1;
          }
          v334 = (_QWORD *)(*(_QWORD *)a4 + 8 * v335);
LABEL_548:
          *v334 = v305;
        }
        ++*(_QWORD *)(a4 + 24);
        if (v282)
          goto LABEL_550;
        goto LABEL_552;
      }
      if (v287.u32[0] < 2uLL)
      {
        while (1)
        {
          v307 = v305[1];
          if (v307 == v285)
          {
            if (v305[2] == v285)
              goto LABEL_488;
          }
          else if ((v307 & (v286 - 1)) != v237)
          {
            goto LABEL_490;
          }
          v305 = (_QWORD *)*v305;
          if (!v305)
            goto LABEL_490;
        }
      }
      while (1)
      {
        v306 = v305[1];
        if (v306 == v285)
          break;
        if (v306 >= v286)
          v306 %= v286;
        if (v306 != v237)
          goto LABEL_490;
LABEL_478:
        v305 = (_QWORD *)*v305;
        if (!v305)
          goto LABEL_490;
      }
      if (v305[2] != v285)
        goto LABEL_478;
LABEL_488:
      v241 = v391;
      if (!v282)
        goto LABEL_552;
LABEL_550:
      v336 = (unint64_t *)&v282->__shared_owners_;
      do
        v337 = __ldxr(v336);
      while (__stxr(v337 + 1, v336));
LABEL_552:
      v338 = (std::__shared_weak_count *)v305[4];
      v305[3] = v281;
      v305[4] = v282;
      if (v338)
      {
        v339 = (unint64_t *)&v338->__shared_owners_;
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
          std::__shared_weak_count::__release_weak(v338);
        }
      }
      v341 = *(int8x8_t *)(a4 + 232);
      v237 = (uint64_t)v393;
      if (v341)
      {
        v342 = *(_QWORD *)(*(_QWORD *)&v424._type + 168);
        v343 = (uint8x8_t)vcnt_s8(v341);
        v343.i16[0] = vaddlv_u8(v343);
        if (v343.u32[0] > 1uLL)
        {
          v344 = *(_QWORD *)(*(_QWORD *)&v424._type + 168);
          if (v342 >= *(_QWORD *)&v341)
            v344 = v342 % *(_QWORD *)&v341;
        }
        else
        {
          v344 = (*(_QWORD *)&v341 - 1) & v342;
        }
        v345 = *(_QWORD *)(a4 + 224);
        v346 = *(_QWORD ***)(v345 + 8 * v344);
        if (v346)
        {
          v347 = *v346;
          if (*v346)
          {
            v348 = *(_QWORD *)&v341 - 1;
            if (v343.u32[0] < 2uLL)
            {
              while (1)
              {
                v349 = v347[1];
                if (v349 == v342)
                {
                  if (v347[2] == v342)
                    goto LABEL_578;
                }
                else if ((v349 & v348) != v344)
                {
                  goto LABEL_623;
                }
                v347 = (_QWORD *)*v347;
                if (!v347)
                  goto LABEL_623;
              }
            }
            do
            {
              v350 = v347[1];
              if (v350 == v342)
              {
                if (v347[2] == v342)
                {
LABEL_578:
                  if (v343.u32[0] > 1uLL)
                  {
                    if (v342 >= *(_QWORD *)&v341)
                      v342 %= *(_QWORD *)&v341;
                  }
                  else
                  {
                    v342 &= v348;
                  }
                  v360 = *(_QWORD **)(v345 + 8 * v342);
                  do
                  {
                    v361 = v360;
                    v360 = (_QWORD *)*v360;
                  }
                  while (v360 != v347);
                  if (v361 == v146)
                    goto LABEL_608;
                  v362 = v361[1];
                  if (v343.u32[0] > 1uLL)
                  {
                    if (v362 >= *(_QWORD *)&v341)
                      v362 %= *(_QWORD *)&v341;
                  }
                  else
                  {
                    v362 &= v348;
                  }
                  if (v362 != v342)
                  {
LABEL_608:
                    if (!*v347)
                      goto LABEL_609;
                    v363 = *(_QWORD *)(*v347 + 8);
                    if (v343.u32[0] > 1uLL)
                    {
                      if (v363 >= *(_QWORD *)&v341)
                        v363 %= *(_QWORD *)&v341;
                    }
                    else
                    {
                      v363 &= v348;
                    }
                    if (v363 != v342)
LABEL_609:
                      *(_QWORD *)(v345 + 8 * v342) = 0;
                  }
                  v364 = *v347;
                  if (*v347)
                  {
                    v365 = *(_QWORD *)(v364 + 8);
                    if (v343.u32[0] > 1uLL)
                    {
                      if (v365 >= *(_QWORD *)&v341)
                        v365 %= *(_QWORD *)&v341;
                    }
                    else
                    {
                      v365 &= v348;
                    }
                    if (v365 != v342)
                    {
                      *(_QWORD *)(*(_QWORD *)(a4 + 224) + 8 * v365) = v361;
                      v364 = *v347;
                    }
                  }
                  *v361 = v364;
                  *v347 = 0;
                  --*(_QWORD *)(a4 + 248);
                  v366 = (std::__shared_weak_count *)v347[4];
                  if (v366)
                  {
                    v367 = (unint64_t *)&v366->__shared_owners_;
                    do
                      v368 = __ldaxr(v367);
                    while (__stlxr(v368 - 1, v367));
                    if (!v368)
                    {
                      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                      std::__shared_weak_count::__release_weak(v366);
                    }
                  }
                  operator delete(v347);
                  break;
                }
              }
              else
              {
                if (v350 >= *(_QWORD *)&v341)
                  v350 %= *(_QWORD *)&v341;
                if (v350 != v344)
                  break;
              }
              v347 = (_QWORD *)*v347;
            }
            while (v347);
          }
        }
      }
LABEL_623:
      v282 = *(std::__shared_weak_count **)&v424._xIdx;
LABEL_624:
      if (v282)
      {
        v369 = (unint64_t *)&v282->__shared_owners_;
        do
          v370 = __ldaxr(v369);
        while (__stlxr(v370 - 1, v369));
        if (!v370)
        {
          ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
          std::__shared_weak_count::__release_weak(v282);
        }
      }
LABEL_445:
      v242 += 144;
    }
    while (v242 != v241);
  }
  v274 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 248) / *(float *)(a4 + 112));
  if (v274 == 1)
  {
    v274 = 2;
  }
  else if ((v274 & (v274 - 1)) != 0)
  {
    v274 = std::__next_prime(v274);
  }
  v371 = *(int8x8_t *)(a4 + 88);
  if (v274 > *(_QWORD *)&v371)
    goto LABEL_632;
  if (v274 < *(_QWORD *)&v371)
  {
    v372 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 104) / *(float *)(a4 + 112));
    if (*(_QWORD *)&v371 < 3uLL || (v373 = (uint8x8_t)vcnt_s8(v371), v373.i16[0] = vaddlv_u8(v373), v373.u32[0] > 1uLL))
    {
      v372 = std::__next_prime(v372);
    }
    else
    {
      v374 = 1 << -(char)__clz(v372 - 1);
      if (v372 >= 2)
        v372 = v374;
    }
    if (v274 <= v372)
      v274 = v372;
    if (v274 < *(_QWORD *)&v371)
LABEL_632:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v237, v274);
  }
  while (1)
  {
    v146 = (_QWORD *)*v146;
    if (!v146)
      break;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v237, v146[2], v146[2]);
  }
  v375 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 208) / *(float *)(a4 + 152));
  if (v375 == 1)
  {
    v375 = 2;
  }
  else if ((v375 & (v375 - 1)) != 0)
  {
    v375 = std::__next_prime(v375);
  }
  v376 = *(int8x8_t *)(a4 + 128);
  if (v375 > *(_QWORD *)&v376)
    goto LABEL_650;
  if (v375 < *(_QWORD *)&v376)
  {
    v377 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 144) / *(float *)(a4 + 152));
    if (*(_QWORD *)&v376 < 3uLL || (v378 = (uint8x8_t)vcnt_s8(v376), v378.i16[0] = vaddlv_u8(v378), v378.u32[0] > 1uLL))
    {
      v377 = std::__next_prime(v377);
    }
    else
    {
      v379 = 1 << -(char)__clz(v377 - 1);
      if (v377 >= 2)
        v377 = v379;
    }
    if (v375 <= v377)
      v375 = v377;
    if (v375 < *(_QWORD *)&v376)
LABEL_650:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v384, v375);
  }
  while (1)
  {
    v162 = (_QWORD *)*v162;
    if (!v162)
      break;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v384, v162[2], v162[2]);
  }
  if ((v395 & 1) != 0)
  {
    v380 = 3;
  }
  else if ((v398 & 1) != 0)
  {
    v380 = 2;
  }
  else
  {
    v380 = 1;
  }
  *(_BYTE *)(a4 + 268) = v380;
LABEL_669:
  if (!v430)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v430 + 48))(v430);
  v381 = v430;
  if (v430 == v429)
  {
    v382 = 4;
    v381 = v429;
  }
  else
  {
    if (!v430)
      return;
    v382 = 5;
  }
  (*(void (**)(void))(*v381 + 8 * v382))();
}

void sub_19F206C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 216);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::NonTiled>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCBD572B797B24F09;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCBD572B797B24F09;
      if (*(_QWORD *)&v3 <= 0xCBD572B797B24F09)
        v5 = 0xCBD572B797B24F09 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCBD572B797B24F09;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCBD572B797B24F09)
            {
              if (v7[2] == 0xCBD572B797B24F09)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCBD572B797B24F09)
          {
            if (v7[2] == 0xCBD572B797B24F09)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::NonTiled]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B34F8;
  *(_QWORD *)(v11 + 8) = 0xCBD572B797B24F09;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCBD572B797B24F09, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCBD572B797B24F09;
  v15[1] = "md::components::NonTiled]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCBD572B797B24F09, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F206FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Asset>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x72409CF23030D770;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x72409CF23030D770;
      if (*(_QWORD *)&v3 <= 0x72409CF23030D770uLL)
        v5 = 0x72409CF23030D770uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x72409CF23030D770;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x72409CF23030D770)
            {
              if (v7[2] == 0x72409CF23030D770)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x72409CF23030D770)
          {
            if (v7[2] == 0x72409CF23030D770)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Asset]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3438;
  *(_QWORD *)(v11 + 8) = 0x72409CF23030D770;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x72409CF23030D770uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x72409CF23030D770;
  v15[1] = "md::components::Asset]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x72409CF23030D770, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F20721C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_19F207350(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void gdc::LayerDataManager::createDataRequests(gdc::LayerDataManager *this, gdc::LayerDataCollector *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *v13;
  int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *__p;

  v6 = (_QWORD *)*((_QWORD *)this + 7);
  if (v6[29])
  {
    v7 = (_QWORD *)v6[28];
    if (v7)
    {
      do
      {
        v20 = (_QWORD *)*v7;
        v21 = (void *)v7[3];
        if (v21 != (void *)v7[5])
          free(v21);
        operator delete(v7);
        v7 = v20;
      }
      while (v20);
    }
    v6[28] = 0;
    v8 = v6[27];
    if (v8)
    {
      for (i = 0; i != v8; ++i)
        *(_QWORD *)(v6[26] + 8 * i) = 0;
    }
    v6[29] = 0;
  }
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  v12 = (unsigned __int16 **)((char *)a2 + 24);
  gdc::LayerDataCollector::layerDataTypes((gdc::LayerDataCollector *)&v25, v10, v11);
  v13 = (unsigned __int16 *)__p;
  if (__p)
  {
    do
    {
      v14 = v13[8];
      v15 = (unsigned __int16 *)*((_QWORD *)this + 1);
      v16 = (unsigned __int16 *)*((_QWORD *)this + 2);
      if (v15 != v16)
      {
        while (v14 != *v15)
        {
          v15 += 12;
          if (v15 == v16)
            goto LABEL_9;
        }
      }
      if (v15 != v16)
      {
        v17 = *((_QWORD *)v15 + 1);
        v18 = *(_QWORD *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v12, v13[8]);
        v19 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v12, v14);
        gdc::LayerDataSource::createLayerDataRequests(v17, v18, *((_QWORD *)v19 + 1), a3, *((_QWORD **)this + 7));
      }
LABEL_9:
      v13 = *(unsigned __int16 **)v13;
    }
    while (v13);
    v22 = __p;
    if (__p)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        operator delete(v22);
        v22 = v23;
      }
      while (v23);
    }
  }
  v24 = v25;
  v25 = 0;
  if (v24)
    operator delete(v24);
  gdc::ResourceManager::finishBatch(*((gdc::ResourceManager **)this + 7));
}

void gdc::LayerDataCollector::layerDataTypes(gdc::LayerDataCollector *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int16 v6;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v6 = *(_WORD *)v4;
      v8 = *(char **)(v4 + 8);
      v7 = *(char **)(v4 + 16);
      v9 = v7 - v8;
      if (v7 != v8)
        break;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)this, *(_WORD *)v4, *(_WORD *)v4);
LABEL_4:
      v4 += 32;
      if (v4 == a3)
        return;
    }
    if (0x8E38E38E38E38E39 * (v9 >> 4) >= 0x1C71C71C71C71C8)
      abort();
    v10 = (char *)operator new(v9);
    v11 = v10;
    do
    {
      *v11 = *v8;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v11 + 8), (uint64_t)(v8 + 8));
      v11[96] = 0;
      if (v8[96])
      {
        *((_DWORD *)v11 + 25) = *((_DWORD *)v8 + 25);
        v11[96] = 1;
      }
      v12 = *((_QWORD *)v8 + 14);
      *((_QWORD *)v11 + 13) = *((_QWORD *)v8 + 13);
      *((_QWORD *)v11 + 14) = v12;
      v13 = *((_QWORD *)v8 + 15);
      *((_QWORD *)v11 + 15) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      *((_OWORD *)v11 + 8) = *((_OWORD *)v8 + 8);
      v8 += 144;
      v11 += 144;
    }
    while (v8 != v7);
    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t)this, v6, v6);
    if (v11 == v10)
    {
LABEL_29:
      operator delete(v11);
      goto LABEL_4;
    }
    while (1)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v11 - 3);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
          break;
      }
      if (*(v11 - 48))
        goto LABEL_23;
LABEL_24:
      v19 = (void *)*((_QWORD *)v11 - 16);
      if (v19 != *((void **)v11 - 14))
        free(v19);
      v11 -= 144;
      if (v11 == v10)
      {
        v11 = v10;
        goto LABEL_29;
      }
    }
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!*(v11 - 48))
      goto LABEL_24;
LABEL_23:
    *(v11 - 48) = 0;
    goto LABEL_24;
  }
}

void gdc::LayerDataManager::getData(gdc::LayerDataManager *this, gdc::LayerDataCollector *a2)
{
  void **v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *__p;

  gdc::LayerDataCollector::layerDataTypes((gdc::LayerDataCollector *)&v10, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
  v4 = (void **)__p;
  if (__p)
  {
    do
    {
      v5 = (unsigned __int16 *)*((_QWORD *)this + 1);
      v6 = (unsigned __int16 *)*((_QWORD *)this + 2);
      if (v5 != v6)
      {
        while (*((unsigned __int16 *)v4 + 8) != *v5)
        {
          v5 += 12;
          if (v5 == v6)
            goto LABEL_3;
        }
      }
      if (v5 != v6)
        (*(void (**)(_QWORD, gdc::LayerDataCollector *))(**((_QWORD **)v5 + 1) + 40))(*((_QWORD *)v5 + 1), a2);
LABEL_3:
      v4 = (void **)*v4;
    }
    while (v4);
    v7 = __p;
    if (__p)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
  }
  v9 = v10;
  v10 = 0;
  if (v9)
    operator delete(v9);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::shared_ptr<md::AssetData>>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x28uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_34;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_58:
    *v26 = v14;
    goto LABEL_59;
  }
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v25 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F207A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double md::ElevatedStrokeLayerDataSource::selectedPolygons@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t md::SelectedDaVinciPolygonLayerDataSource::selectedPolygons@<X0>(md::SelectedDaVinciPolygonLayerDataSource *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_set<unsigned long long>::unordered_set(a2, (uint64_t)this + 808);
}

uint64_t md::ArrowLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, float32x2_t *a6)
{
  uint64_t v8;
  BOOL v10;
  double v11;
  float32x2_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v26;
  float32x2_t v27;
  std::mutex *v28;
  char v29;

  if (*(_DWORD *)(a1 + 896) == *(_DWORD *)(a2 + 1616))
  {
    v8 = *(unsigned __int8 *)(a1 + 904);
  }
  else
  {
    (*(void (**)(std::mutex **__return_ptr))(**(_QWORD **)(a1 + 840) + 32))(&v28);
    if (v28)
      v10 = v29 == 0;
    else
      v10 = 0;
    if (v10)
    {
      if (*(_BYTE *)(a1 + 904) == 37)
        v8 = 37;
      else
        v8 = 31;
    }
    else
    {
      *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 1616);
      v8 = md::ArrowLabelPart::layoutAlongPath(a1, 1, a2 + 440, a6->f32[0], a6->f32[1]);
      *(_BYTE *)(a1 + 904) = v8;
      if ((_DWORD)v8 == 37)
        *(_BYTE *)(a1 + 905) = 1;
    }
    if (v29)
      std::mutex::unlock(v28);
  }
  if (*(_BYTE *)(a1 + 908))
  {
    v11 = *(double *)(a1 + 880);
    v12 = vadd_f32(*(float32x2_t *)&v11, *a6);
  }
  else
  {
    v26 = *a6;
    v13 = *(unsigned __int8 **)(a1 + 840);
    v14 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 80))(v13);
    v15 = v13[45];
    if (v13[45])
      v16 = 1;
    else
      v16 = 2;
    if (v15 == 2)
      v16 = 0;
    if (v14)
      v15 = v16;
    if (v15 == 1)
    {
      v12 = v26;
    }
    else
    {
      LODWORD(v11) = *(_DWORD *)(a1 + 888);
      a4 = *(double *)(a1 + 864);
      v12 = vmla_n_f32(v26, *(float32x2_t *)&a4, *(float *)&v11);
    }
  }
  v27 = v12;
  *(float32x2_t *)(a1 + 520) = v12;
  *(float32x2_t *)(a1 + 344) = v12;
  md::CollisionObject::setupShapeData(a1 + 312, v11, a4, *(double *)&v12);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 1300);
  if (*(_BYTE *)(a1 + 905))
  {
    v17 = *(float *)(a1 + 888);
    v18 = *(float *)(a1 + 856);
    v19 = v18 * v17;
    v20 = *(float *)(a1 + 860);
    v21 = v20 * v17;
    v22 = *(float *)(a1 + 892);
    v23 = -(float)(v20 * v22);
    v24 = v22 * v18;
    *(float *)(a1 + 696) = v27.f32[0] - (float)(v23 + v19);
    *(float *)(a1 + 700) = v27.f32[1] - (float)(v24 + v21);
    *(float *)(a1 + 704) = (float)(v19 + v27.f32[0]) - v23;
    *(float *)(a1 + 708) = (float)(v21 + v27.f32[1]) - v24;
    *(float *)(a1 + 712) = (float)(v23 + v19) + v27.f32[0];
    *(float *)(a1 + 716) = (float)(v24 + v21) + v27.f32[1];
    *(float *)(a1 + 720) = (float)(v27.f32[0] - v19) + v23;
    *(float *)(a1 + 724) = (float)(v27.f32[1] - v21) + v24;
  }
  return v8;
}

void sub_19F207C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

uint64_t md::MultipleShieldLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v19;
  std::mutex *v20;
  char v21;

  (*(void (**)(std::mutex **__return_ptr))(**(_QWORD **)(a1 + 664) + 32))(&v20);
  if (v20)
    v11 = v21 == 0;
  else
    v11 = 0;
  if (v11)
  {
    if (*(_DWORD *)(a1 + 688))
      v12 = 37;
    else
      v12 = 31;
  }
  else
  {
    v19 = (int8x16_t)xmmword_19FFB2E30;
    v12 = md::MultipleShieldLabelPart::placeShieldsOnPath(a1, 1, a2 + 440, a2, a3, a4, &v19);
    if ((_DWORD)v12 == 37)
    {
      md::CollisionObject::resetWithRects((void **)(a1 + 312), 1u);
      v13 = *(_QWORD *)(a1 + 472);
      v14 = *(unsigned int *)(a1 + 488);
      *(_DWORD *)(a1 + 488) = v14 + 1;
      v15 = v19;
      *(int8x16_t *)(v13 + 16 * v14) = v19;
      v9 = *(int8x16_t *)(a1 + 312);
      v16.i64[0] = v15.i64[0];
      v16.i64[1] = *(_QWORD *)(a1 + 320);
      v17.i64[0] = *(_QWORD *)(a1 + 312);
      v17.i64[1] = v15.i64[1];
      v10 = (int8x16_t)vcgtq_f32(v17, v16);
      v8 = vbslq_s8(v10, v15, v9);
      *(int8x16_t *)(a1 + 312) = v8;
      *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 1616);
    }
  }
  *(_DWORD *)(a1 + 520) = a4->i32[0];
  *(_DWORD *)(a1 + 524) = a4->i32[1];
  *(_DWORD *)(a1 + 344) = a4->i32[0];
  v8.i32[0] = a4->i32[1];
  *(_DWORD *)(a1 + 348) = v8.i32[0];
  md::CollisionObject::setupShapeData(a1 + 312, *(double *)v8.i64, *(double *)v9.i64, *(double *)v10.i64);
  if (v21)
    std::mutex::unlock(v20);
  return v12;
}

void sub_19F207DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

BOOL md::PolylineLabelPlacement::lock@<W0>(md::PolylineLabelPlacement *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v3;
  _BOOL8 result;

  v3 = (std::mutex *)(*((_QWORD *)this + 6) + 160);
  result = std::mutex::try_lock(v3);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = result;
  return result;
}

uint64_t md::MultipleShieldLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v17;

  v6 = *(_QWORD *)(a2 + 432);
  if (!*(_BYTE *)(a1 + 662)
    && (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 632) + 168))(*(_QWORD *)(a1 + 632), (int)*(float *)(*(_QWORD *)(a1 + 32) + 16))&& (*(unsigned int (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 632) + 176))(*(_QWORD *)(a1 + 632), (int)*(float *)(*(_QWORD *)(a1 + 32) + 16), 1.0))
  {
    *(_BYTE *)(a1 + 696) = 1;
  }
  v17 = (int8x16_t)xmmword_19FFB2E30;
  v7 = md::MultipleShieldLabelPart::placeShieldsOnPath(a1, 0, v6, a2, 0, a3, &v17);
  md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
  v8 = *(_QWORD *)(a1 + 232);
  v9 = *(unsigned int *)(a1 + 248);
  *(_DWORD *)(a1 + 248) = v9 + 1;
  v10 = v17;
  *(int8x16_t *)(v8 + 16 * v9) = v17;
  v11 = *(int8x16_t *)(a1 + 72);
  v12.i64[0] = v10.i64[0];
  v12.i64[1] = *(_QWORD *)(a1 + 80);
  v13.i64[0] = *(_QWORD *)(a1 + 72);
  v13.i64[1] = v10.i64[1];
  v14 = (int8x16_t)vcgtq_f32(v13, v12);
  v15 = vbslq_s8(v14, v10, v11);
  *(int8x16_t *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 280) = a3->i32[0];
  *(_DWORD *)(a1 + 284) = a3->i32[1];
  *(_DWORD *)(a1 + 104) = a3->i32[0];
  v15.i32[0] = a3->i32[1];
  *(_DWORD *)(a1 + 108) = v15.i32[0];
  md::CollisionObject::setupShapeData(a1 + 72, *(double *)v15.i64, *(double *)v11.i64, *(double *)v14.i64);
  return v7;
}

void md::HorizontalTextLabelPart::placeLines(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float32x2_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float32x2_t v68;
  _QWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  int8x16_t v72;
  unint64_t v73;
  float32x4_t **v74;
  float32x4_t *v75;
  uint64_t v76;
  float v77;
  float v78;
  int CapHeight;
  float32x4_t *v80;
  int UnitsPerEm;
  uint64_t v82;
  float v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  int Ascent;
  float32x4_t *v89;
  int v90;
  float v91;
  int Descent;
  float32x4_t *v93;
  int v94;
  float32x2_t v95;
  float v96;
  float32x4_t v97;
  int8x16_t v98;
  BOOL v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float *v103;
  uint64_t *v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float v109;
  float v110;
  uint64_t v111;
  float *v112;
  float v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  float v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  float v124;
  float v125;
  int8x16_t v126;
  float v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  float v131;
  float v132;
  float v133;
  float32x2_t v134;
  unint64_t v135;
  float v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  float v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  float v146;
  float32x4_t v147;
  float32x4_t v148;
  int16x4_t v149;
  int8x16_t v150;
  uint64_t v151;
  float *v152;
  float32x4_t *v153;
  float v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  uint64_t v161;
  float32x4_t v162;
  float32x4_t v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  float *v177;
  int v178;
  float *v180;
  float *v181;
  _QWORD *v182;
  uint64_t v183;
  float32x2_t *v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t *v191;
  _QWORD *v192;
  float v193;
  uint64_t v194;
  float v195;
  int v196;
  float v197;
  int8x16_t v198;
  unint64_t v199;
  uint64_t v200;
  float v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;

  v5 = a1;
  v178 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 122);
  v202 = 0;
  v203 = 0;
  v204 = 0;
  {
    v173 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v173, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v205 = mdm::Allocator::instance(void)::alloc;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v8 = atomic_load((unsigned __int8 *)(v7 + 125));
  v184 = a2;
  if ((v8 & 1) == 0 || *(_QWORD *)(v7 + 56) == *(_QWORD *)(v7 + 64))
  {
    a2[7].i32[1] = 0;
    a2[8].i8[4] = 0;
    goto LABEL_15;
  }
  v9 = a2[2].u32[1];
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = v10 + 56;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3);
  v15 = v14 - 1;
  v196 = *(unsigned __int8 *)(v13 + 66);
  if ((_DWORD)v9 && v14 > v9 && v14 - v9 > 2)
  {
    if (*(_BYTE *)(v13 + 66))
      v16 = v14 - v9;
    else
      v16 = 0;
    if (*(_BYTE *)(v13 + 66))
      v17 = 0;
    else
      v17 = v14 - v9;
    v15 -= v17;
    a2[7].i32[1] = (unsigned __int16)v16 | ((unsigned __int16)(v9 + v16) << 16);
    v18 = *(_BYTE *)(*(_QWORD *)v5 + 144) != 0;
  }
  else
  {
    v16 = 0;
    v18 = 0;
    a2[7].i32[1] = (_DWORD)v14 << 16;
  }
  a2[8].i8[4] = v18;
  {
    v174 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v174, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v200 = mdm::Allocator::instance(void)::alloc;
  if (v16 > v15)
  {
    if (a2[2].i32[0])
      goto LABEL_15;
    v194 = v5;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_190;
  }
  v194 = v5;
  v33 = 0;
  v34 = 0;
  v36 = 0;
  v37 = v16;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)v13 + 24 * v37 + 20) & 0x10) != 0)
    {
      v38 = v37 - v16;
      v207 = 0;
      v206 = 0;
      if (v34 >= v36)
      {
        v39 = (uint64_t)(v34 - v33) >> 5;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 59)
          abort();
        v41 = v36 - v33;
        if (v41 >> 4 > v40)
          v40 = v41 >> 4;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
          v42 = 0x7FFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v200 + 16))(v200, 32 * v42, 8);
          v44 = v43 + 32 * v39;
          v42 = v43 + 32 * v42;
          if (v43)
          {
            *(_QWORD *)v44 = v16;
            *(_QWORD *)(v44 + 8) = v38;
            *(_QWORD *)(v44 + 16) = 0;
            *(_BYTE *)(v44 + 24) = 0;
          }
        }
        else
        {
          v44 = 32 * v39;
        }
        v45 = v44;
        if (v34 != v33)
        {
          v46 = v44;
          do
          {
            v45 = v46 - 32;
            v47 = *(_OWORD *)(v34 - 16);
            *(_OWORD *)(v46 - 32) = *(_OWORD *)(v34 - 32);
            *(_OWORD *)(v46 - 16) = v47;
            v34 -= 32;
            v46 -= 32;
          }
          while (v34 != v33);
        }
        v34 = v44 + 32;
        if (v33)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v200 + 40))(v200, v33, v41);
        v33 = v45;
        v36 = v42;
      }
      else
      {
        if (v34)
        {
          *(_QWORD *)v34 = v16;
          *(_QWORD *)(v34 + 8) = v38;
          *(_QWORD *)(v34 + 16) = v206;
          *(_BYTE *)(v34 + 24) = v207;
        }
        v34 += 32;
      }
      v16 = v37;
    }
    ++v37;
  }
  while (v37 <= v15);
  v48 = v37 - v16;
  if (v37 > v16)
  {
    v207 = 0;
    v206 = 0;
    a2 = v184;
    if (v34 >= v36)
    {
      v167 = (uint64_t)(v34 - v33) >> 5;
      v168 = v167 + 1;
      if ((unint64_t)(v167 + 1) >> 59)
        abort();
      if ((uint64_t)(v36 - v33) >> 4 > v168)
        v168 = (uint64_t)(v36 - v33) >> 4;
      if (v36 - v33 >= 0x7FFFFFFFFFFFFFE0)
        v169 = 0x7FFFFFFFFFFFFFFLL;
      else
        v169 = v168;
      if (v169)
      {
        v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v200 + 16))(v200, 32 * v169, 8);
        v171 = v170 + 32 * v167;
        v169 = v170 + 32 * v169;
        if (v170)
        {
          *(_QWORD *)v171 = v16;
          *(_QWORD *)(v171 + 8) = v48;
          *(_QWORD *)(v171 + 16) = 0;
          *(_BYTE *)(v171 + 24) = 0;
        }
      }
      else
      {
        v171 = 32 * v167;
      }
      v49 = v171 + 32;
      v50 = v196;
      if (v34 != v33)
      {
        do
        {
          v172 = *(_OWORD *)(v34 - 16);
          *(_OWORD *)(v171 - 32) = *(_OWORD *)(v34 - 32);
          *(_OWORD *)(v171 - 16) = v172;
          v171 -= 32;
          v34 -= 32;
        }
        while (v34 != v33);
        v34 = v33;
      }
      v33 = v171;
      if (v34)
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v200 + 40))(v200, v34, v36 - v34);
      v36 = v169;
    }
    else
    {
      if (v34)
      {
        *(_QWORD *)v34 = v16;
        *(_QWORD *)(v34 + 8) = v48;
        *(_QWORD *)(v34 + 16) = v206;
        *(_BYTE *)(v34 + 24) = v207;
      }
      v49 = v34 + 32;
      v50 = v196;
    }
    v199 = v36;
    v34 = v49;
    v164 = v184[2].u32[0];
    if (!(_DWORD)v164)
      goto LABEL_189;
LABEL_166:
    if (v33 != v34)
    {
      v165 = (unint64_t *)v33;
      do
      {
        md::HorizontalTextLabelPart::breakLine(v50 != 0, v164, (_QWORD *)v13, v165, &v202);
        v165 += 4;
      }
      while (v165 != (unint64_t *)v34);
      v34 = v33;
      a2 = v184;
    }
    v166 = v199;
    v5 = v194;
    if (!v34)
      goto LABEL_15;
    goto LABEL_191;
  }
  v199 = v36;
  a2 = v184;
  v50 = v196;
  v164 = v184[2].u32[0];
  if ((_DWORD)v164)
    goto LABEL_166;
LABEL_189:
  v35 = v199;
LABEL_190:
  v203 = (_QWORD *)v34;
  v34 = v202;
  v166 = v204;
  v202 = v33;
  v204 = v35;
  v5 = v194;
  if (v34)
LABEL_191:
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v200 + 40))(v200, v34, v166 - v34);
LABEL_15:
  v20 = v202;
  v19 = v203;
  v21 = ((uint64_t)v203 - v202) >> 5;
  v22 = *(_QWORD **)v5;
  v23 = a2[8].u8[4];
  v182 = *(_QWORD **)v5;
  v175 = (unint64_t)v203 - v202;
  if (a2[8].i8[4])
  {
    v24 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22[13] - v22[12]) >> 3);
    v25 = v204;
    if ((unint64_t)v203 >= v204)
    {
      if ((v21 + 1) >> 59)
        abort();
      v28 = (uint64_t)(v204 - v202) >> 4;
      v185 = v21 + 1;
      if (v28 <= v21 + 1)
        v28 = v21 + 1;
      if (v204 - v202 >= 0x7FFFFFFFFFFFFFE0)
        v29 = 0x7FFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
      {
        v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v205 + 16))(v205, 32 * v29, 8);
        v27 = v30 + 32 * v21;
        v31 = v30 + 32 * v29;
        if (v30)
        {
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v27 + 8) = v24;
          *(_QWORD *)(v27 + 16) = 0;
          *(_BYTE *)(v27 + 24) = 1;
        }
      }
      else
      {
        v31 = 0;
        v27 = 32 * v21;
      }
      v22 = v182;
      if (v19 == (_QWORD *)v20)
      {
        v53 = (uint64_t)v19;
        v26 = v27;
      }
      else
      {
        v51 = v19;
        v26 = v27;
        do
        {
          v52 = *((_OWORD *)v51 - 1);
          *(_OWORD *)(v26 - 32) = *((_OWORD *)v51 - 2);
          *(_OWORD *)(v26 - 16) = v52;
          v51 -= 4;
          v26 -= 32;
        }
        while (v51 != (_QWORD *)v20);
        v53 = v20;
      }
      v202 = v26;
      v204 = v31;
      if (v53)
      {
        v54 = v25 - v53;
        v55 = v26;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v205 + 40))(v205, v53, v54);
        v26 = v55;
      }
    }
    else
    {
      if (v203)
      {
        *v203 = 0;
        v19[1] = v24;
        v19[2] = 0;
        *((_BYTE *)v19 + 24) = 1;
      }
      v185 = v21 + 1;
      v26 = v20;
      v27 = (uint64_t)v19;
    }
    v177 = (float *)(v27 + 32);
    v203 = (_QWORD *)(v27 + 32);
    v23 = -29789 * ((v22[13] - v22[12]) >> 3);
  }
  else
  {
    v177 = (float *)v203;
    v26 = v202;
    v185 = ((uint64_t)v203 - v202) >> 5;
  }
  v56 = v22 + 4;
  a2[8].i16[0] = v23;
  v57 = v21 - 1;
  if (v19 != (_QWORD *)v20)
  {
    v58 = 0;
    if (v21 <= 1)
      v59 = 1;
    else
      v59 = ((uint64_t)v19 - v20) >> 5;
    v186 = v59;
    v60 = v26 + 32 * v57;
    v180 = (float *)(v60 + 20);
    v181 = (float *)(v60 + 16);
    v61 = 0;
    v187 = 0.0;
    v188 = 0.0;
    v62 = 0.0;
    v63 = 0.0;
    v64 = 0.0;
    v65 = 0.0;
    v66 = 0.0;
    v67 = v185;
    v189 = v56;
    v190 = v57;
    v183 = v26;
    while (1)
    {
      v69 = (_QWORD *)(v26 + 32 * v58);
      v70 = v69 + 1;
      if (v69[1])
        break;
      v68 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
LABEL_79:
      v188 = fmaxf(v188, vsub_f32(v68, (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1)).f32[0]);
      if (++v58 == v186)
        goto LABEL_117;
    }
    v71 = 0;
    v72 = (int8x16_t)xmmword_19FFB2E30;
    v191 = v69 + 1;
    v192 = (_QWORD *)(v26 + 32 * v58);
    do
    {
      v73 = v71 + *v69;
      v74 = (float32x4_t **)(*v56 + 88 * v73);
      v75 = *v74;
      if (*v74 && v75[3].i8[13])
      {
        v198 = v72;
        v201 = v65;
        v76 = *v56 + 88 * v73;
        v77 = *(float *)(v76 + 80);
        v78 = v75[3].f32[0];
        CapHeight = CGFontGetCapHeight((CGFontRef)v75[1].i64[0]);
        v80 = *v74;
        UnitsPerEm = CGFontGetUnitsPerEm((CGFontRef)(*v74)[1].i64[0]);
        v82 = v58;
        v195 = v66;
        v197 = v62;
        v83 = v64;
        v84 = v61;
        v85 = v80[3].f32[0];
        v86 = (*v74)[2].f32[1];
        v87 = (*v74)[2].f32[3];
        Ascent = CGFontGetAscent((CGFontRef)(*v74)[1].i64[0]);
        v89 = *v74;
        v90 = CGFontGetUnitsPerEm((CGFontRef)(*v74)[1].i64[0]);
        v193 = v63;
        v91 = v89[3].f32[0];
        Descent = CGFontGetDescent((CGFontRef)(*v74)[1].i64[0]);
        v93 = *v74;
        v94 = CGFontGetUnitsPerEm((CGFontRef)(*v74)[1].i64[0]);
        v95.f32[0] = (float)(v85 * (float)CapHeight) / (float)UnitsPerEm;
        v95.i32[1] = fmaxf(v87 - v95.f32[0], 0.0);
        v61 = vmaxnm_f32(v84, vmul_n_f32(v95, v77 / v78));
        v64 = fmaxf(v83, fmaxf(-v86, 0.0) * (float)(v77 / v78));
        v96 = (float)((float)(v77 / v78) * (float)((float)Ascent * v91)) / (float)v90;
        v97.i64[0] = *(_QWORD *)(v76 + 32);
        v97.i64[1] = v97.i64[0];
        v98 = (int8x16_t)vmlaq_n_f32(v97, (*v74)[2], v77 / v78);
        v62 = v197;
        v58 = v82;
        v99 = v197 < *(float *)&v98.i32[3] && v82 == 0;
        v65 = fmaxf(v201, v96);
        v66 = fmaxf(v195, (float)((float)(v77 / v78) * (float)((float)Descent * v93[3].f32[0])) / (float)v94);
        v100.i64[0] = v98.i64[0];
        v100.i64[1] = v198.i64[1];
        v101.i64[0] = v198.i64[0];
        v101.i64[1] = v98.i64[1];
        v72 = vbslq_s8((int8x16_t)vcgtq_f32(v101, v100), v98, v198);
        if (v99)
          v62 = *(float *)&v98.i32[3];
        v57 = v190;
        if (v82 == v190)
        {
          v63 = fminf(*(float *)&v98.i32[1], v193);
          v56 = v189;
        }
        else
        {
          v56 = v189;
          v63 = v193;
        }
        v70 = v191;
        v69 = v192;
      }
      ++v71;
    }
    while (v71 < *v70);
    v102 = vextq_s8(v72, v72, 8uLL);
    a2 = v184;
    if (v58 != v57 || !v184[8].i8[4] || *(float *)v72.i32 > *(float *)&v72.i32[2])
    {
      v68 = (float32x2_t)__PAIR64__(v72.u32[1], v102.u32[1]);
      v26 = v183;
      if (*(float *)v72.i32 <= *(float *)&v72.i32[2])
      {
        v111 = v183 + 32 * v58;
        *(_DWORD *)(v111 + 16) = v72.i32[0];
        *(_DWORD *)(v111 + 20) = v72.i32[2];
        v187 = fmaxf(v187, *(float *)&v72.i32[2] - *(float *)v72.i32);
      }
      v67 = v185;
      goto LABEL_79;
    }
    v103 = (float *)v182[12];
    v104 = (uint64_t *)v182[13];
    if (v103 == (float *)v104)
    {
      v67 = v185;
      v26 = v183;
      v112 = v181;
    }
    else
    {
      v105 = -3.4028e38;
      v106 = 3.4028e38;
      v67 = v185;
      do
      {
        v108 = *(_QWORD *)v103;
        if (*(_QWORD *)v103 && *(_BYTE *)(v108 + 61))
        {
          v109 = v103[9];
          v110 = v103[20] / *(float *)(v108 + 48);
          if (!v58)
            v62 = fmaxf(v62, v109 + (float)(*(float *)(v108 + 44) * v110));
          v107 = v103[8];
          v106 = fminf(v107 + (float)(*(float *)(v108 + 32) * v110), v106);
          v105 = fmaxf(v105, v107 + (float)(*(float *)(v108 + 40) * v110));
          v63 = fminf(v109 + (float)(*(float *)(v108 + 36) * v110), v63);
        }
        v103 += 22;
      }
      while (v103 != (float *)v104);
      v112 = v181;
      if (v106 <= v105)
      {
        v113 = *(float *)&v72.i32[2] - *(float *)v72.i32;
        v114 = v105 - v106;
        v26 = v183;
        if (v178)
        {
          *v181 = *(float *)v72.i32 - v114;
          v181[1] = *(float *)&v72.i32[2];
          *(v177 - 4) = v106;
          *(v177 - 3) = v105 + v113;
        }
        else
        {
          *v181 = *(float *)v72.i32;
          v181[1] = v114 + *(float *)&v72.i32[2];
          *(v177 - 4) = v106 - v113;
          *(v177 - 3) = v105;
        }
        goto LABEL_115;
      }
      v26 = v183;
    }
    *v112 = *(float *)v72.i32;
    v112[1] = *(float *)&v72.i32[2];
LABEL_115:
    v187 = fmaxf(v187, *v180 - *v112);
    v72.i32[0] = v102.i32[1];
    v68 = *(float32x2_t *)v72.i8;
    goto LABEL_79;
  }
  v61 = 0;
  v63 = 0.0;
  v66 = 0.0;
  v65 = 0.0;
  v64 = 0.0;
  v62 = 0.0;
  v187 = 0.0;
  v188 = 0.0;
  v67 = v185;
LABEL_117:
  v115 = *(float *)(a3 + 176);
  v116 = a2->f32[0];
  a2[6].f32[1] = fmaxf(v65 - fmaxf(v62, 0.0), 0.0);
  a2[7].f32[0] = fmaxf(fminf(v63, 0.0) + v66, 0.0);
  md::CollisionObject::resetWithRects((void **)a4, v175 >> 5);
  v117 = v202;
  if (!v67)
  {
    v124 = 0.0;
    v125 = 0.0;
    v127 = v187;
    goto LABEL_158;
  }
  v118 = 0;
  v119 = 0;
  v120 = fmaxf(v115 + v188, v116);
  v121 = a2[8].u8[2];
  v122 = *(_QWORD *)(a4 + 160);
  v123 = *(_DWORD *)(a4 + 176);
  v124 = 0.0;
  v125 = 0.0;
  v126 = (int8x16_t)xmmword_19FFB2E30;
  v127 = v187;
  do
  {
    v130 = v117 + 32 * v119;
    v131 = *(float *)(v130 + 16);
    v132 = *(float *)(v130 + 20);
    if (v131 == v132)
      goto LABEL_120;
    v133 = v132 - v131;
    v134.f32[0] = (float)(v132 + v131) * -0.5;
    if (v57 >= v119)
      v135 = v57 - v119;
    else
      v135 = 0;
    if (v121 == 2)
    {
      v136 = v187 - v133;
    }
    else
    {
      if (v121 != 1)
        goto LABEL_130;
      v136 = v133 - v187;
    }
    v134.f32[0] = v134.f32[0] + (float)(v136 * 0.5);
LABEL_130:
    v137 = v117 + 32 * v119;
    v138 = *(unsigned __int8 *)(v137 + 24);
    v139 = *(_QWORD *)(v137 + 8);
    if (v139)
    {
      v140 = (float)(v120 * (float)v135)
           - (float)(v63 + (float)((float)((float)(v62 + (float)(v120 * (float)v57)) - v63) * 0.5));
      if (v138)
        v141 = v182 + 12;
      else
        v141 = v56;
      v142 = *(_QWORD *)v130;
      v143 = *v141;
      v144 = *(float32x4_t **)(v143 + 88 * v142);
      if (v144 && v144[3].i8[13])
      {
        v145 = v143 + 88 * v142;
        *(_OWORD *)(v145 + 52) = xmmword_19FFB3590;
        *(_QWORD *)(v145 + 68) = 1065353216;
        v146 = *(float *)(v145 + 80);
        *(float32x2_t *)v147.f32 = vadd_f32(*(float32x2_t *)(v145 + 32), (float32x2_t)__PAIR64__(LODWORD(v140), v134.u32[0]));
        *(_QWORD *)(v145 + 40) = v147.i64[0];
        v147.i64[1] = v147.i64[0];
        v148 = vmlaq_n_f32(v147, v144[2], v146 / v144[3].f32[0]);
        v149.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB2E30, v148)).u32[0];
        v149.i32[1] = vmovn_s32(vcgtq_f32(v148, (float32x4_t)xmmword_19FFB2E30)).i32[1];
        v150 = vbslq_s8((int8x16_t)vmovl_s16(v149), (int8x16_t)v148, (int8x16_t)xmmword_19FFB2E30);
        if (!v119)
          v125 = v148.f32[3];
        if (v139 == 1)
          goto LABEL_150;
LABEL_141:
        v151 = v139 - 1;
        v134.f32[1] = v140;
        v152 = (float *)(v143 + 88 * v142 + 168);
        do
        {
          v153 = (float32x4_t *)*((_QWORD *)v152 - 10);
          if (v153)
          {
            if (v153[3].i8[13])
            {
              *(_OWORD *)(v152 - 7) = xmmword_19FFB3590;
              *(_QWORD *)(v152 - 3) = 1065353216;
              v154 = *v152;
              *(float32x2_t *)v155.f32 = vadd_f32(*(float32x2_t *)(v152 - 12), v134);
              *((_QWORD *)v152 - 5) = v155.i64[0];
              v155.i64[1] = v155.i64[0];
              v156 = (int8x16_t)vmlaq_n_f32(v155, v153[2], v154 / v153[3].f32[0]);
              v157.i64[0] = v156.i64[0];
              v157.i64[1] = v150.i64[1];
              v158.i64[0] = v150.i64[0];
              v158.i64[1] = v156.i64[1];
              v150 = vbslq_s8((int8x16_t)vcgtq_f32(v158, v157), v156, v150);
              if (!v119 && v151 == 1)
                v124 = *(float *)&v156.i32[3];
            }
          }
          v152 += 22;
          --v151;
        }
        while (v151);
        goto LABEL_150;
      }
      v150 = (int8x16_t)xmmword_19FFB2E30;
      if (v139 != 1)
        goto LABEL_141;
    }
    else
    {
      v150 = (int8x16_t)xmmword_19FFB2E30;
    }
LABEL_150:
    if (((v138 != 0) & v118) != 0)
    {
      v128.i64[0] = v150.i64[0];
      v128.i64[1] = v126.i64[1];
      v129.i64[0] = v126.i64[0];
      v129.i64[1] = v150.i64[1];
      v126 = vbslq_s8((int8x16_t)vcgtq_f32(v129, v128), v150, v126);
      v118 = 1;
    }
    else
    {
      if ((v118 & 1) != 0)
      {
        *(_DWORD *)(a4 + 176) = v123 + 1;
        *(int8x16_t *)(v122 + 16 * v123) = v126;
        v159.i64[0] = v126.i64[0];
        v159.i64[1] = *(_QWORD *)(a4 + 8);
        v160.i64[0] = *(_QWORD *)a4;
        v160.i64[1] = v126.i64[1];
        *(int8x16_t *)a4 = vbslq_s8((int8x16_t)vcgtq_f32(v160, v159), v126, *(int8x16_t *)a4);
        v118 = 1;
        ++v123;
      }
      else
      {
        v118 = 1;
      }
      v126 = v150;
    }
LABEL_120:
    ++v119;
  }
  while (v119 != v67);
  if ((v118 & 1) != 0)
  {
    v161 = *(_QWORD *)(a4 + 160);
    *(_DWORD *)(a4 + 176) = v123 + 1;
    *(int8x16_t *)(v161 + 16 * v123) = v126;
    v162.i64[0] = v126.i64[0];
    v162.i64[1] = *(_QWORD *)(a4 + 8);
    v163.i64[0] = *(_QWORD *)a4;
    v163.i64[1] = v126.i64[1];
    *(int8x16_t *)a4 = vbslq_s8((int8x16_t)vcgtq_f32(v163, v162), v126, *(int8x16_t *)a4);
  }
LABEL_158:
  a2[5] = v61;
  a2[6].f32[0] = v64;
  a2[4].f32[1] = v127;
  if (v125 != 0.0)
    v125 = *(float *)(a4 + 12) - v125;
  a2[3].f32[0] = v125;
  if (v124 != 0.0)
    v124 = *(float *)(a4 + 12) - v124;
  a2[3].f32[1] = v124;
  a2[4].f32[0] = -v63;
  if (v117)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v205 + 40))(v205, v117, v204 - v117);
}

void sub_19F208DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a35 + 40))(a35, v35, v36 - v35);
    v39 = *(_QWORD *)(v37 - 200);
    if (!v39)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v39 = *(_QWORD *)(v37 - 200);
    if (!v39)
      goto LABEL_3;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 - 176) + 40))(*(_QWORD *)(v37 - 176), v39, *(_QWORD *)(v37 - 184) - v39);
  _Unwind_Resume(exception_object);
}

uint64_t *md::HorizontalTextLabelPart::mergeWordsToLines(uint64_t *result, uint64_t *a2, int a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v4 = *result;
  v5 = result[1];
  v6 = v5 - *result;
  if (v5 != *result)
  {
    v10 = result;
    v11 = 0;
    v12 = v6 >> 5;
    do
    {
      v14 = (uint64_t *)(v4 + 32 * v11);
      if (a3)
      {
        v15 = *v14;
        v16 = v14[1] + *v14;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        v17 = v11;
        while (1)
        {
          v18 = *v14;
          v14 += 4;
          if (v16 - v18 > a4)
            break;
          if (v12 == ++v17)
          {
            v17 = v12;
            break;
          }
        }
      }
      else
      {
        v20 = *v14;
        v19 = v14 + 1;
        v15 = v20;
        if (v12 <= v11 + 1)
          v21 = v11 + 1;
        else
          v21 = v12;
        v17 = v11;
        while (*v19 + *(v19 - 1) - v15 <= a4)
        {
          v19 += 4;
          if (++v17 >= v12)
          {
            v17 = v21;
            break;
          }
        }
      }
      if (v11 <= (uint64_t)(v17 - 1))
        v22 = v17 - 1;
      else
        v22 = v11;
      v23 = *(_QWORD *)(v4 + 32 * v22);
      if (a3)
      {
        v24 = v15 - v23 + *(_QWORD *)(v4 + 32 * v11 + 8);
        v15 = *(_QWORD *)(v4 + 32 * v22);
      }
      else
      {
        v24 = v23 - v15 + *(_QWORD *)(v4 + 32 * v22 + 8);
      }
      v25 = a2[1];
      v26 = a2[2];
      if (v25 >= v26)
      {
        v27 = (uint64_t)(v25 - *a2) >> 5;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59)
          abort();
        v29 = v26 - *a2;
        if (v29 >> 4 > v28)
          v28 = v29 >> 4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v28 = 0x7FFFFFFFFFFFFFFLL;
        if (v28)
        {
          v30 = 4 * v28;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 32 * v28, 8);
          v31 = (uint64_t)&result[4 * v27];
          v28 = (unint64_t)&result[v30];
          if (result)
          {
            *(_QWORD *)v31 = v15;
            *(_QWORD *)(v31 + 8) = v24;
            *(_QWORD *)(v31 + 16) = 0;
            *(_BYTE *)(v31 + 24) = 0;
          }
        }
        else
        {
          v31 = 32 * v27;
        }
        v33 = *a2;
        v32 = a2[1];
        v34 = v31;
        if (v32 != *a2)
        {
          do
          {
            v35 = *(_OWORD *)(v32 - 16);
            *(_OWORD *)(v34 - 32) = *(_OWORD *)(v32 - 32);
            *(_OWORD *)(v34 - 16) = v35;
            v34 -= 32;
            v32 -= 32;
          }
          while (v32 != v33);
          v32 = *a2;
        }
        v13 = v31 + 32;
        *a2 = v34;
        a2[1] = v31 + 32;
        v36 = a2[2];
        a2[2] = v28;
        if (v32)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v32, v36 - v32);
      }
      else
      {
        if (v25)
        {
          *(_QWORD *)v25 = v15;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(v25 + 16) = 0;
          *(_BYTE *)(v25 + 24) = 0;
        }
        v13 = v25 + 32;
      }
      a2[1] = v13;
      v11 = v22 + 1;
      v4 = *v10;
      v12 = (v10[1] - *v10) >> 5;
    }
    while (v22 + 1 < v12);
  }
  return result;
}

double md::CollisionObject::resetWithRects(void **this, unsigned int a2)
{
  void *v4;
  void *v5;
  unsigned int v6;
  double result;

  if (*((_DWORD *)this + 48) < a2)
  {
    free(this[23]);
    this[23] = malloc_type_calloc(a2, 0x18uLL, 0x1000040504FFAC1uLL);
    *((_DWORD *)this + 48) = a2;
  }
  v4 = this[21];
  if (v4)
  {
    free(v4);
    this[21] = 0;
    *((_DWORD *)this + 45) = 0;
    if (!a2)
      goto LABEL_9;
  }
  else if (*((_DWORD *)this + 45) >= a2)
  {
    goto LABEL_9;
  }
  free(this[20]);
  v5 = malloc_type_malloc(16 * a2, 0x1000040451B5BE8uLL);
  this[20] = v5;
  if (v5)
    v6 = a2;
  else
    v6 = 0;
  *((_DWORD *)this + 45) = v6;
LABEL_9:
  *((_DWORD *)this + 44) = 0;
  result = 1.40444743e306;
  *(_OWORD *)this = xmmword_19FFB2E30;
  return result;
}

ggl::MetalTextureResource *ggl::MetalResourceManager::prepareTexture(std::__shared_weak_count **this, const ggl::Texture *a2, unint64_t a3)
{
  int v6;
  ggl::MetalTextureResource *v7;
  uint64_t v8;
  uint64_t v9;
  void *PixelFormat;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;

  v6 = *((_DWORD *)a2 + 14);
  v7 = (ggl::MetalTextureResource *)*((_QWORD *)a2 + 3);
  if (v6)
  {
    if (!v7 || v6 == 1 && (v8 = *((_QWORD *)a2 + 11)) != 0 && *(_DWORD *)(v8 + 32) != *((_DWORD *)a2 + 8))
      v7 = ggl::MetalResourceManager::newTexture((ggl::MetalResourceManager *)this, a2);
    goto LABEL_46;
  }
  if (v7)
  {
    v9 = *((_QWORD *)a2 + 11);
    if (!v9 || *(_DWORD *)(v9 + 32) == *((_DWORD *)a2 + 8))
      goto LABEL_46;
  }
  simpleValidateTexture(a2);
  PixelFormat = (void *)ggl::getPixelFormat(*((_DWORD *)a2 + 17), LOBYTE(this[32]->__shared_weak_owners_));
  v7 = (ggl::MetalTextureResource *)&unk_1ECE44000;
  if ((v11 & 1) == 0)
    goto LABEL_54;
  while (1)
  {
    v7 = (ggl::MetalTextureResource *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 495)
                                                                                          + 16))(*((_QWORD *)v7 + 495), 136, 8);
    ggl::MetalTextureResource::MetalTextureResource(v7);
    v12 = *((_QWORD *)a2 + 11);
    if (!v12)
      break;
    if (*((_QWORD *)v7 + 16))
    {
      v13 = 0;
      v14 = *(_QWORD *)(v12 + 24);
      do
      {
        v15 = *(id *)(*(_QWORD *)(v14 + 32) + 8 * v13);
        v16 = objc_msgSend(v15, "newTextureViewWithPixelFormat:", PixelFormat);
        v17 = *((_QWORD *)v7 + 4);
        v18 = *(void **)(v17 + 8 * v13);
        *(_QWORD *)(v17 + 8 * v13) = v16;

        ++v13;
      }
      while (v13 < *((_QWORD *)v7 + 16));
    }
    v19 = *((_QWORD *)a2 + 3);
    if (v19 && v19 != 3735927469)
    {
      ggl::RenderDataHolder::replaceRenderResource((uint64_t)a2, (uint64_t)this, (uint64_t)v7);
      goto LABEL_45;
    }
    if (!this)
    {
      v21 = 0;
      v22 = 0;
LABEL_39:
      v33 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = v21;
      *((_QWORD *)a2 + 2) = v22;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      *((_QWORD *)a2 + 3) = v7;
      ++*((_DWORD *)a2 + 8);
      goto LABEL_45;
    }
    v20 = this[2];
    if (v20)
    {
      v21 = this[1];
      v22 = std::__shared_weak_count::lock(v20);
      if (v22)
        goto LABEL_39;
    }
LABEL_53:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_54:
    {
      v40 = operator new();
      *((_QWORD *)v7 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "GeoGL", 0xA3D02C1100000005);
    }
  }
  objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", PixelFormat, *((unsigned int *)a2 + 20), *((unsigned int *)a2 + 21), 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  PixelFormat = v23;
  if (*((_DWORD *)a2 + 19) == 1)
  {
    if (BYTE2(this[32]->__shared_weak_owners_))
      v24 = 48;
    else
      v24 = 32;
  }
  else
  {
    v24 = 32;
  }
  objc_msgSend(v23, "setResourceOptions:", v24);
  objc_msgSend(PixelFormat, "setUsage:", 4);
  objc_msgSend(PixelFormat, "setSampleCount:", *((unsigned int *)a2 + 18));
  if (*((_DWORD *)a2 + 18) <= 1u)
    v25 = 2;
  else
    v25 = 4;
  objc_msgSend(PixelFormat, "setTextureType:", v25);
  v26 = (void *)objc_msgSend((id)this[32][4].__shared_owners_, "newTextureWithDescriptor:", PixelFormat);
  objc_storeStrong(*((id **)v7 + 4), v26);
  v27 = this[2];
  if (!v27)
    goto LABEL_53;
  v28 = this[1];
  v29 = std::__shared_weak_count::lock(v27);
  if (!v29)
    goto LABEL_53;
  v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = v28;
  *((_QWORD *)a2 + 2) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *((_QWORD *)a2 + 3) = v7;
  ++*((_DWORD *)a2 + 8);

LABEL_45:
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Texture", 0x4DDB34EE00000007uLL, 0);
LABEL_46:
  v36 = (unint64_t *)((char *)v7 + 16);
  v37 = atomic_load((unint64_t *)v7 + 2);
  if (v37 < a3)
  {
    do
    {
      v38 = __ldaxr(v36);
      if (v38 == v37)
      {
        if (!__stlxr(a3, v36))
          return v7;
      }
      else
      {
        __clrex();
      }
      v37 = v38;
    }
    while (v38 < a3);
  }
  return v7;
}

void sub_19F20952C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F209564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::newPipelineState(ggl::MetalResourceManager *this, const ggl::PipelineState *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  BOOL v43;
  NSObject *v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  const ggl::PipelineState *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t PixelFormat;
  void *v52;
  void *v53;
  unsigned int v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned int v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unsigned int v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  void *v79;
  unsigned int v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unsigned int v84;
  ggl::MetalResourceManager *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  _QWORD **v96;
  unsigned __int8 v97;
  void *v98;
  unsigned __int8 v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  ggl::MetalResourceManager *v112;
  _QWORD *v113;
  id v114;
  const ggl::PipelineState *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  id v122;
  uint8_t buf[4];
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 5);
  v113 = **(_QWORD ***)v4;
  v111 = *(_QWORD *)(v4 + 16);
  v114 = objc_alloc_init(MEMORY[0x1E0CC6B68]);
  objc_msgSend(MEMORY[0x1E0CC6BD8], "vertexDescriptor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = a2;
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 24);
  v112 = this;
  v7 = v111;
  if (v6)
  {
    v119 = 0;
    v8 = 0;
    do
    {
      v116 = *(uint64_t **)(*v113 + 8 * *(_QWORD *)(v7 + 48 * v8 + 8));
      v118 = *v116;
      v9 = *(_QWORD *)(*v116 + 24);
      objc_msgSend(v5, "layouts");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectAtIndexedSubscript:", v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setStride:", v9);

      v12 = *((_DWORD *)v116 + 2);
      if (v12 == 1)
        v13 = 2;
      else
        v13 = v12 == 0;
      objc_msgSend(v5, "layouts");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndexedSubscript:", v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setStepFunction:", v13);

      objc_msgSend(v5, "layouts");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectAtIndexedSubscript:", v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setStepRate:", 1);

      v18 = v8;
      v19 = v7 + 48 * v8;
      v21 = *(_QWORD *)(v19 + 40);
      v20 = (_QWORD *)(v19 + 40);
      v120 = v18;
      if (v21)
      {
        v22 = v7;
        v23 = 0;
        v117 = (_QWORD *)(v22 + 48 * v18 + 32);
        v24 = 8;
        do
        {
          v25 = *(_QWORD *)(v118 + 8);
          v26 = *(_QWORD *)(*v117 + v24);
          v27 = *(int *)(v116[2] + 8 * v26);
          switch(*(_BYTE *)(v25 + 32 * v26 + 8))
          {
            case 0:
            case 1:
              v28 = &unk_1A00831C0;
              if (v27 < 0xE)
                goto LABEL_25;
              v29 = 50;
              break;
            case 2:
              v28 = &unk_1A0083230;
              if (v27 < 0xE)
                goto LABEL_25;
              v29 = 49;
              break;
            case 3:
              v28 = &unk_1A00832A0;
              if (v27 < 0xE)
                goto LABEL_25;
              v29 = 13;
              break;
            case 4:
            case 8:
              v28 = &unk_1A0083310;
              if (v27 >= 0xE)
                goto LABEL_26;
              goto LABEL_25;
            case 5:
            case 9:
              v28 = &unk_1A0083380;
              if (v27 < 0xE)
                goto LABEL_25;
              goto LABEL_26;
            case 6:
            case 0xA:
              v28 = &unk_1A00833F0;
              if (v27 >= 0xE)
                goto LABEL_26;
              goto LABEL_25;
            case 7:
              v28 = &unk_1A0083460;
              if (v27 < 0xE)
                goto LABEL_25;
              goto LABEL_26;
            case 0xB:
              v28 = &unk_1A0083460;
              if (v27 > 0xD)
                goto LABEL_26;
LABEL_25:
              v29 = v28[v27];
              break;
            default:
LABEL_26:
              v29 = 0;
              break;
          }
          objc_msgSend(v5, "attributes");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "objectAtIndexedSubscript:", v119 + v23);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setFormat:", v29);

          v32 = *(_QWORD *)(v25 + 32 * v26 + 24);
          objc_msgSend(v5, "attributes");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "objectAtIndexedSubscript:", v119 + v23);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "setOffset:", v32);

          objc_msgSend(v5, "attributes");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "objectAtIndexedSubscript:", v119 + v23);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "setBufferIndex:", v120);

          ++v23;
          v24 += 48;
        }
        while (v23 != *v20);
        v119 += v23;
        v7 = v111;
        this = v112;
      }
      v8 = v120 + 1;
    }
    while (v120 + 1 != *(_QWORD *)(*((_QWORD *)v115 + 5) + 24));
  }
  objc_msgSend(v114, "setVertexDescriptor:", v5);

  v37 = *((_QWORD *)v115 + 6);
  v38 = ggl::MetalResourceManager::newShaderFunction(this, *(const ggl::ShaderFunction **)(v37 + 80), *((unsigned __int8 *)v115 + 288), *((_QWORD *)v115 + 37));
  if (v38)
  {
    v39 = ggl::MetalResourceManager::newShaderFunction(this, *(const ggl::ShaderFunction **)(v37 + 88), *((unsigned __int8 *)v115 + 288), *((_QWORD *)v115 + 37));
    v40 = *(id *)(v38 + 32);
    v41 = *(id *)(v39 + 32);
    v42 = v41;
    if (v40)
      v43 = v41 == 0;
    else
      v43 = 1;
    if (v43)
    {
      if (GEOGetGeoGLDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
      v44 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = *(_QWORD *)(v37 + 8);
        *(_DWORD *)buf = 136315138;
        v124 = v45;
        _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_ERROR, "Shader %s has nil functions", buf, 0xCu);
      }

      {
        v106 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v106, "GeoGL", 0xA3D02C1100000005);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v38, 40);

      {
        v107 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v107, "GeoGL", 0xA3D02C1100000005);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v39, 40);
LABEL_78:
      v39 = 0;
    }
    else
    {
      objc_msgSend(v114, "setVertexFunction:", v40);
      objc_msgSend(v114, "setFragmentFunction:", v42);

      v48 = v115;
      if (*((_QWORD *)v115 + 34))
      {
        v49 = 0;
        v50 = 0;
        do
        {
          PixelFormat = ggl::getPixelFormat(*((_DWORD *)v48 + v50 + 64), *(unsigned __int8 *)(*((_QWORD *)v112 + 32) + 16));
          objc_msgSend(v114, "colorAttachments");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "objectAtIndexedSubscript:", v50);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "setPixelFormat:", PixelFormat);

          v54 = *((unsigned __int8 *)v115 + v49 + 108);
          objc_msgSend(v114, "colorAttachments");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "objectAtIndexedSubscript:", v50);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "setWriteMask:", __rbit32(v54) >> 28);

          v57 = *((unsigned __int8 *)v115 + v49 + 64);
          objc_msgSend(v114, "colorAttachments");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "objectAtIndexedSubscript:", v50);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "setBlendingEnabled:", v57 != 0);

          v60 = (*(_DWORD *)((char *)v115 + v49 + 88) - 1);
          if (v60 < 4)
            v61 = v60 + 1;
          else
            v61 = 0;
          objc_msgSend(v114, "colorAttachments");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v62, "objectAtIndexedSubscript:", v50);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "setAlphaBlendOperation:", v61);

          v64 = (*(_DWORD *)((char *)v115 + v49 + 76) - 1);
          if (v64 < 4)
            v65 = v64 + 1;
          else
            v65 = 0;
          objc_msgSend(v114, "colorAttachments");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "objectAtIndexedSubscript:", v50);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "setRgbBlendOperation:", v65);

          v68 = *(_DWORD *)((char *)v115 + v49 + 84) - 1;
          if (v68 > 0xD)
            v69 = 0;
          else
            v69 = qword_1A00834D0[v68];
          objc_msgSend(v114, "colorAttachments");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "objectAtIndexedSubscript:", v50);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "setDestinationAlphaBlendFactor:", v69);

          v72 = *(_DWORD *)((char *)v115 + v49 + 72) - 1;
          if (v72 > 0xD)
            v73 = 0;
          else
            v73 = qword_1A00834D0[v72];
          objc_msgSend(v114, "colorAttachments");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "objectAtIndexedSubscript:", v50);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setDestinationRGBBlendFactor:", v73);

          v76 = *(_DWORD *)((char *)v115 + v49 + 80) - 1;
          if (v76 > 0xD)
            v77 = 0;
          else
            v77 = qword_1A00834D0[v76];
          objc_msgSend(v114, "colorAttachments");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "objectAtIndexedSubscript:", v50);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v79, "setSourceAlphaBlendFactor:", v77);

          v80 = *(_DWORD *)((char *)v115 + v49 + 68) - 1;
          if (v80 > 0xD)
            v81 = 0;
          else
            v81 = qword_1A00834D0[v80];
          objc_msgSend(v114, "colorAttachments");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "objectAtIndexedSubscript:", v50);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "setSourceRGBBlendFactor:", v81);

          ++v50;
          v48 = v115;
          v49 += 48;
        }
        while (v50 != *((_QWORD *)v115 + 34));
      }
      v84 = *((_DWORD *)v48 + 71);
      v85 = v112;
      v86 = ggl::getPixelFormat(v84, *(unsigned __int8 *)(*((_QWORD *)v112 + 32) + 16));
      v87 = v86;
      v88 = 0;
      if (v84 <= 0x1A && ((1 << v84) & 0x4380000) != 0)
        v88 = v86;
      objc_msgSend(v114, "setDepthAttachmentPixelFormat:", v88);
      if (v84 - 25 >= 2)
        v89 = 0;
      else
        v89 = v87;
      objc_msgSend(v114, "setStencilAttachmentPixelFormat:", v89);
      objc_msgSend(v114, "setSupportIndirectCommandBuffers:", *((unsigned __int8 *)v115 + 376));
      objc_msgSend(v114, "setRasterSampleCount:", *((unsigned int *)v115 + 70));
      objc_msgSend(v114, "setAlphaToCoverageEnabled:", *((_DWORD *)v115 + 92) == 0);
      objc_msgSend(v114, "setMaxVertexAmplificationCount:", *((unsigned int *)v115 + 93));
      v90 = *(id *)(*((_QWORD *)v112 + 32) + 128);

      if (v90)
      {
        v91 = *(id *)(*((_QWORD *)v112 + 32) + 128);
        v122 = v91;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v122, 1);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "setBinaryArchives:", v92);

        v85 = v112;
      }
      v93 = *(id *)(*((_QWORD *)v85 + 32) + 104);
      v121 = 0;
      v42 = (void *)objc_msgSend(v93, "newRenderPipelineStateWithDescriptor:options:reflection:error:", v114, 0, 0, &v121);
      v40 = v121;

      v96 = (_QWORD **)&unk_1ECE44000;
      {
        v108 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v108, "GeoGL", 0xA3D02C1100000005);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, v38, 40);
      if (!v39)
        goto LABEL_76;

      if ((v97 & 1) == 0)
        goto LABEL_97;
      while (1)
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v96[495] + 40))(v96[495], v39, 40);
LABEL_76:
        if (v40)
        {
          objc_msgSend(v40, "localizedDescription");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog((NSString *)CFSTR("PSO error: %@"), v98);

          goto LABEL_78;
        }
        v100 = atomic_load(v94);
        {
          v110 = operator new();
          v96[495] = (_QWORD *)geo::MallocZoneAllocator::MallocZoneAllocator(v110, "GeoGL", 0xA3D02C1100000005);
        }
        v39 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v96[495] + 16))(v96[495], 40, 8);
        *(_QWORD *)v39 = 0;
        *(_WORD *)(v39 + 8) = 1281;
        *(_QWORD *)(v39 + 16) = 0;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 0;
        objc_storeStrong((id *)(v39 + 32), v42);
        v94 = (unsigned __int8 *)v112;
        v101 = (std::__shared_weak_count *)*((_QWORD *)v112 + 2);
        if (v101)
        {
          v96 = (_QWORD **)*((_QWORD *)v112 + 1);
          v102 = std::__shared_weak_count::lock(v101);
          if (v102)
            break;
        }
        std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_97:
        {
          v109 = operator new();
          v96[495] = (_QWORD *)geo::MallocZoneAllocator::MallocZoneAllocator(v109, "GeoGL", 0xA3D02C1100000005);
        }
      }
      v103 = (std::__shared_weak_count *)*((_QWORD *)v115 + 2);
      *((_QWORD *)v115 + 1) = v96;
      *((_QWORD *)v115 + 2) = v102;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(p_shared_owners);
        while (__stlxr(v105 - 1, p_shared_owners));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      *((_QWORD *)v115 + 3) = v39;
      ++*((_DWORD *)v115 + 8);
      ggl::ResourceManager::_addResourceStat((uint64_t)v112, "PipelineState", 0x28DAD03E0000000DuLL, 0);
      v40 = 0;
    }

  }
  else
  {
    v39 = 0;
  }

  return v39;
}

void sub_19F20A1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::newShaderFunction(ggl::MetalResourceManager *this, const ggl::ShaderFunction *a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  id *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  char v25;
  id v26;
  int16x8_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int16x8_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  id v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unsigned __int32 v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  void *__p;
  char v55;
  _QWORD v56[20];

  v56[19] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)a2 + 6);
  v9 = (id *)v8[3];
  if (v9 || (v9 = (id *)ggl::MetalResourceManager::newLibrary(this, *((const ggl::ShaderLibrary **)a2 + 6))) != 0)
  {
    v10 = v8[26];
    v11 = (std::__shared_weak_count *)v8[27];
    v42[0] = (void *)v10;
    v42[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (!v10 || *(_DWORD *)(v10 + 8))
      goto LABEL_8;
    v17 = *(_DWORD **)(v10 + 24);
    v18 = *(_DWORD **)(v10 + 32);
    if (v17 == v18)
    {
LABEL_18:
      v20 = *(_QWORD *)(v10 + 56);
    }
    else
    {
      v19 = 0;
      while (*v17 != **((_DWORD **)a2 + 5))
      {
        ++v19;
        if (++v17 == v18)
          goto LABEL_18;
      }
      v20 = *(_QWORD *)(v10 + 56) + 24 * v19;
    }
    v24 = *(unsigned __int8 *)(v20 + 23);
    v25 = v24;
    if ((v24 & 0x80u) != 0)
      v24 = *(_QWORD *)(v20 + 8);
    if (v24)
    {
      if (a3)
      {
        v26 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
        LOBYTE(v45) = a4 & 1;
        v27.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(a4) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
        *(_DWORD *)((char *)&v45 + 1) = vmovn_s16(v27).u32[0];
        BYTE5(v45) = (a4 & 0x20) != 0;
        BYTE6(v45) = (a4 & 0x40) != 0;
        HIBYTE(v45) = (a4 & 0x80) != 0;
        v28 = (uint64x2_t)vdupq_n_s64(a4);
        v29.i64[0] = 0x101010101010101;
        v29.i64[1] = 0x101010101010101;
        v46 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6170), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6160)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6190), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6180))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61B0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61A0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61D0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61C0)))), v29);
        v47 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61F0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB61E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6210), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6200))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6230), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6220)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6250), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6240)))), v29);
        v48 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6270), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6260)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6290), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB6280))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62B0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62A0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62D0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62C0)))), v29);
        v30 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62F0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_19FFB62E0));
        v30.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v30) & 0xFF01FF01FF01FF01;
        v49 = vmovn_s16(v30).u32[0];
        v50 = (a4 & 0x1000000000000000) != 0;
        v51 = (a4 & 0x2000000000000000) != 0;
        v52 = (a4 & 0x4000000000000000) != 0;
        v53 = a4 < 0;
        objc_msgSend(v26, "setConstantValues:type:withRange:", &v45, 53, 0, 64);
        v25 = *(_BYTE *)(v20 + 23);
      }
      else
      {
        v26 = 0;
      }
      if (v25 >= 0)
        v31 = v20;
      else
        v31 = *(_QWORD *)v20;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CC6AB0], "functionDescriptor");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = *(void **)(*((_QWORD *)this + 32) + 128);
      if (v34)
      {
        v35 = v34;
        v44 = v35;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "setBinaryArchives:", v36);

      }
      if (a3)
        objc_msgSend(v33, "setConstantValues:", v26);
      objc_msgSend(v33, "setName:", v32);
      v37 = (void *)objc_msgSend(v9[4], "newFunctionWithDescriptor:error:", v33, 0);
      {
        v39 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "GeoGL", 0xA3D02C1100000005);
      }
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                 + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
      *(_QWORD *)v14 = 0;
      *(_WORD *)(v14 + 8) = 1025;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      objc_storeStrong((id *)(v14 + 32), v37);
      ggl::ResourceManager::_addResourceStat((uint64_t)this, "Function", 0x33D8746B00000008uLL, 0);

    }
    else
    {
LABEL_8:
      v14 = 0;
    }
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v42[0] = 0;
    v42[1] = 0;
    v43 = 0;
    if (a3)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v45);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v46.i64[1], (uint64_t)" with constants:", 16);
      std::ostream::operator<<();
      std::stringbuf::str();
      *(_OWORD *)v42 = v40;
      v43 = v41;
      v45 = *MEMORY[0x1E0DE4F50];
      v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v46.i64[1] = v21;
      v47.i64[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v55 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v56);
      v22 = v42;
      if (v43 < 0)
        v22 = (void **)v42[0];
    }
    else
    {
      v22 = v42;
    }
    NSLog((NSString *)CFSTR("Failed to create library for function '%s'%s"), *(_QWORD *)(*((_QWORD *)a2 + 5) + 8), v22);
    if (SHIBYTE(v43) < 0)
      operator delete(v42[0]);
    return 0;
  }
  return v14;
}

void sub_19F20A984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

ggl::MetalTextureResource *ggl::MetalResourceManager::newTexture(ggl::MetalResourceManager *this, const ggl::Texture *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t PixelFormat;
  unsigned __int8 v12;
  ggl::MetalTextureResource *v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  void *v30;
  int v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint8_t buf[16];

  simpleValidateTexture(a2);
  LOBYTE(v4) = 0;
  switch(*((_DWORD *)a2 + 14))
  {
    case 0:
    case 1:
      LOBYTE(v4) = *((_QWORD *)a2 + 11) != 0;
      goto LABEL_3;
    case 2:
      v5 = *((_DWORD *)a2 + 17);
      if (*((_DWORD *)a2 + 18) <= 1u)
        v6 = 3;
      else
        v6 = 8;
      v8 = *((unsigned int *)a2 + 20);
      v7 = *((unsigned int *)a2 + 21);
      v10 = *((unsigned int *)a2 + 22);
      LODWORD(v9) = *((_DWORD *)a2 + 23);
      LOBYTE(v4) = 0;
      v47 = ggl::pixelFormatPixelsSize(*((_DWORD *)a2 + 17), v8, v7) * v10;
      break;
    case 3:
      v7 = *((unsigned int *)a2 + 49);
      LODWORD(v9) = *((_DWORD *)a2 + 22);
      v5 = *((_DWORD *)a2 + 17);
      LOBYTE(v4) = 0;
      v47 = 6 * ggl::pixelFormatPixelsSize(v5, v7, v7);
      v6 = 5;
      v10 = 1;
      v8 = v7;
      break;
    case 4:
LABEL_3:
      v5 = *((_DWORD *)a2 + 17);
      if (*((_DWORD *)a2 + 18) <= 1u)
        v6 = 2;
      else
        v6 = 4;
      v8 = *((unsigned int *)a2 + 20);
      v7 = *((unsigned int *)a2 + 21);
      LODWORD(v9) = *((_DWORD *)a2 + 26);
      v47 = ggl::pixelFormatPixelsSize(*((_DWORD *)a2 + 17), v8, v7);
      v10 = 1;
      break;
    default:
      v47 = 0;
      LOBYTE(v4) = 0;
      v7 = 0;
      v8 = 0;
      v6 = 0;
      v5 = *((_DWORD *)a2 + 17);
      v10 = 1;
      LODWORD(v9) = 1;
      break;
  }
  PixelFormat = ggl::getPixelFormat(v5, *(unsigned __int8 *)(*((_QWORD *)this + 32) + 16));
  v13 = (ggl::MetalTextureResource *)&unk_1ECE44000;
  if ((v12 & 1) == 0)
    goto LABEL_79;
  while (1)
  {
    v13 = (ggl::MetalTextureResource *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)v13 + 495)
                                                                                             + 16))(*((_QWORD **)v13 + 495), 136, 8);
    ggl::MetalTextureResource::MetalTextureResource(v13);
    if ((v4 & 1) != 0)
    {
      if (*((_DWORD *)a2 + 16) == 2)
      {
        v14 = (_QWORD *)*((_QWORD *)v13 + 4);
        *((_BYTE *)v13 + 120) = 1;
        *((_QWORD *)v13 + 16) = 3;
        v9 = *((_QWORD *)v13 + 5);
        v15 = v9 - (_QWORD)v14;
        if (v9 - (unint64_t)v14 > 0x17)
        {
          if (v15 != 24)
          {
            v4 = v14 + 3;
            while ((_QWORD *)v9 != v4)
            {
              v22 = *(void **)(v9 - 8);
              v9 -= 8;

            }
            *((_QWORD *)v13 + 5) = v4;
          }
        }
        else
        {
          std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append((uint64_t)v13 + 32, 3 - (v15 >> 3));
        }
      }
      if (*((_QWORD *)v13 + 16))
      {
        v9 = 0;
        v10 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
        do
        {
          v4 = *(id *)(*(_QWORD *)(v10 + 32) + 8 * v9);
          v23 = objc_msgSend(v4, "newTextureViewWithPixelFormat:", PixelFormat);
          v24 = (_QWORD *)*((_QWORD *)v13 + 4);
          v25 = (void *)v24[v9];
          v24[v9] = v23;

          ++v9;
        }
        while (v9 < *((_QWORD *)v13 + 16));
      }
      v26 = *((_QWORD *)a2 + 3);
      if (v26 && v26 != 3735927469)
      {
        ggl::RenderDataHolder::replaceRenderResource((uint64_t)a2, (uint64_t)this, (uint64_t)v13);
        v29 = v47;
        goto LABEL_72;
      }
      if (!this)
      {
        v9 = 0;
        v28 = 0;
LABEL_66:
        v41 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 1) = v9;
        *((_QWORD *)a2 + 2) = v28;
        v29 = v47;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        *((_QWORD *)a2 + 3) = v13;
        ++*((_DWORD *)a2 + 8);
        goto LABEL_72;
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v27)
      {
        v9 = *((_QWORD *)this + 1);
        v28 = std::__shared_weak_count::lock(v27);
        if (v28)
          goto LABEL_66;
      }
      goto LABEL_78;
    }
    v4 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    objc_msgSend(v4, "setTextureType:", v6);
    objc_msgSend(v4, "setPixelFormat:", PixelFormat);
    objc_msgSend(v4, "setWidth:", v8);
    objc_msgSend(v4, "setHeight:", v7);
    objc_msgSend(v4, "setDepth:", 1);
    objc_msgSend(v4, "setMipmapLevelCount:", v9);
    objc_msgSend(v4, "setSampleCount:", *((unsigned int *)a2 + 18));
    objc_msgSend(v4, "setArrayLength:", v10);
    objc_msgSend(v4, "setCpuCacheMode:", 0);
    v16 = *((_DWORD *)a2 + 17);
    if ((v16 - 19) < 8 && (((0x87u >> (v16 - 19)) & 1) != 0 || (v16 - 25) < 2)
      || *((_DWORD *)a2 + 18) > 1u
      || *((_DWORD *)a2 + 16) == 3)
    {
      v17 = 2;
    }
    else
    {
      v17 = 0;
    }
    objc_msgSend(v4, "setStorageMode:", v17);
    v18 = *((_DWORD *)a2 + 15) - 1;
    if (v18 >= 5)
      v19 = 0;
    else
      v19 = qword_1A0083148[v18];
    objc_msgSend(v4, "setUsage:", v19);
    if (*((_DWORD *)a2 + 16) == 2)
    {
      v20 = (_QWORD *)*((_QWORD *)v13 + 4);
      *((_BYTE *)v13 + 120) = 1;
      *((_QWORD *)v13 + 16) = 3;
      v9 = *((_QWORD *)v13 + 5);
      v21 = v9 - (_QWORD)v20;
      if (v9 - (unint64_t)v20 > 0x17)
      {
        if (v21 != 24)
        {
          v10 = (uint64_t)(v20 + 3);
          if ((_QWORD *)v9 != v20 + 3)
          {
            do
            {
              v30 = *(void **)(v9 - 8);
              v9 -= 8;

            }
            while (v9 != v10);
          }
          *((_QWORD *)v13 + 5) = v10;
        }
      }
      else
      {
        std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append((uint64_t)v13 + 32, 3 - (v21 >> 3));
      }
    }
    if (*((_QWORD *)v13 + 16))
    {
      v9 = 0;
      while (1)
      {
        v31 = *((_DWORD *)a2 + 14);
        v32 = *(id *)(*((_QWORD *)this + 32) + 104);
        v10 = (uint64_t)v32;
        v33 = v31 == 4
            ? objc_msgSend(v32, "newTextureWithDescriptor:iosurface:plane:", v4, *((_QWORD *)a2 + 20), 0)
            : objc_msgSend(v32, "newTextureWithDescriptor:", v4);
        v7 = v33;

        if (!v7)
          break;
        v34 = (_QWORD *)*((_QWORD *)v13 + 4);
        v35 = (void *)v34[v9];
        v34[v9] = v7;

        if (++v9 >= *((_QWORD *)v13 + 16))
          goto LABEL_57;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_19F029000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Metal returned null texture.", buf, 2u);
      }
      abort_with_reason();
      __break(1u);
      goto LABEL_78;
    }
    if (!this)
      break;
LABEL_57:
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v36)
    {
      v9 = *((_QWORD *)this + 1);
      v37 = std::__shared_weak_count::lock(v36);
      if (v37)
        goto LABEL_59;
    }
LABEL_78:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_79:
    {
      v46 = operator new();
      *((_QWORD *)v13 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v46, "GeoGL", 0xA3D02C1100000005);
    }
  }
  v9 = 0;
  v37 = 0;
LABEL_59:
  v38 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = v9;
  *((_QWORD *)a2 + 2) = v37;
  v29 = v47;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *((_QWORD *)a2 + 3) = v13;
  ++*((_DWORD *)a2 + 8);

LABEL_72:
  v44 = *((_QWORD *)v13 + 16) * v29;
  *((_QWORD *)v13 + 3) = v44;
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Texture", 0x4DDB34EE00000007uLL, v44);
  return v13;
}

void sub_19F20B07C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::getPixelFormat(int a1, int a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t v5;

  result = 0;
  switch(a1)
  {
    case 1:
      return 1;
    case 2:
      return 10;
    case 3:
      return 20;
    case 4:
      return 25;
    case 5:
      return 55;
    case 6:
      return 30;
    case 7:
      return 60;
    case 8:
      return 65;
    case 9:
      return 105;
    case 12:
      return 70;
    case 13:
      return 71;
    case 14:
      return 80;
    case 15:
      return 81;
    case 16:
      return 110;
    case 17:
      return 115;
    case 18:
      return 125;
    case 19:
      return 250;
    case 21:
      return 252;
    case 24:
      return 40;
    case 25:
      return 253;
    case 26:
      return 260;
    case 27:
      return 43;
    case 28:
      v4 = a2 == 0;
      v5 = 204;
      goto LABEL_53;
    case 29:
      v4 = a2 == 0;
      v5 = 205;
      goto LABEL_53;
    case 30:
      v4 = a2 == 0;
      v5 = 206;
      goto LABEL_53;
    case 31:
      v4 = a2 == 0;
      v5 = 207;
      goto LABEL_53;
    case 32:
      v4 = a2 == 0;
      v5 = 208;
      goto LABEL_53;
    case 33:
      v4 = a2 == 0;
      v5 = 210;
      goto LABEL_53;
    case 34:
      v4 = a2 == 0;
      v5 = 211;
      goto LABEL_53;
    case 35:
      v4 = a2 == 0;
      v5 = 212;
      goto LABEL_53;
    case 36:
      v4 = a2 == 0;
      v5 = 213;
      goto LABEL_53;
    case 37:
      v4 = a2 == 0;
      v5 = 214;
      goto LABEL_53;
    case 38:
      v4 = a2 == 0;
      v5 = 215;
      goto LABEL_53;
    case 39:
      v4 = a2 == 0;
      v5 = 216;
      goto LABEL_53;
    case 40:
      v4 = a2 == 0;
      v5 = 217;
      goto LABEL_53;
    case 41:
      v4 = a2 == 0;
      v5 = 218;
      goto LABEL_53;
    case 42:
    case 43:
      return 500;
    case 44:
      v4 = a2 == 0;
      v5 = 186;
      goto LABEL_53;
    case 45:
      v4 = a2 == 0;
      v5 = 187;
      goto LABEL_53;
    case 46:
      v4 = a2 == 0;
      v5 = 188;
      goto LABEL_53;
    case 47:
      v4 = a2 == 0;
      v5 = 189;
      goto LABEL_53;
    case 48:
      v4 = a2 == 0;
      v5 = 190;
      goto LABEL_53;
    case 49:
      v4 = a2 == 0;
      v5 = 192;
      goto LABEL_53;
    case 50:
      v4 = a2 == 0;
      v5 = 193;
      goto LABEL_53;
    case 51:
      v4 = a2 == 0;
      v5 = 194;
      goto LABEL_53;
    case 52:
      v4 = a2 == 0;
      v5 = 195;
      goto LABEL_53;
    case 53:
      v4 = a2 == 0;
      v5 = 196;
      goto LABEL_53;
    case 54:
      v4 = a2 == 0;
      v5 = 197;
      goto LABEL_53;
    case 55:
      v4 = a2 == 0;
      v5 = 198;
      goto LABEL_53;
    case 56:
      v4 = a2 == 0;
      v5 = 199;
      goto LABEL_53;
    case 57:
      v4 = a2 == 0;
      v5 = 200;
LABEL_53:
      if (v4)
        result = 0;
      else
        result = v5;
      break;
    default:
      return result;
  }
  return result;
}

ggl::MetalTextureResource *ggl::MetalTextureResource::MetalTextureResource(ggl::MetalTextureResource *this)
{
  __int128 v2;
  char *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 257;
  v2 = 0uLL;
  *((_OWORD *)this + 2) = 0u;
  v3 = (char *)this + 32;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 6) = 0;
  if ((v4 & 1) == 0)
  {
    v2 = 0uLL;
    if (v12)
    {
      v13 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v13, "GeoGL", 0xA3D02C1100000005);
      v2 = 0uLL;
    }
  }
  v5 = ggl::Allocator::instance(void)::alloc;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = v5;
  *(_OWORD *)((char *)this + 72) = v2;
  *(_OWORD *)((char *)this + 88) = v2;
  *(_OWORD *)((char *)this + 104) = v2;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 1;
  v6 = *((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 5);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append((uint64_t)v3, 1 - (v8 >> 3));
  }
  else if ((unint64_t)v8 >= 9)
  {
    v9 = v6 + 8;
    while (v7 != v9)
    {
      v10 = *(void **)(v7 - 8);
      v7 -= 8;

    }
    *((_QWORD *)this + 5) = v9;
  }
  return this;
}

void sub_19F20B42C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  ggl::RenderResourceFences *v2;

  ggl::RenderResourceFences::~RenderResourceFences(v2);
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<NSObject  {objcproto10MTLTexture}* {__strong},geo::StdAllocator<NSObject  {objcproto10MTLTexture}* {__strong},ggl::Allocator>>::__append(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 3)
  {
    if (a2)
    {
      v12 = 8 * a2;
      v13 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v12 -= 8;
      }
      while (v12);
      v4 = v13;
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      abort();
    v9 = v5 - *(_QWORD *)a1;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v10, 8);
    else
      v11 = 0;
    v14 = v11 + 8 * v7;
    v15 = 8 * a2;
    v16 = v14 + 8 * a2;
    v17 = (_QWORD *)v14;
    do
    {
      if (v17)
        *v17 = 0;
      ++v17;
      v15 -= 8;
    }
    while (v15);
    v18 = v11 + 8 * v10;
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(a1 + 8);
    if (v20 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v16;
      v31 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v18;
      if (v20)
LABEL_36:
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v20, v31 - (_QWORD)v20);
    }
    else
    {
      v21 = (unint64_t)v20 - *(_QWORD *)a1 - 8;
      if (v21 <= 0x77)
        goto LABEL_42;
      if ((unint64_t)v20 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8 < v14
        && v6 - (v21 & 0xFFFFFFFFFFFFFFF8) + v11 - 8 < (unint64_t)v20)
      {
        goto LABEL_42;
      }
      v23 = (v21 >> 3) + 1;
      v24 = (_OWORD *)(v11 + 8 * v7 - 16);
      v25 = (__int128 *)(v20 - 4);
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *v25;
        v27 = v25[1];
        *v25 = 0uLL;
        v25[1] = 0uLL;
        v25 -= 2;
        *(v24 - 1) = v28;
        *v24 = v27;
        v24 -= 2;
        v26 -= 4;
      }
      while (v26);
      v14 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_42:
        do
        {
          v29 = *--v20;
          *v20 = 0;
          *(_QWORD *)(v14 - 8) = v29;
          v14 -= 8;
        }
        while (v20 != v19);
      }
      v20 = *(_QWORD **)a1;
      v30 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v16;
      v31 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v18;
      while (v30 != v20)
      {
        v32 = (void *)*--v30;

      }
      if (v20)
        goto LABEL_36;
    }
  }
}

void simpleValidateTexture(const ggl::Texture *a1)
{
  unsigned int v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  int v8;
  const ggl::Texture *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
    v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    LOWORD(v8) = 0;
    v5 = "MetalResourceManager: Texture is nullptr";
    v6 = v4;
    v7 = 2;
    goto LABEL_20;
  }
  if (*((_QWORD *)a1 + 3) == 3735927469)
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
    v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v8 = 134217984;
    v9 = a1;
    v5 = "MetalResourceManager: Stale texture instance(%p)";
LABEL_19:
    v6 = v4;
    v7 = 12;
LABEL_20:
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v8, v7);
LABEL_21:

    return;
  }
  if (*((_DWORD *)a1 + 14) == 3)
  {
    v2 = *((_DWORD *)a1 + 49);
    v3 = v2;
  }
  else
  {
    v2 = *((_DWORD *)a1 + 20);
    v3 = *((_DWORD *)a1 + 21);
  }
  if (!ggl::pixelFormatPixelsSize(*((_DWORD *)a1 + 17), v2, v3))
  {
    if (GEOGetGeoGLDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
    v4 = (id)GEOGetGeoGLDefaultLog_log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v8 = 134217984;
    v9 = a1;
    v5 = "MetalResourceManager: Corrupted texture instance(%p)";
    goto LABEL_19;
  }
}

void *ggl::MetalResourceManager::newLibrary(ggl::MetalResourceManager *this, const ggl::ShaderLibrary *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  dispatch_data_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  id v52[3];
  id v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v4 = *((_QWORD *)a2 + 26);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 27);
  v56 = v4;
  v57 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v54 = v4;
    v55 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v54 = v4;
    v55 = 0;
  }
  v9 = *(_DWORD *)(v4 + 12);
  if (v9 == 1)
  {
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16), 4);
    v18 = objc_alloc_init(MEMORY[0x1E0CC6A68]);
    objc_msgSend(v18, "setMathMode:", 2);
    if (*((_QWORD *)this + 33))
      v19 = *((_QWORD *)this + 33);
    else
      v19 = 131076;
    objc_msgSend(v18, "setLanguageVersion:", v19);
    v20 = *(id *)(*((_QWORD *)this + 32) + 104);
    v51 = 0;
    v13 = (void *)objc_msgSend(v20, "newLibraryWithSource:options:error:", v17, v18, &v51);
    v21 = v51;

    if (v21)
    {
      v22 = **((_QWORD **)a2 + 5);
      objc_msgSend(v21, "localizedDescription");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog((NSString *)CFSTR(" error for library from source '%s': %@"), v22, v23);

    }
  }
  else
  {
    if (v9)
      goto LABEL_15;
    v10 = *(_DWORD *)(v4 + 88);
    if (v10 != 1)
    {
      if (!v10)
      {
        v11 = dispatch_data_create(*(const void **)(*(_QWORD *)(v4 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16), 0, 0);
        v12 = *(id *)(*((_QWORD *)this + 32) + 104);
        v53 = 0;
        v13 = (void *)objc_msgSend(v12, "newLibraryWithData:error:", v11, &v53);
        v14 = v53;

        if (v14)
        {
          v15 = **((_QWORD **)a2 + 5);
          objc_msgSend(v14, "localizedDescription");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          NSLog((NSString *)CFSTR("Compiler error for raw data library '%s': %@"), v15, v16);

        }
        goto LABEL_22;
      }
LABEL_15:
      v13 = 0;
      goto LABEL_35;
    }
    v52[1] = (id)v4;
    v52[2] = v5;
    if (v5)
    {
      v40 = (unint64_t *)&v5->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(v4 + 96));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = *(id *)(*((_QWORD *)this + 32) + 104);
    v52[0] = 0;
    v13 = (void *)objc_msgSend(v44, "newDefaultLibraryWithBundle:error:", v43, v52);
    v45 = v52[0];

    if (v45)
    {
      v46 = **((_QWORD **)a2 + 5);
      objc_msgSend(v45, "localizedDescription");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog((NSString *)CFSTR("Compiler error for library from bundle '%s': %@"), v46, v47);

    }
    if (v5)
    {
      v48 = (unint64_t *)&v5->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
LABEL_22:
  if (!v13)
  {
LABEL_35:
    v25 = 0;
    v33 = v55;
    if (!v55)
      goto LABEL_40;
    goto LABEL_36;
  }
  v25 = &unk_1ECE44000;
  if ((v24 & 1) == 0)
    goto LABEL_57;
  while (1)
  {
    v25 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 495) + 16))(*((_QWORD *)v25 + 495), 40, 8);
    *(_QWORD *)v25 = 0;
    *((_WORD *)v25 + 4) = 769;
    *((_QWORD *)v25 + 2) = 0;
    *((_QWORD *)v25 + 3) = 0;
    *((_QWORD *)v25 + 4) = 0;
    objc_storeStrong((id *)v25 + 4, v13);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v26)
    {
      v27 = *((_QWORD *)this + 1);
      v28 = std::__shared_weak_count::lock(v26);
      if (v28)
        break;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_57:
    {
      v50 = operator new();
      *((_QWORD *)v25 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v50, "GeoGL", 0xA3D02C1100000005);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = v27;
  *((_QWORD *)a2 + 2) = v28;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *((_QWORD *)a2 + 3) = v25;
  ++*((_DWORD *)a2 + 8);
  v32 = *(_QWORD *)(v56 + 16);
  *(_QWORD *)(v56 + 16) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Library", 0x6E3DA12000000007uLL, 0);
  v33 = v55;
  if (v55)
  {
LABEL_36:
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_40:
  v36 = v57;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  return v25;
}

void sub_19F20BD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::synchronizedUpdate(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  unsigned __int8 v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_weak_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  id *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  int v79;
  uint64_t v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  id *v85;
  id v86;
  void *v87;
  _QWORD *v88;
  _OWORD *v89;
  _QWORD *v90;
  _OWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  id v96;
  std::__shared_count v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  std::__shared_weak_count_vtbl *v100;
  unsigned int v101;
  char *v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  char *v108;
  _OWORD *v109;
  __int128 v110;
  std::__shared_weak_count *shared_owners;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t v115;
  void (__cdecl *v116)(std::__shared_weak_count *__hidden);
  int v117;
  uint64_t v118;
  void (__cdecl *v119)(std::__shared_weak_count *__hidden);
  int v120;
  unsigned __int8 v121;
  void (__cdecl *v122)(std::__shared_weak_count *__hidden);
  int v123;
  uint64_t **v124;
  uint64_t **v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t **v135;
  unint64_t v136;
  uint64_t *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  geo::read_write_lock *v145;
  const char *v146;
  malloc_zone_t *zone;
  uint64_t v148;
  geo::read_write_lock *v149;
  const char *v150;
  malloc_zone_t *v151;
  uint64_t v152;
  geo::read_write_lock *v153;
  const char *v154;
  malloc_zone_t *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unsigned __int8 v162;
  uint64_t **v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  uint64_t v176;
  __int128 v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  __int128 v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  _QWORD *v191;
  uint64_t *v192;
  unint64_t *v193;
  unint64_t v194;
  _OWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  uint64_t v203;
  __int128 v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  __int128 v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t **v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t *v222;
  char **v223;
  unint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  unint64_t v234;
  std::mutex *v235;
  void (***sig)(_QWORD, unint64_t);
  _QWORD *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  char *v272;
  char *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unsigned __int8 v295;
  _QWORD *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t **i;
  _QWORD *v309;
  uint64_t v310;
  uint64_t j;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  unsigned __int8 v315;
  unsigned __int8 v316;
  _QWORD *v317;
  _QWORD *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  id v324;
  id v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t m;
  void *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t *v334;
  _QWORD *v335;
  _QWORD *v336;
  _QWORD *v337;
  void *v338;
  _BOOL4 v339;
  _QWORD *v340;
  _QWORD *v341;
  double v342;
  double v343;
  unsigned __int8 *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t k;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  _BYTE *v353;
  _BOOL4 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  int v358;
  uint64_t *v359;
  uint64_t **v360;
  _QWORD *v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t n;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v370;
  int v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  float v379;
  float v380;
  id v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  uint64_t ii;
  _QWORD *v386;
  void *v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  uint64_t v396;
  double v397;
  float v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  double v402;
  float32x2_t v403;
  int8x8_t v404;
  double v405;
  unint64_t v406;
  char *v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  uint64_t *v414;
  char *v415;
  unint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  __int128 v442;
  int v443;
  id *v446;
  double v447;
  uint64_t v448;
  id *v449;
  uint64_t **v450;
  float v451;
  _QWORD *v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  __int128 v464;
  _BYTE v465[128];
  __int128 v466;
  __int128 v467;
  __int128 v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  uint64_t v484;

  v484 = *MEMORY[0x1E0C80C00];
  v452 = a1;
  if (!a1[37])
    goto LABEL_104;
  v4 = a1 + 37;
  v5 = (void *)a1[35];
  if (v5)
  {
    v6 = v5;
    v7 = v452[4];
    objc_msgSend(v6, "feature");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    md::LabelCustomFeatureSupport::featureForAnnotation(&v466, v7, v9, v6);
    v10 = v466;
    v466 = 0uLL;
    v11 = (std::__shared_weak_count *)v452[40];
    *((_OWORD *)v4 + 1) = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
    if (*((_QWORD *)&v466 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v466 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

  }
  v18 = v4 + 2;
  v17 = (_DWORD *)v4[2];
  if (!v17)
  {
LABEL_91:
    md::LabelManager::releaseAdoptedSelectedLabelMarker((md::LabelManager *)v452[3], 1);
    goto LABEL_92;
  }
  if (!v17[32])
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 264))(v17) == 7)
    {
      v63 = (id *)v452[39];
      v64 = (std::__shared_weak_count *)v452[40];
      *(_QWORD *)&v466 = v63;
      *((_QWORD *)&v466 + 1) = v64;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      md::TrafficIncidentLabelFeature::updateStyle(v63, (md::LabelManager *)v452[3]);
      if (v64)
      {
        v67 = (unint64_t *)&v64->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      goto LABEL_16;
    }
    v291 = v452[39];
    v292 = (std::__shared_weak_count *)v452[40];
    *(_QWORD *)&v480 = v291;
    *((_QWORD *)&v480 + 1) = v292;
    if (v292)
    {
      v293 = (unint64_t *)&v292->__shared_owners_;
      do
        v294 = __ldxr(v293);
      while (__stxr(v294 + 1, v293));
    }
    v466 = 0uLL;
    *(_QWORD *)&v467 = 0;
    {
      v441 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v441, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)&v467 + 1) = mdm::Allocator::instance(void)::alloc;
    v296 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 16, 8);
    *(_QWORD *)&v466 = v296;
    *(_QWORD *)&v467 = v296 + 2;
    if (v296)
    {
      *v296 = v291;
      v296[1] = v292;
      if (v292)
      {
        v297 = (unint64_t *)&v292->__shared_owners_;
        do
          v298 = __ldxr(v297);
        while (__stxr(v298 + 1, v297));
        *((_QWORD *)&v466 + 1) = v296 + 2;
LABEL_594:
        v427 = (unint64_t *)&v292->__shared_owners_;
        do
          v428 = __ldaxr(v427);
        while (__stlxr(v428 - 1, v427));
        if (!v428)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
        goto LABEL_599;
      }
      *((_QWORD *)&v466 + 1) = v296 + 2;
    }
    else
    {
      *((_QWORD *)&v466 + 1) = 16;
      if (v292)
        goto LABEL_594;
    }
LABEL_599:
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v452[3] + 296), (uint64_t **)&v466);
    v429 = v466;
    if ((_QWORD)v466)
    {
      v430 = *((_QWORD *)&v466 + 1);
      v431 = v466;
      if (*((_QWORD *)&v466 + 1) != (_QWORD)v466)
      {
        do
        {
          v432 = *(std::__shared_weak_count **)(v430 - 8);
          if (v432)
          {
            v433 = (unint64_t *)&v432->__shared_owners_;
            do
              v434 = __ldaxr(v433);
            while (__stlxr(v434 - 1, v433));
            if (!v434)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v432->__on_zero_shared)(v432, v431);
              std::__shared_weak_count::__release_weak(v432);
            }
          }
          v430 -= 16;
        }
        while (v430 != v429);
        v431 = v466;
      }
      *((_QWORD *)&v466 + 1) = v429;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v467 + 1) + 40))(*((_QWORD *)&v467 + 1), v431, v467 - v431);
    }
  }
LABEL_16:
  if (!*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v18 + 552))(*v18, 0, 0, 0, 0))goto LABEL_91;
  v19 = v452[6];
  v20 = v452[3];
  LODWORD(v466) = 1;
  md::LabelPool::labelForCustomFeature((uint64_t *)&v480, v19, v20, v4 + 2, (unsigned int *)&v466, 0);
  v21 = v480;
  if (!(_QWORD)v480)
  {
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v480 + 1);
    if (*((_QWORD *)&v480 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v480 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    goto LABEL_91;
  }
  v22 = v452[6];
  if (!*(_QWORD *)(v22 + 704))
    goto LABEL_25;
  v23 = *(std::__shared_weak_count **)(v22 + 712);
  *(_OWORD *)(v22 + 704) = 0u;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)(v22 + 760) = 0;
  *(_BYTE *)(v22 + 758) = 1;
  v21 = v480;
  if ((_QWORD)v480)
  {
LABEL_25:
    v26 = *((_QWORD *)&v480 + 1);
    if (*((_QWORD *)&v480 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v480 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *(_QWORD *)(v22 + 704) = v21;
    v29 = *(std::__shared_weak_count **)(v22 + 712);
    *(_QWORD *)(v22 + 712) = v26;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    *(_BYTE *)(v22 + 760) = 0;
    if ((_QWORD)v480)
      *(_BYTE *)(v22 + 757) = 0;
  }
  v32 = *v4;
  *(_QWORD *)&v466 = 0;
  BYTE8(v466) = 0;
  v467 = 0u;
  v468 = 0u;
  v469 = 0;
  v35 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v34 & 1) == 0)
    goto LABEL_624;
  while (1)
  {
    v470 = *(_QWORD *)(v35 + 2392);
    v471 = 0;
    v473 = 0;
    v474 = 0;
    v472 = 0;
    v36 = atomic_load(v33);
    {
      v439 = operator new();
      *(_QWORD *)(v35 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v439, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v475 = *(_QWORD *)(v35 + 2392);
    v476 = 0;
    v478 = 0;
    v477 = 0;
    v37 = atomic_load(v33);
    {
      v440 = operator new();
      *(_QWORD *)(v35 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v440, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v479 = *(_QWORD *)(v35 + 2392);
    md::Label::populateFeatureInfo((md::Label *)v480, (md::LabelFeatureInfo *)&v466, 0);
    v38 = v452[3];
    v39 = *(std::__shared_weak_count **)(v38 + 16);
    v457 = *(_QWORD *)(v38 + 8);
    if (v39)
    {
      v458 = std::__shared_weak_count::lock(v39);
      if (v458)
        break;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_623:
    __break(1u);
LABEL_624:
    {
      v438 = operator new();
      *(_QWORD *)(v35 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v438, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
  v40 = (unsigned __int8 *)(v480 + 1297);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 + 1, v40));
  v42 = (unsigned __int8 *)(*(_QWORD *)(v32 + 288) + 1297);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  v44 = v480;
  if (*((_QWORD *)&v480 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v480 + 1) + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *(std::__shared_weak_count **)(v32 + 296);
  *(_OWORD *)(v32 + 288) = v44;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v458;
  if (v458)
  {
    p_shared_weak_owners = (unint64_t *)&v458->__shared_weak_owners_;
    do
      v52 = __ldxr(p_shared_weak_owners);
    while (__stxr(v52 + 1, p_shared_weak_owners));
  }
  v53 = *(std::__shared_weak_count **)(v32 + 240);
  *(_QWORD *)(v32 + 232) = v457;
  *(_QWORD *)(v32 + 240) = v50;
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  md::StandardLabelMarker::populateFromFeature((md::StandardLabelMarker *)v32, (const md::LabelFeatureInfo *)&v466);
  if (v50)
  {
    v54 = (unint64_t *)&v50->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if ((SHIBYTE(v478) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v474) & 0x80000000) == 0)
      goto LABEL_64;
LABEL_422:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v475 + 40))(v475, v472, v474 & 0x7FFFFFFFFFFFFFFFLL);
    v56 = v468;
    if (!(_QWORD)v468)
      goto LABEL_66;
    goto LABEL_65;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v479 + 40))(v479, v476, v478 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v474) < 0)
    goto LABEL_422;
LABEL_64:
  v56 = v468;
  if ((_QWORD)v468)
  {
LABEL_65:
    *((_QWORD *)&v468 + 1) = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v470 + 40))(v470, v56, v469 - v56);
  }
LABEL_66:
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v467 + 1);
  if (*((_QWORD *)&v467 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v480 + 1);
  if (*((_QWORD *)&v480 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v480 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v452 + 176))(v452, v4);
LABEL_92:
  v72 = (std::__shared_weak_count *)v452[38];
  *v4 = 0;
  v4[1] = 0;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)v452[40];
  *v18 = 0;
  v18[1] = 0;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  a1 = v452;
  v78 = (void *)v452[35];
  if (v78)
  {
    v452[35] = 0;

    a1 = v452;
  }
LABEL_104:
  v4 = (_QWORD *)a1[6];
  v79 = *(_DWORD *)(v4[78] + 228);
  if (v79 != *((_DWORD *)v4 + 188))
    goto LABEL_293;
  v80 = v4[79];
  if (!*(_BYTE *)(v80 + 88))
    goto LABEL_294;
  v443 = *(_DWORD *)(v4[78] + 228);
  *(_BYTE *)(v80 + 88) = 0;
  v81 = &v480;
  v82 = *(_QWORD *)(v80 + 72);
  *(_QWORD *)&v480 = *(_QWORD *)(v80 + 64);
  *((_QWORD *)&v480 + 1) = v82;
  v83 = *(_QWORD *)(v80 + 80);
  *(_QWORD *)(v80 + 72) = 0;
  *(_QWORD *)(v80 + 80) = 0;
  *(_QWORD *)&v481 = v83;
  v84 = (__int128 *)(v82 + 16);
  if (v83)
    v81 = v84;
  *(_QWORD *)v81 = (char *)&v480 + 8;
  *(_QWORD *)(v80 + 64) = v80 + 72;
  v85 = *(id **)(v80 + 40);
  v450 = (uint64_t **)(v80 + 72);
  v446 = *(id **)(v80 + 48);
  v448 = v80;
  if (v85 != v446)
  {
    v442 = xmmword_19FFB2E80;
    do
    {
      v449 = v85;
      v86 = *v85;
      v87 = v86;
      v88 = (_QWORD *)*((_QWORD *)&v480 + 1);
      if (*((_QWORD *)&v480 + 1))
      {
        v89 = (__int128 *)((char *)&v480 + 8);
        do
        {
          v90 = v88;
          v91 = v89;
          v92 = v88[4];
          v93 = v88 + 1;
          if (v92 >= (unint64_t)v86)
          {
            v93 = v90;
            v89 = v90;
          }
          v88 = (_QWORD *)*v93;
        }
        while (v88);
        if (v89 != (__int128 *)((char *)&v480 + 8))
        {
          v94 = v92 >= (unint64_t)v86 ? v90 : v91;
          if ((unint64_t)v86 >= v94[4])
          {
            if (v92 >= (unint64_t)v86)
              v132 = v90;
            else
              v132 = v91;
            v133 = v450;
            while (1)
            {
              v134 = *v133;
              v135 = v133;
              if (!*v133)
                break;
              while (1)
              {
                v133 = (uint64_t **)v134;
                v136 = v134[4];
                if ((unint64_t)v86 < v136)
                  break;
                if (v136 >= (unint64_t)v86)
                  goto LABEL_179;
                v134 = v133[1];
                if (!v134)
                {
                  v135 = v133 + 1;
                  goto LABEL_170;
                }
              }
            }
LABEL_170:
            v137 = (uint64_t *)operator new(0x38uLL);
            v137[4] = (uint64_t)v87;
            v137[5] = v132[5];
            if (v92 >= (unint64_t)v87)
              v138 = v90;
            else
              v138 = v91;
            v139 = v138[6];
            v137[6] = v139;
            if (v139)
            {
              v140 = (unint64_t *)(v139 + 8);
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            *v137 = 0;
            v137[1] = 0;
            v137[2] = (uint64_t)v133;
            *v135 = v137;
            v142 = **(_QWORD **)(v80 + 64);
            if (v142)
            {
              *(_QWORD *)(v80 + 64) = v142;
              v137 = *v135;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v80 + 72), v137);
            ++*(_QWORD *)(v80 + 80);
            goto LABEL_179;
          }
        }
      }
      v95 = (std::__shared_weak_count *)operator new(0x130uLL);
      v95->__shared_owners_ = 0;
      v95->__shared_weak_owners_ = 0;
      v95->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE48;
      v96 = v87;
      v95[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E428CC00;
      v95[1].__shared_owners_ = 850045863;
      v97 = (std::__shared_count)0;
      *(_OWORD *)&v95[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v95[2].__shared_owners_ = 0u;
      v95[3].std::__shared_count = 0u;
      *(_OWORD *)&v95[3].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v95[4].__shared_owners_ = 0u;
      v95[5].std::__shared_count = 0u;
      v95[5].__shared_weak_owners_ = 0;
      if ((v98 & 1) == 0)
      {
        v97 = (std::__shared_count)0;
        if (v143)
        {
          v144 = operator new();
          *(_QWORD *)(v144 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v144 + 24) = "VectorKitLabels";
          *(_OWORD *)(v144 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v144 = &off_1E42B5668;
          *(_QWORD *)(v144 + 8) = "VectorKitLabels";
          *(_OWORD *)(v144 + 72) = 0u;
          *(_OWORD *)(v144 + 88) = 0u;
          *(_OWORD *)(v144 + 104) = 0u;
          *(_OWORD *)(v144 + 120) = 0u;
          *(_OWORD *)(v144 + 136) = 0u;
          *(_OWORD *)(v144 + 152) = 0u;
          *(_OWORD *)(v144 + 168) = 0u;
          *(_OWORD *)(v144 + 184) = 0u;
          *(_OWORD *)(v144 + 200) = 0u;
          *(_OWORD *)(v144 + 216) = 0u;
          *(_OWORD *)(v144 + 232) = 0u;
          *(_QWORD *)(v144 + 248) = 0;
          *(_OWORD *)(v144 + 56) = 0u;
          v145 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v144 + 56), 0);
          if ((_DWORD)v145)
            geo::read_write_lock::logFailure(v145, (uint64_t)"initialization", v146);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v144 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v144 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v144;
          v97 = (std::__shared_count)0;
        }
      }
      v95[6].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
      v95[6].__shared_owners_ = 0x100000000;
      v95[6].__shared_weak_owners_ = 0;
      LODWORD(v95[7].__vftable) = 0;
      *((std::__shared_count *)v95 + 11) = v97;
      v95[8].std::__shared_count = v97;
      {
        v148 = operator new();
        *(_QWORD *)(v148 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v148 + 24) = "VectorKitLabels";
        *(_OWORD *)(v148 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v148 = &off_1E42B5668;
        *(_QWORD *)(v148 + 8) = "VectorKitLabels";
        *(_OWORD *)(v148 + 72) = 0u;
        *(_OWORD *)(v148 + 88) = 0u;
        *(_OWORD *)(v148 + 104) = 0u;
        *(_OWORD *)(v148 + 120) = 0u;
        *(_OWORD *)(v148 + 136) = 0u;
        *(_OWORD *)(v148 + 152) = 0u;
        *(_OWORD *)(v148 + 168) = 0u;
        *(_OWORD *)(v148 + 184) = 0u;
        *(_OWORD *)(v148 + 200) = 0u;
        *(_OWORD *)(v148 + 216) = 0u;
        *(_OWORD *)(v148 + 232) = 0u;
        *(_QWORD *)(v148 + 248) = 0;
        *(_OWORD *)(v148 + 56) = 0u;
        v149 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v148 + 56), 0);
        if ((_DWORD)v149)
          geo::read_write_lock::logFailure(v149, (uint64_t)"initialization", v150);
        v151 = malloc_create_zone(0, 0);
        *(_QWORD *)(v148 + 48) = v151;
        malloc_set_zone_name(v151, "VectorKitLabels");
        *(_QWORD *)(v148 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v148;
      }
      v95[8].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
      v95[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4295F20;
      v100 = (std::__shared_weak_count_vtbl *)v96;
      v95[9].__vftable = v100;
      v95[9].__shared_owners_ = 0;
      v101 = -[std::__shared_weak_count_vtbl type](v100, "type");
      v102 = (char *)&traits + 2 * v101;
      if (v101 >= 3)
        v102 = (char *)&traits;
      v95[9].__shared_weak_owners_ = (uint64_t)v102;
      v95[10].std::__shared_count = 0u;
      *(_OWORD *)&v95[10].__shared_weak_owners_ = 0u;
      v95[11].__shared_owners_ = 0;
      LODWORD(v95[11].__shared_weak_owners_) = 2139095039;
      WORD2(v95[11].__shared_weak_owners_) = 256;
      BYTE6(v95[11].__shared_weak_owners_) = 1;
      v95[12].__vftable = 0;
      v95[12].__shared_owners_ = 0;
      {
        v152 = operator new();
        *(_QWORD *)(v152 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v152 + 24) = "VectorKitLabels";
        *(_OWORD *)(v152 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v152 = &off_1E42B5668;
        *(_QWORD *)(v152 + 8) = "VectorKitLabels";
        *(_OWORD *)(v152 + 72) = 0u;
        *(_OWORD *)(v152 + 88) = 0u;
        *(_OWORD *)(v152 + 104) = 0u;
        *(_OWORD *)(v152 + 120) = 0u;
        *(_OWORD *)(v152 + 136) = 0u;
        *(_OWORD *)(v152 + 152) = 0u;
        *(_OWORD *)(v152 + 168) = 0u;
        *(_OWORD *)(v152 + 184) = 0u;
        *(_OWORD *)(v152 + 200) = 0u;
        *(_OWORD *)(v152 + 216) = 0u;
        *(_OWORD *)(v152 + 232) = 0u;
        *(_QWORD *)(v152 + 248) = 0;
        *(_OWORD *)(v152 + 56) = 0u;
        v153 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v152 + 56), 0);
        if ((_DWORD)v153)
          geo::read_write_lock::logFailure(v153, (uint64_t)"initialization", v154);
        v155 = malloc_create_zone(0, 0);
        *(_QWORD *)(v152 + 48) = v155;
        malloc_set_zone_name(v155, "VectorKitLabels");
        *(_QWORD *)(v152 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v152;
      }
      v104 = mdm::Allocator::instance(void)::alloc;
      v105 = *(unsigned __int8 *)v95[9].__shared_weak_owners_;
      v106 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
      v107 = v106;
      if (v106)
        *v106 = (v105 << 32) | 0x10079;
      v108 = (char *)operator new(0x40uLL);
      *((_QWORD *)v108 + 1) = 0;
      *((_QWORD *)v108 + 2) = 0;
      *(_QWORD *)v108 = &off_1E42DAB40;
      *(_OWORD *)(v108 + 24) = 0u;
      *(_OWORD *)(v108 + 40) = 0u;
      *(_DWORD *)(v108 + 55) = 0;
      v109 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((_QWORD *)v108 + 3) = v109;
      if (v109)
      {
        *(_QWORD *)&v110 = -1;
        *((_QWORD *)&v110 + 1) = -1;
        v109[14] = v110;
        v109[15] = v110;
        v109[12] = v110;
        v109[13] = v110;
        v109[10] = v110;
        v109[11] = v110;
        v109[8] = v110;
        v109[9] = v110;
        v109[6] = v110;
        v109[7] = v110;
        v109[4] = v110;
        v109[5] = v110;
        v109[2] = v110;
        v109[3] = v110;
        *v109 = v110;
        v109[1] = v110;
      }
      shared_owners = (std::__shared_weak_count *)v95[12].__shared_owners_;
      v95[12].__vftable = (std::__shared_weak_count_vtbl *)(v108 + 24);
      v95[12].__shared_owners_ = (uint64_t)v108;
      if (shared_owners)
      {
        v112 = (unint64_t *)&shared_owners->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
          std::__shared_weak_count::__release_weak(shared_owners);
        }
      }
      v114 = v95[12].__vftable;
      v115 = BYTE1(v114->__on_zero_shared_weak);
      v116 = v114->~__shared_weak_count;
      v80 = v448;
      if (BYTE1(v114->__on_zero_shared_weak))
      {
        v117 = *(_DWORD *)v107;
        if (v115 >= 0x20)
        {
          v118 = 0;
          v122 = v114->~__shared_weak_count;
          while (1)
          {
            v123 = *(_DWORD *)v122;
            v122 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v122 + 8);
            if (v123 == v117)
              break;
            if (v115 == ++v118)
            {
              if (v107)
                goto LABEL_146;
              goto LABEL_147;
            }
          }
        }
        else
        {
          v118 = 0;
          v119 = v114->~__shared_weak_count;
          while (1)
          {
            v120 = *(_DWORD *)v119;
            v119 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v119 + 8);
            if (v120 == v117)
              break;
            if (v115 == ++v118)
              goto LABEL_139;
          }
        }
        *((_DWORD *)v116 + 2 * v118 + 1) = *((_DWORD *)v107 + 1);
      }
      else
      {
LABEL_139:
        *((_QWORD *)v116 + v115) = *v107;
        v121 = BYTE1(v114->__on_zero_shared_weak) + 1;
        BYTE1(v114->__on_zero_shared_weak) = v121;
        qsort(v114->~__shared_weak_count, v121, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      }
LABEL_146:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v104 + 40))(v104, v107, 8);
LABEL_147:

      *(_QWORD *)&v466 = v95 + 1;
      *((_QWORD *)&v466 + 1) = v95;
      v124 = v450;
      v125 = v450;
      v126 = *v450;
      if (*v450)
      {
        while (1)
        {
          while (1)
          {
            v125 = (uint64_t **)v126;
            v127 = v126[4];
            if ((unint64_t)v100 >= v127)
              break;
            v126 = *v125;
            v124 = v125;
            if (!*v125)
              goto LABEL_154;
          }
          if (v127 >= (unint64_t)v100)
            break;
          v126 = v125[1];
          if (!v126)
          {
            v124 = v125 + 1;
            goto LABEL_154;
          }
        }
      }
      else
      {
LABEL_154:
        v128 = (uint64_t *)operator new(0x38uLL);
        v128[4] = (uint64_t)v100;
        v128[5] = (uint64_t)&v95[1];
        v128[6] = (uint64_t)v95;
        v466 = 0uLL;
        *v128 = 0;
        v128[1] = 0;
        v128[2] = (uint64_t)v125;
        *v124 = v128;
        v129 = **(_QWORD **)(v448 + 64);
        if (v129)
        {
          *(_QWORD *)(v448 + 64) = v129;
          v128 = *v124;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v448 + 72), v128);
        ++*(_QWORD *)(v448 + 80);
        v95 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
        if (!*((_QWORD *)&v466 + 1))
          goto LABEL_179;
      }
      v130 = (unint64_t *)&v95->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
LABEL_179:

      v85 = v449 + 1;
    }
    while (v449 + 1 != v446);
  }
  v156 = *(_QWORD *)(v80 + 8);
  v157 = *(_QWORD *)(v80 + 16);
  v158 = (_QWORD *)(v80 + 8);
  while (v157 != v156)
  {
    v159 = *(std::__shared_weak_count **)(v157 - 8);
    if (v159)
    {
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v157 -= 16;
  }
  *(_QWORD *)(v80 + 16) = v156;
  std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve(v80 + 8, *(_QWORD *)(v80 + 80));
  v466 = 0uLL;
  *(_QWORD *)&v467 = 0;
  {
    v437 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v437, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)&v467 + 1) = mdm::Allocator::instance(void)::alloc;
  v163 = *(uint64_t ***)(v80 + 64);
  if (v163 != v450)
  {
    do
    {
      v164 = *(_QWORD **)(v80 + 16);
      v165 = *(_QWORD *)(v80 + 24);
      if ((unint64_t)v164 >= v165)
      {
        v170 = ((uint64_t)v164 - *v158) >> 4;
        v171 = v170 + 1;
        if ((unint64_t)(v170 + 1) >> 60)
          goto LABEL_613;
        v172 = v165 - *v158;
        if (v172 >> 3 > v171)
          v171 = v172 >> 3;
        if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0)
          v173 = 0xFFFFFFFFFFFFFFFLL;
        else
          v173 = v171;
        if (v173)
        {
          v174 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v80 + 32) + 16))(*(_QWORD *)(v80 + 32), 16 * v173, 8);
          v175 = (_OWORD *)(v174 + 16 * v170);
          v176 = v174 + 16 * v173;
          if (v174)
          {
            v177 = *(_OWORD *)(v163 + 5);
            *v175 = v177;
            if (*((_QWORD *)&v177 + 1))
            {
              v178 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
            }
          }
        }
        else
        {
          v176 = 0;
          v175 = (_OWORD *)(16 * v170);
        }
        v169 = v175 + 1;
        v180 = *(_QWORD **)(v80 + 8);
        v181 = *(_QWORD **)(v80 + 16);
        if (v181 == v180)
        {
          *(_QWORD *)(v80 + 8) = v175;
          *(_QWORD *)(v80 + 16) = v169;
          v185 = *(_QWORD *)(v80 + 24);
          *(_QWORD *)(v80 + 24) = v176;
          if (v181)
            goto LABEL_235;
        }
        else
        {
          do
          {
            v182 = *((_OWORD *)v181 - 1);
            v181 -= 2;
            *--v175 = v182;
            *v181 = 0;
            v181[1] = 0;
          }
          while (v181 != v180);
          v183 = (_QWORD *)v80;
          v181 = *(_QWORD **)(v80 + 8);
          v184 = *(_QWORD **)(v80 + 16);
          v183[1] = v175;
          v183[2] = v169;
          v185 = v183[3];
          v183[3] = v176;
          while (v184 != v181)
          {
            v186 = (std::__shared_weak_count *)*(v184 - 1);
            if (v186)
            {
              v187 = (unint64_t *)&v186->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                std::__shared_weak_count::__release_weak(v186);
              }
            }
            v184 -= 2;
          }
          v80 = v448;
          if (v181)
LABEL_235:
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v80 + 32) + 40))(*(_QWORD *)(v80 + 32), v181, v185 - (_QWORD)v181);
        }
      }
      else
      {
        if (v164)
        {
          *v164 = v163[5];
          v166 = v163[6];
          v164[1] = v166;
          if (v166)
          {
            v167 = (unint64_t *)(v166 + 1);
            do
              v168 = __ldxr(v167);
            while (__stxr(v168 + 1, v167));
          }
        }
        v169 = v164 + 2;
      }
      *(_QWORD *)(v80 + 16) = v169;
      v189 = v163[5];
      if (*((_DWORD *)v189 + 32))
      {
        v190 = v163[1];
        if (v190)
          goto LABEL_275;
      }
      else
      {
        v191 = (_QWORD *)*((_QWORD *)&v466 + 1);
        if (*((_QWORD *)&v466 + 1) >= (unint64_t)v467)
        {
          v196 = (_QWORD *)v466;
          v197 = (uint64_t)(*((_QWORD *)&v466 + 1) - v466) >> 4;
          v198 = v197 + 1;
          if ((unint64_t)(v197 + 1) >> 60)
LABEL_613:
            abort();
          v199 = v467 - v466;
          if ((uint64_t)(v467 - v466) >> 3 > v198)
            v198 = v199 >> 3;
          if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF0)
            v200 = 0xFFFFFFFFFFFFFFFLL;
          else
            v200 = v198;
          if (v200)
          {
            v201 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)&v467 + 1) + 16))(*((_QWORD *)&v467 + 1), 16 * v200, 8);
            v202 = (_OWORD *)(v201 + 16 * v197);
            v203 = v201 + 16 * v200;
            if (v201)
            {
              v204 = *(_OWORD *)(v163 + 5);
              *v202 = v204;
              if (*((_QWORD *)&v204 + 1))
              {
                v205 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
                do
                  v206 = __ldxr(v205);
                while (__stxr(v206 + 1, v205));
                v191 = (_QWORD *)*((_QWORD *)&v466 + 1);
              }
            }
          }
          else
          {
            v203 = 0;
            v202 = (_OWORD *)(16 * v197);
          }
          v195 = v202 + 1;
          if (v191 == v196)
          {
            v209 = v467;
            *(_QWORD *)&v466 = v202;
            *(_QWORD *)&v467 = v203;
          }
          else
          {
            v207 = v191;
            do
            {
              v208 = *((_OWORD *)v207 - 1);
              v207 -= 2;
              *--v202 = v208;
              *v207 = 0;
              v207[1] = 0;
            }
            while (v207 != v196);
            *(_QWORD *)&v466 = v202;
            *((_QWORD *)&v466 + 1) = v195;
            v209 = v467;
            *(_QWORD *)&v467 = v203;
            do
            {
              v210 = (std::__shared_weak_count *)*(v191 - 1);
              if (v210)
              {
                v211 = (unint64_t *)&v210->__shared_owners_;
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                }
              }
              v191 -= 2;
            }
            while (v191 != v196);
          }
          if (v196)
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)&v467 + 1) + 40))(*((_QWORD *)&v467 + 1), v196, v209 - (_QWORD)v196);
          v80 = v448;
        }
        else
        {
          if (*((_QWORD *)&v466 + 1))
          {
            **((_QWORD **)&v466 + 1) = v189;
            v192 = v163[6];
            v191[1] = v192;
            if (v192)
            {
              v193 = (unint64_t *)(v192 + 1);
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
          }
          v195 = v191 + 2;
        }
        *((_QWORD *)&v466 + 1) = v195;
        v190 = v163[1];
        if (v190)
        {
          do
          {
LABEL_275:
            v213 = (uint64_t **)v190;
            v190 = (uint64_t *)*v190;
          }
          while (v190);
          goto LABEL_204;
        }
      }
      do
      {
        v213 = (uint64_t **)v163[2];
        v214 = *v213 == (uint64_t *)v163;
        v163 = v213;
      }
      while (!v214);
LABEL_204:
      v163 = v213;
    }
    while (v213 != v450);
  }
  v216 = *((_QWORD *)&v466 + 1);
  v215 = v466;
  if ((_QWORD)v466 != *((_QWORD *)&v466 + 1))
  {
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*(_QWORD *)v80 + 296), (uint64_t **)&v466);
    if (!v215)
      goto LABEL_292;
    do
    {
      v217 = *(std::__shared_weak_count **)(v216 - 8);
      if (v217)
      {
        v218 = (unint64_t *)&v217->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
          std::__shared_weak_count::__release_weak(v217);
        }
      }
      v216 -= 16;
    }
    while (v216 != v215);
    v220 = v466;
    goto LABEL_291;
  }
  v220 = v466;
  if ((_QWORD)v466)
  {
LABEL_291:
    *((_QWORD *)&v466 + 1) = v215;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v467 + 1) + 40))(*((_QWORD *)&v467 + 1), v220, v467 - v220);
  }
LABEL_292:
  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*((_QWORD **)&v480 + 1));
  v79 = v443;
LABEL_293:
  *((_BYTE *)v4 + 760) = 0;
  *((_DWORD *)v4 + 188) = v79;
LABEL_294:
  if (!a4)
    goto LABEL_435;
  v222 = (unint64_t *)v4[2];
  v221 = (unint64_t *)v4[3];
  v223 = (char **)(v4 + 2);
  if (v222 == v221)
    goto LABEL_302;
  v224 = (char *)v221 - (char *)v222 - 16;
  v225 = (unint64_t *)v4[2];
  if (v224 > 0xF)
  {
    v226 = (v224 >> 4) + 1;
    v227 = (uint64_t *)(v222 + 2);
    v228 = v226 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v229 = *(v227 - 2);
      v230 = *v227;
      v227 += 4;
      *(_BYTE *)(v229 + 121) = 0;
      *(_BYTE *)(v230 + 121) = 0;
      v228 -= 2;
    }
    while (v228);
    if (v226 == (v226 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_302;
    v225 = &v222[2 * (v226 & 0x1FFFFFFFFFFFFFFELL)];
  }
  do
  {
    v231 = *v225;
    v225 += 2;
    *(_BYTE *)(v231 + 121) = 0;
  }
  while (v225 != v221);
LABEL_302:
  v232 = *(_QWORD **)(a3 + 24);
  if (!v232)
    goto LABEL_344;
  v233 = *(_QWORD **)(a3 + 24);
  do
  {
    *(_BYTE *)(v233[2] + 121) = 1;
    v233 = (_QWORD *)*v233;
  }
  while (v233);
  do
  {
    v234 = v232[2];
    if (!*(_BYTE *)(v234 + 130) || *(_BYTE *)(v234 + 129))
    {
      if (*(_BYTE *)(v234 + 120))
        goto LABEL_307;
LABEL_311:
      *(_BYTE *)(v234 + 120) = 1;
      *(_BYTE *)(v234 + 122) = 1;
      *(_BYTE *)(v234 + 131) = 1;
      v235 = *(std::mutex **)(v234 + 136);
      if (v235)
      {
        std::mutex::lock(*(std::mutex **)(v234 + 136));
        sig = (void (***)(_QWORD, unint64_t))v235[1].__m_.__sig;
        if (sig)
          (**sig)(sig, v234);
        std::mutex::unlock(v235);
        v234 = v232[2];
      }
      v237 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v4 + 10, v234);
      if (v237)
      {
        std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v466, v4 + 10, v237);
        v238 = v466;
        *(_QWORD *)&v466 = 0;
        if (v238)
        {
          if ((_BYTE)v467)
          {
            v239 = *(std::__shared_weak_count **)(v238 + 24);
            if (v239)
            {
              v240 = (unint64_t *)&v239->__shared_owners_;
              do
                v241 = __ldaxr(v240);
              while (__stlxr(v241 - 1, v240));
              if (!v241)
              {
                ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                std::__shared_weak_count::__release_weak(v239);
              }
            }
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)&v466 + 1) + 40))(**((_QWORD **)&v466 + 1), v238, 32);
        }
        v234 = v232[2];
      }
      v242 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v4 + 17, v234);
      if (v242)
      {
        std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v466, v4 + 17, v242);
        v243 = v466;
        *(_QWORD *)&v466 = 0;
        if (v243)
        {
          if ((_BYTE)v467)
          {
            v244 = *(std::__shared_weak_count **)(v243 + 24);
            if (v244)
            {
              v245 = (unint64_t *)&v244->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)&v466 + 1) + 40))(**((_QWORD **)&v466 + 1), v243, 32);
        }
      }
      goto LABEL_307;
    }
    v247 = v4[78];
    v249 = *(_QWORD *)(v247 + 24);
    v248 = *(_QWORD *)(v247 + 32);
    if (v248)
    {
      v250 = (unint64_t *)(v248 + 8);
      do
        v251 = __ldxr(v250);
      while (__stxr(v251 + 1, v250));
    }
    v252 = *(std::__shared_weak_count **)(v234 + 144);
    *(_QWORD *)(v234 + 136) = v249;
    *(_QWORD *)(v234 + 144) = v248;
    if (v252)
    {
      v253 = (unint64_t *)&v252->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    *(_BYTE *)(v234 + 129) = 1;
    v234 = v232[2];
    if (!*(_BYTE *)(v234 + 120))
      goto LABEL_311;
LABEL_307:
    v232 = (_QWORD *)*v232;
  }
  while (v232);
  v222 = (unint64_t *)v4[2];
  v221 = (unint64_t *)v4[3];
LABEL_344:
  while (v222 != v221)
  {
    v255 = *v222;
    if (!*(_BYTE *)(*v222 + 121))
    {
      *(_BYTE *)(v255 + 120) = 0;
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile> const&>((unint64_t)(v4 + 10), v255, v222);
    }
    v222 += 2;
  }
  v256 = *(_QWORD **)(a3 + 24);
  if (!v256)
  {
    v264 = *v223;
    goto LABEL_365;
  }
  v257 = -1;
  v258 = *(_QWORD **)(a3 + 24);
  do
  {
    v259 = v257;
    v258 = (_QWORD *)*v258;
    ++v257;
  }
  while (v258);
  v260 = v4[4];
  v261 = (char *)v4[2];
  if (v257 >= (v260 - (uint64_t)v261) >> 4)
  {
    if (v261)
    {
      v277 = (char *)v4[3];
      if (v277 == v261)
      {
        v278 = v4[2];
      }
      else
      {
        do
        {
          v279 = (std::__shared_weak_count *)*((_QWORD *)v277 - 1);
          if (v279)
          {
            v280 = (unint64_t *)&v279->__shared_owners_;
            do
              v281 = __ldaxr(v280);
            while (__stlxr(v281 - 1, v280));
            if (!v281)
            {
              ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
              std::__shared_weak_count::__release_weak(v279);
            }
          }
          v277 -= 16;
        }
        while (v277 != v261);
        v278 = v4[2];
      }
      v4[3] = v261;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v4[5] + 40))(v4[5], v278);
      v260 = 0;
      *v223 = 0;
      v4[3] = 0;
      v4[4] = 0;
    }
    if (v257 >= 0xFFFFFFFFFFFFFFFLL)
      abort();
    v299 = v259 + 2;
    if (v260 >> 3 > v259 + 2)
      v299 = v260 >> 3;
    if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF0)
      v300 = 0xFFFFFFFFFFFFFFFLL;
    else
      v300 = v299;
    if (v300 >> 60)
      abort();
    v273 = (char *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v4[5] + 16))(v4[5], 16 * v300, 8);
    v4[2] = v273;
    v4[3] = v273;
    v4[4] = &v273[16 * v300];
    do
    {
      if (v273)
      {
        *(_QWORD *)v273 = v256[2];
        v301 = v256[3];
        *((_QWORD *)v273 + 1) = v301;
        if (v301)
        {
          v302 = (unint64_t *)(v301 + 8);
          do
            v303 = __ldxr(v302);
          while (__stxr(v303 + 1, v302));
        }
      }
      v256 = (_QWORD *)*v256;
      v273 += 16;
    }
    while (v256);
  }
  else
  {
    v262 = (char *)v4[3];
    v263 = (v262 - v261) >> 4;
    if (v263 <= v257)
    {
      if (v262 - v261 >= 1)
      {
        v282 = v263 + 1;
        v283 = *(_QWORD **)(a3 + 24);
        do
        {
          v283 = (_QWORD *)*v283;
          --v282;
        }
        while (v282 > 1);
        if (v283 != v256)
        {
          do
          {
            v285 = v256[2];
            v284 = v256[3];
            if (v284)
            {
              v286 = (unint64_t *)(v284 + 8);
              do
                v287 = __ldxr(v286);
              while (__stxr(v287 + 1, v286));
            }
            v288 = (std::__shared_weak_count *)*((_QWORD *)v261 + 1);
            *(_QWORD *)v261 = v285;
            *((_QWORD *)v261 + 1) = v284;
            if (v288)
            {
              v289 = (unint64_t *)&v288->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (!v290)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v288);
              }
            }
            v256 = (_QWORD *)*v256;
            v261 += 16;
          }
          while (v256 != v283);
          v262 = (char *)v4[3];
          v256 = v283;
        }
      }
      v304 = v262;
      if (v256)
      {
        v304 = v262;
        do
        {
          if (v304)
          {
            *(_QWORD *)v304 = v256[2];
            v305 = v256[3];
            *((_QWORD *)v304 + 1) = v305;
            if (v305)
            {
              v306 = (unint64_t *)(v305 + 8);
              do
                v307 = __ldxr(v306);
              while (__stxr(v307 + 1, v306));
            }
          }
          v256 = (_QWORD *)*v256;
          v304 += 16;
        }
        while (v256);
      }
      v273 = v304;
    }
    else
    {
      v264 = (char *)v4[2];
      do
      {
        v266 = v256[2];
        v265 = v256[3];
        if (v265)
        {
          v267 = (unint64_t *)(v265 + 8);
          do
            v268 = __ldxr(v267);
          while (__stxr(v268 + 1, v267));
        }
        v269 = (std::__shared_weak_count *)*((_QWORD *)v264 + 1);
        *(_QWORD *)v264 = v266;
        *((_QWORD *)v264 + 1) = v265;
        if (v269)
        {
          v270 = (unint64_t *)&v269->__shared_owners_;
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }
        v256 = (_QWORD *)*v256;
        v264 += 16;
      }
      while (v256);
LABEL_365:
      v272 = (char *)v4[3];
      v273 = v264;
      while (v272 != v264)
      {
        v274 = (std::__shared_weak_count *)*((_QWORD *)v272 - 1);
        if (v274)
        {
          v275 = (unint64_t *)&v274->__shared_owners_;
          do
            v276 = __ldaxr(v275);
          while (__stlxr(v276 - 1, v275));
          if (!v276)
          {
            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
            std::__shared_weak_count::__release_weak(v274);
          }
        }
        v272 -= 16;
      }
    }
  }
  v4[3] = v273;
LABEL_435:
  for (i = (uint64_t **)v4[20]; i; i = (uint64_t **)*i)
    md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)i[2]);
  if (v4[22])
  {
    v309 = (_QWORD *)v4[20];
    while (v309)
    {
      v318 = v309;
      v309 = (_QWORD *)*v309;
      v319 = (std::__shared_weak_count *)v318[3];
      if (v319)
      {
        v320 = (unint64_t *)&v319->__shared_owners_;
        do
          v321 = __ldaxr(v320);
        while (__stlxr(v321 - 1, v320));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
          std::__shared_weak_count::__release_weak(v319);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v4[21] + 40))(v4[21], v318, 32);
    }
    v4[20] = 0;
    v310 = v4[18];
    if (v310)
    {
      for (j = 0; j != v310; ++j)
        *(_QWORD *)(v4[17] + 8 * j) = 0;
    }
    v4[22] = 0;
  }
  *((int64x2_t *)v4 + 3) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((int64x2_t *)v4 + 4) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v312 = (_QWORD *)v4[2];
  v18 = (_QWORD *)v4[3];
  v35 = 1;
  if (v312 != v18)
  {
LABEL_497:
    v32 = *v312;
    v342 = *((double *)v4 + 7);
    *((double *)v4 + 6) = fmin(*(double *)(*v312 + 40), *((double *)v4 + 6));
    v343 = *((double *)v4 + 9);
    *((double *)v4 + 8) = fmax(*((double *)v4 + 8), *(double *)(v32 + 56));
    *((double *)v4 + 7) = fmin(*(double *)(v32 + 48), v342);
    *((double *)v4 + 9) = fmax(v343, *(double *)(v32 + 64));
    v33 = *(unsigned __int8 **)(v32 + 376);
    v344 = *(unsigned __int8 **)(v32 + 384);
    if (v33 == v344)
      goto LABEL_510;
    v345 = v4[1];
    while (1)
    {
      v346 = *(_QWORD *)v33;
      *(_QWORD *)&v466 = v345;
      v347 = *(_QWORD *)(v346 + 32);
      if (!v347)
        break;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v347 + 48))(v347, &v466);
      v33 += 16;
      if (v33 == v344)
      {
        v348 = *(_QWORD *)(v32 + 376);
        for (k = *(_QWORD *)(v32 + 384); k != v348; k -= 16)
        {
          v350 = *(std::__shared_weak_count **)(k - 8);
          if (v350)
          {
            v351 = (unint64_t *)&v350->__shared_owners_;
            do
              v352 = __ldaxr(v351);
            while (__stlxr(v352 - 1, v351));
            if (!v352)
            {
              ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
              std::__shared_weak_count::__release_weak(v350);
            }
          }
        }
        *(_QWORD *)(v32 + 384) = v348;
LABEL_510:
        if ((v35 & 1) != 0)
        {
          v353 = (_BYTE *)*v312;
          v354 = *(char *)(*v312 + 492) != *(unsigned __int8 *)(v4[1] + 468)
              || v353[122]
              || v353[124]
              || v353[123]
              || v353[128] != 0;
          v35 = !v354;
          v312 += 2;
          if (v312 == v18)
            goto LABEL_444;
        }
        else
        {
          v35 = 0;
          v312 += 2;
          if (v312 == v18)
            goto LABEL_444;
        }
        goto LABEL_497;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_623;
  }
LABEL_444:
  *((_BYTE *)v4 + 759) = v35;
  v313 = v452;
  v314 = v452[4];
  if (!*(_BYTE *)(v314 + 232))
    goto LABEL_548;
  *(_BYTE *)(v314 + 232) = 0;
  v457 = 0;
  v458 = 0;
  {
    v435 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v435, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v459 = mdm::Allocator::instance(void)::alloc;
  v460 = 0;
  {
    v436 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v436, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v461 = mdm::Allocator::instance(void)::alloc;
  v462 = 0;
  v463 = 1065353216;
  v317 = *(_QWORD **)(v314 + 72);
  if (v317 == (_QWORD *)(v314 + 80))
  {
    v355 = 0;
  }
  else
  {
    do
    {
      v322 = v317[24];
      if (!v322 || *(unsigned __int8 *)(v322 + 52) - 1 <= 1)
      {
        if (*((_BYTE *)v317 + 280))
        {
          v323 = v317[34];
          if (!*(_BYTE *)(v323 + 129))
            md::LabelClusterProvider::initializeSourceAnnotations((md::LabelClusterProvider *)v317[34]);
          v324 = *(id *)(v323 + 56);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v317[33]);
          v324 = (id)objc_claimAutoreleasedReturnValue();
          v337 = (_QWORD *)v317[30];
          if (v337 != v317 + 31)
          {
            do
            {
              objc_msgSend((id)v337[4], "feature", v442);
              v338 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v338, "isPointFeature"))
              {
                v339 = *((_DWORD *)v337 + 14) > *((_DWORD *)v337 + 15);

                if (v339)
                  objc_msgSend(v324, "addObject:", v337[4]);
              }
              else
              {

              }
              v340 = (_QWORD *)v337[1];
              if (v340)
              {
                do
                {
                  v341 = v340;
                  v340 = (_QWORD *)*v340;
                }
                while (v340);
              }
              else
              {
                do
                {
                  v341 = (_QWORD *)v337[2];
                  v214 = *v341 == (_QWORD)v337;
                  v337 = v341;
                }
                while (!v214);
              }
              v337 = v341;
            }
            while (v341 != v317 + 31);
          }
        }
        v482 = 0u;
        v483 = 0u;
        v480 = 0u;
        v481 = 0u;
        v325 = v324;
        v326 = objc_msgSend(v325, "countByEnumeratingWithState:objects:count:", &v480, &v466, 16);
        if (v326)
        {
          v327 = *(_QWORD *)v481;
          do
          {
            for (m = 0; m != v326; ++m)
            {
              if (*(_QWORD *)v481 != v327)
                objc_enumerationMutation(v325);
              objc_msgSend(*(id *)(*((_QWORD *)&v480 + 1) + 8 * m), "feature", v442);
              v329 = (void *)objc_claimAutoreleasedReturnValue();
              v330 = v329;
              if (v329 && *(_QWORD *)objc_msgSend(v329, "feature"))
              {
                v331 = objc_msgSend(v330, "pointFeature");
                v332 = v331;
                v333 = *(uint64_t **)(v331 + 184);
                if (v333 || (v333 = *(uint64_t **)(v331 + 16)) != 0)
                {
                  LOBYTE(v464) = 4;
                  *((_QWORD *)&v464 + 1) = v333;
                  std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)&v457, 4u, v333, &v464);
                }
                v334 = *(uint64_t **)(v332 + 24);
                if (v334)
                {
                  LOBYTE(v464) = 3;
                  *((_QWORD *)&v464 + 1) = v334;
                  std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)&v457, 3u, v334, &v464);
                }
              }

            }
            v326 = objc_msgSend(v325, "countByEnumeratingWithState:objects:count:", &v480, &v466, 16);
          }
          while (v326);
        }

      }
      v335 = (_QWORD *)v317[1];
      if (v335)
      {
        do
        {
          v336 = v335;
          v335 = (_QWORD *)*v335;
        }
        while (v335);
      }
      else
      {
        do
        {
          v336 = (_QWORD *)v317[2];
          v214 = *v336 == (_QWORD)v317;
          v317 = v336;
        }
        while (!v214);
      }
      v317 = v336;
    }
    while (v336 != (_QWORD *)(v314 + 80));
    v355 = v462;
  }
  v356 = *(_QWORD *)(v314 + 208);
  if (v356 != v355)
  {
LABEL_527:
    if (v356)
    {
      v361 = *(_QWORD **)(v314 + 192);
      if (v361)
      {
        do
        {
          v362 = (_QWORD *)*v361;
          (*(void (**)(_QWORD))(**(_QWORD **)(v314 + 200) + 40))(*(_QWORD *)(v314 + 200));
          v361 = v362;
        }
        while (v362);
      }
      *(_QWORD *)(v314 + 192) = 0;
      v363 = *(_QWORD *)(v314 + 176);
      if (v363)
      {
        for (n = 0; n != v363; ++n)
          *(_QWORD *)(*(_QWORD *)(v314 + 168) + 8 * n) = 0;
      }
      *(_QWORD *)(v314 + 208) = 0;
    }
    v365 = v457;
    v457 = 0;
    v366 = *(_QWORD *)(v314 + 168);
    *(_QWORD *)(v314 + 168) = v365;
    if (v366)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v314 + 184) + 40))(*(_QWORD *)(v314 + 184), v366, 8 * *(_QWORD *)(v314 + 176));
    v367 = (unint64_t)v458;
    v368 = v460;
    *(_QWORD *)(v314 + 192) = v460;
    *(_QWORD *)(v314 + 176) = v367;
    v458 = 0;
    v369 = v462;
    *(_QWORD *)(v314 + 208) = v462;
    *(_DWORD *)(v314 + 216) = v463;
    if (v369)
    {
      v370 = v368[1];
      if ((v367 & (v367 - 1)) != 0)
      {
        if (v370 >= v367)
          v370 %= v367;
      }
      else
      {
        v370 &= v367 - 1;
      }
      v368 = 0;
      *(_QWORD *)(*(_QWORD *)(v314 + 168) + 8 * v370) = v314 + 192;
      v460 = 0;
      v462 = 0;
    }
    ++*(_DWORD *)(v314 + 224);
    v371 = 1;
    if (!v368)
      goto LABEL_544;
    do
    {
LABEL_543:
      v372 = (_QWORD *)*v368;
      (*(void (**)(uint64_t))(*(_QWORD *)v461 + 40))(v461);
      v368 = v372;
    }
    while (v372);
    goto LABEL_544;
  }
  v357 = (uint64_t *)(v314 + 192);
  while (1)
  {
    v357 = (uint64_t *)*v357;
    if (!v357)
      break;
    v358 = *((unsigned __int8 *)v357 + 16);
    v359 = (uint64_t *)v357[3];
    v360 = std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::find<md::LabelFeatureID>(&v457, *((_BYTE *)v357 + 16), v359);
    if (!v360 || v358 != *((unsigned __int8 *)v360 + 16) || v359 != v360[3])
      goto LABEL_527;
  }
  v371 = 0;
  v368 = v460;
  if (v460)
    goto LABEL_543;
LABEL_544:
  v373 = v457;
  v457 = 0;
  if (v373)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v459 + 40))(v459, v373, 8 * (_QWORD)v458);
  v313 = v452;
  if (v371)
    *((_BYTE *)v452 + 372) = 1;
LABEL_548:
  if (*((_BYTE *)v313 + 368))
  {
    *((_BYTE *)v313 + 368) = 0;
    v374 = (_QWORD *)v313[17];
    v375 = (_QWORD *)v313[18];
    while (v375 != v374)
    {
      v377 = *--v375;
      v376 = v377;
      *v375 = 0;
      if (v377)
        (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
    }
    v452[18] = v374;
    v378 = *(_QWORD *)(v452[3] + 432);
    v379 = *(float *)(v378 + 40);
    v380 = *(float *)(v378 + 1068);
    v453 = 0u;
    v454 = 0u;
    v455 = 0u;
    v456 = 0u;
    v381 = (id)v452[21];
    v382 = objc_msgSend(v381, "countByEnumeratingWithState:objects:count:", &v453, v465, 16);
    if (v382)
    {
      v383 = *(_QWORD *)v454;
      v384 = v379;
      v447 = v380;
      do
      {
        for (ii = 0; ii != v382; ++ii)
        {
          if (*(_QWORD *)v454 != v383)
            objc_enumerationMutation(v381);
          v387 = *(void **)(*((_QWORD *)&v453 + 1) + 8 * ii);
          if (!objc_msgSend(v387, "type", v442))
          {
            objc_msgSend(v387, "rect");
            v389 = v388;
            v391 = v390;
            v393 = v392;
            v395 = v394;
            v396 = operator new();
            *(_QWORD *)(v396 + 32) = 0;
            *(_QWORD *)(v396 + 44) = 0;
            *(_BYTE *)(v396 + 52) = 5;
            *(_QWORD *)v396 = &off_1E42A3250;
            *(_OWORD *)(v396 + 56) = xmmword_19FFB2E30;
            *(_QWORD *)(v396 + 72) = 1065353216;
            *(_DWORD *)(v396 + 80) = 1065353216;
            *(_QWORD *)(v396 + 92) = 0;
            *(_QWORD *)(v396 + 84) = 0;
            *(_DWORD *)(v396 + 100) = 0;
            *(_OWORD *)(v396 + 104) = xmmword_19FFB2E30;
            *(_OWORD *)(v396 + 120) = xmmword_19FFB2E30;
            *(_OWORD *)(v396 + 136) = xmmword_19FFB2E30;
            *(_OWORD *)(v396 + 152) = xmmword_19FFB3480;
            *(_BYTE *)(v396 + 208) = 0;
            *(_QWORD *)(v396 + 168) = 0;
            *(_QWORD *)(v396 + 176) = 0;
            *(_BYTE *)(v396 + 184) = 0;
            *(_OWORD *)(v396 + 241) = 0u;
            *(_OWORD *)(v396 + 232) = 0u;
            *(_OWORD *)(v396 + 216) = 0u;
            md::CollisionObject::resetWithRects((void **)(v396 + 56), 1u);
            *(float *)&v389 = v389 * v384;
            HIDWORD(v397) = HIDWORD(v447);
            v398 = v447 - (v391 + v395) * v384;
            v451 = v398;
            *(float *)&v393 = v393 * v384;
            *(float *)&v395 = v395 * v384;
            *(float *)&v397 = v398 + *(float *)&v395;
            v399 = *(_QWORD *)(v396 + 216);
            v400 = *(unsigned int *)(v396 + 232);
            *(_DWORD *)(v396 + 232) = v400 + 1;
            v401 = v399 + 16 * v400;
            *(_DWORD *)v401 = LODWORD(v389);
            *(float *)(v401 + 4) = v398;
            *(float *)(v401 + 8) = *(float *)&v393 + *(float *)&v389;
            *(float *)(v401 + 12) = v398 + *(float *)&v395;
            *(float *)(v396 + 56) = fminf(*(float *)(v396 + 56), *(float *)&v389);
            v402 = *(double *)(v396 + 60);
            v403.i32[0] = LODWORD(v402);
            v403.f32[1] = *(float *)&v393 + *(float *)&v389;
            v404 = (int8x8_t)vcgt_f32(v403, (float32x2_t)__PAIR64__(HIDWORD(v402), LODWORD(v398)));
            v403.f32[0] = v398;
            v405 = COERCE_DOUBLE(vbsl_s8(v404, (int8x8_t)v403, *(int8x8_t *)&v402));
            *(double *)(v396 + 60) = v405;
            *(float *)&v405 = fmaxf(*(float *)(v396 + 68), v398 + *(float *)&v395);
            *(_DWORD *)(v396 + 68) = LODWORD(v405);
            *(_QWORD *)(v396 + 88) = 0;
            md::CollisionObject::setupShapeData(v396 + 56, v405, v397, v402);
            *(float *)(v396 + 16) = (float)(*(float *)&v393 * 0.5) + *(float *)&v389;
            *(float *)(v396 + 20) = (float)(*(float *)&v395 * 0.5) + v451;
            *(float *)(v396 + 8) = *(float *)&v393 * 0.5;
            *(float *)(v396 + 12) = *(float *)&v395 * 0.5;
            *(_QWORD *)(v396 + 24) = 1065353216;
            *(_QWORD *)(v396 + 32) = 0x800000008;
            *(_QWORD *)(v396 + 44) = 0xFFFFFFFF00000001;
            v407 = (char *)v452[18];
            v406 = v452[19];
            if ((unint64_t)v407 < v406)
            {
              *(_QWORD *)v407 = v396;
              v386 = v407 + 8;
            }
            else
            {
              v408 = (char *)v452[17];
              v409 = (v407 - v408) >> 3;
              v410 = v409 + 1;
              if ((unint64_t)(v409 + 1) >> 61)
                abort();
              v411 = v406 - (_QWORD)v408;
              if (v411 >> 2 > v410)
                v410 = v411 >> 2;
              if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF8)
                v412 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v412 = v410;
              if (v412)
              {
                if (v412 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v413 = (char *)operator new(8 * v412);
              }
              else
              {
                v413 = 0;
              }
              v414 = (uint64_t *)&v413[8 * v409];
              v415 = &v413[8 * v412];
              *v414 = v396;
              v386 = v414 + 1;
              if (v407 == v408)
              {
                v452[17] = v414;
                v452[18] = v386;
                v452[19] = v415;
              }
              else
              {
                v416 = v407 - v408 - 8;
                if (v416 <= 0x77
                  || &v407[-(v416 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v414
                  && &v413[v407 - v408 - (v416 & 0xFFFFFFFFFFFFFFF8) - 8] < v407)
                {
                  goto LABEL_634;
                }
                v417 = (v416 >> 3) + 1;
                v418 = &v413[8 * v409 - 16];
                v419 = v407 - 32;
                v420 = v417 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v422 = *(_OWORD *)v419;
                  v421 = *((_OWORD *)v419 + 1);
                  *(_OWORD *)v419 = 0uLL;
                  *((_OWORD *)v419 + 1) = 0uLL;
                  v419 -= 32;
                  *((_OWORD *)v418 - 1) = v422;
                  *(_OWORD *)v418 = v421;
                  v418 -= 32;
                  v420 -= 4;
                }
                while (v420);
                v414 -= v417 & 0x3FFFFFFFFFFFFFFCLL;
                v407 -= 8 * (v417 & 0x3FFFFFFFFFFFFFFCLL);
                if (v417 != (v417 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_634:
                  do
                  {
                    v423 = *((_QWORD *)v407 - 1);
                    v407 -= 8;
                    *(_QWORD *)v407 = 0;
                    *--v414 = v423;
                  }
                  while (v407 != v408);
                }
                v407 = (char *)v452[17];
                v424 = (char *)v452[18];
                v452[17] = v414;
                v452[18] = v386;
                v452[19] = v415;
                while (v424 != v407)
                {
                  v426 = *((_QWORD *)v424 - 1);
                  v424 -= 8;
                  v425 = v426;
                  *(_QWORD *)v424 = 0;
                  if (v426)
                    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
                }
              }
              if (v407)
                operator delete(v407);
            }
            v452[18] = v386;
          }
        }
        v382 = objc_msgSend(v381, "countByEnumeratingWithState:objects:count:", &v453, v465, 16);
      }
      while (v382);
    }

  }
}

void sub_19F20E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a59);
  _Unwind_Resume(a1);
}

void sub_19F20E888(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 224);
  _Unwind_Resume(a1);
}

void sub_19F20E89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_19F20E8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&a59);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v59 - 224);
  _Unwind_Resume(a1);
}

void sub_19F20E8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*(_QWORD **)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_19F20E8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F20E91C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F20E930()
{
  JUMPOUT(0x19F20E9C4);
}

void sub_19F20E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  JUMPOUT(0x19F20EA4CLL);
}

void sub_19F20E94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a59);
  std::__tree<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::__map_value_compare<GEOComposedRoute const* {__strong},std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>,std::less<GEOComposedRoute const* {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRoute const* {__strong},std::shared_ptr<md::ProgressiveLodRibbon>>>>::destroy(*(_QWORD **)(v59 - 216));
  _Unwind_Resume(a1);
}

void sub_19F20E95C()
{
  JUMPOUT(0x19F20EAE0);
}

void sub_19F20E964()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  if (!v0)
    JUMPOUT(0x19F20E9E4);
  JUMPOUT(0x19F20E9C4);
}

void sub_19F20E9B4()
{
  void *v0;

  JUMPOUT(0x19F20EA54);
}

void sub_19F20EA6C()
{
  void *v0;
  void *v1;

  JUMPOUT(0x19F20EAE0);
}

void sub_19F20EAAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelRenderLayer::layout(md::LabelRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  md::LabelManager *v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  int8x8_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  _BYTE *v69;
  _BYTE *v70;
  int64_t v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  unsigned __int16 *v78;
  unsigned __int16 *v79;
  _QWORD *v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  unsigned int v115;
  unsigned __int16 *v117;
  unsigned __int16 *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *p_shared_owners;
  unint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  uint64_t v210;
  BOOL v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned __int16 *v217;
  unsigned __int16 *v218;
  unsigned int v219;
  unsigned __int16 *v221;
  unsigned __int16 *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  uint64_t v303;
  int v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t *v307;
  unsigned __int8 *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  md::LabelMapTile *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  __int128 v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  std::__shared_weak_count_vtbl *v334;
  std::__shared_weak_count *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  __int128 v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  std::__shared_weak_count_vtbl *v346;
  std::__shared_weak_count *shared_owners;
  unint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  uint8x8_t v375;
  uint64_t **v376;
  uint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  float v382;
  float v383;
  _BOOL8 v384;
  unint64_t v385;
  unint64_t v386;
  size_t prime;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  size_t v392;
  size_t v393;
  size_t v394;
  _QWORD *i;
  size_t v396;
  uint64_t v397;
  unint64_t v398;
  uint8x8_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  size_t v403;
  uint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t *v407;
  uint64_t *v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  unsigned int v413;
  uint64_t *v414;
  int v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  __int128 *v425;
  unint64_t *v426;
  unint64_t v427;
  __int128 *v428;
  uint64_t v429;
  unint64_t *v430;
  unint64_t v431;
  unsigned __int8 *v432;
  std::mutex *v433;
  std::mutex *v434;
  uint64_t v435;
  std::__shared_weak_count *v436;
  geo::codec::VectorTile *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  __int128 v441;
  uint64_t *v442;
  uint64_t *v443;
  std::__shared_weak_count *v444;
  std::__shared_weak_count *v445;
  std::__shared_weak_count *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t *v453;
  unint64_t v454;
  std::mutex *v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t *sig;
  std::__shared_weak_count *v459;
  md::LabelTrafficTile *v460;
  unint64_t *p_shared_weak_owners;
  unint64_t v462;
  md::LabelTrafficTile **v463;
  std::__shared_weak_count *v464;
  std::__shared_weak_count *v465;
  std::__shared_weak_count *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t *v472;
  unint64_t v473;
  uint64_t v474;
  std::__shared_weak_count *v475;
  md::LabelTrafficTile *v476;
  unint64_t *v477;
  unint64_t v478;
  md::LabelTrafficTile **v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  _OWORD *v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  _OWORD *v499;
  _QWORD *v500;
  uint64_t v501;
  uint64_t k;
  void *v503;
  _QWORD *v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t m;
  _QWORD *v508;
  uint64_t v509;
  uint64_t n;
  _QWORD *v511;
  uint64_t v512;
  _QWORD *v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  char *__p;
  md::LayoutContext *v519;
  unsigned __int16 *v520;
  uint64_t *v521;
  unsigned __int16 *v522;
  unsigned __int16 *v523;
  geo::codec::VectorTile *v524;
  char v525;
  uint64_t v526;
  char v527;
  zilch::TrafficSkeletonTile *v528;
  uint64_t v529;
  unsigned int v530;
  const md::DynamicTrafficTileList *v531;
  const md::DynamicTrafficTileList *v532;
  int v533;
  int v534;
  std::mutex *v535;
  std::mutex *v536;
  uint64_t v537;
  unsigned int v538;
  int v539;
  uint64_t *v540;
  float *v541;
  uint64_t *v542;
  int v543;
  _QWORD *v544;
  char v545;
  const QuadTile *v546;
  const QuadTile *v547;
  uint64_t *v548;
  _QWORD *v549;
  _QWORD *v550;
  _QWORD *j;
  std::__shared_weak_count *v552;
  char v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  std::__shared_weak_count *v558;
  _QWORD v559[3];
  _QWORD *v560;
  _QWORD v561[3];
  _QWORD *v562;
  _QWORD v563[3];
  _QWORD *v564;
  __int128 v565;
  _BOOL8 v566;
  __int128 *v567;
  uint64_t v568;

  v568 = *MEMORY[0x1E0C80C00];
  v561[0] = &off_1E42CD4F0;
  v561[1] = a2;
  v562 = v561;
  v559[0] = &off_1E42CD538;
  v559[1] = a2;
  v560 = v559;
  v564 = v563;
  v563[0] = &off_1E42CD538;
  v563[1] = a2;
  std::__function::__func<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v561);
  v4 = v560;
  if (v560 == v559)
  {
    v5 = 4;
    v4 = v559;
  }
  else
  {
    if (!v560)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v562;
  if (v562 == v561)
  {
    v7 = 4;
    v6 = v561;
    goto LABEL_10;
  }
  if (v562)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (*((_BYTE *)this + 269) || !*((_BYTE *)this + 268))
    goto LABEL_12;
  v10 = (_QWORD *)*((_QWORD *)a2 + 1);
  v11 = (int8x8_t)v10[1];
  if (!*(_QWORD *)&v11)
    goto LABEL_43;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0xA588623CD4116DAELL;
    if (*(_QWORD *)&v11 <= 0xA588623CD4116DAELL)
      v13 = 0xA588623CD4116DAELL % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0xA588623CD4116DAELL;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_43;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_43;
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0xA588623CD4116DAELL)
      {
        if (v15[2] == 0xA588623CD4116DAELL)
          goto LABEL_41;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_43;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0xA588623CD4116DAELL)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_43;
LABEL_30:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_43;
  }
  if (v15[2] != 0xA588623CD4116DAELL)
    goto LABEL_30;
LABEL_41:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0xA588623CD4116DAELL)
  {
    v19 = *(_QWORD *)(v18 + 32);
    goto LABEL_44;
  }
LABEL_43:
  v19 = 0;
LABEL_44:
  v20 = *(md::LabelManager **)(v19 + 16);
  if (v20 != *((md::LabelManager **)this + 6))
  {
    md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
    v20 = *(md::LabelManager **)(v19 + 16);
    *((_QWORD *)this + 6) = v20;
    v10 = (_QWORD *)*((_QWORD *)a2 + 1);
    v11 = (int8x8_t)v10[1];
  }
  *((_BYTE *)v20 + 3350) = *(_BYTE *)(*((_QWORD *)a2 + 3) + 1);
  if (!*(_QWORD *)&v11)
    goto LABEL_69;
  v21 = (uint8x8_t)vcnt_s8(v11);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v11 <= 0xC97B9E962ADF4AD4)
      v22 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v11;
  }
  else
  {
    v22 = (*(_QWORD *)&v11 - 1) & 0xC97B9E962ADF4AD4;
  }
  v23 = *(_QWORD **)(*v10 + 8 * v22);
  if (!v23)
    goto LABEL_69;
  v24 = (_QWORD *)*v23;
  if (!v24)
    goto LABEL_69;
  if (v21.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == 0xC97B9E962ADF4AD4)
      {
        if (v24[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_67;
      }
      else if ((v27 & v25) != v22)
      {
        goto LABEL_69;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_69;
    }
  }
  while (2)
  {
    v26 = v24[1];
    if (v26 != 0xC97B9E962ADF4AD4)
    {
      if (v26 >= *(_QWORD *)&v11)
        v26 %= *(_QWORD *)&v11;
      if (v26 != v22)
        goto LABEL_69;
      goto LABEL_56;
    }
    if (v24[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_56:
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_69;
      continue;
    }
    break;
  }
LABEL_67:
  v28 = v24[5];
  if (*(_QWORD *)(v28 + 8) == 0xC97B9E962ADF4AD4)
  {
    v29 = *(uint64_t **)(v28 + 32);
    goto LABEL_70;
  }
LABEL_69:
  v29 = 0;
LABEL_70:
  v30 = *v29;
  v31 = v29[1];
  v32 = *v29;
  if (*v29 != v31)
  {
    v32 = *v29;
    while (*(_BYTE *)v32 != 23)
    {
      v32 += 16;
      if (v32 == v31)
        goto LABEL_77;
    }
  }
  if (v32 == v31)
LABEL_77:
    v33 = 0;
  else
    v33 = *(_QWORD *)(v32 + 8);
  if (*((_BYTE *)v20 + 3031) != (v33 != 0))
  {
    *(_QWORD *)&v565 = &off_1E42CA0A0;
    *((_QWORD *)&v565 + 1) = v20;
    v566 = v33 != 0;
    v567 = &v565;
    md::LabelManager::queueCommand(v20, 17, 1, &v565);
    v34 = v567;
    if (v567 == &v565)
    {
      v35 = 4;
      v34 = &v565;
LABEL_83:
      (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
    }
    else if (v567)
    {
      v35 = 5;
      goto LABEL_83;
    }
    v30 = *v29;
    v31 = v29[1];
  }
  if (v30 == v31)
    goto LABEL_97;
  v36 = v30;
  while (*(_BYTE *)v36 != 25)
  {
    v36 += 16;
    if (v36 == v31)
      goto LABEL_97;
  }
  if (v36 == v31 || !*(_QWORD *)(v36 + 8))
  {
LABEL_97:
    v38 = 0;
  }
  else
  {
    if (v30 == v31)
      goto LABEL_873;
    v37 = v30;
    while (*(_BYTE *)v37 != 28)
    {
      v37 += 16;
      if (v37 == v31)
        goto LABEL_873;
    }
    if (v37 == v31)
LABEL_873:
      v517 = 0;
    else
      v517 = *(_QWORD *)(v37 + 8);
    v38 = v517 != 0;
  }
  v39 = *((unsigned __int8 *)this + 271);
  v40 = v39 != v38;
  if (v39 != v38)
    *((_BYTE *)this + 271) = v38;
  v41 = 0;
  if (v38 && v30 != v31)
  {
    while (*(_BYTE *)v30 != 39)
    {
      v30 += 16;
      if (v30 == v31)
        goto LABEL_108;
    }
    if (v30 != v31 && *(_QWORD *)(v30 + 8))
    {
      v41 = *(_BYTE *)(*((_QWORD *)this + 6) + 3686) == 0;
      goto LABEL_109;
    }
LABEL_108:
    v41 = 0;
  }
LABEL_109:
  v519 = a2;
  if (*((unsigned __int8 *)this + 272) != v41)
  {
    *((_BYTE *)this + 272) = v41;
    v40 = 1;
  }
  v42 = *((unsigned __int8 *)this + 276);
  md::LayoutContext::frameState(v519);
  if (v42 != *(unsigned __int8 *)(v43 + 116))
  {
    md::LayoutContext::frameState(v519);
    v45 = *(unsigned __int8 *)(v44 + 116);
    *((_BYTE *)this + 276) = v45;
    *((_BYTE *)this + 277) = v45 == 6;
    md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
    v40 = 1;
  }
  v46 = *v29;
  v47 = v29[1];
  v48 = *v29;
  if (*v29 != v47)
  {
    v48 = *v29;
    while (*(_BYTE *)v48)
    {
      v48 += 16;
      if (v48 == v47)
        goto LABEL_120;
    }
  }
  if (v48 == v47)
LABEL_120:
    v49 = 0;
  else
    v49 = *(_QWORD *)(v48 + 8);
  v50 = v49 != 0;
  if (*((unsigned __int8 *)this + 273) != v50)
  {
    *((_BYTE *)this + 273) = v50;
    v40 = 1;
  }
  v51 = v46;
  if (v46 != v47)
  {
    v51 = v46;
    while (*(_BYTE *)v51 != 34)
    {
      v51 += 16;
      if (v51 == v47)
        goto LABEL_130;
    }
  }
  if (v51 == v47)
LABEL_130:
    v52 = 0;
  else
    v52 = *(_QWORD *)(v51 + 8);
  v53 = v52 != 0;
  if (*((unsigned __int8 *)this + 274) != v53)
  {
    *((_BYTE *)this + 274) = v53;
    v40 = 1;
  }
  if (v46 != v47)
  {
    while (*(_BYTE *)v46 != 33)
    {
      v46 += 16;
      if (v46 == v47)
        goto LABEL_139;
    }
  }
  if (v46 == v47)
LABEL_139:
    v54 = 0;
  else
    v54 = *(_QWORD *)(v46 + 8);
  v55 = v54 != 0;
  if (*((unsigned __int8 *)this + 275) != v55)
  {
    *((_BYTE *)this + 275) = v55;
    v40 = 1;
  }
  ++*((_DWORD *)this + 66);
  v56 = (uint64_t *)*((_QWORD *)v519 + 1);
  v57 = (int8x8_t)v56[1];
  v58 = (uint8x8_t)vcnt_s8(v57);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v57;
    if (*(_QWORD *)&v57 > 0x99BED48DEFBBD82BLL)
      v59 = 0x99BED48DEFBBD82BLL;
  }
  else
  {
    v59 = (*(_QWORD *)&v57 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v60 = *v56;
  v61 = *(_QWORD **)(v60 + 8 * v59);
  if (!v61)
    goto LABEL_164;
  v62 = (_QWORD *)*v61;
  if (!v62)
    goto LABEL_164;
  if (v58.u32[0] < 2uLL)
  {
    while (1)
    {
      v64 = v62[1];
      if (v64 == 0x99BED48DEFBBD82BLL)
      {
        if (v62[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_162;
      }
      else if ((v64 & (*(_QWORD *)&v57 - 1)) != v59)
      {
        goto LABEL_164;
      }
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_164;
    }
  }
  while (2)
  {
    v63 = v62[1];
    if (v63 != 0x99BED48DEFBBD82BLL)
    {
      if (v63 >= *(_QWORD *)&v57)
        v63 %= *(_QWORD *)&v57;
      if (v63 != v59)
        goto LABEL_164;
      goto LABEL_151;
    }
    if (v62[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_151:
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_164;
      continue;
    }
    break;
  }
LABEL_162:
  v65 = v62[5];
  if (*(_QWORD *)(v65 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v521 = *(uint64_t **)(v65 + 32);
    goto LABEL_165;
  }
LABEL_164:
  v521 = 0;
LABEL_165:
  if (v58.u32[0] >= 2uLL)
  {
    v67 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v57 <= 0x8BD499FBD96FBB9ELL)
      v67 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v57;
    v66 = *(_QWORD **)(v60 + 8 * v67);
    do
    {
      do
        v66 = (_QWORD *)*v66;
      while (v66[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v66[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v66 = *(_QWORD **)(v60 + 8 * ((*(_QWORD *)&v57 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v66 = (_QWORD *)*v66;
      while (v66[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v66[2] != 0x8BD499FBD96FBB9ELL);
  }
  v68 = **(unsigned __int8 **)(v66[5] + 32);
  if (*((unsigned __int8 *)this + 270) != v68)
  {
    *((_BYTE *)this + 270) = v68;
    goto LABEL_179;
  }
  if (v40)
LABEL_179:
    md::LabelRenderLayer::updateMapDataUsed(this);
  v70 = *(_BYTE **)(*v521 + 232);
  v69 = *(_BYTE **)(*v521 + 240);
  v71 = v69 - v70;
  if (v69 != v70)
  {
    if (v71 < 0)
      abort();
    v72 = 2 * (v71 >> 1);
    __p = (char *)operator new(v69 - v70);
    memcpy(__p, v70, v71);
    if (v72)
    {
      v520 = (unsigned __int16 *)&__p[v72];
      v541 = (float *)((char *)this + 304);
      v542 = (uint64_t *)((char *)this + 224);
      v73 = (unsigned __int16 *)__p;
      do
      {
        v543 = *v73;
        v74 = *v521;
        v76 = *(unsigned __int16 **)(*v521 + 112);
        v75 = *(unsigned __int16 **)(*v521 + 120);
        v77 = v76;
        if (v76 != v75)
        {
          while (*v77 != v543)
          {
            v77 += 56;
            if (v77 == v75)
            {
              v77 = *(unsigned __int16 **)(*v521 + 120);
              break;
            }
          }
          if (v76 != v75)
          {
            while (*v76 != v543)
            {
              v76 += 56;
              if (v76 == v75)
              {
                v76 = *(unsigned __int16 **)(*v521 + 120);
                break;
              }
            }
          }
        }
        v78 = *(unsigned __int16 **)(v74 + 136);
        v79 = *(unsigned __int16 **)(v74 + 144);
        v522 = v73;
        if (v78 != v79)
        {
          while (*v78 != v543)
          {
            v78 += 56;
            if (v78 == v79)
            {
              v78 = *(unsigned __int16 **)(v74 + 144);
              break;
            }
          }
        }
        v80 = (_QWORD *)*((_QWORD *)v76 + 13);
        v81 = *(unsigned __int8 *)(v74 + 280);
        v82 = (uint64_t *)(v74 + 256);
        if (v81)
          v83 = v82;
        else
          v83 = 0;
        v84 = *v80;
        v85 = v80[1];
        v544 = v80;
        v86 = *v80;
        if (*v80 != v85)
        {
          v87 = v84 + 144;
          v88 = *v80;
          while (v87 != v85)
          {
            v86 = v87;
            v88 += 144;
            if (*(unsigned __int8 *)(v87 + 112) != *(unsigned __int8 *)(v84 + 112)
              || *(unsigned __int8 *)(v87 + 113) != *(unsigned __int8 *)(v84 + 113)
              || *(_DWORD *)(v87 + 116) != *(_DWORD *)(v84 + 116))
            {
              v86 = v88;
              goto LABEL_210;
            }
            v87 += 144;
            if (*(_DWORD *)(v86 + 120) != *(_DWORD *)(v84 + 120))
              goto LABEL_210;
          }
          v86 = v80[1];
        }
LABEL_210:
        v548 = (uint64_t *)*((_QWORD *)v78 + 13);
        v89 = v77 + 8;
        v90 = v80[1];
        v533 = v81;
        v523 = v77 + 8;
        while (v84 != v90)
        {
          v92 = *(_BYTE *)(v84 + 113);
          LOBYTE(v557) = *(_BYTE *)(v84 + 112);
          v93 = v557;
          BYTE1(v557) = v92;
          v537 = *(_QWORD *)(v84 + 116);
          *(_QWORD *)((char *)&v557 + 4) = v537;
          if (v557 == 2
            || (v557 != 255 ? (v94 = v557 == 5) : (v94 = 1), v94))
          {
            if (std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v89, (unsigned __int8 *)&v557))
            {
              v95 = 1 << v92;
              v96 = (((int)v537 % v95 + v95) % v95);
              v97 = SHIDWORD(v537) % v95 + v95;
              LOBYTE(v565) = v93;
              BYTE1(v565) = v92;
              v98 = (v97 % (1 << v92));
              DWORD1(v565) = ((int)v537 % v95 + v95) % v95;
              DWORD2(v565) = v97 % (1 << v92);
              LOWORD(v567) = v543;
              if (!std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v541, (unsigned __int8 *)&v565))
              {
                v525 = v93;
                v527 = v92;
                v99 = 0;
                v100 = v533;
                v101 = v96;
                v538 = v96;
                v102 = v98;
                v530 = v98;
                while (1)
                {
                  if (v84 == v86)
                  {
                    LOBYTE(v565) = v525;
                    BYTE1(v565) = v527;
                    *(_QWORD *)((char *)&v565 + 4) = __PAIR64__(v102, v101);
                    LOWORD(v567) = v543;
                    std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v541, (unsigned __int8 *)&v565, (uint64_t)&v565);
                    v89 = v523;
                    break;
                  }
                  v103 = *(unsigned __int16 *)(v84 + 8);
                  if (v100)
                  {
                    v104 = *v83;
                    v105 = v83[1];
                    if (*v83 != v105)
                    {
                      v106 = 1.0 / (double)(1 << SBYTE1(v557));
                      v107 = v106 * (double)SDWORD2(v557);
                      v108 = v106 * (double)((1 << SBYTE1(v557)) + ~DWORD1(v557));
                      v109 = v107 + v106;
                      v110 = v108 + v106;
                      if (v103 <= 0x7F)
                      {
                        v111 = v103 >> 6;
                        v112 = 1 << v103;
                        while (1)
                        {
                          if (v107 >= *(double *)v104
                            && v109 <= *(double *)(v104 + 16)
                            && v108 >= *(double *)(v104 + 8)
                            && v110 <= *(double *)(v104 + 24))
                          {
                            v565 = 0uLL;
                            *((_QWORD *)&v565 + v111) |= v112;
                            if ((*(_OWORD *)(v104 + 48) & v565) != 0)
                              goto LABEL_225;
                            v565 = 0uLL;
                            *((_QWORD *)&v565 + v111) |= v112;
                            if ((*(_OWORD *)(v104 + 32) & v565) == 0)
                              goto LABEL_225;
                          }
                          v104 += 64;
                          if (v104 == v105)
                            goto LABEL_245;
                        }
                      }
                      do
                      {
                        if (v107 >= *(double *)v104
                          && v109 <= *(double *)(v104 + 16)
                          && v108 >= *(double *)(v104 + 8)
                          && v110 <= *(double *)(v104 + 24))
                        {
                          abort();
                        }
                        v104 += 64;
                      }
                      while (v104 != v105);
                    }
                  }
LABEL_245:
                  v113 = (unsigned __int16 *)*((_QWORD *)this + 35);
                  v114 = (unsigned __int16 *)*((_QWORD *)this + 36);
                  if (v113 != v114)
                  {
                    while (1)
                    {
                      v115 = *v113;
                      if (v115 == (_DWORD)v103)
                        break;
                      ++v113;
                      if (v103 < v115 || v113 == v114)
                        goto LABEL_225;
                    }
                  }
                  if (v113 != v114)
                  {
                    v117 = (unsigned __int16 *)v544[3];
                    v118 = (unsigned __int16 *)v544[4];
                    if (v117 != v118)
                    {
                      while (*v117 != (_DWORD)v103)
                      {
                        v117 += 16;
                        if (v117 == v118)
                        {
                          v117 = (unsigned __int16 *)v544[4];
                          break;
                        }
                      }
                    }
                    v119 = *(_QWORD *)(v84 + 136);
                    v120 = *((_QWORD *)v117 + 1);
                    if (0x8E38E38E38E38E39 * ((*((_QWORD *)v117 + 2) - v120) >> 4) <= v119)
                      goto LABEL_875;
                    v121 = v120 + 144 * v119;
                    v123 = *(_QWORD *)(v121 + 112);
                    v122 = (uint64_t *)(v121 + 112);
                    if (v123)
                    {
                      if (!v99)
                      {
                        v124 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v542, (unsigned __int8 *)&v557);
                        if (v124)
                        {
                          v99 = v124[5];
                        }
                        else
                        {
                          v125 = operator new();
                          *(_WORD *)v125 = v557;
                          *(_QWORD *)(v125 + 4) = *(_QWORD *)((char *)&v557 + 4);
                          *(_QWORD *)(v125 + 224) = 0;
                          *(_OWORD *)(v125 + 24) = 0u;
                          *(_OWORD *)(v125 + 40) = 0u;
                          *(_OWORD *)(v125 + 56) = 0u;
                          *(_OWORD *)(v125 + 72) = 0u;
                          *(_OWORD *)(v125 + 88) = 0u;
                          *(_OWORD *)(v125 + 104) = 0u;
                          *(_OWORD *)(v125 + 120) = 0u;
                          *(_OWORD *)(v125 + 136) = 0u;
                          *(_OWORD *)(v125 + 152) = 0u;
                          *(_OWORD *)(v125 + 168) = 0u;
                          *(_OWORD *)(v125 + 184) = 0u;
                          *(_OWORD *)(v125 + 200) = 0u;
                          *(_BYTE *)(v125 + 216) = 0;
                          *(_WORD *)(v125 + 232) = 255;
                          *(_DWORD *)(v125 + 236) = 0;
                          *(_DWORD *)(v125 + 240) = 0;
                          *(_QWORD *)(v125 + 256) = 0;
                          *(_QWORD *)(v125 + 264) = 0;
                          *(_QWORD *)&v565 = v125;
                          v99 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile&,std::unique_ptr<md::LabelMapTileSourceData>>(v542, (unsigned __int8 *)&v557, (uint64_t)&v557, (uint64_t *)&v565)[5];
                          if ((_QWORD)v565)
                            std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v565);
                        }
                        v100 = v533;
                        v101 = v538;
                        v102 = v530;
                      }
                      switch((int)v103)
                      {
                        case 2:
                          v165 = *v122;
                          v166 = *(_QWORD *)(*v122 + 856);
                          v167 = *(_QWORD *)(*v122 + 864);
                          if (v167)
                          {
                            v168 = (unint64_t *)(v167 + 8);
                            do
                              v169 = __ldxr(v168);
                            while (__stxr(v169 + 1, v168));
                          }
                          v170 = *(std::__shared_weak_count **)(v99 + 264);
                          *(_QWORD *)(v99 + 256) = v166;
                          *(_QWORD *)(v99 + 264) = v167;
                          if (v170)
                          {
                            p_shared_owners = (unint64_t *)&v170->__shared_owners_;
                            do
                              v172 = __ldaxr(p_shared_owners);
                            while (__stlxr(v172 - 1, p_shared_owners));
                            if (!v172)
                            {
                              ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v170->__on_zero_shared)(v170, v101, v102);
                              std::__shared_weak_count::__release_weak(v170);
                              v102 = v530;
                              v101 = v538;
                              v100 = v533;
                            }
                          }
                          *(_QWORD *)(v99 + 224) = v165 + 872;
                          v173 = *(_OWORD *)(v165 + 168);
                          *(_QWORD *)(v99 + 248) = *(_QWORD *)(v165 + 184);
                          *(_OWORD *)(v99 + 232) = v173;
                          *(_BYTE *)(v99 + 216) = *(_QWORD *)(v99 + 256) != 0;
                          v84 += 144;
                          continue;
                        case 12:
                          v174 = *(_QWORD *)(*v122 + 824);
                          v175 = *(_QWORD *)(*v122 + 832);
                          if (v175)
                          {
                            v176 = (unint64_t *)(v175 + 8);
                            do
                              v177 = __ldxr(v176);
                            while (__stxr(v177 + 1, v176));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 112);
                          *(_QWORD *)(v99 + 104) = v174;
                          *(_QWORD *)(v99 + 112) = v175;
                          if (!v130)
                            break;
                          v178 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v178);
                          while (__stlxr(v132 - 1, v178));
                          goto LABEL_223;
                        case 18:
                        case 21:
                          v138 = *(_QWORD *)(*v122 + 720);
                          v139 = *(_QWORD *)(*v122 + 728);
                          if (v139)
                          {
                            v140 = (unint64_t *)(v139 + 8);
                            do
                              v141 = __ldxr(v140);
                            while (__stxr(v141 + 1, v140));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 32);
                          *(_QWORD *)(v99 + 24) = v138;
                          *(_QWORD *)(v99 + 32) = v139;
                          if (!v130)
                            break;
                          v142 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v142);
                          while (__stlxr(v132 - 1, v142));
                          goto LABEL_223;
                        case 19:
                        case 22:
                        case 23:
                          v126 = *(_QWORD *)(*v122 + 720);
                          v127 = *(_QWORD *)(*v122 + 728);
                          if (v127)
                          {
                            v128 = (unint64_t *)(v127 + 8);
                            do
                              v129 = __ldxr(v128);
                            while (__stxr(v129 + 1, v128));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 48);
                          *(_QWORD *)(v99 + 40) = v126;
                          *(_QWORD *)(v99 + 48) = v127;
                          if (!v130)
                            break;
                          v131 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v131);
                          while (__stlxr(v132 - 1, v131));
                          goto LABEL_223;
                        case 20:
                        case 24:
                          v133 = *(_QWORD *)(*v122 + 720);
                          v134 = *(_QWORD *)(*v122 + 728);
                          if (v134)
                          {
                            v135 = (unint64_t *)(v134 + 8);
                            do
                              v136 = __ldxr(v135);
                            while (__stxr(v136 + 1, v135));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 64);
                          *(_QWORD *)(v99 + 56) = v133;
                          *(_QWORD *)(v99 + 64) = v134;
                          if (!v130)
                            break;
                          v137 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v137);
                          while (__stlxr(v132 - 1, v137));
                          goto LABEL_223;
                        case 25:
                          v179 = *(_QWORD *)(*v122 + 720);
                          v180 = *(_QWORD *)(*v122 + 728);
                          if (v180)
                          {
                            v181 = (unint64_t *)(v180 + 8);
                            do
                              v182 = __ldxr(v181);
                            while (__stxr(v182 + 1, v181));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 80);
                          *(_QWORD *)(v99 + 72) = v179;
                          *(_QWORD *)(v99 + 80) = v180;
                          if (!v130)
                            break;
                          v183 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v183);
                          while (__stlxr(v132 - 1, v183));
                          goto LABEL_223;
                        case 26:
                          v148 = *(_QWORD *)(*v122 + 720);
                          v149 = *(_QWORD *)(*v122 + 728);
                          if (v149)
                          {
                            v150 = (unint64_t *)(v149 + 8);
                            do
                              v151 = __ldxr(v150);
                            while (__stxr(v151 + 1, v150));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 96);
                          *(_QWORD *)(v99 + 88) = v148;
                          *(_QWORD *)(v99 + 96) = v149;
                          if (!v130)
                            break;
                          v152 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v152);
                          while (__stlxr(v132 - 1, v152));
                          goto LABEL_223;
                        case 27:
                          v158 = *(_QWORD *)(*v122 + 720);
                          v159 = *(_QWORD *)(*v122 + 728);
                          if (v159)
                          {
                            v160 = (unint64_t *)(v159 + 8);
                            do
                              v161 = __ldxr(v160);
                            while (__stxr(v161 + 1, v160));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 192);
                          *(_QWORD *)(v99 + 184) = v158;
                          *(_QWORD *)(v99 + 192) = v159;
                          if (!v130)
                            break;
                          v162 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v162);
                          while (__stlxr(v132 - 1, v162));
                          goto LABEL_223;
                        case 66:
                          v153 = *(_QWORD *)(*v122 + 720);
                          v154 = *(_QWORD *)(*v122 + 728);
                          if (v154)
                          {
                            v155 = (unint64_t *)(v154 + 8);
                            do
                              v156 = __ldxr(v155);
                            while (__stxr(v156 + 1, v155));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 128);
                          *(_QWORD *)(v99 + 120) = v153;
                          *(_QWORD *)(v99 + 128) = v154;
                          if (!v130)
                            break;
                          v157 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v157);
                          while (__stlxr(v132 - 1, v157));
                          goto LABEL_223;
                        case 73:
                        case 80:
                          v143 = *(_QWORD *)(*v122 + 720);
                          v144 = *(_QWORD *)(*v122 + 728);
                          if (v144)
                          {
                            v145 = (unint64_t *)(v144 + 8);
                            do
                              v146 = __ldxr(v145);
                            while (__stxr(v146 + 1, v145));
                          }
                          v130 = *(std::__shared_weak_count **)(v99 + 144);
                          *(_QWORD *)(v99 + 136) = v143;
                          *(_QWORD *)(v99 + 144) = v144;
                          if (!v130)
                            break;
                          v147 = (unint64_t *)&v130->__shared_owners_;
                          do
                            v132 = __ldaxr(v147);
                          while (__stlxr(v132 - 1, v147));
LABEL_223:
                          if (!v132)
                          {
                            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                            std::__shared_weak_count::__release_weak(v130);
                            v102 = v530;
                            v101 = v538;
                            v100 = v533;
                          }
                          break;
                        default:
                          if ((v103 & 0xFFFE) == 0x34)
                          {
                            v163 = *v122;
                            v164 = *(_OWORD *)(*v122 + 168);
                            *(_QWORD *)(v99 + 248) = *(_QWORD *)(*v122 + 184);
                            *(_OWORD *)(v99 + 232) = v164;
                            *(_QWORD *)(v99 + 224) = v163 + 800;
                            *(_BYTE *)(v99 + 216) = 1;
                            v84 += 144;
                            continue;
                          }
                          switch((int)v103)
                          {
                            case '+':
                            case 'M':
                              v184 = *v122;
                              v185 = *(_QWORD *)(v120 + 144 * v119 + 120);
                              if (v185)
                              {
                                v186 = (unint64_t *)(v185 + 8);
                                do
                                  v187 = __ldxr(v186);
                                while (__stxr(v187 + 1, v186));
                              }
                              v130 = *(std::__shared_weak_count **)(v99 + 208);
                              *(_QWORD *)(v99 + 200) = v184;
                              *(_QWORD *)(v99 + 208) = v185;
                              if (v130)
                              {
                                v188 = (unint64_t *)&v130->__shared_owners_;
                                do
                                  v132 = __ldaxr(v188);
                                while (__stlxr(v132 - 1, v188));
                                goto LABEL_223;
                              }
                              break;
                            case 'E':
                              v194 = *(_QWORD *)(*v122 + 720);
                              v195 = *(_QWORD *)(*v122 + 728);
                              if (v195)
                              {
                                v196 = (unint64_t *)(v195 + 8);
                                do
                                  v197 = __ldxr(v196);
                                while (__stxr(v197 + 1, v196));
                              }
                              v130 = *(std::__shared_weak_count **)(v99 + 160);
                              *(_QWORD *)(v99 + 152) = v194;
                              *(_QWORD *)(v99 + 160) = v195;
                              if (v130)
                              {
                                v198 = (unint64_t *)&v130->__shared_owners_;
                                do
                                  v132 = __ldaxr(v198);
                                while (__stlxr(v132 - 1, v198));
                                goto LABEL_223;
                              }
                              break;
                            case 'J':
                              v189 = *(_QWORD *)(*v122 + 720);
                              v190 = *(_QWORD *)(*v122 + 728);
                              if (v190)
                              {
                                v191 = (unint64_t *)(v190 + 8);
                                do
                                  v192 = __ldxr(v191);
                                while (__stxr(v192 + 1, v191));
                              }
                              v130 = *(std::__shared_weak_count **)(v99 + 176);
                              *(_QWORD *)(v99 + 168) = v189;
                              *(_QWORD *)(v99 + 176) = v190;
                              if (v130)
                              {
                                v193 = (unint64_t *)&v130->__shared_owners_;
                                do
                                  v132 = __ldaxr(v193);
                                while (__stlxr(v132 - 1, v193));
                                goto LABEL_223;
                              }
                              break;
                            default:
                              goto LABEL_225;
                          }
                          break;
                      }
                    }
                  }
LABEL_225:
                  v84 += 144;
                }
              }
            }
          }
          v91 = v85;
          if (v85 != v86)
          {
            v199 = v86 + 144;
            v91 = v86;
            while (1)
            {
              if (v199 == v85)
              {
                v91 = v85;
                goto LABEL_212;
              }
              if (*(unsigned __int8 *)(v199 + 112) != *(unsigned __int8 *)(v86 + 112))
                break;
              v91 += 144;
              if (*(unsigned __int8 *)(v199 + 113) == *(unsigned __int8 *)(v86 + 113)
                && *(_DWORD *)(v199 + 116) == *(_DWORD *)(v86 + 116))
              {
                v200 = *(_DWORD *)(v199 + 120);
                v199 += 144;
                if (v200 == *(_DWORD *)(v86 + 120))
                  continue;
              }
              goto LABEL_212;
            }
            v91 = v199;
          }
LABEL_212:
          v90 = v544[1];
          v84 = v86;
          v86 = v91;
        }
        v202 = *v548;
        v201 = v548[1];
        v203 = *v548;
        if (*v548 != v201)
        {
          v204 = v202 + 144;
          v205 = *v548;
          while (v204 != v201)
          {
            v203 = v204;
            v205 += 144;
            if (*(unsigned __int8 *)(v204 + 112) != *(unsigned __int8 *)(v202 + 112)
              || *(unsigned __int8 *)(v204 + 113) != *(unsigned __int8 *)(v202 + 113)
              || *(_DWORD *)(v204 + 116) != *(_DWORD *)(v202 + 116))
            {
              v203 = v205;
              goto LABEL_383;
            }
            v204 += 144;
            if (*(_DWORD *)(v203 + 120) != *(_DWORD *)(v202 + 120))
              goto LABEL_383;
          }
          v203 = v548[1];
        }
LABEL_383:
        v206 = v548[1];
        while (v202 != v206)
        {
          v208 = *(_BYTE *)(v202 + 113);
          LOBYTE(v557) = *(_BYTE *)(v202 + 112);
          v209 = v557;
          BYTE1(v557) = v208;
          v210 = *(_QWORD *)(v202 + 116);
          *(_QWORD *)((char *)&v557 + 4) = v210;
          if (v557 == 2
            || (v557 != 255 ? (v211 = v557 == 5) : (v211 = 1), v211))
          {
            v212 = 1 << v208;
            v213 = ((int)v210 % v212 + v212) % v212;
            LOBYTE(v565) = v557;
            BYTE1(v565) = v208;
            v214 = (SHIDWORD(v210) % v212 + v212) % (1 << v208);
            *(_QWORD *)((char *)&v565 + 4) = __PAIR64__(v214, v213);
            LOWORD(v567) = v543;
            if (!std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::find<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v541, (unsigned __int8 *)&v565))
            {
              v534 = v214;
              v539 = v213;
              v545 = v208;
              v215 = 0;
              while (v202 != v203)
              {
                v216 = *(unsigned __int16 *)(v202 + 8);
                v217 = (unsigned __int16 *)*((_QWORD *)this + 35);
                v218 = (unsigned __int16 *)*((_QWORD *)this + 36);
                if (v217 != v218)
                {
                  while (1)
                  {
                    v219 = *v217;
                    if (v219 == v216)
                      break;
                    ++v217;
                    if (v216 < v219 || v217 == v218)
                      goto LABEL_397;
                  }
                }
                if (v217 != v218)
                {
                  v221 = (unsigned __int16 *)v548[3];
                  v222 = (unsigned __int16 *)v548[4];
                  if (v221 != v222)
                  {
                    while (*v221 != v216)
                    {
                      v221 += 16;
                      if (v221 == v222)
                      {
                        v221 = (unsigned __int16 *)v548[4];
                        break;
                      }
                    }
                  }
                  v223 = *(_QWORD *)(v202 + 136);
                  v224 = *((_QWORD *)v221 + 1);
                  if (0x8E38E38E38E38E39 * ((*((_QWORD *)v221 + 2) - v224) >> 4) <= v223)
LABEL_875:
                    abort();
                  v225 = v224 + 144 * v223;
                  v227 = *(_QWORD *)(v225 + 112);
                  v226 = (uint64_t *)(v225 + 112);
                  if (v227)
                  {
                    if (!v215)
                    {
                      v228 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v542, (unsigned __int8 *)&v557);
                      if (v228)
                      {
                        v215 = v228[5];
                      }
                      else
                      {
                        v229 = operator new();
                        *(_WORD *)v229 = v557;
                        *(_QWORD *)(v229 + 4) = *(_QWORD *)((char *)&v557 + 4);
                        *(_QWORD *)(v229 + 224) = 0;
                        *(_OWORD *)(v229 + 24) = 0u;
                        *(_OWORD *)(v229 + 40) = 0u;
                        *(_OWORD *)(v229 + 56) = 0u;
                        *(_OWORD *)(v229 + 72) = 0u;
                        *(_OWORD *)(v229 + 88) = 0u;
                        *(_OWORD *)(v229 + 104) = 0u;
                        *(_OWORD *)(v229 + 120) = 0u;
                        *(_OWORD *)(v229 + 136) = 0u;
                        *(_OWORD *)(v229 + 152) = 0u;
                        *(_OWORD *)(v229 + 168) = 0u;
                        *(_OWORD *)(v229 + 184) = 0u;
                        *(_OWORD *)(v229 + 200) = 0u;
                        *(_BYTE *)(v229 + 216) = 0;
                        *(_WORD *)(v229 + 232) = 255;
                        *(_DWORD *)(v229 + 236) = 0;
                        *(_DWORD *)(v229 + 240) = 0;
                        *(_QWORD *)(v229 + 256) = 0;
                        *(_QWORD *)(v229 + 264) = 0;
                        *(_QWORD *)&v565 = v229;
                        v215 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile&,std::unique_ptr<md::LabelMapTileSourceData>>(v542, (unsigned __int8 *)&v557, (uint64_t)&v557, (uint64_t *)&v565)[5];
                        if ((_QWORD)v565)
                          std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v565);
                      }
                    }
                    switch(v216)
                    {
                      case 2u:
                        v269 = *v226;
                        v270 = *(_QWORD *)(*v226 + 856);
                        v271 = *(_QWORD *)(*v226 + 864);
                        if (v271)
                        {
                          v272 = (unint64_t *)(v271 + 8);
                          do
                            v273 = __ldxr(v272);
                          while (__stxr(v273 + 1, v272));
                        }
                        v274 = *(std::__shared_weak_count **)(v215 + 264);
                        *(_QWORD *)(v215 + 256) = v270;
                        *(_QWORD *)(v215 + 264) = v271;
                        if (v274)
                        {
                          v275 = (unint64_t *)&v274->__shared_owners_;
                          do
                            v276 = __ldaxr(v275);
                          while (__stlxr(v276 - 1, v275));
                          if (!v276)
                          {
                            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                            std::__shared_weak_count::__release_weak(v274);
                          }
                        }
                        *(_QWORD *)(v215 + 224) = v269 + 872;
                        v277 = *(_OWORD *)(v269 + 168);
                        *(_QWORD *)(v215 + 248) = *(_QWORD *)(v269 + 184);
                        *(_OWORD *)(v215 + 232) = v277;
                        *(_BYTE *)(v215 + 216) = *(_QWORD *)(v215 + 256) != 0;
                        v202 += 144;
                        continue;
                      case 0xCu:
                        v278 = *(_QWORD *)(*v226 + 824);
                        v279 = *(_QWORD *)(*v226 + 832);
                        if (v279)
                        {
                          v280 = (unint64_t *)(v279 + 8);
                          do
                            v281 = __ldxr(v280);
                          while (__stxr(v281 + 1, v280));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 112);
                        *(_QWORD *)(v215 + 104) = v278;
                        *(_QWORD *)(v215 + 112) = v279;
                        if (!v234)
                          break;
                        v282 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v282);
                        while (__stlxr(v236 - 1, v282));
                        goto LABEL_395;
                      case 0x12u:
                      case 0x15u:
                        v242 = *(_QWORD *)(*v226 + 720);
                        v243 = *(_QWORD *)(*v226 + 728);
                        if (v243)
                        {
                          v244 = (unint64_t *)(v243 + 8);
                          do
                            v245 = __ldxr(v244);
                          while (__stxr(v245 + 1, v244));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 32);
                        *(_QWORD *)(v215 + 24) = v242;
                        *(_QWORD *)(v215 + 32) = v243;
                        if (!v234)
                          break;
                        v246 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v246);
                        while (__stlxr(v236 - 1, v246));
                        goto LABEL_395;
                      case 0x13u:
                      case 0x16u:
                      case 0x17u:
                        v230 = *(_QWORD *)(*v226 + 720);
                        v231 = *(_QWORD *)(*v226 + 728);
                        if (v231)
                        {
                          v232 = (unint64_t *)(v231 + 8);
                          do
                            v233 = __ldxr(v232);
                          while (__stxr(v233 + 1, v232));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 48);
                        *(_QWORD *)(v215 + 40) = v230;
                        *(_QWORD *)(v215 + 48) = v231;
                        if (!v234)
                          break;
                        v235 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v235);
                        while (__stlxr(v236 - 1, v235));
                        goto LABEL_395;
                      case 0x14u:
                      case 0x18u:
                        v237 = *(_QWORD *)(*v226 + 720);
                        v238 = *(_QWORD *)(*v226 + 728);
                        if (v238)
                        {
                          v239 = (unint64_t *)(v238 + 8);
                          do
                            v240 = __ldxr(v239);
                          while (__stxr(v240 + 1, v239));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 64);
                        *(_QWORD *)(v215 + 56) = v237;
                        *(_QWORD *)(v215 + 64) = v238;
                        if (!v234)
                          break;
                        v241 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v241);
                        while (__stlxr(v236 - 1, v241));
                        goto LABEL_395;
                      case 0x19u:
                        v283 = *(_QWORD *)(*v226 + 720);
                        v284 = *(_QWORD *)(*v226 + 728);
                        if (v284)
                        {
                          v285 = (unint64_t *)(v284 + 8);
                          do
                            v286 = __ldxr(v285);
                          while (__stxr(v286 + 1, v285));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 80);
                        *(_QWORD *)(v215 + 72) = v283;
                        *(_QWORD *)(v215 + 80) = v284;
                        if (!v234)
                          break;
                        v287 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v287);
                        while (__stlxr(v236 - 1, v287));
                        goto LABEL_395;
                      case 0x1Au:
                        v252 = *(_QWORD *)(*v226 + 720);
                        v253 = *(_QWORD *)(*v226 + 728);
                        if (v253)
                        {
                          v254 = (unint64_t *)(v253 + 8);
                          do
                            v255 = __ldxr(v254);
                          while (__stxr(v255 + 1, v254));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 96);
                        *(_QWORD *)(v215 + 88) = v252;
                        *(_QWORD *)(v215 + 96) = v253;
                        if (!v234)
                          break;
                        v256 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v256);
                        while (__stlxr(v236 - 1, v256));
                        goto LABEL_395;
                      case 0x1Bu:
                        v262 = *(_QWORD *)(*v226 + 720);
                        v263 = *(_QWORD *)(*v226 + 728);
                        if (v263)
                        {
                          v264 = (unint64_t *)(v263 + 8);
                          do
                            v265 = __ldxr(v264);
                          while (__stxr(v265 + 1, v264));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 192);
                        *(_QWORD *)(v215 + 184) = v262;
                        *(_QWORD *)(v215 + 192) = v263;
                        if (!v234)
                          break;
                        v266 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v266);
                        while (__stlxr(v236 - 1, v266));
                        goto LABEL_395;
                      case 0x42u:
                        v257 = *(_QWORD *)(*v226 + 720);
                        v258 = *(_QWORD *)(*v226 + 728);
                        if (v258)
                        {
                          v259 = (unint64_t *)(v258 + 8);
                          do
                            v260 = __ldxr(v259);
                          while (__stxr(v260 + 1, v259));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 128);
                        *(_QWORD *)(v215 + 120) = v257;
                        *(_QWORD *)(v215 + 128) = v258;
                        if (!v234)
                          break;
                        v261 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v261);
                        while (__stlxr(v236 - 1, v261));
                        goto LABEL_395;
                      case 0x49u:
                      case 0x50u:
                        v247 = *(_QWORD *)(*v226 + 720);
                        v248 = *(_QWORD *)(*v226 + 728);
                        if (v248)
                        {
                          v249 = (unint64_t *)(v248 + 8);
                          do
                            v250 = __ldxr(v249);
                          while (__stxr(v250 + 1, v249));
                        }
                        v234 = *(std::__shared_weak_count **)(v215 + 144);
                        *(_QWORD *)(v215 + 136) = v247;
                        *(_QWORD *)(v215 + 144) = v248;
                        if (!v234)
                          break;
                        v251 = (unint64_t *)&v234->__shared_owners_;
                        do
                          v236 = __ldaxr(v251);
                        while (__stlxr(v236 - 1, v251));
LABEL_395:
                        if (!v236)
                        {
                          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                          std::__shared_weak_count::__release_weak(v234);
                        }
                        break;
                      default:
                        if ((v216 & 0xFFFE) == 0x34)
                        {
                          v267 = *v226;
                          v268 = *(_OWORD *)(*v226 + 168);
                          *(_QWORD *)(v215 + 248) = *(_QWORD *)(*v226 + 184);
                          *(_OWORD *)(v215 + 232) = v268;
                          *(_QWORD *)(v215 + 224) = v267 + 800;
                          *(_BYTE *)(v215 + 216) = 1;
                          v202 += 144;
                          continue;
                        }
                        switch(v216)
                        {
                          case '+':
                          case 'M':
                            v288 = *v226;
                            v289 = *(_QWORD *)(v224 + 144 * v223 + 120);
                            if (v289)
                            {
                              v290 = (unint64_t *)(v289 + 8);
                              do
                                v291 = __ldxr(v290);
                              while (__stxr(v291 + 1, v290));
                            }
                            v234 = *(std::__shared_weak_count **)(v215 + 208);
                            *(_QWORD *)(v215 + 200) = v288;
                            *(_QWORD *)(v215 + 208) = v289;
                            if (v234)
                            {
                              v292 = (unint64_t *)&v234->__shared_owners_;
                              do
                                v236 = __ldaxr(v292);
                              while (__stlxr(v236 - 1, v292));
                              goto LABEL_395;
                            }
                            break;
                          case 'E':
                            v298 = *(_QWORD *)(*v226 + 720);
                            v299 = *(_QWORD *)(*v226 + 728);
                            if (v299)
                            {
                              v300 = (unint64_t *)(v299 + 8);
                              do
                                v301 = __ldxr(v300);
                              while (__stxr(v301 + 1, v300));
                            }
                            v234 = *(std::__shared_weak_count **)(v215 + 160);
                            *(_QWORD *)(v215 + 152) = v298;
                            *(_QWORD *)(v215 + 160) = v299;
                            if (v234)
                            {
                              v302 = (unint64_t *)&v234->__shared_owners_;
                              do
                                v236 = __ldaxr(v302);
                              while (__stlxr(v236 - 1, v302));
                              goto LABEL_395;
                            }
                            break;
                          case 'J':
                            v293 = *(_QWORD *)(*v226 + 720);
                            v294 = *(_QWORD *)(*v226 + 728);
                            if (v294)
                            {
                              v295 = (unint64_t *)(v294 + 8);
                              do
                                v296 = __ldxr(v295);
                              while (__stxr(v296 + 1, v295));
                            }
                            v234 = *(std::__shared_weak_count **)(v215 + 176);
                            *(_QWORD *)(v215 + 168) = v293;
                            *(_QWORD *)(v215 + 176) = v294;
                            if (v234)
                            {
                              v297 = (unint64_t *)&v234->__shared_owners_;
                              do
                                v236 = __ldaxr(v297);
                              while (__stlxr(v236 - 1, v297));
                              goto LABEL_395;
                            }
                            break;
                          default:
                            goto LABEL_397;
                        }
                        break;
                    }
                  }
                }
LABEL_397:
                v202 += 144;
              }
              LOBYTE(v565) = v209;
              BYTE1(v565) = v545;
              *(_QWORD *)((char *)&v565 + 4) = __PAIR64__(v534, v539);
              LOWORD(v567) = v543;
              std::__hash_table<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,md::QuadTileBySelectionTypeKeyHash,std::equal_to<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>,std::allocator<std::pair<geo::QuadTile,md::TileSelectionTileSetType>>>::__emplace_unique_key_args<std::pair<geo::QuadTile,md::TileSelectionTileSetType>,std::pair<geo::QuadTile,md::TileSelectionTileSetType>>(v541, (unsigned __int8 *)&v565, (uint64_t)&v565);
            }
          }
          v207 = v201;
          if (v201 != v203)
          {
            v303 = v203 + 144;
            v207 = v203;
            while (1)
            {
              if (v303 == v201)
              {
                v207 = v201;
                goto LABEL_385;
              }
              if (*(unsigned __int8 *)(v303 + 112) != *(unsigned __int8 *)(v203 + 112))
                break;
              v207 += 144;
              if (*(unsigned __int8 *)(v303 + 113) == *(unsigned __int8 *)(v203 + 113)
                && *(_DWORD *)(v303 + 116) == *(_DWORD *)(v203 + 116))
              {
                v304 = *(_DWORD *)(v303 + 120);
                v303 += 144;
                if (v304 == *(_DWORD *)(v203 + 120))
                  continue;
              }
              goto LABEL_385;
            }
            v207 = v303;
          }
LABEL_385:
          v206 = v548[1];
          v202 = v203;
          v203 = v207;
        }
        v73 = v522 + 1;
      }
      while (v522 + 1 != v520);
    }
    operator delete(__p);
  }
  v305 = (_QWORD *)*((_QWORD *)this + 30);
  if (v305)
  {
    v306 = (uint64_t)this + 56;
    v307 = (uint64_t *)((char *)this + 88);
    v540 = (uint64_t *)((char *)this + 112);
LABEL_530:
    v308 = (unsigned __int8 *)v305[5];
    v554 = 0uLL;
    v309 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)this + 11, v308);
    if (v309)
    {
      v310 = v309;
      v311 = (uint64_t *)v309[7];
      if (v311 != (uint64_t *)v306)
      {
        v312 = (uint64_t *)*((_QWORD *)this + 8);
        if (v312 != v311)
        {
          v313 = (uint64_t *)v311[1];
          if (v313 != v312)
          {
            v314 = *v311;
            *(_QWORD *)(v314 + 8) = v313;
            *(_QWORD *)v311[1] = v314;
            v315 = *v312;
            *(_QWORD *)(v315 + 8) = v311;
            *v311 = v315;
            *v312 = (uint64_t)v311;
            v311[1] = (uint64_t)v312;
          }
        }
        ++*((_DWORD *)this + 37);
        v317 = (md::LabelMapTile *)v311[5];
        v316 = (std::__shared_weak_count *)v311[6];
        v552 = v316;
        if (v316)
        {
          v318 = (unint64_t *)&v316->__shared_owners_;
          do
            v319 = __ldxr(v318);
          while (__stxr(v319 + 1, v318));
LABEL_538:
          v553 = 1;
          v320 = (unint64_t *)&v316->__shared_owners_;
          do
            v321 = __ldxr(v320);
          while (__stxr(v321 + 1, v320));
          *(_QWORD *)&v554 = v317;
          *((_QWORD *)&v554 + 1) = v316;
LABEL_701:
          if (!v317)
            goto LABEL_829;
          goto LABEL_702;
        }
LABEL_543:
        v553 = 1;
        v554 = (unint64_t)v317;
        if (!v317)
          goto LABEL_829;
        goto LABEL_702;
      }
      if (*((_BYTE *)v309 + 64))
      {
        v317 = 0;
        ++*((_DWORD *)this + 37);
        v552 = 0;
        goto LABEL_543;
      }
      v322 = (std::__shared_weak_count *)v309[6];
      if (v322)
      {
        v323 = std::__shared_weak_count::lock(v322);
        *((_QWORD *)&v565 + 1) = v323;
        if (v323)
        {
          v316 = v323;
          v317 = (md::LabelMapTile *)v310[5];
          *(_QWORD *)&v565 = v317;
          if (v317)
          {
            v324 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), 56, 8);
            *(_QWORD *)v324 = 0;
            *(_QWORD *)(v324 + 8) = 0;
            *(_WORD *)(v324 + 16) = *(_WORD *)v308;
            *(_QWORD *)(v324 + 20) = *(_QWORD *)(v308 + 4);
            *(_QWORD *)(v324 + 40) = v317;
            *(_QWORD *)(v324 + 48) = v316;
            v325 = (unint64_t *)&v316->__shared_owners_;
            do
              v326 = __ldxr(v325);
            while (__stxr(v326 + 1, v325));
            *(_QWORD *)v324 = v306;
            v327 = (uint64_t *)*((_QWORD *)this + 8);
            *(_QWORD *)(v324 + 8) = v327;
            *v327 = v324;
            v328 = *((_QWORD *)this + 9) + 1;
            *((_QWORD *)this + 8) = v324;
            *((_QWORD *)this + 9) = v328;
            v310[7] = v324;
            ++*((_DWORD *)this + 37);
            v552 = v316;
            goto LABEL_538;
          }
          v329 = (unint64_t *)&v323->__shared_owners_;
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
      }
    }
    ++*((_DWORD *)this + 38);
    v553 = 0;
    switch(*((_BYTE *)this + 276))
    {
      case 0:
      case 4:
        std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>((md::LabelMapTile **)&v565, (const QuadTile *)v308);
        v331 = v565;
        v565 = 0uLL;
        v554 = v331;
        goto LABEL_585;
      case 5:
        v344 = (std::__shared_weak_count *)operator new(0x220uLL);
        v344->__shared_owners_ = 0;
        v345 = (unint64_t *)&v344->__shared_owners_;
        v344->__shared_weak_owners_ = 0;
        v344->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2A0;
        v346 = (std::__shared_weak_count_vtbl *)&v344[1];
        md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v344[1], (const QuadTile *)v308);
        LODWORD(v344[21].__shared_weak_owners_) = 0;
        v344[22].__shared_owners_ = 0;
        v344[22].__vftable = 0;
        v344[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A2530;
        shared_owners = (std::__shared_weak_count *)v344[4].__shared_owners_;
        if (shared_owners)
        {
          if (shared_owners->__shared_owners_ != -1)
          {
LABEL_584:
            *(_QWORD *)&v355 = v344 + 1;
            *((_QWORD *)&v355 + 1) = v344;
            v554 = v355;
LABEL_585:
            v356 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 16))(*((_QWORD *)this + 10), 56, 8);
            v357 = v356;
            *(_QWORD *)v356 = 0;
            *(_QWORD *)(v356 + 8) = 0;
            *(_WORD *)(v356 + 16) = *(_WORD *)v308;
            *(_QWORD *)(v356 + 20) = *(_QWORD *)(v308 + 4);
            *(_OWORD *)(v356 + 40) = v554;
            v549 = v305;
            if (*((_QWORD *)&v554 + 1))
            {
              v358 = (unint64_t *)(*((_QWORD *)&v554 + 1) + 8);
              do
                v359 = __ldxr(v358);
              while (__stxr(v359 + 1, v358));
              *(_QWORD *)v356 = v306;
              v360 = (uint64_t *)*((_QWORD *)this + 8);
              *(_QWORD *)(v356 + 8) = v360;
              *v360 = v356;
              v361 = *((_QWORD *)this + 9) + 1;
              *((_QWORD *)this + 8) = v356;
              *((_QWORD *)this + 9) = v361;
              v362 = (unint64_t *)(*((_QWORD *)&v554 + 1) + 16);
              do
                v363 = __ldxr(v362);
              while (__stxr(v363 + 1, v362));
            }
            else
            {
              *(_QWORD *)v356 = v306;
              v364 = (uint64_t *)*((_QWORD *)this + 8);
              *(_QWORD *)(v356 + 8) = v364;
              *v364 = v356;
              v365 = *((_QWORD *)this + 9) + 1;
              *((_QWORD *)this + 8) = v356;
              *((_QWORD *)this + 9) = v365;
            }
            v366 = (_QWORD)v554 == 0;
            v367 = *v308;
            v368 = v308[1];
            v369 = (v368
                  - 0x61C8864680B583EBLL
                  + ((v367 - 0x61C8864680B583EBLL) << 6)
                  + ((unint64_t)(v367 - 0x61C8864680B583EBLL) >> 2)) ^ (v367 - 0x61C8864680B583EBLL);
            v370 = *((int *)v308 + 1);
            v371 = *((int *)v308 + 2);
            v372 = (v370 - 0x61C8864680B583EBLL + (v369 << 6) + (v369 >> 2)) ^ v369;
            v373 = (v371 - 0x61C8864680B583EBLL + (v372 << 6) + (v372 >> 2)) ^ v372;
            v374 = *((_QWORD *)this + 12);
            if (!v374)
              goto LABEL_617;
            v375 = (uint8x8_t)vcnt_s8((int8x8_t)v374);
            v375.i16[0] = vaddlv_u8(v375);
            if (v375.u32[0] > 1uLL)
            {
              v306 = (v371 - 0x61C8864680B583EBLL + (v372 << 6) + (v372 >> 2)) ^ v372;
              if (v373 >= v374)
                v306 = v373 % v374;
            }
            else
            {
              v306 = v373 & (v374 - 1);
            }
            v376 = *(uint64_t ***)(*v307 + 8 * v306);
            if (!v376 || (v377 = *v376) == 0)
            {
LABEL_617:
              v381 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15), 72, 8);
              *(_QWORD *)&v565 = v381;
              *((_QWORD *)&v565 + 1) = (char *)this + 120;
              *(_QWORD *)v381 = 0;
              *(_QWORD *)(v381 + 8) = v373;
              *(_WORD *)(v381 + 16) = *(_WORD *)v308;
              *(_QWORD *)(v381 + 20) = *(_QWORD *)(v308 + 4);
              *(_OWORD *)(v381 + 40) = v554;
              *(_QWORD *)(v381 + 56) = v357;
              *(_BYTE *)(v381 + 64) = v366;
              LOBYTE(v566) = 1;
              v382 = (float)(unint64_t)(*((_QWORD *)this + 16) + 1);
              v383 = *((float *)this + 34);
              v305 = v549;
              if (!v374 || (float)(v383 * (float)v374) < v382)
              {
                v384 = (v374 & (v374 - 1)) != 0;
                if (v374 < 3)
                  v384 = 1;
                v385 = v384 | (2 * v374);
                v386 = vcvtps_u32_f32(v382 / v383);
                if (v385 <= v386)
                  prime = v386;
                else
                  prime = v385;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                }
                v374 = *((_QWORD *)this + 12);
                if (prime > v374)
                {
LABEL_629:
                  v388 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), 8 * prime, 8);
                  v389 = *v307;
                  *v307 = v388;
                  if (v389)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v389, 8 * *((_QWORD *)this + 12));
                  v390 = 0;
                  *((_QWORD *)this + 12) = prime;
                  do
                    *(_QWORD *)(*v307 + 8 * v390++) = 0;
                  while (prime != v390);
                  v391 = (_QWORD *)*v540;
                  if (!*v540)
                    goto LABEL_652;
                  v392 = v391[1];
                  v393 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                  {
                    v394 = v392 & v393;
                    *(_QWORD *)(*v307 + 8 * v394) = v540;
                    for (i = (_QWORD *)*v391; *v391; i = (_QWORD *)*v391)
                    {
                      v396 = i[1] & v393;
                      if (v396 == v394)
                      {
                        v391 = i;
                      }
                      else if (*(_QWORD *)(*v307 + 8 * v396))
                      {
                        *v391 = *i;
                        v397 = 8 * v396;
                        *i = **(_QWORD **)(*v307 + v397);
                        **(_QWORD **)(*v307 + v397) = i;
                      }
                      else
                      {
                        *(_QWORD *)(*v307 + 8 * v396) = v391;
                        v391 = i;
                        v394 = v396;
                      }
                    }
                    goto LABEL_652;
                  }
                  if (v392 >= prime)
                    v392 %= prime;
                  *(_QWORD *)(*v307 + 8 * v392) = v540;
                  v401 = (_QWORD *)*v391;
                  if (!*v391)
                  {
LABEL_652:
                    v374 = prime;
                    goto LABEL_653;
                  }
                  while (2)
                  {
                    v403 = v401[1];
                    if (v403 >= prime)
                      v403 %= prime;
                    if (v403 != v392)
                    {
                      if (!*(_QWORD *)(*v307 + 8 * v403))
                      {
                        *(_QWORD *)(*v307 + 8 * v403) = v391;
LABEL_657:
                        v391 = v401;
                        v401 = (_QWORD *)*v401;
                        v392 = v403;
                        if (!v401)
                          goto LABEL_652;
                        continue;
                      }
                      *v391 = *v401;
                      v402 = 8 * v403;
                      *v401 = **(_QWORD **)(*v307 + v402);
                      **(_QWORD **)(*v307 + v402) = v401;
                      v401 = v391;
                    }
                    break;
                  }
                  v403 = v392;
                  goto LABEL_657;
                }
                if (prime < v374)
                {
                  v398 = vcvtps_u32_f32((float)*((unint64_t *)this + 16) / *((float *)this + 34));
                  if (v374 < 3
                    || (v399 = (uint8x8_t)vcnt_s8((int8x8_t)v374), v399.i16[0] = vaddlv_u8(v399), v399.u32[0] > 1uLL))
                  {
                    v398 = std::__next_prime(v398);
                  }
                  else
                  {
                    v400 = 1 << -(char)__clz(v398 - 1);
                    if (v398 >= 2)
                      v398 = v400;
                  }
                  if (prime <= v398)
                    prime = v398;
                  if (prime >= v374)
                  {
                    v374 = *((_QWORD *)this + 12);
                  }
                  else
                  {
                    if (prime)
                      goto LABEL_629;
                    v474 = *v307;
                    *v307 = 0;
                    if (v474)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v474, 8 * *((_QWORD *)this + 12));
                    v374 = 0;
                    *((_QWORD *)this + 12) = 0;
                  }
                }
LABEL_653:
                if ((v374 & (v374 - 1)) != 0)
                {
                  if (v373 >= v374)
                    v306 = v373 % v374;
                  else
                    v306 = v373;
                }
                else
                {
                  v306 = (v374 - 1) & v373;
                }
              }
              v404 = *(uint64_t **)(*v307 + 8 * v306);
              if (v404)
              {
                *(_QWORD *)v381 = *v404;
                v306 = (uint64_t)this + 56;
                goto LABEL_674;
              }
              *(_QWORD *)v381 = *v540;
              *v540 = v381;
              *(_QWORD *)(*v307 + 8 * v306) = v540;
              v306 = (uint64_t)this + 56;
              if (*(_QWORD *)v381)
              {
                v405 = *(_QWORD *)(*(_QWORD *)v381 + 8);
                if ((v374 & (v374 - 1)) != 0)
                {
                  if (v405 >= v374)
                    v405 %= v374;
                }
                else
                {
                  v405 &= v374 - 1;
                }
                v404 = (uint64_t *)(*v307 + 8 * v405);
LABEL_674:
                *v404 = v381;
              }
              ++*((_QWORD *)this + 16);
              goto LABEL_677;
            }
            if (v375.u32[0] < 2uLL)
            {
              while (1)
              {
                v379 = v377[1];
                if (v379 == v373)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v377 + 17), *((unsigned __int8 *)v377 + 16)) == __PAIR64__(v368, v367)
                    && *(uint64_t *)((char *)v377 + 20) == __PAIR64__(v371, v370))
                  {
                    goto LABEL_614;
                  }
                }
                else if ((v379 & (v374 - 1)) != v306)
                {
                  goto LABEL_617;
                }
                v377 = (uint64_t *)*v377;
                if (!v377)
                  goto LABEL_617;
              }
            }
            while (1)
            {
              v378 = v377[1];
              if (v378 == v373)
              {
                if (__PAIR64__(*((unsigned __int8 *)v377 + 17), *((unsigned __int8 *)v377 + 16)) == __PAIR64__(v368, v367)
                  && *(uint64_t *)((char *)v377 + 20) == __PAIR64__(v371, v370))
                {
LABEL_614:
                  v380 = (std::__shared_weak_count *)v377[6];
                  *(_OWORD *)(v377 + 5) = v554;
                  v306 = (uint64_t)this + 56;
                  if (v380)
                    std::__shared_weak_count::__release_weak(v380);
                  v377[7] = v357;
                  *((_BYTE *)v377 + 64) = v366;
                  v305 = v549;
LABEL_677:
                  while (1)
                  {
                    v406 = *((_QWORD *)this + 9);
                    if (v406 <= *((unsigned int *)this + 36))
                      break;
                    v407 = *(uint64_t **)v306;
                    v408 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)this + 11, (unsigned __int8 *)(*(_QWORD *)v306 + 16));
                    if (v408 && (uint64_t *)v408[7] == v407)
                    {
                      v408[7] = v306;
                      v407 = *(uint64_t **)v306;
                    }
                    v409 = *v407;
                    *(_QWORD *)(v409 + 8) = v407[1];
                    *(_QWORD *)v407[1] = v409;
                    *((_QWORD *)this + 9) = v406 - 1;
                    v410 = (std::__shared_weak_count *)v407[6];
                    if (v410)
                    {
                      v411 = (unint64_t *)&v410->__shared_owners_;
                      do
                        v412 = __ldaxr(v411);
                      while (__stlxr(v412 - 1, v411));
                      if (!v412)
                      {
                        ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                        std::__shared_weak_count::__release_weak(v410);
                      }
                    }
                    (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v407, 56);
                  }
                  v413 = *((_DWORD *)this + 40) + 1;
                  *((_DWORD *)this + 40) = v413;
                  if (v413 < 0x65)
                  {
                    v317 = (md::LabelMapTile *)v554;
                    goto LABEL_701;
                  }
                  *((_DWORD *)this + 40) = 0;
                  v414 = (uint64_t *)*((_QWORD *)this + 14);
                  if (v414)
                  {
                    v415 = 0;
                    do
                    {
                      while (1)
                      {
                        if (!*((_BYTE *)v414 + 64))
                        {
                          v416 = v414[6];
                          if (!v416 || *(_QWORD *)(v416 + 8) == -1)
                            break;
                        }
                        v414 = (uint64_t *)*v414;
                        ++v415;
                        if (!v414)
                          goto LABEL_756;
                      }
                      v417 = (uint64_t *)*v414;
                      std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v565, (_QWORD *)this + 11, v414);
                      v418 = v565;
                      if ((_QWORD)v565)
                      {
                        if (v566)
                        {
                          v419 = *(std::__shared_weak_count **)(v565 + 48);
                          if (v419)
                            std::__shared_weak_count::__release_weak(v419);
                        }
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(***((_QWORD ***)&v565 + 1) + 40))(**((_QWORD **)&v565 + 1), v418, 72);
                      }
                      v414 = v417;
                    }
                    while (v417);
                  }
                  else
                  {
                    v415 = 0;
                  }
LABEL_756:
                  *((_DWORD *)this + 39) = v415;
                  v317 = (md::LabelMapTile *)v554;
                  if (!(_QWORD)v554)
                  {
LABEL_829:
                    if (v553)
                      goto LABEL_830;
                    goto LABEL_836;
                  }
LABEL_702:
                  v420 = *((_QWORD *)this + 6);
                  v422 = *((_QWORD *)v308 + 25);
                  v421 = (std::__shared_weak_count *)*((_QWORD *)v308 + 26);
                  *(_QWORD *)&v557 = v317;
                  *((_QWORD *)&v557 + 1) = v422;
                  v558 = v421;
                  if (v421)
                  {
                    v423 = (unint64_t *)&v421->__shared_owners_;
                    do
                      v424 = __ldxr(v423);
                    while (__stxr(v424 + 1, v423));
                  }
                  v567 = 0;
                  v425 = (__int128 *)operator new(0x20uLL);
                  *(_QWORD *)v425 = &off_1E42D07D8;
                  *((_QWORD *)v425 + 1) = v317;
                  *((_QWORD *)v425 + 2) = v422;
                  *((_QWORD *)v425 + 3) = v421;
                  if (v421)
                  {
                    v426 = (unint64_t *)&v421->__shared_owners_;
                    do
                      v427 = __ldxr(v426);
                    while (__stxr(v427 + 1, v426));
                  }
                  v567 = v425;
                  md::LabelMapTile::queueCommand((uint64_t)v317, 3, &v565);
                  v428 = v567;
                  if (v567 == &v565)
                  {
                    v428 = &v565;
                    v429 = 4;
LABEL_712:
                    (*(void (**)(void))(*(_QWORD *)v428 + 8 * v429))();
                  }
                  else if (v567)
                  {
                    v429 = 5;
                    goto LABEL_712;
                  }
                  if (v421)
                  {
                    v430 = (unint64_t *)&v421->__shared_owners_;
                    do
                      v431 = __ldaxr(v430);
                    while (__stlxr(v431 - 1, v430));
                    if (!v431)
                    {
                      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                      std::__shared_weak_count::__release_weak(v421);
                    }
                  }
                  md::LabelMapTile::loadResourcesTile((uint64_t)v317, *((_QWORD *)v308 + 23), *((std::__shared_weak_count **)v308 + 24));
                  v432 = v308 + 24;
                  md::LabelMapTile::loadLabelTiles(v317, (const md::LabelTileSet *)(v308 + 24));
                  v557 = 0uLL;
                  if (!*(_BYTE *)(v420 + 3568) && !*(_BYTE *)(v420 + 3569))
                    goto LABEL_817;
                  if (!v308[216])
                    goto LABEL_817;
                  if (!*((_QWORD *)v308 + 28))
                    goto LABEL_817;
                  v433 = (std::mutex *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v420 + 168) + 64)
                                                                         + 40))(*(_QWORD *)(*(_QWORD *)(v420 + 168)
                                                                                            + 64));
                  v434 = v433;
                  if (!v433)
                    goto LABEL_817;
                  if (!*((_QWORD *)v308 + 32))
                  {
                    v532 = (const md::DynamicTrafficTileList *)*((_QWORD *)v308 + 28);
                    std::mutex::lock(v433);
                    v547 = (const QuadTile *)(v308 + 232);
                    v536 = v434;
                    v455 = v434;
                    sig = (uint64_t *)v434[1].__m_.__sig;
                    v456 = *(uint64_t **)v434[1].__m_.__opaque;
                    v457 = (uint64_t)&v455[1];
                    for (j = v305; sig != v456; sig += 2)
                    {
                      v464 = (std::__shared_weak_count *)sig[1];
                      if (v464)
                      {
                        v465 = std::__shared_weak_count::lock(v464);
                        *((_QWORD *)&v556 + 1) = v465;
                        if (v465)
                        {
                          v466 = v465;
                          v467 = *sig;
                          *(_QWORD *)&v556 = *sig;
                          if (*sig)
                          {
                            if (v547->_type == *(unsigned __int8 *)(v467 + 8)
                              && v308[233] == *(unsigned __int8 *)(v467 + 9)
                              && *((_DWORD *)v308 + 59) == *(_DWORD *)(v467 + 12)
                              && *((_DWORD *)v308 + 60) == *(_DWORD *)(v467 + 16))
                            {
                              if (*(_BYTE *)(v467 + 72))
                              {
                                v468 = *(_QWORD *)v532;
                                v469 = *((_QWORD *)v532 + 1);
                                if ((v469 - *(_QWORD *)v532) >> 4 == (uint64_t)(*(_QWORD *)(v467 + 88)
                                                                              - *(_QWORD *)(v467 + 80)) >> 3)
                                {
                                  v529 = v457;
                                  if (v469 == v468)
                                    goto LABEL_812;
                                  v470 = 0;
                                  v471 = 0;
                                  while (zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)(*(_QWORD *)(v468 + v470) + 144)) <= *(_QWORD *)(*(_QWORD *)(v467 + 80) + 8 * v471))
                                  {
                                    ++v471;
                                    v468 = *(_QWORD *)v532;
                                    v470 += 16;
                                    if (v471 >= (uint64_t)(*((_QWORD *)v532 + 1) - *(_QWORD *)v532) >> 4)
                                      goto LABEL_812;
                                  }
                                  v457 = v529;
                                }
                              }
                            }
                          }
                          v472 = (unint64_t *)&v466->__shared_owners_;
                          do
                            v473 = __ldaxr(v472);
                          while (__stlxr(v473 - 1, v472));
                          if (!v473)
                          {
                            ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                            std::__shared_weak_count::__release_weak(v466);
                          }
                        }
                      }
                    }
                    v459 = (std::__shared_weak_count *)operator new(0x100uLL);
                    v459->__shared_weak_owners_ = 0;
                    v459->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB710;
                    v459->__shared_owners_ = 0;
                    v460 = md::LabelTrafficTile::LabelTrafficTile((md::LabelTrafficTile *)&v459[1], v547, 0, 0, v532);
                    *(_QWORD *)&v556 = v460;
                    *((_QWORD *)&v556 + 1) = v459;
                    p_shared_weak_owners = (unint64_t *)&v459->__shared_weak_owners_;
                    *(_QWORD *)&v565 = v460;
                    *((_QWORD *)&v565 + 1) = v459;
                    do
                      v462 = __ldxr(p_shared_weak_owners);
                    while (__stxr(v462 + 1, p_shared_weak_owners));
                    v463 = *(md::LabelTrafficTile ***)v536[1].__m_.__opaque;
                    if ((unint64_t)v463 >= *(_QWORD *)&v536[1].__m_.__opaque[8])
                    {
                      v483 = std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(v457, (uint64_t)&v565);
                      v459 = (std::__shared_weak_count *)*((_QWORD *)&v565 + 1);
                      *(_QWORD *)v536[1].__m_.__opaque = v483;
                      if (v459)
                        goto LABEL_811;
                    }
                    else
                    {
                      if (v463)
                      {
                        *v463 = v460;
                        v463[1] = (md::LabelTrafficTile *)v459;
                        v565 = 0uLL;
                        v459 = 0;
                      }
                      *(_QWORD *)v536[1].__m_.__opaque = v463 + 2;
                      if (!v459)
                        goto LABEL_812;
LABEL_811:
                      std::__shared_weak_count::__release_weak(v459);
                    }
LABEL_812:
                    std::mutex::unlock(v536);
                    v484 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
                    v557 = v556;
                    v305 = j;
                    v306 = (uint64_t)this + 56;
                    if (v484)
                    {
                      v485 = (unint64_t *)&v484->__shared_owners_;
                      do
                        v486 = __ldaxr(v485);
                      while (__stlxr(v486 - 1, v485));
                      if (!v486)
                      {
                        ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
                        std::__shared_weak_count::__release_weak(v484);
                      }
                    }
                    goto LABEL_817;
                  }
                  if (*(_QWORD *)v432)
                  {
                    v435 = *(_QWORD *)(*(_QWORD *)v432 + 24);
                    v437 = *(geo::codec::VectorTile **)v435;
                    v436 = *(std::__shared_weak_count **)(v435 + 8);
                    if (v436)
                    {
                      v438 = (unint64_t *)&v436->__shared_owners_;
                      do
                        v439 = __ldxr(v438);
                      while (__stxr(v439 + 1, v438));
                      do
                        v440 = __ldaxr(v438);
                      while (__stlxr(v440 - 1, v438));
                      if (!v440)
                      {
                        ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                        std::__shared_weak_count::__release_weak(v436);
                      }
                    }
                    v441 = 0uLL;
                    if (v437 && *((_QWORD *)v308 + 32))
                    {
                      v528 = (zilch::TrafficSkeletonTile *)*((_QWORD *)v308 + 32);
                      v550 = v305;
                      v531 = (const md::DynamicTrafficTileList *)*((_QWORD *)v308 + 28);
                      std::mutex::lock(v434);
                      v546 = (const QuadTile *)(v308 + 232);
                      v535 = v434;
                      v442 = (uint64_t *)v434[1].__m_.__sig;
                      v526 = (uint64_t)&v434[1];
                      v443 = *(uint64_t **)v434[1].__m_.__opaque;
                      while (v442 != v443)
                      {
                        v444 = (std::__shared_weak_count *)v442[1];
                        if (v444)
                        {
                          v445 = std::__shared_weak_count::lock(v444);
                          *((_QWORD *)&v555 + 1) = v445;
                          if (v445)
                          {
                            v446 = v445;
                            v447 = *v442;
                            *(_QWORD *)&v555 = *v442;
                            if (*v442)
                            {
                              if (v546->_type == *(unsigned __int8 *)(v447 + 8)
                                && v308[233] == *(unsigned __int8 *)(v447 + 9)
                                && *((_DWORD *)v308 + 59) == *(_DWORD *)(v447 + 12)
                                && *((_DWORD *)v308 + 60) == *(_DWORD *)(v447 + 16)
                                && !*(_BYTE *)(v447 + 72))
                              {
                                v448 = *(_QWORD *)v531;
                                v449 = *((_QWORD *)v531 + 1);
                                if ((v449 - *(_QWORD *)v531) >> 4 == (uint64_t)(*(_QWORD *)(v447 + 88)
                                                                              - *(_QWORD *)(v447 + 80)) >> 3)
                                {
                                  v524 = v437;
                                  if (v449 == v448)
                                    goto LABEL_803;
                                  v450 = 0;
                                  v451 = 0;
                                  while (1)
                                  {
                                    v452 = v450;
                                    if (zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)(*(_QWORD *)(v448 + v450) + 144)) > *(_QWORD *)(*(_QWORD *)(v447 + 80) + 8 * v451))
                                      break;
                                    ++v451;
                                    v448 = *(_QWORD *)v531;
                                    v450 = v452 + 16;
                                    if (v451 >= (uint64_t)(*((_QWORD *)v531 + 1) - *(_QWORD *)v531) >> 4)
                                      goto LABEL_803;
                                  }
                                  v437 = v524;
                                }
                              }
                            }
                            v453 = (unint64_t *)&v446->__shared_owners_;
                            do
                              v454 = __ldaxr(v453);
                            while (__stlxr(v454 - 1, v453));
                            if (!v454)
                            {
                              ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                              std::__shared_weak_count::__release_weak(v446);
                            }
                          }
                        }
                        v442 += 2;
                      }
                      v475 = (std::__shared_weak_count *)operator new(0x100uLL);
                      v475->__shared_weak_owners_ = 0;
                      v475->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB710;
                      v475->__shared_owners_ = 0;
                      v476 = md::LabelTrafficTile::LabelTrafficTile((md::LabelTrafficTile *)&v475[1], v546, v437, v528, v531);
                      *(_QWORD *)&v555 = v476;
                      *((_QWORD *)&v555 + 1) = v475;
                      v477 = (unint64_t *)&v475->__shared_weak_owners_;
                      *(_QWORD *)&v565 = v476;
                      *((_QWORD *)&v565 + 1) = v475;
                      do
                        v478 = __ldxr(v477);
                      while (__stxr(v478 + 1, v477));
                      v479 = *(md::LabelTrafficTile ***)v535[1].__m_.__opaque;
                      if ((unint64_t)v479 >= *(_QWORD *)&v535[1].__m_.__opaque[8])
                      {
                        v499 = std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(v526, (uint64_t)&v565);
                        v475 = (std::__shared_weak_count *)*((_QWORD *)&v565 + 1);
                        *(_QWORD *)v535[1].__m_.__opaque = v499;
                        if (v475)
                          goto LABEL_802;
                      }
                      else
                      {
                        if (v479)
                        {
                          *v479 = v476;
                          v479[1] = (md::LabelTrafficTile *)v475;
                          v565 = 0uLL;
                          v475 = 0;
                        }
                        *(_QWORD *)v535[1].__m_.__opaque = v479 + 2;
                        if (v475)
LABEL_802:
                          std::__shared_weak_count::__release_weak(v475);
                      }
LABEL_803:
                      std::mutex::unlock(v535);
                      v441 = v555;
                      v306 = (uint64_t)this + 56;
                      v305 = v550;
                    }
                  }
                  else
                  {
                    v441 = 0uLL;
                  }
                  v480 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
                  v557 = v441;
                  if (v480)
                  {
                    v481 = (unint64_t *)&v480->__shared_owners_;
                    do
                      v482 = __ldaxr(v481);
                    while (__stlxr(v482 - 1, v481));
                    if (!v482)
                    {
                      ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
                      std::__shared_weak_count::__release_weak(v480);
                    }
                  }
LABEL_817:
                  md::LabelMapTile::loadTrafficTile((uint64_t)v317, v557, *((std::__shared_weak_count **)&v557 + 1));
                  v487 = (std::__shared_weak_count *)*((_QWORD *)&v557 + 1);
                  if (*((_QWORD *)&v557 + 1))
                  {
                    v488 = (unint64_t *)(*((_QWORD *)&v557 + 1) + 8);
                    do
                      v489 = __ldaxr(v488);
                    while (__stlxr(v489 - 1, v488));
                    if (!v489)
                    {
                      ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
                      std::__shared_weak_count::__release_weak(v487);
                    }
                  }
                  v565 = v554;
                  if (*((_QWORD *)&v554 + 1))
                  {
                    v490 = (unint64_t *)(*((_QWORD *)&v554 + 1) + 8);
                    do
                      v491 = __ldxr(v490);
                    while (__stxr(v491 + 1, v490));
                  }
                  std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>((unint64_t)this + 168, v554, (uint64_t)&v565);
                  v492 = (std::__shared_weak_count *)*((_QWORD *)&v565 + 1);
                  if (!*((_QWORD *)&v565 + 1))
                    goto LABEL_829;
                  v493 = (unint64_t *)(*((_QWORD *)&v565 + 1) + 8);
                  do
                    v494 = __ldaxr(v493);
                  while (__stlxr(v494 - 1, v493));
                  if (v494)
                    goto LABEL_829;
                  ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                  std::__shared_weak_count::__release_weak(v492);
                  if (v553)
                  {
LABEL_830:
                    if (v552)
                    {
                      v495 = (unint64_t *)&v552->__shared_owners_;
                      do
                        v496 = __ldaxr(v495);
                      while (__stlxr(v496 - 1, v495));
                      if (!v496)
                      {
                        ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                        std::__shared_weak_count::__release_weak(v552);
                      }
                    }
                  }
LABEL_836:
                  if (*((_QWORD *)&v554 + 1))
                  {
                    v497 = (unint64_t *)(*((_QWORD *)&v554 + 1) + 8);
                    do
                      v498 = __ldaxr(v497);
                    while (__stlxr(v498 - 1, v497));
                    if (!v498)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v554 + 1) + 16))(*((_QWORD *)&v554 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v554 + 1));
                    }
                  }
                  v305 = (_QWORD *)*v305;
                  if (!v305)
                    goto LABEL_843;
                  goto LABEL_530;
                }
              }
              else
              {
                if (v378 >= v374)
                  v378 %= v374;
                if (v378 != v306)
                  goto LABEL_617;
              }
              v377 = (uint64_t *)*v377;
              if (!v377)
                goto LABEL_617;
            }
          }
          do
            v348 = __ldxr(v345);
          while (__stxr(v348 + 1, v345));
          v349 = (unint64_t *)&v344->__shared_weak_owners_;
          do
            v350 = __ldxr(v349);
          while (__stxr(v350 + 1, v349));
          v344[4].__vftable = v346;
          v344[4].__shared_owners_ = (uint64_t)v344;
          std::__shared_weak_count::__release_weak(shared_owners);
        }
        else
        {
          do
            v351 = __ldxr(v345);
          while (__stxr(v351 + 1, v345));
          v352 = (unint64_t *)&v344->__shared_weak_owners_;
          do
            v353 = __ldxr(v352);
          while (__stxr(v353 + 1, v352));
          v344[4].__vftable = v346;
          v344[4].__shared_owners_ = (uint64_t)v344;
        }
        do
          v354 = __ldaxr(v345);
        while (__stlxr(v354 - 1, v345));
        if (!v354)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
        goto LABEL_584;
      case 6:
        v332 = (std::__shared_weak_count *)operator new(0x220uLL);
        v332->__shared_owners_ = 0;
        v333 = (unint64_t *)&v332->__shared_owners_;
        v332->__shared_weak_owners_ = 0;
        v332->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC0B0;
        v334 = (std::__shared_weak_count_vtbl *)&v332[1];
        md::LabelMapTile::LabelMapTile((md::LabelMapTile *)&v332[1], (const QuadTile *)v308);
        LODWORD(v332[21].__shared_weak_owners_) = 0;
        v332[22].__shared_owners_ = 0;
        v332[22].__vftable = 0;
        v332[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42970A0;
        v335 = (std::__shared_weak_count *)v332[4].__shared_owners_;
        if (v335)
        {
          if (v335->__shared_owners_ != -1)
          {
LABEL_570:
            *(_QWORD *)&v343 = v332 + 1;
            *((_QWORD *)&v343 + 1) = v332;
            v554 = v343;
            goto LABEL_585;
          }
          do
            v336 = __ldxr(v333);
          while (__stxr(v336 + 1, v333));
          v337 = (unint64_t *)&v332->__shared_weak_owners_;
          do
            v338 = __ldxr(v337);
          while (__stxr(v338 + 1, v337));
          v332[4].__vftable = v334;
          v332[4].__shared_owners_ = (uint64_t)v332;
          std::__shared_weak_count::__release_weak(v335);
        }
        else
        {
          do
            v339 = __ldxr(v333);
          while (__stxr(v339 + 1, v333));
          v340 = (unint64_t *)&v332->__shared_weak_owners_;
          do
            v341 = __ldxr(v340);
          while (__stxr(v341 + 1, v340));
          v332[4].__vftable = v334;
          v332[4].__shared_owners_ = (uint64_t)v332;
        }
        do
          v342 = __ldaxr(v333);
        while (__stlxr(v342 - 1, v333));
        if (!v342)
        {
          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
          std::__shared_weak_count::__release_weak(v332);
        }
        goto LABEL_570;
      default:
        goto LABEL_585;
    }
  }
LABEL_843:
  if (*((_QWORD *)this + 31))
  {
    v500 = (_QWORD *)*((_QWORD *)this + 30);
    if (v500)
    {
      do
      {
        v511 = (_QWORD *)*v500;
        v512 = v500[5];
        v500[5] = 0;
        if (v512)
          std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v512);
        operator delete(v500);
        v500 = v511;
      }
      while (v511);
    }
    *((_QWORD *)this + 30) = 0;
    v501 = *((_QWORD *)this + 29);
    if (v501)
    {
      for (k = 0; k != v501; ++k)
        *(_QWORD *)(*((_QWORD *)this + 28) + 8 * k) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  v503 = (void *)MEMORY[0x1A1AF555C]();
  md::LabelManager::layout(*((_QWORD *)this + 6), v519, (uint64_t)this + 168);
  objc_autoreleasePoolPop(v503);
  if (*((_QWORD *)this + 41))
  {
    v504 = (_QWORD *)*((_QWORD *)this + 40);
    if (v504)
    {
      do
      {
        v505 = (_QWORD *)*v504;
        operator delete(v504);
        v504 = v505;
      }
      while (v505);
    }
    *((_QWORD *)this + 40) = 0;
    v506 = *((_QWORD *)this + 39);
    if (v506)
    {
      for (m = 0; m != v506; ++m)
        *(_QWORD *)(*((_QWORD *)this + 38) + 8 * m) = 0;
    }
    *((_QWORD *)this + 41) = 0;
  }
  if (*((_QWORD *)this + 26))
  {
    v508 = (_QWORD *)*((_QWORD *)this + 24);
    while (v508)
    {
      v513 = v508;
      v508 = (_QWORD *)*v508;
      v514 = (std::__shared_weak_count *)v513[3];
      if (v514)
      {
        v515 = (unint64_t *)&v514->__shared_owners_;
        do
          v516 = __ldaxr(v515);
        while (__stlxr(v516 - 1, v515));
        if (!v516)
        {
          ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
          std::__shared_weak_count::__release_weak(v514);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), v513, 32);
    }
    *((_QWORD *)this + 24) = 0;
    v509 = *((_QWORD *)this + 22);
    if (v509)
    {
      for (n = 0; n != v509; ++n)
        *(_QWORD *)(*((_QWORD *)this + 21) + 8 * n) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
LABEL_12:
  if (!v564)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v564 + 48))(v564);
  v8 = v564;
  if (v564 == v563)
  {
    v9 = 4;
    v8 = v563;
  }
  else
  {
    if (!v564)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
}

void sub_19F211BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::mutex *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  std::__shared_weak_count *v43;

  v43 = *(std::__shared_weak_count **)(v41 - 136);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::mutex::unlock(a18);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::optional<std::shared_ptr<md::StandardLabelMapTile>>::~optional((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v41 - 176));
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= *(_QWORD *)&v2)
      v11 = v9 % *(_QWORD *)&v2;
  }
  else
  {
    v11 = v9 & (*(_QWORD *)&v2 - 1);
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v16 = result[1];
        if (v9 == v16)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v15 = result[1];
      if (v9 == v15)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v2)
          v15 %= *(_QWORD *)&v2;
        if (v15 != v11)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= *(_QWORD *)&v2)
      v11 = v9 % *(_QWORD *)&v2;
  }
  else
  {
    v11 = v9 & (*(_QWORD *)&v2 - 1);
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v16 = result[1];
        if (v16 == v9)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v15 = result[1];
      if (v15 == v9)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v2)
          v15 %= *(_QWORD *)&v2;
        if (v15 != v11)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v5 = result;
  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 32, 8);
  v15 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_OWORD *)(result + 16) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v17 = *(float *)(v5 + 48);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    if (v21 == 1)
    {
      v21 = 2;
    }
    else if ((v21 & (v21 - 1)) != 0)
    {
      result = std::__next_prime(v21);
      v21 = result;
    }
    v22 = *(int8x8_t *)(v5 + 8);
    if (v21 > *(_QWORD *)&v22)
      goto LABEL_34;
    if (v21 < *(_QWORD *)&v22)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(_QWORD *)&v22 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v22), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v24 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v24;
      }
      if (v21 <= result)
        v21 = result;
      if (v21 < *(_QWORD *)&v22)
LABEL_34:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v21);
    }
    v9 = *(_QWORD *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v15 = *v25;
LABEL_58:
    *v25 = v15;
    goto LABEL_59;
  }
  *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v15;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v15)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (unint64_t *)(*(_QWORD *)v5 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19F212448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::queueCommand(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;

  v6 = a1 + 376;
  v7 = *(__int128 **)(a1 + 376);
  v8 = *(__int128 **)(a1 + 384);
  if (v7 == v8)
  {
    v8 = *(__int128 **)(a1 + 376);
LABEL_6:
    v9 = v7;
    goto LABEL_19;
  }
  while (**(unsigned __int8 **)v7 != a2)
  {
    if (++v7 == v8)
    {
      v9 = *(__int128 **)(a1 + 384);
      goto LABEL_19;
    }
  }
  if (v7 == v8)
    goto LABEL_6;
  v10 = (unsigned __int8 **)(v7 + 1);
  if (v7 + 1 == v8)
    goto LABEL_6;
  v9 = v7;
  do
  {
    v11 = v10;
    v12 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
    if (*v12 != a2)
    {
      v13 = (unsigned __int8 *)*((_QWORD *)v7 + 3);
      *v11 = 0;
      v11[1] = 0;
      v14 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v12;
      *((_QWORD *)v9 + 1) = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++v9;
    }
    v10 = v11 + 2;
    v7 = (__int128 *)v11;
  }
  while (v11 + 2 != (unsigned __int8 **)v8);
  v8 = *(__int128 **)(a1 + 384);
LABEL_19:
  std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(v6, v9, v8);
  v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC1C8;
  LOBYTE(v17[1].__vftable) = a2;
  v18 = a3[3];
  if (!v18)
  {
LABEL_22:
    v17[2].__shared_owners_ = v18;
    goto LABEL_24;
  }
  if ((_QWORD *)v18 != a3)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    goto LABEL_22;
  }
  v17[2].__shared_owners_ = (uint64_t)&v17[1].__shared_owners_;
  (*(void (**)(_QWORD *))(*a3 + 24))(a3);
LABEL_24:
  *(_QWORD *)&v40 = v17 + 1;
  *((_QWORD *)&v40 + 1) = v17;
  v19 = *(_QWORD **)(a1 + 384);
  v20 = *(_QWORD *)(a1 + 392);
  if ((unint64_t)v19 < v20)
  {
    if (v19)
    {
      *v19 = v17 + 1;
      v19[1] = v17;
      v17 = 0;
    }
    *(_QWORD *)(a1 + 384) = v19 + 2;
    if (!v17)
      return;
LABEL_53:
    v38 = (unint64_t *)&v17->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    return;
  }
  v21 = *(_QWORD *)(a1 + 376);
  v22 = ((uint64_t)v19 - v21) >> 4;
  v23 = v22 + 1;
  if ((unint64_t)(v22 + 1) >> 60)
    abort();
  v24 = v20 - v21;
  if (v24 >> 3 > v23)
    v23 = v24 >> 3;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
    v25 = 0xFFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400), 16 * v25, 8);
    v27 = (_OWORD *)(v26 + 16 * v22);
    v28 = v26 + 16 * v25;
    if (v26)
    {
      *v27 = v40;
      v40 = 0uLL;
    }
  }
  else
  {
    v28 = 0;
    v27 = (_OWORD *)(16 * v22);
  }
  v29 = v27 + 1;
  v30 = *(_QWORD **)(a1 + 376);
  v31 = *(_QWORD **)(a1 + 384);
  if (v31 == v30)
  {
    *(_QWORD *)(a1 + 376) = v27;
    *(_QWORD *)(a1 + 384) = v29;
    v34 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v28;
  }
  else
  {
    do
    {
      v32 = *((_OWORD *)v31 - 1);
      v31 -= 2;
      *--v27 = v32;
      *v31 = 0;
      v31[1] = 0;
    }
    while (v31 != v30);
    v31 = *(_QWORD **)(a1 + 376);
    v33 = *(_QWORD **)(a1 + 384);
    *(_QWORD *)(a1 + 376) = v27;
    *(_QWORD *)(a1 + 384) = v29;
    v34 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v28;
    while (v33 != v31)
    {
      v35 = (std::__shared_weak_count *)*(v33 - 1);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v33 -= 2;
    }
  }
  if (v31)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 400) + 40))(*(_QWORD *)(a1 + 400), v31, v34 - (_QWORD)v31);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  *(_QWORD *)(a1 + 384) = v29;
  if (*((_QWORD *)&v40 + 1))
    goto LABEL_53;
}

void sub_19F21278C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19F2127A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(__int128 **)(a1 + 8);
    if (a3 != v6)
    {
      do
      {
        v7 = *v5;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 1);
        *v3 = v7;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        ++v5;
        ++v3;
      }
      while (v5 != v6);
      v5 = *(__int128 **)(a1 + 8);
    }
    while (v5 != v3)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      --v5;
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

void md::LabelMapTile::loadResourcesTile(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v18 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E42CA7F0;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v18 = v8;
  md::LabelMapTile::queueCommand(a1, 0, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
LABEL_13:
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19F2129E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::loadTrafficTile(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v18 = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E42CA7A8;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v18 = v8;
  md::LabelMapTile::queueCommand(a1, 2, v17);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
LABEL_12:
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_19F212B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::loadLabelTiles(md::LabelMapTile *this, const md::LabelTileSet *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v66[20];
  _QWORD v67[3];
  _QWORD *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 1);
  v66[0] = *(_QWORD *)a2;
  v64 = v66[0];
  v66[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *((_QWORD *)a2 + 3);
  v63 = *((_QWORD *)a2 + 2);
  v66[2] = v63;
  v66[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *((_QWORD *)a2 + 5);
  v62 = *((_QWORD *)a2 + 4);
  v66[4] = v62;
  v66[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *((_QWORD *)a2 + 7);
  v61 = *((_QWORD *)a2 + 6);
  v66[6] = v61;
  v66[7] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *((_QWORD *)a2 + 9);
  v60 = *((_QWORD *)a2 + 8);
  v66[8] = v60;
  v66[9] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *((_QWORD *)a2 + 11);
  v59 = *((_QWORD *)a2 + 10);
  v66[10] = v59;
  v66[11] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *((_QWORD *)a2 + 13);
  v58 = *((_QWORD *)a2 + 12);
  v66[12] = v58;
  v66[13] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *((_QWORD *)a2 + 15);
  v57 = *((_QWORD *)a2 + 14);
  v66[14] = v57;
  v66[15] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *((_QWORD *)a2 + 17);
  v56 = *((_QWORD *)a2 + 16);
  v66[16] = v56;
  v66[17] = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *((_QWORD *)a2 + 19);
  v55 = *((_QWORD *)a2 + 18);
  v66[18] = v55;
  v66[19] = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v68 = 0;
  v32 = operator new(0xB0uLL);
  *v32 = &off_1E42CA760;
  v32[1] = this;
  v32[2] = v64;
  v32[3] = v2;
  if (v2)
  {
    v33 = (unint64_t *)(v2 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v32[4] = v63;
  v32[5] = v5;
  if (v5)
  {
    v35 = (unint64_t *)(v5 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v32[6] = v62;
  v32[7] = v8;
  if (v8)
  {
    v37 = (unint64_t *)(v8 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v32[8] = v61;
  v32[9] = v11;
  if (v11)
  {
    v39 = (unint64_t *)(v11 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v32[10] = v60;
  v32[11] = v14;
  if (v14)
  {
    v41 = (unint64_t *)(v14 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v32[12] = v59;
  v32[13] = v17;
  if (v17)
  {
    v43 = (unint64_t *)(v17 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v32[14] = v58;
  v32[15] = v20;
  if (v20)
  {
    v45 = (unint64_t *)(v20 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v32[16] = v57;
  v32[17] = v23;
  if (v23)
  {
    v47 = (unint64_t *)(v23 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v32[18] = v56;
  v32[19] = v26;
  if (v26)
  {
    v49 = (unint64_t *)(v26 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v32[20] = v55;
  v32[21] = v29;
  if (v29)
  {
    v51 = (unint64_t *)(v29 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v68 = v32;
  md::LabelMapTile::queueCommand((uint64_t)this, 1, v67);
  v53 = v68;
  if (v68 == v67)
  {
    v54 = 4;
    v53 = v67;
    goto LABEL_65;
  }
  if (v68)
  {
    v54 = 5;
LABEL_65:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)v66);
}

void sub_19F212F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,md::LabelTileSet *a21)
{
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;

  v24 = *(_QWORD **)(v22 - 104);
  if (v24 == v21)
  {
    v25 = 4;
    v24 = (_QWORD *)(v22 - 128);
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:
  md::LabelTileSet::~LabelTileSet(a21);
  _Unwind_Resume(a1);
}

void md::DrapingLogic::_drapeKeyPair(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint8_t **a4, uint64_t *a5, uint64_t a6, uint64_t a7, const md::LayoutContext *a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint8_t *v22;
  uint8_t *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  uint8_t *v28;
  uint8_t *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  double v44;
  double v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  double v48;
  unint64_t *v49;
  unint64_t v50;
  float v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int8x8_t *v55;
  uint64_t *v56;
  uint64_t v57;
  int8x8_t v58;
  uint8x8_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *size;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  __n128 v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int v101;
  char *v102;
  unint64_t v103;
  char *v104;
  _DWORD *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _DWORD *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::string *v134;
  std::string *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  NSObject *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::string *v159;
  std::string *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  int8x8_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  _BYTE *v176;
  _BYTE *v177;
  uint64_t v178;
  char *v179;
  size_t v180;
  _BYTE *v181;
  _BYTE *v182;
  int64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  const void *(__cdecl **p_get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v190;
  __int128 v191;
  int on_zero_shared_weak_high;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  std::__shared_weak_count_vtbl *v196;
  unint64_t v197;
  _QWORD *v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  const md::LayoutContext *v210;
  unint64_t shared_owners;
  char *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  unsigned int *v219;
  unint64_t v220;
  uint64_t v221;
  _OWORD *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  unsigned int v226;
  char *v227;
  NSObject *v228;
  int v229;
  __int128 *v230;
  __int128 *v231;
  std::string *p_p;
  int v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  _QWORD *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  __int128 v270;
  BOOL v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t *v277;
  _QWORD *v278;
  char *v280;
  char *v281;
  uint64_t *v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  unint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  unint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  __int128 v334;
  char *v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v345;
  uint64_t *v346;
  BOOL v347;
  unint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  BOOL v356;
  unint64_t v357;
  unint64_t v358;
  BOOL v360;
  char *v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  __int128 v376;
  __int128 v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  char *v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  char *v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  size_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t *v419;
  unint64_t v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  unint64_t *v424;
  unint64_t v425;
  char *v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  std::__shared_weak_count *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  uint8x8_t v443;
  uint64_t *v444;
  uint64_t *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  char *v460;
  char *v461;
  char *v462;
  unint64_t v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  char *v468;
  uint64_t v469;
  __int128 v470;
  void **v471;
  unsigned __int8 *v472;
  unint64_t v473;
  uint64_t v474;
  unsigned __int8 *v475;
  float v476;
  float v477;
  _BOOL8 v478;
  unint64_t v479;
  unint64_t v480;
  size_t prime;
  void *v482;
  void *v483;
  uint64_t v484;
  _QWORD *v485;
  size_t v486;
  size_t v487;
  size_t v488;
  _QWORD *v489;
  size_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint8x8_t v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  size_t v498;
  uint64_t v499;
  void *v500;
  uint64_t v501;
  _QWORD *v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  int v516;
  unint64_t v517;
  uint8x8_t v518;
  void **v519;
  unsigned __int8 *v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  _QWORD *v527;
  float v528;
  float v529;
  _BOOL8 v530;
  unint64_t v531;
  unint64_t v532;
  size_t v533;
  void *v534;
  void *v535;
  uint64_t v536;
  _QWORD *v537;
  size_t v538;
  size_t v539;
  size_t v540;
  _QWORD *v541;
  size_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint8x8_t v546;
  uint64_t v547;
  _QWORD *v548;
  uint64_t v549;
  size_t v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  _QWORD *v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  __int128 v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  uint8_t *v571;
  uint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  char *v578;
  char *v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  void *v586;
  std::string::size_type v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  uint64_t *v591;
  _QWORD *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  std::__shared_weak_count *v604;
  std::__shared_weak_count *v605;
  unsigned __int8 *v607;
  void *v608;
  uint64_t *v609;
  uint64_t *v610;
  char *v611;
  char *v612;
  char *v613;
  char *v614;
  char *v615;
  uint64_t v616;
  char *v618;
  _QWORD *v619;
  std::__shared_weak_count *v620;
  uint64_t v621;
  __int16 v622[2];
  uint64_t v623;
  __int16 v624[2];
  uint64_t v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int16 v629;
  uint64_t v630;
  __int16 v631;
  uint64_t v632;
  float v633;
  __int128 v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  __int16 v639[2];
  uint64_t v640;
  std::string __p;
  __int16 v642[2];
  uint64_t v643;
  __int128 v644;
  char *v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  std::string v648;
  char *v649;
  std::__shared_weak_count *v650;
  int v651;
  __int128 v652;
  _QWORD v653[3];
  _QWORD *v654;
  uint8_t buf[24];
  uint8_t *v656;
  _BYTE v657[24];
  __int128 v658;
  uint64_t v659;
  std::__shared_weak_count *v660;
  uint64_t v661;
  char v662;
  uint64_t v663;

  v14 = a1;
  v663 = *MEMORY[0x1E0C80C00];
  v608 = *(void **)(a6 + 168);
  v15 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>((_QWORD *)(*(_QWORD *)(a1 + 168) + 8), a2);
  v607 = a3;
  if (!v15
    || (v16 = std::__hash_table<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,std::__unordered_map_hasher<md::OverlayKey,std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,md::OverlayKeyHash,std::equal_to<md::OverlayKey>,true>,std::__unordered_map_equal<md::OverlayKey,std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,std::equal_to<md::OverlayKey>,md::OverlayKeyHash,true>,std::allocator<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>>>::find<md::OverlayKey>(v15 + 6, a3)) == 0)
  {
    v601 = a6;
    v26 = (char *)operator new(0xA0uLL);
    v27 = (std::__shared_weak_count *)v26;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *(_QWORD *)v26 = &off_1E42DB320;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 136) = 0u;
    *((_QWORD *)v26 + 19) = 0;
    v603 = v26 + 24;
    v649 = v26 + 24;
    v650 = (std::__shared_weak_count *)v26;
    v28 = *a4;
    v29 = a4[1];
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 16);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (std::__shared_weak_count *)*((_QWORD *)v26 + 7);
      v27[2].__vftable = (std::__shared_weak_count_vtbl *)v28;
      v27[2].__shared_owners_ = (uint64_t)v29;
      if (v32)
        std::__shared_weak_count::__release_weak(v32);
      v34 = *a5;
      v33 = a5[1];
      if (!v33)
      {
LABEL_32:
        v43 = (std::__shared_weak_count *)v27[3].__vftable;
        v27[2].__shared_weak_owners_ = v34;
        v27[3].__vftable = (std::__shared_weak_count_vtbl *)v33;
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        v44 = *(double *)(a7 + 1368) * (float)(1.0 / (float)(1 << a3[1]));
        v45 = *(double *)(a7 + 3768) * *(double *)(a7 + 1384);
        v600 = *(_QWORD *)(v14 + 176);
        v605 = *(std::__shared_weak_count **)(v14 + 184);
        if (v605)
        {
          p_shared_weak_owners = (unint64_t *)&v605->__shared_weak_owners_;
          do
            v47 = __ldxr(p_shared_weak_owners);
          while (__stxr(v47 + 1, p_shared_weak_owners));
        }
        v599 = *(_QWORD *)(v14 + 192);
        v48 = v45 / v44;
        v604 = *(std::__shared_weak_count **)(v14 + 200);
        if (v604)
        {
          v49 = (unint64_t *)&v604->__shared_weak_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = v48;
        v52 = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        memset(&v648, 0, sizeof(v648));
        v620 = v27;
        v616 = v14;
        if (a3[40])
        {
          if (!*(_BYTE *)(v14 + 224))
          {
            std::__throw_bad_optional_access[abi:nn180100]();
            __break(1u);
            return;
          }
          v54 = *(_QWORD *)(v14 + 216);
          v55 = md::ElevatedStrokeTileData::groupContainingFeature(*(int8x8_t **)(*a5 + 752), *(int8x8_t **)(*a5 + 760), v54);
          v56 = (uint64_t *)v55;
          v57 = *((_QWORD *)a8 + 92);
          v58 = v55[16];
          if (!*(_QWORD *)&v58)
            goto LABEL_71;
          v59 = (uint8x8_t)vcnt_s8(v58);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            v60 = v54;
            if (*(_QWORD *)&v58 <= v54)
              v60 = v54 % *(_QWORD *)&v58;
          }
          else
          {
            v60 = (*(_QWORD *)&v58 - 1) & v54;
          }
          v72 = *(uint64_t ***)(*(_QWORD *)&v55[15] + 8 * v60);
          if (!v72 || (v73 = *v72) == 0)
          {
LABEL_71:
            memset(buf, 0, sizeof(buf));
            goto LABEL_72;
          }
          if (v59.u32[0] < 2uLL)
          {
            v74 = *(_QWORD *)&v58 - 1;
            while (1)
            {
              v76 = v73[1];
              if (v76 == v54)
              {
                if (v73[2] == v54)
                  goto LABEL_220;
              }
              else if ((v76 & v74) != v60)
              {
                goto LABEL_71;
              }
              v73 = (uint64_t *)*v73;
              if (!v73)
                goto LABEL_71;
            }
          }
          while (1)
          {
            v75 = v73[1];
            if (v75 == v54)
              break;
            if (v75 >= *(_QWORD *)&v58)
              v75 %= *(_QWORD *)&v58;
            if (v75 != v60)
              goto LABEL_71;
LABEL_61:
            v73 = (uint64_t *)*v73;
            if (!v73)
              goto LABEL_71;
          }
          if (v73[2] != v54)
            goto LABEL_61;
LABEL_220:
          v165 = v55[8];
          v166 = *((_DWORD *)v73 + 6);
          v167 = *((_DWORD *)v73 + 7);
          memset(buf, 0, sizeof(buf));
          if (v167 != v166)
          {
            v593 = v57;
            v595 = *(_QWORD *)&v165 + 88 * v166;
            v168 = *(_QWORD *)&v165 + 88 * v167;
            if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v168 - v595) >> 3)) >= 0x2E8BA2E8BA2E8BBLL)
              abort();
            v591 = (uint64_t *)v55;
            v610 = a5;
            v169 = (char *)operator new(v168 - v595);
            v170 = 0;
            *(_QWORD *)buf = v169;
            *(_QWORD *)&buf[8] = v169;
            *(_QWORD *)&buf[16] = &v169[8 * ((v168 - v595) >> 3)];
            do
            {
              v174 = v595 + v170;
              v175 = &v169[v170];
              *(_QWORD *)v175 = 0;
              *((_QWORD *)v175 + 1) = 0;
              *((_QWORD *)v175 + 2) = 0;
              v177 = *(_BYTE **)(v595 + v170);
              v176 = *(_BYTE **)(v595 + v170 + 8);
              v178 = v176 - v177;
              if (v176 != v177)
              {
                if (v178 < 0)
                  abort();
                v179 = (char *)operator new((size_t)&v176[-*(_QWORD *)v174]);
                *(_QWORD *)v175 = v179;
                *((_QWORD *)v175 + 1) = v179;
                *((_QWORD *)v175 + 2) = &v179[8 * (v178 >> 3)];
                v180 = v178 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v179, v177, v180);
                *((_QWORD *)v175 + 1) = &v179[v180];
              }
              *((_QWORD *)v175 + 3) = 0;
              *((_QWORD *)v175 + 4) = 0;
              *((_QWORD *)v175 + 5) = 0;
              v182 = *(_BYTE **)(v174 + 24);
              v181 = *(_BYTE **)(v174 + 32);
              v183 = v181 - v182;
              if (v181 != v182)
              {
                if (v183 < 0)
                  abort();
                v184 = (char *)operator new(v181 - v182);
                *((_QWORD *)v175 + 3) = v184;
                *((_QWORD *)v175 + 4) = v184;
                v185 = &v184[16 * (v183 >> 4)];
                *((_QWORD *)v175 + 5) = v185;
                memcpy(v184, v182, v183);
                *((_QWORD *)v175 + 4) = v185;
              }
              v171 = &v169[v170];
              v172 = *(_OWORD *)(v174 + 48);
              v173 = *(_OWORD *)(v174 + 64);
              *((_QWORD *)v171 + 10) = *(_QWORD *)(v174 + 80);
              *((_OWORD *)v171 + 3) = v172;
              *((_OWORD *)v171 + 4) = v173;
              v170 += 88;
            }
            while (v174 + 88 != v168);
            *(_QWORD *)&buf[8] = &v169[v170];
            a5 = v610;
            v14 = v616;
            v56 = v591;
            v57 = v593;
          }
LABEL_72:
          v77 = operator new(0xE8uLL);
          v77[1] = 0;
          v77[2] = 0;
          *v77 = &off_1E42E2278;
          v78 = ggl::BufferData::BufferData((uint64_t)(v77 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
          v77[28] = ggl::Tile::View::reflection(void)::reflection;
          v77[3] = &off_1E42B97B0;
          *(_QWORD *)&v644 = v78;
          *((_QWORD *)&v644 + 1) = v77;
          md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&__p);
          v651 = 1057360530;
          md::PolygonOverlayMeshBuilder::buildPolygonMeshesFromMeshInfos(&v652, (uint64_t **)buf, (_QWORD *)(v57 + 32), (uint64_t *)&v644, (uint64_t *)&__p, v56 + 4, &v651);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v80 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          if (*((_QWORD *)&v644 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v85 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            v86 = *(_QWORD *)&buf[8];
            v87 = *(void **)buf;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                v88 = *(void **)(v86 - 64);
                if (v88)
                {
                  *(_QWORD *)(v86 - 56) = v88;
                  operator delete(v88);
                }
                v89 = *(void **)(v86 - 88);
                if (v89)
                {
                  *(_QWORD *)(v86 - 80) = v89;
                  operator delete(v89);
                }
                v86 -= 88;
              }
              while (v86 != v85);
              v87 = *(void **)buf;
            }
            *(_QWORD *)&buf[8] = v85;
            operator delete(v87);
          }
          v90 = *a5;
          md::ElevatedStrokeGroup::selectedStyleQuery((md::ElevatedStrokeGroup *)&v646, v56);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = v652;
          if ((_QWORD)v652)
          {
            v91 = (_QWORD *)operator new();
            v92 = v652;
            *v91 = &off_1E42E7448;
            v91[1] = 0;
            v91[2] = 0;
            v91[3] = v92;
          }
          else
          {
            v91 = 0;
          }
          *(_QWORD *)&v652 = 0;
          *(_QWORD *)&buf[16] = v91;
          v656 = (uint8_t *)*((_QWORD *)&v652 + 1);
          if (*((_QWORD *)&v652 + 1))
          {
            v93 = (_QWORD *)operator new();
            v94 = *((_QWORD *)&v652 + 1);
            *v93 = &off_1E42E7BB8;
            v93[1] = 0;
            v93[2] = 0;
            v93[3] = v94;
          }
          else
          {
            v93 = 0;
          }
          *((_QWORD *)&v652 + 1) = 0;
          v95.n128_u32[1] = 0;
          v95.n128_u64[1] = 0;
          *(_OWORD *)&v657[8] = 0u;
          v658 = 0u;
          *(_QWORD *)v657 = v93;
          v659 = v646;
          v660 = v647;
          if (v647)
          {
            p_shared_owners = (unint64_t *)&v647->__shared_owners_;
            do
              v97 = __ldxr(p_shared_owners);
            while (__stxr(v97 + 1, p_shared_owners));
            v98 = v647;
            v661 = v90;
            v662 = 0;
            if (v647)
            {
              v99 = (unint64_t *)&v647->__shared_owners_;
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
          }
          else
          {
            v661 = v90;
            v662 = 0;
          }
          v95.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(v14 + 208) + 8);
          md::overlayComponents::VectorOverlay::drapingStyle((md::overlayComponents::VectorOverlay *)&v644, (const md::LayoutContext *)buf, v95, fmaxf(*(float *)(a7 + 3080) + *(float *)(a7 + 3076), 1.0), a8);
          std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>((void **)&v648.__r_.__value_.__l.__data_, (uint64_t)buf, &v644);
          v101 = -858993459 * (((unint64_t)v56 - *(_QWORD *)(*a5 + 752)) >> 5);
          v102 = v649;
          v104 = (char *)*((_QWORD *)v649 + 12);
          v103 = *((_QWORD *)v649 + 13);
          if ((unint64_t)v104 < v103)
          {
            *(_DWORD *)v104 = v101;
            v105 = v104 + 4;
            goto LABEL_128;
          }
          v106 = (char *)*((_QWORD *)v649 + 11);
          v107 = (v104 - v106) >> 2;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 62)
            abort();
          v109 = v103 - (_QWORD)v106;
          if (v109 >> 1 > v108)
            v108 = v109 >> 1;
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
            v110 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v110 = v108;
          if (v110)
          {
            if (!(v110 >> 62))
            {
              v111 = operator new(4 * v110);
              goto LABEL_119;
            }
LABEL_877:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v111 = 0;
LABEL_119:
          v112 = &v111[4 * v107];
          v113 = &v111[4 * v110];
          *v112 = v101;
          v105 = v112 + 1;
          if (v104 != v106)
          {
            v114 = v104 - v106 - 4;
            if (v114 < 0x2C)
              goto LABEL_893;
            if ((unint64_t)(v106 - v111) < 0x20)
              goto LABEL_893;
            v115 = (v114 >> 2) + 1;
            v116 = &v111[4 * v107 - 16];
            v117 = v104 - 16;
            v118 = v115 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v119 = *(_OWORD *)v117;
              *(v116 - 1) = *((_OWORD *)v117 - 1);
              *v116 = v119;
              v116 -= 2;
              v117 -= 32;
              v118 -= 8;
            }
            while (v118);
            v112 -= v115 & 0x7FFFFFFFFFFFFFF8;
            v104 -= 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
            if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_893:
              do
              {
                v120 = *((_DWORD *)v104 - 1);
                v104 -= 4;
                *--v112 = v120;
              }
              while (v104 != v106);
            }
          }
          *((_QWORD *)v102 + 11) = v112;
          *((_QWORD *)v102 + 12) = v105;
          *((_QWORD *)v102 + 13) = v113;
          if (v106)
            operator delete(v106);
LABEL_128:
          *((_QWORD *)v102 + 12) = v105;
          md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)buf);
          v121 = *((_QWORD *)&v652 + 1);
          *((_QWORD *)&v652 + 1) = 0;
          if (v121)
            (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
          v122 = v652;
          *(_QWORD *)&v652 = 0;
          if (v122)
          {
            v123 = *(std::__shared_weak_count **)(v122 + 72);
            if (v123)
            {
              v124 = (unint64_t *)&v123->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
            v126 = *(std::__shared_weak_count **)(v122 + 8);
            if (v126)
            {
              v127 = (unint64_t *)&v126->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            MEMORY[0x1A1AF4E00](v122, 0x1020C408635837CLL);
            v102 = v649;
          }
LABEL_274:
          *((_DWORD *)v102 + 14) = -252645135
                                 * ((v648.__r_.__value_.__l.__size_ - v648.__r_.__value_.__r.__words[0]) >> 3);
          if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
          v228 = (id)GEOGetVectorKitElevatedStrokesLog_log;
          if (os_log_type_enabled(v228, OS_LOG_TYPE_DEBUG))
          {
            v642[0] = *(_WORD *)v607;
            v643 = *(_QWORD *)(v607 + 4);
            md::debugString<geo::QuadTile>(&v644, v642);
            v229 = SHIBYTE(v645);
            v230 = (__int128 *)v644;
            v639[0] = *(_WORD *)a2;
            v640 = *(_QWORD *)(a2 + 4);
            md::debugString<geo::QuadTile>(&__p, v639);
            v231 = &v644;
            if (v229 < 0)
              v231 = v230;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v233 = *((_DWORD *)v102 + 14);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v231;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = p_p;
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v656) = v233;
            _os_log_impl(&dword_19F029000, v228, OS_LOG_TYPE_DEBUG, "Draping Overlay Tile %s onto Foundation Tile %s.  Mesh Count = %d", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v645) < 0)
                goto LABEL_538;
            }
            else
            {
              if ((SHIBYTE(v645) & 0x80000000) == 0)
                goto LABEL_284;
LABEL_538:
              operator delete((void *)v644);
            }
          }
LABEL_284:

          v234 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(a9);
          v235 = gdc::Registry::storage<md::overlayComponents::Overlayable>(a9);
          v236 = (_QWORD *)v235;
          v237 = 0;
          v238 = v235 + 32;
          v239 = (uint64_t *)v234[7];
          v240 = (uint64_t *)v234[8];
          if (*(_QWORD *)(v235 + 64) - *(_QWORD *)(v235 + 56) >= (unint64_t)((char *)v240 - (char *)v239))
            v241 = v234 + 4;
          else
            v241 = (_QWORD *)(v235 + 32);
          v242 = 0;
          if (v234 + 4 == v241)
          {
            v618 = 0;
            v243 = 0;
            v244 = 0;
            if (v239 != v240)
            {
              v237 = 0;
              v242 = 0;
              v618 = 0;
              v243 = 0;
              v244 = 0;
              v592 = v241;
              v594 = v235 + 32;
              do
              {
                v245 = *((unsigned int *)v239 + 1);
                v246 = v236[4];
                if (v245 >> 7 < (v236[5] - v246) >> 3)
                {
                  v247 = *(_QWORD *)(v246 + 8 * (v245 >> 7));
                  if (v247)
                  {
                    v248 = *(unsigned __int16 *)(v247 + 2 * (v245 & 0x7F));
                    v250 = v236[7];
                    v249 = v236[8];
                    if (v248 < (v249 - v250) >> 3)
                    {
                      v251 = v250 + 8 * v248;
                      if (v251 != v249 && *(_DWORD *)(v251 + 4) == (_DWORD)v245)
                      {
                        v253 = *v239;
                        ++v244;
                        if (v243 >= v618)
                        {
                          v254 = v243;
                          v255 = v243 - v237;
                          v256 = v255 >> 3;
                          v257 = (v255 >> 3) + 1;
                          if (v257 >> 61)
                            abort();
                          v611 = v237;
                          if ((v618 - v237) >> 2 > v257)
                            v257 = (v618 - v237) >> 2;
                          if ((unint64_t)(v618 - v237) >= 0x7FFFFFFFFFFFFFF8)
                            v258 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v258 = v257;
                          v596 = v244;
                          if (v258)
                          {
                            if (v258 >> 61)
                              goto LABEL_877;
                            v259 = v258;
                            v260 = (char *)operator new(8 * v258);
                            v258 = v259;
                          }
                          else
                          {
                            v260 = 0;
                          }
                          v237 = &v260[8 * v256];
                          *(_QWORD *)v237 = v253;
                          v261 = v237 + 8;
                          v262 = v611;
                          if (v254 == v611)
                          {
                            v242 = v237 + 8;
                          }
                          else
                          {
                            v263 = v254 - 8 - v611;
                            if (v263 < 0x168)
                            {
                              v264 = v254;
                              goto LABEL_319;
                            }
                            if (&v260[v255 - 8 - (v263 & 0xFFFFFFFFFFFFFFF8)] <= &v260[v255 - 8]
                              && &v254[-(v263 & 0xFFFFFFFFFFFFFFF8) - 8] <= v254 - 8
                              && (unint64_t)(v254 - &v260[v255]) >= 0x20)
                            {
                              v266 = (v263 >> 3) + 1;
                              v264 = &v254[-8 * (v266 & 0x3FFFFFFFFFFFFFFCLL)];
                              v267 = &v260[8 * v256 - 16];
                              v268 = v254 - 16;
                              v269 = v266 & 0x3FFFFFFFFFFFFFFCLL;
                              v262 = v611;
                              do
                              {
                                v270 = *(_OWORD *)v268;
                                *((_OWORD *)v267 - 1) = *((_OWORD *)v268 - 1);
                                *(_OWORD *)v267 = v270;
                                v267 -= 32;
                                v268 -= 32;
                                v269 -= 4;
                              }
                              while (v269);
                              v237 -= 8 * (v266 & 0x3FFFFFFFFFFFFFFCLL);
                              v242 = v261;
                              if (v266 != (v266 & 0x3FFFFFFFFFFFFFFCLL))
                                goto LABEL_320;
                            }
                            else
                            {
                              v264 = v254;
LABEL_319:
                              v262 = v611;
                              v242 = v237 + 8;
                              do
                              {
LABEL_320:
                                v265 = *((_QWORD *)v264 - 1);
                                v264 -= 8;
                                *((_QWORD *)v237 - 1) = v265;
                                v237 -= 8;
                              }
                              while (v264 != v262);
                            }
                          }
                          v618 = &v260[8 * v258];
                          if (v262)
                            operator delete(v262);
                          v243 = v242;
                          v238 = v594;
                          v244 = v596;
                          v241 = v592;
                          goto LABEL_291;
                        }
                        *(_QWORD *)v243 = v253;
                        v243 += 8;
                        v242 = v243;
                      }
                    }
                  }
                }
LABEL_291:
                ++v239;
              }
              while (v239 != v240);
            }
          }
          else
          {
            v618 = 0;
            v243 = 0;
            v244 = 0;
          }
          if ((_QWORD *)v238 != v241 || (v283 = (uint64_t *)v236[7], v282 = (uint64_t *)v236[8], v283 == v282))
          {
LABEL_330:
            if (*(_BYTE *)(v601 + 208))
              v271 = v244 == 0;
            else
              v271 = 0;
            if (!v271)
            {
LABEL_344:
              v644 = 0uLL;
              v645 = 0;
              v612 = v237;
              std::vector<md::Mesh>::reserve((uint64_t)&v644, (v242 - v237) >> 3);
              v280 = v649;
              std::vector<BOOL>::reserve((uint64_t)(v649 + 64), (v242 - v237) >> 3);
              v281 = v237;
              if (v237 != v242)
              {
                do
                {
                  v336 = *(_QWORD *)v281;
                  v337 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(a9);
                  v338 = v337[4];
                  if (v336 >> 39 < (v337[5] - v338) >> 3)
                  {
                    v339 = *(_QWORD *)(v338 + 8 * (v336 >> 39));
                    if (v339)
                    {
                      v340 = *(unsigned __int16 *)(v339 + 2 * (HIDWORD(v336) & 0x7F));
                      v342 = v337[7];
                      v341 = v337[8];
                      if (v340 < (v341 - v342) >> 3)
                      {
                        v343 = v342 + 8 * v340;
                        if (v343 != v341 && *(_DWORD *)(v343 + 4) == HIDWORD(v336))
                        {
                          v345 = v337[10];
                          v346 = (uint64_t *)(v345 + 112 * v340);
                          v347 = v346 == (uint64_t *)v337[11] || v345 == 0;
                          if (!v347 && *(_BYTE *)(*v346 + 32) == 3)
                          {
                            v348 = *(_QWORD *)v281;
                            v349 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(a9);
                            v350 = v349[4];
                            if (v348 >> 39 < (v349[5] - v350) >> 3
                              && (v351 = *(_QWORD *)(v350 + 8 * (v348 >> 39))) != 0
                              && (v352 = *(unsigned __int16 *)(v351 + 2 * (HIDWORD(v348) & 0x7F)),
                                  v354 = v349[7],
                                  v353 = v349[8],
                                  v352 < (v353 - v354) >> 3)
                              && ((v355 = v354 + 8 * v352, v355 != v353)
                                ? (v356 = *(_DWORD *)(v355 + 4) == HIDWORD(v348))
                                : (v356 = 0),
                                  v356))
                            {
                              v357 = v349[11];
                              v358 = v349[10] + v352;
                            }
                            else
                            {
                              v357 = v349[11];
                              v358 = v357;
                            }
                            v360 = v358 == v357 || v358 == 0;
                            v361 = v649;
                            v362 = *((_QWORD *)v649 + 9);
                            v363 = *((_QWORD *)v649 + 10);
                            if (v362 == v363 << 6)
                            {
                              if ((uint64_t)(v362 + 1) < 0)
                                abort();
                              if (v362 > 0x3FFFFFFFFFFFFFFELL)
                              {
                                v366 = 0x7FFFFFFFFFFFFFFFLL;
                              }
                              else
                              {
                                v364 = v363 << 7;
                                v365 = (v362 & 0xFFFFFFFFFFFFFFC0) + 64;
                                if (v364 <= v365)
                                  v366 = v365;
                                else
                                  v366 = v364;
                              }
                              std::vector<BOOL>::reserve((uint64_t)(v649 + 64), v366);
                              v362 = *((_QWORD *)v361 + 9);
                            }
                            *((_QWORD *)v361 + 9) = v362 + 1;
                            v367 = *((_QWORD *)v361 + 8);
                            v368 = v362 >> 6;
                            v369 = 1 << v362;
                            if (v360)
                              v370 = *(_QWORD *)(v367 + 8 * v368) & ~v369;
                            else
                              v370 = *(_QWORD *)(v367 + 8 * v368) | v369;
                            *(_QWORD *)(v367 + 8 * v368) = v370;
                            v371 = *v346;
                            v372 = *((_QWORD *)&v644 + 1);
                            if (*((_QWORD *)&v644 + 1) >= (unint64_t)v645)
                            {
                              v381 = v644;
                              v382 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v644 + 1) - v644) >> 4);
                              v383 = v382 + 1;
                              if (v382 + 1 > 0x333333333333333)
                                abort();
                              if (0x999999999999999ALL * ((uint64_t)&v645[-v644] >> 4) > v383)
                                v383 = 0x999999999999999ALL * ((uint64_t)&v645[-v644] >> 4);
                              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v645[-v644] >> 4) >= 0x199999999999999)
                                v384 = 0x333333333333333;
                              else
                                v384 = v383;
                              if (v384)
                              {
                                if (v384 > 0x333333333333333)
                                  goto LABEL_877;
                                v385 = (char *)operator new(80 * v384);
                              }
                              else
                              {
                                v385 = 0;
                              }
                              v386 = &v385[80 * v382];
                              *(_QWORD *)v386 = *(_QWORD *)v371;
                              v387 = *(_QWORD *)(v371 + 8);
                              *((_QWORD *)v386 + 1) = v387;
                              if (v387)
                              {
                                v388 = (unint64_t *)(v387 + 8);
                                do
                                  v389 = __ldxr(v388);
                                while (__stxr(v389 + 1, v388));
                              }
                              v390 = &v385[80 * v382];
                              v391 = *(_OWORD *)(v371 + 16);
                              v392 = *(_OWORD *)(v371 + 32);
                              *(_OWORD *)(v390 + 46) = *(_OWORD *)(v371 + 46);
                              *((_OWORD *)v390 + 1) = v391;
                              *((_OWORD *)v390 + 2) = v392;
                              *((_QWORD *)v390 + 8) = *(_QWORD *)(v371 + 64);
                              v393 = *(_QWORD *)(v371 + 72);
                              *((_QWORD *)v390 + 9) = v393;
                              if (v393)
                              {
                                v394 = (unint64_t *)(v393 + 8);
                                do
                                  v395 = __ldxr(v394);
                                while (__stxr(v395 + 1, v394));
                              }
                              v396 = &v385[80 * v384];
                              v335 = v386 + 80;
                              if (v372 == v381)
                              {
                                *(_QWORD *)&v644 = v386;
                                v645 = &v385[80 * v384];
                              }
                              else
                              {
                                do
                                {
                                  v397 = *(_OWORD *)(v372 - 80);
                                  v372 -= 80;
                                  *((_OWORD *)v386 - 5) = v397;
                                  v386 -= 80;
                                  *(_QWORD *)v372 = 0;
                                  *(_QWORD *)(v372 + 8) = 0;
                                  v398 = *(_OWORD *)(v372 + 16);
                                  v399 = *(_OWORD *)(v372 + 32);
                                  *(_OWORD *)(v386 + 46) = *(_OWORD *)(v372 + 46);
                                  *((_OWORD *)v386 + 1) = v398;
                                  *((_OWORD *)v386 + 2) = v399;
                                  *((_OWORD *)v386 + 4) = *(_OWORD *)(v372 + 64);
                                  *(_QWORD *)(v372 + 64) = 0;
                                  *(_QWORD *)(v372 + 72) = 0;
                                }
                                while (v372 != v381);
                                v400 = *((_QWORD *)&v644 + 1);
                                v372 = v644;
                                *(_QWORD *)&v644 = v386;
                                *((_QWORD *)&v644 + 1) = v335;
                                v645 = v396;
                                while (v400 != v372)
                                {
                                  v401 = *(std::__shared_weak_count **)(v400 - 8);
                                  if (v401)
                                  {
                                    v402 = (unint64_t *)&v401->__shared_owners_;
                                    do
                                      v403 = __ldaxr(v402);
                                    while (__stlxr(v403 - 1, v402));
                                    if (!v403)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                                      std::__shared_weak_count::__release_weak(v401);
                                    }
                                  }
                                  v404 = *(std::__shared_weak_count **)(v400 - 72);
                                  if (v404)
                                  {
                                    v405 = (unint64_t *)&v404->__shared_owners_;
                                    do
                                      v406 = __ldaxr(v405);
                                    while (__stlxr(v406 - 1, v405));
                                    if (!v406)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                                      std::__shared_weak_count::__release_weak(v404);
                                    }
                                  }
                                  v400 -= 80;
                                }
                              }
                              if (v372)
                                operator delete((void *)v372);
                            }
                            else
                            {
                              **((_QWORD **)&v644 + 1) = *(_QWORD *)v371;
                              v373 = *(_QWORD *)(v371 + 8);
                              *(_QWORD *)(v372 + 8) = v373;
                              if (v373)
                              {
                                v374 = (unint64_t *)(v373 + 8);
                                do
                                  v375 = __ldxr(v374);
                                while (__stxr(v375 + 1, v374));
                              }
                              v376 = *(_OWORD *)(v371 + 16);
                              v377 = *(_OWORD *)(v371 + 32);
                              *(_OWORD *)(v372 + 46) = *(_OWORD *)(v371 + 46);
                              *(_OWORD *)(v372 + 16) = v376;
                              *(_OWORD *)(v372 + 32) = v377;
                              *(_QWORD *)(v372 + 64) = *(_QWORD *)(v371 + 64);
                              v378 = *(_QWORD *)(v371 + 72);
                              *(_QWORD *)(v372 + 72) = v378;
                              if (v378)
                              {
                                v379 = (unint64_t *)(v378 + 8);
                                do
                                  v380 = __ldxr(v379);
                                while (__stxr(v380 + 1, v379));
                              }
                              v335 = (char *)(v372 + 80);
                            }
                            *((_QWORD *)&v644 + 1) = v335;
                          }
                        }
                      }
                    }
                  }
                  v281 += 8;
                }
                while (v281 != v242);
                v280 = v649;
              }
              v407 = *((_QWORD *)&v644 + 1);
              v408 = v644;
              v409 = *((_QWORD *)&v644 + 1) - v644;
              v410 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v644 + 1) - v644) >> 4);
              *((_DWORD *)v280 + 15) = v410;
              v411 = *(_QWORD *)(v616 + 168);
              *(_QWORD *)&v626 = v599;
              *((_QWORD *)&v626 + 1) = v604;
              if (v604)
              {
                v412 = (unint64_t *)&v604->__shared_weak_owners_;
                do
                  v413 = __ldxr(v412);
                while (__stxr(v413 + 1, v412));
              }
              v621 = v411;
              *(_QWORD *)&v627 = v600;
              *((_QWORD *)&v627 + 1) = v605;
              if (v605)
              {
                v414 = (unint64_t *)&v605->__shared_weak_owners_;
                do
                  v415 = __ldxr(v414);
                while (__stxr(v415 + 1, v414));
              }
              *(_QWORD *)&v628 = v603;
              *((_QWORD *)&v628 + 1) = v620;
              do
                v416 = __ldxr(v52);
              while (__stxr(v416 + 1, v52));
              v629 = *(_WORD *)a2;
              v630 = *(_QWORD *)(a2 + 4);
              v631 = *(_WORD *)v607;
              v632 = *(_QWORD *)(v607 + 4);
              v633 = v51;
              std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::vector(&v634, (uint64_t *)&v648);
              v636 = 0;
              v637 = 0;
              v638 = 0;
              if (v407 == v408)
              {
                v417 = 0;
              }
              else
              {
                if (v410 > 0x333333333333333)
                  abort();
                v417 = (uint64_t)operator new(v409);
                v636 = v417;
                v637 = v417;
                v638 = v417 + 80 * v410;
                do
                {
                  *(_QWORD *)v417 = *(_QWORD *)v408;
                  v418 = *(_QWORD *)(v408 + 8);
                  *(_QWORD *)(v417 + 8) = v418;
                  if (v418)
                  {
                    v419 = (unint64_t *)(v418 + 8);
                    do
                      v420 = __ldxr(v419);
                    while (__stxr(v420 + 1, v419));
                  }
                  v421 = *(_OWORD *)(v408 + 16);
                  v422 = *(_OWORD *)(v408 + 32);
                  *(_OWORD *)(v417 + 46) = *(_OWORD *)(v408 + 46);
                  *(_OWORD *)(v417 + 16) = v421;
                  *(_OWORD *)(v417 + 32) = v422;
                  *(_QWORD *)(v417 + 64) = *(_QWORD *)(v408 + 64);
                  v423 = *(_QWORD *)(v408 + 72);
                  *(_QWORD *)(v417 + 72) = v423;
                  if (v423)
                  {
                    v424 = (unint64_t *)(v423 + 8);
                    do
                      v425 = __ldxr(v424);
                    while (__stxr(v425 + 1, v424));
                  }
                  v408 += 80;
                  v417 += 80;
                }
                while (v408 != v407);
                v637 = v417;
              }
              v654 = 0;
              v426 = (char *)operator new(0xA0uLL);
              v427 = v627;
              *(_OWORD *)(v426 + 8) = v626;
              *(_QWORD *)v426 = &off_1E42C8FC0;
              v626 = 0uLL;
              *(_OWORD *)(v426 + 24) = v427;
              v627 = 0uLL;
              *(_OWORD *)(v426 + 40) = v628;
              v628 = 0uLL;
              *((_WORD *)v426 + 28) = v629;
              *(_QWORD *)(v426 + 60) = v630;
              *((_WORD *)v426 + 40) = v631;
              *(_QWORD *)(v426 + 84) = v632;
              *((float *)v426 + 26) = v633;
              *((_OWORD *)v426 + 7) = v634;
              v634 = 0uLL;
              v428 = v635;
              v429 = v636;
              v635 = 0;
              *((_QWORD *)v426 + 16) = v428;
              *((_QWORD *)v426 + 17) = v429;
              v430 = v638;
              *((_QWORD *)v426 + 18) = v417;
              *((_QWORD *)v426 + 19) = v430;
              v636 = 0;
              v637 = 0;
              v638 = 0;
              v654 = v426;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
              v431 = (std::__shared_weak_count *)*((_QWORD *)v280 + 4);
              v432 = v620;
              if (!v431)
                goto LABEL_833;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v431);
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_833;
              __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v280 + 3);
              if (!__p.__r_.__value_.__r.__words[0])
                goto LABEL_833;
              v433 = *a2;
              v434 = a2[1];
              v435 = (v434
                    + ((v433 - 0x61C8864680B583EBLL) << 6)
                    + ((unint64_t)(v433 - 0x61C8864680B583EBLL) >> 2)
                    - 0x61C8864680B583EBLL) ^ (v433 - 0x61C8864680B583EBLL);
              v436 = *((int *)a2 + 1);
              v437 = *((int *)a2 + 2);
              v438 = (v436 + (v435 << 6) + (v435 >> 2) - 0x61C8864680B583EBLL) ^ v435;
              v439 = (v437 + (v438 << 6) + (v438 >> 2) - 0x61C8864680B583EBLL) ^ v438;
              v440 = *((unsigned int *)a2 + 6);
              v441 = (v440 + (v439 << 6) + (v439 >> 2) - 0x61C8864680B583EBLL) ^ v439;
              v442 = *(_QWORD *)(v621 + 16);
              if (v442)
              {
                v443 = (uint8x8_t)vcnt_s8((int8x8_t)v442);
                v443.i16[0] = vaddlv_u8(v443);
                if (v443.u32[0] > 1uLL)
                {
                  v417 = (v440 + (v439 << 6) + (v439 >> 2) - 0x61C8864680B583EBLL) ^ v439;
                  if (v441 >= v442)
                    v417 = v441 % v442;
                }
                else
                {
                  v417 = v441 & (v442 - 1);
                }
                v471 = *(void ***)(*(_QWORD *)(v621 + 8) + 8 * v417);
                if (v471)
                {
                  v472 = (unsigned __int8 *)*v471;
                  if (*v471)
                  {
                    if (v443.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v474 = *((_QWORD *)v472 + 1);
                        if (v474 == v441)
                        {
                          if (__PAIR64__(v472[17], v472[16]) == __PAIR64__(v434, v433)
                            && *(_QWORD *)(v472 + 20) == __PAIR64__(v437, v436)
                            && *((_DWORD *)v472 + 10) == (_DWORD)v440)
                          {
                            goto LABEL_602;
                          }
                        }
                        else if ((v474 & (v442 - 1)) != v417)
                        {
                          goto LABEL_603;
                        }
                        v472 = *(unsigned __int8 **)v472;
                        if (!v472)
                          goto LABEL_603;
                      }
                    }
                    do
                    {
                      v473 = *((_QWORD *)v472 + 1);
                      if (v473 == v441)
                      {
                        if (__PAIR64__(v472[17], v472[16]) == __PAIR64__(v434, v433)
                          && *(_QWORD *)(v472 + 20) == __PAIR64__(v437, v436)
                          && *((_DWORD *)v472 + 10) == (_DWORD)v440)
                        {
LABEL_602:
                          v475 = v607;
                          goto LABEL_672;
                        }
                      }
                      else
                      {
                        if (v473 >= v442)
                          v473 %= v442;
                        if (v473 != v417)
                          break;
                      }
                      v472 = *(unsigned __int8 **)v472;
                    }
                    while (v472);
                  }
                }
              }
LABEL_603:
              v472 = (unsigned __int8 *)operator new(0x58uLL);
              *(_QWORD *)buf = v472;
              *(_QWORD *)&buf[8] = v621 + 24;
              v619 = (_QWORD *)(v621 + 24);
              *(_QWORD *)v472 = 0;
              *((_QWORD *)v472 + 1) = v441;
              v472[16] = v433;
              v472[17] = v434;
              *(_QWORD *)(v472 + 20) = *(_QWORD *)(a2 + 4);
              *((_DWORD *)v472 + 10) = v440;
              *((_QWORD *)v472 + 10) = 0;
              *((_OWORD *)v472 + 3) = 0u;
              *((_OWORD *)v472 + 4) = 0u;
              *((_DWORD *)v472 + 20) = 1065353216;
              buf[16] = 1;
              v476 = (float)(unint64_t)(*(_QWORD *)(v621 + 32) + 1);
              v477 = *(float *)(v621 + 40);
              if (v442 && (float)(v477 * (float)v442) >= v476)
              {
                v475 = v607;
                goto LABEL_662;
              }
              v478 = 1;
              if (v442 >= 3)
                v478 = (v442 & (v442 - 1)) != 0;
              v479 = v478 | (2 * v442);
              v480 = vcvtps_u32_f32(v476 / v477);
              if (v479 <= v480)
                prime = v480;
              else
                prime = v479;
              v475 = v607;
              if (prime == 1)
              {
                prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(prime);
                v442 = *(_QWORD *)(v621 + 16);
              }
              if (prime <= v442)
              {
                if (prime >= v442)
                  goto LABEL_657;
                v493 = vcvtps_u32_f32((float)*(unint64_t *)(v621 + 32) / *(float *)(v621 + 40));
                if (v442 < 3
                  || (v494 = (uint8x8_t)vcnt_s8((int8x8_t)v442), v494.i16[0] = vaddlv_u8(v494), v494.u32[0] > 1uLL))
                {
                  v493 = std::__next_prime(v493);
                }
                else
                {
                  v495 = 1 << -(char)__clz(v493 - 1);
                  if (v493 >= 2)
                    v493 = v495;
                }
                if (prime <= v493)
                  prime = v493;
                if (prime >= v442)
                  goto LABEL_657;
                if (!prime)
                {
                  v500 = *(void **)(v621 + 8);
                  *(_QWORD *)(v621 + 8) = 0;
                  if (v500)
                    operator delete(v500);
                  *(_QWORD *)(v621 + 16) = 0;
                  goto LABEL_657;
                }
              }
              if (prime >> 61)
                goto LABEL_877;
              v482 = operator new(8 * prime);
              v483 = *(void **)(v621 + 8);
              *(_QWORD *)(v621 + 8) = v482;
              if (v483)
                operator delete(v483);
              v484 = 0;
              *(_QWORD *)(v621 + 16) = prime;
              do
                *(_QWORD *)(*(_QWORD *)(v621 + 8) + 8 * v484++) = 0;
              while (prime != v484);
              v485 = (_QWORD *)*v619;
              if (!*v619)
                goto LABEL_657;
              v486 = v485[1];
              v487 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v488 = v486 & v487;
                *(_QWORD *)(*(_QWORD *)(v621 + 8) + 8 * v488) = v619;
                while (1)
                {
                  v489 = (_QWORD *)*v485;
                  if (!*v485)
                    break;
                  v490 = v489[1] & v487;
                  if (v490 == v488)
                  {
                    v485 = (_QWORD *)*v485;
                  }
                  else
                  {
                    v491 = *(_QWORD *)(v621 + 8);
                    if (*(_QWORD *)(v491 + 8 * v490))
                    {
                      *v485 = *v489;
                      v492 = 8 * v490;
                      *v489 = **(_QWORD **)(*(_QWORD *)(v621 + 8) + v492);
                      **(_QWORD **)(*(_QWORD *)(v621 + 8) + v492) = v489;
                    }
                    else
                    {
                      *(_QWORD *)(v491 + 8 * v490) = v485;
                      v485 = v489;
                      v488 = v490;
                    }
                  }
                }
LABEL_657:
                v442 = *(_QWORD *)(v621 + 16);
                if ((v442 & (v442 - 1)) != 0)
                {
                  if (v441 >= v442)
                    v417 = v441 % v442;
                  else
                    v417 = v441;
                }
                else
                {
                  v417 = (v442 - 1) & v441;
                }
LABEL_662:
                v501 = *(_QWORD *)(v621 + 8);
                v502 = *(_QWORD **)(v501 + 8 * v417);
                if (v502)
                {
                  *(_QWORD *)v472 = *v502;
                }
                else
                {
                  *(_QWORD *)v472 = *v619;
                  *v619 = v472;
                  *(_QWORD *)(v501 + 8 * v417) = v619;
                  if (!*(_QWORD *)v472)
                  {
LABEL_671:
                    ++*(_QWORD *)(v621 + 32);
LABEL_672:
                    v504 = *v475;
                    v505 = v475[1];
                    v506 = (v505
                          - 0x61C8864680B583EBLL
                          + ((v504 - 0x61C8864680B583EBLL) << 6)
                          + ((unint64_t)(v504 - 0x61C8864680B583EBLL) >> 2)) ^ (v504 - 0x61C8864680B583EBLL);
                    v507 = *((int *)v475 + 1);
                    v508 = *((int *)v475 + 2);
                    v509 = (v507 - 0x61C8864680B583EBLL + (v506 << 6) + (v506 >> 2)) ^ v506;
                    v510 = (v508 - 0x61C8864680B583EBLL + (v509 << 6) + (v509 >> 2)) ^ v509;
                    v512 = v475 + 24;
                    v511 = *((unsigned __int16 *)v475 + 12);
                    v513 = (v511 - 0x61C8864680B583EBLL + (v510 << 6) + (v510 >> 2)) ^ v510;
                    v514 = *((unsigned int *)v475 + 7);
                    v515 = (v514 - 0x61C8864680B583EBLL + (v513 << 6) + (v513 >> 2)) ^ v513;
                    v516 = v475[40];
                    if (v475[40])
                      v515 ^= (v515 << 6) - 0x61C8864680B583EBLL + (v515 >> 2) + *((_QWORD *)v475 + 4);
                    v517 = *((_QWORD *)v472 + 7);
                    if (v517)
                    {
                      v518 = (uint8x8_t)vcnt_s8((int8x8_t)v517);
                      v518.i16[0] = vaddlv_u8(v518);
                      if (v518.u32[0] > 1uLL)
                      {
                        v475 = (unsigned __int8 *)v515;
                        if (v515 >= v517)
                          v475 = (unsigned __int8 *)(v515 % v517);
                      }
                      else
                      {
                        v475 = (unsigned __int8 *)((v517 - 1) & v515);
                      }
                      v519 = *(void ***)(*((_QWORD *)v472 + 6) + 8 * (_QWORD)v475);
                      if (v519)
                      {
                        v520 = (unsigned __int8 *)*v519;
                        if (*v519)
                        {
                          v521 = *((_QWORD *)v607 + 4);
                          if (v518.u32[0] <= 1uLL)
                          {
                            v522 = v517 - 1;
                            if (!v516)
                            {
                              while (1)
                              {
                                v524 = *((_QWORD *)v520 + 1);
                                if (v524 == v515)
                                {
                                  if (v520[16] == (_DWORD)v504
                                    && v520[17] == (_DWORD)v505
                                    && *((_DWORD *)v520 + 5) == (_DWORD)v507
                                    && *((_DWORD *)v520 + 6) == (_DWORD)v508
                                    && *((unsigned __int16 *)v520 + 20) == (_DWORD)v511
                                    && *((_DWORD *)v520 + 11) == (_DWORD)v514
                                    && !v520[56])
                                  {
                                    goto LABEL_707;
                                  }
                                }
                                else if ((unsigned __int8 *)(v524 & v522) != v475)
                                {
                                  goto LABEL_737;
                                }
                                v520 = *(unsigned __int8 **)v520;
                                if (!v520)
                                  goto LABEL_737;
                              }
                            }
                            while (1)
                            {
                              v523 = *((_QWORD *)v520 + 1);
                              if (v523 == v515)
                              {
                                if (v520[16] == (_DWORD)v504
                                  && v520[17] == (_DWORD)v505
                                  && *((_DWORD *)v520 + 5) == (_DWORD)v507
                                  && *((_DWORD *)v520 + 6) == (_DWORD)v508
                                  && *((unsigned __int16 *)v520 + 20) == (_DWORD)v511
                                  && *((_DWORD *)v520 + 11) == (_DWORD)v514
                                  && v520[56]
                                  && *((_QWORD *)v520 + 6) == v521)
                                {
                                  goto LABEL_707;
                                }
                              }
                              else if ((unsigned __int8 *)(v523 & v522) != v475)
                              {
                                goto LABEL_737;
                              }
                              v520 = *(unsigned __int8 **)v520;
                              if (!v520)
                                goto LABEL_737;
                            }
                          }
                          if (!v516)
                          {
                            while (1)
                            {
                              v526 = *((_QWORD *)v520 + 1);
                              if (v526 == v515)
                              {
                                if (v520[16] == (_DWORD)v504
                                  && v520[17] == (_DWORD)v505
                                  && *((_DWORD *)v520 + 5) == (_DWORD)v507
                                  && *((_DWORD *)v520 + 6) == (_DWORD)v508
                                  && *((unsigned __int16 *)v520 + 20) == (_DWORD)v511
                                  && *((_DWORD *)v520 + 11) == (_DWORD)v514
                                  && !v520[56])
                                {
                                  goto LABEL_707;
                                }
                              }
                              else
                              {
                                if (v526 >= v517)
                                  v526 %= v517;
                                if ((unsigned __int8 *)v526 != v475)
                                  goto LABEL_737;
                              }
                              v520 = *(unsigned __int8 **)v520;
                              if (!v520)
                                goto LABEL_737;
                            }
                          }
                          do
                          {
                            v525 = *((_QWORD *)v520 + 1);
                            if (v525 == v515)
                            {
                              if (v520[16] == (_DWORD)v504
                                && v520[17] == (_DWORD)v505
                                && *((_DWORD *)v520 + 5) == (_DWORD)v507
                                && *((_DWORD *)v520 + 6) == (_DWORD)v508
                                && *((unsigned __int16 *)v520 + 20) == (_DWORD)v511
                                && *((_DWORD *)v520 + 11) == (_DWORD)v514
                                && v520[56]
                                && *((_QWORD *)v520 + 6) == v521)
                              {
LABEL_707:
                                v432 = v620;
                                goto LABEL_804;
                              }
                            }
                            else
                            {
                              if (v525 >= v517)
                                v525 %= v517;
                              if ((unsigned __int8 *)v525 != v475)
                                break;
                            }
                            v520 = *(unsigned __int8 **)v520;
                          }
                          while (v520);
                        }
                      }
                    }
LABEL_737:
                    v520 = (unsigned __int8 *)operator new(0x50uLL);
                    v527 = v472 + 64;
                    *(_QWORD *)buf = v520;
                    *(_QWORD *)&buf[8] = v472 + 64;
                    *(_QWORD *)v520 = 0;
                    *((_QWORD *)v520 + 1) = v515;
                    v520[16] = v504;
                    v520[17] = v505;
                    *(_QWORD *)(v520 + 20) = *(_QWORD *)(v607 + 4);
                    *(_OWORD *)(v520 + 40) = *(_OWORD *)v512;
                    v520[56] = v512[16];
                    *((_QWORD *)v520 + 8) = 0;
                    *((_QWORD *)v520 + 9) = 0;
                    buf[16] = 1;
                    v528 = (float)(unint64_t)(*((_QWORD *)v472 + 9) + 1);
                    v529 = *((float *)v472 + 20);
                    if (v517 && (float)(v529 * (float)v517) >= v528)
                    {
                      v515 = (unint64_t)v475;
                      v432 = v620;
                      goto LABEL_794;
                    }
                    v530 = 1;
                    if (v517 >= 3)
                      v530 = (v517 & (v517 - 1)) != 0;
                    v531 = v530 | (2 * v517);
                    v532 = vcvtps_u32_f32(v528 / v529);
                    if (v531 <= v532)
                      v533 = v532;
                    else
                      v533 = v531;
                    v432 = v620;
                    if (v533 == 1)
                    {
                      v533 = 2;
                    }
                    else if ((v533 & (v533 - 1)) != 0)
                    {
                      v533 = std::__next_prime(v533);
                      v517 = *((_QWORD *)v472 + 7);
                    }
                    if (v533 <= v517)
                    {
                      if (v533 >= v517)
                        goto LABEL_790;
                      v545 = vcvtps_u32_f32((float)*((unint64_t *)v472 + 9) / *((float *)v472 + 20));
                      if (v517 < 3
                        || (v546 = (uint8x8_t)vcnt_s8((int8x8_t)v517), v546.i16[0] = vaddlv_u8(v546), v546.u32[0] > 1uLL))
                      {
                        v545 = std::__next_prime(v545);
                      }
                      else
                      {
                        v547 = 1 << -(char)__clz(v545 - 1);
                        if (v545 >= 2)
                          v545 = v547;
                      }
                      if (v533 <= v545)
                        v533 = v545;
                      if (v533 >= v517)
                        goto LABEL_790;
                      if (!v533)
                      {
                        v552 = (void *)*((_QWORD *)v472 + 6);
                        *((_QWORD *)v472 + 6) = 0;
                        if (v552)
                          operator delete(v552);
                        *((_QWORD *)v472 + 7) = 0;
                        goto LABEL_790;
                      }
                    }
                    if (v533 >> 61)
                      goto LABEL_877;
                    v534 = operator new(8 * v533);
                    v535 = (void *)*((_QWORD *)v472 + 6);
                    *((_QWORD *)v472 + 6) = v534;
                    if (v535)
                      operator delete(v535);
                    v536 = 0;
                    *((_QWORD *)v472 + 7) = v533;
                    do
                      *(_QWORD *)(*((_QWORD *)v472 + 6) + 8 * v536++) = 0;
                    while (v533 != v536);
                    v537 = (_QWORD *)*v527;
                    if (!*v527)
                      goto LABEL_790;
                    v538 = v537[1];
                    v539 = v533 - 1;
                    if ((v533 & (v533 - 1)) == 0)
                    {
                      v540 = v538 & v539;
                      *(_QWORD *)(*((_QWORD *)v472 + 6) + 8 * v540) = v527;
                      while (1)
                      {
                        v541 = (_QWORD *)*v537;
                        if (!*v537)
                          break;
                        v542 = v541[1] & v539;
                        if (v542 == v540)
                        {
                          v537 = (_QWORD *)*v537;
                        }
                        else
                        {
                          v543 = *((_QWORD *)v472 + 6);
                          if (*(_QWORD *)(v543 + 8 * v542))
                          {
                            *v537 = *v541;
                            v544 = 8 * v542;
                            *v541 = **(_QWORD **)(*((_QWORD *)v472 + 6) + v544);
                            **(_QWORD **)(*((_QWORD *)v472 + 6) + v544) = v541;
                          }
                          else
                          {
                            *(_QWORD *)(v543 + 8 * v542) = v537;
                            v537 = v541;
                            v540 = v542;
                          }
                        }
                      }
LABEL_790:
                      v517 = *((_QWORD *)v472 + 7);
                      if ((v517 & (v517 - 1)) != 0)
                      {
                        if (v515 >= v517)
                          v515 %= v517;
                      }
                      else
                      {
                        v515 &= v517 - 1;
                      }
LABEL_794:
                      v553 = *((_QWORD *)v472 + 6);
                      v554 = *(_QWORD **)(v553 + 8 * v515);
                      if (v554)
                      {
                        *(_QWORD *)v520 = *v554;
                      }
                      else
                      {
                        *(_QWORD *)v520 = *v527;
                        *v527 = v520;
                        *(_QWORD *)(v553 + 8 * v515) = v527;
                        if (!*(_QWORD *)v520)
                        {
LABEL_803:
                          ++*((_QWORD *)v472 + 9);
                          v280 = v649;
LABEL_804:
                          v556 = v650;
                          if (v650)
                          {
                            v557 = (unint64_t *)&v650->__shared_owners_;
                            do
                              v558 = __ldxr(v557);
                            while (__stxr(v558 + 1, v557));
                          }
                          v559 = (std::__shared_weak_count *)*((_QWORD *)v520 + 9);
                          *((_QWORD *)v520 + 8) = v280;
                          *((_QWORD *)v520 + 9) = v556;
                          if (v559)
                          {
                            v560 = (unint64_t *)&v559->__shared_owners_;
                            do
                              v561 = __ldaxr(v560);
                            while (__stlxr(v561 - 1, v560));
                            if (!v561)
                            {
                              ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
                              std::__shared_weak_count::__release_weak(v559);
                            }
                          }
                          v562 = *(_QWORD *)(*(_QWORD *)v621 + 128);
                          if (!v562)
                            goto LABEL_833;
                          v563 = (uint64_t)v654;
                          if (v654)
                          {
                            if (v654 == v653)
                            {
                              v656 = buf;
                              (*(void (**)(_QWORD *, uint8_t *))(v653[0] + 24))(v653, buf);
LABEL_818:
                              geo::TaskQueue::async((std::__shared_weak_count_vtbl **)&v652, v562, buf);
                              v564 = v652;
                              v652 = 0uLL;
                              v565 = (std::__shared_weak_count *)*((_QWORD *)v649 + 2);
                              *(_OWORD *)(v649 + 8) = v564;
                              if (v565)
                              {
                                v566 = (unint64_t *)&v565->__shared_owners_;
                                do
                                  v567 = __ldaxr(v566);
                                while (__stlxr(v567 - 1, v566));
                                if (!v567)
                                {
                                  ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
                                  std::__shared_weak_count::__release_weak(v565);
                                }
                              }
                              v568 = (std::__shared_weak_count *)*((_QWORD *)&v652 + 1);
                              if (*((_QWORD *)&v652 + 1))
                              {
                                v569 = (unint64_t *)(*((_QWORD *)&v652 + 1) + 8);
                                do
                                  v570 = __ldaxr(v569);
                                while (__stlxr(v570 - 1, v569));
                                if (!v570)
                                {
                                  ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
                                  std::__shared_weak_count::__release_weak(v568);
                                }
                              }
                              v571 = v656;
                              if (v656 == buf)
                              {
                                v572 = 4;
                                v571 = buf;
                                goto LABEL_832;
                              }
                              if (v656)
                              {
                                v572 = 5;
LABEL_832:
                                (*(void (**)(void))(*(_QWORD *)v571 + 8 * v572))();
                              }
LABEL_833:
                              v573 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                              if (__p.__r_.__value_.__l.__size_)
                              {
                                v574 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                                do
                                  v575 = __ldaxr(v574);
                                while (__stlxr(v575 - 1, v574));
                                if (!v575)
                                {
                                  ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
                                  std::__shared_weak_count::__release_weak(v573);
                                }
                              }
                              v576 = v654;
                              if (v654 == v653)
                              {
                                v577 = 4;
                                v576 = v653;
                              }
                              else
                              {
                                if (!v654)
                                {
LABEL_843:
                                  md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0::~$_0(&v626);
                                  v578 = (char *)v644;
                                  if (!(_QWORD)v644)
                                  {
LABEL_860:
                                    if (v612)
                                      operator delete(v612);
                                    v586 = (void *)v648.__r_.__value_.__r.__words[0];
                                    if (v648.__r_.__value_.__r.__words[0])
                                    {
                                      v587 = v648.__r_.__value_.__l.__size_;
                                      if (v648.__r_.__value_.__l.__size_ != v648.__r_.__value_.__r.__words[0])
                                      {
                                        do
                                          md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v587 - 136));
                                        while ((void *)v587 != v586);
                                      }
                                      operator delete(v586);
                                    }
                                    std::__shared_weak_count::__release_weak(v432);
                                    if (v604)
                                      std::__shared_weak_count::__release_weak(v604);
                                    if (v605)
                                      std::__shared_weak_count::__release_weak(v605);
                                    v588 = v650;
                                    if (v650)
                                    {
                                      v589 = (unint64_t *)&v650->__shared_owners_;
                                      do
                                        v590 = __ldaxr(v589);
                                      while (__stlxr(v590 - 1, v589));
                                      if (!v590)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
                                        std::__shared_weak_count::__release_weak(v588);
                                      }
                                    }
                                    return;
                                  }
                                  v579 = (char *)*((_QWORD *)&v644 + 1);
                                  if (*((_QWORD *)&v644 + 1) == (_QWORD)v644)
                                  {
LABEL_859:
                                    operator delete(v578);
                                    goto LABEL_860;
                                  }
                                  while (1)
                                  {
                                    v580 = (std::__shared_weak_count *)*((_QWORD *)v579 - 1);
                                    if (!v580)
                                      goto LABEL_851;
                                    v581 = (unint64_t *)&v580->__shared_owners_;
                                    do
                                      v582 = __ldaxr(v581);
                                    while (__stlxr(v582 - 1, v581));
                                    if (!v582)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
                                      std::__shared_weak_count::__release_weak(v580);
                                      v583 = (std::__shared_weak_count *)*((_QWORD *)v579 - 9);
                                      if (v583)
                                      {
LABEL_852:
                                        v584 = (unint64_t *)&v583->__shared_owners_;
                                        do
                                          v585 = __ldaxr(v584);
                                        while (__stlxr(v585 - 1, v584));
                                        if (!v585)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
                                          std::__shared_weak_count::__release_weak(v583);
                                        }
                                      }
                                    }
                                    else
                                    {
LABEL_851:
                                      v583 = (std::__shared_weak_count *)*((_QWORD *)v579 - 9);
                                      if (v583)
                                        goto LABEL_852;
                                    }
                                    v579 -= 80;
                                    if (v579 == v578)
                                    {
                                      v578 = (char *)v644;
                                      goto LABEL_859;
                                    }
                                  }
                                }
                                v577 = 5;
                              }
                              (*(void (**)(void))(*v576 + 8 * v577))();
                              goto LABEL_843;
                            }
                            v563 = (*(uint64_t (**)(void))(*v654 + 16))();
                          }
                          v656 = (uint8_t *)v563;
                          goto LABEL_818;
                        }
                        v555 = *(_QWORD *)(*(_QWORD *)v520 + 8);
                        if ((v517 & (v517 - 1)) != 0)
                        {
                          if (v555 >= v517)
                            v555 %= v517;
                        }
                        else
                        {
                          v555 &= v517 - 1;
                        }
                        v554 = (_QWORD *)(*((_QWORD *)v472 + 6) + 8 * v555);
                      }
                      *v554 = v520;
                      goto LABEL_803;
                    }
                    if (v538 >= v533)
                      v538 %= v533;
                    *(_QWORD *)(*((_QWORD *)v472 + 6) + 8 * v538) = v527;
                    v548 = (_QWORD *)*v537;
                    if (!*v537)
                      goto LABEL_790;
                    while (1)
                    {
                      v550 = v548[1];
                      if (v550 >= v533)
                        v550 %= v533;
                      if (v550 != v538)
                      {
                        v551 = *((_QWORD *)v472 + 6);
                        if (!*(_QWORD *)(v551 + 8 * v550))
                        {
                          *(_QWORD *)(v551 + 8 * v550) = v537;
                          goto LABEL_776;
                        }
                        *v537 = *v548;
                        v549 = 8 * v550;
                        *v548 = **(_QWORD **)(*((_QWORD *)v472 + 6) + v549);
                        **(_QWORD **)(*((_QWORD *)v472 + 6) + v549) = v548;
                        v548 = v537;
                      }
                      v550 = v538;
LABEL_776:
                      v537 = v548;
                      v548 = (_QWORD *)*v548;
                      v538 = v550;
                      if (!v548)
                        goto LABEL_790;
                    }
                  }
                  v503 = *(_QWORD *)(*(_QWORD *)v472 + 8);
                  if ((v442 & (v442 - 1)) != 0)
                  {
                    if (v503 >= v442)
                      v503 %= v442;
                  }
                  else
                  {
                    v503 &= v442 - 1;
                  }
                  v502 = (_QWORD *)(*(_QWORD *)(v621 + 8) + 8 * v503);
                }
                *v502 = v472;
                goto LABEL_671;
              }
              if (v486 >= prime)
                v486 %= prime;
              *(_QWORD *)(*(_QWORD *)(v621 + 8) + 8 * v486) = v619;
              v496 = (_QWORD *)*v485;
              if (!*v485)
                goto LABEL_657;
              while (1)
              {
                v498 = v496[1];
                if (v498 >= prime)
                  v498 %= prime;
                if (v498 != v486)
                {
                  v499 = *(_QWORD *)(v621 + 8);
                  if (!*(_QWORD *)(v499 + 8 * v498))
                  {
                    *(_QWORD *)(v499 + 8 * v498) = v485;
                    goto LABEL_642;
                  }
                  *v485 = *v496;
                  v497 = 8 * v498;
                  *v496 = **(_QWORD **)(*(_QWORD *)(v621 + 8) + v497);
                  **(_QWORD **)(*(_QWORD *)(v621 + 8) + v497) = v496;
                  v496 = v485;
                }
                v498 = v486;
LABEL_642:
                v485 = v496;
                v496 = (_QWORD *)*v496;
                v486 = v498;
                if (!v496)
                  goto LABEL_657;
              }
            }
            v272 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(a9);
            v273 = gdc::Registry::storage<md::overlayComponents::OverlayableFallback>(a9);
            v274 = (_QWORD *)v273;
            v275 = v273 + 32;
            v277 = (uint64_t *)v272[7];
            v276 = (uint64_t *)v272[8];
            if (*(_QWORD *)(v273 + 64) - *(_QWORD *)(v273 + 56) >= (unint64_t)((char *)v276 - (char *)v277))
              v278 = v272 + 4;
            else
              v278 = (_QWORD *)(v273 + 32);
            if (v272 + 4 == v278 && v277 != v276)
            {
              v602 = v273 + 32;
              v598 = v278;
              do
              {
                v309 = *((unsigned int *)v277 + 1);
                v310 = v274[4];
                if (v309 >> 7 < (v274[5] - v310) >> 3)
                {
                  v311 = *(_QWORD *)(v310 + 8 * (v309 >> 7));
                  if (v311)
                  {
                    v312 = *(unsigned __int16 *)(v311 + 2 * (v309 & 0x7F));
                    v314 = v274[7];
                    v313 = v274[8];
                    if (v312 < (v313 - v314) >> 3)
                    {
                      v315 = v314 + 8 * v312;
                      if (v315 != v313 && *(_DWORD *)(v315 + 4) == (_DWORD)v309)
                      {
                        v317 = *v277;
                        if (v243 >= v618)
                        {
                          v318 = v243;
                          v319 = v243 - v237;
                          v320 = v319 >> 3;
                          v321 = (v319 >> 3) + 1;
                          if (v321 >> 61)
LABEL_881:
                            abort();
                          v614 = v237;
                          if ((v618 - v237) >> 2 > v321)
                            v321 = (v618 - v237) >> 2;
                          if ((unint64_t)(v618 - v237) >= 0x7FFFFFFFFFFFFFF8)
                            v322 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v322 = v321;
                          if (v322)
                          {
                            if (v322 >> 61)
                              goto LABEL_877;
                            v323 = v322;
                            v324 = (char *)operator new(8 * v322);
                            v322 = v323;
                          }
                          else
                          {
                            v324 = 0;
                          }
                          v237 = &v324[8 * v320];
                          *(_QWORD *)v237 = v317;
                          v325 = v237 + 8;
                          v326 = v614;
                          if (v318 == v614)
                          {
                            v242 = v237 + 8;
                          }
                          else
                          {
                            v327 = v318 - 8 - v614;
                            if (v327 < 0x168)
                            {
                              v328 = v318;
                              goto LABEL_416;
                            }
                            if (&v324[v319 - 8 - (v327 & 0xFFFFFFFFFFFFFFF8)] <= &v324[v319 - 8]
                              && &v318[-(v327 & 0xFFFFFFFFFFFFFFF8) - 8] <= v318 - 8
                              && (unint64_t)(v318 - &v324[v319]) >= 0x20)
                            {
                              v330 = (v327 >> 3) + 1;
                              v328 = &v318[-8 * (v330 & 0x3FFFFFFFFFFFFFFCLL)];
                              v331 = &v324[8 * v320 - 16];
                              v332 = v318 - 16;
                              v333 = v330 & 0x3FFFFFFFFFFFFFFCLL;
                              v326 = v614;
                              do
                              {
                                v334 = *(_OWORD *)v332;
                                *((_OWORD *)v331 - 1) = *((_OWORD *)v332 - 1);
                                *(_OWORD *)v331 = v334;
                                v331 -= 32;
                                v332 -= 32;
                                v333 -= 4;
                              }
                              while (v333);
                              v237 -= 8 * (v330 & 0x3FFFFFFFFFFFFFFCLL);
                              v242 = v325;
                              if (v330 != (v330 & 0x3FFFFFFFFFFFFFFCLL))
                                goto LABEL_417;
                            }
                            else
                            {
                              v328 = v318;
LABEL_416:
                              v326 = v614;
                              v242 = v237 + 8;
                              do
                              {
LABEL_417:
                                v329 = *((_QWORD *)v328 - 1);
                                v328 -= 8;
                                *((_QWORD *)v237 - 1) = v329;
                                v237 -= 8;
                              }
                              while (v328 != v326);
                            }
                          }
                          v618 = &v324[8 * v322];
                          if (v326)
                            operator delete(v326);
                          v243 = v242;
                          v275 = v602;
                          v278 = v598;
                          goto LABEL_388;
                        }
                        *(_QWORD *)v243 = v317;
                        v243 += 8;
                        v242 = v243;
                      }
                    }
                  }
                }
LABEL_388:
                ++v277;
              }
              while (v277 != v276);
            }
            if ((_QWORD *)v275 != v278)
              goto LABEL_344;
            v445 = (uint64_t *)v274[7];
            v444 = (uint64_t *)v274[8];
            if (v445 == v444)
              goto LABEL_344;
            while (1)
            {
              while (1)
              {
                v446 = *((unsigned int *)v445 + 1);
                v447 = v272[4];
                if (v446 >> 7 < (v272[5] - v447) >> 3)
                {
                  v448 = *(_QWORD *)(v447 + 8 * (v446 >> 7));
                  if (v448)
                  {
                    v449 = *(unsigned __int16 *)(v448 + 2 * (v446 & 0x7F));
                    v451 = v272[7];
                    v450 = v272[8];
                    if (v449 < (v450 - v451) >> 3)
                    {
                      v452 = v451 + 8 * v449;
                      if (v452 != v450 && *(_DWORD *)(v452 + 4) == (_DWORD)v446)
                        break;
                    }
                  }
                }
LABEL_542:
                if (++v445 == v444)
                  goto LABEL_344;
              }
              v454 = *v445;
              if (v243 >= v618)
                break;
              *(_QWORD *)v243 = v454;
              v243 += 8;
              v242 = v243;
              if (++v445 == v444)
                goto LABEL_344;
            }
            v455 = v243;
            v456 = v243 - v237;
            v457 = v456 >> 3;
            v458 = (v456 >> 3) + 1;
            if (v458 >> 61)
              goto LABEL_881;
            v615 = v237;
            if ((v618 - v237) >> 2 > v458)
              v458 = (v618 - v237) >> 2;
            if ((unint64_t)(v618 - v237) >= 0x7FFFFFFFFFFFFFF8)
              v459 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v459 = v458;
            if (v459)
            {
              if (v459 >> 61)
                goto LABEL_877;
              v460 = (char *)operator new(8 * v459);
            }
            else
            {
              v460 = 0;
            }
            v237 = &v460[8 * v457];
            *(_QWORD *)v237 = v454;
            v461 = v237 + 8;
            v462 = v615;
            if (v455 == v615)
            {
              v242 = v237 + 8;
LABEL_574:
              v618 = &v460[8 * v459];
              if (v462)
                operator delete(v462);
              v243 = v242;
              goto LABEL_542;
            }
            v463 = v455 - 8 - v615;
            if (v463 >= 0x168)
            {
              if (&v460[v456 - 8 - (v463 & 0xFFFFFFFFFFFFFFF8)] <= &v460[v456 - 8]
                && &v455[-(v463 & 0xFFFFFFFFFFFFFFF8) - 8] <= v455 - 8
                && (unint64_t)(v455 - &v460[v456]) >= 0x20)
              {
                v466 = (v463 >> 3) + 1;
                v464 = &v455[-8 * (v466 & 0x3FFFFFFFFFFFFFFCLL)];
                v467 = &v460[8 * v457 - 16];
                v468 = v455 - 16;
                v469 = v466 & 0x3FFFFFFFFFFFFFFCLL;
                v462 = v615;
                do
                {
                  v470 = *(_OWORD *)v468;
                  *((_OWORD *)v467 - 1) = *((_OWORD *)v468 - 1);
                  *(_OWORD *)v467 = v470;
                  v467 -= 32;
                  v468 -= 32;
                  v469 -= 4;
                }
                while (v469);
                v237 -= 8 * (v466 & 0x3FFFFFFFFFFFFFFCLL);
                v242 = v461;
                if (v466 == (v466 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_574;
                goto LABEL_573;
              }
              v464 = v455;
            }
            else
            {
              v464 = v455;
            }
            v462 = v615;
            v242 = v237 + 8;
            do
            {
LABEL_573:
              v465 = *((_QWORD *)v464 - 1);
              v464 -= 8;
              *((_QWORD *)v237 - 1) = v465;
              v237 -= 8;
            }
            while (v464 != v462);
            goto LABEL_574;
          }
          while (1)
          {
            while (1)
            {
              v284 = *((unsigned int *)v283 + 1);
              v285 = v234[4];
              if (v284 >> 7 < (v234[5] - v285) >> 3)
              {
                v286 = *(_QWORD *)(v285 + 8 * (v284 >> 7));
                if (v286)
                {
                  v287 = *(unsigned __int16 *)(v286 + 2 * (v284 & 0x7F));
                  v289 = v234[7];
                  v288 = v234[8];
                  if (v287 < (v288 - v289) >> 3)
                  {
                    v290 = v289 + 8 * v287;
                    if (v290 != v288 && *(_DWORD *)(v290 + 4) == (_DWORD)v284)
                      break;
                  }
                }
              }
LABEL_349:
              if (++v283 == v282)
                goto LABEL_330;
            }
            v292 = *v283;
            ++v244;
            if (v243 >= v618)
              break;
            *(_QWORD *)v243 = v292;
            v243 += 8;
            v242 = v243;
            if (++v283 == v282)
              goto LABEL_330;
          }
          v293 = v243;
          v294 = v243 - v237;
          v295 = v294 >> 3;
          v296 = (v294 >> 3) + 1;
          if (v296 >> 61)
            abort();
          v613 = v237;
          if ((v618 - v237) >> 2 > v296)
            v296 = (v618 - v237) >> 2;
          if ((unint64_t)(v618 - v237) >= 0x7FFFFFFFFFFFFFF8)
            v297 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v297 = v296;
          v597 = v244;
          if (v297)
          {
            if (v297 >> 61)
              goto LABEL_877;
            v298 = (char *)operator new(8 * v297);
          }
          else
          {
            v298 = 0;
          }
          v237 = &v298[8 * v295];
          *(_QWORD *)v237 = v292;
          v299 = v237 + 8;
          v300 = v613;
          if (v293 == v613)
          {
            v242 = v237 + 8;
LABEL_381:
            v618 = &v298[8 * v297];
            if (v300)
              operator delete(v300);
            v243 = v242;
            v244 = v597;
            goto LABEL_349;
          }
          v301 = v293 - 8 - v613;
          if (v301 >= 0x168)
          {
            if (&v298[v294 - 8 - (v301 & 0xFFFFFFFFFFFFFFF8)] <= &v298[v294 - 8]
              && &v293[-(v301 & 0xFFFFFFFFFFFFFFF8) - 8] <= v293 - 8
              && (unint64_t)(v293 - &v298[v294]) >= 0x20)
            {
              v304 = (v301 >> 3) + 1;
              v302 = &v293[-8 * (v304 & 0x3FFFFFFFFFFFFFFCLL)];
              v305 = &v298[8 * v295 - 16];
              v306 = v293 - 16;
              v307 = v304 & 0x3FFFFFFFFFFFFFFCLL;
              v300 = v613;
              do
              {
                v308 = *(_OWORD *)v306;
                *((_OWORD *)v305 - 1) = *((_OWORD *)v306 - 1);
                *(_OWORD *)v305 = v308;
                v305 -= 32;
                v306 -= 32;
                v307 -= 4;
              }
              while (v307);
              v237 -= 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
              v242 = v299;
              if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_381;
              goto LABEL_380;
            }
            v302 = v293;
          }
          else
          {
            v302 = v293;
          }
          v300 = v613;
          v242 = v237 + 8;
          do
          {
LABEL_380:
            v303 = *((_QWORD *)v302 - 1);
            v302 -= 8;
            *((_QWORD *)v237 - 1) = v303;
            v237 -= 8;
          }
          while (v302 != v300);
          goto LABEL_381;
        }
        v61 = *a5;
        v62 = *(_QWORD *)(*a5 + 736) - *(_QWORD *)(*a5 + 728);
        if (!v62)
          goto LABEL_237;
        if ((unint64_t)v62 >= 0xF0F0F0F0F0F0F09)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v63 = v62 >> 3;
        v648.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(136 * (v62 >> 3));
        v648.__r_.__value_.__l.__size_ = v648.__r_.__value_.__r.__words[0];
        v648.__r_.__value_.__r.__words[2] = v648.__r_.__value_.__r.__words[0] + 136 * v63;
        v64 = *(_QWORD *)(v61 + 736) - *(_QWORD *)(v61 + 728);
        v65 = v64 >> 3;
        shared_weak_owners = (std::__shared_weak_count_vtbl *)v27[4].__shared_weak_owners_;
        if (v64 >> 3 <= (unint64_t)((v27[5].__shared_owners_ - (uint64_t)shared_weak_owners) >> 2))
        {
LABEL_237:
          v193 = *(_QWORD *)(v61 + 728);
          v102 = v603;
          if (*(_QWORD *)(v61 + 736) != v193)
          {
            v194 = 0;
            v195 = 0;
            do
            {
              v197 = *(_QWORD *)(v193 + 8 * v194);
              v198 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>((uint64_t)v608);
              v200 = v198[4];
              if (v197 >> 39 < (v198[5] - v200) >> 3
                && (v201 = *(_QWORD *)(v200 + 8 * (v197 >> 39))) != 0
                && (v202 = *(unsigned __int16 *)(v201 + 2 * (HIDWORD(v197) & 0x7F)),
                    v204 = v198[7],
                    v203 = v198[8],
                    v202 < (v203 - v204) >> 3)
                && ((v205 = v204 + 8 * v202, v205 != v203)
                  ? (v206 = *(_DWORD *)(v205 + 4) == HIDWORD(v197))
                  : (v206 = 0),
                    v206))
              {
                v207 = v198[11];
                v208 = v198[10] + 104 * v202;
              }
              else
              {
                v207 = v198[11];
                v208 = v207;
              }
              v209 = v620;
              if (v208 == v207)
                v210 = 0;
              else
                v210 = (const md::LayoutContext *)v208;
              v199.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(v616 + 208) + 8);
              md::overlayComponents::VectorOverlay::drapingStyle((md::overlayComponents::VectorOverlay *)buf, v210, v199, fmaxf(*(float *)(a7 + 3080) + *(float *)(a7 + 3076), 1.0), a8);
              std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::emplace_back<md::overlayComponents::VectorOverlay &,md::DrapingStyle>((void **)&v648.__r_.__value_.__l.__data_, (uint64_t)v210, (__int128 *)buf);
              v212 = (char *)v620[5].__vftable;
              shared_owners = v620[5].__shared_owners_;
              if ((unint64_t)v212 < shared_owners)
              {
                *(_DWORD *)v212 = v195;
                v196 = (std::__shared_weak_count_vtbl *)(v212 + 4);
              }
              else
              {
                v213 = (char *)v620[4].__shared_weak_owners_;
                v214 = (v212 - v213) >> 2;
                v215 = v214 + 1;
                if ((unint64_t)(v214 + 1) >> 62)
                  abort();
                v216 = shared_owners - (_QWORD)v213;
                if (v216 >> 1 > v215)
                  v215 = v216 >> 1;
                if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
                  v217 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v217 = v215;
                if (v217)
                {
                  if (v217 >> 62)
                    goto LABEL_877;
                  v218 = operator new(4 * v217);
                }
                else
                {
                  v218 = 0;
                }
                v219 = (unsigned int *)&v218[4 * v214];
                *v219 = v195;
                v196 = (std::__shared_weak_count_vtbl *)(v219 + 1);
                if (v212 != v213)
                {
                  v220 = v212 - 4 - v213;
                  if (v220 < 0x2C)
                    goto LABEL_894;
                  if ((unint64_t)(v213 - v218) < 0x20)
                    goto LABEL_894;
                  v221 = (v220 >> 2) + 1;
                  v222 = &v218[4 * v214 - 16];
                  v223 = v212 - 16;
                  v224 = v221 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v225 = *(_OWORD *)v223;
                    *(v222 - 1) = *((_OWORD *)v223 - 1);
                    *v222 = v225;
                    v222 -= 2;
                    v223 -= 32;
                    v224 -= 8;
                  }
                  while (v224);
                  v219 -= v221 & 0x7FFFFFFFFFFFFFF8;
                  v212 -= 4 * (v221 & 0x7FFFFFFFFFFFFFF8);
                  if (v221 != (v221 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_894:
                    do
                    {
                      v226 = *((_DWORD *)v212 - 1);
                      v212 -= 4;
                      *--v219 = v226;
                    }
                    while (v212 != v213);
                  }
                }
                v227 = &v218[4 * v217];
                v209 = v620;
                v620[4].__shared_weak_owners_ = (uint64_t)v219;
                v620[5].__vftable = v196;
                v620[5].__shared_owners_ = (uint64_t)v227;
                if (v213)
                  operator delete(v213);
              }
              v209[5].__vftable = v196;
              v193 = *(_QWORD *)(v61 + 728);
              v194 = ++v195;
            }
            while (v195 < (unint64_t)((*(_QWORD *)(v61 + 736) - v193) >> 3));
            v102 = v603;
          }
          goto LABEL_274;
        }
        if (v64 < 0)
          abort();
        v67 = v27[5].__vftable;
        v68 = (char *)operator new((unint64_t)v64 >> 1);
        v69 = (char *)v67 - (char *)shared_weak_owners;
        v70 = &v68[((char *)v67 - (char *)shared_weak_owners) & 0xFFFFFFFFFFFFFFFCLL];
        v71 = v70;
        if (v67 != shared_weak_owners)
        {
          if ((unint64_t)(v69 - 4) < 0x2C)
          {
            v71 = &v68[((char *)v67 - (char *)shared_weak_owners) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_234:
              on_zero_shared_weak_high = HIDWORD(v67[-1].__on_zero_shared_weak);
              v67 = (std::__shared_weak_count_vtbl *)((char *)v67 - 4);
              *((_DWORD *)v71 - 1) = on_zero_shared_weak_high;
              v71 -= 4;
            }
            while (v67 != shared_weak_owners);
            goto LABEL_235;
          }
          v71 = &v68[((char *)v67 - (char *)shared_weak_owners) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)((char *)v67 - (v69 & 0xFFFFFFFFFFFFFFFCLL) - v68) < 0x20)
            goto LABEL_234;
          v186 = v69 >> 2;
          v187 = ((unint64_t)(v69 - 4) >> 2) + 1;
          v188 = &v68[4 * v186 - 16];
          p_get_deleter = &v67[-1].__get_deleter;
          v190 = v187 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v191 = *(_OWORD *)p_get_deleter;
            *((_OWORD *)v188 - 1) = *((_OWORD *)p_get_deleter - 1);
            *(_OWORD *)v188 = v191;
            v188 -= 32;
            p_get_deleter -= 4;
            v190 -= 8;
          }
          while (v190);
          v71 = &v70[-4 * (v187 & 0x7FFFFFFFFFFFFFF8)];
          v67 = (std::__shared_weak_count_vtbl *)((char *)v67 - 4 * (v187 & 0x7FFFFFFFFFFFFFF8));
          if (v187 != (v187 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_234;
        }
LABEL_235:
        v27[4].__shared_weak_owners_ = (uint64_t)v71;
        v27[5].__vftable = (std::__shared_weak_count_vtbl *)v70;
        v27[5].__shared_owners_ = (uint64_t)&v68[4 * v65];
        if (shared_weak_owners)
          operator delete(shared_weak_owners);
        goto LABEL_237;
      }
    }
    else
    {
      *((_QWORD *)v26 + 6) = v28;
      *((_QWORD *)v26 + 7) = 0;
      v34 = *a5;
      v33 = a5[1];
      if (!v33)
        goto LABEL_32;
    }
    v41 = (unint64_t *)(v33 + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    goto LABEL_32;
  }
  v17 = v16;
  v609 = a5;
  v18 = v16[8];
  v19 = *(std::__shared_weak_count **)(v18 + 32);
  if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    v21 = v20;
    v22 = *(uint8_t **)(v18 + 24);
    v23 = *a4;
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
    v206 = v22 == v23;
    a3 = v607;
    if (!v206)
    {
LABEL_20:
      if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
      v35 = (id)GEOGetVectorKitElevatedStrokesLog_log;
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        goto LABEL_170;
      v624[0] = *(_WORD *)a2;
      v625 = *(_QWORD *)(a2 + 4);
      md::debugString<geo::QuadTile>(&v644, v624);
      if (SHIBYTE(v645) >= 0)
        v36 = (uint64_t)&v644;
      else
        v36 = v644;
      v37 = v17[8];
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = std::__shared_weak_count::lock(v38);
        if (v39)
        {
          v40 = *(_QWORD *)(v37 + 24);
          goto LABEL_144;
        }
      }
      else
      {
        v39 = 0;
      }
      v40 = 0;
LABEL_144:
      v129 = *a4;
      v130 = v17[8];
      v131 = *(std::__shared_weak_count **)(v130 + 32);
      if (v131)
      {
        v132 = std::__shared_weak_count::lock(v131);
        if (v132)
        {
          v133 = *(_QWORD *)(v130 + 24);
LABEL_149:
          v134 = &v648;
          gdc::LayerDataRequestKey::keysInt32Str(&v648, (unsigned __int16 *)(v133 + 16));
          if ((v648.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v134 = (std::string *)v648.__r_.__value_.__r.__words[0];
          gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)*a4 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = &__p;
          else
            v135 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v36;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2048;
          v656 = v129;
          *(_WORD *)v657 = 2080;
          *(_QWORD *)&v657[2] = v134;
          *(_WORD *)&v657[10] = 2080;
          *(_QWORD *)&v657[12] = v135;
          _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_DEBUG, "For draping key %s : Mismatch of ground tile data ptrs %p and %p.  Keys are %s, %s", buf, 0x34u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          a3 = v607;
          if (SHIBYTE(v648.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v648.__r_.__value_.__l.__data_);
          if (v132)
          {
            v136 = (unint64_t *)&v132->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          if (v39)
          {
            v138 = (unint64_t *)&v39->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if (SHIBYTE(v645) < 0)
            operator delete((void *)v644);
LABEL_170:

          goto LABEL_171;
        }
      }
      else
      {
        v132 = 0;
      }
      v133 = 0;
      goto LABEL_149;
    }
  }
  else if (*a4)
  {
    goto LABEL_20;
  }
LABEL_171:
  v140 = v17[8];
  v141 = *(std::__shared_weak_count **)(v140 + 48);
  if (v141 && (v142 = std::__shared_weak_count::lock(v141)) != 0)
  {
    v143 = v142;
    v144 = *(_QWORD *)(v140 + 40);
    v145 = *a5;
    v146 = (unint64_t *)&v142->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v143);
    }
    v206 = v144 == v145;
    a3 = v607;
    if (!v206)
    {
LABEL_181:
      if (GEOGetVectorKitElevatedStrokesLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitElevatedStrokesLog_onceToken, &__block_literal_global_37);
      v148 = (id)GEOGetVectorKitElevatedStrokesLog_log;
      if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
        goto LABEL_219;
      v622[0] = *(_WORD *)a3;
      v623 = *(_QWORD *)(a3 + 4);
      md::debugString<geo::QuadTile>(&v644, v622);
      if (SHIBYTE(v645) >= 0)
        v149 = (uint64_t)&v644;
      else
        v149 = v644;
      v150 = v17[8];
      v151 = *(std::__shared_weak_count **)(v150 + 48);
      if (v151)
      {
        v152 = std::__shared_weak_count::lock(v151);
        if (v152)
        {
          v153 = *(_QWORD *)(v150 + 40);
          goto LABEL_192;
        }
      }
      else
      {
        v152 = 0;
      }
      v153 = 0;
LABEL_192:
      v154 = (uint8_t *)*a5;
      v155 = v17[8];
      v156 = *(std::__shared_weak_count **)(v155 + 48);
      if (v156)
      {
        v157 = std::__shared_weak_count::lock(v156);
        if (v157)
        {
          v158 = *(_QWORD *)(v155 + 40);
          goto LABEL_197;
        }
      }
      else
      {
        v157 = 0;
      }
      v158 = 0;
LABEL_197:
      v159 = &v648;
      gdc::LayerDataRequestKey::keysInt32Str(&v648, (unsigned __int16 *)(v158 + 16));
      if ((v648.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v159 = (std::string *)v648.__r_.__value_.__r.__words[0];
      gdc::LayerDataRequestKey::keysInt32Str(&__p, (unsigned __int16 *)(*v609 + 16));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v160 = &__p;
      else
        v160 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v149;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v153;
      *(_WORD *)&buf[22] = 2048;
      v656 = v154;
      *(_WORD *)v657 = 2080;
      *(_QWORD *)&v657[2] = v159;
      *(_WORD *)&v657[10] = 2080;
      *(_QWORD *)&v657[12] = v160;
      _os_log_impl(&dword_19F029000, v148, OS_LOG_TYPE_DEBUG, "For draping key %s : Mismatch of overlay tile data ptrs %p and %p.  Keys are %s, %s", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v648.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_204:
          if (!v157)
          {
LABEL_212:
            if (v152)
            {
              v163 = (unint64_t *)&v152->__shared_owners_;
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            if (SHIBYTE(v645) < 0)
              operator delete((void *)v644);
LABEL_219:

            return;
          }
LABEL_208:
          v161 = (unint64_t *)&v157->__shared_owners_;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
          goto LABEL_212;
        }
      }
      else if ((SHIBYTE(v648.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_204;
      }
      operator delete(v648.__r_.__value_.__l.__data_);
      if (!v157)
        goto LABEL_212;
      goto LABEL_208;
    }
  }
  else if (*a5)
  {
    goto LABEL_181;
  }
}

void sub_19F2160D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a68;

  std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::~vector[abi:nn180100](&a65);
  std::__shared_weak_count::__release_weak(a23);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,std::__unordered_map_hasher<md::OverlayKey,std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,md::OverlayKeyHash,std::equal_to<md::OverlayKey>,true>,std::__unordered_map_equal<md::OverlayKey,std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>,std::equal_to<md::OverlayKey>,md::OverlayKeyHash,true>,std::allocator<std::__hash_value_type<md::OverlayKey,std::shared_ptr<md::DrapingTaskInfo>>>>::find<md::OverlayKey>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = *a2;
  v3 = a2[1];
  v4 = (v3
      + ((v2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v2 - 0x61C8864680B583EBLL);
  v5 = *((int *)a2 + 1);
  v6 = *((int *)a2 + 2);
  v7 = (v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v8 = (v6 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v9 = *((unsigned __int16 *)a2 + 12);
  v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v11 = *((unsigned int *)a2 + 7);
  v12 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  if (a2[40])
    v12 ^= (v12 << 6) - 0x61C8864680B583EBLL + (v12 >> 2) + *((_QWORD *)a2 + 4);
  v13 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v13)
    return 0;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v12;
    if (v12 >= *(_QWORD *)&v13)
      v15 = v12 % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & v12;
  }
  v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = *v16;
  if (!v17)
    return 0;
  v18 = *((_QWORD *)a2 + 4);
  if (v14.u32[0] <= 1uLL)
  {
    v19 = *(_QWORD *)&v13 - 1;
    if (!a2[40])
    {
      while (1)
      {
        v22 = v17[1];
        if (v22 == v12)
        {
          if (__PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v3, v2)
            && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v6, v5)
            && __PAIR64__(*((_DWORD *)v17 + 11), *((unsigned __int16 *)v17 + 20)) == __PAIR64__(v11, v9)
            && !*((_BYTE *)v17 + 56))
          {
            return v17;
          }
        }
        else if ((v22 & v19) != v15)
        {
          return 0;
        }
        result = 0;
        v17 = (uint64_t *)*v17;
        if (!v17)
          return result;
      }
    }
    while (1)
    {
      v20 = v17[1];
      if (v20 == v12)
      {
        if (*((unsigned __int8 *)v17 + 16) == (_DWORD)v2
          && *((unsigned __int8 *)v17 + 17) == (_DWORD)v3
          && *((_DWORD *)v17 + 5) == (_DWORD)v5
          && *((_DWORD *)v17 + 6) == (_DWORD)v6
          && *((unsigned __int16 *)v17 + 20) == (_DWORD)v9
          && *((_DWORD *)v17 + 11) == (_DWORD)v11
          && *((_BYTE *)v17 + 56)
          && v17[6] == v18)
        {
          return v17;
        }
      }
      else if ((v20 & v19) != v15)
      {
        return 0;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        return 0;
    }
  }
  if (!a2[40])
  {
    while (1)
    {
      v24 = v17[1];
      if (v24 == v12)
      {
        if (__PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v3, v2)
          && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v6, v5)
          && __PAIR64__(*((_DWORD *)v17 + 11), *((unsigned __int16 *)v17 + 20)) == __PAIR64__(v11, v9)
          && !*((_BYTE *)v17 + 56))
        {
          return v17;
        }
      }
      else
      {
        if (v24 >= *(_QWORD *)&v13)
          v24 %= *(_QWORD *)&v13;
        if (v24 != v15)
          return 0;
      }
      result = 0;
      v17 = (uint64_t *)*v17;
      if (!v17)
        return result;
    }
  }
  while (1)
  {
    v23 = v17[1];
    if (v23 == v12)
      break;
    if (v23 >= *(_QWORD *)&v13)
      v23 %= *(_QWORD *)&v13;
    if (v23 != v15)
      return 0;
LABEL_37:
    v17 = (uint64_t *)*v17;
    if (!v17)
      return 0;
  }
  if (*((unsigned __int8 *)v17 + 16) != (_DWORD)v2
    || *((unsigned __int8 *)v17 + 17) != (_DWORD)v3
    || *((_DWORD *)v17 + 5) != (_DWORD)v5
    || *((_DWORD *)v17 + 6) != (_DWORD)v6
    || *((unsigned __int16 *)v17 + 20) != (_DWORD)v9
    || *((_DWORD *)v17 + 11) != (_DWORD)v11
    || !*((_BYTE *)v17 + 56)
    || v17[6] != v18)
  {
    goto LABEL_37;
  }
  return v17;
}

void md::ClientDrapedPolygonRenderLayer::layout(void (****this)(void), const md::LayoutContext *a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(void);
  _QWORD *v18;
  int8x8_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (***v29)(void);
  void (***v30)(void);
  void (**v31)(void);

  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_30;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v5 <= 0xC97B9E962ADF4AD4)
      v7 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0xC97B9E962ADF4AD4;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8 || (v9 = (_QWORD *)*v8) == 0)
  {
LABEL_30:
    md::ElevatedPolygonRenderResources::resetPools(this[60]);
    v17 = this[60];
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v17[99]);
    v17[98] = (void (**)(void))(v17 + 99);
    v17[100] = 0;
    v17[99] = 0;
    v18 = (_QWORD *)*((_QWORD *)a2 + 1);
    v19 = (int8x8_t)v18[1];
    if (!*(_QWORD *)&v19)
      goto LABEL_53;
    v20 = (uint8x8_t)vcnt_s8(v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v21 = 0x1B9039CBDAB12E5CLL;
      if (*(_QWORD *)&v19 <= 0x1B9039CBDAB12E5CuLL)
        v21 = 0x1B9039CBDAB12E5CuLL % *(_QWORD *)&v19;
    }
    else
    {
      v21 = (*(_QWORD *)&v19 - 1) & 0x1B9039CBDAB12E5CLL;
    }
    v22 = *(_QWORD **)(*v18 + 8 * v21);
    if (!v22)
      goto LABEL_53;
    v23 = (_QWORD *)*v22;
    if (!v23)
      goto LABEL_53;
    if (v20.u32[0] < 2uLL)
    {
      v24 = *(_QWORD *)&v19 - 1;
      while (1)
      {
        v26 = v23[1];
        if (v26 == 0x1B9039CBDAB12E5CLL)
        {
          if (v23[2] == 0x1B9039CBDAB12E5CLL)
            goto LABEL_51;
        }
        else if ((v26 & v24) != v21)
        {
          goto LABEL_53;
        }
        v23 = (_QWORD *)*v23;
        if (!v23)
          goto LABEL_53;
      }
    }
    while (1)
    {
      v25 = v23[1];
      if (v25 == 0x1B9039CBDAB12E5CLL)
      {
        if (v23[2] == 0x1B9039CBDAB12E5CLL)
        {
LABEL_51:
          v27 = v23[5];
          if (*(_QWORD *)(v27 + 8) == 0x1B9039CBDAB12E5CLL)
          {
            v28 = *(_QWORD *)(v27 + 32);
LABEL_54:
            v29 = this[34];
            v30 = this[35];
            while (v29 != v30)
            {
              v31 = *v29;
              if (*((_BYTE *)*v29 + 456))
              {
                md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay((uint64_t)this, a2, (uint64_t *)v28, *v29, 0);
                if (*(_BYTE *)(v28 + 8))
                  md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay((uint64_t)this, a2, (uint64_t *)v28, v31, 1);
              }
              ++v29;
            }
            return;
          }
LABEL_53:
          v28 = 0;
          goto LABEL_54;
        }
      }
      else
      {
        if (v25 >= *(_QWORD *)&v19)
          v25 %= *(_QWORD *)&v19;
        if (v25 != v21)
          goto LABEL_53;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_53;
    }
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0xC97B9E962ADF4AD4)
      {
        if (v9[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_30;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0xC97B9E962ADF4AD4)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_30;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_30;
  }
  if (v9[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0xC97B9E962ADF4AD4)
    goto LABEL_30;
  v14 = *(uint64_t **)(v13 + 32);
  if (!v14)
    goto LABEL_30;
  v15 = *v14;
  v16 = v14[1];
  if (v15 != v16)
  {
    while (*(_BYTE *)v15 != 11)
    {
      v15 += 16;
      if (v15 == v16)
        return;
    }
  }
  if (v15 != v16 && *(_QWORD *)(v15 + 8))
    goto LABEL_30;
}

void md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay(uint64_t a1, const md::LayoutContext *a2, uint64_t *a3, _QWORD *a4, int a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  double v38;
  int8x16_t v39;
  __n128 v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  float v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _DWORD v78[4];
  unsigned __int8 v79[16];
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  uint64_t v86;
  char v87;
  unsigned __int8 v88[4];
  uint64_t v89;
  int v90;
  char v91;
  char v92[8];
  _QWORD v93[3];
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v8 = a4[50];
  v9 = *(unsigned __int8 *)(v8 + 169);
  v10 = *(_QWORD *)(v8 + 172);
  v11 = *(_BYTE *)(v8 + 168);
  v12 = a4[48];
  v13 = *(unsigned __int8 *)(v12 + 169);
  v14 = *(_QWORD *)(v12 + 172);
  v15 = *(unsigned __int8 *)(v12 + 168);
  v16 = *(unsigned __int16 *)(v12 + 24);
  v17 = *(unsigned int *)(v12 + 8);
  if (a5)
  {
    v18 = *a3;
    v19 = *((unsigned __int8 *)a3 + 8);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v20 = *(_DWORD *)(v8 + 8);
  v81 = *(_BYTE *)(v12 + 168);
  v82 = v13;
  v83 = v14;
  v84 = v16;
  v85 = v17;
  v86 = v18;
  v87 = v19;
  v88[0] = v11;
  v88[1] = v9;
  v89 = v10;
  v90 = v20;
  v75 = v14;
  v21 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>((_QWORD *)a3[2], v88);
  if (v21)
  {
    v22 = (v13
         + ((v15 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v15 - 0x61C8864680B583EBLL);
    v23 = ((v22 << 6) + (int)v75 + (v22 >> 2) - 0x61C8864680B583EBLL) ^ v22;
    v24 = ((v23 << 6) + SHIDWORD(v75) + (v23 >> 2) - 0x61C8864680B583EBLL) ^ v23;
    v25 = (v16 + (v24 << 6) + (v24 >> 2) - 0x61C8864680B583EBLL) ^ v24;
    v26 = (v17 + (v25 << 6) + (v25 >> 2) - 0x61C8864680B583EBLL) ^ v25;
    v27 = ((v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v18) ^ v26;
    if (!v19)
      v27 = v26;
    v28 = (int8x8_t)v21[7];
    if (v28)
    {
      v29 = (uint8x8_t)vcnt_s8(v28);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v30 = v27;
        if (v27 >= *(_QWORD *)&v28)
          v30 = v27 % *(_QWORD *)&v28;
      }
      else
      {
        v30 = (*(_QWORD *)&v28 - 1) & v27;
      }
      v31 = *(uint64_t ***)(v21[6] + 8 * v30);
      if (v31)
      {
        v32 = *v31;
        if (v32)
        {
          if (v29.u32[0] <= 1uLL)
          {
            v33 = *(_QWORD *)&v28 - 1;
            if (!v19)
            {
              while (1)
              {
                v35 = v32[1];
                if (v27 == v35)
                {
                  if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v15
                    && *((unsigned __int8 *)v32 + 17) == (_DWORD)v13
                    && *(uint64_t *)((char *)v32 + 20) == v75
                    && *((unsigned __int16 *)v32 + 20) == (_DWORD)v16
                    && *((_DWORD *)v32 + 11) == (_DWORD)v17
                    && !*((_BYTE *)v32 + 56))
                  {
                    goto LABEL_37;
                  }
                }
                else if ((v35 & v33) != v30)
                {
                  return;
                }
                v32 = (uint64_t *)*v32;
                if (!v32)
                  return;
              }
            }
            while (1)
            {
              v34 = v32[1];
              if (v27 == v34)
              {
                if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v15
                  && *((unsigned __int8 *)v32 + 17) == (_DWORD)v13
                  && *(uint64_t *)((char *)v32 + 20) == v75
                  && *((unsigned __int16 *)v32 + 20) == (_DWORD)v16
                  && *((_DWORD *)v32 + 11) == (_DWORD)v17
                  && *((_BYTE *)v32 + 56)
                  && v32[6] == v18)
                {
                  goto LABEL_37;
                }
              }
              else if ((v34 & v33) != v30)
              {
                return;
              }
              v32 = (uint64_t *)*v32;
              if (!v32)
                return;
            }
          }
          if (!v19)
          {
            while (1)
            {
              v48 = v32[1];
              if (v27 == v48)
              {
                if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v15
                  && *((unsigned __int8 *)v32 + 17) == (_DWORD)v13
                  && *(uint64_t *)((char *)v32 + 20) == v75
                  && *((unsigned __int16 *)v32 + 20) == (_DWORD)v16
                  && *((_DWORD *)v32 + 11) == (_DWORD)v17
                  && !*((_BYTE *)v32 + 56))
                {
                  goto LABEL_37;
                }
              }
              else
              {
                if (v48 >= *(_QWORD *)&v28)
                  v48 %= *(_QWORD *)&v28;
                if (v48 != v30)
                  return;
              }
              v32 = (uint64_t *)*v32;
              if (!v32)
                return;
            }
          }
          do
          {
            v47 = v32[1];
            if (v27 == v47)
            {
              if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v15
                && *((unsigned __int8 *)v32 + 17) == (_DWORD)v13
                && *(uint64_t *)((char *)v32 + 20) == v75
                && *((unsigned __int16 *)v32 + 20) == (_DWORD)v16
                && *((_DWORD *)v32 + 11) == (_DWORD)v17
                && *((_BYTE *)v32 + 56)
                && v32[6] == v18)
              {
LABEL_37:
                v36 = atomic_load((unsigned __int8 *)v32[8]);
                if (v36 == 2)
                {
                  v37 = v32[8];
                  md::ElevatedPolygonContext::ElevatedPolygonContext((md::ElevatedPolygonContext *)v79, a2, *(_BYTE *)(a1 + 496), *(const md::StandardPassList **)(*(_QWORD *)(a1 + 40) + 24), *(float *)v29.i32);
                  v41 = a4[50];
                  v42 = *(unsigned __int8 *)(v41 + 169);
                  v43 = *(unsigned __int8 *)(a4[1] + 169);
                  if (v42 <= v43)
                    v44 = *(unsigned __int8 *)(a4[1] + 169);
                  else
                    v44 = *(unsigned __int8 *)(v41 + 169);
                  if (v9 == v44)
                  {
                    v45 = -1.0;
                    v46 = 0.0;
                    v39.i32[0] = 1.0;
                    v40.n128_u32[0] = 1.0;
                  }
                  else
                  {
                    if (v42 < v43)
                      v41 = a4[1];
                    v49 = 1 << (v44 - v9);
                    v40.n128_f32[0] = (float)v49--;
                    v46 = -(float)(*(_DWORD *)(v41 + 176) & v49);
                    *(float *)v39.i32 = v40.n128_f32[0] - (float)(*(_DWORD *)(v41 + 172) & v49);
                    v45 = -v40.n128_f32[0];
                  }
                  v78[0] = v40.n128_u32[0];
                  *(float *)&v78[1] = v45;
                  *(float *)&v78[2] = v46;
                  v78[3] = v39.i32[0];
                  if (*(_DWORD *)(v37 + 56))
                  {
                    v50 = 0;
                    do
                    {
                      v51 = *(_DWORD *)(*(_QWORD *)(v37 + 88) + 4 * v50);
                      v52 = *(_QWORD *)(a4[48] + 752);
                      if (a5)
                      {
                        md::ElevatedStrokeGroup::selectedStyleQuery((md::ElevatedStrokeGroup *)&v76, (uint64_t *)(v52 + 160 * v51));
                      }
                      else
                      {
                        v53 = v52 + 160 * v51;
                        v76 = *(_QWORD *)(v53 + 104);
                        v54 = *(std::__shared_weak_count **)(v53 + 112);
                        v77 = v54;
                        if (v54)
                        {
                          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                          do
                            v56 = __ldxr(p_shared_owners);
                          while (__stxr(v56 + 1, p_shared_owners));
                        }
                      }
                      if (*(_DWORD *)(v37 + 60))
                      {
                        v57 = 0;
                        do
                        {
                          v58 = v50 + *(_DWORD *)(v37 + 56) * v57;
                          v59 = *(_QWORD *)(v37 + 112);
                          v60 = v59 + 80 * v58;
                          LOBYTE(v93[0]) = 0;
                          v94 = 0;
                          if (*(_BYTE *)(v60 + 24))
                          {
                            v93[0] = *(_QWORD *)v60;
                            v61 = *(_QWORD *)(v60 + 8);
                            v93[1] = v61;
                            if (v61)
                            {
                              v62 = (unint64_t *)(v61 + 8);
                              do
                                v63 = __ldxr(v62);
                              while (__stxr(v63 + 1, v62));
                            }
                            v93[2] = *(_QWORD *)(v60 + 16);
                            v94 = 1;
                          }
                          LOBYTE(v95) = 0;
                          v98 = 0;
                          if (*(_BYTE *)(v60 + 56))
                          {
                            v95 = *(_QWORD *)(v60 + 32);
                            v64 = *(_QWORD *)(v60 + 40);
                            v96 = v64;
                            if (v64)
                            {
                              v65 = (unint64_t *)(v64 + 8);
                              do
                                v66 = __ldxr(v65);
                              while (__stxr(v66 + 1, v65));
                            }
                            v97 = *(_QWORD *)(v60 + 48);
                            v98 = 1;
                          }
                          v67 = v59 + 80 * v58;
                          v99 = *(_QWORD *)(v67 + 64);
                          v68 = *(_QWORD *)(v67 + 72);
                          v100 = v68;
                          if (v68)
                          {
                            v69 = (unint64_t *)(v68 + 8);
                            do
                              v70 = __ldxr(v69);
                            while (__stxr(v70 + 1, v69));
                          }
                          v101 = 1;
                          LODWORD(v38) = 981668463;
                          if (((*(_QWORD *)(*(_QWORD *)(v37 + 64) + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
                            *(float *)&v38 = 0.0;
                          v80 = LODWORD(v38);
                          md::layoutElevatedPolygonMeshes<md::ElevatedPolygonRenderable>((uint64_t)a2, (uint64_t)a4, v79, a1 + 456, *(_QWORD *)(a1 + 480), (uint64_t)v92, &v76, v78, v38, v39, v40);
                          if (v101 != -1)
                            ((void (*)(char *, _QWORD *))off_1E42F86A8[v101])(&v91, v93);
                          ++v57;
                        }
                        while (v57 < *(unsigned int *)(v37 + 60));
                      }
                      v71 = v77;
                      if (v77)
                      {
                        v72 = (unint64_t *)&v77->__shared_owners_;
                        do
                          v73 = __ldaxr(v72);
                        while (__stlxr(v73 - 1, v72));
                        if (!v73)
                        {
                          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                          std::__shared_weak_count::__release_weak(v71);
                        }
                      }
                      ++v50;
                    }
                    while (v50 < *(unsigned int *)(v37 + 56));
                  }
                }
                return;
              }
            }
            else
            {
              if (v47 >= *(_QWORD *)&v28)
                v47 %= *(_QWORD *)&v28;
              if (v47 != v30)
                return;
            }
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
      }
    }
  }
}

void sub_19F2170D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (a47 != -1)
    ((void (*)(char *, uint64_t))off_1E42F86A8[a47])(&a35, a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = *((unsigned int *)a2 + 6);
  v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(_QWORD *)&v2)
      v13 = v11 % *(_QWORD *)&v2;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v2 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v18 = result[1];
        if (v18 == v11)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((_DWORD *)result + 10) == (_DWORD)v10)
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v17 == v11)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((_DWORD *)result + 10) == (_DWORD)v10)
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(_QWORD *)&v2)
          v17 %= *(_QWORD *)&v2;
        if (v17 != v13)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void (***md::ElevatedPolygonRenderResources::resetPools(void (***this)(void)))(void)
{
  void (***v1)(void);
  void (**v2)(void);
  void (*v3)(void);
  void (*v4)(void);
  char *v5;
  void (**v6)(void);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(void);
  void (*v14)(void);
  void (*v15)(void);
  uint64_t v16;
  unint64_t v17;
  void (***v18)(void);
  uint64_t v19;
  void (***v20)(void);
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  void (**v24)(void);
  void (*v25)(void);
  void (*v26)(void);
  void (**v27)(void);
  void (***v28)(void);
  void (*v29)(void);
  char *v30;
  void (**v31)(void);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (***v38)(void);
  void (*v39)(void);
  void (*v40)(void);
  uint64_t v41;
  unint64_t v42;
  void (***v43)(void);
  uint64_t v44;
  void (***v45)(void);
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  void (**v49)(void);
  void (*v50)(void);
  void (*v51)(void);
  void (**v52)(void);
  void (***v53)(void);
  void (*v54)(void);
  char *v55;
  void (**v56)(void);
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (***v63)(void);
  void (*v64)(void);
  void (*v65)(void);
  uint64_t v66;
  unint64_t v67;
  void (***v68)(void);
  uint64_t v69;
  void (***v70)(void);
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  void (**v74)(void);
  void (*v75)(void);
  void (*v76)(void);
  void (**v77)(void);
  void (***v78)(void);
  void (*v79)(void);
  char *v80;
  void (**v81)(void);
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (***v88)(void);
  void (*v89)(void);
  void (*v90)(void);
  uint64_t v91;
  unint64_t v92;
  void (***v93)(void);
  uint64_t v94;
  void (***v95)(void);
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  void (**v99)(void);
  void (*v100)(void);
  void (*v101)(void);
  void (**v102)(void);
  void (**v103)(void);
  unint64_t v104;
  void (***v105)(void);
  void (**v106)(void);

  v1 = this;
  v2 = *this;
  v3 = (*this)[4];
  v4 = (*this)[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (char *)v2[1];
  do
  {
    v6 = *(void (***)(void))v3;
    v7 = (unint64_t)v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *(_QWORD *)v5 = v6;
      v5 += 8;
      goto LABEL_4;
    }
    v8 = (v5 - (char *)*v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_138:
      abort();
    v9 = v7 - (_QWORD)*v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = v11;
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v13 = &this[v8];
      v11 = (uint64_t)&this[v12];
      if (this)
        *v13 = v6;
    }
    else
    {
      v13 = (void (***)(void))(8 * v8);
    }
    v15 = *v2;
    v14 = v2[1];
    v16 = (char *)v14 - (char *)*v2;
    if (v14 == *v2)
    {
      v18 = v13;
      goto LABEL_29;
    }
    v17 = v16 - 8;
    if ((unint64_t)(v16 - 8) < 0x38)
    {
      v18 = v13;
    }
    else
    {
      v18 = v13;
      if ((unint64_t)((char *)v14 - (char *)v13) >= 0x20)
      {
        v19 = (v17 >> 3) + 1;
        v20 = v13 - 2;
        v21 = (__int128 *)((char *)v14 - 16);
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 4;
          v21 -= 2;
          v22 -= 4;
        }
        while (v22);
        v18 = &v13[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
        v14 = (void (*)(void))((char *)v14 - 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL));
        if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v24 = (void (**)(void))*((_QWORD *)v14 - 1);
      v14 = (void (*)(void))((char *)v14 - 8);
      *--v18 = v24;
    }
    while (v14 != v15);
LABEL_28:
    v14 = *v2;
LABEL_29:
    v5 = (char *)(v13 + 1);
    *v2 = (void (*)(void))v18;
    v2[1] = (void (*)(void))(v13 + 1);
    v25 = v2[2];
    v2[2] = (void (*)(void))v11;
    if (v14)
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), void (*)(void), int64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v14, (char *)v25 - (char *)v14);
LABEL_4:
    v2[1] = (void (*)(void))v5;
    v3 = (void (*)(void))((char *)v3 + 8);
  }
  while (v3 != v4);
  v26 = v2[4];
  if (v26 != v2[5])
    v2[5] = v26;
LABEL_33:
  v27 = v1[1];
  v28 = (void (***)(void))v27[4];
  v29 = v27[5];
  if (v28 == (void (***)(void))v29)
    goto LABEL_65;
  v30 = (char *)v27[1];
  while (2)
  {
    v31 = *v28;
    v32 = (unint64_t)v27[2];
    if ((unint64_t)v30 < v32)
    {
      if (v30)
        *(_QWORD *)v30 = v31;
      v30 += 8;
      goto LABEL_36;
    }
    v33 = (v30 - (char *)*v27) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      goto LABEL_138;
    v34 = v32 - (_QWORD)*v27;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      v37 = v36;
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), uint64_t, uint64_t))(*(_QWORD *)v27[3] + 16))(v27[3], 8 * v36, 8);
      v38 = &this[v33];
      v36 = (uint64_t)&this[v37];
      if (this)
        *v38 = v31;
    }
    else
    {
      v38 = (void (***)(void))(8 * v33);
    }
    v40 = *v27;
    v39 = v27[1];
    v41 = (char *)v39 - (char *)*v27;
    if (v39 == *v27)
    {
      v43 = v38;
      goto LABEL_61;
    }
    v42 = v41 - 8;
    if ((unint64_t)(v41 - 8) < 0x38)
    {
      v43 = v38;
      do
      {
LABEL_59:
        v49 = (void (**)(void))*((_QWORD *)v39 - 1);
        v39 = (void (*)(void))((char *)v39 - 8);
        *--v43 = v49;
      }
      while (v39 != v40);
      goto LABEL_60;
    }
    v43 = v38;
    if ((unint64_t)((char *)v39 - (char *)v38) < 0x20)
      goto LABEL_59;
    v44 = (v42 >> 3) + 1;
    v45 = v38 - 2;
    v46 = (__int128 *)((char *)v39 - 16);
    v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *((_OWORD *)v45 - 1) = *(v46 - 1);
      *(_OWORD *)v45 = v48;
      v45 -= 4;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    v43 = &v38[-(v44 & 0x3FFFFFFFFFFFFFFCLL)];
    v39 = (void (*)(void))((char *)v39 - 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v39 = *v27;
LABEL_61:
    v30 = (char *)(v38 + 1);
    *v27 = (void (*)(void))v43;
    v27[1] = (void (*)(void))(v38 + 1);
    v50 = v27[2];
    v27[2] = (void (*)(void))v36;
    if (v39)
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), void (*)(void), int64_t))(*(_QWORD *)v27[3] + 40))(v27[3], v39, (char *)v50 - (char *)v39);
LABEL_36:
    v27[1] = (void (*)(void))v30;
    if (++v28 != (void (***)(void))v29)
      continue;
    break;
  }
  v51 = v27[4];
  if (v51 != v27[5])
    v27[5] = v51;
LABEL_65:
  v52 = v1[2];
  v53 = (void (***)(void))v52[4];
  v54 = v52[5];
  if (v53 == (void (***)(void))v54)
    goto LABEL_97;
  v55 = (char *)v52[1];
  while (2)
  {
    v56 = *v53;
    v57 = (unint64_t)v52[2];
    if ((unint64_t)v55 < v57)
    {
      if (v55)
        *(_QWORD *)v55 = v56;
      v55 += 8;
      goto LABEL_68;
    }
    v58 = (v55 - (char *)*v52) >> 3;
    if ((unint64_t)(v58 + 1) >> 61)
      goto LABEL_138;
    v59 = v57 - (_QWORD)*v52;
    v60 = v59 >> 2;
    if (v59 >> 2 <= (unint64_t)(v58 + 1))
      v60 = v58 + 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    if (v61)
    {
      v62 = v61;
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), uint64_t, uint64_t))(*(_QWORD *)v52[3] + 16))(v52[3], 8 * v61, 8);
      v63 = &this[v58];
      v61 = (uint64_t)&this[v62];
      if (this)
        *v63 = v56;
    }
    else
    {
      v63 = (void (***)(void))(8 * v58);
    }
    v65 = *v52;
    v64 = v52[1];
    v66 = (char *)v64 - (char *)*v52;
    if (v64 == *v52)
    {
      v68 = v63;
      goto LABEL_93;
    }
    v67 = v66 - 8;
    if ((unint64_t)(v66 - 8) < 0x38)
    {
      v68 = v63;
      do
      {
LABEL_91:
        v74 = (void (**)(void))*((_QWORD *)v64 - 1);
        v64 = (void (*)(void))((char *)v64 - 8);
        *--v68 = v74;
      }
      while (v64 != v65);
      goto LABEL_92;
    }
    v68 = v63;
    if ((unint64_t)((char *)v64 - (char *)v63) < 0x20)
      goto LABEL_91;
    v69 = (v67 >> 3) + 1;
    v70 = v63 - 2;
    v71 = (__int128 *)((char *)v64 - 16);
    v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = *v71;
      *((_OWORD *)v70 - 1) = *(v71 - 1);
      *(_OWORD *)v70 = v73;
      v70 -= 4;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    v68 = &v63[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
    v64 = (void (*)(void))((char *)v64 - 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL));
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v64 = *v52;
LABEL_93:
    v55 = (char *)(v63 + 1);
    *v52 = (void (*)(void))v68;
    v52[1] = (void (*)(void))(v63 + 1);
    v75 = v52[2];
    v52[2] = (void (*)(void))v61;
    if (v64)
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), void (*)(void), int64_t))(*(_QWORD *)v52[3] + 40))(v52[3], v64, (char *)v75 - (char *)v64);
LABEL_68:
    v52[1] = (void (*)(void))v55;
    if (++v53 != (void (***)(void))v54)
      continue;
    break;
  }
  v76 = v52[4];
  if (v76 != v52[5])
    v52[5] = v76;
LABEL_97:
  v77 = v1[3];
  v78 = (void (***)(void))v77[4];
  v79 = v77[5];
  if (v78 == (void (***)(void))v79)
    goto LABEL_129;
  v80 = (char *)v77[1];
  while (2)
  {
    v81 = *v78;
    v82 = (unint64_t)v77[2];
    if ((unint64_t)v80 < v82)
    {
      if (v80)
        *(_QWORD *)v80 = v81;
      v80 += 8;
      goto LABEL_100;
    }
    v83 = (v80 - (char *)*v77) >> 3;
    if ((unint64_t)(v83 + 1) >> 61)
      goto LABEL_138;
    v84 = v82 - (_QWORD)*v77;
    v85 = v84 >> 2;
    if (v84 >> 2 <= (unint64_t)(v83 + 1))
      v85 = v83 + 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
      v86 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v86 = v85;
    if (v86)
    {
      v87 = v86;
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), uint64_t, uint64_t))(*(_QWORD *)v77[3] + 16))(v77[3], 8 * v86, 8);
      v88 = &this[v83];
      v86 = (uint64_t)&this[v87];
      if (this)
        *v88 = v81;
    }
    else
    {
      v88 = (void (***)(void))(8 * v83);
    }
    v90 = *v77;
    v89 = v77[1];
    v91 = (char *)v89 - (char *)*v77;
    if (v89 == *v77)
    {
      v93 = v88;
      goto LABEL_125;
    }
    v92 = v91 - 8;
    if ((unint64_t)(v91 - 8) < 0x38)
    {
      v93 = v88;
      do
      {
LABEL_123:
        v99 = (void (**)(void))*((_QWORD *)v89 - 1);
        v89 = (void (*)(void))((char *)v89 - 8);
        *--v93 = v99;
      }
      while (v89 != v90);
      goto LABEL_124;
    }
    v93 = v88;
    if ((unint64_t)((char *)v89 - (char *)v88) < 0x20)
      goto LABEL_123;
    v94 = (v92 >> 3) + 1;
    v95 = v88 - 2;
    v96 = (__int128 *)((char *)v89 - 16);
    v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v98 = *v96;
      *((_OWORD *)v95 - 1) = *(v96 - 1);
      *(_OWORD *)v95 = v98;
      v95 -= 4;
      v96 -= 2;
      v97 -= 4;
    }
    while (v97);
    v93 = &v88[-(v94 & 0x3FFFFFFFFFFFFFFCLL)];
    v89 = (void (*)(void))((char *)v89 - 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL));
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v89 = *v77;
LABEL_125:
    v80 = (char *)(v88 + 1);
    *v77 = (void (*)(void))v93;
    v77[1] = (void (*)(void))(v88 + 1);
    v100 = v77[2];
    v77[2] = (void (*)(void))v86;
    if (v89)
      this = (void (***)(void))(*(uint64_t (**)(void (*)(void), void (*)(void), int64_t))(*(_QWORD *)v77[3] + 40))(v77[3], v89, (char *)v100 - (char *)v89);
LABEL_100:
    v77[1] = (void (*)(void))v80;
    if (++v78 != (void (***)(void))v79)
      continue;
    break;
  }
  v101 = v77[4];
  if (v101 != v77[5])
    v77[5] = v101;
LABEL_129:
  v102 = v1[91];
  if (v102)
  {
    do
    {
      if (v102[1])
      {
        v104 = 0;
        v105 = (void (***)(void))(v102 + 2);
        do
        {
          v106 = *v105;
          v105 += 15;
          (*v106)();
          ++v104;
          this = v105;
        }
        while (v104 < (unint64_t)v102[1]);
      }
      v102[1] = 0;
      v102 = (void (**)(void))*v102;
    }
    while (v102);
    v103 = v1[91];
  }
  else
  {
    v103 = 0;
  }
  v1[92] = v103;
  return this;
}

void gms::TextureStore<ggl::Texture2D>::addTexture(uint64_t a1, __n128 *a2, int a3)
{
  geo::read_write_lock *v6;
  const char *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  geo::read_write_lock *v21;
  const char *v22;

  v6 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"write lock", v7);
  v8 = *(__n128 **)(a1 + 208);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 216))
  {
    v12 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1 + 200, *a2);
  }
  else
  {
    v9 = a2->n128_u64[1];
    v8->n128_u64[0] = a2->n128_u64[0];
    v8->n128_u64[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v8 + 1;
  }
  *(_QWORD *)(a1 + 208) = v12;
  v13 = *(_QWORD *)(a1 + 232);
  v14 = *(_QWORD *)(a1 + 240);
  if (v13 == v14 << 6)
  {
    if ((uint64_t)(v13 + 1) < 0)
      abort();
    v15 = v14 << 7;
    if (v15 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64)
      v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v13 <= 0x3FFFFFFFFFFFFFFELL)
      v16 = v15;
    else
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve(a1 + 224, v16);
    v13 = *(_QWORD *)(a1 + 232);
  }
  *(_QWORD *)(a1 + 232) = v13 + 1;
  v17 = *(_QWORD *)(a1 + 224);
  v18 = v13 >> 6;
  v19 = 1 << v13;
  if (a3)
    v20 = *(_QWORD *)(v17 + 8 * v18) | v19;
  else
    v20 = *(_QWORD *)(v17 + 8 * v18) & ~v19;
  *(_QWORD *)(v17 + 8 * v18) = v20;
  v21 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  if ((_DWORD)v21)
    geo::read_write_lock::logFailure(v21, (uint64_t)"unlock", v22);
}

void sub_19F217ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (v5 >> 3);
    if (v6 >= 0x1E1E1E1E1E1E1E2)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[136 * v6];
    do
    {
      *(_OWORD *)v7 = *(_OWORD *)v3;
      v10 = *(_QWORD *)(v3 + 16);
      *((_QWORD *)v7 + 2) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(_QWORD *)(v3 + 32);
      *((_QWORD *)v7 + 3) = *(_QWORD *)(v3 + 24);
      *((_QWORD *)v7 + 4) = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = *(_QWORD *)(v3 + 48);
      *((_QWORD *)v7 + 5) = *(_QWORD *)(v3 + 40);
      *((_QWORD *)v7 + 6) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = *(_QWORD *)(v3 + 64);
      *((_QWORD *)v7 + 7) = *(_QWORD *)(v3 + 56);
      *((_QWORD *)v7 + 8) = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(_QWORD *)(v3 + 80);
      *((_QWORD *)v7 + 9) = *(_QWORD *)(v3 + 72);
      *((_QWORD *)v7 + 10) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v8 = *(_QWORD *)(v3 + 88);
      v7[96] = *(_BYTE *)(v3 + 96);
      *((_QWORD *)v7 + 11) = v8;
      v9 = *(_OWORD *)(v3 + 104);
      *(_OWORD *)(v7 + 116) = *(_OWORD *)(v3 + 116);
      *(_OWORD *)(v7 + 104) = v9;
      v3 += 136;
      v7 += 136;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5C60C89240C40C60;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5C60C89240C40C60;
      if (*(_QWORD *)&v3 <= 0x5C60C89240C40C60uLL)
        v5 = 0x5C60C89240C40C60uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5C60C89240C40C60;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5C60C89240C40C60)
            {
              if (v7[2] == 0x5C60C89240C40C60)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5C60C89240C40C60)
          {
            if (v7[2] == 0x5C60C89240C40C60)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::Collision>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3888;
  *(_QWORD *)(v11 + 8) = 0x5C60C89240C40C60;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5C60C89240C40C60uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5C60C89240C40C60;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::Collision>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5C60C89240C40C60, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F217F54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;

  begin = this->__begin_;
  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    end = this->__end_;
    v5 = 4 * __n;
    v6 = operator new(4 * __n);
    v7 = (char *)end - (char *)begin;
    v8 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
    v9 = v8;
    if (end == begin)
      goto LABEL_11;
    if ((unint64_t)(v7 - 4) >= 0x2C)
    {
      v9 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
      if ((char *)end - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v10 = v7 >> 2;
        v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = &end[v12 / 0xFFFFFFFFFFFFFFFCLL];
        v9 = &v8[v12 / 0xFFFFFFFFFFFFFFFCLL];
        v14 = &v6[4 * v10 - 16];
        v15 = (__int128 *)(end - 4);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *(v14 - 1) = *(v15 - 1);
          *v14 = v17;
          v14 -= 2;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        end = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = (unsigned int *)&v6[((char *)end - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *--end;
      *--v9 = v18;
    }
    while (end != begin);
LABEL_11:
    this->__begin_ = v9;
    this->__end_ = v8;
    this->__end_cap_.__value_ = (unsigned int *)&v6[v5];
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = a2 + 5;
    std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v4);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 128);
  }
  return result;
}

void md::DaVinciGroundRenderResources::resetPools(md::DaVinciGroundRenderResources *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _OWORD *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _OWORD *v177;
  __int128 *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t *v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _OWORD *v229;
  __int128 *v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _OWORD *v255;
  __int128 *v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  _OWORD *v281;
  __int128 *v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  _OWORD *v307;
  __int128 *v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _OWORD *v333;
  __int128 *v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t *v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  _OWORD *v359;
  __int128 *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t *v368;
  _QWORD *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  _OWORD *v385;
  __int128 *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t *v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  _OWORD *v411;
  __int128 *v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t *v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  _OWORD *v437;
  __int128 *v438;
  uint64_t v439;
  __int128 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t *v445;
  uint64_t *v446;
  _QWORD *v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  _OWORD *v463;
  __int128 *v464;
  uint64_t v465;
  __int128 v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t *v471;
  uint64_t *v472;
  _QWORD *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  _OWORD *v489;
  __int128 *v490;
  uint64_t v491;
  __int128 v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t *v498;
  _QWORD *v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  _QWORD *v513;
  uint64_t v514;
  _OWORD *v515;
  __int128 *v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  uint64_t *v523;
  uint64_t *v524;
  _QWORD *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  _OWORD *v541;
  __int128 *v542;
  uint64_t v543;
  __int128 v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t *v549;
  uint64_t *v550;
  _QWORD *v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  _OWORD *v567;
  __int128 *v568;
  uint64_t v569;
  __int128 v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  uint64_t *v575;
  uint64_t *v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  _QWORD *v591;
  uint64_t v592;
  _OWORD *v593;
  __int128 *v594;
  uint64_t v595;
  __int128 v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  void *v604;
  _QWORD *v605;
  uint64_t v606;
  unint64_t v607;
  void (***v608)(void);
  void (**v609)(void);

  v2 = (uint64_t *)*((_QWORD *)this + 135);
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_751:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = 8 * v11;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v14 = (_QWORD *)(v13 + 8 * v8);
      v11 = v13 + v12;
      if (v13)
        *v14 = v6;
    }
    else
    {
      v14 = (_QWORD *)(8 * v8);
    }
    v16 = *v2;
    v15 = v2[1];
    v17 = v15 - *v2;
    if (v15 == *v2)
    {
      v19 = v14;
      goto LABEL_29;
    }
    v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      v19 = v14;
    }
    else
    {
      v19 = v14;
      if ((unint64_t)(v15 - (_QWORD)v14) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = v14 - 2;
        v22 = (__int128 *)(v15 - 16);
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v15 - 8);
      v15 -= 8;
      *--v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    v15 = *v2;
LABEL_29:
    v5 = v14 + 1;
    *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    v26 = v2[2];
    v2[2] = v11;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v15, v26 - v15);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v27 = v2[4];
  if (v27 != v2[5])
    v2[5] = v27;
LABEL_33:
  v28 = (uint64_t *)*((_QWORD *)this + 179);
  v29 = (uint64_t *)v28[4];
  v30 = (uint64_t *)v28[5];
  if (v29 == v30)
    goto LABEL_65;
  v31 = (_QWORD *)v28[1];
  while (2)
  {
    v32 = *v29;
    v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31)
        *v31 = v32;
      ++v31;
      goto LABEL_36;
    }
    v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_751;
    v35 = v33 - *v28;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = 8 * v37;
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 16))(v28[3], 8 * v37, 8);
      v40 = (_QWORD *)(v39 + 8 * v34);
      v37 = v39 + v38;
      if (v39)
        *v40 = v32;
    }
    else
    {
      v40 = (_QWORD *)(8 * v34);
    }
    v42 = *v28;
    v41 = v28[1];
    v43 = v41 - *v28;
    if (v41 == *v28)
    {
      v45 = v40;
      goto LABEL_61;
    }
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = v40;
      do
      {
LABEL_59:
        v51 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    v45 = v40;
    if ((unint64_t)(v41 - (_QWORD)v40) < 0x20)
      goto LABEL_59;
    v46 = (v44 >> 3) + 1;
    v47 = v40 - 2;
    v48 = (__int128 *)(v41 - 16);
    v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v41 = *v28;
LABEL_61:
    v31 = v40 + 1;
    *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    v52 = v28[2];
    v28[2] = v37;
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v41, v52 - v41);
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30)
      continue;
    break;
  }
  v53 = v28[4];
  if (v53 != v28[5])
    v28[5] = v53;
LABEL_65:
  v54 = (uint64_t *)*((_QWORD *)this + 180);
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 == v56)
    goto LABEL_97;
  v57 = (_QWORD *)v54[1];
  while (2)
  {
    v58 = *v55;
    v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57)
        *v57 = v58;
      ++v57;
      goto LABEL_68;
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_751;
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = 8 * v63;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v66 = (_QWORD *)(v65 + 8 * v60);
      v63 = v65 + v64;
      if (v65)
        *v66 = v58;
    }
    else
    {
      v66 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v66;
      goto LABEL_93;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v66;
      do
      {
LABEL_91:
        v77 = *(_QWORD *)(v67 - 8);
        v67 -= 8;
        *--v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_92;
    }
    v71 = v66;
    if ((unint64_t)(v67 - (_QWORD)v66) < 0x20)
      goto LABEL_91;
    v72 = (v70 >> 3) + 1;
    v73 = v66 - 2;
    v74 = (__int128 *)(v67 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v67 = *v54;
LABEL_93:
    v57 = v66 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    v78 = v54[2];
    v54[2] = v63;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
LABEL_68:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56)
      continue;
    break;
  }
  v79 = v54[4];
  if (v79 != v54[5])
    v54[5] = v79;
LABEL_97:
  v80 = (uint64_t *)*((_QWORD *)this + 139);
  v81 = (uint64_t *)v80[4];
  v82 = (uint64_t *)v80[5];
  if (v81 == v82)
    goto LABEL_129;
  v83 = (_QWORD *)v80[1];
  while (2)
  {
    v84 = *v81;
    v85 = v80[2];
    if ((unint64_t)v83 < v85)
    {
      if (v83)
        *v83 = v84;
      ++v83;
      goto LABEL_100;
    }
    v86 = ((uint64_t)v83 - *v80) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_751;
    v87 = v85 - *v80;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
    {
      v90 = 8 * v89;
      v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v89, 8);
      v92 = (_QWORD *)(v91 + 8 * v86);
      v89 = v91 + v90;
      if (v91)
        *v92 = v84;
    }
    else
    {
      v92 = (_QWORD *)(8 * v86);
    }
    v94 = *v80;
    v93 = v80[1];
    v95 = v93 - *v80;
    if (v93 == *v80)
    {
      v97 = v92;
      goto LABEL_125;
    }
    v96 = v95 - 8;
    if ((unint64_t)(v95 - 8) < 0x38)
    {
      v97 = v92;
      do
      {
LABEL_123:
        v103 = *(_QWORD *)(v93 - 8);
        v93 -= 8;
        *--v97 = v103;
      }
      while (v93 != v94);
      goto LABEL_124;
    }
    v97 = v92;
    if ((unint64_t)(v93 - (_QWORD)v92) < 0x20)
      goto LABEL_123;
    v98 = (v96 >> 3) + 1;
    v99 = v92 - 2;
    v100 = (__int128 *)(v93 - 16);
    v101 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *v100;
      *(v99 - 1) = *(v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 2;
      v101 -= 4;
    }
    while (v101);
    v97 = &v92[-(v98 & 0x3FFFFFFFFFFFFFFCLL)];
    v93 -= 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v93 = *v80;
LABEL_125:
    v83 = v92 + 1;
    *v80 = (uint64_t)v97;
    v80[1] = (uint64_t)(v92 + 1);
    v104 = v80[2];
    v80[2] = v89;
    if (v93)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v93, v104 - v93);
LABEL_100:
    v80[1] = (uint64_t)v83;
    if (++v81 != v82)
      continue;
    break;
  }
  v105 = v80[4];
  if (v105 != v80[5])
    v80[5] = v105;
LABEL_129:
  v106 = (uint64_t *)*((_QWORD *)this + 140);
  v107 = (uint64_t *)v106[4];
  v108 = (uint64_t *)v106[5];
  if (v107 == v108)
    goto LABEL_161;
  v109 = (_QWORD *)v106[1];
  while (2)
  {
    v110 = *v107;
    v111 = v106[2];
    if ((unint64_t)v109 < v111)
    {
      if (v109)
        *v109 = v110;
      ++v109;
      goto LABEL_132;
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_751;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = 8 * v115;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (_QWORD *)(v117 + 8 * v112);
      v115 = v117 + v116;
      if (v117)
        *v118 = v110;
    }
    else
    {
      v118 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_157;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
      do
      {
LABEL_155:
        v129 = *(_QWORD *)(v119 - 8);
        v119 -= 8;
        *--v123 = v129;
      }
      while (v119 != v120);
      goto LABEL_156;
    }
    v123 = v118;
    if ((unint64_t)(v119 - (_QWORD)v118) < 0x20)
      goto LABEL_155;
    v124 = (v122 >> 3) + 1;
    v125 = v118 - 2;
    v126 = (__int128 *)(v119 - 16);
    v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v128 = *v126;
      *(v125 - 1) = *(v126 - 1);
      *v125 = v128;
      v125 -= 2;
      v126 -= 2;
      v127 -= 4;
    }
    while (v127);
    v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
    v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v119 = *v106;
LABEL_157:
    v109 = v118 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    v130 = v106[2];
    v106[2] = v115;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
LABEL_132:
    v106[1] = (uint64_t)v109;
    if (++v107 != v108)
      continue;
    break;
  }
  v131 = v106[4];
  if (v131 != v106[5])
    v106[5] = v131;
LABEL_161:
  v132 = (uint64_t *)*((_QWORD *)this + 141);
  v133 = (uint64_t *)v132[4];
  v134 = (uint64_t *)v132[5];
  if (v133 == v134)
    goto LABEL_193;
  v135 = (_QWORD *)v132[1];
  while (2)
  {
    v136 = *v133;
    v137 = v132[2];
    if ((unint64_t)v135 < v137)
    {
      if (v135)
        *v135 = v136;
      ++v135;
      goto LABEL_164;
    }
    v138 = ((uint64_t)v135 - *v132) >> 3;
    if ((unint64_t)(v138 + 1) >> 61)
      goto LABEL_751;
    v139 = v137 - *v132;
    v140 = v139 >> 2;
    if (v139 >> 2 <= (unint64_t)(v138 + 1))
      v140 = v138 + 1;
    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      v142 = 8 * v141;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 16))(v132[3], 8 * v141, 8);
      v144 = (_QWORD *)(v143 + 8 * v138);
      v141 = v143 + v142;
      if (v143)
        *v144 = v136;
    }
    else
    {
      v144 = (_QWORD *)(8 * v138);
    }
    v146 = *v132;
    v145 = v132[1];
    v147 = v145 - *v132;
    if (v145 == *v132)
    {
      v149 = v144;
      goto LABEL_189;
    }
    v148 = v147 - 8;
    if ((unint64_t)(v147 - 8) < 0x38)
    {
      v149 = v144;
      do
      {
LABEL_187:
        v155 = *(_QWORD *)(v145 - 8);
        v145 -= 8;
        *--v149 = v155;
      }
      while (v145 != v146);
      goto LABEL_188;
    }
    v149 = v144;
    if ((unint64_t)(v145 - (_QWORD)v144) < 0x20)
      goto LABEL_187;
    v150 = (v148 >> 3) + 1;
    v151 = v144 - 2;
    v152 = (__int128 *)(v145 - 16);
    v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v154 = *v152;
      *(v151 - 1) = *(v152 - 1);
      *v151 = v154;
      v151 -= 2;
      v152 -= 2;
      v153 -= 4;
    }
    while (v153);
    v149 = &v144[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
    v145 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
    if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_187;
LABEL_188:
    v145 = *v132;
LABEL_189:
    v135 = v144 + 1;
    *v132 = (uint64_t)v149;
    v132[1] = (uint64_t)(v144 + 1);
    v156 = v132[2];
    v132[2] = v141;
    if (v145)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132[3] + 40))(v132[3], v145, v156 - v145);
LABEL_164:
    v132[1] = (uint64_t)v135;
    if (++v133 != v134)
      continue;
    break;
  }
  v157 = v132[4];
  if (v157 != v132[5])
    v132[5] = v157;
LABEL_193:
  v158 = (uint64_t *)*((_QWORD *)this + 138);
  v159 = (uint64_t *)v158[4];
  v160 = (uint64_t *)v158[5];
  if (v159 == v160)
    goto LABEL_225;
  v161 = (_QWORD *)v158[1];
  while (2)
  {
    v162 = *v159;
    v163 = v158[2];
    if ((unint64_t)v161 < v163)
    {
      if (v161)
        *v161 = v162;
      ++v161;
      goto LABEL_196;
    }
    v164 = ((uint64_t)v161 - *v158) >> 3;
    if ((unint64_t)(v164 + 1) >> 61)
      goto LABEL_751;
    v165 = v163 - *v158;
    v166 = v165 >> 2;
    if (v165 >> 2 <= (unint64_t)(v164 + 1))
      v166 = v164 + 1;
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
      v167 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v167 = v166;
    if (v167)
    {
      v168 = 8 * v167;
      v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 16))(v158[3], 8 * v167, 8);
      v170 = (_QWORD *)(v169 + 8 * v164);
      v167 = v169 + v168;
      if (v169)
        *v170 = v162;
    }
    else
    {
      v170 = (_QWORD *)(8 * v164);
    }
    v172 = *v158;
    v171 = v158[1];
    v173 = v171 - *v158;
    if (v171 == *v158)
    {
      v175 = v170;
      goto LABEL_221;
    }
    v174 = v173 - 8;
    if ((unint64_t)(v173 - 8) < 0x38)
    {
      v175 = v170;
      do
      {
LABEL_219:
        v181 = *(_QWORD *)(v171 - 8);
        v171 -= 8;
        *--v175 = v181;
      }
      while (v171 != v172);
      goto LABEL_220;
    }
    v175 = v170;
    if ((unint64_t)(v171 - (_QWORD)v170) < 0x20)
      goto LABEL_219;
    v176 = (v174 >> 3) + 1;
    v177 = v170 - 2;
    v178 = (__int128 *)(v171 - 16);
    v179 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v180 = *v178;
      *(v177 - 1) = *(v178 - 1);
      *v177 = v180;
      v177 -= 2;
      v178 -= 2;
      v179 -= 4;
    }
    while (v179);
    v175 = &v170[-(v176 & 0x3FFFFFFFFFFFFFFCLL)];
    v171 -= 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_219;
LABEL_220:
    v171 = *v158;
LABEL_221:
    v161 = v170 + 1;
    *v158 = (uint64_t)v175;
    v158[1] = (uint64_t)(v170 + 1);
    v182 = v158[2];
    v158[2] = v167;
    if (v171)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v158[3] + 40))(v158[3], v171, v182 - v171);
LABEL_196:
    v158[1] = (uint64_t)v161;
    if (++v159 != v160)
      continue;
    break;
  }
  v183 = v158[4];
  if (v183 != v158[5])
    v158[5] = v183;
LABEL_225:
  v184 = (uint64_t *)*((_QWORD *)this + 142);
  v185 = (uint64_t *)v184[4];
  v186 = (uint64_t *)v184[5];
  if (v185 == v186)
    goto LABEL_257;
  v187 = (_QWORD *)v184[1];
  while (2)
  {
    v188 = *v185;
    v189 = v184[2];
    if ((unint64_t)v187 < v189)
    {
      if (v187)
        *v187 = v188;
      ++v187;
      goto LABEL_228;
    }
    v190 = ((uint64_t)v187 - *v184) >> 3;
    if ((unint64_t)(v190 + 1) >> 61)
      goto LABEL_751;
    v191 = v189 - *v184;
    v192 = v191 >> 2;
    if (v191 >> 2 <= (unint64_t)(v190 + 1))
      v192 = v190 + 1;
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
      v193 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    if (v193)
    {
      v194 = 8 * v193;
      v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 16))(v184[3], 8 * v193, 8);
      v196 = (_QWORD *)(v195 + 8 * v190);
      v193 = v195 + v194;
      if (v195)
        *v196 = v188;
    }
    else
    {
      v196 = (_QWORD *)(8 * v190);
    }
    v198 = *v184;
    v197 = v184[1];
    v199 = v197 - *v184;
    if (v197 == *v184)
    {
      v201 = v196;
      goto LABEL_253;
    }
    v200 = v199 - 8;
    if ((unint64_t)(v199 - 8) < 0x38)
    {
      v201 = v196;
      do
      {
LABEL_251:
        v207 = *(_QWORD *)(v197 - 8);
        v197 -= 8;
        *--v201 = v207;
      }
      while (v197 != v198);
      goto LABEL_252;
    }
    v201 = v196;
    if ((unint64_t)(v197 - (_QWORD)v196) < 0x20)
      goto LABEL_251;
    v202 = (v200 >> 3) + 1;
    v203 = v196 - 2;
    v204 = (__int128 *)(v197 - 16);
    v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v206 = *v204;
      *(v203 - 1) = *(v204 - 1);
      *v203 = v206;
      v203 -= 2;
      v204 -= 2;
      v205 -= 4;
    }
    while (v205);
    v201 = &v196[-(v202 & 0x3FFFFFFFFFFFFFFCLL)];
    v197 -= 8 * (v202 & 0x3FFFFFFFFFFFFFFCLL);
    if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_251;
LABEL_252:
    v197 = *v184;
LABEL_253:
    v187 = v196 + 1;
    *v184 = (uint64_t)v201;
    v184[1] = (uint64_t)(v196 + 1);
    v208 = v184[2];
    v184[2] = v193;
    if (v197)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v184[3] + 40))(v184[3], v197, v208 - v197);
LABEL_228:
    v184[1] = (uint64_t)v187;
    if (++v185 != v186)
      continue;
    break;
  }
  v209 = v184[4];
  if (v209 != v184[5])
    v184[5] = v209;
LABEL_257:
  v210 = (uint64_t *)*((_QWORD *)this + 143);
  v211 = (uint64_t *)v210[4];
  v212 = (uint64_t *)v210[5];
  if (v211 == v212)
    goto LABEL_289;
  v213 = (_QWORD *)v210[1];
  while (2)
  {
    v214 = *v211;
    v215 = v210[2];
    if ((unint64_t)v213 < v215)
    {
      if (v213)
        *v213 = v214;
      ++v213;
      goto LABEL_260;
    }
    v216 = ((uint64_t)v213 - *v210) >> 3;
    if ((unint64_t)(v216 + 1) >> 61)
      goto LABEL_751;
    v217 = v215 - *v210;
    v218 = v217 >> 2;
    if (v217 >> 2 <= (unint64_t)(v216 + 1))
      v218 = v216 + 1;
    if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
      v219 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v219 = v218;
    if (v219)
    {
      v220 = 8 * v219;
      v221 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 16))(v210[3], 8 * v219, 8);
      v222 = (_QWORD *)(v221 + 8 * v216);
      v219 = v221 + v220;
      if (v221)
        *v222 = v214;
    }
    else
    {
      v222 = (_QWORD *)(8 * v216);
    }
    v224 = *v210;
    v223 = v210[1];
    v225 = v223 - *v210;
    if (v223 == *v210)
    {
      v227 = v222;
      goto LABEL_285;
    }
    v226 = v225 - 8;
    if ((unint64_t)(v225 - 8) < 0x38)
    {
      v227 = v222;
      do
      {
LABEL_283:
        v233 = *(_QWORD *)(v223 - 8);
        v223 -= 8;
        *--v227 = v233;
      }
      while (v223 != v224);
      goto LABEL_284;
    }
    v227 = v222;
    if ((unint64_t)(v223 - (_QWORD)v222) < 0x20)
      goto LABEL_283;
    v228 = (v226 >> 3) + 1;
    v229 = v222 - 2;
    v230 = (__int128 *)(v223 - 16);
    v231 = v228 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v232 = *v230;
      *(v229 - 1) = *(v230 - 1);
      *v229 = v232;
      v229 -= 2;
      v230 -= 2;
      v231 -= 4;
    }
    while (v231);
    v227 = &v222[-(v228 & 0x3FFFFFFFFFFFFFFCLL)];
    v223 -= 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
    if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_283;
LABEL_284:
    v223 = *v210;
LABEL_285:
    v213 = v222 + 1;
    *v210 = (uint64_t)v227;
    v210[1] = (uint64_t)(v222 + 1);
    v234 = v210[2];
    v210[2] = v219;
    if (v223)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v210[3] + 40))(v210[3], v223, v234 - v223);
LABEL_260:
    v210[1] = (uint64_t)v213;
    if (++v211 != v212)
      continue;
    break;
  }
  v235 = v210[4];
  if (v235 != v210[5])
    v210[5] = v235;
LABEL_289:
  v236 = (uint64_t *)*((_QWORD *)this + 144);
  v237 = (uint64_t *)v236[4];
  v238 = (uint64_t *)v236[5];
  if (v237 == v238)
    goto LABEL_321;
  v239 = (_QWORD *)v236[1];
  while (2)
  {
    v240 = *v237;
    v241 = v236[2];
    if ((unint64_t)v239 < v241)
    {
      if (v239)
        *v239 = v240;
      ++v239;
      goto LABEL_292;
    }
    v242 = ((uint64_t)v239 - *v236) >> 3;
    if ((unint64_t)(v242 + 1) >> 61)
      goto LABEL_751;
    v243 = v241 - *v236;
    v244 = v243 >> 2;
    if (v243 >> 2 <= (unint64_t)(v242 + 1))
      v244 = v242 + 1;
    if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8)
      v245 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v245 = v244;
    if (v245)
    {
      v246 = 8 * v245;
      v247 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236[3] + 16))(v236[3], 8 * v245, 8);
      v248 = (_QWORD *)(v247 + 8 * v242);
      v245 = v247 + v246;
      if (v247)
        *v248 = v240;
    }
    else
    {
      v248 = (_QWORD *)(8 * v242);
    }
    v250 = *v236;
    v249 = v236[1];
    v251 = v249 - *v236;
    if (v249 == *v236)
    {
      v253 = v248;
      goto LABEL_317;
    }
    v252 = v251 - 8;
    if ((unint64_t)(v251 - 8) < 0x38)
    {
      v253 = v248;
      do
      {
LABEL_315:
        v259 = *(_QWORD *)(v249 - 8);
        v249 -= 8;
        *--v253 = v259;
      }
      while (v249 != v250);
      goto LABEL_316;
    }
    v253 = v248;
    if ((unint64_t)(v249 - (_QWORD)v248) < 0x20)
      goto LABEL_315;
    v254 = (v252 >> 3) + 1;
    v255 = v248 - 2;
    v256 = (__int128 *)(v249 - 16);
    v257 = v254 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v258 = *v256;
      *(v255 - 1) = *(v256 - 1);
      *v255 = v258;
      v255 -= 2;
      v256 -= 2;
      v257 -= 4;
    }
    while (v257);
    v253 = &v248[-(v254 & 0x3FFFFFFFFFFFFFFCLL)];
    v249 -= 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
    if (v254 != (v254 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_315;
LABEL_316:
    v249 = *v236;
LABEL_317:
    v239 = v248 + 1;
    *v236 = (uint64_t)v253;
    v236[1] = (uint64_t)(v248 + 1);
    v260 = v236[2];
    v236[2] = v245;
    if (v249)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236[3] + 40))(v236[3], v249, v260 - v249);
LABEL_292:
    v236[1] = (uint64_t)v239;
    if (++v237 != v238)
      continue;
    break;
  }
  v261 = v236[4];
  if (v261 != v236[5])
    v236[5] = v261;
LABEL_321:
  v262 = (uint64_t *)*((_QWORD *)this + 145);
  v263 = (uint64_t *)v262[4];
  v264 = (uint64_t *)v262[5];
  if (v263 == v264)
    goto LABEL_353;
  v265 = (_QWORD *)v262[1];
  while (2)
  {
    v266 = *v263;
    v267 = v262[2];
    if ((unint64_t)v265 < v267)
    {
      if (v265)
        *v265 = v266;
      ++v265;
      goto LABEL_324;
    }
    v268 = ((uint64_t)v265 - *v262) >> 3;
    if ((unint64_t)(v268 + 1) >> 61)
      goto LABEL_751;
    v269 = v267 - *v262;
    v270 = v269 >> 2;
    if (v269 >> 2 <= (unint64_t)(v268 + 1))
      v270 = v268 + 1;
    if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
      v271 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v271 = v270;
    if (v271)
    {
      v272 = 8 * v271;
      v273 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v262[3] + 16))(v262[3], 8 * v271, 8);
      v274 = (_QWORD *)(v273 + 8 * v268);
      v271 = v273 + v272;
      if (v273)
        *v274 = v266;
    }
    else
    {
      v274 = (_QWORD *)(8 * v268);
    }
    v276 = *v262;
    v275 = v262[1];
    v277 = v275 - *v262;
    if (v275 == *v262)
    {
      v279 = v274;
      goto LABEL_349;
    }
    v278 = v277 - 8;
    if ((unint64_t)(v277 - 8) < 0x38)
    {
      v279 = v274;
      do
      {
LABEL_347:
        v285 = *(_QWORD *)(v275 - 8);
        v275 -= 8;
        *--v279 = v285;
      }
      while (v275 != v276);
      goto LABEL_348;
    }
    v279 = v274;
    if ((unint64_t)(v275 - (_QWORD)v274) < 0x20)
      goto LABEL_347;
    v280 = (v278 >> 3) + 1;
    v281 = v274 - 2;
    v282 = (__int128 *)(v275 - 16);
    v283 = v280 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v284 = *v282;
      *(v281 - 1) = *(v282 - 1);
      *v281 = v284;
      v281 -= 2;
      v282 -= 2;
      v283 -= 4;
    }
    while (v283);
    v279 = &v274[-(v280 & 0x3FFFFFFFFFFFFFFCLL)];
    v275 -= 8 * (v280 & 0x3FFFFFFFFFFFFFFCLL);
    if (v280 != (v280 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_347;
LABEL_348:
    v275 = *v262;
LABEL_349:
    v265 = v274 + 1;
    *v262 = (uint64_t)v279;
    v262[1] = (uint64_t)(v274 + 1);
    v286 = v262[2];
    v262[2] = v271;
    if (v275)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v262[3] + 40))(v262[3], v275, v286 - v275);
LABEL_324:
    v262[1] = (uint64_t)v265;
    if (++v263 != v264)
      continue;
    break;
  }
  v287 = v262[4];
  if (v287 != v262[5])
    v262[5] = v287;
LABEL_353:
  v288 = (uint64_t *)*((_QWORD *)this + 168);
  v289 = (uint64_t *)v288[4];
  v290 = (uint64_t *)v288[5];
  if (v289 == v290)
    goto LABEL_385;
  v291 = (_QWORD *)v288[1];
  while (2)
  {
    v292 = *v289;
    v293 = v288[2];
    if ((unint64_t)v291 < v293)
    {
      if (v291)
        *v291 = v292;
      ++v291;
      goto LABEL_356;
    }
    v294 = ((uint64_t)v291 - *v288) >> 3;
    if ((unint64_t)(v294 + 1) >> 61)
      goto LABEL_751;
    v295 = v293 - *v288;
    v296 = v295 >> 2;
    if (v295 >> 2 <= (unint64_t)(v294 + 1))
      v296 = v294 + 1;
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
      v297 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v297 = v296;
    if (v297)
    {
      v298 = 8 * v297;
      v299 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[3] + 16))(v288[3], 8 * v297, 8);
      v300 = (_QWORD *)(v299 + 8 * v294);
      v297 = v299 + v298;
      if (v299)
        *v300 = v292;
    }
    else
    {
      v300 = (_QWORD *)(8 * v294);
    }
    v302 = *v288;
    v301 = v288[1];
    v303 = v301 - *v288;
    if (v301 == *v288)
    {
      v305 = v300;
      goto LABEL_381;
    }
    v304 = v303 - 8;
    if ((unint64_t)(v303 - 8) < 0x38)
    {
      v305 = v300;
      do
      {
LABEL_379:
        v311 = *(_QWORD *)(v301 - 8);
        v301 -= 8;
        *--v305 = v311;
      }
      while (v301 != v302);
      goto LABEL_380;
    }
    v305 = v300;
    if ((unint64_t)(v301 - (_QWORD)v300) < 0x20)
      goto LABEL_379;
    v306 = (v304 >> 3) + 1;
    v307 = v300 - 2;
    v308 = (__int128 *)(v301 - 16);
    v309 = v306 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v310 = *v308;
      *(v307 - 1) = *(v308 - 1);
      *v307 = v310;
      v307 -= 2;
      v308 -= 2;
      v309 -= 4;
    }
    while (v309);
    v305 = &v300[-(v306 & 0x3FFFFFFFFFFFFFFCLL)];
    v301 -= 8 * (v306 & 0x3FFFFFFFFFFFFFFCLL);
    if (v306 != (v306 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_379;
LABEL_380:
    v301 = *v288;
LABEL_381:
    v291 = v300 + 1;
    *v288 = (uint64_t)v305;
    v288[1] = (uint64_t)(v300 + 1);
    v312 = v288[2];
    v288[2] = v297;
    if (v301)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[3] + 40))(v288[3], v301, v312 - v301);
LABEL_356:
    v288[1] = (uint64_t)v291;
    if (++v289 != v290)
      continue;
    break;
  }
  v313 = v288[4];
  if (v313 != v288[5])
    v288[5] = v313;
LABEL_385:
  v314 = (uint64_t *)*((_QWORD *)this + 169);
  v315 = (uint64_t *)v314[4];
  v316 = (uint64_t *)v314[5];
  if (v315 == v316)
    goto LABEL_417;
  v317 = (_QWORD *)v314[1];
  while (2)
  {
    v318 = *v315;
    v319 = v314[2];
    if ((unint64_t)v317 < v319)
    {
      if (v317)
        *v317 = v318;
      ++v317;
      goto LABEL_388;
    }
    v320 = ((uint64_t)v317 - *v314) >> 3;
    if ((unint64_t)(v320 + 1) >> 61)
      goto LABEL_751;
    v321 = v319 - *v314;
    v322 = v321 >> 2;
    if (v321 >> 2 <= (unint64_t)(v320 + 1))
      v322 = v320 + 1;
    if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8)
      v323 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v323 = v322;
    if (v323)
    {
      v324 = 8 * v323;
      v325 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v314[3] + 16))(v314[3], 8 * v323, 8);
      v326 = (_QWORD *)(v325 + 8 * v320);
      v323 = v325 + v324;
      if (v325)
        *v326 = v318;
    }
    else
    {
      v326 = (_QWORD *)(8 * v320);
    }
    v328 = *v314;
    v327 = v314[1];
    v329 = v327 - *v314;
    if (v327 == *v314)
    {
      v331 = v326;
      goto LABEL_413;
    }
    v330 = v329 - 8;
    if ((unint64_t)(v329 - 8) < 0x38)
    {
      v331 = v326;
      do
      {
LABEL_411:
        v337 = *(_QWORD *)(v327 - 8);
        v327 -= 8;
        *--v331 = v337;
      }
      while (v327 != v328);
      goto LABEL_412;
    }
    v331 = v326;
    if ((unint64_t)(v327 - (_QWORD)v326) < 0x20)
      goto LABEL_411;
    v332 = (v330 >> 3) + 1;
    v333 = v326 - 2;
    v334 = (__int128 *)(v327 - 16);
    v335 = v332 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v336 = *v334;
      *(v333 - 1) = *(v334 - 1);
      *v333 = v336;
      v333 -= 2;
      v334 -= 2;
      v335 -= 4;
    }
    while (v335);
    v331 = &v326[-(v332 & 0x3FFFFFFFFFFFFFFCLL)];
    v327 -= 8 * (v332 & 0x3FFFFFFFFFFFFFFCLL);
    if (v332 != (v332 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_411;
LABEL_412:
    v327 = *v314;
LABEL_413:
    v317 = v326 + 1;
    *v314 = (uint64_t)v331;
    v314[1] = (uint64_t)(v326 + 1);
    v338 = v314[2];
    v314[2] = v323;
    if (v327)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v314[3] + 40))(v314[3], v327, v338 - v327);
LABEL_388:
    v314[1] = (uint64_t)v317;
    if (++v315 != v316)
      continue;
    break;
  }
  v339 = v314[4];
  if (v339 != v314[5])
    v314[5] = v339;
LABEL_417:
  v340 = (uint64_t *)*((_QWORD *)this + 170);
  v341 = (uint64_t *)v340[4];
  v342 = (uint64_t *)v340[5];
  if (v341 == v342)
    goto LABEL_449;
  v343 = (_QWORD *)v340[1];
  while (2)
  {
    v344 = *v341;
    v345 = v340[2];
    if ((unint64_t)v343 < v345)
    {
      if (v343)
        *v343 = v344;
      ++v343;
      goto LABEL_420;
    }
    v346 = ((uint64_t)v343 - *v340) >> 3;
    if ((unint64_t)(v346 + 1) >> 61)
      goto LABEL_751;
    v347 = v345 - *v340;
    v348 = v347 >> 2;
    if (v347 >> 2 <= (unint64_t)(v346 + 1))
      v348 = v346 + 1;
    if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8)
      v349 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v349 = v348;
    if (v349)
    {
      v350 = 8 * v349;
      v351 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[3] + 16))(v340[3], 8 * v349, 8);
      v352 = (_QWORD *)(v351 + 8 * v346);
      v349 = v351 + v350;
      if (v351)
        *v352 = v344;
    }
    else
    {
      v352 = (_QWORD *)(8 * v346);
    }
    v354 = *v340;
    v353 = v340[1];
    v355 = v353 - *v340;
    if (v353 == *v340)
    {
      v357 = v352;
      goto LABEL_445;
    }
    v356 = v355 - 8;
    if ((unint64_t)(v355 - 8) < 0x38)
    {
      v357 = v352;
      do
      {
LABEL_443:
        v363 = *(_QWORD *)(v353 - 8);
        v353 -= 8;
        *--v357 = v363;
      }
      while (v353 != v354);
      goto LABEL_444;
    }
    v357 = v352;
    if ((unint64_t)(v353 - (_QWORD)v352) < 0x20)
      goto LABEL_443;
    v358 = (v356 >> 3) + 1;
    v359 = v352 - 2;
    v360 = (__int128 *)(v353 - 16);
    v361 = v358 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v362 = *v360;
      *(v359 - 1) = *(v360 - 1);
      *v359 = v362;
      v359 -= 2;
      v360 -= 2;
      v361 -= 4;
    }
    while (v361);
    v357 = &v352[-(v358 & 0x3FFFFFFFFFFFFFFCLL)];
    v353 -= 8 * (v358 & 0x3FFFFFFFFFFFFFFCLL);
    if (v358 != (v358 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_443;
LABEL_444:
    v353 = *v340;
LABEL_445:
    v343 = v352 + 1;
    *v340 = (uint64_t)v357;
    v340[1] = (uint64_t)(v352 + 1);
    v364 = v340[2];
    v340[2] = v349;
    if (v353)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[3] + 40))(v340[3], v353, v364 - v353);
LABEL_420:
    v340[1] = (uint64_t)v343;
    if (++v341 != v342)
      continue;
    break;
  }
  v365 = v340[4];
  if (v365 != v340[5])
    v340[5] = v365;
LABEL_449:
  v366 = (uint64_t *)*((_QWORD *)this + 171);
  v367 = (uint64_t *)v366[4];
  v368 = (uint64_t *)v366[5];
  if (v367 == v368)
    goto LABEL_481;
  v369 = (_QWORD *)v366[1];
  while (2)
  {
    v370 = *v367;
    v371 = v366[2];
    if ((unint64_t)v369 < v371)
    {
      if (v369)
        *v369 = v370;
      ++v369;
      goto LABEL_452;
    }
    v372 = ((uint64_t)v369 - *v366) >> 3;
    if ((unint64_t)(v372 + 1) >> 61)
      goto LABEL_751;
    v373 = v371 - *v366;
    v374 = v373 >> 2;
    if (v373 >> 2 <= (unint64_t)(v372 + 1))
      v374 = v372 + 1;
    if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFF8)
      v375 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v375 = v374;
    if (v375)
    {
      v376 = 8 * v375;
      v377 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v366[3] + 16))(v366[3], 8 * v375, 8);
      v378 = (_QWORD *)(v377 + 8 * v372);
      v375 = v377 + v376;
      if (v377)
        *v378 = v370;
    }
    else
    {
      v378 = (_QWORD *)(8 * v372);
    }
    v380 = *v366;
    v379 = v366[1];
    v381 = v379 - *v366;
    if (v379 == *v366)
    {
      v383 = v378;
      goto LABEL_477;
    }
    v382 = v381 - 8;
    if ((unint64_t)(v381 - 8) < 0x38)
    {
      v383 = v378;
      do
      {
LABEL_475:
        v389 = *(_QWORD *)(v379 - 8);
        v379 -= 8;
        *--v383 = v389;
      }
      while (v379 != v380);
      goto LABEL_476;
    }
    v383 = v378;
    if ((unint64_t)(v379 - (_QWORD)v378) < 0x20)
      goto LABEL_475;
    v384 = (v382 >> 3) + 1;
    v385 = v378 - 2;
    v386 = (__int128 *)(v379 - 16);
    v387 = v384 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v388 = *v386;
      *(v385 - 1) = *(v386 - 1);
      *v385 = v388;
      v385 -= 2;
      v386 -= 2;
      v387 -= 4;
    }
    while (v387);
    v383 = &v378[-(v384 & 0x3FFFFFFFFFFFFFFCLL)];
    v379 -= 8 * (v384 & 0x3FFFFFFFFFFFFFFCLL);
    if (v384 != (v384 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_475;
LABEL_476:
    v379 = *v366;
LABEL_477:
    v369 = v378 + 1;
    *v366 = (uint64_t)v383;
    v366[1] = (uint64_t)(v378 + 1);
    v390 = v366[2];
    v366[2] = v375;
    if (v379)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v366[3] + 40))(v366[3], v379, v390 - v379);
LABEL_452:
    v366[1] = (uint64_t)v369;
    if (++v367 != v368)
      continue;
    break;
  }
  v391 = v366[4];
  if (v391 != v366[5])
    v366[5] = v391;
LABEL_481:
  v392 = (uint64_t *)*((_QWORD *)this + 174);
  v393 = (uint64_t *)v392[4];
  v394 = (uint64_t *)v392[5];
  if (v393 == v394)
    goto LABEL_513;
  v395 = (_QWORD *)v392[1];
  while (2)
  {
    v396 = *v393;
    v397 = v392[2];
    if ((unint64_t)v395 < v397)
    {
      if (v395)
        *v395 = v396;
      ++v395;
      goto LABEL_484;
    }
    v398 = ((uint64_t)v395 - *v392) >> 3;
    if ((unint64_t)(v398 + 1) >> 61)
      goto LABEL_751;
    v399 = v397 - *v392;
    v400 = v399 >> 2;
    if (v399 >> 2 <= (unint64_t)(v398 + 1))
      v400 = v398 + 1;
    if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8)
      v401 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v401 = v400;
    if (v401)
    {
      v402 = 8 * v401;
      v403 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v392[3] + 16))(v392[3], 8 * v401, 8);
      v404 = (_QWORD *)(v403 + 8 * v398);
      v401 = v403 + v402;
      if (v403)
        *v404 = v396;
    }
    else
    {
      v404 = (_QWORD *)(8 * v398);
    }
    v406 = *v392;
    v405 = v392[1];
    v407 = v405 - *v392;
    if (v405 == *v392)
    {
      v409 = v404;
      goto LABEL_509;
    }
    v408 = v407 - 8;
    if ((unint64_t)(v407 - 8) < 0x38)
    {
      v409 = v404;
      do
      {
LABEL_507:
        v415 = *(_QWORD *)(v405 - 8);
        v405 -= 8;
        *--v409 = v415;
      }
      while (v405 != v406);
      goto LABEL_508;
    }
    v409 = v404;
    if ((unint64_t)(v405 - (_QWORD)v404) < 0x20)
      goto LABEL_507;
    v410 = (v408 >> 3) + 1;
    v411 = v404 - 2;
    v412 = (__int128 *)(v405 - 16);
    v413 = v410 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v414 = *v412;
      *(v411 - 1) = *(v412 - 1);
      *v411 = v414;
      v411 -= 2;
      v412 -= 2;
      v413 -= 4;
    }
    while (v413);
    v409 = &v404[-(v410 & 0x3FFFFFFFFFFFFFFCLL)];
    v405 -= 8 * (v410 & 0x3FFFFFFFFFFFFFFCLL);
    if (v410 != (v410 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_507;
LABEL_508:
    v405 = *v392;
LABEL_509:
    v395 = v404 + 1;
    *v392 = (uint64_t)v409;
    v392[1] = (uint64_t)(v404 + 1);
    v416 = v392[2];
    v392[2] = v401;
    if (v405)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v392[3] + 40))(v392[3], v405, v416 - v405);
LABEL_484:
    v392[1] = (uint64_t)v395;
    if (++v393 != v394)
      continue;
    break;
  }
  v417 = v392[4];
  if (v417 != v392[5])
    v392[5] = v417;
LABEL_513:
  v418 = (uint64_t *)*((_QWORD *)this + 176);
  v419 = (uint64_t *)v418[4];
  v420 = (uint64_t *)v418[5];
  if (v419 == v420)
    goto LABEL_545;
  v421 = (_QWORD *)v418[1];
  while (2)
  {
    v422 = *v419;
    v423 = v418[2];
    if ((unint64_t)v421 < v423)
    {
      if (v421)
        *v421 = v422;
      ++v421;
      goto LABEL_516;
    }
    v424 = ((uint64_t)v421 - *v418) >> 3;
    if ((unint64_t)(v424 + 1) >> 61)
      goto LABEL_751;
    v425 = v423 - *v418;
    v426 = v425 >> 2;
    if (v425 >> 2 <= (unint64_t)(v424 + 1))
      v426 = v424 + 1;
    if ((unint64_t)v425 >= 0x7FFFFFFFFFFFFFF8)
      v427 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v427 = v426;
    if (v427)
    {
      v428 = 8 * v427;
      v429 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[3] + 16))(v418[3], 8 * v427, 8);
      v430 = (_QWORD *)(v429 + 8 * v424);
      v427 = v429 + v428;
      if (v429)
        *v430 = v422;
    }
    else
    {
      v430 = (_QWORD *)(8 * v424);
    }
    v432 = *v418;
    v431 = v418[1];
    v433 = v431 - *v418;
    if (v431 == *v418)
    {
      v435 = v430;
      goto LABEL_541;
    }
    v434 = v433 - 8;
    if ((unint64_t)(v433 - 8) < 0x38)
    {
      v435 = v430;
      do
      {
LABEL_539:
        v441 = *(_QWORD *)(v431 - 8);
        v431 -= 8;
        *--v435 = v441;
      }
      while (v431 != v432);
      goto LABEL_540;
    }
    v435 = v430;
    if ((unint64_t)(v431 - (_QWORD)v430) < 0x20)
      goto LABEL_539;
    v436 = (v434 >> 3) + 1;
    v437 = v430 - 2;
    v438 = (__int128 *)(v431 - 16);
    v439 = v436 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v440 = *v438;
      *(v437 - 1) = *(v438 - 1);
      *v437 = v440;
      v437 -= 2;
      v438 -= 2;
      v439 -= 4;
    }
    while (v439);
    v435 = &v430[-(v436 & 0x3FFFFFFFFFFFFFFCLL)];
    v431 -= 8 * (v436 & 0x3FFFFFFFFFFFFFFCLL);
    if (v436 != (v436 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_539;
LABEL_540:
    v431 = *v418;
LABEL_541:
    v421 = v430 + 1;
    *v418 = (uint64_t)v435;
    v418[1] = (uint64_t)(v430 + 1);
    v442 = v418[2];
    v418[2] = v427;
    if (v431)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v418[3] + 40))(v418[3], v431, v442 - v431);
LABEL_516:
    v418[1] = (uint64_t)v421;
    if (++v419 != v420)
      continue;
    break;
  }
  v443 = v418[4];
  if (v443 != v418[5])
    v418[5] = v443;
LABEL_545:
  v444 = (uint64_t *)*((_QWORD *)this + 173);
  v445 = (uint64_t *)v444[4];
  v446 = (uint64_t *)v444[5];
  if (v445 == v446)
    goto LABEL_577;
  v447 = (_QWORD *)v444[1];
  while (2)
  {
    v448 = *v445;
    v449 = v444[2];
    if ((unint64_t)v447 < v449)
    {
      if (v447)
        *v447 = v448;
      ++v447;
      goto LABEL_548;
    }
    v450 = ((uint64_t)v447 - *v444) >> 3;
    if ((unint64_t)(v450 + 1) >> 61)
      goto LABEL_751;
    v451 = v449 - *v444;
    v452 = v451 >> 2;
    if (v451 >> 2 <= (unint64_t)(v450 + 1))
      v452 = v450 + 1;
    if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFF8)
      v453 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v453 = v452;
    if (v453)
    {
      v454 = 8 * v453;
      v455 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v444[3] + 16))(v444[3], 8 * v453, 8);
      v456 = (_QWORD *)(v455 + 8 * v450);
      v453 = v455 + v454;
      if (v455)
        *v456 = v448;
    }
    else
    {
      v456 = (_QWORD *)(8 * v450);
    }
    v458 = *v444;
    v457 = v444[1];
    v459 = v457 - *v444;
    if (v457 == *v444)
    {
      v461 = v456;
      goto LABEL_573;
    }
    v460 = v459 - 8;
    if ((unint64_t)(v459 - 8) < 0x38)
    {
      v461 = v456;
      do
      {
LABEL_571:
        v467 = *(_QWORD *)(v457 - 8);
        v457 -= 8;
        *--v461 = v467;
      }
      while (v457 != v458);
      goto LABEL_572;
    }
    v461 = v456;
    if ((unint64_t)(v457 - (_QWORD)v456) < 0x20)
      goto LABEL_571;
    v462 = (v460 >> 3) + 1;
    v463 = v456 - 2;
    v464 = (__int128 *)(v457 - 16);
    v465 = v462 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v466 = *v464;
      *(v463 - 1) = *(v464 - 1);
      *v463 = v466;
      v463 -= 2;
      v464 -= 2;
      v465 -= 4;
    }
    while (v465);
    v461 = &v456[-(v462 & 0x3FFFFFFFFFFFFFFCLL)];
    v457 -= 8 * (v462 & 0x3FFFFFFFFFFFFFFCLL);
    if (v462 != (v462 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_571;
LABEL_572:
    v457 = *v444;
LABEL_573:
    v447 = v456 + 1;
    *v444 = (uint64_t)v461;
    v444[1] = (uint64_t)(v456 + 1);
    v468 = v444[2];
    v444[2] = v453;
    if (v457)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v444[3] + 40))(v444[3], v457, v468 - v457);
LABEL_548:
    v444[1] = (uint64_t)v447;
    if (++v445 != v446)
      continue;
    break;
  }
  v469 = v444[4];
  if (v469 != v444[5])
    v444[5] = v469;
LABEL_577:
  v470 = (uint64_t *)*((_QWORD *)this + 175);
  v471 = (uint64_t *)v470[4];
  v472 = (uint64_t *)v470[5];
  if (v471 == v472)
    goto LABEL_609;
  v473 = (_QWORD *)v470[1];
  while (2)
  {
    v474 = *v471;
    v475 = v470[2];
    if ((unint64_t)v473 < v475)
    {
      if (v473)
        *v473 = v474;
      ++v473;
      goto LABEL_580;
    }
    v476 = ((uint64_t)v473 - *v470) >> 3;
    if ((unint64_t)(v476 + 1) >> 61)
      goto LABEL_751;
    v477 = v475 - *v470;
    v478 = v477 >> 2;
    if (v477 >> 2 <= (unint64_t)(v476 + 1))
      v478 = v476 + 1;
    if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8)
      v479 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v479 = v478;
    if (v479)
    {
      v480 = 8 * v479;
      v481 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v470[3] + 16))(v470[3], 8 * v479, 8);
      v482 = (_QWORD *)(v481 + 8 * v476);
      v479 = v481 + v480;
      if (v481)
        *v482 = v474;
    }
    else
    {
      v482 = (_QWORD *)(8 * v476);
    }
    v484 = *v470;
    v483 = v470[1];
    v485 = v483 - *v470;
    if (v483 == *v470)
    {
      v487 = v482;
      goto LABEL_605;
    }
    v486 = v485 - 8;
    if ((unint64_t)(v485 - 8) < 0x38)
    {
      v487 = v482;
      do
      {
LABEL_603:
        v493 = *(_QWORD *)(v483 - 8);
        v483 -= 8;
        *--v487 = v493;
      }
      while (v483 != v484);
      goto LABEL_604;
    }
    v487 = v482;
    if ((unint64_t)(v483 - (_QWORD)v482) < 0x20)
      goto LABEL_603;
    v488 = (v486 >> 3) + 1;
    v489 = v482 - 2;
    v490 = (__int128 *)(v483 - 16);
    v491 = v488 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v492 = *v490;
      *(v489 - 1) = *(v490 - 1);
      *v489 = v492;
      v489 -= 2;
      v490 -= 2;
      v491 -= 4;
    }
    while (v491);
    v487 = &v482[-(v488 & 0x3FFFFFFFFFFFFFFCLL)];
    v483 -= 8 * (v488 & 0x3FFFFFFFFFFFFFFCLL);
    if (v488 != (v488 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_603;
LABEL_604:
    v483 = *v470;
LABEL_605:
    v473 = v482 + 1;
    *v470 = (uint64_t)v487;
    v470[1] = (uint64_t)(v482 + 1);
    v494 = v470[2];
    v470[2] = v479;
    if (v483)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v470[3] + 40))(v470[3], v483, v494 - v483);
LABEL_580:
    v470[1] = (uint64_t)v473;
    if (++v471 != v472)
      continue;
    break;
  }
  v495 = v470[4];
  if (v495 != v470[5])
    v470[5] = v495;
LABEL_609:
  v496 = (uint64_t *)*((_QWORD *)this + 137);
  v497 = (uint64_t *)v496[4];
  v498 = (uint64_t *)v496[5];
  if (v497 == v498)
    goto LABEL_641;
  v499 = (_QWORD *)v496[1];
  while (2)
  {
    v500 = *v497;
    v501 = v496[2];
    if ((unint64_t)v499 < v501)
    {
      if (v499)
        *v499 = v500;
      ++v499;
      goto LABEL_612;
    }
    v502 = ((uint64_t)v499 - *v496) >> 3;
    if ((unint64_t)(v502 + 1) >> 61)
      goto LABEL_751;
    v503 = v501 - *v496;
    v504 = v503 >> 2;
    if (v503 >> 2 <= (unint64_t)(v502 + 1))
      v504 = v502 + 1;
    if ((unint64_t)v503 >= 0x7FFFFFFFFFFFFFF8)
      v505 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v505 = v504;
    if (v505)
    {
      v506 = 8 * v505;
      v507 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v496[3] + 16))(v496[3], 8 * v505, 8);
      v508 = (_QWORD *)(v507 + 8 * v502);
      v505 = v507 + v506;
      if (v507)
        *v508 = v500;
    }
    else
    {
      v508 = (_QWORD *)(8 * v502);
    }
    v510 = *v496;
    v509 = v496[1];
    v511 = v509 - *v496;
    if (v509 == *v496)
    {
      v513 = v508;
      goto LABEL_637;
    }
    v512 = v511 - 8;
    if ((unint64_t)(v511 - 8) < 0x38)
    {
      v513 = v508;
      do
      {
LABEL_635:
        v519 = *(_QWORD *)(v509 - 8);
        v509 -= 8;
        *--v513 = v519;
      }
      while (v509 != v510);
      goto LABEL_636;
    }
    v513 = v508;
    if ((unint64_t)(v509 - (_QWORD)v508) < 0x20)
      goto LABEL_635;
    v514 = (v512 >> 3) + 1;
    v515 = v508 - 2;
    v516 = (__int128 *)(v509 - 16);
    v517 = v514 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v518 = *v516;
      *(v515 - 1) = *(v516 - 1);
      *v515 = v518;
      v515 -= 2;
      v516 -= 2;
      v517 -= 4;
    }
    while (v517);
    v513 = &v508[-(v514 & 0x3FFFFFFFFFFFFFFCLL)];
    v509 -= 8 * (v514 & 0x3FFFFFFFFFFFFFFCLL);
    if (v514 != (v514 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_635;
LABEL_636:
    v509 = *v496;
LABEL_637:
    v499 = v508 + 1;
    *v496 = (uint64_t)v513;
    v496[1] = (uint64_t)(v508 + 1);
    v520 = v496[2];
    v496[2] = v505;
    if (v509)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v496[3] + 40))(v496[3], v509, v520 - v509);
LABEL_612:
    v496[1] = (uint64_t)v499;
    if (++v497 != v498)
      continue;
    break;
  }
  v521 = v496[4];
  if (v521 != v496[5])
    v496[5] = v521;
LABEL_641:
  v522 = (uint64_t *)*((_QWORD *)this + 172);
  v523 = (uint64_t *)v522[4];
  v524 = (uint64_t *)v522[5];
  if (v523 == v524)
    goto LABEL_673;
  v525 = (_QWORD *)v522[1];
  while (2)
  {
    v526 = *v523;
    v527 = v522[2];
    if ((unint64_t)v525 < v527)
    {
      if (v525)
        *v525 = v526;
      ++v525;
      goto LABEL_644;
    }
    v528 = ((uint64_t)v525 - *v522) >> 3;
    if ((unint64_t)(v528 + 1) >> 61)
      goto LABEL_751;
    v529 = v527 - *v522;
    v530 = v529 >> 2;
    if (v529 >> 2 <= (unint64_t)(v528 + 1))
      v530 = v528 + 1;
    if ((unint64_t)v529 >= 0x7FFFFFFFFFFFFFF8)
      v531 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v531 = v530;
    if (v531)
    {
      v532 = 8 * v531;
      v533 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v522[3] + 16))(v522[3], 8 * v531, 8);
      v534 = (_QWORD *)(v533 + 8 * v528);
      v531 = v533 + v532;
      if (v533)
        *v534 = v526;
    }
    else
    {
      v534 = (_QWORD *)(8 * v528);
    }
    v536 = *v522;
    v535 = v522[1];
    v537 = v535 - *v522;
    if (v535 == *v522)
    {
      v539 = v534;
      goto LABEL_669;
    }
    v538 = v537 - 8;
    if ((unint64_t)(v537 - 8) < 0x38)
    {
      v539 = v534;
      do
      {
LABEL_667:
        v545 = *(_QWORD *)(v535 - 8);
        v535 -= 8;
        *--v539 = v545;
      }
      while (v535 != v536);
      goto LABEL_668;
    }
    v539 = v534;
    if ((unint64_t)(v535 - (_QWORD)v534) < 0x20)
      goto LABEL_667;
    v540 = (v538 >> 3) + 1;
    v541 = v534 - 2;
    v542 = (__int128 *)(v535 - 16);
    v543 = v540 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v544 = *v542;
      *(v541 - 1) = *(v542 - 1);
      *v541 = v544;
      v541 -= 2;
      v542 -= 2;
      v543 -= 4;
    }
    while (v543);
    v539 = &v534[-(v540 & 0x3FFFFFFFFFFFFFFCLL)];
    v535 -= 8 * (v540 & 0x3FFFFFFFFFFFFFFCLL);
    if (v540 != (v540 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_667;
LABEL_668:
    v535 = *v522;
LABEL_669:
    v525 = v534 + 1;
    *v522 = (uint64_t)v539;
    v522[1] = (uint64_t)(v534 + 1);
    v546 = v522[2];
    v522[2] = v531;
    if (v535)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v522[3] + 40))(v522[3], v535, v546 - v535);
LABEL_644:
    v522[1] = (uint64_t)v525;
    if (++v523 != v524)
      continue;
    break;
  }
  v547 = v522[4];
  if (v547 != v522[5])
    v522[5] = v547;
LABEL_673:
  v548 = (uint64_t *)*((_QWORD *)this + 177);
  v549 = (uint64_t *)v548[4];
  v550 = (uint64_t *)v548[5];
  if (v549 == v550)
    goto LABEL_705;
  v551 = (_QWORD *)v548[1];
  while (2)
  {
    v552 = *v549;
    v553 = v548[2];
    if ((unint64_t)v551 < v553)
    {
      if (v551)
        *v551 = v552;
      ++v551;
      goto LABEL_676;
    }
    v554 = ((uint64_t)v551 - *v548) >> 3;
    if ((unint64_t)(v554 + 1) >> 61)
      goto LABEL_751;
    v555 = v553 - *v548;
    v556 = v555 >> 2;
    if (v555 >> 2 <= (unint64_t)(v554 + 1))
      v556 = v554 + 1;
    if ((unint64_t)v555 >= 0x7FFFFFFFFFFFFFF8)
      v557 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v557 = v556;
    if (v557)
    {
      v558 = 8 * v557;
      v559 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[3] + 16))(v548[3], 8 * v557, 8);
      v560 = (_QWORD *)(v559 + 8 * v554);
      v557 = v559 + v558;
      if (v559)
        *v560 = v552;
    }
    else
    {
      v560 = (_QWORD *)(8 * v554);
    }
    v562 = *v548;
    v561 = v548[1];
    v563 = v561 - *v548;
    if (v561 == *v548)
    {
      v565 = v560;
      goto LABEL_701;
    }
    v564 = v563 - 8;
    if ((unint64_t)(v563 - 8) < 0x38)
    {
      v565 = v560;
      do
      {
LABEL_699:
        v571 = *(_QWORD *)(v561 - 8);
        v561 -= 8;
        *--v565 = v571;
      }
      while (v561 != v562);
      goto LABEL_700;
    }
    v565 = v560;
    if ((unint64_t)(v561 - (_QWORD)v560) < 0x20)
      goto LABEL_699;
    v566 = (v564 >> 3) + 1;
    v567 = v560 - 2;
    v568 = (__int128 *)(v561 - 16);
    v569 = v566 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v570 = *v568;
      *(v567 - 1) = *(v568 - 1);
      *v567 = v570;
      v567 -= 2;
      v568 -= 2;
      v569 -= 4;
    }
    while (v569);
    v565 = &v560[-(v566 & 0x3FFFFFFFFFFFFFFCLL)];
    v561 -= 8 * (v566 & 0x3FFFFFFFFFFFFFFCLL);
    if (v566 != (v566 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_699;
LABEL_700:
    v561 = *v548;
LABEL_701:
    v551 = v560 + 1;
    *v548 = (uint64_t)v565;
    v548[1] = (uint64_t)(v560 + 1);
    v572 = v548[2];
    v548[2] = v557;
    if (v561)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v548[3] + 40))(v548[3], v561, v572 - v561);
LABEL_676:
    v548[1] = (uint64_t)v551;
    if (++v549 != v550)
      continue;
    break;
  }
  v573 = v548[4];
  if (v573 != v548[5])
    v548[5] = v573;
LABEL_705:
  v574 = (uint64_t *)*((_QWORD *)this + 178);
  v575 = (uint64_t *)v574[4];
  v576 = (uint64_t *)v574[5];
  if (v575 == v576)
    goto LABEL_737;
  v577 = (_QWORD *)v574[1];
  while (2)
  {
    v578 = *v575;
    v579 = v574[2];
    if ((unint64_t)v577 < v579)
    {
      if (v577)
        *v577 = v578;
      ++v577;
      goto LABEL_708;
    }
    v580 = ((uint64_t)v577 - *v574) >> 3;
    if ((unint64_t)(v580 + 1) >> 61)
      goto LABEL_751;
    v581 = v579 - *v574;
    v582 = v581 >> 2;
    if (v581 >> 2 <= (unint64_t)(v580 + 1))
      v582 = v580 + 1;
    if ((unint64_t)v581 >= 0x7FFFFFFFFFFFFFF8)
      v583 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v583 = v582;
    if (v583)
    {
      v584 = 8 * v583;
      v585 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v574[3] + 16))(v574[3], 8 * v583, 8);
      v586 = (_QWORD *)(v585 + 8 * v580);
      v583 = v585 + v584;
      if (v585)
        *v586 = v578;
    }
    else
    {
      v586 = (_QWORD *)(8 * v580);
    }
    v588 = *v574;
    v587 = v574[1];
    v589 = v587 - *v574;
    if (v587 == *v574)
    {
      v591 = v586;
      goto LABEL_733;
    }
    v590 = v589 - 8;
    if ((unint64_t)(v589 - 8) < 0x38)
    {
      v591 = v586;
      do
      {
LABEL_731:
        v597 = *(_QWORD *)(v587 - 8);
        v587 -= 8;
        *--v591 = v597;
      }
      while (v587 != v588);
      goto LABEL_732;
    }
    v591 = v586;
    if ((unint64_t)(v587 - (_QWORD)v586) < 0x20)
      goto LABEL_731;
    v592 = (v590 >> 3) + 1;
    v593 = v586 - 2;
    v594 = (__int128 *)(v587 - 16);
    v595 = v592 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v596 = *v594;
      *(v593 - 1) = *(v594 - 1);
      *v593 = v596;
      v593 -= 2;
      v594 -= 2;
      v595 -= 4;
    }
    while (v595);
    v591 = &v586[-(v592 & 0x3FFFFFFFFFFFFFFCLL)];
    v587 -= 8 * (v592 & 0x3FFFFFFFFFFFFFFCLL);
    if (v592 != (v592 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_731;
LABEL_732:
    v587 = *v574;
LABEL_733:
    v577 = v586 + 1;
    *v574 = (uint64_t)v591;
    v574[1] = (uint64_t)(v586 + 1);
    v598 = v574[2];
    v574[2] = v583;
    if (v587)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v574[3] + 40))(v574[3], v587, v598 - v587);
LABEL_708:
    v574[1] = (uint64_t)v577;
    if (++v575 != v576)
      continue;
    break;
  }
  v599 = v574[4];
  if (v599 != v574[5])
    v574[5] = v599;
LABEL_737:
  v600 = *((_QWORD *)this + 311);
  v601 = *((_QWORD *)this + 310);
  if (v600 != v601)
  {
    v602 = *((_QWORD *)this + 311);
    do
    {
      v604 = *(void **)(v602 - 24);
      v602 -= 24;
      v603 = v604;
      if (v604)
      {
        *(_QWORD *)(v600 - 16) = v603;
        operator delete(v603);
      }
      v600 = v602;
    }
    while (v602 != v601);
  }
  *((_QWORD *)this + 311) = v601;
  *((_QWORD *)this + 308) = *((_QWORD *)this + 307);
  v605 = (_QWORD *)*((_QWORD *)this + 317);
  if (v605)
  {
    do
    {
      if (v605[1])
      {
        v607 = 0;
        v608 = (void (***)(void))(v605 + 2);
        do
        {
          v609 = *v608;
          v608 += 15;
          (*v609)();
          ++v607;
        }
        while (v607 < v605[1]);
      }
      v605[1] = 0;
      v605 = (_QWORD *)*v605;
    }
    while (v605);
    v606 = *((_QWORD *)this + 317);
  }
  else
  {
    v606 = 0;
  }
  *((_QWORD *)this + 318) = v606;
}

void sub_19F21A638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderResources::~DaVinciGroundRenderResources(md::DaVinciGroundRenderResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  void (***v26)(void);
  void (**v27)(void);
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  malloc_zone_t *zone;
  void (***v47)(_QWORD, uint64_t);
  unsigned __int8 v48;
  uint64_t v49;
  geo::read_write_lock *v50;
  const char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 344);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 342);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 340);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 338);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*((_QWORD **)this + 335));
  v14 = (_QWORD *)*((_QWORD *)this + 331);
  while (v14)
  {
    v28 = v14;
    v14 = (_QWORD *)*v14;
    v29 = (std::__shared_weak_count *)v28[4];
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    operator delete(v28);
  }
  v15 = (void *)*((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v15)
    operator delete(v15);
  v16 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v16)
    MEMORY[0x1A1AF4E00](v16, 0x1000C4049ECCB0CLL);
  v17 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v17)
    MEMORY[0x1A1AF4E00](v17, 0x1000C4049ECCB0CLL);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 323);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 321);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (_QWORD *)*((_QWORD *)this + 317);
  do
  {
    if (v24[1])
    {
      v25 = 0;
      v26 = (void (***)(void))(v24 + 2);
      do
      {
        v27 = *v26;
        v26 += 15;
        (*v27)();
        ++v25;
      }
      while (v25 < v24[1]);
    }
    v24[1] = 0;
    v24 = (_QWORD *)*v24;
  }
  while (v24);
  v32 = (_QWORD **)*((_QWORD *)this + 317);
  *((_QWORD *)this + 318) = v32;
  v33 = *v32;
  *v32 = 0;
  if (v33)
  {
    do
    {
      v34 = (_QWORD *)*v33;
      free(v33);
      v33 = v34;
    }
    while (v34);
    v32 = (_QWORD **)*((_QWORD *)this + 317);
  }
  free(v32);
  v35 = (void *)*((_QWORD *)this + 314);
  if (v35)
  {
    *((_QWORD *)this + 315) = v35;
    operator delete(v35);
  }
  v36 = *((_QWORD *)this + 310);
  if (v36)
  {
    v37 = *((_QWORD *)this + 311);
    v38 = *((_QWORD *)this + 310);
    if (v37 != v36)
    {
      v39 = *((_QWORD *)this + 311);
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = *((_QWORD *)this + 310);
    }
    *((_QWORD *)this + 311) = v36;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 313) + 40))(*((_QWORD *)this + 313), v38, *((_QWORD *)this + 312) - v38);
  }
  v42 = (void *)*((_QWORD *)this + 307);
  if (v42)
  {
    *((_QWORD *)this + 308) = v42;
    operator delete(v42);
  }
  v43 = *((_QWORD *)this + 303);
  if (v43)
  {
    v44 = *((_QWORD *)this + 304);
    v45 = *((_QWORD *)this + 303);
    if (v44 != v43)
    {
      do
      {
        v47 = *(void (****)(_QWORD, uint64_t))(v44 - 8);
        *(_QWORD *)(v44 - 8) = 0;
        if (v47)
        {
          (**v47)(v47, v45);
          {
            v192 = v43;
            v49 = operator new();
            *(_QWORD *)(v49 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v49 + 24) = "VectorKitLabels";
            *(_OWORD *)(v49 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v49 = &off_1E42B5668;
            *(_QWORD *)(v49 + 8) = "VectorKitLabels";
            *(_OWORD *)(v49 + 72) = 0u;
            *(_OWORD *)(v49 + 88) = 0u;
            *(_OWORD *)(v49 + 104) = 0u;
            *(_OWORD *)(v49 + 120) = 0u;
            *(_OWORD *)(v49 + 136) = 0u;
            *(_OWORD *)(v49 + 152) = 0u;
            *(_OWORD *)(v49 + 168) = 0u;
            *(_OWORD *)(v49 + 184) = 0u;
            *(_OWORD *)(v49 + 200) = 0u;
            *(_OWORD *)(v49 + 216) = 0u;
            *(_OWORD *)(v49 + 232) = 0u;
            *(_QWORD *)(v49 + 248) = 0;
            *(_OWORD *)(v49 + 56) = 0u;
            v50 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v49 + 56), 0);
            if ((_DWORD)v50)
              geo::read_write_lock::logFailure(v50, (uint64_t)"initialization", v51);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v49 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v49 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v49;
            v43 = v192;
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v47, 216);
        }
        v44 -= 16;
      }
      while (v44 != v43);
      v45 = *((_QWORD *)this + 303);
    }
    *((_QWORD *)this + 304) = v43;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 306) + 40))(*((_QWORD *)this + 306), v45, *((_QWORD *)this + 305) - v45);
  }
  *((_QWORD *)this + 276) = &off_1E42B8A10;
  v52 = *((_QWORD *)this + 277);
  if (v52)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 16))(v52, *((_QWORD *)this + 279));
    *((_QWORD *)this + 279) = 3735927469;
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 278);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *((_QWORD *)this + 249) = &off_1E42B8A10;
  v56 = *((_QWORD *)this + 250);
  if (v56)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 16))(v56, *((_QWORD *)this + 252));
    *((_QWORD *)this + 252) = 3735927469;
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)this + 251);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *((_QWORD *)this + 222) = &off_1E42B8A10;
  v60 = *((_QWORD *)this + 223);
  if (v60)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 16))(v60, *((_QWORD *)this + 225));
    *((_QWORD *)this + 225) = 3735927469;
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)this + 224);
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  *((_QWORD *)this + 195) = &off_1E42B8A10;
  v64 = *((_QWORD *)this + 196);
  if (v64)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 16))(v64, *((_QWORD *)this + 198));
    *((_QWORD *)this + 198) = 3735927469;
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)this + 197);
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)this + 194);
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)this + 192);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)this + 190);
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 188);
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)this + 186);
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)this + 184);
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v88)
  {
    v89 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v88);
    MEMORY[0x1A1AF4E00](v89, 0x10A0C40D234DDC7);
  }
  v90 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v90)
  {
    v91 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v90);
    MEMORY[0x1A1AF4E00](v91, 0x10A0C40D234DDC7);
  }
  v92 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v92)
  {
    v93 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v92);
    MEMORY[0x1A1AF4E00](v93, 0x10A0C40D234DDC7);
  }
  v94 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v94)
  {
    v95 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v94);
    MEMORY[0x1A1AF4E00](v95, 0x10A0C40D234DDC7);
  }
  v96 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v96)
  {
    v97 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v96);
    MEMORY[0x1A1AF4E00](v97, 0x10A0C40D234DDC7);
  }
  v98 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v98)
  {
    v99 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v98);
    MEMORY[0x1A1AF4E00](v99, 0x10A0C40D234DDC7);
  }
  v100 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v100)
  {
    v101 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v100);
    MEMORY[0x1A1AF4E00](v101, 0x10A0C40D234DDC7);
  }
  v102 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v102)
  {
    v103 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v102);
    MEMORY[0x1A1AF4E00](v103, 0x10A0C40D234DDC7);
  }
  v104 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v104)
  {
    v105 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v104);
    MEMORY[0x1A1AF4E00](v105, 0x10A0C40D234DDC7);
  }
  v106 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v106)
  {
    v107 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v106);
    MEMORY[0x1A1AF4E00](v107, 0x10A0C40D234DDC7);
  }
  v108 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v108)
  {
    v109 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v108);
    MEMORY[0x1A1AF4E00](v109, 0x10A0C40D234DDC7);
  }
  v110 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v110)
  {
    v111 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v110);
    MEMORY[0x1A1AF4E00](v111, 0x10A0C40D234DDC7);
  }
  v112 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v112)
  {
    v113 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v112);
    MEMORY[0x1A1AF4E00](v113, 0x10A0C40D234DDC7);
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)this + 167);
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)this + 165);
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)this + 163);
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)this + 161);
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)this + 159);
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)this + 157);
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = (std::__shared_weak_count *)*((_QWORD *)this + 152);
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (_QWORD *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v136)
  {
    *v136 = 3131955885;
    MEMORY[0x1A1AF4E00]();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)this + 149);
  if (v137)
  {
    v138 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)this + 147);
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v143)
  {
    v144 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v143);
    MEMORY[0x1A1AF4E00](v144, 0x10A0C40D234DDC7);
  }
  v145 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v145)
  {
    v146 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v145);
    MEMORY[0x1A1AF4E00](v146, 0x10A0C40D234DDC7);
  }
  v147 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v147)
  {
    v148 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v147);
    MEMORY[0x1A1AF4E00](v148, 0x10A0C40D234DDC7);
  }
  v149 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v149)
  {
    v150 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v149);
    MEMORY[0x1A1AF4E00](v150, 0x10A0C40D234DDC7);
  }
  v151 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v151)
  {
    v152 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v151);
    MEMORY[0x1A1AF4E00](v152, 0x10A0C40D234DDC7);
  }
  v153 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v153)
  {
    v154 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v153);
    MEMORY[0x1A1AF4E00](v154, 0x10A0C40D234DDC7);
  }
  v155 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v155)
  {
    v156 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v155);
    MEMORY[0x1A1AF4E00](v156, 0x10A0C40D234DDC7);
  }
  v157 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v157)
  {
    v158 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v157);
    MEMORY[0x1A1AF4E00](v158, 0x10A0C40D234DDC7);
  }
  v159 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v159)
  {
    v160 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v159);
    MEMORY[0x1A1AF4E00](v160, 0x10A0C40D234DDC7);
  }
  v161 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v161)
  {
    v162 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v161);
    MEMORY[0x1A1AF4E00](v162, 0x10A0C40D234DDC7);
  }
  v163 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v163)
  {
    v164 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v163);
    MEMORY[0x1A1AF4E00](v164, 0x10A0C40D234DDC7);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 133));
  v165 = (std::__shared_weak_count *)*((_QWORD *)this + 121);
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 118));
  v168 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (v168)
  {
    v169 = (unint64_t *)&v168->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 103));
  v171 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v171)
  {
    v172 = (unint64_t *)&v171->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 88));
  v174 = (std::__shared_weak_count *)*((_QWORD *)this + 76);
  if (v174)
  {
    v175 = (unint64_t *)&v174->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 73));
  v177 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  if (v177)
  {
    v178 = (unint64_t *)&v177->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 58));
  v180 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 43));
  v183 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v183)
  {
    v184 = (unint64_t *)&v183->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 28));
  v186 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v186)
  {
    v187 = (unint64_t *)&v186->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 13));
  v189 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
}

void std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci44ElevatedStrokeColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7940;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci42ElevatedFillColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D78F8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci32ElevatedStrokeColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D78B0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci30ElevatedFillColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7868;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3880;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3838;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D37F0;
}

uint64_t std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D37A8;
  a2[1] = v2;
  return result;
}

uint64_t ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = *(_QWORD **)(a1 + 120);
  if (v6 == (_QWORD *)(a1 + 96))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v8 = *(_QWORD **)(a1 + 88);
  if (v8 == (_QWORD *)(a1 + 64))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    *(_QWORD *)(a1 + 40) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), v10, *(_QWORD *)(a1 + 48) - v10);
  }
  v11 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v11;
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 16) - (_QWORD)v11);
  }
  return a1;
}

void ggl::DownscaleTextureComputeShaderSetup::~DownscaleTextureComputeShaderSetup(ggl::DownscaleTextureComputeShaderSetup *this)
{
  ggl::ComputeSetup::~ComputeSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::MaterialTextureManager::colorRampTexturesFromMaterial(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  _QWORD *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *__p;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (!*a3)
    return 0;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(std::__shared_weak_count **)(v3 + 24);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)&v66 = v7;
    BYTE8(v66) = a2;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)&v66 = *(_QWORD *)(v3 + 16);
    BYTE8(v66) = a2;
  }
  v13 = (uint64_t *)(a1 + 240);
  v14 = v66;
  v15 = BYTE8(v66);
  v16 = std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::find<md::MaterialTextureManager::ColorRampKey>((_QWORD *)(a1 + 240), (uint64_t *)v66, BYTE8(v66));
  if (v16)
  {
    v12 = v16[4];
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)*a3 + 1056))(&v70, (float)a2);
  if ((_BYTE)v70)
  {
    LOBYTE(v67) = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)*a3 + 576))(&v67, (float)a2);
    if (!(_BYTE)v70)
    {
      if (!(_BYTE)v67)
        goto LABEL_38;
      std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(&v65, (uint64_t *)__p, *(_QWORD *)(a1 + 328));
      v53 = std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>((uint64_t *)(a1 + 240), v14, v15, &v66);
      v54 = v65;
      v65 = 0uLL;
      v55 = (std::__shared_weak_count *)v53[5];
      *((_OWORD *)v53 + 2) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (!*((_QWORD *)&v65 + 1))
        goto LABEL_38;
      v58 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v32 = __ldaxr(v58);
      while (__stlxr(v32 - 1, v58));
      goto LABEL_36;
    }
  }
  std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(&v65, (uint64_t *)v72, *(_QWORD *)(a1 + 328));
  v25 = std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>((uint64_t *)(a1 + 240), v14, v15, &v66);
  v26 = v65;
  v65 = 0uLL;
  v27 = (std::__shared_weak_count *)v25[5];
  *((_OWORD *)v25 + 2) = v26;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (!*((_QWORD *)&v65 + 1))
    goto LABEL_38;
  v31 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
LABEL_36:
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_38:
  v12 = (uint64_t *)std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>((uint64_t *)(a1 + 240), v66, BYTE8(v66), &v66)[4];
  if ((_BYTE)v67)
  {
    v33 = __p;
    if (__p)
    {
      do
      {
        v34 = (_QWORD *)*v33;
        operator delete(v33);
        v33 = v34;
      }
      while (v34);
    }
    v35 = v68;
    v68 = 0;
    if (v35)
      operator delete(v35);
  }
  if ((_BYTE)v70)
  {
    v36 = v72;
    if (v72)
    {
      do
      {
        v37 = (_QWORD *)*v36;
        operator delete(v36);
        v36 = v37;
      }
      while (v37);
    }
    v38 = v71;
    v71 = 0;
    if (v38)
      operator delete(v38);
  }
LABEL_13:
  v17 = *(_QWORD *)(*a3 + 32);
  v18 = *(std::__shared_weak_count **)(*a3 + 40);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)&v66 = v17;
    BYTE8(v66) = a2;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    *(_QWORD *)&v66 = *(_QWORD *)(*a3 + 32);
    BYTE8(v66) = a2;
  }
  v22 = v66;
  v23 = BYTE8(v66);
  if (!std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::find<md::MaterialTextureManager::ColorRampKey>((_QWORD *)(a1 + 240), (uint64_t *)v66, BYTE8(v66)))
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)*a3 + 1064))(&v70, (float)a2);
    if ((_BYTE)v70)
    {
      LOBYTE(v67) = 0;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)*a3 + 584))(&v67, (float)a2);
      if (!(_BYTE)v70)
      {
        if (!(_BYTE)v67)
          goto LABEL_59;
        std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(&v65, (uint64_t *)__p, *(_QWORD *)(a1 + 328));
        v59 = std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>((uint64_t *)(a1 + 240), v22, v23, &v66);
        v60 = v65;
        v65 = 0uLL;
        v61 = (std::__shared_weak_count *)v59[5];
        *((_OWORD *)v59 + 2) = v60;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          goto LABEL_59;
        v64 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v46 = __ldaxr(v64);
        while (__stlxr(v46 - 1, v64));
        goto LABEL_57;
      }
    }
    std::allocate_shared[abi:nn180100]<md::ColorRampTexture,std::allocator<md::ColorRampTexture>,unsigned int const&,float const&,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>> &,md::SharedResourcesManager *&,void>(&v65, (uint64_t *)v72, *(_QWORD *)(a1 + 328));
    v39 = std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>((uint64_t *)(a1 + 240), v22, v23, &v66);
    v40 = v65;
    v65 = 0uLL;
    v41 = (std::__shared_weak_count *)v39[5];
    *((_OWORD *)v39 + 2) = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (!*((_QWORD *)&v65 + 1))
      goto LABEL_59;
    v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
LABEL_57:
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
LABEL_59:
    std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>(v13, v66, BYTE8(v66), &v66);
    if ((_BYTE)v67)
    {
      v47 = __p;
      if (__p)
      {
        do
        {
          v48 = (_QWORD *)*v47;
          operator delete(v47);
          v47 = v48;
        }
        while (v48);
      }
      v49 = v68;
      v68 = 0;
      if (v49)
        operator delete(v49);
    }
    if ((_BYTE)v70)
    {
      v50 = v72;
      if (v72)
      {
        do
        {
          v51 = (_QWORD *)*v50;
          operator delete(v50);
          v50 = v51;
        }
        while (v51);
      }
      v52 = v71;
      v71 = 0;
      if (v52)
        operator delete(v52);
    }
  }
  return v12;
}

void sub_19F21C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  geo::optional<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~optional((uint64_t)&a14);
  geo::optional<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~optional((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::find<md::MaterialTextureManager::ColorRampKey>(_QWORD *a1, uint64_t *a2, unsigned __int8 a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t **result;
  uint64_t v9;
  unint64_t v11;
  uint64_t *v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = ((unint64_t)&a2[8 * (unint64_t)a3 - 0xC3910C8D016B07DLL] + ((unint64_t)a3 >> 2) - 3) ^ a3;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = ((unint64_t)&a2[8 * (unint64_t)a3 - 0xC3910C8D016B07DLL] + ((unint64_t)a3 >> 2) - 3) ^ a3;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == (uint64_t *)v4)
        {
          if (result[2] == a2 && *((unsigned __int8 *)result + 24) == a3)
            return result;
        }
        else if (((unint64_t)v13 & v9) != v6)
        {
          return 0;
        }
        result = (uint64_t **)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = (unint64_t)result[1];
      if (v11 == v4)
      {
        if (result[2] == a2 && *((unsigned __int8 *)result + 24) == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

void gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::addProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *__p;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  char v37;
  void *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)&__p, a4);
  v37 = 1;
  v5 = __p;
  v6 = v33;
  __p = 0;
  v33 = 0;
  v38 = v5;
  v39 = v6;
  v7 = v34;
  v40 = v34;
  v41 = v35;
  v42 = v36;
  if (v35)
  {
    v8 = v34[1];
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v8 >= v6)
        v8 %= v6;
    }
    else
    {
      v8 &= v6 - 1;
    }
    *((_QWORD *)v5 + v8) = &v40;
    v34 = 0;
    v35 = 0;
  }
  else if (v34)
  {
    do
    {
      v9 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v10 = __p;
  __p = 0;
  if (v10)
    operator delete(v10);
  if (v37)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          do
          {
            v12 = (_QWORD *)*v11;
            operator delete(v11);
            v11 = v12;
          }
          while (v12);
        }
        *(_QWORD *)(a1 + 32) = 0;
        v13 = *(_QWORD *)(a1 + 24);
        if (v13)
        {
          for (i = 0; i != v13; ++i)
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
        }
        *(_QWORD *)(a1 + 40) = 0;
      }
      v15 = v38;
      v38 = 0;
      v16 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v15;
      if (v16)
        operator delete(v16);
      v17 = v39;
      v18 = v40;
      *(_QWORD *)(a1 + 32) = v40;
      *(_QWORD *)(a1 + 24) = v17;
      v39 = 0;
      v19 = v41;
      *(_QWORD *)(a1 + 40) = v41;
      *(_DWORD *)(a1 + 48) = v42;
      if (v19)
      {
        v20 = v18[1];
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v20 >= v17)
            v20 %= v17;
        }
        else
        {
          v20 &= v17 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v20) = a1 + 32;
        v40 = 0;
        v41 = 0;
      }
      if (!v37)
        return;
LABEL_45:
      v29 = v40;
      if (v40)
      {
        do
        {
          v30 = (_QWORD *)*v29;
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
      v31 = v38;
      v38 = 0;
      if (v31)
        operator delete(v31);
      return;
    }
    v24 = v38;
    v25 = v39;
    v26 = v40;
    v27 = v41;
    *(_QWORD *)(a1 + 32) = v40;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 40) = v27;
    *(_DWORD *)(a1 + 48) = v42;
    if (v27)
    {
      v28 = v26[1];
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v28 >= v25)
          v28 %= v25;
      }
      else
      {
        v28 &= v25 - 1;
      }
      v24[v28] = a1 + 32;
      v40 = 0;
      v41 = 0;
    }
    *(_BYTE *)(a1 + 8) = 1;
    if (v37)
      goto LABEL_45;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v21 = *(_QWORD **)(a1 + 32);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    v23 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v23)
      operator delete(v23);
    *(_BYTE *)(a1 + 8) = 0;
    if (v37)
      goto LABEL_45;
  }
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::addProperty(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  __int16 v37;
  void *v38;
  unint64_t v39;
  void *__p;
  uint64_t v41;
  int v42;

  v37 = *a2 | (*a3 << 8);
  std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)&v38, a4);
  if (!a1[7])
    goto LABEL_39;
  v5 = (_QWORD *)a1[5];
  v6 = a1 + 6;
  if (v5 == a1 + 6)
  {
    v12 = (_QWORD *)a1[5];
  }
  else
  {
    v7 = 0;
    v8 = (_QWORD *)a1[5];
    do
    {
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      v8 = v10;
    }
    while (v10 != v6);
    v12 = (_QWORD *)a1[5];
    do
    {
      v13 = v7 >> 1;
      v14 = v12;
      if (v7 != 1)
      {
        v16 = v7 >> 1;
        v17 = v12;
        do
        {
          v19 = (_QWORD *)v17[1];
          if (v19)
          {
            do
            {
              v14 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v17[2];
              v11 = *v14 == (_QWORD)v17;
              v17 = v14;
            }
            while (!v11);
          }
          v17 = v14;
        }
        while (v16-- > 1);
      }
      if (*((unsigned __int8 *)v14 + 33) < HIBYTE(v37))
      {
        v15 = (_QWORD *)v14[1];
        if (v15)
        {
          do
          {
            v12 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v14[2];
            v11 = *v12 == (_QWORD)v14;
            v14 = v12;
          }
          while (!v11);
        }
        v13 = v7 + ~v13;
      }
      v7 = v13;
    }
    while (v13);
  }
  if (v12 == v6 || *((unsigned __int8 *)v12 + 32) >= HIBYTE(v37))
  {
    if (v12 == v5)
      goto LABEL_39;
    v20 = *v12;
    if (*v12)
    {
      do
      {
        v21 = v20;
        v20 = *(_QWORD *)(v20 + 8);
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = v12[2];
        v11 = *(_QWORD *)v21 == (_QWORD)v12;
        v12 = (_QWORD *)v21;
      }
      while (v11);
    }
    if (v37 >= *(unsigned __int8 *)(v21 + 33))
    {
LABEL_39:
      v23 = (uint64_t **)(a1 + 6);
      v22 = (uint64_t *)a1[6];
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            v24 = (uint64_t **)v22;
            v25 = *((unsigned __int8 *)v22 + 33);
            if (HIBYTE(v37) >= v25)
              break;
            v22 = *v24;
            v23 = v24;
            if (!*v24)
              goto LABEL_47;
          }
          if (v25 >= HIBYTE(v37))
            break;
          v22 = v24[1];
          if (!v22)
          {
            v23 = v24 + 1;
            goto LABEL_47;
          }
        }
      }
      else
      {
        v24 = (uint64_t **)(a1 + 6);
LABEL_47:
        v26 = (uint64_t *)operator new(0x50uLL);
        v27 = v26;
        v29 = __p;
        v28 = v41;
        v26[7] = (uint64_t)__p;
        *((_WORD *)v26 + 16) = v37;
        v30 = v38;
        v31 = v39;
        v38 = 0;
        v39 = 0;
        v26[5] = (uint64_t)v30;
        v26[6] = v31;
        v26[8] = v28;
        *((_DWORD *)v26 + 18) = v42;
        if (v28)
        {
          v32 = v29[1];
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v32 >= v31)
              v32 %= v31;
          }
          else
          {
            v32 &= v31 - 1;
          }
          v30[v32] = v26 + 7;
          __p = 0;
          v41 = 0;
        }
        *v26 = 0;
        v26[1] = 0;
        v26[2] = (uint64_t)v24;
        *v23 = v26;
        v33 = *(_QWORD *)a1[5];
        if (v33)
        {
          a1[5] = v33;
          v27 = *v23;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[6], v27);
        ++a1[7];
      }
    }
  }
  v34 = __p;
  if (__p)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  v36 = v38;
  v38 = 0;
  if (v36)
    operator delete(v36);
}

void sub_19F21C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((unsigned __int8 *)result + 16) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)result + 16) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v26 = operator new(0x30uLL);
  *v26 = 0;
  v26[1] = v6;
  *((_BYTE *)v26 + 16) = *(_BYTE *)a3;
  v26[4] = 0;
  v26[5] = 0;
  v26[3] = 0;
  std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>::__init_with_size[abi:ne180100]<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>*,std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>*>((uint64_t)(v26 + 3), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v26;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v16 = v26;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v26)
    {
      v25 = *(_QWORD *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v26;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v26;
LABEL_61:
  result = v26;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F21CAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F21CB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  uint8x8_t v15;
  float **v16;
  float *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = *((float *)v10 + 4);
      if (v13 == 0.0)
        v14 = 0;
      else
        v14 = LODWORD(v13);
      if (v12)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          prime = v14;
          if (v14 >= v12)
            prime = v14 % v12;
        }
        else
        {
          prime = v14 & (v12 + 0xFFFFFFFF);
        }
        v16 = *(float ***)(*(_QWORD *)a1 + 8 * prime);
        if (v16)
        {
          v17 = *v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = *((_QWORD *)v17 + 1);
                if (v19 == v14)
                {
                  if (v17[4] == v13)
                    goto LABEL_81;
                }
                else if ((v19 & (v12 - 1)) != prime)
                {
                  goto LABEL_43;
                }
                v17 = *(float **)v17;
                if (!v17)
                  goto LABEL_43;
              }
            }
            do
            {
              v18 = *((_QWORD *)v17 + 1);
              if (v18 == v14)
              {
                if (v17[4] == v13)
                  goto LABEL_81;
              }
              else
              {
                if (v18 >= v12)
                  v18 %= v12;
                if (v18 != prime)
                  break;
              }
              v17 = *(float **)v17;
            }
            while (v17);
          }
        }
      }
LABEL_43:
      v20 = operator new(0x20uLL);
      *v20 = 0;
      v20[1] = v14;
      *((_DWORD *)v20 + 4) = *((_DWORD *)v10 + 4);
      v21 = *(uint64_t *)((char *)v10 + 20);
      *((_DWORD *)v20 + 7) = *((_DWORD *)v10 + 7);
      *(_QWORD *)((char *)v20 + 20) = v21;
      v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v23 = *(float *)(a1 + 32);
      if (!v12 || (float)(v23 * (float)v12) < v22)
      {
        v24 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v24 = 1;
        v25 = v24 | (2 * v12);
        v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26)
          v27 = v26;
        else
          v27 = v25;
        if (v27 == 1)
        {
          v27 = 2;
        }
        else if ((v27 & (v27 - 1)) != 0)
        {
          v27 = std::__next_prime(v27);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v27 > v12)
          goto LABEL_55;
        if (v27 < v12)
        {
          v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
          {
            v28 = std::__next_prime(v28);
          }
          else
          {
            v30 = 1 << -(char)__clz(v28 - 1);
            if (v28 >= 2)
              v28 = v30;
          }
          if (v27 <= v28)
            v27 = v28;
          if (v27 < v12)
LABEL_55:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v27);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v14 >= v12)
            prime = v14 % v12;
          else
            prime = v14;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v14;
        }
      }
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v32)
      {
        *v20 = *v32;
      }
      else
      {
        *v20 = *v11;
        *v11 = v20;
        *(_QWORD *)(v31 + 8 * prime) = v11;
        if (!*v20)
          goto LABEL_80;
        v33 = *(_QWORD *)(*v20 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v33 >= v12)
            v33 %= v12;
        }
        else
        {
          v33 &= v12 - 1;
        }
        v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
      }
      *v32 = v20;
LABEL_80:
      ++*(_QWORD *)(a1 + 24);
LABEL_81:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  float *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(float **)(a2 + 16); i; i = *(float **)i)
    std::__hash_table<std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,3,(geo::ColorSpace)0>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_19F21CEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F21D02C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F21D040(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

float *std::__hash_table<std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::__unordered_map_hasher<float,std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,geo::Color<float,3,(geo::ColorSpace)0>>>>::__emplace_unique_key_args<float,std::pair<float const,geo::Color<float,3,(geo::ColorSpace)0>> const&>(uint64_t a1, float *a2, uint64_t a3)
{
  unint64_t v3;
  float v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  float **v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *a2;
  if (*a2 == 0.0)
    v7 = 0;
  else
    v7 = *(unsigned int *)a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 + 0xFFFFFFFF);
    }
    v10 = *(float ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (v11[4] == v6)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_26;
            }
            v11 = *(float **)v11;
            if (!v11)
              goto LABEL_26;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[4] == v6)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v3)
              break;
          }
          v11 = *(float **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_26:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_QWORD *)((char *)v15 + 20) = *(_QWORD *)(a3 + 4);
  *((_DWORD *)v15 + 7) = *(_DWORD *)(a3 + 12);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_29:
      *v15 = *v19;
LABEL_64:
      *v19 = v15;
      goto LABEL_65;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_40;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_40:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v3 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_29;
      }
      else
      {
        v3 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = ((_DWORD)v8 - 1) & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_29;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return (float *)v15;
}

void sub_19F21D384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,std::__unordered_map_hasher<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyHash,md::MaterialTextureManager::ColorRampKeyEqual,true>,std::__unordered_map_equal<md::MaterialTextureManager::ColorRampKey,std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>,md::MaterialTextureManager::ColorRampKeyEqual,md::MaterialTextureManager::ColorRampKeyHash,true>,std::allocator<std::__hash_value_type<md::MaterialTextureManager::ColorRampKey,std::shared_ptr<md::ColorRampTexture>>>>::__emplace_unique_key_args<md::MaterialTextureManager::ColorRampKey,std::piecewise_construct_t const&,std::tuple<md::MaterialTextureManager::ColorRampKey const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, unsigned __int8 a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;

  v7 = (a2 + ((unint64_t)a3 << 6) + ((unint64_t)a3 >> 2) - 0x61C8864680B583EBLL) ^ a3;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = (a2 + ((unint64_t)a3 << 6) + ((unint64_t)a3 >> 2) - 0x61C8864680B583EBLL) ^ a3;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == v7)
            {
              if (v11[2] == a2 && *((unsigned __int8 *)v11 + 24) == a3)
                return v11;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v7)
          {
            if (v11[2] == a2 && *((unsigned __int8 *)v11 + 24) == a3)
              return v11;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = a1 + 2;
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a4;
  v11[4] = 0;
  v11[5] = 0;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = a1[1];
    }
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_65;
      v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v8)
      {
        v8 = a1[1];
LABEL_65:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = (v8 - 1) & v7;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v8 = 0;
        a1[1] = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v16;
    if (!*v16)
    {
LABEL_64:
      v8 = prime;
      goto LABEL_65;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*a1 + 8 * v29) = v16;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v31))
        {
          *v26 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*a1 + v32);
          **(_QWORD **)(*a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v31) = v26;
          v26 = i;
          v29 = v31;
        }
      }
      goto LABEL_64;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*a1 + 8 * v27) = v16;
    v36 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_64;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*a1 + 8 * v38))
        {
          *(_QWORD *)(*a1 + 8 * v38) = v26;
          goto LABEL_69;
        }
        *v26 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*a1 + v37);
        **(_QWORD **)(*a1 + v37) = v36;
        v36 = v26;
      }
      v38 = v27;
LABEL_69:
      v26 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_64;
    }
  }
LABEL_78:
  v39 = *a1;
  v40 = *(_QWORD **)(*a1 + 8 * v4);
  if (v40)
  {
    *v11 = *v40;
LABEL_86:
    *v40 = v11;
    goto LABEL_87;
  }
  *v11 = *v16;
  *v16 = v11;
  *(_QWORD *)(v39 + 8 * v4) = v16;
  if (*v11)
  {
    v41 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v41 >= v8)
        v41 %= v8;
    }
    else
    {
      v41 &= v8 - 1;
    }
    v40 = (_QWORD *)(*a1 + 8 * v41);
    goto LABEL_86;
  }
LABEL_87:
  ++a1[3];
  return v11;
}

void sub_19F21D830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::colorRampRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 224);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 720))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::PBRWithColorRampMaterial<ggl::Texture2D>::sourceColorRampRGB(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 720))(*(_QWORD *)(a1 + 16));
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::getProperty@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    result = std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)(a2 + 8), result + 16);
    *a2 = 1;
  }
  return result;
}

void md::CartographicMapEngineConfiguration::createRenderLayers(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v7;
  int8x8_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  int8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  id v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  __int128 v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  unsigned __int8 v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  unint64_t *v105;
  unint64_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int16x8_t v130;
  int32x4_t v131;
  int8x16_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int8x16_t v156;
  int16x8_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int16x8_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int32x4_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int8x16_t v166;
  int32x4_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  char *v188;
  unsigned __int8 v189;
  __int128 v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  __int128 v194;
  unint64_t *v195;
  unint64_t v196;
  int8x16_t v197;
  int16x8_t v198;
  int32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int16x8_t v202;
  int32x4_t v203;
  int8x16_t v204;
  int32x4_t v205;
  int8x16_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int16x8_t v217;
  int32x4_t v218;
  int8x16_t v219;
  int16x8_t v220;
  int32x4_t v221;
  int8x16_t v222;
  int32x4_t v223;
  int8x16_t v224;
  int32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int16x8_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int16x8_t v249;
  int32x4_t v250;
  int16x8_t v251;
  int32x4_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int32x4_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  char *v280;
  char v281;
  unsigned __int8 v282;
  __int128 v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  __int128 v287;
  unint64_t *v288;
  unint64_t v289;
  int8x16_t v290;
  int16x8_t v291;
  int32x4_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int16x8_t v295;
  int32x4_t v296;
  int8x16_t v297;
  int32x4_t v298;
  int8x16_t v299;
  int32x4_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int16x8_t v310;
  int32x4_t v311;
  int8x16_t v312;
  int16x8_t v313;
  int32x4_t v314;
  int8x16_t v315;
  int32x4_t v316;
  int8x16_t v317;
  int32x4_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int16x8_t v333;
  int32x4_t v334;
  int16x8_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int16x8_t v342;
  int32x4_t v343;
  int16x8_t v344;
  int32x4_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int32x4_t v349;
  int8x16_t v350;
  int8x16_t v351;
  int8x16_t v352;
  int32x4_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  id v374;
  void *v375;
  __int16 v376;
  __int16 v377;
  __int16 v378;
  __int16 v379;
  __int16 v380;
  uint64_t v381;
  __int16 v382;
  _WORD *v383;
  _QWORD *v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t *v387;
  unint64_t v388;
  uint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  char v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  RouteRenderLayerObserverProxy *v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  id v421;
  uint64_t v422;
  uint64_t v423;
  md::RouteLineSharedResources *v424;
  md::RouteLineSharedResources *v425;
  _QWORD *v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  char *v434;
  unsigned __int8 v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  __int128 v439;
  unint64_t *v440;
  unint64_t v441;
  int8x16_t v442;
  int16x8_t v443;
  int32x4_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int16x8_t v447;
  int32x4_t v448;
  int8x16_t v449;
  int32x4_t v450;
  int8x16_t v451;
  int32x4_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int16x8_t v462;
  int32x4_t v463;
  int8x16_t v464;
  int16x8_t v465;
  int32x4_t v466;
  int8x16_t v467;
  int32x4_t v468;
  int8x16_t v469;
  int32x4_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int16x8_t v485;
  int32x4_t v486;
  int16x8_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int16x8_t v494;
  int32x4_t v495;
  int16x8_t v496;
  int32x4_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  int32x4_t v501;
  int8x16_t v502;
  int8x16_t v503;
  int8x16_t v504;
  int32x4_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  uint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  unint64_t *v521;
  unint64_t v522;
  md::CRouteRenderResources *v523;
  uint64_t v524;
  void *v525;
  double v526;
  md::RouteLayoutInfo *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  id v531;
  const RenderTargetFormat *v532;
  __int16 v533;
  __int16 v534;
  __int16 v535;
  __int16 v536;
  __int16 v537;
  _WORD *v538;
  VKSharedResources *v539;
  _WORD *v540;
  _WORD *v541;
  __int128 v542;
  _QWORD *v543;
  md::CartographicTiledRenderResources *v544;
  uint64_t *v545;
  unint64_t v546;
  uint64_t *v547;
  unint64_t v548;
  uint64_t *v549;
  unint64_t v550;
  uint64_t *v551;
  unint64_t v552;
  unint64_t *v553;
  unint64_t v554;
  unint64_t *v555;
  unint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  char v580;
  unint64_t *v581;
  unint64_t v582;
  char v583;
  unint64_t *v584;
  unint64_t v585;
  char v586;
  unint64_t *v587;
  unint64_t v588;
  char v589;
  unint64_t *v590;
  unint64_t v591;
  char v592;
  unint64_t *v593;
  unint64_t v594;
  char v595;
  unint64_t *v596;
  unint64_t v597;
  char v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  id v608;
  md::BuildingRenderResources *v609;
  uint64_t v610;
  id v611;
  md::LandmarkRenderResources *v612;
  _WORD *v613;
  __int16 v614;
  __int16 v615;
  __int16 v616;
  int v617;
  int v618;
  const RenderTargetFormat *v619;
  VKSharedResources *v620;
  _WORD *v621;
  md::PolygonRenderResources *v622;
  uint64_t v623;
  uint64_t v624;
  id v625;
  const RenderTargetFormat *v626;
  VKSharedResources *v627;
  _WORD *v628;
  md::PolygonRenderResources *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  int v635;
  _DWORD *v636;
  _DWORD *v637;
  uint64_t v638;
  __int128 *v639;
  size_t prime;
  unint64_t v641;
  int8x8_t v642;
  unint64_t v643;
  uint8x8_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t *v651;
  unint64_t v652;
  _QWORD *v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  _QWORD *v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  uint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unsigned __int8 v679;
  unint64_t *v680;
  unint64_t v681;
  unint64_t v682;
  __int128 v683;
  unint64_t *v684;
  unint64_t v685;
  int8x16_t v686;
  int16x8_t v687;
  int32x4_t v688;
  int8x16_t v689;
  int8x16_t v690;
  int16x8_t v691;
  int32x4_t v692;
  int8x16_t v693;
  int32x4_t v694;
  int8x16_t v695;
  int32x4_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int16x8_t v706;
  int32x4_t v707;
  int8x16_t v708;
  int16x8_t v709;
  int32x4_t v710;
  int8x16_t v711;
  int32x4_t v712;
  int8x16_t v713;
  int32x4_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  int8x16_t v727;
  int8x16_t v728;
  int16x8_t v729;
  int32x4_t v730;
  int16x8_t v731;
  int32x4_t v732;
  int32x4_t v733;
  int32x4_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int16x8_t v738;
  int32x4_t v739;
  int16x8_t v740;
  int32x4_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  int32x4_t v745;
  int8x16_t v746;
  int8x16_t v747;
  int8x16_t v748;
  int32x4_t v749;
  int8x16_t v750;
  int8x16_t v751;
  int8x16_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  int8x16_t v757;
  _QWORD *v758;
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  unint64_t *v762;
  unint64_t v763;
  _QWORD *v764;
  uint64_t v765;
  std::__shared_weak_count *v766;
  unint64_t *v767;
  unint64_t v768;
  _QWORD *v769;
  uint64_t v770;
  std::__shared_weak_count *v771;
  unint64_t *v772;
  unint64_t v773;
  _QWORD *v774;
  uint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  unsigned int v779;
  _QWORD *v780;
  unint64_t v781;
  uint64_t v782;
  _QWORD *v784;
  _QWORD *v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  _QWORD *v796;
  ggl::CommonMesh::Pos4Mesh *v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  unint64_t v804;
  std::__shared_weak_count *v805;
  unint64_t *v806;
  unint64_t v807;
  uint64_t v808;
  _OWORD *v809;
  std::__shared_weak_count *v810;
  unint64_t *v811;
  uint64_t v812;
  std::__shared_weak_count_vtbl *v813;
  uint64_t v814;
  unint64_t v815;
  unint64_t v816;
  std::__shared_weak_count *v817;
  unint64_t *v818;
  unint64_t v819;
  unint64_t v820;
  unint64_t shared_weak_owners;
  unint64_t v822;
  unint64_t v823;
  md::GridRenderResources *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  VKSharedResources *v835;
  id v836;
  const RenderTargetFormat *v837;
  __int16 v838;
  _WORD *v839;
  std::__shared_weak_count *v840;
  unint64_t *v841;
  unint64_t v842;
  std::__shared_weak_count *v843;
  unint64_t *v844;
  unint64_t v845;
  md::CoastLineRenderResources *v846;
  id v847;
  const RenderTargetFormat *v848;
  md::CoastLineRenderResources *v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  VKSharedResources *v865;
  int v866;
  int v867;
  _DWORD *v868;
  _DWORD *v869;
  std::__shared_weak_count *v870;
  unint64_t *v871;
  unint64_t v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  std::__shared_weak_count *v876;
  unint64_t *v877;
  unint64_t v878;
  std::__shared_weak_count *v879;
  unint64_t *v880;
  unint64_t v881;
  uint64_t v882;
  _OWORD *v883;
  VKSharedResources *v884;
  uint64_t v885;
  uint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  char *v890;
  unsigned __int8 v891;
  unint64_t *v892;
  unint64_t v893;
  unint64_t v894;
  __int128 v895;
  unint64_t *v896;
  unint64_t v897;
  std::__shared_weak_count *v898;
  unint64_t *v899;
  unint64_t v900;
  unint64_t *v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  char *v908;
  unsigned __int8 v909;
  unint64_t *v910;
  unint64_t v911;
  unint64_t v912;
  __int128 v913;
  unint64_t *v914;
  unint64_t v915;
  int8x16_t v916;
  int16x8_t v917;
  int32x4_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int16x8_t v921;
  int32x4_t v922;
  int8x16_t v923;
  int32x4_t v924;
  int8x16_t v925;
  int32x4_t v926;
  int8x16_t v927;
  int8x16_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int8x16_t v931;
  int8x16_t v932;
  int16x8_t v933;
  int32x4_t v934;
  int8x16_t v935;
  int16x8_t v936;
  int32x4_t v937;
  int8x16_t v938;
  int32x4_t v939;
  int8x16_t v940;
  int32x4_t v941;
  int8x16_t v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int8x16_t v951;
  int8x16_t v952;
  int8x16_t v953;
  int8x16_t v954;
  int16x8_t v955;
  int32x4_t v956;
  int16x8_t v957;
  int32x4_t v958;
  int32x4_t v959;
  int32x4_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int8x16_t v964;
  int8x16_t v965;
  int8x16_t v966;
  int8x16_t v967;
  int8x16_t v968;
  int8x16_t v969;
  int16x8_t v970;
  int32x4_t v971;
  int16x8_t v972;
  int32x4_t v973;
  int32x4_t v974;
  int32x4_t v975;
  int8x16_t v976;
  int8x16_t v977;
  int8x16_t v978;
  int8x16_t v979;
  int8x16_t v980;
  int8x16_t v981;
  int8x16_t v982;
  std::__shared_weak_count *v983;
  unint64_t *v984;
  unint64_t v985;
  unint64_t *v986;
  unint64_t v987;
  _QWORD *v988;
  _QWORD *v989;
  uint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  unint64_t *v994;
  unint64_t v995;
  _QWORD *v996;
  uint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  unint64_t *v1000;
  unint64_t v1001;
  std::__shared_weak_count *v1002;
  unint64_t *v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  md::SkyRenderResources *v1019;
  uint64_t v1020;
  uint64_t v1021;
  VKSharedResources *v1022;
  __int16 v1023;
  _WORD *v1024;
  _WORD *v1025;
  std::__shared_weak_count *v1026;
  unint64_t *v1027;
  unint64_t v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  uint64_t v1032;
  id v1033;
  _OWORD *v1034;
  VKSharedResources *v1035;
  uint64_t v1036;
  uint64_t v1037;
  std::__shared_weak_count *v1038;
  unint64_t *v1039;
  unint64_t v1040;
  char *v1041;
  unsigned __int8 v1042;
  unint64_t *v1043;
  unint64_t v1044;
  unint64_t v1045;
  __int128 v1046;
  unint64_t *v1047;
  unint64_t v1048;
  std::__shared_weak_count *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  unint64_t *v1052;
  unint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  unint64_t *v1056;
  unint64_t v1057;
  _QWORD *v1058;
  uint64_t v1059;
  std::__shared_weak_count *v1060;
  unint64_t *v1061;
  unint64_t v1062;
  std::__shared_weak_count *v1063;
  unint64_t *v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  unint64_t *v1068;
  unint64_t v1069;
  _QWORD *v1070;
  uint64_t v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  md::GlobeSkyRenderResources *v1078;
  uint64_t v1079;
  uint64_t v1080;
  _WORD *v1081;
  __int16 v1082;
  __int16 v1083;
  __int16 v1084;
  __int16 v1085;
  __int16 v1086;
  __int16 v1087;
  _WORD *v1088;
  _DWORD *v1089;
  unsigned __int8 v1090;
  uint64_t v1091;
  unsigned __int8 v1092;
  uint64_t v1093;
  unsigned __int8 v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  VKSharedResources *v1108;
  id v1109;
  const RenderTargetFormat *v1110;
  __int16 v1111;
  _WORD *v1112;
  VKSharedResources *v1113;
  _WORD *v1114;
  _WORD *v1115;
  __int128 v1116;
  _WORD *v1117;
  md::CartographicTiledRenderResources *v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  VKSharedResources *v1129;
  __int16 v1130;
  _WORD *v1131;
  _WORD *v1132;
  std::__shared_weak_count *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  std::__shared_weak_count *v1136;
  unint64_t *v1137;
  unint64_t v1138;
  md::PuckRenderResources *v1139;
  id v1140;
  md::PuckRenderResources *v1141;
  uint64_t v1142;
  uint64_t v1143;
  VKSharedResources *v1144;
  id v1145;
  const RenderTargetFormat *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  _QWORD *v1151;
  VKSharedResources *v1152;
  _WORD *v1153;
  _WORD *v1154;
  __int128 v1155;
  _QWORD *v1156;
  md::CartographicTiledRenderResources *v1157;
  std::__shared_weak_count *v1158;
  uint64_t *v1159;
  unint64_t v1160;
  std::__shared_weak_count *v1161;
  unint64_t *v1162;
  unint64_t v1163;
  std::__shared_weak_count *v1164;
  unint64_t *v1165;
  unint64_t v1166;
  std::__shared_weak_count *v1167;
  unint64_t *v1168;
  unint64_t v1169;
  md::PolygonRenderResources *v1170;
  id v1171;
  md::CVenueRenderResources *v1172;
  id v1173;
  __int16 v1174;
  std::__shared_weak_count *v1175;
  __int16 v1176;
  unint64_t *v1177;
  unint64_t v1178;
  std::__shared_weak_count *v1179;
  unint64_t *v1180;
  unint64_t v1181;
  std::__shared_weak_count *v1182;
  unint64_t *v1183;
  unint64_t v1184;
  std::__shared_weak_count *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  std::__shared_weak_count *v1188;
  unint64_t *v1189;
  unint64_t v1190;
  std::__shared_weak_count *v1191;
  unint64_t *v1192;
  unint64_t v1193;
  std::__shared_weak_count *v1194;
  unint64_t *v1195;
  unint64_t v1196;
  uint64_t v1197;
  md::PostchainRenderLayer *v1198;
  uint64_t v1199;
  uint64_t v1200;
  VKSharedResources *v1201;
  id v1202;
  const RenderTargetFormat *v1203;
  __int16 v1204;
  _WORD *v1205;
  VKSharedResources *v1206;
  _WORD *v1207;
  _WORD *v1208;
  __int128 v1209;
  _WORD *v1210;
  md::CartographicTiledRenderResources *v1211;
  std::__shared_weak_count *v1212;
  unint64_t *v1213;
  unint64_t v1214;
  std::__shared_weak_count *v1215;
  unint64_t *v1216;
  unint64_t v1217;
  uint64_t v1218;
  id v1219;
  __int128 *v1220;
  VKSharedResources *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  unint64_t *v1225;
  unint64_t v1226;
  uint64_t v1227;
  _QWORD *v1228;
  uint64_t v1229;
  std::__shared_weak_count *v1230;
  unint64_t *v1231;
  unint64_t v1232;
  std::__shared_weak_count *v1233;
  unint64_t *v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  unint64_t *v1238;
  unint64_t v1239;
  uint64_t v1240;
  _QWORD *v1241;
  uint64_t v1242;
  std::__shared_weak_count *v1243;
  unint64_t *v1244;
  unint64_t v1245;
  std::__shared_weak_count *v1246;
  unint64_t *v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  unint64_t *v1253;
  uint64_t v1254;
  uint64_t v1255;
  __int128 *v1256;
  uint64_t v1257;
  __int128 *v1258;
  uint64_t v1259;
  uint64_t *v1260;
  unsigned __int8 v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  unint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  _OWORD *v1277;
  __int128 *v1278;
  uint64_t v1279;
  __int128 v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  unint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  _OWORD *v1295;
  __int128 *v1296;
  uint64_t v1297;
  __int128 v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t (***v1303)();
  uint64_t v1304;
  uint64_t (***v1305)();
  uint64_t v1306;
  md::HillshadeRenderResources *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  _QWORD *v1311;
  uint64_t v1312;
  _QWORD *v1313;
  uint64_t v1314;
  _QWORD *v1315;
  uint64_t v1316;
  _WORD *v1317;
  __int16 v1318;
  __int16 v1319;
  __int16 v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  _QWORD *v1333;
  uint64_t v1334;
  _QWORD *v1335;
  uint64_t v1336;
  _QWORD *v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  id v1346;
  const RenderTargetFormat *v1347;
  VKSharedResources *v1348;
  _WORD *v1349;
  md::PolygonRenderResources *v1350;
  uint64_t v1351;
  uint64_t v1352;
  const ggl::StandardLibrary *v1353;
  uint64_t v1354;
  std::__shared_weak_count *v1355;
  unint64_t *v1356;
  unint64_t v1357;
  uint64_t *v1358;
  uint64_t v1359;
  const ggl::StandardLibrary *v1360;
  uint64_t v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  VKSharedResources *v1368;
  id v1369;
  const RenderTargetFormat *v1370;
  __int16 v1371;
  _WORD *v1372;
  VKSharedResources *v1373;
  _WORD *v1374;
  _WORD *v1375;
  __int128 v1376;
  _WORD *v1377;
  md::CartographicTiledRenderResources *v1378;
  std::__shared_weak_count *v1379;
  unint64_t *v1380;
  unint64_t v1381;
  const md::SharedDeviceResources *v1382;
  id v1383;
  std::__shared_weak_count *v1384;
  unint64_t *v1385;
  unint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  VKSharedResources *v1389;
  _WORD *v1390;
  __int16 v1391;
  _WORD *v1392;
  __int128 v1393;
  _WORD *v1394;
  std::__shared_weak_count *v1395;
  unint64_t *v1396;
  unint64_t v1397;
  uint64_t v1398;
  VKSharedResources *v1399;
  unint64_t *v1400;
  uint64_t v1401;
  uint64_t v1402;
  __int128 *v1403;
  uint64_t v1404;
  __int128 *v1405;
  uint64_t v1406;
  _QWORD *v1407;
  uint64_t v1408;
  std::__shared_weak_count *v1409;
  unint64_t *v1410;
  unint64_t v1411;
  _QWORD *v1412;
  uint64_t v1413;
  std::__shared_weak_count *v1414;
  unint64_t *v1415;
  unint64_t v1416;
  _QWORD *v1417;
  uint64_t v1418;
  std::__shared_weak_count *v1419;
  unint64_t *v1420;
  unint64_t v1421;
  _QWORD *v1422;
  uint64_t v1423;
  std::__shared_weak_count *v1424;
  unint64_t *v1425;
  unint64_t v1426;
  uint64_t *v1427;
  unsigned __int8 v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  _OWORD *v1444;
  __int128 *v1445;
  uint64_t v1446;
  __int128 v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  unint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  _OWORD *v1462;
  __int128 *v1463;
  uint64_t v1464;
  __int128 v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t (***v1470)();
  uint64_t v1471;
  uint64_t (***v1472)();
  uint64_t v1473;
  uint64_t v1474;
  std::__shared_weak_count *v1475;
  unint64_t *v1476;
  uint64_t v1477;
  std::__shared_weak_count_vtbl *v1478;
  _WORD *v1479;
  __int16 v1480;
  __int16 v1481;
  __int16 v1482;
  uint64_t v1483;
  __int16 v1484;
  __int16 v1485;
  __int16 v1486;
  __int16 v1487;
  __int16 v1488;
  __int16 v1489;
  uint64_t v1490;
  unsigned __int8 v1491;
  unsigned __int8 v1492;
  uint64_t v1493;
  uint64_t v1494;
  unint64_t v1495;
  uint64_t v1496;
  unint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  std::__shared_weak_count *v1500;
  unint64_t *v1501;
  unint64_t v1502;
  unsigned __int8 v1503;
  uint64_t v1504;
  uint64_t v1505;
  __int128 v1506;
  unsigned __int8 v1507;
  _QWORD *v1508;
  std::__shared_weak_count *v1509;
  uint64_t v1510;
  uint64_t v1511;
  VKSharedResources *v1512;
  unint64_t *v1513;
  unint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  std::__shared_weak_count *v1517;
  unint64_t *v1518;
  unint64_t v1519;
  unint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  unint64_t v1523;
  uint64_t v1524;
  unint64_t v1525;
  std::__shared_weak_count *v1526;
  unint64_t *v1527;
  unint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  float v1538;
  unint64_t v1539;
  unint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  std::__shared_weak_count *v1546;
  unint64_t *v1547;
  unint64_t v1548;
  char *v1549;
  unsigned __int8 v1550;
  unint64_t *v1551;
  unint64_t v1552;
  unint64_t v1553;
  __int128 v1554;
  unint64_t *v1555;
  unint64_t v1556;
  std::__shared_weak_count *v1557;
  unint64_t *v1558;
  unint64_t v1559;
  unint64_t *v1560;
  unint64_t v1561;
  uint64_t AtmosphereLookupTexture;
  uint64_t v1563;
  md::GlobeRasterRenderResources *v1564;
  uint64_t v1565;
  std::__shared_weak_count *v1566;
  unint64_t *v1567;
  unint64_t v1568;
  std::__shared_weak_count *v1569;
  unint64_t *v1570;
  unint64_t v1571;
  std::__shared_weak_count *v1572;
  unint64_t *v1573;
  unint64_t v1574;
  ggl::TexturedShader *v1575;
  unsigned __int8 v1576;
  unsigned __int8 v1577;
  unsigned __int8 v1578;
  ggl::ClutShader *v1579;
  unsigned __int8 v1580;
  unsigned __int8 v1581;
  unsigned __int8 v1582;
  ggl::TextureWithReverseAlphaShader *v1583;
  unsigned __int8 v1584;
  unsigned __int8 v1585;
  unsigned __int8 v1586;
  ggl::ManeuverPointShader *v1587;
  unsigned __int8 v1588;
  unsigned __int8 v1589;
  unsigned __int8 v1590;
  ggl::GridUVShader *v1591;
  unsigned __int8 v1592;
  unsigned __int8 v1593;
  unsigned __int8 v1594;
  ggl::SkyShader *v1595;
  unsigned __int8 v1596;
  unsigned __int8 v1597;
  unsigned __int8 v1598;
  ggl::FogShader *v1599;
  unsigned __int8 v1600;
  unsigned __int8 v1601;
  unsigned __int8 v1602;
  ggl::GlobeStarsShader *v1603;
  unsigned __int8 v1604;
  unsigned __int8 v1605;
  unsigned __int8 v1606;
  uint64_t v1607;
  geo::read_write_lock *v1608;
  const char *v1609;
  malloc_zone_t *zone;
  uint64_t v1611;
  geo::read_write_lock *v1612;
  const char *v1613;
  malloc_zone_t *v1614;
  uint64_t v1615;
  geo::read_write_lock *v1616;
  const char *v1617;
  malloc_zone_t *v1618;
  uint64_t v1619;
  geo::read_write_lock *v1620;
  const char *v1621;
  malloc_zone_t *v1622;
  uint64_t v1623;
  geo::read_write_lock *v1624;
  const char *v1625;
  malloc_zone_t *v1626;
  uint64_t v1627;
  geo::read_write_lock *v1628;
  const char *v1629;
  malloc_zone_t *v1630;
  uint64_t v1631;
  geo::read_write_lock *v1632;
  const char *v1633;
  malloc_zone_t *v1634;
  uint64_t v1635;
  geo::read_write_lock *v1636;
  const char *v1637;
  malloc_zone_t *v1638;
  uint64_t v1639;
  geo::read_write_lock *v1640;
  const char *v1641;
  malloc_zone_t *v1642;
  unsigned __int8 v1643;
  uint64_t v1644;
  geo::read_write_lock *v1645;
  const char *v1646;
  malloc_zone_t *v1647;
  uint64_t v1648;
  geo::read_write_lock *v1649;
  const char *v1650;
  malloc_zone_t *v1651;
  uint64_t v1652;
  geo::read_write_lock *v1653;
  const char *v1654;
  malloc_zone_t *v1655;
  int v1656;
  uint64_t v1657;
  geo::read_write_lock *v1658;
  const char *v1659;
  malloc_zone_t *v1660;
  ggl::GlobeTexturedShader *v1661;
  unsigned __int8 v1662;
  unsigned __int8 v1663;
  unsigned __int8 v1664;
  unsigned __int8 v1665;
  unsigned __int8 v1666;
  unsigned __int8 v1667;
  unsigned __int8 v1668;
  unsigned __int8 v1669;
  unsigned __int8 v1670;
  unsigned __int8 v1671;
  unsigned __int8 v1672;
  unsigned __int8 v1673;
  unsigned __int8 v1674;
  unsigned __int8 v1675;
  unsigned __int8 v1676;
  unsigned __int8 v1677;
  unsigned __int8 v1678;
  unsigned __int8 v1679;
  unsigned __int8 v1680;
  unsigned __int8 v1681;
  unsigned __int8 v1682;
  unsigned __int8 v1683;
  unsigned __int8 v1684;
  unsigned __int8 v1685;
  unsigned __int8 v1686;
  unsigned __int8 v1687;
  unsigned __int8 v1688;
  unsigned __int8 v1689;
  unsigned __int8 v1690;
  unsigned __int8 v1691;
  VKSharedResources *v1692;
  int v1693;
  __int16 v1694;
  id v1695;
  uint64_t v1696;
  __int16 v1697;
  uint64_t v1698;
  id v1699;
  __int128 v1700;
  __int16 v1701;
  VKSharedResources *v1702;
  uint64_t **v1703;
  id v1704;
  uint64_t v1705;
  id v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1710;
  std::__shared_weak_count_vtbl *v1711;
  uint64_t v1712;
  _OWORD *v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  md::GlobeRasterRenderResources **v1717;
  id v1718;
  uint64_t v1719;
  uint64_t v1720;
  id v1721;
  uint64_t v1722;
  __int128 v1723;
  __int128 v1724;
  VKSharedResources *v1725;
  uint64_t v1726;
  uint64_t v1727;
  id v1728;
  void *v1729;
  id v1730;
  uint64_t *v1731;
  md::CartographicRenderer *v1732;
  md::CartographicRenderer *v1733;
  uint64_t v1734;
  std::__shared_weak_count *v1735;
  char *v1736;
  std::__shared_weak_count *v1737;
  uint64_t v1738;
  std::__shared_weak_count *v1739;
  uint64_t v1740;
  std::__shared_weak_count *v1741;
  uint64_t v1742;
  std::__shared_weak_count *v1743;
  _BYTE v1744[36];
  _BYTE v1745[12];
  uint64_t (**v1746)();
  std::__shared_weak_count *v1747;
  uint64_t (***v1748)();
  uint64_t (**v1749)();
  std::__shared_weak_count *v1750;
  uint64_t *v1751;
  __int128 v1752;
  __int128 v1753;
  __int128 v1754;
  __int128 v1755;
  uint64_t v1756;

  v1756 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = (uint64_t *)operator new(0x1B0uLL);
  a4[2] = v7 + 54;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *((_OWORD *)v7 + 19) = 0u;
  *((_OWORD *)v7 + 20) = 0u;
  *((_OWORD *)v7 + 21) = 0u;
  *((_OWORD *)v7 + 22) = 0u;
  *((_OWORD *)v7 + 23) = 0u;
  *((_OWORD *)v7 + 24) = 0u;
  *((_OWORD *)v7 + 25) = 0u;
  *((_OWORD *)v7 + 26) = 0u;
  *a4 = v7;
  a4[1] = v7 + 54;
  v1703 = a4;
  v1732 = *(md::CartographicRenderer **)(a3 + 856);
  v1726 = a2;
  v8 = *(int8x8_t **)(a2 + 1120);
  v9 = v8[2];
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x3F812BA5755E8568;
    if (*(_QWORD *)&v9 <= 0x3F812BA5755E8568uLL)
      v11 = 0x3F812BA5755E8568uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x3F812BA5755E8568;
  }
  v12 = v8[1];
  v13 = *(_QWORD **)(*(_QWORD *)&v12 + 8 * v11);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_20:
    v17 = 0;
    goto LABEL_21;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x3F812BA5755E8568)
      {
        if (v14[2] == 0x3F812BA5755E8568)
          goto LABEL_569;
      }
      else if ((v16 & (*(_QWORD *)&v9 - 1)) != v11)
      {
        goto LABEL_20;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_20;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x3F812BA5755E8568)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_20;
LABEL_10:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_20;
  }
  if (v14[2] != 0x3F812BA5755E8568)
    goto LABEL_10;
LABEL_569:
  v17 = v14[5];
LABEL_21:
  if (v10.u32[0] > 1uLL)
  {
    v18 = 0x652FEFC5C602CC21;
    if (*(_QWORD *)&v9 <= 0x652FEFC5C602CC21uLL)
      v18 = 0x652FEFC5C602CC21uLL % *(_QWORD *)&v9;
  }
  else
  {
    v18 = (*(_QWORD *)&v9 - 1) & 0x652FEFC5C602CC21;
  }
  v19 = *(_QWORD **)(*(_QWORD *)&v12 + 8 * v18);
  if (!v19 || (v20 = (_QWORD *)*v19) == 0)
  {
LABEL_40:
    v1719 = 0;
    goto LABEL_41;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x652FEFC5C602CC21)
      {
        if (v20[2] == 0x652FEFC5C602CC21)
          goto LABEL_570;
      }
      else if ((v22 & (*(_QWORD *)&v9 - 1)) != v18)
      {
        goto LABEL_40;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_40;
    }
  }
  while (2)
  {
    v21 = v20[1];
    if (v21 != 0x652FEFC5C602CC21)
    {
      if (v21 >= *(_QWORD *)&v9)
        v21 %= *(_QWORD *)&v9;
      if (v21 != v18)
        goto LABEL_40;
      goto LABEL_30;
    }
    if (v20[2] != 0x652FEFC5C602CC21)
    {
LABEL_30:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_40;
      continue;
    }
    break;
  }
LABEL_570:
  v1719 = v20[5];
LABEL_41:
  if (v10.u32[0] > 1uLL)
  {
    v23 = 0x79FE0BD9535D5C4DLL;
    if (*(_QWORD *)&v9 <= 0x79FE0BD9535D5C4DuLL)
      v23 = 0x79FE0BD9535D5C4DuLL % *(_QWORD *)&v9;
  }
  else
  {
    v23 = (*(_QWORD *)&v9 - 1) & 0x79FE0BD9535D5C4DLL;
  }
  v24 = *(_QWORD **)(*(_QWORD *)&v12 + 8 * v23);
  if (v24)
  {
    v25 = (_QWORD *)*v24;
    if (v25)
    {
      if (v10.u32[0] < 2uLL)
      {
        v26 = *(_QWORD *)&v9 - 1;
        while (1)
        {
          v28 = v25[1];
          if (v28 == 0x79FE0BD9535D5C4DLL)
          {
            if (v25[2] == 0x79FE0BD9535D5C4DLL)
              goto LABEL_571;
          }
          else if ((v28 & v26) != v23)
          {
            goto LABEL_60;
          }
          v25 = (_QWORD *)*v25;
          if (!v25)
            goto LABEL_60;
        }
      }
      do
      {
        v27 = v25[1];
        if (v27 == 0x79FE0BD9535D5C4DLL)
        {
          if (v25[2] == 0x79FE0BD9535D5C4DLL)
          {
LABEL_571:
            v29 = v25[5];
            goto LABEL_61;
          }
        }
        else
        {
          if (v27 >= *(_QWORD *)&v9)
            v27 %= *(_QWORD *)&v9;
          if (v27 != v23)
            break;
        }
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
  }
LABEL_60:
  v29 = 0;
LABEL_61:
  v30 = *(id *)(v17 + 128);
  v31 = v8[2];
  if (!*(_QWORD *)&v31)
    goto LABEL_81;
  v32 = (uint8x8_t)vcnt_s8(v31);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v31 <= 0x20A1ED17D78F322BuLL)
      v33 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v31;
  }
  else
  {
    v33 = (*(_QWORD *)&v31 - 1) & 0x20A1ED17D78F322BLL;
  }
  v34 = *(_QWORD **)(*(_QWORD *)&v8[1] + 8 * v33);
  if (!v34 || (v35 = (_QWORD *)*v34) == 0)
  {
LABEL_81:
    v39 = 0;
    goto LABEL_82;
  }
  if (v32.u32[0] < 2uLL)
  {
    v36 = *(_QWORD *)&v31 - 1;
    while (1)
    {
      v38 = v35[1];
      if (v38 == 0x20A1ED17D78F322BLL)
      {
        if (v35[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_1291;
      }
      else if ((v38 & v36) != v33)
      {
        goto LABEL_81;
      }
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_81;
    }
  }
  while (2)
  {
    v37 = v35[1];
    if (v37 != 0x20A1ED17D78F322BLL)
    {
      if (v37 >= *(_QWORD *)&v31)
        v37 %= *(_QWORD *)&v31;
      if (v37 != v33)
        goto LABEL_81;
      goto LABEL_71;
    }
    if (v35[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_71:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_81;
      continue;
    }
    break;
  }
LABEL_1291:
  v39 = v35[5];
LABEL_82:
  v40 = md::LabelsLogic::labelManagerForWorldType(v39, a1[32]);
  v42 = *(_QWORD *)v40;
  v41 = (std::__shared_weak_count *)*((_QWORD *)v40 + 1);
  v1738 = *(_QWORD *)v40;
  v1739 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
  }
  v1707 = v29;
  v45 = *((id *)v1732 + 13);
  objc_msgSend(v45, "format");
  v46 = (char *)operator new(0x30uLL);
  *((_QWORD *)v46 + 1) = 0;
  *((_QWORD *)v46 + 2) = 0;
  *(_QWORD *)v46 = &off_1E42DD968;
  *((_QWORD *)v46 + 3) = 0;
  *((_QWORD *)v46 + 4) = 0;
  *(_DWORD *)(v46 + 39) = 0;
  v47 = operator new(0xE8uLL);
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_1E42E2B38;
  v48 = ggl::BufferData::BufferData((uint64_t)(v47 + 3), qword_1EE556758, 2, 1, 6, 1);
  v47[28] = ggl::Building::Fade::reflection(void)::reflection;
  v47[3] = &off_1E42B9E10;
  v49 = (std::__shared_weak_count *)*((_QWORD *)v46 + 4);
  *((_QWORD *)v46 + 3) = v48;
  *((_QWORD *)v46 + 4) = v47;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v46[42] = 0;
  v1736 = v46 + 24;
  v1737 = (std::__shared_weak_count *)v46;

  v1721 = *((id *)v1732 + 13);
  v52 = (_OWORD *)objc_msgSend(v1721, "format");
  v1699 = v30;
  v53 = operator new();
  v54 = v1699;
  *(_QWORD *)v53 = &off_1E42AA930;
  *(_OWORD *)(v53 + 8) = 0u;
  *(_OWORD *)(v53 + 24) = 0u;
  *(_OWORD *)(v53 + 40) = 0u;
  *(_OWORD *)(v53 + 56) = 0u;
  *(_OWORD *)(v53 + 72) = 0u;
  *(_OWORD *)(v53 + 88) = 0u;
  *(_QWORD *)(v53 + 104) = 0;
  v55 = objc_msgSend(v54, "shaderLibrary");
  v56 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v1727 = v55;
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v56[1], 2, 1, 0, 6, 6);
  LODWORD(v56[10].__vftable) = 0;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v56[1].__shared_owners_ = 2;
  v56[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v56[9].__shared_weak_owners_ = (uint64_t)"index data";
  *(_QWORD *)&v1754 = v56 + 1;
  *((_QWORD *)&v1754 + 1) = v56;
  *(_OWORD *)v1744 = 0uLL;
  *(_QWORD *)&v58 = 0;
  *((_QWORD *)&v58 + 1) = v56 + 1;
  v59 = v56[4].__vftable;
  *(_OWORD *)v1744 = v58;
  *(_OWORD *)&v1744[16] = xmmword_19FFB3400;
  *(_QWORD *)&v1745[4] = v59;
  *(_WORD *)&v1744[32] = 1;
  v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
  LODWORD(v59->~__shared_weak_count_0) = 196610;
  v60 = operator new();
  ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)v60, "UnitQuad");
  do
    v61 = __ldxr(v57);
  while (__stxr(v61 + 1, v57));
  do
    v62 = __ldxr(v57);
  while (__stxr(v62 + 1, v57));
  v63 = *(std::__shared_weak_count **)(v60 + 104);
  *(_QWORD *)(v60 + 96) = v56 + 1;
  *(_QWORD *)(v60 + 104) = v56;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  do
    v66 = __ldaxr(v57);
  while (__stlxr(v66 - 1, v57));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  v67 = **(_QWORD **)(v60 + 64);
  v68 = 4 * *(_QWORD *)(v67 + 8);
  v69 = *(_QWORD *)(v67 + 72);
  v70 = *(_QWORD *)(v67 + 80) - v69;
  if (v68 != v70)
  {
    if (v68 <= v70)
    {
      if (v68 < v70)
        *(_QWORD *)(v67 + 80) = v69 + v68;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v67 + 72, v68 - v70);
    }
    v71 = *(std::__shared_weak_count **)(v67 + 32);
    *(_QWORD *)(v67 + 24) = 0;
    *(_QWORD *)(v67 + 32) = 0;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    *(_QWORD *)(v67 + 120) = 0;
    *(_DWORD *)(v67 + 112) = 0;
    v74 = *(_QWORD *)(v67 + 80) - *(_QWORD *)(v67 + 72);
    *(_QWORD *)(v67 + 40) = 0;
    *(_QWORD *)(v67 + 48) = v74;
    *(_QWORD *)(v67 + 56) = 0;
    *(_QWORD *)(v67 + 64) = v74;
    v67 = **(_QWORD **)(v60 + 64);
    v68 = 4 * *(_QWORD *)(v67 + 8);
  }
  if (v68)
    v75 = *(_QWORD *)(v67 + 72);
  else
    v75 = 0;
  *(_QWORD *)v75 = 0;
  *(_QWORD *)(v75 + 8) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v75 + 16) = xmmword_19FFB3960;
  *(_OWORD *)(v75 + 32) = _Q1;
  *(_OWORD *)(v75 + 48) = xmmword_19FFB3970;
  if (v75 && v68)
  {
    if (*(_QWORD *)(v67 + 64) > v68)
      v68 = *(_QWORD *)(v67 + 64);
    *(_QWORD *)(v67 + 56) = 0;
    *(_QWORD *)(v67 + 64) = v68;
  }
  if (*(_QWORD *)&v1745[4] && *(_QWORD *)&v1744[24] != *(_QWORD *)&v1744[16])
  {
    v80 = *(_QWORD *)&v1744[8];
    if (*(_QWORD *)v1744 && *(_BYTE *)(*(_QWORD *)&v1744[8] + 17) != 2)
      (*(void (**)(void))(**(_QWORD **)v1744 + 64))();
    if (v1744[32] && !v1744[33])
    {
      v82 = *(_QWORD *)(*(_QWORD *)&v1744[8] + 56);
      v81 = *(_QWORD *)(*(_QWORD *)&v1744[8] + 64);
      if (v81 == v82)
        v82 = *(_QWORD *)(*(_QWORD *)&v1744[8] + 80) - *(_QWORD *)(*(_QWORD *)&v1744[8] + 72);
      if (*(_QWORD *)&v1744[16] < v82)
        v82 = *(_QWORD *)&v1744[16];
      if (v81 <= *(_QWORD *)&v1744[24])
        v81 = *(_QWORD *)&v1744[24];
      if (v81 == v82)
        v81 = v82 + *(_QWORD *)(*(_QWORD *)&v1744[8] + 80) - *(_QWORD *)(*(_QWORD *)&v1744[8] + 72);
      *(_QWORD *)(*(_QWORD *)&v1744[8] + 56) = v82;
      *(_QWORD *)(v80 + 64) = v81;
    }
  }
  v83 = v1727;
  if (*((_QWORD *)&v1754 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }
  v86 = *(_QWORD *)(v53 + 24);
  *(_QWORD *)(v53 + 24) = v60;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = operator new();
  *(_DWORD *)(v87 + 32) = 0;
  *(_QWORD *)(v87 + 16) = 0;
  *(_QWORD *)(v87 + 24) = 0;
  *(_QWORD *)v87 = &off_1E42B5DE8;
  *(_QWORD *)(v87 + 8) = 0;
  *(_QWORD *)(v87 + 36) = 65537;
  *(_DWORD *)(v87 + 44) = 0;
  *(_QWORD *)(v87 + 48) = 0xFF7F0200000700;
  *(_WORD *)(v87 + 56) = 0;
  *(_BYTE *)(v87 + 58) = 3;
  *(_QWORD *)(v87 + 67) = 0;
  *(_QWORD *)(v87 + 59) = 0;
  *(_BYTE *)(v87 + 75) = 0;
  *(_QWORD *)(v87 + 132) = 0;
  *(_QWORD *)(v87 + 124) = 0;
  *(_WORD *)(v87 + 188) = 257;
  *(_QWORD *)(v87 + 192) = 0;
  *(_QWORD *)(v87 + 200) = 0;
  *(_BYTE *)(v87 + 208) = 0;
  v88 = *(_QWORD *)(v53 + 32);
  *(_QWORD *)(v53 + 32) = v87;
  if (v88)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    v87 = *(_QWORD *)(v53 + 32);
  }
  *(_BYTE *)(v87 + 56) = 1;
  v89 = operator new();
  *(_DWORD *)(v89 + 32) = 0;
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  *(_QWORD *)v89 = &off_1E42B5DE8;
  *(_QWORD *)(v89 + 8) = 0;
  *(_QWORD *)(v89 + 36) = 65537;
  *(_DWORD *)(v89 + 44) = 0;
  *(_QWORD *)(v89 + 48) = 0xFF7F0200000700;
  *(_WORD *)(v89 + 56) = 0;
  *(_BYTE *)(v89 + 58) = 3;
  *(_QWORD *)(v89 + 67) = 0;
  *(_QWORD *)(v89 + 59) = 0;
  *(_BYTE *)(v89 + 75) = 0;
  *(_QWORD *)(v89 + 132) = 0;
  *(_QWORD *)(v89 + 124) = 0;
  *(_WORD *)(v89 + 188) = 257;
  *(_QWORD *)(v89 + 192) = 0;
  *(_QWORD *)(v89 + 200) = 0;
  *(_BYTE *)(v89 + 208) = 0;
  v90 = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v53 + 40) = v89;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = *(_QWORD *)(v1727 + 80);
  v92 = *(_QWORD *)(v91 + 2768);
  v93 = *(_QWORD *)(v91 + 2776);
  *(_QWORD *)&v1754 = v92;
  *((_QWORD *)&v1754 + 1) = v93;
  if (v93)
  {
    v94 = (unint64_t *)(v93 + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  *(_QWORD *)&v1752 = 0;
  v96 = objc_msgSend(v54, "gglDevice");
  v97 = (char *)operator new(0x198uLL);
  *((_QWORD *)v97 + 1) = 0;
  *((_QWORD *)v97 + 2) = 0;
  *(_QWORD *)v97 = &off_1E42E4FC0;
  *(_OWORD *)v1744 = *v52;
  *(_OWORD *)&v1744[16] = v52[1];
  v98 = *(_BYTE *)(v96 + 20);
  if ((v99 & 1) == 0)
  {
    if ((_DWORD)v1575)
    {
      if ((v1576 & 1) == 0)
      {
        if ((_DWORD)v1575)
        {
          if ((v1665 & 1) == 0
          {
            if ((v1683 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Textured::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE44F28 = &ggl::Textured::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1ECE44F30 = 0;
          if ((v1666 & 1) == 0
          {
            ggl::Textured::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE44F60 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE44F68 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
          }
          qword_1ECE44F38 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
          unk_1ECE44F40 = xmmword_19FFB35E0;
        }
      }
      ggl::Textured::Pos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::Pos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedShader::typedReflection(v1575);
      qword_1ECE2F540 = (uint64_t)&ggl::TexturedShader::typedReflection(void)::ref;
      if ((v1577 & 1) == 0
      {
        ggl::Textured::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5841E0 = 0;
        qword_1EE5841E8 = (uint64_t)"";
        dword_1EE5841F0 = 0;
        qword_1EE5841F8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE584200 = 2;
      }
      qword_1ECE2F548 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F550 = 1;
      qword_1ECE2F558 = 0;
      unk_1ECE2F560 = 1;
      qword_1ECE2F568 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F570 = 0;
      if ((v1578 & 1) == 0
      {
        ggl::Textured::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584150 = 0;
        qword_1EE584158 = (uint64_t)"view";
        dword_1EE584160 = 3;
        qword_1EE584168 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE584170 = xmmword_19FFB35A0;
        qword_1EE584180 = 1;
        unk_1EE584188 = "transform";
        dword_1EE584190 = 3;
        qword_1EE584198 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineConstantTransformBinding(void)::reflection;
        unk_1EE5841A0 = xmmword_19FFB3660;
        qword_1EE5841B0 = 2;
        unk_1EE5841B8 = "tileScalar";
        dword_1EE5841C0 = 3;
        qword_1EE5841C8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineConstantTileScalarBinding(void)::reflection;
        unk_1EE5841D0 = 4;
      }
      qword_1ECE2F578 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F580 = 3;
      v83 = v1727;
    }
  }
  v100 = v1754;
  if (*((_QWORD *)&v1754 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    *((_DWORD *)v97 + 14) = 0;
    *((_QWORD *)v97 + 5) = 0;
    *((_QWORD *)v97 + 6) = 0;
    *((_QWORD *)v97 + 3) = &off_1E42B6760;
    *((_QWORD *)v97 + 4) = 0;
    *((_QWORD *)v97 + 8) = &ggl::Textured::Pos2DUVPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v97 + 72) = v100;
    do
      v103 = __ldxr(v101);
    while (__stxr(v103 + 1, v101));
  }
  else
  {
    *((_DWORD *)v97 + 14) = 0;
    *((_QWORD *)v97 + 5) = 0;
    *((_QWORD *)v97 + 6) = 0;
    *((_QWORD *)v97 + 3) = &off_1E42B6760;
    *((_QWORD *)v97 + 4) = 0;
    *((_QWORD *)v97 + 8) = &ggl::Textured::Pos2DUVPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v97 + 9) = v100;
    *((_QWORD *)v97 + 10) = 0;
  }
  v97[136] = 0;
  *(_OWORD *)(v97 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v97 + 156) = 0;
  *(_QWORD *)(v97 + 172) = 0;
  *(_QWORD *)(v97 + 164) = 0;
  v97[184] = 0;
  *(_OWORD *)(v97 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v97 + 204) = 0;
  *(_QWORD *)(v97 + 220) = 0;
  *(_QWORD *)(v97 + 212) = 0;
  v97[232] = 0;
  *(_OWORD *)(v97 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v97 + 252) = 0;
  *(_QWORD *)(v97 + 268) = 0;
  *(_QWORD *)(v97 + 260) = 0;
  v104 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v97 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v97 + 296) = v104;
  v97[312] = 0;
  *((_QWORD *)v97 + 48) = 0;
  *((_OWORD *)v97 + 22) = 0u;
  *((_OWORD *)v97 + 23) = 0u;
  *((_OWORD *)v97 + 20) = 0u;
  *((_OWORD *)v97 + 21) = 0u;
  *((_QWORD *)v97 + 49) = 0x100000001;
  v97[400] = 0;
  v97[88] = 0;
  *(_WORD *)(v97 + 89) = (_WORD)v1749;
  v97[91] = BYTE2(v1749);
  *(_OWORD *)(v97 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v97 + 108) = v1752;
  *((_DWORD *)v97 + 29) = 0;
  *((_QWORD *)v97 + 15) = 0;
  *((_DWORD *)v97 + 32) = 0;
  v97[132] = 15;
  if (*((_QWORD *)&v100 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
    }
  }
  v97[328] = v98;
  *(_WORD *)(v97 + 329) = 0;
  v97[331] = 0;
  v107 = vceqzq_s8(*(int8x16_t *)(v97 + 328));
  v108 = vmovl_high_s8(v107);
  v109 = vmovl_s16(*(int16x4_t *)v108.i8);
  v110.i64[0] = v109.u32[0];
  v110.i64[1] = v109.u32[1];
  v111 = v110;
  v112 = vmovl_s8(*(int8x8_t *)v107.i8);
  v113 = vmovl_s16(*(int16x4_t *)v112.i8);
  v110.i64[0] = v113.u32[0];
  v110.i64[1] = v113.u32[1];
  v114 = v110;
  v115 = vmovl_high_s16(v108);
  v110.i64[0] = v115.u32[0];
  v110.i64[1] = v115.u32[1];
  v116 = v110;
  v117 = vmovl_high_s16(v112);
  v110.i64[0] = v117.u32[0];
  v110.i64[1] = v117.u32[1];
  v118 = v110;
  v110.i64[0] = v109.u32[2];
  v110.i64[1] = v109.u32[3];
  v119 = v110;
  v110.i64[0] = v113.u32[2];
  v110.i64[1] = v113.u32[3];
  v120 = v110;
  v110.i64[0] = v115.u32[2];
  v110.i64[1] = v115.u32[3];
  v121 = v110;
  v110.i64[0] = v117.u32[2];
  v110.i64[1] = v117.u32[3];
  v122 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v110);
  v123 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v121);
  v124 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v120);
  v125 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v116);
  v126 = vceqzq_s8(*(int8x16_t *)(v97 + 344));
  v127 = vmovl_high_s8(v126);
  v128 = vmovl_s16(*(int16x4_t *)v127.i8);
  v110.i64[0] = v128.u32[0];
  v110.i64[1] = v128.u32[1];
  v129 = v110;
  v130 = vmovl_s8(*(int8x8_t *)v126.i8);
  v131 = vmovl_s16(*(int16x4_t *)v130.i8);
  v110.i64[0] = v131.u32[0];
  v110.i64[1] = v131.u32[1];
  v132 = v110;
  v133 = vmovl_high_s16(v127);
  v110.i64[0] = v133.u32[0];
  v110.i64[1] = v133.u32[1];
  v134 = v110;
  v135 = vmovl_high_s16(v130);
  v110.i64[0] = v135.u32[0];
  v110.i64[1] = v135.u32[1];
  v136 = v110;
  v110.i64[0] = v128.u32[2];
  v110.i64[1] = v128.u32[3];
  v137 = v110;
  v110.i64[0] = v131.u32[2];
  v110.i64[1] = v131.u32[3];
  v138 = v110;
  v110.i64[0] = v133.u32[2];
  v110.i64[1] = v133.u32[3];
  v139 = v110;
  v110.i64[0] = v135.u32[2];
  v110.i64[1] = v135.u32[3];
  v140 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v139);
  v141 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v129), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v111));
  v142 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v132), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v114));
  v143 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v134), v125);
  v144 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v136), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v118));
  v145 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v137), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v119));
  v146 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v138), v124);
  v147 = vorrq_s8(v140, v123);
  v148 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v110), v122);
  v149 = vceqzq_s8(*(int8x16_t *)(v97 + 360));
  v150 = vmovl_high_s8(v149);
  v151 = vmovl_s16(*(int16x4_t *)v150.i8);
  v110.i64[0] = v151.i32[0];
  v110.i64[1] = v151.i32[1];
  v152 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v110);
  v153 = vceqzq_s8(*(int8x16_t *)(v97 + 376));
  v154 = vmovl_high_s8(v153);
  v155 = vmovl_s16(*(int16x4_t *)v154.i8);
  v110.i64[0] = v155.i32[0];
  v110.i64[1] = v155.i32[1];
  v156 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v110), v152), v141);
  v157 = vmovl_s8(*(int8x8_t *)v149.i8);
  v158 = vmovl_s16(*(int16x4_t *)v157.i8);
  v110.i64[0] = v158.i32[0];
  v110.i64[1] = v158.i32[1];
  v159 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v110);
  v160 = vmovl_s8(*(int8x8_t *)v153.i8);
  v161 = vmovl_s16(*(int16x4_t *)v160.i8);
  v110.i64[0] = v161.i32[0];
  v110.i64[1] = v161.i32[1];
  v162 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v110), v159), v142);
  v163 = vmovl_high_s16(v150);
  v110.i64[0] = v163.i32[0];
  v110.i64[1] = v163.i32[1];
  v164 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v110);
  v165 = vmovl_high_s16(v154);
  v110.i64[0] = v165.i32[0];
  v110.i64[1] = v165.i32[1];
  v166 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v110), v164), v143);
  v167 = vmovl_high_s16(v157);
  v110.i64[0] = v167.i32[0];
  v110.i64[1] = v167.i32[1];
  v168 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v110);
  v169 = vmovl_high_s16(v160);
  v110.i64[0] = v169.i32[0];
  v110.i64[1] = v169.i32[1];
  v170 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v110), v168), v144);
  v110.i64[0] = v151.i32[2];
  v110.i64[1] = v151.i32[3];
  v171 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v110);
  v110.i64[0] = v155.i32[2];
  v110.i64[1] = v155.i32[3];
  v172 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v110), v171), v145);
  v110.i64[0] = v158.i32[2];
  v110.i64[1] = v158.i32[3];
  v173 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v110);
  v110.i64[0] = v161.i32[2];
  v110.i64[1] = v161.i32[3];
  v174 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v110), v173), v146);
  v110.i64[0] = v163.i32[2];
  v110.i64[1] = v163.i32[3];
  v175 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v110);
  v110.i64[0] = v165.i32[2];
  v110.i64[1] = v165.i32[3];
  v176 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v110), v175), v147);
  v110.i64[0] = v167.i32[2];
  v110.i64[1] = v167.i32[3];
  v177 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v110);
  v110.i64[0] = v169.i32[2];
  v110.i64[1] = v169.i32[3];
  *((_QWORD *)v97 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v162, v156), vorrq_s8(v170, v166)), (int64x2_t)vorrq_s8(vorrq_s8(v174, v172), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v110), v177), v148), v176))));
  *((_QWORD *)v97 + 3) = &off_1E42BCE18;
  v97[312] = 1;
  v178 = *(std::__shared_weak_count **)(v53 + 56);
  *(_QWORD *)(v53 + 48) = v97 + 24;
  *(_QWORD *)(v53 + 56) = v97;
  if (v178)
  {
    v179 = (unint64_t *)&v178->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  if (*((_QWORD *)&v1754 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }
  v183 = *(_QWORD *)(v83 + 80);
  v185 = *(_QWORD *)(v183 + 320);
  v184 = *(_QWORD *)(v183 + 328);
  *(_QWORD *)&v1754 = v185;
  *((_QWORD *)&v1754 + 1) = v184;
  if (v184)
  {
    v186 = (unint64_t *)(v184 + 8);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  *(_QWORD *)&v1752 = 0;
  v188 = (char *)operator new(0x198uLL);
  *((_QWORD *)v188 + 1) = 0;
  *((_QWORD *)v188 + 2) = 0;
  *(_QWORD *)v188 = &off_1E42E42A0;
  *(_OWORD *)v1744 = *v52;
  *(_OWORD *)&v1744[16] = v52[1];
  if ((v189 & 1) == 0)
  {
    if ((_DWORD)v1579)
    {
      if ((v1580 & 1) == 0)
      {
        if ((_DWORD)v1579)
        {
          if ((v1667 & 1) == 0
          {
            if ((v1684 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Clut::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE3BF48 = &ggl::Clut::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1ECE3BF50 = 0;
          if ((v1668 & 1) == 0
          {
            ggl::Clut::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3BF80 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3BF88 = (uint64_t)ggl::Clut::Variation::reflection(void)::reflection;
          }
          qword_1ECE3BF58 = (uint64_t)&ggl::Clut::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
          unk_1ECE3BF60 = xmmword_19FFB3C60;
        }
      }
      ggl::Clut::Pos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Clut::Pos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::ClutShader::typedReflection(v1579);
      qword_1ECE31FE0 = (uint64_t)&ggl::ClutShader::typedReflection(void)::ref;
      if ((v1581 & 1) == 0
      {
        ggl::Clut::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5808B0 = 0;
        qword_1EE5808B8 = (uint64_t)"";
        dword_1EE5808C0 = 0;
        qword_1EE5808C8 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE5808D0 = 2;
      }
      qword_1ECE31FE8 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31FF0 = 1;
      qword_1ECE31FF8 = 0;
      unk_1ECE32000 = 2;
      qword_1ECE32008 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32010 = 0;
      if ((v1582 & 1) == 0
      {
        ggl::Clut::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580820 = 0;
        qword_1EE580828 = (uint64_t)"view";
        dword_1EE580830 = 3;
        qword_1EE580838 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE580840 = xmmword_19FFB35A0;
        qword_1EE580850 = 1;
        unk_1EE580858 = "transform";
        dword_1EE580860 = 3;
        qword_1EE580868 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE580870 = xmmword_19FFB3660;
        qword_1EE580880 = 2;
        unk_1EE580888 = "variation";
        dword_1EE580890 = 3;
        qword_1EE580898 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineConstantVariationBinding(void)::reflection;
        unk_1EE5808A0 = 1;
      }
      qword_1ECE32018 = (uint64_t)&ggl::Clut::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1ECE32020 = 3;
      v83 = v1727;
    }
  }
  v190 = v1754;
  if (*((_QWORD *)&v1754 + 1))
  {
    v191 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::Clut::Pos2DUVPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v188 + 72) = v190;
    do
      v193 = __ldxr(v191);
    while (__stxr(v193 + 1, v191));
  }
  else
  {
    *((_DWORD *)v188 + 14) = 0;
    *((_QWORD *)v188 + 5) = 0;
    *((_QWORD *)v188 + 6) = 0;
    *((_QWORD *)v188 + 3) = &off_1E42B6760;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 8) = &ggl::Clut::Pos2DUVPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v188 + 9) = v190;
    *((_QWORD *)v188 + 10) = 0;
  }
  v188[136] = 0;
  *(_OWORD *)(v188 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 156) = 0;
  *(_QWORD *)(v188 + 172) = 0;
  *(_QWORD *)(v188 + 164) = 0;
  v188[184] = 0;
  *(_OWORD *)(v188 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 204) = 0;
  *(_QWORD *)(v188 + 220) = 0;
  *(_QWORD *)(v188 + 212) = 0;
  v188[232] = 0;
  *(_OWORD *)(v188 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 252) = 0;
  *(_QWORD *)(v188 + 268) = 0;
  *(_QWORD *)(v188 + 260) = 0;
  v194 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v188 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v188 + 296) = v194;
  v188[312] = 0;
  *((_QWORD *)v188 + 48) = 0;
  *((_OWORD *)v188 + 22) = 0u;
  *((_OWORD *)v188 + 23) = 0u;
  *((_OWORD *)v188 + 20) = 0u;
  *((_OWORD *)v188 + 21) = 0u;
  *((_QWORD *)v188 + 49) = 0x100000001;
  v188[400] = 0;
  v188[88] = 0;
  *(_WORD *)(v188 + 89) = (_WORD)v1749;
  v188[91] = BYTE2(v1749);
  *(_OWORD *)(v188 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v188 + 108) = v1752;
  *((_DWORD *)v188 + 29) = 0;
  *((_QWORD *)v188 + 15) = 0;
  *((_DWORD *)v188 + 32) = 0;
  v188[132] = 15;
  if (*((_QWORD *)&v190 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v190 + 1) + 16))(*((_QWORD *)&v190 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v190 + 1));
    }
  }
  v188[329] = 0;
  v197 = vceqzq_s8(*(int8x16_t *)(v188 + 328));
  v198 = vmovl_high_s8(v197);
  v199 = vmovl_s16(*(int16x4_t *)v198.i8);
  v200.i64[0] = v199.u32[0];
  v200.i64[1] = v199.u32[1];
  v201 = v200;
  v202 = vmovl_s8(*(int8x8_t *)v197.i8);
  v203 = vmovl_s16(*(int16x4_t *)v202.i8);
  v200.i64[0] = v203.u32[0];
  v200.i64[1] = v203.u32[1];
  v204 = v200;
  v205 = vmovl_high_s16(v198);
  v200.i64[0] = v205.u32[0];
  v200.i64[1] = v205.u32[1];
  v206 = v200;
  v207 = vmovl_high_s16(v202);
  v200.i64[0] = v207.u32[0];
  v200.i64[1] = v207.u32[1];
  v208 = v200;
  v200.i64[0] = v199.u32[2];
  v200.i64[1] = v199.u32[3];
  v209 = v200;
  v200.i64[0] = v203.u32[2];
  v200.i64[1] = v203.u32[3];
  v210 = v200;
  v200.i64[0] = v205.u32[2];
  v200.i64[1] = v205.u32[3];
  v211 = v200;
  v200.i64[0] = v207.u32[2];
  v200.i64[1] = v207.u32[3];
  v212 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v200);
  v213 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v211);
  v214 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v210);
  v215 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v206);
  v216 = vceqzq_s8(*(int8x16_t *)(v188 + 344));
  v217 = vmovl_high_s8(v216);
  v218 = vmovl_s16(*(int16x4_t *)v217.i8);
  v200.i64[0] = v218.u32[0];
  v200.i64[1] = v218.u32[1];
  v219 = v200;
  v220 = vmovl_s8(*(int8x8_t *)v216.i8);
  v221 = vmovl_s16(*(int16x4_t *)v220.i8);
  v200.i64[0] = v221.u32[0];
  v200.i64[1] = v221.u32[1];
  v222 = v200;
  v223 = vmovl_high_s16(v217);
  v200.i64[0] = v223.u32[0];
  v200.i64[1] = v223.u32[1];
  v224 = v200;
  v225 = vmovl_high_s16(v220);
  v200.i64[0] = v225.u32[0];
  v200.i64[1] = v225.u32[1];
  v226 = v200;
  v200.i64[0] = v218.u32[2];
  v200.i64[1] = v218.u32[3];
  v227 = v200;
  v200.i64[0] = v221.u32[2];
  v200.i64[1] = v221.u32[3];
  v228 = v200;
  v200.i64[0] = v223.u32[2];
  v200.i64[1] = v223.u32[3];
  v229 = v200;
  v200.i64[0] = v225.u32[2];
  v200.i64[1] = v225.u32[3];
  v230 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v229);
  v231 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v219), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v201));
  v232 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v222), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v204));
  v233 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v224), v215);
  v234 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v226), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v208));
  v235 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v227), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v209));
  v236 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v228), v214);
  v237 = vorrq_s8(v230, v213);
  v238 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v200), v212);
  v239 = vceqzq_s8(*(int8x16_t *)(v188 + 360));
  v240 = vmovl_s8(*(int8x8_t *)v239.i8);
  v241 = vmovl_high_s16(v240);
  v242 = vmovl_high_s8(v239);
  v243 = vmovl_high_s16(v242);
  v244 = vmovl_s16(*(int16x4_t *)v240.i8);
  v245 = vmovl_s16(*(int16x4_t *)v242.i8);
  v200.i64[0] = v244.i32[0];
  v200.i64[1] = v244.i32[1];
  v246 = v200;
  v200.i64[0] = v245.i32[0];
  v200.i64[1] = v245.i32[1];
  v247 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v200);
  v248 = vceqzq_s8(*(int8x16_t *)(v188 + 376));
  v249 = vmovl_high_s8(v248);
  v250 = vmovl_s16(*(int16x4_t *)v249.i8);
  v200.i64[0] = v250.i32[0];
  v200.i64[1] = v250.i32[1];
  v251 = vmovl_s8(*(int8x8_t *)v248.i8);
  v252 = vmovl_s16(*(int16x4_t *)v251.i8);
  v253 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v200), v247), v231);
  v200.i64[0] = v252.i32[0];
  v200.i64[1] = v252.i32[1];
  v254 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v200), vbicq_s8((int8x16_t)xmmword_19FFB3170, v246));
  v200.i64[0] = v243.i32[0];
  v200.i64[1] = v243.i32[1];
  v255 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v200);
  v256 = vmovl_high_s16(v249);
  v257 = vorrq_s8(v254, v232);
  v200.i64[0] = v256.i32[0];
  v200.i64[1] = v256.i32[1];
  v258 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v200), v255);
  v200.i64[0] = v241.i32[0];
  v200.i64[1] = v241.i32[1];
  v259 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v200);
  v260 = vmovl_high_s16(v251);
  v200.i64[0] = v260.i32[0];
  v200.i64[1] = v260.i32[1];
  v261 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v200), v259), v234);
  v200.i64[0] = v245.i32[2];
  v200.i64[1] = v245.i32[3];
  v262 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v200);
  v200.i64[0] = v250.i32[2];
  v200.i64[1] = v250.i32[3];
  v263 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v200), v262), v235);
  v200.i64[0] = v244.i32[2];
  v200.i64[1] = v244.i32[3];
  v264 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v200);
  v200.i64[0] = v252.i32[2];
  v200.i64[1] = v252.i32[3];
  v265 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v200), v264), v236);
  v200.i64[0] = v243.i32[2];
  v200.i64[1] = v243.i32[3];
  v266 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v200);
  v200.i64[0] = v256.i32[2];
  v200.i64[1] = v256.i32[3];
  v267 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v200), v266), v237);
  v200.i64[0] = v241.i32[2];
  v200.i64[1] = v241.i32[3];
  v268 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v200);
  v200.i64[0] = v260.i32[2];
  v200.i64[1] = v260.i32[3];
  *((_QWORD *)v188 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v257, v253), vorrq_s8(v261, vorrq_s8(v258, v233))), (int64x2_t)vorrq_s8(vorrq_s8(v265, v263), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v200), v268), v238), v267))));
  *((_QWORD *)v188 + 3) = &off_1E42BB960;
  v188[312] = 1;
  v269 = *(std::__shared_weak_count **)(v53 + 72);
  *(_QWORD *)(v53 + 64) = v188 + 24;
  *(_QWORD *)(v53 + 72) = v188;
  if (v269)
  {
    v270 = (unint64_t *)&v269->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (*((_QWORD *)&v1754 + 1))
  {
    v272 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }
  v274 = *(_QWORD *)(v83 + 80);
  v275 = *(_QWORD *)(v274 + 3008);
  v276 = *(_QWORD *)(v274 + 3016);
  *(_QWORD *)&v1754 = v275;
  *((_QWORD *)&v1754 + 1) = v276;
  if (v276)
  {
    v277 = (unint64_t *)(v276 + 8);
    do
      v278 = __ldxr(v277);
    while (__stxr(v278 + 1, v277));
  }
  *(_QWORD *)&v1752 = 0;
  v279 = objc_msgSend(v54, "gglDevice");
  v280 = (char *)operator new(0x198uLL);
  *((_QWORD *)v280 + 1) = 0;
  *((_QWORD *)v280 + 2) = 0;
  *(_QWORD *)v280 = &off_1E42E3D28;
  *(_OWORD *)v1744 = *v52;
  *(_OWORD *)&v1744[16] = v52[1];
  v281 = *(_BYTE *)(v279 + 20);
  if ((v282 & 1) == 0)
  {
    if ((_DWORD)v1583)
    {
      if ((v1584 & 1) == 0)
      {
        if ((_DWORD)v1583)
        {
          if ((v1669 & 1) == 0
          {
            if ((v1685 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1ECE3AC00 = &ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1ECE3AC08 = 0;
          if ((v1670 & 1) == 0
          {
            ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1ECE3AC38 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3AC40 = (uint64_t)ggl::TextureWithReverseAlpha::ReverseAlpha::reflection(void)::reflection;
          }
          qword_1ECE3AC10 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineDataPos2DUVPipelineConstantStructs(void)::ref;
          unk_1ECE3AC18 = xmmword_19FFB35E0;
        }
      }
      ggl::TextureWithReverseAlpha::Pos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TextureWithReverseAlphaShader::typedReflection(v1583);
      qword_1ECE2FAC8 = (uint64_t)&ggl::TextureWithReverseAlphaShader::typedReflection(void)::ref;
      if ((v1585 & 1) == 0
      {
        ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57FAE8 = 0;
        qword_1EE57FAF0 = (uint64_t)"";
        dword_1EE57FAF8 = 0;
        qword_1EE57FB00 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE57FB08 = 2;
      }
      qword_1ECE2FAD0 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2FAD8 = 1;
      qword_1ECE2FAE0 = 0;
      unk_1ECE2FAE8 = 1;
      qword_1ECE2FAF0 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FAF8 = 0;
      if ((v1586 & 1) == 0
      {
        ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57FA58 = 0;
        qword_1EE57FA60 = (uint64_t)"view";
        dword_1EE57FA68 = 3;
        qword_1EE57FA70 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE57FA78 = xmmword_19FFB35A0;
        qword_1EE57FA88 = 1;
        unk_1EE57FA90 = "transform";
        dword_1EE57FA98 = 3;
        qword_1EE57FAA0 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57FAA8 = xmmword_19FFB3660;
        qword_1EE57FAB8 = 2;
        unk_1EE57FAC0 = "reverseAlpha";
        dword_1EE57FAC8 = 3;
        qword_1EE57FAD0 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineConstantReverseAlphaBinding(void)::reflection;
        unk_1EE57FAD8 = 1;
      }
      qword_1ECE2FB00 = (uint64_t)&ggl::TextureWithReverseAlpha::pipelineStatePos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1ECE2FB08 = 3;
    }
  }
  v283 = v1754;
  if (*((_QWORD *)&v1754 + 1))
  {
    v284 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v285 = __ldxr(v284);
    while (__stxr(v285 + 1, v284));
    *((_DWORD *)v280 + 14) = 0;
    *((_QWORD *)v280 + 5) = 0;
    *((_QWORD *)v280 + 6) = 0;
    *((_QWORD *)v280 + 3) = &off_1E42B6760;
    *((_QWORD *)v280 + 4) = 0;
    *((_QWORD *)v280 + 8) = &ggl::TextureWithReverseAlpha::Pos2DUVPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v280 + 72) = v283;
    do
      v286 = __ldxr(v284);
    while (__stxr(v286 + 1, v284));
  }
  else
  {
    *((_DWORD *)v280 + 14) = 0;
    *((_QWORD *)v280 + 5) = 0;
    *((_QWORD *)v280 + 6) = 0;
    *((_QWORD *)v280 + 3) = &off_1E42B6760;
    *((_QWORD *)v280 + 4) = 0;
    *((_QWORD *)v280 + 8) = &ggl::TextureWithReverseAlpha::Pos2DUVPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v280 + 9) = v283;
    *((_QWORD *)v280 + 10) = 0;
  }
  v280[136] = 0;
  *(_OWORD *)(v280 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v280 + 156) = 0;
  *(_QWORD *)(v280 + 172) = 0;
  *(_QWORD *)(v280 + 164) = 0;
  v280[184] = 0;
  *(_OWORD *)(v280 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v280 + 204) = 0;
  *(_QWORD *)(v280 + 220) = 0;
  *(_QWORD *)(v280 + 212) = 0;
  v280[232] = 0;
  *(_OWORD *)(v280 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v280 + 252) = 0;
  *(_QWORD *)(v280 + 268) = 0;
  *(_QWORD *)(v280 + 260) = 0;
  v287 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v280 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v280 + 296) = v287;
  v280[312] = 0;
  *((_QWORD *)v280 + 48) = 0;
  *((_OWORD *)v280 + 22) = 0u;
  *((_OWORD *)v280 + 23) = 0u;
  *((_OWORD *)v280 + 20) = 0u;
  *((_OWORD *)v280 + 21) = 0u;
  *((_QWORD *)v280 + 49) = 0x100000001;
  v280[400] = 0;
  v280[88] = 0;
  *(_WORD *)(v280 + 89) = (_WORD)v1749;
  v280[91] = BYTE2(v1749);
  *(_OWORD *)(v280 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v280 + 108) = v1752;
  *((_DWORD *)v280 + 29) = 0;
  *((_QWORD *)v280 + 15) = 0;
  *((_DWORD *)v280 + 32) = 0;
  v280[132] = 15;
  if (*((_QWORD *)&v283 + 1))
  {
    v288 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v283 + 1) + 16))(*((_QWORD *)&v283 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v283 + 1));
    }
  }
  v280[328] = v281;
  v280[329] = 0;
  v290 = vceqzq_s8(*(int8x16_t *)(v280 + 328));
  v291 = vmovl_high_s8(v290);
  v292 = vmovl_s16(*(int16x4_t *)v291.i8);
  v293.i64[0] = v292.u32[0];
  v293.i64[1] = v292.u32[1];
  v294 = v293;
  v295 = vmovl_s8(*(int8x8_t *)v290.i8);
  v296 = vmovl_s16(*(int16x4_t *)v295.i8);
  v293.i64[0] = v296.u32[0];
  v293.i64[1] = v296.u32[1];
  v297 = v293;
  v298 = vmovl_high_s16(v291);
  v293.i64[0] = v298.u32[0];
  v293.i64[1] = v298.u32[1];
  v299 = v293;
  v300 = vmovl_high_s16(v295);
  v293.i64[0] = v300.u32[0];
  v293.i64[1] = v300.u32[1];
  v301 = v293;
  v293.i64[0] = v292.u32[2];
  v293.i64[1] = v292.u32[3];
  v302 = v293;
  v293.i64[0] = v296.u32[2];
  v293.i64[1] = v296.u32[3];
  v303 = v293;
  v293.i64[0] = v298.u32[2];
  v293.i64[1] = v298.u32[3];
  v304 = v293;
  v293.i64[0] = v300.u32[2];
  v293.i64[1] = v300.u32[3];
  v305 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v293);
  v306 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v304);
  v307 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v303);
  v308 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v299);
  v309 = vceqzq_s8(*(int8x16_t *)(v280 + 344));
  v310 = vmovl_high_s8(v309);
  v311 = vmovl_s16(*(int16x4_t *)v310.i8);
  v293.i64[0] = v311.u32[0];
  v293.i64[1] = v311.u32[1];
  v312 = v293;
  v313 = vmovl_s8(*(int8x8_t *)v309.i8);
  v314 = vmovl_s16(*(int16x4_t *)v313.i8);
  v293.i64[0] = v314.u32[0];
  v293.i64[1] = v314.u32[1];
  v315 = v293;
  v316 = vmovl_high_s16(v310);
  v293.i64[0] = v316.u32[0];
  v293.i64[1] = v316.u32[1];
  v317 = v293;
  v318 = vmovl_high_s16(v313);
  v293.i64[0] = v318.u32[0];
  v293.i64[1] = v318.u32[1];
  v319 = v293;
  v293.i64[0] = v311.u32[2];
  v293.i64[1] = v311.u32[3];
  v320 = v293;
  v293.i64[0] = v314.u32[2];
  v293.i64[1] = v314.u32[3];
  v321 = v293;
  v293.i64[0] = v316.u32[2];
  v293.i64[1] = v316.u32[3];
  v322 = v293;
  v293.i64[0] = v318.u32[2];
  v293.i64[1] = v318.u32[3];
  v323 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v322);
  v324 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v312), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v294));
  v325 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v315), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v297));
  v326 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v317), v308);
  v327 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v319), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v301));
  v328 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v320), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v302));
  v329 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v321), v307);
  v330 = vorrq_s8(v323, v306);
  v331 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v293), v305);
  v332 = vceqzq_s8(*(int8x16_t *)(v280 + 360));
  v333 = vmovl_s8(*(int8x8_t *)v332.i8);
  v334 = vmovl_high_s16(v333);
  v335 = vmovl_high_s8(v332);
  v336 = vmovl_high_s16(v335);
  v337 = vmovl_s16(*(int16x4_t *)v333.i8);
  v338 = vmovl_s16(*(int16x4_t *)v335.i8);
  v293.i64[0] = v337.i32[0];
  v293.i64[1] = v337.i32[1];
  v339 = v293;
  v293.i64[0] = v338.i32[0];
  v293.i64[1] = v338.i32[1];
  v340 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v293);
  v341 = vceqzq_s8(*(int8x16_t *)(v280 + 376));
  v342 = vmovl_high_s8(v341);
  v343 = vmovl_s16(*(int16x4_t *)v342.i8);
  v293.i64[0] = v343.i32[0];
  v293.i64[1] = v343.i32[1];
  v344 = vmovl_s8(*(int8x8_t *)v341.i8);
  v345 = vmovl_s16(*(int16x4_t *)v344.i8);
  v346 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v293), v340), v324);
  v293.i64[0] = v345.i32[0];
  v293.i64[1] = v345.i32[1];
  v347 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v293), vbicq_s8((int8x16_t)xmmword_19FFB3170, v339));
  v293.i64[0] = v336.i32[0];
  v293.i64[1] = v336.i32[1];
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v293);
  v349 = vmovl_high_s16(v342);
  v350 = vorrq_s8(v347, v325);
  v293.i64[0] = v349.i32[0];
  v293.i64[1] = v349.i32[1];
  v351 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v293), v348);
  v293.i64[0] = v334.i32[0];
  v293.i64[1] = v334.i32[1];
  v352 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v293);
  v353 = vmovl_high_s16(v344);
  v293.i64[0] = v353.i32[0];
  v293.i64[1] = v353.i32[1];
  v354 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v293), v352), v327);
  v293.i64[0] = v338.i32[2];
  v293.i64[1] = v338.i32[3];
  v355 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v293);
  v293.i64[0] = v343.i32[2];
  v293.i64[1] = v343.i32[3];
  v356 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v293), v355), v328);
  v293.i64[0] = v337.i32[2];
  v293.i64[1] = v337.i32[3];
  v357 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v293);
  v293.i64[0] = v345.i32[2];
  v293.i64[1] = v345.i32[3];
  v358 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v293), v357), v329);
  v293.i64[0] = v336.i32[2];
  v293.i64[1] = v336.i32[3];
  v359 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v293);
  v293.i64[0] = v349.i32[2];
  v293.i64[1] = v349.i32[3];
  v360 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v293), v359), v330);
  v293.i64[0] = v334.i32[2];
  v293.i64[1] = v334.i32[3];
  v361 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v293);
  v293.i64[0] = v353.i32[2];
  v293.i64[1] = v353.i32[3];
  *((_QWORD *)v280 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v350, v346), vorrq_s8(v354, vorrq_s8(v351, v326))), (int64x2_t)vorrq_s8(vorrq_s8(v358, v356), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v293), v361), v331), v360))));
  *((_QWORD *)v280 + 3) = &off_1E42BB220;
  v280[312] = 1;
  v362 = *(std::__shared_weak_count **)(v53 + 88);
  *(_QWORD *)(v53 + 80) = v280 + 24;
  *(_QWORD *)(v53 + 88) = v280;
  if (v362)
  {
    v363 = (unint64_t *)&v362->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  if (*((_QWORD *)&v1754 + 1))
  {
    v365 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }

  v1734 = v53;
  v367 = (std::__shared_weak_count *)operator new();
  v367->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E71E0;
  v367->__shared_owners_ = 0;
  v367->__shared_weak_owners_ = 0;
  v367[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
  v1735 = v367;

  v1698 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v42 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v42 + 168) + 64));
  if (v54)
  {
    objc_msgSend(v54, "standardCommandBufferSelector");
    v368 = *(_QWORD *)v1744;
    if (*(_QWORD *)&v1744[8])
    {
      v369 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
      do
        v370 = __ldaxr(v369);
      while (__stlxr(v370 - 1, v369));
      if (!v370)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
      }
    }
  }
  else
  {
    v368 = 0;
  }
  v371 = operator new();
  v372 = *(_QWORD *)(v1726 + 112);
  v373 = *(_QWORD *)(v1719 + 120);
  v374 = v54;
  v375 = v374;
  v1710 = v371;
  v1722 = v368;
  if (v54)
  {
    objc_msgSend(v374, "standardCommandBufferSelector");
    v376 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 42);
    objc_msgSend(v375, "standardCommandBufferSelector");
    v377 = *(_WORD *)(*(_QWORD *)(v1754 + 8) + 202);
    objc_msgSend(v375, "standardCommandBufferSelector");
    v378 = *(_WORD *)(*(_QWORD *)(v1752 + 8) + 204);
    objc_msgSend(v375, "standardCommandBufferSelector");
    v379 = *((_WORD *)v1749[1] + 103);
    objc_msgSend(v375, "standardCommandBufferSelector");
    v380 = *((_WORD *)v1746[1] + 104);
    objc_msgSend(v375, "standardCommandBufferSelector");
    v381 = *(_QWORD *)(v1742 + 8);
  }
  else
  {
    *(_OWORD *)v1744 = 0uLL;
    v381 = MEMORY[8];
    v376 = *(_WORD *)(MEMORY[8] + 42);
    v1754 = 0uLL;
    v377 = *(_WORD *)(MEMORY[8] + 202);
    v1752 = 0uLL;
    v378 = *(_WORD *)(MEMORY[8] + 204);
    v1749 = 0;
    v1750 = 0;
    v379 = *(_WORD *)(MEMORY[8] + 206);
    v1746 = 0;
    v1747 = 0;
    v380 = *(_WORD *)(MEMORY[8] + 208);
    v1743 = 0;
    v1742 = 0;
  }
  v382 = *(_WORD *)(v381 + 210);
  v383 = operator new(0xEuLL);
  *v383 = v376;
  v383[1] = v377;
  v383[2] = v378;
  v383[3] = v379;
  v383[4] = v380;
  v383[5] = v382;
  v383[6] = 7183;
  *(_QWORD *)v1710 = off_1E428C468;
  *(_QWORD *)(v1710 + 8) = 0;
  *(_QWORD *)(v1710 + 16) = 0;
  *(_QWORD *)(v1710 + 24) = 0;
  v384 = operator new(0xEuLL);
  *v384 = *(_QWORD *)v383;
  *(_QWORD *)((char *)v384 + 6) = *(_QWORD *)(v383 + 3);
  *(_QWORD *)(v1710 + 16) = (char *)v384 + 14;
  *(_QWORD *)(v1710 + 24) = (char *)v384 + 14;
  *(_WORD *)(v1710 + 32) = 0;
  *(_BYTE *)(v1710 + 34) = 18;
  *(_QWORD *)v1710 = off_1E429E2A8;
  *(_QWORD *)(v1710 + 8) = v384;
  *(_QWORD *)(v1710 + 40) = v1732;
  operator delete(v383);
  if (v1743)
  {
    v385 = &v1743->__shared_owners_;
    do
      v386 = __ldaxr((unint64_t *)v385);
    while (__stlxr(v386 - 1, (unint64_t *)v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v1743->__on_zero_shared)(v1743);
      std::__shared_weak_count::__release_weak(v1743);
    }
  }
  if (v1747)
  {
    v387 = &v1747->__shared_owners_;
    do
      v388 = __ldaxr((unint64_t *)v387);
    while (__stlxr(v388 - 1, (unint64_t *)v387));
    if (!v388)
    {
      ((void (*)(std::__shared_weak_count *))v1747->__on_zero_shared)(v1747);
      std::__shared_weak_count::__release_weak(v1747);
    }
  }
  if (v1750)
  {
    v389 = &v1750->__shared_owners_;
    do
      v390 = __ldaxr((unint64_t *)v389);
    while (__stlxr(v390 - 1, (unint64_t *)v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v1750->__on_zero_shared)(v1750);
      std::__shared_weak_count::__release_weak(v1750);
    }
  }
  if (*((_QWORD *)&v1752 + 1))
  {
    v391 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1752 + 1) + 16))(*((_QWORD *)&v1752 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1752 + 1));
    }
  }
  if (*((_QWORD *)&v1754 + 1))
  {
    v393 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }
  if (*(_QWORD *)&v1744[8])
  {
    v395 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_QWORD *)v1710 = &off_1E42921B0;
  *(_OWORD *)(v1710 + 48) = 0u;
  *(_OWORD *)(v1710 + 64) = 0u;
  *(_QWORD *)(v1710 + 80) = v373;
  *(_QWORD *)(v1710 + 88) = v372;
  objc_msgSend(v375, "standardCommandBufferSelector");
  v397 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1710 + 96) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 206);
  if (v397)
  {
    v398 = (unint64_t *)&v397->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  objc_msgSend(v375, "standardCommandBufferSelector");
  v400 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1710 + 98) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 204);
  if (v400)
  {
    v401 = (unint64_t *)&v400->__shared_owners_;
    do
      v402 = __ldaxr(v401);
    while (__stlxr(v402 - 1, v401));
    if (!v402)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  objc_msgSend(v375, "standardCommandBufferSelector");
  v403 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1710 + 100) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 208);
  if (v403)
  {
    v404 = (unint64_t *)&v403->__shared_owners_;
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
      std::__shared_weak_count::__release_weak(v403);
    }
  }
  objc_msgSend(v375, "standardCommandBufferSelector");
  v406 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1710 + 102) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 210);
  if (v406)
  {
    v407 = (unint64_t *)&v406->__shared_owners_;
    do
      v408 = __ldaxr(v407);
    while (__stlxr(v408 - 1, v407));
    if (!v408)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
    }
  }
  objc_msgSend(v375, "standardCommandBufferSelector");
  v409 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1710 + 104) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 42);
  if (v409)
  {
    v410 = (unint64_t *)&v409->__shared_owners_;
    do
      v411 = __ldaxr(v410);
    while (__stlxr(v411 - 1, v410));
    if (!v411)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  *(_WORD *)(v1710 + 106) = 7183;
  *(_BYTE *)(v1710 + 108) = 0;
  objc_msgSend(v375, "standardCommandBufferSelector");
  v412 = *(_BYTE *)(*(_QWORD *)v1744 + 56);
  if (*(_QWORD *)&v1744[8])
  {
    v413 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v414 = __ldaxr(v413);
    while (__stlxr(v414 - 1, v413));
    if (!v414)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1710 + 109) = v412;
  *(_QWORD *)(v1710 + 112) = 0;
  v415 = operator new();
  *(_QWORD *)v415 = &unk_1E4293458;
  *(_QWORD *)(v415 + 8) = 0;
  v416 = -[RouteRenderLayerObserverProxy initWithPolylineGroupObserver:]([RouteRenderLayerObserverProxy alloc], "initWithPolylineGroupObserver:", v415);
  v417 = *(void **)(v415 + 8);
  *(_QWORD *)(v415 + 8) = v416;

  *(_QWORD *)v415 = off_1E42A25A8;
  *(_QWORD *)(v415 + 16) = 0;
  *(_QWORD *)(v415 + 24) = 0;
  *(_QWORD *)(v415 + 56) = 0;
  *(_QWORD *)(v415 + 32) = 0;
  *(_QWORD *)(v415 + 40) = v1732;
  *(_QWORD *)(v415 + 48) = v415 + 56;
  *(_QWORD *)(v415 + 88) = 0;
  *(_QWORD *)(v415 + 80) = 0;
  *(_QWORD *)(v415 + 64) = 0;
  *(_QWORD *)(v415 + 72) = v415 + 80;
  *(_OWORD *)(v415 + 96) = 0u;
  *(_OWORD *)(v415 + 112) = 0u;
  *(_DWORD *)(v415 + 128) = 1065353216;
  *(_OWORD *)(v415 + 136) = 0u;
  *(_OWORD *)(v415 + 152) = 0u;
  *(_DWORD *)(v415 + 168) = 1065353216;
  v418 = *(_QWORD *)(v1710 + 72);
  *(_QWORD *)(v1710 + 72) = v415;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 48))(v418);
  v419 = operator new();
  v1728 = *((id *)v1732 + 13);
  v420 = objc_msgSend(v1728, "format");
  v421 = v375;
  *(_OWORD *)v419 = 0u;
  *(_OWORD *)(v419 + 16) = 0u;
  *(_OWORD *)(v419 + 32) = 0u;
  v422 = operator new();
  *(_BYTE *)v422 = 0;
  *(_QWORD *)(v422 + 12) = 0;
  *(_QWORD *)(v422 + 4) = 0;
  *(_BYTE *)(v422 + 20) = 0;
  *(_DWORD *)(v422 + 24) = 1065353216;
  *(_BYTE *)(v422 + 28) = 0;
  *(_DWORD *)(v422 + 32) = 0;
  v423 = *(_QWORD *)(v419 + 8);
  *(_QWORD *)(v419 + 8) = v422;
  if (v423)
  {
    MEMORY[0x1A1AF4E00](v423, 0x1000C4049ECCB0CLL);
    v422 = *(_QWORD *)(v419 + 8);
  }
  *(_BYTE *)v422 = -1;
  *(_QWORD *)(v422 + 12) = 0;
  *(_QWORD *)(v422 + 4) = 0;
  v424 = (md::RouteLineSharedResources *)operator new();
  md::RouteLineSharedResources::RouteLineSharedResources(v424, (const ggl::StandardLibrary *)objc_msgSend(v421, "shaderLibrary"), (AlphaAtlas *)objc_msgSend(v421, "alphaAtlas"), (const RenderTargetFormat *)v420, *(unsigned __int8 *)(objc_msgSend(v421, "gglDevice") + 20));
  v425 = *(md::RouteLineSharedResources **)(v419 + 24);
  *(_QWORD *)(v419 + 24) = v424;
  if (v425)
  {
    md::RouteLineSharedResources::~RouteLineSharedResources(v425);
    MEMORY[0x1A1AF4E00]();
  }
  v426 = *(_QWORD **)(v419 + 32);
  *(_QWORD *)(v419 + 32) = 0;
  if (v426)
    std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v426);
  v427 = (_QWORD *)operator new();
  v428 = *(_QWORD *)(objc_msgSend(v421, "shaderLibrary") + 80);
  v429 = *(_QWORD *)(v428 + 1376);
  v430 = *(std::__shared_weak_count **)(v428 + 1384);
  if (v430)
  {
    v431 = (unint64_t *)&v430->__shared_owners_;
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
  }
  v1754 = *(_OWORD *)v420;
  v1755 = *(_OWORD *)(v420 + 16);
  v433 = objc_msgSend(v421, "alphaAtlas");
  *v427 = 0;
  v427[1] = 0;
  v434 = (char *)operator new(0x198uLL);
  *((_QWORD *)v434 + 1) = 0;
  *((_QWORD *)v434 + 2) = 0;
  *(_QWORD *)v434 = &off_1E42DEEA0;
  *(_OWORD *)v1744 = v1754;
  *(_OWORD *)&v1744[16] = v1755;
  if ((v435 & 1) == 0)
  {
    if ((_DWORD)v1587)
    {
      if ((v1588 & 1) == 0)
      {
        if ((_DWORD)v1587)
        {
          if ((v1671 & 1) == 0
          {
            if ((v1686 & 1) == 0
            {
              ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::ManeuverPoint::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43B88 = 1;
          }
          ggl::ManeuverPoint::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B738 = &ggl::ManeuverPoint::pipelineDataBasePipelineDeviceStructs(void)::ref;
          qword_1EE57B740 = 0;
          if ((v1672 & 1) == 0
          {
            ggl::ManeuverPoint::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57B770 = ggl::ManeuverPoint::Style::reflection(void)::reflection;
          }
          qword_1EE57B748 = (uint64_t)&ggl::ManeuverPoint::pipelineDataBasePipelineConstantStructs(void)::ref;
          unk_1EE57B750 = xmmword_19FFB35A0;
        }
      }
      ggl::ManeuverPoint::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ManeuverPoint::BasePipelineSetup::typedReflection(void)::ref;
      ggl::ManeuverPointShader::typedReflection(v1587);
      qword_1ECE31050 = (uint64_t)&ggl::ManeuverPointShader::typedReflection(void)::ref;
      if ((v1589 & 1) == 0
      {
        ggl::ManeuverPoint::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B7E0 = 0;
        qword_1EE57B7E8 = (uint64_t)"";
        dword_1EE57B7F0 = 0;
        qword_1EE57B7F8 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
        unk_1EE57B800 = 2;
      }
      qword_1ECE31058 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
      unk_1ECE31060 = 1;
      qword_1ECE31068 = 0;
      unk_1ECE31070 = 1;
      qword_1ECE31078 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31080 = 0;
      if ((v1590 & 1) == 0
      {
        ggl::ManeuverPoint::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B780 = 0;
        qword_1EE57B788 = (uint64_t)"view";
        dword_1EE57B790 = 3;
        qword_1EE57B798 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
        unk_1EE57B7A0 = xmmword_19FFB35A0;
        qword_1EE57B7B0 = 1;
        unk_1EE57B7B8 = "style";
        dword_1EE57B7C0 = 3;
        qword_1EE57B7C8 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57B7D0 = 2;
      }
      qword_1ECE31088 = (uint64_t)&ggl::ManeuverPoint::pipelineStateBasePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31090 = 2;
    }
  }
  if (v430)
  {
    v436 = (unint64_t *)&v430->__shared_owners_;
    do
      v437 = __ldxr(v436);
    while (__stxr(v437 + 1, v436));
    *((_DWORD *)v434 + 14) = 0;
    *((_QWORD *)v434 + 5) = 0;
    *((_QWORD *)v434 + 6) = 0;
    *((_QWORD *)v434 + 3) = &off_1E42B6760;
    *((_QWORD *)v434 + 4) = 0;
    *((_QWORD *)v434 + 8) = &ggl::ManeuverPoint::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v434 + 9) = v429;
    *((_QWORD *)v434 + 10) = v430;
    do
      v438 = __ldxr(v436);
    while (__stxr(v438 + 1, v436));
  }
  else
  {
    *((_DWORD *)v434 + 14) = 0;
    *((_QWORD *)v434 + 5) = 0;
    *((_QWORD *)v434 + 6) = 0;
    *((_QWORD *)v434 + 3) = &off_1E42B6760;
    *((_QWORD *)v434 + 4) = 0;
    *((_QWORD *)v434 + 8) = &ggl::ManeuverPoint::BasePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v434 + 9) = v429;
    *((_QWORD *)v434 + 10) = 0;
  }
  v434[136] = 0;
  *(_OWORD *)(v434 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v434 + 156) = 0;
  *(_QWORD *)(v434 + 172) = 0;
  *(_QWORD *)(v434 + 164) = 0;
  v434[184] = 0;
  *(_OWORD *)(v434 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v434 + 204) = 0;
  *(_QWORD *)(v434 + 220) = 0;
  *(_QWORD *)(v434 + 212) = 0;
  v434[232] = 0;
  *(_OWORD *)(v434 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v434 + 252) = 0;
  *(_QWORD *)(v434 + 268) = 0;
  *(_QWORD *)(v434 + 260) = 0;
  v439 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v434 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v434 + 296) = v439;
  v434[312] = 0;
  *((_QWORD *)v434 + 48) = 0;
  *((_OWORD *)v434 + 22) = 0u;
  *((_OWORD *)v434 + 23) = 0u;
  *((_OWORD *)v434 + 20) = 0u;
  *((_OWORD *)v434 + 21) = 0u;
  *((_QWORD *)v434 + 49) = 0x100000001;
  v434[400] = 0;
  v434[88] = 1;
  *(_WORD *)(v434 + 89) = v1752;
  v434[91] = BYTE2(v1752);
  *(_OWORD *)(v434 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v434 + 27) = 7;
  *((_QWORD *)v434 + 14) = 0;
  *((_QWORD *)v434 + 15) = 0;
  *((_DWORD *)v434 + 32) = 0;
  v434[132] = 15;
  if (v430)
  {
    v440 = (unint64_t *)&v430->__shared_owners_;
    do
      v441 = __ldaxr(v440);
    while (__stlxr(v441 - 1, v440));
    if (!v441)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
  v434[329] = 0;
  v442 = vceqzq_s8(*(int8x16_t *)(v434 + 328));
  v443 = vmovl_high_s8(v442);
  v444 = vmovl_s16(*(int16x4_t *)v443.i8);
  v445.i64[0] = v444.u32[0];
  v445.i64[1] = v444.u32[1];
  v446 = v445;
  v447 = vmovl_s8(*(int8x8_t *)v442.i8);
  v448 = vmovl_s16(*(int16x4_t *)v447.i8);
  v445.i64[0] = v448.u32[0];
  v445.i64[1] = v448.u32[1];
  v449 = v445;
  v450 = vmovl_high_s16(v443);
  v445.i64[0] = v450.u32[0];
  v445.i64[1] = v450.u32[1];
  v451 = v445;
  v452 = vmovl_high_s16(v447);
  v445.i64[0] = v452.u32[0];
  v445.i64[1] = v452.u32[1];
  v453 = v445;
  v445.i64[0] = v444.u32[2];
  v445.i64[1] = v444.u32[3];
  v454 = v445;
  v445.i64[0] = v448.u32[2];
  v445.i64[1] = v448.u32[3];
  v455 = v445;
  v445.i64[0] = v450.u32[2];
  v445.i64[1] = v450.u32[3];
  v456 = v445;
  v445.i64[0] = v452.u32[2];
  v445.i64[1] = v452.u32[3];
  v457 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v445);
  v458 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v456);
  v459 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v455);
  v460 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v451);
  v461 = vceqzq_s8(*(int8x16_t *)(v434 + 344));
  v462 = vmovl_high_s8(v461);
  v463 = vmovl_s16(*(int16x4_t *)v462.i8);
  v445.i64[0] = v463.u32[0];
  v445.i64[1] = v463.u32[1];
  v464 = v445;
  v465 = vmovl_s8(*(int8x8_t *)v461.i8);
  v466 = vmovl_s16(*(int16x4_t *)v465.i8);
  v445.i64[0] = v466.u32[0];
  v445.i64[1] = v466.u32[1];
  v467 = v445;
  v468 = vmovl_high_s16(v462);
  v445.i64[0] = v468.u32[0];
  v445.i64[1] = v468.u32[1];
  v469 = v445;
  v470 = vmovl_high_s16(v465);
  v445.i64[0] = v470.u32[0];
  v445.i64[1] = v470.u32[1];
  v471 = v445;
  v445.i64[0] = v463.u32[2];
  v445.i64[1] = v463.u32[3];
  v472 = v445;
  v445.i64[0] = v466.u32[2];
  v445.i64[1] = v466.u32[3];
  v473 = v445;
  v445.i64[0] = v468.u32[2];
  v445.i64[1] = v468.u32[3];
  v474 = v445;
  v445.i64[0] = v470.u32[2];
  v445.i64[1] = v470.u32[3];
  v475 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v474);
  v476 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v464), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v446));
  v477 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v467), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v449));
  v478 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v469), v460);
  v479 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v471), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v453));
  v480 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v472), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v454));
  v481 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v473), v459);
  v482 = vorrq_s8(v475, v458);
  v483 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v445), v457);
  v484 = vceqzq_s8(*(int8x16_t *)(v434 + 360));
  v485 = vmovl_s8(*(int8x8_t *)v484.i8);
  v486 = vmovl_high_s16(v485);
  v487 = vmovl_high_s8(v484);
  v488 = vmovl_high_s16(v487);
  v489 = vmovl_s16(*(int16x4_t *)v485.i8);
  v490 = vmovl_s16(*(int16x4_t *)v487.i8);
  v445.i64[0] = v489.i32[0];
  v445.i64[1] = v489.i32[1];
  v491 = v445;
  v445.i64[0] = v490.i32[0];
  v445.i64[1] = v490.i32[1];
  v492 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v445);
  v493 = vceqzq_s8(*(int8x16_t *)(v434 + 376));
  v494 = vmovl_high_s8(v493);
  v495 = vmovl_s16(*(int16x4_t *)v494.i8);
  v445.i64[0] = v495.i32[0];
  v445.i64[1] = v495.i32[1];
  v496 = vmovl_s8(*(int8x8_t *)v493.i8);
  v497 = vmovl_s16(*(int16x4_t *)v496.i8);
  v498 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v445), v492), v476);
  v445.i64[0] = v497.i32[0];
  v445.i64[1] = v497.i32[1];
  v499 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v445), vbicq_s8((int8x16_t)xmmword_19FFB3170, v491));
  v445.i64[0] = v488.i32[0];
  v445.i64[1] = v488.i32[1];
  v500 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v445);
  v501 = vmovl_high_s16(v494);
  v502 = vorrq_s8(v499, v477);
  v445.i64[0] = v501.i32[0];
  v445.i64[1] = v501.i32[1];
  v503 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v445), v500);
  v445.i64[0] = v486.i32[0];
  v445.i64[1] = v486.i32[1];
  v504 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v445);
  v505 = vmovl_high_s16(v496);
  v445.i64[0] = v505.i32[0];
  v445.i64[1] = v505.i32[1];
  v506 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v445), v504), v479);
  v445.i64[0] = v490.i32[2];
  v445.i64[1] = v490.i32[3];
  v507 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v445);
  v445.i64[0] = v495.i32[2];
  v445.i64[1] = v495.i32[3];
  v508 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v445), v507), v480);
  v445.i64[0] = v489.i32[2];
  v445.i64[1] = v489.i32[3];
  v509 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v445);
  v445.i64[0] = v497.i32[2];
  v445.i64[1] = v497.i32[3];
  v510 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v445), v509), v481);
  v445.i64[0] = v488.i32[2];
  v445.i64[1] = v488.i32[3];
  v511 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v445);
  v445.i64[0] = v501.i32[2];
  v445.i64[1] = v501.i32[3];
  v512 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v445), v511), v482);
  v445.i64[0] = v486.i32[2];
  v445.i64[1] = v486.i32[3];
  v513 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v445);
  v445.i64[0] = v505.i32[2];
  v445.i64[1] = v505.i32[3];
  *((_QWORD *)v434 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v502, v498), vorrq_s8(v506, vorrq_s8(v503, v478))), (int64x2_t)vorrq_s8(vorrq_s8(v510, v508), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v445), v513), v483), v512))));
  *((_QWORD *)v434 + 3) = &off_1E42B6610;
  v434[312] = 1;
  v514 = (std::__shared_weak_count *)v427[1];
  *v427 = v434 + 24;
  v427[1] = v434;
  if (v514)
  {
    v515 = (unint64_t *)&v514->__shared_owners_;
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
  }
  v427[2] = v433;
  v517 = *(_QWORD *)(v419 + 40);
  *(_QWORD *)(v419 + 40) = v427;
  if (v517)
  {
    v518 = *(std::__shared_weak_count **)(v517 + 8);
    if (v518)
    {
      v519 = (unint64_t *)&v518->__shared_owners_;
      do
        v520 = __ldaxr(v519);
      while (__stlxr(v520 - 1, v519));
      if (!v520)
      {
        ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
        std::__shared_weak_count::__release_weak(v518);
      }
    }
    MEMORY[0x1A1AF4E00](v517, 0x20C40960023A9);
  }
  if (v430)
  {
    v521 = (unint64_t *)&v430->__shared_owners_;
    do
      v522 = __ldaxr(v521);
    while (__stlxr(v522 - 1, v521));
    if (!v522)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }

  v523 = *(md::CRouteRenderResources **)(v1710 + 56);
  *(_QWORD *)(v1710 + 56) = v419;
  if (v523)
  {
    md::CRouteRenderResources::~CRouteRenderResources(v523);
    MEMORY[0x1A1AF4E00]();
  }

  v524 = operator new();
  *(_OWORD *)(v524 + 16) = 0u;
  *(_OWORD *)(v524 + 32) = 0u;
  *(_OWORD *)v524 = 0u;
  *(_BYTE *)(v524 + 48) = 1;
  *(_QWORD *)(v524 + 56) = 0;
  *(_QWORD *)(v524 + 64) = 0;
  *(_WORD *)(v524 + 72) = 0;
  *(_OWORD *)(v524 + 88) = 0u;
  *(_QWORD *)(v524 + 76) = 0x3F80000000000000;
  *(_OWORD *)(v524 + 104) = 0u;
  *(_DWORD *)(v524 + 120) = 1065353216;
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v525 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v525, "routeLineSimplificationEpsilon");
  *(float *)&v526 = v526;
  *(_DWORD *)(v524 + 76) = LODWORD(v526);

  v527 = *(md::RouteLayoutInfo **)(v1710 + 64);
  *(_QWORD *)(v1710 + 64) = v524;
  if (v527)
  {
    md::RouteLayoutInfo::~RouteLayoutInfo(v527);
    MEMORY[0x1A1AF4E00]();
  }

  v528 = operator new();
  v529 = *(_QWORD *)(v1707 + 152);
  v530 = *(_QWORD *)(v1726 + 112);
  v531 = v421;
  v1704 = *((id *)v1732 + 13);
  v1708 = v528;
  v1729 = v531;
  v532 = (const RenderTargetFormat *)objc_msgSend(v1704, "format");
  objc_msgSend(v531, "standardCommandBufferSelector");
  v533 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 158);
  objc_msgSend(v531, "standardCommandBufferSelector");
  v534 = *(_WORD *)(*(_QWORD *)(v1754 + 8) + 160);
  objc_msgSend(v531, "standardCommandBufferSelector");
  v535 = *(_WORD *)(*(_QWORD *)(v1752 + 8) + 182);
  objc_msgSend(v531, "standardCommandBufferSelector");
  v536 = *((_WORD *)v1749[1] + 96);
  objc_msgSend(v531, "standardCommandBufferSelector");
  v537 = *((_WORD *)v1746[1] + 81);
  objc_msgSend(v531, "standardCommandBufferSelector");
  v1696 = v529;
  LOWORD(v528) = *(_WORD *)(*(_QWORD *)(v1742 + 8) + 184);
  objc_msgSend(v531, "standardCommandBufferSelector");
  LOWORD(v531) = *(_WORD *)(*(_QWORD *)(v1740 + 8) + 194);
  v538 = operator new(0xEuLL);
  *v538 = v533;
  v538[1] = v534;
  v538[2] = v535;
  v538[3] = v536;
  v538[4] = v537;
  v538[5] = v528;
  v538[6] = (_WORD)v531;
  v539 = v1729;
  v540 = operator new(2uLL);
  *v540 = 14;
  v541 = v540 + 1;
  *(_QWORD *)&v542 = v540;
  *((_QWORD *)&v542 + 1) = v540 + 1;
  v1700 = v542;
  *(_QWORD *)v1708 = off_1E428C468;
  *(_QWORD *)(v1708 + 8) = 0;
  *(_QWORD *)(v1708 + 16) = 0;
  *(_QWORD *)(v1708 + 24) = 0;
  v543 = operator new(0xEuLL);
  *v543 = *(_QWORD *)v538;
  *(_QWORD *)((char *)v543 + 6) = *(_QWORD *)(v538 + 3);
  *(_QWORD *)(v1708 + 16) = (char *)v543 + 14;
  *(_QWORD *)(v1708 + 24) = (char *)v543 + 14;
  *(_WORD *)(v1708 + 32) = 0;
  *(_BYTE *)(v1708 + 34) = 26;
  *(_QWORD *)(v1708 + 40) = v1732;
  *(_WORD *)(v1708 + 48) = 0;
  *(_DWORD *)(v1708 + 120) = 1065353216;
  *(_QWORD *)(v1708 + 136) = 0;
  *(_QWORD *)(v1708 + 160) = 0;
  *(_QWORD *)(v1708 + 128) = v1708 + 136;
  *(_QWORD *)(v1708 + 144) = 0;
  *(_QWORD *)(v1708 + 152) = v1708 + 160;
  *(_QWORD *)(v1708 + 184) = 0;
  *(_QWORD *)(v1708 + 168) = 0;
  *(_QWORD *)(v1708 + 176) = v1708 + 184;
  *(_QWORD *)(v1708 + 232) = 0;
  *(_QWORD *)(v1708 + 224) = v1708 + 232;
  *(_QWORD *)(v1708 + 208) = 0;
  *(_QWORD *)(v1708 + 192) = 0;
  *(_QWORD *)(v1708 + 200) = v1708 + 208;
  *(_DWORD *)(v1708 + 52) = 1;
  *(_OWORD *)(v1708 + 80) = 0u;
  *(_OWORD *)(v1708 + 96) = 0u;
  *(_QWORD *)(v1708 + 112) = 0;
  *(_QWORD *)(v1708 + 216) = 0;
  *(_QWORD *)(v1708 + 240) = 0;
  *(_OWORD *)(v1708 + 248) = xmmword_19FFB4DA0;
  *(_QWORD *)(v1708 + 312) = 0;
  *(_OWORD *)(v1708 + 264) = 0u;
  *(_OWORD *)(v1708 + 280) = 0u;
  *(_OWORD *)(v1708 + 296) = 0u;
  *(_OWORD *)(v1708 + 320) = v1700;
  *(_QWORD *)(v1708 + 336) = v541;
  *(_DWORD *)(v1708 + 344) = 1;
  *(_QWORD *)v1708 = off_1E42AA138;
  *(_QWORD *)(v1708 + 8) = v543;
  *(_QWORD *)(v1708 + 352) = 0;
  v544 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v544, v539, v532);
  *(_QWORD *)(v1708 + 352) = v544;

  operator delete(v538);
  if (v1741)
  {
    v545 = &v1741->__shared_owners_;
    do
      v546 = __ldaxr((unint64_t *)v545);
    while (__stlxr(v546 - 1, (unint64_t *)v545));
    if (!v546)
    {
      ((void (*)(std::__shared_weak_count *))v1741->__on_zero_shared)(v1741);
      std::__shared_weak_count::__release_weak(v1741);
    }
  }
  if (v1743)
  {
    v547 = &v1743->__shared_owners_;
    do
      v548 = __ldaxr((unint64_t *)v547);
    while (__stlxr(v548 - 1, (unint64_t *)v547));
    if (!v548)
    {
      ((void (*)(std::__shared_weak_count *))v1743->__on_zero_shared)(v1743);
      std::__shared_weak_count::__release_weak(v1743);
    }
  }
  if (v1747)
  {
    v549 = &v1747->__shared_owners_;
    do
      v550 = __ldaxr((unint64_t *)v549);
    while (__stlxr(v550 - 1, (unint64_t *)v549));
    if (!v550)
    {
      ((void (*)(std::__shared_weak_count *))v1747->__on_zero_shared)(v1747);
      std::__shared_weak_count::__release_weak(v1747);
    }
  }
  if (v1750)
  {
    v551 = &v1750->__shared_owners_;
    do
      v552 = __ldaxr((unint64_t *)v551);
    while (__stlxr(v552 - 1, (unint64_t *)v551));
    if (!v552)
    {
      ((void (*)(std::__shared_weak_count *))v1750->__on_zero_shared)(v1750);
      std::__shared_weak_count::__release_weak(v1750);
    }
  }
  if (*((_QWORD *)&v1752 + 1))
  {
    v553 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v554 = __ldaxr(v553);
    while (__stlxr(v554 - 1, v553));
    if (!v554)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1752 + 1) + 16))(*((_QWORD *)&v1752 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1752 + 1));
    }
  }
  if (*((_QWORD *)&v1754 + 1))
  {
    v555 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1754 + 1) + 16))(*((_QWORD *)&v1754 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1754 + 1));
    }
  }
  if (*(_QWORD *)&v1744[8])
  {
    v557 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }

  *(_QWORD *)v1708 = &off_1E4296910;
  *(_QWORD *)(v1708 + 368) = &unk_1E4296A00;
  *(_OWORD *)(v1708 + 376) = 0u;
  *(_OWORD *)(v1708 + 392) = 0u;
  *(_BYTE *)(v1708 + 408) = 1;
  *(_OWORD *)(v1708 + 412) = 0u;
  *(_OWORD *)(v1708 + 428) = 0u;
  *(_QWORD *)(v1708 + 444) = 0x3F80000000000000;
  *(_QWORD *)(v1708 + 456) = 0;
  *(_QWORD *)(v1708 + 464) = v530;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v559 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 472) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 162);
  if (v559)
  {
    v560 = (unint64_t *)&v559->__shared_owners_;
    do
      v561 = __ldaxr(v560);
    while (__stlxr(v561 - 1, v560));
    if (!v561)
    {
      ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
      std::__shared_weak_count::__release_weak(v559);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v562 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 474) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 184);
  if (v562)
  {
    v563 = (unint64_t *)&v562->__shared_owners_;
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v565 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 476) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 194);
  if (v565)
  {
    v566 = (unint64_t *)&v565->__shared_owners_;
    do
      v567 = __ldaxr(v566);
    while (__stlxr(v567 - 1, v566));
    if (!v567)
    {
      ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
      std::__shared_weak_count::__release_weak(v565);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v568 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 478) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 160);
  if (v568)
  {
    v569 = (unint64_t *)&v568->__shared_owners_;
    do
      v570 = __ldaxr(v569);
    while (__stlxr(v570 - 1, v569));
    if (!v570)
    {
      ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
      std::__shared_weak_count::__release_weak(v568);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v571 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 480) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 182);
  if (v571)
  {
    v572 = (unint64_t *)&v571->__shared_owners_;
    do
      v573 = __ldaxr(v572);
    while (__stlxr(v573 - 1, v572));
    if (!v573)
    {
      ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
      std::__shared_weak_count::__release_weak(v571);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v574 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 482) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 192);
  if (v574)
  {
    v575 = (unint64_t *)&v574->__shared_owners_;
    do
      v576 = __ldaxr(v575);
    while (__stlxr(v576 - 1, v575));
    if (!v576)
    {
      ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
      std::__shared_weak_count::__release_weak(v574);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v577 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1708 + 484) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 158);
  if (v577)
  {
    v578 = (unint64_t *)&v577->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v580 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 80);
  if (*(_QWORD *)&v1744[8])
  {
    v581 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v582 = __ldaxr(v581);
    while (__stlxr(v582 - 1, v581));
    if (!v582)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 486) = v580;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v583 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 91);
  if (*(_QWORD *)&v1744[8])
  {
    v584 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v585 = __ldaxr(v584);
    while (__stlxr(v585 - 1, v584));
    if (!v585)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 487) = v583;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v586 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 79);
  if (*(_QWORD *)&v1744[8])
  {
    v587 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v588 = __ldaxr(v587);
    while (__stlxr(v588 - 1, v587));
    if (!v588)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 488) = v586;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v589 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 81);
  if (*(_QWORD *)&v1744[8])
  {
    v590 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v591 = __ldaxr(v590);
    while (__stlxr(v591 - 1, v590));
    if (!v591)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 489) = v589;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v592 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 92);
  if (*(_QWORD *)&v1744[8])
  {
    v593 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v594 = __ldaxr(v593);
    while (__stlxr(v594 - 1, v593));
    if (!v594)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 490) = v592;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v595 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 96);
  if (*(_QWORD *)&v1744[8])
  {
    v596 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v597 = __ldaxr(v596);
    while (__stlxr(v597 - 1, v596));
    if (!v597)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 491) = v595;
  -[VKSharedResources standardCommandBufferSelector](v539, "standardCommandBufferSelector");
  v598 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v1744 + 32) + 97);
  if (*(_QWORD *)&v1744[8])
  {
    v599 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v600 = __ldaxr(v599);
    while (__stlxr(v600 - 1, v599));
    if (!v600)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1744[8] + 16))(*(_QWORD *)&v1744[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1744[8]);
    }
  }
  *(_BYTE *)(v1708 + 492) = v598;
  v601 = v1737;
  if (v1737)
  {
    v602 = (unint64_t *)&v1737->__shared_owners_;
    do
      v603 = __ldxr(v602);
    while (__stxr(v603 + 1, v602));
  }
  v604 = *(std::__shared_weak_count **)(v1708 + 384);
  *(_QWORD *)(v1708 + 376) = v1736;
  *(_QWORD *)(v1708 + 384) = v601;
  if (v604)
  {
    v605 = (unint64_t *)&v604->__shared_owners_;
    do
      v606 = __ldaxr(v605);
    while (__stlxr(v606 - 1, v605));
    if (!v606)
    {
      ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
      std::__shared_weak_count::__release_weak(v604);
    }
  }
  v607 = operator new();
  v608 = *((id *)v1732 + 13);
  md::BuildingRenderResources::BuildingRenderResources(v607, v539, (_OWORD *)objc_msgSend(v608, "format"), *(_QWORD *)(v1708 + 376));
  v609 = *(md::BuildingRenderResources **)(v1708 + 392);
  *(_QWORD *)(v1708 + 392) = v607;
  if (v609)
  {
    md::BuildingRenderResources::~BuildingRenderResources(v609);
    MEMORY[0x1A1AF4E00]();
  }

  v610 = operator new();
  v611 = *((id *)v1732 + 13);
  md::LandmarkRenderResources::LandmarkRenderResources(v610, v539, (_OWORD *)objc_msgSend(v611, "format"), (uint64_t)v1736);
  v612 = *(md::LandmarkRenderResources **)(v1708 + 400);
  *(_QWORD *)(v1708 + 400) = v610;
  if (v612)
  {
    md::LandmarkRenderResources::~LandmarkRenderResources(v612);
    MEMORY[0x1A1AF4E00]();
  }

  *(_BYTE *)(v1708 + 408) = 1;
  *(_QWORD *)(v1708 + 456) = v1696;
  if (*(_QWORD *)(v1696 + 40) != v1708 + 368)
    *(_QWORD *)(v1696 + 40) = v1708 + 368;

  v613 = *(_WORD **)(v1722 + 8);
  v614 = v613[11];
  v615 = v613[68];
  v616 = v613[86];
  v617 = (unsigned __int16)v613[16];
  v618 = (unsigned __int16)v613[13];
  v1701 = v613[12];
  v1697 = v613[69];
  v1694 = v613[87];
  v1705 = operator new();
  v1730 = *((id *)v1732 + 13);
  v619 = (const RenderTargetFormat *)objc_msgSend(v1730, "format");
  v620 = v539;
  LOWORD(v1754) = 1;
  v621 = operator new(0xCuLL);
  v621[3] = v617;
  *v621 = v614;
  v621[1] = v615;
  v621[2] = v616;
  *(_QWORD *)&v1744[16] = v621 + 6;
  v621[4] = v618;
  *(_QWORD *)v1744 = v621;
  *(_QWORD *)&v1744[8] = v621 + 5;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(v1705, 12, &v1754, 1, (uint64_t)v1732, v619, v620, 1, (uint64_t)v1744);
  operator delete(v621);
  *(_QWORD *)v1705 = &off_1E4295AB0;
  *(_BYTE *)(v1705 + 361) = 1;
  v622 = (md::PolygonRenderResources *)operator new();
  md::PolygonRenderResources::PolygonRenderResources(v622, v620, v619);
  *(_WORD *)(v1705 + 384) = 0;
  *(_BYTE *)(v1705 + 386) = 0;
  *(_QWORD *)(v1705 + 400) = 0;
  *(_QWORD *)(v1705 + 408) = 0;
  *(_QWORD *)(v1705 + 392) = 0;
  *(_WORD *)(v1705 + 416) = v614;
  *(_WORD *)(v1705 + 418) = v615;
  *(_WORD *)(v1705 + 420) = v616;
  v623 = v1705;
  *(_WORD *)(v1705 + 422) = v617;
  *(_BYTE *)(v1705 + 424) = (v617 | 0x10000u) >> 16;
  *(_WORD *)(v1705 + 425) = v618;
  *(_BYTE *)(v1705 + 427) = (v618 | 0x10000u) >> 16;
  *(_WORD *)(v1705 + 428) = 0;
  *(_QWORD *)(v1705 + 368) = v622;
  *(_QWORD *)(v1705 + 376) = &off_1E42A9638;
  *(_QWORD *)(v1705 + 432) = v622;
  *(_BYTE *)(v1705 + 440) = 1;
  *(_DWORD *)(v1705 + 444) = 0x40000000;
  *(_BYTE *)(v1705 + 448) = 0;
  *(_QWORD *)(v1705 + 464) = 0;
  *(_QWORD *)(v1705 + 472) = 0;
  *(_WORD *)(v1705 + 480) = 0;

  v624 = operator new();
  v625 = *((id *)v1732 + 13);
  v626 = (const RenderTargetFormat *)objc_msgSend(v625, "format");
  v627 = v620;
  LOWORD(v1754) = 41;
  v628 = operator new(6uLL);
  *(_QWORD *)&v1744[16] = v628 + 3;
  *v628 = v1701;
  v628[1] = v1697;
  v628[2] = v1694;
  *(_QWORD *)v1744 = v628;
  *(_QWORD *)&v1744[8] = v628 + 3;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(v624, 13, &v1754, 1, (uint64_t)v1732, v626, v627, 1, (uint64_t)v1744);
  operator delete(v628);
  *(_QWORD *)v624 = &off_1E4295B98;
  *(_BYTE *)(v624 + 361) = 0;
  v629 = (md::PolygonRenderResources *)operator new();
  md::PolygonRenderResources::PolygonRenderResources(v629, v627, v626);
  *(_WORD *)(v624 + 384) = 0;
  *(_BYTE *)(v624 + 386) = 0;
  *(_QWORD *)(v624 + 400) = 0;
  *(_QWORD *)(v624 + 408) = 0;
  *(_QWORD *)(v624 + 392) = 0;
  *(_WORD *)(v624 + 416) = v1701;
  *(_WORD *)(v624 + 418) = v1697;
  *(_WORD *)(v624 + 420) = v1694;
  *(_QWORD *)(v624 + 422) = 0;
  *(_QWORD *)(v624 + 368) = v629;
  *(_QWORD *)(v624 + 376) = &off_1E42A9638;
  *(_QWORD *)(v624 + 432) = v629;
  *(_BYTE *)(v624 + 440) = 1;
  *(_DWORD *)(v624 + 444) = 0x40000000;
  *(_BYTE *)(v624 + 448) = 0;
  *(_QWORD *)(v624 + 464) = 0;
  *(_QWORD *)(v624 + 472) = 0;
  *(_WORD *)(v624 + 480) = 0;

  v1731 = *v1703;
  v630 = operator new();
  md::ClearRenderLayer::ClearRenderLayer(v630, (uint64_t)v1732, 0, 0, (_WORD *)(*(_QWORD *)(v1722 + 8) + 2));
  v631 = *v1731;
  *v1731 = v630;
  if (v631)
    (*(void (**)(uint64_t))(*(_QWORD *)v631 + 8))(v631);
  v632 = operator new();
  v633 = *(_QWORD *)(v1722 + 8);
  v634 = *(unsigned __int16 *)(v633 + 8);
  v635 = *(unsigned __int16 *)(v633 + 244);
  v1693 = a1[34];
  v1692 = v627;
  v636 = operator new(4uLL);
  *v636 = v634 | (v635 << 16);
  *(_QWORD *)v632 = off_1E428C468;
  *(_QWORD *)(v632 + 8) = 0;
  *(_QWORD *)(v632 + 16) = 0;
  *(_QWORD *)(v632 + 24) = 0;
  v637 = operator new(4uLL);
  *(_QWORD *)(v632 + 8) = v637;
  *v637++ = *v636;
  *(_QWORD *)(v632 + 16) = v637;
  *(_QWORD *)(v632 + 24) = v637;
  *(_WORD *)(v632 + 32) = 0;
  *(_BYTE *)(v632 + 34) = 2;
  *(_QWORD *)v632 = off_1E429E2A8;
  *(_QWORD *)(v632 + 40) = v1732;
  operator delete(v636);
  *(_QWORD *)v632 = &off_1E42905A0;
  *(_QWORD *)(v632 + 48) = 0;
  *(_BYTE *)(v632 + 56) = 0;
  *(_WORD *)(v632 + 57) = *(_WORD *)(v633 + 8);
  *(_QWORD *)(v632 + 64) = 0;
  v638 = operator new();
  v1695 = *((id *)v1732 + 13);
  v639 = (__int128 *)objc_msgSend(v1695, "format");
  v1702 = v1692;
  *(_OWORD *)(v638 + 16) = 0u;
  *(_OWORD *)(v638 + 32) = 0u;
  *(_OWORD *)v638 = 0u;
  *(_OWORD *)(v638 + 48) = 0u;
  *(_OWORD *)(v638 + 64) = 0u;
  *(_OWORD *)(v638 + 80) = 0u;
  *(_OWORD *)(v638 + 96) = 0u;
  *(_OWORD *)(v638 + 112) = 0u;
  *(_OWORD *)(v638 + 128) = 0u;
  *(_QWORD *)(v638 + 144) = 0;
  *(_QWORD *)(v638 + 152) = &off_1E42B59B0;
  *(_QWORD *)(v638 + 200) = 0;
  *(_QWORD *)(v638 + 176) = 0;
  *(_QWORD *)(v638 + 184) = 0;
  *(_QWORD *)(v638 + 168) = "";
  *(_DWORD *)(v638 + 192) = 0;
  *(_DWORD *)(v638 + 208) = 1065353216;
  *(_OWORD *)(v638 + 232) = 0u;
  *(_OWORD *)(v638 + 216) = 0u;
  *(int64x2_t *)(v638 + 248) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v638 + 264) = 0;
  *(_QWORD *)(v638 + 272) = v638 + 272;
  *(_QWORD *)(v638 + 280) = v638 + 272;
  *(_OWORD *)(v638 + 288) = 0u;
  *(_OWORD *)(v638 + 304) = 0u;
  *(_QWORD *)(v638 + 320) = 0;
  *(_DWORD *)(v638 + 328) = 1065353216;
  *(_QWORD *)(v638 + 336) = 0;
  *(_QWORD *)(v638 + 344) = 0;
  prime = std::__next_prime(0xAuLL);
  v641 = prime;
  v642 = *(int8x8_t *)(v638 + 304);
  if (prime > *(_QWORD *)&v642)
    goto LABEL_462;
  if (prime < *(_QWORD *)&v642)
  {
    v643 = vcvtps_u32_f32((float)*(unint64_t *)(v638 + 320) / *(float *)(v638 + 328));
    if (*(_QWORD *)&v642 < 3uLL || (v644 = (uint8x8_t)vcnt_s8(v642), v644.i16[0] = vaddlv_u8(v644), v644.u32[0] > 1uLL))
    {
      v643 = std::__next_prime(v643);
    }
    else
    {
      v645 = 1 << -(char)__clz(v643 - 1);
      if (v643 >= 2)
        v643 = v645;
    }
    if (v641 <= v643)
      v641 = v643;
    if (v641 < *(_QWORD *)&v642)
LABEL_462:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v638 + 296, v641);
  }
  *(_QWORD *)(v638 + 336) = v638 + 272;
  v646 = -[VKSharedResources shaderLibrary](v1702, "shaderLibrary");
  v647 = operator new();
  v648 = v647;
  v649 = *(_QWORD *)(v646 + 80);
  v650 = *(_QWORD *)(v649 + 1144);
  *(_QWORD *)&v1752 = *(_QWORD *)(v649 + 1136);
  *((_QWORD *)&v1752 + 1) = v650;
  if (v650)
  {
    v651 = (unint64_t *)(v650 + 8);
    do
      v652 = __ldxr(v651);
    while (__stxr(v652 + 1, v651));
  }
  *(_OWORD *)&v1744[20] = 0uLL;
  *(_QWORD *)v1745 = 0;
  v1744[0] = 0;
  *(_OWORD *)&v1744[4] = xmmword_19FFB3060;
  v1745[8] = 15;
  v1754 = *v639;
  v1755 = v639[1];
  ggl::Grid::GridPipelineState::GridPipelineState(v647, &v1752, (uint64_t)v1744, &v1754, 0);
  v653 = (_QWORD *)operator new();
  *v653 = &off_1E42E7BF0;
  v653[1] = 0;
  v653[2] = 0;
  v653[3] = v648;
  v654 = *(std::__shared_weak_count **)(v638 + 56);
  *(_QWORD *)(v638 + 48) = v648;
  *(_QWORD *)(v638 + 56) = v653;
  if (v654)
  {
    v655 = (unint64_t *)&v654->__shared_owners_;
    do
      v656 = __ldaxr(v655);
    while (__stlxr(v656 - 1, v655));
    if (!v656)
    {
      ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
      std::__shared_weak_count::__release_weak(v654);
    }
  }
  v657 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v658 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v659 = __ldaxr(v658);
    while (__stlxr(v659 - 1, v658));
    if (!v659)
    {
      ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
      std::__shared_weak_count::__release_weak(v657);
    }
  }
  v660 = operator new();
  v661 = v660;
  v662 = *(_QWORD *)(v646 + 80);
  v663 = *(std::__shared_weak_count **)(v662 + 1144);
  v1749 = *(uint64_t (***)())(v662 + 1136);
  v1750 = v663;
  if (v663)
  {
    v664 = (unint64_t *)&v663->__shared_owners_;
    do
      v665 = __ldxr(v664);
    while (__stxr(v665 + 1, v664));
  }
  *(_QWORD *)&v1744[28] = 0;
  *(_QWORD *)&v1744[20] = 0;
  *(_QWORD *)v1745 = 0;
  v1744[0] = 0;
  *(_OWORD *)&v1744[4] = xmmword_19FFB3060;
  v1745[8] = 15;
  v1752 = *v639;
  v1753 = v639[1];
  ggl::Grid::GridPipelineState::GridPipelineState(v660, &v1749, (uint64_t)v1744, &v1752, 1);
  v666 = (_QWORD *)operator new();
  *v666 = &off_1E42E7BF0;
  v666[1] = 0;
  v666[2] = 0;
  v666[3] = v661;
  v667 = *(std::__shared_weak_count **)(v638 + 72);
  *(_QWORD *)(v638 + 64) = v661;
  *(_QWORD *)(v638 + 72) = v666;
  if (v667)
  {
    v668 = (unint64_t *)&v667->__shared_owners_;
    do
      v669 = __ldaxr(v668);
    while (__stlxr(v669 - 1, v668));
    if (!v669)
    {
      ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
      std::__shared_weak_count::__release_weak(v667);
    }
  }
  v670 = v1750;
  if (v1750)
  {
    v671 = &v1750->__shared_owners_;
    do
      v672 = __ldaxr((unint64_t *)v671);
    while (__stlxr(v672 - 1, (unint64_t *)v671));
    if (!v672)
    {
      ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
      std::__shared_weak_count::__release_weak(v670);
    }
  }
  v673 = operator new();
  v674 = *(_QWORD *)(v646 + 80);
  v675 = *(_QWORD *)(v674 + 1160);
  v676 = *(std::__shared_weak_count **)(v674 + 1168);
  if (v676)
  {
    v677 = (unint64_t *)&v676->__shared_owners_;
    do
      v678 = __ldxr(v677);
    while (__stxr(v678 + 1, v677));
  }
  v1749 = 0;
  *(_OWORD *)v1744 = *v639;
  *(_OWORD *)&v1744[16] = v639[1];
  if ((v679 & 1) == 0)
  {
    if ((_DWORD)v1591)
    {
      if ((v1592 & 1) == 0)
      {
        if ((_DWORD)v1591)
        {
          if ((v1673 & 1) == 0
          {
            if ((v1687 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::Grid::GridUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          unk_1EE580A30 = &ggl::Grid::pipelineDataGridUVPipelineDeviceStructs(void)::ref;
          qword_1EE580A38 = 0;
          if ((v1674 & 1) == 0
          {
            ggl::Grid::pipelineDataGridUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE580AE0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE580AE8 = (uint64_t)ggl::GridBase::GridView::reflection(void)::reflection;
            unk_1EE580AF0 = ggl::Grid::Style::reflection(void)::reflection;
          }
          qword_1EE580A40 = (uint64_t)&ggl::Grid::pipelineDataGridUVPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE580A48 = xmmword_19FFB3690;
        }
      }
      ggl::Grid::GridUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Grid::GridUVPipelineSetup::typedReflection(void)::ref;
      ggl::GridUVShader::typedReflection(v1591);
      qword_1EE580A68 = (uint64_t)&ggl::GridUVShader::typedReflection(void)::ref;
      if ((v1593 & 1) == 0
      {
        ggl::Grid::pipelineStateGridUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE580CC0 = 0;
        qword_1EE580CC8 = (uint64_t)"";
        dword_1EE580CD0 = 0;
        qword_1EE580CD8 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE580CE0 = 2;
      }
      qword_1EE580A70 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE580A78 = 1;
      qword_1EE580A80 = 0;
      unk_1EE580A88 = 0;
      qword_1EE580A90 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineDeviceStructBinding(void)::ref;
      unk_1EE580A98 = 0;
      if ((v1594 & 1) == 0
      {
        ggl::Grid::pipelineStateGridUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580C00 = 0;
        qword_1EE580C08 = (uint64_t)"view";
        dword_1EE580C10 = 3;
        qword_1EE580C18 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE580C20 = xmmword_19FFB35A0;
        qword_1EE580C30 = 1;
        unk_1EE580C38 = "transform";
        dword_1EE580C40 = 3;
        qword_1EE580C48 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE580C50 = xmmword_19FFB3660;
        qword_1EE580C60 = 2;
        unk_1EE580C68 = "gridView";
        dword_1EE580C70 = 3;
        qword_1EE580C78 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineConstantGridViewBinding(void)::reflection;
        unk_1EE580C80 = xmmword_19FFB3000;
        qword_1EE580C90 = 3;
        unk_1EE580C98 = "style";
        dword_1EE580CA0 = 3;
        qword_1EE580CA8 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineConstantStyleBinding(void)::reflection;
        unk_1EE580CB0 = 6;
      }
      qword_1EE580AA0 = (uint64_t)&ggl::Grid::pipelineStateGridUVPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE580AA8 = 4;
      v623 = v1705;
    }
  }
  if (v676)
  {
    v680 = (unint64_t *)&v676->__shared_owners_;
    do
      v681 = __ldxr(v680);
    while (__stxr(v681 + 1, v680));
    *(_DWORD *)(v673 + 32) = 0;
    *(_QWORD *)(v673 + 16) = 0;
    *(_QWORD *)(v673 + 24) = 0;
    *(_QWORD *)v673 = &off_1E42B6760;
    *(_QWORD *)(v673 + 8) = 0;
    *(_QWORD *)(v673 + 40) = &ggl::Grid::GridUVPipelineState::typedReflection(void)::ref;
    *(_QWORD *)(v673 + 48) = v675;
    *(_QWORD *)(v673 + 56) = v676;
    do
      v682 = __ldxr(v680);
    while (__stxr(v682 + 1, v680));
  }
  else
  {
    *(_DWORD *)(v673 + 32) = 0;
    *(_QWORD *)(v673 + 16) = 0;
    *(_QWORD *)(v673 + 24) = 0;
    *(_QWORD *)v673 = &off_1E42B6760;
    *(_QWORD *)(v673 + 8) = 0;
    *(_QWORD *)(v673 + 40) = &ggl::Grid::GridUVPipelineState::typedReflection(void)::ref;
    *(_QWORD *)(v673 + 48) = v675;
    *(_QWORD *)(v673 + 56) = 0;
  }
  *(_BYTE *)(v673 + 112) = 0;
  *(_OWORD *)(v673 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 132) = 0;
  *(_QWORD *)(v673 + 148) = 0;
  *(_QWORD *)(v673 + 140) = 0;
  *(_BYTE *)(v673 + 160) = 0;
  *(_OWORD *)(v673 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 180) = 0;
  *(_QWORD *)(v673 + 196) = 0;
  *(_QWORD *)(v673 + 188) = 0;
  *(_BYTE *)(v673 + 208) = 0;
  *(_OWORD *)(v673 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 228) = 0;
  *(_QWORD *)(v673 + 244) = 0;
  *(_QWORD *)(v673 + 236) = 0;
  v683 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v673 + 256) = *(_OWORD *)v1744;
  *(_OWORD *)(v673 + 272) = v683;
  *(_BYTE *)(v673 + 288) = 0;
  *(_OWORD *)(v673 + 296) = 0u;
  *(_OWORD *)(v673 + 312) = 0u;
  *(_OWORD *)(v673 + 328) = 0u;
  *(_OWORD *)(v673 + 344) = 0u;
  *(_QWORD *)(v673 + 360) = 0;
  *(_QWORD *)(v673 + 368) = 0x100000001;
  *(_BYTE *)(v673 + 376) = 0;
  *(_BYTE *)(v673 + 64) = 0;
  *(_WORD *)(v673 + 65) = (_WORD)v1746;
  *(_BYTE *)(v673 + 67) = BYTE2(v1746);
  *(_OWORD *)(v673 + 68) = xmmword_19FFB3060;
  *(_QWORD *)(v673 + 84) = v1749;
  *(_DWORD *)(v673 + 92) = 0;
  *(_QWORD *)(v673 + 96) = 0;
  *(_DWORD *)(v673 + 104) = 0;
  *(_BYTE *)(v673 + 108) = 15;
  if (v676)
  {
    v684 = (unint64_t *)&v676->__shared_owners_;
    do
      v685 = __ldaxr(v684);
    while (__stlxr(v685 - 1, v684));
    if (!v685)
    {
      ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
      std::__shared_weak_count::__release_weak(v676);
    }
  }
  *(_BYTE *)(v673 + 305) = 0;
  v686 = vceqzq_s8(*(int8x16_t *)(v673 + 304));
  v687 = vmovl_high_s8(v686);
  v688 = vmovl_s16(*(int16x4_t *)v687.i8);
  v689.i64[0] = v688.u32[0];
  v689.i64[1] = v688.u32[1];
  v690 = v689;
  v691 = vmovl_s8(*(int8x8_t *)v686.i8);
  v692 = vmovl_s16(*(int16x4_t *)v691.i8);
  v689.i64[0] = v692.u32[0];
  v689.i64[1] = v692.u32[1];
  v693 = v689;
  v694 = vmovl_high_s16(v687);
  v689.i64[0] = v694.u32[0];
  v689.i64[1] = v694.u32[1];
  v695 = v689;
  v696 = vmovl_high_s16(v691);
  v689.i64[0] = v696.u32[0];
  v689.i64[1] = v696.u32[1];
  v697 = v689;
  v689.i64[0] = v688.u32[2];
  v689.i64[1] = v688.u32[3];
  v698 = v689;
  v689.i64[0] = v692.u32[2];
  v689.i64[1] = v692.u32[3];
  v699 = v689;
  v689.i64[0] = v694.u32[2];
  v689.i64[1] = v694.u32[3];
  v700 = v689;
  v689.i64[0] = v696.u32[2];
  v689.i64[1] = v696.u32[3];
  v701 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v689);
  v702 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v700);
  v703 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v699);
  v704 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v695);
  v705 = vceqzq_s8(*(int8x16_t *)(v673 + 320));
  v706 = vmovl_high_s8(v705);
  v707 = vmovl_s16(*(int16x4_t *)v706.i8);
  v689.i64[0] = v707.u32[0];
  v689.i64[1] = v707.u32[1];
  v708 = v689;
  v709 = vmovl_s8(*(int8x8_t *)v705.i8);
  v710 = vmovl_s16(*(int16x4_t *)v709.i8);
  v689.i64[0] = v710.u32[0];
  v689.i64[1] = v710.u32[1];
  v711 = v689;
  v712 = vmovl_high_s16(v706);
  v689.i64[0] = v712.u32[0];
  v689.i64[1] = v712.u32[1];
  v713 = v689;
  v714 = vmovl_high_s16(v709);
  v689.i64[0] = v714.u32[0];
  v689.i64[1] = v714.u32[1];
  v715 = v689;
  v689.i64[0] = v707.u32[2];
  v689.i64[1] = v707.u32[3];
  v716 = v689;
  v689.i64[0] = v710.u32[2];
  v689.i64[1] = v710.u32[3];
  v717 = v689;
  v689.i64[0] = v712.u32[2];
  v689.i64[1] = v712.u32[3];
  v718 = v689;
  v689.i64[0] = v714.u32[2];
  v689.i64[1] = v714.u32[3];
  v719 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v718);
  v720 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v708), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v690));
  v721 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v711), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v693));
  v722 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v713), v704);
  v723 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v715), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v697));
  v724 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v716), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v698));
  v725 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v717), v703);
  v726 = vorrq_s8(v719, v702);
  v727 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v689), v701);
  v728 = vceqzq_s8(*(int8x16_t *)(v673 + 336));
  v729 = vmovl_s8(*(int8x8_t *)v728.i8);
  v730 = vmovl_high_s16(v729);
  v731 = vmovl_high_s8(v728);
  v732 = vmovl_high_s16(v731);
  v733 = vmovl_s16(*(int16x4_t *)v729.i8);
  v734 = vmovl_s16(*(int16x4_t *)v731.i8);
  v689.i64[0] = v733.i32[0];
  v689.i64[1] = v733.i32[1];
  v735 = v689;
  v689.i64[0] = v734.i32[0];
  v689.i64[1] = v734.i32[1];
  v736 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v689);
  v737 = vceqzq_s8(*(int8x16_t *)(v673 + 352));
  v738 = vmovl_high_s8(v737);
  v739 = vmovl_s16(*(int16x4_t *)v738.i8);
  v689.i64[0] = v739.i32[0];
  v689.i64[1] = v739.i32[1];
  v740 = vmovl_s8(*(int8x8_t *)v737.i8);
  v741 = vmovl_s16(*(int16x4_t *)v740.i8);
  v742 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v689), v736), v720);
  v689.i64[0] = v741.i32[0];
  v689.i64[1] = v741.i32[1];
  v743 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v689), vbicq_s8((int8x16_t)xmmword_19FFB3170, v735));
  v689.i64[0] = v732.i32[0];
  v689.i64[1] = v732.i32[1];
  v744 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v689);
  v745 = vmovl_high_s16(v738);
  v746 = vorrq_s8(v743, v721);
  v689.i64[0] = v745.i32[0];
  v689.i64[1] = v745.i32[1];
  v747 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v689), v744);
  v689.i64[0] = v730.i32[0];
  v689.i64[1] = v730.i32[1];
  v748 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v689);
  v749 = vmovl_high_s16(v740);
  v689.i64[0] = v749.i32[0];
  v689.i64[1] = v749.i32[1];
  v750 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v689), v748), v723);
  v689.i64[0] = v734.i32[2];
  v689.i64[1] = v734.i32[3];
  v751 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v689);
  v689.i64[0] = v739.i32[2];
  v689.i64[1] = v739.i32[3];
  v752 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v689), v751), v724);
  v689.i64[0] = v733.i32[2];
  v689.i64[1] = v733.i32[3];
  v753 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v689);
  v689.i64[0] = v741.i32[2];
  v689.i64[1] = v741.i32[3];
  v754 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v689), v753), v725);
  v689.i64[0] = v732.i32[2];
  v689.i64[1] = v732.i32[3];
  v755 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v689);
  v689.i64[0] = v745.i32[2];
  v689.i64[1] = v745.i32[3];
  v756 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v689), v755), v726);
  v689.i64[0] = v730.i32[2];
  v689.i64[1] = v730.i32[3];
  v757 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v689);
  v689.i64[0] = v749.i32[2];
  v689.i64[1] = v749.i32[3];
  *(_QWORD *)(v673 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v746, v742), vorrq_s8(v750, vorrq_s8(v747, v722))), (int64x2_t)vorrq_s8(vorrq_s8(v754, v752), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v689), v757), v727), v756))));
  *(_QWORD *)v673 = &off_1E42747D8;
  *(_BYTE *)(v673 + 288) = 1;
  v758 = (_QWORD *)operator new();
  *v758 = &off_1E428A6B8;
  v758[1] = 0;
  v758[2] = 0;
  v758[3] = v673;
  v759 = *(std::__shared_weak_count **)(v638 + 96);
  *(_QWORD *)(v638 + 88) = v673;
  *(_QWORD *)(v638 + 96) = v758;
  if (v759)
  {
    v760 = (unint64_t *)&v759->__shared_owners_;
    do
      v761 = __ldaxr(v760);
    while (__stlxr(v761 - 1, v760));
    if (!v761)
    {
      ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
      std::__shared_weak_count::__release_weak(v759);
    }
  }
  if (v676)
  {
    v762 = (unint64_t *)&v676->__shared_owners_;
    do
      v763 = __ldaxr(v762);
    while (__stlxr(v763 - 1, v762));
    if (!v763)
    {
      ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
      std::__shared_weak_count::__release_weak(v676);
    }
  }
  v764 = operator new(0xE8uLL);
  v764[1] = 0;
  v764[2] = 0;
  *v764 = &off_1E42E2278;
  v765 = ggl::BufferData::BufferData((uint64_t)(v764 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
  v764[28] = ggl::Tile::View::reflection(void)::reflection;
  v764[3] = &off_1E42B97B0;
  v766 = *(std::__shared_weak_count **)(v638 + 8);
  *(_QWORD *)v638 = v765;
  *(_QWORD *)(v638 + 8) = v764;
  if (v766)
  {
    v767 = (unint64_t *)&v766->__shared_owners_;
    do
      v768 = __ldaxr(v767);
    while (__stlxr(v768 - 1, v767));
    if (!v768)
    {
      ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
      std::__shared_weak_count::__release_weak(v766);
    }
  }
  v769 = operator new(0xE8uLL);
  v769[1] = 0;
  v769[2] = 0;
  *v769 = &off_1E42E2C18;
  v770 = ggl::BufferData::BufferData((uint64_t)(v769 + 3), qword_1EE547CA8, 2, 1, 6, 1);
  v769[28] = ggl::GridBase::GridView::reflection(void)::reflection;
  v769[3] = &off_1E42B9E90;
  v771 = *(std::__shared_weak_count **)(v638 + 24);
  *(_QWORD *)(v638 + 16) = v770;
  *(_QWORD *)(v638 + 24) = v769;
  if (v771)
  {
    v772 = (unint64_t *)&v771->__shared_owners_;
    do
      v773 = __ldaxr(v772);
    while (__stlxr(v773 - 1, v772));
    if (!v773)
    {
      ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
      std::__shared_weak_count::__release_weak(v771);
    }
  }
  v774 = operator new(0xE8uLL);
  v774[1] = 0;
  v774[2] = 0;
  *v774 = &off_1E42E21D0;
  v775 = ggl::BufferData::BufferData((uint64_t)(v774 + 3), qword_1EE548218, 2, 1, 6, 1);
  v774[28] = ggl::Grid::Style::reflection(void)::reflection;
  v774[3] = &off_1E42B9730;
  v776 = *(std::__shared_weak_count **)(v638 + 40);
  *(_QWORD *)(v638 + 32) = v775;
  *(_QWORD *)(v638 + 40) = v774;
  if (v776)
  {
    v777 = (unint64_t *)&v776->__shared_owners_;
    do
      v778 = __ldaxr(v777);
    while (__stlxr(v778 - 1, v777));
    if (!v778)
    {
      ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
      std::__shared_weak_count::__release_weak(v776);
    }
  }
  *(_BYTE *)(v638 + 352) = 2;
  if (v1693)
    v779 = 16;
  else
    v779 = 20;
  *(_BYTE *)(v638 + 353) = v779;
  v780 = *(_QWORD **)(v638 + 32);
  v781 = v780[1];
  if (v781)
  {
    v782 = v780[9];
    *(_DWORD *)(v782 + 16) = 0x40000000;
    *(float *)(v782 + 20) = (float)v779;
    *(_OWORD *)(v782 + 32) = xmmword_19FFB4DB0;
    if (v782)
      _ZF = v781 == 0;
    else
      _ZF = 1;
    if (!_ZF)
    {
      if (v780[8] > v781)
        v781 = v780[8];
      v780[7] = 0;
      v780[8] = v781;
    }
  }
  else
  {
    MEMORY[0x10] = 0x40000000;
    MEMORY[0x14] = (float)v779;
    MEMORY[0x20] = xmmword_19FFB4DB0;
  }
  v784 = (_QWORD *)operator new();
  v1749 = 0;
  v1750 = 0;
  v785 = ggl::Grid::GridPipelineSetup::GridPipelineSetup(v784, *(_QWORD *)(v638 + 48), *(std::__shared_weak_count **)(v638 + 56), (uint64_t *)v638, (uint64_t *)&v1749, (uint64_t *)(v638 + 16), (uint64_t *)(v638 + 32));
  v786 = *(_QWORD *)(v638 + 80);
  *(_QWORD *)(v638 + 80) = v785;
  if (v786)
    (*(void (**)(uint64_t))(*(_QWORD *)v786 + 8))(v786);
  v787 = operator new();
  *(_DWORD *)(v787 + 32) = 0;
  *(_QWORD *)(v787 + 16) = 0;
  *(_QWORD *)(v787 + 24) = 0;
  *(_QWORD *)v787 = &off_1E42B5DE8;
  *(_QWORD *)(v787 + 8) = 0;
  *(_QWORD *)(v787 + 36) = 66304;
  *(_DWORD *)(v787 + 44) = 0;
  *(_QWORD *)(v787 + 48) = 0x8000800000000400;
  *(_WORD *)(v787 + 56) = 0;
  *(_BYTE *)(v787 + 58) = 3;
  *(_QWORD *)(v787 + 67) = 0;
  *(_QWORD *)(v787 + 59) = 0;
  *(_BYTE *)(v787 + 75) = 0;
  *(_QWORD *)(v787 + 132) = 0;
  *(_QWORD *)(v787 + 124) = 0;
  *(_WORD *)(v787 + 188) = 257;
  *(_QWORD *)(v787 + 192) = 0;
  *(_QWORD *)(v787 + 200) = 0;
  *(_BYTE *)(v787 + 208) = 0;
  v788 = *(_QWORD *)(v638 + 112);
  *(_QWORD *)(v638 + 112) = v787;
  if (v788)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v788 + 8))(v788);
    v787 = *(_QWORD *)(v638 + 112);
  }
  *(_BYTE *)(v787 + 58) = 3;
  *(_BYTE *)(v787 + 56) = 0;
  v789 = operator new();
  *(_DWORD *)(v789 + 32) = 0;
  *(_QWORD *)(v789 + 16) = 0;
  *(_QWORD *)(v789 + 24) = 0;
  *(_QWORD *)v789 = &off_1E42B5DE8;
  *(_QWORD *)(v789 + 8) = 0;
  *(_QWORD *)(v789 + 36) = 66304;
  *(_DWORD *)(v789 + 44) = 0;
  *(_QWORD *)(v789 + 48) = 0x8000800000000400;
  *(_WORD *)(v789 + 56) = 0;
  *(_BYTE *)(v789 + 58) = 3;
  *(_QWORD *)(v789 + 67) = 0;
  *(_QWORD *)(v789 + 59) = 0;
  *(_BYTE *)(v789 + 75) = 0;
  *(_QWORD *)(v789 + 132) = 0;
  *(_QWORD *)(v789 + 124) = 0;
  *(_WORD *)(v789 + 188) = 257;
  *(_QWORD *)(v789 + 192) = 0;
  *(_QWORD *)(v789 + 200) = 0;
  *(_BYTE *)(v789 + 208) = 0;
  v790 = *(_QWORD *)(v638 + 120);
  *(_QWORD *)(v638 + 120) = v789;
  if (v790)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v790 + 8))(v790);
    v789 = *(_QWORD *)(v638 + 120);
  }
  *(_BYTE *)(v789 + 58) = 3;
  *(_BYTE *)(v789 + 56) = 2;
  v791 = operator new();
  *(_DWORD *)(v791 + 32) = 0;
  *(_QWORD *)(v791 + 16) = 0;
  *(_QWORD *)(v791 + 24) = 0;
  *(_QWORD *)v791 = &off_1E42B5DE8;
  *(_QWORD *)(v791 + 8) = 0;
  *(_QWORD *)(v791 + 36) = 768;
  *(_DWORD *)(v791 + 44) = 0;
  *(_QWORD *)(v791 + 48) = 0x8000800000000400;
  *(_WORD *)(v791 + 56) = 0;
  *(_BYTE *)(v791 + 58) = 3;
  *(_QWORD *)(v791 + 67) = 0;
  *(_QWORD *)(v791 + 59) = 0;
  *(_BYTE *)(v791 + 75) = 0;
  *(_QWORD *)(v791 + 132) = 0;
  *(_QWORD *)(v791 + 124) = 0;
  *(_WORD *)(v791 + 188) = 257;
  *(_QWORD *)(v791 + 192) = 0;
  *(_QWORD *)(v791 + 200) = 0;
  *(_BYTE *)(v791 + 208) = 0;
  v792 = *(_QWORD *)(v638 + 128);
  *(_QWORD *)(v638 + 128) = v791;
  if (v792)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v792 + 8))(v792);
    v791 = *(_QWORD *)(v638 + 128);
  }
  *(_BYTE *)(v791 + 58) = 3;
  *(_BYTE *)(v791 + 56) = 0;
  v793 = *(_QWORD *)(v638 + 112);
  v794 = *(_QWORD *)(v638 + 80);
  v795 = *(_QWORD *)(v638 + 136);
  if (!v795)
  {
    v796 = operator new(0xA8uLL);
    v796[1] = 0;
    v796[2] = 0;
    *v796 = &off_1E42DE5E0;
    v797 = ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v796 + 3), "/GridMesh");
    v798 = *(std::__shared_weak_count **)(v638 + 144);
    *(_QWORD *)(v638 + 136) = v797;
    *(_QWORD *)(v638 + 144) = v796;
    if (v798)
    {
      v799 = (unint64_t *)&v798->__shared_owners_;
      do
        v800 = __ldaxr(v799);
      while (__stlxr(v800 - 1, v799));
      if (!v800)
      {
        ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
        std::__shared_weak_count::__release_weak(v798);
      }
    }
    v801 = **(_QWORD **)(*(_QWORD *)(v638 + 136) + 64);
    v802 = 6 * *(_QWORD *)(v801 + 8);
    v803 = *(_QWORD *)(v801 + 72);
    v804 = *(_QWORD *)(v801 + 80) - v803;
    if (v802 != v804)
    {
      if (v802 <= v804)
      {
        if (v802 < v804)
          *(_QWORD *)(v801 + 80) = v803 + v802;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v801 + 72, v802 - v804);
      }
      v805 = *(std::__shared_weak_count **)(v801 + 32);
      *(_QWORD *)(v801 + 24) = 0;
      *(_QWORD *)(v801 + 32) = 0;
      if (v805)
      {
        v806 = (unint64_t *)&v805->__shared_owners_;
        do
          v807 = __ldaxr(v806);
        while (__stlxr(v807 - 1, v806));
        if (!v807)
        {
          ((void (*)(std::__shared_weak_count *))v805->__on_zero_shared)(v805);
          std::__shared_weak_count::__release_weak(v805);
        }
      }
      *(_QWORD *)(v801 + 120) = 0;
      *(_DWORD *)(v801 + 112) = 0;
      v808 = *(_QWORD *)(v801 + 80) - *(_QWORD *)(v801 + 72);
      *(_QWORD *)(v801 + 40) = 0;
      *(_QWORD *)(v801 + 48) = v808;
      *(_QWORD *)(v801 + 56) = 0;
      *(_QWORD *)(v801 + 64) = v808;
      v801 = **(_QWORD **)(*(_QWORD *)(v638 + 136) + 64);
      v802 = 6 * *(_QWORD *)(v801 + 8);
    }
    v809 = *(_OWORD **)(v801 + 72);
    *v809 = xmmword_19FFB3990;
    v809[1] = xmmword_19FFB4A80;
    v809[2] = xmmword_19FFB3950;
    v809[3] = xmmword_19FFB4A90;
    v810 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v810->__shared_owners_ = 0;
    v811 = (unint64_t *)&v810->__shared_owners_;
    v810->__shared_weak_owners_ = 0;
    v810->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    v812 = ggl::BufferData::BufferData((uint64_t)&v810[1], 2, 1, 0, 6, 6);
    LODWORD(v810[10].__vftable) = 0;
    v810[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v810[1].__shared_owners_ = 2;
    v810[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v810[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
    v813 = v810[4].__vftable;
    v813->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
    LODWORD(v813->~__shared_weak_count_0) = 3;
    v814 = *(_QWORD *)(v638 + 136);
    do
      v815 = __ldxr(v811);
    while (__stxr(v815 + 1, v811));
    do
      v816 = __ldxr(v811);
    while (__stxr(v816 + 1, v811));
    v817 = *(std::__shared_weak_count **)(v814 + 104);
    *(_QWORD *)(v814 + 96) = v812;
    *(_QWORD *)(v814 + 104) = v810;
    if (v817)
    {
      v818 = (unint64_t *)&v817->__shared_owners_;
      do
        v819 = __ldaxr(v818);
      while (__stlxr(v819 - 1, v818));
      if (!v819)
      {
        ((void (*)(std::__shared_weak_count *))v817->__on_zero_shared)(v817);
        std::__shared_weak_count::__release_weak(v817);
      }
    }
    do
      v820 = __ldaxr(v811);
    while (__stlxr(v820 - 1, v811));
    if (!v820)
    {
      ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
      std::__shared_weak_count::__release_weak(v810);
    }
    shared_weak_owners = v810[3].__shared_weak_owners_;
    if (shared_weak_owners <= 0xC)
      shared_weak_owners = 12;
    v810[3].__shared_owners_ = 0;
    v810[3].__shared_weak_owners_ = shared_weak_owners;
    do
      v822 = __ldaxr(v811);
    while (__stlxr(v822 - 1, v811));
    if (!v822)
    {
      ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
      std::__shared_weak_count::__release_weak(v810);
    }
    v823 = *(_QWORD *)(v801 + 64);
    if (v823 <= v802)
      v823 = v802;
    *(_QWORD *)(v801 + 56) = 0;
    *(_QWORD *)(v801 + 64) = v823;
    v795 = *(_QWORD *)(v638 + 136);
    v623 = v1705;
  }
  *(_QWORD *)(v638 + 168) = "";
  *(_QWORD *)(v638 + 176) = v793;
  *(_QWORD *)(v638 + 184) = v794;
  *(_DWORD *)(v638 + 192) = 0;
  *(_QWORD *)(v638 + 200) = 0;
  *(_DWORD *)(v638 + 208) = 1065353216;
  *(_QWORD *)(v638 + 216) = v795;
  *(_QWORD *)(v638 + 224) = 0;
  *(_QWORD *)(v638 + 232) = 0;
  *(_QWORD *)(v638 + 240) = 0;
  *(int64x2_t *)(v638 + 248) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v638 + 264) = 0;

  v824 = *(md::GridRenderResources **)(v632 + 48);
  *(_QWORD *)(v632 + 48) = v638;
  if (v824)
  {
    md::GridRenderResources::~GridRenderResources(v824);
    MEMORY[0x1A1AF4E00]();
  }

  v825 = v1731[2];
  v1731[2] = v632;
  if (v825)
    (*(void (**)(uint64_t))(*(_QWORD *)v825 + 8))(v825);
  v826 = operator new();
  md::RasterRenderLayer::RasterRenderLayer(v826, (uint64_t)v1732, 0, &v1734);
  v827 = v1731[7];
  v1731[7] = v826;
  if (v827)
    (*(void (**)(uint64_t))(*(_QWORD *)v827 + 8))(v827);
  v828 = operator new();
  md::RasterRenderLayer::RasterRenderLayer(v828, (uint64_t)v1732, 1uLL, &v1734);
  v829 = v1731[8];
  v1731[8] = v828;
  if (v829)
    (*(void (**)(uint64_t))(*(_QWORD *)v829 + 8))(v829);
  v830 = operator new();
  md::RasterRenderLayer::RasterRenderLayer(v830, (uint64_t)v1732, 2uLL, &v1734);
  v831 = v1731[9];
  v1731[9] = v830;
  if (v831)
    (*(void (**)(uint64_t))(*(_QWORD *)v831 + 8))(v831);
  v832 = operator new();
  md::RasterRenderLayer::RasterRenderLayer(v832, (uint64_t)v1732, 3uLL, &v1734);
  v833 = v1731[11];
  v1731[11] = v832;
  if (v833)
    (*(void (**)(uint64_t))(*(_QWORD *)v833 + 8))(v833);
  v834 = operator new();
  v835 = v1702;
  LOWORD(v1752) = 1;
  v836 = *((id *)v1732 + 13);
  v837 = (const RenderTargetFormat *)objc_msgSend(v836, "format");
  -[VKSharedResources standardCommandBufferSelector](v835, "standardCommandBufferSelector");
  v838 = *(_WORD *)(*(_QWORD *)(v1754 + 8) + 30);
  memset(v1744, 0, 24);
  v839 = operator new(2uLL);
  *v839 = v838;
  *(_QWORD *)&v1744[16] = v839 + 1;
  *(_QWORD *)v1744 = v839;
  *(_QWORD *)&v1744[8] = v839 + 1;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(v834, 15, &v1752, 1, (uint64_t)v1732, v837, v835, 0, (uint64_t)v1744);
  *(_QWORD *)&v1744[8] = v839;
  operator delete(v839);
  v840 = (std::__shared_weak_count *)*((_QWORD *)&v1754 + 1);
  if (*((_QWORD *)&v1754 + 1))
  {
    v841 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v842 = __ldaxr(v841);
    while (__stlxr(v842 - 1, v841));
    if (!v842)
    {
      ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
      std::__shared_weak_count::__release_weak(v840);
    }
  }

  *(_QWORD *)v834 = &off_1E4298BB8;
  *(_QWORD *)(v834 + 368) = 0;
  -[VKSharedResources standardCommandBufferSelector](v835, "standardCommandBufferSelector");
  v843 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v834 + 376) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 30);
  if (v843)
  {
    v844 = (unint64_t *)&v843->__shared_owners_;
    do
      v845 = __ldaxr(v844);
    while (__stlxr(v845 - 1, v844));
    if (!v845)
    {
      ((void (*)(std::__shared_weak_count *))v843->__on_zero_shared)(v843);
      std::__shared_weak_count::__release_weak(v843);
    }
  }
  v846 = (md::CoastLineRenderResources *)operator new();
  v847 = *((id *)v1732 + 13);
  v848 = (const RenderTargetFormat *)objc_msgSend(v847, "format");
  -[VKSharedResources standardCommandBufferSelector](v835, "standardCommandBufferSelector");
  md::CoastLineRenderResources::CoastLineRenderResources(v846, v835, v848, *(_BYTE *)(*(_QWORD *)v1744 + 56));
  v849 = *(md::CoastLineRenderResources **)(v834 + 368);
  *(_QWORD *)(v834 + 368) = v846;
  if (v849)
  {
    md::CoastLineRenderResources::~CoastLineRenderResources(v849);
    MEMORY[0x1A1AF4E00]();
  }
  v850 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v851 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v852 = __ldaxr(v851);
    while (__stlxr(v852 - 1, v851));
    if (!v852)
    {
      ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
      std::__shared_weak_count::__release_weak(v850);
    }
  }

  v853 = v1731[15];
  v1731[15] = v834;
  if (v853)
    (*(void (**)(uint64_t))(*(_QWORD *)v853 + 8))(v853);
  v854 = operator new();
  md::RoadRenderLayer::RoadRenderLayer(v854, (uint64_t)v1732, v835, 2, *(_QWORD *)(v1719 + 120), 0);
  v855 = v1731[21];
  v1731[21] = v854;
  if (v855)
    (*(void (**)(uint64_t))(*(_QWORD *)v855 + 8))(v855);
  v856 = operator new();
  md::RoadRenderLayer::RoadRenderLayer(v856, (uint64_t)v1732, v835, 6, *(_QWORD *)(v1719 + 120), 0);
  v857 = v1731[22];
  v1731[22] = v856;
  if (v857)
    (*(void (**)(uint64_t))(*(_QWORD *)v857 + 8))(v857);
  v858 = operator new();
  md::RoadRenderLayer::RoadRenderLayer(v858, (uint64_t)v1732, v835, 1, 0, 0);
  v859 = v1731[16];
  v1731[16] = v858;
  if (v859)
    (*(void (**)(uint64_t))(*(_QWORD *)v859 + 8))(v859);
  v860 = v1731[12];
  v1731[12] = v623;
  if (v860)
    (*(void (**)(uint64_t))(*(_QWORD *)v860 + 8))(v860);
  v861 = v1731[13];
  v1731[13] = v624;
  if (v861)
    (*(void (**)(uint64_t))(*(_QWORD *)v861 + 8))(v861);
  v862 = operator new();
  md::RoadRenderLayer::RoadRenderLayer(v862, (uint64_t)v1732, v835, 4, 0, 0);
  v863 = v1731[23];
  v1731[23] = v862;
  if (v863)
    (*(void (**)(uint64_t))(*(_QWORD *)v863 + 8))(v863);
  v864 = operator new();
  v865 = v835;
  -[VKSharedResources standardCommandBufferSelector](v865, "standardCommandBufferSelector");
  v866 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 10);
  -[VKSharedResources standardCommandBufferSelector](v865, "standardCommandBufferSelector");
  v867 = *(unsigned __int16 *)(*(_QWORD *)(v1754 + 8) + 226);
  v868 = operator new(4uLL);
  *v868 = v866 | (v867 << 16);
  *(_QWORD *)v864 = off_1E428C468;
  *(_QWORD *)(v864 + 8) = 0;
  *(_QWORD *)(v864 + 16) = 0;
  *(_QWORD *)(v864 + 24) = 0;
  v869 = operator new(4uLL);
  *(_QWORD *)(v864 + 8) = v869;
  *v869++ = *v868;
  *(_QWORD *)(v864 + 16) = v869;
  *(_QWORD *)(v864 + 24) = v869;
  *(_WORD *)(v864 + 32) = 0;
  *(_BYTE *)(v864 + 34) = 3;
  *(_QWORD *)v864 = off_1E429E2A8;
  *(_QWORD *)(v864 + 40) = v1732;
  operator delete(v868);
  v870 = (std::__shared_weak_count *)*((_QWORD *)&v1754 + 1);
  if (*((_QWORD *)&v1754 + 1))
  {
    v871 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v872 = __ldaxr(v871);
    while (__stlxr(v872 - 1, v871));
    if (!v872)
    {
      ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
      std::__shared_weak_count::__release_weak(v870);
    }
  }
  v873 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v874 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v875 = __ldaxr(v874);
    while (__stlxr(v875 - 1, v874));
    if (!v875)
    {
      ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
      std::__shared_weak_count::__release_weak(v873);
    }
  }
  *(_QWORD *)v864 = &off_1E428FDA0;
  *(_QWORD *)(v864 + 48) = 0;
  -[VKSharedResources standardCommandBufferSelector](v865, "standardCommandBufferSelector");
  v876 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v864 + 56) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 10);
  if (v876)
  {
    v877 = (unint64_t *)&v876->__shared_owners_;
    do
      v878 = __ldaxr(v877);
    while (__stlxr(v878 - 1, v877));
    if (!v878)
    {
      ((void (*)(std::__shared_weak_count *))v876->__on_zero_shared)(v876);
      std::__shared_weak_count::__release_weak(v876);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v865, "standardCommandBufferSelector");
  v879 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v864 + 58) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 226);
  if (v879)
  {
    v880 = (unint64_t *)&v879->__shared_owners_;
    do
      v881 = __ldaxr(v880);
    while (__stlxr(v881 - 1, v880));
    if (!v881)
    {
      ((void (*)(std::__shared_weak_count *))v879->__on_zero_shared)(v879);
      std::__shared_weak_count::__release_weak(v879);
    }
  }
  v882 = operator new();
  v1706 = *((id *)v1732 + 13);
  v883 = (_OWORD *)objc_msgSend(v1706, "format");
  v884 = v865;
  *(_OWORD *)(v882 + 8) = 0u;
  *(_OWORD *)(v882 + 24) = 0u;
  *(_OWORD *)(v882 + 40) = 0u;
  *(_OWORD *)(v882 + 56) = 0u;
  *(_OWORD *)(v882 + 72) = 0u;
  *(_OWORD *)(v882 + 88) = 0u;
  *(_OWORD *)(v882 + 112) = 0u;
  *(_OWORD *)(v882 + 128) = 0u;
  *(_OWORD *)(v882 + 144) = 0u;
  *(_OWORD *)(v882 + 160) = 0u;
  *(_OWORD *)(v882 + 176) = 0u;
  *(_OWORD *)(v882 + 192) = 0u;
  *(_QWORD *)(v882 + 208) = 0;
  v885 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v884, "shaderLibrary") + 80);
  v886 = *(_QWORD *)(v885 + 2288);
  v887 = *(std::__shared_weak_count **)(v885 + 2296);
  if (v887)
  {
    v888 = (unint64_t *)&v887->__shared_owners_;
    do
      v889 = __ldxr(v888);
    while (__stxr(v889 + 1, v888));
  }
  *(_QWORD *)&v1754 = 0;
  v890 = (char *)operator new(0x198uLL);
  *((_QWORD *)v890 + 1) = 0;
  *((_QWORD *)v890 + 2) = 0;
  *(_QWORD *)v890 = &off_1E42E41C0;
  *(_OWORD *)v1744 = *v883;
  *(_OWORD *)&v1744[16] = v883[1];
  if ((v891 & 1) == 0)
  {
    if ((_DWORD)v1595)
    {
      if ((v1596 & 1) == 0)
      {
        if ((_DWORD)v1595)
        {
          if ((v1675 & 1) == 0
          {
            if ((v1688 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1ECE43A80 = 1;
          }
          ggl::Sky::SkyPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          unk_1EE580770 = &ggl::Sky::pipelineDataSkyPipelineDeviceStructs(void)::ref;
          qword_1EE580778 = 0;
          if ((v1676 & 1) == 0
          {
            ggl::Sky::pipelineDataSkyPipelineConstantStructs(void)::ref = (uint64_t)ggl::Sky::Style::reflection(void)::reflection;
          }
          qword_1EE580780 = (uint64_t)&ggl::Sky::pipelineDataSkyPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE580788 = xmmword_19FFB3350;
        }
      }
      ggl::Sky::SkyPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Sky::SkyPipelineSetup::typedReflection(void)::ref;
      ggl::SkyShader::typedReflection(v1595);
      qword_1ECE31F88 = (uint64_t)&ggl::SkyShader::typedReflection(void)::ref;
      if ((v1597 & 1) == 0
      {
        ggl::Sky::pipelineStateSkyPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5807E8 = 0;
        qword_1EE5807F0 = (uint64_t)"";
        dword_1EE5807F8 = 0;
        qword_1EE580800 = (uint64_t)&ggl::Sky::pipelineStateSkyPipelineAttributeBinding_0(void)::attr;
        unk_1EE580808 = 1;
      }
      qword_1ECE31F90 = (uint64_t)&ggl::Sky::pipelineStateSkyPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31F98 = 1;
      qword_1ECE31FA0 = 0;
      unk_1ECE31FA8 = 0;
      qword_1ECE31FB0 = (uint64_t)&ggl::Sky::pipelineStateSkyPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31FB8 = 0;
      if ((v1598 & 1) == 0
      {
        ggl::Sky::pipelineStateSkyPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5807B8 = 0;
        qword_1EE5807C0 = (uint64_t)"style";
        dword_1EE5807C8 = 3;
        qword_1EE5807D0 = (uint64_t)&ggl::Sky::pipelineStateSkyPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5807D8 = 4;
      }
      qword_1ECE31FC0 = (uint64_t)&ggl::Sky::pipelineStateSkyPipelineConstantStructBinding(void)::ref;
      unk_1ECE31FC8 = 1;
    }
  }
  if (v887)
  {
    v892 = (unint64_t *)&v887->__shared_owners_;
    do
      v893 = __ldxr(v892);
    while (__stxr(v893 + 1, v892));
    *((_DWORD *)v890 + 14) = 0;
    *((_QWORD *)v890 + 5) = 0;
    *((_QWORD *)v890 + 6) = 0;
    *((_QWORD *)v890 + 3) = &off_1E42B6760;
    *((_QWORD *)v890 + 4) = 0;
    *((_QWORD *)v890 + 8) = &ggl::Sky::SkyPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v890 + 9) = v886;
    *((_QWORD *)v890 + 10) = v887;
    do
      v894 = __ldxr(v892);
    while (__stxr(v894 + 1, v892));
  }
  else
  {
    *((_DWORD *)v890 + 14) = 0;
    *((_QWORD *)v890 + 5) = 0;
    *((_QWORD *)v890 + 6) = 0;
    *((_QWORD *)v890 + 3) = &off_1E42B6760;
    *((_QWORD *)v890 + 4) = 0;
    *((_QWORD *)v890 + 8) = &ggl::Sky::SkyPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v890 + 9) = v886;
    *((_QWORD *)v890 + 10) = 0;
  }
  v890[136] = 0;
  *(_OWORD *)(v890 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v890 + 156) = 0;
  *(_QWORD *)(v890 + 172) = 0;
  *(_QWORD *)(v890 + 164) = 0;
  v890[184] = 0;
  *(_OWORD *)(v890 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v890 + 204) = 0;
  *(_QWORD *)(v890 + 220) = 0;
  *(_QWORD *)(v890 + 212) = 0;
  v890[232] = 0;
  *(_OWORD *)(v890 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v890 + 252) = 0;
  *(_QWORD *)(v890 + 268) = 0;
  *(_QWORD *)(v890 + 260) = 0;
  v895 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v890 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v890 + 296) = v895;
  v890[312] = 0;
  *((_QWORD *)v890 + 48) = 0;
  *((_OWORD *)v890 + 22) = 0u;
  *((_OWORD *)v890 + 23) = 0u;
  *((_OWORD *)v890 + 20) = 0u;
  *((_OWORD *)v890 + 21) = 0u;
  *((_QWORD *)v890 + 49) = 0x100000001;
  v890[400] = 0;
  v890[88] = 0;
  *(_WORD *)(v890 + 89) = v1752;
  v890[91] = BYTE2(v1752);
  *(_OWORD *)(v890 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v890 + 108) = v1754;
  *((_DWORD *)v890 + 29) = 0;
  *((_QWORD *)v890 + 15) = 0;
  *((_DWORD *)v890 + 32) = 0;
  v890[132] = 15;
  if (v887)
  {
    v896 = (unint64_t *)&v887->__shared_owners_;
    do
      v897 = __ldaxr(v896);
    while (__stlxr(v897 - 1, v896));
    if (!v897)
    {
      ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
      std::__shared_weak_count::__release_weak(v887);
    }
  }
  *((_QWORD *)v890 + 3) = &off_1E42BB820;
  v898 = *(std::__shared_weak_count **)(v882 + 48);
  *(_QWORD *)(v882 + 40) = v890 + 24;
  *(_QWORD *)(v882 + 48) = v890;
  if (v898)
  {
    v899 = (unint64_t *)&v898->__shared_owners_;
    do
      v900 = __ldaxr(v899);
    while (__stlxr(v900 - 1, v899));
    if (!v900)
    {
      ((void (*)(std::__shared_weak_count *))v898->__on_zero_shared)(v898);
      std::__shared_weak_count::__release_weak(v898);
    }
  }
  if (v887)
  {
    v901 = (unint64_t *)&v887->__shared_owners_;
    do
      v902 = __ldaxr(v901);
    while (__stlxr(v902 - 1, v901));
    if (!v902)
    {
      ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
      std::__shared_weak_count::__release_weak(v887);
    }
  }
  v903 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v884, "shaderLibrary") + 80);
  v904 = *(_QWORD *)(v903 + 680);
  v905 = *(std::__shared_weak_count **)(v903 + 688);
  if (v905)
  {
    v906 = (unint64_t *)&v905->__shared_owners_;
    do
      v907 = __ldxr(v906);
    while (__stxr(v907 + 1, v906));
  }
  v908 = (char *)operator new(0x198uLL);
  *((_QWORD *)v908 + 1) = 0;
  *((_QWORD *)v908 + 2) = 0;
  *(_QWORD *)v908 = &off_1E42E4150;
  *(_OWORD *)v1744 = *v883;
  *(_OWORD *)&v1744[16] = v883[1];
  if ((v909 & 1) == 0)
  {
    if ((_DWORD)v1599)
    {
      if ((v1600 & 1) == 0)
      {
        if ((_DWORD)v1599)
        {
          if ((v1677 & 1) == 0
          {
            if ((v1689 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43AF0 = 1;
          }
          ggl::Fog::FogPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
          unk_1EE580690 = &ggl::Fog::pipelineDataFogPipelineDeviceStructs(void)::ref;
          qword_1EE580698 = 0;
          if ((v1678 & 1) == 0
          {
            ggl::Fog::pipelineDataFogPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(_QWORD *)algn_1EE5806C8 = ggl::Tile::View::reflection(void)::reflection;
          }
          qword_1EE5806A0 = (uint64_t)&ggl::Fog::pipelineDataFogPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE5806A8 = xmmword_19FFB35C0;
        }
      }
      ggl::Fog::FogPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Fog::FogPipelineSetup::typedReflection(void)::ref;
      ggl::FogShader::typedReflection(v1599);
      qword_1ECE31F38 = (uint64_t)&ggl::FogShader::typedReflection(void)::ref;
      if ((v1601 & 1) == 0
      {
        ggl::Fog::pipelineStateFogPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE580738 = 0;
        qword_1EE580740 = (uint64_t)"";
        dword_1EE580748 = 0;
        qword_1EE580750 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineAttributeBinding_0(void)::attr;
        unk_1EE580758 = 1;
      }
      qword_1ECE31F40 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31F48 = 1;
      qword_1ECE31F50 = 0;
      unk_1ECE31F58 = 0;
      qword_1ECE31F60 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31F68 = 0;
      if ((v1602 & 1) == 0
      {
        ggl::Fog::pipelineStateFogPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5806D8 = 0;
        qword_1EE5806E0 = (uint64_t)"skyfog";
        dword_1EE5806E8 = 3;
        qword_1EE5806F0 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE5806F8 = xmmword_19FFB3720;
        qword_1EE580708 = 1;
        unk_1EE580710 = "view";
        dword_1EE580718 = 3;
        qword_1EE580720 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineConstantViewBinding(void)::reflection;
        unk_1EE580728 = 2;
      }
      qword_1ECE31F70 = (uint64_t)&ggl::Fog::pipelineStateFogPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31F78 = 2;
    }
  }
  if (v905)
  {
    v910 = (unint64_t *)&v905->__shared_owners_;
    do
      v911 = __ldxr(v910);
    while (__stxr(v911 + 1, v910));
    *((_DWORD *)v908 + 14) = 0;
    *((_QWORD *)v908 + 5) = 0;
    *((_QWORD *)v908 + 6) = 0;
    *((_QWORD *)v908 + 3) = &off_1E42B6760;
    *((_QWORD *)v908 + 4) = 0;
    *((_QWORD *)v908 + 8) = &ggl::Fog::FogPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v908 + 9) = v904;
    *((_QWORD *)v908 + 10) = v905;
    do
      v912 = __ldxr(v910);
    while (__stxr(v912 + 1, v910));
  }
  else
  {
    *((_DWORD *)v908 + 14) = 0;
    *((_QWORD *)v908 + 5) = 0;
    *((_QWORD *)v908 + 6) = 0;
    *((_QWORD *)v908 + 3) = &off_1E42B6760;
    *((_QWORD *)v908 + 4) = 0;
    *((_QWORD *)v908 + 8) = &ggl::Fog::FogPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v908 + 9) = v904;
    *((_QWORD *)v908 + 10) = 0;
  }
  v908[136] = 0;
  *(_OWORD *)(v908 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v908 + 156) = 0;
  *(_QWORD *)(v908 + 172) = 0;
  *(_QWORD *)(v908 + 164) = 0;
  v908[184] = 0;
  *(_OWORD *)(v908 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v908 + 204) = 0;
  *(_QWORD *)(v908 + 220) = 0;
  *(_QWORD *)(v908 + 212) = 0;
  v908[232] = 0;
  *(_OWORD *)(v908 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v908 + 252) = 0;
  *(_QWORD *)(v908 + 268) = 0;
  *(_QWORD *)(v908 + 260) = 0;
  v913 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v908 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v908 + 296) = v913;
  v908[312] = 0;
  *((_QWORD *)v908 + 48) = 0;
  *((_OWORD *)v908 + 22) = 0u;
  *((_OWORD *)v908 + 23) = 0u;
  *((_OWORD *)v908 + 20) = 0u;
  *((_OWORD *)v908 + 21) = 0u;
  *((_QWORD *)v908 + 49) = 0x100000001;
  v908[400] = 0;
  v908[88] = 1;
  *(_WORD *)(v908 + 89) = v1754;
  v908[91] = BYTE2(v1754);
  *(_OWORD *)(v908 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v908 + 27) = 7;
  *((_QWORD *)v908 + 14) = 0;
  *((_QWORD *)v908 + 15) = 0;
  *((_DWORD *)v908 + 32) = 0;
  v908[132] = 15;
  if (v905)
  {
    v914 = (unint64_t *)&v905->__shared_owners_;
    do
      v915 = __ldaxr(v914);
    while (__stlxr(v915 - 1, v914));
    if (!v915)
    {
      ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
      std::__shared_weak_count::__release_weak(v905);
    }
  }
  v908[329] = 0;
  v916 = vceqzq_s8(*(int8x16_t *)(v908 + 328));
  v917 = vmovl_s8(*(int8x8_t *)v916.i8);
  v918 = vmovl_high_s16(v917);
  v919.i64[0] = v918.u32[2];
  v919.i64[1] = v918.u32[3];
  v920 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v919);
  v921 = vmovl_high_s8(v916);
  v922 = vmovl_high_s16(v921);
  v919.i64[0] = v922.u32[2];
  v919.i64[1] = v922.u32[3];
  v923 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v919);
  v924 = vmovl_s16(*(int16x4_t *)v917.i8);
  v919.i64[0] = v924.u32[2];
  v919.i64[1] = v924.u32[3];
  v925 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v919);
  v926 = vmovl_s16(*(int16x4_t *)v921.i8);
  v919.i64[0] = v926.u32[2];
  v919.i64[1] = v926.u32[3];
  v927 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v919);
  v919.i64[0] = v918.u32[0];
  v919.i64[1] = v918.u32[1];
  v928 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v919);
  v919.i64[0] = v922.u32[0];
  v919.i64[1] = v922.u32[1];
  v929 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v919);
  v919.i64[0] = v924.u32[0];
  v919.i64[1] = v924.u32[1];
  v930 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v919);
  v919.i64[0] = v926.u32[0];
  v919.i64[1] = v926.u32[1];
  v931 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v919);
  v932 = vceqzq_s8(*(int8x16_t *)(v908 + 344));
  v933 = vmovl_s8(*(int8x8_t *)v932.i8);
  v934 = vmovl_high_s16(v933);
  v919.i64[0] = v934.u32[2];
  v919.i64[1] = v934.u32[3];
  v935 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v919);
  v936 = vmovl_high_s8(v932);
  v937 = vmovl_high_s16(v936);
  v919.i64[0] = v937.u32[2];
  v919.i64[1] = v937.u32[3];
  v938 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v919);
  v939 = vmovl_s16(*(int16x4_t *)v933.i8);
  v919.i64[0] = v939.u32[2];
  v919.i64[1] = v939.u32[3];
  v940 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v919);
  v941 = vmovl_s16(*(int16x4_t *)v936.i8);
  v919.i64[0] = v941.u32[2];
  v919.i64[1] = v941.u32[3];
  v942 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v919);
  v919.i64[0] = v934.u32[0];
  v919.i64[1] = v934.u32[1];
  v943 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v919);
  v919.i64[0] = v937.u32[0];
  v919.i64[1] = v937.u32[1];
  v944 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v919);
  v919.i64[0] = v939.u32[0];
  v919.i64[1] = v939.u32[1];
  v945 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v919);
  v919.i64[0] = v941.u32[0];
  v919.i64[1] = v941.u32[1];
  v946 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v919), v931);
  v947 = vorrq_s8(v945, v930);
  v948 = vorrq_s8(v944, v929);
  v949 = vorrq_s8(v943, v928);
  v950 = vorrq_s8(v942, v927);
  v951 = vorrq_s8(v940, v925);
  v952 = vorrq_s8(v938, v923);
  v953 = vorrq_s8(v935, v920);
  v954 = vceqzq_s8(*(int8x16_t *)(v908 + 360));
  v955 = vmovl_s8(*(int8x8_t *)v954.i8);
  v956 = vmovl_high_s16(v955);
  v957 = vmovl_high_s8(v954);
  v958 = vmovl_high_s16(v957);
  v959 = vmovl_s16(*(int16x4_t *)v955.i8);
  v960 = vmovl_s16(*(int16x4_t *)v957.i8);
  v919.i64[0] = v960.i32[0];
  v919.i64[1] = v960.i32[1];
  v961 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v919);
  v919.i64[0] = v959.i32[0];
  v919.i64[1] = v959.i32[1];
  v962 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v919);
  v919.i64[0] = v958.i32[0];
  v919.i64[1] = v958.i32[1];
  v963 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v919);
  v919.i64[0] = v956.i32[0];
  v919.i64[1] = v956.i32[1];
  v964 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v919);
  v919.i64[0] = v956.i32[2];
  v919.i64[1] = v956.i32[3];
  v965 = v919;
  v919.i64[0] = v958.i32[2];
  v919.i64[1] = v958.i32[3];
  v966 = v919;
  v919.i64[0] = v959.i32[2];
  v919.i64[1] = v959.i32[3];
  v967 = v919;
  v919.i64[0] = v960.i32[2];
  v919.i64[1] = v960.i32[3];
  v968 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v919);
  v969 = vceqzq_s8(*(int8x16_t *)(v908 + 376));
  v970 = vmovl_high_s8(v969);
  v971 = vmovl_s16(*(int16x4_t *)v970.i8);
  v972 = vmovl_s8(*(int8x8_t *)v969.i8);
  v973 = vmovl_s16(*(int16x4_t *)v972.i8);
  v974 = vmovl_high_s16(v970);
  v975 = vmovl_high_s16(v972);
  v919.i64[0] = v975.i32[2];
  v919.i64[1] = v975.i32[3];
  v976 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v919);
  v919.i64[0] = v974.i32[2];
  v919.i64[1] = v974.i32[3];
  v977 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v919);
  v919.i64[0] = v973.i32[2];
  v919.i64[1] = v973.i32[3];
  v978 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v919);
  v919.i64[0] = v971.i32[2];
  v919.i64[1] = v971.i32[3];
  v979 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v919);
  v919.i64[0] = v975.i32[0];
  v919.i64[1] = v975.i32[1];
  v980 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v919);
  v919.i64[0] = v974.i32[0];
  v919.i64[1] = v974.i32[1];
  v981 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v919);
  v919.i64[0] = v973.i32[0];
  v919.i64[1] = v973.i32[1];
  v982 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v919);
  v919.i64[0] = v971.i32[0];
  v919.i64[1] = v971.i32[1];
  *((_QWORD *)v908 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v982, v962), v947), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v919), v961), v946)), vorrq_s8(vorrq_s8(vorrq_s8(v980, v964), v949), vorrq_s8(vorrq_s8(v981, v963), v948))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v978, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v967)), v951), vorrq_s8(vorrq_s8(v979, v968), v950)), vorrq_s8(vorrq_s8(vorrq_s8(v976, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v965)),
                                                v953),
                                              vorrq_s8(vorrq_s8(v977, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v966)), v952)))));
  *((_QWORD *)v908 + 3) = &off_1E42BB7D0;
  v908[312] = 1;
  v983 = *(std::__shared_weak_count **)(v882 + 152);
  *(_QWORD *)(v882 + 144) = v908 + 24;
  *(_QWORD *)(v882 + 152) = v908;
  if (v983)
  {
    v984 = (unint64_t *)&v983->__shared_owners_;
    do
      v985 = __ldaxr(v984);
    while (__stlxr(v985 - 1, v984));
    if (!v985)
    {
      ((void (*)(std::__shared_weak_count *))v983->__on_zero_shared)(v983);
      std::__shared_weak_count::__release_weak(v983);
    }
  }
  if (v905)
  {
    v986 = (unint64_t *)&v905->__shared_owners_;
    do
      v987 = __ldaxr(v986);
    while (__stlxr(v987 - 1, v986));
    if (!v987)
    {
      ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
      std::__shared_weak_count::__release_weak(v905);
    }
  }
  v988 = (_QWORD *)operator new();
  v989 = v988;
  v990 = *(_QWORD *)(v882 + 144);
  v991 = *(std::__shared_weak_count **)(v882 + 152);
  if (v991)
  {
    v992 = (unint64_t *)&v991->__shared_owners_;
    do
      v993 = __ldxr(v992);
    while (__stxr(v993 + 1, v992));
    ggl::PipelineSetup::PipelineSetup(v988, v990, (uint64_t)v991);
    v994 = (unint64_t *)&v991->__shared_owners_;
    do
      v995 = __ldaxr(v994);
    while (__stlxr(v995 - 1, v994));
    if (!v995)
    {
      ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
      std::__shared_weak_count::__release_weak(v991);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v988, v990, 0);
  }
  *v989 = &off_1E42BB7A0;
  v996 = (_QWORD *)v989[8];
  v996[1] = 0;
  v997 = *(_QWORD *)(v882 + 128);
  *v996 = v997;
  v998 = (_QWORD *)v989[20];
  v999 = *(_QWORD *)(v882 + 136);
  if (v999)
  {
    v1000 = (unint64_t *)(v999 + 8);
    do
      v1001 = __ldxr(v1000);
    while (__stxr(v1001 + 1, v1000));
  }
  v1002 = (std::__shared_weak_count *)v998[1];
  *v998 = v997;
  v998[1] = v999;
  if (v1002)
  {
    v1003 = (unint64_t *)&v1002->__shared_owners_;
    do
      v1004 = __ldaxr(v1003);
    while (__stlxr(v1004 - 1, v1003));
    if (!v1004)
    {
      ((void (*)(std::__shared_weak_count *))v1002->__on_zero_shared)(v1002);
      std::__shared_weak_count::__release_weak(v1002);
    }
  }
  v1005 = v989[8];
  *(_QWORD *)(v1005 + 24) = 0;
  v1006 = *(_QWORD *)(v882 + 112);
  *(_QWORD *)(v1005 + 16) = v1006;
  v1007 = v989[20];
  v1008 = *(_QWORD *)(v882 + 120);
  if (v1008)
  {
    v1009 = (unint64_t *)(v1008 + 8);
    do
      v1010 = __ldxr(v1009);
    while (__stxr(v1010 + 1, v1009));
  }
  v1011 = *(std::__shared_weak_count **)(v1007 + 24);
  *(_QWORD *)(v1007 + 16) = v1006;
  *(_QWORD *)(v1007 + 24) = v1008;
  if (v1011)
  {
    v1012 = (unint64_t *)&v1011->__shared_owners_;
    do
      v1013 = __ldaxr(v1012);
    while (__stlxr(v1013 - 1, v1012));
    if (!v1013)
    {
      ((void (*)(std::__shared_weak_count *))v1011->__on_zero_shared)(v1011);
      std::__shared_weak_count::__release_weak(v1011);
    }
  }
  v1014 = *(_QWORD *)(v882 + 192);
  *(_QWORD *)(v882 + 192) = v989;
  if (v1014)
    (*(void (**)(uint64_t))(*(_QWORD *)v1014 + 8))(v1014);
  v1015 = operator new();
  *(_DWORD *)(v1015 + 32) = 0;
  *(_QWORD *)(v1015 + 16) = 0;
  *(_QWORD *)(v1015 + 24) = 0;
  *(_QWORD *)v1015 = &off_1E42B5DE8;
  *(_QWORD *)(v1015 + 8) = 0;
  *(_QWORD *)(v1015 + 36) = 66304;
  *(_DWORD *)(v1015 + 44) = 0;
  *(_QWORD *)(v1015 + 48) = 0x8000800000000700;
  *(_WORD *)(v1015 + 56) = 0;
  *(_BYTE *)(v1015 + 58) = 3;
  *(_QWORD *)(v1015 + 67) = 0;
  *(_QWORD *)(v1015 + 59) = 0;
  *(_BYTE *)(v1015 + 75) = 0;
  *(_QWORD *)(v1015 + 132) = 0;
  *(_QWORD *)(v1015 + 124) = 0;
  *(_WORD *)(v1015 + 188) = 257;
  *(_QWORD *)(v1015 + 192) = 0;
  *(_QWORD *)(v1015 + 200) = 0;
  *(_BYTE *)(v1015 + 208) = 0;
  v1016 = *(_QWORD *)(v882 + 200);
  *(_QWORD *)(v882 + 200) = v1015;
  if (v1016)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1016 + 8))(v1016);
    v1015 = *(_QWORD *)(v882 + 200);
  }
  *(_BYTE *)(v1015 + 58) = 3;
  *(_BYTE *)(v1015 + 56) = 0;
  v1017 = operator new();
  *(_QWORD *)v1017 = &off_1E42B59B0;
  *(_QWORD *)(v1017 + 16) = "";
  *(int8x16_t *)(v1017 + 24) = vextq_s8(*(int8x16_t *)(v882 + 192), *(int8x16_t *)(v882 + 192), 8uLL);
  *(_DWORD *)(v1017 + 40) = 0;
  *(_QWORD *)(v1017 + 48) = 0;
  *(_DWORD *)(v1017 + 56) = 1065353216;
  *(_OWORD *)(v1017 + 64) = 0u;
  *(_OWORD *)(v1017 + 80) = 0u;
  *(int64x2_t *)(v1017 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v1017 + 112) = 0;
  v1018 = *(_QWORD *)(v882 + 208);
  *(_QWORD *)(v882 + 208) = v1017;
  if (v1018)
    (*(void (**)(uint64_t))(*(_QWORD *)v1018 + 8))(v1018);

  v1019 = *(md::SkyRenderResources **)(v864 + 48);
  *(_QWORD *)(v864 + 48) = v882;
  if (v1019)
  {
    md::SkyRenderResources::~SkyRenderResources(v1019);
    MEMORY[0x1A1AF4E00]();
  }

  v1020 = v1731[3];
  v1731[3] = v864;
  if (v1020)
    (*(void (**)(uint64_t))(*(_QWORD *)v1020 + 8))(v1020);
  v1021 = operator new();
  v1022 = v884;
  -[VKSharedResources standardCommandBufferSelector](v1022, "standardCommandBufferSelector");
  v1023 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 6);
  v1024 = operator new(2uLL);
  *v1024 = v1023;
  *(_QWORD *)v1021 = off_1E428C468;
  *(_QWORD *)(v1021 + 8) = 0;
  *(_QWORD *)(v1021 + 16) = 0;
  *(_QWORD *)(v1021 + 24) = 0;
  v1025 = operator new(2uLL);
  *(_QWORD *)(v1021 + 8) = v1025;
  *v1025++ = *v1024;
  *(_QWORD *)(v1021 + 16) = v1025;
  *(_QWORD *)(v1021 + 24) = v1025;
  *(_WORD *)(v1021 + 32) = 0;
  *(_BYTE *)(v1021 + 34) = 1;
  *(_QWORD *)v1021 = off_1E429E2A8;
  *(_QWORD *)(v1021 + 40) = v1732;
  operator delete(v1024);
  v1026 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1027 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1028 = __ldaxr(v1027);
    while (__stlxr(v1028 - 1, v1027));
    if (!v1028)
    {
      ((void (*)(std::__shared_weak_count *))v1026->__on_zero_shared)(v1026);
      std::__shared_weak_count::__release_weak(v1026);
    }
  }
  *(_QWORD *)v1021 = &off_1E4297268;
  *(_QWORD *)(v1021 + 48) = 0;
  -[VKSharedResources standardCommandBufferSelector](v1022, "standardCommandBufferSelector");
  v1029 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1021 + 56) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 6);
  if (v1029)
  {
    v1030 = (unint64_t *)&v1029->__shared_owners_;
    do
      v1031 = __ldaxr(v1030);
    while (__stlxr(v1031 - 1, v1030));
    if (!v1031)
    {
      ((void (*)(std::__shared_weak_count *))v1029->__on_zero_shared)(v1029);
      std::__shared_weak_count::__release_weak(v1029);
    }
  }
  v1032 = operator new();
  v1033 = *((id *)v1732 + 13);
  v1034 = (_OWORD *)objc_msgSend(v1033, "format");
  v1035 = v1022;
  *(_BYTE *)(v1032 + 23) = 13;
  strcpy((char *)v1032, "sky/stars.bin");
  *(_OWORD *)(v1032 + 24) = 0u;
  *(_OWORD *)(v1032 + 40) = 0u;
  *(_OWORD *)(v1032 + 56) = 0u;
  *(_OWORD *)(v1032 + 72) = 0u;
  *(_OWORD *)(v1032 + 88) = 0u;
  *(_OWORD *)(v1032 + 104) = 0u;
  *(_OWORD *)(v1032 + 120) = 0u;
  *(_OWORD *)(v1032 + 136) = 0u;
  *(_OWORD *)(v1032 + 152) = 0u;
  *(_OWORD *)(v1032 + 168) = 0u;
  *(_OWORD *)(v1032 + 184) = 0u;
  *(_OWORD *)(v1032 + 200) = 0u;
  *(_OWORD *)(v1032 + 216) = 0u;
  v1036 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1035, "shaderLibrary") + 80);
  v1037 = *(_QWORD *)(v1036 + 872);
  v1038 = *(std::__shared_weak_count **)(v1036 + 880);
  if (v1038)
  {
    v1039 = (unint64_t *)&v1038->__shared_owners_;
    do
      v1040 = __ldxr(v1039);
    while (__stxr(v1040 + 1, v1039));
  }
  v1041 = (char *)operator new(0x198uLL);
  *((_QWORD *)v1041 + 1) = 0;
  *((_QWORD *)v1041 + 2) = 0;
  *(_QWORD *)v1041 = &off_1E42DE688;
  *(_OWORD *)v1744 = *v1034;
  *(_OWORD *)&v1744[16] = v1034[1];
  if ((v1042 & 1) == 0)
  {
    if ((_DWORD)v1603)
    {
      if ((v1604 & 1) == 0)
      {
        if ((_DWORD)v1603)
        {
          if ((v1679 & 1) == 0
          {
            if ((v1690 & 1) == 0
            {
              ggl::MeshTyped<ggl::GlobeStars::StarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::GlobeStars::starVertexReflection;
            }
            ggl::MeshTyped<ggl::GlobeStars::StarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlobeStars::StarVertex>::attributesReflection(void)::r;
            unk_1ECE44D60 = 1;
          }
          ggl::GlobeStars::StarsPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GlobeStars::StarVertex>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57AA98 = &ggl::GlobeStars::pipelineDataStarsPipelineDeviceStructs(void)::ref;
          qword_1EE57AAA0 = 0;
          if ((v1680 & 1) == 0
          {
            ggl::GlobeStars::pipelineDataStarsPipelineConstantStructs(void)::ref = (uint64_t)ggl::GlobeStars::View::reflection(void)::reflection;
          }
          qword_1EE57AAA8 = (uint64_t)&ggl::GlobeStars::pipelineDataStarsPipelineConstantStructs(void)::ref;
          unk_1EE57AAB0 = xmmword_19FFB3350;
        }
      }
      ggl::GlobeStars::StarsPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlobeStars::StarsPipelineSetup::typedReflection(void)::ref;
      ggl::GlobeStarsShader::typedReflection(v1603);
      qword_1ECE2F5F0 = (uint64_t)&ggl::GlobeStarsShader::typedReflection(void)::ref;
      if ((v1605 & 1) == 0
      {
        ggl::GlobeStars::pipelineStateStarsPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57AB10 = 0;
        qword_1EE57AB18 = (uint64_t)"";
        dword_1EE57AB20 = 0;
        qword_1EE57AB28 = (uint64_t)&ggl::GlobeStars::pipelineStateStarsPipelineAttributeBinding_0(void)::attr;
        unk_1EE57AB30 = 1;
      }
      qword_1ECE2F5F8 = (uint64_t)&ggl::GlobeStars::pipelineStateStarsPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F600 = 1;
      qword_1ECE2F608 = 0;
      unk_1ECE2F610 = 0;
      qword_1ECE2F618 = (uint64_t)&ggl::GlobeStars::pipelineStateStarsPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F620 = 0;
      if ((v1606 & 1) == 0
      {
        ggl::GlobeStars::pipelineStateStarsPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57AAE0 = 0;
        qword_1EE57AAE8 = (uint64_t)"view";
        dword_1EE57AAF0 = 3;
        qword_1EE57AAF8 = (uint64_t)&ggl::GlobeStars::pipelineStateStarsPipelineConstantViewBinding(void)::reflection;
        unk_1EE57AB00 = 4;
      }
      qword_1ECE2F628 = (uint64_t)&ggl::GlobeStars::pipelineStateStarsPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F630 = 1;
    }
  }
  if (v1038)
  {
    v1043 = (unint64_t *)&v1038->__shared_owners_;
    do
      v1044 = __ldxr(v1043);
    while (__stxr(v1044 + 1, v1043));
    *((_DWORD *)v1041 + 14) = 0;
    *((_QWORD *)v1041 + 5) = 0;
    *((_QWORD *)v1041 + 6) = 0;
    *((_QWORD *)v1041 + 3) = &off_1E42B6760;
    *((_QWORD *)v1041 + 4) = 0;
    *((_QWORD *)v1041 + 8) = &ggl::GlobeStars::StarsPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v1041 + 9) = v1037;
    *((_QWORD *)v1041 + 10) = v1038;
    do
      v1045 = __ldxr(v1043);
    while (__stxr(v1045 + 1, v1043));
  }
  else
  {
    *((_DWORD *)v1041 + 14) = 0;
    *((_QWORD *)v1041 + 5) = 0;
    *((_QWORD *)v1041 + 6) = 0;
    *((_QWORD *)v1041 + 3) = &off_1E42B6760;
    *((_QWORD *)v1041 + 4) = 0;
    *((_QWORD *)v1041 + 8) = &ggl::GlobeStars::StarsPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v1041 + 9) = v1037;
    *((_QWORD *)v1041 + 10) = 0;
  }
  v1041[136] = 0;
  *(_OWORD *)(v1041 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v1041 + 156) = 0;
  *(_QWORD *)(v1041 + 172) = 0;
  *(_QWORD *)(v1041 + 164) = 0;
  v1041[184] = 0;
  *(_OWORD *)(v1041 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v1041 + 204) = 0;
  *(_QWORD *)(v1041 + 220) = 0;
  *(_QWORD *)(v1041 + 212) = 0;
  v1041[232] = 0;
  *(_OWORD *)(v1041 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v1041 + 252) = 0;
  *(_QWORD *)(v1041 + 268) = 0;
  *(_QWORD *)(v1041 + 260) = 0;
  v1046 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v1041 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v1041 + 296) = v1046;
  v1041[312] = 0;
  *((_QWORD *)v1041 + 48) = 0;
  *((_OWORD *)v1041 + 22) = 0u;
  *((_OWORD *)v1041 + 23) = 0u;
  *((_OWORD *)v1041 + 20) = 0u;
  *((_OWORD *)v1041 + 21) = 0u;
  *((_QWORD *)v1041 + 49) = 0x100000001;
  v1041[400] = 0;
  v1041[88] = 1;
  *(_WORD *)(v1041 + 89) = v1754;
  v1041[91] = BYTE2(v1754);
  *(_OWORD *)(v1041 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v1041 + 27) = 7;
  *((_QWORD *)v1041 + 14) = 0;
  *((_QWORD *)v1041 + 15) = 0;
  *((_DWORD *)v1041 + 32) = 0;
  v1041[132] = 15;
  if (v1038)
  {
    v1047 = (unint64_t *)&v1038->__shared_owners_;
    do
      v1048 = __ldaxr(v1047);
    while (__stlxr(v1048 - 1, v1047));
    if (!v1048)
    {
      ((void (*)(std::__shared_weak_count *))v1038->__on_zero_shared)(v1038);
      std::__shared_weak_count::__release_weak(v1038);
    }
  }
  *((_QWORD *)v1041 + 3) = &off_1E42B58D8;
  v1049 = *(std::__shared_weak_count **)(v1032 + 80);
  *(_QWORD *)(v1032 + 72) = v1041 + 24;
  *(_QWORD *)(v1032 + 80) = v1041;
  if (v1049)
  {
    v1050 = (unint64_t *)&v1049->__shared_owners_;
    do
      v1051 = __ldaxr(v1050);
    while (__stlxr(v1051 - 1, v1050));
    if (!v1051)
    {
      ((void (*)(std::__shared_weak_count *))v1049->__on_zero_shared)(v1049);
      std::__shared_weak_count::__release_weak(v1049);
    }
  }
  if (v1038)
  {
    v1052 = (unint64_t *)&v1038->__shared_owners_;
    do
      v1053 = __ldaxr(v1052);
    while (__stlxr(v1053 - 1, v1052));
    if (!v1053)
    {
      ((void (*)(std::__shared_weak_count *))v1038->__on_zero_shared)(v1038);
      std::__shared_weak_count::__release_weak(v1038);
    }
  }
  v1054 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1035, "shaderLibrary") + 80);
  v1055 = *(_QWORD *)(v1054 + 856);
  *(_QWORD *)&v1752 = *(_QWORD *)(v1054 + 848);
  *((_QWORD *)&v1752 + 1) = v1055;
  if (v1055)
  {
    v1056 = (unint64_t *)(v1055 + 8);
    do
      v1057 = __ldxr(v1056);
    while (__stxr(v1057 + 1, v1056));
  }
  *(_QWORD *)&v1744[28] = 0;
  *(_QWORD *)&v1744[20] = 0;
  *(_QWORD *)v1745 = 0;
  v1744[0] = 0;
  *(_OWORD *)&v1744[4] = xmmword_19FFB3060;
  v1745[8] = 15;
  v1058 = operator new(0x198uLL);
  v1058[1] = 0;
  v1058[2] = 0;
  *v1058 = &off_1E42DF680;
  v1754 = *v1034;
  v1755 = v1034[1];
  v1059 = ggl::GlobeAtmosphere::BasePipelineState::BasePipelineState((uint64_t)(v1058 + 3), &v1752, (uint64_t)v1744, &v1754, 1);
  v1060 = *(std::__shared_weak_count **)(v1032 + 184);
  *(_QWORD *)(v1032 + 176) = v1059;
  *(_QWORD *)(v1032 + 184) = v1058;
  if (v1060)
  {
    v1061 = (unint64_t *)&v1060->__shared_owners_;
    do
      v1062 = __ldaxr(v1061);
    while (__stlxr(v1062 - 1, v1061));
    if (!v1062)
    {
      ((void (*)(std::__shared_weak_count *))v1060->__on_zero_shared)(v1060);
      std::__shared_weak_count::__release_weak(v1060);
    }
  }
  v1063 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v1064 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v1065 = __ldaxr(v1064);
    while (__stlxr(v1065 - 1, v1064));
    if (!v1065)
    {
      ((void (*)(std::__shared_weak_count *))v1063->__on_zero_shared)(v1063);
      std::__shared_weak_count::__release_weak(v1063);
    }
  }
  v1066 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1035, "shaderLibrary") + 80);
  v1067 = *(_QWORD *)(v1066 + 856);
  *(_QWORD *)&v1752 = *(_QWORD *)(v1066 + 848);
  *((_QWORD *)&v1752 + 1) = v1067;
  if (v1067)
  {
    v1068 = (unint64_t *)(v1067 + 8);
    do
      v1069 = __ldxr(v1068);
    while (__stxr(v1069 + 1, v1068));
  }
  *(_QWORD *)&v1744[28] = 0;
  *(_QWORD *)&v1744[20] = 0;
  *(_QWORD *)v1745 = 0;
  v1744[0] = 0;
  *(_OWORD *)&v1744[4] = xmmword_19FFB3060;
  v1745[8] = 15;
  v1070 = operator new(0x198uLL);
  v1070[1] = 0;
  v1070[2] = 0;
  *v1070 = &off_1E42DF680;
  v1754 = *v1034;
  v1755 = v1034[1];
  v1071 = ggl::GlobeAtmosphere::BasePipelineState::BasePipelineState((uint64_t)(v1070 + 3), &v1752, (uint64_t)v1744, &v1754, 0);
  v1072 = *(std::__shared_weak_count **)(v1032 + 200);
  *(_QWORD *)(v1032 + 192) = v1071;
  *(_QWORD *)(v1032 + 200) = v1070;
  if (v1072)
  {
    v1073 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1074 = __ldaxr(v1073);
    while (__stlxr(v1074 - 1, v1073));
    if (!v1074)
    {
      ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
      std::__shared_weak_count::__release_weak(v1072);
    }
  }
  v1075 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v1076 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v1077 = __ldaxr(v1076);
    while (__stlxr(v1077 - 1, v1076));
    if (!v1077)
    {
      ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
      std::__shared_weak_count::__release_weak(v1075);
    }
  }

  v1078 = *(md::GlobeSkyRenderResources **)(v1021 + 48);
  *(_QWORD *)(v1021 + 48) = v1032;
  if (v1078)
  {
    md::GlobeSkyRenderResources::~GlobeSkyRenderResources(v1078);
    MEMORY[0x1A1AF4E00]();
  }

  v1079 = v1731[1];
  v1731[1] = v1021;
  if (v1079)
    (*(void (**)(uint64_t))(*(_QWORD *)v1079 + 8))(v1079);
  v1080 = operator new();
  v1081 = *(_WORD **)(v1722 + 8);
  v1082 = v1081[109];
  v1083 = v1081[111];
  v1084 = v1081[114];
  v1085 = v1081[121];
  v1086 = v1081[118];
  v1087 = v1081[110];
  v1088 = operator new(0xCuLL);
  *v1088 = v1082;
  v1088[1] = v1083;
  v1088[2] = v1084;
  v1088[3] = v1085;
  v1088[4] = v1086;
  v1088[5] = v1087;
  *(_QWORD *)v1080 = off_1E428C468;
  *(_QWORD *)(v1080 + 8) = 0;
  *(_QWORD *)(v1080 + 16) = 0;
  *(_QWORD *)(v1080 + 24) = 0;
  v1089 = operator new(0xCuLL);
  *(_QWORD *)v1089 = *(_QWORD *)v1088;
  v1089[2] = *((_DWORD *)v1088 + 2);
  *(_QWORD *)(v1080 + 16) = v1089 + 3;
  *(_QWORD *)(v1080 + 24) = v1089 + 3;
  *(_WORD *)(v1080 + 32) = 0;
  *(_BYTE *)(v1080 + 34) = 40;
  *(_QWORD *)v1080 = off_1E429E2A8;
  *(_QWORD *)(v1080 + 8) = v1089;
  *(_QWORD *)(v1080 + 40) = v1732;
  operator delete(v1088);
  *(_QWORD *)v1080 = &off_1E4291BA8;
  *(_QWORD *)(v1080 + 48) = 0;
  *(_QWORD *)(v1080 + 56) = v1080 + 56;
  *(_QWORD *)(v1080 + 64) = v1080 + 56;
  *(_QWORD *)(v1080 + 72) = 0;
  {
    v1607 = operator new();
    *(_QWORD *)(v1607 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1607 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1607 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1607 = &off_1E42B5668;
    *(_QWORD *)(v1607 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1607 + 72) = 0u;
    *(_OWORD *)(v1607 + 88) = 0u;
    *(_OWORD *)(v1607 + 104) = 0u;
    *(_OWORD *)(v1607 + 120) = 0u;
    *(_OWORD *)(v1607 + 136) = 0u;
    *(_OWORD *)(v1607 + 152) = 0u;
    *(_OWORD *)(v1607 + 168) = 0u;
    *(_OWORD *)(v1607 + 184) = 0u;
    *(_OWORD *)(v1607 + 200) = 0u;
    *(_OWORD *)(v1607 + 216) = 0u;
    *(_OWORD *)(v1607 + 232) = 0u;
    *(_QWORD *)(v1607 + 248) = 0;
    *(_OWORD *)(v1607 + 56) = 0u;
    v1608 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1607 + 56), 0);
    if ((_DWORD)v1608)
      geo::read_write_lock::logFailure(v1608, (uint64_t)"initialization", v1609);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v1607 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v1607 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1607;
  }
  v1091 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1080 + 88) = 0;
  *(_QWORD *)(v1080 + 96) = 0;
  *(_QWORD *)(v1080 + 80) = v1091;
  {
    v1611 = operator new();
    *(_QWORD *)(v1611 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1611 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1611 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1611 = &off_1E42B5668;
    *(_QWORD *)(v1611 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1611 + 72) = 0u;
    *(_OWORD *)(v1611 + 88) = 0u;
    *(_OWORD *)(v1611 + 104) = 0u;
    *(_OWORD *)(v1611 + 120) = 0u;
    *(_OWORD *)(v1611 + 136) = 0u;
    *(_OWORD *)(v1611 + 152) = 0u;
    *(_OWORD *)(v1611 + 168) = 0u;
    *(_OWORD *)(v1611 + 184) = 0u;
    *(_OWORD *)(v1611 + 200) = 0u;
    *(_OWORD *)(v1611 + 216) = 0u;
    *(_OWORD *)(v1611 + 232) = 0u;
    *(_QWORD *)(v1611 + 248) = 0;
    *(_OWORD *)(v1611 + 56) = 0u;
    v1612 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1611 + 56), 0);
    if ((_DWORD)v1612)
      geo::read_write_lock::logFailure(v1612, (uint64_t)"initialization", v1613);
    v1614 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1611 + 48) = v1614;
    malloc_set_zone_name(v1614, "VectorKitLabels");
    *(_QWORD *)(v1611 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1611;
  }
  *(_QWORD *)(v1080 + 104) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1080 + 112) = 0;
  {
    v1615 = operator new();
    *(_QWORD *)(v1615 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1615 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1615 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1615 = &off_1E42B5668;
    *(_QWORD *)(v1615 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1615 + 72) = 0u;
    *(_OWORD *)(v1615 + 88) = 0u;
    *(_OWORD *)(v1615 + 104) = 0u;
    *(_OWORD *)(v1615 + 120) = 0u;
    *(_OWORD *)(v1615 + 136) = 0u;
    *(_OWORD *)(v1615 + 152) = 0u;
    *(_OWORD *)(v1615 + 168) = 0u;
    *(_OWORD *)(v1615 + 184) = 0u;
    *(_OWORD *)(v1615 + 200) = 0u;
    *(_OWORD *)(v1615 + 216) = 0u;
    *(_OWORD *)(v1615 + 232) = 0u;
    *(_QWORD *)(v1615 + 248) = 0;
    *(_OWORD *)(v1615 + 56) = 0u;
    v1616 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1615 + 56), 0);
    if ((_DWORD)v1616)
      geo::read_write_lock::logFailure(v1616, (uint64_t)"initialization", v1617);
    v1618 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1615 + 48) = v1618;
    malloc_set_zone_name(v1618, "VectorKitLabels");
    *(_QWORD *)(v1615 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1615;
  }
  v1093 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1080 + 168) = 0;
  *(_QWORD *)(v1080 + 120) = v1093;
  *(_QWORD *)(v1080 + 128) = 0;
  *(_DWORD *)(v1080 + 136) = 1065353216;
  *(_DWORD *)(v1080 + 144) = 20;
  *(_QWORD *)(v1080 + 156) = 0;
  *(_QWORD *)(v1080 + 148) = 0;
  *(_DWORD *)(v1080 + 164) = 100;
  *(_QWORD *)(v1080 + 176) = 0;
  {
    v1619 = operator new();
    *(_QWORD *)(v1619 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1619 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1619 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1619 = &off_1E42B5668;
    *(_QWORD *)(v1619 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1619 + 72) = 0u;
    *(_OWORD *)(v1619 + 88) = 0u;
    *(_OWORD *)(v1619 + 104) = 0u;
    *(_OWORD *)(v1619 + 120) = 0u;
    *(_OWORD *)(v1619 + 136) = 0u;
    *(_OWORD *)(v1619 + 152) = 0u;
    *(_OWORD *)(v1619 + 168) = 0u;
    *(_OWORD *)(v1619 + 184) = 0u;
    *(_OWORD *)(v1619 + 200) = 0u;
    *(_OWORD *)(v1619 + 216) = 0u;
    *(_OWORD *)(v1619 + 232) = 0u;
    *(_QWORD *)(v1619 + 248) = 0;
    *(_OWORD *)(v1619 + 56) = 0u;
    v1620 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1619 + 56), 0);
    if ((_DWORD)v1620)
      geo::read_write_lock::logFailure(v1620, (uint64_t)"initialization", v1621);
    v1622 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1619 + 48) = v1622;
    malloc_set_zone_name(v1622, "VectorKitLabels");
    *(_QWORD *)(v1619 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1619;
  }
  *(_QWORD *)(v1080 + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1080 + 192) = 0;
  {
    v1623 = operator new();
    *(_QWORD *)(v1623 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v1623 + 24) = "VectorKitLabels";
    *(_OWORD *)(v1623 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v1623 = &off_1E42B5668;
    *(_QWORD *)(v1623 + 8) = "VectorKitLabels";
    *(_OWORD *)(v1623 + 72) = 0u;
    *(_OWORD *)(v1623 + 88) = 0u;
    *(_OWORD *)(v1623 + 104) = 0u;
    *(_OWORD *)(v1623 + 120) = 0u;
    *(_OWORD *)(v1623 + 136) = 0u;
    *(_OWORD *)(v1623 + 152) = 0u;
    *(_OWORD *)(v1623 + 168) = 0u;
    *(_OWORD *)(v1623 + 184) = 0u;
    *(_OWORD *)(v1623 + 200) = 0u;
    *(_OWORD *)(v1623 + 216) = 0u;
    *(_OWORD *)(v1623 + 232) = 0u;
    *(_QWORD *)(v1623 + 248) = 0;
    *(_OWORD *)(v1623 + 56) = 0u;
    v1624 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1623 + 56), 0);
    if ((_DWORD)v1624)
      geo::read_write_lock::logFailure(v1624, (uint64_t)"initialization", v1625);
    v1626 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1623 + 48) = v1626;
    malloc_set_zone_name(v1626, "VectorKitLabels");
    *(_QWORD *)(v1623 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v1623;
  }
  *(_QWORD *)(v1080 + 200) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1080 + 208) = 0;
  *(_DWORD *)(v1080 + 216) = 1065353216;
  *(_OWORD *)(v1080 + 224) = 0u;
  *(_OWORD *)(v1080 + 240) = 0u;
  *(_DWORD *)(v1080 + 256) = 1065353216;
  *(_QWORD *)(v1080 + 264) = 0;
  *(_WORD *)(v1080 + 272) = 256;
  *(_DWORD *)(v1080 + 274) = 0;
  *(_QWORD *)(v1080 + 328) = 0;
  *(_OWORD *)(v1080 + 280) = 0u;
  *(_OWORD *)(v1080 + 296) = 0u;
  *(_OWORD *)(v1080 + 312) = 0u;
  *(_DWORD *)(v1080 + 336) = 1065353216;
  *(_DWORD *)(v1080 + 144) = 50;
  md::LabelRenderLayer::updateMapDataUsed((md::LabelRenderLayer *)v1080);
  v1095 = v1731[40];
  v1731[40] = v1080;
  if (v1095)
    (*(void (**)(uint64_t))(*(_QWORD *)v1095 + 8))(v1095);
  v1096 = v1731[26];
  v1731[26] = v1708;
  if (v1096)
    (*(void (**)(uint64_t))(*(_QWORD *)v1096 + 8))(v1096);
  v1097 = operator new();
  md::TransitRenderLayer::TransitRenderLayer(v1097, (uint64_t)v1732, v1035, 0, v1698, *(_QWORD *)(v1726 + 112));
  v1098 = v1731[19];
  v1731[19] = v1097;
  if (v1098)
    (*(void (**)(uint64_t))(*(_QWORD *)v1098 + 8))(v1098);
  v1099 = operator new();
  md::TransitRenderLayer::TransitRenderLayer(v1099, (uint64_t)v1732, v1035, 1, v1698, *(_QWORD *)(v1726 + 112));
  v1100 = v1731[20];
  v1731[20] = v1099;
  if (v1100)
    (*(void (**)(uint64_t))(*(_QWORD *)v1100 + 8))(v1100);
  v1101 = operator new();
  md::COverlayRenderLayer::COverlayRenderLayer(v1101, (uint64_t)v1732, v1035, 0, *(_QWORD *)(v1726 + 112));
  v1102 = v1731[41];
  v1731[41] = v1101;
  if (v1102)
    (*(void (**)(uint64_t))(*(_QWORD *)v1102 + 8))(v1102);
  v1103 = operator new();
  md::COverlayRenderLayer::COverlayRenderLayer(v1103, (uint64_t)v1732, v1035, 1, *(_QWORD *)(v1726 + 112));
  v1104 = v1731[42];
  v1731[42] = v1103;
  if (v1104)
    (*(void (**)(uint64_t))(*(_QWORD *)v1104 + 8))(v1104);
  v1105 = v1731[18];
  v1731[18] = v1710;
  if (v1105)
    (*(void (**)(uint64_t))(*(_QWORD *)v1105 + 8))(v1105);
  v1106 = operator new();
  v1107 = *(_QWORD *)(v1719 + 120);
  v1108 = v1035;
  v1109 = *((id *)v1732 + 13);
  v1110 = (const RenderTargetFormat *)objc_msgSend(v1109, "format");
  -[VKSharedResources standardCommandBufferSelector](v1108, "standardCommandBufferSelector");
  v1111 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 212);
  v1112 = operator new(2uLL);
  *v1112 = v1111;
  v1113 = v1108;
  v1114 = operator new(2uLL);
  *v1114 = 3;
  v1115 = v1114 + 1;
  *(_QWORD *)&v1116 = v1114;
  *((_QWORD *)&v1116 + 1) = v1114 + 1;
  v1714 = v1116;
  *(_QWORD *)v1106 = off_1E428C468;
  *(_QWORD *)(v1106 + 8) = 0;
  *(_QWORD *)(v1106 + 16) = 0;
  *(_QWORD *)(v1106 + 24) = 0;
  v1117 = operator new(2uLL);
  *(_QWORD *)(v1106 + 8) = v1117;
  *v1117++ = *v1112;
  *(_QWORD *)(v1106 + 16) = v1117;
  *(_QWORD *)(v1106 + 24) = v1117;
  *(_BYTE *)(v1106 + 34) = 43;
  *(_DWORD *)(v1106 + 120) = 1065353216;
  *(_QWORD *)(v1106 + 136) = 0;
  *(_QWORD *)(v1106 + 160) = 0;
  *(_QWORD *)(v1106 + 128) = v1106 + 136;
  *(_QWORD *)(v1106 + 144) = 0;
  *(_QWORD *)(v1106 + 152) = v1106 + 160;
  *(_QWORD *)(v1106 + 184) = 0;
  *(_QWORD *)(v1106 + 168) = 0;
  *(_QWORD *)(v1106 + 176) = v1106 + 184;
  *(_QWORD *)(v1106 + 232) = 0;
  *(_QWORD *)(v1106 + 224) = v1106 + 232;
  *(_QWORD *)(v1106 + 208) = 0;
  *(_QWORD *)(v1106 + 192) = 0;
  *(_QWORD *)(v1106 + 200) = v1106 + 208;
  *(_WORD *)(v1106 + 32) = 0;
  *(_QWORD *)(v1106 + 40) = v1732;
  *(_WORD *)(v1106 + 48) = 0;
  *(_DWORD *)(v1106 + 52) = 0;
  *(_OWORD *)(v1106 + 80) = 0u;
  *(_OWORD *)(v1106 + 96) = 0u;
  *(_QWORD *)(v1106 + 112) = 0;
  *(_QWORD *)(v1106 + 216) = 0;
  *(_QWORD *)(v1106 + 240) = 0;
  *(_OWORD *)(v1106 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(v1106 + 312) = 0;
  *(_OWORD *)(v1106 + 264) = 0u;
  *(_OWORD *)(v1106 + 280) = 0u;
  *(_OWORD *)(v1106 + 296) = 0u;
  *(_OWORD *)(v1106 + 320) = v1714;
  *(_QWORD *)(v1106 + 336) = v1115;
  *(_DWORD *)(v1106 + 344) = 1;
  *(_QWORD *)v1106 = off_1E42A9CB0;
  *(_QWORD *)(v1106 + 352) = 0;
  v1118 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v1118, v1113, v1110);
  *(_QWORD *)(v1106 + 352) = v1118;

  operator delete(v1112);
  v1119 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1120 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1121 = __ldaxr(v1120);
    while (__stlxr(v1121 - 1, v1120));
    if (!v1121)
    {
      ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
      std::__shared_weak_count::__release_weak(v1119);
    }
  }

  *(_QWORD *)v1106 = &off_1E42A0A48;
  *(_QWORD *)(v1106 + 368) = 0;
  *(_QWORD *)(v1106 + 376) = v1107;
  -[VKSharedResources standardCommandBufferSelector](v1113, "standardCommandBufferSelector");
  v1122 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1106 + 384) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 212);
  if (v1122)
  {
    v1123 = (unint64_t *)&v1122->__shared_owners_;
    do
      v1124 = __ldaxr(v1123);
    while (__stlxr(v1124 - 1, v1123));
    if (!v1124)
    {
      ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
      std::__shared_weak_count::__release_weak(v1122);
    }
  }

  v1125 = v1731[43];
  v1731[43] = v1106;
  if (v1125)
    (*(void (**)(uint64_t))(*(_QWORD *)v1125 + 8))(v1125);
  v1126 = operator new();
  md::DebugRenderLayer::DebugRenderLayer(v1126, (uint64_t)v1732, v1113, (__int16 *)(*(_QWORD *)(v1722 + 8) + 248), 44);
  v1127 = v1731[44];
  v1731[44] = v1126;
  if (v1127)
    (*(void (**)(uint64_t))(*(_QWORD *)v1127 + 8))(v1127);
  v1128 = operator new();
  v1129 = v1113;
  -[VKSharedResources standardCommandBufferSelector](v1129, "standardCommandBufferSelector");
  v1130 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 240);
  v1131 = operator new(2uLL);
  *v1131 = v1130;
  *(_QWORD *)v1128 = off_1E428C468;
  *(_QWORD *)(v1128 + 8) = 0;
  *(_QWORD *)(v1128 + 16) = 0;
  *(_QWORD *)(v1128 + 24) = 0;
  v1132 = operator new(2uLL);
  *(_QWORD *)(v1128 + 8) = v1132;
  *v1132++ = *v1131;
  *(_QWORD *)(v1128 + 16) = v1132;
  *(_QWORD *)(v1128 + 24) = v1132;
  *(_WORD *)(v1128 + 32) = 0;
  *(_BYTE *)(v1128 + 34) = 31;
  *(_QWORD *)v1128 = off_1E429E2A8;
  *(_QWORD *)(v1128 + 40) = v1732;
  operator delete(v1131);
  v1133 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1134 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1135 = __ldaxr(v1134);
    while (__stlxr(v1135 - 1, v1134));
    if (!v1135)
    {
      ((void (*)(std::__shared_weak_count *))v1133->__on_zero_shared)(v1133);
      std::__shared_weak_count::__release_weak(v1133);
    }
  }
  *(_QWORD *)v1128 = &off_1E4290A30;
  *(_QWORD *)(v1128 + 48) = 0;
  -[VKSharedResources standardCommandBufferSelector](v1129, "standardCommandBufferSelector");
  v1136 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1128 + 56) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 240);
  if (v1136)
  {
    v1137 = (unint64_t *)&v1136->__shared_owners_;
    do
      v1138 = __ldaxr(v1137);
    while (__stlxr(v1138 - 1, v1137));
    if (!v1138)
    {
      ((void (*)(std::__shared_weak_count *))v1136->__on_zero_shared)(v1136);
      std::__shared_weak_count::__release_weak(v1136);
    }
  }
  v1139 = (md::PuckRenderResources *)operator new();
  v1140 = *((id *)v1732 + 13);
  md::PuckRenderResources::PuckRenderResources(v1139, v1129, (const RenderTargetFormat *)objc_msgSend(v1140, "format"));
  v1141 = *(md::PuckRenderResources **)(v1128 + 48);
  *(_QWORD *)(v1128 + 48) = v1139;
  if (v1141)
  {
    md::PuckRenderResources::~PuckRenderResources(v1141);
    MEMORY[0x1A1AF4E00]();
  }

  v1142 = v1731[31];
  v1731[31] = v1128;
  if (v1142)
    (*(void (**)(uint64_t))(*(_QWORD *)v1142 + 8))(v1142);
  v1143 = operator new();
  v1144 = v1129;
  v1145 = *((id *)v1732 + 13);
  v1146 = (const RenderTargetFormat *)objc_msgSend(v1145, "format");
  -[VKSharedResources standardCommandBufferSelector](v1144, "standardCommandBufferSelector");
  v1147 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 64);
  -[VKSharedResources standardCommandBufferSelector](v1144, "standardCommandBufferSelector");
  v1148 = *(unsigned __int16 *)(*(_QWORD *)(v1754 + 8) + 122);
  -[VKSharedResources standardCommandBufferSelector](v1144, "standardCommandBufferSelector");
  v1149 = *(unsigned __int16 *)(*(_QWORD *)(v1752 + 8) + 164);
  -[VKSharedResources standardCommandBufferSelector](v1144, "standardCommandBufferSelector");
  v1150 = *((unsigned __int16 *)v1749[1] + 98);
  v1151 = operator new(8uLL);
  *v1151 = (v1149 << 32) | (v1150 << 48) | (v1148 << 16) | v1147;
  v1152 = v1144;
  v1153 = operator new(2uLL);
  *v1153 = 6;
  v1154 = v1153 + 1;
  *(_QWORD *)&v1155 = v1153;
  *((_QWORD *)&v1155 + 1) = v1153 + 1;
  v1715 = v1155;
  *(_QWORD *)v1143 = off_1E428C468;
  *(_QWORD *)(v1143 + 8) = 0;
  *(_QWORD *)(v1143 + 16) = 0;
  *(_QWORD *)(v1143 + 24) = 0;
  v1156 = operator new(8uLL);
  *(_QWORD *)(v1143 + 8) = v1156;
  *v1156++ = *v1151;
  *(_QWORD *)(v1143 + 16) = v1156;
  *(_QWORD *)(v1143 + 24) = v1156;
  *(_WORD *)(v1143 + 32) = 0;
  *(_BYTE *)(v1143 + 34) = 27;
  *(_QWORD *)(v1143 + 40) = v1732;
  *(_WORD *)(v1143 + 48) = 0;
  *(_DWORD *)(v1143 + 120) = 1065353216;
  *(_QWORD *)(v1143 + 136) = 0;
  *(_QWORD *)(v1143 + 128) = v1143 + 136;
  *(_QWORD *)(v1143 + 160) = 0;
  *(_QWORD *)(v1143 + 144) = 0;
  *(_QWORD *)(v1143 + 152) = v1143 + 160;
  *(_QWORD *)(v1143 + 184) = 0;
  *(_QWORD *)(v1143 + 168) = 0;
  *(_QWORD *)(v1143 + 176) = v1143 + 184;
  *(_QWORD *)(v1143 + 208) = 0;
  *(_QWORD *)(v1143 + 192) = 0;
  *(_QWORD *)(v1143 + 200) = v1143 + 208;
  *(_QWORD *)(v1143 + 232) = 0;
  *(_QWORD *)(v1143 + 224) = v1143 + 232;
  *(_DWORD *)(v1143 + 52) = 1;
  *(_OWORD *)(v1143 + 80) = 0u;
  *(_OWORD *)(v1143 + 96) = 0u;
  *(_QWORD *)(v1143 + 112) = 0;
  *(_QWORD *)(v1143 + 216) = 0;
  *(_QWORD *)(v1143 + 240) = 0;
  *(_OWORD *)(v1143 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(v1143 + 312) = 0;
  *(_OWORD *)(v1143 + 264) = 0u;
  *(_OWORD *)(v1143 + 280) = 0u;
  *(_OWORD *)(v1143 + 296) = 0u;
  *(_OWORD *)(v1143 + 320) = v1715;
  *(_QWORD *)(v1143 + 336) = v1154;
  *(_DWORD *)(v1143 + 344) = 1;
  *(_QWORD *)v1143 = off_1E42A9AE0;
  *(_QWORD *)(v1143 + 352) = 0;
  v1157 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v1157, v1152, v1146);
  *(_QWORD *)(v1143 + 352) = v1157;

  operator delete(v1151);
  v1158 = v1750;
  if (v1750)
  {
    v1159 = &v1750->__shared_owners_;
    do
      v1160 = __ldaxr((unint64_t *)v1159);
    while (__stlxr(v1160 - 1, (unint64_t *)v1159));
    if (!v1160)
    {
      ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
      std::__shared_weak_count::__release_weak(v1158);
    }
  }
  v1161 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v1162 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v1163 = __ldaxr(v1162);
    while (__stlxr(v1163 - 1, v1162));
    if (!v1163)
    {
      ((void (*)(std::__shared_weak_count *))v1161->__on_zero_shared)(v1161);
      std::__shared_weak_count::__release_weak(v1161);
    }
  }
  v1164 = (std::__shared_weak_count *)*((_QWORD *)&v1754 + 1);
  if (*((_QWORD *)&v1754 + 1))
  {
    v1165 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v1166 = __ldaxr(v1165);
    while (__stlxr(v1166 - 1, v1165));
    if (!v1166)
    {
      ((void (*)(std::__shared_weak_count *))v1164->__on_zero_shared)(v1164);
      std::__shared_weak_count::__release_weak(v1164);
    }
  }
  v1167 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1168 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1169 = __ldaxr(v1168);
    while (__stlxr(v1169 - 1, v1168));
    if (!v1169)
    {
      ((void (*)(std::__shared_weak_count *))v1167->__on_zero_shared)(v1167);
      std::__shared_weak_count::__release_weak(v1167);
    }
  }

  *(_QWORD *)v1143 = &off_1E4292290;
  v1170 = (md::PolygonRenderResources *)operator new();
  v1171 = *((id *)v1732 + 13);
  md::PolygonRenderResources::PolygonRenderResources(v1170, v1152, (const RenderTargetFormat *)objc_msgSend(v1171, "format"));
  *(_QWORD *)(v1143 + 368) = v1170;

  v1172 = (md::CVenueRenderResources *)operator new();
  v1173 = *((id *)v1732 + 13);
  md::CVenueRenderResources::CVenueRenderResources(v1172, v1152, (const RenderTargetFormat *)objc_msgSend(v1173, "format"));
  *(_QWORD *)(v1143 + 376) = v1172;

  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1174 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 64);
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  LOWORD(v1173) = *(_WORD *)(*(_QWORD *)(v1754 + 8) + 122);
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1175 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  v1176 = *(_WORD *)(*(_QWORD *)(v1752 + 8) + 164);
  *(_WORD *)(v1143 + 424) = v1174;
  *(_WORD *)(v1143 + 392) = 0;
  *(_BYTE *)(v1143 + 394) = 0;
  *(_QWORD *)(v1143 + 408) = 0;
  *(_QWORD *)(v1143 + 416) = 0;
  *(_QWORD *)(v1143 + 400) = 0;
  *(_WORD *)(v1143 + 426) = (_WORD)v1173;
  *(_WORD *)(v1143 + 428) = v1176;
  *(_QWORD *)(v1143 + 430) = 0;
  *(_QWORD *)(v1143 + 384) = &off_1E42A8D38;
  *(_WORD *)(v1143 + 438) = 0;
  if (v1175)
  {
    v1177 = (unint64_t *)&v1175->__shared_owners_;
    do
      v1178 = __ldaxr(v1177);
    while (__stlxr(v1178 - 1, v1177));
    if (!v1178)
    {
      ((void (*)(std::__shared_weak_count *))v1175->__on_zero_shared)(v1175);
      std::__shared_weak_count::__release_weak(v1175);
    }
  }
  v1179 = (std::__shared_weak_count *)*((_QWORD *)&v1754 + 1);
  if (*((_QWORD *)&v1754 + 1))
  {
    v1180 = (unint64_t *)(*((_QWORD *)&v1754 + 1) + 8);
    do
      v1181 = __ldaxr(v1180);
    while (__stlxr(v1181 - 1, v1180));
    if (!v1181)
    {
      ((void (*)(std::__shared_weak_count *))v1179->__on_zero_shared)(v1179);
      std::__shared_weak_count::__release_weak(v1179);
    }
  }
  v1182 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1183 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1184 = __ldaxr(v1183);
    while (__stlxr(v1184 - 1, v1183));
    if (!v1184)
    {
      ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
      std::__shared_weak_count::__release_weak(v1182);
    }
  }
  *(_QWORD *)(v1143 + 456) = &off_1E42B4C90;
  *(_QWORD *)(v1143 + 464) = 0;
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1185 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1143 + 480) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 164);
  if (v1185)
  {
    v1186 = (unint64_t *)&v1185->__shared_owners_;
    do
      v1187 = __ldaxr(v1186);
    while (__stlxr(v1187 - 1, v1186));
    if (!v1187)
    {
      ((void (*)(std::__shared_weak_count *))v1185->__on_zero_shared)(v1185);
      std::__shared_weak_count::__release_weak(v1185);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1188 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1143 + 482) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 64);
  if (v1188)
  {
    v1189 = (unint64_t *)&v1188->__shared_owners_;
    do
      v1190 = __ldaxr(v1189);
    while (__stlxr(v1190 - 1, v1189));
    if (!v1190)
    {
      ((void (*)(std::__shared_weak_count *))v1188->__on_zero_shared)(v1188);
      std::__shared_weak_count::__release_weak(v1188);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1191 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1143 + 484) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 122);
  if (v1191)
  {
    v1192 = (unint64_t *)&v1191->__shared_owners_;
    do
      v1193 = __ldaxr(v1192);
    while (__stlxr(v1193 - 1, v1192));
    if (!v1193)
    {
      ((void (*)(std::__shared_weak_count *))v1191->__on_zero_shared)(v1191);
      std::__shared_weak_count::__release_weak(v1191);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1152, "standardCommandBufferSelector");
  v1194 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1143 + 486) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 196);
  if (v1194)
  {
    v1195 = (unint64_t *)&v1194->__shared_owners_;
    do
      v1196 = __ldaxr(v1195);
    while (__stlxr(v1196 - 1, v1195));
    if (!v1196)
    {
      ((void (*)(std::__shared_weak_count *))v1194->__on_zero_shared)(v1194);
      std::__shared_weak_count::__release_weak(v1194);
    }
  }

  v1197 = v1731[27];
  v1731[27] = v1143;
  if (v1197)
    (*(void (**)(uint64_t))(*(_QWORD *)v1197 + 8))(v1197);
  v1198 = (md::PostchainRenderLayer *)operator new();
  md::PostchainRenderLayer::PostchainRenderLayer(v1198, v1732, v1152);
  v1199 = v1731[52];
  v1731[52] = (uint64_t)v1198;
  if (v1199)
    (*(void (**)(uint64_t))(*(_QWORD *)v1199 + 8))(v1199);
  v1200 = operator new();
  v1201 = v1152;
  v1202 = *((id *)v1732 + 13);
  v1203 = (const RenderTargetFormat *)objc_msgSend(v1202, "format");
  -[VKSharedResources standardCommandBufferSelector](v1201, "standardCommandBufferSelector");
  v1204 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 28);
  v1205 = operator new(2uLL);
  *v1205 = v1204;
  v1206 = v1201;
  v1207 = operator new(2uLL);
  *v1207 = 64;
  v1208 = v1207 + 1;
  *(_QWORD *)&v1209 = v1207;
  *((_QWORD *)&v1209 + 1) = v1207 + 1;
  v1716 = v1209;
  *(_QWORD *)v1200 = off_1E428C468;
  *(_QWORD *)(v1200 + 8) = 0;
  *(_QWORD *)(v1200 + 16) = 0;
  *(_QWORD *)(v1200 + 24) = 0;
  v1210 = operator new(2uLL);
  *(_QWORD *)(v1200 + 8) = v1210;
  *v1210++ = *v1205;
  *(_QWORD *)(v1200 + 16) = v1210;
  *(_QWORD *)(v1200 + 24) = v1210;
  *(_WORD *)(v1200 + 32) = 0;
  *(_BYTE *)(v1200 + 34) = 14;
  *(_QWORD *)(v1200 + 40) = v1732;
  *(_WORD *)(v1200 + 48) = 0;
  *(_DWORD *)(v1200 + 120) = 1065353216;
  *(_QWORD *)(v1200 + 136) = 0;
  *(_QWORD *)(v1200 + 128) = v1200 + 136;
  *(_QWORD *)(v1200 + 160) = 0;
  *(_QWORD *)(v1200 + 144) = 0;
  *(_QWORD *)(v1200 + 152) = v1200 + 160;
  *(_QWORD *)(v1200 + 184) = 0;
  *(_QWORD *)(v1200 + 168) = 0;
  *(_QWORD *)(v1200 + 176) = v1200 + 184;
  *(_QWORD *)(v1200 + 208) = 0;
  *(_QWORD *)(v1200 + 192) = 0;
  *(_QWORD *)(v1200 + 200) = v1200 + 208;
  *(_QWORD *)(v1200 + 232) = 0;
  *(_QWORD *)(v1200 + 224) = v1200 + 232;
  *(_DWORD *)(v1200 + 52) = 1;
  *(_OWORD *)(v1200 + 80) = 0u;
  *(_OWORD *)(v1200 + 96) = 0u;
  *(_QWORD *)(v1200 + 112) = 0;
  *(_QWORD *)(v1200 + 216) = 0;
  *(_QWORD *)(v1200 + 240) = 0;
  *(_OWORD *)(v1200 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(v1200 + 312) = 0;
  *(_OWORD *)(v1200 + 264) = 0u;
  *(_OWORD *)(v1200 + 280) = 0u;
  *(_OWORD *)(v1200 + 296) = 0u;
  *(_OWORD *)(v1200 + 320) = v1716;
  *(_QWORD *)(v1200 + 336) = v1208;
  *(_DWORD *)(v1200 + 344) = 1;
  *(_QWORD *)v1200 = off_1E42A9910;
  *(_QWORD *)(v1200 + 352) = 0;
  v1211 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v1211, v1206, v1203);
  *(_QWORD *)(v1200 + 352) = v1211;

  operator delete(v1205);
  v1212 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1213 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1214 = __ldaxr(v1213);
    while (__stlxr(v1214 - 1, v1213));
    if (!v1214)
    {
      ((void (*)(std::__shared_weak_count *))v1212->__on_zero_shared)(v1212);
      std::__shared_weak_count::__release_weak(v1212);
    }
  }

  *(_QWORD *)v1200 = &off_1E4298F18;
  *(_QWORD *)(v1200 + 368) = 0;
  *(_DWORD *)(v1200 + 376) = 0;
  *(_QWORD *)(v1200 + 384) = 0;
  -[VKSharedResources standardCommandBufferSelector](v1206, "standardCommandBufferSelector");
  v1215 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1200 + 392) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 28);
  if (v1215)
  {
    v1216 = (unint64_t *)&v1215->__shared_owners_;
    do
      v1217 = __ldaxr(v1216);
    while (__stlxr(v1217 - 1, v1216));
    if (!v1217)
    {
      ((void (*)(std::__shared_weak_count *))v1215->__on_zero_shared)(v1215);
      std::__shared_weak_count::__release_weak(v1215);
    }
  }
  v1218 = operator new();
  v1219 = *((id *)v1732 + 13);
  v1220 = (__int128 *)objc_msgSend(v1219, "format");
  v1221 = v1206;
  *(_OWORD *)v1218 = 0u;
  *(_OWORD *)(v1218 + 16) = 0u;
  *(_OWORD *)(v1218 + 32) = 0u;
  *(_OWORD *)(v1218 + 48) = 0u;
  -[VKSharedResources textureManager](v1221, "textureManager");
  v1222 = -[VKSharedResources shaderLibrary](v1221, "shaderLibrary");
  *(_QWORD *)&v1744[28] = 0;
  *(_QWORD *)&v1744[20] = 0;
  *(_QWORD *)v1745 = 0;
  v1744[0] = 0;
  *(_OWORD *)&v1744[4] = xmmword_19FFB3060;
  v1745[8] = 15;
  v1223 = *(_QWORD *)(v1222 + 80);
  v1224 = *(_QWORD *)(v1223 + 472);
  *(_QWORD *)&v1752 = *(_QWORD *)(v1223 + 464);
  *((_QWORD *)&v1752 + 1) = v1224;
  if (v1224)
  {
    v1225 = (unint64_t *)(v1224 + 8);
    do
      v1226 = __ldxr(v1225);
    while (__stxr(v1226 + 1, v1225));
  }
  v1227 = -[VKSharedResources gglDevice](v1221, "gglDevice");
  v1228 = operator new(0x198uLL);
  v1228[1] = 0;
  v1228[2] = 0;
  *v1228 = &off_1E42E51B8;
  v1754 = *v1220;
  v1755 = v1220[1];
  v1229 = ggl::Hillshade::Pos2DUVPipelineState::Pos2DUVPipelineState((uint64_t)(v1228 + 3), &v1752, (uint64_t)v1744, &v1754, *(_BYTE *)(v1227 + 20), 0);
  v1230 = *(std::__shared_weak_count **)(v1218 + 24);
  *(_QWORD *)(v1218 + 16) = v1229;
  *(_QWORD *)(v1218 + 24) = v1228;
  if (v1230)
  {
    v1231 = (unint64_t *)&v1230->__shared_owners_;
    do
      v1232 = __ldaxr(v1231);
    while (__stlxr(v1232 - 1, v1231));
    if (!v1232)
    {
      ((void (*)(std::__shared_weak_count *))v1230->__on_zero_shared)(v1230);
      std::__shared_weak_count::__release_weak(v1230);
    }
  }
  v1233 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v1234 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v1235 = __ldaxr(v1234);
    while (__stlxr(v1235 - 1, v1234));
    if (!v1235)
    {
      ((void (*)(std::__shared_weak_count *))v1233->__on_zero_shared)(v1233);
      std::__shared_weak_count::__release_weak(v1233);
    }
  }
  v1236 = *(_QWORD *)(v1222 + 80);
  v1237 = *(_QWORD *)(v1236 + 472);
  *(_QWORD *)&v1752 = *(_QWORD *)(v1236 + 464);
  *((_QWORD *)&v1752 + 1) = v1237;
  if (v1237)
  {
    v1238 = (unint64_t *)(v1237 + 8);
    do
      v1239 = __ldxr(v1238);
    while (__stxr(v1239 + 1, v1238));
  }
  v1240 = -[VKSharedResources gglDevice](v1221, "gglDevice");
  v1241 = operator new(0x198uLL);
  v1241[1] = 0;
  v1241[2] = 0;
  *v1241 = &off_1E42E51B8;
  v1754 = *v1220;
  v1755 = v1220[1];
  v1242 = ggl::Hillshade::Pos2DUVPipelineState::Pos2DUVPipelineState((uint64_t)(v1241 + 3), &v1752, (uint64_t)v1744, &v1754, *(_BYTE *)(v1240 + 20), 1);
  v1243 = *(std::__shared_weak_count **)(v1218 + 40);
  *(_QWORD *)(v1218 + 32) = v1242;
  *(_QWORD *)(v1218 + 40) = v1241;
  if (v1243)
  {
    v1244 = (unint64_t *)&v1243->__shared_owners_;
    do
      v1245 = __ldaxr(v1244);
    while (__stlxr(v1245 - 1, v1244));
    if (!v1245)
    {
      ((void (*)(std::__shared_weak_count *))v1243->__on_zero_shared)(v1243);
      std::__shared_weak_count::__release_weak(v1243);
    }
  }
  v1246 = (std::__shared_weak_count *)*((_QWORD *)&v1752 + 1);
  if (*((_QWORD *)&v1752 + 1))
  {
    v1247 = (unint64_t *)(*((_QWORD *)&v1752 + 1) + 8);
    do
      v1248 = __ldaxr(v1247);
    while (__stlxr(v1248 - 1, v1247));
    if (!v1248)
    {
      ((void (*)(std::__shared_weak_count *))v1246->__on_zero_shared)(v1246);
      std::__shared_weak_count::__release_weak(v1246);
    }
  }
  v1249 = operator new();
  *(_DWORD *)(v1249 + 32) = 0;
  *(_QWORD *)(v1249 + 16) = 0;
  *(_QWORD *)(v1249 + 24) = 0;
  *(_QWORD *)v1249 = &off_1E42B5DE8;
  *(_QWORD *)(v1249 + 8) = 0;
  *(_QWORD *)(v1249 + 36) = 65537;
  *(_DWORD *)(v1249 + 44) = 0;
  *(_QWORD *)(v1249 + 48) = 1;
  *(_WORD *)(v1249 + 56) = 0;
  *(_BYTE *)(v1249 + 58) = 3;
  *(_QWORD *)(v1249 + 67) = 0;
  *(_QWORD *)(v1249 + 59) = 0;
  *(_BYTE *)(v1249 + 75) = 0;
  *(_QWORD *)(v1249 + 132) = 0;
  *(_QWORD *)(v1249 + 124) = 0;
  *(_WORD *)(v1249 + 188) = 257;
  *(_QWORD *)(v1249 + 192) = 0;
  *(_QWORD *)(v1249 + 200) = 0;
  *(_BYTE *)(v1249 + 208) = 0;
  v1250 = *(_QWORD *)v1218;
  *(_QWORD *)v1218 = v1249;
  if (v1250)
    (*(void (**)(uint64_t))(*(_QWORD *)v1250 + 8))(v1250);
  v1251 = operator new();
  *(_DWORD *)(v1251 + 32) = 0;
  *(_QWORD *)(v1251 + 16) = 0;
  *(_QWORD *)(v1251 + 24) = 0;
  *(_QWORD *)v1251 = &off_1E42B5DE8;
  *(_QWORD *)(v1251 + 8) = 0;
  *(_QWORD *)(v1251 + 36) = 65537;
  *(_DWORD *)(v1251 + 44) = 0;
  *(_QWORD *)(v1251 + 48) = 0x7F0000000400;
  *(_WORD *)(v1251 + 56) = 0;
  *(_BYTE *)(v1251 + 58) = 3;
  *(_QWORD *)(v1251 + 67) = 0;
  *(_QWORD *)(v1251 + 59) = 0;
  *(_BYTE *)(v1251 + 75) = 0;
  *(_QWORD *)(v1251 + 132) = 0;
  *(_QWORD *)(v1251 + 124) = 0;
  *(_WORD *)(v1251 + 188) = 257;
  *(_QWORD *)(v1251 + 192) = 0;
  *(_QWORD *)(v1251 + 200) = 0;
  *(_BYTE *)(v1251 + 208) = 0;
  v1252 = *(_QWORD *)(v1218 + 8);
  *(_QWORD *)(v1218 + 8) = v1251;
  if (v1252)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1252 + 8))(v1252);
    v1251 = *(_QWORD *)(v1218 + 8);
  }
  *(_BYTE *)(v1251 + 208) = 1;
  v1253 = (unint64_t *)operator new();
  *((_QWORD *)&v1755 + 1) = &v1754;
  *(_QWORD *)&v1752 = &off_1E42D60C8;
  *((_QWORD *)&v1753 + 1) = &v1752;
  *(_QWORD *)&v1754 = &off_1E42D20E0;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1253, (uint64_t)&v1754, (uint64_t)&v1752);
  v1254 = *(_QWORD *)(v1218 + 48);
  *(_QWORD *)(v1218 + 48) = v1253;
  if (v1254)
  {
    v1255 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1254);
    MEMORY[0x1A1AF4E00](v1255, 0x10A0C40D234DDC7);
  }
  v1256 = (__int128 *)*((_QWORD *)&v1753 + 1);
  if (*((__int128 **)&v1753 + 1) == &v1752)
  {
    v1257 = 4;
    v1256 = &v1752;
LABEL_967:
    (*(void (**)(void))(*(_QWORD *)v1256 + 8 * v1257))();
  }
  else if (*((_QWORD *)&v1753 + 1))
  {
    v1257 = 5;
    goto LABEL_967;
  }
  v1258 = (__int128 *)*((_QWORD *)&v1755 + 1);
  if (*((__int128 **)&v1755 + 1) == &v1754)
  {
    v1259 = 4;
    v1258 = &v1754;
LABEL_972:
    (*(void (**)(void))(*(_QWORD *)v1258 + 8 * v1259))();
  }
  else if (*((_QWORD *)&v1755 + 1))
  {
    v1259 = 5;
    goto LABEL_972;
  }
  v1260 = (uint64_t *)operator new();
  v1751 = (uint64_t *)&v1749;
  v1746 = &off_1E42D7D30;
  v1748 = &v1746;
  v1749 = &off_1E42D2128;
  v1260[1] = 0;
  v1260[2] = 0;
  *v1260 = 0;
  {
    v1627 = operator new();
    *(_QWORD *)(v1627 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1627 + 24) = "GeoGL";
    *(_OWORD *)(v1627 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1627 = &off_1E42B5668;
    *(_QWORD *)(v1627 + 8) = "GeoGL";
    *(_OWORD *)(v1627 + 72) = 0u;
    *(_OWORD *)(v1627 + 88) = 0u;
    *(_OWORD *)(v1627 + 104) = 0u;
    *(_OWORD *)(v1627 + 120) = 0u;
    *(_OWORD *)(v1627 + 136) = 0u;
    *(_OWORD *)(v1627 + 152) = 0u;
    *(_OWORD *)(v1627 + 168) = 0u;
    *(_OWORD *)(v1627 + 184) = 0u;
    *(_OWORD *)(v1627 + 200) = 0u;
    *(_OWORD *)(v1627 + 216) = 0u;
    *(_OWORD *)(v1627 + 232) = 0u;
    *(_QWORD *)(v1627 + 248) = 0;
    *(_OWORD *)(v1627 + 56) = 0u;
    v1628 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1627 + 56), 0);
    if ((_DWORD)v1628)
      geo::read_write_lock::logFailure(v1628, (uint64_t)"initialization", v1629);
    v1630 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1627 + 48) = v1630;
    malloc_set_zone_name(v1630, "GeoGL");
    *(_QWORD *)(v1627 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1627;
  }
  v1262 = ggl::Allocator::instance(void)::alloc;
  v1260[4] = 0;
  v1260[3] = v1262;
  v1260[5] = 0;
  v1260[6] = 0;
  {
    v1631 = operator new();
    *(_QWORD *)(v1631 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1631 + 24) = "GeoGL";
    *(_OWORD *)(v1631 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1631 = &off_1E42B5668;
    *(_QWORD *)(v1631 + 8) = "GeoGL";
    *(_OWORD *)(v1631 + 72) = 0u;
    *(_OWORD *)(v1631 + 88) = 0u;
    *(_OWORD *)(v1631 + 104) = 0u;
    *(_OWORD *)(v1631 + 120) = 0u;
    *(_OWORD *)(v1631 + 136) = 0u;
    *(_OWORD *)(v1631 + 152) = 0u;
    *(_OWORD *)(v1631 + 168) = 0u;
    *(_OWORD *)(v1631 + 184) = 0u;
    *(_OWORD *)(v1631 + 200) = 0u;
    *(_OWORD *)(v1631 + 216) = 0u;
    *(_OWORD *)(v1631 + 232) = 0u;
    *(_QWORD *)(v1631 + 248) = 0;
    *(_OWORD *)(v1631 + 56) = 0u;
    v1632 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1631 + 56), 0);
    if ((_DWORD)v1632)
      geo::read_write_lock::logFailure(v1632, (uint64_t)"initialization", v1633);
    v1634 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1631 + 48) = v1634;
    malloc_set_zone_name(v1634, "GeoGL");
    *(_QWORD *)(v1631 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1631;
  }
  v1260[7] = ggl::Allocator::instance(void)::alloc;
  v1263 = (uint64_t)v1751;
  if (v1751)
  {
    if (v1751 != (uint64_t *)&v1749)
    {
      v1263 = (*(uint64_t (**)(void))(*v1751 + 16))();
      goto LABEL_978;
    }
    v1260[11] = (uint64_t)(v1260 + 8);
    ((void (*)(uint64_t (***)(), uint64_t *))v1749[3])(&v1749, v1260 + 8);
  }
  else
  {
LABEL_978:
    v1260[11] = v1263;
  }
  v1264 = (uint64_t)v1748;
  if (v1748)
  {
    if (v1748 != &v1746)
    {
      v1264 = (*v1748)[2]();
      goto LABEL_983;
    }
    v1260[15] = (uint64_t)(v1260 + 12);
    ((void (*)(uint64_t, _QWORD *))v1746[3])((uint64_t)&v1746, v1260 + 12);
  }
  else
  {
LABEL_983:
    v1260[15] = v1264;
  }
  v1260[16] = 2000;
  v1265 = *v1260;
  if ((unint64_t)(v1260[2] - *v1260) <= 0x31F)
  {
    v1266 = v1260[1];
    v1267 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1260[3] + 16))(v1260[3], 800, 8);
    v1268 = v1266 - v1265;
    v1269 = v1267 + ((v1266 - v1265) & 0xFFFFFFFFFFFFFFF8);
    v1271 = *v1260;
    v1270 = v1260[1];
    v1272 = v1270 - *v1260;
    if (v1270 == *v1260)
    {
      v1274 = v1267 + ((v1266 - v1265) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v1273 = v1272 - 8;
      if ((unint64_t)(v1272 - 8) < 0x58)
      {
        v1274 = v1267 + ((v1266 - v1265) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_994;
      }
      v1274 = v1267 + ((v1266 - v1265) & 0xFFFFFFFFFFFFFFF8);
      if (v1270 - (v1268 & 0xFFFFFFFFFFFFFFF8) - v1267 < 0x20)
        goto LABEL_1531;
      v1275 = v1268 >> 3;
      v1276 = (v1273 >> 3) + 1;
      v1277 = (_OWORD *)(v1267 + 8 * v1275 - 16);
      v1278 = (__int128 *)(v1270 - 16);
      v1279 = v1276 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1280 = *v1278;
        *(v1277 - 1) = *(v1278 - 1);
        *v1277 = v1280;
        v1277 -= 2;
        v1278 -= 2;
        v1279 -= 4;
      }
      while (v1279);
      v1274 = v1269 - 8 * (v1276 & 0x3FFFFFFFFFFFFFFCLL);
      v1270 -= 8 * (v1276 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1276 != (v1276 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1531:
        do
        {
LABEL_994:
          v1281 = *(_QWORD *)(v1270 - 8);
          v1270 -= 8;
          *(_QWORD *)(v1274 - 8) = v1281;
          v1274 -= 8;
        }
        while (v1270 != v1271);
      }
      v1270 = *v1260;
    }
    *v1260 = v1274;
    v1260[1] = v1269;
    v1282 = v1260[2];
    v1260[2] = v1267 + 800;
    if (v1270)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1260[3] + 40))(v1260[3], v1270, v1282 - v1270);
  }
  v1283 = v1260[4];
  if ((unint64_t)(v1260[6] - v1283) <= 0x31F)
  {
    v1284 = v1260[5];
    v1285 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1260[7] + 16))(v1260[7], 800, 8);
    v1286 = v1284 - v1283;
    v1287 = v1285 + ((v1284 - v1283) & 0xFFFFFFFFFFFFFFF8);
    v1289 = v1260[4];
    v1288 = v1260[5];
    v1290 = v1288 - v1289;
    if (v1288 == v1289)
    {
      v1292 = v1285 + ((v1284 - v1283) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v1291 = v1290 - 8;
      if ((unint64_t)(v1290 - 8) < 0x58)
      {
        v1292 = v1285 + ((v1284 - v1283) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_1007;
      }
      v1292 = v1285 + ((v1284 - v1283) & 0xFFFFFFFFFFFFFFF8);
      if (v1288 - (v1286 & 0xFFFFFFFFFFFFFFF8) - v1285 < 0x20)
        goto LABEL_1532;
      v1293 = v1286 >> 3;
      v1294 = (v1291 >> 3) + 1;
      v1295 = (_OWORD *)(v1285 + 8 * v1293 - 16);
      v1296 = (__int128 *)(v1288 - 16);
      v1297 = v1294 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1298 = *v1296;
        *(v1295 - 1) = *(v1296 - 1);
        *v1295 = v1298;
        v1295 -= 2;
        v1296 -= 2;
        v1297 -= 4;
      }
      while (v1297);
      v1292 = v1287 - 8 * (v1294 & 0x3FFFFFFFFFFFFFFCLL);
      v1288 -= 8 * (v1294 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1294 != (v1294 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1532:
        do
        {
LABEL_1007:
          v1299 = *(_QWORD *)(v1288 - 8);
          v1288 -= 8;
          *(_QWORD *)(v1292 - 8) = v1299;
          v1292 -= 8;
        }
        while (v1288 != v1289);
      }
      v1288 = v1260[4];
    }
    v1260[4] = v1292;
    v1260[5] = v1287;
    v1300 = v1260[6];
    v1260[6] = v1285 + 800;
    if (v1288)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1260[7] + 40))(v1260[7], v1288, v1300 - v1288);
  }
  v1301 = *(_QWORD *)(v1218 + 56);
  *(_QWORD *)(v1218 + 56) = v1260;
  if (v1301)
  {
    v1302 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1301);
    MEMORY[0x1A1AF4E00](v1302, 0x10A0C40D234DDC7);
  }
  v1303 = v1748;
  if (v1748 == &v1746)
  {
    v1304 = 4;
    v1303 = &v1746;
LABEL_1017:
    (*v1303)[v1304]();
  }
  else if (v1748)
  {
    v1304 = 5;
    goto LABEL_1017;
  }
  v1305 = (uint64_t (***)())v1751;
  if (v1751 == (uint64_t *)&v1749)
  {
    v1306 = 4;
    v1305 = &v1749;
LABEL_1022:
    (*v1305)[v1306]();
  }
  else if (v1751)
  {
    v1306 = 5;
    goto LABEL_1022;
  }

  v1307 = *(md::HillshadeRenderResources **)(v1200 + 384);
  *(_QWORD *)(v1200 + 384) = v1218;
  if (v1307)
  {
    md::HillshadeRenderResources::~HillshadeRenderResources(v1307);
    MEMORY[0x1A1AF4E00]();
  }

  v1308 = operator new();
  *(_BYTE *)v1308 = 0;
  *(_QWORD *)(v1308 + 12) = 0;
  *(_QWORD *)(v1308 + 4) = 0;
  *(_BYTE *)(v1308 + 20) = 0;
  *(_DWORD *)(v1308 + 24) = 1065353216;
  *(_BYTE *)(v1308 + 28) = 0;
  *(_DWORD *)(v1308 + 32) = 0;
  v1309 = *(_QWORD *)(v1200 + 368);
  *(_QWORD *)(v1200 + 368) = v1308;
  if (v1309)
  {
    MEMORY[0x1A1AF4E00](v1309, 0x1000C4049ECCB0CLL);
    v1308 = *(_QWORD *)(v1200 + 368);
  }
  *(_BYTE *)(v1308 + 28) = 127;
  *(_DWORD *)(v1308 + 32) = 0;

  v1310 = v1731[14];
  v1731[14] = v1200;
  if (v1310)
    (*(void (**)(uint64_t))(*(_QWORD *)v1310 + 8))(v1310);
  v1311 = (_QWORD *)operator new();
  md::HikingRenderLayer::HikingRenderLayer(v1311, (uint64_t)v1732, v1221, 0);
  v1312 = v1731[17];
  v1731[17] = (uint64_t)v1311;
  if (v1312)
    (*(void (**)(uint64_t))(*(_QWORD *)v1312 + 8))(v1312);
  v1313 = (_QWORD *)operator new();
  md::HikingRenderLayer::HikingRenderLayer(v1313, (uint64_t)v1732, v1221, 3);
  v1314 = v1731[24];
  v1731[24] = (uint64_t)v1313;
  if (v1314)
    (*(void (**)(uint64_t))(*(_QWORD *)v1314 + 8))(v1314);
  v1315 = (_QWORD *)operator new();
  md::HikingRenderLayer::HikingRenderLayer(v1315, (uint64_t)v1732, v1221, 5);
  v1316 = v1731[25];
  v1731[25] = (uint64_t)v1315;
  if (v1316)
    (*(void (**)(uint64_t))(*(_QWORD *)v1316 + 8))(v1316);
  if (a1[33])
  {
    v1317 = *(_WORD **)(v1722 + 8);
    v1318 = v1317[45];
    v1319 = v1317[59];
    v1320 = v1317[93];
    v1321 = operator new();
    md::ClearRenderLayer::ClearRenderLayer(v1321, (uint64_t)v1732, 28, 1, (_WORD *)(*(_QWORD *)(v1722 + 8) + 120));
    v1322 = v1731[28];
    v1731[28] = v1321;
    if (v1322)
      (*(void (**)(uint64_t))(*(_QWORD *)v1322 + 8))(v1322);
    v1323 = operator new();
    md::DaVinciGroundRenderLayer::DaVinciGroundRenderLayer(v1323, (uint64_t)v1732, v1221, 29, 1);
    *(_BYTE *)(v1323 + 3632) = 1;
    v1324 = v1731[29];
    v1731[29] = v1323;
    if (v1324)
      (*(void (**)(uint64_t))(*(_QWORD *)v1324 + 8))(v1324);
    v1325 = operator new();
    md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer(v1325, 39, (uint64_t)v1732, v1221, -2.0, -2.0);
    v1326 = v1731[39];
    v1731[39] = v1325;
    if (v1326)
      (*(void (**)(uint64_t))(*(_QWORD *)v1326 + 8))(v1326);
    v1327 = operator new();
    md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer(v1327, 34, (uint64_t)v1732, v1221, -2.0, -2.0);
    v1328 = v1731[34];
    v1731[34] = v1327;
    if (v1328)
      (*(void (**)(uint64_t))(*(_QWORD *)v1328 + 8))(v1328);
    v1329 = operator new();
    md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer(v1329, 35, (uint64_t)v1732, v1221, -2.0, -2.0);
    v1330 = v1731[35];
    v1731[35] = v1329;
    if (v1330)
      (*(void (**)(uint64_t))(*(_QWORD *)v1330 + 8))(v1330);
    v1331 = operator new();
    md::DaVinciCenterLineRoadsRenderLayer::DaVinciCenterLineRoadsRenderLayer(v1331, 33, (uint64_t)v1732, v1221, -2.0, -2.0);
    v1332 = v1731[33];
    v1731[33] = v1331;
    if (v1332)
      (*(void (**)(uint64_t))(*(_QWORD *)v1332 + 8))(v1332);
    v1333 = (_QWORD *)operator new();
    md::DaVinciHikingRenderLayer::DaVinciHikingRenderLayer(v1333, 36, (uint64_t)v1732, v1221);
    v1334 = v1731[36];
    v1731[36] = (uint64_t)v1333;
    if (v1334)
      (*(void (**)(uint64_t))(*(_QWORD *)v1334 + 8))(v1334);
    v1335 = (_QWORD *)operator new();
    md::DaVinciHikingRenderLayer::DaVinciHikingRenderLayer(v1335, 38, (uint64_t)v1732, v1221);
    v1336 = v1731[38];
    v1731[38] = (uint64_t)v1335;
    if (v1336)
      (*(void (**)(uint64_t))(*(_QWORD *)v1336 + 8))(v1336);
    v1337 = (_QWORD *)operator new();
    md::DaVinciHikingRenderLayer::DaVinciHikingRenderLayer(v1337, 37, (uint64_t)v1732, v1221);
    v1338 = v1731[37];
    v1731[37] = (uint64_t)v1337;
    if (v1338)
      (*(void (**)(uint64_t))(*(_QWORD *)v1338 + 8))(v1338);
    v1339 = operator new();
    md::DaVinciTrafficRenderLayer::DaVinciTrafficRenderLayer(v1339, 46, (uint64_t)v1732, v1221, *(_QWORD *)(v1719 + 120));
    v1340 = v1731[46];
    v1731[46] = v1339;
    if (v1340)
      (*(void (**)(uint64_t))(*(_QWORD *)v1340 + 8))(v1340);
    v1341 = operator new();
    md::DaVinciTrafficRenderLayer::DaVinciTrafficRenderLayer(v1341, 47, (uint64_t)v1732, v1221, *(_QWORD *)(v1719 + 120));
    v1342 = v1731[47];
    v1731[47] = v1341;
    if (v1342)
      (*(void (**)(uint64_t))(*(_QWORD *)v1342 + 8))(v1342);
    v1343 = operator new();
    md::DaVinciGroundRenderLayer::DaVinciGroundRenderLayer(v1343, (uint64_t)v1732, v1221, 30, 2);
    v1344 = v1731[30];
    v1731[30] = v1343;
    if (v1344)
      (*(void (**)(uint64_t))(*(_QWORD *)v1344 + 8))(v1344);
    v1345 = operator new();
    v1346 = *((id *)v1732 + 13);
    v1347 = (const RenderTargetFormat *)objc_msgSend(v1346, "format");
    v1348 = v1221;
    LOWORD(v1754) = 59;
    v1349 = operator new(6uLL);
    *(_QWORD *)&v1744[16] = v1349 + 3;
    *v1349 = v1318;
    v1349[1] = v1319;
    v1349[2] = v1320;
    *(_QWORD *)v1744 = v1349;
    *(_QWORD *)&v1744[8] = v1349 + 3;
    md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(v1345, 48, &v1754, 1, (uint64_t)v1732, v1347, v1348, 1, (uint64_t)v1744);
    operator delete(v1349);
    *(_QWORD *)v1345 = &off_1E4295C80;
    *(_BYTE *)(v1345 + 361) = 0;
    v1350 = (md::PolygonRenderResources *)operator new();
    md::PolygonRenderResources::PolygonRenderResources(v1350, v1348, v1347);
    *(_WORD *)(v1345 + 384) = 0;
    *(_BYTE *)(v1345 + 386) = 0;
    *(_QWORD *)(v1345 + 400) = 0;
    *(_QWORD *)(v1345 + 408) = 0;
    *(_QWORD *)(v1345 + 392) = 0;
    *(_WORD *)(v1345 + 416) = v1318;
    *(_WORD *)(v1345 + 418) = v1319;
    *(_WORD *)(v1345 + 420) = v1320;
    *(_QWORD *)(v1345 + 422) = 0;
    *(_QWORD *)(v1345 + 368) = v1350;
    *(_QWORD *)(v1345 + 376) = &off_1E42A9638;
    *(_QWORD *)(v1345 + 432) = v1350;
    *(_BYTE *)(v1345 + 440) = 1;
    *(_DWORD *)(v1345 + 444) = 0x40000000;
    *(_BYTE *)(v1345 + 448) = 0;
    *(_QWORD *)(v1345 + 464) = 0;
    *(_QWORD *)(v1345 + 472) = 0;
    *(_WORD *)(v1345 + 480) = 0;

    v1351 = v1731[48];
    v1731[48] = v1345;
    if (v1351)
      (*(void (**)(uint64_t))(*(_QWORD *)v1351 + 8))(v1351);
    v1352 = operator new();
    v1353 = -[VKSharedResources shaderLibrary](v1348, "shaderLibrary");
    -[VKSharedResources standardCommandBufferSelector](v1348, "standardCommandBufferSelector");
    md::ClientDrapedPolygonRenderLayer::ClientDrapedPolygonRenderLayer(v1352, 58, (uint64_t)v1732, v1353, *(uint64_t *)v1744);
    v1354 = v1731[50];
    v1731[50] = v1352;
    if (v1354)
      (*(void (**)(uint64_t))(*(_QWORD *)v1354 + 8))(v1354);
    v1355 = *(std::__shared_weak_count **)&v1744[8];
    if (*(_QWORD *)&v1744[8])
    {
      v1356 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
      do
        v1357 = __ldaxr(v1356);
      while (__stlxr(v1357 - 1, v1356));
      if (!v1357)
      {
        ((void (*)(std::__shared_weak_count *))v1355->__on_zero_shared)(v1355);
        std::__shared_weak_count::__release_weak(v1355);
      }
    }
    v1358 = *v1703;
    v1359 = operator new();
    v1360 = -[VKSharedResources shaderLibrary](v1348, "shaderLibrary");
    -[VKSharedResources standardCommandBufferSelector](v1348, "standardCommandBufferSelector");
    md::ClientDrapedPolygonRenderLayer::ClientDrapedPolygonRenderLayer(v1359, 57, (uint64_t)v1732, v1360, *(uint64_t *)v1744);
    v1361 = v1358[49];
    v1358[49] = v1359;
    if (v1361)
      (*(void (**)(uint64_t))(*(_QWORD *)v1361 + 8))(v1361);
    v1362 = *(std::__shared_weak_count **)&v1744[8];
    if (*(_QWORD *)&v1744[8])
    {
      v1363 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
      do
        v1364 = __ldaxr(v1363);
      while (__stlxr(v1364 - 1, v1363));
      if (!v1364)
      {
        ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
        std::__shared_weak_count::__release_weak(v1362);
      }
    }
    v1731 = *v1703;
    v1365 = operator new();
    md::DaVinciGroundRenderLayer::DaVinciGroundRenderLayer(v1365, (uint64_t)v1732, v1348, 32, 3);
    v1366 = v1731[32];
    v1731[32] = v1365;
    if (v1366)
      (*(void (**)(uint64_t))(*(_QWORD *)v1366 + 8))(v1366);
  }
  v1367 = operator new();
  v1368 = v1221;
  v1369 = *((id *)v1732 + 13);
  v1370 = (const RenderTargetFormat *)objc_msgSend(v1369, "format");
  -[VKSharedResources standardCommandBufferSelector](v1368, "standardCommandBufferSelector");
  v1371 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 84);
  v1372 = operator new(2uLL);
  *v1372 = v1371;
  v1373 = v1368;
  v1374 = operator new(2uLL);
  *v1374 = 75;
  v1375 = v1374 + 1;
  *(_QWORD *)&v1376 = v1374;
  *((_QWORD *)&v1376 + 1) = v1374 + 1;
  v1723 = v1376;
  *(_QWORD *)v1367 = off_1E428C468;
  *(_QWORD *)(v1367 + 8) = 0;
  *(_QWORD *)(v1367 + 16) = 0;
  *(_QWORD *)(v1367 + 24) = 0;
  v1377 = operator new(2uLL);
  *(_QWORD *)(v1367 + 8) = v1377;
  *v1377++ = *v1372;
  *(_QWORD *)(v1367 + 16) = v1377;
  *(_QWORD *)(v1367 + 24) = v1377;
  *(_BYTE *)(v1367 + 34) = 53;
  *(_DWORD *)(v1367 + 120) = 1065353216;
  *(_QWORD *)(v1367 + 136) = 0;
  *(_QWORD *)(v1367 + 128) = v1367 + 136;
  *(_QWORD *)(v1367 + 160) = 0;
  *(_QWORD *)(v1367 + 144) = 0;
  *(_QWORD *)(v1367 + 152) = v1367 + 160;
  *(_QWORD *)(v1367 + 184) = 0;
  *(_QWORD *)(v1367 + 168) = 0;
  *(_QWORD *)(v1367 + 176) = v1367 + 184;
  *(_QWORD *)(v1367 + 208) = 0;
  *(_QWORD *)(v1367 + 232) = 0;
  *(_QWORD *)(v1367 + 192) = 0;
  *(_QWORD *)(v1367 + 200) = v1367 + 208;
  *(_QWORD *)(v1367 + 224) = v1367 + 232;
  *(_WORD *)(v1367 + 32) = 0;
  *(_QWORD *)(v1367 + 40) = v1732;
  *(_WORD *)(v1367 + 48) = 0;
  *(_DWORD *)(v1367 + 52) = 0;
  *(_OWORD *)(v1367 + 80) = 0u;
  *(_OWORD *)(v1367 + 96) = 0u;
  *(_QWORD *)(v1367 + 112) = 0;
  *(_QWORD *)(v1367 + 216) = 0;
  *(_QWORD *)(v1367 + 240) = 0;
  *(_OWORD *)(v1367 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(v1367 + 312) = 0;
  *(_OWORD *)(v1367 + 264) = 0u;
  *(_OWORD *)(v1367 + 280) = 0u;
  *(_OWORD *)(v1367 + 296) = 0u;
  *(_OWORD *)(v1367 + 320) = v1723;
  *(_QWORD *)(v1367 + 336) = v1375;
  *(_DWORD *)(v1367 + 344) = 0;
  *(_QWORD *)v1367 = off_1E42A99F8;
  *(_QWORD *)(v1367 + 352) = 0;
  v1378 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v1378, v1373, v1370);
  *(_QWORD *)(v1367 + 352) = v1378;

  operator delete(v1372);
  v1379 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1380 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1381 = __ldaxr(v1380);
    while (__stlxr(v1381 - 1, v1380));
    if (!v1381)
    {
      ((void (*)(std::__shared_weak_count *))v1379->__on_zero_shared)(v1379);
      std::__shared_weak_count::__release_weak(v1379);
    }
  }

  *(_QWORD *)v1367 = &off_1E42947D8;
  *(_WORD *)(v1367 + 361) = 0;
  v1382 = *(const md::SharedDeviceResources **)(*(_QWORD *)(*((_QWORD *)v1732 + 12) + 24) + 24);
  v1383 = *((id *)v1732 + 13);
  md::FlyoverRenderResources::FlyoverRenderResources((md::FlyoverRenderResources *)(v1367 + 368), v1382, v1373, (const RenderTargetFormat *)objc_msgSend(v1383, "format"));

  *(_DWORD *)(v1367 + 1640) = 0;
  -[VKSharedResources standardCommandBufferSelector](v1373, "standardCommandBufferSelector");
  v1384 = *(std::__shared_weak_count **)&v1744[8];
  *(_WORD *)(v1367 + 361) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 84);
  if (v1384)
  {
    v1385 = (unint64_t *)&v1384->__shared_owners_;
    do
      v1386 = __ldaxr(v1385);
    while (__stlxr(v1386 - 1, v1385));
    if (!v1386)
    {
      ((void (*)(std::__shared_weak_count *))v1384->__on_zero_shared)(v1384);
      std::__shared_weak_count::__release_weak(v1384);
    }
  }

  v1387 = v1731[53];
  v1731[53] = v1367;
  if (v1387)
    (*(void (**)(uint64_t))(*(_QWORD *)v1387 + 8))(v1387);
  v1388 = operator new();
  v1389 = v1373;
  v1720 = v1388;
  v1390 = operator new(2uLL);
  *v1390 = 78;
  -[VKSharedResources standardCommandBufferSelector](v1389, "standardCommandBufferSelector");
  v1391 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)v1744 + 8) + 18);
  v1392 = operator new(2uLL);
  *(_QWORD *)&v1393 = v1390;
  *((_QWORD *)&v1393 + 1) = v1390 + 1;
  v1724 = v1393;
  *v1392 = v1391;
  *(_QWORD *)v1388 = off_1E428C468;
  *(_QWORD *)(v1388 + 8) = 0;
  *(_QWORD *)(v1388 + 16) = 0;
  *(_QWORD *)(v1388 + 24) = 0;
  v1394 = operator new(2uLL);
  *(_QWORD *)v1388 = off_1E42A4ED8;
  *(_QWORD *)(v1388 + 8) = v1394;
  *v1394++ = *v1392;
  *(_QWORD *)(v1388 + 16) = v1394;
  *(_QWORD *)(v1388 + 24) = v1394;
  *(_WORD *)(v1388 + 32) = 0;
  *(_BYTE *)(v1388 + 34) = 10;
  *(_QWORD *)(v1388 + 40) = v1732;
  *(_WORD *)(v1388 + 48) = 0;
  *(_DWORD *)(v1388 + 52) = 0;
  *(_OWORD *)(v1388 + 80) = 0u;
  *(_OWORD *)(v1388 + 96) = 0u;
  *(_QWORD *)(v1388 + 112) = 0;
  *(_DWORD *)(v1388 + 120) = 1065353216;
  *(_QWORD *)(v1388 + 144) = 0;
  *(_QWORD *)(v1388 + 136) = 0;
  *(_QWORD *)(v1388 + 128) = v1388 + 136;
  *(_QWORD *)(v1388 + 160) = 0;
  *(_QWORD *)(v1388 + 184) = 0;
  *(_QWORD *)(v1388 + 152) = v1388 + 160;
  *(_QWORD *)(v1388 + 176) = v1388 + 184;
  *(_QWORD *)(v1388 + 216) = 0;
  *(_QWORD *)(v1388 + 208) = 0;
  *(_QWORD *)(v1388 + 192) = 0;
  *(_QWORD *)(v1388 + 200) = v1388 + 208;
  *(_QWORD *)(v1388 + 240) = 0;
  *(_OWORD *)(v1388 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(v1388 + 312) = 0;
  *(_OWORD *)(v1388 + 320) = v1724;
  *(_QWORD *)(v1388 + 336) = v1390 + 1;
  *(_DWORD *)(v1388 + 344) = 0;
  *(_QWORD *)(v1388 + 232) = 0;
  *(_QWORD *)(v1388 + 168) = 0;
  *(_QWORD *)(v1388 + 224) = v1388 + 232;
  *(_OWORD *)(v1388 + 264) = 0u;
  *(_OWORD *)(v1388 + 280) = 0u;
  *(_OWORD *)(v1388 + 296) = 0u;
  operator delete(v1392);
  v1395 = *(std::__shared_weak_count **)&v1744[8];
  if (*(_QWORD *)&v1744[8])
  {
    v1396 = (unint64_t *)(*(_QWORD *)&v1744[8] + 8);
    do
      v1397 = __ldaxr(v1396);
    while (__stlxr(v1397 - 1, v1396));
    if (!v1397)
    {
      ((void (*)(std::__shared_weak_count *))v1395->__on_zero_shared)(v1395);
      std::__shared_weak_count::__release_weak(v1395);
    }
  }
  *(_QWORD *)v1388 = &off_1E429CD28;
  v1717 = (md::GlobeRasterRenderResources **)(v1388 + 352);
  *(_QWORD *)(v1388 + 352) = 0;
  *(_QWORD *)(v1388 + 360) = 0;
  *(_BYTE *)(v1388 + 368) = 0;
  v1398 = operator new();
  v1718 = *((id *)v1732 + 13);
  v1713 = (_OWORD *)objc_msgSend(v1718, "format");
  v1399 = v1389;
  *(_OWORD *)v1398 = 0u;
  *(_OWORD *)(v1398 + 16) = 0u;
  *(_OWORD *)(v1398 + 32) = 0u;
  *(_OWORD *)(v1398 + 48) = 0u;
  *(_OWORD *)(v1398 + 64) = 0u;
  *(_OWORD *)(v1398 + 80) = 0u;
  *(_OWORD *)(v1398 + 96) = 0u;
  *(_QWORD *)(v1398 + 112) = 0;
  v1725 = v1399;
  v1400 = (unint64_t *)operator new();
  *((_QWORD *)&v1755 + 1) = &v1754;
  *(_QWORD *)&v1752 = &off_1E42D60C8;
  *((_QWORD *)&v1753 + 1) = &v1752;
  *(_QWORD *)&v1754 = &off_1E42D2E60;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1400, (uint64_t)&v1754, (uint64_t)&v1752);
  v1401 = *(_QWORD *)(v1398 + 8);
  *(_QWORD *)(v1398 + 8) = v1400;
  if (v1401)
  {
    v1402 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1401);
    MEMORY[0x1A1AF4E00](v1402, 0x10A0C40D234DDC7);
  }
  v1403 = (__int128 *)*((_QWORD *)&v1753 + 1);
  if (*((__int128 **)&v1753 + 1) == &v1752)
  {
    v1404 = 4;
    v1403 = &v1752;
LABEL_1101:
    (*(void (**)(void))(*(_QWORD *)v1403 + 8 * v1404))();
  }
  else if (*((_QWORD *)&v1753 + 1))
  {
    v1404 = 5;
    goto LABEL_1101;
  }
  v1405 = (__int128 *)*((_QWORD *)&v1755 + 1);
  if (*((__int128 **)&v1755 + 1) == &v1754)
  {
    v1406 = 4;
    v1405 = &v1754;
LABEL_1106:
    (*(void (**)(void))(*(_QWORD *)v1405 + 8 * v1406))();
  }
  else if (*((_QWORD *)&v1755 + 1))
  {
    v1406 = 5;
    goto LABEL_1106;
  }
  v1407 = operator new(0xE8uLL);
  v1407[1] = 0;
  v1407[2] = 0;
  *v1407 = &off_1E42E12F0;
  v1408 = ggl::BufferData::BufferData((uint64_t)(v1407 + 3), qword_1EE550A58, 2, 1, 6, 1);
  v1407[28] = ggl::FlyoverCommon::Shared::reflection(void)::reflection;
  v1407[3] = &off_1E42B8E50;
  v1409 = *(std::__shared_weak_count **)(v1398 + 48);
  *(_QWORD *)(v1398 + 40) = v1408;
  *(_QWORD *)(v1398 + 48) = v1407;
  if (v1409)
  {
    v1410 = (unint64_t *)&v1409->__shared_owners_;
    do
      v1411 = __ldaxr(v1410);
    while (__stlxr(v1411 - 1, v1410));
    if (!v1411)
    {
      ((void (*)(std::__shared_weak_count *))v1409->__on_zero_shared)(v1409);
      std::__shared_weak_count::__release_weak(v1409);
    }
  }
  v1412 = operator new(0xE8uLL);
  v1412[1] = 0;
  v1412[2] = 0;
  *v1412 = &off_1E42E12B8;
  v1413 = ggl::BufferData::BufferData((uint64_t)(v1412 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v1412[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v1412[3] = &off_1E42B8E30;
  v1414 = *(std::__shared_weak_count **)(v1398 + 64);
  *(_QWORD *)(v1398 + 56) = v1413;
  *(_QWORD *)(v1398 + 64) = v1412;
  if (v1414)
  {
    v1415 = (unint64_t *)&v1414->__shared_owners_;
    do
      v1416 = __ldaxr(v1415);
    while (__stlxr(v1416 - 1, v1415));
    if (!v1416)
    {
      ((void (*)(std::__shared_weak_count *))v1414->__on_zero_shared)(v1414);
      std::__shared_weak_count::__release_weak(v1414);
    }
  }
  v1417 = operator new(0xE8uLL);
  v1417[1] = 0;
  v1417[2] = 0;
  *v1417 = &off_1E42E12B8;
  v1418 = ggl::BufferData::BufferData((uint64_t)(v1417 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v1417[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v1417[3] = &off_1E42B8E30;
  v1419 = *(std::__shared_weak_count **)(v1398 + 80);
  *(_QWORD *)(v1398 + 72) = v1418;
  *(_QWORD *)(v1398 + 80) = v1417;
  if (v1419)
  {
    v1420 = (unint64_t *)&v1419->__shared_owners_;
    do
      v1421 = __ldaxr(v1420);
    while (__stlxr(v1421 - 1, v1420));
    if (!v1421)
    {
      ((void (*)(std::__shared_weak_count *))v1419->__on_zero_shared)(v1419);
      std::__shared_weak_count::__release_weak(v1419);
    }
  }
  v1422 = operator new(0xE8uLL);
  v1422[1] = 0;
  v1422[2] = 0;
  *v1422 = &off_1E42E12B8;
  v1423 = ggl::BufferData::BufferData((uint64_t)(v1422 + 3), qword_1EE550C18, 2, 1, 6, 1);
  v1422[28] = ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v1422[3] = &off_1E42B8E30;
  v1424 = *(std::__shared_weak_count **)(v1398 + 96);
  *(_QWORD *)(v1398 + 88) = v1423;
  *(_QWORD *)(v1398 + 96) = v1422;
  if (v1424)
  {
    v1425 = (unint64_t *)&v1424->__shared_owners_;
    do
      v1426 = __ldaxr(v1425);
    while (__stlxr(v1426 - 1, v1425));
    if (!v1426)
    {
      ((void (*)(std::__shared_weak_count *))v1424->__on_zero_shared)(v1424);
      std::__shared_weak_count::__release_weak(v1424);
    }
  }
  v1427 = (uint64_t *)operator new();
  v1749 = &off_1E42D2EA8;
  v1750 = (std::__shared_weak_count *)v1398;
  v1751 = (uint64_t *)&v1749;
  v1746 = &off_1E42D7820;
  v1748 = &v1746;
  v1427[1] = 0;
  v1427[2] = 0;
  *v1427 = 0;
  {
    v1635 = operator new();
    *(_QWORD *)(v1635 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1635 + 24) = "GeoGL";
    *(_OWORD *)(v1635 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1635 = &off_1E42B5668;
    *(_QWORD *)(v1635 + 8) = "GeoGL";
    *(_OWORD *)(v1635 + 72) = 0u;
    *(_OWORD *)(v1635 + 88) = 0u;
    *(_OWORD *)(v1635 + 104) = 0u;
    *(_OWORD *)(v1635 + 120) = 0u;
    *(_OWORD *)(v1635 + 136) = 0u;
    *(_OWORD *)(v1635 + 152) = 0u;
    *(_OWORD *)(v1635 + 168) = 0u;
    *(_OWORD *)(v1635 + 184) = 0u;
    *(_OWORD *)(v1635 + 200) = 0u;
    *(_OWORD *)(v1635 + 216) = 0u;
    *(_OWORD *)(v1635 + 232) = 0u;
    *(_QWORD *)(v1635 + 248) = 0;
    *(_OWORD *)(v1635 + 56) = 0u;
    v1636 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1635 + 56), 0);
    if ((_DWORD)v1636)
      geo::read_write_lock::logFailure(v1636, (uint64_t)"initialization", v1637);
    v1638 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1635 + 48) = v1638;
    malloc_set_zone_name(v1638, "GeoGL");
    *(_QWORD *)(v1635 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1635;
  }
  v1429 = ggl::Allocator::instance(void)::alloc;
  v1427[4] = 0;
  v1427[3] = v1429;
  v1427[5] = 0;
  v1427[6] = 0;
  {
    v1639 = operator new();
    *(_QWORD *)(v1639 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1639 + 24) = "GeoGL";
    *(_OWORD *)(v1639 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1639 = &off_1E42B5668;
    *(_QWORD *)(v1639 + 8) = "GeoGL";
    *(_OWORD *)(v1639 + 72) = 0u;
    *(_OWORD *)(v1639 + 88) = 0u;
    *(_OWORD *)(v1639 + 104) = 0u;
    *(_OWORD *)(v1639 + 120) = 0u;
    *(_OWORD *)(v1639 + 136) = 0u;
    *(_OWORD *)(v1639 + 152) = 0u;
    *(_OWORD *)(v1639 + 168) = 0u;
    *(_OWORD *)(v1639 + 184) = 0u;
    *(_OWORD *)(v1639 + 200) = 0u;
    *(_OWORD *)(v1639 + 216) = 0u;
    *(_OWORD *)(v1639 + 232) = 0u;
    *(_QWORD *)(v1639 + 248) = 0;
    *(_OWORD *)(v1639 + 56) = 0u;
    v1640 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1639 + 56), 0);
    if ((_DWORD)v1640)
      geo::read_write_lock::logFailure(v1640, (uint64_t)"initialization", v1641);
    v1642 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1639 + 48) = v1642;
    malloc_set_zone_name(v1642, "GeoGL");
    *(_QWORD *)(v1639 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1639;
  }
  v1427[7] = ggl::Allocator::instance(void)::alloc;
  v1430 = (uint64_t)v1751;
  if (v1751)
  {
    if (v1751 != (uint64_t *)&v1749)
    {
      v1430 = (*(uint64_t (**)(void))(*v1751 + 16))();
      goto LABEL_1132;
    }
    v1427[11] = (uint64_t)(v1427 + 8);
    ((void (*)(uint64_t (***)(), uint64_t *))v1749[3])(&v1749, v1427 + 8);
  }
  else
  {
LABEL_1132:
    v1427[11] = v1430;
  }
  v1431 = (uint64_t)v1748;
  if (v1748)
  {
    if (v1748 != &v1746)
    {
      v1431 = (*v1748)[2]();
      goto LABEL_1137;
    }
    v1427[15] = (uint64_t)(v1427 + 12);
    ((void (*)(uint64_t, _QWORD *))v1746[3])((uint64_t)&v1746, v1427 + 12);
  }
  else
  {
LABEL_1137:
    v1427[15] = v1431;
  }
  v1427[16] = 2000;
  v1432 = *v1427;
  if ((unint64_t)(v1427[2] - *v1427) <= 0x31F)
  {
    v1433 = v1427[1];
    v1434 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1427[3] + 16))(v1427[3], 800, 8);
    v1435 = v1433 - v1432;
    v1436 = v1434 + ((v1433 - v1432) & 0xFFFFFFFFFFFFFFF8);
    v1438 = *v1427;
    v1437 = v1427[1];
    v1439 = v1437 - *v1427;
    if (v1437 == *v1427)
    {
      v1441 = v1434 + ((v1433 - v1432) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v1440 = v1439 - 8;
      if ((unint64_t)(v1439 - 8) < 0x58)
      {
        v1441 = v1434 + ((v1433 - v1432) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_1148;
      }
      v1441 = v1434 + ((v1433 - v1432) & 0xFFFFFFFFFFFFFFF8);
      if (v1437 - (v1435 & 0xFFFFFFFFFFFFFFF8) - v1434 < 0x20)
        goto LABEL_1533;
      v1442 = v1435 >> 3;
      v1443 = (v1440 >> 3) + 1;
      v1444 = (_OWORD *)(v1434 + 8 * v1442 - 16);
      v1445 = (__int128 *)(v1437 - 16);
      v1446 = v1443 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1447 = *v1445;
        *(v1444 - 1) = *(v1445 - 1);
        *v1444 = v1447;
        v1444 -= 2;
        v1445 -= 2;
        v1446 -= 4;
      }
      while (v1446);
      v1441 = v1436 - 8 * (v1443 & 0x3FFFFFFFFFFFFFFCLL);
      v1437 -= 8 * (v1443 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1443 != (v1443 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1533:
        do
        {
LABEL_1148:
          v1448 = *(_QWORD *)(v1437 - 8);
          v1437 -= 8;
          *(_QWORD *)(v1441 - 8) = v1448;
          v1441 -= 8;
        }
        while (v1437 != v1438);
      }
      v1437 = *v1427;
    }
    *v1427 = v1441;
    v1427[1] = v1436;
    v1449 = v1427[2];
    v1427[2] = v1434 + 800;
    if (v1437)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1427[3] + 40))(v1427[3], v1437, v1449 - v1437);
  }
  v1450 = v1427[4];
  if ((unint64_t)(v1427[6] - v1450) <= 0x31F)
  {
    v1451 = v1427[5];
    v1452 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1427[7] + 16))(v1427[7], 800, 8);
    v1453 = v1451 - v1450;
    v1454 = v1452 + ((v1451 - v1450) & 0xFFFFFFFFFFFFFFF8);
    v1456 = v1427[4];
    v1455 = v1427[5];
    v1457 = v1455 - v1456;
    if (v1455 == v1456)
    {
      v1459 = v1452 + ((v1451 - v1450) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v1458 = v1457 - 8;
      if ((unint64_t)(v1457 - 8) < 0x58)
      {
        v1459 = v1452 + ((v1451 - v1450) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_1161;
      }
      v1459 = v1452 + ((v1451 - v1450) & 0xFFFFFFFFFFFFFFF8);
      if (v1455 - (v1453 & 0xFFFFFFFFFFFFFFF8) - v1452 < 0x20)
        goto LABEL_1534;
      v1460 = v1453 >> 3;
      v1461 = (v1458 >> 3) + 1;
      v1462 = (_OWORD *)(v1452 + 8 * v1460 - 16);
      v1463 = (__int128 *)(v1455 - 16);
      v1464 = v1461 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1465 = *v1463;
        *(v1462 - 1) = *(v1463 - 1);
        *v1462 = v1465;
        v1462 -= 2;
        v1463 -= 2;
        v1464 -= 4;
      }
      while (v1464);
      v1459 = v1454 - 8 * (v1461 & 0x3FFFFFFFFFFFFFFCLL);
      v1455 -= 8 * (v1461 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1461 != (v1461 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1534:
        do
        {
LABEL_1161:
          v1466 = *(_QWORD *)(v1455 - 8);
          v1455 -= 8;
          *(_QWORD *)(v1459 - 8) = v1466;
          v1459 -= 8;
        }
        while (v1455 != v1456);
      }
      v1455 = v1427[4];
    }
    v1427[4] = v1459;
    v1427[5] = v1454;
    v1467 = v1427[6];
    v1427[6] = v1452 + 800;
    if (v1455)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1427[7] + 40))(v1427[7], v1455, v1467 - v1455);
  }
  v1468 = *(_QWORD *)v1398;
  *(_QWORD *)v1398 = v1427;
  if (v1468)
  {
    v1469 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1468);
    MEMORY[0x1A1AF4E00](v1469, 0x10A0C40D234DDC7);
  }
  v1470 = v1748;
  if (v1748 == &v1746)
  {
    v1471 = 4;
    v1470 = &v1746;
LABEL_1171:
    (*v1470)[v1471]();
  }
  else if (v1748)
  {
    v1471 = 5;
    goto LABEL_1171;
  }
  v1472 = (uint64_t (***)())v1751;
  if (v1751 == (uint64_t *)&v1749)
  {
    v1473 = 4;
    v1472 = &v1749;
LABEL_1176:
    (*v1472)[v1473]();
  }
  else if (v1751)
  {
    v1473 = 5;
    goto LABEL_1176;
  }
  v1474 = -[VKSharedResources shaderLibrary](v1399, "shaderLibrary");
  v1475 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v1712 = v1474;
  v1475->__shared_owners_ = 0;
  v1476 = (unint64_t *)&v1475->__shared_owners_;
  v1475->__shared_weak_owners_ = 0;
  v1475->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v1475[1], 2, 1, 0, 6, 726);
  v1477 = 0;
  LODWORD(v1475[10].__vftable) = 0;
  v1475[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v1475[1].__shared_owners_ = 2;
  v1475[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v1475[9].__shared_weak_owners_ = (uint64_t)"index data";
  v1478 = v1475[4].__vftable;
  v1479 = (_WORD *)&v1478[1].__get_deleter + 1;
  do
  {
    v1480 = 3 * v1477;
    v1481 = 12 * v1477;
    *(v1479 - 33) = 12 * v1477;
    v1482 = (12 * v1477) | 1;
    *(v1479 - 32) = v1482;
    v1483 = v1477 + 1;
    v1484 = 3 * (v1477 + 1);
    v1485 = 12 * (v1477 + 1);
    *(v1479 - 31) = v1485;
    *(v1479 - 30) = v1485;
    *(v1479 - 29) = v1482;
    v1486 = (4 * v1484) | 1;
    *(v1479 - 28) = v1486;
    *(v1479 - 27) = v1482;
    v1487 = (4 * v1480) | 2;
    *(v1479 - 26) = v1487;
    *(v1479 - 25) = v1486;
    *(v1479 - 24) = v1486;
    *(v1479 - 23) = v1487;
    *(v1479 - 22) = (4 * v1484) | 2;
    *(v1479 - 21) = v1487;
    v1488 = (4 * v1480) | 3;
    *(v1479 - 20) = v1488;
    *(v1479 - 19) = (4 * v1484) | 2;
    *(v1479 - 18) = (4 * v1484) | 2;
    *(v1479 - 17) = v1488;
    v1489 = (4 * v1484) | 3;
    *(v1479 - 16) = v1489;
    *(v1479 - 15) = v1488;
    *(v1479 - 14) = v1481 + 4;
    *(v1479 - 13) = v1489;
    *(v1479 - 12) = v1489;
    *(v1479 - 11) = v1481 + 4;
    *(v1479 - 10) = v1485 + 4;
    *(v1479 - 9) = v1481 + 4;
    *(v1479 - 8) = v1481 + 5;
    *(v1479 - 7) = v1485 + 4;
    *(v1479 - 6) = v1485 + 4;
    *(v1479 - 5) = v1481 + 5;
    *(v1479 - 4) = v1485 + 5;
    *(v1479 - 3) = v1481 + 5;
    *(v1479 - 2) = v1481 + 6;
    *(v1479 - 1) = v1485 + 5;
    *v1479 = v1485 + 5;
    v1479[1] = v1481 + 6;
    v1479[2] = v1485 + 6;
    v1479[3] = v1481 + 6;
    v1479[4] = v1481 + 7;
    v1479[5] = v1485 + 6;
    v1479[6] = v1485 + 6;
    v1479[7] = v1481 + 7;
    v1479[8] = v1485 + 7;
    v1479[9] = v1481 + 7;
    v1479[10] = v1481 + 8;
    v1479[11] = v1485 + 7;
    v1479[12] = v1485 + 7;
    v1479[13] = v1481 + 8;
    v1479[14] = v1485 + 8;
    v1479[15] = v1481 + 8;
    v1479[16] = v1481 + 9;
    v1479[17] = v1485 + 8;
    v1479[18] = v1485 + 8;
    v1479[19] = v1481 + 9;
    v1479[20] = v1485 + 9;
    v1479[21] = v1481 + 9;
    v1479[22] = v1481 + 10;
    v1479[23] = v1485 + 9;
    v1479[24] = v1485 + 9;
    v1479[25] = v1481 + 10;
    v1479[26] = v1485 + 10;
    v1479[27] = v1481 + 10;
    v1481 += 11;
    v1479[28] = v1481;
    v1479[29] = v1485 + 10;
    v1479[30] = v1485 + 10;
    v1479[31] = v1481;
    v1479[32] = v1485 + 11;
    v1479 += 66;
    v1477 = v1483;
  }
  while (v1483 != 11);
  v1490 = operator new();
  v1711 = v1478;
  if ((v1491 & 1) == 0
  {
    if ((v1643 & 1) == 0
    {
      ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::globeTexturedReflection;
    }
    ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r;
    unk_1EE585DE8 = 1;
  }
  *(_QWORD *)(v1490 + 32) = 0;
  *(_QWORD *)(v1490 + 40) = 0;
  *(_DWORD *)(v1490 + 48) = 0;
  *(_QWORD *)v1490 = &off_1E42BBC08;
  *(_QWORD *)(v1490 + 8) = "QuadGrid";
  *(_QWORD *)(v1490 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v1490 + 24) = 0;
  *(_QWORD *)(v1490 + 56) = &ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r;
  *(_QWORD *)(v1490 + 64) = 0;
  v1733 = (md::CartographicRenderer *)(v1490 + 64);
  *(_QWORD *)(v1490 + 72) = 0;
  *(_QWORD *)(v1490 + 80) = 0;
  {
    v1644 = operator new();
    *(_QWORD *)(v1644 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1644 + 24) = "GeoGL";
    *(_OWORD *)(v1644 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1644 = &off_1E42B5668;
    *(_QWORD *)(v1644 + 8) = "GeoGL";
    *(_OWORD *)(v1644 + 72) = 0u;
    *(_OWORD *)(v1644 + 88) = 0u;
    *(_OWORD *)(v1644 + 104) = 0u;
    *(_OWORD *)(v1644 + 120) = 0u;
    *(_OWORD *)(v1644 + 136) = 0u;
    *(_OWORD *)(v1644 + 152) = 0u;
    *(_OWORD *)(v1644 + 168) = 0u;
    *(_OWORD *)(v1644 + 184) = 0u;
    *(_OWORD *)(v1644 + 200) = 0u;
    *(_OWORD *)(v1644 + 216) = 0u;
    *(_OWORD *)(v1644 + 232) = 0u;
    *(_QWORD *)(v1644 + 248) = 0;
    *(_OWORD *)(v1644 + 56) = 0u;
    v1645 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1644 + 56), 0);
    if ((_DWORD)v1645)
      geo::read_write_lock::logFailure(v1645, (uint64_t)"initialization", v1646);
    v1647 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1644 + 48) = v1647;
    malloc_set_zone_name(v1647, "GeoGL");
    *(_QWORD *)(v1644 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1644;
  }
  v1493 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1490 + 120) = 0;
  *(_QWORD *)(v1490 + 96) = 0;
  *(_QWORD *)(v1490 + 104) = 0;
  *(_QWORD *)(v1490 + 88) = v1493;
  {
    v1648 = operator new();
    *(_QWORD *)(v1648 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1648 + 24) = "GeoGL";
    *(_OWORD *)(v1648 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1648 = &off_1E42B5668;
    *(_QWORD *)(v1648 + 8) = "GeoGL";
    *(_OWORD *)(v1648 + 72) = 0u;
    *(_OWORD *)(v1648 + 88) = 0u;
    *(_OWORD *)(v1648 + 104) = 0u;
    *(_OWORD *)(v1648 + 120) = 0u;
    *(_OWORD *)(v1648 + 136) = 0u;
    *(_OWORD *)(v1648 + 152) = 0u;
    *(_OWORD *)(v1648 + 168) = 0u;
    *(_OWORD *)(v1648 + 184) = 0u;
    *(_OWORD *)(v1648 + 200) = 0u;
    *(_OWORD *)(v1648 + 216) = 0u;
    *(_OWORD *)(v1648 + 232) = 0u;
    *(_QWORD *)(v1648 + 248) = 0;
    *(_OWORD *)(v1648 + 56) = 0u;
    v1649 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1648 + 56), 0);
    if ((_DWORD)v1649)
      geo::read_write_lock::logFailure(v1649, (uint64_t)"initialization", v1650);
    v1651 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1648 + 48) = v1651;
    malloc_set_zone_name(v1651, "GeoGL");
    *(_QWORD *)(v1648 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1648;
  }
  *(_QWORD *)(v1490 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1490 + 136) = 0;
  *(_QWORD *)(v1490 + 112) = v1490 + 120;
  *(_QWORD *)v1490 = &off_1E42BDEB8;
  *(_QWORD *)(v1490 + 16) = &unk_1E42BDED8;
  v1494 = *(_QWORD *)(v1490 + 64);
  v1495 = *(_QWORD *)(*(_QWORD *)(v1490 + 56) + 8);
  v1496 = *(_QWORD *)(v1490 + 72);
  v1497 = (v1496 - v1494) >> 4;
  v1498 = v1495 - v1497;
  if (v1495 <= v1497)
  {
    if (v1495 < v1497)
    {
      v1499 = v1494 + 16 * v1495;
      while (v1496 != v1499)
      {
        v1500 = *(std::__shared_weak_count **)(v1496 - 8);
        if (v1500)
        {
          v1501 = (unint64_t *)&v1500->__shared_owners_;
          do
            v1502 = __ldaxr(v1501);
          while (__stlxr(v1502 - 1, v1501));
          if (!v1502)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v1500->__on_zero_shared)(v1500, v1498);
            std::__shared_weak_count::__release_weak(v1500);
          }
        }
        v1496 -= 16;
      }
      *(_QWORD *)(v1490 + 72) = v1499;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)v1733, v1498);
  }
  *(_QWORD *)v1490 = &off_1E42BC450;
  *(_QWORD *)(v1490 + 16) = &unk_1E42BC470;
  {
    v1652 = operator new();
    *(_QWORD *)(v1652 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v1652 + 24) = "GeoGL";
    *(_OWORD *)(v1652 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v1652 = &off_1E42B5668;
    *(_QWORD *)(v1652 + 8) = "GeoGL";
    *(_OWORD *)(v1652 + 72) = 0u;
    *(_OWORD *)(v1652 + 88) = 0u;
    *(_OWORD *)(v1652 + 104) = 0u;
    *(_OWORD *)(v1652 + 120) = 0u;
    *(_OWORD *)(v1652 + 136) = 0u;
    *(_OWORD *)(v1652 + 152) = 0u;
    *(_OWORD *)(v1652 + 168) = 0u;
    *(_OWORD *)(v1652 + 184) = 0u;
    *(_OWORD *)(v1652 + 200) = 0u;
    *(_OWORD *)(v1652 + 216) = 0u;
    *(_OWORD *)(v1652 + 232) = 0u;
    *(_QWORD *)(v1652 + 248) = 0;
    *(_OWORD *)(v1652 + 56) = 0u;
    v1653 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1652 + 56), 0);
    if ((_DWORD)v1653)
      geo::read_write_lock::logFailure(v1653, (uint64_t)"initialization", v1654);
    v1655 = malloc_create_zone(0, 0);
    *(_QWORD *)(v1652 + 48) = v1655;
    malloc_set_zone_name(v1655, "GeoGL");
    *(_QWORD *)(v1652 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v1652;
  }
  v1504 = ggl::Allocator::instance(void)::alloc;
  v1505 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v1505 = &off_1E42E0560;
  *(_QWORD *)(v1505 + 8) = 0;
  *(_QWORD *)(v1505 + 16) = 0;
  *(_QWORD *)(v1505 + 24) = v1504;
  *(_QWORD *)(v1505 + 32) = &off_1E42B5748;
  *(_QWORD *)(v1505 + 40) = 8;
  *(_DWORD *)(v1505 + 48) = 6;
  v1506 = 0uLL;
  *(_OWORD *)(v1505 + 56) = 0u;
  *(_OWORD *)(v1505 + 72) = 0u;
  *(_OWORD *)(v1505 + 88) = 0u;
  *(_OWORD *)(v1505 + 104) = 0u;
  *(_QWORD *)(v1505 + 120) = 0;
  if ((v1507 & 1) == 0)
  {
    v1506 = 0uLL;
    if (v1656)
    {
      v1657 = operator new();
      *(_QWORD *)(v1657 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v1657 + 24) = "GeoGL";
      *(_OWORD *)(v1657 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v1657 = &off_1E42B5668;
      *(_QWORD *)(v1657 + 8) = "GeoGL";
      *(_OWORD *)(v1657 + 72) = 0u;
      *(_OWORD *)(v1657 + 88) = 0u;
      *(_OWORD *)(v1657 + 104) = 0u;
      *(_OWORD *)(v1657 + 120) = 0u;
      *(_OWORD *)(v1657 + 136) = 0u;
      *(_OWORD *)(v1657 + 152) = 0u;
      *(_OWORD *)(v1657 + 168) = 0u;
      *(_OWORD *)(v1657 + 184) = 0u;
      *(_OWORD *)(v1657 + 200) = 0u;
      *(_OWORD *)(v1657 + 216) = 0u;
      *(_OWORD *)(v1657 + 232) = 0u;
      *(_QWORD *)(v1657 + 248) = 0;
      *(_OWORD *)(v1657 + 56) = 0u;
      v1658 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v1657 + 56), 0);
      if ((_DWORD)v1658)
        geo::read_write_lock::logFailure(v1658, (uint64_t)"initialization", v1659);
      v1660 = malloc_create_zone(0, 0);
      *(_QWORD *)(v1657 + 48) = v1660;
      malloc_set_zone_name(v1660, "GeoGL");
      *(_QWORD *)(v1657 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v1657;
      v1506 = 0uLL;
    }
  }
  *(_QWORD *)(v1505 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v1505 + 136) = 0;
  *(_OWORD *)(v1505 + 200) = v1506;
  *(_OWORD *)(v1505 + 184) = v1506;
  *(_OWORD *)(v1505 + 168) = v1506;
  *(_QWORD *)(v1505 + 216) = 0;
  *(_QWORD *)(v1505 + 224) = -1;
  *(_OWORD *)(v1505 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v1505 + 144) = 0;
  *(_QWORD *)(v1505 + 32) = &off_1E42B8260;
  *(_QWORD *)(v1505 + 240) = "QuadGrid";
  *(_QWORD *)(v1505 + 248) = &ggl::DaVinci::globeTexturedReflection;
  *(_QWORD *)(v1505 + 232) = &unk_1E42B8280;
  v1508 = *(_QWORD **)v1733;
  v1509 = *(std::__shared_weak_count **)(*(_QWORD *)v1733 + 8);
  *v1508 = v1505 + 32;
  v1508[1] = v1505;
  v1510 = v1708;
  v1511 = v1720;
  v1512 = v1725;
  if (v1509)
  {
    v1513 = (unint64_t *)&v1509->__shared_owners_;
    do
      v1514 = __ldaxr(v1513);
    while (__stlxr(v1514 - 1, v1513));
    if (!v1514)
    {
      ((void (*)(std::__shared_weak_count *))v1509->__on_zero_shared)(v1509);
      std::__shared_weak_count::__release_weak(v1509);
    }
  }
  do
    v1515 = __ldxr(v1476);
  while (__stxr(v1515 + 1, v1476));
  do
    v1516 = __ldxr(v1476);
  while (__stxr(v1516 + 1, v1476));
  v1517 = *(std::__shared_weak_count **)(v1490 + 104);
  *(_QWORD *)(v1490 + 96) = v1475 + 1;
  *(_QWORD *)(v1490 + 104) = v1475;
  if (v1517)
  {
    v1518 = (unint64_t *)&v1517->__shared_owners_;
    do
      v1519 = __ldaxr(v1518);
    while (__stlxr(v1519 - 1, v1518));
    if (!v1519)
    {
      ((void (*)(std::__shared_weak_count *))v1517->__on_zero_shared)(v1517);
      std::__shared_weak_count::__release_weak(v1517);
    }
  }
  do
    v1520 = __ldaxr(v1476);
  while (__stlxr(v1520 - 1, v1476));
  if (!v1520)
  {
    ((void (*)(std::__shared_weak_count *))v1475->__on_zero_shared)(v1475);
    std::__shared_weak_count::__release_weak(v1475);
  }
  v1521 = **(_QWORD **)v1733;
  v1522 = *(_QWORD *)(v1521 + 8);
  v1523 = 144 * v1522;
  v1524 = *(_QWORD *)(v1521 + 72);
  v1525 = *(_QWORD *)(v1521 + 80) - v1524;
  if (144 * v1522 != v1525)
  {
    if (144 * v1522 <= v1525)
    {
      if (v1523 < v1525)
        *(_QWORD *)(v1521 + 80) = v1524 + v1523;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v1521 + 72, 144 * v1522 - v1525);
    }
    v1526 = *(std::__shared_weak_count **)(v1521 + 32);
    *(_QWORD *)(v1521 + 24) = 0;
    *(_QWORD *)(v1521 + 32) = 0;
    if (v1526)
    {
      v1527 = (unint64_t *)&v1526->__shared_owners_;
      do
        v1528 = __ldaxr(v1527);
      while (__stlxr(v1528 - 1, v1527));
      if (!v1528)
      {
        ((void (*)(std::__shared_weak_count *))v1526->__on_zero_shared)(v1526);
        std::__shared_weak_count::__release_weak(v1526);
      }
    }
    *(_QWORD *)(v1521 + 120) = 0;
    *(_DWORD *)(v1521 + 112) = 0;
    v1529 = *(_QWORD *)(v1521 + 80) - *(_QWORD *)(v1521 + 72);
    *(_QWORD *)(v1521 + 40) = 0;
    *(_QWORD *)(v1521 + 48) = v1529;
    *(_QWORD *)(v1521 + 56) = 0;
    *(_QWORD *)(v1521 + 64) = v1529;
    v1521 = **(_QWORD **)v1733;
    v1522 = *(_QWORD *)(v1521 + 8);
  }
  v1530 = 4 * v1522;
  if (v1530)
    v1531 = *(_QWORD *)(v1521 + 72);
  else
    v1531 = 0;
  v1532 = 0;
  v1533 = v1531 + 48;
  v1534 = 1060777612;
  v1535 = 1062302814;
  v1536 = 1063828015;
  v1537 = 1065353216;
  do
  {
    v1538 = (float)v1532 * 0.090909;
    *(_DWORD *)(v1533 - 48) = 0;
    *(float *)(v1533 - 44) = v1538;
    *(_DWORD *)(v1533 - 40) = 1035611788;
    *(float *)(v1533 - 36) = v1538;
    *(_DWORD *)(v1533 - 32) = 1044000396;
    *(float *)(v1533 - 28) = v1538;
    *(_DWORD *)(v1533 - 24) = 1049338601;
    *(float *)(v1533 - 20) = v1538;
    *(_DWORD *)(v1533 - 16) = 1052389004;
    *(float *)(v1533 - 12) = v1538;
    *(_DWORD *)(v1533 - 8) = 1055439407;
    *(float *)(v1533 - 4) = v1538;
    *(_DWORD *)v1533 = 1057727209;
    *(float *)(v1533 + 4) = v1538;
    *(_DWORD *)(v1533 + 8) = 1059252410;
    *(float *)(v1533 + 12) = v1538;
    *(_DWORD *)(v1533 + 16) = 1060777612;
    *(float *)(v1533 + 20) = v1538;
    *(_DWORD *)(v1533 + 24) = 1062302814;
    *(float *)(v1533 + 28) = v1538;
    *(_DWORD *)(v1533 + 32) = 1063828015;
    *(float *)(v1533 + 36) = v1538;
    *(_DWORD *)(v1533 + 40) = 1065353216;
    *(float *)(v1533 + 44) = v1538;
    ++v1532;
    v1533 += 96;
  }
  while (v1532 != 12);
  if (v1531 && v1530)
  {
    if (*(_QWORD *)(v1521 + 64) > v1530)
      v1530 = *(_QWORD *)(v1521 + 64);
    *(_QWORD *)(v1521 + 56) = 0;
    *(_QWORD *)(v1521 + 64) = v1530;
  }
  if (v1711)
  {
    v1539 = v1475[3].__shared_weak_owners_;
    if (v1539 <= 0x5AC)
      v1539 = 1452;
    v1475[3].__shared_owners_ = 0;
    v1475[3].__shared_weak_owners_ = v1539;
  }
  do
    v1540 = __ldaxr(v1476);
  while (__stlxr(v1540 - 1, v1476));
  if (!v1540)
  {
    ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t, uint64_t))v1475->__on_zero_shared)(v1475, 1060777612, 1062302814, 1063828015, 1065353216);
    std::__shared_weak_count::__release_weak(v1475);
  }
  v1541 = *(_QWORD *)(v1398 + 16);
  *(_QWORD *)(v1398 + 16) = v1490;
  if (v1541)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1541 + 8))(v1541, v1534, v1535, v1536, v1537);
  v1542 = operator new();
  *(_DWORD *)(v1542 + 32) = 0;
  *(_QWORD *)(v1542 + 16) = 0;
  *(_QWORD *)(v1542 + 24) = 0;
  *(_QWORD *)v1542 = &off_1E42B5DE8;
  *(_QWORD *)(v1542 + 8) = 0;
  *(_QWORD *)(v1542 + 36) = 256;
  *(_DWORD *)(v1542 + 44) = 0;
  *(_QWORD *)(v1542 + 48) = 0xFF7F0200000700;
  *(_WORD *)(v1542 + 56) = 0;
  *(_BYTE *)(v1542 + 58) = 3;
  *(_QWORD *)(v1542 + 67) = 0;
  *(_QWORD *)(v1542 + 59) = 0;
  *(_BYTE *)(v1542 + 75) = 0;
  *(_QWORD *)(v1542 + 132) = 0;
  *(_QWORD *)(v1542 + 124) = 0;
  *(_WORD *)(v1542 + 188) = 257;
  *(_QWORD *)(v1542 + 192) = 0;
  *(_QWORD *)(v1542 + 200) = 0;
  *(_BYTE *)(v1542 + 208) = 0;
  v1543 = *(_QWORD *)(v1398 + 24);
  *(_QWORD *)(v1398 + 24) = v1542;
  if (v1543)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1543 + 8))(v1543);
    v1542 = *(_QWORD *)(v1398 + 24);
  }
  *(_BYTE *)(v1542 + 56) = 1;
  v1544 = *(_QWORD *)(v1712 + 80);
  v1545 = *(_QWORD *)(v1544 + 3608);
  v1546 = *(std::__shared_weak_count **)(v1544 + 3616);
  if (v1546)
  {
    v1547 = (unint64_t *)&v1546->__shared_owners_;
    do
      v1548 = __ldxr(v1547);
    while (__stxr(v1548 + 1, v1547));
  }
  v1742 = 0;
  v1549 = (char *)operator new(0x198uLL);
  *((_QWORD *)v1549 + 1) = 0;
  *((_QWORD *)v1549 + 2) = 0;
  *(_QWORD *)v1549 = &off_1E42E4B60;
  *(_OWORD *)v1744 = *v1713;
  *(_OWORD *)&v1744[16] = v1713[1];
  if ((v1550 & 1) == 0)
  {
    if ((_DWORD)v1661)
    {
      if ((v1662 & 1) == 0)
      {
        if ((_DWORD)v1661)
        {
          if ((v1681 & 1) == 0
          {
            if ((v1691 & 1) == 0
            {
              ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::globeTexturedReflection;
            }
            ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::attributesReflection(void)::r;
            unk_1EE585DE8 = 1;
          }
          ggl::DaVinci::GlobeTexturedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::typedReflection(void)::r;
          unk_1EE585540 = &ggl::DaVinci::pipelineDataGlobeTexturedPipelineDeviceStructs(void)::ref;
          qword_1EE585548 = 0;
          if ((v1682 & 1) == 0
          {
            ggl::DaVinci::pipelineDataGlobeTexturedPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(_QWORD *)algn_1EE585638 = ggl::DaVinci::S2Transform::reflection(void)::reflection;
            qword_1EE585640 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
          }
          qword_1EE585550 = (uint64_t)&ggl::DaVinci::pipelineDataGlobeTexturedPipelineConstantStructs(void)::ref;
          unk_1EE585558 = xmmword_19FFB3C60;
        }
      }
      ggl::DaVinci::GlobeTexturedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GlobeTexturedPipelineSetup::typedReflection(void)::ref;
      ggl::GlobeTexturedShader::typedReflection(v1661);
      qword_1EE581BC8 = (uint64_t)&ggl::GlobeTexturedShader::typedReflection(void)::ref;
      if ((v1663 & 1) == 0
      {
        ggl::DaVinci::pipelineStateGlobeTexturedPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE582B88 = 0;
        qword_1EE582B90 = (uint64_t)"";
        dword_1EE582B98 = 0;
        qword_1EE582BA0 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineAttributeBinding_0(void)::attr;
        unk_1EE582BA8 = 1;
      }
      qword_1EE581BD0 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE581BD8 = 1;
      qword_1EE581BE0 = 0;
      unk_1EE581BE8 = 2;
      qword_1EE581BF0 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineDeviceStructBinding(void)::ref;
      unk_1EE581BF8 = 0;
      if ((v1664 & 1) == 0
      {
        ggl::DaVinci::pipelineStateGlobeTexturedPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE582A98 = 0;
        qword_1EE582AA0 = (uint64_t)"sharedConstants";
        dword_1EE582AA8 = 3;
        qword_1EE582AB0 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE582AB8 = xmmword_19FFB3030;
        qword_1EE582AC8 = 1;
        unk_1EE582AD0 = "s2Transform";
        dword_1EE582AD8 = 3;
        qword_1EE582AE0 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineConstantS2TransformBinding(void)::reflection;
        unk_1EE582AE8 = xmmword_19FFB3C60;
        qword_1EE582AF8 = 2;
        unk_1EE582B00 = "clip";
        dword_1EE582B08 = 3;
        qword_1EE582B10 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineConstantClipBinding(void)::reflection;
        unk_1EE582B18 = 1;
      }
      qword_1EE581C00 = (uint64_t)&ggl::DaVinci::pipelineStateGlobeTexturedPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE581C08 = 3;
      v1510 = v1708;
      v1511 = v1720;
      v1512 = v1725;
    }
  }
  if (v1546)
  {
    v1551 = (unint64_t *)&v1546->__shared_owners_;
    do
      v1552 = __ldxr(v1551);
    while (__stxr(v1552 + 1, v1551));
    *((_DWORD *)v1549 + 14) = 0;
    *((_QWORD *)v1549 + 5) = 0;
    *((_QWORD *)v1549 + 6) = 0;
    *((_QWORD *)v1549 + 3) = &off_1E42B6760;
    *((_QWORD *)v1549 + 4) = 0;
    *((_QWORD *)v1549 + 8) = &ggl::DaVinci::GlobeTexturedPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v1549 + 9) = v1545;
    *((_QWORD *)v1549 + 10) = v1546;
    do
      v1553 = __ldxr(v1551);
    while (__stxr(v1553 + 1, v1551));
  }
  else
  {
    *((_DWORD *)v1549 + 14) = 0;
    *((_QWORD *)v1549 + 5) = 0;
    *((_QWORD *)v1549 + 6) = 0;
    *((_QWORD *)v1549 + 3) = &off_1E42B6760;
    *((_QWORD *)v1549 + 4) = 0;
    *((_QWORD *)v1549 + 8) = &ggl::DaVinci::GlobeTexturedPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v1549 + 9) = v1545;
    *((_QWORD *)v1549 + 10) = 0;
  }
  v1549[136] = 0;
  *(_OWORD *)(v1549 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v1549 + 156) = 0;
  *(_QWORD *)(v1549 + 172) = 0;
  *(_QWORD *)(v1549 + 164) = 0;
  v1549[184] = 0;
  *(_OWORD *)(v1549 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v1549 + 204) = 0;
  *(_QWORD *)(v1549 + 220) = 0;
  *(_QWORD *)(v1549 + 212) = 0;
  v1549[232] = 0;
  *(_OWORD *)(v1549 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v1549 + 252) = 0;
  *(_QWORD *)(v1549 + 268) = 0;
  *(_QWORD *)(v1549 + 260) = 0;
  v1554 = *(_OWORD *)&v1744[16];
  *(_OWORD *)(v1549 + 280) = *(_OWORD *)v1744;
  *(_OWORD *)(v1549 + 296) = v1554;
  v1549[312] = 0;
  *((_QWORD *)v1549 + 48) = 0;
  *((_OWORD *)v1549 + 22) = 0u;
  *((_OWORD *)v1549 + 23) = 0u;
  *((_OWORD *)v1549 + 20) = 0u;
  *((_OWORD *)v1549 + 21) = 0u;
  *((_QWORD *)v1549 + 49) = 0x100000001;
  v1549[400] = 0;
  v1549[88] = 0;
  *(_WORD *)(v1549 + 89) = v1740;
  v1549[91] = BYTE2(v1740);
  *(_OWORD *)(v1549 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v1549 + 108) = v1742;
  *((_DWORD *)v1549 + 29) = 0;
  *((_QWORD *)v1549 + 15) = 0;
  *((_DWORD *)v1549 + 32) = 0;
  v1549[132] = 15;
  if (v1546)
  {
    v1555 = (unint64_t *)&v1546->__shared_owners_;
    do
      v1556 = __ldaxr(v1555);
    while (__stlxr(v1556 - 1, v1555));
    if (!v1556)
    {
      ((void (*)(std::__shared_weak_count *))v1546->__on_zero_shared)(v1546);
      std::__shared_weak_count::__release_weak(v1546);
    }
  }
  *((_QWORD *)v1549 + 3) = &off_1E42BC710;
  v1557 = *(std::__shared_weak_count **)(v1398 + 112);
  *(_QWORD *)(v1398 + 104) = v1549 + 24;
  *(_QWORD *)(v1398 + 112) = v1549;
  if (v1557)
  {
    v1558 = (unint64_t *)&v1557->__shared_owners_;
    do
      v1559 = __ldaxr(v1558);
    while (__stlxr(v1559 - 1, v1558));
    if (!v1559)
    {
      ((void (*)(std::__shared_weak_count *))v1557->__on_zero_shared)(v1557);
      std::__shared_weak_count::__release_weak(v1557);
    }
  }
  if (v1546)
  {
    v1560 = (unint64_t *)&v1546->__shared_owners_;
    do
      v1561 = __ldaxr(v1560);
    while (__stlxr(v1561 - 1, v1560));
    if (!v1561)
    {
      ((void (*)(std::__shared_weak_count *))v1546->__on_zero_shared)(v1546);
      std::__shared_weak_count::__release_weak(v1546);
    }
  }
  AtmosphereLookupTexture = altitude::util::createAtmosphereLookupTexture();
  v1563 = *(_QWORD *)(v1398 + 32);
  *(_QWORD *)(v1398 + 32) = AtmosphereLookupTexture;
  if (v1563)
    (*(void (**)(uint64_t))(*(_QWORD *)v1563 + 8))(v1563);

  v1564 = *v1717;
  *v1717 = (md::GlobeRasterRenderResources *)v1398;
  if (v1564)
  {
    md::GlobeRasterRenderResources::~GlobeRasterRenderResources(v1564);
    MEMORY[0x1A1AF4E00]();
  }

  v1565 = v1731[10];
  v1731[10] = v1511;
  if (v1565)
    (*(void (**)(uint64_t))(*(_QWORD *)v1565 + 8))(v1565);
  *(_BYTE *)(v1510 + 408) = *(_QWORD *)(v1726 + 1200) == 0;
  v1566 = v1735;
  if (v1735)
  {
    v1567 = (unint64_t *)&v1735->__shared_owners_;
    do
      v1568 = __ldaxr(v1567);
    while (__stlxr(v1568 - 1, v1567));
    if (!v1568)
    {
      ((void (*)(std::__shared_weak_count *))v1566->__on_zero_shared)(v1566);
      std::__shared_weak_count::__release_weak(v1566);
    }
  }
  v1569 = v1737;
  if (v1737)
  {
    v1570 = (unint64_t *)&v1737->__shared_owners_;
    do
      v1571 = __ldaxr(v1570);
    while (__stlxr(v1571 - 1, v1570));
    if (!v1571)
    {
      ((void (*)(std::__shared_weak_count *))v1569->__on_zero_shared)(v1569);
      std::__shared_weak_count::__release_weak(v1569);
    }
  }
  v1572 = v1739;
  if (v1739)
  {
    v1573 = (unint64_t *)&v1739->__shared_owners_;
    do
      v1574 = __ldaxr(v1573);
    while (__stlxr(v1574 - 1, v1573));
    if (!v1574)
    {
      ((void (*)(std::__shared_weak_count *))v1572->__on_zero_shared)(v1572);
      std::__shared_weak_count::__release_weak(v1572);
    }
  }

}

void sub_19F22921C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  md::GridRenderResources *v53;
  void *v54;

  STACK[0x2D8] = a1;
  v26 = *(_QWORD *)(v23 + 64);
  if (v26 <= v25)
    v26 = v25;
  *(_QWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 64) = v26;
  geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::~MarkedLRUCache(a15);
  v22[19] = &off_1E42B59B0;
  v22[21] = 3131955885;
  v27 = (std::__shared_weak_count *)v22[18];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v22[16];
  v22[16] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v22[15];
  v22[15] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v22[14];
  v22[14] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v22[13];
  v22[13] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v22[12];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v22[10];
  v22[10] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v22[9];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)v22[7];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v22[5];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)v22[3];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)v22[1];
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  MEMORY[0x1A1AF4E00](v22, 0x10F0C40B254EF16);
  v53 = (md::GridRenderResources *)v24[6];
  v24[6] = 0;
  if (v53)
  {
    md::GridRenderResources::~GridRenderResources(v53);
    MEMORY[0x1A1AF4E00]();
  }
  *v24 = off_1E428C468;
  v54 = (void *)v24[1];
  if (v54)
  {
    v24[2] = v54;
    operator delete(v54);
  }

  MEMORY[0x1A1AF4E00](v24, 0x10A1C40581CDB8FLL);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](a22);
  _Unwind_Resume((_Unwind_Exception *)STACK[0x2D8]);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::CartographicTiledVectorRenderLayer(uint64_t a1, char a2, const void *a3, uint64_t a4, uint64_t a5, const RenderTargetFormat *a6, void *a7, int a8, uint64_t a9)
{
  VKSharedResources *v16;
  size_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  md::CartographicTiledRenderResources *v26;
  __int128 v28;

  v16 = a7;
  if (a4)
  {
    if (a4 < 0)
      abort();
    v17 = 2 * a4;
    v18 = (char *)operator new(v17);
    v19 = &v18[v17];
    memmove(v18, a3, v17);
    *(_QWORD *)&v20 = v18;
    *((_QWORD *)&v20 + 1) = &v18[v17];
  }
  else
  {
    v19 = 0;
    v20 = 0uLL;
  }
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v22 = *(const void **)a9;
  v21 = *(_QWORD *)(a9 + 8);
  v23 = v21 - *(_QWORD *)a9;
  if (v21 != *(_QWORD *)a9)
  {
    v28 = v20;
    if (v23 < 0)
      abort();
    v24 = (char *)operator new(v21 - (_QWORD)v22);
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v24;
    v25 = &v24[2 * (v23 >> 1)];
    *(_QWORD *)(a1 + 24) = v25;
    memcpy(v24, v22, v23);
    *(_QWORD *)(a1 + 16) = v25;
    v20 = v28;
  }
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = a2;
  *(_QWORD *)(a1 + 40) = a5;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB4CB0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v20;
  *(_QWORD *)(a1 + 336) = v19;
  *(_DWORD *)(a1 + 344) = 1;
  *(_QWORD *)a1 = off_1E42A9BC8;
  *(_QWORD *)(a1 + 352) = 0;
  v26 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v26, v16, a6);
  *(_QWORD *)(a1 + 352) = v26;

  return a1;
}

void sub_19F22BF54(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1A1AF4E00](v3, 0x10A0C40ACD82FEFLL);
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer(v2);

  _Unwind_Resume(a1);
}

uint64_t md::GeometryLogic::createUnitTransformConstantData(md::GeometryLogic *this)
{
  _QWORD *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42E22E8;
  result = ggl::BufferData::BufferData((uint64_t)(v2 + 3), qword_1EE54AFA0, 2, 1, 6, 1);
  v2[28] = ggl::Tile::Transform::reflection(void)::reflection;
  v2[3] = &off_1E42B97F0;
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = v2;
  v4 = v2[4];
  v6 = v2[11];
  v5 = v2[12];
  *(_OWORD *)(v5 + 32) = xmmword_19FFB34C0;
  *(_OWORD *)(v5 + 48) = xmmword_19FFB39C0;
  *(_OWORD *)(v5 + 64) = xmmword_19FFB39D0;
  *(_OWORD *)(v5 + 80) = xmmword_19FFB3970;
  *(_OWORD *)(v5 + 96) = xmmword_19FFB39E0;
  *(_OWORD *)(v5 + 112) = xmmword_19FFB39F0;
  *(_OWORD *)(v5 + 128) = xmmword_19FFB3A00;
  *(_OWORD *)(v5 + 144) = xmmword_19FFB3A10;
  *(_OWORD *)(v5 + 160) = xmmword_19FFB3A20;
  *(_OWORD *)(v5 + 176) = xmmword_19FFB3A30;
  *(_OWORD *)(v5 + 192) = xmmword_19FFB3A40;
  *(_OWORD *)(v5 + 208) = xmmword_19FFB3A50;
  *(_OWORD *)(v5 + 224) = xmmword_19FFB2D90;
  *(_OWORD *)(v5 + 240) = xmmword_19FFB3A60;
  *(_OWORD *)(v5 + 256) = xmmword_19FFB3A70;
  *(_OWORD *)(v5 + 272) = xmmword_19FFB3950;
  *(_OWORD *)v5 = xmmword_19FFB3980;
  *(_QWORD *)(v5 + 16) = 1065353216;
  *(_DWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 348) = 1065353216;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)(v5 + 340) = _Q0;
  *(_OWORD *)(v5 + 288) = xmmword_19FFB3A80;
  if (v6 > v4)
    v4 = v6;
  v2[10] = 0;
  v2[11] = v4;
  return result;
}

double gm::inverse<double>(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double result;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;

  v2 = a2[10];
  v3 = a2[11];
  v5 = a2[14];
  v4 = a2[15];
  v6 = a2[4];
  v7 = a2[5];
  v9 = a2[8];
  v8 = a2[9];
  v11 = a2[6];
  v10 = a2[7];
  v13 = a2[12];
  v12 = a2[13];
  v66 = v5 * v3 * v7 + v8 * v4 * v11 + v12 * v2 * v10;
  v67 = v8 * v5;
  v65 = v4 * v2 * v7 + v8 * v5 * v10 + v11 * v3 * v12;
  v63 = v6 * v3 * v5 + v9 * v11 * v4 + (v13 * v10 - v6 * v4) * v2;
  v64 = v9 * v10 * v5 + v13 * v11 * v3;
  v62 = v6 * v3 * v12 + v9 * v7 * v4 + v13 * v10 * v8;
  v61 = v8 * v4 * v6 + v9 * v10 * v12 + v13 * v7 * v3;
  v59 = v12 * v2 * v6 + v13 * v11 * v8 + (v9 * v7 - v6 * v8) * v5;
  v60 = v9 * v11 * v12 + v13 * v7 * v2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a2[3];
  v56 = v15 * v8;
  v57 = v5 * v3 * v14 + v15 * v8 * v4 + (v16 * v12 - v14 * v4) * v2;
  v17 = v15 * v9;
  v55 = v15 * v9 * v4 + v16 * v13 * v2 + *a2 * v3 * v5;
  v18 = v16 * v9;
  v19 = v14 * v9;
  v20 = v14 * v13;
  v21 = v16 * v13 - *a2 * v4;
  v58 = v21 * v8 - (v14 * v13 * v3 - v14 * v9 * v4) + (*a2 * v3 - v16 * v9) * v12;
  v53 = v14 * v9 * v5 + v15 * v13 * v8 + *a2 * v2 * v12;
  v54 = v15 * v13 * v3 + v16 * v9 * v5 + *a2 * v2 * v4;
  v52 = v14 * v10 * v5 + v15 * v7 * v4 + v16 * v12 * v11;
  v22 = v15 * v6;
  v23 = v21 * v11 - (v15 * v13 * v10 - v15 * v6 * v4);
  v24 = v14 * v6;
  v25 = v14 * v6 * v4 + v16 * v13 * v7;
  v26 = -(v14 * v13 * v11 - v15 * v13 * v7);
  v27 = v15 * v12 * v3 + v16 * v8 * v5;
  v28 = v16 * v7;
  v29 = v11 * v4 * v14 + v15 * v12 * v10 + v16 * v7 * v5;
  v30 = v16 * v6;
  v31 = *a2 * v10;
  v51 = v23 + (v31 - v30) * v5;
  v32 = *a2 * v7;
  v33 = v24 - v32;
  v34 = v26 + (v24 - v32) * v5;
  v35 = v14 * v10 * v2 + v16 * v8 * v11 + (v15 * v7 - v14 * v11) * v3;
  v36 = v22 * v3 + v18 * v11;
  v37 = -(v19 * v10 - v18 * v7);
  v38 = v24 * v2 + v17 * v7;
  v39 = v20 * v2 + v17 * v12;
  v40 = v20 * v10 + v30 * v12;
  v41 = v37 + v33 * v3;
  v42 = v17 * v10 + v30 * v2 + *a2 * v11 * v3;
  v43 = v41 + (v31 - v30) * v8;
  v44 = v38 + *a2 * v11 * v8;
  v45 = v19 * v11 + v22 * v8;
  v46 = v34 + (*a2 * v11 - v22) * v12;
  v47 = v39 + v67 * *a2 - v53;
  v48 = v35 - (v56 * v10 + v28 * v2);
  v49 = 1.0 / (*a2 * (v65 - v66) + (v63 - v64) * v14 + (v59 - v60) * v16 + (v61 - v62) * v15);
  *a1 = (v65 - v66) * v49;
  a1[1] = (v57 - v27) * v49;
  a1[2] = (v29 - v52) * v49;
  a1[3] = v48 * v49;
  a1[4] = (v63 - v64) * v49;
  a1[5] = (v54 - v55) * v49;
  a1[6] = v51 * v49;
  a1[7] = (v42 - (v36 + v31 * v2)) * v49;
  a1[8] = (v61 - v62) * v49;
  a1[9] = v58 * v49;
  a1[10] = (v40 + v32 * v4 - (v25 + v31 * v12)) * v49;
  a1[11] = v43 * v49;
  a1[12] = (v59 - v60) * v49;
  a1[13] = v47 * v49;
  result = (v45 + v32 * v2 - v44) * v49;
  a1[14] = v46 * v49;
  a1[15] = result;
  return result;
}

void md::PassList::didPrepareForLayout(md::PassList *this, const md::LayoutContext *a2, id *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;
  _OWORD v22[6];
  _OWORD v23[5];
  int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 128);
  md::LayoutContext::frameState(a2);
  *(_QWORD *)(*((_QWORD *)this + 3) + 128) = (unint64_t)(*(double *)(v7 + 88) * 1000.0);
  v8 = objc_msgSend(a3[13], "finalRenderTarget");
  if (v8)
  {
    v10 = *((_QWORD *)this + 3);
    v11 = *(_DWORD **)(v8 + 336);
    if (v11)
    {
      LODWORD(v12) = v11[9];
      LODWORD(v11) = v11[10];
LABEL_26:
      *(_DWORD *)(v10 + 40) = v12;
      *(_DWORD *)(v10 + 44) = (_DWORD)v11;
      v21 = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v10 + 48) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v10 + 64) = v21;
      goto LABEL_27;
    }
    v12 = *(_QWORD *)(v8 + 88);
    if (v12)
    {
      v13 = (_DWORD *)(v8 + 96);
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 280);
      if (!v12)
        goto LABEL_15;
      v13 = (_DWORD *)(v8 + 288);
    }
    v14 = 80;
    if (*(_DWORD *)(v12 + 56) == 3)
      v14 = 196;
    v15 = *(_DWORD *)(v12 + v14);
    v16 = v15 >> *v13;
    if (v16 <= 1)
      v16 = 1;
    if (v15)
      LODWORD(v12) = v16;
    else
      LODWORD(v12) = 0;
LABEL_15:
    v11 = *(_DWORD **)(v8 + 88);
    if (v11)
    {
      v17 = (_DWORD *)(v8 + 96);
    }
    else
    {
      v11 = *(_DWORD **)(v8 + 280);
      if (!v11)
        goto LABEL_26;
      v17 = (_DWORD *)(v8 + 288);
    }
    v18 = 21;
    if (v11[14] == 3)
      v18 = 49;
    v19 = v11[v18];
    v20 = v19 >> *v17;
    if (v20 <= 1)
      v20 = 1;
    if (v19)
      LODWORD(v11) = v20;
    else
      LODWORD(v11) = 0;
    goto LABEL_26;
  }
LABEL_27:
  memset(v23, 0, sizeof(v23));
  v25 = 0u;
  v26 = 0u;
  v24 = 1065353216;
  v27 = 1065353216;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v31 = 0;
  memset(v22, 0, 73);
  md::FrameGraphUtils::prepareGraphBuilderForRenderTarget((uint64_t)v22, (uint64_t)v23, (_QWORD *)v8, "renderTarget_colorBuffer", 0xC1B9767C00000018, "renderTarget_depthStencilBuffer", 0xE505BC120000001FLL, v9, "renderTarget_msaaResolveBuffer", 0xF53364270000001ELL);
  (*(void (**)(md::PassList *, const md::LayoutContext *, id *, _OWORD *, _OWORD *))(*(_QWORD *)this + 24))(this, a2, a3, v22, v23);
  md::PassList::updateGraphState((float **)this, (md::FrameGraphBuilder *)v23, v6);
  md::FrameGraphBuilder::~FrameGraphBuilder((md::FrameGraphBuilder *)v23);
}

void sub_19F22C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  md::FrameGraphBuilder::~FrameGraphBuilder((md::FrameGraphBuilder *)va);
  _Unwind_Resume(a1);
}

void md::FrameGraphBuilder::build(md::FrameGraphBuilder *this, md::FrameGraphResourceRegistry *a2, float *a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t *v52;
  unsigned __int8 **v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t **v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _BYTE *v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  unsigned __int8 **v103;
  unsigned __int8 **v104;
  unsigned __int8 *v105;
  uint64_t *v106;
  uint64_t **v107;
  uint64_t **v108;
  unsigned int v109;
  uint64_t *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  _BYTE *v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  uint64_t **v129;
  int isAcyclicDFS;
  char v131;
  uint64_t *v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t v137;
  md::FrameGraphResourceRegistry *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  __int128 v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  int8x8_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint8x8_t v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned __int8 *v184;
  char *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  int8x8_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint8x8_t v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  float32x2_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *p_shared_owners;
  unint64_t v225;
  int *v226;
  int v227;
  BOOL v228;
  int *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  int v255;
  uint32x2_t v256;
  double v257;
  float32x2_t v258;
  float32x2_t v259;
  float32x2_t v260;
  float32x2_t v261;
  double v262;
  double v263;
  double v264;
  unsigned int v265;
  double v266;
  unsigned int v267;
  double v268;
  double v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  uint64_t *v273;
  uint64_t **v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  int v279;
  unint64_t *v280;
  unint64_t v281;
  int v282;
  unsigned __int8 v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t *v287;
  char *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t *v291;
  uint64_t *v292;
  int64_t v293;
  char *v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  char v318;
  uint64_t v319;
  int v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  char *v325;
  char *v326;
  __int128 v327;
  uint64_t v328;
  char *v329;
  __int128 v330;
  char *v331;
  int64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  int64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  char *v358;
  __int128 v359;
  char *v360;
  _QWORD *v361;
  char *v362;
  unint64_t v363;
  __int128 v365;
  char *v367;
  md::FrameGraphResourceRegistry *v368;
  unsigned __int8 **v369;
  char *v370;
  void *v371[2];
  __int128 v372;
  uint64_t v373;
  uint64_t **v374;
  uint64_t *v375;
  uint64_t v376;
  _QWORD v377[2];
  void *__p;
  __int128 v379;
  char v380;
  __int128 v381;
  int v382;
  unsigned __int8 *v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  double v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  uint64_t v391;

  v391 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
  v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  if (v5 == (unsigned __int8 **)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_0 &,std::unique_ptr<md::FrameGraphPass> *,false>(v4, v5, v7, 1);
  v8 = *((_QWORD *)a2 + 3);
  v361 = (_QWORD *)((char *)a2 + 24);
  v9 = (unsigned __int8 **)*((_QWORD *)a2 + 4);
  v10 = 126 - 2 * __clz(((uint64_t)v9 - v8) >> 3);
  if (v9 == (unsigned __int8 **)v8)
    v11 = 0;
  else
    v11 = v10;
  std::__introsort<std::_ClassicAlgPolicy,md::FrameGraphBuilder::build(md::FrameGraphResourceRegistry *)::$_1 &,std::unique_ptr<md::FrameGraphLogicalResource> *,false>(v8, v9, v11, 1);
  v375 = 0;
  v376 = 0;
  v374 = &v375;
  v12 = *(unsigned __int8 ***)a2;
  v368 = a2;
  v369 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
  if (*(unsigned __int8 ***)a2 == v369)
    goto LABEL_244;
  do
  {
    v13 = *v12;
    v14 = v375;
    v15 = &v375;
    v16 = &v375;
    if (v375)
    {
      v17 = *v13;
      v18 = v375;
      do
      {
        v19 = *(unsigned __int8 *)v18[4];
        if (v17 >= v19)
        {
          if (v19 >= v17)
            goto LABEL_27;
          ++v18;
        }
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      v20 = *v13;
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v14;
          v21 = *(unsigned __int8 *)v14[4];
          if (v20 >= v21)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_23;
        }
        if (v21 >= v20)
          break;
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      v22 = (uint64_t *)operator new(0x40uLL);
      v22[4] = (uint64_t)v13;
      v22[5] = 0;
      v22[6] = 0;
      v22[7] = 0;
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v16;
      *v15 = v22;
      if (*v374)
      {
        v374 = (uint64_t **)*v374;
        v23 = *v15;
      }
      else
      {
        v23 = v22;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v375, v23);
      ++v376;
      v13 = *v12;
    }
LABEL_27:
    v24 = (unsigned __int8 *)*((_QWORD *)v13 + 7);
    v25 = v13 + 64;
    if (v24 != v13 + 64)
    {
      do
      {
        v26 = *((_QWORD *)v24 + 4);
        v27 = *(_QWORD **)(v26 + 64);
        v28 = (_QWORD *)(v26 + 72);
        if (v27 != (_QWORD *)(v26 + 72))
        {
          do
          {
            v31 = (uint64_t *)*v12;
            v383 = (unsigned __int8 *)v27[4];
            v32 = v375;
            v33 = &v375;
            v34 = &v375;
            if (v375)
            {
              v35 = *(unsigned __int8 *)v31;
              while (1)
              {
                while (1)
                {
                  v34 = (uint64_t **)v32;
                  v36 = *(unsigned __int8 *)v32[4];
                  if (v35 >= v36)
                    break;
                  v32 = *v34;
                  v33 = v34;
                  if (!*v34)
                    goto LABEL_42;
                }
                if (v36 >= v35)
                  break;
                v32 = v34[1];
                if (!v32)
                {
                  v33 = v34 + 1;
                  goto LABEL_42;
                }
              }
            }
            else
            {
LABEL_42:
              v37 = (uint64_t *)v34;
              v34 = (uint64_t **)operator new(0x40uLL);
              v34[4] = v31;
              v34[5] = 0;
              v34[6] = 0;
              v34[7] = 0;
              *v34 = 0;
              v34[1] = 0;
              v34[2] = v37;
              *v33 = (uint64_t *)v34;
              v38 = (uint64_t *)v34;
              if (*v374)
              {
                v374 = (uint64_t **)*v374;
                v38 = *v33;
              }
              v39 = v375;
              v228 = v38 == v375;
              *((_BYTE *)v38 + 24) = v38 == v375;
              if (!v228)
              {
                do
                {
                  v40 = v38[2];
                  if (*(_BYTE *)(v40 + 24))
                    break;
                  v41 = *(uint64_t **)(v40 + 16);
                  v42 = *v41;
                  if (*v41 == v40)
                  {
                    v45 = v41[1];
                    if (!v45 || (v46 = *(unsigned __int8 *)(v45 + 24), v43 = (_BYTE *)(v45 + 24), v46))
                    {
                      if (*(uint64_t **)v40 == v38)
                      {
                        v47 = v38[2];
                      }
                      else
                      {
                        v47 = *(_QWORD *)(v40 + 8);
                        v48 = *(_QWORD *)v47;
                        *(_QWORD *)(v40 + 8) = *(_QWORD *)v47;
                        if (v48)
                        {
                          *(_QWORD *)(v48 + 16) = v40;
                          v41 = *(uint64_t **)(v40 + 16);
                        }
                        *(_QWORD *)(v47 + 16) = v41;
                        *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v47;
                        *(_QWORD *)v47 = v40;
                        *(_QWORD *)(v40 + 16) = v47;
                        v41 = *(uint64_t **)(v47 + 16);
                        v40 = *v41;
                      }
                      *(_BYTE *)(v47 + 24) = 1;
                      *((_BYTE *)v41 + 24) = 0;
                      v51 = *(_QWORD *)(v40 + 8);
                      *v41 = v51;
                      if (v51)
                        *(_QWORD *)(v51 + 16) = v41;
                      *(_QWORD *)(v40 + 16) = v41[2];
                      *(_QWORD *)(v41[2] + 8 * (*(_QWORD *)v41[2] != (_QWORD)v41)) = v40;
                      *(_QWORD *)(v40 + 8) = v41;
                      goto LABEL_71;
                    }
                  }
                  else if (!v42 || (v44 = *(unsigned __int8 *)(v42 + 24), v43 = (_BYTE *)(v42 + 24), v44))
                  {
                    if (*(uint64_t **)v40 == v38)
                    {
                      v49 = v38[1];
                      *(_QWORD *)v40 = v49;
                      if (v49)
                      {
                        *(_QWORD *)(v49 + 16) = v40;
                        v41 = *(uint64_t **)(v40 + 16);
                      }
                      v38[2] = (uint64_t)v41;
                      *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v38;
                      v38[1] = v40;
                      *(_QWORD *)(v40 + 16) = v38;
                      v41 = (uint64_t *)v38[2];
                    }
                    else
                    {
                      v38 = (uint64_t *)v38[2];
                    }
                    *((_BYTE *)v38 + 24) = 1;
                    *((_BYTE *)v41 + 24) = 0;
                    v40 = v41[1];
                    v50 = *(uint64_t **)v40;
                    v41[1] = *(_QWORD *)v40;
                    if (v50)
                      v50[2] = (uint64_t)v41;
                    *(_QWORD *)(v40 + 16) = v41[2];
                    *(_QWORD *)(v41[2] + 8 * (*(_QWORD *)v41[2] != (_QWORD)v41)) = v40;
                    *(_QWORD *)v40 = v41;
LABEL_71:
                    v41[2] = v40;
                    break;
                  }
                  *(_BYTE *)(v40 + 24) = 1;
                  v38 = v41;
                  *((_BYTE *)v41 + 24) = v41 == v39;
                  *v43 = 1;
                }
                while (v41 != v39);
              }
              ++v376;
            }
            v53 = (unsigned __int8 **)v34[5];
            v54 = (unsigned __int8 **)v34[6];
            v52 = (unint64_t *)(v34 + 5);
            if (v53 != v54)
            {
              while (**v53 < *v383)
              {
                if (++v53 == v54)
                {
                  v53 = v54;
                  goto LABEL_79;
                }
              }
            }
            if (v53 == v54 || (v55 = v383, *v383 != **v53))
            {
LABEL_79:
              std::vector<md::FrameGraphPass *>::insert(v52, v53, (char *)&v383);
              v55 = v383;
            }
            v56 = v375;
            v57 = &v375;
            v58 = &v375;
            if (v375)
            {
              v59 = *v55;
              v60 = v375;
              do
              {
                v61 = *(unsigned __int8 *)v60[4];
                if (v59 >= v61)
                {
                  if (v61 >= v59)
                    goto LABEL_122;
                  ++v60;
                }
                v60 = (uint64_t *)*v60;
              }
              while (v60);
              while (1)
              {
                while (1)
                {
                  v58 = (uint64_t **)v56;
                  v62 = *(unsigned __int8 *)v56[4];
                  if (v59 >= v62)
                    break;
                  v56 = *v58;
                  v57 = v58;
                  if (!*v58)
                    goto LABEL_91;
                }
                if (v62 >= v59)
                  break;
                v56 = v58[1];
                if (!v56)
                {
                  v57 = v58 + 1;
                  goto LABEL_91;
                }
              }
            }
            else
            {
LABEL_91:
              v63 = (uint64_t *)operator new(0x40uLL);
              v63[4] = (uint64_t)v55;
              v63[5] = 0;
              v63[6] = 0;
              v63[7] = 0;
              *v63 = 0;
              v63[1] = 0;
              v63[2] = (uint64_t)v58;
              *v57 = v63;
              if (*v374)
              {
                v374 = (uint64_t **)*v374;
                v63 = *v57;
              }
              v64 = v375;
              v228 = v63 == v375;
              *((_BYTE *)v63 + 24) = v63 == v375;
              if (!v228)
              {
                do
                {
                  v65 = v63[2];
                  if (*(_BYTE *)(v65 + 24))
                    break;
                  v66 = *(uint64_t **)(v65 + 16);
                  v67 = *v66;
                  if (*v66 == v65)
                  {
                    v70 = v66[1];
                    if (!v70 || (v71 = *(unsigned __int8 *)(v70 + 24), v68 = (_BYTE *)(v70 + 24), v71))
                    {
                      if (*(uint64_t **)v65 == v63)
                      {
                        v72 = v63[2];
                      }
                      else
                      {
                        v72 = *(_QWORD *)(v65 + 8);
                        v73 = *(_QWORD *)v72;
                        *(_QWORD *)(v65 + 8) = *(_QWORD *)v72;
                        if (v73)
                        {
                          *(_QWORD *)(v73 + 16) = v65;
                          v66 = *(uint64_t **)(v65 + 16);
                        }
                        *(_QWORD *)(v72 + 16) = v66;
                        *(_QWORD *)(*(_QWORD *)(v65 + 16) + 8 * (**(_QWORD **)(v65 + 16) != v65)) = v72;
                        *(_QWORD *)v72 = v65;
                        *(_QWORD *)(v65 + 16) = v72;
                        v66 = *(uint64_t **)(v72 + 16);
                        v65 = *v66;
                      }
                      *(_BYTE *)(v72 + 24) = 1;
                      *((_BYTE *)v66 + 24) = 0;
                      v76 = *(_QWORD *)(v65 + 8);
                      *v66 = v76;
                      if (v76)
                        *(_QWORD *)(v76 + 16) = v66;
                      *(_QWORD *)(v65 + 16) = v66[2];
                      *(_QWORD *)(v66[2] + 8 * (*(_QWORD *)v66[2] != (_QWORD)v66)) = v65;
                      *(_QWORD *)(v65 + 8) = v66;
                      goto LABEL_120;
                    }
                  }
                  else if (!v67 || (v69 = *(unsigned __int8 *)(v67 + 24), v68 = (_BYTE *)(v67 + 24), v69))
                  {
                    if (*(uint64_t **)v65 == v63)
                    {
                      v74 = v63[1];
                      *(_QWORD *)v65 = v74;
                      if (v74)
                      {
                        *(_QWORD *)(v74 + 16) = v65;
                        v66 = *(uint64_t **)(v65 + 16);
                      }
                      v63[2] = (uint64_t)v66;
                      *(_QWORD *)(*(_QWORD *)(v65 + 16) + 8 * (**(_QWORD **)(v65 + 16) != v65)) = v63;
                      v63[1] = v65;
                      *(_QWORD *)(v65 + 16) = v63;
                      v66 = (uint64_t *)v63[2];
                    }
                    else
                    {
                      v63 = (uint64_t *)v63[2];
                    }
                    *((_BYTE *)v63 + 24) = 1;
                    *((_BYTE *)v66 + 24) = 0;
                    v65 = v66[1];
                    v75 = *(uint64_t **)v65;
                    v66[1] = *(_QWORD *)v65;
                    if (v75)
                      v75[2] = (uint64_t)v66;
                    *(_QWORD *)(v65 + 16) = v66[2];
                    *(_QWORD *)(v66[2] + 8 * (*(_QWORD *)v66[2] != (_QWORD)v66)) = v65;
                    *(_QWORD *)v65 = v66;
LABEL_120:
                    v66[2] = v65;
                    break;
                  }
                  *(_BYTE *)(v65 + 24) = 1;
                  v63 = v66;
                  *((_BYTE *)v66 + 24) = v66 == v64;
                  *v68 = 1;
                }
                while (v66 != v64);
              }
              ++v376;
            }
LABEL_122:
            v77 = (_QWORD *)v27[1];
            if (v77)
            {
              do
              {
                v78 = v77;
                v77 = (_QWORD *)*v77;
              }
              while (v77);
            }
            else
            {
              do
              {
                v78 = (_QWORD *)v27[2];
                v228 = *v78 == (_QWORD)v27;
                v27 = v78;
              }
              while (!v228);
            }
            v27 = v78;
          }
          while (v78 != v28);
        }
        v29 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(unsigned __int8 **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
            v228 = *(_QWORD *)v30 == (_QWORD)v24;
            v24 = v30;
          }
          while (!v228);
        }
        v24 = v30;
      }
      while (v30 != v25);
      v13 = *v12;
    }
    v79 = (unsigned __int8 *)*((_QWORD *)v13 + 13);
    v80 = v13 + 112;
    if (v79 != v13 + 112)
    {
      do
      {
        v81 = (uint64_t *)*v12;
        v383 = (unsigned __int8 *)*((_QWORD *)v79 + 4);
        v82 = v375;
        v83 = &v375;
        v84 = &v375;
        if (v375)
        {
          v85 = *(unsigned __int8 *)v81;
          while (1)
          {
            while (1)
            {
              v84 = (uint64_t **)v82;
              v86 = *(unsigned __int8 *)v82[4];
              if (v85 >= v86)
                break;
              v82 = *v84;
              v83 = v84;
              if (!*v84)
                goto LABEL_142;
            }
            if (v86 >= v85)
              break;
            v82 = v84[1];
            if (!v82)
            {
              v83 = v84 + 1;
              goto LABEL_142;
            }
          }
        }
        else
        {
LABEL_142:
          v87 = (uint64_t *)v84;
          v84 = (uint64_t **)operator new(0x40uLL);
          v84[4] = v81;
          v84[5] = 0;
          v84[6] = 0;
          v84[7] = 0;
          *v84 = 0;
          v84[1] = 0;
          v84[2] = v87;
          *v83 = (uint64_t *)v84;
          v88 = (uint64_t *)v84;
          if (*v374)
          {
            v374 = (uint64_t **)*v374;
            v88 = *v83;
          }
          v89 = v375;
          v228 = v88 == v375;
          *((_BYTE *)v88 + 24) = v88 == v375;
          if (!v228)
          {
            do
            {
              v90 = v88[2];
              if (*(_BYTE *)(v90 + 24))
                break;
              v91 = *(uint64_t **)(v90 + 16);
              v92 = *v91;
              if (*v91 == v90)
              {
                v95 = v91[1];
                if (!v95 || (v96 = *(unsigned __int8 *)(v95 + 24), v93 = (_BYTE *)(v95 + 24), v96))
                {
                  if (*(uint64_t **)v90 == v88)
                  {
                    v97 = v88[2];
                  }
                  else
                  {
                    v97 = *(_QWORD *)(v90 + 8);
                    v98 = *(_QWORD *)v97;
                    *(_QWORD *)(v90 + 8) = *(_QWORD *)v97;
                    if (v98)
                    {
                      *(_QWORD *)(v98 + 16) = v90;
                      v91 = *(uint64_t **)(v90 + 16);
                    }
                    *(_QWORD *)(v97 + 16) = v91;
                    *(_QWORD *)(*(_QWORD *)(v90 + 16) + 8 * (**(_QWORD **)(v90 + 16) != v90)) = v97;
                    *(_QWORD *)v97 = v90;
                    *(_QWORD *)(v90 + 16) = v97;
                    v91 = *(uint64_t **)(v97 + 16);
                    v90 = *v91;
                  }
                  *(_BYTE *)(v97 + 24) = 1;
                  *((_BYTE *)v91 + 24) = 0;
                  v101 = *(_QWORD *)(v90 + 8);
                  *v91 = v101;
                  if (v101)
                    *(_QWORD *)(v101 + 16) = v91;
                  *(_QWORD *)(v90 + 16) = v91[2];
                  *(_QWORD *)(v91[2] + 8 * (*(_QWORD *)v91[2] != (_QWORD)v91)) = v90;
                  *(_QWORD *)(v90 + 8) = v91;
                  goto LABEL_171;
                }
              }
              else if (!v92 || (v94 = *(unsigned __int8 *)(v92 + 24), v93 = (_BYTE *)(v92 + 24), v94))
              {
                if (*(uint64_t **)v90 == v88)
                {
                  v99 = v88[1];
                  *(_QWORD *)v90 = v99;
                  if (v99)
                  {
                    *(_QWORD *)(v99 + 16) = v90;
                    v91 = *(uint64_t **)(v90 + 16);
                  }
                  v88[2] = (uint64_t)v91;
                  *(_QWORD *)(*(_QWORD *)(v90 + 16) + 8 * (**(_QWORD **)(v90 + 16) != v90)) = v88;
                  v88[1] = v90;
                  *(_QWORD *)(v90 + 16) = v88;
                  v91 = (uint64_t *)v88[2];
                }
                else
                {
                  v88 = (uint64_t *)v88[2];
                }
                *((_BYTE *)v88 + 24) = 1;
                *((_BYTE *)v91 + 24) = 0;
                v90 = v91[1];
                v100 = *(uint64_t **)v90;
                v91[1] = *(_QWORD *)v90;
                if (v100)
                  v100[2] = (uint64_t)v91;
                *(_QWORD *)(v90 + 16) = v91[2];
                *(_QWORD *)(v91[2] + 8 * (*(_QWORD *)v91[2] != (_QWORD)v91)) = v90;
                *(_QWORD *)v90 = v91;
LABEL_171:
                v91[2] = v90;
                break;
              }
              *(_BYTE *)(v90 + 24) = 1;
              v88 = v91;
              *((_BYTE *)v91 + 24) = v91 == v89;
              *v93 = 1;
            }
            while (v91 != v89);
          }
          ++v376;
        }
        v103 = (unsigned __int8 **)v84[5];
        v104 = (unsigned __int8 **)v84[6];
        v102 = (unint64_t *)(v84 + 5);
        if (v103 != v104)
        {
          while (**v103 < *v383)
          {
            if (++v103 == v104)
            {
              v103 = v104;
              goto LABEL_179;
            }
          }
        }
        if (v103 == v104 || (v105 = v383, *v383 != **v103))
        {
LABEL_179:
          std::vector<md::FrameGraphPass *>::insert(v102, v103, (char *)&v383);
          v105 = v383;
        }
        v106 = v375;
        v107 = &v375;
        v108 = &v375;
        if (v375)
        {
          v109 = *v105;
          v110 = v375;
          do
          {
            v111 = *(unsigned __int8 *)v110[4];
            if (v109 >= v111)
            {
              if (v111 >= v109)
                goto LABEL_223;
              ++v110;
            }
            v110 = (uint64_t *)*v110;
          }
          while (v110);
          while (1)
          {
            while (1)
            {
              v108 = (uint64_t **)v106;
              v112 = *(unsigned __int8 *)v106[4];
              if (v109 >= v112)
                break;
              v106 = *v108;
              v107 = v108;
              if (!*v108)
                goto LABEL_192;
            }
            if (v112 >= v109)
              break;
            v106 = v108[1];
            if (!v106)
            {
              v107 = v108 + 1;
              goto LABEL_192;
            }
          }
        }
        else
        {
LABEL_192:
          v113 = (uint64_t *)operator new(0x40uLL);
          v113[4] = (uint64_t)v105;
          v113[5] = 0;
          v113[6] = 0;
          v113[7] = 0;
          *v113 = 0;
          v113[1] = 0;
          v113[2] = (uint64_t)v108;
          *v107 = v113;
          if (*v374)
          {
            v374 = (uint64_t **)*v374;
            v113 = *v107;
          }
          v114 = v375;
          v228 = v113 == v375;
          *((_BYTE *)v113 + 24) = v113 == v375;
          if (!v228)
          {
            do
            {
              v115 = v113[2];
              if (*(_BYTE *)(v115 + 24))
                break;
              v116 = *(uint64_t **)(v115 + 16);
              v117 = *v116;
              if (*v116 == v115)
              {
                v120 = v116[1];
                if (!v120 || (v121 = *(unsigned __int8 *)(v120 + 24), v118 = (_BYTE *)(v120 + 24), v121))
                {
                  if (*(uint64_t **)v115 == v113)
                  {
                    v122 = v113[2];
                  }
                  else
                  {
                    v122 = *(_QWORD *)(v115 + 8);
                    v123 = *(_QWORD *)v122;
                    *(_QWORD *)(v115 + 8) = *(_QWORD *)v122;
                    if (v123)
                    {
                      *(_QWORD *)(v123 + 16) = v115;
                      v116 = *(uint64_t **)(v115 + 16);
                    }
                    *(_QWORD *)(v122 + 16) = v116;
                    *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8 * (**(_QWORD **)(v115 + 16) != v115)) = v122;
                    *(_QWORD *)v122 = v115;
                    *(_QWORD *)(v115 + 16) = v122;
                    v116 = *(uint64_t **)(v122 + 16);
                    v115 = *v116;
                  }
                  *(_BYTE *)(v122 + 24) = 1;
                  *((_BYTE *)v116 + 24) = 0;
                  v126 = *(_QWORD *)(v115 + 8);
                  *v116 = v126;
                  if (v126)
                    *(_QWORD *)(v126 + 16) = v116;
                  *(_QWORD *)(v115 + 16) = v116[2];
                  *(_QWORD *)(v116[2] + 8 * (*(_QWORD *)v116[2] != (_QWORD)v116)) = v115;
                  *(_QWORD *)(v115 + 8) = v116;
                  goto LABEL_221;
                }
              }
              else if (!v117 || (v119 = *(unsigned __int8 *)(v117 + 24), v118 = (_BYTE *)(v117 + 24), v119))
              {
                if (*(uint64_t **)v115 == v113)
                {
                  v124 = v113[1];
                  *(_QWORD *)v115 = v124;
                  if (v124)
                  {
                    *(_QWORD *)(v124 + 16) = v115;
                    v116 = *(uint64_t **)(v115 + 16);
                  }
                  v113[2] = (uint64_t)v116;
                  *(_QWORD *)(*(_QWORD *)(v115 + 16) + 8 * (**(_QWORD **)(v115 + 16) != v115)) = v113;
                  v113[1] = v115;
                  *(_QWORD *)(v115 + 16) = v113;
                  v116 = (uint64_t *)v113[2];
                }
                else
                {
                  v113 = (uint64_t *)v113[2];
                }
                *((_BYTE *)v113 + 24) = 1;
                *((_BYTE *)v116 + 24) = 0;
                v115 = v116[1];
                v125 = *(uint64_t **)v115;
                v116[1] = *(_QWORD *)v115;
                if (v125)
                  v125[2] = (uint64_t)v116;
                *(_QWORD *)(v115 + 16) = v116[2];
                *(_QWORD *)(v116[2] + 8 * (*(_QWORD *)v116[2] != (_QWORD)v116)) = v115;
                *(_QWORD *)v115 = v116;
LABEL_221:
                v116[2] = v115;
                break;
              }
              *(_BYTE *)(v115 + 24) = 1;
              v113 = v116;
              *((_BYTE *)v116 + 24) = v116 == v114;
              *v118 = 1;
            }
            while (v116 != v114);
          }
          ++v376;
        }
LABEL_223:
        v127 = (unsigned __int8 *)*((_QWORD *)v79 + 1);
        if (v127)
        {
          do
          {
            v128 = v127;
            v127 = *(unsigned __int8 **)v127;
          }
          while (v127);
        }
        else
        {
          do
          {
            v128 = (unsigned __int8 *)*((_QWORD *)v79 + 2);
            v228 = *(_QWORD *)v128 == (_QWORD)v79;
            v79 = v128;
          }
          while (!v228);
        }
        v79 = v128;
      }
      while (v128 != v80);
    }
    ++v12;
  }
  while (v12 != v369);
  v129 = v374;
  v383 = 0;
  v384 = 0;
  v385 = 0;
  __p = 0;
  v379 = 0uLL;
  if (v374 == &v375)
    goto LABEL_244;
  do
  {
    isAcyclicDFS = geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::isAcyclicDFS((uint64_t)&v374, (unsigned __int8 *)v129[4], (unint64_t *)&v383, (unint64_t *)&__p);
    v131 = isAcyclicDFS;
    if (!isAcyclicDFS)
      break;
    v132 = v129[1];
    if (v132)
    {
      do
      {
        v133 = (uint64_t **)v132;
        v132 = (uint64_t *)*v132;
      }
      while (v132);
    }
    else
    {
      do
      {
        v133 = (uint64_t **)v129[2];
        v228 = *v133 == (uint64_t *)v129;
        v129 = v133;
      }
      while (!v228);
    }
    v129 = v133;
  }
  while (v133 != &v375);
  if (__p)
    operator delete(__p);
  if (v383)
    operator delete(v383);
  if ((v131 & 1) != 0)
  {
LABEL_244:
    v372 = 0uLL;
    v373 = 0;
    v383 = 0;
    v384 = 0;
    v385 = 0;
    v134 = v374;
    if (v374 != &v375)
    {
      do
      {
        geo::DirectedGraph<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::vector<md::FrameGraphPass *>>::topologicalSortedDFS((uint64_t)&v374, (unsigned __int8 *)v134[4], (unint64_t *)&v383, (uint64_t)&v372);
        v135 = v134[1];
        if (v135)
        {
          do
          {
            v136 = (uint64_t **)v135;
            v135 = (uint64_t *)*v135;
          }
          while (v135);
        }
        else
        {
          do
          {
            v136 = (uint64_t **)v134[2];
            v228 = *v136 == (uint64_t *)v134;
            v134 = v136;
          }
          while (!v228);
        }
        v134 = v136;
      }
      while (v136 != &v375);
      if (v383)
        operator delete(v383);
    }
    v137 = v372;
    v138 = v368;
    if (*((_QWORD *)&v372 + 1) != (_QWORD)v372)
    {
      v139 = (uint64_t)(*((_QWORD *)&v372 + 1) - v372) >> 3;
      if (v139 <= 1)
        v139 = 1;
      if (v139 >= 2)
      {
        v141 = 0;
        v140 = v139 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v142 = (uint64_t *)(v137 + 8 * v141);
          v144 = *v142;
          v143 = v142[1];
          *(_QWORD *)(v144 + 16) = v141;
          *(_QWORD *)(v143 + 16) = v141 + 1;
          v141 += 2;
        }
        while (v141 != v140);
        goto LABEL_265;
      }
      v140 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v137 + 8 * v140) + 16) = v140;
        ++v140;
LABEL_265:
        ;
      }
      while (v139 != v140);
    }
    v145 = (unint64_t *)*((_QWORD *)v368 + 3);
    v146 = *((_QWORD *)v368 + 4);
    v365 = 0u;
    v147 = v146 - (_QWORD)v145;
    if ((unint64_t *)v146 == v145)
    {
      v149 = 0;
      v360 = 0;
      v359 = 0uLL;
      goto LABEL_516;
    }
    if (v147 < 0)
      goto LABEL_604;
    v148 = v147 >> 3;
    v149 = (char *)operator new(v146 - (_QWORD)v145);
    bzero(v149, v146 - (_QWORD)v145);
    *(_QWORD *)&v150 = v149;
    *((_QWORD *)&v150 + 1) = &v149[v147];
    v359 = v150;
    v151 = (_QWORD *)((char *)v368 + 88);
    v360 = &v149[8 * (v147 >> 3)];
    if (*((_QWORD *)v368 + 14))
    {
      v152 = 0;
      if (v148 <= 1)
        v153 = 1;
      else
        v153 = v147 >> 3;
      do
      {
        v154 = *(int8x8_t *)((char *)v368 + 96);
        if (v154)
        {
          v155 = v145[v152];
          v156 = 0x9DDFEA08EB382D69 * (((8 * v155) + 8) ^ HIDWORD(v155));
          v157 = 0x9DDFEA08EB382D69 * (HIDWORD(v155) ^ (v156 >> 47) ^ v156);
          v158 = 0x9DDFEA08EB382D69 * (v157 ^ (v157 >> 47));
          v159 = (uint8x8_t)vcnt_s8(v154);
          v159.i16[0] = vaddlv_u8(v159);
          if (v159.u32[0] > 1uLL)
          {
            v160 = v158;
            if (v158 >= *(_QWORD *)&v154)
              v160 = v158 % *(_QWORD *)&v154;
          }
          else
          {
            v160 = v158 & (*(_QWORD *)&v154 - 1);
          }
          v161 = *(_QWORD **)(*v151 + 8 * v160);
          if (v161)
          {
            v162 = (_QWORD *)*v161;
            if (v162)
            {
              if (v159.u32[0] < 2uLL)
              {
                v163 = *(_QWORD *)&v154 - 1;
                while (1)
                {
                  v165 = v162[1];
                  if (v165 == v158)
                  {
                    if (v162[2] == v155)
                      goto LABEL_272;
                  }
                  else if ((v165 & v163) != v160)
                  {
                    goto LABEL_273;
                  }
                  v162 = (_QWORD *)*v162;
                  if (!v162)
                    goto LABEL_273;
                }
              }
              do
              {
                v164 = v162[1];
                if (v164 == v158)
                {
                  if (v162[2] == v155)
                  {
LABEL_272:
                    *(_QWORD *)(v155 + 32) = v152;
                    *(_QWORD *)&v149[8 * v152] = v162[3];
                    break;
                  }
                }
                else
                {
                  if (v164 >= *(_QWORD *)&v154)
                    v164 %= *(_QWORD *)&v154;
                  if (v164 != v160)
                    break;
                }
                v162 = (_QWORD *)*v162;
              }
              while (v162);
            }
          }
        }
LABEL_273:
        ++v152;
      }
      while (v152 != v153);
      if (*((_BYTE *)v368 + 152))
      {
        if ((unint64_t *)v146 == v145)
          goto LABEL_516;
LABEL_300:
        if ((unint64_t)v147 < 0x7FFFFFFFFFFFFFF9)
        {
          v166 = (char *)operator new(2 * v147);
          v167 = 0;
          if (v148 <= 1)
            v168 = 1;
          else
            v168 = v147 >> 3;
          do
          {
            v170 = (_QWORD *)v145[v167];
            v171 = (_QWORD *)v170[5];
            if (v171 == v170 + 6)
            {
              v172 = 0;
              v173 = -1;
            }
            else
            {
              v172 = 0;
              v173 = -1;
              do
              {
                v174 = *(_QWORD *)(v171[4] + 16);
                if (v174 < v173)
                  v173 = *(_QWORD *)(v171[4] + 16);
                if (v172 <= v174)
                  v172 = *(_QWORD *)(v171[4] + 16);
                v175 = (_QWORD *)v171[1];
                if (v175)
                {
                  do
                  {
                    v176 = v175;
                    v175 = (_QWORD *)*v175;
                  }
                  while (v175);
                }
                else
                {
                  do
                  {
                    v176 = (_QWORD *)v171[2];
                    v228 = *v176 == (_QWORD)v171;
                    v171 = v176;
                  }
                  while (!v228);
                }
                v171 = v176;
              }
              while (v176 != v170 + 6);
            }
            v177 = (_QWORD *)v170[8];
            v178 = v170 + 9;
            if (v177 != v178)
            {
              do
              {
                v179 = *(_QWORD *)(v177[4] + 16);
                if (v179 < v173)
                  v173 = *(_QWORD *)(v177[4] + 16);
                if (v172 <= v179)
                  v172 = *(_QWORD *)(v177[4] + 16);
                v180 = (_QWORD *)v177[1];
                if (v180)
                {
                  do
                  {
                    v181 = v180;
                    v180 = (_QWORD *)*v180;
                  }
                  while (v180);
                }
                else
                {
                  do
                  {
                    v181 = (_QWORD *)v177[2];
                    v228 = *v181 == (_QWORD)v177;
                    v177 = v181;
                  }
                  while (!v228);
                }
                v177 = v181;
              }
              while (v181 != v178);
            }
            v169 = (unint64_t *)&v166[16 * v167];
            *v169 = v173;
            v169[1] = v172;
            ++v167;
          }
          while (v167 != v168);
          v358 = v166;
          v182 = 0;
          v362 = 0;
          v370 = 0;
          v183 = (_QWORD *)((char *)v368 + 88);
          while (1)
          {
            v184 = (unsigned __int8 *)v145[v182];
            if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v183, (unint64_t)v184)&& *((_QWORD *)v184 + 4) == -1)
            {
              break;
            }
LABEL_333:
            if (++v182 >= (unint64_t)((v146 - (uint64_t)v145) >> 3))
            {
              if (v370)
                operator delete(v370);
              operator delete(v358);
              v145 = (unint64_t *)*((_QWORD *)v138 + 3);
              v146 = *((_QWORD *)v138 + 4);
              v151 = (_QWORD *)((char *)v368 + 88);
              if ((unint64_t *)v146 == v145)
                goto LABEL_516;
LABEL_423:
              v216 = 0;
              v217 = (float32x2_t)vdup_n_s32(0x3F2AAAABu);
              while (2)
              {
                v218 = (unsigned __int8 *)v145[v216];
                if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v151, (unint64_t)v218)&& !*(_QWORD *)&v149[8 * *((_QWORD *)v218 + 4)])
                {
                  v220 = *v218;
                  if (v220 < 3)
                  {
                    v221 = v218[140];
                    if (v221 > 2)
                      goto LABEL_424;
                    if (v221 == 1)
                    {
                      v222 = *((_QWORD *)a3 + 14);
                      v223 = (std::__shared_weak_count *)*((_QWORD *)a3 + 15);
                      if (v223)
                      {
                        p_shared_owners = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldxr(p_shared_owners);
                        while (__stxr(v225 + 1, p_shared_owners));
                      }
                      v226 = (int *)(v218 + 108);
                      v227 = v218[112];
                      v228 = v227 == 0;
                      v229 = (int *)(a3 + 19);
LABEL_463:
                      if (v228)
                        v226 = v229;
                      v255 = *v226;
                      v357 = v222;
                      v256 = *(uint32x2_t *)(a3 + 10);
                      switch(v218[88])
                      {
                        case 0u:
                          v257 = *(double *)(v218 + 92);
                          HIDWORD(v257) = *((_DWORD *)v218 + 25);
                          break;
                        case 1u:
                          v258 = *(float32x2_t *)(v218 + 96);
                          v258.i32[1] = *((_DWORD *)v218 + 26);
                          v257 = COERCE_DOUBLE(vcvt_u32_f32(vmul_f32(v258, vcvt_f32_u32(v256))));
                          break;
                        case 2u:
                          v259 = *(float32x2_t *)(v218 + 96);
                          v259.i32[1] = *((_DWORD *)v218 + 26);
                          v260 = vrndp_f32(vmul_f32(vrnd_f32(vmul_f32(v259, vcvt_f32_u32(v256))), v217));
                          goto LABEL_471;
                        case 3u:
                          v261 = *(float32x2_t *)(v218 + 96);
                          v261.i32[1] = *((_DWORD *)v218 + 26);
                          v260 = vmul_f32(v261, vcvt_f32_u32(v256));
LABEL_471:
                          v257 = COERCE_DOUBLE(vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vcvt_u32_f32(v260), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL)));
                          break;
                        case 4u:
                          v262 = (double)v256.u32[1];
                          v263 = (double)v256.u32[0];
                          v257 = *(double *)(v218 + 92);
                          LODWORD(v219) = *((_DWORD *)v218 + 25);
                          HIDWORD(v257) = ((double)v219 * v262 / v263);
                          break;
                        case 5u:
                          v264 = (double)v256.u32[1];
                          v265 = *((_QWORD *)a3 + 5);
                          v266 = (double)v256.u32[0];
                          if (v265 >= *((_DWORD *)v218 + 23))
                            v265 = *((_DWORD *)v218 + 23);
                          v257 = COERCE_DOUBLE(__PAIR64__(((double)v265 * v264 / v266), v265));
                          break;
                        default:
                          v257 = 0.0;
                          break;
                      }
                      v267 = HIDWORD(v257);
                      if (LODWORD(v257) > HIDWORD(v257))
                        v267 = LODWORD(v257);
                      v268 = COERCE_DOUBLE(vdup_n_s32(v267));
                      if (v218[89])
                        v269 = v268;
                      else
                        v269 = v257;
                      if (v227)
                        v270 = *((_DWORD *)v218 + 27);
                      else
                        v270 = v255;
                      v272 = *((_DWORD *)v218 + 32);
                      v271 = *((_DWORD *)v218 + 33);
                      LOBYTE(v383) = 0;
                      v387 = v269;
                      v388 = v272;
                      v389 = v271;
                      v390 = v270;
                      v386 = 1;
                      v273 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(a3, (unsigned __int8 *)&v383);
                      if (!v273 || (v274 = (uint64_t **)v273[8], v275 = v273[9], v274 == (uint64_t **)v275))
                      {
LABEL_489:
                        v386 = 0;
                        goto LABEL_490;
                      }
                      v276 = *((_QWORD *)a3 + 16);
                      while (1)
                      {
                        v277 = *v274;
                        if ((*v274)[1] != v276)
                          break;
                        if (++v274 == (uint64_t **)v275)
                          goto LABEL_489;
                      }
                      v277[1] = v276;
                      v146 = *v277;
                      v386 = 0;
                      if (!v146)
                      {
LABEL_490:
                        if (v272 == 1)
                        {
                          v278 = operator new();
                          v282 = *((_DWORD *)v218 + 34);
                          *(_DWORD *)(v278 + 32) = 0;
                          *(_QWORD *)(v278 + 16) = 0;
                          *(_QWORD *)(v278 + 24) = 0;
                          *(_QWORD *)(v278 + 56) = 0x200000000;
                          *(_DWORD *)(v278 + 64) = 2;
                          *(_DWORD *)(v278 + 68) = v270;
                          *(_DWORD *)(v278 + 72) = v282;
                          *(_DWORD *)(v278 + 76) = 1;
                          *(_QWORD *)(v278 + 88) = 0;
                          *(_QWORD *)(v278 + 96) = 0;
                          *(_QWORD *)(v278 + 80) = 0;
                          *(_QWORD *)v278 = &off_1E42B6330;
                          *(_QWORD *)(v278 + 8) = 0;
                          *(_QWORD *)(v278 + 40) = &unk_1E42B6350;
                          *(_QWORD *)(v278 + 48) = "";
                          goto LABEL_497;
                        }
                        if (v272)
                        {
                          v278 = 0;
                        }
                        else
                        {
                          v278 = operator new();
                          v279 = *((_DWORD *)v218 + 34);
                          *(_DWORD *)(v278 + 32) = 0;
                          *(_QWORD *)(v278 + 16) = 0;
                          *(_QWORD *)(v278 + 24) = 0;
                          *(_QWORD *)(v278 + 56) = 0x300000001;
                          *(_DWORD *)(v278 + 64) = 1;
                          *(_DWORD *)(v278 + 68) = v270;
                          *(_DWORD *)(v278 + 72) = v279;
                          *(_QWORD *)(v278 + 84) = 0;
                          *(_QWORD *)(v278 + 92) = 0;
                          *(_QWORD *)(v278 + 76) = 0;
                          *(_QWORD *)(v278 + 100) = 0x100000000;
                          *(_QWORD *)v278 = &off_1E42BE438;
                          *(_QWORD *)(v278 + 8) = 0;
                          *(_QWORD *)(v278 + 40) = &unk_1E42BE458;
                          *(_QWORD *)(v278 + 48) = "";
                          *(_WORD *)(v278 + 128) = 0;
                          *(_QWORD *)(v278 + 112) = 0;
                          *(_QWORD *)(v278 + 120) = 0;
                          *(_BYTE *)(v278 + 130) = 1;
                          *(_QWORD *)(v278 + 136) = v357;
                          *(_QWORD *)(v278 + 144) = v223;
                          if (v223)
                          {
                            v280 = (unint64_t *)&v223->__shared_owners_;
                            do
                              v281 = __ldxr(v280);
                            while (__stxr(v281 + 1, v280));
                          }
LABEL_497:
                          *(double *)(v278 + 80) = v269;
                        }
                        if (v218[140] >= 3u)
                          v283 = 0;
                        else
                          v283 = v218[140];
                        v146 = operator new();
                        *(_BYTE *)(v146 + 8) = v283;
                        *(_QWORD *)(v146 + 16) = v278;
                        *(_QWORD *)v146 = &off_1E42A89F8;
                        LOBYTE(__p) = 0;
                        *(double *)&v381 = v269;
                        *((_QWORD *)&v381 + 1) = __PAIR64__(v271, v272);
                        v382 = v270;
                        v380 = 1;
                        v284 = operator new();
                        *(_BYTE *)(v284 + 16) = 0;
                        *(_OWORD *)(v284 + 44) = v381;
                        *(_DWORD *)(v284 + 60) = v382;
                        *(_BYTE *)(v284 + 40) = 1;
                        v285 = *((_QWORD *)a3 + 16);
                        *(_QWORD *)v284 = v146;
                        *(_QWORD *)(v284 + 8) = v285;
                        v286 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::__emplace_unique_key_args<md::ResourceKey,std::piecewise_construct_t const&,std::tuple<md::ResourceKey const&>,std::tuple<>>(a3, (uint64_t)&__p, (uint64_t)&__p);
                        v287 = (uint64_t *)*((_QWORD *)v286 + 9);
                        if ((unint64_t)v287 >= *((_QWORD *)v286 + 10))
                        {
                          v288 = std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>::__emplace_back_slow_path<md::FrameGraphResourceRegistry::ResourceHolder*&>((char **)v286 + 8, v284);
                        }
                        else
                        {
                          *v287 = v284;
                          v288 = (char *)(v287 + 1);
                        }
                        v138 = v368;
                        *((_QWORD *)v286 + 9) = v288;
                        v380 = 0;
                        v151 = (_QWORD *)((char *)v368 + 88);
                      }
                      if (v223)
                      {
                        v289 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v290 = __ldaxr(v289);
                        while (__stlxr(v290 - 1, v289));
                        if (!v290)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          v252 = v223;
LABEL_511:
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                      goto LABEL_424;
                    }
                    if (*((_DWORD *)v218 + 33))
                    {
                      v222 = *((_QWORD *)a3 + 10);
                      v223 = (std::__shared_weak_count *)*((_QWORD *)a3 + 11);
                      if (!v223)
                        goto LABEL_462;
                    }
                    else
                    {
                      v222 = *((_QWORD *)a3 + 12);
                      v223 = (std::__shared_weak_count *)*((_QWORD *)a3 + 13);
                      if (!v223)
                      {
LABEL_462:
                        v226 = (int *)(v218 + 108);
                        v227 = v218[112];
                        v228 = v227 == 0;
                        v229 = (int *)(a3 + 12);
                        goto LABEL_463;
                      }
                    }
                    v253 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v254 = __ldxr(v253);
                    while (__stxr(v254 + 1, v253));
                    goto LABEL_462;
                  }
                  if (v220 != 3)
                  {
                    v146 = 0;
                    goto LABEL_424;
                  }
                  v230 = *((unsigned int *)v218 + 24);
                  v231 = *((_QWORD *)v218 + 11);
                  v384 = v231;
                  LODWORD(v385) = v230;
                  LOBYTE(v383) = 1;
                  v386 = 0;
                  v232 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(a3, (unsigned __int8 *)&v383);
                  if (!v232 || (v233 = (uint64_t **)v232[8], v234 = v232[9], v233 == (uint64_t **)v234))
                  {
LABEL_442:
                    LOBYTE(v383) = 0;
                  }
                  else
                  {
                    v235 = *((_QWORD *)a3 + 16);
                    while (1)
                    {
                      v236 = *v233;
                      if ((*v233)[1] != v235)
                        break;
                      if (++v233 == (uint64_t **)v234)
                        goto LABEL_442;
                    }
                    v236[1] = v235;
                    v146 = *v236;
                    LOBYTE(v383) = 0;
                    if (v146)
                      goto LABEL_424;
                  }
                  v237 = (std::__shared_weak_count *)operator new(0x48uLL);
                  v237->__shared_owners_ = 0;
                  v238 = (unint64_t *)&v237->__shared_owners_;
                  v237->__shared_weak_owners_ = 0;
                  v237->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E47E0;
                  v237[1].__shared_weak_owners_ = 0;
                  v237[2].__vftable = 0;
                  v237[1].__shared_owners_ = 0;
                  LODWORD(v237[2].__shared_owners_) = 0;
                  v237[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC138;
                  HIDWORD(v237[2].__shared_owners_) = 769;
                  v237[2].__shared_weak_owners_ = v231 * v230;
                  v239 = operator new();
                  v240 = (_QWORD *)v239;
                  v241 = *((_QWORD *)v218 + 11);
                  v242 = *((unsigned int *)v218 + 24);
                  v377[0] = v237 + 1;
                  v377[1] = v237;
                  v243 = v241 * v242;
                  do
                    v244 = __ldxr(v238);
                  while (__stxr(v244 + 1, v238));
                  ggl::BufferData::BufferData(v239, v241, v377, 0, v243, 6);
                  do
                    v245 = __ldaxr(v238);
                  while (__stlxr(v245 - 1, v238));
                  v138 = v368;
                  if (!v245)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                  *v240 = &off_1E42B5868;
                  v146 = operator new();
                  *(_BYTE *)(v146 + 8) = 3;
                  *(_QWORD *)(v146 + 16) = v240;
                  *(_QWORD *)v146 = &off_1E42A89D8;
                  *(_QWORD *)&v379 = v231;
                  DWORD2(v379) = v230;
                  LOBYTE(__p) = 1;
                  v380 = 0;
                  v246 = operator new();
                  *(_OWORD *)(v246 + 24) = v379;
                  *(_BYTE *)(v246 + 16) = 1;
                  *(_BYTE *)(v246 + 40) = 0;
                  v247 = *((_QWORD *)a3 + 16);
                  *(_QWORD *)v246 = v146;
                  *(_QWORD *)(v246 + 8) = v247;
                  v248 = std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::__emplace_unique_key_args<md::ResourceKey,std::piecewise_construct_t const&,std::tuple<md::ResourceKey const&>,std::tuple<>>(a3, (uint64_t)&__p, (uint64_t)&__p);
                  v249 = (uint64_t *)*((_QWORD *)v248 + 9);
                  if ((unint64_t)v249 >= *((_QWORD *)v248 + 10))
                  {
                    v250 = std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>::__emplace_back_slow_path<md::FrameGraphResourceRegistry::ResourceHolder*&>((char **)v248 + 8, v246);
                  }
                  else
                  {
                    *v249 = v246;
                    v250 = (char *)(v249 + 1);
                  }
                  *((_QWORD *)v248 + 9) = v250;
                  LOBYTE(__p) = 0;
                  v151 = (_QWORD *)((char *)v368 + 88);
                  do
                    v251 = __ldaxr(v238);
                  while (__stlxr(v251 - 1, v238));
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    v252 = v237;
                    goto LABEL_511;
                  }
LABEL_424:
                  *(_QWORD *)&v149[8 * *((_QWORD *)v218 + 4)] = v146;
                  v145 = (unint64_t *)*((_QWORD *)v138 + 3);
                  v146 = *((_QWORD *)v138 + 4);
                }
                if (++v216 >= (unint64_t)((v146 - (uint64_t)v145) >> 3))
                  goto LABEL_516;
                continue;
              }
            }
          }
          v185 = &v358[16 * v182];
          if (v370 >= v362)
          {
            v187 = (v362 - v370) >> 3;
            if (v187 <= 1)
              v187 = 1;
            v188 = 0xFFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v362 - v370) < 0x7FFFFFFFFFFFFFF0)
              v188 = v187;
            if (v188 >> 60)
LABEL_605:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v189 = 16 * v188;
            v190 = (char *)operator new(16 * v188);
            v362 = &v190[v189];
            *(_OWORD *)v190 = *(_OWORD *)v185;
            v186 = v190 + 16;
            if (v370)
            {
              operator delete(v370);
              v186 = v190 + 16;
            }
            v370 = v190;
          }
          else
          {
            *(_OWORD *)v370 = *(_OWORD *)v185;
            v186 = v370 + 16;
          }
          v138 = v368;
          *((_QWORD *)v184 + 4) = v182;
          v191 = v182 + 1;
          v145 = (unint64_t *)*((_QWORD *)v368 + 3);
          v146 = *((_QWORD *)v368 + 4);
          while (1)
          {
            if (v191 >= (v146 - (uint64_t)v145) >> 3)
              goto LABEL_333;
            v192 = v145[v191];
            v193 = *(int8x8_t *)((char *)v138 + 96);
            if (v193)
            {
              v194 = 0x9DDFEA08EB382D69 * (((8 * v192) + 8) ^ HIDWORD(v192));
              v195 = 0x9DDFEA08EB382D69 * (HIDWORD(v192) ^ (v194 >> 47) ^ v194);
              v196 = 0x9DDFEA08EB382D69 * (v195 ^ (v195 >> 47));
              v197 = (uint8x8_t)vcnt_s8(v193);
              v197.i16[0] = vaddlv_u8(v197);
              if (v197.u32[0] > 1uLL)
              {
                v198 = v196;
                if (v196 >= *(_QWORD *)&v193)
                  v198 = v196 % *(_QWORD *)&v193;
              }
              else
              {
                v198 = v196 & (*(_QWORD *)&v193 - 1);
              }
              v199 = *(_QWORD **)(*v183 + 8 * v198);
              if (v199)
              {
                v200 = (_QWORD *)*v199;
                if (v200)
                {
                  if (v197.u32[0] < 2uLL)
                  {
                    v201 = *(_QWORD *)&v193 - 1;
                    while (1)
                    {
                      v203 = v200[1];
                      if (v196 == v203)
                      {
                        if (v200[2] == v192)
                          goto LABEL_348;
                      }
                      else if ((v203 & v201) != v198)
                      {
                        goto LABEL_347;
                      }
                      v200 = (_QWORD *)*v200;
                      if (!v200)
                        goto LABEL_347;
                    }
                  }
                  do
                  {
                    v202 = v200[1];
                    if (v196 == v202)
                    {
                      if (v200[2] == v192)
                        goto LABEL_348;
                    }
                    else
                    {
                      if (v202 >= *(_QWORD *)&v193)
                        v202 %= *(_QWORD *)&v193;
                      if (v202 != v198)
                        break;
                    }
                    v200 = (_QWORD *)*v200;
                  }
                  while (v200);
                }
              }
            }
LABEL_347:
            if (*(_QWORD *)(v192 + 32) == -1
              && *v184 == *(unsigned __int8 *)v192
              && v184[88] == *(unsigned __int8 *)(v192 + 88)
              && v184[89] == *(unsigned __int8 *)(v192 + 89)
              && *((_DWORD *)v184 + 23) == *(_DWORD *)(v192 + 92)
              && *((float *)v184 + 24) == *(float *)(v192 + 96)
              && *((_DWORD *)v184 + 25) == *(_DWORD *)(v192 + 100)
              && *((float *)v184 + 26) == *(float *)(v192 + 104))
            {
              if (v184[112] && *(_BYTE *)(v192 + 112))
              {
                if (*((_DWORD *)v184 + 27) != *(_DWORD *)(v192 + 108))
                  goto LABEL_348;
              }
              else if ((v184[112] != 0) != (*(_BYTE *)(v192 + 112) != 0))
              {
                goto LABEL_348;
              }
              if (*((_DWORD *)v184 + 32) == *(_DWORD *)(v192 + 128)
                && *((_DWORD *)v184 + 33) == *(_DWORD *)(v192 + 132)
                && *((_DWORD *)v184 + 34) == *(_DWORD *)(v192 + 136)
                && v184[140] == *(unsigned __int8 *)(v192 + 140))
              {
                v204 = &v358[16 * v191];
                if (v370 == v186)
                  goto LABEL_393;
                v205 = 0;
                v206 = v370;
                do
                {
                  if (*((_QWORD *)v204 + 1) >= *(_QWORD *)v206)
                    v205 += *(_QWORD *)v204 <= *((_QWORD *)v206 + 1);
                  v206 += 16;
                }
                while (v206 != v186);
                if (!v205)
                {
LABEL_393:
                  if (v186 >= v362)
                  {
                    v208 = (v186 - v370) >> 4;
                    v209 = v208 + 1;
                    if ((unint64_t)(v208 + 1) >> 60)
                      break;
                    if ((v362 - v370) >> 3 > v209)
                      v209 = (v362 - v370) >> 3;
                    if ((unint64_t)(v362 - v370) >= 0x7FFFFFFFFFFFFFF0)
                      v210 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v210 = v209;
                    if (v210)
                    {
                      if (v210 >> 60)
                        goto LABEL_605;
                      v211 = v186;
                      v363 = v210;
                      v212 = (char *)operator new(16 * v210);
                      v210 = v363;
                      v186 = v211;
                      v204 = &v358[16 * v191];
                    }
                    else
                    {
                      v212 = 0;
                    }
                    v213 = &v212[16 * v208];
                    *(_OWORD *)v213 = *(_OWORD *)v204;
                    v214 = v213;
                    if (v370 != v186)
                    {
                      do
                      {
                        *((_OWORD *)v214 - 1) = *((_OWORD *)v186 - 1);
                        v214 -= 16;
                        v186 -= 16;
                      }
                      while (v186 != v370);
                      v186 = v370;
                    }
                    v207 = v213 + 16;
                    v370 = v214;
                    v362 = &v212[16 * v210];
                    if (v186)
                      operator delete(v186);
                  }
                  else
                  {
                    *(_OWORD *)v186 = *(_OWORD *)v204;
                    v207 = v186 + 16;
                  }
                  *(_QWORD *)(v192 + 32) = v182;
                  v145 = (unint64_t *)*((_QWORD *)v368 + 3);
                  v146 = *((_QWORD *)v368 + 4);
                  v186 = v207;
                  v138 = v368;
                }
              }
            }
LABEL_348:
            ++v191;
          }
        }
LABEL_604:
        abort();
      }
    }
    else if (*((_BYTE *)v368 + 152))
    {
      goto LABEL_300;
    }
    if ((unint64_t *)v146 != v145)
    {
      if (v148 <= 1)
        v215 = 1;
      else
        v215 = v147 >> 3;
      if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v151, *v145))*(_QWORD *)(*v145 + 32) = 0;
      if ((unint64_t)v147 >= 0x10)
      {
        v355 = 1;
        do
        {
          v356 = v145[v355];
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v151, v356))*(_QWORD *)(v356 + 32) = v355;
          ++v355;
        }
        while (v215 != v355);
      }
      v138 = v368;
      if ((unint64_t *)v146 != v145)
        goto LABEL_423;
    }
LABEL_516:
    v292 = *(uint64_t **)v138;
    v291 = (uint64_t *)*((_QWORD *)v138 + 1);
    v293 = (int64_t)v291 - *(_QWORD *)v138;
    if (v291 != *(uint64_t **)v138)
    {
      if (v293 < 0)
        goto LABEL_604;
      v294 = (char *)operator new((size_t)v291 - *(_QWORD *)v138);
      v367 = &v294[8 * (v293 >> 3)];
      bzero(v294, v293);
      *(_QWORD *)&v295 = v294;
      *((_QWORD *)&v295 + 1) = &v294[v293];
      v365 = v295;
      while (1)
      {
        v296 = *v292;
        if (!*(_BYTE *)(*v292 + 48))
          break;
LABEL_519:
        if (++v292 == v291)
          goto LABEL_562;
      }
      v297 = operator new();
      *(_QWORD *)(v297 + 16) = 0;
      *(_QWORD *)(v297 + 24) = 0;
      *(_DWORD *)(v297 + 32) = 0;
      *(_QWORD *)v297 = &off_1E42B6370;
      *(_QWORD *)(v297 + 8) = 0;
      *(_QWORD *)(v297 + 40) = &unk_1E42B6390;
      *(_QWORD *)(v297 + 48) = "";
      *(_QWORD *)(v297 + 336) = 0;
      *(_OWORD *)(v297 + 72) = 0u;
      *(_OWORD *)(v297 + 88) = 0u;
      *(_OWORD *)(v297 + 104) = 0u;
      *(_OWORD *)(v297 + 120) = 0u;
      *(_OWORD *)(v297 + 136) = 0u;
      *(_OWORD *)(v297 + 152) = 0u;
      *(_OWORD *)(v297 + 168) = 0u;
      *(_OWORD *)(v297 + 184) = 0u;
      *(_OWORD *)(v297 + 200) = 0u;
      *(_OWORD *)(v297 + 216) = 0u;
      *(_OWORD *)(v297 + 232) = 0u;
      *(_OWORD *)(v297 + 248) = 0u;
      *(_DWORD *)(v297 + 328) = 0;
      *(_OWORD *)(v297 + 56) = 0u;
      *(_OWORD *)(v297 + 264) = 0u;
      *(_OWORD *)(v297 + 280) = 0u;
      *(_OWORD *)(v297 + 296) = 0u;
      *(_OWORD *)(v297 + 312) = 0u;
      *(_BYTE *)(v297 + 344) = 0;
      v298 = *(_QWORD *)(v296 + 136);
      v299 = *(_QWORD *)(v296 + 144);
      v300 = *(_QWORD *)(v296 + 152);
      v301 = *(_QWORD *)(v296 + 160);
      v303 = *(_QWORD *)(v296 + 168);
      v302 = *(_QWORD *)(v296 + 176);
      v305 = *(_QWORD *)(v296 + 184);
      v304 = *(_QWORD *)(v296 + 192);
      v306 = *(_QWORD *)(v296 + 200);
      if (v298)
      {
        v307 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v298 + 32)] + 16);
        *(_QWORD *)(v297 + 96) = 0;
        *(_QWORD *)(v297 + 104) = 0;
        *(_QWORD *)(v297 + 88) = v307;
        v308 = *(_DWORD *)(v307 + 72);
        *(_DWORD *)(v297 + 80) = v308;
        *(_QWORD *)(v297 + 72) = 1;
        *(_DWORD *)(v297 + 56) = *(_DWORD *)(v307 + 68);
        if (*(_BYTE *)(v298 + 124))
        {
          v298 = *(_QWORD *)(v298 + 116);
          if (!v299)
            goto LABEL_530;
        }
        else
        {
          v298 = 0;
          if (!v299)
            goto LABEL_530;
        }
      }
      else
      {
        v308 = 0;
        if (!v299)
          goto LABEL_530;
      }
      v309 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v299 + 32)] + 16);
      *(_QWORD *)(v297 + 120) = 0;
      *(_QWORD *)(v297 + 128) = 0;
      *(_QWORD *)(v297 + 112) = v309;
      v308 = *(_DWORD *)(v309 + 72);
      *(_DWORD *)(v297 + 80) = v308;
      *(_QWORD *)(v297 + 72) = 2;
      *(_DWORD *)(v297 + 60) = *(_DWORD *)(v309 + 68);
      if (!*(_BYTE *)(v299 + 124))
      {
        v299 = 0;
        if (v300)
        {
LABEL_531:
          v310 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v300 + 32)] + 16);
          *(_QWORD *)(v297 + 144) = 0;
          *(_QWORD *)(v297 + 152) = 0;
          *(_QWORD *)(v297 + 136) = v310;
          v308 = *(_DWORD *)(v310 + 72);
          *(_DWORD *)(v297 + 80) = v308;
          *(_QWORD *)(v297 + 72) = 3;
          *(_DWORD *)(v297 + 64) = *(_DWORD *)(v310 + 68);
          if (*(_BYTE *)(v300 + 124))
          {
            v300 = *(_QWORD *)(v300 + 116);
            if (!v301)
              goto LABEL_538;
          }
          else
          {
            v300 = 0;
            if (!v301)
              goto LABEL_538;
          }
LABEL_536:
          v311 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v301 + 32)] + 16);
          *(_QWORD *)(v297 + 168) = 0;
          *(_QWORD *)(v297 + 176) = 0;
          *(_QWORD *)(v297 + 160) = v311;
          v308 = *(_DWORD *)(v311 + 72);
          *(_DWORD *)(v297 + 80) = v308;
          *(_QWORD *)(v297 + 72) = 4;
          *(_DWORD *)(v297 + 68) = *(_DWORD *)(v311 + 68);
          if (!*(_BYTE *)(v301 + 124))
          {
            v301 = 0;
            if (!v303)
            {
LABEL_540:
              if (v302)
              {
                v313 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v302 + 32)] + 16);
                *(_QWORD *)(v297 + 216) = 0;
                *(_QWORD *)(v297 + 224) = 0;
                *(_QWORD *)(v297 + 208) = v313;
              }
              if (v305)
              {
                v314 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v305 + 32)] + 16);
                *(_QWORD *)(v297 + 240) = 0;
                *(_QWORD *)(v297 + 248) = 0;
                *(_QWORD *)(v297 + 232) = v314;
              }
              if (v304)
              {
                v315 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v304 + 32)] + 16);
                *(_QWORD *)(v297 + 264) = 0;
                *(_QWORD *)(v297 + 272) = 0;
                *(_QWORD *)(v297 + 256) = v315;
              }
              if (v306)
              {
                v316 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v306 + 32)] + 16);
                *(_QWORD *)(v297 + 288) = 0;
                *(_QWORD *)(v297 + 296) = 0;
                *(_QWORD *)(v297 + 280) = v316;
                *(_DWORD *)(v297 + 84) = *(_DWORD *)(v316 + 68);
                if (!v308)
                  *(_DWORD *)(v297 + 80) = *(_DWORD *)(v316 + 72);
              }
              v317 = *(_DWORD *)(*v292 + 128);
              v318 = *(_BYTE *)(v296 + 232);
              v319 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v138 + 16) + 8 * *(_QWORD *)(v296 + 8)) + 8);
              *(_QWORD *)v319 = v298;
              *(_QWORD *)(v319 + 8) = v299;
              *(_QWORD *)(v319 + 16) = v300;
              *(_QWORD *)(v319 + 24) = v301;
              *(_QWORD *)(v319 + 32) = 0;
              *(_QWORD *)(v319 + 40) = 0;
              v320 = *(unsigned __int8 *)(v319 + 48);
              if (v317)
              {
                *(_DWORD *)(v319 + 52) = v317;
                if (v320)
                  goto LABEL_555;
                v321 = 1;
              }
              else
              {
                if (!*(_BYTE *)(v319 + 48))
                  goto LABEL_555;
                v321 = 0;
              }
              *(_BYTE *)(v319 + 48) = v321;
LABEL_555:
              *(_BYTE *)(v319 + 56) = v318;
              *(_DWORD *)(v319 + 60) = 0;
              *(_DWORD *)(v319 + 64) = 0;
              v322 = 8 * *(_QWORD *)(v296 + 8);
              v323 = *(_QWORD *)&v294[v322];
              *(_QWORD *)&v294[v322] = v297;
              if (v323)
                (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
              goto LABEL_519;
            }
LABEL_539:
            v312 = *(_QWORD *)(*(_QWORD *)&v149[8 * *(_QWORD *)(v303 + 32)] + 16);
            *(_QWORD *)(v297 + 192) = 0;
            *(_QWORD *)(v297 + 200) = 0;
            *(_QWORD *)(v297 + 184) = v312;
            goto LABEL_540;
          }
          v301 = *(_QWORD *)(v301 + 116);
LABEL_538:
          if (!v303)
            goto LABEL_540;
          goto LABEL_539;
        }
LABEL_535:
        if (!v301)
          goto LABEL_538;
        goto LABEL_536;
      }
      v299 = *(_QWORD *)(v299 + 116);
LABEL_530:
      if (v300)
        goto LABEL_531;
      goto LABEL_535;
    }
    v367 = 0;
LABEL_562:
    v324 = (_QWORD *)*((_QWORD *)v138 + 13);
    if (v324)
    {
      v325 = 0;
      v326 = 0;
      v327 = 0uLL;
      *(_OWORD *)v371 = 0u;
      while (v326 < v325)
      {
        v328 = v324[3];
        v324[3] = 0;
        *(_QWORD *)v326 = v328;
        v329 = v326 + 8;
LABEL_565:
        *(void **)&v330 = v371[0];
        *((_QWORD *)&v330 + 1) = v329;
        *(_OWORD *)v371 = v330;
        v324 = (_QWORD *)*v324;
        v326 = v329;
        if (!v324)
          goto LABEL_598;
      }
      v331 = (char *)v371[0];
      v332 = v326 - (char *)v371[0];
      v333 = (v326 - (char *)v371[0]) >> 3;
      v334 = v333 + 1;
      if ((unint64_t)(v333 + 1) >> 61)
        goto LABEL_604;
      if ((v325 - (char *)v371[0]) >> 2 > v334)
        v334 = (v325 - (char *)v371[0]) >> 2;
      if ((unint64_t)(v325 - (char *)v371[0]) >= 0x7FFFFFFFFFFFFFF8)
        v335 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v335 = v334;
      if (v335)
      {
        if (v335 >> 61)
          goto LABEL_605;
        v336 = (char *)operator new(8 * v335);
        v327 = 0uLL;
      }
      else
      {
        v336 = 0;
      }
      v337 = &v336[8 * v333];
      v338 = v324[3];
      v324[3] = 0;
      *(_QWORD *)v337 = v338;
      v329 = v337 + 8;
      v339 = v326 - (char *)v371[0];
      if (v326 == v371[0])
      {
        v371[0] = &v336[8 * v333];
        goto LABEL_591;
      }
      v340 = v339 - 8;
      if ((unint64_t)(v339 - 8) > 0x137
        && (v341 = v340 & 0xFFFFFFFFFFFFFFF8, &v326[-(v340 & 0xFFFFFFFFFFFFFFF8) - 8] <= v326 - 8)
        && &v336[v332 - 8 - v341] <= &v336[v332 - 8]
        && ((v342 = v340 >> 3, &v326[-8 * v342 - 8] >= v337) || &v336[v332 - v341 - 8] >= v326))
      {
        v348 = v342 + 1;
        v343 = &v326[-8 * (v348 & 0x3FFFFFFFFFFFFFFCLL)];
        v349 = &v336[8 * v333 - 16];
        v350 = v326 - 32;
        v351 = v348 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v353 = *(_OWORD *)v350;
          v352 = *((_OWORD *)v350 + 1);
          *(_OWORD *)v350 = v327;
          *((_OWORD *)v350 + 1) = v327;
          v350 -= 32;
          *((_OWORD *)v349 - 1) = v353;
          *(_OWORD *)v349 = v352;
          v349 -= 32;
          v351 -= 4;
        }
        while (v351);
        v337 -= 8 * (v348 & 0x3FFFFFFFFFFFFFFCLL);
        if (v348 == (v348 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_585;
      }
      else
      {
        v343 = v326;
      }
      do
      {
        v344 = *((_QWORD *)v343 - 1);
        v343 -= 8;
        *(_QWORD *)v343 = 0;
        *((_QWORD *)v337 - 1) = v344;
        v337 -= 8;
      }
      while (v343 != v371[0]);
LABEL_585:
      v345 = (char *)v371[1];
      v371[0] = v337;
      while (v345 != v331)
      {
        v347 = *((_QWORD *)v345 - 1);
        v345 -= 8;
        v346 = v347;
        *(_QWORD *)v345 = 0;
        if (v347)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
          v327 = 0uLL;
        }
      }
      v326 = v331;
LABEL_591:
      v325 = &v336[8 * v335];
      v138 = v368;
      if (v326)
      {
        operator delete(v326);
        v327 = 0uLL;
      }
      goto LABEL_565;
    }
    v325 = 0;
    *(_OWORD *)v371 = 0u;
LABEL_598:
    v354 = operator new();
    *(_OWORD *)v354 = v372;
    *(_QWORD *)(v354 + 16) = v373;
    v372 = 0uLL;
    v373 = 0;
    *(_OWORD *)(v354 + 24) = *(_OWORD *)v138;
    *(_QWORD *)(v354 + 40) = *((_QWORD *)v138 + 2);
    *(_QWORD *)v138 = 0;
    *((_QWORD *)v138 + 1) = 0;
    *((_QWORD *)v138 + 2) = 0;
    *(_OWORD *)(v354 + 48) = *(_OWORD *)((char *)v138 + 24);
    *(_QWORD *)(v354 + 64) = *((_QWORD *)v138 + 5);
    v361[1] = 0;
    v361[2] = 0;
    *v361 = 0;
    *(_OWORD *)(v354 + 72) = *(_OWORD *)v371;
    *(_QWORD *)(v354 + 88) = v325;
    *(_OWORD *)(v354 + 96) = v359;
    *(_QWORD *)(v354 + 112) = v360;
    *(_OWORD *)(v354 + 120) = *((_OWORD *)v138 + 8);
    *(_QWORD *)(v354 + 136) = *((_QWORD *)v138 + 18);
    *((_QWORD *)v138 + 16) = 0;
    *((_QWORD *)v138 + 17) = 0;
    *((_QWORD *)v138 + 18) = 0;
    *(_OWORD *)(v354 + 144) = v365;
    *(_QWORD *)(v354 + 160) = v367;
    *(_QWORD *)this = v354;
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(v375);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v5 == v12)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v5 == v11)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(*a1);
    std::__tree<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,std::__map_value_compare<md::FrameGraphPass *,std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>,md::FrameGraphPassLessThan,true>,std::allocator<std::__value_type<md::FrameGraphPass *,geo::linear_set<md::FrameGraphPass *,md::FrameGraphPassLessThan,std::allocator<md::FrameGraphPass *>,std::vector<md::FrameGraphPass *>>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

_QWORD *md::FrameGraph::visitPasses(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      v7 = v5[15];
      if (v6 >= (v5[16] - v7) >> 3 || !*(_QWORD *)(v7 + 8 * v6))
        goto LABEL_3;
      if (*(_BYTE *)(*(_QWORD *)v2 + 48) == 1)
      {
        v11 = 0;
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)v2 + 48))
          goto LABEL_3;
        v8 = v5[18];
        if (v6 >= (v5[19] - v8) >> 3)
          goto LABEL_3;
        v9 = *(_QWORD *)(v8 + 8 * v6);
        if (!v9)
          goto LABEL_3;
        v11 = v9;
      }
      v10 = *(_QWORD *)(a2 + 24);
      if (!v10)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        return (_QWORD *)std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::operator()();
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
LABEL_3:
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4)
  {
    v5 = *a4;
    v6 = *(unsigned __int8 *)(a2 + 48);
    if (v6 == (*a4 == 0))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      v8 = v6 == 1;
      v10 = *(_QWORD *)(v7 + 136);
      v9 = *(_QWORD *)(v7 + 144);
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(std::__shared_weak_count **)(v4 + 144);
      *(_QWORD *)(v4 + 136) = v10;
      *(_QWORD *)(v4 + 144) = v9;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = *(_QWORD *)(v7 + 80);
      v17 = *(_QWORD *)(v7 + 88);
      if (v16 >= v17)
      {
        v19 = 0xAAAAAAAAAAAAAAALL;
        v20 = *(_QWORD *)(v7 + 72);
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v20) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 < 0x555555555555555)
          v19 = v22;
        if (v19)
        {
          v24 = 24 * v19;
          v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 96) + 16))(*(_QWORD *)(v7 + 96), 24 * v19, 8);
          v26 = v25 + 24 * v21;
          v19 = v25 + v24;
          if (v25)
          {
            *(_QWORD *)v26 = v5;
            v27 = v25 + 24 * v21;
            *(_QWORD *)(v27 + 8) = v4;
            *(_BYTE *)(v27 + 16) = v8;
          }
        }
        else
        {
          v26 = 24 * v21;
        }
        v18 = v26 + 24;
        v29 = *(_QWORD *)(v7 + 72);
        v28 = *(_QWORD *)(v7 + 80);
        if (v28 != v29)
        {
          do
          {
            v30 = *(_OWORD *)(v28 - 24);
            *(_QWORD *)(v26 - 8) = *(_QWORD *)(v28 - 8);
            *(_OWORD *)(v26 - 24) = v30;
            v26 -= 24;
            v28 -= 24;
          }
          while (v28 != v29);
          v28 = *(_QWORD *)(v7 + 72);
        }
        *(_QWORD *)(v7 + 72) = v26;
        *(_QWORD *)(v7 + 80) = v18;
        v31 = *(_QWORD *)(v7 + 88);
        *(_QWORD *)(v7 + 88) = v19;
        if (v28)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 96) + 40))(*(_QWORD *)(v7 + 96), v28, v31 - v28);
      }
      else
      {
        if (v16)
        {
          *(_QWORD *)v16 = v5;
          *(_QWORD *)(v16 + 8) = v4;
          *(_BYTE *)(v16 + 16) = v8;
        }
        v18 = v16 + 24;
      }
      *(_QWORD *)(v7 + 80) = v18;
    }
  }
}

void sub_19F22F290(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gss::Queryable<gss::ScenePropertyID>::~Queryable(uint64_t a1)
{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A80;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A80;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t gss::Queryable<gss::PropertyID>::~Queryable(uint64_t a1)
{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A28;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A28;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void geo::read_write_lock::~read_write_lock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_destroy(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"destruction", v2);
}

{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_destroy(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"destruction", v2);
}

uint64_t *std::__hash_table<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<gss::StyleKey>,std::equal_to<gss::StyleKey>,true>,std::__unordered_map_equal<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<gss::StyleKey>,std::hash<gss::StyleKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,gss::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v5 = (uint64_t *)*v2;
      v6 = (std::__shared_weak_count *)v2[9];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      if (!*((_BYTE *)v2 + 62) && v2[6])
      {
        v7 = gss::Allocator::instance((gss::Allocator *)v6);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v2[6], *((unsigned __int16 *)v2 + 30));
        v2[6] = 0;
      }
      v8 = v2[2];
      if (v8)
      {
        v2[3] = v8;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v8, v2[4] - v8);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 80);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

unint64_t gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey(unint64_t *a1, unsigned int a2, int a3, unint64_t a4)
{
  uint64_t v7;
  float v8;
  unsigned int v10;
  _WORD *v11;
  unint64_t result;
  unsigned int v13;
  unsigned int v14;
  float32x2_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint32x2_t v20;
  float32x2_t v21;
  uint32x2_t v22;
  int32x2_t v23;
  uint64x2_t v24;
  int64x2_t v25;
  unint64_t v26;
  float v27;
  char v28;
  char v29;

  if (a3 == 2)
  {
    v7 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v8 = *(float *)v7;
      LODWORD(v7) = *(float *)v7 == 1.0;
      if (*(_BYTE *)(a4 + 10))
      {
        if (v8 != 0.0 && v8 != 1.0)
          goto LABEL_12;
      }
    }
    v7 = v7;
  }
  else
  {
    v7 = 1;
  }
  v10 = *(unsigned __int8 *)(a4 + v7 + 11);
  v8 = 0.0;
  if (v10 != 2)
  {
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, v10, 0);
    v26 = *(_QWORD *)result;
    goto LABEL_14;
  }
LABEL_12:
  v27 = v8;
  v29 = 1;
  v28 = 1;
  v11 = (_WORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, 0, &v29);
  result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a4, a2, 1u, &v28);
  LOWORD(v13) = *v11;
  LOWORD(v14) = v11[1];
  v15 = (float32x2_t)vdup_n_s32(0x37800080u);
  LOWORD(v16) = *(_WORD *)result;
  LOWORD(v17) = *(_WORD *)(result + 2);
  v18 = (int)(float)((float)((float)((float)v13 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v13 * 0.000015259)
                                                                 - (float)((float)v16 * 0.000015259))
                                                 * v27))
                                 * 65535.0);
  v19 = (int)(float)((float)((float)((float)v14 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v14 * 0.000015259)
                                                                 - (float)((float)v17 * 0.000015259))
                                                 * v27))
                                 * 65535.0);
  v20.i32[0] = (unsigned __int16)v11[2];
  v20.i32[1] = (unsigned __int16)v11[3];
  v21 = vmul_f32(vcvt_f32_u32(v20), v15);
  v22.i32[0] = *(unsigned __int16 *)(result + 4);
  v22.i32[1] = *(unsigned __int16 *)(result + 6);
  v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v21, vmla_f32(vneg_f32(v21), v15, vcvt_f32_u32(v22)), v27), (float32x2_t)vdup_n_s32(0x477FFF00u)));
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  v25 = (int64x2_t)vshlq_u64(v24, (uint64x2_t)xmmword_19FFB3810);
  v26 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] | (v19 << 16) | v18;
LABEL_14:
  *a1 = v26;
  return result;
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  v5 = (uint64_t *)(result + 16 * a3);
  v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_31:
    v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      v11 = *v24;
      v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      v26 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
      {
        v34 = 2 * v25;
        v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if ((_DWORD)v25 != (unsigned __int16)v33)
        {
          v42 = *((unsigned __int16 *)v11 + 29);
          if (!*((_WORD *)v11 + 29))
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          v30 = v11[6];
          if (*((_BYTE *)v11 + 63))
          {
            if (v42 >= 0x1E)
            {
              v54 = v11[6];
              v55 = *((unsigned __int16 *)v11 + 29);
              do
              {
                v56 = v55 >> 1;
                v57 = &v54[v55 >> 1];
                v59 = *v57;
                v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2)
                  v54 = v58;
                else
                  v55 = v56;
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2)
                return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              v31 = 0;
              result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                v43 = v30[v31];
                if (v43 >= a2)
                  break;
                if (v42 == ++v31)
                  return result;
              }
              if (v43 != a2)
                LOWORD(v31) = *((_WORD *)v11 + 29);
            }
          }
          else
          {
            v46 = 2 * v42;
            v47 = v11[6];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                v47 = &v30[v42];
                break;
              }
            }
            v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if ((_DWORD)v42 == (unsigned __int16)v31)
            return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          if (v42 <= (unsigned __int16)v31)
            return result;
          return (unint64_t)&v30[4 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 28);
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        v27 = 0;
        while (1)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2)
            break;
          if (v25 == ++v27)
            goto LABEL_67;
        }
        if (v28 == a2)
          LOWORD(v33) = v27;
        else
          LOWORD(v33) = *((_WORD *)v11 + 5);
        goto LABEL_66;
      }
      v36 = *v11;
      v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        v38 = v37 >> 1;
        v39 = &v36[v37 >> 1];
        v41 = *v39;
        v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2)
          v36 = v40;
        else
          v37 = v38;
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
  v7 = v5[6];
  v8 = v7 + 8 * v6;
  while (1)
  {
    v10 = *(unsigned __int16 ****)(*(_QWORD *)v7 + 72);
    if (v10)
    {
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        v13 = (uint64_t)*v11;
        if (*((_BYTE *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            v18 = *v11;
            v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2)
              goto LABEL_6;
            v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            v14 = 0;
            while (1)
            {
              v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2)
                break;
              if (v12 == ++v14)
                goto LABEL_6;
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          v16 = 2 * v12;
          v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if ((_DWORD)v12 != (unsigned __int16)v9)
        break;
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_31;
  }
  v29 = *((unsigned __int16 *)v11 + 29);
  if (!*((_WORD *)v11 + 29))
    return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v30 = v11[6];
  if (!*((_BYTE *)v11 + 63))
  {
    v44 = 2 * v29;
    v45 = v11[6];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        v45 = &v30[v29];
        break;
      }
    }
    v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31)
      return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (unint64_t)&v30[4 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 28);
  }
  if (v29 < 0x1E)
  {
    v31 = 0;
    result = (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v32 = v30[v31];
      if (v32 >= a2)
        break;
      if (v29 == ++v31)
        return result;
    }
    if (v32 != a2)
      LOWORD(v31) = *((_WORD *)v11 + 29);
    goto LABEL_105;
  }
  v48 = v11[6];
  v49 = *((unsigned __int16 *)v11 + 29);
  do
  {
    v50 = v49 >> 1;
    v51 = &v48[v49 >> 1];
    v53 = *v51;
    v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2)
      v48 = v52;
    else
      v49 = v50;
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (unint64_t)&gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

_QWORD *md::LabelsLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  gss::Allocator *v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  unint64_t v63;
  float v64;
  float *v65;
  float v66;
  BOOL v67;
  unsigned int v68;
  float v69;
  float v70;
  _BOOL4 v71;
  float v72;
  float v73;
  md::LabelManager *v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint8_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint8_t *v82;
  uint64_t v83;
  _QWORD *v84;
  uint8_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  md::LabelManager *v91;
  uint8_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  md::LabelManager *v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unsigned __int8 *v107;
  int v108;
  int v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *result;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint8_t buf[8];
  md::LabelManager *v124;
  unint64_t v125;
  uint8_t *v126;
  unsigned __int8 v127;
  _BYTE v128[24];
  _BYTE *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  __int128 v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v132[0] = &off_1E42C8D38;
  v132[1] = a2;
  v133 = v132;
  v130[0] = &off_1E42C8D80;
  v130[1] = a2;
  v131 = v130;
  v135 = v134;
  v134[0] = &off_1E42C8D80;
  v134[1] = a2;
  std::__function::__func<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0,std::allocator<md::LabelsLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::ResolvedDependencies const&,md::LabelsContext &)::$_0>,void ()(void)>::operator()((uint64_t)v132);
  v8 = v131;
  if (v131 == v130)
  {
    v9 = 4;
    v8 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v133;
  if (v133 == v132)
  {
    v11 = 4;
    v10 = v132;
    goto LABEL_10;
  }
  if (v133)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = (_QWORD *)*((_QWORD *)a2 + 1);
  v13 = (int8x8_t)v12[1];
  if (!*(_QWORD *)&v13)
    goto LABEL_38;
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v13 <= 0xC97B9E962ADF4AD4)
      v15 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & 0xC97B9E962ADF4AD4;
  }
  v16 = *(_QWORD **)(*v12 + 8 * v15);
  if (!v16)
    goto LABEL_35;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_35;
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v13 - 1;
    do
    {
      v20 = v17[1];
      if (v20 == 0xC97B9E962ADF4AD4)
      {
        if (v17[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_32;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_35;
      }
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    v13 = 0;
LABEL_38:
    if (!*(_BYTE *)(a1 + 252))
      goto LABEL_39;
    goto LABEL_60;
  }
  while (1)
  {
    v19 = v17[1];
    if (v19 == 0xC97B9E962ADF4AD4)
      break;
    if (v19 >= *(_QWORD *)&v13)
      v19 %= *(_QWORD *)&v13;
    if (v19 != v15)
      goto LABEL_35;
LABEL_21:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_35;
  }
  if (v17[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_21;
LABEL_32:
  v21 = (int8x8_t *)v17[5];
  if (*(_QWORD *)&v21[1] != 0xC97B9E962ADF4AD4)
  {
LABEL_35:
    v13 = 0;
    if (*(_BYTE *)(a1 + 252))
      goto LABEL_60;
LABEL_39:
    v22 = **(_QWORD **)&v13;
    v23 = *(_QWORD *)(*(_QWORD *)&v13 + 8);
    if (v22 != v23)
    {
      while (*(_BYTE *)v22 != 30)
      {
        v22 += 16;
        if (v22 == v23)
          goto LABEL_45;
      }
    }
    if (v22 == v23 || !*(_QWORD *)(v22 + 8))
    {
LABEL_45:
      if (*(double *)(a1 + 256) == 0.0)
      {
        if (GEOGetVectorKitPerformanceLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
        v24 = (id)GEOGetVectorKitPerformanceLog_log;
        if (os_signpost_enabled(v24))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_19F029000, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LabelsLayoutWillWaitForDataLoad", (const char *)&unk_1A0189141, buf, 2u);
        }

        md::LayoutContext::frameState(a2);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(v25 + 88);
LABEL_52:
        if (!*(_BYTE *)(a1 + 252))
          goto LABEL_67;
        goto LABEL_55;
      }
      md::LayoutContext::frameState(a2);
      if (*(double *)(v26 + 88) - *(double *)(a1 + 256) < 1.0)
        goto LABEL_52;
    }
    *(_BYTE *)(a1 + 252) = 1;
LABEL_55:
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v27 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v27))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LabelsLayoutCompletedWaitForDataLoad", (const char *)&unk_1A0189141, buf, 2u);
    }

    if (*(_BYTE *)(a1 + 252))
      goto LABEL_60;
    goto LABEL_67;
  }
  v13 = v21[4];
  if (!*(_BYTE *)(a1 + 252))
    goto LABEL_39;
LABEL_60:
  v28 = *(_QWORD *)(a1 + 160);
  v29 = (unsigned __int8 *)(v28 + 3058);
  if (__ldaxr((unsigned __int8 *)(v28 + 3058)))
  {
    __clrex();
  }
  else if (!__stlxr(1u, v29))
  {
    v31 = atomic_load(v29);
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(v28 + 136);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 56);
        if (v33)
        {
          *(_QWORD *)buf = v28;
          LOBYTE(v136) = 9;
          (*(void (**)(uint64_t, uint8_t *, __int128 *))(*(_QWORD *)v33 + 48))(v33, buf, &v136);
        }
      }
    }
  }
LABEL_67:
  v34 = *a3;
  if (!*(_BYTE *)(*a3 + 82))
    goto LABEL_132;
  v129 = 0;
  v35 = operator new(0x28uLL);
  *v35 = &off_1E42C8DC8;
  v35[1] = v34;
  v35[2] = a1;
  v35[3] = v34;
  v35[4] = v34 + 16;
  v129 = v35;
  v36 = *(uint8_t **)(v34 + 48);
  v37 = *(uint8_t **)(v34 + 56);
  if (v36 == v37)
    goto LABEL_73;
  while (2)
  {
    buf[0] = *v36;
    if (!v129)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_207;
    }
    (*(void (**)(_BYTE *, uint8_t *))(*(_QWORD *)v129 + 48))(v129, buf);
    if (++v36 != v37)
      continue;
    break;
  }
  v35 = v129;
  if (v129 == v128)
  {
    v38 = 4;
    v35 = v128;
LABEL_75:
    (*(void (**)(void))(*v35 + 8 * v38))();
  }
  else if (v129)
  {
LABEL_73:
    v38 = 5;
    goto LABEL_75;
  }
  v39 = *(_QWORD *)(a1 + 232);
  if (!v39)
  {
    v40 = gss::Allocator::instance(0);
    v41 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, 16, 4);
    v42 = v41;
    if (v41)
      *v41 = 0xE00000005;
    v41[1] = 65594;
    *(_QWORD *)buf = 0;
    v124 = 0;
    v125 = 0;
    v126 = (uint8_t *)v40;
    v43 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, 16, 4);
    *(_QWORD *)buf = v43;
    v124 = (md::LabelManager *)v43;
    v125 = (unint64_t)(v43 + 2);
    if (v43)
      *v43 = *v42;
    v43[1] = v42[1];
    v124 = (md::LabelManager *)(v43 + 2);
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)buf);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v40 + 40))(v40, v42, 16);
    v44 = *(_QWORD *)v34;
    *(_QWORD *)((char *)&v136 + 7) = 0;
    *(_QWORD *)&v136 = 0;
    HIBYTE(v136) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v121, v44, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)&v136);
    if (!BYTE14(v136) && (_QWORD)v136)
    {
      v46 = gss::Allocator::instance(v45);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v46 + 40))(v46, v136, WORD6(v136));
    }
    v47 = v121;
    v121 = 0uLL;
    v48 = *(std::__shared_weak_count **)(a1 + 240);
    *(_OWORD *)(a1 + 232) = v47;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(p_shared_owners);
      while (__stlxr(v50 - 1, p_shared_owners));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (*(_QWORD *)buf)
    {
      v124 = *(md::LabelManager **)buf;
      (*(void (**)(uint8_t *, _QWORD, unint64_t))(*(_QWORD *)v126 + 40))(v126, *(_QWORD *)buf, v125 - *(_QWORD *)buf);
    }
    v39 = *(_QWORD *)(a1 + 232);
  }
  v54 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)&v136 = v39;
  *((_QWORD *)&v136 + 1) = v54;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    v124 = (md::LabelManager *)v54;
    do
      v57 = __ldxr(v55);
    while (__stxr(v57 + 1, v55));
  }
  else
  {
    v124 = 0;
  }
  v125 = 0;
  v126 = 0;
  *(_QWORD *)buf = v39;
  v127 = 0;
  if (v39)
    LODWORD(v39) = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v39 + 48))(v39, &v125);
  v127 = v39;
  if (v54)
  {
    v58 = (unint64_t *)&v54->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    LODWORD(v39) = v127;
  }
  if ((_DWORD)v39)
  {
    md::LayoutContext::frameState(a2);
    v61 = *(float *)(v60 + 112);
    v62 = *(float *)(a1 + 248);
    v122 = 1;
    v63 = *(_QWORD *)(*(_QWORD *)buf + 24);
    v64 = fminf(fmaxf(v61, 0.0), 23.0);
    v65 = *(float **)v63;
    if (*(_QWORD *)v63
      && (v66 = *v65, LODWORD(v65) = *v65 == 1.0, *(_BYTE *)(v63 + 10))
      && (v66 != 0.0 ? (v67 = v66 == 1.0) : (v67 = 1), !v67)
      || (v68 = *(unsigned __int8 *)(v63 + v65 + 11), v66 = 0.0, v68 == 2))
    {
      LOBYTE(v136) = 1;
      LOBYTE(v121) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v63, 0xFAu, 0, (BOOL *)&v136, v64);
      v70 = v69;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v63, 0xFAu, 1u, (BOOL *)&v121, v64);
      v71 = (v136 | v121) != 0;
      v73 = v70 + (float)((float)(v72 - v70) * v66);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)buf + 24), 0xFAu, v68, (BOOL *)&v122, v64);
      v71 = v122;
    }
    if (!v71)
      v73 = v62;
    *(float *)(a1 + 248) = v73;
    if (v73 != v62)
    {
      v74 = *(md::LabelManager **)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24);
      *(_QWORD *)&v136 = &off_1E42C9E60;
      *((_QWORD *)&v136 + 1) = v74;
      v137 = LODWORD(v73);
      v138 = &v136;
      md::LabelManager::queueCommand(v74, 36, 1, &v136);
      v75 = v138;
      if (v138 == &v136)
      {
        v76 = 4;
        v75 = &v136;
LABEL_130:
        (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
      }
      else if (v138)
      {
        v76 = 5;
        goto LABEL_130;
      }
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
LABEL_132:
  v77 = *(_QWORD *)(a1 + 160);
  v78 = (_QWORD *)*(unsigned int *)(a1 + 220);
  if (*(_DWORD *)(v77 + 3548) != (_DWORD)v78)
  {
    *(_DWORD *)(v77 + 3548) = (_DWORD)v78;
    *(_QWORD *)buf = &off_1E42C92D8;
    v124 = (md::LabelManager *)v77;
    v125 = (unint64_t)v78;
    v126 = buf;
    md::LabelManager::queueCommand((md::LabelManager *)v77, 6, 0, buf);
    v79 = v126;
    if (v126 == buf)
    {
      v80 = 4;
      v79 = buf;
LABEL_137:
      (*(void (**)(void))(*(_QWORD *)v79 + 8 * v80))();
    }
    else if (v126)
    {
      v80 = 5;
      goto LABEL_137;
    }
    v77 = *(_QWORD *)(a1 + 160);
  }
  v81 = (_QWORD *)*(unsigned __int8 *)(a1 + 224);
  if (*(unsigned __int8 *)(v77 + 3552) != (_DWORD)v81)
  {
    *(_BYTE *)(v77 + 3552) = (_BYTE)v81;
    *(_QWORD *)buf = &off_1E42C94D0;
    v124 = (md::LabelManager *)v77;
    v125 = (unint64_t)v81;
    v126 = buf;
    md::LabelManager::queueCommand((md::LabelManager *)v77, 68, 1, buf);
    v82 = v126;
    if (v126 == buf)
    {
      v83 = 4;
      v82 = buf;
LABEL_144:
      (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
    }
    else if (v126)
    {
      v83 = 5;
      goto LABEL_144;
    }
    v77 = *(_QWORD *)(a1 + 160);
  }
  v84 = (_QWORD *)*(unsigned __int8 *)(v34 + 92);
  if (*(unsigned __int8 *)(v77 + 3555) != (_DWORD)v84)
  {
    *(_BYTE *)(v77 + 3555) = (_BYTE)v84;
    *(_QWORD *)buf = &off_1E42C9368;
    v124 = (md::LabelManager *)v77;
    v125 = (unint64_t)v84;
    v126 = buf;
    md::LabelManager::queueCommand((md::LabelManager *)v77, 47, 1, buf);
    v85 = v126;
    if (v126 == buf)
    {
      v86 = 4;
      v85 = buf;
LABEL_151:
      (*(void (**)(void))(*(_QWORD *)v85 + 8 * v86))();
    }
    else if (v126)
    {
      v86 = 5;
      goto LABEL_151;
    }
    v77 = *(_QWORD *)(a1 + 160);
  }
  v87 = (_QWORD *)*(unsigned __int8 *)(v34 + 93);
  if (*(unsigned __int8 *)(v77 + 3556) != (_DWORD)v87)
  {
    *(_BYTE *)(v77 + 3556) = (_BYTE)v87;
    *(_QWORD *)buf = &off_1E42C95A8;
    v124 = (md::LabelManager *)v77;
    v125 = (unint64_t)v87;
    v126 = buf;
    md::LabelManager::queueCommand((md::LabelManager *)v77, 66, 1, buf);
    v88 = v126;
    if (v126 == buf)
    {
      v89 = 4;
      v88 = buf;
LABEL_158:
      (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
    }
    else if (v126)
    {
      v89 = 5;
      goto LABEL_158;
    }
  }
  v90 = a3[1];
  if (v90 && *(_BYTE *)(v90 + 40))
  {
    v91 = *(md::LabelManager **)(a1 + 160);
    *(_QWORD *)buf = &off_1E42C9F38;
    v124 = v91;
    v126 = buf;
    md::LabelManager::queueCommand(v91, 20, 1, buf);
    v92 = v126;
    if (v126 == buf)
    {
      v93 = 4;
      v92 = buf;
LABEL_165:
      (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
    }
    else if (v126)
    {
      v93 = 5;
      goto LABEL_165;
    }
  }
  v94 = *(unsigned __int8 *)(v34 + 96);
  v95 = v94 == 1;
  v96 = *(md::LabelManager **)(a1 + 160);
  if (*((unsigned __int8 *)v96 + 3554) != v95)
  {
    *((_BYTE *)v96 + 3554) = v95;
    *(_QWORD *)buf = &off_1E42C9320;
    v124 = v96;
    v125 = v94 == 1;
    v126 = buf;
    md::LabelManager::queueCommand(v96, 45, 1, buf);
    v97 = v126;
    if (v126 == buf)
    {
      v98 = 4;
      v97 = buf;
LABEL_171:
      (*(void (**)(void))(*(_QWORD *)v97 + 8 * v98))();
    }
    else if (v126)
    {
      v98 = 5;
      goto LABEL_171;
    }
  }
  v99 = *(_QWORD *)(**(_QWORD **)(a1 + 144) + 40);
  v100 = *(_QWORD *)(v99 + 304);
  *(_QWORD *)&v101 = *(_QWORD *)(v99 + 296);
  *((_QWORD *)&v101 + 1) = v100;
  if (v100)
  {
    v102 = (unint64_t *)(v100 + 8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v101;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = *(unsigned __int8 **)(a1 + 160);
  v108 = v107[3553];
  if (*(_BYTE *)(v34 + 84) == 3)
    v109 = 2;
  else
    v109 = 1;
  *(_QWORD *)(a1 + 136) = v107;
  if (v108 != v109)
  {
    v107[3553] = v109;
    *(_QWORD *)buf = &off_1E42C9488;
    v124 = (md::LabelManager *)v107;
    v125 = v109;
    v126 = buf;
    md::LabelManager::queueCommand((md::LabelManager *)v107, 7, 1, buf);
    v110 = v126;
    if (v126 == buf)
    {
      v111 = 4;
      v110 = buf;
LABEL_188:
      (*(void (**)(void))(*(_QWORD *)v110 + 8 * v111))();
    }
    else if (v126)
    {
      v111 = 5;
      goto LABEL_188;
    }
    v107 = *(unsigned __int8 **)(a1 + 160);
  }
  md::LabelManager::synchWithHomeQueue((md::LabelManager *)v107, a2);
  v113 = *(_QWORD *)(a1 + 120);
  v112 = *(_QWORD *)(a1 + 128);
  if (v112)
  {
    v114 = (unint64_t *)(v112 + 8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
  v116 = (std::__shared_weak_count *)a4[1];
  *a4 = v113;
  a4[1] = v112;
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  a4[2] = *(_QWORD *)(a1 + 136);
  if (!v135)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_207:
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v135 + 48))(v135);
  result = v135;
  if (v135 == v134)
  {
    v120 = 4;
    result = v134;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v120))();
  }
  else if (v135)
  {
    v120 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v120))();
  }
  return result;
}

void sub_19F230798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v30 - 136));
  if (a13)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a16 + 40))(a16, a13, a15 - a13);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a30);
  _Unwind_Resume(a1);
}

_QWORD *md::LabelManager::synchWithHomeQueue(md::LabelManager *this, const md::LayoutContext *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint8_t v22[8];
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v26 = v25;
  v23[0] = &off_1E42C9B48;
  v24 = v23;
  v25[0] = &off_1E42C9B00;
  v28 = v27;
  v27[0] = &off_1E42C9B48;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v4 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)v22 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsSynchWithHome", (const char *)&unk_1A0189141, v22, 2u);
  }

  v5 = v24;
  if (v24 == v23)
  {
    v6 = 4;
    v5 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = v26;
  if (v26 == v25)
  {
    v8 = 4;
    v7 = v25;
    goto LABEL_14;
  }
  if (v26)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  if (!a2)
    goto LABEL_39;
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  v10 = (int8x8_t)v9[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_39;
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v10 <= 0x4927EB92E562CC46uLL)
      v12 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & 0x4927EB92E562CC46;
  }
  v13 = *(_QWORD **)(*v9 + 8 * v12);
  if (!v13)
    goto LABEL_39;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_39;
  if (v11.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == 0x4927EB92E562CC46)
      {
        if (v14[2] == 0x4927EB92E562CC46)
          goto LABEL_37;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_39;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_39;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == 0x4927EB92E562CC46)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v12)
      goto LABEL_39;
LABEL_26:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_39;
  }
  if (v14[2] != 0x4927EB92E562CC46)
    goto LABEL_26;
LABEL_37:
  v18 = v14[5];
  if (*(_QWORD *)(v18 + 8) == 0x4927EB92E562CC46)
  {
    v19 = *(_QWORD *)(v18 + 32);
    goto LABEL_40;
  }
LABEL_39:
  v19 = 0;
LABEL_40:
  *((_QWORD *)this + 209) = v19;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30));
  if (!v28)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v28 + 48))(v28);
  result = v28;
  if (v28 == v27)
  {
    v21 = 4;
    result = v27;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
  }
  else if (v28)
  {
    v21 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
  }
  return result;
}

void sub_19F230D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_19F230D2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F230D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::CompositeLabeler::synchWithHomeQueue(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
    v3 = *v1++;
  return this;
}

void md::LabelCustomFeatureSupport::flushQueuedCommands(md::LabelCustomFeatureSupport *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *((_QWORD *)this + 5);
  if (v1 != *((_QWORD *)this + 6))
  {
    v3 = 0;
    do
    {
      v5 = *(_OWORD *)(v1 + 16 * v3);
      v6 = *(std::__shared_weak_count **)(v1 + 16 * v3 + 8);
      if (*((_QWORD *)&v5 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(_QWORD *)(v5 + 32);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      ++v3;
      v1 = *((_QWORD *)this + 5);
      v4 = *((_QWORD *)this + 6);
    }
    while (v3 < (v4 - v1) >> 4);
    while (v4 != v1)
    {
      v12 = *(std::__shared_weak_count **)(v4 - 8);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v4 -= 16;
    }
    *((_QWORD *)this + 6) = v1;
  }
}

void sub_19F230ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::synchWithHomeQueue(md::StandardLabeler *this)
{
  md::LabelCustomFeatureSupport *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;

  v1 = (md::LabelCustomFeatureSupport *)*((_QWORD *)this + 4);
  md::LabelCustomFeatureSupport::flushQueuedCommands(v1);
  v2 = (_QWORD *)*((_QWORD *)v1 + 9);
  if (v2 != (_QWORD *)((char *)v1 + 80))
  {
    do
    {
      v3 = v2[26];
      if (v3 != v2[27])
      {
        v4 = 0;
        do
        {
          v6 = *(_OWORD *)(v3 + 16 * v4);
          v7 = *(std::__shared_weak_count **)(v3 + 16 * v4 + 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldxr(p_shared_owners);
            while (__stxr(v9 + 1, p_shared_owners));
          }
          v10 = *(_QWORD *)(v6 + 32);
          if (!v10)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
          if (v7)
          {
            v11 = (unint64_t *)&v7->__shared_owners_;
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          ++v4;
          v3 = v2[26];
          v5 = v2[27];
        }
        while (v4 < (v5 - v3) >> 4);
        while (v5 != v3)
        {
          v13 = *(std::__shared_weak_count **)(v5 - 8);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v5 -= 16;
        }
        v2[27] = v3;
      }
      v16 = (_QWORD *)v2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v2[2];
          v18 = *v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
      }
      v2 = v17;
    }
    while (v17 != (_QWORD *)((char *)v1 + 80));
  }
  md::LabelCustomFeatureSupport::flushQueuedCommands(v1);
}

void sub_19F231068(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void gdc::NonFlatTileSelector::tilesInView(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  long double v13;
  double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char *v36;
  uint64_t v37;
  char *v38;
  double *v39;
  _BYTE *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  int v82;
  double v83;
  uint64_t v84;
  signed int v85;
  void **v86;
  void **v87;
  void **v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  signed int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int32x2_t v106;
  int64x2_t v107;
  int8x16_t v108;
  _BOOL4 v109;
  int8x16_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  uint64_t *v116;
  double *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  char v126;
  __int32 v127;
  __int32 v128;
  uint64_t *v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  double v133;
  char *v134;
  uint64_t v135;
  int32x2_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint8x8_t v143;
  uint64_t **v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned __int8 v148;
  _QWORD *v149;
  float v150;
  float v151;
  _BOOL8 v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  _QWORD *v156;
  size_t prime;
  _QWORD *v158;
  void *v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  size_t v164;
  size_t v165;
  size_t v166;
  _QWORD *v167;
  size_t v168;
  uint64_t v169;
  unint64_t v170;
  uint8x8_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  size_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  double v182;
  double v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned int v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int32x2_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  int32x2_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  __int32 v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  double *v214;
  uint64_t v215;
  char *v216;
  signed int v217;
  signed int v219;
  float64x2_t v220;
  signed int v221;
  int32x2_t v222;
  uint64_t v223;
  float64x2_t v224;
  _BYTE __p[40];
  __int128 v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  uint64_t v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  uint64_t v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  unsigned __int8 v292[4];
  int32x2_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  void *v297;

  v6 = a1;
  v7 = *(_DWORD *)(a1 + 8);
  v9 = *(double *)(a2 + 368);
  v8 = *(double *)(a2 + 376);
  v10 = v8 * v9;
  if (v8 >= v9)
  {
    v14 = *(double *)(a2 + 456);
  }
  else
  {
    if (v10 <= 0.0)
      v11 = 1.0;
    else
      v11 = v8 / v9;
    v12 = tan(*(double *)(a2 + 456) * 0.5);
    v13 = atan(v11 * v12);
    v14 = v13 + v13;
  }
  v15 = tan(v14 * 0.5);
  *(long double *)(v6 + 24) = v15 * v15 * ((double)(v7 * v7) * (4.0 * v9)) / (a4 * a4 * v8 * v10);
  v16 = *(double *)(a2 + 1200);
  v17 = *(double *)(a2 + 1208);
  v18 = *(double *)(a2 + 1184);
  v19 = *(double *)(a2 + 1216);
  v20 = *(double *)(a2 + 1192);
  *(_QWORD *)__p = *(_QWORD *)(a2 + 1176);
  *(double *)&__p[8] = v18;
  *(double *)&__p[16] = v20;
  *(double *)&__p[24] = v16 - *(double *)__p;
  *(double *)&__p[32] = v17 - v18;
  *(double *)&v226 = v19 - v20;
  v21 = *(double *)(a2 + 1248);
  v22 = *(double *)(a2 + 1256);
  v23 = *(double *)(a2 + 1232);
  v24 = *(double *)(a2 + 1264);
  v25 = *(double *)(a2 + 1240);
  *((_QWORD *)&v226 + 1) = *(_QWORD *)(a2 + 1224);
  v227 = v23;
  v228 = v25;
  v229 = v21 - *((double *)&v226 + 1);
  v230 = v22 - v23;
  v231 = v24 - v25;
  v26 = *(double *)(a2 + 1296);
  v27 = *(double *)(a2 + 1304);
  v28 = *(double *)(a2 + 1280);
  v29 = *(double *)(a2 + 1312);
  v30 = *(double *)(a2 + 1288);
  v232 = *(double *)(a2 + 1272);
  v233 = v28;
  v234 = v30;
  v235 = v26 - v232;
  v236 = v27 - v28;
  v237 = v29 - v30;
  v31 = *(double *)(a2 + 1344);
  v32 = *(double *)(a2 + 1352);
  v33 = *(double *)(a2 + 1328);
  v34 = *(double *)(a2 + 1360);
  v214 = (double *)a2;
  v35 = *(double *)(a2 + 1336);
  v238 = *(double *)(a2 + 1320);
  v239 = v33;
  v240 = v35;
  v241 = v31 - v238;
  v242 = v32 - v33;
  v243 = v34 - v35;
  v244 = *(_QWORD *)__p;
  v245 = v18;
  v246 = v20;
  v247 = *((double *)&v226 + 1) - *(double *)__p;
  v248 = v23 - v18;
  v249 = v25 - v20;
  v250 = *((_QWORD *)&v226 + 1);
  v251 = v23;
  v252 = v25;
  v253 = v238 - *((double *)&v226 + 1);
  v254 = v33 - v23;
  v255 = v35 - v25;
  v256 = v238;
  v257 = v33;
  v258 = v35;
  v259 = v232 - v238;
  v260 = v28 - v33;
  v261 = v30 - v35;
  v262 = v232;
  v263 = v28;
  v264 = v30;
  v265 = *(double *)__p - v232;
  v266 = v18 - v28;
  v267 = v20 - v30;
  v268 = v16;
  v269 = v17;
  v270 = v19;
  v271 = v21 - v16;
  v272 = v22 - v17;
  v273 = v24 - v19;
  v274 = v21;
  v275 = v22;
  v276 = v24;
  v277 = v31 - v21;
  v278 = v32 - v22;
  v279 = v34 - v24;
  v280 = v31;
  v281 = v32;
  v282 = v34;
  v283 = v26 - v31;
  v284 = v27 - v32;
  v285 = v29 - v34;
  v286 = v26;
  v287 = v27;
  v288 = v29;
  v289 = v16 - v26;
  v290 = v17 - v27;
  v291 = v19 - v29;
  v36 = (char *)operator new(0x240uLL);
  v37 = 0;
  v38 = v36 + 576;
  v39 = (double *)v36;
  v223 = v6;
  do
  {
    v40 = &__p[48 * v37];
    v41 = *(double *)(v6 + 32);
    v42 = *(double *)(v6 + 40);
    v43 = *((double *)v40 + 2);
    v44 = *((double *)v40 + 5);
    if (fabs(v44) >= 1.0e-10)
    {
      v48 = 1.0 / v44 * (v41 - v43);
      v49 = 1.0 / v44 * (v42 - v43);
      v50 = fmax(v48, v49);
      v47 = fmax(fmin(v48, v49), v41);
      v46 = fmin(v50, 1.0);
      if (v47 > v46)
        goto LABEL_9;
    }
    else
    {
      v45 = v43 >= v41 && v43 <= v42;
      if (!v45)
        goto LABEL_9;
      v46 = 1.0;
      v47 = 0.0;
    }
    v51 = v44 * v47;
    v52 = v43 + v44 * v47;
    v53 = v44 * v46;
    v54 = *(float64x2_t *)(v40 + 24);
    v55 = vmlaq_n_f64(*(float64x2_t *)v40, v54, v47);
    v56 = vmlaq_n_f64(*(float64x2_t *)v40, v54, v46);
    if (v39 < (double *)v38)
    {
      *(float64x2_t *)v39 = v55;
      v39[2] = v52;
      *(float64x2_t *)(v39 + 3) = vsubq_f64(v56, v55);
      v39[5] = v53 - v51;
      v39 += 6;
    }
    else
    {
      v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - v36) >> 4) + 1;
      if (v57 > 0x555555555555555)
        abort();
      if (0x5555555555555556 * ((v38 - v36) >> 4) > v57)
        v57 = 0x5555555555555556 * ((v38 - v36) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v38 - v36) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v58 = 0x555555555555555;
      else
        v58 = v57;
      if (v58)
      {
        v220 = v55;
        v224 = v56;
        if (v58 > 0x555555555555555)
LABEL_223:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v59 = (char *)operator new(48 * v58);
        v56 = v224;
        v55 = v220;
      }
      else
      {
        v59 = 0;
      }
      v60 = &v59[16 * (((char *)v39 - v36) >> 4)];
      *(float64x2_t *)v60 = v55;
      *((double *)v60 + 2) = v52;
      *(float64x2_t *)(v60 + 24) = vsubq_f64(v56, v55);
      *((double *)v60 + 5) = v53 - v51;
      if (v39 == (double *)v36)
      {
        v62 = &v59[16 * (((char *)v39 - v36) >> 4)];
      }
      else
      {
        v61 = &v59[16 * (((char *)v39 - v36) >> 4)];
        do
        {
          v62 = v61 - 48;
          v63 = *((_OWORD *)v39 - 3);
          v64 = *((_OWORD *)v39 - 1);
          *((_OWORD *)v61 - 2) = *((_OWORD *)v39 - 2);
          *((_OWORD *)v61 - 1) = v64;
          *((_OWORD *)v61 - 3) = v63;
          v39 -= 6;
          v61 -= 48;
        }
        while (v39 != (double *)v36);
      }
      v38 = &v59[48 * v58];
      v39 = (double *)(v60 + 48);
      if (v36)
        operator delete(v36);
      v36 = v62;
      v6 = v223;
    }
LABEL_9:
    ++v37;
  }
  while (v37 != 12);
  v65 = *(_DWORD *)(v6 + 8);
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  v294 = 0u;
  v295 = 0u;
  LODWORD(v296) = 1065353216;
  *a3 = v65;
  v215 = (uint64_t)(a3 + 2);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 2), (uint64_t)__p);
  a3[12] = v65;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)(a3 + 14), (uint64_t)&v294);
  if (v36 != (char *)v39)
  {
    v66 = v214[62];
    v67 = v214[63];
    v68 = v214[64];
    v69 = 0.0;
    v70 = 1.79769313e308;
    v71 = -1.79769313e308;
    v72 = -1.79769313e308;
    v73 = 1.79769313e308;
    v74 = (double *)v36;
    do
    {
      v75 = v74[1];
      v76 = v74[2];
      v77 = fmin(v75, v70);
      v78 = sqrt((*v74 - v66) * (*v74 - v66) + (v75 - v67) * (v75 - v67) + (v76 - v68) * (v76 - v68));
      v79 = fmax(v71, v75);
      v80 = v74[4] + v75;
      v81 = v74[3] + *v74;
      v69 = fmax(fmax(v69, v78), sqrt((v81 - v66) * (v81 - v66) + (v80 - v67) * (v80 - v67) + (v74[5] + v76 - v68) * (v74[5] + v76 - v68)));
      v73 = fmin(v81, fmin(*v74, v73));
      v72 = fmax(fmax(v72, *v74), v81);
      v70 = fmin(v80, v77);
      v71 = fmax(v79, v80);
      v74 += 6;
    }
    while (v74 != v39);
    if (v69 == 0.0)
      LOBYTE(v82) = 25;
    else
      v82 = (int)fmin(fmax(*(double *)(v6 + 16) + log2(v69 * v69 * *(double *)(v6 + 24)) * -0.5, 1.0), 25.0);
    v83 = (double)(1 << v82);
    LODWORD(v84) = (1 << v82) + ~vcvtmd_s64_f64(v71 * v83);
    v295 = 0u;
    v296 = 0u;
    v294 = 0u;
    v221 = (1 << v82) + ~vcvtmd_s64_f64(v70 * v83);
    if ((int)v84 > v221 || (v85 = vcvtmd_s64_f64(v72 * v83), v219 = vcvtmd_s64_f64(v73 * v83), v219 > v85))
    {
      v86 = 0;
      v87 = 0;
      goto LABEL_46;
    }
    v91 = 0;
    v92 = 0;
    v87 = 0;
    v86 = 0;
    v216 = v36;
    v93 = v85 + 1;
    v217 = v85;
    do
    {
      v94 = v219;
      if (v219 <= v85)
      {
        do
        {
          if (v86 == v87)
            v96 = 0;
          else
            v96 = 170 * (v86 - v87) - 1;
          v97 = v91 + v92;
          if (v96 == v91 + v92)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            v91 = *((_QWORD *)&v296 + 1);
            v92 = v296;
            v87 = (void **)*((_QWORD *)&v294 + 1);
            v86 = (void **)v295;
            v97 = v296 + *((_QWORD *)&v296 + 1);
          }
          v95 = (unint64_t)v87[v97 / 0xAA] + 24 * (v97 % 0xAA);
          *(_BYTE *)v95 = -1;
          *(_BYTE *)(v95 + 1) = v82;
          *(_DWORD *)(v95 + 4) = v84;
          *(_DWORD *)(v95 + 8) = v94;
          *((_QWORD *)&v296 + 1) = ++v91;
          ++v94;
        }
        while (v93 != v94);
      }
      v45 = (int)v84 < v221;
      v84 = (v84 + 1);
      v85 = v217;
    }
    while (v45);
    if (v91)
    {
      v98 = v214[62];
      v99 = v214[63];
      v100 = v214[64];
      v101 = v223;
      while (1)
      {
        v102 = v295;
        v103 = 170 * ((uint64_t)(v295 - *((_QWORD *)&v294 + 1)) >> 3) - 1;
        if ((_QWORD)v295 == *((_QWORD *)&v294 + 1))
          v103 = 0;
        v104 = *(_QWORD *)(*((_QWORD *)&v294 + 1) + 8 * (((uint64_t)v296 + v91 - 1) / 0xAAuLL))
             + 24 * (((uint64_t)v296 + v91 - 1) % 0xAAuLL);
        *(_WORD *)v292 = *(_WORD *)v104;
        v293 = *(int32x2_t *)(v104 + 4);
        *((_QWORD *)&v296 + 1) = v91 - 1;
        if ((unint64_t)(v103 - (v91 + v296) + 1) >= 0x154)
        {
          operator delete(*(void **)(v295 - 8));
          *(_QWORD *)&v295 = v102 - 8;
        }
        v105 = *(_QWORD *)(v101 + 72);
        if (v105)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)v105 + 48))(__p, v105, v292);
          v106 = vdup_n_s32(__p[0] == 0);
          v107.i64[0] = v106.u32[0];
          v107.i64[1] = v106.u32[1];
          v108 = vandq_s8((int8x16_t)vmulq_f64(*(float64x2_t *)&__p[8], (float64x2_t)vdupq_n_s64(0x3E5ACB157F7410BCuLL)), (int8x16_t)vcgezq_s64(vshlq_n_s64(v107, 0x3FuLL)));
        }
        else
        {
          v108 = *(int8x16_t *)(v101 + 32);
        }
        v109 = *(double *)v108.i64 == 0.0;
        v110 = v108;
        v111 = *(double *)&v108.i64[1] == 0.0;
        if (v109 && v111)
          v112 = 152;
        else
          v112 = 80;
        if (v109 && v111)
          v113 = v223 + 152;
        else
          v113 = v223 + 80;
        v114 = (uint64_t *)(v113 + 48);
        v115 = (_QWORD *)(v113 + 8);
        v116 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(v113 + 8), v292);
        if (v116)
        {
          v117 = *(double **)(v113 + 56);
          v118 = (uint64_t *)v116[5];
          if (v117 != (double *)v118)
          {
            v119 = (uint64_t *)v118[1];
            if (v119 != (uint64_t *)v117)
            {
              v120 = *v118;
              *(_QWORD *)(v120 + 8) = v119;
              *(_QWORD *)v118[1] = v120;
              v121 = *v117;
              *(_QWORD *)(*(_QWORD *)&v121 + 8) = v118;
              *(double *)v118 = v121;
              *(_QWORD *)v117 = v118;
              v118[1] = (uint64_t)v117;
              v117 = *(double **)(v113 + 56);
            }
          }
          if (v117 != (double *)v114)
          {
            v122 = v117[5];
            v123 = v117[6];
            v124 = v117[7];
            v125 = v117[8];
            goto LABEL_187;
          }
        }
        v126 = v292[1];
        v127 = v293.i32[1];
        v128 = v293.i32[0];
        v129 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(v113 + 8), v292);
        v130 = v126;
        if (v129)
        {
          v84 = (uint64_t)v129;
          v131 = (uint64_t *)v129[5];
          v132 = *v131;
          *(_QWORD *)(v132 + 8) = v131[1];
          *(_QWORD *)v131[1] = v132;
          --*(_QWORD *)(v113 + 64);
          operator delete(v131);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(v113 + 8), (_QWORD *)v84);
          if (*(_QWORD *)__p)
            operator delete(*(void **)__p);
          v130 = v292[1];
        }
        v133 = 1.0 / (double)(1 << v126);
        v122 = v133 * (double)v127;
        v123 = v133 * (double)((1 << v126) + ~v128);
        v124 = v122 + v133;
        v125 = v123 + v133;
        v134 = (char *)operator new(0x48uLL);
        v135 = v292[0];
        v134[16] = v292[0];
        v134[17] = v130;
        v136 = v293;
        *(int32x2_t *)(v134 + 20) = v293;
        *((double *)v134 + 5) = v122;
        *((double *)v134 + 6) = v123;
        *((double *)v134 + 7) = v124;
        *((double *)v134 + 8) = v125;
        v137 = *(_QWORD **)(v113 + 56);
        *(_QWORD *)v134 = v114;
        *((_QWORD *)v134 + 1) = v137;
        *v137 = v134;
        v138 = *(_QWORD *)(v113 + 64) + 1;
        *(_QWORD *)(v113 + 56) = v134;
        *(_QWORD *)(v113 + 64) = v138;
        v139 = (v292[1]
              - 0x61C8864680B583EBLL
              + ((v135 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v135 - 0x61C8864680B583EBLL) >> 2)) ^ (v135 - 0x61C8864680B583EBLL);
        v140 = (v136.i32[0] - 0x61C8864680B583EBLL + (v139 << 6) + (v139 >> 2)) ^ v139;
        v141 = (v136.i32[1] - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
        v142 = *(_QWORD *)(v113 + 16);
        v101 = v223;
        if (v142)
        {
          v143 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
          v143.i16[0] = vaddlv_u8(v143);
          if (v143.u32[0] > 1uLL)
          {
            v84 = (v136.i32[1] - 0x61C8864680B583EBLL + (v140 << 6) + (v140 >> 2)) ^ v140;
            if (v141 >= v142)
              v84 = v141 % v142;
          }
          else
          {
            v84 = v141 & (v142 - 1);
          }
          v144 = *(uint64_t ***)(*v115 + 8 * v84);
          if (v144)
          {
            v145 = *v144;
            if (v145)
            {
              if (v143.u32[0] < 2uLL)
              {
                while (1)
                {
                  v147 = v145[1];
                  if (v147 == v141)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v145 + 17), *((unsigned __int8 *)v145 + 16)) == __PAIR64__(v292[1], v135)
                      && *(uint64_t *)((char *)v145 + 20) == *(_QWORD *)&v136)
                    {
                      goto LABEL_186;
                    }
                  }
                  else if ((v147 & (v142 - 1)) != v84)
                  {
                    goto LABEL_119;
                  }
                  v145 = (uint64_t *)*v145;
                  if (!v145)
                    goto LABEL_119;
                }
              }
              do
              {
                v146 = v145[1];
                if (v146 == v141)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v145 + 17), *((unsigned __int8 *)v145 + 16)) == __PAIR64__(v292[1], v135)
                    && *(uint64_t *)((char *)v145 + 20) == *(_QWORD *)&v136)
                  {
                    goto LABEL_186;
                  }
                }
                else
                {
                  if (v146 >= v142)
                    v146 %= v142;
                  if (v146 != v84)
                    break;
                }
                v145 = (uint64_t *)*v145;
              }
              while (v145);
            }
          }
        }
LABEL_119:
        v148 = v292[1];
        v149 = operator new(0x30uLL);
        *v149 = 0;
        v149[1] = v141;
        *((_BYTE *)v149 + 16) = v292[0];
        *((_BYTE *)v149 + 17) = v148;
        *(int32x2_t *)((char *)v149 + 20) = v293;
        v149[5] = v134;
        v150 = (float)(unint64_t)(*(_QWORD *)(v113 + 32) + 1);
        v151 = *(float *)(v113 + 40);
        if (!v142 || (float)(v151 * (float)v142) < v150)
          break;
LABEL_176:
        v179 = (_QWORD *)*v115;
        v180 = *(_QWORD **)(*v115 + 8 * v84);
        if (v180)
        {
          *v149 = *v180;
        }
        else
        {
          *v149 = *(_QWORD *)(v113 + 24);
          *(_QWORD *)(v113 + 24) = v149;
          v179[v84] = v113 + 24;
          if (!*v149)
            goto LABEL_185;
          v181 = *(_QWORD *)(*v149 + 8);
          if ((v142 & (v142 - 1)) != 0)
          {
            if (v181 >= v142)
              v181 %= v142;
          }
          else
          {
            v181 &= v142 - 1;
          }
          v180 = (_QWORD *)(*v115 + 8 * v181);
        }
        *v180 = v149;
LABEL_185:
        ++*(_QWORD *)(v113 + 32);
        v138 = *(_QWORD *)(v113 + 64);
LABEL_186:
        while (v138 > *(_QWORD *)(v223 + v112))
        {
          v184 = *(char **)(v113 + 48);
          *(_WORD *)__p = *((_WORD *)v184 + 8);
          *(_QWORD *)&__p[4] = *(_QWORD *)(v184 + 20);
          v185 = *(_OWORD *)(v184 + 56);
          *(_OWORD *)&__p[24] = *(_OWORD *)(v184 + 40);
          v226 = v185;
          v186 = *(_QWORD *)v184;
          *(_QWORD *)(v186 + 8) = *((_QWORD *)v184 + 1);
          **((_QWORD **)v184 + 1) = v186;
          *(_QWORD *)(v113 + 64) = v138 - 1;
          operator delete(v184);
          v187 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(v113 + 8), __p);
          if (v187)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v297, (_QWORD *)(v113 + 8), v187);
            if (v297)
              operator delete(v297);
          }
          v138 = *(_QWORD *)(v113 + 64);
        }
LABEL_187:
        *(double *)__p = v122;
        *(double *)&__p[8] = v123;
        *(_QWORD *)&__p[16] = v110.i64[0];
        *(double *)&__p[24] = v124;
        *(double *)&__p[32] = v125;
        *(_QWORD *)&v226 = v110.i64[1];
        v36 = v216;
        if (!geo::Intersect::encloses<double>(v214 + 123, (double *)__p))
          goto LABEL_72;
        v182 = (v122 - v98) * (v122 - v98);
        if (v98 >= v122)
          v182 = 0.0;
        if (v98 > v124)
          v182 = (v98 - v124) * (v98 - v124);
        if (v99 > v125)
        {
          v183 = v99 - v125;
LABEL_200:
          v182 = v182 + v183 * v183;
          goto LABEL_201;
        }
        if (v99 < v123)
        {
          v183 = v123 - v99;
          goto LABEL_200;
        }
LABEL_201:
        if (v100 <= *(double *)&v110.i64[1])
        {
          if (v100 < *(double *)v110.i64)
            v182 = v182 + (*(double *)v110.i64 - v100) * (*(double *)v110.i64 - v100);
        }
        else
        {
          v182 = v182 + (v100 - *(double *)&v110.i64[1]) * (v100 - *(double *)&v110.i64[1]);
        }
        if (sqrt(v182) == 0.0)
          v188 = 25;
        else
          v188 = (int)fmin(fmax(*(double *)(v101 + 16) + log2(*(double *)(v101 + 24) * v182) * -0.5, 1.0), 25.0);
        v189 = v292[1];
        if (v292[1] >= v188)
        {
          std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v215, v292, (uint64_t)v292);
LABEL_72:
          v91 = *((_QWORD *)&v296 + 1);
          if (!*((_QWORD *)&v296 + 1))
            goto LABEL_221;
        }
        else
        {
          v190 = *((_QWORD *)&v294 + 1);
          v191 = (uint64_t)(v295 - *((_QWORD *)&v294 + 1)) >> 3;
          v192 = 170 * v191 - 1;
          v193 = v293;
          v194 = v292[0];
          if ((_QWORD)v295 == *((_QWORD *)&v294 + 1))
            v195 = 0;
          else
            v195 = 170 * v191 - 1;
          v197 = *((_QWORD *)&v296 + 1);
          v196 = v296;
          v198 = *((_QWORD *)&v296 + 1) + v296;
          if (v195 == *((_QWORD *)&v296 + 1) + (_QWORD)v296)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            v190 = *((_QWORD *)&v294 + 1);
            v197 = *((_QWORD *)&v296 + 1);
            v196 = v296;
            v198 = v296 + *((_QWORD *)&v296 + 1);
            v192 = 170 * ((uint64_t)(v295 - *((_QWORD *)&v294 + 1)) >> 3) - 1;
          }
          v199 = v189 + 1;
          v200 = vadd_s32(v193, v193);
          v201 = *(_QWORD *)(v190 + 8 * (v198 / 0xAA)) + 24 * (v198 % 0xAA);
          *(_BYTE *)v201 = v194;
          *(_BYTE *)(v201 + 1) = v189 + 1;
          *(int32x2_t *)(v201 + 4) = v200;
          v202 = v197 + 1;
          *((_QWORD *)&v296 + 1) = v202;
          v203 = v202 + v196;
          if (v192 == v202 + v196)
          {
            v222 = v200;
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            v200 = v222;
            v190 = *((_QWORD *)&v294 + 1);
            v202 = *((_QWORD *)&v296 + 1);
            v196 = v296;
            v203 = v296 + *((_QWORD *)&v296 + 1);
            v192 = 170 * ((uint64_t)(v295 - *((_QWORD *)&v294 + 1)) >> 3) - 1;
          }
          v84 = v200.u32[1];
          v204 = v200.i32[1] | 1;
          v205 = *(_QWORD *)(v190 + 8 * (v203 / 0xAA)) + 24 * (v203 % 0xAA);
          *(_BYTE *)v205 = v194;
          *(_BYTE *)(v205 + 1) = v199;
          v206 = v200.i32[0];
          *(_DWORD *)(v205 + 4) = v200.i32[0];
          *(_DWORD *)(v205 + 8) = v200.i32[1] | 1;
          v207 = v202 + 1;
          *((_QWORD *)&v296 + 1) = v207;
          v208 = v207 + v196;
          if (v192 == v207 + v196)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            v190 = *((_QWORD *)&v294 + 1);
            v207 = *((_QWORD *)&v296 + 1);
            v196 = v296;
            v208 = v296 + *((_QWORD *)&v296 + 1);
            v192 = 170 * ((uint64_t)(v295 - *((_QWORD *)&v294 + 1)) >> 3) - 1;
          }
          v209 = v206 | 1;
          v210 = *(_QWORD *)(v190 + 8 * (v208 / 0xAA)) + 24 * (v208 % 0xAA);
          *(_BYTE *)v210 = v194;
          *(_BYTE *)(v210 + 1) = v199;
          *(_DWORD *)(v210 + 4) = v209;
          *(_DWORD *)(v210 + 8) = v84;
          v211 = v207 + 1;
          *((_QWORD *)&v296 + 1) = v211;
          v212 = v211 + v196;
          if (v192 == v212)
          {
            std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)&v294);
            v211 = *((_QWORD *)&v296 + 1);
            v190 = *((_QWORD *)&v294 + 1);
            v212 = v296 + *((_QWORD *)&v296 + 1);
          }
          v213 = *(_QWORD *)(v190 + 8 * (v212 / 0xAA)) + 24 * (v212 % 0xAA);
          *(_BYTE *)v213 = v194;
          *(_BYTE *)(v213 + 1) = v199;
          *(_DWORD *)(v213 + 4) = v209;
          *(_DWORD *)(v213 + 8) = v204;
          v91 = v211 + 1;
          *((_QWORD *)&v296 + 1) = v211 + 1;
          v101 = v223;
          v36 = v216;
          if (v211 == -1)
          {
LABEL_221:
            v87 = (void **)*((_QWORD *)&v294 + 1);
            v86 = (void **)v295;
            goto LABEL_46;
          }
        }
      }
      v152 = (v142 & (v142 - 1)) != 0;
      if (v142 < 3)
        v152 = 1;
      v153 = v152 | (2 * v142);
      v154 = vcvtps_u32_f32(v150 / v151);
      if (v153 <= v154)
        v155 = v154;
      else
        v155 = v153;
      if (v155 == 1)
      {
        v155 = 2;
      }
      else if ((v155 & (v155 - 1)) != 0)
      {
        v156 = v149;
        prime = std::__next_prime(v155);
        v149 = v156;
        v155 = prime;
        v142 = *(_QWORD *)(v113 + 16);
      }
      if (v155 <= v142)
      {
        if (v155 < v142)
        {
          v170 = vcvtps_u32_f32((float)*(unint64_t *)(v113 + 32) / *(float *)(v113 + 40));
          if (v142 < 3
            || (v171 = (uint8x8_t)vcnt_s8((int8x8_t)v142), v171.i16[0] = vaddlv_u8(v171), v171.u32[0] > 1uLL))
          {
            v176 = v149;
            v170 = std::__next_prime(v170);
            v149 = v176;
          }
          else
          {
            v172 = 1 << -(char)__clz(v170 - 1);
            if (v170 >= 2)
              v170 = v172;
          }
          if (v155 <= v170)
            v155 = v170;
          if (v155 < v142)
          {
            if (v155)
              goto LABEL_131;
            v177 = (_QWORD *)*v115;
            *v115 = 0;
            if (v177)
            {
              v178 = v149;
              operator delete(v177);
              v149 = v178;
            }
            *(_QWORD *)(v113 + 16) = 0;
          }
        }
LABEL_171:
        v142 = *(_QWORD *)(v113 + 16);
        if ((v142 & (v142 - 1)) != 0)
        {
          if (v141 >= v142)
            v84 = v141 % v142;
          else
            v84 = v141;
        }
        else
        {
          v84 = (v142 - 1) & v141;
        }
        goto LABEL_176;
      }
LABEL_131:
      if (v155 >> 61)
        goto LABEL_223;
      v158 = v149;
      v159 = operator new(8 * v155);
      v160 = (_QWORD *)*v115;
      *v115 = v159;
      if (v160)
        operator delete(v160);
      v161 = 0;
      *(_QWORD *)(v113 + 16) = v155;
      do
        *(_QWORD *)(*v115 + 8 * v161++) = 0;
      while (v155 != v161);
      v163 = v113 + 24;
      v162 = *(_QWORD **)(v113 + 24);
      v149 = v158;
      if (!v162)
        goto LABEL_171;
      v164 = v162[1];
      v165 = v155 - 1;
      if ((v155 & (v155 - 1)) == 0)
      {
        v166 = v164 & v165;
        *(_QWORD *)(*v115 + 8 * v166) = v163;
        while (1)
        {
          v167 = (_QWORD *)*v162;
          if (!*v162)
            break;
          v168 = v167[1] & v165;
          if (v168 == v166)
          {
            v162 = (_QWORD *)*v162;
          }
          else if (*(_QWORD *)(*v115 + 8 * v168))
          {
            *v162 = *v167;
            v169 = 8 * v168;
            *v167 = **(_QWORD **)(*v115 + v169);
            **(_QWORD **)(*v115 + v169) = v167;
          }
          else
          {
            *(_QWORD *)(*v115 + 8 * v168) = v162;
            v162 = v167;
            v166 = v168;
          }
        }
        goto LABEL_171;
      }
      if (v164 >= v155)
        v164 %= v155;
      *(_QWORD *)(*v115 + 8 * v164) = v163;
      v173 = (_QWORD *)*v162;
      if (!*v162)
        goto LABEL_171;
      while (2)
      {
        v175 = v173[1];
        if (v175 >= v155)
          v175 %= v155;
        if (v175 != v164)
        {
          if (!*(_QWORD *)(*v115 + 8 * v175))
          {
            *(_QWORD *)(*v115 + 8 * v175) = v162;
LABEL_157:
            v162 = v173;
            v173 = (_QWORD *)*v173;
            v164 = v175;
            if (!v173)
              goto LABEL_171;
            continue;
          }
          *v162 = *v173;
          v174 = 8 * v175;
          *v173 = **(_QWORD **)(*v115 + v174);
          **(_QWORD **)(*v115 + v174) = v173;
          v173 = v162;
        }
        break;
      }
      v175 = v164;
      goto LABEL_157;
    }
LABEL_46:
    if ((unint64_t)((char *)v86 - (char *)v87) < 0x11)
    {
      v88 = v87;
    }
    else
    {
      v88 = (void **)*((_QWORD *)&v294 + 1);
      v89 = (unint64_t)v86 - *((_QWORD *)&v294 + 1);
      do
      {
        operator delete(*v87);
        ++v88;
        v89 -= 8;
        v87 = v88;
      }
      while (v89 > 0x10);
      *((_QWORD *)&v294 + 1) = v88;
    }
    while (v88 != v86)
    {
      v90 = *v88++;
      operator delete(v90);
    }
    if ((_QWORD)v294)
      operator delete((void *)v294);
  }
  if (v36)
    operator delete(v36);
}

void md::DaVinciGroundMetaData::queryMetaTileFromTile(md::DaVinciGroundMetaData *this, const QuadTile *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  unsigned __int8 v9[16];
  void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14[24];

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)&a2->_type + 16))(&v13, *(_QWORD *)&a2->_type, 29);
  if ((_BYTE)v13)
  {
    gdc::Tiled::mapDataKeyFromTile(v9, 0, v14, 51, *(_DWORD *)(a2->_hash + 16));
    gdc::LayerDataStore::get((gdc::LayerDataStore *)v8, *(const gdc::LayerDataRequestKey **)&a2->_xIdx, v9);
    v4 = (std::__shared_weak_count *)v8[1];
    *(_QWORD *)this = v8[0];
    *((_QWORD *)this + 1) = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v12)
      v12 = 0;
    if (v10 != v11)
      free(v10);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

void std::deque<geo::QuadTile>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  _OWORD *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_77:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v30 = (v5 - v9) >> 2;
      if (v5 == v9)
        v30 = 1;
      if (!(v30 >> 61))
      {
        v31 = v30 >> 2;
        v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        v37 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v71 = &v33[8 * v31];
            v39 = v71;
            if ((unint64_t)(v71 - v7) >= 0x20)
            {
              v72 = (v38 >> 3) + 1;
              v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v73];
              v74 = (__int128 *)(v6 + 3);
              v75 = v71 + 16;
              v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v77 = *v74;
                *(v75 - 1) = *(v74 - 1);
                *v75 = v77;
                v74 += 2;
                v75 += 2;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_75;
              v7 += v73;
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            v78 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v39 = v78;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_75;
      }
LABEL_86:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_77;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v87 = operator new(0xFF0uLL);
      std::__split_buffer<geo::QuadTile *>::push_back((char **)a1, &v87);
      return;
    }
    v87 = operator new(0xFF0uLL);
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v87);
    v40 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v40 + 1);
    v8 = *v40;
    *(_QWORD *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_77;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v41 = (v5 - v9) >> 2;
      if (v5 == v9)
        v41 = 1;
      if (!(v41 >> 61))
      {
        v42 = v41 >> 2;
        v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        v44 = v5 - v7;
        v36 = v5 == v7;
        v5 = v34;
        if (!v36)
        {
          v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v79 = &v33[8 * v42];
            v46 = v79;
            if ((unint64_t)(v79 - v7) >= 0x20)
            {
              v80 = (v45 >> 3) + 1;
              v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v81];
              v82 = (__int128 *)(v40 + 3);
              v83 = v79 + 16;
              v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v85 = *v82;
                *(v83 - 1) = *(v82 - 1);
                *v83 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_75;
              v7 += v81;
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            v86 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v46 = v86;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_75:
        *(_QWORD *)a1 = v33;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_77;
      }
      goto LABEL_86;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_86;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v47 = 1;
      else
        v47 = v20 >> 2;
      if (v47 >> 61)
        goto LABEL_86;
      v27 = (char *)operator new(8 * v47);
      v28 = &v27[8 * v47];
      operator delete(v25);
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
    }
    else
    {
      v29 = v21 + 2;
      if (v21 >= -1)
        v29 = v21 + 1;
      v27 -= 8 * (v29 >> 1);
    }
  }
  *(_QWORD *)v27 = v26;
  v48 = v27 + 8;
  if (v18 != v19)
  {
    while (v27 != v25)
    {
      v52 = v27;
      v50 = v48;
LABEL_47:
      v53 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v52 - 1) = v53;
      v49 = v52 - 8;
      v48 = v50;
      v27 = v49;
      if (v18 == *(_QWORD *)(a1 + 8))
        goto LABEL_44;
    }
    if (v48 < v28)
    {
      v54 = (v28 - v48) >> 3;
      if (v54 >= -1)
        v55 = v54 + 1;
      else
        v55 = v54 + 2;
      v50 = &v48[8 * (v55 >> 1)];
      v52 = &v27[8 * (v55 >> 1)];
      if (v48 == v27)
      {
        v25 = v48;
      }
      else
      {
        memmove(&v27[8 * (v55 >> 1)], v27, v48 - v27);
        v25 = v27;
      }
      goto LABEL_47;
    }
    if (v28 == v27)
      v56 = 1;
    else
      v56 = (v28 - v27) >> 2;
    if (v56 >> 61)
      goto LABEL_86;
    v57 = (char *)operator new(8 * v56);
    v25 = v57;
    v58 = (v56 + 3) >> 2;
    v52 = &v57[8 * v58];
    v50 = v52;
    v59 = v48 - v27;
    if (v48 != v27)
    {
      v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
      v60 = v59 - 8;
      v61 = &v57[8 * v58];
      v62 = v27;
      if (v60 >= 0x38)
      {
        v63 = 8 * v58;
        v61 = &v57[8 * v58];
        v62 = v27;
        if ((unint64_t)(v61 - v27) >= 0x20)
        {
          v64 = (v60 >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v52[v65];
          v66 = (__int128 *)(v27 + 16);
          v67 = &v57[v63 + 16];
          v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v66;
            *((_OWORD *)v67 - 1) = *(v66 - 1);
            *(_OWORD *)v67 = v69;
            v66 += 2;
            v67 += 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_67;
          v62 = &v27[v65];
        }
      }
      do
      {
        v70 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)v61 = v70;
        v61 += 8;
      }
      while (v61 != v50);
    }
LABEL_67:
    v28 = &v57[8 * v56];
    operator delete(v27);
    goto LABEL_47;
  }
  v49 = v27;
  v50 = v27 + 8;
LABEL_44:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v49;
  *(_QWORD *)(a1 + 16) = v50;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_19F23291C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::operator()(uint64_t a1)
{
  md::LabelCustomFeatureSupport::addDataSourceInternal(*(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 240))
  {
    v2 = *(_QWORD *)(v1 + 232);
    *(_WORD *)(v2 + 128) = 0;
    v3 = *(_QWORD *)(v2 + 112);
    if (v3)
    {
      *(_QWORD *)(v3 + 8) = 0;
      v4 = *(std::__shared_weak_count **)(v2 + 120);
      *(_QWORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 120) = 0;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(_QWORD *)(v2 + 80) = 0;

    }
    md::LabelCustomFeatureProvider::clearFeatures((md::LabelCustomFeatureProvider *)v1, 1);
  }
  *(_BYTE *)(*(_QWORD *)v1 + 232) = 1;
  md::LabelCustomFeatureProvider::featuresDidChangeForRect(v1);
}

void ___ZN3ggl15SnapshotRunLoop9setPausedEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  CFTimeInterval v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD **)(a1 + 32);
      if (v5)
      {
        v6 = CACurrentMediaTime();
        (*(void (**)(_QWORD, double))(*(_QWORD *)*v5 + 40))(*v5, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19F232B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F232BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

uint64_t ggl::DisplayLink::onTimerFired(ggl::DisplayLink *this, double a2)
{
  uint64_t v2;
  _QWORD *v4;
  double *v5;
  double v6;

  v6 = a2;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v2 + 48))(v2, &v6);
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(v4, v5);
}

uint64_t std::__function::__func<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(_QWORD *a1, double *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, double);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, double))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, double))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t ggl::SnapshotRunLoop::onTimerFired(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  *(_BYTE *)(this + 64) = 1;
  if (*(_BYTE *)(this + 65))
  {
    v4 = a2;
    v2 = *(_QWORD *)(this + 32);
    if (v2)
    {
      return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v2 + 48))(v2, &v4);
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return ___ZN3ggl20MetalResourceManager20onRenderDataReleasedEPNS_14RenderResourceE_block_invoke(v3);
    }
  }
  return this;
}

uint64_t ___ZN3ggl20MetalResourceManager20onRenderDataReleasedEPNS_14RenderResourceE_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD **)(v2 + 288);
  v4 = *(_QWORD *)(v2 + 296);
  if ((unint64_t)v3 < v4)
  {
    if (v3)
      *v3 = *(_QWORD *)(result + 40);
    v5 = v3 + 1;
    goto LABEL_27;
  }
  v6 = *(_QWORD *)(v2 + 280);
  v7 = ((uint64_t)v3 - v6) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    abort();
  v9 = v4 - v6;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = 8 * v8;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v2 + 304) + 16))(*(_QWORD *)(v2 + 304), 8 * v8, 8);
    v11 = (_QWORD *)(result + 8 * v7);
    v8 = result + v10;
    if (result)
      *v11 = *(_QWORD *)(v1 + 40);
  }
  else
  {
    v11 = (_QWORD *)(8 * v7);
  }
  v5 = v11 + 1;
  v13 = *(_QWORD *)(v2 + 280);
  v12 = *(_QWORD *)(v2 + 288);
  if (v12 != v13)
  {
    v14 = v12 - v13 - 8;
    if (v14 < 0x38)
    {
      v16 = *(_QWORD *)(v2 + 288);
    }
    else if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
    {
      v16 = *(_QWORD *)(v2 + 288);
    }
    else
    {
      v15 = (v14 >> 3) + 1;
      v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = v11 - 2;
      v18 = (__int128 *)(v12 - 16);
      v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v21 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *--v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    v12 = *(_QWORD *)(v2 + 280);
  }
  *(_QWORD *)(v2 + 280) = v11;
  *(_QWORD *)(v2 + 288) = v5;
  v22 = *(_QWORD *)(v2 + 296);
  *(_QWORD *)(v2 + 296) = v8;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 304) + 40))(*(_QWORD *)(v2 + 304), v12, v22 - v12);
LABEL_27:
  *(_QWORD *)(v2 + 288) = v5;
  return result;
}

_QWORD *esl::QuartzPath::createMutableCopyByTransforming@<X0>(CGPathRef *this@<X0>, const esl::QuartzAffineTransform *a2@<X1>, _QWORD *a3@<X8>)
{
  CGMutablePathRef MutableCopyByTransformingPath;
  _QWORD *v5;
  _QWORD *result;

  MutableCopyByTransformingPath = CGPathCreateMutableCopyByTransformingPath(this[1], (const CGAffineTransform *)((char *)a2 + 8));
  v5 = operator new(0x28uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E42DE030;
  v5[4] = MutableCopyByTransformingPath;
  a3[1] = v5;
  v5[3] = &off_1E42B0250;
  result = v5 + 3;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<esl::QuartzPath>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void esl::QuartzPath::~QuartzPath(esl::QuartzPath *this)
{
  const CGPath *v2;

  *(_QWORD *)this = &off_1E42B0250;
  v2 = (const CGPath *)*((_QWORD *)this + 1);
  if (v2)
  {
    CGPathRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  esl::QuartzPath::~QuartzPath(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t esl::QuartzPath::addCurveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16;
  const CGAffineTransform *v17;

  v16 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v16)
  {
    if (a2)
      v17 = (const CGAffineTransform *)(a2 + 8);
    else
      v17 = 0;
    CGPathAddCurveToPoint(a1[1], v17, a3, a4, a5, a6, a7, a8);
  }
  return v16;
}

CGFloat esl::QuartzAffineTransform::translate(esl::QuartzAffineTransform *this, float a2, float a3)
{
  __int128 v4;
  __int128 v5;
  CGFloat result;
  CGAffineTransform v7;
  CGAffineTransform v8;

  v4 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v7.c = v4;
  *(_OWORD *)&v7.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformTranslate(&v8, &v7, a2, a3);
  v5 = *(_OWORD *)&v8.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v8.a;
  *(_OWORD *)((char *)this + 24) = v5;
  result = v8.tx;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v8.tx;
  return result;
}

void grl::PathGenerator::createBalloonFillPath(float *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  esl::QuartzPath *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  NSObject *v11;
  unint64_t v12;
  _BYTE v13[12];
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  v6 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v4[1]);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *(_QWORD *)v13 = 0;
  ((void (*)(esl::QuartzPath *, _QWORD, _BYTE *, float, float, float, float))v4[1].__vftable[1].__get_deleter)(v6, 0, v13, v7, v8, v9, v10);
  if ((((uint64_t (*)(std::__shared_weak_count *))v4[1].__on_zero_shared)(&v4[1]) & 1) != 0)
  {
    *a2 = v4 + 1;
    a2[1] = v4;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v11 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 136315650;
      *(_QWORD *)&v13[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v14 = 2080;
      v15 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator+Balloon.cpp";
      v16 = 1024;
      v17 = 98;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Failed to create a balloon fill path.: Assertion with expression - %s : Failed in file - %s line - %i", v13, 0x1Cu);
    }
    *a2 = 0;
    a2[1] = 0;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void grl::PathGenerator::createSquarePath(float *a1@<X0>, _QWORD *a2@<X8>, float a3@<S0>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  esl::QuartzPath *v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE030;
  v8 = esl::QuartzPath::QuartzPath((esl::QuartzPath *)&v6[1]);
  ((void (*)(esl::QuartzPath *, _QWORD, float, float))v6[1].__on_zero_shared_weak)(v8, 0, *a1 + a3, a1[1]);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[1] + a3, a3, 4.7124, 0.0);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, a1[2] - a3, a1[3] - a3, a3, 0.0, 1.5708);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[3] - a3, a3, 1.5708, 3.1416);
  ((void (*)(std::__shared_weak_count *, _QWORD, _QWORD, float, float, float, float, float))v6[1].__vftable[1].__on_zero_shared_weak)(&v6[1], 0, 0, *a1 + a3, a1[1] + a3, a3, 3.1416, 4.7124);
  ((void (*)(std::__shared_weak_count *))v6[1].__vftable[2].__on_zero_shared_weak)(&v6[1]);
  if ((((uint64_t (*)(std::__shared_weak_count *))v6[1].__on_zero_shared)(&v6[1]) & 1) != 0)
  {
    *a2 = v6 + 1;
    a2[1] = v6;
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v9 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315650;
      v12 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v13 = 2080;
      v14 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/PathGenerator.cpp";
      v15 = 1024;
      v16 = 25;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Failed to create square path.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v11, 0x1Cu);
    }
    *a2 = 0;
    a2[1] = 0;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t esl::QuartzPath::addArc(CGMutablePathRef *a1, BOOL a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16;
  const CGAffineTransform *v17;

  v16 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v16)
  {
    if (a3)
      v17 = (const CGAffineTransform *)(a3 + 8);
    else
      v17 = 0;
    CGPathAddArc(a1[1], v17, a4, a5, a6, a7, a8, a2);
  }
  return v16;
}

esl::QuartzPath *esl::QuartzPath::QuartzPath(esl::QuartzPath *this)
{
  *(_QWORD *)this = &off_1E42B0250;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 1) = CGPathCreateMutable();
  return this;
}

uint64_t esl::QuartzPath::closeSubpath(CGMutablePathRef *this)
{
  CGPathCloseSubpath(this[1]);
  return 1;
}

uint64_t grl::ShapeLayerRenderer::renderShapeToContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  _BOOL8 v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  __int32 v15;
  int v16;
  int v17;
  float v18;
  float v19;
  __int32 v20;
  int v21;
  int v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  __int32 v28;
  int v29;
  int v30;
  NSObject *v31;
  _BYTE *v32;
  _BYTE *v33;
  NSObject *v34;
  unsigned int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  _BYTE *v56;
  _BYTE *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  float v81;
  float32x2_t v82;
  float v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  float v103;
  float v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  float v114;
  float32x2_t v115;
  float v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  _OWORD *v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  int v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  __int128 v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  _DWORD v149[2];
  float32x2_t v150;
  int v151;
  int v152;
  __int128 v153;
  _BYTE buf[22];
  __int16 v155;
  int v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 152))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v11 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v12 = "Nullptr for LayerMetrics being used to render layer.";
    goto LABEL_24;
  }
  *(_QWORD *)buf = 0;
  if (!*(_QWORD *)(a1 + 204))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v11 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v12 = "Metrics must contain a size to draw into a context.";
    goto LABEL_24;
  }
  if (!*a3 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3) & 1) == 0)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v11 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return 0;
    *(_WORD *)buf = 0;
    v12 = "A valid context is required to draw the path layer into.";
LABEL_24:
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    return 0;
  }
  v9 = *(_BYTE **)(a1 + 16);
  v8 = *(_BYTE **)(a1 + 24);
  if (v9 != v8)
  {
    while (*v9 != 3)
    {
      if (++v9 == v8)
      {
        v9 = *(_BYTE **)(a1 + 24);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    v10 = 0;
  }
  else if (*(_QWORD *)(a1 + 124))
  {
    v10 = 1;
  }
  else
  {
    v10 = *(float *)(a1 + 132) != 0.0;
  }
  (*(void (**)(_QWORD, _BOOL8))(*(_QWORD *)*a3 + 456))(*a3, v10);
  v153 = 0uLL;
  v13 = 0;
  switch(*(_BYTE *)(a1 + 136))
  {
    case 0:
      v150.i32[0] = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
      v150.i32[1] = v15;
      v151 = v16;
      v152 = v17;
      v18 = 0.0;
      v19 = 0.0;
      if (v10)
      {
        v18 = (float)(*(unsigned int (**)(_QWORD, float))(*(_QWORD *)*a3 + 112))(*a3, 0.0);
        v19 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 120))(*a3);
      }
      *(float *)v149 = v18;
      *(float *)&v149[1] = v19;
      grl::PathGenerator::createCirclePath((float *)&v150, (uint64_t)v149, buf);
      goto LABEL_43;
    case 1:
      v150.i32[0] = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
      v150.i32[1] = v20;
      v151 = v21;
      v152 = v22;
      grl::PathGenerator::createSquarePath((float *)&v150, buf, *(float *)(a1 + 56));
      goto LABEL_43;
    case 2:
      goto LABEL_42;
    case 3:
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v23 = GEOGetGeoResourceLibRendererLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        goto LABEL_184;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_data.shapeType() != ShapeType::Balloon";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      v155 = 1024;
      v156 = 138;
      v24 = "Balloon paths have their own seperate drawing function, the code should never reach this point.: Assertion w"
            "ith expression - %s : Failed in file - %s line - %i";
      v25 = v23;
      v26 = 28;
      goto LABEL_183;
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_188;
    case 5:
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v27 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        v155 = 1024;
        v156 = 127;
        _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Bottle shapetype is deprecated. Use Rectalloon instead.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
LABEL_42:
      v150.i32[0] = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
      v150.i32[1] = v28;
      v151 = v29;
      v152 = v30;
      grl::PathGenerator::createRectanglePath((float *)&v150, buf, *(float *)(a1 + 56));
LABEL_43:
      v153 = *(_OWORD *)buf;
      if (!*(_QWORD *)buf
        || ((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)buf + 16))(*(_QWORD *)buf, *(__n128 *)buf) & 1) == 0)
      {
        goto LABEL_179;
      }
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v31 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "_data.hasLayerStyles()";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          v155 = 1024;
          v156 = 147;
          _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, "No LayerStyles given for path layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      v32 = *(_BYTE **)(a1 + 16);
      v33 = *(_BYTE **)(a1 + 24);
      if (v32 == v33)
        goto LABEL_185;
      break;
    default:
LABEL_179:
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v123 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v24 = "Failed to generate a path for a path layer.";
        v25 = v123;
        v26 = 2;
LABEL_183:
        _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
      }
LABEL_184:
      v13 = 0;
      goto LABEL_188;
  }
  do
  {
    switch(*v32)
    {
      case 0:
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v34 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "iconLayer != LayerStyle::None";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          v155 = 1024;
          v156 = 151;
          _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum being used for path layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
        goto LABEL_175;
      case 1:
        v35 = *(unsigned __int8 *)(a1 + 76);
        if (v35 >= 2)
        {
          if (v35 == 2)
          {
            switch(*(_BYTE *)(a1 + 100))
            {
              case 0:
                v67 = (std::__shared_weak_count *)a3[1];
                v144 = *a3;
                v145 = v67;
                if (v67)
                {
                  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldxr(p_shared_owners);
                  while (__stxr(v69 + 1, p_shared_owners));
                }
                v143 = v153;
                if (*((_QWORD *)&v153 + 1))
                {
                  v70 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
                  do
                    v71 = __ldxr(v70);
                  while (__stxr(v71 + 1, v70));
                }
                *(_DWORD *)buf = *(_DWORD *)(a1 + 60);
                grl::drawFillToContext(&v144, &v143, (uint64_t)buf, 0);
                v72 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                if (*((_QWORD *)&v143 + 1))
                {
                  v73 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                  do
                    v74 = __ldaxr(v73);
                  while (__stlxr(v74 - 1, v73));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                    std::__shared_weak_count::__release_weak(v72);
                  }
                }
                v44 = v145;
                if (v145)
                {
                  v75 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v46 = __ldaxr(v75);
                  while (__stlxr(v46 - 1, v75));
                  goto LABEL_109;
                }
                break;
              case 1:
                v76 = (std::__shared_weak_count *)a3[1];
                v141 = *a3;
                v142 = v76;
                if (v76)
                {
                  v77 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v78 = __ldxr(v77);
                  while (__stxr(v78 + 1, v77));
                }
                v140 = v153;
                if (*((_QWORD *)&v153 + 1))
                {
                  v79 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                v149[0] = *(_DWORD *)(a1 + 92);
                v81 = *(float *)(a1 + 96);
                v82 = *(float32x2_t *)(a1 + 212);
                *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v82);
                v139 = *(_DWORD *)(a1 + 84);
                v83 = *(float *)(a1 + 88);
                v150 = vadd_f32(v82, *(float32x2_t *)(a1 + 244));
                grl::drawLinearGradientToContext(&v141, &v140, (uint64_t)v149, (uint64_t)buf, (uint64_t)&v139, (uint64_t)&v150, *(unsigned __int8 *)(a1 + 48), v81, v83);
                v84 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
                if (*((_QWORD *)&v140 + 1))
                {
                  v85 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                v44 = v142;
                if (v142)
                {
                  v87 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v46 = __ldaxr(v87);
                  while (__stlxr(v46 - 1, v87));
                  goto LABEL_109;
                }
                break;
              case 2:
                v88 = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
                v91 = v88 + (float)((float)(v89 - v88) * 0.5);
                v93 = v92 + (float)((float)(v90 - v92) * 0.5);
                *(float *)buf = v91;
                *(float *)&buf[4] = v93;
                v94 = *(float *)(a1 + 244);
                v95 = *(float *)(a1 + 248);
                v97 = *(float *)(a1 + 212);
                v96 = *(float *)(a1 + 216);
                v98 = (std::__shared_weak_count *)a3[1];
                v137 = *a3;
                v138 = v98;
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
                v136 = v153;
                if (*((_QWORD *)&v153 + 1))
                {
                  v101 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
                  do
                    v102 = __ldxr(v101);
                  while (__stxr(v102 + 1, v101));
                }
                v103 = sqrtf((float)((float)((float)((float)(v94 + v97) - v91) * (float)((float)(v94 + v97) - v91)) + 0.0)+ (float)((float)((float)(v95 + v96) - v93) * (float)((float)(v95 + v96) - v93)));
                v150.i32[0] = *(_DWORD *)(a1 + 92);
                v104 = v103 * *(float *)(a1 + 96);
                v149[0] = *(_DWORD *)(a1 + 84);
                grl::drawRadialGradientToContext(&v137, &v136, (uint64_t)&v150, (uint64_t)buf, (uint64_t)v149, *(unsigned __int8 *)(a1 + 48), v104, v103 * *(float *)(a1 + 88));
                v105 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
                if (*((_QWORD *)&v136 + 1))
                {
                  v106 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                v44 = v138;
                if (v138)
                {
                  v108 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v46 = __ldaxr(v108);
                  while (__stlxr(v46 - 1, v108));
                  goto LABEL_109;
                }
                break;
              case 3:
                v109 = (std::__shared_weak_count *)a3[1];
                v134 = *a3;
                v135 = v109;
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldxr(v110);
                  while (__stxr(v111 + 1, v110));
                }
                v133 = v153;
                if (*((_QWORD *)&v153 + 1))
                {
                  v112 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
                  do
                    v113 = __ldxr(v112);
                  while (__stxr(v113 + 1, v112));
                }
                v149[0] = *(_DWORD *)(a1 + 92);
                v114 = *(float *)(a1 + 96);
                v115 = *(float32x2_t *)(a1 + 212);
                *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v115);
                v139 = *(_DWORD *)(a1 + 84);
                v116 = *(float *)(a1 + 88);
                v150 = vadd_f32(v115, *(float32x2_t *)(a1 + 244));
                grl::drawReflectedGradientToContext(&v134, &v133, (uint64_t)v149, (uint64_t)buf, (uint64_t)&v139, (uint64_t)&v150, *(unsigned __int8 *)(a1 + 48), v114, v116);
                v117 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
                if (*((_QWORD *)&v133 + 1))
                {
                  v118 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
                v44 = v135;
                if (v135)
                {
                  v120 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v46 = __ldaxr(v120);
                  while (__stlxr(v46 - 1, v120));
                  goto LABEL_109;
                }
                break;
              default:
                goto LABEL_175;
            }
          }
        }
        else
        {
          v36 = (std::__shared_weak_count *)a3[1];
          v147 = *a3;
          v148 = v36;
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v146 = v153;
          if (*((_QWORD *)&v153 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          *(_DWORD *)buf = *(_DWORD *)(a1 + 60);
          grl::drawFillToContext(&v147, &v146, (uint64_t)buf, 0);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = v148;
          if (v148)
          {
            v45 = (unint64_t *)&v148->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            goto LABEL_109;
          }
        }
        goto LABEL_175;
      case 2:
        if (!*(_BYTE *)(a1 + 104) || *(float *)(a1 + 108) <= 0.0)
          goto LABEL_177;
        v47 = (std::__shared_weak_count *)a3[1];
        v131 = *a3;
        v132 = v47;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v130 = v153;
        if (*((_QWORD *)&v153 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        *(_DWORD *)buf = *(_DWORD *)(a1 + 101);
        grl::drawStrokeToContext(&v131, &v130, (uint64_t)buf, *(float *)(a1 + 108));
        v52 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
        if (*((_QWORD *)&v130 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v44 = v132;
        if (!v132)
          goto LABEL_175;
        v55 = (unint64_t *)&v132->__shared_owners_;
        do
          v46 = __ldaxr(v55);
        while (__stlxr(v46 - 1, v55));
        goto LABEL_109;
      case 3:
        v57 = *(_BYTE **)(a1 + 16);
        v56 = *(_BYTE **)(a1 + 24);
        if (v57 == v56)
          goto LABEL_93;
        break;
      default:
        goto LABEL_175;
    }
    while (*v57 != 3)
    {
      if (++v57 == v56)
      {
        v57 = *(_BYTE **)(a1 + 24);
        break;
      }
    }
LABEL_93:
    if (v57 != v56 && (*(_QWORD *)(a1 + 124) || *(float *)(a1 + 132) != 0.0))
    {
      v58 = (std::__shared_weak_count *)a3[1];
      v128 = *a3;
      v129 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v127 = v153;
      if (*((_QWORD *)&v153 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v150.i32[0] = *(_DWORD *)(a1 + 120);
      *(_QWORD *)buf = *(_QWORD *)(a1 + 124);
      grl::drawShadowToContext(&v128, &v127, (uint64_t)&v150, (float *)buf, *(float *)(a1 + 132));
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
      if (*((_QWORD *)&v127 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v44 = v129;
      if (v129)
      {
        v66 = (unint64_t *)&v129->__shared_owners_;
        do
          v46 = __ldaxr(v66);
        while (__stlxr(v46 - 1, v66));
LABEL_109:
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
LABEL_175:
      if (*(_BYTE *)(a2 + 280))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 392))(buf);
        v121 = operator new(0x20uLL);
        v121[1] = *(_OWORD *)buf;
        v122 = *a4;
        *(_QWORD *)v121 = *a4;
        *((_QWORD *)v121 + 1) = a4;
        *(_QWORD *)(v122 + 8) = v121;
        *a4 = (uint64_t)v121;
        ++a4[2];
      }
    }
LABEL_177:
    ++v32;
  }
  while (v32 != v33);
LABEL_185:
  if (*(_BYTE *)(a1 + 112))
  {
    (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 288))(*a3, &v153);
    (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 264))(*a3);
  }
  v13 = 1;
LABEL_188:
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  return v13;
}

BOOL esl::QuartzPath::isValid(esl::QuartzPath *this)
{
  return *((_QWORD *)this + 1) != 0;
}

void grl::drawFillToContext(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[16];
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v13 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v17 = 368;
    v10 = "A non-nullptr context is required for drawFillToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_19:
    v11 = v13;
    v12 = 28;
    goto LABEL_20;
  }
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v13 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v17 = 371;
    v10 = "A non-nullptr path is required for drawFillToContext().: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a3 + 3))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v13 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
    *(_WORD *)&buf[22] = 1024;
    v17 = 374;
    v10 = "A non-zero alpha color is required to draw for drawFillToContext().: Assertion with expression - %s : Failed i"
          "n file - %s line - %i";
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v9 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "Receieved empty path for drawFillToContext().";
      v11 = v9;
      v12 = 2;
LABEL_20:
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
    }
  }
  else
  {
    esl::QuartzColor::QuartzColor(buf, a3);
    if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
      (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a1 + 232))(*a1, buf);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 224))(*a1, a4);
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 288))(*a1, a2);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 312))(*a1);
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v14 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to create the fill color for a path.", v15, 2u);
      }
    }
    *(_QWORD *)buf = &off_1E42B02E0;
    *(_QWORD *)&buf[8] = &off_1E42B4850;
    if (*(_QWORD *)&buf[16])
      CFRelease(*(CFTypeRef *)&buf[16]);
  }
}

void esl::QuartzContext::saveState(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextSaveGState(this[1]);
}

void esl::QuartzContext::fillPath(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextFillPath(this[1]);
}

uint64_t esl::QuartzContext::addPath(CGContextRef *a1, uint64_t a2)
{
  uint64_t result;
  const CGPath *v5;

  result = (*((uint64_t (**)(CGContextRef *))*a1 + 3))(a1);
  if ((_DWORD)result)
  {
    if (*(_QWORD *)a2 && (v5 = *(const CGPath **)(*(_QWORD *)a2 + 8)) != 0)
    {
      CGContextAddPath(a1[1], v5);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void esl::QuartzContext::restoreState(CGContextRef *this)
{
  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
    CGContextRestoreGState(this[1]);
}

uint64_t esl::QuartzPath::moveToPoint(CGMutablePathRef *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8;
  const CGAffineTransform *v9;
  double v10;
  double v11;

  v8 = (*((uint64_t (**)(CGMutablePathRef *))*a1 + 2))(a1);
  if ((_DWORD)v8)
  {
    if (a2)
    {
      v9 = (const CGAffineTransform *)(a2 + 8);
      v10 = a3;
      v11 = a4;
    }
    else
    {
      v10 = a3;
      v11 = a4;
      v9 = 0;
    }
    CGPathMoveToPoint(a1[1], v9, v10, v11);
  }
  return v8;
}

CGFloat esl::QuartzAffineTransform::rotate(esl::QuartzAffineTransform *this, float a2)
{
  __int128 v3;
  __int128 v4;
  CGFloat result;
  CGAffineTransform v6;
  CGAffineTransform v7;

  v3 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v6.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v6.c = v3;
  *(_OWORD *)&v6.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformRotate(&v7, &v6, a2);
  v4 = *(_OWORD *)&v7.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v7.a;
  *(_OWORD *)((char *)this + 24) = v4;
  result = v7.tx;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v7.tx;
  return result;
}

CGFloat esl::QuartzAffineTransform::scale(esl::QuartzAffineTransform *this, float a2, float a3)
{
  __int128 v4;
  __int128 v5;
  CGFloat result;
  CGAffineTransform v7;
  CGAffineTransform v8;

  v4 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v7.c = v4;
  *(_OWORD *)&v7.tx = *(_OWORD *)((char *)this + 40);
  CGAffineTransformScale(&v8, &v7, a2, a3);
  v5 = *(_OWORD *)&v8.c;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v8.a;
  *(_OWORD *)((char *)this + 24) = v5;
  result = v8.tx;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v8.tx;
  return result;
}

uint64_t md::DaVinciGroundRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;

  if (*a3 == *(unsigned __int8 *)(result + 3389) && a3[1] == *(unsigned __int8 *)(result + 3390))
  {
    v3 = *(unsigned __int8 **)(a2 + 24);
    v4 = *v3;
    v5 = v3[1];
    if (v4 + 9 <= v5)
      v6 = 0;
    else
      v6 = v3 + 4;
    *(_QWORD *)(result + 3176) = v6;
    if (v4 + 9 > v5)
    {
      v3[1] = v3[2];
      v4 = 1;
    }
    *v3 = v4 + 9;
    *(_DWORD *)(result + 3188) = v4;
    *(_DWORD *)(result + 3192) = v4 + 1;
  }
  return result;
}

uint64_t md::RouteRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD **i;
  char v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;

  if (*a3 == *(unsigned __int8 *)(result + 102) && a3[1] == *(unsigned __int8 *)(result + 103))
  {
    v3 = *(_QWORD *)(result + 64);
    v4 = *(_QWORD ***)(v3 + 24);
    for (i = *(_QWORD ***)(v3 + 32); v4 != i; v4 += 2)
    {
      v6 = 2 * *((_BYTE *)*v4 + 16) + 4;
      v7 = *(unsigned __int8 **)(a2 + 24);
      v8 = *v7 + (v6 & 0xFE);
      v9 = v7[1];
      v10 = v8 > v9;
      if (v8 <= v9)
        v11 = 0;
      else
        v11 = v7 + 4;
      *(_QWORD *)(*(_QWORD *)(result + 56) + 16) = v11;
      if (v10)
      {
        *v7 = 1;
        LOBYTE(v9) = v7[2];
      }
      v12 = v9 - v6;
      v7[1] = v9 - v6;
      v13 = *v4;
      v14 = (uint64_t)(*v4 + 1);
      v15 = (_QWORD *)**v4;
      if (v15 != (_QWORD *)v14)
      {
        v16 = 0;
        do
        {
          v17 = v15[4];
          if (*(_BYTE *)(v17 + 621))
          {
            v18 = v12 + 2 + 2 * (*((_DWORD *)v13 + 4) & 0x7F);
          }
          else
          {
            if (*(_BYTE *)(v17 + 620))
              v19 = 2 * (*((_DWORD *)v13 + 4) & 0x7F);
            else
              v19 = 2 * (v16 & 0x7F);
            v18 = v19 + v12;
          }
          *(_DWORD *)(v17 + 512) = v18;
          *(_DWORD *)(v17 + 616) = v16;
          v20 = (_QWORD *)v15[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v15[2];
              v22 = *v21 == (_QWORD)v15;
              v15 = v21;
            }
            while (!v22);
          }
          ++v16;
          v15 = v21;
        }
        while (v21 != (_QWORD *)v14);
      }
    }
  }
  return result;
}

uint64_t md::ClientDrapedPolygonRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;

  v2 = *(unsigned __int8 **)(a2 + 24);
  v3 = *v2;
  if (v3 + 8 > v2[1])
  {
    v2[1] = v2[2];
    LOBYTE(v3) = 1;
  }
  *v2 = v3 + 8;
  *(_BYTE *)(result + 496) = v3;
  return result;
}

uint64_t md::VenueRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  if (*(_BYTE *)(result + 393))
    v2 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 2;
  else
    v2 = 2;
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  v5 = *(_QWORD *)(result + 376);
  if (v4 + v2 > v3[1])
  {
    *(_BYTE *)(v5 + 3704) = v3[32];
    *(_DWORD *)(v5 + 3708) = *((_DWORD *)v3 + 9);
    v3[1] = v3[2];
    LOBYTE(v4) = 1;
  }
  *v3 = v4 + v2;
  *(_BYTE *)(v5 + 3672) = v4;
  *(_BYTE *)(v5 + 3673) = v4 + 1;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(unint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *k;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 *m;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned __int8 *j;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  __int16 v78;
  uint64_t v79;
  unsigned __int8 *v80;
  BOOL v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned int v95;
  int64_t v96;
  int64_t v97;
  unsigned __int8 *v98;
  int64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150;
  unsigned __int8 *v151;
  unint64_t v152;

  v7 = (unsigned __int8 *)result;
LABEL_2:
  v8 = a2 - 16;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = (a2 - i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *v8;
        v77 = *i;
        if (v76 < v77
          || v76 == v77 && (v76 = *(a2 - 15), v77 = i[1], v76 < v77)
          || v77 >= v76 && *((_QWORD *)a2 - 1) < *((_QWORD *)i + 1))
        {
          v78 = *(_WORD *)i;
          *(_WORD *)i = *((_WORD *)a2 - 8);
          *((_WORD *)a2 - 8) = v78;
          v79 = *((_QWORD *)i + 1);
          *((_QWORD *)i + 1) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v79;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(i, i + 16, a2 - 16);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(i, i + 16, i + 32, a2 - 16);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(i, i + 16, i + 32, i + 48, a2 - 16);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v96 = (v11 - 2) >> 1;
            v97 = v96;
            while (1)
            {
              v99 = v97;
              if (v96 >= v97)
                break;
LABEL_165:
              v97 = v99 - 1;
              if (!v99)
              {
                v131 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v132 = 0;
                  v133 = *(_WORD *)i;
                  v134 = *((_QWORD *)i + 1);
                  v135 = i;
                  do
                  {
                    v136 = v135;
                    v137 = v132 + 1;
                    v135 += 16 * v132 + 16;
                    v138 = 2 * v132;
                    v132 = (2 * v132) | 1;
                    v139 = v138 + 2;
                    if (v139 >= v131)
                      goto LABEL_231;
                    result = v135[16];
                    v140 = *v135;
                    if (v140 < result)
                      goto LABEL_230;
                    if (v140 != (_DWORD)result)
                    {
                      if (result < v140)
                        goto LABEL_231;
LABEL_239:
                      result = *((_QWORD *)v135 + 3);
                      if (*(_QWORD *)&v136[16 * v137 + 8] < result)
                      {
LABEL_230:
                        v135 += 16;
                        v132 = v139;
                        goto LABEL_231;
                      }
                      goto LABEL_231;
                    }
                    result = v135[1];
                    v141 = v135[17];
                    if (result < v141)
                      goto LABEL_230;
                    if (v141 >= result)
                      goto LABEL_239;
LABEL_231:
                    *(_WORD *)v136 = *(_WORD *)v135;
                    *((_QWORD *)v136 + 1) = *((_QWORD *)v135 + 1);
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                  if (v135 == a2 - 16)
                  {
                    *(_WORD *)v135 = v133;
                    *((_QWORD *)v135 + 1) = v134;
                    goto LABEL_228;
                  }
                  *(_WORD *)v135 = *((_WORD *)a2 - 8);
                  *((_QWORD *)v135 + 1) = *((_QWORD *)a2 - 1);
                  *((_WORD *)a2 - 8) = v133;
                  *((_QWORD *)a2 - 1) = v134;
                  v142 = v135 - i + 16;
                  if (v142 >= 17)
                  {
                    if ((v143 = (v142 >> 4) - 2,
                          v144 = v143 >> 1,
                          v145 = &i[16 * (v143 >> 1)],
                          v146 = *v145,
                          v147 = *v135,
                          v146 < v147)
                      || v146 == v147 && (v146 = v145[1], v147 = v135[1], v146 < v147)
                      || v147 >= v146 && *(_QWORD *)&i[16 * v144 + 8] < *((_QWORD *)v135 + 1))
                    {
                      v148 = *(unsigned __int16 *)v135;
                      v149 = *((_QWORD *)v135 + 1);
                      *(_WORD *)v135 = *(_WORD *)v145;
                      *((_QWORD *)v135 + 1) = *((_QWORD *)v145 + 1);
                      if (v143 < 2)
                        goto LABEL_258;
                      v150 = v148 >> 8;
                      while (2)
                      {
                        v151 = v145;
                        v152 = v144 - 1;
                        v144 = (v144 - 1) >> 1;
                        v145 = &i[16 * v144];
                        result = *v145;
                        if (result >= v148)
                        {
                          if ((_DWORD)result != v148)
                          {
                            if (result > v148)
                              goto LABEL_257;
                            goto LABEL_251;
                          }
                          result = v145[1];
                          if (result >= v150)
                          {
                            if (result > v150)
                            {
LABEL_257:
                              v145 = v151;
LABEL_258:
                              *(_WORD *)v145 = v148;
                              *((_QWORD *)v145 + 1) = v149;
                              break;
                            }
LABEL_251:
                            result = *(_QWORD *)&i[16 * v144 + 8];
                            if (result >= v149)
                              goto LABEL_257;
                          }
                        }
                        *(_WORD *)v151 = *(_WORD *)v145;
                        result = *((_QWORD *)v145 + 1);
                        *((_QWORD *)v151 + 1) = result;
                        if (v152 <= 1)
                          goto LABEL_258;
                        continue;
                      }
                    }
                  }
LABEL_228:
                  a2 -= 16;
                  v29 = v131-- <= 2;
                  if (v29)
                    return result;
                }
              }
            }
            v100 = (2 * v97) | 1;
            v98 = &i[16 * v100];
            if (2 * v99 + 2 >= (uint64_t)v11)
            {
LABEL_176:
              v105 = &i[16 * v99];
              v106 = *v98;
              v107 = *v105;
              if (v106 >= v107)
              {
                if (v106 != v107 || (v106 = v98[1], v107 = v105[1], v106 >= v107))
                {
                  if (v107 < v106 || *((_QWORD *)v98 + 1) >= *(_QWORD *)&i[16 * v99 + 8])
                  {
                    v108 = *(unsigned __int16 *)v105;
                    v109 = *((_QWORD *)v105 + 1);
                    *(_WORD *)v105 = *(_WORD *)v98;
                    *((_QWORD *)v105 + 1) = *((_QWORD *)v98 + 1);
                    if (v96 >= v100)
                    {
                      v110 = v108 >> 8;
                      do
                      {
                        result = (unint64_t)v98;
                        v111 = 2 * v100;
                        v100 = (2 * v100) | 1;
                        v98 = &i[16 * v100];
                        v112 = v111 + 2;
                        if (v112 >= (uint64_t)v11)
                          goto LABEL_187;
                        v113 = v98[16];
                        v114 = *v98;
                        if (v114 < v113)
                        {
LABEL_186:
                          v98 += 16;
                          v100 = v112;
                          goto LABEL_187;
                        }
                        if (v114 == v113)
                        {
                          v117 = v98[1];
                          v118 = v98[17];
                          if (v117 < v118)
                            goto LABEL_186;
                          if (v118 < v117)
                            goto LABEL_187;
                        }
                        else if (v113 < v114)
                        {
                          goto LABEL_187;
                        }
                        if (*(_QWORD *)&i[16 * v100 + 8] < *((_QWORD *)v98 + 3))
                          goto LABEL_186;
LABEL_187:
                        v115 = *v98;
                        if (v115 < v108)
                          goto LABEL_163;
                        if (v115 == v108)
                        {
                          v116 = v98[1];
                          if (v116 < v110)
                            goto LABEL_163;
                          if (v116 > v110)
                            goto LABEL_183;
                        }
                        else if (v115 > v108)
                        {
                          goto LABEL_183;
                        }
                        if (*((_QWORD *)v98 + 1) < v109)
                        {
LABEL_163:
                          v98 = (unsigned __int8 *)result;
                          break;
                        }
LABEL_183:
                        *(_WORD *)result = *(_WORD *)v98;
                        *(_QWORD *)(result + 8) = *((_QWORD *)v98 + 1);
                      }
                      while (v96 >= v100);
                    }
                    *(_WORD *)v98 = v108;
                    *((_QWORD *)v98 + 1) = v109;
                  }
                }
              }
              goto LABEL_165;
            }
            v101 = v98[16];
            v102 = *v98;
            if (v102 >= v101)
            {
              if (v102 != v101)
              {
                if (v101 < v102)
                  goto LABEL_176;
LABEL_174:
                if (*(_QWORD *)&i[16 * v100 + 8] >= *((_QWORD *)v98 + 3))
                  goto LABEL_176;
                goto LABEL_175;
              }
              v103 = v98[1];
              v104 = v98[17];
              if (v103 >= v104)
              {
                if (v104 < v103)
                  goto LABEL_176;
                goto LABEL_174;
              }
            }
LABEL_175:
            v98 += 16;
            v100 = 2 * v99 + 2;
            goto LABEL_176;
          }
          v12 = v11 >> 1;
          v13 = &i[16 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(&v7[16 * (v11 >> 1)], v7, a2 - 16);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v7, &v7[16 * (v11 >> 1)], a2 - 16);
            v14 = &v7[16 * v12];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v7 + 16, v14 - 16, a2 - 32);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v7 + 32, &v7[16 * v12 + 16], a2 - 48);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v14 - 16, v13, &v7[16 * v12 + 16]);
            v15 = *(_WORD *)v7;
            *(_WORD *)v7 = *(_WORD *)v13;
            *(_WORD *)v13 = v15;
            v16 = *((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = *((_QWORD *)v14 + 1);
            *((_QWORD *)v14 + 1) = v16;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_15;
          }
          v17 = *(v7 - 16);
          v18 = *v7;
          if (v17 >= v18)
          {
            if (v17 != v18 || (v17 = *(v7 - 15), v18 = v7[1], v17 >= v18))
            {
              if (v18 < v17 || *((_QWORD *)v7 - 1) >= *((_QWORD *)v7 + 1))
              {
                v48 = *(unsigned __int16 *)v7;
                v49 = *(_WORD *)v7;
                v50 = v48 >> 8;
                v51 = *((_QWORD *)v7 + 1);
                v52 = *v8;
                if (v52 > v49)
                  goto LABEL_72;
                if (v52 == v49)
                {
                  v57 = *(a2 - 15);
                  v58 = v57 >= v50;
                  if (v57 > v50)
                    goto LABEL_72;
                }
                else
                {
                  v58 = v52 >= v49;
                }
                if (v58 && v51 < *((_QWORD *)a2 - 1))
                {
LABEL_72:
                  i = v7;
                  do
                  {
                    v54 = i[16];
                    i += 16;
                    v53 = v54;
                    if (v54 > v49)
                      break;
                    v55 = v53 >= v49;
                    if (v53 == v49)
                    {
                      v56 = i[1];
                      v55 = v56 >= v50;
                      if (v56 > v50)
                        break;
                    }
                  }
                  while (!v55 || v51 >= *((_QWORD *)i + 1));
                  goto LABEL_96;
                }
                for (i = v7 + 16; i < a2; i += 16)
                {
                  v59 = *i;
                  if (v59 > v49)
                    break;
                  if (v59 == v49)
                  {
                    v60 = i[1];
                    v61 = v60 >= v50;
                    if (v60 > v50)
                      break;
                  }
                  else
                  {
                    v61 = v59 >= v49;
                  }
                  if (v61 && v51 < *((_QWORD *)i + 1))
                    break;
                }
LABEL_96:
                j = a2;
                if (i < a2)
                {
                  for (j = a2 - 16; ; j -= 16)
                  {
                    if (v52 <= v49)
                    {
                      if (v52 != v49)
                        break;
                      v64 = j[1];
                      if (v64 <= v50 && (v64 < v50 || v51 >= *((_QWORD *)j + 1)))
                        break;
                    }
                    v63 = *(j - 16);
                    v52 = v63;
                  }
                }
LABEL_121:
                if (i < j)
                {
                  v65 = *(_WORD *)i;
                  *(_WORD *)i = *(_WORD *)j;
                  *(_WORD *)j = v65;
                  v67 = i[16];
                  i += 16;
                  v66 = v67;
                  v68 = *((_QWORD *)i - 1);
                  *((_QWORD *)i - 1) = *((_QWORD *)j + 1);
                  *((_QWORD *)j + 1) = v68;
                  while (v66 <= v49)
                  {
                    v70 = v66 >= v49;
                    if (v66 == v49)
                    {
                      v71 = i[1];
                      v70 = v71 >= v50;
                      if (v71 > v50)
                        break;
                    }
                    if (v70 && v51 < *((_QWORD *)i + 1))
                      break;
                    v69 = i[16];
                    i += 16;
                    v66 = v69;
                  }
                  while (1)
                  {
                    do
                    {
LABEL_113:
                      v73 = *(j - 16);
                      j -= 16;
                      v72 = v73;
                      v74 = v73 == v49;
                    }
                    while (v73 > v49);
                    if (v74)
                    {
                      v75 = j[1];
                      if (v75 > v50)
                        goto LABEL_113;
                      if (v75 < v50)
                        goto LABEL_121;
                    }
                    else if (v72 < v49)
                    {
                      goto LABEL_121;
                    }
                    if (v51 >= *((_QWORD *)j + 1))
                      goto LABEL_121;
                  }
                }
                if (i - 16 != v7)
                {
                  *(_WORD *)v7 = *((_WORD *)i - 8);
                  *((_QWORD *)v7 + 1) = *((_QWORD *)i - 1);
                }
                a4 = 0;
                *((_WORD *)i - 8) = v48;
                *((_QWORD *)i - 1) = v51;
                continue;
              }
            }
          }
LABEL_15:
          v19 = *(unsigned __int16 *)v7;
          v20 = *(_WORD *)v7;
          v21 = v19 >> 8;
          v22 = *((_QWORD *)v7 + 1);
          for (k = v7 + 16; ; k += 16)
          {
            v24 = *k;
            if (v24 < v20)
              continue;
            if (v24 == v20)
            {
              v25 = k[1];
              if (v25 < v21)
                continue;
              if (v25 > v21)
                break;
            }
            else if (v24 > v20)
            {
              break;
            }
            if (*((_QWORD *)k + 1) >= v22)
              break;
          }
          if (k - 16 == v7)
          {
            m = a2;
            if (k < a2)
            {
              v31 = *v8;
              m = a2 - 16;
              if (v31 >= v20)
              {
                m = a2 - 16;
                do
                {
                  v45 = v31 > v20;
                  if (v31 == v20)
                  {
                    v46 = m[1];
                    v45 = v46 > v21;
                    if (v46 < v21)
                      break;
                  }
                  if (v45)
                  {
                    if (k >= m)
                      break;
                  }
                  else if (*((_QWORD *)m + 1) < v22 || k >= m)
                  {
                    break;
                  }
                  v44 = *(m - 16);
                  m -= 16;
                  v31 = v44;
                }
                while (v44 >= v20);
              }
            }
          }
          else
          {
            v26 = *v8;
            for (m = a2 - 16; v26 >= v20; m -= 16)
            {
              v29 = v26 > v20;
              if (v26 == v20)
              {
                v30 = m[1];
                v29 = v30 > v21;
                if (v30 < v21)
                  break;
              }
              if (!v29 && *((_QWORD *)m + 1) < v22)
                break;
              v28 = *(m - 16);
              v26 = v28;
            }
          }
          i = k;
          if (k < m)
          {
            i = k;
            v32 = (unint64_t)m;
            do
            {
              v33 = *(_WORD *)i;
              *(_WORD *)i = *(_WORD *)v32;
              *(_WORD *)v32 = v33;
              v34 = *((_QWORD *)i + 1);
              *((_QWORD *)i + 1) = *(_QWORD *)(v32 + 8);
              *(_QWORD *)(v32 + 8) = v34;
              do
              {
                while (1)
                {
                  do
                  {
                    v36 = i[16];
                    i += 16;
                    v35 = v36;
                    v37 = v36 == v20;
                  }
                  while (v36 < v20);
                  if (!v37)
                    break;
                  v38 = i[1];
                  if (v38 >= v21)
                  {
                    if (v38 > v21)
                      goto LABEL_47;
                    goto LABEL_46;
                  }
                }
                if (v35 > v20)
                  goto LABEL_47;
LABEL_46:
                ;
              }
              while (*((_QWORD *)i + 1) < v22);
              do
              {
LABEL_47:
                v40 = *(unsigned __int8 *)(v32 - 16);
                v32 -= 16;
                v39 = v40;
                if (v40 < v20)
                  break;
                v41 = v39 > v20;
                if (v39 == v20)
                {
                  v42 = *(unsigned __int8 *)(v32 + 1);
                  v41 = v42 > v21;
                  if (v42 < v21)
                    break;
                }
              }
              while (v41 || *(_QWORD *)(v32 + 8) >= v22);
            }
            while ((unint64_t)i < v32);
          }
          if (i - 16 != v7)
          {
            *(_WORD *)v7 = *((_WORD *)i - 8);
            *((_QWORD *)v7 + 1) = *((_QWORD *)i - 1);
          }
          *((_WORD *)i - 8) = v19;
          *((_QWORD *)i - 1) = v22;
          if (k < m)
            goto LABEL_58;
          v43 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v7, i - 16);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v43)
              continue;
LABEL_58:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(v7, i - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = i - 16;
          if (v43)
            return result;
          goto LABEL_2;
        }
        v80 = i + 16;
        v82 = i == a2 || v80 == a2;
        if ((a4 & 1) == 0)
        {
          if (v82)
            return result;
LABEL_211:
          v119 = v7;
          v7 = v80;
          v120 = v119[16];
          v121 = *v119;
          if (v120 >= v121)
          {
            if (v120 != v121 || (v120 = v119[17], v121 = v119[1], v120 >= v121))
            {
              if (v121 < v120 || *((_QWORD *)v119 + 3) >= *((_QWORD *)v119 + 1))
                goto LABEL_210;
            }
          }
          v122 = *(unsigned __int16 *)v80;
          v123 = *(_WORD *)v80;
          v124 = v122 >> 8;
          v125 = *((_QWORD *)v119 + 3);
          while (1)
          {
            do
            {
              v126 = v119;
              *((_WORD *)v119 + 8) = *(_WORD *)v119;
              *((_QWORD *)v119 + 3) = *((_QWORD *)v119 + 1);
              v128 = *(v119 - 16);
              v119 -= 16;
              v127 = v128;
              v129 = v128 == v123;
            }
            while (v128 > v123);
            if (!v129)
              break;
            v130 = *(v126 - 15);
            if (v130 <= v124)
            {
              if (v130 < v124)
                goto LABEL_209;
LABEL_224:
              if (v125 >= *((_QWORD *)v126 - 1))
              {
LABEL_209:
                *(_WORD *)v126 = v122;
                *((_QWORD *)v126 + 1) = v125;
LABEL_210:
                v80 = v7 + 16;
                if (v7 + 16 == a2)
                  return result;
                goto LABEL_211;
              }
            }
          }
          if (v127 < v123)
            goto LABEL_209;
          goto LABEL_224;
        }
        if (v82)
          return result;
        v83 = 0;
        v84 = i;
        while (2)
        {
          v86 = v84;
          v84 = v80;
          v87 = v86[16];
          v88 = *v86;
          if (v87 >= v88)
          {
            if (v87 != v88 || (v87 = v86[17], v88 = v86[1], v87 >= v88))
            {
              if (v88 < v87 || *((_QWORD *)v86 + 3) >= *((_QWORD *)v86 + 1))
                goto LABEL_144;
            }
          }
          v89 = *((unsigned __int16 *)v86 + 8);
          v90 = *((_QWORD *)v86 + 3);
          *((_WORD *)v86 + 8) = *(_WORD *)v86;
          *((_QWORD *)v84 + 1) = *((_QWORD *)v86 + 1);
          v85 = i;
          if (v86 == i)
            goto LABEL_143;
          v91 = v89 >> 8;
          v92 = v83;
          while (1)
          {
            v93 = &i[v92];
            v94 = i[v92 - 16];
            if (v94 > v89)
              goto LABEL_154;
            if (v94 == v89)
            {
              v95 = i[v92 - 15];
              if (v95 > v91)
                goto LABEL_154;
              if (v95 < v91)
              {
LABEL_159:
                v85 = v86;
                goto LABEL_143;
              }
              goto LABEL_153;
            }
            if (v94 < v89)
              break;
LABEL_153:
            if (v90 >= *(_QWORD *)&i[v92 - 8])
              goto LABEL_159;
LABEL_154:
            v86 -= 16;
            *(_WORD *)v93 = *((_WORD *)v93 - 8);
            *((_QWORD *)v93 + 1) = *((_QWORD *)v93 - 1);
            v92 -= 16;
            if (!v92)
            {
              v85 = i;
              goto LABEL_143;
            }
          }
          v85 = &i[v92];
LABEL_143:
          *(_WORD *)v85 = v89;
          *((_QWORD *)v85 + 1) = v90;
LABEL_144:
          v80 = v84 + 16;
          v83 += 16;
          if (v84 + 16 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;

  v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    v5 = *(unsigned __int8 *)(result + 481);
    v6 = *(unsigned __int8 **)(a2 + 24);
    v7 = *v6;
    v8 = v6[1];
    if (v7 + v5 <= v8)
      v9 = 0;
    else
      v9 = v6 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    *v6 = v7 + v5;
    *(_BYTE *)(*(_QWORD *)(result + 368) + 912) = v7 - *(_BYTE *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      v10 = *(unsigned __int8 *)(result + 481);
      v11 = *(unsigned __int8 **)(a2 + 24);
      v12 = *v11;
      v13 = v11[1];
      if (v12 + v10 <= v13)
        v14 = 0;
      else
        v14 = v11 + 4;
      *(_QWORD *)(*(_QWORD *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *v11 = v12 + v10;
      *(_BYTE *)(*(_QWORD *)(result + 368) + 936) = v12 - *(_BYTE *)(result + 48);
      return result;
    }
  }
  else
  {
    v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421))
      return result;
    v15 = 2;
  }
  v16 = *(unsigned __int8 *)(result + 481);
  v17 = *(unsigned __int8 **)(a2 + 24);
  v18 = *v17;
  v19 = v17[1];
  if (v18 + v16 <= v19)
    v20 = 0;
  else
    v20 = v17 + 4;
  *(_QWORD *)(*(_QWORD *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *v17 = v18 + v16;
  *(_WORD *)(*(_QWORD *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;

  v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    v5 = *(unsigned __int8 *)(result + 481);
    v6 = *(unsigned __int8 **)(a2 + 24);
    v7 = *v6;
    v8 = v6[1];
    if (v7 + v5 <= v8)
      v9 = 0;
    else
      v9 = v6 + 4;
    *(_QWORD *)(*(_QWORD *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    *v6 = v7 + v5;
    *(_BYTE *)(*(_QWORD *)(result + 368) + 912) = v7 - *(_BYTE *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      v10 = *(unsigned __int8 *)(result + 481);
      v11 = *(unsigned __int8 **)(a2 + 24);
      v12 = *v11;
      v13 = v11[1];
      if (v12 + v10 <= v13)
        v14 = 0;
      else
        v14 = v11 + 4;
      *(_QWORD *)(*(_QWORD *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *v11 = v12 + v10;
      *(_BYTE *)(*(_QWORD *)(result + 368) + 936) = v12 - *(_BYTE *)(result + 48);
      return result;
    }
  }
  else
  {
    v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421))
      return result;
    v15 = 2;
  }
  v16 = *(unsigned __int8 *)(result + 481);
  v17 = *(unsigned __int8 **)(a2 + 24);
  v18 = *v17;
  v19 = v17[1];
  if (v18 + v16 <= v19)
    v20 = 0;
  else
    v20 = v17 + 4;
  *(_QWORD *)(*(_QWORD *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *v17 = v18 + v16;
  *(_WORD *)(*(_QWORD *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

_QWORD *md::RoadRenderLayer::layout(md::RoadRenderLayer *this, const md::LayoutContext *a2)
{
  const md::LayoutContext *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v58;
  char *v59;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  void *v70;
  int v71;
  void *v72;
  _QWORD *v73;
  int8x8_t v74;
  uint8x8_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8x8_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id *v97;
  id v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL4 v109;
  uint64_t v110;
  void *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  __n128 v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  char v128;
  __n128 v129;
  __n128 v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  char v139;
  __n128 v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  char v146;
  __n128 v147;
  __n128 v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t *v151;
  int8x8_t v152;
  uint8x8_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  uint64_t v170;
  gss::Allocator *v171;
  uint64_t v172;
  unsigned __int8 *v173;
  char *v174;
  char *v175;
  int v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  __int128 v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  char v186;
  void *v187;
  int v188;
  md::DaVinciTrafficLayer *v189;
  _QWORD *v190;
  uint64_t *v191;
  uint64_t *v192;
  int v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __n128 v198;
  __int128 *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t *v229;
  unint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  int8x8_t v235;
  uint8x8_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  int v246;
  __n128 v247;
  uint64_t v248;
  unint64_t v249;
  float *v250;
  double v251;
  unint64_t v252;
  double v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  char v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  BOOL v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  int v273;
  int8x8_t v274;
  float32x4_t v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  float v283;
  uint64_t v284;
  unsigned int v285;
  float *v286;
  float v287;
  BOOL v288;
  int v289;
  char v290;
  char v291;
  unint64_t v292;
  float v293;
  float *v294;
  float v295;
  BOOL v296;
  unsigned int v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  unint64_t v303;
  float *v304;
  float v305;
  BOOL v306;
  unsigned int v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v314;
  float v315;
  uint64_t v316;
  unsigned int v317;
  float v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  float32x4_t *v323;
  float v324;
  float v325;
  float v326;
  _QWORD *v327;
  float *v328;
  float *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  void *v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  void (***v340)(void);
  void (**v341)(void);
  uint64_t v342;
  uint64_t v343;
  _BOOL4 v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  char **v349;
  char **v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  char **v366;
  char **v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  _QWORD *v373;
  uint64_t v374;
  _QWORD *v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  char *v380;
  __int128 *v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  _QWORD *result;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  int v407;
  int v408;
  int v409;
  char v410;
  uint64_t *v411;
  _BOOL4 v412;
  int v413;
  uint64_t v414;
  int8x8_t v415;
  uint64_t *v416;
  uint64_t v417;
  md::RoadRenderLayer *v418;
  const md::LayoutContext *v419;
  float32x4_t v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _OWORD v424[3];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  __int128 v431;
  _BYTE v432[22];
  _BYTE v433[56];
  char v434;
  char v435;
  int v436;
  int v437;
  char v438;
  uint64_t v439;
  int v440;
  int v441;
  __int16 v442;
  uint64_t v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  _QWORD v446[2];
  char v447;
  __int128 __b;
  __int128 v449;
  char v450;
  int v451;
  _QWORD v452[3];
  _QWORD *v453;
  _QWORD v454[3];
  _QWORD *v455;
  _QWORD v456[3];
  _QWORD *v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  _BYTE v467[22];
  _QWORD v468[3];
  float *v469;
  float v470[6];
  float *v471;
  __int128 v472;
  __int128 *v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  uint64_t v480;

  v2 = a2;
  v480 = *MEMORY[0x1E0C80C00];
  v454[0] = &off_1E42CC8D8;
  v454[1] = a2;
  v455 = v454;
  v452[0] = &off_1E42CC920;
  v452[1] = a2;
  v453 = v452;
  v457 = v456;
  v456[0] = &off_1E42CC920;
  v456[1] = a2;
  std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v454);
  v4 = v453;
  if (v453 == v452)
  {
    v5 = 4;
    v4 = v452;
  }
  else
  {
    if (!v453)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v455;
  if (v455 == v454)
  {
    v7 = 4;
    v6 = v454;
    goto LABEL_10;
  }
  if (v455)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = mach_absolute_time();
  v9 = *((_QWORD *)this + 44);
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  v10 = (_QWORD *)*((_QWORD *)v2 + 1);
  v11 = (int8x8_t)v10[1];
  if (!*(_QWORD *)&v11)
    goto LABEL_34;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v11 <= 0xC97B9E962ADF4AD4)
      v13 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0xC97B9E962ADF4AD4;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_34;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_34;
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == 0xC97B9E962ADF4AD4)
      {
        if (v15[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_32;
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_34;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == 0xC97B9E962ADF4AD4)
      break;
    if (v17 >= *(_QWORD *)&v11)
      v17 %= *(_QWORD *)&v11;
    if (v17 != v13)
      goto LABEL_34;
LABEL_21:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_34;
  }
  if (v15[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_21;
LABEL_32:
  v19 = v15[5];
  if (*(_QWORD *)(v19 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_34:
    v20 = 0;
    goto LABEL_35;
  }
  v20 = *(uint64_t **)(v19 + 32);
LABEL_35:
  v21 = (unsigned __int8 *)*((_QWORD *)this + 61);
  v22 = *v21;
  v23 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v24 = v23[3];
  v25 = v23[4];
  v26 = v25 - v24;
  v405 = v8;
  if (v25 == v24)
    goto LABEL_42;
  v27 = 0;
  v28 = v26 >> 3;
  while (1)
  {
    v29 = *(unsigned __int8 **)(v24 + 8 * v27);
    if (*v29 == v22)
    {
      v30 = *((_QWORD *)v29 + 1);
      v31 = v23[15];
      if (v30 < (v23[16] - v31) >> 3)
        break;
    }
    if (++v27 >= v28)
      goto LABEL_42;
  }
  v32 = *(_QWORD *)(v31 + 8 * v30);
  if (!v32)
LABEL_42:
    v33 = 0;
  else
    v33 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8 * v21[1]);
  v406 = (char *)this + 368;
  v34 = (char *)*((_QWORD *)this + 46);
  v35 = (char *)*((_QWORD *)this + 47);
  if (v34 != v35)
  {
    while (v22 != *v34 || v21[1] != v34[1])
    {
      v34 += 8;
      if (v34 == v35)
        goto LABEL_51;
    }
  }
  if (v34 == v35)
  {
LABEL_51:
    LOWORD(v458) = *(_WORD *)v21;
    DWORD1(v458) = 0;
    v34 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)v406, (unsigned __int8 *)&v458);
    v21 = (unsigned __int8 *)*((_QWORD *)this + 61);
  }
  v409 = *((_DWORD *)v34 + 1);
  v37 = (char *)*((_QWORD *)this + 49);
  v38 = (char *)*((_QWORD *)this + 50);
  if (v37 != v38)
  {
    while (*v21 != *v37 || v21[1] != v37[1])
    {
      v37 += 8;
      if (v37 == v38)
        goto LABEL_60;
    }
  }
  if (v37 == v38)
  {
LABEL_60:
    LOWORD(v458) = *(_WORD *)v21;
    DWORD1(v458) = 0;
    v37 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, (unsigned __int8 *)&v458);
  }
  v413 = *((_DWORD *)v37 + 1);
  v40 = *(_QWORD *)(v33 + 72);
  if (*(_QWORD *)(v33 + 80) != v40)
    *(_QWORD *)(v33 + 80) = v40;
  LOBYTE(v458) = 0;
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, v2, v33, v409, &v458);
  v41 = *((_QWORD *)this + 61);
  if ((unint64_t)(*((_QWORD *)this + 62) - v41) < 3)
  {
    v414 = 0;
    v407 = 0;
    LOBYTE(v408) = 0;
  }
  else
  {
    v42 = *(unsigned __int8 *)(v41 + 2);
    v43 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
    v44 = v43[3];
    v45 = v43[4];
    v46 = v45 - v44;
    if (v45 == v44)
      goto LABEL_72;
    v47 = 0;
    v48 = v46 >> 3;
    while (1)
    {
      v49 = *(unsigned __int8 **)(v44 + 8 * v47);
      if (*v49 == v42)
      {
        v50 = *((_QWORD *)v49 + 1);
        v51 = v43[15];
        if (v50 < (v43[16] - v51) >> 3)
          break;
      }
      if (++v47 >= v48)
        goto LABEL_72;
    }
    v52 = *(_QWORD *)(v51 + 8 * v50);
    if (!v52)
LABEL_72:
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(v52 + 24) + 8 * *(unsigned __int8 *)(v41 + 3));
    v54 = *(_QWORD *)(v53 + 72);
    if (*(_QWORD *)(v53 + 80) != v54)
      *(_QWORD *)(v53 + 80) = v54;
    v414 = v53;
    v55 = (char *)*((_QWORD *)this + 46);
    v56 = (char *)*((_QWORD *)this + 47);
    if (v55 != v56)
    {
      while (v42 != *v55 || *(unsigned __int8 *)(v41 + 3) != v55[1])
      {
        v55 += 8;
        if (v55 == v56)
          goto LABEL_83;
      }
    }
    if (v55 == v56)
    {
LABEL_83:
      LOWORD(v458) = *(_WORD *)(v41 + 2);
      DWORD1(v458) = 0;
      v55 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)v406, (unsigned __int8 *)&v458);
      v41 = *((_QWORD *)this + 61);
    }
    v407 = *((_DWORD *)v55 + 1);
    v58 = (char *)*((_QWORD *)this + 49);
    v59 = (char *)*((_QWORD *)this + 50);
    if (v58 != v59)
    {
      while (*(unsigned __int8 *)(v41 + 2) != *v58
           || *(unsigned __int8 *)(v41 + 3) != v58[1])
      {
        v58 += 8;
        if (v58 == v59)
          goto LABEL_92;
      }
    }
    if (v58 == v59)
    {
LABEL_92:
      LOWORD(v458) = *(_WORD *)(v41 + 2);
      DWORD1(v458) = 0;
      v58 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, (unsigned __int8 *)&v458);
    }
    v408 = *((_DWORD *)v58 + 1);
  }
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v433, v2);
  v440 = 0x10000;
  v441 = 1065353216;
  v442 = 0;
  v443 = 0;
  v434 = *((_BYTE *)this + 360);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "ribbonCrispness");
  v436 = v62;

  v417 = v33;
  v63 = *((_QWORD *)this + 55);
  v437 = *(_DWORD *)(*(_QWORD *)(v63 + 120) + 8);
  v443 = v63;
  v64 = *((_QWORD *)v2 + 3);
  v65 = *(unsigned __int8 *)(v64 + 1);
  v66 = *(unsigned __int8 *)(v64 + 2);
  v67 = *((unsigned __int8 *)this + 360);
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v424, v2);
  v429 = 0;
  v430 = 0;
  memset_pattern16(&v431, &unk_19FFB6380, 0x10uLL);
  v68 = v67 == 0;
  v432[21] = 0;
  *(_QWORD *)v432 = 0;
  *(_QWORD *)&v432[8] = 0;
  *(_DWORD *)&v432[15] = 0;
  if (v65 >= v66)
    v68 = 0;
  BYTE8(v425) = *((_BYTE *)this + 360) | (v65 < v66);
  v432[16] = **((_BYTE **)v2 + 92);
  v432[17] = 1;
  v432[18] = v68;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v69 = v417;
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "ribbonCrispness");
  DWORD1(v426) = v71;

  v432[19] = 1;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v432[21] = objc_msgSend(v72, "showTrafficOffset");

  v73 = (_QWORD *)*((_QWORD *)v2 + 1);
  v74 = (int8x8_t)v73[1];
  if (!*(_QWORD *)&v74)
    goto LABEL_120;
  v75 = (uint8x8_t)vcnt_s8(v74);
  v75.i16[0] = vaddlv_u8(v75);
  if (v75.u32[0] > 1uLL)
  {
    v76 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v74 <= 0xDFC317497CF9A4BFLL)
      v76 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v74;
  }
  else
  {
    v76 = (*(_QWORD *)&v74 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v77 = *(_QWORD **)(*v73 + 8 * v76);
  if (!v77)
    goto LABEL_120;
  v78 = (_QWORD *)*v77;
  if (!v78)
    goto LABEL_120;
  if (v75.u32[0] < 2uLL)
  {
    while (1)
    {
      v80 = v78[1];
      if (v80 == 0xDFC317497CF9A4BFLL)
      {
        if (v78[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_117;
      }
      else if ((v80 & (*(_QWORD *)&v74 - 1)) != v76)
      {
        goto LABEL_120;
      }
      v78 = (_QWORD *)*v78;
      if (!v78)
        goto LABEL_120;
    }
  }
  while (1)
  {
    v79 = v78[1];
    if (v79 == 0xDFC317497CF9A4BFLL)
      break;
    if (v79 >= *(_QWORD *)&v74)
      v79 %= *(_QWORD *)&v74;
    if (v79 != v76)
      goto LABEL_120;
LABEL_106:
    v78 = (_QWORD *)*v78;
    if (!v78)
      goto LABEL_120;
  }
  if (v78[2] != 0xDFC317497CF9A4BFLL)
    goto LABEL_106;
LABEL_117:
  v81 = v78[5];
  if (*(_QWORD *)(v81 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_120:
    LOBYTE(v82) = 0;
    goto LABEL_121;
  }
  v82 = *(_QWORD *)(v81 + 32);
  if (v82)
    LOBYTE(v82) = *(_BYTE *)(v82 + 64) != 0;
LABEL_121:
  v438 = v82;
  v83 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v84 = *(_QWORD *)(v83 + 160);
  if (v84
    && (v85 = *(_QWORD *)(v83 + 8),
        v86 = *(_QWORD *)(v84 + 32),
        v87 = *(_QWORD *)(v85 + 96),
        v86 < (*(_QWORD *)(v85 + 104) - v87) >> 3))
  {
    v88 = *(_QWORD *)(*(_QWORD *)(v87 + 8 * v86) + 16);
    v439 = v88;
    if (!*(_QWORD *)&v74)
      goto LABEL_158;
  }
  else
  {
    v88 = 0;
    v439 = 0;
    if (!*(_QWORD *)&v74)
      goto LABEL_158;
  }
  v89 = (uint8x8_t)vcnt_s8(v74);
  v89.i16[0] = vaddlv_u8(v89);
  if (v89.u32[0] > 1uLL)
  {
    v90 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v74 <= 0xA60DDA5A69582425)
      v90 = 0xA60DDA5A69582425 % *(_QWORD *)&v74;
  }
  else
  {
    v90 = (*(_QWORD *)&v74 - 1) & 0xA60DDA5A69582425;
  }
  v91 = *(_QWORD **)(*v73 + 8 * v90);
  if (v91)
  {
    v92 = (_QWORD *)*v91;
    if (v92)
    {
      if (v89.u32[0] < 2uLL)
      {
        v93 = *(_QWORD *)&v74 - 1;
        while (1)
        {
          v95 = v92[1];
          if (v95 == 0xA60DDA5A69582425)
          {
            if (v92[2] == 0xA60DDA5A69582425)
              goto LABEL_146;
          }
          else if ((v95 & v93) != v90)
          {
            goto LABEL_158;
          }
          v92 = (_QWORD *)*v92;
          if (!v92)
            goto LABEL_158;
        }
      }
      do
      {
        v94 = v92[1];
        if (v94 == 0xA60DDA5A69582425)
        {
          if (v92[2] == 0xA60DDA5A69582425)
          {
LABEL_146:
            v96 = v92[5];
            if (*(_QWORD *)(v96 + 8) == 0xA60DDA5A69582425)
            {
              v97 = *(id **)(v96 + 32);
              if (v97 && v88 == 0)
              {
                v99 = *v97;
                objc_msgSend(v99, "textureManager");
                v100 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
                v439 = *(_QWORD *)v458;
                if (*((_QWORD *)&v458 + 1))
                {
                  v101 = (unint64_t *)(*((_QWORD *)&v458 + 1) + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }

              }
            }
            break;
          }
        }
        else
        {
          if (v94 >= *(_QWORD *)&v74)
            v94 %= *(_QWORD *)&v74;
          if (v94 != v90)
            break;
        }
        v92 = (_QWORD *)*v92;
      }
      while (v92);
    }
  }
LABEL_158:
  v103 = (uint64_t *)*((_QWORD *)this + 60);
  v104 = *v103;
  v105 = v103[1];
  if (*v103 != v105)
  {
    do
    {
      md::RoadStyle::layout(*(unint64_t **)(v104 + 32), (uint64_t)v433);
      v104 += 48;
    }
    while (v104 != v105);
  }
  if (v20)
  {
    v106 = *v20;
    v107 = v20[1];
    v108 = *v20;
    if (*v20 != v107)
    {
      v108 = *v20;
      while (*(_BYTE *)v108 != 2)
      {
        v108 += 16;
        if (v108 == v107)
          goto LABEL_169;
      }
    }
    if (v108 == v107 || !*(_QWORD *)(v108 + 8))
    {
LABEL_169:
      if (v106 != v107)
      {
        while (*(_BYTE *)v106 != 4)
        {
          v106 += 16;
          if (v106 == v107)
            goto LABEL_176;
        }
      }
      if (v106 == v107)
LABEL_176:
        v110 = 0;
      else
        v110 = *(_QWORD *)(v106 + 8);
      v109 = v110 != 0;
    }
    else
    {
      v109 = 1;
    }
    v412 = 0;
    if (*((_QWORD *)this + 58) && v109)
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v111, "showTrafficCasing"))
        v412 = *((_DWORD *)this + 91) == 2;
      else
        v412 = 0;

    }
  }
  else
  {
    v412 = 0;
  }
  v112 = (uint64_t *)*((_QWORD *)this + 34);
  v411 = (uint64_t *)*((_QWORD *)this + 35);
  if (v112 != v411)
  {
    v410 = 0;
    v418 = this;
    v419 = v2;
    while (1)
    {
      v416 = v112;
      v113 = *v112;
      v114 = *(_QWORD *)(*v112 + 384);
      v115 = *(_QWORD *)(v114 + 752);
      if (v115)
        LOBYTE(v115) = *(_QWORD *)(v115 + 16) != *(_QWORD *)(v115 + 8);
      HIBYTE(v440) = v115;
      md::RoadTileData::updateWithContext(v114, v2, *(char *)(v113 + 48), (uint64_t *)(v113 + 232));
      v116 = v413;
      if (v434)
        v116 = v409 + *(_BYTE *)(v114 + 169);
      v435 = v116;
      v117 = *(_QWORD *)(v114 + 720);
      if (v117)
      {
        v118 = *(_QWORD *)(v117 + 200);
        v119 = *((_QWORD *)this + 55);
        if (v118)
          v120 = v118 == v119;
        else
          v120 = 0;
        if (!v120)
          md::RoadLayer::setSharedResources(*(_QWORD **)(v114 + 720), v119);
        md::RoadLayer::layout(v117, (uint64_t)v433);
        *(_QWORD *)&v458 = &off_1E42D43C0;
        *((_QWORD *)&v458 + 1) = v69;
        *((_QWORD *)&v459 + 1) = &v458;
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v117 + 8), *(_QWORD **)(v117 + 16), &v458, v121);
        v122 = (__int128 *)*((_QWORD *)&v459 + 1);
        if (*((__int128 **)&v459 + 1) == &v458)
        {
          v122 = &v458;
          v123 = 4;
        }
        else
        {
          if (!*((_QWORD *)&v459 + 1))
            goto LABEL_202;
          v123 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v122 + 8 * v123))();
      }
LABEL_202:
      v124 = *(_QWORD *)(v114 + 736);
      if (!v124)
        goto LABEL_219;
      v125 = *(_QWORD *)(v124 + 200);
      v126 = *((_QWORD *)this + 55);
      if (v125)
        v127 = v125 == v126;
      else
        v127 = 0;
      if (!v127)
        md::RoadLayer::setSharedResources(*(_QWORD **)(v114 + 736), v126);
      if (v414)
      {
        v128 = v408;
        if (v434)
          v128 = v407 + *(_BYTE *)(v114 + 169);
        v435 = v128;
        md::RoadLayer::layout(v124, (uint64_t)v433);
        *(_QWORD *)&v458 = &off_1E42D43C0;
        *((_QWORD *)&v458 + 1) = v414;
        *((_QWORD *)&v459 + 1) = &v458;
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v124 + 8), *(_QWORD **)(v124 + 16), &v458, v129);
      }
      else
      {
        md::RoadLayer::layout(v124, (uint64_t)v433);
        *(_QWORD *)&v458 = &off_1E42D43C0;
        *((_QWORD *)&v458 + 1) = v69;
        *((_QWORD *)&v459 + 1) = &v458;
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v124 + 8), *(_QWORD **)(v124 + 16), &v458, v130);
      }
      v131 = (__int128 *)*((_QWORD *)&v459 + 1);
      if (*((__int128 **)&v459 + 1) == &v458)
      {
        v131 = &v458;
        v132 = 4;
        goto LABEL_217;
      }
      if (*((_QWORD *)&v459 + 1))
      {
        v132 = 5;
LABEL_217:
        (*(void (**)(void))(*(_QWORD *)v131 + 8 * v132))();
      }
      v410 = 1;
LABEL_219:
      v133 = *(_QWORD *)(v114 + 728);
      v134 = *(_QWORD *)(v114 + 744);
      if (!(v133 | v134))
        goto LABEL_250;
      md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v458, v2);
      *(_WORD *)((char *)&v464 + 9) = 0;
      BYTE11(v464) = 0;
      HIDWORD(v464) = 1065353216;
      LOBYTE(v465) = 0;
      v135 = *((unsigned __int8 *)this + 360);
      BYTE8(v461) = *((_BYTE *)this + 360);
      if (v133)
      {
        v136 = *(_QWORD *)(v133 + 192);
        v137 = *((_QWORD *)this + 59);
        if (v136)
          v138 = v136 == v137;
        else
          v138 = 0;
        if (!v138)
          *(_QWORD *)(v133 + 192) = v137;
        v139 = v413;
        if (v135)
          v139 = v409 + *(_BYTE *)(v114 + 169);
        BYTE9(v461) = v139;
        md::PatternedLayer::layout(v133, (uint64_t)&v458);
        *(_QWORD *)&v474 = &off_1E42D4408;
        *((_QWORD *)&v474 + 1) = v69;
        *((_QWORD *)&v475 + 1) = &v474;
        md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v133 + 8), *(_QWORD **)(v133 + 16), &v474, v140);
        v141 = (__int128 *)*((_QWORD *)&v475 + 1);
        if (*((__int128 **)&v475 + 1) == &v474)
        {
          v141 = &v474;
          v142 = 4;
        }
        else
        {
          if (!*((_QWORD *)&v475 + 1))
            goto LABEL_233;
          v142 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v141 + 8 * v142))();
      }
LABEL_233:
      if (v134)
      {
        v143 = *(_QWORD *)(v134 + 192);
        v144 = *((_QWORD *)this + 59);
        if (v143)
          v145 = v143 == v144;
        else
          v145 = 0;
        if (!v145)
          *(_QWORD *)(v134 + 192) = v144;
        if (v414)
        {
          v146 = v408;
          if (BYTE8(v461))
            v146 = v407 + *(_BYTE *)(v114 + 169);
          BYTE9(v461) = v146;
          md::PatternedLayer::layout(v134, (uint64_t)&v458);
          *(_QWORD *)&v474 = &off_1E42D4408;
          *((_QWORD *)&v474 + 1) = v414;
          *((_QWORD *)&v475 + 1) = &v474;
          md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v134 + 8), *(_QWORD **)(v134 + 16), &v474, v147);
        }
        else
        {
          md::PatternedLayer::layout(v134, (uint64_t)&v458);
          *(_QWORD *)&v474 = &off_1E42D4408;
          *((_QWORD *)&v474 + 1) = v69;
          *((_QWORD *)&v475 + 1) = &v474;
          md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v134 + 8), *(_QWORD **)(v134 + 16), &v474, v148);
        }
        v149 = (__int128 *)*((_QWORD *)&v475 + 1);
        if (*((__int128 **)&v475 + 1) == &v474)
        {
          v149 = &v474;
          v150 = 4;
LABEL_248:
          (*(void (**)(void))(*(_QWORD *)v149 + 8 * v150))();
        }
        else if (*((_QWORD *)&v475 + 1))
        {
          v150 = 5;
          goto LABEL_248;
        }
        v410 = 1;
      }
LABEL_250:
      if (!v412)
        goto LABEL_186;
      v151 = (uint64_t *)*((_QWORD *)v2 + 1);
      v152 = (int8x8_t)v151[1];
      v153 = (uint8x8_t)vcnt_s8(v152);
      v153.i16[0] = vaddlv_u8(v153);
      if (v153.u32[0] > 1uLL)
      {
        v154 = 0xE42D19AFCA302E68;
        if (*(_QWORD *)&v152 <= 0xE42D19AFCA302E68)
          v154 = 0xE42D19AFCA302E68 % *(_QWORD *)&v152;
      }
      else
      {
        v154 = (*(_QWORD *)&v152 - 1) & 0xE42D19AFCA302E68;
      }
      v155 = *v151;
      v156 = *(_QWORD **)(v155 + 8 * v154);
      if (!v156)
        goto LABEL_277;
      v157 = (_QWORD *)*v156;
      if (!v157)
        goto LABEL_277;
      if (v153.u32[0] < 2uLL)
      {
        while (1)
        {
          v159 = v157[1];
          if (v159 == 0xE42D19AFCA302E68)
          {
            if (v157[2] == 0xE42D19AFCA302E68)
              goto LABEL_271;
          }
          else if ((v159 & (*(_QWORD *)&v152 - 1)) != v154)
          {
            goto LABEL_277;
          }
          v157 = (_QWORD *)*v157;
          if (!v157)
            goto LABEL_277;
        }
      }
      while (1)
      {
        v158 = v157[1];
        if (v158 == 0xE42D19AFCA302E68)
          break;
        if (v158 >= *(_QWORD *)&v152)
          v158 %= *(_QWORD *)&v152;
        if (v158 != v154)
          goto LABEL_277;
LABEL_260:
        v157 = (_QWORD *)*v157;
        if (!v157)
          goto LABEL_277;
      }
      if (v157[2] != 0xE42D19AFCA302E68)
        goto LABEL_260;
LABEL_271:
      v160 = v157[5];
      if (*(_QWORD *)(v160 + 8) == 0xE42D19AFCA302E68)
      {
        v161 = *(uint64_t **)(v160 + 32);
        if (v153.u32[0] > 1uLL)
          goto LABEL_273;
LABEL_278:
        v162 = (*(_QWORD *)&v152 - 1) & 0x8BD499FBD96FBB9ELL;
        v163 = *(_QWORD **)(v155 + 8 * v162);
        if (v163)
          goto LABEL_279;
LABEL_296:
        v169 = 0;
        goto LABEL_297;
      }
LABEL_277:
      v161 = 0;
      if (v153.u32[0] <= 1uLL)
        goto LABEL_278;
LABEL_273:
      v162 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v152 <= 0x8BD499FBD96FBB9ELL)
        v162 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v152;
      v163 = *(_QWORD **)(v155 + 8 * v162);
      if (!v163)
        goto LABEL_296;
LABEL_279:
      v164 = (_QWORD *)*v163;
      if (!v164)
        goto LABEL_296;
      if (v153.u32[0] < 2uLL)
      {
        v165 = *(_QWORD *)&v152 - 1;
        while (1)
        {
          v167 = v164[1];
          if (v167 == 0x8BD499FBD96FBB9ELL)
          {
            if (v164[2] == 0x8BD499FBD96FBB9ELL)
              goto LABEL_294;
          }
          else if ((v167 & v165) != v162)
          {
            goto LABEL_296;
          }
          v164 = (_QWORD *)*v164;
          if (!v164)
            goto LABEL_296;
        }
      }
      while (2)
      {
        v166 = v164[1];
        if (v166 != 0x8BD499FBD96FBB9ELL)
        {
          if (v166 >= *(_QWORD *)&v152)
            v166 %= *(_QWORD *)&v152;
          if (v166 != v162)
            goto LABEL_296;
          goto LABEL_283;
        }
        if (v164[2] != 0x8BD499FBD96FBB9ELL)
        {
LABEL_283:
          v164 = (_QWORD *)*v164;
          if (!v164)
            goto LABEL_296;
          continue;
        }
        break;
      }
LABEL_294:
      v168 = v164[5];
      if (*(_QWORD *)(v168 + 8) != 0x8BD499FBD96FBB9ELL)
        goto LABEL_296;
      v169 = *(unsigned __int8 **)(v168 + 32);
LABEL_297:
      v170 = *v161;
      *(_QWORD *)((char *)&v458 + 7) = 0;
      *(_QWORD *)&v458 = 0;
      HIBYTE(v458) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v449, v170, (gss::FeatureAttributeSet *)(v114 + 824), (gss::QueryOverrides *)&v458);
      if (!BYTE14(v458) && (_QWORD)v458)
      {
        v172 = gss::Allocator::instance(v171);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v172 + 40))(v172, v458, WORD6(v458));
      }
      memset_pattern16(&__b, &unk_19FFB6380, 0x10uLL);
      v173 = (unsigned __int8 *)*((_QWORD *)this + 61);
      v174 = (char *)*((_QWORD *)this + 46);
      v175 = (char *)*((_QWORD *)this + 47);
      if (v174 != v175)
      {
        while (*v173 != *v174 || v173[1] != v174[1])
        {
          v174 += 8;
          if (v174 == v175)
            goto LABEL_308;
        }
      }
      if (v174 == v175)
      {
LABEL_308:
        LOWORD(v458) = *(_WORD *)v173;
        DWORD1(v458) = 0;
        v174 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)v406, (unsigned __int8 *)&v458);
      }
      v177 = *((_DWORD *)v174 + 1);
      v462 = v426;
      v463 = v427;
      v464 = v428;
      v458 = v424[0];
      v459 = v424[1];
      v460 = v424[2];
      v461 = v425;
      v178 = v430;
      if (v430)
      {
        p_shared_owners = (unint64_t *)&v430->__shared_owners_;
        do
          v180 = __ldxr(p_shared_owners);
        while (__stxr(v180 + 1, p_shared_owners));
      }
      v466 = v431;
      *(_OWORD *)v467 = *(_OWORD *)v432;
      *(_QWORD *)&v467[14] = *(_QWORD *)&v432[14];
      v181 = v449;
      if (*((_QWORD *)&v449 + 1))
      {
        v182 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      v465 = v181;
      if (!v178)
        goto LABEL_681;
      v184 = (unint64_t *)&v178->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
        if (!*((_BYTE *)this + 360))
          goto LABEL_322;
LABEL_320:
        v186 = v177 + *(_BYTE *)(v114 + 169);
      }
      else
      {
LABEL_681:
        if (*((_BYTE *)this + 360))
          goto LABEL_320;
LABEL_322:
        v186 = *(_BYTE *)(*((_QWORD *)v2 + 3) + 1);
      }
      BYTE9(v461) = v186;
      v466 = __b;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      v188 = objc_msgSend(v187, "loadGreenTraffic");

      v189 = *(md::DaVinciTrafficLayer **)(v114 + 752);
      v190 = *(_QWORD **)(v114 + 760);
      if (v189)
      {
        v192 = (uint64_t *)*((_QWORD *)v189 + 1);
        v191 = (uint64_t *)*((_QWORD *)v189 + 2);
        if (v191 != v192)
        {
          memset_pattern16(&__b, &unk_19FFB6390, 0x10uLL);
          v193 = *v169;
          v467[20] = v193 ^ 1;
          if (v193)
            v194 = 0.0;
          else
            v194 = 1.0;
          *(float *)&v467[12] = v194;
          v195 = *((_QWORD *)v189 + 19);
          v196 = *((_QWORD *)this + 58);
          if (!v195 || v195 != v196)
          {
            *((_QWORD *)v189 + 19) = v196;
            do
            {
              v197 = *v192++;
              **(_QWORD **)(*(_QWORD *)(v197 + 328) + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v197 + 8)
                                                                                                + 152)
                                                                                    + 128)
                                                                        + 16);
            }
            while (v192 != v191);
          }
          md::DaVinciTrafficLayer::layout(v189, (const md::TrafficContext *)&v458);
          *(_QWORD *)&v474 = &off_1E42D4570;
          *((_QWORD *)&v474 + 1) = v69;
          *((_QWORD *)&v475 + 1) = &v474;
          md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(*((_QWORD **)v189 + 1), *((_QWORD **)v189 + 2), &v474, v198);
          v199 = (__int128 *)*((_QWORD *)&v475 + 1);
          if (*((__int128 **)&v475 + 1) == &v474)
          {
            v199 = &v474;
            v200 = 4;
LABEL_336:
            (*(void (**)(void))(*(_QWORD *)v199 + 8 * v200))();
          }
          else if (*((_QWORD *)&v475 + 1))
          {
            v200 = 5;
            goto LABEL_336;
          }
        }
      }
      if (!v190 || (v201 = v190, v190[2] == v190[1]))
      {
        v2 = v419;
        v207 = (std::__shared_weak_count *)*((_QWORD *)&v465 + 1);
        if (*((_QWORD *)&v465 + 1))
          goto LABEL_642;
LABEL_645:
        v386 = (std::__shared_weak_count *)*((_QWORD *)&v449 + 1);
        if (!*((_QWORD *)&v449 + 1))
          goto LABEL_186;
        goto LABEL_646;
      }
      v203 = (std::__shared_weak_count *)*((_QWORD *)&v449 + 1);
      v202 = v449;
      v474 = v449;
      if (*((_QWORD *)&v449 + 1))
      {
        v204 = (unint64_t *)(*((_QWORD *)&v449 + 1) + 8);
        do
          v205 = __ldxr(v204);
        while (__stxr(v205 + 1, v204));
        v445 = v203;
        do
          v206 = __ldxr(v204);
        while (__stxr(v206 + 1, v204));
      }
      else
      {
        v445 = 0;
      }
      v444 = v202;
      v446[0] = 0;
      v446[1] = 0;
      v447 = 0;
      if (v202)
        LOBYTE(v202) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v202 + 48))(v202, v446);
      v447 = v202;
      if (v203)
      {
        v208 = (unint64_t *)&v203->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      md::TrafficMeshStyle::overrideSetup((int *)&__b, (uint64_t)&v444, v188, 3);
      v210 = (_QWORD *)v190[19];
      v211 = (_QWORD *)*((_QWORD *)this + 58);
      if (!v210 || v210 != v211)
      {
        v190[19] = v211;
        v212 = (uint64_t *)v190[1];
        v213 = (uint64_t *)v190[2];
        v210 = v211;
        if (v212 != v213)
        {
          while (1)
          {
            v215 = *v212;
            v216 = *(_QWORD *)(*(_QWORD *)(*v212 + 8) + 152);
            if (!*(_BYTE *)(v216 + 136))
            {
              v214 = v215 + 320;
              ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v215 + 320), *(_QWORD *)v216, *(std::__shared_weak_count **)(v216 + 8));
              goto LABEL_360;
            }
            v217 = *(_QWORD **)(v215 + 312);
            v219 = *(_QWORD *)(v216 + 16);
            v218 = *(std::__shared_weak_count **)(v216 + 24);
            if (v218)
            {
              v220 = (unint64_t *)&v218->__shared_owners_;
              do
                v221 = __ldxr(v220);
              while (__stxr(v221 + 1, v220));
            }
            if (v219 && **(_QWORD **)(v219 + 40) == v217[1])
            {
              v225 = v217[2];
              if (v225 && v225 != v219)
                ggl::PipelineSetup::resetData((uint64_t)v217);
              if (v218)
              {
                v226 = (unint64_t *)&v218->__shared_owners_;
                do
                  v227 = __ldxr(v226);
                while (__stxr(v227 + 1, v226));
              }
              v222 = (std::__shared_weak_count *)v217[3];
              v217[2] = v219;
              v217[3] = v218;
              if (!v222)
              {
LABEL_382:
                v214 = v215 + 312;
                if (v218)
                  goto LABEL_383;
                goto LABEL_360;
              }
              v228 = (unint64_t *)&v222->__shared_owners_;
              do
                v224 = __ldaxr(v228);
              while (__stlxr(v224 - 1, v228));
            }
            else
            {
              v222 = (std::__shared_weak_count *)v217[3];
              v217[2] = 0;
              v217[3] = 0;
              if (!v222)
                goto LABEL_382;
              v223 = (unint64_t *)&v222->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
            }
            if (v224)
              goto LABEL_382;
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
            v214 = v215 + 312;
            if (v218)
            {
LABEL_383:
              v229 = (unint64_t *)&v218->__shared_owners_;
              v69 = v417;
              do
                v230 = __ldaxr(v229);
              while (__stlxr(v230 - 1, v229));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
              goto LABEL_361;
            }
LABEL_360:
            v69 = v417;
LABEL_361:
            **(_QWORD **)(*(_QWORD *)v214 + 96) = *(_QWORD *)(*(_QWORD *)(v216 + 128) + 16);
            if (++v212 == v213)
            {
              v201 = v190;
              v210 = (_QWORD *)v190[19];
              break;
            }
          }
        }
      }
      if (v467[18])
      {
        v231 = v210 + 13;
        v232 = v210 + 14;
      }
      else
      {
        v231 = v210 + 9;
        if (BYTE8(v461))
          v231 = v210 + 11;
        v233 = v210 + 10;
        v232 = v210 + 12;
        if (!BYTE8(v461))
          v232 = v233;
      }
      if (!v467[16])
        v232 = v231;
      v2 = v419;
      v201[7] = *v232;
      v234 = *(_QWORD **)(v458 + 8);
      v235 = (int8x8_t)v234[1];
      if (!*(_QWORD *)&v235)
        goto LABEL_426;
      v236 = (uint8x8_t)vcnt_s8(v235);
      v236.i16[0] = vaddlv_u8(v236);
      if (v236.u32[0] > 1uLL)
      {
        v237 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v235 <= 0x1AF456233693CD46uLL)
          v237 = 0x1AF456233693CD46uLL % *(_QWORD *)&v235;
      }
      else
      {
        v237 = (*(_QWORD *)&v235 - 1) & 0x1AF456233693CD46;
      }
      v238 = *(_QWORD **)(*v234 + 8 * v237);
      if (!v238 || (v239 = (_QWORD *)*v238) == 0)
      {
LABEL_426:
        v243 = 0;
        if (MEMORY[0xEC0])
          goto LABEL_427;
LABEL_421:
        if ((*(_QWORD *)&v235 & (*(_QWORD *)&v235 - 1)) != 0)
        {
          v252 = 0x8BD499FBD96FBB9ELL;
          if (*(_QWORD *)&v235 <= 0x8BD499FBD96FBB9ELL)
            v252 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v235;
          v244 = *(_QWORD **)(*v234 + 8 * v252);
          do
          {
            do
              v244 = (_QWORD *)*v244;
            while (v244[1] != 0x8BD499FBD96FBB9ELL);
          }
          while (v244[2] != 0x8BD499FBD96FBB9ELL);
        }
        else
        {
          v244 = *(_QWORD **)(*v234 + 8 * ((*(_QWORD *)&v235 - 1) & 0x8BD499FBD96FBB9ELL));
          do
          {
            do
              v244 = (_QWORD *)*v244;
            while (v244[1] != 0x8BD499FBD96FBB9ELL);
          }
          while (v244[2] != 0x8BD499FBD96FBB9ELL);
        }
        v253 = 0.0;
        if (**(_BYTE **)(v244[5] + 32) && *((_BYTE *)v201 + 104))
          v253 = *(double *)(v243 + 24) * 0.0000000249532021 * (double)(1 << *((_BYTE *)v201 + 81));
        v254 = v201[14];
        if ((*(_BYTE *)(v254 + 16) & 2) == 0)
        {
          v255 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
          if (v255 != -1)
          {
            *(_QWORD *)&v474 = v470;
            *(_QWORD *)&v472 = &v474;
            std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v472, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          }
        }
        v250 = *(float **)(v254 + 72);
        v251 = v253;
        goto LABEL_445;
      }
      if (v236.u32[0] < 2uLL)
      {
        while (1)
        {
          v241 = v239[1];
          if (v241 == 0x1AF456233693CD46)
          {
            if (v239[2] == 0x1AF456233693CD46)
              goto LABEL_419;
          }
          else if ((v241 & (*(_QWORD *)&v235 - 1)) != v237)
          {
            goto LABEL_426;
          }
          v239 = (_QWORD *)*v239;
          if (!v239)
            goto LABEL_426;
        }
      }
      while (2)
      {
        v240 = v239[1];
        if (v240 != 0x1AF456233693CD46)
        {
          if (v240 >= *(_QWORD *)&v235)
            v240 %= *(_QWORD *)&v235;
          if (v240 != v237)
            goto LABEL_426;
          goto LABEL_408;
        }
        if (v239[2] != 0x1AF456233693CD46)
        {
LABEL_408:
          v239 = (_QWORD *)*v239;
          if (!v239)
            goto LABEL_426;
          continue;
        }
        break;
      }
LABEL_419:
      v242 = v239[5];
      if (*(_QWORD *)(v242 + 8) != 0x1AF456233693CD46)
        goto LABEL_426;
      v243 = *(_QWORD *)(v242 + 32);
      if (!*(_BYTE *)(v243 + 3776))
        goto LABEL_421;
LABEL_427:
      v245 = v201[9];
      if (v245)
      {
        v246 = gdc::GlobeTileGrid::intersectWithFrustum(v245, (const double *)(v243 + 984), *(double *)(v243 + 24));
        goto LABEL_446;
      }
      v248 = v201[14];
      if ((*(_BYTE *)(v248 + 16) & 2) == 0)
      {
        v249 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v249 != -1)
        {
          *(_QWORD *)&v474 = v470;
          *(_QWORD *)&v472 = &v474;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v472, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v250 = *(float **)(v248 + 72);
      v251 = 0.0;
LABEL_445:
      v246 = ggl::CullingGrid::intersectedCellsForView(v250, v251);
LABEL_446:
      v257 = (_QWORD *)v201[1];
      v256 = (_QWORD *)v201[2];
      if (v257 != v256)
      {
        do
        {
          v259 = *v257;
          v260 = *(uint64_t **)(*v257 + 248);
          v261 = *(uint64_t **)(*v257 + 256);
          if (v260 == v261)
          {
            v258 = 0;
          }
          else
          {
            v258 = 0;
            do
            {
              v262 = *v260++;
              v263 = (*(_DWORD *)(v262 + 96) & v246) != 0;
              v258 |= v263;
              *(_BYTE *)(v262 + 48) = v263;
            }
            while (v260 != v261);
          }
          *(_BYTE *)(v259 + 136) = v258 & 1;
          *(_BYTE *)(v259 + 272) = v258 & 1;
          ++v257;
        }
        while (v257 != v256);
        v264 = (_QWORD *)v201[1];
        v257 = (_QWORD *)v201[2];
        if (v264 == v257)
        {
          v69 = v417;
        }
        else
        {
          v422 = (_QWORD *)v201[2];
          do
          {
            v265 = *v264;
            if (*(_BYTE *)(*v264 + 272))
            {
              v267 = (std::__shared_weak_count *)*((_QWORD *)&v465 + 1);
              v266 = v465;
              v472 = v465;
              if (*((_QWORD *)&v465 + 1))
              {
                v268 = (unint64_t *)(*((_QWORD *)&v465 + 1) + 8);
                do
                  v269 = __ldxr(v268);
                while (__stxr(v269 + 1, v268));
                *((_QWORD *)&v474 + 1) = v267;
                do
                  v270 = __ldxr(v268);
                while (__stxr(v270 + 1, v268));
              }
              else
              {
                *((_QWORD *)&v474 + 1) = 0;
              }
              *(_QWORD *)&v474 = v266;
              v475 = 0uLL;
              LOBYTE(v476) = 0;
              if (v266)
                LODWORD(v266) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v266 + 48))(v266);
              LOBYTE(v476) = v266;
              if (v267)
              {
                v271 = (unint64_t *)&v267->__shared_owners_;
                do
                  v272 = __ldaxr(v271);
                while (__stlxr(v272 - 1, v271));
                if (!v272)
                {
                  ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                  std::__shared_weak_count::__release_weak(v267);
                }
                LODWORD(v266) = v476;
              }
              v273 = *(unsigned __int8 *)(v265 + 300);
              if ((_DWORD)v266)
              {
                v274 = v415;
                v274.i8[0] = BYTE12(v458);
                v275 = (float32x4_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v274));
                v275.f32[0] = (float)v275.i32[0];
                switch(*(_BYTE *)(v265 + 300))
                {
                  case 0:
                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v472, *(_QWORD *)(v474 + 24), 0x2Bu, 2u, fminf(fmaxf(v275.f32[0], 0.0), 23.0));
                    goto LABEL_483;
                  case 1:
                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v472, *(_QWORD *)(v474 + 24), 0x36u, 2u, fminf(fmaxf(v275.f32[0], 0.0), 23.0));
                    goto LABEL_483;
                  case 2:
                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v472, *(_QWORD *)(v474 + 24), 0x41u, 2u, fminf(fmaxf(v275.f32[0], 0.0), 23.0));
                    goto LABEL_483;
                  case 3:
                    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v472, *(_QWORD *)(v474 + 24), 0x4Cu, 2u, fminf(fmaxf(v275.f32[0], 0.0), 23.0));
LABEL_483:
                    v275 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v472)), (float32x4_t)vdupq_n_s32(0x37800080u));
                    v415 = *(int8x8_t *)v275.f32;
                    break;
                  default:
                    break;
                }
              }
              else if (v273 == 3)
              {
                v275 = (float32x4_t)xmmword_19FFB5DC0;
              }
              else if (v273 == 2)
              {
                v275 = (float32x4_t)xmmword_19FFB5DB0;
              }
              else
              {
                v275 = (float32x4_t)xmmword_19FFB5DA0;
              }
              v420 = v275;
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v474);
              v470[0] = 0.0;
              v276 = *(_QWORD *)(v265 + 280);
              *(_QWORD *)&v472 = v276;
              v277 = *(std::__shared_weak_count **)(v265 + 288);
              *((_QWORD *)&v472 + 1) = v277;
              if (v277)
              {
                v278 = (unint64_t *)&v277->__shared_owners_;
                do
                  v279 = __ldxr(v278);
                while (__stxr(v279 + 1, v278));
                *((_QWORD *)&v474 + 1) = v277;
                do
                  v280 = __ldxr(v278);
                while (__stxr(v280 + 1, v278));
              }
              else
              {
                *((_QWORD *)&v474 + 1) = 0;
              }
              *(_QWORD *)&v474 = v276;
              v475 = 0uLL;
              LOBYTE(v476) = 0;
              if (v276)
                LODWORD(v276) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 48))(v276);
              LOBYTE(v476) = v276;
              if (v277)
              {
                v281 = (unint64_t *)&v277->__shared_owners_;
                do
                  v282 = __ldaxr(v281);
                while (__stlxr(v282 - 1, v281));
                if (!v282)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
                LODWORD(v276) = v476;
              }
              if (!(_DWORD)v276)
                goto LABEL_456;
              v283 = *((float *)&v458 + 2);
              v284 = *(_QWORD *)(v474 + 24);
              v285 = (int)*((float *)&v458 + 2) >= 0x17 ? 23 : (int)*((float *)&v458 + 2);
              if ((v286 = *(float **)v284) != 0
                && (v287 = *v286, LODWORD(v286) = *v286 == 1.0, *(_BYTE *)(v284 + 10))
                && (v287 != 0.0 ? (v288 = v287 == 1.0) : (v288 = 1), !v288)
                || (v289 = *(unsigned __int8 *)(v284 + v286 + 11), v287 = 0.0, v289 == 2))
              {
                LOBYTE(v472) = 1;
                LOBYTE(v468[0]) = 1;
                v290 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v284, 0x5Bu, v285, 0, &v472);
                v291 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v284, 0x5Bu, v285, 1, v468);
                if (v287 < 1.0)
                  v291 = v290;
              }
              else
              {
                v291 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v474 + 24), 0x5Bu, v285, v289, 0);
              }
              v257 = v422;
              if (v291)
              {
                LODWORD(v472) = 0;
                v450 = 0;
                md::getRoadWidths((uint64_t)&v474, v470, (float *)&v472, &v450, v283);
                v292 = *(_QWORD *)(v474 + 24);
                v293 = fminf(fmaxf(v283, 0.0), 23.0);
                v294 = *(float **)v292;
                if (*(_QWORD *)v292
                  && (v295 = *v294, LODWORD(v294) = *v294 == 1.0, *(_BYTE *)(v292 + 10))
                  && (v295 != 0.0 ? (v296 = v295 == 1.0) : (v296 = 1), !v296)
                  || (v297 = *(unsigned __int8 *)(v292 + v294 + 11), v295 = 0.0, v297 == 2))
                {
                  LOBYTE(v468[0]) = 1;
                  LOBYTE(v451) = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v292, 0x12Eu, 0, (BOOL *)v468, v293);
                  v299 = v298;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v292, 0x12Eu, 1u, (BOOL *)&v451, v293);
                  v301 = v299 + (float)((float)(v300 - v299) * v295);
                }
                else
                {
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v474 + 24), 0x12Eu, v297, 0, v293);
                  v301 = v302;
                }
                v303 = *(_QWORD *)(v474 + 24);
                v304 = *(float **)v303;
                if (*(_QWORD *)v303
                  && (v305 = *v304, LODWORD(v304) = *v304 == 1.0, *(_BYTE *)(v303 + 10))
                  && (v305 != 0.0 ? (v306 = v305 == 1.0) : (v306 = 1), !v306)
                  || (v307 = *(unsigned __int8 *)(v303 + v304 + 11), v305 = 0.0, v307 == 2))
                {
                  LOBYTE(v468[0]) = 1;
                  LOBYTE(v451) = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v303, 0x175u, 0, (BOOL *)v468, v293);
                  v309 = v308;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v303, 0x175u, 1u, (BOOL *)&v451, v293);
                  v311 = v309 + (float)((float)(v310 - v309) * v305);
                }
                else
                {
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v474 + 24), 0x175u, v307, 0, v293);
                  v311 = v312;
                }
                gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v474);
                if (v311 != 0.0 && v301 <= 3.5 && v301 >= 0.25)
                  v301 = v301 + 0.5;
                v314 = v470[0];
                if (v311 == 0.0)
                  v315 = v301 + (float)(v470[0] * 0.5);
                else
                  v315 = v301 * 0.5;
                v316 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v265 + 8) + 152) + 128);
                v317 = *(_DWORD *)v316;
                v318 = *((float *)&v462 + 1);
                v319 = 312;
                if (!*(_BYTE *)(v265 + 329))
                  v319 = 320;
                v320 = *(_QWORD *)(v265 + v319);
                *(_QWORD *)(v265 + 48) = v320;
                v321 = *(_QWORD **)(*(_QWORD *)(v320 + 64) + 32);
                v322 = v321[1];
                if (v322)
                  v323 = (float32x4_t *)v321[9];
                else
                  v323 = 0;
                *v323 = v420;
                v323[1].f32[0] = *(float *)(v316 + 8) * v315;
                if (v311 == 0.0)
                {
                  v325 = -1.0;
                  if (*(float *)(v265 + 296) <= 0.0)
                    v325 = 1.0;
                  v326 = 0.0;
                }
                else
                {
                  v324 = v311 + (float)((float)(v314 + v301) * 0.5);
                  v325 = 0.0;
                  v326 = fmaxf(v324, 0.0);
                }
                v323[1].i32[2] = 0;
                v247.n128_f32[0] = v318 * (float)v317;
                v323[1].i32[1] = v247.n128_u32[0];
                v323[1].f32[3] = v326;
                v323[2].f32[0] = v325;
                if (v322)
                {
                  if (v321[8] > v322)
                    v322 = v321[8];
                  v321[7] = 0;
                  v321[8] = v322;
                }
                *(_BYTE *)(v265 + 272) = 1;
                if (*(_BYTE *)(v265 + 136))
                {
                  *(_DWORD *)(v265 + 56) = BYTE9(v461);
                  md::RoadBatch::setRenderOrdersForStrokeAndFill(0, 0, 0, 0, 0, v265 + 16, *(_DWORD *)(v265 + 304), 1, *(_QWORD *)(v265 + 280), *(std::__shared_weak_count **)(v265 + 288), (uint64_t)&v458, *(_BYTE *)(v265 + 328));
                }
              }
              else
              {
LABEL_456:
                gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v474);
                *(_BYTE *)(v265 + 272) = 0;
              }
            }
            ++v264;
          }
          while (v264 != v257);
          v257 = (_QWORD *)v201[2];
          v69 = v417;
        }
      }
      v468[0] = &off_1E42D4498;
      v468[1] = v69;
      v469 = (float *)v468;
      v327 = (_QWORD *)v201[1];
      v328 = (float *)v468;
      if (v327 == v257)
      {
        v383 = 4;
LABEL_640:
        (*(void (**)(void))(*(_QWORD *)v328 + 8 * v383))();
        goto LABEL_641;
      }
      v423 = v257;
      do
      {
        v331 = *v327;
        if (!v328)
          goto LABEL_573;
        if (v328 != (float *)v468)
        {
          v328 = (float *)(*(uint64_t (**)(float *))(*(_QWORD *)v328 + 16))(v328);
LABEL_573:
          v471 = v328;
          goto LABEL_575;
        }
        v471 = v470;
        (*(void (**)(uint64_t, _QWORD *))(v468[0] + 24))((uint64_t)v468, v470);
LABEL_575:
        if (!*(_BYTE *)(v331 + 272))
          goto LABEL_632;
        v333 = *(_QWORD *)(v331 + 168);
        v332 = *(_QWORD *)(v331 + 176);
        if (v332 != v333)
        {
          v334 = *(_QWORD *)(v331 + 176);
          do
          {
            v336 = *(void **)(v334 - 24);
            v334 -= 24;
            v335 = v336;
            if (v336)
            {
              *(_QWORD *)(v332 - 16) = v335;
              operator delete(v335);
            }
            v332 = v334;
          }
          while (v334 != v333);
        }
        *(_QWORD *)(v331 + 176) = v333;
        *(_QWORD *)(v331 + 152) = *(_QWORD *)(v331 + 144);
        v337 = *(_QWORD **)(v331 + 224);
        if (v337)
        {
          do
          {
            if (v337[1])
            {
              v339 = 0;
              v340 = (void (***)(void))(v337 + 2);
              do
              {
                v341 = *v340;
                v340 += 15;
                (*v341)();
                ++v339;
              }
              while (v339 < v337[1]);
            }
            v337[1] = 0;
            v337 = (_QWORD *)*v337;
          }
          while (v337);
          v338 = *(_QWORD *)(v331 + 224);
        }
        else
        {
          v338 = 0;
        }
        *(_QWORD *)(v331 + 232) = v338;
        v342 = (uint64_t)v471;
        v257 = v423;
        v421 = v327;
        if (v471)
        {
          if (v471 == v470)
          {
            v473 = &v472;
            (*(void (**)(float *, __int128 *))(*(_QWORD *)v470 + 24))(v470, &v472);
            goto LABEL_594;
          }
          v342 = (*(uint64_t (**)(void))(*(_QWORD *)v471 + 16))();
        }
        v473 = (__int128 *)v342;
LABEL_594:
        if (*(_BYTE *)(v331 + 272))
        {
          if (*(_BYTE *)(v331 + 136))
          {
            v343 = *(_QWORD *)(*(_QWORD *)(v331 + 8) + 56);
            *(_QWORD *)(v331 + 40) = v343;
            v344 = *(unsigned __int8 *)(v343 + 58) == 1;
          }
          else
          {
            v344 = 0;
          }
          v346 = *(uint64_t **)(v331 + 248);
          v345 = *(uint64_t **)(v331 + 256);
          if (v346 != v345)
          {
            v347 = 0;
            while (1)
            {
              v348 = *v346;
              if (*(_BYTE *)(*v346 + 48))
              {
                if (*(_QWORD *)(v348 + 88) != v347)
                {
                  if (v347)
                  {
                    v349 = ggl::Batcher::commit((__int128 **)(v331 + 144), 0xC8u, v247);
                    if (v349[1] != *v349)
                    {
                      if (*(_BYTE *)(v331 + 136))
                      {
                        v350 = v349;
                        v352 = *(_QWORD *)(v331 + 24);
                        v351 = *(_QWORD *)(v331 + 32);
                        v353 = *(_OWORD *)(v331 + 88);
                        v476 = *(_OWORD *)(v331 + 72);
                        v477 = v353;
                        v354 = *(_OWORD *)(v331 + 120);
                        v478 = *(_OWORD *)(v331 + 104);
                        v479 = v354;
                        v355 = *(_OWORD *)(v331 + 56);
                        v474 = *(_OWORD *)(v331 + 40);
                        v475 = v355;
                        v356 = *(_QWORD **)(v331 + 232);
                        v357 = v356[1];
                        if (v357 == *(_QWORD *)(v331 + 240))
                        {
                          v356 = (_QWORD *)*v356;
                          if (!v356)
                          {
                            v356 = malloc_type_malloc(120 * v357 + 16, 0xB644C221uLL);
                            *v356 = 0;
                            v356[1] = 0;
                            **(_QWORD **)(v331 + 232) = v356;
                          }
                          *(_QWORD *)(v331 + 232) = v356;
                          v357 = v356[1];
                        }
                        v358 = &v356[15 * v357];
                        v356[1] = v357 + 1;
                        v358[2] = &off_1E42B59B0;
                        v358[3] = v352;
                        v358 += 2;
                        v358[2] = v351;
                        v359 = v478;
                        v360 = v479;
                        v361 = v477;
                        *(_OWORD *)(v358 + 7) = v476;
                        v362 = v474;
                        *(_OWORD *)(v358 + 5) = v475;
                        *(_OWORD *)(v358 + 3) = v362;
                        *(_OWORD *)(v358 + 13) = v360;
                        *(_OWORD *)(v358 + 11) = v359;
                        *(_OWORD *)(v358 + 9) = v361;
                        v358[8] = v347;
                        v363 = *v350;
                        v358[11] = *v350;
                        v358[12] = (v350[1] - v363) >> 4;
                        v451 = 0;
                        *(_QWORD *)&v474 = v358;
                        if (!v473)
                          goto LABEL_678;
                        (*(void (**)(__int128 *, int *, __int128 *))(*(_QWORD *)v473 + 48))(v473, &v451, &v474);
                      }
                    }
                  }
                  v348 = *v346;
                  v347 = *(_QWORD *)(*v346 + 88);
                }
                v364 = 16;
                if (v344)
                {
                  v364 = 32;
                  v365 = v348 + 32;
                }
                else
                {
                  v365 = v348 + 16;
                }
                if (*(_QWORD *)(v365 + 8) != *(_QWORD *)(v348 + v364))
                  gm::MultiRange<unsigned long>::push_back((char **)(v331 + 144), (_OWORD *)v365);
              }
              if (++v346 == v345)
                goto LABEL_619;
            }
          }
          v347 = 0;
LABEL_619:
          v366 = ggl::Batcher::commit((__int128 **)(v331 + 144), 0xC8u, v247);
          v2 = v419;
          v257 = v423;
          if (v366[1] != *v366)
          {
            if (*(_BYTE *)(v331 + 136))
            {
              v367 = v366;
              v368 = *(_QWORD *)(v331 + 24);
              v369 = *(_QWORD *)(v331 + 32);
              v370 = *(_OWORD *)(v331 + 88);
              v476 = *(_OWORD *)(v331 + 72);
              v477 = v370;
              v371 = *(_OWORD *)(v331 + 120);
              v478 = *(_OWORD *)(v331 + 104);
              v479 = v371;
              v372 = *(_OWORD *)(v331 + 56);
              v474 = *(_OWORD *)(v331 + 40);
              v475 = v372;
              v373 = *(_QWORD **)(v331 + 232);
              v374 = v373[1];
              if (v374 == *(_QWORD *)(v331 + 240))
              {
                v373 = (_QWORD *)*v373;
                if (!v373)
                {
                  v373 = malloc_type_malloc(120 * v374 + 16, 0xB644C221uLL);
                  *v373 = 0;
                  v373[1] = 0;
                  **(_QWORD **)(v331 + 232) = v373;
                }
                *(_QWORD *)(v331 + 232) = v373;
                v374 = v373[1];
              }
              v375 = &v373[15 * v374];
              v373[1] = v374 + 1;
              v375[2] = &off_1E42B59B0;
              v375[3] = v368;
              v375 += 2;
              v375[2] = v369;
              v376 = v478;
              v377 = v479;
              v378 = v477;
              *(_OWORD *)(v375 + 7) = v476;
              v379 = v474;
              *(_OWORD *)(v375 + 5) = v475;
              *(_OWORD *)(v375 + 3) = v379;
              *(_OWORD *)(v375 + 13) = v377;
              *(_OWORD *)(v375 + 11) = v376;
              *(_OWORD *)(v375 + 9) = v378;
              v375[8] = v347;
              v380 = *v367;
              v375[11] = *v367;
              v375[12] = (v367[1] - v380) >> 4;
              v451 = 0;
              *(_QWORD *)&v474 = v375;
              if (!v473)
                goto LABEL_678;
              (*(void (**)(__int128 *, int *, __int128 *))(*(_QWORD *)v473 + 48))(v473, &v451, &v474);
              v2 = v419;
              v257 = v423;
            }
          }
        }
        v381 = v473;
        if (v473 == &v472)
        {
          v381 = &v472;
          v382 = 4;
          this = v418;
          v327 = v421;
        }
        else
        {
          this = v418;
          v327 = v421;
          if (!v473)
            goto LABEL_632;
          v382 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v381 + 8 * v382))();
LABEL_632:
        v329 = v471;
        if (v471 == v470)
        {
          v329 = v470;
          v330 = 4;
LABEL_568:
          (*(void (**)(void))(*(_QWORD *)v329 + 8 * v330))();
          goto LABEL_569;
        }
        if (v471)
        {
          v330 = 5;
          goto LABEL_568;
        }
LABEL_569:
        ++v327;
        v328 = v469;
      }
      while (v327 != v257);
      if (v469 == (float *)v468)
      {
        v328 = (float *)v468;
        v383 = 4;
        v69 = v417;
        goto LABEL_640;
      }
      v69 = v417;
      if (v469)
      {
        v383 = 5;
        goto LABEL_640;
      }
LABEL_641:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v444);
      v207 = (std::__shared_weak_count *)*((_QWORD *)&v465 + 1);
      if (!*((_QWORD *)&v465 + 1))
        goto LABEL_645;
LABEL_642:
      v384 = (unint64_t *)&v207->__shared_owners_;
      do
        v385 = __ldaxr(v384);
      while (__stlxr(v385 - 1, v384));
      if (v385)
        goto LABEL_645;
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
      v386 = (std::__shared_weak_count *)*((_QWORD *)&v449 + 1);
      if (*((_QWORD *)&v449 + 1))
      {
LABEL_646:
        v387 = (unint64_t *)&v386->__shared_owners_;
        do
          v388 = __ldaxr(v387);
        while (__stlxr(v388 - 1, v387));
        if (!v388)
        {
          ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
          std::__shared_weak_count::__release_weak(v386);
        }
      }
LABEL_186:
      v112 = v416 + 1;
      if (v416 + 1 == v411)
        goto LABEL_653;
    }
  }
  v410 = 0;
LABEL_653:
  v389 = *(_QWORD *)(v69 + 72);
  v390 = *(uint64_t **)(v69 + 80);
  v391 = 126 - 2 * __clz((uint64_t)((uint64_t)v390 - v389) >> 3);
  if (v390 == (uint64_t *)v389)
    v392 = 0;
  else
    v392 = v391;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v389, v390, v392, 1);
  if ((v410 & 1) != 0 && v414)
  {
    LOBYTE(v458) = 0;
    md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, v2, v414, v407, &v458);
    v393 = *(_QWORD *)(v414 + 72);
    v394 = *(uint64_t **)(v414 + 80);
    v395 = 126 - 2 * __clz((uint64_t)((uint64_t)v394 - v393) >> 3);
    if (v394 == (uint64_t *)v393)
      v396 = 0;
    else
      v396 = v395;
    std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v393, v394, v396, 1);
  }
  v397 = v430;
  if (v430)
  {
    v398 = (unint64_t *)&v430->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v400 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v401 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 104);
  do
    v402 = __ldaxr(v401);
  while (__stlxr(v402 + v400 - v405, v401));
  if (!v457)
  {
LABEL_678:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v457 + 48))(v457);
  result = v457;
  if (v457 == v456)
  {
    v404 = 4;
    result = v456;
  }
  else
  {
    if (!v457)
      return result;
    v404 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v404))();
}

