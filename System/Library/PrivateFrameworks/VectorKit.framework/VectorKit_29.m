void sub_19FB6B210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitLabelHighlightLogv_block_invoke_22317()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelHighlight");
  v1 = (void *)GEOGetVectorKitLabelHighlightLog(void)::log;
  GEOGetVectorKitLabelHighlightLog(void)::log = (uint64_t)v0;

}

BOOL md::StandardLabeler::debugHighlightLabelAtPixel(_QWORD *a1, float *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  md::StandardLabeler::labelAtPixel(&v24, a1, a2, 0, 0);
  v4 = v24;
  if (v24)
  {
    v5 = *(std::__shared_weak_count **)(v24 + 16);
    v18 = *(_QWORD *)(v24 + 8);
    v19 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v20 = *(_DWORD *)(v4 + 48);
    v22 = -1;
    v21 = -1;
    v23 = 0;
    md::StandardLabeler::setDebugHighlight((uint64_t)a1, &v24, &v18);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v10 = 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v22 = -1;
    v21 = -1;
    v23 = 0;
    md::StandardLabeler::hitRoadFeatureAtPixel((uint64_t)a1, (uint64_t)a2, (uint64_t)&v24, (uint64_t)&v18, 1);
    v10 = v18 != 0;
    if (v18)
      md::StandardLabeler::setDebugHighlight((uint64_t)a1, &v24, &v18);
    else
      (*(void (**)(_QWORD *))(*a1 + 272))(a1);
    v15 = v19;
    if (v19)
    {
      v16 = (unint64_t *)&v19->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v11 = v25;
  if (v25)
  {
    v12 = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_19FB6B408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabeler::debugString@<X0>(md::StandardLabeler *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::ios_base *v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  int32x2_t v24;
  int32x2_t **v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const void **v34;
  unint64_t v35;
  _BYTE *v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  int v43;
  uint64_t v44;
  int32x2_t v45;
  int32x2_t **v46;
  uint64_t v47;
  int32x2_t v48;
  int32x2_t *v49;
  int32x2_t *v50;
  int32x2_t *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  BOOL v83;
  _QWORD *v84;
  uint64_t v85;
  std::ios_base *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  size_t v91;
  void **p_dst;
  unint64_t v93;
  const void **v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  char *v143;
  char *v144;
  unint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  _QWORD *v156;
  char *v157;
  char *v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  char *v172;
  unint64_t v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t i;
  uint64_t v205;
  unint64_t *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD **v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  int j;
  char *v230;
  char *v231;
  unint64_t v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  char *v243;
  char *v244;
  unint64_t v245;
  int v246;
  int v247;
  int v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  unint64_t v271;
  const void **v272;
  uint64_t v273;
  uint64_t v275;
  void **__dst;
  size_t v278;
  int64_t v279;
  _QWORD *v280;
  _QWORD v281[2];
  _BYTE v282[16];
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  void *v286[2];
  __int128 v287;
  int v288;
  uint64_t v289[19];
  void *v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD v293[3];
  uint64_t v294;
  unint64_t v295;
  __int128 __p;
  __int128 v297;
  int v298;
  uint64_t v299[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  v289[0] = MEMORY[0x1E0DE4FE0] + 64;
  v280 = v8;
  *(_QWORD *)((char *)&v281[-1] + *(v8 - 3)) = v9;
  v10 = (std::ios_base *)((char *)&v281[-1] + *(v280 - 3));
  std::ios_base::init(v10, v281);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v280 = (_QWORD *)(v5 + 24);
  v289[0] = v6;
  std::streambuf::basic_streambuf();
  v281[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v286 = 0u;
  v287 = 0u;
  v288 = 16;
  v11 = *(std::mutex **)(*((_QWORD *)this + 3) + 288);
  if ((a2 & 1) == 0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"MapTiles: ", 10);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" Labels: ", 9);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)" Labels shown: ", 15);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\nFeature Pool: ", 15);
    std::mutex::lock(v11);
    std::mutex::unlock(v11);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" roads, ", 8);
    std::mutex::lock(v11);
    std::mutex::unlock(v11);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" unnamed roads, ", 16);
    std::mutex::lock(v11);
    std::mutex::unlock(v11);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)" points ", 8);
    std::mutex::lock(v11);
    std::mutex::unlock(v11);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" physical, ", 11);
    std::mutex::lock(v11);
    std::mutex::unlock(v11);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)" transit line", 13);
    if ((v288 & 0x10) != 0)
    {
      v35 = *((_QWORD *)&v287 + 1);
      if (*((_QWORD *)&v287 + 1) < v285)
      {
        *((_QWORD *)&v287 + 1) = v285;
        v35 = v285;
      }
      v34 = (const void **)&v284;
    }
    else
    {
      if ((v288 & 8) == 0)
        goto LABEL_269;
      v34 = (const void **)v282;
      v35 = v283;
    }
    v36 = (_BYTE *)a3;
    v37 = *v34;
    v38 = v35 - (_QWORD)*v34;
    if (v38 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v38 < 0x17)
      goto LABEL_276;
    v39 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v39 = v38 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    goto LABEL_281;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Feature Pool: tiles=", 20);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" points=", 8);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" roads=", 7);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" unnamed roads=", 15);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" physical=", 10);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)" transit lines=", 15);
  std::mutex::lock(v11);
  std::mutex::unlock(v11);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Total TextDataStrings: ", 23);
  atomic_load(&md::TextDataString::_totalLabelTextData);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  v19 = *((_QWORD *)this + 6);
  v21 = *(char **)(v19 + 16);
  v20 = *(char **)(v19 + 24);
  if (v21 != v20)
  {
    v22 = v20 - v21 - 16;
    if (v22 < 0x10)
    {
      v23 = 0;
      v24 = 0;
      v25 = (int32x2_t **)v21;
      do
      {
LABEL_20:
        v51 = *v25;
        v25 += 2;
        v24 = vadd_s32(v24, v51[11]);
        v23 += v51[12].i32[0];
      }
      while (v25 != (int32x2_t **)v20);
      goto LABEL_21;
    }
    v42 = 0;
    v43 = 0;
    v44 = (v22 >> 4) + 1;
    v25 = (int32x2_t **)&v21[16 * (v44 & 0x1FFFFFFFFFFFFFFELL)];
    v45 = 0;
    v46 = (int32x2_t **)(v21 + 16);
    v47 = v44 & 0x1FFFFFFFFFFFFFFELL;
    v48 = 0;
    do
    {
      v49 = *(v46 - 2);
      v50 = *v46;
      v46 += 4;
      v48 = vadd_s32(v48, v49[11]);
      v45 = vadd_s32(v45, v50[11]);
      v42 += v49[12].i32[0];
      v43 += v50[12].i32[0];
      v47 -= 2;
    }
    while (v47);
    v23 = v43 + v42;
    v24 = vadd_s32(v45, v48);
    if (v44 != (v44 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_20;
  }
LABEL_21:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"MapTiles: tiles=", 16);
  v52 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)", label-fail(noFeature=", 23);
  v53 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)", noStyle=", 10);
  v54 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)", zRange=", 9);
  v55 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Labels: active=", 15);
  v56 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
  v57 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)") cached=", 9);
  v58 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)" custom=", 8);
  v59 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)" overridden=", 12);
  v60 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)" exist=", 7);
  atomic_load((unsigned int *)&md::Label::_totalLabels);
  v61 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"DisplayLabels: total=", 21);
  v62 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)" active=", 8);
  v63 = (char *)*((_QWORD *)this + 13);
  v64 = (char *)*((_QWORD *)this + 14);
  if (v63 != v64)
  {
    v65 = v64 - v63 - 16;
    if (v65 >= 0x10)
    {
      v67 = 0;
      v68 = 0;
      v69 = (v65 >> 4) + 1;
      v70 = (uint64_t *)(v63 + 16);
      v71 = v69 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v72 = *(v70 - 2);
        v73 = *v70;
        v70 += 4;
        v67 += *(unsigned __int8 *)(v72 + 1252);
        v68 += *(unsigned __int8 *)(v73 + 1252);
        v71 -= 2;
      }
      while (v71);
      v66 = v68 + v67;
      if (v69 == (v69 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_30;
      v63 += 16 * (v69 & 0x1FFFFFFFFFFFFFFELL);
    }
    else
    {
      v66 = 0;
    }
    do
    {
      v74 = *(_QWORD *)v63;
      v63 += 16;
      v66 += *(unsigned __int8 *)(v74 + 1252);
    }
    while (v63 != v64);
  }
LABEL_30:
  v75 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  v76 = *((_QWORD *)this + 4);
  v77 = *(_QWORD **)(v76 + 72);
  v78 = (_QWORD *)(v76 + 80);
  if (v77 != v78)
  {
    v79 = 0;
    do
    {
      v80 = (_QWORD *)v77[1];
      v81 = v77;
      if (v80)
      {
        do
        {
          v82 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v82 = (_QWORD *)v81[2];
          v83 = *v82 == (_QWORD)v81;
          v81 = v82;
        }
        while (!v83);
      }
      v79 += v77[33];
      v77 = v82;
    }
    while (v82 != v78);
    if (v79)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Custom features: ", 17);
      v84 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n", 1);
    }
  }
  if ((*(uint64_t (**)(md::StandardLabeler *))(*(_QWORD *)this + 344))(this))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"ExternalObjects: ", 17);
    v85 = (*(uint64_t (**)(md::StandardLabeler *))(*(_QWORD *)this + 344))(this);
    v299[0] = v5 + 64;
    v290 = v8;
    *(void **)((char *)&v290 + *(v8 - 3)) = v9;
    v86 = (std::ios_base *)((char *)&v290 + *((_QWORD *)v290 - 3));
    std::ios_base::init(v86, &v291);
    v86[1].__vftable = 0;
    v86[1].__fmtflags_ = -1;
    v290 = (void *)(v5 + 24);
    v299[0] = v5 + 64;
    std::streambuf::basic_streambuf();
    v291 = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    v297 = 0u;
    __p = 0u;
    v298 = 16;
    v87 = *(_QWORD **)(v85 + 96);
    if (v87)
    {
      v88 = 0;
      do
      {
        v88 += *(unsigned __int8 *)(v87[2] + 68);
        v87 = (_QWORD *)*v87;
      }
      while (v87);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v290, (uint64_t)"Icon updateCount(active)=", 25);
    v89 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v89, (uint64_t)"(", 1);
    v90 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)")", 1);
    if ((v298 & 0x10) != 0)
    {
      v93 = *((_QWORD *)&v297 + 1);
      if (*((_QWORD *)&v297 + 1) < v295)
      {
        *((_QWORD *)&v297 + 1) = v295;
        v93 = v295;
      }
      v94 = (const void **)&v294;
    }
    else
    {
      if ((v298 & 8) == 0)
      {
        v91 = 0;
        HIBYTE(v279) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_60;
      }
      v94 = (const void **)v293;
      v93 = v293[2];
    }
    v95 = *v94;
    v91 = v93 - (_QWORD)*v94;
    if (v91 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v91 >= 0x17)
    {
      v96 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v91 | 7) != 0x17)
        v96 = v91 | 7;
      v97 = v96 + 1;
      p_dst = (void **)operator new(v96 + 1);
      v278 = v91;
      v279 = v97 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v279) = v93 - *(_BYTE *)v94;
      p_dst = (void **)&__dst;
      if (!v91)
        goto LABEL_60;
    }
    memmove(p_dst, v95, v91);
LABEL_60:
    *((_BYTE *)p_dst + v91) = 0;
    v290 = *(void **)v7;
    *(void **)((char *)&v290 + *((_QWORD *)v290 - 3)) = *(void **)(v7 + 24);
    v291 = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    if (SBYTE7(v297) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AF4D64](v299);
    if (v279 >= 0)
      v98 = (void **)&__dst;
    else
      v98 = __dst;
    if (v279 >= 0)
      v99 = HIBYTE(v279);
    else
      v99 = v278;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)v98, v99);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"\n", 1);
    if (SHIBYTE(v279) < 0)
      operator delete(__dst);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Count Pushed Labels: ", 21);
  v100 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"StagingState: ", 14);
  v101 = (char *)*((_QWORD *)this + 9);
  v102 = (char *)*((_QWORD *)this + 10);
  if (v101 == v102)
    goto LABEL_85;
  v103 = v102 - v101 - 16;
  if (v103 < 0x10)
  {
    v104 = 0;
    goto LABEL_82;
  }
  v105 = 0;
  v106 = 0;
  v107 = (v103 >> 4) + 1;
  v108 = (uint64_t *)(v101 + 16);
  v109 = v107 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v110 = *(v108 - 2);
    v111 = *v108;
    v108 += 4;
    v112 = *(unsigned __int8 *)(v111 + 820);
    if (!*(_BYTE *)(v110 + 820))
      ++v105;
    if (!v112)
      ++v106;
    v109 -= 2;
  }
  while (v109);
  v104 = v106 + v105;
  if (v107 != (v107 & 0x1FFFFFFFFFFFFFFELL))
  {
    v101 += 16 * (v107 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_82:
      v113 = *(_QWORD *)v101;
      v101 += 16;
      if (!*(_BYTE *)(v113 + 820))
        ++v104;
    }
    while (v101 != v102);
  }
LABEL_85:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Dead", 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v114 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v114, (uint64_t)" ", 1);
  v115 = (char *)*((_QWORD *)this + 9);
  v116 = (char *)*((_QWORD *)this + 10);
  if (v115 == v116)
    goto LABEL_100;
  v117 = v116 - v115 - 16;
  if (v117 < 0x10)
  {
    v118 = 0;
    goto LABEL_97;
  }
  v119 = 0;
  v120 = 0;
  v121 = (v117 >> 4) + 1;
  v122 = (uint64_t *)(v115 + 16);
  v123 = v121 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v124 = *(v122 - 2);
    v125 = *v122;
    v122 += 4;
    v126 = *(unsigned __int8 *)(v125 + 820);
    if (*(_BYTE *)(v124 + 820) == 1)
      ++v119;
    if (v126 == 1)
      ++v120;
    v123 -= 2;
  }
  while (v123);
  v118 = v120 + v119;
  if (v121 != (v121 & 0x1FFFFFFFFFFFFFFELL))
  {
    v115 += 16 * (v121 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_97:
      v127 = *(_QWORD *)v115;
      v115 += 16;
      if (*(_BYTE *)(v127 + 820) == 1)
        ++v118;
    }
    while (v115 != v116);
  }
LABEL_100:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Prepare", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v128 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v128, (uint64_t)" ", 1);
  v129 = (char *)*((_QWORD *)this + 9);
  v130 = (char *)*((_QWORD *)this + 10);
  if (v129 == v130)
    goto LABEL_115;
  v131 = v130 - v129 - 16;
  if (v131 < 0x10)
  {
    v132 = 0;
    goto LABEL_112;
  }
  v133 = 0;
  v134 = 0;
  v135 = (v131 >> 4) + 1;
  v136 = (uint64_t *)(v129 + 16);
  v137 = v135 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v138 = *(v136 - 2);
    v139 = *v136;
    v136 += 4;
    v140 = *(unsigned __int8 *)(v139 + 820);
    if (*(_BYTE *)(v138 + 820) == 2)
      ++v133;
    if (v140 == 2)
      ++v134;
    v137 -= 2;
  }
  while (v137);
  v132 = v134 + v133;
  if (v135 != (v135 & 0x1FFFFFFFFFFFFFFELL))
  {
    v129 += 16 * (v135 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_112:
      v141 = *(_QWORD *)v129;
      v129 += 16;
      if (*(_BYTE *)(v141 + 820) == 2)
        ++v132;
    }
    while (v129 != v130);
  }
LABEL_115:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Display", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v142 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v142, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"LabelDisplayState: ", 19);
  v143 = (char *)*((_QWORD *)this + 13);
  v144 = (char *)*((_QWORD *)this + 14);
  if (v143 == v144)
    goto LABEL_130;
  v145 = v144 - v143 - 16;
  if (v145 < 0x10)
  {
    v146 = 0;
    goto LABEL_127;
  }
  v147 = 0;
  v148 = 0;
  v149 = (v145 >> 4) + 1;
  v150 = (uint64_t *)(v143 + 16);
  v151 = v149 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v152 = *(v150 - 2);
    v153 = *v150;
    v150 += 4;
    v154 = *(unsigned __int8 *)(v153 + 1072);
    if (!*(_BYTE *)(v152 + 1072))
      ++v147;
    if (!v154)
      ++v148;
    v151 -= 2;
  }
  while (v151);
  v146 = v148 + v147;
  if (v149 != (v149 & 0x1FFFFFFFFFFFFFFELL))
  {
    v143 += 16 * (v149 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_127:
      v155 = *(_QWORD *)v143;
      v143 += 16;
      if (!*(_BYTE *)(v155 + 1072))
        ++v146;
    }
    while (v143 != v144);
  }
LABEL_130:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Hidden", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v156 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v156, (uint64_t)" ", 1);
  v157 = (char *)*((_QWORD *)this + 13);
  v158 = (char *)*((_QWORD *)this + 14);
  if (v157 == v158)
    goto LABEL_145;
  v159 = v158 - v157 - 16;
  if (v159 < 0x10)
  {
    v160 = 0;
    goto LABEL_142;
  }
  v161 = 0;
  v162 = 0;
  v163 = (v159 >> 4) + 1;
  v164 = (uint64_t *)(v157 + 16);
  v165 = v163 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v166 = *(v164 - 2);
    v167 = *v164;
    v164 += 4;
    v168 = *(unsigned __int8 *)(v167 + 1072);
    if (*(_BYTE *)(v166 + 1072) == 1)
      ++v161;
    if (v168 == 1)
      ++v162;
    v165 -= 2;
  }
  while (v165);
  v160 = v162 + v161;
  if (v163 != (v163 & 0x1FFFFFFFFFFFFFFELL))
  {
    v157 += 16 * (v163 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_142:
      v169 = *(_QWORD *)v157;
      v157 += 16;
      if (*(_BYTE *)(v169 + 1072) == 1)
        ++v160;
    }
    while (v157 != v158);
  }
LABEL_145:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"FadeIn", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v170 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v170, (uint64_t)" ", 1);
  v171 = (char *)*((_QWORD *)this + 13);
  v172 = (char *)*((_QWORD *)this + 14);
  if (v171 == v172)
    goto LABEL_160;
  v173 = v172 - v171 - 16;
  if (v173 < 0x10)
  {
    v174 = 0;
    goto LABEL_157;
  }
  v175 = 0;
  v176 = 0;
  v177 = (v173 >> 4) + 1;
  v178 = (uint64_t *)(v171 + 16);
  v179 = v177 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v180 = *(v178 - 2);
    v181 = *v178;
    v178 += 4;
    v182 = *(unsigned __int8 *)(v181 + 1072);
    if (*(_BYTE *)(v180 + 1072) == 2)
      ++v175;
    if (v182 == 2)
      ++v176;
    v179 -= 2;
  }
  while (v179);
  v174 = v176 + v175;
  if (v177 != (v177 & 0x1FFFFFFFFFFFFFFELL))
  {
    v171 += 16 * (v177 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_157:
      v183 = *(_QWORD *)v171;
      v171 += 16;
      if (*(_BYTE *)(v183 + 1072) == 2)
        ++v174;
    }
    while (v171 != v172);
  }
LABEL_160:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"FadeOut", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v184 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v184, (uint64_t)" ", 1);
  v185 = (char *)*((_QWORD *)this + 13);
  v186 = (char *)*((_QWORD *)this + 14);
  if (v185 != v186)
  {
    v187 = v186 - v185 - 16;
    if (v187 >= 0x10)
    {
      v189 = 0;
      v190 = 0;
      v191 = (v187 >> 4) + 1;
      v192 = (uint64_t *)(v185 + 16);
      v193 = v191 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v194 = *(v192 - 2);
        v195 = *v192;
        v192 += 4;
        v196 = *(unsigned __int8 *)(v195 + 1072);
        if (*(_BYTE *)(v194 + 1072) == 3)
          ++v189;
        if (v196 == 3)
          ++v190;
        v193 -= 2;
      }
      while (v193);
      v188 = v190 + v189;
      if (v191 == (v191 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_175;
      v185 += 16 * (v191 & 0x1FFFFFFFFFFFFFFELL);
    }
    else
    {
      v188 = 0;
    }
    do
    {
      v197 = *(_QWORD *)v185;
      v185 += 16;
      if (*(_BYTE *)(v197 + 1072) == 3)
        ++v188;
    }
    while (v185 != v186);
  }
LABEL_175:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Visible", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"=", 1);
  v198 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v198, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"Collision Tested: Items=", 24);
  v199 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)" ReserveSpace=", 14);
  v200 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)" Lines=", 7);
  v201 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"\n", 1);
  v291 = 0;
  {
    v275 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v275, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v292 = mdm::Allocator::instance(void)::alloc;
  v293[0] = 0;
  v290 = &v291;
  v203 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10); v203 != i; v203 += 16)
  {
    v205 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v203 + 8) + 560))(*(_QWORD *)(*(_QWORD *)v203 + 8));
    v206 = *(unint64_t **)v205;
    v207 = *(unint64_t **)(v205 + 8);
    while (v206 != v207)
    {
      v208 = *v206;
      v209 = v291;
      v210 = &v291;
      v211 = &v291;
      if (v291)
      {
        while (1)
        {
          while (1)
          {
            v211 = (_QWORD **)v209;
            v212 = v209[4];
            if (v208 >= v212)
              break;
            v209 = *v211;
            v210 = v211;
            if (!*v211)
              goto LABEL_192;
          }
          if (v212 >= v208)
            break;
          v209 = v211[1];
          if (!v209)
          {
            v210 = v211 + 1;
            goto LABEL_192;
          }
        }
      }
      else
      {
LABEL_192:
        v213 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v292 + 16))(v292, 40, 8);
        v213[4] = v208;
        *v213 = 0;
        v213[1] = 0;
        v213[2] = v211;
        *v210 = v213;
        if (*(_QWORD *)v290)
        {
          v290 = *(void **)v290;
          v213 = (_QWORD *)*v210;
        }
        v214 = v291;
        v83 = v213 == v291;
        *((_BYTE *)v213 + 24) = v213 == v291;
        if (!v83)
        {
          do
          {
            v215 = v213[2];
            if (*(_BYTE *)(v215 + 24))
              break;
            v216 = *(_QWORD **)(v215 + 16);
            v217 = *v216;
            if (*v216 == v215)
            {
              v220 = v216[1];
              if (!v220 || (v221 = *(unsigned __int8 *)(v220 + 24), v218 = (_BYTE *)(v220 + 24), v221))
              {
                if (*(_QWORD **)v215 == v213)
                {
                  v222 = (uint64_t *)v213[2];
                }
                else
                {
                  v222 = *(uint64_t **)(v215 + 8);
                  v223 = *v222;
                  *(_QWORD *)(v215 + 8) = *v222;
                  if (v223)
                  {
                    *(_QWORD *)(v223 + 16) = v215;
                    v216 = *(_QWORD **)(v215 + 16);
                  }
                  v222[2] = (uint64_t)v216;
                  *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v222;
                  *v222 = v215;
                  *(_QWORD *)(v215 + 16) = v222;
                  v216 = (_QWORD *)v222[2];
                  v215 = *v216;
                }
                *((_BYTE *)v222 + 24) = 1;
                *((_BYTE *)v216 + 24) = 0;
                v226 = *(_QWORD *)(v215 + 8);
                *v216 = v226;
                if (v226)
                  *(_QWORD *)(v226 + 16) = v216;
                *(_QWORD *)(v215 + 16) = v216[2];
                *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
                *(_QWORD *)(v215 + 8) = v216;
                goto LABEL_181;
              }
            }
            else if (!v217 || (v219 = *(unsigned __int8 *)(v217 + 24), v218 = (_BYTE *)(v217 + 24), v219))
            {
              if (*(_QWORD **)v215 == v213)
              {
                v224 = v213[1];
                *(_QWORD *)v215 = v224;
                if (v224)
                {
                  *(_QWORD *)(v224 + 16) = v215;
                  v216 = *(_QWORD **)(v215 + 16);
                }
                v213[2] = v216;
                *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v213;
                v213[1] = v215;
                *(_QWORD *)(v215 + 16) = v213;
                v216 = (_QWORD *)v213[2];
              }
              else
              {
                v213 = (_QWORD *)v213[2];
              }
              *((_BYTE *)v213 + 24) = 1;
              *((_BYTE *)v216 + 24) = 0;
              v215 = v216[1];
              v225 = *(_QWORD **)v215;
              v216[1] = *(_QWORD *)v215;
              if (v225)
                v225[2] = v216;
              *(_QWORD *)(v215 + 16) = v216[2];
              *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
              *(_QWORD *)v215 = v216;
LABEL_181:
              v216[2] = v215;
              break;
            }
            *(_BYTE *)(v215 + 24) = 1;
            v213 = v216;
            *((_BYTE *)v216 + 24) = v216 == v214;
            *v218 = 1;
          }
          while (v216 != v214);
        }
        ++v293[0];
      }
      v206 += 2;
    }
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v290, v291);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"LabelsPerStyle:", 15);
  v227 = v280;
  *(_DWORD *)((char *)v281 + *(v280 - 3)) = *(_DWORD *)((_BYTE *)v281 + *(v280 - 3)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v281[1] + *(v227 - 3)) = 1;
  v228 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"\nOutcome: (Staging, Display)\n", 29);
  for (j = 0; j != 38; ++j)
  {
    md::stringFromLabelOutcome((uint64_t)&v290, j);
    v230 = (char *)*((_QWORD *)this + 9);
    v231 = (char *)*((_QWORD *)this + 10);
    if (v230 == v231)
      goto LABEL_237;
    v232 = v231 - v230 - 16;
    if (v232 < 0x10)
    {
      v233 = 0;
      goto LABEL_234;
    }
    v234 = 0;
    v235 = 0;
    v236 = (v232 >> 4) + 1;
    v237 = (uint64_t *)(v230 + 16);
    v238 = v236 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v239 = *(v237 - 2);
      v240 = *v237;
      v237 += 4;
      v241 = *(unsigned __int8 *)(v240 + 821);
      if (*(unsigned __int8 *)(v239 + 821) == j)
        ++v234;
      if (v241 == j)
        ++v235;
      v238 -= 2;
    }
    while (v238);
    v233 = v235 + v234;
    if (v236 != (v236 & 0x1FFFFFFFFFFFFFFELL))
    {
      v230 += 16 * (v236 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_234:
        v242 = *(_QWORD *)v230;
        v230 += 16;
        if (*(unsigned __int8 *)(v242 + 821) == j)
          ++v233;
      }
      while (v230 != v231);
    }
LABEL_237:
    v243 = (char *)*((_QWORD *)this + 13);
    v244 = (char *)*((_QWORD *)this + 14);
    if (v243 == v244)
      goto LABEL_252;
    v245 = v244 - v243 - 16;
    if (v245 < 0x10)
    {
      v246 = 0;
      goto LABEL_249;
    }
    v247 = 0;
    v248 = 0;
    v249 = (v245 >> 4) + 1;
    v250 = (uint64_t *)(v243 + 16);
    v251 = v249 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v252 = *(v250 - 2);
      v253 = *v250;
      v250 += 4;
      v254 = *(unsigned __int8 *)(v253 + 1073);
      if (*(unsigned __int8 *)(v252 + 1073) == j)
        ++v247;
      if (v254 == j)
        ++v248;
      v251 -= 2;
    }
    while (v251);
    v246 = v248 + v247;
    if (v249 != (v249 & 0x1FFFFFFFFFFFFFFELL))
    {
      v243 += 16 * (v249 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_249:
        v255 = *(_QWORD *)v243;
        v243 += 16;
        if (*(unsigned __int8 *)(v255 + 1073) == j)
          ++v246;
      }
      while (v243 != v244);
    }
LABEL_252:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"   ", 3);
    if (v292 >= 0)
      v256 = &v290;
    else
      v256 = v290;
    if (v292 >= 0)
      v257 = HIBYTE(v292);
    else
      v257 = (uint64_t)v291;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)v256, v257);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)":(", 2);
    v258 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)", ", 2);
    v259 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)")\n", 2);
    if (SHIBYTE(v292) < 0)
      operator delete(v290);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"\nFade:\n", 7);
  v260 = *((_QWORD *)this + 9);
  v261 = *((_QWORD *)this + 10);
  if (v260 != v261)
  {
    v262 = 0;
    v263 = 0;
    v264 = 0;
    do
    {
      v265 = *(_QWORD *)(*(_QWORD *)v260 + 296);
      if (v265)
      {
        v263 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v265 + 688))(v265);
        v266 = *(_QWORD *)(*(_QWORD *)v260 + 296);
        if (v266)
        {
          v264 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v266 + 680))(v266);
          v267 = *(_QWORD *)(*(_QWORD *)v260 + 296);
          if (v267)
            v262 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v267 + 696))(v267);
        }
      }
      v260 += 16;
    }
    while (v260 != v261);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"   Cross Fade Parts: ", 21);
  v7 = MEMORY[0x1E0DE4F60];
  v268 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"   Style Fade Parts: ", 21);
  v269 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v280, (uint64_t)"   Parts Cross Fading: ", 23);
  v270 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v270, (uint64_t)"\n", 1);
  if ((v288 & 0x10) != 0)
  {
    v271 = *((_QWORD *)&v287 + 1);
    if (*((_QWORD *)&v287 + 1) < v285)
    {
      *((_QWORD *)&v287 + 1) = v285;
      v271 = v285;
    }
    v272 = (const void **)&v284;
  }
  else
  {
    if ((v288 & 8) == 0)
    {
LABEL_269:
      v38 = 0;
      v36 = (_BYTE *)a3;
      *(_BYTE *)(a3 + 23) = 0;
      goto LABEL_283;
    }
    v272 = (const void **)v282;
    v271 = v283;
  }
  v36 = (_BYTE *)a3;
  v37 = *v272;
  v38 = v271 - (_QWORD)*v272;
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v38 >= 0x17)
  {
    v273 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v273 = v38 | 7;
    v40 = v273 + 1;
    v41 = operator new(v273 + 1);
LABEL_281:
    *(_QWORD *)(a3 + 8) = v38;
    *(_QWORD *)(a3 + 16) = v40 | 0x8000000000000000;
    *(_QWORD *)a3 = v41;
    v36 = v41;
    goto LABEL_282;
  }
LABEL_276:
  v36[23] = v38;
  if (v38)
LABEL_282:
    memmove(v36, v37, v38);
LABEL_283:
  v36[v38] = 0;
  v280 = *(_QWORD **)v7;
  *(_QWORD *)((char *)&v281[-1] + *(v280 - 3)) = *(_QWORD *)(v7 + 24);
  v281[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v287) < 0)
    operator delete(v286[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v289);
}

void sub_19FB6CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v57);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::populateDebugNode(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char *ChildNode;
  char *v7;
  const md::LabelManager *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  std::string *v13;
  const md::LabelManager *v14;
  char *v15;
  std::string v16;
  std::string __p;

  if (*(_QWORD *)(a1 + 200))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__p, "Selected Feature");
    ChildNode = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)&__p);
    (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 200) + 464))(*(_QWORD *)(a1 + 200), ChildNode, *(_QWORD *)(a1 + 24));
  }
  if (*(_QWORD *)(a1 + 184))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "Selected Label");
    v7 = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)&__p);
    md::Label::populateDebugNode(*(md::Label **)(a1 + 184), (gdc::DebugTreeNode *)v7, v8);
  }
  if ((*a3 & 8) != 0)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__p, "All Labels");
    v9 = gdc::DebugTreeNode::createChildNode(a2, (__int128 *)&__p);
    if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
    {
      v10 = (uint64_t)v9;
      v11 = 0;
      for (i = 0; i < (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4; ++i)
      {
        std::to_string(&v16, i);
        v13 = std::string::insert(&v16, 0, "Label ", 6uLL);
        __p = *v13;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = gdc::DebugTreeNode::createChildNode(v10, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
            operator delete(v16.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_13;
        }
        md::Label::populateDebugNode(*(md::Label **)(*(_QWORD *)(a1 + 72) + v11), (gdc::DebugTreeNode *)v15, v14);
        v11 += 16;
      }
    }
  }
}

void sub_19FB6D05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void md::StandardLabeler::debugDraw(md::StandardLabeler *this, NSMutableString *a2, md::DebugConsole *a3)
{
  md::DebugConsole *v5;
  NSMutableString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  md::LabelManager *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  md::LabelManager *v30;
  md::LabelManager *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  md::LabelManager *v38;
  md::LabelManager *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  md::Label *v45;
  uint64_t v46;
  uint64_t v47;
  md::DebugConsole *v48;
  int v49;
  uint64_t v50;
  void *v51;
  void *v52;
  md::Label *v53;
  void *v54;
  void *v55;
  void *v56;
  md::LabelManager *v57;
  uint64_t v58;
  void *__p;
  md::StandardLabeler *v60;
  md::LabelManager **v61;
  void **p_p;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v57 = a3;
  v7 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v7 + 3616))
  {
    v8 = *((_QWORD *)this + 6);
    v9 = *(uint64_t **)(v8 + 16);
    v10 = *(uint64_t **)(v8 + 24);
    if (v9 != v10)
    {
      while (1)
      {
        v13 = *((_QWORD *)this + 3);
        if (*(_BYTE *)(v13 + 3637))
        {
          if (*(_BYTE *)(v13 + 3639))
            goto LABEL_6;
          goto LABEL_16;
        }
        v14 = *v9;
        __p = &off_1E42D8D38;
        v60 = this;
        v61 = &v57;
        p_p = &__p;
        md::LabelMapTile::enumerateLineFeatures(v14, (uint64_t)&__p);
        v15 = p_p;
        if (p_p == &__p)
        {
          v15 = &__p;
          v16 = 4;
        }
        else
        {
          if (!p_p)
            goto LABEL_15;
          v16 = 5;
        }
        (*((void (**)(void))*v15 + v16))();
LABEL_15:
        if (*(_BYTE *)(*((_QWORD *)this + 3) + 3639))
          goto LABEL_6;
LABEL_16:
        v17 = *v9;
        __p = &off_1E42D8D80;
        v60 = this;
        v61 = &v57;
        p_p = &__p;
        md::LabelMapTile::enumeratePhysicalLineFeatures(*(_QWORD *)(v17 + 184), (uint64_t)&__p);
        v11 = p_p;
        if (p_p == &__p)
        {
          v11 = &__p;
          v12 = 4;
        }
        else
        {
          if (!p_p)
            goto LABEL_6;
          v12 = 5;
        }
        (*((void (**)(void))*v11 + v12))();
LABEL_6:
        v9 += 2;
        if (v9 == v10)
        {
          v7 = *((_QWORD *)this + 3);
          break;
        }
      }
    }
  }
  if (*(_BYTE *)(v7 + 3623))
  {
    v18 = *((_QWORD *)this + 6);
    v19 = *(uint64_t **)(v18 + 16);
    v20 = *(uint64_t **)(v18 + 24);
    while (1)
    {
      if (v19 == v20)
        goto LABEL_44;
      v21 = *v19;
      v22 = *(_QWORD *)(*v19 + 440);
      if (v22)
        break;
LABEL_33:
      v30 = *(md::LabelManager **)(v21 + 456);
      if (!v30)
        goto LABEL_40;
      v31 = v57;
      md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, v30, *(_QWORD *)(*((_QWORD *)this + 3) + 432), *(double *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 56));
      v33 = *((_QWORD *)v30 + 23);
      v34 = *((_QWORD *)v30 + 24);
      v35 = (char *)__p;
      if (v33 != v34)
      {
        do
        {
          v36 = *(unsigned int *)(v33 + 264);
          v37 = *(_QWORD *)&v35[8 * v36];
          v58 = *(_QWORD *)&v35[8 * (v36 + 1)];
          *((_QWORD *)v31 + 1) = v37;
          v32.n128_f32[0] = ggl::DebugConsole::drawLine((uint64_t)v31, (float *)&v58);
          v33 += 272;
        }
        while (v33 != v34);
LABEL_38:
        (*((void (**)(void **, char *, int64_t, __n128))*p_p + 5))(p_p, v35, (char *)v61 - v35, v32);
        goto LABEL_39;
      }
      if (__p)
        goto LABEL_38;
LABEL_39:
      v21 = *v19;
LABEL_40:
      v38 = *(md::LabelManager **)(v21 + 472);
      if (v38)
      {
        v39 = v57;
        md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, v38, *(_QWORD *)(*((_QWORD *)this + 3) + 432), *(double *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 56));
        v40 = *((_QWORD *)v38 + 23);
        v41 = *((_QWORD *)v38 + 24);
        v42 = (char *)__p;
        if (v40 == v41)
        {
          if (!__p)
            goto LABEL_24;
        }
        else
        {
          do
          {
            v43 = *(unsigned int *)(v40 + 264);
            v44 = *(_QWORD *)&v42[8 * v43];
            v58 = *(_QWORD *)&v42[8 * (v43 + 1)];
            *((_QWORD *)v39 + 1) = v44;
            ggl::DebugConsole::drawLine((uint64_t)v39, (float *)&v58);
            v40 += 272;
          }
          while (v40 != v41);
        }
        (*((void (**)(void **, char *, int64_t))*p_p + 5))(p_p, v42, (char *)v61 - v42);
      }
LABEL_24:
      v19 += 2;
    }
    v23 = v57;
    md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, *(md::LabelManager **)(*v19 + 440), *(_QWORD *)(*((_QWORD *)this + 3) + 432), *(double *)(*(_QWORD *)(*((_QWORD *)this + 3) + 232) + 56));
    v25 = *(_QWORD *)(v22 + 184);
    v26 = *(_QWORD *)(v22 + 192);
    v27 = (char *)__p;
    if (v25 == v26)
    {
      if (!__p)
      {
LABEL_32:
        v21 = *v19;
        goto LABEL_33;
      }
    }
    else
    {
      do
      {
        v28 = *(unsigned int *)(v25 + 264);
        v29 = *(_QWORD *)&v27[8 * v28];
        v58 = *(_QWORD *)&v27[8 * (v28 + 1)];
        *((_QWORD *)v23 + 1) = v29;
        v24.n128_f32[0] = ggl::DebugConsole::drawLine((uint64_t)v23, (float *)&v58);
        v25 += 272;
      }
      while (v25 != v26);
    }
    (*((void (**)(void **, char *, int64_t, __n128))*p_p + 5))(p_p, v27, (char *)v61 - v27, v24);
    goto LABEL_32;
  }
LABEL_44:
  v45 = (md::Label *)*((_QWORD *)this + 23);
  if (v45 || *((_QWORD *)this + 25))
  {
    v46 = *((_QWORD *)this + 3);
    if (*(_BYTE *)(v46 + 3643))
    {
      v47 = *((_QWORD *)this + 25);
      if (v47)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v47 + 456))(*((_QWORD *)this + 25));
        v45 = (md::Label *)*((_QWORD *)this + 23);
      }
      if (v45)
        md::Label::debugDraw(v45, v57, v5);
    }
    else
    {
      -[NSMutableString appendFormat:](v6, "appendFormat:", CFSTR("LayoutZoom:%.2f\n"), *(float *)(v46 + 472));
      v49 = *(unsigned __int8 *)(*((_QWORD *)this + 3) + 3642);
      v50 = *((_QWORD *)this + 25);
      if (!v50)
        goto LABEL_58;
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 456))(v50);
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, char *, BOOL))(**((_QWORD **)this + 25) + 448))(&__p, *((_QWORD *)this + 25), *((_QWORD *)this + 3), (char *)this + 216, v49 != 0);
      if (SHIBYTE(v61) >= 0)
        v51 = &__p;
      else
        v51 = __p;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v51);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      if (v52)
        -[NSMutableString appendString:](v6, "appendString:", v52);

      if (SHIBYTE(v61) < 0)
      {
        operator delete(__p);
        v53 = (md::Label *)*((_QWORD *)this + 23);
        if (!v53)
          goto LABEL_65;
      }
      else
      {
LABEL_58:
        v53 = (md::Label *)*((_QWORD *)this + 23);
        if (!v53)
          goto LABEL_65;
      }
      md::Label::debugDraw(v53, v57, v48);
      v54 = (void *)MEMORY[0x1E0CB3940];
      md::Label::debugString((md::Label *)&__p, *((md::LabelManager **)this + 23), *((_QWORD *)this + 3), v49 != 0);
      if (SHIBYTE(v61) >= 0)
        v55 = &__p;
      else
        v55 = __p;
      objc_msgSend(v54, "stringWithUTF8String:", v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableString appendString:](v6, "appendString:", v56);

      if (SHIBYTE(v61) < 0)
        operator delete(__p);
    }
  }
LABEL_65:

}

void sub_19FB6D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8D80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8D80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *v3;
  v8 = xmmword_19FFB2E20;
  v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v4 + 456))(v4, v5, v6, &v8, 0);
}

void std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D8D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *v3;
  v8 = xmmword_19FFB2E20;
  v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)v4 + 456))(v4, v5, v6, &v8, 0);
}

uint64_t ggl::crc32::compute<16ul>(char *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v1 = ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) ^ a1[3]];
  v2 = v1 ^ ((ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]] ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8);
  v3 = ggl::crc32::crc32Table[(v1 ^ ((unsigned __int16)(LOWORD(ggl::crc32::crc32Table[(LOBYTE(ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]]) ^ ((unsigned __int16)~LOWORD(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) >> 8)) ^ a1[2]]) ^ ((ggl::crc32::crc32Table[~LOBYTE(ggl::crc32::crc32Table[*a1 ^ 0xFFLL]) ^ a1[1]] ^ ((ggl::crc32::crc32Table[*a1 ^ 0xFFLL] ^ 0xFFFFFFu) >> 8)) >> 8)) >> 8)) ^ a1[4]] ^ (v2 >> 8);
  v4 = ggl::crc32::crc32Table[v3 ^ a1[5]] ^ (v3 >> 8);
  v5 = ggl::crc32::crc32Table[v4 ^ a1[6]] ^ (v4 >> 8);
  v6 = ggl::crc32::crc32Table[v5 ^ a1[7]] ^ (v5 >> 8);
  v7 = ggl::crc32::crc32Table[v6 ^ a1[8]] ^ (v6 >> 8);
  v8 = ggl::crc32::crc32Table[v7 ^ a1[9]] ^ (v7 >> 8);
  v9 = ggl::crc32::crc32Table[v8 ^ a1[10]] ^ (v8 >> 8);
  v10 = ggl::crc32::crc32Table[v9 ^ a1[11]] ^ (v9 >> 8);
  v11 = ggl::crc32::crc32Table[v10 ^ a1[12]] ^ (v10 >> 8);
  v12 = ggl::crc32::crc32Table[v11 ^ a1[13]] ^ (v11 >> 8);
  return ggl::crc32::crc32Table[v12 ^ a1[14]] ^ ~(v12 >> 8);
}

void ggl::Sky::SkyPipelineSetup::~SkyPipelineSetup(ggl::Sky::SkyPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Sky::SkyPipelineSetup::constantDataIsEnabled(ggl::Sky::SkyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::Sky::SkyPipelineSetup::textureIsEnabled(ggl::Sky::SkyPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::Sky::SkyPipelineSetup::SkyPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42BB7F0;
  v11 = (uint64_t *)a1[8];
  v12 = *a4;
  v13 = a4[1];
  *v11 = *a4;
  v11[1] = 0;
  v14 = (_QWORD *)a1[20];
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v14[1];
  *v14 = v12;
  v14[1] = v13;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_19FB6DCFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB6E550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19FB6E6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB6E77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB6E938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FB6EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;

  a10.super_class = (Class)VKMapSnapshot;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FB6EB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB6EE78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB6F128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB6F230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void releaseIOSurface(void *a1, const void *a2)
{
  void *cf;

  cf = a1;
  if (cf)
  {
    objc_msgSend(cf, "unlockWithOptions:seed:", 1, 0);
    objc_msgSend(cf, "decrementUseCount");
    CFRelease(cf);
  }

}

void sub_19FB6F330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB6F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  int64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;

  v9 = (uint64_t *)result;
LABEL_2:
  v116 = a2 - 2;
  v118 = a2 - 1;
  v115 = a2 - 3;
  v10 = v9;
  v120 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v118;
        v122 = *v9;
        v123 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v123, &v122);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v118;
          *v118 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v118, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v118, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v118, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v122 = *v59;
              v123 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v123, &v122);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v122 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v123 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v123, &v122);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v122 = *v9;
              v123 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v123, &v122);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v122 = v109;
                  v123 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v123, &v122);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v111, v112, v113, v114);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v117 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v122 = v70[1];
                  v123 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v123, &v122))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v120;
                  v68 = v72;
                }
                v119 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v122 = *v75;
                v123 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v123, &v122);
                v68 = v119;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v122 = v70[1];
                      v123 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v123, &v122))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v122 = v78;
                    v123 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v123, &v122);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v119;
                  a2 = v120;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v117 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v121 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v122 = v90[1];
                        v123 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v123, &v122);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v121;
                    v95 = v121 - 1;
                    if (v90 == v121 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v122 = *v90;
                        v123 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v123, &v122);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v122 = v101;
                            v123 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v123, &v122);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v121;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v118, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v118, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v116, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v122 = *v9;
        v123 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v123, &v122) & 1) == 0)
        {
          v37 = *v9;
          v122 = *v118;
          v123 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v123, &v122);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v122 = v39;
              v123 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v123, &v122);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v122 = *v41;
            v123 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v123, &v122);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v122 = v44;
              v123 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v123, &v122);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v122 = v47;
              v123 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v123, &v122))
              {
                while (1)
                {
                  v49 = *--v43;
                  v122 = v49;
                  v123 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v123, &v122);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v122 = v19;
          v123 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v123, &v122) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v122 = v19;
            v123 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v123, &v122))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v122 = v19;
          v123 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v123, &v122) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v122 = v19;
              v123 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v123, &v122) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v122 = v19;
              v123 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v123, &v122));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v120;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v23 + 1, v120, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *a2;
  v22 = *a1;
  v23 = v5;
  v6 = *(_QWORD *)(a4 + 24);
  if (!v6)
    goto LABEL_16;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v23, &v22);
  v11 = *a3;
  if ((v10 & 1) != 0)
  {
    v22 = *a2;
    v23 = v11;
    v12 = *(_QWORD *)(a4 + 24);
    if (v12)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v23, &v22);
      v14 = *a1;
      if ((_DWORD)result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      v20 = *a3;
      v22 = v14;
      v23 = v20;
      v21 = *(_QWORD *)(a4 + 24);
      if (v21)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v23, &v22);
        if (!(_DWORD)result)
          return result;
        v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>();
  }
  v22 = *a2;
  v23 = v11;
  v15 = *(_QWORD *)(a4 + 24);
  if (!v15)
    goto LABEL_16;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v23, &v22);
  if (!(_DWORD)result)
    return result;
  v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  v17 = *a2;
  v22 = *a1;
  v23 = v17;
  v18 = *(_QWORD *)(a4 + 24);
  if (!v18)
    goto LABEL_16;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v23, &v22);
  if ((_DWORD)result)
  {
    v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a2, a3, a5);
  v10 = *a4;
  v20 = *a3;
  v21 = v10;
  v11 = *(_QWORD *)(a5 + 24);
  if (!v11)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v21, &v20);
  if (!(_DWORD)result)
    return result;
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v14 = *a3;
  v20 = *a2;
  v21 = v14;
  v15 = *(_QWORD *)(a5 + 24);
  if (!v15)
    goto LABEL_9;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v21, &v20);
  if (!(_DWORD)result)
    return result;
  v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  v17 = *a2;
  v20 = *a1;
  v21 = v17;
  v18 = *(_QWORD *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v21, &v20);
  if ((_DWORD)result)
  {
    v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v25 = *a4;
  v26 = v12;
  v13 = *(_QWORD *)(a6 + 24);
  if (!v13)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v26, &v25);
  if (!(_DWORD)result)
    return result;
  v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  v16 = *a4;
  v25 = *a3;
  v26 = v16;
  v17 = *(_QWORD *)(a6 + 24);
  if (!v17)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v26, &v25);
  if (!(_DWORD)result)
    return result;
  v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  v19 = *a3;
  v25 = *a2;
  v26 = v19;
  v20 = *(_QWORD *)(a6 + 24);
  if (!v20)
    goto LABEL_11;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v26, &v25);
  if (!(_DWORD)result)
    return result;
  v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  v22 = *a2;
  v25 = *a1;
  v26 = v22;
  v23 = *(_QWORD *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v26, &v25);
  if ((_DWORD)result)
  {
    v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

_BYTE *md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t v75;
  unint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *(uint64_t **)v75;
    v78 = *(uint64_t **)(v75 + 8);
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(v78 - v77);
    if (v78 == v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB71044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  char ***v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  _QWORD *i;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char **v58;
  char **v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count **v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count **v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  char **v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  BOOL v112;
  uint64_t v113;
  geo::read_write_lock *v114;
  const char *v115;
  malloc_zone_t *zone;
  uint64_t v117;
  geo::read_write_lock *v118;
  const char *v119;
  malloc_zone_t *v120;
  uint64_t v121;
  geo::read_write_lock *v122;
  const char *v123;
  malloc_zone_t *v124;
  uint64_t v125;
  geo::read_write_lock *v126;
  const char *v127;
  malloc_zone_t *v128;
  md::LayoutContext *v129;
  char ***v130;
  uint64_t *v131;
  char *v132;
  _QWORD *v133;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __int16 v137[2];
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    return;
  v5 = this;
  v6 = a3;
  v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
      v8 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
  }
  else
  {
    v8 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
  }
  v9 = *(_QWORD **)(*v3 + 8 * v8);
  if (!v9)
    return;
  v10 = (_QWORD *)*v9;
  if (!v10)
    return;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0x3070CB6B3C7F21D3)
      {
        if (v10[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        return;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0x3070CB6B3C7F21D3)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v8)
      return;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      return;
  }
  if (v10[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) == 0x3070CB6B3C7F21D3)
  {
    v131 = *(uint64_t **)(v14 + 32);
    if (v131)
    {
      v15 = *(_QWORD *)(a2 + 192);
      if (v15)
      {
        if (v15 >> 61)
          abort();
        v16 = v15;
        v17 = (char **)operator new(8 * v15);
        *v6 = v17;
        v6[1] = v17;
        v6[2] = &v17[v16];
      }
      v18 = *(_QWORD **)(a2 + 176);
      if (v18 != (_QWORD *)(a2 + 184))
      {
        v129 = v5;
        v130 = v6;
        do
        {
          v20 = v18[4];
          v19 = (std::__shared_weak_count *)v18[5];
          v133 = v18;
          v139 = v20;
          v140 = v19;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
          }
          v137[0] = *(_WORD *)(v20 + 168);
          v138 = *(_QWORD *)(v20 + 172);
          v23 = *(double *)(v20 + 600);
          v24 = *(double *)(v20 + 608);
          md::LayoutContext::frameState(v5);
          v26 = *(unsigned __int8 *)(v25 + 128);
          md::GeometryContext::transformConstantData((double *)&v135, v131, (unsigned __int8 *)v137, v26, v23, v24);
          v27 = a2;
          v28 = *((_BYTE *)v133 + 48);
          v29 = *(char **)(a2 + 264);
          if (!v29)
          {
            v30 = (char *)malloc_type_malloc(*(_QWORD *)(a2 + 256), 0x160B39uLL);
            v31 = v30;
            v32 = (uint64_t **)(a2 + 232);
            while (1)
            {
              v33 = *v32;
              v34 = v32;
              if (!*v32)
                break;
              while (1)
              {
                v32 = (uint64_t **)v33;
                v35 = v33[4];
                if ((unint64_t)v30 < v35)
                  break;
                if (v35 >= (unint64_t)v30)
                  goto LABEL_43;
                v33 = v32[1];
                if (!v33)
                {
                  v34 = v32 + 1;
                  goto LABEL_40;
                }
              }
            }
LABEL_40:
            v36 = (uint64_t *)operator new(0x28uLL);
            v36[4] = (uint64_t)v31;
            *v36 = 0;
            v36[1] = 0;
            v36[2] = (uint64_t)v32;
            *v34 = v36;
            v37 = **(_QWORD **)(a2 + 224);
            if (v37)
            {
              *(_QWORD *)(a2 + 224) = v37;
              v36 = *v34;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 232), v36);
            ++*(_QWORD *)(a2 + 240);
LABEL_43:
            v29 = *(char **)(a2 + 264);
            v38 = 408 * *(_QWORD *)(a2 + 248) - 408;
            if ((v38 & 0x8000000000000000) == 0)
            {
              v39 = &v31[v38];
              do
              {
                *(_QWORD *)v39 = v29;
                v40 = v39 - 408;
                v29 = v39;
                v39 = v40;
              }
              while (v40 >= v31);
              v29 = v40 + 408;
            }
            v27 = a2;
            *(_QWORD *)(a2 + 264) = v29;
            v20 = v139;
            v19 = v140;
          }
          *(_QWORD *)(v27 + 264) = *(_QWORD *)v29;
          if (v19)
          {
            v41 = (unint64_t *)&v19->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v20, (uint64_t)v19, v28, (v26 - 1) < 3u, &v135);
          if (v19)
          {
            v43 = (unint64_t *)&v19->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          *(_QWORD *)v29 = &off_1E426F400;
          v45 = v139;
          v46 = v140;
          *((_QWORD *)v29 + 48) = v139;
          *((_QWORD *)v29 + 49) = v46;
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          *(_QWORD *)v29 = &off_1E426FA98;
          *((_QWORD *)v29 + 50) = 0;
          if (*(_QWORD *)(v45 + 800))
          {
            v132 = v29;
            v141 = 0;
            v142 = 0;
            {
              v113 = operator new();
              *(_QWORD *)(v113 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v113 + 24) = "VectorKitLabels";
              *(_OWORD *)(v113 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v113 = &off_1E42B5668;
              *(_QWORD *)(v113 + 8) = "VectorKitLabels";
              *(_OWORD *)(v113 + 72) = 0u;
              *(_OWORD *)(v113 + 88) = 0u;
              *(_OWORD *)(v113 + 104) = 0u;
              *(_OWORD *)(v113 + 120) = 0u;
              *(_OWORD *)(v113 + 136) = 0u;
              *(_OWORD *)(v113 + 152) = 0u;
              *(_OWORD *)(v113 + 168) = 0u;
              *(_OWORD *)(v113 + 184) = 0u;
              *(_OWORD *)(v113 + 200) = 0u;
              *(_OWORD *)(v113 + 216) = 0u;
              *(_OWORD *)(v113 + 232) = 0u;
              *(_QWORD *)(v113 + 248) = 0;
              *(_OWORD *)(v113 + 56) = 0u;
              v114 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v113 + 56), 0);
              if ((_DWORD)v114)
                geo::read_write_lock::logFailure(v114, (uint64_t)"initialization", v115);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v113 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v113 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v113;
            }
            v143 = mdm::Allocator::instance(void)::alloc;
            v144 = 0;
            {
              v117 = operator new();
              *(_QWORD *)(v117 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v117 + 24) = "VectorKitLabels";
              *(_OWORD *)(v117 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v117 = &off_1E42B5668;
              *(_QWORD *)(v117 + 8) = "VectorKitLabels";
              *(_OWORD *)(v117 + 72) = 0u;
              *(_OWORD *)(v117 + 88) = 0u;
              *(_OWORD *)(v117 + 104) = 0u;
              *(_OWORD *)(v117 + 120) = 0u;
              *(_OWORD *)(v117 + 136) = 0u;
              *(_OWORD *)(v117 + 152) = 0u;
              *(_OWORD *)(v117 + 168) = 0u;
              *(_OWORD *)(v117 + 184) = 0u;
              *(_OWORD *)(v117 + 200) = 0u;
              *(_OWORD *)(v117 + 216) = 0u;
              *(_OWORD *)(v117 + 232) = 0u;
              *(_QWORD *)(v117 + 248) = 0;
              *(_OWORD *)(v117 + 56) = 0u;
              v118 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v117 + 56), 0);
              if ((_DWORD)v118)
                geo::read_write_lock::logFailure(v118, (uint64_t)"initialization", v119);
              v120 = malloc_create_zone(0, 0);
              *(_QWORD *)(v117 + 48) = v120;
              malloc_set_zone_name(v120, "VectorKitLabels");
              *(_QWORD *)(v117 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v117;
            }
            v145 = mdm::Allocator::instance(void)::alloc;
            v146 = 0;
            v147 = 1065353216;
            for (i = *(_QWORD **)(v139 + 784); i; i = (_QWORD *)*i)
            {
              v60 = i[2];
              v148 = i + 2;
              v61 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>((uint64_t)&v141, v60, &v148);
              v63 = (uint64_t *)i[4];
              v62 = (uint64_t *)i[5];
              if (v63 != v62)
              {
                v64 = v61;
                do
                {
                  v65 = (std::__shared_weak_count *)operator new(0x98uLL);
                  v65->__shared_owners_ = 0;
                  v65->__shared_weak_owners_ = 0;
                  v65->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD60;
                  v66 = v65 + 1;
                  md::TrailJunctionRenderable::TrailJunctionRenderable((uint64_t)&v65[1], v63);
                  v67 = (std::__shared_weak_count **)v64[5];
                  v68 = v64[6];
                  if ((unint64_t)v67 >= v68)
                  {
                    v70 = v64[4];
                    v71 = ((uint64_t)v67 - v70) >> 4;
                    v72 = v71 + 1;
                    if ((unint64_t)(v71 + 1) >> 60)
                      abort();
                    v73 = v68 - v70;
                    if (v73 >> 3 > v72)
                      v72 = v73 >> 3;
                    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
                      v74 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v74 = v72;
                    if (v74)
                    {
                      v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v64[7] + 16))(v64[7], 16 * v74, 8);
                      v76 = (std::__shared_weak_count **)(v75 + 16 * v71);
                      v77 = v75 + 16 * v74;
                      if (v75)
                      {
                        *v76 = v66;
                        v76[1] = v65;
                        v65 = 0;
                      }
                    }
                    else
                    {
                      v77 = 0;
                      v76 = (std::__shared_weak_count **)(16 * v71);
                    }
                    v69 = v76 + 2;
                    v78 = (_QWORD *)v64[4];
                    v79 = (_QWORD *)v64[5];
                    if (v79 == v78)
                    {
                      v64[4] = v76;
                      v64[5] = v69;
                      v82 = v64[6];
                      v64[6] = v77;
                    }
                    else
                    {
                      do
                      {
                        v80 = *((_OWORD *)v79 - 1);
                        v79 -= 2;
                        *((_OWORD *)v76 - 1) = v80;
                        v76 -= 2;
                        *v79 = 0;
                        v79[1] = 0;
                      }
                      while (v79 != v78);
                      v79 = (_QWORD *)v64[4];
                      v81 = (_QWORD *)v64[5];
                      v64[4] = v76;
                      v64[5] = v69;
                      v82 = v64[6];
                      v64[6] = v77;
                      while (v81 != v79)
                      {
                        v83 = (std::__shared_weak_count *)*(v81 - 1);
                        if (v83)
                        {
                          v84 = (unint64_t *)&v83->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        v81 -= 2;
                      }
                    }
                    if (v79)
                      (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v64[7] + 40))(v64[7], v79, v82 - (_QWORD)v79);
                  }
                  else
                  {
                    if (v67)
                    {
                      *v67 = v66;
                      v67[1] = v65;
                      v65 = 0;
                    }
                    v69 = v67 + 2;
                  }
                  v64[5] = v69;
                  if (v65)
                  {
                    v86 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v63 = (uint64_t *)((char *)v63 + 12);
                }
                while (v63 != v62);
              }
            }
            v52 = operator new();
            v6 = v130;
            std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,geo::StdAllocator<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::unordered_map(v52, (uint64_t)&v141);
            v5 = v129;
            *(_QWORD *)(v52 + 56) = 0;
            *(_QWORD *)(v52 + 64) = 0;
            {
              v121 = operator new();
              *(_QWORD *)(v121 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v121 + 24) = "VectorKitLabels";
              *(_OWORD *)(v121 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v121 = &off_1E42B5668;
              *(_QWORD *)(v121 + 8) = "VectorKitLabels";
              *(_OWORD *)(v121 + 72) = 0u;
              *(_OWORD *)(v121 + 88) = 0u;
              *(_OWORD *)(v121 + 104) = 0u;
              *(_OWORD *)(v121 + 120) = 0u;
              *(_OWORD *)(v121 + 136) = 0u;
              *(_OWORD *)(v121 + 152) = 0u;
              *(_OWORD *)(v121 + 168) = 0u;
              *(_OWORD *)(v121 + 184) = 0u;
              *(_OWORD *)(v121 + 200) = 0u;
              *(_OWORD *)(v121 + 216) = 0u;
              *(_OWORD *)(v121 + 232) = 0u;
              *(_QWORD *)(v121 + 248) = 0;
              *(_OWORD *)(v121 + 56) = 0u;
              v122 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v121 + 56), 0);
              if ((_DWORD)v122)
                geo::read_write_lock::logFailure(v122, (uint64_t)"initialization", v123);
              v124 = malloc_create_zone(0, 0);
              *(_QWORD *)(v121 + 48) = v124;
              malloc_set_zone_name(v124, "VectorKitLabels");
              *(_QWORD *)(v121 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v121;
              v5 = v129;
              v6 = v130;
            }
            *(_QWORD *)(v52 + 72) = mdm::Allocator::instance(void)::alloc;
            *(_QWORD *)(v52 + 80) = 0;
            {
              v125 = operator new();
              *(_QWORD *)(v125 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v125 + 24) = "VectorKitLabels";
              *(_OWORD *)(v125 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v125 = &off_1E42B5668;
              *(_QWORD *)(v125 + 8) = "VectorKitLabels";
              *(_OWORD *)(v125 + 72) = 0u;
              *(_OWORD *)(v125 + 88) = 0u;
              *(_OWORD *)(v125 + 104) = 0u;
              *(_OWORD *)(v125 + 120) = 0u;
              *(_OWORD *)(v125 + 136) = 0u;
              *(_OWORD *)(v125 + 152) = 0u;
              *(_OWORD *)(v125 + 168) = 0u;
              *(_OWORD *)(v125 + 184) = 0u;
              *(_OWORD *)(v125 + 200) = 0u;
              *(_OWORD *)(v125 + 216) = 0u;
              *(_OWORD *)(v125 + 232) = 0u;
              *(_QWORD *)(v125 + 248) = 0;
              *(_OWORD *)(v125 + 56) = 0u;
              v126 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v125 + 56), 0);
              if ((_DWORD)v126)
                geo::read_write_lock::logFailure(v126, (uint64_t)"initialization", v127);
              v128 = malloc_create_zone(0, 0);
              *(_QWORD *)(v125 + 48) = v128;
              malloc_set_zone_name(v128, "VectorKitLabels");
              *(_QWORD *)(v125 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v125;
              v5 = v129;
              v6 = v130;
            }
            *(_QWORD *)(v52 + 88) = mdm::Allocator::instance(void)::alloc;
            *(_QWORD *)(v52 + 96) = 0;
            *(_DWORD *)(v52 + 104) = 1065353216;
            *(_QWORD *)(v52 + 112) = 0;
            v29 = v132;
            v55 = *((_QWORD *)v132 + 50);
            *((_QWORD *)v132 + 50) = v52;
            if (v55)
              std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v55);
            std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node((uint64_t)&v141, v144);
            v56 = v141;
            v141 = 0;
            if (v56)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143 + 40))(v143, v56, 8 * v142);
          }
          v58 = v6[1];
          v57 = (unint64_t)v6[2];
          if ((unint64_t)v58 >= v57)
          {
            v88 = *v6;
            v89 = (char *)v58 - (char *)*v6;
            v90 = v89 >> 3;
            v91 = (v89 >> 3) + 1;
            if (v91 >> 61)
              abort();
            v92 = v57 - (_QWORD)v88;
            if (v92 >> 2 > v91)
              v91 = v92 >> 2;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
            {
              if (v93 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v94 = operator new(8 * v93);
            }
            else
            {
              v94 = 0;
            }
            v95 = (char **)&v94[8 * v90];
            *v95 = v29;
            v59 = v95 + 1;
            if (v58 == v88)
            {
              v88 = v58;
            }
            else
            {
              v96 = (char *)(v58 - 1) - (char *)v88;
              if (v96 < 0x58)
                goto LABEL_167;
              if ((unint64_t)((char *)v58 - &v94[v89]) < 0x20)
                goto LABEL_167;
              v97 = (v96 >> 3) + 1;
              v98 = &v94[8 * v90 - 16];
              v99 = (__int128 *)(v58 - 2);
              v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v101 = *v99;
                *(v98 - 1) = *(v99 - 1);
                *v98 = v101;
                v98 -= 2;
                v99 -= 2;
                v100 -= 4;
              }
              while (v100);
              v95 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
              v58 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_167:
                do
                {
                  v102 = *--v58;
                  *--v95 = v102;
                }
                while (v58 != v88);
                v88 = *v6;
              }
            }
            *v6 = v95;
            v6[1] = v59;
            v6[2] = (char **)&v94[8 * v93];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v58 = v29;
            v59 = v58 + 1;
          }
          v6[1] = v59;
          v103 = v136;
          if (v136)
          {
            v104 = (unint64_t *)&v136->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v106 = v140;
          if (v140)
          {
            v107 = (unint64_t *)&v140->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v109 = v133;
          v110 = (_QWORD *)v133[1];
          if (v110)
          {
            do
            {
              v111 = v110;
              v110 = (_QWORD *)*v110;
            }
            while (v110);
          }
          else
          {
            do
            {
              v111 = (_QWORD *)v109[2];
              v112 = *v111 == (_QWORD)v109;
              v109 = v111;
            }
            while (!v112);
          }
          v18 = v111;
        }
        while (v111 != (_QWORD *)(a2 + 184));
      }
    }
  }
}

void sub_19FB7238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  v28 = *(void **)v26;
  if (*(_QWORD *)v26)
  {
    *(_QWORD *)(v26 + 8) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB726D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

void std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  BOOL v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  int64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;

void std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return;
    case 2:
      v6 = *(a2 - 1);
      v20 = *a1;
      v21 = v6;
      v7 = *(_QWORD *)(a3 + 24);
      if (!v7)
        goto LABEL_22;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v21, &v20))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      break;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      break;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 != a2)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v14 = *v10;
          v20 = *v9;
          v21 = v14;
          v15 = *(_QWORD *)(a3 + 24);
          if (!v15)
            break;
          if (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v21, &v20))
            goto LABEL_25;
          v16 = *v10;
          v17 = v11;
          do
          {
            *(uint64_t *)((char *)a1 + v17 + 24) = *(uint64_t *)((char *)a1 + v17 + 16);
            if (v17 == -16)
            {
              v13 = a1;
              goto LABEL_8;
            }
            v20 = *(uint64_t *)((char *)a1 + v17 + 8);
            v21 = v16;
            v18 = *(_QWORD *)(a3 + 24);
            if (!v18)
              goto LABEL_22;
            v17 -= 8;
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v21, &v20) & 1) != 0);
          v13 = (uint64_t *)((char *)a1 + v17 + 24);
LABEL_8:
          *v13 = v16;
          if (++v12 != 8)
          {
LABEL_25:
            v9 = v10;
            v11 += 8;
            if (++v10 != a2)
              continue;
          }
          return;
        }
LABEL_22:
        std::__throw_bad_function_call[abi:nn180100]();
        geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(v19);
      }
      break;
  }
}

void geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 408 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19FB73490(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::PolygonTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F320;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F320;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB738C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB74D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F2E0;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19FB75A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB75C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::MapTileDataRenderable<md::RasterTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB76DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::MapTileDataRenderable<md::VenueTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  int8x8_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t ***v31;
  uint64_t **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  size_t v36;
  const void *v37;
  uint64_t *v38;
  uint64_t *v39;
  size_t v40;
  const void *v41;
  char *v42;
  char *v43;
  int64_t v44;
  void (***v45)(uint64_t);
  _QWORD *v46;
  void *v47;
  unint64_t *v48;
  unint64_t *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *i;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  char *v59;
  _BYTE *v60;
  int64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void (***v64)(_QWORD);
  uint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  char *v77;
  char *v78;
  void *__p[2];
  char v80;
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_129;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_129;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_129;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_129;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_129;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_129;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_129;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_129;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL || !*(_QWORD *)(v24 + 32))
    goto LABEL_129;
  v74 = *(_QWORD *)(v24 + 32);
  (*(void (**)(unint64_t *))(*a1 + 160))(a1);
  v25 = (unint64_t *)a1[22];
  if (v25 == a1 + 23)
    goto LABEL_102;
  while (2)
  {
    v26 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v26)
      goto LABEL_96;
    v27 = v25[4];
    v28 = *(_QWORD *)(v27 + 120);
    v29 = (uint8x8_t)vcnt_s8(v26);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = *(_QWORD *)(v27 + 120);
      if (v28 >= *(_QWORD *)&v26)
        v30 = v28 % *(_QWORD *)&v26;
    }
    else
    {
      v30 = (*(_QWORD *)&v26 - 1) & v28;
    }
    v31 = *(uint64_t ****)(a1[11] + 8 * v30);
    if (!v31)
      goto LABEL_96;
    v32 = *v31;
    if (!*v31)
      goto LABEL_96;
    if (v29.u32[0] < 2uLL)
    {
      v33 = *(_QWORD *)&v26 - 1;
      while (1)
      {
        v38 = v32[1];
        if (v38 == (uint64_t *)v28)
        {
          if (*((unsigned __int8 *)v32 + 16) == *(unsigned __int8 *)(v27 + 16)
            && *((unsigned __int16 *)v32 + 12) == *(unsigned __int16 *)(v27 + 24)
            && v32[12] == *(uint64_t **)(v27 + 96))
          {
            v39 = v32[4];
            v40 = (char *)v32[5] - (char *)v39;
            v41 = *(const void **)(v27 + 32);
            if (v40 == *(_QWORD *)(v27 + 40) - (_QWORD)v41 && !memcmp(v39, v41, v40))
              goto LABEL_80;
          }
        }
        else if (((unint64_t)v38 & v33) != v30)
        {
          goto LABEL_96;
        }
        v32 = (uint64_t **)*v32;
        if (!v32)
          goto LABEL_96;
      }
    }
    while (2)
    {
      v34 = (unint64_t)v32[1];
      if (v34 != v28)
      {
        if (v34 >= *(_QWORD *)&v26)
          v34 %= *(_QWORD *)&v26;
        if (v34 != v30)
          goto LABEL_96;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v32 + 16) != *(unsigned __int8 *)(v27 + 16)
        || *((unsigned __int16 *)v32 + 12) != *(unsigned __int16 *)(v27 + 24)
        || v32[12] != *(uint64_t **)(v27 + 96)
        || (v35 = v32[4],
            v36 = (char *)v32[5] - (char *)v35,
            v37 = *(const void **)(v27 + 32),
            v36 != *(_QWORD *)(v27 + 40) - (_QWORD)v37)
        || memcmp(v35, v37, v36))
      {
LABEL_62:
        v32 = (uint64_t **)*v32;
        if (!v32)
          goto LABEL_96;
        continue;
      }
      break;
    }
LABEL_80:
    v43 = (char *)a1[34];
    v42 = (char *)a1[35];
    if (v43 != v42)
    {
      while (*(uint64_t **)v43 != v32[16])
      {
        v43 += 8;
        if (v43 == v42)
        {
          v43 = (char *)a1[35];
          break;
        }
      }
    }
    v44 = v42 - (v43 + 8);
    if (v42 != v43 + 8)
      memmove(v43, v43 + 8, v42 - (v43 + 8));
    a1[35] = (unint64_t)&v43[v44];
    v45 = (void (***)(uint64_t))v32[16];
    if (v45 && a1[30])
    {
      (**v45)((uint64_t)v32[16]);
      *v45 = (void (**)(uint64_t))a1[33];
      a1[33] = (unint64_t)v45;
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 11, v32);
    v46 = __p[0];
    if (__p[0])
    {
      if (v80)
      {
        if (*((_BYTE *)__p[0] + 112))
          *((_BYTE *)__p[0] + 112) = 0;
        v47 = (void *)v46[4];
        if (v47 != (void *)v46[6])
          free(v47);
      }
      operator delete(v46);
    }
LABEL_96:
    v48 = (unint64_t *)v25[1];
    if (v48)
    {
      do
      {
        v49 = v48;
        v48 = (unint64_t *)*v48;
      }
      while (v48);
    }
    else
    {
      do
      {
        v49 = (unint64_t *)v25[2];
        v50 = *v49 == (_QWORD)v25;
        v25 = v49;
      }
      while (!v50);
    }
    v25 = v49;
    if (v49 != a1 + 23)
      continue;
    break;
  }
LABEL_102:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v51 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v51 != i; ++v51)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v74, *v51);
  }
  v53 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v74);
  v54 = (char *)a1[35];
  v77 = v53;
  v78 = v54;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v76 = *(_OWORD *)__p;
    v55 = (char *)a1[34];
LABEL_107:
    while (v55 != v53)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v55) & 1) == 0)
      {
        v56 = v53 - 8;
        while (v56 != v55)
        {
          v53 = v56;
          v57 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v56);
          v56 = v53 - 8;
          if (v57)
          {
            v58 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v53;
            v55 += 8;
            *(_QWORD *)v53 = v58;
            goto LABEL_107;
          }
        }
        v53 = v55;
        break;
      }
      v55 += 8;
    }
    v75[0] = a1[34];
    v75[1] = v53;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v77);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v76);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v75);
    v53 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v74);
    v54 = (char *)a1[35];
    v77 = v53;
    v78 = v54;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v53, v54, (v54 - v53) >> 3);
  v59 = v77;
  if (v77 != v78)
  {
    v60 = (_BYTE *)a1[35];
    v61 = v60 - v78;
    if (v60 != v78)
      memmove(v77, v78, v60 - v78);
    a1[35] = (unint64_t)&v59[v61];
  }
  v63 = (_QWORD *)a1[37];
  v62 = (_QWORD *)a1[38];
  if (v62 != v63)
  {
    do
    {
      v64 = (void (***)(_QWORD))*v63;
      if (*v63 && a1[30])
      {
        (**v64)(*v63);
        *v64 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v64;
      }
      ++v63;
    }
    while (v63 != v62);
    v62 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v62;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_129:
  v65 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v66 = (unint64_t *)a1[10];
  if (v66)
  {
    v67 = *v65;
    v68 = (uint64_t *)v65[1];
    if (v66 == a1 + 7)
    {
      v82 = v81;
      (*(void (**)(unint64_t *, _BYTE *))(*v66 + 24))(v66, v81);
    }
    else
    {
      v82 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v66 + 16))(v66);
    }
    v69 = 126 - 2 * __clz(((uint64_t)v68 - v67) >> 3);
    if (v68 == (uint64_t *)v67)
      v70 = 0;
    else
      v70 = v69;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **,false>(v67, v68, (uint64_t)v81, v70, 1);
    v71 = v82;
    if (v82 == v81)
    {
      v72 = 4;
      v71 = v81;
LABEL_140:
      (*(void (**)(void))(*v71 + 8 * v72))();
    }
    else if (v82)
    {
      v72 = 5;
      goto LABEL_140;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v65, a2);
}

void sub_19FB78248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, uint64_t **a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  uint64_t v6;
  uint64_t **v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t **v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned __int8 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  float *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  double v64;
  uint64_t v65;
  int v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  md::LayoutContext *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t **v122;
  uint64_t **v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int16 v130[2];
  uint64_t v131;
  float *v132;
  std::__shared_weak_count *v133;
  _BYTE v134[80];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  __int128 v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149[12];
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[80];
  __int128 v154;
  __int128 v155;
  __int128 v156;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v5 = this;
    v6 = a2;
    v7 = a3;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v127 = *(uint64_t **)(v15 + 32);
          if (v127)
          {
            v16 = *(_QWORD *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (uint64_t *)operator new(8 * v16);
              *v7 = v18;
              v7[1] = v18;
              v7[2] = &v18[v17];
            }
            v19 = *(_QWORD **)(v6 + 176);
            v126 = (_QWORD *)(v6 + 184);
            if (v19 != (_QWORD *)(v6 + 184))
            {
              v122 = (uint64_t **)(v6 + 232);
              __asm { FMOV            V0.4S, #1.0 }
              v125 = _Q0;
              v123 = v7;
              v124 = v6;
              do
              {
                v26 = v19[4];
                v25 = (std::__shared_weak_count *)v19[5];
                v132 = (float *)v26;
                v133 = v25;
                if (v25)
                {
                  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
                  do
                    v28 = __ldxr(p_shared_owners);
                  while (__stxr(v28 + 1, p_shared_owners));
                }
                v130[0] = *(_WORD *)(v26 + 168);
                v131 = *(_QWORD *)(v26 + 172);
                v29 = *(double *)(v26 + 600);
                v30 = *(double *)(v26 + 608);
                md::LayoutContext::frameState(v5);
                v32 = *(unsigned __int8 *)(v31 + 128);
                md::GeometryContext::transformConstantData((double *)&v128, v127, (unsigned __int8 *)v130, v32, v29, v30);
                v33 = *((_BYTE *)v19 + 48);
                v34 = *(_QWORD *)(v6 + 264);
                if (!v34)
                {
                  v35 = (uint64_t *)malloc_type_malloc(*(_QWORD *)(v6 + 256), 0x160B39uLL);
                  v36 = v35;
                  v37 = v122;
                  while (1)
                  {
                    v38 = *v37;
                    v39 = v37;
                    if (!*v37)
                      break;
                    while (1)
                    {
                      v37 = (uint64_t **)v38;
                      v40 = v38[4];
                      if ((unint64_t)v35 < v40)
                        break;
                      if (v40 >= (unint64_t)v35)
                        goto LABEL_43;
                      v38 = v37[1];
                      if (!v38)
                      {
                        v39 = v37 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v41 = (uint64_t *)operator new(0x28uLL);
                  v41[4] = (uint64_t)v36;
                  *v41 = 0;
                  v41[1] = 0;
                  v41[2] = (uint64_t)v37;
                  *v39 = v41;
                  v42 = **(_QWORD **)(v6 + 224);
                  if (v42)
                  {
                    *(_QWORD *)(v6 + 224) = v42;
                    v41 = *v39;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v41);
                  ++*(_QWORD *)(v6 + 240);
LABEL_43:
                  v34 = *(_QWORD *)(v6 + 264);
                  v43 = 768 * *(_QWORD *)(v6 + 248) - 768;
                  if ((v43 & 0x8000000000000000) == 0)
                  {
                    v44 = (uint64_t *)((char *)v36 + v43);
                    do
                    {
                      *v44 = v34;
                      v45 = v44 - 96;
                      v34 = (uint64_t)v44;
                      v44 = v45;
                    }
                    while (v45 >= v36);
                    v34 = (uint64_t)(v45 + 96);
                  }
                  *(_QWORD *)(v6 + 264) = v34;
                  v26 = (uint64_t)v132;
                  v25 = v133;
                }
                *(_QWORD *)(v6 + 264) = *(_QWORD *)v34;
                if (v25)
                {
                  v46 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v48 = v32 - 1;
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(v34, v26, (uint64_t)v25, v33, (v32 - 1) < 3u, &v128);
                if (v25)
                {
                  v49 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                *(_QWORD *)v34 = &off_1E426F380;
                v52 = v132;
                v51 = v133;
                *(_QWORD *)(v34 + 384) = v132;
                *(_QWORD *)(v34 + 392) = v51;
                if (v51)
                {
                  v53 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                }
                *(_QWORD *)v34 = &off_1E426F898;
                *(_OWORD *)(v34 + 400) = v125;
                *(_QWORD *)(v34 + 416) = &off_1E42B49F0;
                *(_QWORD *)(v34 + 424) = 0;
                *(_QWORD *)(v34 + 440) = &off_1E42B49F0;
                *(_QWORD *)(v34 + 448) = 0;
                v55 = operator new(0xE8uLL);
                v55[1] = 0;
                v55[2] = 0;
                *v55 = &off_1E42E2278;
                v56 = ggl::BufferData::BufferData((uint64_t)(v55 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
                v55[28] = ggl::Tile::View::reflection(void)::reflection;
                v55[3] = &off_1E42B97B0;
                *(_QWORD *)(v34 + 464) = v56;
                *(_QWORD *)(v34 + 472) = v55;
                v57 = operator new(0xE8uLL);
                v57[1] = 0;
                v57[2] = 0;
                *v57 = &off_1E42E2278;
                v58 = ggl::BufferData::BufferData((uint64_t)(v57 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
                v57[28] = ggl::Tile::View::reflection(void)::reflection;
                v57[3] = &off_1E42B97B0;
                *(_QWORD *)(v34 + 480) = v58;
                *(_QWORD *)(v34 + 488) = v57;
                *(_QWORD *)(v34 + 496) = 0;
                *(_QWORD *)(v34 + 504) = 0;
                gm::inverse<double>((double *)v153, (double *)(v34 + 88));
                v59 = *(_OWORD *)&v153[16];
                *(_OWORD *)(v34 + 512) = *(_OWORD *)v153;
                *(_OWORD *)(v34 + 528) = v59;
                v60 = *(_OWORD *)&v153[48];
                *(_OWORD *)(v34 + 544) = *(_OWORD *)&v153[32];
                *(_OWORD *)(v34 + 560) = v60;
                v61 = v154;
                *(_OWORD *)(v34 + 576) = *(_OWORD *)&v153[64];
                *(_OWORD *)(v34 + 592) = v61;
                v62 = v156;
                *(_OWORD *)(v34 + 608) = v155;
                *(_OWORD *)(v34 + 624) = v62;
                v63 = 1 << *(_BYTE *)(v34 + 25);
                v64 = 1.0 / (double)v63;
                if (v48 > 2u)
                {
                  v85 = (double)*(int *)(v34 + 32);
                  v86 = (v52[230] + v85) * v64;
                  v87 = (double)(v63 + ~*(_DWORD *)(v34 + 28));
                  v88 = (v87 + v52[231]) * v64;
                  v89 = v52[232] + v85;
                  v90 = v52[233] + v87;
                  *((_QWORD *)&v135 + 1) = 0;
                  memset(&v134[8], 0, 72);
                  *(double *)v134 = -(v86 - v89 * v64);
                  *(double *)&v134[40] = -(v88 - v90 * v64);
                  *(double *)&v135 = *(double *)v134;
                  *(double *)&v136 = v86;
                  *((double *)&v136 + 1) = v88;
                  v82 = 0uLL;
                  v84 = xmmword_19FFB33A0;
                  v83 = 0uLL;
                  v81 = 0uLL;
                }
                else
                {
                  v65 = *(int *)(v34 + 32);
                  v66 = v63 + ~*(_DWORD *)(v34 + 28);
                  v67 = ((double)v66 + v52[231]) * v64;
                  v68 = (v52[232] + (double)v65) * v64;
                  v69 = v52[233] + (double)v66;
                  *(double *)v153 = (v52[230] + (double)v65) * v64;
                  *(double *)&v153[8] = v67;
                  *(double *)&v153[16] = v68;
                  *(double *)&v153[24] = v69 * v64;
                  gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v138, (double *)v153, 0.0, 0.0);
                  *((_QWORD *)&v154 + 1) = 0;
                  memset(&v153[8], 0, 72);
                  *((_QWORD *)&v156 + 1) = 0x3FF0000000000000;
                  v155 = v144;
                  *(double *)&v156 = v145;
                  *(double *)v153 = v146 - *(double *)&v144;
                  *(double *)&v153[40] = v147 - *((double *)&v144 + 1);
                  *(double *)&v154 = v148 - v145;
                  v70 = v141;
                  v71 = v142;
                  v72 = v70 + v70;
                  v73 = (v70 + v70) * v70;
                  v74 = (v71 + v71) * v71;
                  v75 = v140;
                  v76 = v75 + v75;
                  v77 = (v75 + v75) * v141;
                  v78 = (v71 + v71) * v143;
                  v79 = v142 * (v75 + v75);
                  v80 = 1.0 - (v75 + v75) * v75;
                  v149[0] = 1.0 - (v73 + v74);
                  v149[1] = v78 + v77;
                  v149[4] = v77 - v78;
                  v149[5] = v80 - v74;
                  v149[8] = v143 * v72 + v79;
                  v149[9] = v72 * v142 - v143 * v76;
                  v149[2] = v79 - v143 * v72;
                  v149[6] = v143 * v76 + v72 * v142;
                  v149[10] = v80 - v73;
                  v149[3] = 0.0;
                  v149[7] = 0.0;
                  v149[11] = 0.0;
                  v150 = v138;
                  v151 = v139;
                  v152 = 0x3FF0000000000000;
                  gm::operator*<double,4,4,4>((double *)v134, v149, (double *)v153);
                  v81 = *(_OWORD *)&v134[16];
                  v83 = *(_OWORD *)&v134[48];
                  v82 = *(_OWORD *)&v134[64];
                  v84 = v137;
                }
                v91 = *(_OWORD *)&v134[32];
                *(_OWORD *)(v34 + 640) = *(_OWORD *)v134;
                *(_OWORD *)(v34 + 656) = v81;
                *(_OWORD *)(v34 + 672) = v91;
                *(_OWORD *)(v34 + 688) = v83;
                v92 = v135;
                v93 = v136;
                *(_OWORD *)(v34 + 704) = v82;
                *(_OWORD *)(v34 + 720) = v92;
                *(_OWORD *)(v34 + 736) = v93;
                *(_OWORD *)(v34 + 752) = v84;
                v95 = v7[1];
                v94 = (unint64_t)v7[2];
                v6 = v124;
                if ((unint64_t)v95 < v94)
                {
                  *v95 = v34;
                  v96 = v95 + 1;
                  goto LABEL_86;
                }
                v97 = v5;
                v98 = *v7;
                v99 = (char *)v95 - (char *)*v7;
                v100 = v99 >> 3;
                v101 = (v99 >> 3) + 1;
                if (v101 >> 61)
                  abort();
                v102 = v94 - (_QWORD)v98;
                if (v102 >> 2 > v101)
                  v101 = v102 >> 2;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
                  v103 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  if (v103 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v104 = operator new(8 * v103);
                }
                else
                {
                  v104 = 0;
                }
                v105 = (uint64_t *)&v104[8 * v100];
                *v105 = v34;
                v96 = v105 + 1;
                if (v95 == v98)
                {
                  v98 = v95;
                  v5 = v97;
                  v6 = v124;
                  v7 = v123;
                  goto LABEL_84;
                }
                v106 = (char *)(v95 - 1) - (char *)v98;
                if (v106 >= 0x58)
                {
                  v107 = (char *)v95 - &v104[v99];
                  v5 = v97;
                  v6 = v124;
                  v7 = v123;
                  if (v107 >= 0x20)
                  {
                    v108 = (v106 >> 3) + 1;
                    v109 = &v104[8 * v100 - 16];
                    v110 = v95 - 2;
                    v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v112 = *(_OWORD *)v110;
                      *(v109 - 1) = *((_OWORD *)v110 - 1);
                      *v109 = v112;
                      v109 -= 2;
                      v110 -= 4;
                      v111 -= 4;
                    }
                    while (v111);
                    v105 -= v108 & 0x3FFFFFFFFFFFFFFCLL;
                    v95 -= v108 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_84;
                  }
                }
                else
                {
                  v5 = v97;
                  v6 = v124;
                  v7 = v123;
                }
                do
                {
                  v113 = *--v95;
                  *--v105 = v113;
                }
                while (v95 != v98);
                v98 = *v7;
LABEL_84:
                *v7 = v105;
                v7[1] = v96;
                v7[2] = (uint64_t *)&v104[8 * v103];
                if (v98)
                  operator delete(v98);
LABEL_86:
                v7[1] = v96;
                v114 = v129;
                if (v129)
                {
                  v115 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v117 = v133;
                if (!v133)
                  goto LABEL_95;
                v118 = (unint64_t *)&v133->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                  v120 = (_QWORD *)v19[1];
                  if (!v120)
                  {
                    do
                    {
LABEL_99:
                      v121 = (_QWORD *)v19[2];
                      _ZF = *v121 == (_QWORD)v19;
                      v19 = v121;
                    }
                    while (!_ZF);
                    goto LABEL_29;
                  }
                }
                else
                {
LABEL_95:
                  v120 = (_QWORD *)v19[1];
                  if (!v120)
                    goto LABEL_99;
                }
                do
                {
                  v121 = v120;
                  v120 = (_QWORD *)*v120;
                }
                while (v120);
LABEL_29:
                v19 = v121;
              }
              while (v121 != v126);
            }
          }
        }
      }
    }
  }
}

void sub_19FB7926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v30;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  v30 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void sub_19FB79398()
{
  JUMPOUT(0x19FB79370);
}

void sub_19FB793A0()
{
  JUMPOUT(0x19FB79370);
}

uint64_t *md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB79554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB7AA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F340;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19FB7B69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB7B8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::MapTileDataRenderable<md::TrafficTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F340;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F340;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB7CE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F300;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19FB7DAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB7DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::MapTileDataRenderable<md::OverlayTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F300;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

_BYTE *md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB7F2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  uint64_t v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  md::LayoutContext *v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char **v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v5 = this;
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v79 = *(uint64_t **)(v15 + 32);
          if (v79)
          {
            v16 = *(_QWORD *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = *(_QWORD **)(v6 + 176);
            v78 = (_QWORD *)(v6 + 184);
            if (v19 != (_QWORD *)(v6 + 184))
            {
              v76 = (uint64_t **)(v6 + 232);
              v77 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(v5);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v79, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = *(char **)(v6 + 264);
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(*(_QWORD *)(v6 + 256), 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = **(_QWORD **)(v6 + 224);
                  if (v37)
                  {
                    *(_QWORD *)(v6 + 224) = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v36);
                  ++*(_QWORD *)(v6 + 240);
LABEL_43:
                  v29 = *(char **)(v6 + 264);
                  v38 = 424 * *(_QWORD *)(v6 + 248) - 424;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 424;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 424;
                  }
                  *(_QWORD *)(v6 + 264) = v29;
                  v21 = v84;
                  v20 = v85;
                }
                *(_QWORD *)(v6 + 264) = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F360;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                *(_QWORD *)v29 = &off_1E426F878;
                *((_QWORD *)v29 + 50) = &off_1E42B49F0;
                *((_QWORD *)v29 + 51) = 0;
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 >= v48)
                {
                  v51 = v5;
                  v52 = *a3;
                  v53 = (char *)v49 - (char *)*a3;
                  v54 = v53 >> 3;
                  v55 = (v53 >> 3) + 1;
                  if (v55 >> 61)
                    abort();
                  v56 = v48 - (_QWORD)v52;
                  if (v56 >> 2 > v55)
                    v55 = v56 >> 2;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                    v57 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                  {
                    if (v57 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v58 = operator new(8 * v57);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = (char **)&v58[8 * v54];
                  *v59 = v29;
                  v50 = v59 + 1;
                  if (v49 == v52)
                  {
                    v52 = v49;
                  }
                  else
                  {
                    v60 = (char *)(v49 - 1) - (char *)v52;
                    if (v60 < 0x58)
                      goto LABEL_106;
                    if ((unint64_t)((char *)v49 - &v58[v53]) < 0x20)
                      goto LABEL_106;
                    v61 = (v60 >> 3) + 1;
                    v62 = &v58[8 * v54 - 16];
                    v63 = (__int128 *)(v49 - 2);
                    v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v65 = *v63;
                      *(v62 - 1) = *(v63 - 1);
                      *v62 = v65;
                      v62 -= 2;
                      v63 -= 2;
                      v64 -= 4;
                    }
                    while (v64);
                    v59 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                    v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_106:
                      do
                      {
                        v66 = *--v49;
                        *--v59 = v66;
                      }
                      while (v49 != v52);
                      v52 = *a3;
                    }
                  }
                  *a3 = v59;
                  a3[1] = v50;
                  a3[2] = (char **)&v58[8 * v57];
                  if (v52)
                    operator delete(v52);
                  v5 = v51;
                  v6 = v77;
                }
                else
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                }
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v78);
            }
          }
        }
      }
    }
  }
}

void sub_19FB7FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB80184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB823C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F3C0;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19FB83034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB8325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::MapTileDataRenderable<md::DaVinciTrafficTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  uint64_t v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  int v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int16 v64[2];
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _QWORD v68[2];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v16 = *(uint64_t **)(v15 + 32);
          if (v16)
          {
            v17 = *(_QWORD *)(a2 + 192);
            v60 = *(uint64_t **)(v15 + 32);
            if (v17)
            {
              if (v17 >> 61)
                abort();
              v18 = 8 * v17;
              v19 = (char *)operator new(8 * v17);
              *a3 = v19;
              a3[1] = v19;
              a3[2] = &v19[v18];
              v16 = v60;
            }
            v20 = *(_QWORD **)(v6 + 176);
            v61 = (_QWORD *)(v6 + 184);
            if (v20 != (_QWORD *)(v6 + 184))
            {
              v58 = (uint64_t **)(v6 + 224);
              v59 = v6;
              do
              {
                v21 = v20[4];
                v22 = (std::__shared_weak_count *)v20[5];
                v66 = v21;
                v67 = v22;
                if (v22)
                {
                  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
                  do
                    v24 = __ldxr(p_shared_owners);
                  while (__stxr(v24 + 1, p_shared_owners));
                }
                v64[0] = *(_WORD *)(v21 + 168);
                v65 = *(_QWORD *)(v21 + 172);
                v25 = *(double *)(v21 + 600);
                v26 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v28 = *(unsigned __int8 *)(v27 + 128);
                md::GeometryContext::transformConstantData((double *)&v62, v16, (unsigned __int8 *)v64, v28, v25, v26);
                v29 = *((_BYTE *)v20 + 48);
                v30 = *(_QWORD **)(v6 + 264);
                if (!v30)
                {
                  geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab(v58);
                  v30 = *(_QWORD **)(v6 + 264);
                }
                *(_QWORD *)(v6 + 264) = *v30;
                v68[0] = 0;
                v68[1] = 0;
                md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable((uint64_t)v30, &v66, v29, (v28 - 1) < 3u, &v62, v68);
                *v30 = &off_1E426F858;
                v32 = (_QWORD *)a3[1];
                v31 = a3[2];
                if ((unint64_t)v32 >= v31)
                {
                  v34 = (_BYTE *)*a3;
                  v35 = (uint64_t)v32 - *a3;
                  v36 = v35 >> 3;
                  v37 = (v35 >> 3) + 1;
                  if (v37 >> 61)
                    abort();
                  v38 = v31 - (_QWORD)v34;
                  if (v38 >> 2 > v37)
                    v37 = v38 >> 2;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                  {
                    if (v39 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v40 = operator new(8 * v39);
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v41 = &v40[8 * v36];
                  *v41 = v30;
                  v33 = v41 + 1;
                  if (v32 == (_QWORD *)v34)
                  {
                    v34 = v32;
                  }
                  else
                  {
                    v42 = (char *)(v32 - 1) - v34;
                    if (v42 < 0x58)
                      goto LABEL_81;
                    if ((unint64_t)((char *)v32 - &v40[v35]) < 0x20)
                      goto LABEL_81;
                    v43 = (v42 >> 3) + 1;
                    v44 = &v40[8 * v36 - 16];
                    v45 = (__int128 *)(v32 - 2);
                    v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v47 = *v45;
                      *(v44 - 1) = *(v45 - 1);
                      *v44 = v47;
                      v44 -= 2;
                      v45 -= 2;
                      v46 -= 4;
                    }
                    while (v46);
                    v41 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
                    v32 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_81:
                      do
                      {
                        v48 = *--v32;
                        *--v41 = v48;
                      }
                      while (v32 != (_QWORD *)v34);
                      v34 = (_BYTE *)*a3;
                    }
                  }
                  *a3 = v41;
                  a3[1] = v33;
                  a3[2] = &v40[8 * v39];
                  if (v34)
                    operator delete(v34);
                  v6 = v59;
                  v16 = v60;
                }
                else
                {
                  *v32 = v30;
                  v33 = v32 + 1;
                }
                a3[1] = v33;
                v49 = v63;
                if (v63)
                {
                  v50 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v52 = v67;
                if (!v67)
                  goto LABEL_68;
                v53 = (unint64_t *)&v67->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                  v55 = (_QWORD *)v20[1];
                  if (!v55)
                  {
                    do
                    {
LABEL_72:
                      v56 = (_QWORD *)v20[2];
                      v57 = *v56 == (_QWORD)v20;
                      v20 = v56;
                    }
                    while (!v57);
                    goto LABEL_29;
                  }
                }
                else
                {
LABEL_68:
                  v55 = (_QWORD *)v20[1];
                  if (!v55)
                    goto LABEL_72;
                }
                do
                {
                  v56 = v55;
                  v55 = (_QWORD *)*v55;
                }
                while (v55);
LABEL_29:
                v20 = v56;
              }
              while (v56 != v61);
            }
          }
        }
      }
    }
  }
}

void sub_19FB8451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(a1 + 272);
  v1 = *(uint64_t **)(a1 + 280);
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB8471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::useNewRenderableCollector()
{
  return 0;
}

BOOL md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t **i;
  _BOOL8 v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = *(_QWORD *)(a2 + 384);
  v3 = *(std::__shared_weak_count **)(a2 + 392);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(unsigned __int8 *)(a2 + 48);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = v3;
    for (i = *(uint64_t ***)(a1 + 136); i; i = (uint64_t **)*i)
    {
LABEL_13:
      v12 = *((unsigned __int8 *)i + 48);
      v13 = *((char *)i + 48) > (char)v7;
      v14 = (unint64_t)i[4];
      if (v7 == v12)
        v13 = v2 < v14;
      if (!v13)
      {
        v15 = v14 < v2;
        if (v7 == v12)
          v16 = v15;
        else
          v16 = (char)v12 < (char)v7;
        if (!v16)
        {
          v11 = 1;
          if (v9)
            goto LABEL_22;
          goto LABEL_28;
        }
        ++i;
      }
    }
  }
  else
  {
    v9 = 0;
    v7 = *(unsigned __int8 *)(a2 + 48);
    i = *(uint64_t ***)(a1 + 136);
    if (i)
      goto LABEL_13;
  }
  v11 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(a1 + 88), (unsigned __int8 *)(v2 + 16)) != 0;
  if (!v9)
    goto LABEL_28;
LABEL_22:
  v17 = (unint64_t *)&v9->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
LABEL_28:
    if (!v3)
      return v11;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v3)
      return v11;
  }
  v20 = (unint64_t *)&v3->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v11;
}

void md::ElevatedPolygonRenderable::~ElevatedPolygonRenderable(md::ElevatedPolygonRenderable *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F8E8;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &off_1E426F3E0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F8E8;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &off_1E426F3E0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MapTileDataRenderable<md::ElevatedStrokeTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F3E0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::~PairedMapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F8E8;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &off_1E426F3E0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E426F8E8;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)this = &off_1E426F3E0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<HillshadeRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB861C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<HillshadeRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  uint64_t v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  md::LayoutContext *v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char **v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v5 = this;
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v79 = *(uint64_t **)(v15 + 32);
          if (v79)
          {
            v16 = *(_QWORD *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = *(_QWORD **)(v6 + 176);
            v78 = (_QWORD *)(v6 + 184);
            if (v19 != (_QWORD *)(v6 + 184))
            {
              v76 = (uint64_t **)(v6 + 232);
              v77 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(v5);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v79, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = *(char **)(v6 + 264);
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(*(_QWORD *)(v6 + 256), 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = **(_QWORD **)(v6 + 224);
                  if (v37)
                  {
                    *(_QWORD *)(v6 + 224) = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v36);
                  ++*(_QWORD *)(v6 + 240);
LABEL_43:
                  v29 = *(char **)(v6 + 264);
                  v38 = 400 * *(_QWORD *)(v6 + 248) - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  *(_QWORD *)(v6 + 264) = v29;
                  v21 = v84;
                  v20 = v85;
                }
                *(_QWORD *)(v6 + 264) = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F3A0;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                *(_QWORD *)v29 = &off_1E426EDE0;
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 >= v48)
                {
                  v51 = v5;
                  v52 = *a3;
                  v53 = (char *)v49 - (char *)*a3;
                  v54 = v53 >> 3;
                  v55 = (v53 >> 3) + 1;
                  if (v55 >> 61)
                    abort();
                  v56 = v48 - (_QWORD)v52;
                  if (v56 >> 2 > v55)
                    v55 = v56 >> 2;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                    v57 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                  {
                    if (v57 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v58 = operator new(8 * v57);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v59 = (char **)&v58[8 * v54];
                  *v59 = v29;
                  v50 = v59 + 1;
                  if (v49 == v52)
                  {
                    v52 = v49;
                  }
                  else
                  {
                    v60 = (char *)(v49 - 1) - (char *)v52;
                    if (v60 < 0x58)
                      goto LABEL_106;
                    if ((unint64_t)((char *)v49 - &v58[v53]) < 0x20)
                      goto LABEL_106;
                    v61 = (v60 >> 3) + 1;
                    v62 = &v58[8 * v54 - 16];
                    v63 = (__int128 *)(v49 - 2);
                    v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v65 = *v63;
                      *(v62 - 1) = *(v63 - 1);
                      *v62 = v65;
                      v62 -= 2;
                      v63 -= 2;
                      v64 -= 4;
                    }
                    while (v64);
                    v59 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                    v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_106:
                      do
                      {
                        v66 = *--v49;
                        *--v59 = v66;
                      }
                      while (v49 != v52);
                      v52 = *a3;
                    }
                  }
                  *a3 = v59;
                  a3[1] = v50;
                  a3[2] = (char **)&v58[8 * v57];
                  if (v52)
                    operator delete(v52);
                  v5 = v51;
                  v6 = v77;
                }
                else
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                }
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v78);
            }
          }
        }
      }
    }
  }
}

void sub_19FB86E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<HillshadeRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB87064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v22, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v21 = *v11;
    v22 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
    {
LABEL_23:
      std::__throw_bad_function_call[abi:nn180100]();
      md::CartographicTiledRenderLayer<md::FlyoverRenderable>::~CartographicTiledRenderLayer();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v22, &v21))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v21 = *(uint64_t *)((char *)a1 + v19 + 8);
        v22 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22, &v21) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

_BYTE *md::CartographicTiledRenderLayer<md::FlyoverRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::FlyoverRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19FB8867C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::determineZRangeMapData(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  uint64_t v26;

  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    v2 = *(unsigned __int16 **)(result + 320);
    v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3)
      goto LABEL_33;
    do
    {
      v4 = *v2;
      v5 = *a2;
      if ((v6 & 1) == 0)
      {
        v22 = a2;
        v23 = result;
        v21 = v2;
        v24 = v3;
        v25 = *v2;
        v26 = *a2;
        v5 = v26;
        v4 = v25;
        v2 = v21;
        a2 = v22;
        v20 = v19;
        result = v23;
        v3 = v24;
        if (v20)
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
          v5 = v26;
          v4 = v25;
          result = v23;
          v3 = v24;
          v2 = v21;
          a2 = v22;
        }
      }
      v7 = *(unsigned __int16 **)(v5 + 48);
      v8 = *(unsigned __int16 **)(v5 + 56);
      if (v7 == v8)
        goto LABEL_16;
      v9 = v7;
      while (*v9 != v4)
      {
        v9 += 16;
        if (v9 == v8)
          goto LABEL_16;
      }
      if (v9 == v8)
      {
LABEL_16:
        v10 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v7 != v4)
        {
          v7 += 16;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        v10 = (uint64_t *)(v7 + 4);
      }
      v13 = (uint64_t *)*v10;
      v11 = v10 + 1;
      v12 = v13;
      if (v13 != v11)
      {
        v14 = *(_BYTE *)(result + 48);
        v15 = *(_BYTE *)(result + 49);
        do
        {
          if (v14 >= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v14 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 48) = v14;
          if (v15 <= *(unsigned __int8 *)(*(_QWORD *)(v12[4] + 32) + 8))
            v15 = *(_BYTE *)(*(_QWORD *)(v12[4] + 32) + 8);
          *(_BYTE *)(result + 49) = v15;
          v16 = (uint64_t *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (uint64_t *)v12[2];
              v18 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v18);
          }
          v12 = v17;
        }
        while (v17 != v11);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48))
LABEL_33:
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD **md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  uint64_t v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t **v60;
  md::LayoutContext *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unsigned __int8 v66[4];
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v5 = this;
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v63 = *(uint64_t **)(v15 + 32);
          if (v63)
          {
            v16 = *(_QWORD *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = 8 * v16;
              v18 = (char *)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = *(_QWORD **)(v6 + 176);
            v62 = (_QWORD *)(v6 + 184);
            if (v19 != (_QWORD *)(v6 + 184))
            {
              v60 = (uint64_t **)(v6 + 224);
              v61 = v5;
              do
              {
                v21 = v19[4];
                v20 = v19[5];
                v68 = v21;
                v69 = (std::__shared_weak_count *)v20;
                if (v20)
                {
                  v22 = (unint64_t *)(v20 + 8);
                  do
                    v23 = __ldxr(v22);
                  while (__stxr(v23 + 1, v22));
                }
                *(_WORD *)v66 = *(_WORD *)(v21 + 168);
                v67 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(v5);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v64, v63, v66, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = *(_QWORD **)(v6 + 264);
                if (!v29)
                {
                  geo::Pool<md::FlyoverRenderable>::allocateSlab(v60);
                  v29 = *(_QWORD **)(v6 + 264);
                }
                *(_QWORD *)(v6 + 264) = *v29;
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, v20, v28, (v27 - 1) < 3u, &v64);
                *v29 = &off_1E426F280;
                v29[48] = v21;
                v29[49] = v20;
                if (v20)
                {
                  v30 = (unint64_t *)(v20 + 8);
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                }
                *v29 = &off_1E426EE88;
                v33 = (_QWORD *)a3[1];
                v32 = a3[2];
                if ((unint64_t)v33 >= v32)
                {
                  v35 = v6;
                  v36 = (_BYTE *)*a3;
                  v37 = (uint64_t)v33 - *a3;
                  v38 = v37 >> 3;
                  v39 = (v37 >> 3) + 1;
                  if (v39 >> 61)
                    abort();
                  v40 = v32 - (_QWORD)v36;
                  if (v40 >> 2 > v39)
                    v39 = v40 >> 2;
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                    v41 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v41 = v39;
                  if (v41)
                  {
                    if (v41 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v42 = operator new(8 * v41);
                  }
                  else
                  {
                    v42 = 0;
                  }
                  v43 = &v42[8 * v38];
                  *v43 = v29;
                  v34 = v43 + 1;
                  if (v33 == (_QWORD *)v36)
                  {
                    v36 = v33;
                  }
                  else
                  {
                    v44 = (char *)(v33 - 1) - v36;
                    if (v44 < 0x58)
                      goto LABEL_84;
                    if ((unint64_t)((char *)v33 - &v42[v37]) < 0x20)
                      goto LABEL_84;
                    v45 = (v44 >> 3) + 1;
                    v46 = &v42[8 * v38 - 16];
                    v47 = (__int128 *)(v33 - 2);
                    v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v49 = *v47;
                      *(v46 - 1) = *(v47 - 1);
                      *v46 = v49;
                      v46 -= 2;
                      v47 -= 2;
                      v48 -= 4;
                    }
                    while (v48);
                    v43 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
                    v33 -= v45 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_84:
                      do
                      {
                        v50 = *--v33;
                        *--v43 = v50;
                      }
                      while (v33 != (_QWORD *)v36);
                      v36 = (_BYTE *)*a3;
                    }
                  }
                  *a3 = v43;
                  a3[1] = v34;
                  a3[2] = &v42[8 * v41];
                  if (v36)
                    operator delete(v36);
                  v6 = v35;
                  v5 = v61;
                }
                else
                {
                  *v33 = v29;
                  v34 = v33 + 1;
                }
                a3[1] = v34;
                v51 = v65;
                if (v65)
                {
                  p_shared_owners = (unint64_t *)&v65->__shared_owners_;
                  do
                    v53 = __ldaxr(p_shared_owners);
                  while (__stlxr(v53 - 1, p_shared_owners));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = v69;
                if (!v69)
                  goto LABEL_71;
                v55 = (unint64_t *)&v69->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                  v57 = (_QWORD *)v19[1];
                  if (!v57)
                  {
                    do
                    {
LABEL_75:
                      v58 = (_QWORD *)v19[2];
                      v59 = *v58 == (_QWORD)v19;
                      v19 = v58;
                    }
                    while (!v59);
                    goto LABEL_29;
                  }
                }
                else
                {
LABEL_71:
                  v57 = (_QWORD *)v19[1];
                  if (!v57)
                    goto LABEL_75;
                }
                do
                {
                  v58 = v57;
                  v57 = (_QWORD *)*v57;
                }
                while (v57);
LABEL_29:
                v19 = v58;
              }
              while (v58 != v62);
            }
          }
        }
      }
    }
  }
}

void sub_19FB891D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v5 = *(_QWORD *)(a3 + 384);
  v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_BYTE *)(a3 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = md::SceneContext::subtileClipMask(*a2, v5, v9);
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v11)
      goto LABEL_11;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v11 = md::SceneContext::subtileClipMask(*a2, v5, *(_BYTE *)(a3 + 48));
  if (!v11)
    goto LABEL_15;
LABEL_11:
  if (v11[4] == v11[3] * v11[3])
    v14 = 0;
  else
    v14 = (uint64_t)v11;
LABEL_16:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v14);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19FB893C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;

  v9 = (uint64_t *)result;
LABEL_2:
  v115 = a2 - 2;
  v117 = a2 - 1;
  v114 = a2 - 3;
  v10 = v9;
  v119 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *v117;
        v121 = *v9;
        v122 = v52;
        v53 = *(_QWORD *)(a3 + 24);
        if (!v53)
          goto LABEL_143;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v122, &v121);
        if ((_DWORD)result)
        {
          v54 = *v9;
          *v9 = *v117;
          *v117 = v54;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v117, a3);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v117, a3);
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v9 + 1, v9 + 2, v9 + 3, v117, a3);
      default:
        if (v11 <= 191)
        {
          v55 = v9 + 1;
          v57 = v9 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = v9;
            while (1)
            {
              v61 = v59[1];
              v121 = *v59;
              v122 = v61;
              v62 = *(_QWORD *)(a3 + 24);
              if (!v62)
                break;
              v59 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v62 + 48))(v62, &v122, &v121);
              if ((_DWORD)result)
              {
                v63 = *v59;
                v64 = v58;
                do
                {
                  *(uint64_t *)((char *)v9 + v64 + 8) = *(uint64_t *)((char *)v9 + v64);
                  if (!v64)
                  {
                    v60 = v9;
                    goto LABEL_81;
                  }
                  v121 = *(uint64_t *)((char *)v9 + v64 - 8);
                  v122 = v63;
                  v65 = *(_QWORD *)(a3 + 24);
                  if (!v65)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v122, &v121);
                  v64 -= 8;
                }
                while ((result & 1) != 0);
                v60 = (uint64_t *)((char *)v9 + v64 + 8);
LABEL_81:
                *v60 = v63;
              }
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v57)
              return result;
            while (1)
            {
              v105 = v9[1];
              v121 = *v9;
              v122 = v105;
              v106 = *(_QWORD *)(a3 + 24);
              if (!v106)
                break;
              v9 = v55;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v106 + 48))(v106, &v122, &v121);
              if ((_DWORD)result)
              {
                v107 = *v9;
                v108 = v9;
                while (1)
                {
                  v109 = *(v108 - 2);
                  *v108 = *(v108 - 1);
                  v121 = v109;
                  v122 = v107;
                  v110 = *(_QWORD *)(a3 + 24);
                  if (!v110)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v122, &v121);
                  --v108;
                  if ((result & 1) == 0)
                  {
                    *v108 = v107;
                    break;
                  }
                }
              }
              v55 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
LABEL_143:
          std::__throw_bad_function_call[abi:nn180100]();
          return std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(v111, v112, v113);
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v116 = v11;
            v66 = (unint64_t)(v12 - 2) >> 1;
            v67 = v66;
            while (1)
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v9[v69];
                v71 = 2 * v67 + 2;
                if (v71 < v12)
                {
                  v72 = v67;
                  v73 = *v70;
                  v121 = v70[1];
                  v122 = v73;
                  v74 = *(_QWORD *)(a3 + 24);
                  if (!v74)
                    goto LABEL_143;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v74 + 48))(v74, &v122, &v121))
                  {
                    ++v70;
                    v69 = v71;
                  }
                  a2 = v119;
                  v68 = v72;
                }
                v118 = v68;
                v75 = &v9[v68];
                v76 = *v70;
                v121 = *v75;
                v122 = v76;
                v77 = *(_QWORD *)(a3 + 24);
                if (!v77)
                  goto LABEL_143;
                result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v122, &v121);
                v68 = v118;
                if ((result & 1) == 0)
                {
                  v78 = *v75;
                  do
                  {
                    v79 = v70;
                    *v75 = *v70;
                    if (v66 < v69)
                      break;
                    v80 = (2 * v69) | 1;
                    v70 = &v9[v80];
                    v69 = 2 * v69 + 2;
                    if (v69 >= v12)
                    {
                      v69 = v80;
                    }
                    else
                    {
                      v81 = *v70;
                      v121 = v70[1];
                      v122 = v81;
                      v82 = *(_QWORD *)(a3 + 24);
                      if (!v82)
                        goto LABEL_143;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v122, &v121))
                      {
                        ++v70;
                      }
                      else
                      {
                        v69 = v80;
                      }
                    }
                    v83 = *v70;
                    v121 = v78;
                    v122 = v83;
                    v84 = *(_QWORD *)(a3 + 24);
                    if (!v84)
                      goto LABEL_143;
                    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v84 + 48))(v84, &v122, &v121);
                    v75 = v79;
                  }
                  while (!(_DWORD)result);
                  *v79 = v78;
                  v68 = v118;
                  a2 = v119;
                }
              }
              v67 = v68 - 1;
              if (!v68)
              {
                v85 = v116 >> 3;
                while (1)
                {
                  if (v85 >= 2)
                  {
                    v120 = a2;
                    v87 = 0;
                    v88 = *v9;
                    v89 = v9;
                    do
                    {
                      v90 = &v89[v87 + 1];
                      v91 = (2 * v87) | 1;
                      v92 = 2 * v87 + 2;
                      if (v92 < v85)
                      {
                        v93 = *v90;
                        v121 = v90[1];
                        v122 = v93;
                        v94 = *(_QWORD *)(a3 + 24);
                        if (!v94)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v94 + 48))(v94, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          ++v90;
                          v91 = v92;
                        }
                      }
                      *v89 = *v90;
                      v89 = v90;
                      v87 = v91;
                    }
                    while (v91 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                    a2 = v120;
                    v95 = v120 - 1;
                    if (v90 == v120 - 1)
                    {
                      *v90 = v88;
                    }
                    else
                    {
                      *v90 = *v95;
                      *v95 = v88;
                      v96 = (char *)v90 - (char *)v9 + 8;
                      if (v96 >= 9)
                      {
                        v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                        v98 = &v9[v97];
                        v99 = *v98;
                        v121 = *v90;
                        v122 = v99;
                        v100 = *(_QWORD *)(a3 + 24);
                        if (!v100)
                          goto LABEL_143;
                        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v100 + 48))(v100, &v122, &v121);
                        if ((_DWORD)result)
                        {
                          v101 = *v90;
                          do
                          {
                            v102 = v98;
                            *v90 = *v98;
                            if (!v97)
                              break;
                            v97 = (v97 - 1) >> 1;
                            v98 = &v9[v97];
                            v103 = *v98;
                            v121 = v101;
                            v122 = v103;
                            v104 = *(_QWORD *)(a3 + 24);
                            if (!v104)
                              goto LABEL_143;
                            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v122, &v121);
                            v90 = v102;
                          }
                          while ((result & 1) != 0);
                          *v102 = v101;
                          a2 = v120;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v85-- <= 2)
                    return result;
                }
              }
            }
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, v9, v117, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9, v14, v117, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 1, &v9[v15 - 1], v115, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v9 + 2, &v9[v15 + 1], v114, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&v9[v15 - 1], v14, &v9[v15 + 1], a3);
          v16 = *v9;
          *v9 = v9[v15];
          v9[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_12;
        }
        v17 = *(v9 - 1);
        v121 = *v9;
        v122 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_143;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v122, &v121) & 1) == 0)
        {
          v37 = *v9;
          v121 = *v117;
          v122 = v37;
          v38 = *(_QWORD *)(a3 + 24);
          if (!v38)
            goto LABEL_143;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v122, &v121);
          if ((result & 1) != 0)
          {
            v10 = v9;
            while (1)
            {
              v39 = v10[1];
              ++v10;
              v121 = v39;
              v122 = v37;
              v40 = *(_QWORD *)(a3 + 24);
              if (!v40)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v122, &v121);
              if ((result & 1) != 0)
                goto LABEL_48;
            }
          }
          v41 = v9 + 1;
          do
          {
            v10 = v41;
            if (v41 >= a2)
              break;
            v121 = *v41;
            v122 = v37;
            v42 = *(_QWORD *)(a3 + 24);
            if (!v42)
              goto LABEL_143;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v122, &v121);
            v41 = v10 + 1;
          }
          while (!(_DWORD)result);
LABEL_48:
          v43 = a2;
          if (v10 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *--v43;
              v121 = v44;
              v122 = v37;
              v45 = *(_QWORD *)(a3 + 24);
              if (!v45)
                goto LABEL_143;
              result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v45 + 48))(v45, &v122, &v121);
            }
            while ((result & 1) != 0);
          }
LABEL_58:
          if (v10 < v43)
          {
            v46 = *v10;
            *v10 = *v43;
            *v43 = v46;
            while (1)
            {
              v47 = v10[1];
              ++v10;
              v121 = v47;
              v122 = v37;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_143;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v122, &v121))
              {
                while (1)
                {
                  v49 = *--v43;
                  v121 = v49;
                  v122 = v37;
                  v50 = *(_QWORD *)(a3 + 24);
                  if (!v50)
                    goto LABEL_143;
                  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v50 + 48))(v50, &v122, &v121);
                  if ((result & 1) == 0)
                    goto LABEL_58;
                }
              }
            }
          }
          v51 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v51;
          a5 = 0;
          *v51 = v37;
          continue;
        }
LABEL_12:
        v19 = *v9;
        v20 = v9;
        do
        {
          v21 = v20[1];
          ++v20;
          v121 = v19;
          v122 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v122, &v121) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != v9)
        {
          while (1)
          {
            v25 = *--v24;
            v121 = v19;
            v122 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_143;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v122, &v121))
            {
              goto LABEL_23;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v121 = v19;
          v122 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_143;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v122, &v121) & 1) == 0);
LABEL_23:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v121 = v19;
              v122 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_143;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v122, &v121) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v121 = v19;
              v122 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_143;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v122, &v121));
          }
          while (v29 < v30);
        }
        if (v23 != v9)
          *v9 = *v23;
        *v23 = v19;
        a2 = v119;
        if (v20 < v24)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **,false>(v9, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(v9, v23, a3);
        v10 = v23 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(v23 + 1, v119, a3);
        if (!(_DWORD)result)
        {
          if ((v36 & 1) != 0)
            continue;
          goto LABEL_37;
        }
        a2 = v23;
        if ((v36 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v22 = *a1;
      v23 = v8;
      v9 = *(_QWORD *)(a3 + 24);
      if (!v9)
        goto LABEL_23;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v23, &v22))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v22 = *v11;
    v23 = v16;
    v17 = *(_QWORD *)(a3 + 24);
    if (!v17)
      break;
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v23, &v22))
    {
      v18 = *v12;
      v19 = v13;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v15 = a1;
          goto LABEL_8;
        }
        v22 = *(uint64_t *)((char *)a1 + v19 + 8);
        v23 = v18;
        v20 = *(_QWORD *)(a3 + 24);
        if (!v20)
          goto LABEL_23;
        v19 -= 8;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v23, &v22) & 1) != 0);
      v15 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_8:
      *v15 = v18;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
LABEL_23:
  std::__throw_bad_function_call[abi:nn180100]();
  return md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer(v21);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5798;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19FB8A04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A4D18;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::FlyoverRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19FB8A190(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::ManeuverArrowCoordinates::update(_QWORD *a1, void *a2, _QWORD *a3, unsigned int a4, float a5, float a6)
{
  float v8;
  float v10;
  float v11;
  float v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double v19;
  uint64_t i;
  char *v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _BOOL4 v46;
  BOOL v47;
  void *v48;
  double v49;
  char **v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  int *v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  int *v66;
  int *v67;
  uint64_t v68;
  float v69;
  float v70;
  _BYTE *v71;
  int *v72;
  int v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  BOOL v79;
  BOOL v80;
  _BOOL4 v81;
  unsigned int *v82;
  int *v83;
  unsigned int *v84;
  int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  float v89;
  unsigned int v90;
  float v91;
  _QWORD *v92;
  float v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  uint64_t v107;

  v8 = a6;
  v107 = *MEMORY[0x1E0C80C00];
  v10 = a6 * a5;
  v11 = v10 * 0.56406;
  v94 = v10;
  v12 = v10 * 0.7125;
  v13 = a2;
  v14 = v13;
  v98 = v13;
  v100 = a1;
  if (v13)
  {
    objc_msgSend(v13, "maneuverDisplaySteps");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "count");

    if (v16)
    {
      a1[1] = *a1;
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v105 = 0u;
      objc_msgSend(v14, "maneuverDisplaySteps");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = v8;
      v92 = a3;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v102, v106, 16);
      if (v18)
      {
        v96 = a4;
        v97 = *(_QWORD *)v103;
        v19 = (float)(a5 * 10.0);
        v95 = v17;
        do
        {
          v99 = v18;
          for (i = 0; i != v99; ++i)
          {
            if (*(_QWORD *)v103 != v97)
              objc_enumerationMutation(v17);
            v22 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * i);
            v23 = objc_msgSend(v22, "stepIndex");
            v24 = v23 == v96;
            if (v23 == v96)
              v25 = v12;
            else
              v25 = v11;
            v26 = objc_msgSend(v14, "routeCoordinateForDistance:beforeRouteCoordinate:", objc_msgSend(v22, "maneuverStartRouteCoordinate"), v19);
            v27 = objc_msgSend(v14, "routeCoordinateForDistance:afterRouteCoordinate:", objc_msgSend(v22, "endRouteCoordinate"), v19);
            v28 = HIDWORD(v26);
            if (objc_msgSend(v22, "maneuverType") == 88)
            {
              objc_msgSend(v14, "distanceFromPoint:toPoint:", v26, v27);
              *(float *)&v29 = v29;
              v30 = objc_msgSend(v14, "routeCoordinateForDistance:beforeRouteCoordinate:", v26, *(float *)&v29);
              LODWORD(v31) = v26;
              LODWORD(v26) = v30;
              v101 = HIDWORD(v30);
            }
            else
            {
              v101 = HIDWORD(v26);
              v28 = HIDWORD(v27);
              LODWORD(v31) = v27;
            }
            v32 = objc_msgSend(v14, "coordinateAtOffset:fromRouteCoordinate:", v31 | (v28 << 32), v25);
            v33 = objc_msgSend(v14, "pointCount");
            v34 = v14;
            v35 = v34;
            if (v32 && objc_msgSend(v34, "pointCount") - 1 > v32)
            {
              objc_msgSend(v35, "pointAt:", v32 - 1);
              GEOMapPointForCoordinate();
              v37 = v36;
              v39 = v38;
              objc_msgSend(v35, "pointAt:", v32);
              GEOMapPointForCoordinate();
              v41 = v40;
              v43 = v42;
              objc_msgSend(v35, "pointAt:", v32 + 1);
              GEOMapPointForCoordinate();
              v46 = ((v44 - v41) * (v37 - v41) + (v45 - v43) * (v39 - v43))
                  / sqrt(((v37 - v41) * (v37 - v41) + (v39 - v43) * (v39 - v43))* ((v44 - v41) * (v44 - v41) + (v45 - v43) * (v45 - v43))) > -0.866025405;
            }
            else
            {
              v46 = 0;
            }

            v47 = v31 >= v33 - 1 || (_DWORD)v31 == v32;
            if (!v47 && v46)
            {
              v31 = objc_msgSend(v35, "coordinateAtOffset:fromRoutePoint:", v32 + 1, (float)(v94 * 0.5));
              v28 = HIDWORD(v31);
              if (objc_msgSend(v35, "pointCount") > v31)
              {
                objc_msgSend(v35, "stepAtIndex:", objc_msgSend(v35, "stepIndexForPointIndex:", v31));
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v48, "distance");
                if (v49 - *((float *)&v31 + 1) * v49 < (float)(v25 + v94))
                  LODWORD(v28) = 0;

              }
            }
            v50 = (char **)v100;
            v52 = (char *)v100[1];
            v51 = v100[2];
            if ((unint64_t)v52 < v51)
            {
              *(_DWORD *)v52 = v26;
              *((_DWORD *)v52 + 1) = v101;
              *((_DWORD *)v52 + 2) = v31;
              *((_DWORD *)v52 + 3) = v28;
              v52[16] = 1;
              v21 = v52 + 20;
              v52[17] = v24;
              v14 = v98;
            }
            else
            {
              v53 = (char *)*v100;
              v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v52[-*v100] >> 2);
              v55 = v54 + 1;
              if (v54 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (_QWORD)v53) >> 2);
              if (2 * v56 > v55)
                v55 = 2 * v56;
              if (v56 >= 0x666666666666666)
                v57 = 0xCCCCCCCCCCCCCCCLL;
              else
                v57 = v55;
              if (v57)
              {
                if (v57 > 0xCCCCCCCCCCCCCCCLL)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v58 = (char *)operator new(20 * v57);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[20 * v54];
              *(_DWORD *)v59 = v26;
              *((_DWORD *)v59 + 1) = v101;
              *((_DWORD *)v59 + 2) = v31;
              *((_DWORD *)v59 + 3) = v28;
              v59[16] = 1;
              v59[17] = v24;
              v60 = v59;
              if (v52 == v53)
              {
                v14 = v98;
                v50 = (char **)v100;
              }
              else
              {
                v14 = v98;
                do
                {
                  v61 = *(_OWORD *)(v52 - 20);
                  *((_WORD *)v60 - 2) = *((_WORD *)v52 - 2);
                  *(_OWORD *)(v60 - 20) = v61;
                  v60 -= 20;
                  v52 -= 20;
                }
                while (v52 != v53);
                v50 = (char **)v100;
                v52 = (char *)*v100;
              }
              v21 = v59 + 20;
              *v50 = v60;
              v50[1] = v59 + 20;
              v50[2] = &v58[20 * v57];
              if (v52)
                operator delete(v52);
            }
            v50[1] = v21;
            v17 = v95;
          }
          v18 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v102, v106, 16);
        }
        while (v18);
      }

      v14 = v98;
      a3 = v92;
      a1 = v100;
      v8 = v91;
    }
  }
  v62 = (int *)*a1;
  v63 = a1[1];
  if (*a1 != v63)
  {
    *((_BYTE *)v62 + 16) = 0;
    *(_BYTE *)(v63 - 4) = 0;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 2) >= 3)
  {
    v64 = *((_BYTE *)v62 + 17) ? v12 : v11;
    v65 = objc_msgSend(v14, "coordinateAtOffset:fromRouteCoordinate:", *((_QWORD *)v62 + 1), v64);
    v66 = (int *)(v63 - 20);
    v67 = v62 + 5;
    if (v62 + 5 != v66)
    {
      v68 = v65;
      v69 = *((float *)&v65 + 1);
      v70 = -(float)(v8 * a5);
      do
      {
        v73 = *((unsigned __int8 *)v67 + 17);
        if (*((_BYTE *)v67 + 17))
          v74 = v12;
        else
          v74 = v11;
        v75 = objc_msgSend(v14, "coordinateAtOffset:fromRouteCoordinate:", *((_QWORD *)v67 + 1), v74);
        v76 = 0.059375;
        if (v73)
          v76 = 0.075;
        v77 = objc_msgSend(v14, "coordinateAtOffset:fromRouteCoordinate:", *(_QWORD *)v67, (float)(v70 * v76));
        v78 = *((float *)&v75 + 1);
        if (v68 > v75
          || (v69 > *((float *)&v75 + 1) ? (v79 = (_DWORD)v68 == (_DWORD)v75) : (v79 = 0),
              !v79 ? (v80 = v68 > v77) : (v80 = 1),
              v80))
        {
          v81 = 1;
          if (!v73)
            goto LABEL_76;
        }
        else
        {
          if ((_DWORD)v68 != (_DWORD)v77)
          {
            v72 = v67;
            a1 = v100;
            goto LABEL_59;
          }
          v81 = v69 > *((float *)&v77 + 1);
          if (!v73)
            goto LABEL_76;
        }
        if (v81)
        {
          v71 = v62 + 4;
          v62 = v67;
          a1 = v100;
          goto LABEL_58;
        }
LABEL_76:
        v72 = v67;
        a1 = v100;
        if (!v81)
          goto LABEL_59;
        v71 = v67 + 4;
        v75 = v68;
        v78 = v69;
LABEL_58:
        *v71 = 0;
        v72 = v62;
LABEL_59:
        v67 += 5;
        v62 = v72;
        v69 = v78;
        v68 = v75;
      }
      while (v67 != v66);
    }
  }
  v82 = (unsigned int *)*a1;
  v83 = (int *)a1[1];
  if ((int *)*a1 != v83)
  {
    v84 = (unsigned int *)*a3;
    v85 = (int *)a3[1];
    if ((int *)*a3 != v85)
    {
      do
      {
        v86 = *v82;
        v87 = v84;
        while (1)
        {
          v88 = *v87;
          v89 = *((float *)v87 + 1);
          if (*v87 > v86 || v88 == v86 && v89 >= *((float *)v82 + 1))
          {
            v90 = v82[2];
            if (v88 < v90 || v88 == v90 && v89 <= *((float *)v82 + 3))
              break;
          }
          v87 += 2;
          if (v87 == (unsigned int *)v85)
            goto LABEL_86;
        }
        *((_BYTE *)v82 + 16) = 0;
LABEL_86:
        v82 += 5;
      }
      while (v82 != (unsigned int *)v83);
    }
  }

}

void sub_19FB8A8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void karo::JobManager::~JobManager(karo::JobManager *this)
{
  karo::JobManager::~JobManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint8_t buf[2];
  __int16 v28;
  void *v29;

  *(_QWORD *)this = &off_1E42C2BC8;
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v3 = (uint64_t *)*((_QWORD *)this + 5);
  while (v2 != v3)
  {
    v4 = *v2++;
    *(_BYTE *)(v4 + 48) = 0;
    atomic_store(1u, (unsigned __int8 *)(v4 + 80));
  }
  pthread_cond_broadcast(*((pthread_cond_t **)this + 3));
  for (i = *((_QWORD *)this + 5); *((_QWORD *)this + 4) != i; *((_QWORD *)this + 5) = i)
  {
    v6 = *(_QWORD *)(i - 8);
    *(_BYTE *)(v6 + 48) = 0;
    atomic_store(1u, (unsigned __int8 *)(v6 + 80));
    v7 = *(_QWORD *)(*((_QWORD *)this + 5) - 8);
    v29 = 0;
    v8 = pthread_join(**(pthread_t **)(v7 + 16), &v29);
    switch(v8)
    {
      case 3:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v13 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        v26 = 0;
        v10 = (uint8_t *)&v26;
        v11 = v13;
        v12 = "Failed to join thread. No thread could be found corresponding to that specified by the given thread ID, thread.";
        break;
      case 22:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v14 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        *(_WORD *)buf = 0;
        v10 = buf;
        v11 = v14;
        v12 = "Failed to join thread. The implementation has detected that the value specified by thread does not refer t"
              "o a joinable thread.";
        break;
      case 11:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v9 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_22;
        v28 = 0;
        v10 = (uint8_t *)&v28;
        v11 = v9;
        v12 = "Failed to join thread. A deadlock was detected or the value of thread specifies the calling thread.";
        break;
      default:
        goto LABEL_22;
    }
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, v12, v10, 2u);
LABEL_22:
    v15 = *((_QWORD *)this + 5);
    v16 = *(_QWORD *)(v15 - 8);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v15 = *((_QWORD *)this + 5);
    }
    i = v15 - 8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((_QWORD **)this + 14));
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    v18 = *((_QWORD *)this + 10);
    v19 = (void *)*((_QWORD *)this + 9);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v17;
    operator delete(v19);
  }
  v23 = (void *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_QWORD *)this + 5) = v23;
    operator delete(v23);
  }
  pthread_cond_destroy(*((pthread_cond_t **)this + 3));
  v24 = *((_QWORD *)this + 3);
  if (v24)
    MEMORY[0x1A1AF4E00](v24, 0x1000C40EED21634);
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 2));
  v25 = *((_QWORD *)this + 2);
  if (v25)
    MEMORY[0x1A1AF4E00](v25, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 2) = 0;
}

uint64_t karo::JobManager::queueJob(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  unsigned int v13;
  uint64_t **v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unsigned int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  if (*(_BYTE *)(a1 + 64))
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v4 = *a2;
  pthread_mutex_lock(*(pthread_mutex_t **)(*a2 + 88));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v5 = *a2;
  v6 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = v6 + 1;
  atomic_store(a1, (unint64_t *)(v5 + 24));
  *(_DWORD *)(v5 + 20) = v6;
  v7 = *a2;
  pthread_mutex_lock(*(pthread_mutex_t **)(*a2 + 88));
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(v7 + 72);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 88));
  if (v8 == v9)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 96));
    v16 = (std::__shared_weak_count *)a2[1];
    v17 = atomic_load((unsigned int *)(*a2 + 16));
    v34 = v17;
    v18 = *a2;
    v35 = *a2;
    v36 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v21 = *(_QWORD *)(a1 + 80);
    if (v21 < *(_QWORD *)(a1 + 88))
    {
      *(_DWORD *)v21 = v17;
      *(_QWORD *)(v21 + 8) = v18;
      *(_QWORD *)(v21 + 16) = v16;
      *(_QWORD *)(a1 + 80) = v21 + 24;
      goto LABEL_32;
    }
    v31 = std::vector<karo::JobManager::QueueElement>::__push_back_slow_path<karo::JobManager::QueueElement>((char **)(a1 + 72), (uint64_t)&v34);
    v28 = v36;
    *(_QWORD *)(a1 + 80) = v31;
    if (!v28)
      goto LABEL_32;
    v32 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v32);
    while (__stlxr(v30 - 1, v32));
    goto LABEL_30;
  }
  v10 = *a2;
  v12 = (uint64_t **)(a1 + 112);
  v11 = *(uint64_t **)(a1 + 112);
  if (v11)
  {
    v13 = *(_DWORD *)(v10 + 20);
    while (1)
    {
      while (1)
      {
        v14 = (uint64_t **)v11;
        v15 = *(_DWORD *)(v11[4] + 20);
        if (v13 >= v15)
          break;
        v11 = *v14;
        v12 = v14;
        if (!*v14)
          goto LABEL_17;
      }
      if (v15 >= v13)
        break;
      v11 = v14[1];
      if (!v11)
      {
        v12 = v14 + 1;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v14 = (uint64_t **)(a1 + 112);
LABEL_17:
    v22 = (uint64_t *)v14;
    v14 = (uint64_t **)operator new(0x38uLL);
    v14[5] = 0;
    v14[6] = 0;
    v14[4] = (uint64_t *)v10;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = v22;
    *v12 = (uint64_t *)v14;
    v23 = **(_QWORD **)(a1 + 104);
    v24 = (uint64_t *)v14;
    if (v23)
    {
      *(_QWORD *)(a1 + 104) = v23;
      v24 = *v12;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 112), v24);
    ++*(_QWORD *)(a1 + 120);
    v10 = *a2;
  }
  v25 = a2[1];
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)v14[6];
  v14[5] = (uint64_t *)v10;
  v14[6] = (uint64_t *)v25;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_30:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_32:
  pthread_cond_signal(*(pthread_cond_t **)(a1 + 24));
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 88));
}

char *std::vector<karo::JobManager::QueueElement>::__push_back_slow_path<karo::JobManager::QueueElement>(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = &v8[v7];
  *(_DWORD *)v9 = *(_DWORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_DWORD *)v13 - 6);
      v13 -= 24;
      *((_DWORD *)v9 - 6) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 24;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t karo::JobManager::setWorkerCount(karo::JobManager *this, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  pthread_attr_t *p_dst;
  unint64_t v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string *v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  pthread_t **v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  unint64_t v64;
  __int128 __p;
  __int128 v66;
  int v67;
  uint64_t v68[19];
  uint8_t buf[16];
  pthread_attr_t __dst;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
  v4 = a2;
  v5 = *((_QWORD *)this + 5);
  v6 = (v5 - *((_QWORD *)this + 4)) >> 3;
  if (v6 < a2)
  {
    v58 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
    v57 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
    v55 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
    v56 = MEMORY[0x1E0DE4FB8] + 16;
    v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 48);
    v54 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
    v52 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 8);
    v50 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v51 = *MEMORY[0x1E0DE4F50];
    v48 = a2;
    v49 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    while (1)
    {
      v7 = MEMORY[0x1E0DE4FD0];
      v8 = MEMORY[0x1E0DE4FD0] + 104;
      v68[0] = MEMORY[0x1E0DE4FD0] + 104;
      v9 = MEMORY[0x1E0DE4FD0] + 64;
      v60 = MEMORY[0x1E0DE4FD0] + 64;
      v59[0] = v58;
      *(_QWORD *)((char *)v59 + *(_QWORD *)(v58 - 24)) = v57;
      v59[1] = 0;
      v10 = (std::ios_base *)((char *)v59 + *(_QWORD *)(v59[0] - 24));
      std::ios_base::init(v10, &v61);
      v10[1].__vftable = 0;
      v10[1].__fmtflags_ = -1;
      *(uint64_t *)((char *)&v60 + *(_QWORD *)(v55 - 24)) = v54;
      *(_QWORD *)((char *)v59 + *(_QWORD *)(v52 - 24)) = v53;
      v68[0] = v8;
      v59[0] = v7 + 24;
      v60 = v9;
      std::streambuf::basic_streambuf();
      v61 = v56;
      __p = 0u;
      v66 = 0u;
      v67 = 24;
      v11 = strlen(*((const char **)this + 1));
      v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v60, *((_QWORD *)this + 1), v11);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"/workers/worker", 15);
      ++*((_DWORD *)this + 14);
      std::ostream::operator<<();
      v13 = operator new();
      if ((v67 & 0x10) != 0)
      {
        v16 = *((_QWORD *)&v66 + 1);
        v17 = (const void **)&v63;
        if (*((_QWORD *)&v66 + 1) < v64)
        {
          *((_QWORD *)&v66 + 1) = v64;
          v16 = v64;
          v17 = (const void **)&v63;
        }
      }
      else
      {
        if ((v67 & 8) == 0)
        {
          v14 = 0;
          __dst.__opaque[15] = 0;
          p_dst = &__dst;
          goto LABEL_18;
        }
        v16 = v62[2];
        v17 = (const void **)v62;
      }
      v18 = *v17;
      v14 = v16 - (_QWORD)*v17;
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_63;
      if (v14 >= 0x17)
        break;
      __dst.__opaque[15] = v16 - *(_BYTE *)v17;
      p_dst = &__dst;
      if (v14)
        goto LABEL_17;
LABEL_18:
      *((_BYTE *)&p_dst->__sig + v14) = 0;
      *(_QWORD *)v13 = off_1E42C35E0;
      *(_DWORD *)(v13 + 8) = 0;
      v22 = (std::string *)(v13 + 24);
      if (__dst.__opaque[15] < 0)
      {
        std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)__dst.__sig, *(std::string::size_type *)__dst.__opaque);
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__sig;
        *(_QWORD *)(v13 + 40) = *(_QWORD *)&__dst.__opaque[8];
      }
      *(_BYTE *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 16) = operator new();
      *(_QWORD *)v13 = off_1E42C3608;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 72) = this;
      *(_BYTE *)(v13 + 80) = 0;
      v24 = (uint64_t *)*((_QWORD *)this + 5);
      v23 = *((_QWORD *)this + 6);
      if ((unint64_t)v24 >= v23)
      {
        v26 = (uint64_t *)*((_QWORD *)this + 4);
        v27 = v24 - v26;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
LABEL_63:
          abort();
        v29 = v23 - (_QWORD)v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = operator new(8 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = (uint64_t *)&v31[8 * v27];
        *v32 = v13;
        v25 = v32 + 1;
        if (v24 == v26)
        {
          v26 = v24;
        }
        else
        {
          v33 = (char *)(v24 - 1) - (char *)v26;
          if (v33 < 0x58)
            goto LABEL_67;
          if ((unint64_t)((char *)v26 - v31) < 0x20)
            goto LABEL_67;
          v34 = (v33 >> 3) + 1;
          v35 = &v31[8 * v27 - 16];
          v36 = v24 - 2;
          v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *v35 = v38;
            v35 -= 2;
            v36 -= 4;
            v37 -= 4;
          }
          while (v37);
          v32 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          v24 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_67:
            do
            {
              v39 = *--v24;
              *--v32 = v39;
            }
            while (v24 != v26);
            v26 = (uint64_t *)*((_QWORD *)this + 4);
          }
        }
        *((_QWORD *)this + 4) = v32;
        *((_QWORD *)this + 5) = v25;
        *((_QWORD *)this + 6) = &v31[8 * v30];
        if (v26)
          operator delete(v26);
        v4 = v48;
      }
      else
      {
        *v24 = v13;
        v25 = v24 + 1;
      }
      *((_QWORD *)this + 5) = v25;
      if (__dst.__opaque[15] < 0)
      {
        operator delete((void *)__dst.__sig);
        v25 = (_QWORD *)*((_QWORD *)this + 5);
      }
      v40 = (pthread_t **)*(v25 - 1);
      if (pthread_attr_init(&__dst))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v41 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        *(_WORD *)buf = 0;
        v42 = v41;
        v43 = "Failed to initialize thread attributes.";
      }
      else
      {
        pthread_create(v40[2], &__dst, (void *(__cdecl *)(void *))karo::Thread::callback, v40);
        if (!pthread_attr_destroy(&__dst))
          goto LABEL_58;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v44 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        *(_WORD *)buf = 0;
        v42 = v44;
        v43 = "Failed to destroy thread attributes.";
      }
      _os_log_impl(&dword_19F029000, v42, OS_LOG_TYPE_ERROR, v43, buf, 2u);
LABEL_58:
      v59[0] = v51;
      *(_QWORD *)((char *)v59 + *(_QWORD *)(v51 - 24)) = v50;
      v60 = v49;
      v61 = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v66) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v68);
      v5 = *((_QWORD *)this + 5);
      v6 = (v5 - *((_QWORD *)this + 4)) >> 3;
      if (v6 >= v4)
        goto LABEL_60;
    }
    v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v19 = v14 | 7;
    v20 = v19 + 1;
    p_dst = (pthread_attr_t *)operator new(v19 + 1);
    v21 = v20 | 0x8000000000000000;
    v4 = v48;
    *(_QWORD *)__dst.__opaque = v14;
    *(_QWORD *)&__dst.__opaque[8] = v21;
    __dst.__sig = (uint64_t)p_dst;
LABEL_17:
    memmove(p_dst, v18, v14);
    goto LABEL_18;
  }
LABEL_60:
  if (v6 > v4)
  {
    do
    {
      v45 = *(_QWORD *)(v5 - 8);
      *(_BYTE *)(v45 + 48) = 1;
      atomic_store(1u, (unsigned __int8 *)(v45 + 80));
      v46 = *((_QWORD *)this + 4);
      v5 = *((_QWORD *)this + 5) - 8;
      *((_QWORD *)this + 5) = v5;
    }
    while (v4 < (v5 - v46) >> 3);
  }
  pthread_cond_broadcast(*((pthread_cond_t **)this + 3));
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
}

void karo::JobManager::cancelAll(karo::JobManager *this)
{
  char i;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  char *v28;
  char *v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD **v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;

  i = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = 1;
  v59 = 0;
  v60 = 0;
  v58 = &v59;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
  v3 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  v5 = v4 - v3;
  if (v4 == v3)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = operator new(v5);
    v7 = v6;
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)v3;
      v7[1] = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      v7[2] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v3 += 24;
      v7 += 3;
    }
    while (v3 != v4);
  }
  if (&v58 == (uint64_t ***)((char *)this + 104))
    goto LABEL_67;
  v57 = i;
  v11 = (char *)*((_QWORD *)this + 13);
  v12 = (char *)this + 112;
  if (!v60
    || ((v13 = v58, v58 = &v59, v59[2] = 0, v59 = 0, v60 = 0, v13[1]) ? (v14 = v13[1]) : (v14 = (uint64_t *)v13),
        !v14))
  {
    v29 = v11;
    goto LABEL_60;
  }
  v15 = (uint64_t *)v14[2];
  if (v15)
  {
    v16 = (uint64_t *)*v15;
    if ((uint64_t *)*v15 == v14)
    {
      *v15 = 0;
      while (1)
      {
        v56 = (uint64_t *)v15[1];
        if (!v56)
          break;
        do
        {
          v15 = v56;
          v56 = (uint64_t *)*v56;
        }
        while (v56);
      }
    }
    else
    {
      for (v15[1] = 0; v16; v16 = (uint64_t *)v15[1])
      {
        do
        {
          v15 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  if (v11 == v12)
  {
    v17 = v14;
    v29 = v11;
  }
  else
  {
    do
    {
      v17 = v15;
      v14[4] = *((_QWORD *)v11 + 4);
      v19 = *((_QWORD *)v11 + 5);
      v18 = *((_QWORD *)v11 + 6);
      if (v18)
      {
        v20 = (unint64_t *)(v18 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (std::__shared_weak_count *)v14[6];
      v14[5] = v19;
      v14[6] = v18;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v59;
      v26 = &v59;
      v27 = &v59;
      if (v59)
      {
        do
        {
          while (1)
          {
            v26 = (uint64_t **)v25;
            if (*(_DWORD *)(v14[4] + 20) >= *(_DWORD *)(v25[4] + 20))
              break;
            v25 = (uint64_t *)*v25;
            v27 = v26;
            if (!*v26)
              goto LABEL_37;
          }
          v25 = (uint64_t *)v25[1];
        }
        while (v25);
        v27 = v26 + 1;
      }
LABEL_37:
      *v14 = 0;
      v14[1] = 0;
      v14[2] = (uint64_t)v26;
      *v27 = v14;
      if (*v58)
      {
        v58 = (uint64_t **)*v58;
        v14 = *v27;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v59, v14);
      ++v60;
      if (v17)
      {
        v15 = (uint64_t *)v17[2];
        if (v15)
        {
          v31 = (uint64_t *)*v15;
          if ((uint64_t *)*v15 == v17)
          {
            *v15 = 0;
            while (1)
            {
              v32 = (uint64_t *)v15[1];
              if (!v32)
                break;
              do
              {
                v15 = v32;
                v32 = (uint64_t *)*v32;
              }
              while (v32);
            }
          }
          else
          {
            for (v15[1] = 0; v31; v31 = (uint64_t *)v15[1])
            {
              do
              {
                v15 = v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
          }
        }
      }
      else
      {
        v15 = 0;
      }
      v28 = (char *)*((_QWORD *)v11 + 1);
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = *(char **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (char *)*((_QWORD *)v11 + 2);
          v30 = *(_QWORD *)v29 == (_QWORD)v11;
          v11 = v29;
        }
        while (!v30);
      }
      if (!v17)
        break;
      v11 = v29;
      v14 = v17;
    }
    while (v29 != v12);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v17);
  if (!v15)
  {
LABEL_60:
    i = v57;
    if (v29 == v12)
      goto LABEL_67;
    goto LABEL_86;
  }
  v33 = (uint64_t *)v15[2];
  for (i = v57; v33; v33 = (uint64_t *)v33[2])
    v15 = v33;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v15);
  if (v29 == v12)
    goto LABEL_67;
  do
  {
LABEL_86:
    v42 = (uint64_t *)operator new(0x38uLL);
    v43 = v42;
    v44 = *((_OWORD *)v29 + 2);
    *((_OWORD *)v42 + 2) = v44;
    v45 = *((_QWORD *)v29 + 6);
    v42[6] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = v59;
    v49 = &v59;
    v50 = &v59;
    if (v59)
    {
      do
      {
        while (1)
        {
          v49 = (uint64_t **)v48;
          if (*(_DWORD *)(v44 + 20) >= *(_DWORD *)(v48[4] + 20))
            break;
          v48 = (uint64_t *)*v48;
          v50 = v49;
          if (!*v49)
            goto LABEL_96;
        }
        v48 = (uint64_t *)v48[1];
      }
      while (v48);
      v50 = v49 + 1;
    }
LABEL_96:
    *v42 = 0;
    v42[1] = 0;
    v42[2] = (uint64_t)v49;
    *v50 = v42;
    if (*v58)
    {
      v58 = (uint64_t **)*v58;
      v43 = *v50;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v59, v43);
    ++v60;
    v51 = (char *)*((_QWORD *)v29 + 1);
    if (v51)
    {
      do
      {
        v52 = v51;
        v51 = *(char **)v51;
      }
      while (v51);
    }
    else
    {
      do
      {
        v52 = (char *)*((_QWORD *)v29 + 2);
        v30 = *(_QWORD *)v52 == (_QWORD)v29;
        v29 = v52;
      }
      while (!v30);
    }
    v29 = v52;
  }
  while (v52 != v12);
LABEL_67:
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
  if (v6 != v7)
  {
    v34 = (_QWORD **)v6;
    do
    {
      (*(void (**)(_QWORD *))(*v34[1] + 16))(v34[1]);
      v34 += 3;
    }
    while (v34 != v7);
  }
  v35 = v58;
  if (v58 != &v59)
  {
    do
    {
      (*(void (**)(uint64_t *))(*v35[5] + 16))(v35[5]);
      v36 = v35[1];
      if (v36)
      {
        do
        {
          v37 = (uint64_t **)v36;
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t **)v35[2];
          v30 = *v37 == (uint64_t *)v35;
          v35 = v37;
        }
        while (!v30);
      }
      v35 = v37;
    }
    while (v37 != &v59);
  }
  while (1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
    v38 = (uint64_t *)*((_QWORD *)this + 4);
    v39 = (uint64_t *)*((_QWORD *)this + 5);
    if (v38 == v39)
      break;
    v40 = 1;
    do
    {
      v41 = *v38++;
      v40 &= *(_QWORD *)(v41 + 56) == 0;
    }
    while (v38 != v39);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
    if ((v40 & 1) != 0)
      goto LABEL_105;
    usleep(0x2710u);
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
LABEL_105:
  *((_BYTE *)this + 64) = i;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v59);
  if (v6)
  {
    if (v6 != v7)
    {
      do
      {
        v53 = (std::__shared_weak_count *)*(v7 - 1);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v7 -= 3;
      }
      while (v7 != v6);
      v7 = v6;
    }
    operator delete(v7);
  }
}

void karo::util::replaceIndexWithLast<karo::JobManager::QueueElement>(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *i;

  v3 = *a1;
  v4 = a1[1];
  v5 = (_DWORD *)(*a1 + 24 * a2);
  *v5 = *(_DWORD *)(v4 - 24);
  v6 = v5 + 2;
  v8 = *(_QWORD *)(v4 - 16);
  v7 = *(_QWORD *)(v4 - 8);
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *v6 = v8;
  v11 = v3 + 24 * a2;
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  *(_QWORD *)(v11 + 16) = v7;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = a1[1];
  if (v15 == *a1)
  {
    if (a1[2] - v15 == -24)
    {
      for (i = (_QWORD *)(v15 + 8); ; i += 3)
      {
        *((_DWORD *)i - 2) = 0;
        *i = 0;
        i[1] = 0;
      }
    }
    abort();
  }
  v16 = v15 - 24;
  while (v15 != v16)
  {
    v17 = *(std::__shared_weak_count **)(v15 - 8);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v15 -= 24;
  }
  a1[1] = v16;
}

void std::__introsort<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  __int128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  __int128 *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  int v148;
  unint64_t v149;
  __int128 v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unsigned int *v170;
  unsigned int *v171;
  unsigned int *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v6 = *a2;
  v7 = *a1;
  v8 = *a3;
  if (*a2 >= *a1)
  {
    if (v8 < v6)
    {
      v18 = a2 + 2;
      v19 = *(_OWORD *)(a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 1) = 0;
      *a2 = *a3;
      v20 = *(_OWORD *)(a3 + 2);
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      v21 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 2) = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          v49 = v19;
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          v19 = v49;
        }
      }
      *a3 = v6;
      v24 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
      *(_OWORD *)(a3 + 2) = v19;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *a1;
      if (*a2 < *a1)
      {
        v28 = *(_OWORD *)(a1 + 2);
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *a1 = *a2;
        v29 = *(_OWORD *)(a2 + 2);
        *v18 = 0;
        *((_QWORD *)a2 + 2) = 0;
        v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
        *(_OWORD *)(a1 + 2) = v29;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            v50 = v28;
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
            v28 = v50;
          }
        }
        *a2 = v27;
        v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
        *(_OWORD *)(a2 + 2) = v28;
        if (v15)
        {
          v33 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v33);
          while (__stlxr(v17 - 1, v33));
          goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)a1 + 1);
    v10 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    if (v8 >= v6)
    {
      *a1 = *a2;
      v34 = a2 + 2;
      v35 = *(_OWORD *)(a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 1) = 0;
      v36 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      *(_OWORD *)(a1 + 2) = v35;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      *a2 = v7;
      v39 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 1) = v9;
      *((_QWORD *)a2 + 2) = v10;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *a2;
      if (*a3 < *a2)
      {
        v43 = *(_OWORD *)(a2 + 2);
        *v34 = 0;
        *((_QWORD *)a2 + 2) = 0;
        *a2 = *a3;
        v44 = *(_OWORD *)(a3 + 2);
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        v45 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
        *(_OWORD *)(a2 + 2) = v44;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            v51 = v43;
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
            v43 = v51;
          }
        }
        *a3 = v42;
        v15 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
        *(_OWORD *)(a3 + 2) = v43;
        if (v15)
        {
          v48 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v48);
          while (__stlxr(v17 - 1, v48));
          goto LABEL_52;
        }
      }
    }
    else
    {
      *a1 = *a3;
      v11 = *(_OWORD *)(a3 + 2);
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      *(_OWORD *)(a1 + 2) = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *a3 = v7;
      v15 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
      *((_QWORD *)a3 + 1) = v9;
      *((_QWORD *)a3 + 2) = v10;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
LABEL_52:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    v9 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    v10 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v11 = *(std::__shared_weak_count **)(a3 + 16);
    *(_OWORD *)(a3 + 8) = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        v35 = v9;
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        v9 = v35;
      }
    }
    *(_DWORD *)a4 = v8;
    v14 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v9;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v18 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      v19 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v20 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          v36 = v18;
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          v18 = v36;
        }
      }
      *(_DWORD *)a3 = v17;
      v23 = *(std::__shared_weak_count **)(a3 + 16);
      *(_OWORD *)(a3 + 8) = v18;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v27 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v28 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v29 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            v37 = v27;
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
            v27 = v37;
          }
        }
        *(_DWORD *)a2 = v26;
        v32 = *(std::__shared_weak_count **)(a2 + 16);
        *(_OWORD *)(a2 + 8) = v27;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a2, a3, a4);
  v10 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    v12 = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v13 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        v46 = v11;
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        v11 = v46;
      }
    }
    *(_DWORD *)a5 = v10;
    v16 = *(std::__shared_weak_count **)(a5 + 16);
    *(_OWORD *)(a5 + 8) = v11;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      v20 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      v21 = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v22 = *(std::__shared_weak_count **)(a3 + 16);
      *(_OWORD *)(a3 + 8) = v21;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          v47 = v20;
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          v20 = v47;
        }
      }
      *(_DWORD *)a4 = v19;
      v25 = *(std::__shared_weak_count **)(a4 + 16);
      *(_OWORD *)(a4 + 8) = v20;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        v29 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        v30 = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        v31 = *(std::__shared_weak_count **)(a2 + 16);
        *(_OWORD *)(a2 + 8) = v30;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            v48 = v29;
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
            v29 = v48;
          }
        }
        *(_DWORD *)a3 = v28;
        v34 = *(std::__shared_weak_count **)(a3 + 16);
        *(_OWORD *)(a3 + 8) = v29;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v37 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          v38 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          v39 = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          v40 = *(std::__shared_weak_count **)(a1 + 16);
          *(_OWORD *)(a1 + 8) = v39;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              v49 = v38;
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
              v38 = v49;
            }
          }
          *(_DWORD *)a2 = v37;
          v43 = *(std::__shared_weak_count **)(a2 + 16);
          *(_OWORD *)(a2 + 8) = v38;
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)a1;
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 24);
        v8 = *(_OWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = 0;
        *(_QWORD *)(a2 - 8) = 0;
        v9 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v8;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            v32 = v7;
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
            v7 = v32;
          }
        }
        *(_DWORD *)(a2 - 24) = v6;
        v12 = *(std::__shared_weak_count **)(a2 - 8);
        *(_OWORD *)(a2 - 16) = v7;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)(a1 + 24), (unsigned int *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v15 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 48));
      v16 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *(_DWORD *)v16;
    if (*(_DWORD *)v16 < *(_DWORD *)v15)
    {
      v19 = *(_QWORD *)(v16 + 8);
      v20 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      v21 = v16;
      v22 = *(_DWORD *)v15;
      while (1)
      {
        v23 = v21;
        v21 = v15;
        *(_DWORD *)v23 = v22;
        v24 = *(_OWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        v25 = *(std::__shared_weak_count **)(v23 + 16);
        *(_OWORD *)(v23 + 8) = v24;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v21 == a1)
          break;
        v15 = v21 - 24;
        v22 = *(_DWORD *)(v21 - 24);
        if (v18 >= v22)
        {
          v28 = v21;
          goto LABEL_28;
        }
      }
      v28 = a1;
LABEL_28:
      *(_DWORD *)v28 = v18;
      *(_QWORD *)(v21 + 8) = v19;
      v29 = *(std::__shared_weak_count **)(v28 + 16);
      *(_QWORD *)(v28 + 16) = v20;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (++v17 == 8)
        return v16 + 24 == a2;
    }
    v15 = v16;
    v16 += 24;
    if (v16 == a2)
      return 1;
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 176);
  }
  return a1;
}

void *altitude::AnimationList::update(void *this, double a2, __n128 a3)
{
  _QWORD *v3;
  void *v4;
  double v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 != *((_QWORD **)this + 2))
  {
    v4 = this;
    v5 = *((double *)this + 4);
    if (v5 == -1.0)
    {
      *((double *)this + 4) = a2;
      v5 = a2;
    }
    (**(void (***)(_QWORD, double, __n128))*v3)(*v3, a2 - v5, a3);
    this = (void *)(*(uint64_t (**)(_QWORD))(***((_QWORD ***)v4 + 1) + 8))(**((_QWORD **)v4 + 1));
    if ((_DWORD)this)
    {
      v6 = (uint64_t *)*((_QWORD *)v4 + 1);
      this = (void *)*v6;
      if (*v6)
      {
        this = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)this + 24))(this);
        v6 = (uint64_t *)*((_QWORD *)v4 + 1);
      }
      v7 = (uint64_t *)*((_QWORD *)v4 + 2);
      v8 = (char *)v7 - (char *)(v6 + 1);
      if (v7 != v6 + 1)
        this = memmove(v6, v6 + 1, (char *)v7 - (char *)(v6 + 1));
      *((_QWORD *)v4 + 2) = (char *)v6 + v8;
      *((_QWORD *)v4 + 4) = 0xBFF0000000000000;
    }
  }
  return this;
}

BOOL altitude::AnimationList::isDead(altitude::AnimationList *this)
{
  return *((_QWORD *)this + 1) == *((_QWORD *)this + 2);
}

void altitude::AnimationList::~AnimationList(altitude::AnimationList *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E42C3FF0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 == v2)
  {
    if (!v3)
      return;
    goto LABEL_3;
  }
  do
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
      v2 = (_QWORD *)*((_QWORD *)this + 2);
    }
    ++v3;
  }
  while (v3 != v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
LABEL_3:
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E42C3FF0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 == v2)
  {
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    if (!v3)
LABEL_9:
      JUMPOUT(0x1A1AF4E00);
  }
  *((_QWORD *)this + 2) = v3;
  operator delete(v3);
  goto LABEL_9;
}

uint64_t altitude::LinearAnimation::update(altitude::LinearAnimation *this, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  altitude::LinearAnimation *v8;
  double v9;

  if (a2 > 0.0 && *((double *)this + 8) < a3)
    *((double *)this + 9) = *((double *)this + 9) + a3;
  v3 = a2 - *((double *)this + 9);
  v4 = *((double *)this + 5);
  *((_BYTE *)this + 80) = v3 >= v4;
  if (v3 < v4)
    v5 = (*((double *)this + 7) - *((double *)this + 6)) * v3 / v4 + *((double *)this + 6);
  else
    v5 = *((double *)this + 7);
  v9 = v5;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v6 + 48))(v6, &v9);
  std::__throw_bad_function_call[abi:nn180100]();
  return altitude::LinearAnimation::isDead(v8);
}

uint64_t altitude::LinearAnimation::isDead(altitude::LinearAnimation *this)
{
  return *((unsigned __int8 *)this + 80);
}

void altitude::LinearAnimation::~LinearAnimation(altitude::LinearAnimation *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42C4528;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E42C4528;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

void altitude::AnimationList::addObject(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v5 = (char *)a1[2];
  v4 = a1[3];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)a1[1];
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_29;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)a1[1];
      }
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  a1[2] = v7;
}

BOOL ggl::Fog::FogPipelineSetup::constantDataIsEnabled(ggl::Fog::FogPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Fog::FogPipelineSetup::textureIsEnabled(ggl::Fog::FogPipelineSetup *this)
{
  return 0;
}

uint64_t md::LabelTileCollisionInfo::LabelTileCollisionInfo(uint64_t result, _OWORD *a2)
{
  __int128 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  malloc_zone_t *zone;
  int v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  malloc_zone_t *v16;
  int v17;
  uint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  malloc_zone_t *v21;
  int v22;
  uint64_t v23;
  geo::read_write_lock *v24;
  const char *v25;
  malloc_zone_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v2 = a2[1];
  *(_OWORD *)(result + 64) = *a2;
  *(_OWORD *)(result + 80) = v2;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  if ((v3 & 1) == 0)
  {
    v27 = result;
    result = v27;
    if (v7)
    {
      v8 = operator new();
      *(_QWORD *)(v8 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v8 + 24) = "VectorKitLabels";
      *(_OWORD *)(v8 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v8 = &off_1E42B5668;
      *(_QWORD *)(v8 + 8) = "VectorKitLabels";
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 184) = 0u;
      *(_OWORD *)(v8 + 200) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      *(_OWORD *)(v8 + 232) = 0u;
      *(_QWORD *)(v8 + 248) = 0;
      *(_OWORD *)(v8 + 56) = 0u;
      v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v8 + 56), 0);
      if ((_DWORD)v9)
        geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v8 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v8 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v8;
      result = v27;
    }
  }
  *(_QWORD *)(result + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  if ((v4 & 1) == 0)
  {
    v28 = result;
    result = v28;
    if (v12)
    {
      v13 = operator new();
      *(_QWORD *)(v13 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v13 + 24) = "VectorKitLabels";
      *(_OWORD *)(v13 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v13 = &off_1E42B5668;
      *(_QWORD *)(v13 + 8) = "VectorKitLabels";
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      *(_OWORD *)(v13 + 184) = 0u;
      *(_OWORD *)(v13 + 200) = 0u;
      *(_OWORD *)(v13 + 216) = 0u;
      *(_OWORD *)(v13 + 232) = 0u;
      *(_QWORD *)(v13 + 248) = 0;
      *(_OWORD *)(v13 + 56) = 0u;
      v14 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 56), 0);
      if ((_DWORD)v14)
        geo::read_write_lock::logFailure(v14, (uint64_t)"initialization", v15);
      v16 = malloc_create_zone(0, 0);
      *(_QWORD *)(v13 + 48) = v16;
      malloc_set_zone_name(v16, "VectorKitLabels");
      *(_QWORD *)(v13 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v13;
      result = v28;
    }
  }
  *(_QWORD *)(result + 152) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  if ((v5 & 1) == 0)
  {
    v29 = result;
    result = v29;
    if (v17)
    {
      v18 = operator new();
      *(_QWORD *)(v18 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v18 + 24) = "VectorKitLabels";
      *(_OWORD *)(v18 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v18 = &off_1E42B5668;
      *(_QWORD *)(v18 + 8) = "VectorKitLabels";
      *(_OWORD *)(v18 + 72) = 0u;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_QWORD *)(v18 + 248) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      v19 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v18 + 56), 0);
      if ((_DWORD)v19)
        geo::read_write_lock::logFailure(v19, (uint64_t)"initialization", v20);
      v21 = malloc_create_zone(0, 0);
      *(_QWORD *)(v18 + 48) = v21;
      malloc_set_zone_name(v21, "VectorKitLabels");
      *(_QWORD *)(v18 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v18;
      result = v29;
    }
  }
  *(_QWORD *)(result + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  if ((v6 & 1) == 0)
  {
    v30 = result;
    result = v30;
    if (v22)
    {
      v23 = operator new();
      *(_QWORD *)(v23 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v23 + 24) = "VectorKitLabels";
      *(_OWORD *)(v23 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v23 = &off_1E42B5668;
      *(_QWORD *)(v23 + 8) = "VectorKitLabels";
      *(_OWORD *)(v23 + 72) = 0u;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      *(_OWORD *)(v23 + 152) = 0u;
      *(_OWORD *)(v23 + 168) = 0u;
      *(_OWORD *)(v23 + 184) = 0u;
      *(_OWORD *)(v23 + 200) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_QWORD *)(v23 + 248) = 0;
      *(_OWORD *)(v23 + 56) = 0u;
      v24 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v23 + 56), 0);
      if ((_DWORD)v24)
        geo::read_write_lock::logFailure(v24, (uint64_t)"initialization", v25);
      v26 = malloc_create_zone(0, 0);
      *(_QWORD *)(v23 + 48) = v26;
      malloc_set_zone_name(v26, "VectorKitLabels");
      *(_QWORD *)(v23 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v23;
      result = v30;
    }
  }
  *(_QWORD *)(result + 216) = mdm::Allocator::instance(void)::alloc;
  *(_WORD *)(result + 224) = 0;
  return result;
}

void md::LabelTileCollisionInfo::simplifyPaths(md::LabelTileCollisionInfo *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t *v28;
  uint64_t v29;
  int32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  unsigned int *v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  unsigned int v79;
  double v80;
  double v81;
  double v82;
  double v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD __b[2];

  v5 = *((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  {
    v86 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v86, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  if (v4 == v5)
  {
    v87 = 0;
    v11 = 0;
    v13 = 0;
  }
  else
  {
    v8 = v4 - v5;
    if (v4 - v5 < 0)
      abort();
    v9 = v8 >> 3;
    v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, (unint64_t)v8 >> 1, 4);
    v11 = (unsigned int *)v10;
    v12 = 0;
    do
    {
      if (v10 + v12)
        *(_DWORD *)(v10 + v12) = 0;
      v12 += 4;
    }
    while (4 * v9 != v12);
    v87 = v10 + 4 * v9;
    v13 = v87;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 24);
  v15 = (unsigned int *)*((_QWORD *)this + 25);
  v88 = v7;
  if (v14 == v15)
  {
    v16 = 0;
    v33 = (v13 - (uint64_t)v11) >> 2;
    v31 = v87;
LABEL_39:
    if (v33 <= v16)
      v38 = v31;
    else
      v38 = (unint64_t)&v11[v16];
    goto LABEL_54;
  }
  LODWORD(v16) = 0;
  do
  {
    v18 = *v14;
    v17 = v14[1];
    v19 = &v11[v16];
    if (v17 > 2)
    {
      v20 = *((_QWORD *)this + 12) + 8 * v18;
      LODWORD(__b[0]) = 1;
      *v19 = 0;
      v21 = v17 - 1;
      geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(v20, 0, v17 - 1, (uint64_t)&v11[v16], __b, a2);
      v22 = LODWORD(__b[0]);
      v17 = ++LODWORD(__b[0]);
      v19[v22] = v21;
      if (!v17)
        goto LABEL_12;
    }
    else if (v17 && (*v19 = 0, v17 != 1))
    {
      v19[1] = 1;
      LODWORD(__b[0]) = v17;
    }
    else
    {
      LODWORD(__b[0]) = v17;
      if (!v17)
        goto LABEL_12;
    }
    v23 = v17 + v16;
    v24 = v16;
    v25 = 4 * v23 - v24 * 4 - 4;
    if (v25 >= 0x1C)
    {
      v26 = (v25 >> 2) + 1;
      v27 = vdupq_n_s32(v18);
      v28 = (int32x4_t *)&v11[v24 + 4];
      v29 = v26 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = vaddq_s32(*v28, v27);
        v28[-1] = vaddq_s32(v28[-1], v27);
        *v28 = v30;
        v28 += 2;
        v29 -= 8;
      }
      while (v29);
      if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_12;
      v19 += v26 & 0x7FFFFFFFFFFFFFF8;
    }
    do
      *v19++ += v18;
    while (v19 != &v11[v23]);
    v17 = __b[0];
LABEL_12:
    *v14 = v16;
    v14[1] = v17;
    v14 += 2;
    v16 = v17 + v16;
  }
  while (v14 != v15);
  v31 = v87;
  v32 = v87 - (_QWORD)v11;
  v33 = (v87 - (uint64_t)v11) >> 2;
  if (v33 >= v16)
    goto LABEL_39;
  v34 = v32 >> 1;
  if (v32 >> 1 <= v16)
    v34 = v16;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
    v35 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = v34;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 4 * v35, 4);
  v37 = (_DWORD *)(v36 + 4 * v33);
  v38 = v36 + 4 * v16;
  v39 = 4 * v16 - 4 * v33;
  v40 = v37;
  do
  {
    if (v40)
      *v40 = 0;
    ++v40;
    v39 -= 4;
  }
  while (v39);
  v41 = v36 + 4 * v35;
  if ((unsigned int *)v87 != v11)
  {
    v42 = v87 - (_QWORD)v11 - 4;
    if (v42 < 0x2C)
    {
      v43 = (unsigned int *)v87;
      goto LABEL_50;
    }
    if ((unint64_t)v11 - v36 < 0x20)
    {
      v43 = (unsigned int *)v87;
      goto LABEL_50;
    }
    v44 = (v42 >> 2) + 1;
    v43 = (unsigned int *)(v87 - 4 * (v44 & 0x7FFFFFFFFFFFFFF8));
    v45 = (_OWORD *)(v36 + 4 * v33 - 16);
    v46 = (__int128 *)(v87 - 16);
    v47 = v44 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 8;
    }
    while (v47);
    v37 -= v44 & 0x7FFFFFFFFFFFFFF8;
    if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_50:
        v49 = *--v43;
        *--v37 = v49;
      }
      while (v43 != v11);
    }
  }
  if (v11)
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v11, v32);
  v11 = v37;
  v31 = v41;
LABEL_54:
  v50 = (uint64_t)(v38 - (_QWORD)v11) >> 2;
  v52 = *((_QWORD *)this + 20);
  v51 = (_QWORD *)*((_QWORD *)this + 21);
  v53 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - v52) >> 3);
  v54 = v50 - v53;
  if (v50 <= v53)
  {
    v63 = v31;
    if (v50 < v53)
      *((_QWORD *)this + 21) = v52 + 24 * v50;
  }
  else
  {
    v55 = *((_QWORD *)this + 22);
    if (0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v51) >> 3) >= v54)
    {
      v64 = &v51[3 * v54];
      v65 = 24 * v50 - 24 * v53;
      do
      {
        if (v51)
        {
          *v51 = 0;
          v51[1] = 0;
          v51[2] = 0;
        }
        v51 += 3;
        v65 -= 24;
      }
      while (v65);
      v63 = v31;
      *((_QWORD *)this + 21) = v64;
    }
    else
    {
      if (v38 - (unint64_t)v11 >= 0x2AAAAAAAAAAAAAACLL)
        abort();
      v56 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v52) >> 3);
      v57 = 0x5555555555555556 * ((v55 - v52) >> 3);
      if (v57 <= v50)
        v57 = (uint64_t)(v38 - (_QWORD)v11) >> 2;
      if (v56 >= 0x555555555555555)
        v58 = 0xAAAAAAAAAAAAAAALL;
      else
        v58 = v57;
      v59 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23), 24 * v58, 8);
      v60 = (_QWORD *)(v59 + 24 * v53);
      v61 = 24 * v50 - 24 * v53;
      v62 = v60;
      do
      {
        if (v62)
        {
          *v62 = 0;
          v62[1] = 0;
          v62[2] = 0;
        }
        v62 += 3;
        v61 -= 24;
      }
      while (v61);
      v67 = *((_QWORD *)this + 20);
      v66 = *((_QWORD *)this + 21);
      if (v66 != v67)
      {
        do
        {
          v68 = *(_OWORD *)(v66 - 24);
          *(v60 - 1) = *(_QWORD *)(v66 - 8);
          *(_OWORD *)(v60 - 3) = v68;
          v60 -= 3;
          v66 -= 24;
        }
        while (v66 != v67);
        v66 = *((_QWORD *)this + 20);
      }
      v63 = v31;
      *((_QWORD *)this + 20) = v60;
      *((_QWORD *)this + 21) = v59 + 24 * v50;
      v69 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v59 + 24 * v58;
      if (v66)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v66, v69 - v66);
    }
  }
  v70 = *((_QWORD *)this + 12);
  if ((unsigned int *)v38 == v11)
  {
    v85 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 13) = v70;
    *((_QWORD *)this + 17) = v85;
    if (v11)
      goto LABEL_90;
  }
  else
  {
    v71 = *((_QWORD *)this + 16);
    if (v50 <= 1)
      v72 = 1;
    else
      v72 = v50;
    v73 = (double *)(*((_QWORD *)this + 20) + 16);
    v74 = v11;
    do
    {
      v79 = *v74++;
      v78 = v79;
      v80 = *((double *)this + 10);
      v81 = *((double *)this + 8);
      if (v80 < v81 || (v82 = *((double *)this + 11), v83 = *((double *)this + 9), v82 < v83))
      {
        memset_pattern16(__b, &unk_19FFB63B0, 0x10uLL);
        v75 = *(double *)__b;
        v76 = *(double *)&__b[1];
      }
      else
      {
        v84 = (float *)(v70 + 8 * v78);
        v75 = v81 + (v80 - v81) * *v84;
        v76 = v83 + (v82 - v83) * v84[1];
      }
      v77 = *(float *)(v71 + 4 * v78);
      *(v73 - 2) = v75;
      *(v73 - 1) = v76;
      *v73 = v77;
      v73 += 3;
      --v72;
    }
    while (v72);
    *((_QWORD *)this + 13) = v70;
    *((_QWORD *)this + 17) = v71;
LABEL_90:
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v88 + 40))(v88, v11, v63 - (_QWORD)v11);
  }
}

void sub_19FB8E84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v1)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, v2 - v1);
  _Unwind_Resume(exception_object);
}

float std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>(uint64_t *a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  int64_t v54;
  char *v55;
  char *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  const float *v68;
  float *v69;
  uint64_t v70;

  if (a5 < 1)
    return *(float *)&v18;
  v6 = a3;
  v9 = *a1;
  v8 = a1[1];
  v10 = a2 - *a1;
  v11 = v10 >> 3;
  v12 = *a1 + (v10 & 0xFFFFFFFFFFFFFFF8);
  v13 = a1[2];
  if (a5 > (uint64_t)(v13 - v8) >> 3)
  {
    v14 = a5 + ((uint64_t)(v8 - v9) >> 3);
    if (v14 >> 61)
      abort();
    v15 = v13 - v9;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 8 * v16, 4);
    else
      v17 = 0;
    v23 = (_QWORD *)(v17 + 8 * v11);
    v24 = 8 * a5;
    v25 = &v23[a5];
    v26 = 8 * a5;
    v27 = v23;
    do
    {
      if (v27)
        *v27 = *(_QWORD *)v6;
      ++v27;
      v6 += 8;
      v26 -= 8;
    }
    while (v26);
    v28 = *a1;
    if (*a1 == v12)
      goto LABEL_31;
    v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
    v30 = v29 - v28 - 8;
    if (v30 >= 0x68)
    {
      v31 = v12;
      if (v29 - ((v10 & 0xFFFFFFFFFFFFFFF8) + v17) >= 0x20)
      {
        v32 = (v30 >> 3) + 1;
        v31 = v12 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = 8 * v11 - 16;
        v34 = (__int128 *)(v9 + v33);
        v35 = (_OWORD *)(v17 + v33);
        v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *v35 = v18;
          v34 -= 2;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v23 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
    }
    else
    {
      v31 = v12;
    }
    do
    {
      v37 = *(_QWORD *)(v31 - 8);
      v31 -= 8;
      *--v23 = v37;
    }
    while (v31 != v28);
LABEL_31:
    v38 = a1[1];
    if (v38 != v12)
    {
      v39 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
      v40 = v38 - v39 - 8;
      if (v40 < 0x68)
        goto LABEL_72;
      if ((v10 & 0xFFFFFFFFFFFFFFF8) + v17 + v24 - v39 < 0x20)
        goto LABEL_72;
      v41 = (v40 >> 3) + 1;
      v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      v12 += v42;
      v43 = (_OWORD *)(8 * v11 + v24 + v17 + 16);
      v44 = (__int128 *)(8 * v11 + v9 + 16);
      v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *(v44 - 1);
        v46 = *v44;
        *(v43 - 1) = v18;
        *v43 = v46;
        v43 += 2;
        v44 += 2;
        v45 -= 4;
      }
      while (v45);
      v25 = (_QWORD *)((char *)v25 + v42);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        do
        {
          v47 = *(_QWORD *)v12;
          v12 += 8;
          *v25++ = v47;
        }
        while (v12 != v38);
      }
    }
    v48 = *a1;
    *a1 = (uint64_t)v23;
    a1[1] = (uint64_t)v25;
    v49 = a1[2];
    a1[2] = v17 + 8 * v16;
    if (v48)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v48, v49 - v48);
    return *(float *)&v18;
  }
  v19 = (uint64_t)(v8 - v12) >> 3;
  if (v19 >= a5)
  {
    v20 = (_QWORD *)(a3 + 8 * a5);
    v22 = (char *)a1[1];
    goto LABEL_42;
  }
  v20 = (_QWORD *)(a3 + 8 * v19);
  if (v20 == a4)
  {
    v22 = (char *)a1[1];
  }
  else
  {
    v21 = v20;
    v22 = (char *)a1[1];
    do
    {
      if (v22)
        *(_QWORD *)v22 = *v21;
      ++v21;
      v22 += 8;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v8 - v12) >= 1)
  {
LABEL_42:
    v50 = (char *)(v12 + 8 * a5);
    v51 = &v22[-8 * a5];
    v52 = v22;
    if ((unint64_t)v51 < v8)
    {
      v53 = &v22[-8 * a5];
      v52 = v22;
      do
      {
        if (v52)
          *(_QWORD *)v52 = *(_QWORD *)v53;
        v53 += 8;
        v52 += 8;
      }
      while ((unint64_t)v53 < v8);
    }
    a1[1] = (uint64_t)v52;
    if (v22 != v50)
    {
      v54 = v22 - v50;
      if ((unint64_t)(v54 - 8) < 0x78
        || &v22[-(v54 & 0xFFFFFFFFFFFFFFF8)] < v51
        && v9 + v54 + (v10 & 0xFFFFFFFFFFFFFFF8) - (v54 & 0xFFFFFFFFFFFFFFF8) < (unint64_t)v22)
      {
        v55 = v22;
        goto LABEL_52;
      }
      v67 = ((unint64_t)(v54 - 8) >> 3) + 1;
      v55 = &v22[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      v68 = (const float *)(v51 - 32);
      v69 = (float *)(v22 - 32);
      v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(float32x4x2_t *)&v18 = vld2q_f32(v68);
        v68 -= 8;
        vst2q_f32(v69, *(float32x4x2_t *)&v18);
        v69 -= 8;
        v70 -= 4;
      }
      while (v70);
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v51 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_52:
        v56 = v55 - 4;
        do
        {
          v57 = *((_DWORD *)v51 - 2);
          v51 -= 8;
          *((_DWORD *)v56 - 1) = v57;
          LODWORD(v18) = *((_DWORD *)v51 + 1);
          *(_DWORD *)v56 = v18;
          v56 -= 8;
        }
        while (v51 != (char *)v12);
      }
    }
    if (v20 == (_QWORD *)a3)
      return *(float *)&v18;
    v58 = (unint64_t)v20 - a3 - 8;
    if (v58 >= 0x78
      && (v12 >= (v58 & 0xFFFFFFFFFFFFFFF8) + a3 + 8
       || (v10 & 0xFFFFFFFFFFFFFFF8) + v9 + (v58 & 0xFFFFFFFFFFFFFFF8) + 8 <= a3))
    {
      v59 = (v58 >> 3) + 1;
      v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFF8);
      v12 += v60;
      v61 = (__int128 *)(a3 + 32);
      v62 = (_OWORD *)(v9 + 8 * v11 + 32);
      v63 = v59 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v64 = *(v61 - 2);
        v18 = *(v61 - 1);
        v66 = *v61;
        v65 = v61[1];
        v61 += 4;
        *(v62 - 2) = v64;
        *(v62 - 1) = v18;
        *v62 = v66;
        v62[1] = v65;
        v62 += 4;
        v63 -= 8;
      }
      while (v63);
      if (v59 == (v59 & 0x3FFFFFFFFFFFFFF8))
        return *(float *)&v18;
      v6 = a3 + v60;
    }
    do
    {
      *(_DWORD *)v12 = *(_DWORD *)v6;
      LODWORD(v18) = *(_DWORD *)(v6 + 4);
      *(_DWORD *)(v12 + 4) = v18;
      v6 += 8;
      v12 += 8;
    }
    while ((_QWORD *)v6 != v20);
  }
  return *(float *)&v18;
}

float **std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::insert(float **result, uint64_t a2, unint64_t a3, const float *a4)
{
  const float *v4;
  float **v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  float *v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  _DWORD *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  float *v54;

  if (!a3)
    return result;
  v4 = a4;
  v6 = result;
  v8 = *result;
  v7 = result[1];
  v9 = a2 - (_QWORD)*result;
  v10 = v9 >> 2;
  v11 = (float *)((char *)*result + (v9 & 0xFFFFFFFFFFFFFFFCLL));
  v12 = result[2];
  if (a3 > v12 - v7)
  {
    v13 = a3 + v7 - v8;
    if (v13 >> 62)
      abort();
    v14 = (char *)v12 - (char *)v8;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      result = (float **)(*(uint64_t (**)(float *, uint64_t, uint64_t))(*(_QWORD *)result[3] + 16))(result[3], 4 * v15, 4);
    else
      result = 0;
    v28 = (_DWORD *)result + v10;
    v29 = 4 * a3;
    v30 = (float *)&v28[a3];
    v31 = 4 * a3;
    v32 = v28;
    do
    {
      if (v32)
        *v32 = *(_DWORD *)v4;
      ++v32;
      v31 -= 4;
    }
    while (v31);
    v33 = *v6;
    if (*v6 == v11)
      goto LABEL_52;
    v34 = (uint64_t)v8 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
    v35 = v34 - (_QWORD)v33 - 4;
    if (v35 >= 0x3C)
    {
      v36 = v11;
      if (v34 - ((unint64_t)result + (v9 & 0xFFFFFFFFFFFFFFFCLL)) >= 0x20)
      {
        v37 = (v35 >> 2) + 1;
        v36 = &v11[-(v37 & 0x7FFFFFFFFFFFFFF8)];
        v38 = 4 * v10 - 16;
        v39 = (__int128 *)((char *)v8 + v38);
        v40 = (_OWORD *)((char *)result + v38);
        v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *v40 = v42;
          v39 -= 2;
          v40 -= 2;
          v41 -= 8;
        }
        while (v41);
        v28 -= v37 & 0x7FFFFFFFFFFFFFF8;
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_52;
      }
    }
    else
    {
      v36 = v11;
    }
    do
    {
      v43 = *((_DWORD *)v36-- - 1);
      *--v28 = v43;
    }
    while (v36 != v33);
LABEL_52:
    v44 = v6[1];
    if (v44 != v11)
    {
      v45 = (uint64_t)v8 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
      v46 = (unint64_t)v44 - v45 - 4;
      if (v46 < 0x3C)
        goto LABEL_65;
      if ((unint64_t)result + (v9 & 0xFFFFFFFFFFFFFFFCLL) + v29 - v45 < 0x20)
        goto LABEL_65;
      v47 = (v46 >> 2) + 1;
      v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
      v11 = (float *)((char *)v11 + v48);
      v49 = (_OWORD *)((char *)result + 4 * v10 + v29 + 16);
      v50 = (__int128 *)&v8[v10 + 4];
      v51 = v47 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v52 = *v50;
        *(v49 - 1) = *(v50 - 1);
        *v49 = v52;
        v49 += 2;
        v50 += 2;
        v51 -= 8;
      }
      while (v51);
      v30 = (float *)((char *)v30 + v48);
      if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_65:
        do
        {
          v53 = *(_DWORD *)v11++;
          *(_DWORD *)v30++ = v53;
        }
        while (v11 != v44);
      }
    }
    *v6 = (float *)v28;
    v6[1] = v30;
    v54 = v6[2];
    v6[2] = (float *)result + v15;
    if (v33)
      return (float **)(*(uint64_t (**)(float *, float *, int64_t))(*(_QWORD *)v6[3] + 40))(v6[3], v33, (char *)v54 - (char *)v33);
    return result;
  }
  v16 = v7 - v11;
  v17 = 4 * a3;
  v18 = (char *)result[1];
  v19 = a3;
  if (a3 <= v16)
  {
LABEL_18:
    v21 = (char *)&v11[(unint64_t)v17 / 4];
    v22 = (float *)&v18[-v17];
    v23 = (float *)v18;
    if (v22 < v7)
    {
      v23 = (float *)v18;
      do
      {
        if (v23)
          *v23 = *v22;
        ++v22;
        ++v23;
      }
      while (v22 < v7);
    }
    result[1] = v23;
    if (v18 != v21)
      result = (float **)memmove(&v18[-4 * ((v18 - v21) >> 2)], v11, v18 - v21);
    if (v11 <= v4)
    {
      if (v6[1] <= v4)
        v24 = 0;
      else
        v24 = a3;
      v4 += v24;
    }
    if (v19 >= 0xC && (v11 >= v4 + 1 || v4 >= (float *)((char *)&v8[v19] + (v9 & 0xFFFFFFFFFFFFFFFCLL))))
    {
      v11 += v19 & 0xFFFFFFFFFFFFFFF8;
      v25 = vld1q_dup_f32(v4);
      v26 = (float32x4_t *)&v8[v10 + 4];
      v27 = v19 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v26[-1] = v25;
        *v26 = v25;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
        return result;
      v19 &= 7u;
    }
    do
    {
      *v11++ = *v4;
      --v19;
    }
    while (v19);
    return result;
  }
  v20 = 0;
  v18 = (char *)&v7[a3 - v16];
  do
  {
    if (&v7[v20 / 4])
      v7[v20 / 4] = *a4;
    v20 += 4;
  }
  while (v17 - 4 * v16 != v20);
  result[1] = (float *)v18;
  if (v7 != v11)
  {
    v19 = v7 - v11;
    goto LABEL_18;
  }
  return result;
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5, double a6)
{
  uint64_t v10;
  double v11;
  uint64_t v17;
  uint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  unsigned int v22;
  float32x2_t v23;
  float32x2_t *v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  float32x2_t *v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;

  v10 = result;
  v11 = a6 * a6;
  __asm { FMOV            V11.2S, #1.0 }
  v17 = a3;
  while (1)
  {
    v18 = a2 + 1;
    if (v18 >= a3)
    {
      v22 = 0;
      v29 = 0.0;
    }
    else
    {
      v19 = *(float32x2_t *)(v10 + 8 * a2);
      v20 = vsub_f32(*(float32x2_t *)(v10 + 8 * v17), v19);
      v21 = vmul_f32(v20, v20);
      v22 = 0;
      if (vaddv_f32(v21) <= 1.0e-15)
      {
        v30 = (float32x2_t *)(v10 + 8 * v18);
        v31 = 0.0;
        do
        {
          v32 = *v30++;
          v33 = vsub_f32(v32, v19);
          v33.f32[0] = vaddv_f32(vmul_f32(v33, v33));
          v29 = fmaxf(v33.f32[0], v31);
          if (v33.f32[0] > v31)
            v22 = v18;
          LODWORD(v18) = v18 + 1;
          v31 = v29;
        }
        while (a3 != (_DWORD)v18);
      }
      else
      {
        v23 = vdiv_f32(_D11, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 1), v21));
        v24 = (float32x2_t *)(v10 + 8 * v18);
        v25 = 0.0;
        do
        {
          v26 = *v24++;
          v27 = vmul_f32(vsub_f32(v26, v19), v20);
          v28 = vsub_f32(v26, vmla_n_f32(v19, v20, fminf(fmaxf(vmul_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27), v23).f32[0], 0.0), 1.0)));
          v27.f32[0] = vaddv_f32(vmul_f32(v28, v28));
          v29 = fmaxf(v27.f32[0], v25);
          if (v27.f32[0] > v25)
            v22 = v18;
          LODWORD(v18) = v18 + 1;
          v25 = v29;
        }
        while (a3 != (_DWORD)v18);
      }
    }
    if (v11 >= v29)
      break;
    result = geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(v10, a6);
    v34 = *a5;
    *a5 = v34 + 1;
    *(_DWORD *)(a4 + 4 * v34) = v22;
    a2 = v22;
  }
  return result;
}

void sub_19FB8F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void **v10;
  uint64_t v11;
  void ***v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  void *v21;

  if (*(_BYTE *)(v11 + 208))
  {
    if (*(char *)(v11 + 239) < 0)
      operator delete(*v16);
    *(_BYTE *)(v11 + 208) = 0;
    if (*(char *)(v11 + 207) < 0)
    {
LABEL_3:
      operator delete(*v15);
      if (*(char *)(v11 + 183) < 0)
      {
LABEL_9:
        operator delete(*v14);
        v18 = *v13;
        if (*v13)
        {
LABEL_14:
          *(_QWORD *)(v11 + 128) = v18;
          operator delete(v18);
          v19 = *v10;
          if (!*v10)
            goto LABEL_16;
          goto LABEL_15;
        }
LABEL_12:
        v19 = *v10;
        if (!*v10)
        {
LABEL_16:
          std::vector<md::VenueBuilding>::~vector[abi:nn180100](v12);
          v20 = *(std::__shared_weak_count **)(v11 + 40);
          if (v20)
            std::__shared_weak_count::__release_weak(v20);
          std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v11);
          operator delete(v21);

          _Unwind_Resume(a1);
        }
LABEL_15:
        *(_QWORD *)(v11 + 104) = v19;
        operator delete(v19);
        goto LABEL_16;
      }
LABEL_11:
      v18 = *v13;
      if (*v13)
        goto LABEL_14;
      goto LABEL_12;
    }
  }
  else if (*(char *)(v11 + 207) < 0)
  {
    goto LABEL_3;
  }
  if (*(char *)(v11 + 183) < 0)
    goto LABEL_9;
  goto LABEL_11;
}

void sub_19FB8F8C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FB8F974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void sub_19FB8FA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::VenueFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::VenueFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::VenueFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

md::TerrainDebugOptions *md::TerrainDebugOptions::TerrainDebugOptions(md::TerrainDebugOptions *this, VKDebugSettings *a2)
{
  VKDebugSettings *v3;

  v3 = a2;
  *(_DWORD *)this = 16842752;
  *((_BYTE *)this + 4) = 1;
  *(_WORD *)this = -[VKDebugSettings daVinciDebugRasterStyleAttribute](v3, "daVinciDebugRasterStyleAttribute");
  *((_BYTE *)this + 2) = -[VKDebugSettings daVinciAridityGroundTintingEnabled](v3, "daVinciAridityGroundTintingEnabled");
  *((_BYTE *)this + 3) = -[VKDebugSettings daVinciTemperatureGroundTintingEnabled](v3, "daVinciTemperatureGroundTintingEnabled");
  *((_BYTE *)this + 4) = -[VKDebugSettings daVinciMaterialRastersEnabled](v3, "daVinciMaterialRastersEnabled");

  return this;
}

void sub_19FB8FB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void altitude::CompleteGlobeTileSetCullingGraph::~CompleteGlobeTileSetCullingGraph(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E42C66D0;
  *((_QWORD *)this + 5) = &unk_1E42C6728;
  v2 = (char *)this + 40;
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E42C4BD8;
  *((_QWORD *)this + 5) = &unk_1E42C4C28;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    altitude::TileManager::unregisterTileListener(v4, (uint64_t)v2);
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E42C66D0;
  *((_QWORD *)this + 5) = &unk_1E42C6728;
  v2 = (char *)this + 40;
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E42C4BD8;
  *((_QWORD *)this + 5) = &unk_1E42C4C28;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    altitude::TileManager::unregisterTileListener(v4, (uint64_t)v2);
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

void altitude::CompleteGlobeTileSetCullingGraph::cull(altitude::CompleteGlobeTileSetCullingGraph *this, karo::graphics::View *a2, karo::graphics::Viewport *a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  altitude::Tile **v10;
  altitude::Tile **v11;
  uint64_t v12;
  _QWORD *v13;
  altitude::Tile *v14;
  char *TileView;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  altitude::Tile **v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  altitude::Tile *v30;
  NSObject *v31;
  _QWORD *v32;
  const char *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  karo::graphics::View **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  karo::graphics::View **i;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81[2];
  void *__p[2];
  int v83;
  void *v84[2];
  void *v85[2];
  int v86;
  uint8_t buf[4];
  _QWORD *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)v85 = 0u;
  v86 = 1065353216;
  *(_OWORD *)v81 = 0u;
  *(_OWORD *)__p = 0u;
  v83 = 1065353216;
  v5 = (unint64_t *)*((_QWORD *)this + 10);
  v6 = (unint64_t *)*((_QWORD *)this + 11);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      std::__hash_table<altitude::Tile *,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,std::allocator<altitude::Tile *>>::__emplace_unique_key_args<altitude::Tile *,altitude::Tile * const&>((float *)v84, v7, v7);
    }
    while (v5 != v6);
    v5 = (unint64_t *)*((_QWORD *)this + 10);
  }
  *((_QWORD *)this + 11) = v5;
  v8 = *((_QWORD *)this + 13);
  if (!v8)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v31 = GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_125;
    v32 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v32 = (_QWORD *)*v32;
    *(_DWORD *)buf = 136315138;
    v88 = v32;
    v33 = "No tile set attached to %s. Culling disabled!";
LABEL_91:
    _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
    goto LABEL_125;
  }
  v9 = *((_QWORD *)this + 6);
  if (!v9)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v31 = GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
      goto LABEL_125;
    v54 = (_QWORD *)((char *)this + 8);
    if (*((char *)this + 31) < 0)
      v54 = (_QWORD *)*v54;
    *(_DWORD *)buf = 136315138;
    v88 = v54;
    v33 = "No tile manager attached to %s. Culling disabled!";
    goto LABEL_91;
  }
  *((_BYTE *)a2 + 1291) = *(_BYTE *)(v9 + 205);
  v10 = *(altitude::Tile ***)(v8 + 40);
  v11 = *(altitude::Tile ***)(v8 + 48);
  if (v10 == v11)
  {
    *((_QWORD *)this + 16) = 0;
  }
  else
  {
    v12 = *(unsigned int *)(*((_QWORD *)this + 4) + 88);
    v80 = v12;
    do
    {
      v14 = *v10;
      if (*(_BYTE *)(*((_QWORD *)*v10 + 36) + 166))
      {
        TileView = altitude::Tile::getOrCreateTileView(*v10, a2);
        if ((altitude::TileView::isCulled((altitude::TileView *)TileView, v12) & 1) == 0)
        {
          v17 = (char *)*((_QWORD *)this + 11);
          v16 = *((_QWORD *)this + 12);
          if ((unint64_t)v17 < v16)
          {
            *(_QWORD *)v17 = v14;
            v13 = v17 + 8;
          }
          else
          {
            v18 = (char *)*((_QWORD *)this + 10);
            v19 = (v17 - v18) >> 3;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              abort();
            v21 = v16 - (_QWORD)v18;
            if (v21 >> 2 > v20)
              v20 = v21 >> 2;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            v79 = v20;
            if (v20)
            {
              if (v20 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v22 = operator new(8 * v20);
            }
            else
            {
              v22 = 0;
            }
            v23 = (altitude::Tile **)&v22[8 * v19];
            *v23 = v14;
            v13 = v23 + 1;
            if (v17 == v18)
            {
              v18 = v17;
            }
            else
            {
              v24 = v17 - 8 - v18;
              if (v24 < 0x58)
                goto LABEL_138;
              if ((unint64_t)(v18 - v22) < 0x20)
                goto LABEL_138;
              v25 = (v24 >> 3) + 1;
              v26 = &v22[8 * v19 - 16];
              v27 = v17 - 16;
              v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v29 = *(_OWORD *)v27;
                *(v26 - 1) = *((_OWORD *)v27 - 1);
                *v26 = v29;
                v26 -= 2;
                v27 -= 32;
                v28 -= 4;
              }
              while (v28);
              v23 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
              v17 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
              if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_138:
                do
                {
                  v30 = (altitude::Tile *)*((_QWORD *)v17 - 1);
                  v17 -= 8;
                  *--v23 = v30;
                }
                while (v17 != v18);
                v18 = (char *)*((_QWORD *)this + 10);
              }
            }
            *((_QWORD *)this + 10) = v23;
            *((_QWORD *)this + 11) = v13;
            *((_QWORD *)this + 12) = &v22[8 * v79];
            if (v18)
              operator delete(v18);
            v12 = v80;
          }
          *((_QWORD *)this + 11) = v13;
          std::__hash_table<altitude::Tile *,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,std::allocator<altitude::Tile *>>::__emplace_unique_key_args<altitude::Tile *,altitude::Tile * const&>((float *)v81, (unint64_t)v14, (uint64_t)v14);
          *((_QWORD *)v14 + 46) = v12;
        }
      }
      ++v10;
    }
    while (v10 != v11);
    v35 = (unint64_t *)*((_QWORD *)this + 10);
    v34 = (unint64_t *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 16) = v34 - v35;
    if (v34 != v35)
    {
      while (1)
      {
        v36 = *v35;
        if (v84[1])
        {
          v37 = 0x9DDFEA08EB382D69 * (((8 * v36) + 8) ^ HIDWORD(v36));
          v38 = 0x9DDFEA08EB382D69 * (HIDWORD(v36) ^ (v37 >> 47) ^ v37);
          v39 = 0x9DDFEA08EB382D69 * (v38 ^ (v38 >> 47));
          v40 = (uint8x8_t)vcnt_s8((int8x8_t)v84[1]);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.u32[0] > 1uLL)
          {
            v41 = v39;
            if ((void *)v39 >= v84[1])
              v41 = v39 % (unint64_t)v84[1];
          }
          else
          {
            v41 = v39 & ((unint64_t)v84[1] - 1);
          }
          v42 = (_QWORD *)*((_QWORD *)v84[0] + v41);
          if (v42)
          {
            v43 = (_QWORD *)*v42;
            if (v43)
            {
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v45 = v43[1];
                  if (v45 == v39)
                  {
                    if (v43[2] == v36)
                      goto LABEL_43;
                  }
                  else if ((v45 & ((uint64_t)v84[1] - 1)) != v41)
                  {
                    goto LABEL_64;
                  }
                  v43 = (_QWORD *)*v43;
                  if (!v43)
                    goto LABEL_64;
                }
              }
              do
              {
                v44 = v43[1];
                if (v44 == v39)
                {
                  if (v43[2] == v36)
                    goto LABEL_43;
                }
                else
                {
                  if ((void *)v44 >= v84[1])
                    v44 %= (unint64_t)v84[1];
                  if (v44 != v41)
                    break;
                }
                v43 = (_QWORD *)*v43;
              }
              while (v43);
            }
          }
        }
LABEL_64:
        v46 = *(_QWORD *)(v36 + 160);
        if (!v46)
          goto LABEL_76;
        if (v46 >= 3)
          break;
        if (*(karo::graphics::View **)(v36 + 184) == a2)
        {
          v53 = 0;
          goto LABEL_83;
        }
        if (v46 != 1 && *(karo::graphics::View **)(v36 + 232) == a2)
        {
          v53 = 1;
LABEL_83:
          v46 = v36 + 48 * v53 + 168;
          if (*(_BYTE *)(v46 + 40))
            goto LABEL_78;
LABEL_77:
          *(_DWORD *)(v46 + 44) = v80;
          goto LABEL_78;
        }
LABEL_73:
        v46 = 0;
        if (!MEMORY[0x28])
          goto LABEL_77;
LABEL_78:
        *(_BYTE *)(v46 + 40) = 1;
        v50 = (uint64_t *)*((_QWORD *)this + 7);
        v51 = (uint64_t *)*((_QWORD *)this + 8);
        while (v50 != v51)
        {
          v52 = *v50++;
          (*(void (**)(uint64_t, unint64_t, karo::graphics::View *))(*(_QWORD *)v52 + 16))(v52, v36, a2);
        }
LABEL_43:
        if (++v35 == v34)
          goto LABEL_93;
      }
      v47 = 0;
      v48 = *(_QWORD *)(v36 + 264);
      v49 = (karo::graphics::View **)(v48 + 16);
      while (*v49 != a2)
      {
        ++v47;
        v49 += 6;
        if (v46 == v47)
          goto LABEL_73;
      }
      v46 = v48 + 48 * v47;
LABEL_76:
      if (!*(_BYTE *)(v46 + 40))
        goto LABEL_77;
      goto LABEL_78;
    }
  }
LABEL_93:
  v55 = v85[0];
  if (v85[0])
  {
    do
    {
      v56 = v55[2];
      if (v81[1])
      {
        v57 = 0x9DDFEA08EB382D69 * (((8 * v56) + 8) ^ HIDWORD(v56));
        v58 = 0x9DDFEA08EB382D69 * (HIDWORD(v56) ^ (v57 >> 47) ^ v57);
        v59 = 0x9DDFEA08EB382D69 * (v58 ^ (v58 >> 47));
        v60 = (uint8x8_t)vcnt_s8((int8x8_t)v81[1]);
        v60.i16[0] = vaddlv_u8(v60);
        if (v60.u32[0] > 1uLL)
        {
          v61 = v59;
          if ((void *)v59 >= v81[1])
            v61 = v59 % (unint64_t)v81[1];
        }
        else
        {
          v61 = v59 & ((unint64_t)v81[1] - 1);
        }
        v62 = (_QWORD *)*((_QWORD *)v81[0] + v61);
        if (v62)
        {
          v63 = (_QWORD *)*v62;
          if (v63)
          {
            if (v60.u32[0] < 2uLL)
            {
              while (1)
              {
                v65 = v63[1];
                if (v65 == v59)
                {
                  if (v63[2] == v56)
                    goto LABEL_95;
                }
                else if ((v65 & ((uint64_t)v81[1] - 1)) != v61)
                {
                  goto LABEL_116;
                }
                v63 = (_QWORD *)*v63;
                if (!v63)
                  goto LABEL_116;
              }
            }
            do
            {
              v64 = v63[1];
              if (v64 == v59)
              {
                if (v63[2] == v56)
                  goto LABEL_95;
              }
              else
              {
                if ((void *)v64 >= v81[1])
                  v64 %= (unint64_t)v81[1];
                if (v64 != v61)
                  break;
              }
              v63 = (_QWORD *)*v63;
            }
            while (v63);
          }
        }
      }
LABEL_116:
      if (*(_QWORD *)(v56 + 160) < 3uLL)
      {
        v69 = v56 + 48 * (*(_QWORD *)(v56 + 184) != (_QWORD)a2) + 168;
      }
      else
      {
        v66 = 0;
        v67 = *(_QWORD *)(v56 + 264);
        for (i = (karo::graphics::View **)(v67 + 16); *i != a2; i += 6)
          ++v66;
        v69 = v67 + 48 * v66;
      }
      *(_BYTE *)(v69 + 40) = 0;
      v70 = (uint64_t *)*((_QWORD *)this + 7);
      v71 = (uint64_t *)*((_QWORD *)this + 8);
      while (v70 != v71)
      {
        v72 = *v70++;
        (*(void (**)(uint64_t, unint64_t, karo::graphics::View *))(*(_QWORD *)v72 + 24))(v72, v56, a2);
      }
LABEL_95:
      v55 = (_QWORD *)*v55;
    }
    while (v55);
  }
LABEL_125:
  v73 = __p[0];
  if (__p[0])
  {
    do
    {
      v74 = (_QWORD *)*v73;
      operator delete(v73);
      v73 = v74;
    }
    while (v74);
  }
  v75 = v81[0];
  v81[0] = 0;
  if (v75)
    operator delete(v75);
  v76 = v85[0];
  if (v85[0])
  {
    do
    {
      v77 = (_QWORD *)*v76;
      operator delete(v76);
      v76 = v77;
    }
    while (v77);
  }
  v78 = v84[0];
  v84[0] = 0;
  if (v78)
    operator delete(v78);
}

uint64_t altitude::CompleteGlobeTileSetCullingGraph::cull(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t altitude::CompleteGlobeTileSetCullingGraph::getAcceptedTilesCache(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  return (uint64_t)this + 80;
}

void altitude::CompleteGlobeTileSetCullingGraph::onChildTileRemoved(altitude::CompleteGlobeTileSetCullingGraph *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11) - v3;
  v5 = v4 >> 3;
  v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0)
    goto LABEL_8;
  v7 = 0;
  while (*(altitude::Tile **)(v3 + 8 * v7) != a3)
  {
    if (v6 == ++v7)
      goto LABEL_8;
  }
  v6 = (v5 - 1);
  *(_QWORD *)(v3 + 8 * v7) = *(_QWORD *)(v3 + 8 * v6);
  v3 = *((_QWORD *)this + 10);
  v5 = (*((_QWORD *)this + 11) - v3) >> 3;
  if (v6 > v5)
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)this + 80, v6 - v5);
  }
  else
  {
LABEL_8:
    if (v5 > v6)
      *((_QWORD *)this + 11) = v3 + 8 * v6;
  }
}

void `non-virtual thunk to'altitude::CompleteGlobeTileSetCullingGraph::~CompleteGlobeTileSetCullingGraph(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *((_QWORD *)this - 5) = off_1E42C66D0;
  *(_QWORD *)this = &unk_1E42C6728;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this - 5) = off_1E42C4BD8;
  *(_QWORD *)this = &unk_1E42C4C28;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)this);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this - 5) = off_1E42C34D0;
  if (*((char *)this - 9) < 0)
    operator delete(*((void **)this - 4));
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  *((_QWORD *)this - 5) = off_1E42C66D0;
  *(_QWORD *)this = &unk_1E42C6728;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this - 5) = off_1E42C4BD8;
  *(_QWORD *)this = &unk_1E42C4C28;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)this);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this - 5) = off_1E42C34D0;
  if (*((char *)this - 9) < 0)
    operator delete(*((void **)this - 4));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::CompleteGlobeTileSetCullingGraph::onChildTileRemoved(altitude::CompleteGlobeTileSetCullingGraph *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6) - v3;
  v5 = v4 >> 3;
  v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0)
    goto LABEL_8;
  v7 = 0;
  while (*(altitude::Tile **)(v3 + 8 * v7) != a3)
  {
    if (v6 == ++v7)
      goto LABEL_8;
  }
  v6 = (v5 - 1);
  *(_QWORD *)(v3 + 8 * v7) = *(_QWORD *)(v3 + 8 * v6);
  v3 = *((_QWORD *)this + 5);
  v5 = (*((_QWORD *)this + 6) - v3) >> 3;
  if (v6 > v5)
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)this + 40, v6 - v5);
  }
  else
  {
LABEL_8:
    if (v5 > v6)
      *((_QWORD *)this + 6) = v3 + 8 * v6;
  }
}

void std::__hash_table<altitude::Tile *,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,std::allocator<altitude::Tile *>>::__emplace_unique_key_args<altitude::Tile *,altitude::Tile * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_59;
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v44 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v44)
          operator delete(v44);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
    {
LABEL_58:
      v10 = prime;
      goto LABEL_59;
    }
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_58;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_58;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          goto LABEL_63;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
      }
      v39 = v28;
LABEL_63:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_58;
    }
  }
LABEL_72:
  v40 = *(_QWORD **)a1;
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v41)
  {
    *v16 = *v41;
LABEL_80:
    *v41 = v16;
    goto LABEL_81;
  }
  v42 = *((_QWORD *)a1 + 2);
  *v16 = v42;
  *((_QWORD *)a1 + 2) = v16;
  v40[v3] = a1 + 4;
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10)
        v43 %= v10;
    }
    else
    {
      v43 &= v10 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

_QWORD *md::LabelCustomFeatureSupport::mapTileWasDestroyed(_QWORD *this, md::LabelMapTile *a2)
{
  md::LabelMapTile **v2;
  md::LabelMapTile **v3;

  v3 = (md::LabelMapTile **)this[13];
  v2 = (md::LabelMapTile **)this[14];
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        v3 = (md::LabelMapTile **)this[14];
        break;
      }
    }
  }
  if (v3 != v2)
    return md::LabelCustomFeatureSupport::removeTile(this, a2);
  return this;
}

void md::LabelCustomFeatureSupport::venueStateDidChange(md::LabelCustomFeatureSupport *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)*((_QWORD *)this + 9);
  v2 = (char *)this + 80;
  if (v1 != (_QWORD *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != (_QWORD *)v2);
  }
}

void md::LabelCustomFeatureSupport::styleManagerDidChange(md::LabelCustomFeatureSupport *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)*((_QWORD *)this + 9);
  v2 = (char *)this + 80;
  if (v1 != (_QWORD *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != (_QWORD *)v2);
  }
}

void `non-virtual thunk to'md::LabelCustomFeatureSupport::venueStateDidChange(md::LabelCustomFeatureSupport *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (_QWORD *)((char *)this + 72))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != (_QWORD *)v2);
  }
}

_QWORD *md::LabelCustomFeatureSupport::removeTile(_QWORD *this, md::LabelMapTile *a2)
{
  md::LabelMapTile **v3;
  md::LabelMapTile **v4;
  md::LabelMapTile **v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  md::LabelMapTile **v22;
  md::LabelMapTile **v23;
  md::LabelMapTile **v24;
  md::LabelMapTile **v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = (md::LabelMapTile **)this[14];
  v4 = (md::LabelMapTile **)this[13];
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        v4 = (md::LabelMapTile **)this[14];
        break;
      }
    }
  }
  v5 = v4 + 1;
  v6 = v4 == v3 || v5 == v3;
  if (v6)
  {
    if (v4 != v3)
LABEL_16:
      this[14] = v4;
  }
  else
  {
    do
    {
      if (*v5 != a2)
        *v4++ = *v5;
      ++v5;
    }
    while (v5 != v3);
    if (v4 != (md::LabelMapTile **)this[14])
      goto LABEL_16;
  }
  v7 = (_QWORD *)this[9];
  v8 = this + 10;
  if (v7 != this + 10)
  {
    while (1)
    {
      v9 = v7[14];
      if (!v9)
        break;
      v10 = *((unsigned __int8 *)a2 + 9);
      v11 = v7 + 14;
      v12 = *((_DWORD *)a2 + 3);
      v13 = *((_DWORD *)a2 + 4);
      do
      {
        v17 = *(unsigned __int8 *)(v9 + 33);
        if (v17 == v10)
        {
          v18 = *(_DWORD *)(v9 + 40);
          v19 = v18 < v13;
          if (v18 == v13)
            v19 = *(_DWORD *)(v9 + 36) < v12;
          v14 = v19;
        }
        else
        {
          v14 = v17 < v10;
        }
        v15 = !v14;
        if (v14)
          v16 = (uint64_t *)(v9 + 8);
        else
          v16 = (uint64_t *)v9;
        if (v15)
          v11 = (_QWORD *)v9;
        v9 = *v16;
      }
      while (*v16);
      if (v11 == v7 + 14)
        break;
      v20 = *((unsigned __int8 *)v11 + 33);
      if (v10 == v20)
      {
        v21 = *((_DWORD *)v11 + 10);
        if (v13 == v21)
        {
          if (v12 < *((_DWORD *)v11 + 9))
            break;
        }
        else if (v13 < v21)
        {
          break;
        }
      }
      else if (v10 < v20)
      {
        break;
      }
      v23 = (md::LabelMapTile **)v11[15];
      v22 = (md::LabelMapTile **)v11[16];
      v24 = v23;
      if (v23 != v22)
      {
        while (*v24 != a2)
        {
          if (++v24 == v22)
          {
            v24 = (md::LabelMapTile **)v11[16];
            break;
          }
        }
      }
      if (v24 != v22)
      {
        v25 = v24 + 1;
        if (v24 + 1 != v22)
        {
          do
          {
            if (*v25 != a2)
              *v24++ = *v25;
            ++v25;
          }
          while (v25 != v22);
          v23 = (md::LabelMapTile **)v11[15];
          v22 = (md::LabelMapTile **)v11[16];
        }
      }
      if (v24 != v22)
      {
        v22 = v24;
        v11[16] = v24;
      }
      if (v23 != v22)
        break;
      md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v7 + 5), (NSArray *)v11[20], 0);
      v28 = (_QWORD *)v11[1];
      v29 = v11;
      if (v28)
      {
        do
        {
          v30 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v29[2];
          v6 = *v30 == (_QWORD)v29;
          v29 = v30;
        }
        while (!v6);
      }
      if ((_QWORD *)v7[13] == v11)
        v7[13] = v30;
      --v7[16];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[14], v11);
      v11[19] = &off_1E42B53F0;

      v31 = v11[15];
      if (v31)
      {
        v11[16] = v31;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v11[18] + 40))(v11[18], v31, v11[17] - v31);
      }
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v7[15] + 40))(v7[15], v11, 184);
      v26 = (_QWORD *)v7[1];
      if (!v26)
      {
        do
        {
LABEL_71:
          v27 = (_QWORD *)v7[2];
          v6 = *v27 == (_QWORD)v7;
          v7 = v27;
        }
        while (!v6);
        goto LABEL_19;
      }
      do
      {
LABEL_59:
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
LABEL_19:
      v7 = v27;
      if (v27 == v8)
        return this;
    }
    v26 = (_QWORD *)v7[1];
    if (!v26)
      goto LABEL_71;
    goto LABEL_59;
  }
  return this;
}

void std::__shared_ptr_emplace<md::LabelFeatureSupportCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelFeatureSupportCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D2C68;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D2C68;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42D2C68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42D2C68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

__int128 *std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **v4;
  void **v5;
  void *v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t *v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  NSArray *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t j;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  __int128 *v58;
  unsigned __int8 v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t (**v68)();
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t (*v73)();
  unint64_t v74;
  int *v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t (**v79)();
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned __int16 *v83;
  unint64_t v84;
  uint64_t (*v85)();
  unint64_t v86;
  int *v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t (**v91)();
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unsigned __int16 *v95;
  unint64_t v96;
  uint64_t (*v97)();
  unint64_t v98;
  int *v99;
  int v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *p_shared_weak_owners;
  unint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  double v176;
  uint64_t (***v177)();
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  unsigned int v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  id v188;
  uint64_t *v189;
  uint64_t (**v190)();
  VKClusterFeatureAnnotation *v191;
  uint64_t v192;
  VKClusterFeatureAnnotation *v193;
  VKClusterFeatureAnnotation *v194;
  VKClusterFeatureAnnotation *v195;
  void *v196;
  _QWORD *v197;
  _QWORD *k;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  int v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t i;
  void *v208;
  void *v209;
  md::LabelPoint *v210;
  uint64_t v211;
  unsigned __int8 v212;
  double *v213;
  BOOL v214;
  double v215;
  BOOL v216;
  uint64_t v217;
  void *v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  id v224;
  void *v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  BOOL v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  __int128 v241;
  unint64_t *v242;
  unint64_t v243;
  char *v244;
  char *v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *p_shared_owners;
  unint64_t v249;
  unsigned __int8 v250;
  uint64_t *v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  __int128 v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t *v267;
  __int128 v268;
  uint64_t *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  _OWORD *v285;
  char *v286;
  uint64_t v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _OWORD *v296;
  char *v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  unint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  __int128 *result;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  md::LabelCustomFeatureProvider *v319;
  _QWORD *v320;
  uint64_t v321;
  id obj;
  id obja;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  void *v332;
  id v333;
  char *v334;
  int v335;
  double v336;
  uint64_t *v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t (**v341)();
  std::__shared_weak_count *v342;
  id *v343;
  id v344;
  char *v345;
  char *v346;
  unint64_t v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;

  v353 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  {
    v314 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v314, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v325 = mdm::Allocator::instance(void)::alloc;
  v5 = (void **)v2[13];
  v4 = (void **)v2[14];
  v321 = a1;
  v6 = *(void **)(a1 + 16);
  if (v5 != v4)
  {
    while (*v5 != v6)
    {
      if (++v5 == v4)
      {
        v5 = (void **)v2[14];
        break;
      }
    }
  }
  if (v5 == v4 || (v7 = (_QWORD *)v2[9], v320 = v2 + 10, v7 == v2 + 10))
  {
    v308 = 0;
    v8 = 0;
    v309 = 0;
    goto LABEL_414;
  }
  v334 = 0;
  v8 = 0;
  v330 = 0;
  do
  {
    v324 = v7;
    v9 = v7 + 14;
    v10 = v7[14];
    if (v10)
    {
      v11 = *(_QWORD *)(v321 + 16);
      v319 = (md::LabelCustomFeatureProvider *)(v7 + 5);
      v12 = *(unsigned __int8 *)(v11 + 9);
      v15 = v11 + 12;
      v13 = *(_DWORD *)(v11 + 12);
      v14 = *(_DWORD *)(v15 + 4);
      v16 = v9;
      do
      {
        v20 = *(unsigned __int8 *)(v10 + 33);
        if (v20 == v12)
        {
          v21 = *(_DWORD *)(v10 + 40);
          v22 = v21 < v14;
          if (v21 == v14)
            v22 = *(_DWORD *)(v10 + 36) < v13;
          v17 = v22;
        }
        else
        {
          v17 = v20 < v12;
        }
        v18 = !v17;
        if (v17)
          v19 = (uint64_t *)(v10 + 8);
        else
          v19 = (uint64_t *)v10;
        if (v18)
          v16 = (_QWORD *)v10;
        v10 = *v19;
      }
      while (*v19);
      if (v16 != v9)
      {
        v23 = *((unsigned __int8 *)v16 + 33);
        if (v12 == v23)
        {
          v24 = *((_DWORD *)v16 + 10);
          if (v14 == v24)
          {
            if (v13 < *((_DWORD *)v16 + 9))
              goto LABEL_377;
          }
          else if (v14 < v24)
          {
            goto LABEL_377;
          }
        }
        else if (v12 < v23)
        {
          goto LABEL_377;
        }
        if (*((_BYTE *)v16 + 176))
          goto LABEL_276;
        if (!*((_BYTE *)v324 + 280))
        {
          v45 = v324[5];
          v46 = (id)v324[11];
          objc_msgSend(v46, "annotationsInMapRect:", *((double *)v16 + 7), *((double *)v16 + 8), *((double *)v16 + 9), *((double *)v16 + 10));
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          md::LabelCustomFeatureSupport::filterAnnotations(v45, v47);
          v48 = (NSArray *)objc_claimAutoreleasedReturnValue();

LABEL_275:
          md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap(v319, v48, 0);
          md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap(v319, (NSArray *)v16[20], 0);
          v217 = -[NSArray copy](v48, "copy");
          v218 = (void *)v16[20];
          v16[20] = v217;

          *((_BYTE *)v16 + 176) = 1;
LABEL_276:
          v351 = 0u;
          v352 = 0u;
          v349 = 0u;
          v350 = 0u;
          v219 = (id)v16[20];
          v220 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
          if (v220)
          {
            v221 = *(_QWORD *)v350;
            v222 = v324 + 31;
            v333 = v219;
            v329 = *(_QWORD *)v350;
            do
            {
              v223 = 0;
              do
              {
                if (*(_QWORD *)v350 != v221)
                  objc_enumerationMutation(v219);
                v224 = *(id *)(*((_QWORD *)&v349 + 1) + 8 * v223);
                v225 = v224;
                v226 = (_QWORD *)*v222;
                if (*v222)
                {
                  v227 = v324 + 31;
                  do
                  {
                    v228 = v226[4];
                    v229 = v228 >= (unint64_t)v224;
                    if (v228 >= (unint64_t)v224)
                      v230 = v226;
                    else
                      v230 = v226 + 1;
                    if (v229)
                      v227 = v226;
                    v226 = (_QWORD *)*v230;
                  }
                  while (*v230);
                  if (v227 != v222 && (unint64_t)v224 >= v227[4])
                  {
                    v231 = v227[5];
                    if (v231)
                    {
                      if ((unint64_t)v8 >= v330)
                      {
                        v235 = (v8 - v334) >> 4;
                        v236 = v235 + 1;
                        if ((unint64_t)(v235 + 1) >> 60)
                          abort();
                        v237 = v330 - (_QWORD)v334;
                        if ((uint64_t)(v330 - (_QWORD)v334) >> 3 > v236)
                          v236 = (uint64_t)(v330 - (_QWORD)v334) >> 3;
                        if (v237 >= 0x7FFFFFFFFFFFFFF0)
                          v238 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v238 = v236;
                        if (v238)
                        {
                          v239 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v325 + 16))(v325, 16 * v238, 8);
                          v240 = (char *)(v239 + 16 * v235);
                          v330 = v239 + 16 * v238;
                          if (v239)
                          {
                            v241 = *(_OWORD *)(v227 + 5);
                            *(_OWORD *)v240 = v241;
                            if (*((_QWORD *)&v241 + 1))
                            {
                              v242 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
                              do
                                v243 = __ldxr(v242);
                              while (__stxr(v243 + 1, v242));
                            }
                          }
                        }
                        else
                        {
                          v330 = 0;
                          v240 = (char *)(16 * v235);
                        }
                        v244 = v240;
                        if (v8 != v334)
                        {
                          v245 = v8;
                          v244 = v240;
                          do
                          {
                            v246 = *((_OWORD *)v245 - 1);
                            v245 -= 16;
                            *((_OWORD *)v244 - 1) = v246;
                            v244 -= 16;
                            *(_QWORD *)v245 = 0;
                            *((_QWORD *)v245 + 1) = 0;
                          }
                          while (v245 != v334);
                          do
                          {
                            v247 = (std::__shared_weak_count *)*((_QWORD *)v8 - 1);
                            if (v247)
                            {
                              p_shared_owners = (unint64_t *)&v247->__shared_owners_;
                              do
                                v249 = __ldaxr(p_shared_owners);
                              while (__stlxr(v249 - 1, p_shared_owners));
                              if (!v249)
                              {
                                ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                                std::__shared_weak_count::__release_weak(v247);
                              }
                            }
                            v8 -= 16;
                          }
                          while (v8 != v334);
                        }
                        v8 = v240 + 16;
                        if (v334)
                          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v325 + 40))(v325, v334, v237);
                        v334 = v244;
                        v221 = v329;
                        v219 = v333;
                      }
                      else
                      {
                        if (v8)
                        {
                          *(_QWORD *)v8 = v231;
                          v232 = v227[6];
                          *((_QWORD *)v8 + 1) = v232;
                          if (v232)
                          {
                            v233 = (unint64_t *)(v232 + 8);
                            do
                              v234 = __ldxr(v233);
                            while (__stxr(v234 + 1, v233));
                          }
                        }
                        v8 += 16;
                      }
                      if (!*(_DWORD *)(v227[5] + 128))
                      {
                        v337 = 0;
                        v338 = 0;
                        v339 = 0;
                        if ((v250 & 1) == 0
                        {
                          v277 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v277, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        v340 = mdm::Allocator::instance(void)::alloc;
                        v251 = v338;
                        if (v338 >= v339)
                        {
                          v256 = v337;
                          v257 = ((char *)v338 - (char *)v337) >> 4;
                          v258 = v257 + 1;
                          if ((unint64_t)(v257 + 1) >> 60)
                            abort();
                          v259 = (char *)v339 - (char *)v337;
                          if (v339 - v337 > v258)
                            v258 = v259 >> 3;
                          if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF0)
                            v260 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v260 = v258;
                          if (v260)
                          {
                            v261 = (*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
                            v262 = (uint64_t *)(v261 + 16 * v257);
                            v263 = (uint64_t *)(v261 + 16 * v260);
                            if (v261)
                            {
                              v264 = *(_OWORD *)(v227 + 5);
                              *(_OWORD *)v262 = v264;
                              if (*((_QWORD *)&v264 + 1))
                              {
                                v265 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
                                do
                                  v266 = __ldxr(v265);
                                while (__stxr(v266 + 1, v265));
                                v251 = v338;
                              }
                            }
                          }
                          else
                          {
                            v263 = 0;
                            v262 = (uint64_t *)(16 * v257);
                          }
                          v255 = v262 + 2;
                          if (v251 == v256)
                          {
                            v269 = v339;
                            v337 = v262;
                            v339 = v263;
                          }
                          else
                          {
                            v267 = v251;
                            do
                            {
                              v268 = *((_OWORD *)v267 - 1);
                              v267 -= 2;
                              *((_OWORD *)v262 - 1) = v268;
                              v262 -= 2;
                              *v267 = 0;
                              v267[1] = 0;
                            }
                            while (v267 != v256);
                            v337 = v262;
                            v338 = v255;
                            v269 = v339;
                            v339 = v263;
                            do
                            {
                              v270 = (std::__shared_weak_count *)*(v251 - 1);
                              if (v270)
                              {
                                v271 = (unint64_t *)&v270->__shared_owners_;
                                do
                                  v272 = __ldaxr(v271);
                                while (__stlxr(v272 - 1, v271));
                                if (!v272)
                                {
                                  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                                  std::__shared_weak_count::__release_weak(v270);
                                }
                              }
                              v251 -= 2;
                            }
                            while (v251 != v256);
                          }
                          if (v256)
                            (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v340 + 40))(v340, v256, (char *)v269 - (char *)v256);
                        }
                        else
                        {
                          if (v338)
                          {
                            *v338 = v227[5];
                            v252 = v227[6];
                            v251[1] = v252;
                            if (v252)
                            {
                              v253 = (unint64_t *)(v252 + 8);
                              do
                                v254 = __ldxr(v253);
                              while (__stxr(v254 + 1, v253));
                            }
                          }
                          v255 = v251 + 2;
                        }
                        v338 = v255;
                        md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v324[6] + 296), &v337);
                        v273 = v337;
                        v219 = v333;
                        if (v337)
                        {
                          if (v255 != v337)
                          {
                            do
                            {
                              v274 = (std::__shared_weak_count *)*(v255 - 1);
                              if (v274)
                              {
                                v275 = (unint64_t *)&v274->__shared_owners_;
                                do
                                  v276 = __ldaxr(v275);
                                while (__stlxr(v276 - 1, v275));
                                if (!v276)
                                {
                                  ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                                  std::__shared_weak_count::__release_weak(v274);
                                }
                              }
                              v255 -= 2;
                            }
                            while (v255 != v273);
                            v255 = v337;
                          }
                          v338 = v273;
                          (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v340 + 40))(v340, v255, (char *)v339 - (char *)v255);
                        }
                        v221 = v329;
                      }
                    }
                  }
                }

                ++v223;
              }
              while (v223 != v220);
              v278 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
              v220 = v278;
            }
            while (v278);
          }

          goto LABEL_377;
        }
        v25 = v324[34];
        if (*(_BYTE *)(v25 + 128))
        {
LABEL_249:
          v48 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v351 = 0u;
          v352 = 0u;
          v349 = 0u;
          v350 = 0u;
          v204 = *(id *)(v25 + 80);
          v205 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
          if (v205)
          {
            v206 = *(_QWORD *)v350;
            do
            {
              for (i = 0; i != v205; ++i)
              {
                if (*(_QWORD *)v350 != v206)
                  objc_enumerationMutation(v204);
                v208 = *(void **)(*((_QWORD *)&v349 + 1) + 8 * i);
                objc_msgSend(v208, "feature");
                v209 = (void *)objc_claimAutoreleasedReturnValue();
                v211 = objc_msgSend(v209, "pointFeature") + 192;
                v210 = *(md::LabelPoint **)v211;
                if (*(_QWORD *)(v211 + 8) == *(_QWORD *)v211)
                {
                  v210 = (md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
                  if ((v212 & 1) == 0)
                  {
                    {
                      qword_1ECE2FD68 = 0;
                      md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
                      *(_OWORD *)&qword_1ECE2FD58 = 0u;
                      dword_1ECE2FD70 = 2139095039;
                      word_1ECE2FD74 = 256;
                      byte_1ECE2FD76 = 1;
                    }
                    v210 = (md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
                  }
                }
                v213 = (double *)md::LabelPoint::mercatorPoint(v210);
                v214 = *v213 >= *((double *)v16 + 11) && *v213 < *((double *)v16 + 13);
                if (v214
                  && ((v215 = v213[1], v215 >= *((double *)v16 + 12))
                    ? (v216 = v215 < *((double *)v16 + 14))
                    : (v216 = 0),
                      v216))
                {

                  -[NSArray addObject:](v48, "addObject:", v208);
                }
                else
                {

                }
              }
              v205 = objc_msgSend(v204, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
            }
            while (v205);
          }

          goto LABEL_275;
        }
        md::LabelClusterProvider::initializeSourceAnnotations((md::LabelClusterProvider *)v324[34]);
        v26 = operator new(0x68uLL);
        v26[1] = 0;
        v26[2] = 0;
        v26[3] = &off_1E4291B28;
        *v26 = &off_1E42DB6D8;
        v328 = v25;
        v26[4] = v25;
        v26[5] = 0;
        v26[6] = 0;
        v26[7] = 0;
        {
          v305 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v305, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v26[8] = mdm::Allocator::instance(void)::alloc;
        v26[9] = 0;
        v26[10] = 0;
        v26[11] = 0;
        {
          v306 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v306, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v26[12] = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v25 + 112) = v26 + 3;
        v29 = *(std::__shared_weak_count **)(v25 + 120);
        v318 = v328 + 112;
        *(_QWORD *)(v328 + 120) = v26;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = *(_QWORD *)(v328 + 112);
        v315 = *(_QWORD *)(v328 + 16);
        obj = *(id *)(v328 + 56);
        v33 = objc_msgSend(obj, "count");
        v34 = *(_QWORD *)(v32 + 32);
        v331 = v32;
        v35 = *(_QWORD *)(v32 + 16);
        v316 = 8 * v33;
        v317 = v33;
        if (v33 <= (unint64_t)((v34 - v35) >> 3))
        {
LABEL_52:
          v337 = 0;
          v338 = 0;
          v339 = 0;
          {
            v307 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v307, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v340 = mdm::Allocator::instance(void)::alloc;
          if (v317)
          {
            v337 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                   + 16))(mdm::Allocator::instance(void)::alloc, v316, 8);
            v338 = v337;
            v339 = &v337[v317];
          }
          v351 = 0u;
          v352 = 0u;
          v349 = 0u;
          v350 = 0u;
          obja = obj;
          v51 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
          if (v51)
          {
            v326 = *(_QWORD *)v350;
            do
            {
              v327 = v51;
              for (j = 0; j != v327; ++j)
              {
                if (*(_QWORD *)v350 != v326)
                  objc_enumerationMutation(obja);
                v53 = *(void **)(*((_QWORD *)&v349 + 1) + 8 * j);
                objc_msgSend(v53, "feature");
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                v55 = objc_msgSend(v54, "pointFeature");
                v56 = v54;
                v57 = operator new();
                v58 = *(__int128 **)(v55 + 192);
                if (*(__int128 **)(v55 + 200) == v58)
                {
                  v58 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
                  if ((v59 & 1) == 0)
                  {
                    {
                      qword_1ECE2FD68 = 0;
                      md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
                      *(_OWORD *)&qword_1ECE2FD58 = 0u;
                      dword_1ECE2FD70 = 2139095039;
                      word_1ECE2FD74 = 256;
                      byte_1ECE2FD76 = 1;
                    }
                  }
                }
                v60 = v53;
                *(_QWORD *)v57 = off_1E428BF18;
                *(_QWORD *)(v57 + 8) = 0x437C000000000000;
                v61 = *((_QWORD *)v58 + 2);
                *(_OWORD *)(v57 + 16) = *v58;
                *(_QWORD *)(v57 + 32) = v61;
                *(_OWORD *)(v57 + 40) = *(__int128 *)((char *)v58 + 24);
                LODWORD(v61) = *(_DWORD *)((char *)v58 + 43);
                *(_DWORD *)(v57 + 56) = *((_DWORD *)v58 + 10);
                *(_DWORD *)(v57 + 59) = v61;
                *(_BYTE *)(v57 + 64) = 0;
                *(_BYTE *)(v57 + 68) = 0;
                *(_QWORD *)(v57 + 72) = 0;
                *(_BYTE *)(v57 + 80) = 0;
                *(_OWORD *)(v57 + 84) = xmmword_19FFB4C10;
                *(_QWORD *)(v57 + 104) = 0;
                *(_BYTE *)(v57 + 112) = 0;
                *(_QWORD *)v57 = &off_1E429CAC8;
                v62 = v60;
                *(_QWORD *)(v57 + 120) = &off_1E42B5570;
                *(_QWORD *)(v57 + 128) = v62;
                objc_msgSend(v62, "feature");
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                v64 = v63;
                v65 = v56;
                if (v63)
                {
                  objc_msgSend(v63, "styleAttributes");
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  v67 = v66;
                  if (v66)
                  {
                    objc_msgSend(v66, "featureStyleAttributesPtr");
                  }
                  else
                  {
                    v341 = 0;
                    v342 = 0;
                  }

                  v68 = v341;
                  if (!v341)
                    goto LABEL_124;
                  v69 = v342;
                  if (v342)
                  {
                    v70 = (unint64_t *)&v342->__shared_owners_;
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                  }
                  v72 = *((unsigned __int8 *)v68 + 33);
                  if (*((_BYTE *)v68 + 33))
                  {
                    v73 = *v68;
                    if (*(_DWORD *)v73 == 6)
                    {
                      v74 = 0;
LABEL_73:
                      *(_DWORD *)(v57 + 84) = *((unsigned __int16 *)v73 + 4 * v74 + 2);
                      if (!v69)
                      {
LABEL_83:
                        v79 = v341;
                        v80 = v342;
                        if (v342)
                          goto LABEL_84;
                        goto LABEL_86;
                      }
LABEL_80:
                      v77 = (unint64_t *)&v69->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (v78)
                        goto LABEL_83;
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                      v79 = v341;
                      v80 = v342;
                      if (v342)
                      {
LABEL_84:
                        v81 = (unint64_t *)&v80->__shared_owners_;
                        do
                          v82 = __ldxr(v81);
                        while (__stxr(v82 + 1, v81));
                      }
LABEL_86:
                      v83 = (unsigned __int16 *)(v57 + 92);
                      if (v79)
                      {
                        v84 = *((unsigned __int8 *)v79 + 33);
                        v83 = (unsigned __int16 *)(v57 + 92);
                        if (*((_BYTE *)v79 + 33))
                        {
                          v85 = *v79;
                          if (*(_DWORD *)v85 == 82)
                          {
                            v86 = 0;
LABEL_90:
                            v83 = (unsigned __int16 *)((char *)v85 + 8 * v86 + 4);
                          }
                          else
                          {
                            v86 = 0;
                            v87 = (int *)((char *)v85 + 8);
                            do
                            {
                              if (v84 - 1 == v86)
                              {
                                v83 = (unsigned __int16 *)(v57 + 92);
                                goto LABEL_99;
                              }
                              v88 = *v87;
                              v87 += 2;
                              ++v86;
                            }
                            while (v88 != 82);
                            v83 = (unsigned __int16 *)(v57 + 92);
                            if (v86 < v84)
                              goto LABEL_90;
                          }
                        }
                      }
LABEL_99:
                      *(_DWORD *)(v57 + 92) = *v83;
                      if (!v80)
                        goto LABEL_103;
                      v89 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                        v91 = v341;
                        v92 = v342;
                        if (v342)
                          goto LABEL_104;
                      }
                      else
                      {
LABEL_103:
                        v91 = v341;
                        v92 = v342;
                        if (v342)
                        {
LABEL_104:
                          v93 = (unint64_t *)&v92->__shared_owners_;
                          do
                            v94 = __ldxr(v93);
                          while (__stxr(v94 + 1, v93));
                        }
                      }
                      v95 = (unsigned __int16 *)(v57 + 88);
                      if (v91)
                      {
                        v96 = *((unsigned __int8 *)v91 + 33);
                        v95 = (unsigned __int16 *)(v57 + 88);
                        if (*((_BYTE *)v91 + 33))
                        {
                          v97 = *v91;
                          if (*(_DWORD *)v97 == 4)
                          {
                            v98 = 0;
LABEL_110:
                            v95 = (unsigned __int16 *)((char *)v97 + 8 * v98 + 4);
                          }
                          else
                          {
                            v98 = 0;
                            v99 = (int *)((char *)v97 + 8);
                            do
                            {
                              if (v96 - 1 == v98)
                              {
                                v95 = (unsigned __int16 *)(v57 + 88);
                                goto LABEL_119;
                              }
                              v100 = *v99;
                              v99 += 2;
                              ++v98;
                            }
                            while (v100 != 4);
                            v95 = (unsigned __int16 *)(v57 + 88);
                            if (v98 < v96)
                              goto LABEL_110;
                          }
                        }
                      }
LABEL_119:
                      *(_DWORD *)(v57 + 88) = *v95;
                      if (v92)
                      {
                        v101 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
LABEL_124:
                      v103 = objc_msgSend(v64, "pointFeature");
                      if (v103)
                      {
                        *(_DWORD *)(v57 + 96) = *(_DWORD *)(v103 + 84);
                        if (*(_BYTE *)(v103 + 237))
                        {
                          *(_BYTE *)(v57 + 112) = 1;
                          goto LABEL_128;
                        }
                        v104 = *(_QWORD *)(v103 + 248);
                        *(_BYTE *)(v57 + 112) = v104 != 0;
                        if (v104)
LABEL_128:
                          *(_QWORD *)(v57 + 104) = *(_QWORD *)(v103 + 256);
                        if (*(_BYTE *)(v103 + 220))
                        {
                          *(_DWORD *)(v57 + 64) = *(_DWORD *)(v103 + 216);
                          *(_BYTE *)(v57 + 68) = 1;
                        }
                      }
                      v105 = v342;
                      if (v342)
                      {
                        v106 = (unint64_t *)&v342->__shared_owners_;
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      goto LABEL_136;
                    }
                    v74 = 0;
                    v75 = (int *)((char *)v73 + 8);
                    while (v72 - 1 != v74)
                    {
                      v76 = *v75;
                      v75 += 2;
                      ++v74;
                      if (v76 == 6)
                      {
                        if (v74 < v72)
                          goto LABEL_73;
                        break;
                      }
                    }
                  }
                  *(_DWORD *)(v57 + 84) = *(unsigned __int16 *)(v57 + 84);
                  if (!v69)
                    goto LABEL_83;
                  goto LABEL_80;
                }
LABEL_136:

                *(_BYTE *)(v55 + 112) = 0;
                v108 = *(_QWORD *)(v328 + 112);
                v109 = *(std::__shared_weak_count **)(v328 + 120);
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldxr(v110);
                  while (__stxr(v111 + 1, v110));
                  p_shared_weak_owners = (unint64_t *)&v109->__shared_weak_owners_;
                  do
                    v113 = __ldxr(p_shared_weak_owners);
                  while (__stxr(v113 + 1, p_shared_weak_owners));
                  *(_QWORD *)(v55 + 288) = v57;
                  do
                    v114 = __ldxr(p_shared_weak_owners);
                  while (__stxr(v114 + 1, p_shared_weak_owners));
                }
                else
                {
                  *(_QWORD *)(v55 + 288) = v57;
                }
                v115 = *(std::__shared_weak_count **)(v55 + 304);
                *(_QWORD *)(v55 + 296) = v108;
                *(_QWORD *)(v55 + 304) = v109;
                if (v115)
                  std::__shared_weak_count::__release_weak(v115);
                if (v109)
                {
                  std::__shared_weak_count::__release_weak(v109);
                  v116 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v118 = *(uint64_t **)(v331 + 24);
                v119 = *(_QWORD *)(v331 + 32);
                if ((unint64_t)v118 < v119)
                {
                  if (v118)
                    *v118 = v57;
                  v120 = v118 + 1;
                  goto LABEL_180;
                }
                v121 = *(_QWORD *)(v331 + 16);
                v122 = ((uint64_t)v118 - v121) >> 3;
                v123 = v122 + 1;
                if ((unint64_t)(v122 + 1) >> 61)
                  abort();
                v124 = v119 - v121;
                if (v124 >> 2 > v123)
                  v123 = v124 >> 2;
                if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
                  v125 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v125 = v123;
                if (v125)
                {
                  v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v331 + 40) + 16))(*(_QWORD *)(v331 + 40), 8 * v125, 8);
                  v127 = (uint64_t *)(v126 + 8 * v122);
                  v128 = v126 + 8 * v125;
                  if (v126)
                    *v127 = v57;
                }
                else
                {
                  v128 = 0;
                  v127 = (uint64_t *)(8 * v122);
                }
                v120 = v127 + 1;
                v129 = *(char **)(v331 + 16);
                v130 = *(char **)(v331 + 24);
                if (v130 != v129)
                {
                  v131 = v130 - v129 - 8;
                  if (v131 <= 0x57
                    || (v132 = (v129 - v130 + 7) & 0xFFFFFFFFFFFFFFF8, &v130[v132] < (char *)v127)
                    && (char *)v127 + v132 < v130)
                  {
                    v133 = *(char **)(v331 + 24);
                    goto LABEL_171;
                  }
                  v157 = (v131 >> 3) + 1;
                  v133 = &v130[-8 * (v157 & 0x3FFFFFFFFFFFFFFCLL)];
                  v158 = v127 - 2;
                  v159 = v130 - 32;
                  v160 = v157 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v162 = *(_OWORD *)v159;
                    v161 = *((_OWORD *)v159 + 1);
                    *(_OWORD *)v159 = 0uLL;
                    *((_OWORD *)v159 + 1) = 0uLL;
                    v159 -= 32;
                    *((_OWORD *)v158 - 1) = v162;
                    *(_OWORD *)v158 = v161;
                    v158 -= 4;
                    v160 -= 4;
                  }
                  while (v160);
                  v127 -= v157 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_171:
                      v134 = *((_QWORD *)v133 - 1);
                      v133 -= 8;
                      *(_QWORD *)v133 = 0;
                      *--v127 = v134;
                    }
                    while (v133 != v129);
                  }
                  v130 = *(char **)(v331 + 16);
                  v135 = *(char **)(v331 + 24);
                  *(_QWORD *)(v331 + 16) = v127;
                  *(_QWORD *)(v331 + 24) = v120;
                  v136 = *(_QWORD *)(v331 + 32);
                  *(_QWORD *)(v331 + 32) = v128;
                  while (v135 != v130)
                  {
                    v138 = *((_QWORD *)v135 - 1);
                    v135 -= 8;
                    v137 = v138;
                    *(_QWORD *)v135 = 0;
                    if (v138)
                      (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
                  }
                  goto LABEL_177;
                }
                *(_QWORD *)(v331 + 16) = v127;
                *(_QWORD *)(v331 + 24) = v120;
                v136 = *(_QWORD *)(v331 + 32);
                *(_QWORD *)(v331 + 32) = v128;
LABEL_177:
                if (v130)
                  (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v331 + 40) + 40))(*(_QWORD *)(v331 + 40), v130, v136 - (_QWORD)v130);
                v65 = v56;
LABEL_180:
                *(_QWORD *)(v331 + 24) = v120;
                if (!*(_BYTE *)(v55 + 239) || *(_BYTE *)(v55 + 238))
                {
                  v140 = v338;
                  v139 = v339;
                  if (v338 < v339)
                  {
                    if (v338)
                      *v338 = v57;
                    v141 = v140 + 1;
LABEL_213:
                    v65 = v56;
                    v338 = v141;
                    goto LABEL_214;
                  }
                  v142 = v337;
                  v143 = v338 - v337;
                  v144 = v143 + 1;
                  if ((unint64_t)(v143 + 1) >> 61)
                    abort();
                  if (((char *)v339 - (char *)v337) >> 2 > v144)
                    v144 = ((char *)v339 - (char *)v337) >> 2;
                  if ((unint64_t)((char *)v339 - (char *)v337) >= 0x7FFFFFFFFFFFFFF8)
                    v145 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v145 = v144;
                  if (v145)
                  {
                    v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340 + 16))(v340, 8 * v145, 8);
                    v147 = (uint64_t *)(v146 + 8 * v143);
                    v148 = (uint64_t *)(v146 + 8 * v145);
                    if (v146)
                      *v147 = v57;
                    v149 = (char *)v140 - (char *)v142;
                    if (v140 != v142)
                    {
LABEL_196:
                      v150 = v149 - 8;
                      if ((unint64_t)(v149 - 8) < 0x38)
                      {
                        v151 = v147;
                      }
                      else
                      {
                        v151 = v147;
                        if ((unint64_t)((char *)v140 - (char *)v147) >= 0x20)
                        {
                          v152 = (v150 >> 3) + 1;
                          v153 = v147 - 2;
                          v154 = v140 - 2;
                          v155 = v152 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v156 = *(_OWORD *)v154;
                            *((_OWORD *)v153 - 1) = *((_OWORD *)v154 - 1);
                            *(_OWORD *)v153 = v156;
                            v153 -= 4;
                            v154 -= 4;
                            v155 -= 4;
                          }
                          while (v155);
                          v151 = &v147[-(v152 & 0x3FFFFFFFFFFFFFFCLL)];
                          v140 -= v152 & 0x3FFFFFFFFFFFFFFCLL;
                          if (v152 == (v152 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_210:
                            v140 = v142;
LABEL_211:
                            v141 = v147 + 1;
                            v337 = v151;
                            v339 = v148;
                            if (v140)
                              (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v340 + 40))(v340, v140, (char *)v139 - (char *)v140);
                            goto LABEL_213;
                          }
                        }
                      }
                      do
                      {
                        v163 = *--v140;
                        *--v151 = v163;
                      }
                      while (v140 != v142);
                      goto LABEL_210;
                    }
                  }
                  else
                  {
                    v148 = 0;
                    v147 = (uint64_t *)(8 * v143);
                    v149 = (char *)v338 - (char *)v337;
                    if (v338 != v337)
                      goto LABEL_196;
                  }
                  v151 = v147;
                  goto LABEL_211;
                }
LABEL_214:

              }
              v51 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v349, &v344, 16);
            }
            while (v51);
          }

          v164 = (std::__shared_weak_count *)v331;
          v165 = *(_QWORD *)(v331 + 48);
          if (v317 <= (*(_QWORD *)(v331 + 64) - v165) >> 3)
          {
LABEL_226:
            v176 = fminf(*(float *)(*(_QWORD *)(*(_QWORD *)(v315 + 336) + 136)+ 20 * *(unsigned __int8 *)(*(_QWORD *)(v315 + 336) + 158)+ 12), 2.0)* 20.0;
            v335 = 1102053376;
            v336 = v176;
            v341 = &off_1E42CD388;
            v342 = v164;
            v343 = (id *)&v341;
            md::LabelClusterBuilder::createClusters((uint64_t)&v335, (uint64_t)&v337, (uint64_t)&v341);
            v177 = (uint64_t (***)())v343;
            if (v343 == (id *)&v341)
            {
              v177 = &v341;
              v178 = 4;
            }
            else
            {
              if (!v343)
              {
LABEL_231:
                if (v337)
                  (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v340 + 40))(v340, v337, (char *)v339 - (char *)v337);

                v332 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", (uint64_t)(*(_QWORD *)(*(_QWORD *)v318 + 56) - *(_QWORD *)(*(_QWORD *)v318 + 48)) >> 3);
                objc_storeStrong((id *)(v328 + 80), v332);
                v179 = v328;
                v180 = *(_QWORD **)(v328 + 112);
                v182 = (_QWORD *)v180[6];
                v181 = (_QWORD *)v180[7];
                if (v182 != v181)
                {
                  do
                  {
                    if (*(_BYTE *)(*v182 + 80) == 1)
                    {
                      v183 = *(_DWORD *)(*v182 + 176);
                      if (v183 >= 0x63)
                        v184 = 99;
                      else
                        v184 = v183;
                      v185 = *(id *)(v179 + 32);
                      v344 = 0;
                      *(_QWORD *)&v349 = 0;
                      objc_msgSend(v185, "getClusterImageTextForClusterFeatureCount:text:locale:", v184, &v344, &v349);
                      v186 = v344;
                      v187 = (id)v349;

                      v188 = *(id *)(v328 + 32);
                      v337 = 0;
                      v341 = 0;
                      objc_msgSend(v188, "getClusterAnnotationTextForClusterFeatureCount:text:locale:", v184, &v337, &v341);
                      v189 = v337;
                      v190 = v341;

                      v191 = -[VKClusterFeatureAnnotation initWithClusterNode:clusterTree:baseStyle:imageText:annotationText:annotationLocale:]([VKClusterFeatureAnnotation alloc], "initWithClusterNode:clusterTree:baseStyle:imageText:annotationText:annotationLocale:", *v182, v318, v328 + 96, v186, v189, v190);
                      v192 = *v182;
                      v193 = v191;
                      v194 = v193;
                      if (v193)
                        v195 = v193;
                      v196 = *(void **)(v192 + 128);
                      *(_QWORD *)(v192 + 128) = v194;

                      objc_msgSend(v332, "addObject:", v194);
                      v179 = v328;
                    }
                    ++v182;
                  }
                  while (v182 != v181);
                  v180 = *(_QWORD **)v318;
                }
                v197 = (_QWORD *)v180[2];
                for (k = (_QWORD *)v180[3]; v197 != k; ++v197)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)*v197 + 88))(*v197);
                  v199 = (void *)objc_claimAutoreleasedReturnValue();
                  v200 = v199;
                  if (*(_BYTE *)(*v197 + 80))
                  {
                    objc_msgSend(v199, "feature");
                    v201 = (void *)objc_claimAutoreleasedReturnValue();
                    v202 = *(_QWORD *)objc_msgSend(v201, "feature");
                    v203 = *(_DWORD *)(*v197 + 8);
                    *(_BYTE *)(v202 + 112) = 1;
                    *(_DWORD *)(v202 + 76) = v203;

                  }
                  objc_msgSend(v332, "addObject:", v200);

                }
                *(_BYTE *)(v328 + 128) = 1;

                v25 = v328;
                goto LABEL_249;
              }
              v178 = 5;
            }
            (*v177)[v178]();
            goto LABEL_231;
          }
          v166 = *(_QWORD *)(v331 + 56);
          v167 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v331 + 72) + 16))(*(_QWORD *)(v331 + 72), v316, 8);
          v168 = v166 - v165;
          v169 = v167 + ((v166 - v165) & 0xFFFFFFFFFFFFFFF8);
          v170 = v167 + 8 * v317;
          v171 = *(char **)(v331 + 48);
          v172 = *(char **)(v331 + 56);
          if (v172 == v171)
          {
            *(_QWORD *)(v331 + 48) = v169;
            *(_QWORD *)(v331 + 56) = v169;
            v175 = *(_QWORD *)(v331 + 64);
            *(_QWORD *)(v331 + 64) = v170;
            goto LABEL_224;
          }
          v173 = v172 - v171 - 8;
          if (v173 > 0x77)
          {
            if ((unint64_t)&v172[-(v173 & 0xFFFFFFFFFFFFFFF8) - 8] >= v169
              || (v174 = v169,
                  (v168 & 0xFFFFFFFFFFFFFFF8) - (v173 & 0xFFFFFFFFFFFFFFF8) + v167 - 8 >= (unint64_t)v172))
            {
              v294 = v168 >> 3;
              v295 = (v173 >> 3) + 1;
              v296 = (_OWORD *)(v167 + 8 * v294 - 16);
              v297 = v172 - 32;
              v298 = v295 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v300 = *(_OWORD *)v297;
                v299 = *((_OWORD *)v297 + 1);
                *(_OWORD *)v297 = 0uLL;
                *((_OWORD *)v297 + 1) = 0uLL;
                v297 -= 32;
                *(v296 - 1) = v300;
                *v296 = v299;
                v296 -= 2;
                v298 -= 4;
              }
              while (v298);
              v174 = v169 - 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
              v172 -= 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
              if (v295 == (v295 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_402;
            }
          }
          else
          {
            v174 = v169;
          }
          do
          {
            v301 = *((_QWORD *)v172 - 1);
            v172 -= 8;
            *(_QWORD *)v172 = 0;
            *(_QWORD *)(v174 - 8) = v301;
            v174 -= 8;
          }
          while (v172 != v171);
LABEL_402:
          v172 = *(char **)(v331 + 48);
          v302 = *(char **)(v331 + 56);
          *(_QWORD *)(v331 + 48) = v174;
          *(_QWORD *)(v331 + 56) = v169;
          v175 = *(_QWORD *)(v331 + 64);
          *(_QWORD *)(v331 + 64) = v170;
          while (v302 != v172)
          {
            v304 = *((_QWORD *)v302 - 1);
            v302 -= 8;
            v303 = v304;
            *(_QWORD *)v302 = 0;
            if (v304)
              (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
          }
LABEL_224:
          v164 = (std::__shared_weak_count *)v331;
          if (v172)
            (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v331 + 72) + 40))(*(_QWORD *)(v331 + 72), v172, v175 - (_QWORD)v172);
          goto LABEL_226;
        }
        v36 = *(_QWORD *)(v331 + 24);
        v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v331 + 40) + 16))(*(_QWORD *)(v331 + 40), v316, 8);
        v38 = v36 - v35;
        v39 = v37 + ((v36 - v35) & 0xFFFFFFFFFFFFFFF8);
        v40 = v37 + 8 * v317;
        v41 = *(char **)(v331 + 16);
        v42 = *(char **)(v331 + 24);
        if (v42 == v41)
        {
          *(_QWORD *)(v331 + 16) = v39;
          *(_QWORD *)(v331 + 24) = v39;
          v49 = *(_QWORD *)(v331 + 32);
          *(_QWORD *)(v331 + 32) = v40;
          goto LABEL_50;
        }
        v43 = v42 - v41 - 8;
        if (v43 > 0x77)
        {
          v282 = (unint64_t)&v42[-(v43 & 0xFFFFFFFFFFFFFFF8) - 8] >= v39
              || (v38 & 0xFFFFFFFFFFFFFFF8) - (v43 & 0xFFFFFFFFFFFFFFF8) + v37 - 8 >= (unint64_t)v42;
          v44 = v39;
          if (v282)
          {
            v283 = v38 >> 3;
            v284 = (v43 >> 3) + 1;
            v285 = (_OWORD *)(v37 + 8 * v283 - 16);
            v286 = v42 - 32;
            v287 = v284 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v289 = *(_OWORD *)v286;
              v288 = *((_OWORD *)v286 + 1);
              *(_OWORD *)v286 = 0uLL;
              *((_OWORD *)v286 + 1) = 0uLL;
              v286 -= 32;
              *(v285 - 1) = v289;
              *v285 = v288;
              v285 -= 2;
              v287 -= 4;
            }
            while (v287);
            v44 = v39 - 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            v42 -= 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            if (v284 == (v284 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_392;
          }
        }
        else
        {
          v44 = v39;
        }
        do
        {
          v290 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *(_QWORD *)v42 = 0;
          *(_QWORD *)(v44 - 8) = v290;
          v44 -= 8;
        }
        while (v42 != v41);
LABEL_392:
        v42 = *(char **)(v331 + 16);
        v291 = *(char **)(v331 + 24);
        *(_QWORD *)(v331 + 16) = v44;
        *(_QWORD *)(v331 + 24) = v39;
        v49 = *(_QWORD *)(v331 + 32);
        *(_QWORD *)(v331 + 32) = v40;
        while (v291 != v42)
        {
          v293 = *((_QWORD *)v291 - 1);
          v291 -= 8;
          v292 = v293;
          *(_QWORD *)v291 = 0;
          if (v293)
            (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
        }
LABEL_50:
        if (v42)
          (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v331 + 40) + 40))(*(_QWORD *)(v331 + 40), v42, v49 - (_QWORD)v42);
        goto LABEL_52;
      }
    }
LABEL_377:
    v279 = v324;
    v280 = (_QWORD *)v324[1];
    if (v280)
    {
      do
      {
        v281 = v280;
        v280 = (_QWORD *)*v280;
      }
      while (v280);
    }
    else
    {
      do
      {
        v281 = (_QWORD *)v279[2];
        v18 = *v281 == (_QWORD)v279;
        v279 = v281;
      }
      while (!v18);
    }
    v7 = v281;
  }
  while (v281 != v320);
  v6 = *(void **)(v321 + 16);
  v308 = v334;
  v309 = v330;
LABEL_414:
  v347 = v309;
  v348 = v325;
  v344 = v6;
  v345 = v308;
  v346 = v8;
  *((_QWORD *)&v350 + 1) = 0;
  v310 = v309;
  v311 = operator new(0x30uLL);
  *v311 = &off_1E42CA838;
  v311[1] = v6;
  v311[2] = v308;
  v311[3] = v8;
  v311[4] = v310;
  v311[5] = v325;
  v346 = 0;
  v347 = 0;
  v345 = 0;
  *((_QWORD *)&v350 + 1) = v311;
  md::LabelMapTile::queueCommand((uint64_t)v6, 4, &v349);
  result = (__int128 *)*((_QWORD *)&v350 + 1);
  if (*((__int128 **)&v350 + 1) == &v349)
  {
    v313 = 4;
    result = &v349;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v313))();
  }
  else if (*((_QWORD *)&v350 + 1))
  {
    v313 = 5;
    return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v313))();
  }
  return result;
}

void sub_19FB92CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char *a38)
{
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;

  v40 = a38;
  if (a38 == &a35)
  {
    v41 = 4;
    v40 = &a35;
  }
  else
  {
    if (!a38)
      goto LABEL_6;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_6:
  if (a31)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a34 + 40))(a34, a31, a33 - a31);

  v42 = a28;
  if (!a28)
    _Unwind_Resume(a1);
  while (v38 != v42)
  {
    v43 = *(std::__shared_weak_count **)(v38 - 8);
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v38 -= 16;
    v42 = a28;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a19 + 40))(a19, a28, a26 - a28);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(a2 + 40));

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 288);
  }
  return result;
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::LabelCustomFeatureSupport::~LabelCustomFeatureSupport(md::LabelCustomFeatureSupport *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::mutex *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 168);
  v3 = (char *)this + 8;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = *(_QWORD **)v2;
  if (*(_QWORD **)v2 != v4)
  {
    while ((char *)*v5 != v3)
    {
      if (++v5 == v4)
      {
        v5 = *(_QWORD **)(v2 + 8);
        break;
      }
    }
  }
  v6 = v5 + 1;
  if (v5 == v4 || v6 == v4)
  {
    if (v5 != v4)
      goto LABEL_17;
  }
  else
  {
    do
    {
      if ((char *)*v6 != v3)
        *v5++ = *v6;
      ++v6;
    }
    while (v6 != v4);
    if (v5 != *(_QWORD **)(v2 + 8))
    {
LABEL_17:
      *(_QWORD *)(v2 + 8) = v5;
      v8 = (std::mutex *)*((_QWORD *)this + 3);
      if (!v8)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v8 = (std::mutex *)*((_QWORD *)this + 3);
  if (v8)
  {
LABEL_18:
    std::mutex::lock(v8);
    v8[1].__m_.__sig = 0;
    std::mutex::unlock(v8);
  }
LABEL_19:
  while (*((_QWORD *)this + 12))
    md::LabelCustomFeatureSupport::removeDataSourceInternal((uint64_t)this, *(void **)(*((_QWORD *)this + 9) + 32));
  v9 = (_QWORD *)*((_QWORD *)this + 24);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25));
      v9 = v10;
    }
    while (v10);
  }
  v11 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v11)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v11, 8 * *((_QWORD *)this + 22));
  v12 = *((_QWORD *)this + 17);
  if (v12)
  {
    v13 = *((_QWORD *)this + 18);
    v14 = *((_QWORD *)this + 17);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v15->__on_zero_shared)(v15, v14);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = *((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), v14, *((_QWORD *)this + 19) - v14);
  }
  v18 = *((_QWORD *)this + 13);
  if (v18)
  {
    *((_QWORD *)this + 14) = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v18, *((_QWORD *)this + 15) - v18);
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy((uint64_t)this + 72, *((_QWORD *)this + 10));
  v19 = *((_QWORD *)this + 5);
  if (v19)
  {
    v20 = *((_QWORD *)this + 6);
    v21 = *((_QWORD *)this + 5);
    if (v20 != v19)
    {
      do
      {
        v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v22->__on_zero_shared)(v22, v21);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = *((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v21, *((_QWORD *)this + 7) - v21);
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19FB93328(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v3 = *(_QWORD **)(v1 + 192);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 200) + 40))(*(_QWORD *)(v1 + 200));
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v5)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 184) + 40))(*(_QWORD *)(v1 + 184), v5, 8 * *(_QWORD *)(v1 + 176));
    v6 = *(_QWORD *)(v1 + 136);
    if (!v6)
    {
LABEL_5:
      v7 = *(_QWORD *)(v1 + 104);
      if (!v7)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 136);
    if (!v6)
      goto LABEL_5;
  }
  v14 = *(_QWORD *)(v1 + 144);
  v15 = v6;
  if (v14 != v6)
  {
    do
    {
      v16 = *(std::__shared_weak_count **)(v14 - 8);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v15);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v14 -= 16;
    }
    while (v14 != v6);
    v15 = *(_QWORD *)(v1 + 136);
  }
  *(_QWORD *)(v1 + 144) = v6;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 160) + 40))(*(_QWORD *)(v1 + 160), v15, *(_QWORD *)(v1 + 152) - v15);
  v7 = *(_QWORD *)(v1 + 104);
  if (!v7)
  {
LABEL_7:
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v1 + 72, *(_QWORD *)(v1 + 80));
    v8 = *(_QWORD *)(v1 + 40);
    if (v8)
    {
      v9 = *(_QWORD *)(v1 + 48);
      v10 = *(_QWORD *)(v1 + 40);
      if (v9 != v8)
      {
        do
        {
          v11 = *(std::__shared_weak_count **)(v9 - 8);
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 16;
        }
        while (v9 != v8);
        v10 = *(_QWORD *)(v1 + 40);
      }
      *(_QWORD *)(v1 + 48) = v8;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v10, *(_QWORD *)(v1 + 56) - v10);
    }
    v19 = *(std::__shared_weak_count **)(v1 + 32);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(_QWORD *)(v1 + 112) = v7;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 128) + 40))(*(_QWORD *)(v1 + 128), v7, *(_QWORD *)(v1 + 120) - v7);
  goto LABEL_7;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,void *>,std::__tree_node_destructor<geo::StdAllocator<void *,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(v2 + 40));

    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 288);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E42D2B90;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E42D2BD8;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E42D2BD8;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::operator()(uint64_t a1)
{
  md::LabelCustomFeatureSupport::removeDataSourceInternal(*(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
}

void md::LabelCustomFeatureSupport::featureForAnnotation(_QWORD *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  id v15;
  NSArray *v16;
  void *v17;
  id v18;
  NSArray *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  id v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v36 = a3;
  v7 = a4;
  v10 = *(_QWORD **)(a2 + 80);
  v9 = (_QWORD *)(a2 + 80);
  v8 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= (unint64_t)v36;
    if (v12 >= (unint64_t)v36)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v9 && v11[4] <= (unint64_t)v36)
  {
    v15 = v7;
    v37 = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
    v16 = (NSArray *)objc_claimAutoreleasedReturnValue();
    md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap((md::LabelCustomFeatureProvider *)(v11 + 5), v16, 1);

    v17 = (void *)v11[22];
    if (v17)
    {
      v18 = v17;
      v38[0] = v18;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
      v19 = (NSArray *)objc_claimAutoreleasedReturnValue();
      md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v11 + 5), v19, 1);

      v20 = (void *)v11[22];
      if (v20)
      {
        v11[22] = 0;

      }
    }
    v21 = v15;
    v22 = v21;
    if (v21)
      v23 = v21;
    v24 = (void *)v11[22];
    v11[22] = v22;

    v27 = (_QWORD *)v11[31];
    v26 = v11 + 31;
    v25 = v27;
    if (!v27)
      goto LABEL_35;
    v28 = v26;
    do
    {
      v29 = v25[4];
      v30 = v29 >= (unint64_t)v22;
      if (v29 >= (unint64_t)v22)
        v31 = v25;
      else
        v31 = v25 + 1;
      if (v30)
        v28 = v25;
      v25 = (_QWORD *)*v31;
    }
    while (*v31);
    if (v28 != v26 && v28[4] <= (unint64_t)v22 && (v32 = v28[5]) != 0)
    {
      *a1 = v32;
      v33 = v28[6];
      a1[1] = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
    }
    else
    {
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
    }

  }
  else
  {
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
  }

}

void sub_19FB93930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::find<md::LabelFeatureID>(_QWORD *a1, unsigned __int8 a2, uint64_t *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t ***v7;
  uint64_t **result;
  uint64_t v9;
  unint64_t v11;
  uint64_t *v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ****)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if ((uint64_t *)v4 == v13)
        {
          if (*((unsigned __int8 *)result + 16) == a2 && result[3] == a3)
            return result;
        }
        else if (((unint64_t)v13 & v9) != v6)
        {
          return 0;
        }
        result = (uint64_t **)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = (unint64_t)result[1];
      if (v4 == v11)
      {
        if (*((unsigned __int8 *)result + 16) == a2 && result[3] == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (uint64_t **)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2C20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2C20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  id v8;
  NSArray *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned __int8 v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  geo::read_write_lock *v47;
  const char *v48;
  malloc_zone_t *zone;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 136);
  v54 = v1 + 136;
  v55 = v1;
  for (i = *(_QWORD *)(v1 + 144); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(v55 + 144) = v2;
  v7 = *(_QWORD **)(v55 + 72);
  if (v7 != (_QWORD *)(v55 + 80))
  {
    while (1)
    {
      if (!*((_BYTE *)v7 + 160))
      {
        v8 = (id)v7[11];
        objc_msgSend(v8, "globalAnnotations");
        v9 = (NSArray *)objc_claimAutoreleasedReturnValue();

        md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap((md::LabelCustomFeatureProvider *)(v7 + 5), v9, 0);
        md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v7 + 5), (NSArray *)v7[18], 0);
        v10 = -[NSArray copy](v9, "copy");
        v11 = (void *)v7[18];
        v7[18] = v10;

        *((_BYTE *)v7 + 160) = 1;
      }
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v12 = (id)v7[18];
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
      if (v13)
        break;
LABEL_72:

      v51 = (_QWORD *)v7[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v7[2];
          v53 = *v52 == (_QWORD)v7;
          v7 = v52;
        }
        while (!v53);
      }
      v7 = v52;
      if (v52 == (_QWORD *)(v55 + 80))
        goto LABEL_78;
    }
    v14 = *(_QWORD *)v61;
    v15 = v7 + 31;
LABEL_16:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v61 != v14)
        objc_enumerationMutation(v12);
      v17 = *(id *)(*((_QWORD *)&v60 + 1) + 8 * v16);
      v18 = v17;
      v19 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_65;
      v20 = v7 + 31;
      do
      {
        v21 = v19[4];
        v22 = v21 >= (unint64_t)v17;
        if (v21 >= (unint64_t)v17)
          v23 = v19;
        else
          v23 = v19 + 1;
        if (v22)
          v20 = v19;
        v19 = (_QWORD *)*v23;
      }
      while (*v23);
      if (v20 == v15)
        goto LABEL_65;
      if ((unint64_t)v17 < v20[4])
        goto LABEL_65;
      v25 = v20 + 5;
      v24 = v20[5];
      if (!v24)
        goto LABEL_65;
      v26 = *(_QWORD **)(v55 + 144);
      if ((unint64_t)v26 >= *(_QWORD *)(v55 + 152))
      {
        v30 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v54, (__int128 *)(v20 + 5));
      }
      else
      {
        if (v26)
        {
          *v26 = v24;
          v27 = v20[6];
          v26[1] = v27;
          if (v27)
          {
            v28 = (unint64_t *)(v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
        }
        v30 = v26 + 2;
      }
      *(_QWORD *)(v55 + 144) = v30;
      v31 = *v25;
      if (*(_DWORD *)(*v25 + 128))
        goto LABEL_65;
      v32 = (std::__shared_weak_count *)v20[6];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v56 = 0;
      v57 = 0;
      v58 = 0;
      {
        v46 = operator new();
        *(_QWORD *)(v46 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v46 + 24) = "VectorKitLabels";
        *(_OWORD *)(v46 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v46 = &off_1E42B5668;
        *(_QWORD *)(v46 + 8) = "VectorKitLabels";
        *(_OWORD *)(v46 + 72) = 0u;
        *(_OWORD *)(v46 + 88) = 0u;
        *(_OWORD *)(v46 + 104) = 0u;
        *(_OWORD *)(v46 + 120) = 0u;
        *(_OWORD *)(v46 + 136) = 0u;
        *(_OWORD *)(v46 + 152) = 0u;
        *(_OWORD *)(v46 + 168) = 0u;
        *(_OWORD *)(v46 + 184) = 0u;
        *(_OWORD *)(v46 + 200) = 0u;
        *(_OWORD *)(v46 + 216) = 0u;
        *(_OWORD *)(v46 + 232) = 0u;
        *(_QWORD *)(v46 + 248) = 0;
        *(_OWORD *)(v46 + 56) = 0u;
        v47 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v46 + 56), 0);
        if ((_DWORD)v47)
          geo::read_write_lock::logFailure(v47, (uint64_t)"initialization", v48);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v46 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v46 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v46;
      }
      v59 = mdm::Allocator::instance(void)::alloc;
      v36 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 16, 8);
      v56 = v36;
      v58 = v36 + 2;
      if (v36)
      {
        *v36 = v31;
        v36[1] = (uint64_t)v32;
        if (v32)
        {
          v37 = (unint64_t *)&v32->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v57 = (uint64_t)(v36 + 2);
LABEL_49:
          v39 = (unint64_t *)&v32->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          goto LABEL_54;
        }
        v57 = (uint64_t)(v36 + 2);
      }
      else
      {
        v57 = 16;
        if (v32)
          goto LABEL_49;
      }
LABEL_54:
      md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v7[6] + 296), &v56);
      v41 = v56;
      if (v56)
      {
        v42 = (uint64_t *)v57;
        if ((uint64_t *)v57 != v56)
        {
          do
          {
            v43 = (std::__shared_weak_count *)*(v42 - 1);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v42 -= 2;
          }
          while (v42 != v41);
          v41 = v56;
        }
        (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v59 + 40))(v59, v41, (char *)v58 - (char *)v41);
      }
LABEL_65:

      if (++v16 == v13)
      {
        v50 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
        v13 = v50;
        if (!v50)
          goto LABEL_72;
        goto LABEL_16;
      }
    }
  }
LABEL_78:
  ++*(_DWORD *)(v55 + 228);
}

void sub_19FB9402C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FB94050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::GraphTraversalPath::~GraphTraversalPath(md::GraphTraversalPath *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void sub_19FB9422C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19FB9430C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19FB943EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5590;

  return a1;
}

void geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5590;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelFeatureProviderCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelFeatureProviderCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D2EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 241) != v2)
  {
    *(_BYTE *)(v1 + 241) = v2;
    v3 = *(_QWORD *)(v1 + 152);
    if (v3)
    {
      v4 = md::LabelScene::setSceneID(v3, v2, 0);
      v5 = *(_QWORD *)(v1 + 8);
      *(_BYTE *)(*(_QWORD *)v1 + 232) = 1;
      *(_BYTE *)(v5 + 3045) = 1;
      *(_BYTE *)(v5 + 3047) = 1;
      v6 = atomic_load((unsigned __int8 *)(v5 + 3058));
      if ((v6 & 1) != 0)
      {
        v7 = *(_QWORD *)(v5 + 136);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 56);
          if (v8)
          {
            v10 = v5;
            v9 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *, float))(*(_QWORD *)v8 + 48))(v8, &v10, &v9, v4);
          }
        }
      }
    }
  }
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D2F38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D2F38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  int v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v1 = *(uint64_t **)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*((unsigned __int8 *)v1 + 242) != v2)
  {
    *((_BYTE *)v1 + 242) = v2;
    v3 = v1[19];
    if (v3)
    {
      if (v2)
      {
        if (v2 == 1)
        {
          v4 = *(unsigned __int8 *)(v3 + 52);
          if (v4 == 3 || v4 == 0)
          {
            v4 = 1;
            *(_BYTE *)(v3 + 52) = 1;
            if (*(_BYTE *)(v3 + 80) == 1)
            {
              v6 = *(float *)(*(_QWORD *)v3 + 1504);
              v7 = *(float *)(*(_QWORD *)v3 + 1508);
              *(_DWORD *)(v3 + 84) = 0;
              v8 = 1.0 / sqrtf((float)(v6 * v6) + (float)(v7 * v7));
              *(float *)(v3 + 88) = v7;
              *(float *)(v3 + 92) = v8 * v6;
              *(float *)(v3 + 96) = -(float)(v7 * v8);
              *(float *)(v3 + 100) = v8;
              v4 = 1;
            }
          }
        }
        else
        {
          v4 = *(unsigned __int8 *)(v3 + 52);
        }
      }
      else
      {
        v4 = *(unsigned __int8 *)(v3 + 52);
        if ((v4 - 1) <= 1)
        {
          v4 = 3;
          *(_BYTE *)(v3 + 52) = 3;
          if (*(_BYTE *)(v3 + 80) == 1)
          {
            v9 = *(float *)(*(_QWORD *)v3 + 1504);
            v10 = *(float *)(*(_QWORD *)v3 + 1508);
            *(_DWORD *)(v3 + 84) = 0;
            v11 = 1.0 / sqrtf((float)(v9 * v9) + (float)(v10 * v10));
            *(float *)(v3 + 88) = v10;
            *(float *)(v3 + 92) = v11 * v9;
            *(float *)(v3 + 96) = -(float)(v10 * v11);
            *(float *)(v3 + 100) = v11;
            v4 = 3;
          }
        }
      }
      atomic_store((v4 - 1) < 2, (unsigned __int8 *)(v3 + 55));
      v13 = *v1;
      v12 = v1[1];
      *(_BYTE *)(v13 + 232) = 1;
      *(_BYTE *)(v12 + 3045) = 1;
      *(_BYTE *)(v12 + 3047) = 1;
      v14 = atomic_load((unsigned __int8 *)(v12 + 3058));
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v12 + 136);
        if (v15)
        {
          result = *(_QWORD *)(v15 + 56);
          if (result)
          {
            v17 = v12;
            v16 = 9;
            return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v17, &v16);
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D2F80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2F80;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 120) = 0;
  v2 = *(_QWORD *)v1;
  v5[0] = &off_1E42D2C20;
  v5[1] = v2;
  v6 = v5;
  md::LabelCustomFeatureSupport::queueCommand(v2, 3, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_19FB948D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42D2FC8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::erase(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *(_QWORD **)(a2 + 8);
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  else
  {
    v6 = (_QWORD *)a2;
    do
    {
      v5 = (_QWORD *)v6[2];
      v7 = *v5 == (_QWORD)v6;
      v6 = v5;
    }
    while (!v7);
  }
  if (*(_QWORD *)a1 == a2)
    *(_QWORD *)a1 = v5;
  --*(_QWORD *)(a1 + 24);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2, 64);
}

void std::__shared_ptr_emplace<md::LabelScene>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelScene>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<NSArray<objc_object  {objcproto25VKCustomFeatureAnnotation}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53D0;

  return a1;
}

void geo::_retain_ptr<NSArray<objc_object  {objcproto25VKCustomFeatureAnnotation}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B53D0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKCustomFeatureDataSourceObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52B0;

  return a1;
}

void geo::_retain_ptr<VKCustomFeatureDataSourceObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52B0;

  JUMPOUT(0x1A1AF4E00);
}

void md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider(md::LabelCustomFeatureProvider *this)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  float v6;
  void *v7;
  md::LabelClusterProvider *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 52);
    if ((v3 - 1) <= 1)
    {
      v3 = 3;
      *(_BYTE *)(v2 + 52) = 3;
      if (*(_BYTE *)(v2 + 80) == 1)
      {
        v4 = *(float *)(*(_QWORD *)v2 + 1504);
        v5 = *(float *)(*(_QWORD *)v2 + 1508);
        *(_DWORD *)(v2 + 84) = 0;
        v6 = 1.0 / sqrtf((float)(v4 * v4) + (float)(v5 * v5));
        *(float *)(v2 + 88) = v5;
        *(float *)(v2 + 92) = v6 * v4;
        *(float *)(v2 + 96) = -(float)(v5 * v6);
        *(float *)(v2 + 100) = v6;
        v3 = 3;
      }
    }
    atomic_store((v3 - 1) < 2, (unsigned __int8 *)(v2 + 55));
  }
  objc_msgSend(*((id *)this + 3), "clearObserver");
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;

  }
  md::LabelCustomFeatureProvider::refreshTilesWithFeatures(this);
  md::LabelCustomFeatureProvider::clearFeatures(this, 0);
  v8 = (md::LabelClusterProvider *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v8)
  {
    md::LabelClusterProvider::~LabelClusterProvider(v8);
    MEMORY[0x1A1AF4E00]();
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy((uint64_t)this + 200, *((_QWORD *)this + 26));
  v9 = *((_QWORD *)this + 21);
  if (v9)
  {
    v10 = *((_QWORD *)this + 22);
    v11 = *((_QWORD *)this + 21);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), v11, *((_QWORD *)this + 23) - v11);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *((_QWORD *)this + 16) = &off_1E42B5570;

  *((_QWORD *)this + 12) = &off_1E42B53D0;
  std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy((uint64_t)this + 64, *((_QWORD *)this + 9));
  *((_QWORD *)this + 5) = &off_1E42B5590;

  *((_QWORD *)this + 2) = &off_1E42B52B0;
}

void sub_19FB94D6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::LabelClusterProvider *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(md::LabelClusterProvider **)(v1 + 232);
  *(_QWORD *)(v1 + 232) = 0;
  if (v3)
  {
    md::LabelClusterProvider::~LabelClusterProvider(v3);
    MEMORY[0x1A1AF4E00]();
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy(v1 + 200, *(_QWORD *)(v1 + 208));
  v4 = *(_QWORD *)(v1 + 168);
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + 176);
    v6 = *(_QWORD *)(v1 + 168);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *(_QWORD *)(v1 + 168);
    }
    *(_QWORD *)(v1 + 176) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 192) + 40))(*(_QWORD *)(v1 + 192), v6, *(_QWORD *)(v1 + 184) - v6);
  }
  v10 = *(std::__shared_weak_count **)(v1 + 160);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)(v1 + 128) = &off_1E42B5570;

  *(_QWORD *)(v1 + 96) = &off_1E42B53D0;
  std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(v1 + 64, *(_QWORD *)(v1 + 72));
  *(_QWORD *)(v1 + 40) = &off_1E42B5590;

  *(_QWORD *)(v1 + 16) = &off_1E42B52B0;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unint64_t std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>(unint64_t result, unsigned __int8 a2, uint64_t *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v13;
  uint64_t *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;

  v6 = result;
  v7 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
  v8 = *(_QWORD *)(result + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = ((unint64_t)&a3[8 * (unint64_t)a2 - 0xC3910C8D016B07DLL] + ((unint64_t)a2 >> 2) - 3) ^ a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(uint64_t ****)(*(_QWORD *)result + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v11[1];
            if (v15 == (uint64_t *)v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == a2 && v11[3] == a3)
                return result;
            }
            else if (((unint64_t)v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = (uint64_t **)*v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = (unint64_t)v11[1];
          if (v13 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == a2 && v11[3] == a3)
              return result;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = (uint64_t **)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 32, 8);
  v16 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v7;
  *(_OWORD *)(result + 16) = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(v6 + 40) + 1);
  v18 = *(float *)(v6 + 48);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    if (v22 == 1)
    {
      v22 = 2;
    }
    else if ((v22 & (v22 - 1)) != 0)
    {
      result = std::__next_prime(v22);
      v22 = result;
    }
    v8 = *(_QWORD *)(v6 + 8);
    if (v22 <= v8)
    {
      if (v22 >= v8)
        goto LABEL_64;
      result = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 40) / *(float *)(v6 + 48));
      if (v8 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v34 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v34;
      }
      if (v22 <= result)
        v22 = result;
      if (v22 >= v8)
      {
        v8 = *(_QWORD *)(v6 + 8);
LABEL_64:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v4 = v7 % v8;
          else
            v4 = v7;
        }
        else
        {
          v4 = (v8 - 1) & v7;
        }
        goto LABEL_77;
      }
      if (!v22)
      {
        v40 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v40)
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 40))(*(_QWORD *)(v6 + 16), v40, 8 * *(_QWORD *)(v6 + 8));
        v8 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        goto LABEL_64;
      }
    }
    result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v6 + 16) + 16))(*(_QWORD *)(v6 + 16), 8 * v22, 8);
    v23 = *(_QWORD *)v6;
    *(_QWORD *)v6 = result;
    if (v23)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 40))(*(_QWORD *)(v6 + 16), v23, 8 * *(_QWORD *)(v6 + 8));
    v24 = 0;
    *(_QWORD *)(v6 + 8) = v22;
    do
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v24++) = 0;
    while (v22 != v24);
    v26 = v6 + 24;
    v25 = *(_QWORD **)(v6 + 24);
    if (!v25)
    {
LABEL_63:
      v8 = v22;
      goto LABEL_64;
    }
    v27 = v25[1];
    v28 = v22 - 1;
    if ((v22 & (v22 - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)v6 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)v6 + v32);
          **(_QWORD **)(*(_QWORD *)v6 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_63;
    }
    if (v27 >= v22)
      v27 %= v22;
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v27) = v26;
    v35 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_63;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= v22)
        v37 %= v22;
      if (v37 != v27)
      {
        if (!*(_QWORD *)(*(_QWORD *)v6 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)v6 + 8 * v37) = v25;
          goto LABEL_68;
        }
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)v6 + v36);
        **(_QWORD **)(*(_QWORD *)v6 + v36) = v35;
        v35 = v25;
      }
      v37 = v27;
LABEL_68:
      v25 = v35;
      v35 = (_QWORD *)*v35;
      v27 = v37;
      if (!v35)
        goto LABEL_63;
    }
  }
LABEL_77:
  v38 = *(unint64_t **)(*(_QWORD *)v6 + 8 * v4);
  if (v38)
  {
    *(_QWORD *)v16 = *v38;
LABEL_85:
    *v38 = v16;
    goto LABEL_86;
  }
  *(_QWORD *)v16 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v16;
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v4) = v6 + 24;
  if (*(_QWORD *)v16)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v39 >= v8)
        v39 %= v8;
    }
    else
    {
      v39 &= v8 - 1;
    }
    v38 = (unint64_t *)(*(_QWORD *)v6 + 8 * v39);
    goto LABEL_85;
  }
LABEL_86:
  ++*(_QWORD *)(v6 + 40);
  return result;
}

void sub_19FB953B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

void md::ARLabelIconDataRequestLogic::~ARLabelIconDataRequestLogic(md::ARLabelIconDataRequestLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARLabelIconDataRequestContext]";
  v4[3] = 33;
  v4[4] = result;
  *v4 = &off_1E42B1478;
  v4[1] = 0x30B26197B2C0D9CELL;
  *a2 = v4;
  return result;
}

void sub_19FB95508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0x30B26197B2C0D9CELL && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARLabelIconDataRequestLogic::runBeforeLayout(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v56;
  float v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t i;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t *v83;
  unint64_t *v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  float32x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  size_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  float32x2_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 *v109;
  _OWORD *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  float32x2_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  size_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  BOOL v160;
  unsigned __int8 *v161;
  uint64_t *v162;
  uint64_t v163;
  void **v164;
  unint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  uint64_t *v168;
  uint64_t *v169;
  float32x2_t *v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  _OWORD *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  void **v180;
  uint64_t v181;
  _QWORD *v183;
  void *v184;
  uint64_t *v185;
  uint64_t v186;
  float32x2_t v187;
  void *v188;
  unint64_t *v189;
  _BYTE *v190;
  uint64_t v191;
  _BYTE v192[32];
  void *v193;
  char *v194;
  _BYTE *v195;
  unint64_t v196;
  _BYTE v197[32];
  uint64_t *v198;
  float32x2_t *v199;
  void **v200;
  unint64_t v201;
  _QWORD v202[5];

  v3 = 0;
  v4 = 0xCBF29CE484222325;
  v193 = v197;
  v194 = v197;
  v195 = v197;
  v196 = 4;
  v188 = v192;
  v189 = (unint64_t *)v192;
  v190 = v192;
  v191 = 4;
  v5 = 0xCBF29CE484222325;
  v6 = a1[15];
  do
    v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_780[v3++ + 38]);
  while (v3 != 120);
  v185 = a1;
  v7 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(v6, v5);
  v8 = v7;
  v10 = (uint64_t *)v7[7];
  v9 = (uint64_t *)v7[8];
  v11 = (char *)v9 - (char *)v10;
  if (v9 != v10)
  {
    if ((v12 = *((unsigned int *)v10 + 1), v13 = v7[4], v14 = (v7[5] - v13) >> 3, v12 >> 7 >= v14)
      || (v15 = *(_QWORD *)(v13 + 8 * (v12 >> 7))) == 0
      || (v16 = *(unsigned __int16 *)(v15 + 2 * (v12 & 0x7F)), v16 >= v11 >> 3)
      || ((v17 = &v10[v16], v17 != v9) ? (_ZF = *((_DWORD *)v17 + 1) == (_DWORD)v12) : (_ZF = 0), !_ZF))
    {
      v19 = v10 + 1;
      if (v10 + 1 == v9)
      {
LABEL_57:
        v26 = v194;
        goto LABEL_58;
      }
      v20 = v11 >> 3;
      while (1)
      {
        v21 = *((unsigned int *)v19 + 1);
        if (v21 >> 7 < v14)
        {
          v22 = *(_QWORD *)(v13 + 8 * (v21 >> 7));
          if (v22)
          {
            v23 = *(unsigned __int16 *)(v22 + 2 * (v21 & 0x7F));
            if (v20 > v23)
            {
              v24 = &v10[v23];
              if (v24 != v9 && *((_DWORD *)v24 + 1) == (_DWORD)v21)
                break;
            }
          }
        }
        if (++v19 == v9)
          goto LABEL_57;
      }
      v10 = v19;
    }
  }
  v26 = v194;
  if (v9 != v10)
  {
    while (1)
    {
      v27 = *v10;
      v28 = v193;
      v29 = (v26 - (_BYTE *)v193) >> 3;
      if (v196 < v29 + 1)
        break;
LABEL_45:
      *(_QWORD *)v26 = v27;
      v26 = v194 + 8;
      v194 += 8;
      v47 = (uint64_t *)v8[8];
      v48 = v10 + 1;
      if (v10 + 1 != v47)
      {
        v49 = v8[4];
        v50 = v8[7];
        while (1)
        {
          v51 = *((unsigned int *)v48 + 1);
          if (v51 >> 7 < (v8[5] - v49) >> 3)
          {
            v52 = *(_QWORD *)(v49 + 8 * (v51 >> 7));
            if (v52)
            {
              v53 = *(unsigned __int16 *)(v52 + 2 * (v51 & 0x7F));
              if (((uint64_t)v47 - v50) >> 3 > v53)
              {
                v54 = v50 + 8 * v53;
                if ((uint64_t *)v54 != v47 && *(_DWORD *)(v54 + 4) == (_DWORD)v51)
                  break;
              }
            }
          }
          if (++v48 == v47)
            goto LABEL_25;
        }
        v47 = v48;
      }
LABEL_25:
      v10 = v47;
      if (v9 == v47)
        goto LABEL_58;
    }
    v30 = v195;
    v31 = (1 << -(char)__clz(v196 + 1));
    if (v196 >= 0xFFFFFFFFFFFFFFFELL)
      v32 = 1;
    else
      v32 = v31;
    if (v32 <= v29 + 1)
      v33 = v29 + 1;
    else
      v33 = v32;
    v34 = malloc_type_malloc(8 * v33, 0x100004000313F17uLL);
    v35 = (char *)v34;
    v36 = (uint64_t *)v193;
    v37 = v194;
    if (v193 != v194)
    {
      v38 = v194 - (_BYTE *)v193 - 8;
      if (v38 < 0x18)
      {
        v39 = v34;
      }
      else
      {
        v39 = v34;
        if ((unint64_t)((char *)v34 - (_BYTE *)v193) >= 0x20)
        {
          v40 = (v38 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = (_QWORD *)((char *)v34 + v41);
          v42 = (__int128 *)((char *)v193 + 16);
          v43 = v34 + 1;
          v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v42;
            *(v43 - 1) = *(v42 - 1);
            *v43 = v45;
            v42 += 2;
            v43 += 2;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
          v36 = (uint64_t *)((char *)v36 + v41);
        }
      }
      do
      {
        v46 = *v36++;
        *v39++ = v46;
      }
      while (v36 != (uint64_t *)v37);
    }
LABEL_42:
    if (v28 != v30)
      free(v193);
    v26 = &v35[8 * v29];
    v193 = v35;
    v194 = v26;
    v196 = v33;
    goto LABEL_45;
  }
LABEL_58:
  v56 = (unint64_t *)v193;
  if (v193 != v26)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v56++, 3);
    while (v56 != (unint64_t *)v26);
  }
  __asm { FMOV            V0.2S, #1.0 }
  v187 = _D0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v184, "arDebugStylingPOIIconScaleFactor");
  v187 = vmul_n_f32(v187, 1.0 / v61);
  v194 = (char *)v193;
  v62 = v185[15];
  v63 = (_QWORD *)gdc::Registry::storage<arComponents::LabelIconRequestData>(v62);
  for (i = 0; i != 118; ++i)
    v4 = 0x100000001B3 * (v4 ^ aStdStringViewG_735[i + 38]);
  v65 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v62, v4);
  v66 = (_QWORD *)v65;
  v67 = v65 + 32;
  v69 = v63[7];
  v68 = v63[8];
  if (*(_QWORD *)(v65 + 64) - *(_QWORD *)(v65 + 56) >= (unint64_t)(v68 - v69))
    v70 = v63 + 4;
  else
    v70 = (_QWORD *)(v65 + 32);
  if (v63 + 4 == v70)
  {
    v198 = v185;
    v199 = &v187;
    v200 = &v188;
    v201 = a2;
    v202[0] = &v193;
    if (v69 != v68)
    {
      v114 = (_QWORD *)v63[10];
      do
      {
        v115 = *(unsigned int *)(v69 + 4);
        v116 = v66[4];
        if (v115 >> 7 < (v66[5] - v116) >> 3)
        {
          v117 = *(_QWORD *)(v116 + 8 * (v115 >> 7));
          if (v117)
          {
            v118 = *(unsigned __int16 *)(v117 + 2 * (v115 & 0x7F));
            v120 = v66[7];
            v119 = v66[8];
            if (v118 < (v119 - v120) >> 3)
            {
              v121 = v120 + 8 * v118;
              if (v121 != v119 && *(_DWORD *)(v121 + 4) == (_DWORD)v115)
                _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE((uint64_t *)&v198, *(_QWORD *)v69, v114);
            }
          }
        }
        v114 += 2;
        v69 += 8;
      }
      while (v69 != v68);
    }
  }
  if ((_QWORD *)v67 == v70)
  {
    v198 = v185;
    v199 = &v187;
    v200 = &v188;
    v201 = a2;
    v202[0] = &v193;
    v123 = v66[7];
    v124 = v66[8];
    while (v123 != v124)
    {
      v126 = *(unsigned int *)(v123 + 4);
      v127 = v63[4];
      v128 = (v63[5] - v127) >> 3;
      if (v126 >> 7 < v128)
      {
        v129 = *(_QWORD *)(v127 + 8 * (v126 >> 7));
        if (v129)
        {
          v130 = *(unsigned __int16 *)(v129 + 2 * (v126 & 0x7F));
          v132 = v63[7];
          v131 = v63[8];
          v133 = (v131 - v132) >> 3;
          if (v133 > v130)
          {
            v134 = v132 + 8 * v130;
            if (v134 != v131 && *(_DWORD *)(v134 + 4) == (_DWORD)v126)
            {
              v136 = *(_QWORD *)v123;
              v137 = *(_QWORD *)v123 >> 39;
              if (v137 < v128
                && (v138 = *(_QWORD *)(v127 + 8 * v137)) != 0
                && (v139 = *(unsigned __int16 *)(v138 + 2 * (HIDWORD(v136) & 0x7F)), v133 > v139)
                && ((v140 = v132 + 8 * v139, v140 != v131)
                  ? (v141 = *(_DWORD *)(v140 + 4) == HIDWORD(v136))
                  : (v141 = 0),
                    v141))
              {
                v125 = (_QWORD *)(v63[10] + 16 * v139);
              }
              else
              {
                v125 = (_QWORD *)v63[11];
              }
              _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE((uint64_t *)&v198, v136, v125);
            }
          }
        }
      }
      v123 += 8;
    }
  }
  v71 = (unint64_t *)v188;
  v72 = v189;
  if (v188 != v189)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v71++, 4);
    while (v71 != v72);
  }
  v73 = (unint64_t *)v193;
  v74 = (unint64_t *)v194;
  if (v193 != v194)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v73++, 3);
    while (v73 != v74);
  }
  v75 = v185[15];
  v198 = v202;
  v199 = (float32x2_t *)v202;
  v200 = (void **)v202;
  v201 = 4;
  v76 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75);
  v77 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(v75);
  v78 = (_QWORD *)v77;
  v80 = v76[7];
  v79 = v76[8];
  v186 = v77 + 32;
  if (*(_QWORD *)(v77 + 64) - *(_QWORD *)(v77 + 56) >= (unint64_t)(v79 - v80))
    v81 = v76 + 4;
  else
    v81 = (_QWORD *)(v77 + 32);
  v183 = v81;
  if (v76 + 4 == v81 && v80 != v79)
  {
    v86 = (unsigned __int8 *)v76[10];
    while (1)
    {
      v88 = *(unsigned int *)(v80 + 4);
      v89 = v78[4];
      if (v88 >> 7 >= (v78[5] - v89) >> 3)
        goto LABEL_92;
      v90 = *(_QWORD *)(v89 + 8 * (v88 >> 7));
      if (!v90)
        goto LABEL_92;
      v91 = *(unsigned __int16 *)(v90 + 2 * (v88 & 0x7F));
      v93 = v78[7];
      v92 = v78[8];
      if (v91 >= (v92 - v93) >> 3)
        goto LABEL_92;
      v94 = v93 + 8 * v91;
      if (v94 == v92 || *(_DWORD *)(v94 + 4) != (_DWORD)v88)
        goto LABEL_92;
      v96 = *(_QWORD *)v80;
      gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75, *(_QWORD *)v80, *v86);
      v97 = v198;
      v87 = v199;
      v98 = (((char *)v199 - (char *)v198) >> 3) + 1;
      if (v201 < v98)
        break;
LABEL_91:
      *v87 = (float32x2_t)v96;
      ++v199;
LABEL_92:
      ++v86;
      v80 += 8;
      if (v80 == v79)
        goto LABEL_79;
    }
    v180 = v200;
    v181 = ((char *)v199 - (char *)v198) >> 3;
    v99 = (1 << -(char)__clz(v201 + 1));
    if (v201 >= 0xFFFFFFFFFFFFFFFELL)
      v99 = 1;
    if (v99 <= v98)
      v100 = (((char *)v199 - (char *)v198) >> 3) + 1;
    else
      v100 = v99;
    v101 = malloc_type_malloc(8 * v100, 0x100004000313F17uLL);
    v102 = (uint64_t *)v101;
    v103 = v198;
    v104 = v199;
    if (v198 != (uint64_t *)v199)
    {
      v105 = (char *)v199 - (char *)v198 - 8;
      if (v105 < 0x18)
      {
        v106 = v101;
      }
      else
      {
        v106 = v101;
        if ((unint64_t)((char *)v101 - (char *)v198) >= 0x20)
        {
          v107 = (v105 >> 3) + 1;
          v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
          v106 = (_QWORD *)((char *)v101 + v108);
          v109 = (__int128 *)(v198 + 2);
          v110 = v101 + 1;
          v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v112 = *v109;
            *(v110 - 1) = *(v109 - 1);
            *v110 = v112;
            v109 += 2;
            v110 += 2;
            v111 -= 4;
          }
          while (v111);
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_116;
          v103 = (uint64_t *)((char *)v103 + v108);
        }
      }
      do
      {
        v113 = *v103++;
        *v106++ = v113;
      }
      while (v103 != (uint64_t *)v104);
    }
LABEL_116:
    if (v97 != (uint64_t *)v180)
      free(v198);
    v87 = (float32x2_t *)&v102[v181];
    v198 = v102;
    v199 = v87;
    v201 = v100;
    goto LABEL_91;
  }
LABEL_79:
  if ((_QWORD *)v186 == v183)
  {
    v142 = v78[7];
    v143 = v78[8];
    while (1)
    {
      if (v142 == v143)
        goto LABEL_80;
      v145 = *(unsigned int *)(v142 + 4);
      v146 = v76[4];
      v147 = (v76[5] - v146) >> 3;
      if (v145 >> 7 < v147)
      {
        v148 = *(_QWORD *)(v146 + 8 * (v145 >> 7));
        if (v148)
        {
          v149 = *(unsigned __int16 *)(v148 + 2 * (v145 & 0x7F));
          v151 = v76[7];
          v150 = v76[8];
          v152 = (v150 - v151) >> 3;
          if (v152 > v149)
          {
            v153 = v151 + 8 * v149;
            if (v153 != v150 && *(_DWORD *)(v153 + 4) == (_DWORD)v145)
              break;
          }
        }
      }
LABEL_155:
      v142 += 8;
    }
    v155 = *(_QWORD *)v142;
    v156 = *(_QWORD *)v142 >> 39;
    if (v156 < v147
      && (v157 = *(_QWORD *)(v146 + 8 * v156)) != 0
      && (v158 = *(unsigned __int16 *)(v157 + 2 * (HIDWORD(v155) & 0x7F)), v152 > v158)
      && ((v159 = v151 + 8 * v158, v159 != v150) ? (v160 = *(_DWORD *)(v159 + 4) == HIDWORD(v155)) : (v160 = 0), v160))
    {
      v161 = (unsigned __int8 *)(v76[10] + v158);
    }
    else
    {
      v161 = (unsigned __int8 *)v76[11];
    }
    gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75, *(_QWORD *)v142, *v161);
    v162 = v198;
    v144 = v199;
    v163 = ((char *)v199 - (char *)v198) >> 3;
    if (v201 >= v163 + 1)
    {
LABEL_154:
      *v144 = (float32x2_t)v155;
      ++v199;
      goto LABEL_155;
    }
    v164 = v200;
    v165 = (1 << -(char)__clz(v201 + 1));
    if (v201 >= 0xFFFFFFFFFFFFFFFELL)
      v165 = 1;
    if (v165 <= v163 + 1)
      v166 = v163 + 1;
    else
      v166 = v165;
    v167 = malloc_type_malloc(8 * v166, 0x100004000313F17uLL);
    v168 = (uint64_t *)v167;
    v169 = v198;
    v170 = v199;
    if (v198 != (uint64_t *)v199)
    {
      v171 = (char *)v199 - (char *)v198 - 8;
      if (v171 < 0x18)
      {
        v172 = v167;
      }
      else
      {
        v172 = v167;
        if ((unint64_t)((char *)v167 - (char *)v198) >= 0x20)
        {
          v173 = (v171 >> 3) + 1;
          v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          v172 = (_QWORD *)((char *)v167 + v174);
          v175 = (__int128 *)(v198 + 2);
          v176 = v167 + 1;
          v177 = v173 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v178 = *v175;
            *(v176 - 1) = *(v175 - 1);
            *v176 = v178;
            v175 += 2;
            v176 += 2;
            v177 -= 4;
          }
          while (v177);
          if (v173 == (v173 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_189;
          v169 = (uint64_t *)((char *)v169 + v174);
        }
      }
      do
      {
        v179 = *v169++;
        *v172++ = v179;
      }
      while (v169 != (uint64_t *)v170);
    }
LABEL_189:
    if (v162 != (uint64_t *)v164)
      free(v198);
    v144 = (float32x2_t *)&v168[v163];
    v198 = v168;
    v199 = v144;
    v201 = v166;
    goto LABEL_154;
  }
LABEL_80:
  v84 = (unint64_t *)v198;
  v83 = (unint64_t *)v199;
  if (v198 != (uint64_t *)v199)
  {
    do
    {
      v85 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(v75);
      gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::remove(v85, *v84++);
    }
    while (v84 != v83);
    v84 = (unint64_t *)v198;
  }
  if (v84 != (unint64_t *)v200)
    free(v84);

  if (v188 != v190)
    free(v188);
  if (v193 != v195)
    free(v193);
}

void sub_19FB96118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{

  if (a16 != a18)
    free(a16);
  if (a24 != a26)
    free(a24);
  _Unwind_Resume(a1);
}

void md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_780[v16++ + 38]);
  while (v16 != 120);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  *(_QWORD *)(v14 + 24) = 120;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B3F18;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 120; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_780[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  v22[2] = 120;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19FB964C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  _QWORD *j;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *i;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;

  v6 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(a1);
  v7 = v6[4];
  if (a2 >> 39 < (v6[5] - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * (a2 >> 39));
    if (v8)
    {
      v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      v11 = v6[7];
      v10 = v6[8];
      if (v9 < (v10 - v11) >> 3)
      {
        v12 = v11 + 8 * v9;
        if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2))
        {
          v14 = v6[10];
          v15 = (_BYTE *)(v14 + v9);
          if (v14 + v9 != v6[11] && v14 != 0)
          {
            v17 = *v15;
            if (v17 != a3)
            {
              gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(a1, a2, v17);
              if (a3 == 4)
              {
                v26 = 0;
                v27 = 0xCBF29CE484222325;
                do
                  v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_737[v26++ + 38]);
                while (v26 != 120);
                v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(a1, v27);
                v61 = a2;
                v29 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v28 + 4, (uint64_t)&v61);
                if ((v30 & 1) != 0)
                {
                  v38 = (_BYTE *)v28[11];
                  v37 = v28[12];
                  if ((unint64_t)v38 >= v37)
                  {
                    v46 = (char *)v28[10];
                    v47 = v38 - v46;
                    v48 = v38 - v46 + 1;
                    if (v48 < 0)
                      goto LABEL_74;
                    v49 = v37 - (_QWORD)v46;
                    if (2 * v49 > v48)
                      v48 = 2 * v49;
                    if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
                      v50 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v50 = v48;
                    if (v50)
                      v51 = (char *)operator new(v50);
                    else
                      v51 = 0;
                    v56 = &v51[v50];
                    v39 = (uint64_t)&v51[v47 + 1];
                    v57 = (char *)(v46 - v38);
                    if (v46 == v38)
                      v57 = 0;
                    v28[10] = (uint64_t)&v51[v47 + (_QWORD)v57];
                    v28[11] = v39;
                    v28[12] = (uint64_t)v56;
                    if (v46)
                      operator delete(v46);
                  }
                  else
                  {
                    v39 = (uint64_t)(v38 + 1);
                  }
                  v28[11] = v39;
                  v31 = v28[31];
                }
                else
                {
                  v31 = v28[31];
                  if (v28[10] + (((uint64_t)v29 - v28[7]) >> 3) != v28[11])
                  {
                    v32 = (_QWORD *)v28[16];
                    if (v32)
                    {
                      while (1)
                      {
                        v63 = &v61;
                        v64 = 1;
                        v62 = v31;
                        v33 = v32[6];
                        if (!v33)
                          goto LABEL_73;
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v33 + 48))(v33, &v62, &v63);
                        v32 = (_QWORD *)*v32;
                        if (!v32)
                          goto LABEL_71;
                      }
                    }
                    goto LABEL_71;
                  }
                }
                for (i = (_QWORD *)v28[22]; i; i = (_QWORD *)*i)
                {
                  v63 = &v61;
                  v64 = 1;
                  v62 = v31;
                  v59 = i[6];
                  if (!v59)
                    goto LABEL_73;
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v59 + 48))(v59, &v62, &v63);
                }
              }
              else if (a3 == 3)
              {
                v18 = 0;
                v19 = 0xCBF29CE484222325;
                do
                  v19 = 0x100000001B3 * (v19 ^ aStdStringViewG_735[v18++ + 38]);
                while (v18 != 118);
                v20 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(a1, v19);
                v61 = a2;
                v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v61);
                if ((v22 & 1) != 0)
                {
                  v35 = (_BYTE *)v20[11];
                  v34 = v20[12];
                  if ((unint64_t)v35 >= v34)
                  {
                    v40 = (char *)v20[10];
                    v41 = v35 - v40;
                    v42 = v35 - v40 + 1;
                    if (v42 < 0)
                      goto LABEL_74;
                    v43 = v34 - (_QWORD)v40;
                    if (2 * v43 > v42)
                      v42 = 2 * v43;
                    if (v43 >= 0x3FFFFFFFFFFFFFFFLL)
                      v44 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v44 = v42;
                    if (v44)
                      v45 = (char *)operator new(v44);
                    else
                      v45 = 0;
                    v52 = &v45[v44];
                    v36 = (uint64_t)&v45[v41 + 1];
                    v53 = (char *)(v40 - v35);
                    if (v40 == v35)
                      v53 = 0;
                    v20[10] = (uint64_t)&v45[v41 + (_QWORD)v53];
                    v20[11] = v36;
                    v20[12] = (uint64_t)v52;
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    v36 = (uint64_t)(v35 + 1);
                  }
                  v20[11] = v36;
                  v23 = v20[31];
                }
                else
                {
                  v23 = v20[31];
                  if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
                  {
                    v24 = (_QWORD *)v20[16];
                    if (v24)
                    {
                      while (1)
                      {
                        v63 = &v61;
                        v64 = 1;
                        v62 = v23;
                        v25 = v24[6];
                        if (!v25)
                          break;
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v25 + 48))(v25, &v62, &v63);
                        v24 = (_QWORD *)*v24;
                        if (!v24)
                          goto LABEL_71;
                      }
LABEL_73:
                      std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
                      abort();
                    }
                    goto LABEL_71;
                  }
                }
                for (j = (_QWORD *)v20[22]; j; j = (_QWORD *)*j)
                {
                  v63 = &v61;
                  v64 = 1;
                  v62 = v23;
                  v55 = j[6];
                  if (!v55)
                    goto LABEL_73;
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v55 + 48))(v55, &v62, &v63);
                }
              }
LABEL_71:
              *v15 = a3;
              v60 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(a1);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v60, a2);
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<arComponents::LabelIconRequestData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7EF75512B090372ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7EF75512B090372ELL;
      if (*(_QWORD *)&v3 <= 0x7EF75512B090372EuLL)
        v5 = 0x7EF75512B090372EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7EF75512B090372ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7EF75512B090372ELL)
            {
              if (v7[2] == 0x7EF75512B090372ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7EF75512B090372ELL)
          {
            if (v7[2] == 0x7EF75512B090372ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::LabelIconRequestData]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B1F08;
  *(_QWORD *)(v11 + 8) = 0x7EF75512B090372ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7EF75512B090372EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7EF75512B090372ELL;
  v15[1] = "arComponents::LabelIconRequestData]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7EF75512B090372ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FB96AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_735[v16++ + 38]);
  while (v16 != 118);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  *(_QWORD *)(v14 + 24) = 118;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B3F48;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 118; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_735[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  v22[2] = 118;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19FB96D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  id v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned __int8 v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  _OWORD *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t (**v96)();
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;

  v5 = *a1;
  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v98 = *a3;
  v99 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
    v31 = *(_QWORD *)(v5 + 120);
    v94 = 0uLL;
    v95 = 0;
    v96 = &off_1E42B5430;
    v97 = 0;
    v32 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v31);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v32, a2, (uint64_t)&v94);
    v96 = &off_1E42B5430;
    v33 = *(_QWORD *)(v5 + 120);
    v94 = xmmword_19FFB3480;
    v34 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v33);
    gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v34, a2, (uint64_t)&v94);
    v35 = *(_QWORD *)(v5 + 120);
    *(_QWORD *)&v94 = *(_QWORD *)a1[1];
    v36 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v35);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v36, a2, (uint64_t)&v94);
    v37 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(*(_QWORD *)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v37, a2);
    v38 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(*(_QWORD *)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v38, a2);
    v11 = a1[2];
    v13 = *(char **)v11;
    v12 = *(uint64_t **)(v11 + 8);
    v14 = ((uint64_t)v12 - *(_QWORD *)v11) >> 3;
    v39 = *(_QWORD *)(v11 + 24);
    if (v39 >= v14 + 1)
      goto LABEL_77;
    v16 = *(char **)(v11 + 16);
    v40 = (1 << -(char)__clz(v39 + 1));
    if (v39 >= 0xFFFFFFFFFFFFFFFELL)
      v40 = 1;
    if (v40 <= v14 + 1)
      v18 = v14 + 1;
    else
      v18 = v40;
    v41 = (char *)malloc_type_malloc(8 * v18, 0x100004000313F17uLL);
    v20 = v41;
    v42 = *(uint64_t **)v11;
    v43 = *(char **)(v11 + 8);
    if (*(char **)v11 == v43)
      goto LABEL_74;
    v44 = v43 - (char *)v42 - 8;
    if (v44 < 0x18)
    {
      v45 = v41;
    }
    else
    {
      v45 = v41;
      if ((unint64_t)(v41 - (char *)v42) >= 0x20)
      {
        v46 = (v44 >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v45 = &v41[v47];
        v48 = (__int128 *)(v42 + 2);
        v49 = v41 + 16;
        v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *v48;
          *(v49 - 1) = *(v48 - 1);
          *v49 = v51;
          v48 += 2;
          v49 += 2;
          v50 -= 4;
        }
        while (v50);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_74;
        v42 = (uint64_t *)((char *)v42 + v47);
      }
    }
    do
    {
      v87 = *v42++;
      *(_QWORD *)v45 = v87;
      v45 += 8;
    }
    while (v42 != (uint64_t *)v43);
    goto LABEL_74;
  }
  v10 = atomic_load((unsigned __int8 *)(*a3 + 142));
  if ((v10 & 1) == 0)
  {
    v11 = a1[4];
    v13 = *(char **)v11;
    v12 = *(uint64_t **)(v11 + 8);
    v14 = ((uint64_t)v12 - *(_QWORD *)v11) >> 3;
    v15 = *(_QWORD *)(v11 + 24);
    if (v15 >= v14 + 1)
      goto LABEL_77;
    v16 = *(char **)(v11 + 16);
    v17 = (1 << -(char)__clz(v15 + 1));
    if (v15 >= 0xFFFFFFFFFFFFFFFELL)
      v17 = 1;
    if (v17 <= v14 + 1)
      v18 = v14 + 1;
    else
      v18 = v17;
    v19 = (char *)malloc_type_malloc(8 * v18, 0x100004000313F17uLL);
    v20 = v19;
    v21 = *(uint64_t **)v11;
    v22 = *(char **)(v11 + 8);
    if (*(char **)v11 == v22)
      goto LABEL_74;
    v23 = v22 - (char *)v21 - 8;
    if (v23 < 0x18)
    {
      v24 = v19;
    }
    else
    {
      v24 = v19;
      if ((unint64_t)(v19 - (char *)v21) >= 0x20)
      {
        v25 = (v23 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v19[v26];
        v27 = (__int128 *)(v21 + 2);
        v28 = v19 + 16;
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v27;
          *(v28 - 1) = *(v27 - 1);
          *v28 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_74;
        v21 = (uint64_t *)((char *)v21 + v26);
      }
    }
    do
    {
      v88 = *v21++;
      *(_QWORD *)v24 = v88;
      v24 += 8;
    }
    while (v21 != (uint64_t *)v22);
LABEL_74:
    if (v13 != v16)
      free(*(void **)v11);
    v12 = (uint64_t *)&v20[8 * v14];
    *(_QWORD *)v11 = v20;
    *(_QWORD *)(v11 + 8) = v12;
    *(_QWORD *)(v11 + 24) = v18;
    goto LABEL_77;
  }
  v52 = *(_QWORD *)(a1[3] + 16);
  v53 = *(_QWORD **)v52;
  v54 = *(_QWORD **)(v52 + 8);
  if (v53 != v54)
  {
    while (*v53 != 0x6F66BE14E10A8F81)
    {
      v53 += 5;
      if (v53 == v54)
        goto LABEL_43;
    }
  }
  if (v53 == v54)
  {
LABEL_43:
    v55 = 0;
  }
  else
  {
    v55 = v53[3];
    v56 = (std::__shared_weak_count *)v53[4];
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v60 = atomic_load((unsigned __int8 *)(v98 + 143));
  if ((v60 & 1) != 0)
    v61 = *(id *)(v98 + 16);
  else
    v61 = 0;
  v62 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v55 + 40))(v55, objc_msgSend(v61, "texture"), 0);

  if (v62)
    v63 = *v62;
  else
    v63 = 0;
  v64 = atomic_load((unsigned __int8 *)(v98 + 143));
  if ((v64 & 1) != 0)
    v65 = *(id *)(v98 + 16);
  else
    v65 = 0;
  v93 = *(_OWORD *)objc_msgSend(v65, "textureCoordinates");

  v66 = *(_QWORD *)(v5 + 120);
  v94 = v63;
  v95 = 0;
  v96 = &off_1E42B5430;
  v97 = 0;
  v67 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v66);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v67, a2, (uint64_t)&v94);
  v96 = &off_1E42B5430;
  v68 = *(_QWORD *)(v5 + 120);
  v94 = v93;
  v69 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v68);
  gdc::ComponentStorageWrapper<md::components::AlbedoTint>::emplace(v69, a2, (uint64_t)&v94);
  v70 = *(_QWORD *)(v5 + 120);
  *(_QWORD *)&v94 = *(_QWORD *)a1[1];
  v71 = (uint64_t *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v70);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v71, a2, (uint64_t)&v94);
  v72 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(*(_QWORD *)(v5 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v72, a2);
  v73 = (uint64_t *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(*(_QWORD *)(v5 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v73, a2);
  v11 = a1[2];
  v13 = *(char **)v11;
  v12 = *(uint64_t **)(v11 + 8);
  v14 = ((uint64_t)v12 - *(_QWORD *)v11) >> 3;
  v74 = *(_QWORD *)(v11 + 24);
  if (v74 < v14 + 1)
  {
    v16 = *(char **)(v11 + 16);
    v75 = (1 << -(char)__clz(v74 + 1));
    if (v74 >= 0xFFFFFFFFFFFFFFFELL)
      v75 = 1;
    if (v75 <= v14 + 1)
      v18 = v14 + 1;
    else
      v18 = v75;
    v76 = (char *)malloc_type_malloc(8 * v18, 0x100004000313F17uLL);
    v20 = v76;
    v77 = *(uint64_t **)v11;
    v78 = *(char **)(v11 + 8);
    if (*(char **)v11 == v78)
      goto LABEL_74;
    v79 = v78 - (char *)v77 - 8;
    if (v79 < 0x18)
    {
      v80 = v76;
    }
    else
    {
      v80 = v76;
      if ((unint64_t)(v76 - (char *)v77) >= 0x20)
      {
        v81 = (v79 >> 3) + 1;
        v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
        v80 = &v76[v82];
        v83 = (__int128 *)(v77 + 2);
        v84 = v76 + 16;
        v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = *v83;
          *(v84 - 1) = *(v83 - 1);
          *v84 = v86;
          v83 += 2;
          v84 += 2;
          v85 -= 4;
        }
        while (v85);
        if (v81 == (v81 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_74;
        v77 = (uint64_t *)((char *)v77 + v82);
      }
    }
    do
    {
      v89 = *v77++;
      *(_QWORD *)v80 = v89;
      v80 += 8;
    }
    while (v77 != (uint64_t *)v78);
    goto LABEL_74;
  }
LABEL_77:
  *v12 = a2;
  *(_QWORD *)(v11 + 8) += 8;
  v90 = v99;
  if (v99)
  {
    v91 = (unint64_t *)&v99->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_19FB9736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD4A6D7DC1E5120F8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD4A6D7DC1E5120F8;
      if (*(_QWORD *)&v3 <= 0xD4A6D7DC1E5120F8)
        v5 = 0xD4A6D7DC1E5120F8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD4A6D7DC1E5120F8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD4A6D7DC1E5120F8)
            {
              if (v7[2] == 0xD4A6D7DC1E5120F8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD4A6D7DC1E5120F8)
          {
            if (v7[2] == 0xD4A6D7DC1E5120F8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3FA8;
  *(_QWORD *)(v11 + 8) = 0xD4A6D7DC1E5120F8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD4A6D7DC1E5120F8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD4A6D7DC1E5120F8;
  v15[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD4A6D7DC1E5120F8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FB975E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB0AB5653F88B7825;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB0AB5653F88B7825;
      if (*(_QWORD *)&v3 <= 0xB0AB5653F88B7825)
        v5 = 0xB0AB5653F88B7825 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB0AB5653F88B7825;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB0AB5653F88B7825)
            {
              if (v7[2] == 0xB0AB5653F88B7825)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB0AB5653F88B7825)
          {
            if (v7[2] == 0xB0AB5653F88B7825)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange]";
  *(_QWORD *)(v11 + 24) = 74;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3EB8;
  *(_QWORD *)(v11 + 8) = 0xB0AB5653F88B7825;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB0AB5653F88B7825, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB0AB5653F88B7825;
  v15[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange]";
  v15[2] = 74;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB0AB5653F88B7825, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FB97808(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>();
}

void gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(uint64_t a1, size_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t **v19;
  unint64_t *v21;
  unint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t i;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  _QWORD v59[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_784[v6++ + 38]);
  while (v6 != 114);
  v9 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v8);
  v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = v9[7];
      v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = HIDWORD(a2);
        v16 = v14 + 8 * v12;
        if (v16 != v13 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
        {
          v18 = v9[10];
          v19 = (unint64_t **)(v18 + 24 * v12);
          if (v19 != (unint64_t **)v9[11] && v18 != 0)
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 != v22)
            {
LABEL_16:
              v23 = *(unsigned __int16 *)(a1 + 40);
              v24 = *(_QWORD *)(a1 + 48);
              v25 = (*(_QWORD *)(a1 + 56) - v24) >> 3;
              while (1)
              {
                v26 = *v21;
                v27 = HIDWORD(*v21);
                if (v23 != (unsigned __int16)*v21 || v25 <= v27)
                  break;
                v29 = (unsigned __int16 *)(v24 + 8 * v27);
                if (*v29 != v23 || v29[1] != WORD1(v26) || *((_DWORD *)v29 + 1) != (_DWORD)v27)
                  break;
                if (++v21 == v22)
                  goto LABEL_39;
              }
              while (--v22 != v21)
              {
                v30 = *v22;
                v31 = HIDWORD(*v22);
                if (v23 == (unsigned __int16)*v22 && v25 > v31)
                {
                  v33 = (unsigned __int16 *)(v24 + 8 * v31);
                  if (*v33 == v23 && v33[1] == WORD1(v30) && *((_DWORD *)v33 + 1) == (_DWORD)v31)
                  {
                    *v21++ = v30;
                    *v22 = v26;
                    if (v21 != v22)
                      goto LABEL_16;
                    goto LABEL_39;
                  }
                }
              }
            }
            v22 = v21;
LABEL_39:
            v34 = *v19;
            v35 = v22;
            if (*v19 != v22)
            {
              do
              {
                v36 = 0;
                v37 = *v34;
                v38 = 0xCBF29CE484222325;
                do
                  v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_785[v36++ + 38]);
                while (v36 != 110);
                v39 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v38);
                v40 = v39[4];
                if (v37 >> 39 < (v39[5] - v40) >> 3
                  && (v41 = *(_QWORD *)(v40 + 8 * (v37 >> 39))) != 0
                  && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v37) & 0x7F)),
                      v44 = v39[7],
                      v43 = v39[8],
                      v42 < (v43 - v44) >> 3)
                  && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == HIDWORD(v37)) : (v46 = 0), v46))
                {
                  v47 = v39[11];
                  v48 = v39[10] + 12 * v42;
                }
                else
                {
                  v47 = v39[11];
                  v48 = v47;
                }
                if (v48 == v47)
                  v48 = 0;
                v49 = *(unsigned __int8 *)(v48 + 8);
                *(_BYTE *)(v48 + 8) = a3;
                gdc::component::DataRequestObserver::updateStatusCounts(a1, v37, a2, v49, a3);
                ++v34;
              }
              while (v34 != v22);
              v15 = HIDWORD(a2);
              v35 = *v19;
            }
            if (v22 == v35)
            {
              for (i = 0; i != 114; ++i)
                v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_784[i + 38]);
              v51 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v7);
              v57 = a2;
              if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v51 + 4, v15))
              {
                v52 = (_QWORD *)v51[28];
                if (v52)
                {
                  v53 = v51[31];
                  while (1)
                  {
                    v59[0] = &v57;
                    v59[1] = 1;
                    v58 = v53;
                    v54 = v52[6];
                    if (!v54)
                      break;
                    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v54 + 48))(v54, &v58, v59);
                    v52 = (_QWORD *)*v52;
                    if (!v52)
                      return;
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
                  gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v55, v56);
                }
              }
            }
            else if (v22 != v19[1])
            {
              v19[1] = v22;
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_784[v16++ + 38]);
  while (v16 != 114);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>]";
  *(_QWORD *)(v14 + 24) = 114;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B42D8;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 114; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_784[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>]";
  v22[2] = 114;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19FB97ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_785[v16++ + 38]);
  while (v16 != 110);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>]";
  *(_QWORD *)(v14 + 24) = 110;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4398;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 110; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_785[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>]";
  v22[2] = 110;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19FB98140(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 12 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 4);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 12);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 12;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2A5EF61A9E93F8AFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2A5EF61A9E93F8AFLL;
      if (*(_QWORD *)&v3 <= 0x2A5EF61A9E93F8AFuLL)
        v5 = 0x2A5EF61A9E93F8AFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2A5EF61A9E93F8AFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2A5EF61A9E93F8AFLL)
            {
              if (v7[2] == 0x2A5EF61A9E93F8AFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2A5EF61A9E93F8AFLL)
          {
            if (v7[2] == 0x2A5EF61A9E93F8AFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>]";
  *(_QWORD *)(v11 + 24) = 79;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2448;
  *(_QWORD *)(v11 + 8) = 0x2A5EF61A9E93F8AFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2A5EF61A9E93F8AFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2A5EF61A9E93F8AFLL;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>]";
  v15[2] = 79;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2A5EF61A9E93F8AFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FB987FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA77C230BE749DC3FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA77C230BE749DC3FLL;
      if (*(_QWORD *)&v3 <= 0xA77C230BE749DC3FLL)
        v5 = 0xA77C230BE749DC3FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA77C230BE749DC3FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA77C230BE749DC3FLL)
            {
              if (v7[2] == 0xA77C230BE749DC3FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA77C230BE749DC3FLL)
          {
            if (v7[2] == 0xA77C230BE749DC3FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>]";
  *(_QWORD *)(v11 + 24) = 79;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2478;
  *(_QWORD *)(v11 + 8) = 0xA77C230BE749DC3FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA77C230BE749DC3FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA77C230BE749DC3FLL;
  v15[1] = "arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>]";
  v15[2] = 79;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA77C230BE749DC3FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FB98A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t i;
  _QWORD v32[3];
  unint64_t v33;

  v4 = result;
  switch(a3)
  {
    case 1:
      v5 = 0;
      v6 = 0xCBF29CE484222325;
      v7 = 0xCBF29CE484222325;
      do
        v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_736[v5++ + 38]);
      while (v5 != 117);
      v33 = v7;
      v8 = *(int8x8_t *)(result + 128);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v10 = v7;
          if (*(_QWORD *)&v8 <= v7)
            v10 = v7 % *(_QWORD *)&v8;
        }
        else
        {
          v10 = (*(_QWORD *)&v8 - 1) & v7;
        }
        v20 = *(_QWORD **)(*(_QWORD *)(result + 120) + 8 * v10);
        if (v20)
        {
          v21 = (_QWORD *)*v20;
          if (v21)
          {
            if (v9.u32[0] < 2uLL)
            {
              v22 = *(_QWORD *)&v8 - 1;
              while (1)
              {
                v24 = v21[1];
                if (v24 == v7)
                {
                  if (v21[2] == v7)
                    goto LABEL_41;
                }
                else if ((v24 & v22) != v10)
                {
                  goto LABEL_33;
                }
                v21 = (_QWORD *)*v21;
                if (!v21)
                  goto LABEL_33;
              }
            }
            do
            {
              v23 = v21[1];
              if (v23 == v7)
              {
                if (v21[2] == v7)
                {
LABEL_41:
                  v26 = (_QWORD *)v21[3];
                  goto LABEL_40;
                }
              }
              else
              {
                if (v23 >= *(_QWORD *)&v8)
                  v23 %= *(_QWORD *)&v8;
                if (v23 != v10)
                  break;
              }
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
        }
      }
LABEL_33:
      v25 = operator new();
      v26 = (_QWORD *)v25;
      v27 = 0;
      v28 = 0xCBF29CE484222325;
      do
        v28 = 0x100000001B3 * (v28 ^ aStdStringViewG_736[v27++ + 38]);
      while (v27 != 117);
      *(_QWORD *)(v25 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
      *(_QWORD *)(v25 + 24) = 117;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_DWORD *)(v25 + 144) = 1065353216;
      *(_OWORD *)(v25 + 152) = 0u;
      *(_OWORD *)(v25 + 168) = 0u;
      *(_QWORD *)(v25 + 184) = 0;
      *(_DWORD *)(v25 + 192) = 1065353216;
      *(_OWORD *)(v25 + 200) = 0u;
      *(_OWORD *)(v25 + 216) = 0u;
      *(_QWORD *)(v25 + 232) = 0;
      *(_DWORD *)(v25 + 240) = 1065353216;
      *(_QWORD *)v25 = &off_1E42B3EE8;
      *(_QWORD *)(v25 + 8) = v28;
      *(_QWORD *)(v25 + 248) = v4;
      v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 120), v7, &v33);
      v30 = v29[3];
      v29[3] = v26;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      for (i = 0; i != 117; ++i)
        v6 = 0x100000001B3 * (v6 ^ aStdStringViewG_736[i + 38]);
      v32[0] = v6;
      v32[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
      v32[2] = 117;
      gdc::Registry::_registerStorageDataSignals(v4, v7, (uint64_t)v32, v26 + 13);
LABEL_40:
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(v26, a2);
      break;
    case 2:
      v11 = 0;
      v12 = 0xCBF29CE484222325;
      do
        v12 = 0x100000001B3 * (v12 ^ aStdStringViewG_780[v11++ + 38]);
      while (v11 != 120);
      v13 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(result, v12);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(v13, a2);
      break;
    case 3:
      v14 = 0;
      v15 = 0xCBF29CE484222325;
      do
        v15 = 0x100000001B3 * (v15 ^ aStdStringViewG_735[v14++ + 38]);
      while (v14 != 118);
      v16 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(result, v15);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(v16, a2);
      break;
    case 4:
      v17 = 0;
      v18 = 0xCBF29CE484222325;
      do
        v18 = 0x100000001B3 * (v18 ^ aStdStringViewG_737[v17++ + 38]);
      while (v17 != 120);
      v19 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(result, v18);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(v19, a2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_19FB993E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_737[v16++ + 38]);
  while (v16 != 120);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  *(_QWORD *)(v14 + 24) = 120;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B3F78;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 120; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_737[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  v22[2] = 120;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19FB99648(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::ARLabelIconDataRequestContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1478;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARLabelIconDataRequestContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1478;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARLabelIconDataRequestContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::StandardLabelMarker::~StandardLabelMarker(md::StandardLabelMarker *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4297EB0;
  v2 = (unsigned __int8 *)(*((_QWORD *)this + 36) + 1297);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  md::LabelMarker::~LabelMarker(this);
}

{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4297EB0;
  v2 = (unsigned __int8 *)(*((_QWORD *)this + 36) + 1297);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  md::LabelMarker::~LabelMarker(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::StandardLabelMarker::name(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(md::StandardLabelMarker *))(*(_QWORD *)this + 128))(this);
}

uint64_t md::StandardLabelMarker::featureId(md::StandardLabelMarker *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t md::StandardLabelMarker::venueId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 368))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueBuildingId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 376))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueLevelId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 384))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueComponentId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 392))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueFloorOrdinal(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 400))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueLookInsideFloorOrdinal(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 408))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::venueComponentType(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 416))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

void md::StandardLabelMarker::styleAttributes(md::StandardLabelMarker *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::recursive_mutex *v7;
  char v8;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v5, (uint64_t)this);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 584))(*(_QWORD *)(*((_QWORD *)this + 36) + 8), *(unsigned int *)(*((_QWORD *)this + 36) + 48));
  if (v8)
    std::recursive_mutex::unlock(v7);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_19FB99E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::minZoomRank(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 240))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::maxZoomRank(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 248))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

void md::StandardLabelMarker::debugString(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 19;
  strcpy((char *)a1, "StandardLabelMarker");
}

void md::StandardLabelMarker::text(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  const char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;

  v3 = *((_QWORD *)this + 36);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "title");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
LABEL_17:
      v20 = 0;
      v10 = "";
      goto LABEL_18;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 272);
    if (!v7 || (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 832))(v7)) == 0)
    {
      v8 = *(unsigned __int8 *)(v3 + 1210);
      v9 = v8 == 7 || v8 == 4;
      if (!v9 || (v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8) + 496))(*(_QWORD *)(v3 + 8))) == 0)
      {
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 472))(*(_QWORD *)(v3 + 8), 0, v5);
        if (!v5)
          goto LABEL_17;
      }
    }
    if (*(char *)(v5 + 23) < 0)
      v5 = *(_QWORD *)v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
      goto LABEL_17;
  }
  v20 = objc_retainAutorelease(v6);
  v10 = (const char *)objc_msgSend(v20, "UTF8String");
LABEL_18:
  {
    v18 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  v13 = strlen(v10);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v15 + 1, 1);
    a2[1] = v14;
    a2[2] = v16 | 0x8000000000000000;
    *a2 = v17;
    a2 = (_QWORD *)v17;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v13;
    if (!v13)
      goto LABEL_27;
  }
  memmove(a2, v10, v14);
LABEL_27:
  *((_BYTE *)a2 + v14) = 0;

}

void sub_19FB9A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::subtext(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;
  id v7;
  unsigned __int8 v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;

  v3 = *((_QWORD *)this + 36);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4
    && ((*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3),
        v16 = (id)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v16, "subtitle"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v16,
        v5))
  {
    v17 = objc_retainAutorelease(v5);
    v6 = (const char *)objc_msgSend(v17, "UTF8String");
    v7 = v17;
  }
  else
  {
    v7 = 0;
    v6 = "";
  }
  v18 = v7;
  {
    v15 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  v10 = strlen(v6);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v12 + 1, 1);
    a2[1] = v11;
    a2[2] = v13 | 0x8000000000000000;
    *a2 = v14;
    a2 = (_QWORD *)v14;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v10;
    if (!v10)
      goto LABEL_14;
  }
  memmove(a2, v6, v11);
LABEL_14:
  *((_BYTE *)a2 + v11) = 0;

}

void sub_19FB9A3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::locale(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  unsigned __int8 v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 480))(*(_QWORD *)(*((_QWORD *)this + 36) + 8), 0);
  if (!v3)
    goto LABEL_6;
  v4 = v3;
  if (*(char *)(v3 + 23) < 0)
    v4 = *(_QWORD *)v3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v15 = objc_retainAutorelease(v5);
    v6 = (const char *)objc_msgSend(v15, "UTF8String");
  }
  else
  {
LABEL_6:
    v15 = 0;
    v6 = "";
  }
  {
    v14 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  v9 = strlen(v6);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v11 + 1, 1);
    a2[1] = v10;
    a2[2] = v12 | 0x8000000000000000;
    *a2 = v13;
    a2 = (_QWORD *)v13;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v9;
    if (!v9)
      goto LABEL_16;
  }
  memmove(a2, v6, v10);
LABEL_16:
  *((_BYTE *)a2 + v10) = 0;

}

void sub_19FB9A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL md::StandardLabelMarker::isOneWayArrow(md::StandardLabelMarker *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 36) + 1210) == 8;
}

BOOL md::StandardLabelMarker::isTrafficIncident(md::StandardLabelMarker *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 36) + 1210) == 10;
}

BOOL md::StandardLabelMarker::isRouteWaypoint(md::StandardLabelMarker *this)
{
  return (*((_BYTE *)this + 225) & 0xFD) == 20;
}

BOOL md::StandardLabelMarker::isRouteAnnotation(md::StandardLabelMarker *this)
{
  return *((_BYTE *)this + 225) == 23;
}

BOOL md::StandardLabelMarker::isARWalkingFeature(md::StandardLabelMarker *this)
{
  return (*((_BYTE *)this + 225) & 0xFC) == 24;
}

uint64_t md::StandardLabelMarker::featureLabelIdentifier(md::StandardLabelMarker *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 36) + 48);
}

BOOL md::StandardLabelMarker::isFlyoverTour(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(md::StandardLabelMarker *))(*(_QWORD *)this + 224))(this) != 0;
}

uint64_t md::StandardLabelMarker::animationID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 192))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::sortKey(md::StandardLabelMarker *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t md::StandardLabelMarker::isTransit(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 336);
}

uint64_t md::StandardLabelMarker::isTransitLine(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 337);
}

uint64_t md::StandardLabelMarker::isTransitAccessPoint(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 338);
}

uint64_t md::StandardLabelMarker::isOnRoute(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 340);
}

uint64_t md::StandardLabelMarker::isTransitNode(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 339);
}

uint64_t md::StandardLabelMarker::isPoint(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 341);
}

uint64_t md::StandardLabelMarker::isTrail(md::StandardLabelMarker *this)
{
  unint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  int *v6;
  int v7;
  _BOOL4 v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 96))(&v12);
  if (v12)
  {
    v1 = *(unsigned __int8 *)(v12 + 33);
    if (*(_BYTE *)(v12 + 33))
    {
      v2 = *(_DWORD **)v12;
      if (**(_DWORD **)v12 == 185)
      {
        v3 = 0;
        LODWORD(v1) = 1;
LABEL_11:
        v8 = (v2[2 * v3 + 1] & 0xFFFFFFFD) == 0;
LABEL_14:
        v4 = v1 & v8;
        v5 = v13;
        if (!v13)
          return v4;
        goto LABEL_15;
      }
      v3 = 0;
      v6 = v2 + 2;
      while (v1 - 1 != v3)
      {
        v7 = *v6;
        v6 += 2;
        ++v3;
        if (v7 == 185)
        {
          LODWORD(v1) = v3 < v1;
          goto LABEL_11;
        }
      }
      LODWORD(v1) = 0;
    }
    v8 = 1;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = v13;
  if (!v13)
    return v4;
LABEL_15:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

uint64_t md::StandardLabelMarker::businessID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 176))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::featureID(md::StandardLabelMarker *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t md::StandardLabelMarker::clientFeatureID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 168))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
}

uint64_t md::StandardLabelMarker::isCluster(md::StandardLabelMarker *this)
{
  md::LabelExternalPointFeature *v2;
  uint64_t isCluster;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::recursive_mutex *v10;
  char v11;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v8, (uint64_t)this);
  v2 = (md::LabelExternalPointFeature *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8)
                                                                          + 72))(*(_QWORD *)(*((_QWORD *)this + 36)
                                                                                             + 8));
  if (!v2)
  {
    isCluster = 0;
    if (!v11)
      goto LABEL_4;
    goto LABEL_3;
  }
  isCluster = md::LabelExternalPointFeature::isCluster(v2);
  if (v11)
LABEL_3:
    std::recursive_mutex::unlock(v10);
LABEL_4:
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return isCluster;
}

void sub_19FB9A818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::isLeafCluster(md::StandardLabelMarker *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v15[8];
  std::__shared_weak_count *v16;
  std::recursive_mutex *v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v15, (uint64_t)this);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
  v3 = v2;
  if (v2)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 304);
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v3 = 0;
      goto LABEL_16;
    }
    v5 = std::__shared_weak_count::lock(v4);
    v6 = v5;
    v7 = *(_QWORD *)(v3 + 296);
    if (!v5)
      v7 = 0;
    v19 = v7;
    v20 = v5;
    if (v7 && (v8 = *(_QWORD *)(v3 + 288), (v21 = v8) != 0))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      if (!v6)
        goto LABEL_16;
    }
    else
    {
      v3 = 0;
      if (!v6)
        goto LABEL_16;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_16:
  if (v18)
    std::recursive_mutex::unlock(v17);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v3;
}

void sub_19FB9A960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

VKObjectBoundsContext *md::StandardLabelMarker::clusterContentBounds(md::StandardLabelMarker *this)
{
  uint64_t v2;
  VKObjectBoundsContext *isa;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *begin;
  uint64_t v8;
  VKObjectBoundsContext *v9;
  unsigned __int8 v10;
  __int128 v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  char v36[8];
  std::__shared_weak_count *v37;
  std::recursive_mutex *v38;
  char v39;
  void *v40;
  std::__shared_weak_count *v41;
  VKObjectBoundsContext *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *__p;
  void *v48;
  char *v49;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v36, (uint64_t)this);
  if (!(*(unsigned int (**)(md::StandardLabelMarker *))(*(_QWORD *)this + 320))(this))
    goto LABEL_14;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
  isa = (VKObjectBoundsContext *)v2;
  if (!v2)
    goto LABEL_15;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 304);
  if (!v4 || v4->__shared_owners_ == -1)
  {
LABEL_14:
    isa = 0;
    goto LABEL_15;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v6 = v5;
  begin = isa[6]._points.__begin_;
  if (!v5)
    begin = 0;
  v40 = begin;
  v41 = v5;
  if (!begin)
    goto LABEL_42;
  isa = (VKObjectBoundsContext *)isa[6].super.isa;
  v42 = isa;
  if (!isa)
    goto LABEL_43;
  if (!(*((uint64_t (**)(VKObjectBoundsContext *))isa->super.isa + 9))(isa))
  {
LABEL_42:
    isa = 0;
LABEL_43:
    if (!v6)
      goto LABEL_15;
    goto LABEL_44;
  }
  v8 = (*((uint64_t (**)(VKObjectBoundsContext *))isa->super.isa + 9))(isa);
  v9 = objc_alloc_init(VKObjectBoundsContext);
  __p = 0;
  v48 = 0;
  v49 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  {
    v35 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v46 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v43, 5, 16);
  v16 = v43;
  v15 = v44;
  v17 = v44 - v43;
  if (v44 != v43)
  {
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF9)
      abort();
    v18 = (char *)operator new(2 * v17);
    __p = v18;
    v48 = v18;
    v49 = &v18[16 * (v17 >> 3)];
    do
    {
      v24 = (_OWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(*(_QWORD *)v16 + 16));
      v25 = v24;
      if (v18 < v49)
      {
        v11 = *v24;
        *(_OWORD *)v18 = *v24;
        v23 = v18 + 16;
      }
      else
      {
        v26 = (char *)__p;
        v27 = (v18 - (_BYTE *)__p) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          abort();
        v29 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = (char *)operator new(16 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[16 * v27];
        *(_OWORD *)v32 = *v25;
        v23 = v32 + 16;
        if (v18 == v26)
        {
          __p = &v31[16 * v27];
          v48 = v32 + 16;
          v49 = &v31[16 * v30];
        }
        else
        {
          do
          {
            v11 = *((_OWORD *)v18 - 1);
            *((_OWORD *)v32 - 1) = v11;
            v32 -= 16;
            v18 -= 16;
          }
          while (v18 != v26);
          v18 = (char *)__p;
          __p = v32;
          v48 = v23;
          v49 = &v31[16 * v30];
          if (!v18)
            goto LABEL_24;
        }
        operator delete(v18);
      }
LABEL_24:
      v48 = v23;
      v16 += 8;
      v18 = (char *)v23;
    }
    while (v16 != v15);
  }
  LODWORD(v11) = 15.0;
  LODWORD(v12) = 30.0;
  LODWORD(v13) = 25.0;
  LODWORD(v14) = 30.0;
  -[VKObjectBoundsContext setEdgePadding:](v9, "setEdgePadding:", *(double *)&v11, v12, v13, v14);
  -[VKObjectBoundsContext addPoints:](v9, "addPoints:", &__p);
  isa = v9;
  if (v43)
  {
    v44 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 40))(v46, v43, v45 - v43);
  }
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }

  if (v6)
  {
LABEL_44:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_15:
  if (v39)
    std::recursive_mutex::unlock(v38);
  v19 = v37;
  if (v37)
  {
    v20 = (unint64_t *)&v37->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return isa;
}

void sub_19FB9AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::isClusterChild(md::StandardLabelMarker *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  BOOL v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::recursive_mutex *v17;
  char v18;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v15, (uint64_t)this);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
  v3 = v2;
  if (v2)
  {
    v4 = *(std::__shared_weak_count **)(v2 + 304);
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v3 = 0;
      goto LABEL_19;
    }
    v5 = std::__shared_weak_count::lock(v4);
    v6 = v5;
    if (v5)
      v7 = *(_QWORD *)(v3 + 296) == 0;
    else
      v7 = 1;
    if (v7)
    {
      v3 = 0;
      if (!v5)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 288);
      if (v8)
        v3 = *(_QWORD *)(v8 + 72) != 0;
      else
        v3 = 0;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_19:
  if (v18)
    std::recursive_mutex::unlock(v17);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v3;
}

void sub_19FB9AEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::parentClusterLabelMarker(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  BOOL v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v23[8];
  std::__shared_weak_count *v24;
  std::recursive_mutex *v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v23, (uint64_t)this);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
  v5 = (_QWORD *)v4;
  if (!v4)
    goto LABEL_28;
  v6 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v6 || v6->__shared_owners_ == -1)
    goto LABEL_28;
  v7 = std::__shared_weak_count::lock(v6);
  v8 = v7;
  if (v7)
    v9 = v5[37] == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (!v7)
      goto LABEL_28;
    goto LABEL_13;
  }
  v10 = v5[36];
  if (!v10)
  {
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v10 + 72) != 0;
LABEL_14:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
    if (v11)
      goto LABEL_18;
LABEL_28:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_29;
  }
  if (!v11)
    goto LABEL_28;
LABEL_18:
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v14 = (std::__shared_weak_count *)v5[38];
  if (!v14 || v14->__shared_owners_ == -1)
  {
    v15 = 0;
LABEL_38:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_39;
  }
  v15 = std::__shared_weak_count::lock(v14);
  if (v15)
    v16 = v5[37];
  else
    v16 = 0;
  v27 = v16;
  v28 = v15;
  if (!v16)
    goto LABEL_38;
  v17 = v5[36];
  v29 = v17;
  if (!v17 || !*(_QWORD *)(v17 + 72))
    goto LABEL_38;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
LABEL_39:
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_29:
  if (v26)
    std::recursive_mutex::unlock(v25);
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19FB9B0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::populateClusterFeatureAnnotations(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char v73[8];
  std::__shared_weak_count *v74;
  std::recursive_mutex *v75;
  char v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v73, (uint64_t)a1);
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 320))(a1))
    goto LABEL_71;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[36] + 8) + 72))(*(_QWORD *)(a1[36] + 8));
  v5 = v4;
  if (!v4)
    goto LABEL_71;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v6 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v6 || v6->__shared_owners_ == -1)
    goto LABEL_71;
  v7 = std::__shared_weak_count::lock(v6);
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 296);
  if (!v7)
    v9 = 0;
  v77 = v9;
  v78 = v7;
  if (v9)
  {
    v10 = *(_QWORD *)(v5 + 288);
    v79 = v10;
    if (v10)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10))
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
        v80 = 0;
        v81 = 0;
        v82 = 0;
        {
          v72 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v72, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v83 = mdm::Allocator::instance(void)::alloc;
        (*(void (**)(uint64_t, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, &v80, 1, 0);
        v13 = 126 - 2 * __clz(v81 - v80);
        if (v81 == v80)
          v14 = 0;
        else
          v14 = v13;
        std::__introsort<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>((uint64_t)v80, v81, v14, 1);
        v15 = v81 - v80;
        v16 = *(char **)a2;
        if (v15 <= (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3)
          goto LABEL_30;
        if ((char *)v81 - (char *)v80 < 0)
          abort();
        v17 = *(_QWORD *)(a2 + 8);
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
        v19 = v17 - (_QWORD)v16;
        v20 = v18 + ((v17 - (_QWORD)v16) & 0xFFFFFFFFFFFFFFF8);
        v21 = v18 + 8 * v15;
        v22 = *(char **)a2;
        v23 = *(char **)(a2 + 8);
        if (v23 == *(char **)a2)
        {
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v20;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v21;
LABEL_28:
          if (v23)
            (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v23, v26 - (_QWORD)v23);
LABEL_30:
          v37 = v80;
          v38 = v81;
          if (v80 != v81)
          {
            while (1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)*v37 + 88))(*v37);
              v40 = objc_claimAutoreleasedReturnValue();
              v41 = (void *)v40;
              v42 = *(uint64_t **)(a2 + 8);
              v43 = *(_QWORD *)(a2 + 16);
              if ((unint64_t)v42 < v43)
              {
                if (v42)
                {
                  *v42 = v40;
                  v41 = 0;
                }
                v39 = v42 + 1;
                goto LABEL_33;
              }
              v44 = ((uint64_t)v42 - *(_QWORD *)a2) >> 3;
              v45 = v44 + 1;
              v46 = 0uLL;
              if ((unint64_t)(v44 + 1) >> 61)
                abort();
              v47 = v43 - *(_QWORD *)a2;
              if (v47 >> 2 > v45)
                v45 = v47 >> 2;
              v48 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v45;
              if (v48)
              {
                v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v48, 8);
                v50 = (_QWORD *)(v49 + 8 * v44);
                v51 = v49 + 8 * v48;
                v46 = 0uLL;
                if (v49)
                {
                  *v50 = v41;
                  v41 = 0;
                }
              }
              else
              {
                v51 = 0;
                v50 = (_QWORD *)(8 * v44);
              }
              v39 = v50 + 1;
              v52 = *(char **)a2;
              v53 = *(char **)(a2 + 8);
              if (v53 != *(char **)a2)
                break;
              *(_QWORD *)a2 = v50;
              *(_QWORD *)(a2 + 8) = v39;
              v59 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(a2 + 16) = v51;
              if (v53)
                goto LABEL_58;
LABEL_33:
              *(_QWORD *)(a2 + 8) = v39;

              if (++v37 == v38)
              {
                v37 = v80;
                goto LABEL_64;
              }
            }
            v54 = (unint64_t)&v53[-*(_QWORD *)a2 - 8];
            if (v54 > 0x57
              && ((v55 = (v52 - v53 + 7) & 0xFFFFFFFFFFFFFFF8, &v53[v55] >= (char *)v50) || (char *)v50 + v55 >= v53))
            {
              v61 = (v54 >> 3) + 1;
              v56 = &v53[-8 * (v61 & 0x3FFFFFFFFFFFFFFCLL)];
              v62 = v50 - 2;
              v63 = (__int128 *)(v53 - 32);
              v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v66 = *v63;
                v65 = v63[1];
                *v63 = v46;
                v63[1] = v46;
                v63 -= 2;
                *(v62 - 1) = v66;
                *v62 = v65;
                v62 -= 2;
                v64 -= 4;
              }
              while (v64);
              v50 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
              if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_53:
                v53 = *(char **)a2;
                v58 = *(char **)(a2 + 8);
                *(_QWORD *)a2 = v50;
                *(_QWORD *)(a2 + 8) = v39;
                v59 = *(_QWORD *)(a2 + 16);
                *(_QWORD *)(a2 + 16) = v51;
                while (v58 != v53)
                {
                  v60 = (void *)*((_QWORD *)v58 - 1);
                  v58 -= 8;

                }
                if (!v53)
                  goto LABEL_33;
LABEL_58:
                (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v53, v59 - (_QWORD)v53);
                goto LABEL_33;
              }
            }
            else
            {
              v56 = *(char **)(a2 + 8);
            }
            do
            {
              v57 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *(_QWORD *)v56 = 0;
              *--v50 = v57;
            }
            while (v56 != v52);
            goto LABEL_53;
          }
LABEL_64:
          if (v37)
          {
            v81 = v37;
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v83 + 40))(v83, v37, v82 - (_QWORD)v37);
          }
          goto LABEL_66;
        }
        v24 = (unint64_t)&v23[-*(_QWORD *)a2 - 8];
        if (v24 > 0x77)
        {
          if ((unint64_t)&v23[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] >= v20
            || (v25 = v18 + ((v17 - (_QWORD)v16) & 0xFFFFFFFFFFFFFFF8),
                (v19 & 0xFFFFFFFFFFFFFFF8) - (v24 & 0xFFFFFFFFFFFFFFF8) + v18 - 8 >= (unint64_t)v23))
          {
            v27 = v19 >> 3;
            v28 = (v24 >> 3) + 1;
            v29 = (_OWORD *)(v18 + 8 * v27 - 16);
            v30 = (__int128 *)(v23 - 32);
            v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v33 = *v30;
              v32 = v30[1];
              *v30 = 0uLL;
              v30[1] = 0uLL;
              v30 -= 2;
              *(v29 - 1) = v33;
              *v29 = v32;
              v29 -= 2;
              v31 -= 4;
            }
            while (v31);
            v25 = v20 - 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            v23 -= 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_26:
              v23 = *(char **)a2;
              v35 = *(char **)(a2 + 8);
              *(_QWORD *)a2 = v25;
              *(_QWORD *)(a2 + 8) = v20;
              v26 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(a2 + 16) = v21;
              while (v35 != v23)
              {
                v36 = (void *)*((_QWORD *)v35 - 1);
                v35 -= 8;

              }
              goto LABEL_28;
            }
          }
        }
        else
        {
          v25 = v18 + ((v17 - (_QWORD)v16) & 0xFFFFFFFFFFFFFFF8);
        }
        do
        {
          v34 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)(v25 - 8) = v34;
          v25 -= 8;
        }
        while (v23 != v22);
        goto LABEL_26;
      }
    }
  }
LABEL_66:
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_71:
  if (v76)
    std::recursive_mutex::unlock(v75);
  v69 = v74;
  if (v74)
  {
    v70 = (unint64_t *)&v74->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_19FB9B690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, a17, a19 - a17);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::populateClusterWaypointInfos(_QWORD *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  std::__shared_weak_count *v55;
  std::recursive_mutex *v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v54, (uint64_t)a1);
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 320))(a1))
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[36] + 8) + 72))(*(_QWORD *)(a1[36] + 8));
    v5 = v4;
    if (v4)
    {
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v6 = *(std::__shared_weak_count **)(v4 + 304);
      if (v6)
      {
        if (v6->__shared_owners_ != -1)
        {
          v7 = std::__shared_weak_count::lock(v6);
          v8 = v7;
          v9 = *(_QWORD *)(v5 + 296);
          if (!v7)
            v9 = 0;
          v58 = v9;
          v59 = v7;
          if (v9)
          {
            v10 = *(_QWORD *)(v5 + 288);
            v60 = v10;
            if (v10)
            {
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10))
              {
                v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
                v61 = 0;
                v62 = 0;
                v63 = 0;
                {
                  v53 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v64 = mdm::Allocator::instance(void)::alloc;
                (*(void (**)(uint64_t, uint64_t **, uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, &v61, 1, 0);
                v13 = 126 - 2 * __clz(v62 - v61);
                if (v62 == v61)
                  v14 = 0;
                else
                  v14 = v13;
                std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>((uint64_t)v61, v62, v14, 1);
                v16 = v61;
                v15 = v62;
                if (v62 != v61)
                {
                  v17 = 0;
                  v15 = v61;
                  while (1)
                  {
                    v19 = v15[v17];
                    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
                    v20 = (void *)objc_claimAutoreleasedReturnValue();

                    if (!v20)
                      goto LABEL_18;
                    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
                    v21 = objc_claimAutoreleasedReturnValue();
                    v22 = (void *)v21;
                    v23 = (uint64_t *)a2[1];
                    v24 = (unint64_t)a2[2];
                    if ((unint64_t)v23 < v24)
                    {
                      if (v23)
                      {
                        *v23 = v21;
                        v22 = 0;
                      }
                      v18 = (char *)(v23 + 1);
                      goto LABEL_17;
                    }
                    v25 = ((char *)v23 - *a2) >> 3;
                    v26 = v25 + 1;
                    v27 = 0uLL;
                    if ((unint64_t)(v25 + 1) >> 61)
                      abort();
                    v28 = v24 - (_QWORD)*a2;
                    if (v28 >> 2 > v26)
                      v26 = v28 >> 2;
                    v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v26;
                    if (v29)
                    {
                      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v29, 8);
                      v31 = (char *)(v30 + 8 * v25);
                      v32 = v30 + 8 * v29;
                      v27 = 0uLL;
                      if (v30)
                      {
                        *(_QWORD *)v31 = v22;
                        v22 = 0;
                      }
                    }
                    else
                    {
                      v32 = 0;
                      v31 = (char *)(8 * v25);
                    }
                    v18 = v31 + 8;
                    v33 = *a2;
                    v34 = a2[1];
                    if (v34 != *a2)
                      break;
                    *a2 = v31;
                    a2[1] = v18;
                    v40 = a2[2];
                    a2[2] = (char *)v32;
                    if (v34)
                      goto LABEL_44;
LABEL_17:
                    a2[1] = v18;

LABEL_18:
                    ++v17;
                    v15 = v61;
                    if (v17 >= v62 - v61)
                    {
                      v16 = v61;
                      goto LABEL_50;
                    }
                  }
                  v35 = v34 - *a2 - 8;
                  if (v35 > 0x57
                    && ((v36 = (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8, &v34[v36] >= v31) || &v31[v36] >= v34))
                  {
                    v42 = (v35 >> 3) + 1;
                    v37 = &v34[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
                    v43 = v31 - 16;
                    v44 = (__int128 *)(v34 - 32);
                    v45 = v42 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v47 = *v44;
                      v46 = v44[1];
                      *v44 = v27;
                      v44[1] = v27;
                      v44 -= 2;
                      *((_OWORD *)v43 - 1) = v47;
                      *(_OWORD *)v43 = v46;
                      v43 -= 32;
                      v45 -= 4;
                    }
                    while (v45);
                    v31 -= 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_39:
                      v34 = *a2;
                      v39 = a2[1];
                      *a2 = v31;
                      a2[1] = v18;
                      v40 = a2[2];
                      a2[2] = (char *)v32;
                      while (v39 != v34)
                      {
                        v41 = (void *)*((_QWORD *)v39 - 1);
                        v39 -= 8;

                      }
                      if (!v34)
                        goto LABEL_17;
LABEL_44:
                      (*(void (**)(char *, char *, int64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v34, v40 - v34);
                      goto LABEL_17;
                    }
                  }
                  else
                  {
                    v37 = a2[1];
                  }
                  do
                  {
                    v38 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *(_QWORD *)v37 = 0;
                    *((_QWORD *)v31 - 1) = v38;
                    v31 -= 8;
                  }
                  while (v37 != v33);
                  goto LABEL_39;
                }
LABEL_50:
                if (v15)
                {
                  v62 = v15;
                  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v64 + 40))(v64, v15, v63 - (_QWORD)v16);
                }
              }
            }
          }
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
      }
    }
  }
  if (v57)
    std::recursive_mutex::unlock(v56);
  v50 = v55;
  if (v55)
  {
    v51 = (unint64_t *)&v55->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_19FB9BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, a17, a19 - a17);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL md::StandardLabelMarker::isVenueButton(md::StandardLabelMarker *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 36) + 1220) == 1;
}

uint64_t md::StandardLabelMarker::incident(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 32))(*((_QWORD *)this + 36));
}

id md::StandardLabelMarker::waypointInfo(md::StandardLabelMarker *this)
{
  uint64_t v2;
  id v3;

  if ((*(unsigned int (**)(md::StandardLabelMarker *))(*(_QWORD *)this + 184))(this)
    && (v2 = *(_QWORD *)(*((_QWORD *)this + 36) + 8)) != 0)
  {
    v3 = *(id *)(v2 + 680);
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id md::StandardLabelMarker::arWalkingFeature(md::StandardLabelMarker *this)
{
  void *v1;

  v1 = *(void **)(*((_QWORD *)this + 36) + 8);
  if (v1)
  {
    (*(void (**)(void *))(*(_QWORD *)v1 + 208))(v1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

uint64_t md::StandardLabelMarker::routeAnnotations(md::StandardLabelMarker *this)
{
  uint64_t v2;

  if ((*(unsigned int (**)(md::StandardLabelMarker *))(*(_QWORD *)this + 192))(this)
    && (v2 = *(_QWORD *)(*((_QWORD *)this + 36) + 8)) != 0)
  {
    return v2 + 296;
  }
  else
  {
    return (uint64_t)this + 256;
  }
}

id md::StandardLabelMarker::externalFeatureAnnotation(md::StandardLabelMarker *this)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::recursive_mutex *v13;
  char v14;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v11, (uint64_t)this);
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 8) + 232))(*(_QWORD *)(*((_QWORD *)this + 36) + 8));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2
    && (objc_msgSend(v2, "feature"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "isInjectedFeature"),
        v4,
        v5))
  {
    v6 = v3;
  }
  else
  {
    v6 = 0;
  }

  if (v14)
    std::recursive_mutex::unlock(v13);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_19FB9BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::isSelectable(md::StandardLabelMarker *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 36);
  if (*(_BYTE *)(v1 + 1076))
    return 1;
  result = *(_QWORD *)(v1 + 272);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 640))(result);
  return result;
}

uint64_t md::StandardLabelMarker::isSelected(md::StandardLabelMarker *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 36) + 1240));
  return v1 & 1;
}

uint64_t md::StandardLabelMarker::isInPickedState(md::StandardLabelMarker *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 36) + 1243));
  return v1 & 1;
}

BOOL md::StandardLabelMarker::hasLaidOutForDisplay(md::StandardLabelMarker *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 36) + 1073) == 37;
}

BOOL md::StandardLabelMarker::isVisible(md::StandardLabelMarker *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 36) + 1072) & 0xFD) == 1;
}

uint64_t md::StandardLabelMarker::isTextVisible(md::StandardLabelMarker *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 36);
  if ((*(_BYTE *)(v1 + 1072) & 0xFD) == 1 && (v2 = *(_QWORD *)(v1 + 272)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 744))(v2);
  else
    return 0;
}

uint64_t md::StandardLabelMarker::isAlongSelectedTransitLine(std::__shared_weak_count **this)
{
  std::__shared_weak_count **v1;
  int v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t shared_owners;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;

  v1 = this;
  v2 = *((unsigned __int8 *)this + 225);
  if (v2 == 10)
  {
    shared_owners = this[36]->__shared_owners_;
    v11 = *(_QWORD *)(shared_owners + 504);
    v10 = *(_QWORD *)(shared_owners + 512);
    if (v11 == v10)
    {
LABEL_25:
      LOBYTE(v1) = 0;
      return v1 & 1;
    }
    v12 = v11 + 8;
    do
    {
      v13 = *(_QWORD *)(v12 - 8);
      if (v13)
        v14 = v13 + 8;
      else
        v14 = 0;
      v15 = *(unsigned __int16 *)(v14 + 42);
      LOBYTE(v1) = v15 != 0xFFFF;
      v16 = v15 != 0xFFFF || v12 == v10;
      v12 += 8;
    }
    while (!v16);
  }
  else
  {
    if (v2 != 8)
      goto LABEL_25;
    v3 = this[30];
    if (!v3)
      goto LABEL_25;
    v4 = std::__shared_weak_count::lock(v3);
    if (!v4)
      goto LABEL_25;
    v5 = v4;
    v6 = v1[29];
    if (v6)
    {
      LOBYTE(v1) = (*(uint64_t (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *), std::__shared_weak_count *))(*(_QWORD *)v6[7].__vftable[1].__get_deleter + 72))(v6[7].__vftable[1].__get_deleter, v1[38]);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
        return v1 & 1;
    }
    else
    {
      v17 = (unint64_t *)&v4->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18)
        goto LABEL_25;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_25;
  }
  return v1 & 1;
}

void sub_19FB9BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::isDragged(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 488);
}

void md::StandardLabelMarker::setIsDragged(md::StandardLabelMarker *this, int a2)
{
  md::LabelManager *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  md::LabelManager *v19;
  std::__shared_weak_count *v20;
  std::recursive_mutex *v21;
  char v22;
  md::LabelManager *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v19, (uint64_t)this);
  v4 = v19;
  if (!v19)
    goto LABEL_19;
  v5 = *((_QWORD *)this + 36);
  if ((*(_BYTE *)(v5 + 488) != 0) == a2)
    goto LABEL_19;
  *(_BYTE *)(v5 + 488) = a2;
  v23 = v4;
  v24 = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  v25 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v27 = 0;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E42C9908;
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v27 = v9;
  md::LabelManager::queueCommand(v4, 41, 0, v26);
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
    goto LABEL_13;
  }
  if (v27)
  {
    v13 = 5;
LABEL_13:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_19:
  if (v22)
    std::recursive_mutex::unlock(v21);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19FB9C130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a13);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::setLabelPressed(md::StandardLabelMarker *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::recursive_mutex *v14;
  char v15;
  char v16;
  uint64_t v17;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v12, (uint64_t)this);
  v4 = v12;
  if (v12)
  {
    v5 = *((_QWORD *)this + 36);
    if ((*(_BYTE *)(v5 + 1079) != 0) != a2)
    {
      *(_BYTE *)(v5 + 1079) = a2;
      v6 = atomic_load((unsigned __int8 *)(v4 + 3058));
      if ((v6 & 1) != 0)
      {
        v7 = *(_QWORD *)(v4 + 136);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 56);
          if (v8)
          {
            v17 = v4;
            v16 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v8 + 48))(v8, &v17, &v16);
          }
        }
      }
    }
  }
  if (v15)
    std::recursive_mutex::unlock(v14);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19FB9C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::featureTile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 320);
  *a2 = *(_QWORD *)(this + 312);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t md::StandardLabelMarker::useVKSelectionBalloon(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 1245);
}

void md::StandardLabelMarker::setUseVKSelectionBalloon(md::StandardLabelMarker *this, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::recursive_mutex *v9;
  char v10;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v7, (uint64_t)this);
  *(_BYTE *)(*((_QWORD *)this + 36) + 1245) = a2;
  if (v10)
    std::recursive_mutex::unlock(v9);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void md::StandardLabelMarker::transitSystems(md::StandardLabelMarker *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v3 = *((unsigned __int8 *)this + 225);
  v4 = v3 > 0xD;
  v5 = (1 << v3) & 0x2600;
  if (v4 || v5 == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    {
      v19 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v19, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    a2[3] = mdm::Allocator::instance(void)::alloc;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    v8 = *((_QWORD *)this + 23);
    a2[2] = 0;
    a2[3] = v8;
    v9 = *((_QWORD *)this + 20);
    v10 = *((_QWORD *)this + 21);
    v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0)
        abort();
      v12 = v11 >> 5;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v14 = 0;
      *a2 = v13;
      a2[1] = v13;
      a2[2] = v13 + 32 * v12;
      do
      {
        v16 = v13 + v14;
        if (v13 + v14)
        {
          v17 = (__int128 *)(v9 + v14);
          *(_QWORD *)(v13 + v14 + 24) = *(_QWORD *)(v9 + v14 + 24);
          if (*(char *)(v9 + v14 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v16, *(void **)(v9 + v14), *(_QWORD *)(v9 + v14 + 8));
          }
          else
          {
            v15 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v15;
          }
        }
        v14 += 32;
      }
      while (v9 + v14 != v10);
      a2[1] = v13 + v14;
    }
  }
}

void sub_19FB9C4A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::featureHandles(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v22 = v5;
  if (!v5 || !*((_QWORD *)this + 29))
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    {
      v20 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    a2[3] = mdm::Allocator::instance(void)::alloc;
    if (v5)
      goto LABEL_26;
    return;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  a2[3] = mdm::Allocator::instance(void)::alloc;
  v7 = *((_QWORD *)this + 36);
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v9)
  {
    v23[0] = &off_1E4289CB0;
    v23[1] = a2;
    v23[2] = this;
    v24 = v23;
    std::mutex::lock((std::mutex *)(v9 + 8));
    v12 = *(_QWORD *)(v9 + 152);
    if (v12)
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 24))(v12, v23);
    std::mutex::unlock((std::mutex *)(v9 + 8));
    v13 = v24;
    if (v24 == v23)
    {
      v14 = 4;
      v13 = v23;
      goto LABEL_19;
    }
    if (v24)
    {
      v14 = 5;
LABEL_19:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v5 = v22;
  if (v22)
  {
LABEL_26:
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19FB9C734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t *v17;
  std::mutex *v18;
  char *v20;
  uint64_t v21;

  std::mutex::unlock(v18);
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](v17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

float md::StandardLabelMarker::calloutAnchorRect(md::StandardLabelMarker *this, uint64_t a2)
{
  __n128 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::recursive_mutex *v26;
  char v27;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v24, (uint64_t)this);
  v5 = *((_QWORD *)this + 36);
  v6 = 0.0;
  if ((*(_BYTE *)(v5 + 1072) & 0xFD) == 1)
  {
    v7 = *(_QWORD *)(v5 + 272);
    if (!v7
      || ((v6 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 664))(v7, a2),
           v10 = v8,
           v12 = v11,
           v13 = v9,
           v11 >= v6)
        ? (v14 = v9 < v8)
        : (v14 = 1),
          v14))
    {
      v10 = 0.0;
      v6 = 0.0;
      v12 = 0.0;
      v13 = 0.0;
    }
    v4.n128_f32[0] = v12 - v6;
    if ((float)(v12 - v6) == 0.0 || (v4.n128_f32[0] = v13 - v10, (float)(v13 - v10) == 0.0))
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 36) + 272);
      if (v15)
      {
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 256))(v15, v4);
      }
      else
      {
        v17 = -3.4028e38;
        v16 = 3.4028e38;
      }
      v18 = v17 - v16;
      if (v18 >= 0.0)
        v19 = v18 * 0.5;
      else
        v19 = 0.0;
      v6 = -v19;
    }
  }
  if (v27)
    std::recursive_mutex::unlock(v26);
  v20 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v6;
}

void sub_19FB9C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float md::StandardLabelMarker::screenCollisionBounds(md::StandardLabelMarker *this)
{
  uint64_t v2;
  float v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::recursive_mutex *v10;
  char v11;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v8, (uint64_t)this);
  if (v8)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 36) + 272);
    if (v2)
    {
      v3 = *(float *)(*(_QWORD *)(v2 + 24) + 392);
      if (!v11)
        goto LABEL_9;
      goto LABEL_8;
    }
    v3 = 3.4028e38;
  }
  else
  {
    v3 = 3.4028e38;
  }
  if (v11)
LABEL_8:
    std::recursive_mutex::unlock(v10);
LABEL_9:
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

float md::StandardLabelMarker::screenPixelBounds(md::StandardLabelMarker *this)
{
  uint64_t v2;
  float v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::recursive_mutex *v10;
  char v11;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v8, (uint64_t)this);
  if (v8)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 36) + 272);
    if (v2)
    {
      v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
      if (!v11)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v3 = 3.4028e38;
  if (v11)
LABEL_6:
    std::recursive_mutex::unlock(v10);
LABEL_7:
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19FB9CB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double md::StandardLabelMarker::coordinate@<D0>(md::StandardLabelMarker *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 36);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 128);
  result = *(double *)(v2 + 144);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t md::StandardLabelMarker::coordinateNoFallbackElevation@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;

  v2 = *(_QWORD *)(this + 288);
  if (*(_BYTE *)(v2 + 192))
    v3 = *(float *)(v2 + 188);
  else
    v3 = 1.79769313e308;
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 128);
  *(double *)(a2 + 16) = v3;
  return this;
}

float md::StandardLabelMarker::buildingHeight(md::StandardLabelMarker *this)
{
  return *(float *)(*((_QWORD *)this + 36) + 244);
}

uint64_t md::StandardLabelMarker::buildingFaceAzimuth(md::StandardLabelMarker *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 36) + 248);
}

float md::StandardLabelMarker::elevationOffset(md::StandardLabelMarker *this)
{
  return *(float *)(*((_QWORD *)this + 36) + 240);
}

uint64_t md::StandardLabelMarker::facingDirection(md::StandardLabelMarker *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v13;

  v1 = *((_QWORD *)this + 36);
  if (!*(_BYTE *)(v1 + 164))
    return 0;
  v2 = *(float *)(v1 + 152);
  v3 = *(float *)(v1 + 156);
  v4 = 1.0 / sqrtf((float)(v2 * v2) + (float)(v3 * v3));
  v5 = v4 * v2;
  v6 = v4 * v3;
  *(float *)&v13 = v5;
  *((float *)&v13 + 1) = v4 * v3;
  v7 = 0.0;
  if (v13)
  {
    v8 = atan2f(v6, v5);
    v9 = fmodf(4.7124 - v8, 6.2832);
    v7 = fmodf(v9 + 6.2832, 6.2832) + -3.1416;
  }
  if (v7 >= -0.0001)
  {
    v11 = v7;
  }
  else
  {
    v10 = v7 + 6.28318531;
    v11 = v10;
  }
  return COERCE_UNSIGNED_INT(fminf(fmaxf(v11 * 57.296, 0.0), 360.0)) | 0x100000000;
}

BOOL md::StandardLabelMarker::positionOfInterest(uint64_t a1, uint64_t a2, float *a3)
{
  float v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::recursive_mutex *v15;
  char v16;

  v6 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 288) + 8) + 248))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8));
  if (v6 >= 0.00000011921)
  {
    md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v13, a1);
    v7 = *(_QWORD *)(a1 + 288);
    v8 = *(_OWORD *)(v7 + 128);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v7 + 144);
    *(_OWORD *)a2 = v8;
    *a3 = v6;
    if (v16)
      std::recursive_mutex::unlock(v15);
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v6 >= 0.00000011921;
}

uint64_t md::StandardLabelMarker::selectionBehavior(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 1212);
}

uint64_t md::StandardLabelMarker::pickedLabelBalloonBehavior(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 1074);
}

double md::StandardLabelMarker::calloutAnchorPoint(md::StandardLabelMarker *this, int a2)
{
  float v4;
  float v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::recursive_mutex *v13;
  char v14;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v11, (uint64_t)this);
  if (!v11)
  {
    v6 = *MEMORY[0x1E0C9D538];
    if (!v14)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(float *)(*((_QWORD *)this + 36) + 432);
  v5 = roundf(v4);
  if (a2)
    v4 = v5;
  v6 = (float)(v4 / *(float *)(v11 + 480));
  if (v14)
LABEL_5:
    std::recursive_mutex::unlock(v13);
LABEL_6:
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

uint64_t md::StandardLabelMarker::externalFeatureCategory(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 1213);
}

void md::StandardLabelMarker::dataIconImageKeys(md::StandardLabelMarker *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void (**v20)(_QWORD);
  BOOL v21;
  unsigned int *v22;
  VKImageSourceKey *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  VKImageSourceKey *v28;
  void *v29;
  _QWORD *v30;
  VKImageSourceKey *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  VKImageSourceKey *v35;
  _QWORD *v36;
  VKImageSourceKey *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  VKImageSourceKey *v42;
  VKImageSourceKey *v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    v39 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v39, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  if (*((_BYTE *)this + 225) != 8)
    return;
  v6 = *(_QWORD **)(*((_QWORD *)this + 36) + 8);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[89] - v6[88]) >> 2);
  v8 = *a2;
  v9 = a2[2] - *a2;
  if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) < v7)
  {
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v10 = a2[1];
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8 * ((uint64_t)(v6[89] - v6[88]) >> 2), 8);
    v12 = v11 + v10 - v8;
    if (v10 == v8)
    {
      *a2 = v12;
      a2[1] = v12;
      a2[2] = v11 + 24 * v7;
      if (v8)
LABEL_12:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v8, v9);
    }
    else
    {
      v40 = v11 + 24 * v7;
      v13 = (void **)v10;
      v14 = v11 + v10 - v8;
      do
      {
        *(_QWORD *)(v14 - 24) = &off_1E42B4C50;
        v14 -= 24;
        *(_QWORD *)(v14 + 8) = 0;
        v16 = *(v13 - 2);
        v15 = v13 - 2;
        objc_storeStrong((id *)(v14 + 8), v16);
        v17 = *v15;
        *v15 = 0;

        v13 = v15 - 1;
      }
      while (v13 != (void **)v8);
      *a2 = v14;
      a2[1] = v12;
      a2[2] = v40;
      v18 = (void (***)(_QWORD))(v10 - 24);
      v19 = v18;
      do
      {
        v20 = *v19;
        v19 -= 3;
        (*v20)(v18);
        v21 = v18 == (void (***)(_QWORD))v8;
        v18 = v19;
      }
      while (!v21);
      if (v8)
        goto LABEL_12;
    }
  }
  v22 = (unsigned int *)v6[88];
  v41 = (unsigned int *)v6[89];
  if (v22 != v41)
  {
    while (1)
    {
      v23 = -[VKImageSourceKey initWithIconAttributeKey:attributeValue:]([VKImageSourceKey alloc], "initWithIconAttributeKey:attributeValue:", 49, *v22);
      v43 = v23;
      -[VKImageSourceKey setDataType:](v23, "setDataType:", 6);
      -[VKImageSourceKey setDataValue:](v23, "setDataValue:", *v22);
      v24 = *((unsigned __int8 *)v22 + 9);
      if (*((_BYTE *)v22 + 9))
      {
        v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v24);
        -[VKImageSourceKey setFallbackImageKeys:](v23, "setFallbackImageKeys:", v25);
        v26 = 0;
        do
        {
          v27 = *(unsigned int *)(v6[92] + 4 * (v26 + *((unsigned __int8 *)v22 + 8)));
          v28 = -[VKImageSourceKey initWithIconAttributeKey:attributeValue:]([VKImageSourceKey alloc], "initWithIconAttributeKey:attributeValue:", 37, v27);
          -[VKImageSourceKey setDataType:](v28, "setDataType:", 7);
          -[VKImageSourceKey setDataValue:](v28, "setDataValue:", v27);
          objc_msgSend(v25, "addObject:", v28);

          ++v26;
        }
        while (v24 != v26);

      }
      if (!*((_WORD *)v22 + 3))
      {
        v30 = (_QWORD *)a2[1];
        if ((unint64_t)v30 >= a2[2])
        {
          v32 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(a2, (id *)&v43);
        }
        else
        {
          if (v30)
          {
            v31 = v23;
            *v30 = &off_1E42B4C50;
            v30[1] = v31;
          }
          v32 = (uint64_t)(v30 + 3);
        }
        a2[1] = v32;
        goto LABEL_37;
      }
      if (!v23)
        break;
      v44[0] = v23;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((_WORD *)v22 + 3))
        goto LABEL_27;
LABEL_34:

      v23 = v43;
LABEL_37:

      v22 += 3;
      if (v22 == v41)
        return;
    }
    v29 = 0;
LABEL_27:
    v33 = 0;
    do
    {
      v34 = *(unsigned int *)(v6[96] + 4 * (v33 + *((unsigned __int16 *)v22 + 2)));
      v35 = -[VKImageSourceKey initWithIconAttributeKey:attributeValue:]([VKImageSourceKey alloc], "initWithIconAttributeKey:attributeValue:", 50, v34);
      v42 = v35;
      -[VKImageSourceKey setDataType:](v35, "setDataType:", 8);
      -[VKImageSourceKey setDataValue:](v35, "setDataValue:", v34);
      -[VKImageSourceKey setFallbackImageKeys:](v35, "setFallbackImageKeys:", v29);
      v36 = (_QWORD *)a2[1];
      if ((unint64_t)v36 >= a2[2])
      {
        v38 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(a2, (id *)&v42);
      }
      else
      {
        if (v36)
        {
          v37 = v35;
          *v36 = &off_1E42B4C50;
          v36[1] = v37;
        }
        v38 = (uint64_t)(v36 + 3);
      }
      a2[1] = v38;

      ++v33;
    }
    while (v33 < *((unsigned __int16 *)v22 + 3));
    goto LABEL_34;
  }
}

void sub_19FB9D2B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::iconImageInfosForLabel(md::StandardLabelMarker *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  float *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::recursive_mutex *v14;
  char v15;

  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v12, (uint64_t)this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v4 & 1) == 0)
  {
    v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v10)
    {
      v11 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v11, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v5 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  a2[3] = *((_QWORD *)v5 + 299);
  v6 = *(_QWORD **)(*((_QWORD *)this + 36) + 272);
  if (v6)
  {
    if (((*(uint64_t (**)(_QWORD *))(*v6 + 680))(v6) & 1) == 0
      && !(*(unsigned int (**)(_QWORD *))(*v6 + 688))(v6)
      || (v6 = *(_QWORD **)(v6[72] + 8)) != 0)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v6 + 720))(v6, a2);
    }
  }
  if (v15)
    std::recursive_mutex::unlock(v14);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19FB9D480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::~vector[abi:nn180100](v9);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::elementCount(md::StandardLabelMarker *this)
{
  return *((unsigned int *)this + 83);
}

void std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4289CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4289CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  md::MarkerFeatureHandle::MarkerFeatureHandle((uint64_t)&v33, *a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 225));
  v3 = *(uint64_t **)(a1 + 8);
  v4 = v3[1];
  v5 = v3[2];
  if (v4 >= v5)
  {
    v10 = (uint64_t)(v4 - *v3) >> 6;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 58)
      abort();
    v12 = v5 - *v3;
    if (v12 >> 5 > v11)
      v11 = v12 >> 5;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
      v13 = 0x3FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 16))(v3[3], v13 << 6, 8);
      v15 = v14 + (v10 << 6);
      v16 = v14 + (v13 << 6);
      if (v14)
      {
        *(_OWORD *)v15 = v33;
        *(_WORD *)(v15 + 16) = v34;
        *(_QWORD *)(v15 + 20) = v35;
        *(_QWORD *)(v15 + 40) = v36;
        *(_QWORD *)(v15 + 48) = v37;
        v17 = v38;
        *(_QWORD *)(v15 + 56) = v38;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
      }
    }
    else
    {
      v16 = 0;
      v15 = v10 << 6;
    }
    v9 = v15 + 64;
    v20 = *v3;
    v21 = v3[1];
    if (v21 == *v3)
    {
      *v3 = v15;
      v3[1] = v9;
      v26 = v3[2];
      v3[2] = v16;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = v15 + v22;
        v24 = v21 + v22;
        *(_OWORD *)(v23 - 64) = *(_OWORD *)(v21 + v22 - 64);
        *(_WORD *)(v23 - 48) = *(_WORD *)(v21 + v22 - 48);
        *(_QWORD *)(v23 - 44) = *(_QWORD *)(v21 + v22 - 44);
        *(_QWORD *)(v23 - 24) = *(_QWORD *)(v21 + v22 - 24);
        *(_OWORD *)(v23 - 16) = *(_OWORD *)(v21 + v22 - 16);
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        v22 -= 64;
      }
      while (v21 + v22 != v20);
      v21 = *v3;
      v25 = v3[1];
      *v3 = v15 + v22;
      v3[1] = v9;
      v26 = v3[2];
      v3[2] = v16;
      while (v25 != v21)
      {
        v27 = *(std::__shared_weak_count **)(v25 - 8);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 64;
      }
    }
    if (v21)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 40))(v3[3], v21, v26 - v21);
  }
  else
  {
    if (v4)
    {
      *(_OWORD *)v4 = v33;
      *(_WORD *)(v4 + 16) = v34;
      *(_QWORD *)(v4 + 20) = v35;
      *(_QWORD *)(v4 + 40) = v36;
      *(_QWORD *)(v4 + 48) = v37;
      v6 = v38;
      *(_QWORD *)(v4 + 56) = v38;
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
    }
    v9 = v4 + 64;
  }
  v3[1] = v9;
  v30 = v38;
  if (v38)
  {
    v31 = (unint64_t *)&v38->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19FB9D798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::StandardLabelMarker::StandardLabelMarker(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5, float a6)
{
  char v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[2];

  v10 = *(_BYTE *)(a5 + 8);
  v29[0] = a2;
  v29[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    md::LabelMarker::LabelMarker(a1, 0, v10, v29, a6);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    md::LabelMarker::LabelMarker(a1, 0, v10, v29, a6);
  }
  *(_QWORD *)a1 = &off_1E4297EB0;
  v14 = *a4;
  v15 = a4[1];
  *(_QWORD *)(a1 + 288) = *a4;
  *(_QWORD *)(a1 + 296) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v14 = *(_QWORD *)(a1 + 288);
  }
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  v18 = (unsigned __int8 *)(v14 + 1297);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *(_QWORD *)(a1 + 304) = *(_QWORD *)a5;
  if (a1 != a5)
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((void **)(a1 + 32), *(char **)(a5 + 32), *(char **)(a5 + 40), (uint64_t)(*(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32)) >> 3);
  v21 = *(_QWORD *)(a5 + 16);
  v20 = *(_QWORD *)(a5 + 24);
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(a1 + 320);
  *(_QWORD *)(a1 + 312) = v21;
  *(_QWORD *)(a1 + 320) = v20;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a5 + 64);
  v27 = *(unsigned __int8 *)(a1 + 225);
  *(_BYTE *)(a1 + 341) = (_DWORD)v27 == 1;
  *(_BYTE *)(a1 + 336) = (v27 - 8) < 6;
  *(_BYTE *)(a1 + 337) = (v27 < 0xE) & (0x2600u >> v27);
  *(_BYTE *)(a1 + 340) = (v27 & 0xFE) == 12;
  *(_BYTE *)(a1 + 339) = (v27 & 0xFFFFFFFB) == 8;
  *(_BYTE *)(a1 + 338) = v27 == 11;
  md::StandardLabelMarker::populateFromFeature((md::StandardLabelMarker *)a1, (const md::LabelFeatureInfo *)a5);
  return a1;
}

void sub_19FB9D9D4(_Unwind_Exception *a1)
{
  md::LabelMarker *v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  md::LabelMarker::~LabelMarker(v1);
  _Unwind_Resume(a1);
}

void **std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(void **result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  size_t v20;

  v6 = __src;
  v7 = result;
  v8 = (uint64_t)result[2];
  v9 = *result;
  if (a4 <= (v8 - (uint64_t)*result) >> 3)
  {
    v16 = result + 1;
    v15 = result[1];
    v17 = (v15 - (_BYTE *)v9) >> 3;
    if (v17 >= a4)
    {
      v20 = a3 - __src;
      if (a3 != __src)
        result = (void **)memmove(*result, __src, v20);
    }
    else
    {
      v18 = &__src[8 * v17];
      if (v15 != (_BYTE *)v9)
      {
        result = (void **)memmove(*result, __src, v15 - (_BYTE *)v9);
        v9 = (_QWORD *)*v16;
      }
      v19 = (char *)v9;
      if (v18 != a3)
      {
        v19 = (char *)v9;
        do
        {
          if (v19)
            *(_QWORD *)v19 = *(_QWORD *)v18;
          v18 += 8;
          v19 += 8;
        }
        while (v18 != a3);
      }
      v20 = v19 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      (*(void (**)(void *, _QWORD *))(*(_QWORD *)result[3] + 40))(result[3], v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_28;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_28:
      abort();
    v13 = v12;
    result = (void **)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], 8 * v12, 8);
    v9 = result;
    *v7 = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        if (v14)
          *(_QWORD *)v14 = *(_QWORD *)v6;
        v6 += 8;
        v14 += 8;
      }
      while (v6 != a3);
    }
    v20 = v14 - (char *)result;
    v16 = v7 + 1;
  }
  *v16 = (char *)v9 + v20;
  return result;
}

void md::StandardLabelMarker::populateFromFeature(md::StandardLabelMarker *this, const md::LabelFeatureInfo *a2)
{
  std::__shared_weak_count *v2;
  float v3;
  float v4;
  geo::codec::VectorTile *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unsigned __int8 ****v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  VKImageSourceKey *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  VKImageSourceKey *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  geo::codec::VectorTile *v39;
  uint64_t v40;
  uint64_t v41;
  VKImageSourceKey *v42;
  uint64_t *v43;
  void *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t NativeShieldCount;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  VKImageSourceKey *v54;
  VKImageSourceKey *v55;
  VKImageSourceKey *v56;
  _QWORD *v57;
  VKImageSourceKey *v58;
  uint64_t v59;
  __int128 *v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  VKImageSourceKey *v90;
  VKImageSourceKey *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  void *v96;
  _QWORD *v97;
  VKImageSourceKey *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  unsigned __int8 v105;
  size_t v106;
  size_t v107;
  __int128 *v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  uint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  unsigned int v119;
  VKImageSourceKey *v120;
  _QWORD *v121;
  VKImageSourceKey *v122;
  _QWORD *v123;
  VKImageSourceKey *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint8x8_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  const char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  __int128 v158;
  char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  char *v165;
  __int128 v166;
  VKImageSourceKey *v167;
  __int128 *p_dst;
  VKImageSourceKey *v169;
  VKImageSourceKey *v170;
  _QWORD *v171;
  VKImageSourceKey *v172;
  uint64_t v173;
  _QWORD *v174;
  VKImageSourceKey *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::mutex *v184;
  std::__shared_weak_count *v185;
  unint64_t v186;
  uint64_t v187;
  uint8x8_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 ****v192;
  _QWORD *v193;
  char *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  __int128 __dst;
  __int128 v200;
  uint64_t v201;
  int v202;
  char v203;
  uint64_t *v204;
  uint64_t v205[3];
  VKImageSourceKey *v206;
  std::__shared_weak_count *v207;
  const char *v208;
  char *v209;
  __int128 v210;
  uint64_t *v211;
  uint64_t v212;
  int v213[5];

  switch(*((_BYTE *)this + 225))
  {
    case 8:
      v6 = (geo::codec::VectorTile *)*((_QWORD *)this + 39);
      if (v6)
      {
        v7 = geo::codec::VectorTile::transitNodeForFeatureID(v6, *((_QWORD *)this + 38));
        if (v7)
        {
          v8 = v7;
          __dst = 0uLL;
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          if (v9)
          {
            v10 = std::__shared_weak_count::lock(v9);
            *((_QWORD *)&__dst + 1) = v10;
            if (v10)
              *(_QWORD *)&__dst = *(_QWORD *)v8;
          }
          else
          {
            v10 = 0;
          }
          if (*(_BYTE *)(v8 + 274))
          {
            v80 = 0;
            do
            {
              v82 = geo::codec::vectorTransitLineForTransitNodeSubtitleIndex(v8, v80);
              v83 = v82;
              if (v82)
              {
                if (geo::codec::featureGetNativeShieldCount(v82))
                {
                  v208 = 0;
                  v204 = 0;
                  v194 = 0;
                  geo::codec::featureGetNativeShield(v83, 0, &v208, &v194, &v204);
                  if (v194)
                  {
                    v85 = *(unsigned __int8 *)(v83 + 83);
                    LOBYTE(v84) = *(_BYTE *)(v83 + 80);
                    v86 = (float)v84;
                    LOBYTE(v3) = *(_BYTE *)(v83 + 81);
                    LOBYTE(v4) = *(_BYTE *)(v83 + 82);
                    if ((float)(v86 * 0.0039216) >= 0.04045)
                      v87 = powf((float)(v86 * 0.0037171) + 0.052133, 2.4);
                    else
                      v87 = v86 * 0.00030353;
                    v88 = (float)LODWORD(v3);
                    if ((float)((float)LODWORD(v3) * 0.0039216) >= 0.04045)
                      v3 = powf((float)(v88 * 0.0037171) + 0.052133, 2.4);
                    else
                      v3 = v88 * 0.00030353;
                    v89 = (float)LODWORD(v4);
                    if ((float)((float)LODWORD(v4) * 0.0039216) >= 0.04045)
                      v4 = powf((float)(v89 * 0.0037171) + 0.052133, 2.4);
                    else
                      v4 = v89 * 0.00030353;
                    v90 = [VKImageSourceKey alloc];
                    v213[0] = (v85 << 24) | ((int)(float)(v4 * 255.0) << 16) | ((int)(float)(v3 * 255.0) << 8) | (int)(float)(v87 * 255.0);
                    v91 = -[VKImageSourceKey initWithShieldText:locale:type:color:](v90, "initWithShieldText:locale:type:color:", v208, v204, v194, v213);
                    v206 = v91;
                    -[VKImageSourceKey setDataType:](v91, "setDataType:", 2);
                    v197 = 0;
                    geo::codec::transitLineGetSubtitleNativeLabel(v83, &v197, 0);
                    v92 = v197;
                    if (v197)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v197);
                      v93 = objc_claimAutoreleasedReturnValue();
                      v10 = (std::__shared_weak_count *)v93;
                    }
                    else
                    {
                      -[VKImageSourceKey shieldText](v91, "shieldText");
                      v93 = objc_claimAutoreleasedReturnValue();
                      v2 = (std::__shared_weak_count *)v93;
                    }
                    -[VKImageSourceKey setText:](v91, "setText:", v93);
                    if (v92)
                      v94 = v10;
                    else
                      v94 = v2;

                    v95 = geo::codec::VectorTile::transitSystems((geo::codec::VectorTile *)__dst)
                        + 72 * *(unsigned int *)(v83 + 84);
                    v212 = 0;
                    geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)&__dst, v95, 0, &v212, 0);
                    if (v212)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
                      v96 = (void *)objc_claimAutoreleasedReturnValue();
                      -[VKImageSourceKey setRelatedText:](v206, "setRelatedText:", v96);

                    }
                    v97 = (_QWORD *)*((_QWORD *)this + 9);
                    if ((unint64_t)v97 >= *((_QWORD *)this + 10))
                    {
                      v81 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v206);
                    }
                    else
                    {
                      if (v97)
                      {
                        v98 = v206;
                        *v97 = &off_1E42B4C50;
                        v97[1] = v98;
                      }
                      v81 = (uint64_t)(v97 + 3);
                    }
                    *((_QWORD *)this + 9) = v81;

                  }
                }
              }
              ++v80;
            }
            while (*(unsigned __int8 *)(v8 + 274) > v80);
            v10 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          }
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v100 = __ldaxr(p_shared_owners);
            while (__stlxr(v100 - 1, p_shared_owners));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              v101 = v10;
              goto LABEL_292;
            }
          }
        }
      }
      return;
    case 9:
      if (*((_QWORD *)this + 39))
      {
        md::StandardLabelMarker::populateRelatedTextFromTransitLines(this);
        md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(this);
        v48 = geo::codec::VectorTile::transitLineForFeatureID(*((geo::codec::VectorTile **)this + 39), *((_QWORD *)this + 38));
        if (v48)
        {
          v49 = v48;
          NativeShieldCount = geo::codec::featureGetNativeShieldCount(v48);
          v51 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
          if (v51)
          {
            v52 = std::__shared_weak_count::lock(v51);
            *((_QWORD *)&__dst + 1) = v52;
            if (v52)
            {
              v28 = v52;
              v53 = *((_QWORD *)this + 29);
              *(_QWORD *)&__dst = v53;
              if (NativeShieldCount)
              {
                if (v53)
                {
                  v208 = 0;
                  v204 = 0;
                  v194 = 0;
                  geo::codec::featureGetNativeShield(v49, 0, &v208, &v194, &v204);
                  if (v194)
                  {
                    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v53 + 168)
                                                                                                 + 56)
                                                                                   + 16))(&v197, *(_QWORD *)(*(_QWORD *)(v53 + 168) + 56), v49);
                    v54 = [VKImageSourceKey alloc];
                    LODWORD(v212) = v197;
                    v55 = -[VKImageSourceKey initWithShieldText:locale:type:color:](v54, "initWithShieldText:locale:type:color:", v208, v204, v194, &v212);
                    v56 = v55;
                    v206 = v55;
                    v57 = (_QWORD *)*((_QWORD *)this + 9);
                    if ((unint64_t)v57 >= *((_QWORD *)this + 10))
                    {
                      v59 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v206);
                    }
                    else
                    {
                      if (v57)
                      {
                        v58 = v55;
                        *v57 = &off_1E42B4C50;
                        v57[1] = v58;
                      }
                      v59 = (uint64_t)(v57 + 3);
                    }
                    *((_QWORD *)this + 9) = v59;
                    v123 = (_QWORD *)*((_QWORD *)this + 17);
                    if ((unint64_t)v123 >= *((_QWORD *)this + 18))
                    {
                      v125 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 16, (id *)&v206);
                    }
                    else
                    {
                      if (v123)
                      {
                        v124 = v56;
                        *v123 = &off_1E42B4C50;
                        v123[1] = v124;
                      }
                      v125 = (uint64_t)(v123 + 3);
                    }
                    *((_QWORD *)this + 17) = v125;

                  }
                }
              }
              v126 = (unint64_t *)&v28->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              goto LABEL_290;
            }
          }
        }
      }
      return;
    case 0xA:
      if (*((_QWORD *)this + 39))
      {
        md::StandardLabelMarker::populateRelatedTextFromTransitLines(this);
        md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(this);
      }
      v25 = *(_QWORD *)(*((_QWORD *)this + 36) + 8);
      if (!v25)
        return;
      v26 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
      if (!v26)
        return;
      v27 = std::__shared_weak_count::lock(v26);
      v198 = v27;
      if (!v27)
        return;
      v28 = v27;
      v197 = *((_QWORD *)this + 29);
      v189 = v197;
      if (!v197)
        goto LABEL_288;
      v194 = 0;
      v195 = 0uLL;
      {
        v180 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v180, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v196 = mdm::Allocator::instance(void)::alloc;
      v206 = 0;
      v207 = 0;
      std::mutex::lock((std::mutex *)(v25 + 8));
      v30 = *(_QWORD *)(v25 + 152);
      v185 = v28;
      if (!v30)
      {
        std::mutex::unlock((std::mutex *)(v25 + 8));
        goto LABEL_250;
      }
      v193 = (_QWORD *)(*(uint64_t (**)(uint64_t, VKImageSourceKey **))(*(_QWORD *)v30 + 16))(v30, &v206);
      std::mutex::unlock((std::mutex *)(v25 + 8));
      if (!v206 || !v193)
        goto LABEL_250;
      std::mutex::lock((std::mutex *)(v25 + 440));
      {
        v182 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v182, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v184 = (std::mutex *)(v25 + 440);
      v187 = mdm::Allocator::instance(void)::alloc;
      v32 = *(_QWORD *)(v25 + 544) - *(_QWORD *)(v25 + 536);
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = v32 >> 5;
        if (v37 <= 1)
          v38 = 1;
        else
          v38 = v37;
        while (1)
        {
          if (*(_WORD *)(*(_QWORD *)(v25 + 536) + 32 * v33 + 12))
          {
            if ((unint64_t)v36 >= v35)
            {
              v66 = v36 - v34;
              v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 61)
                abort();
              v68 = v35 - (_QWORD)v34;
              if ((uint64_t)(v35 - (_QWORD)v34) >> 2 > v67)
                v67 = (uint64_t)(v35 - (_QWORD)v34) >> 2;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v67;
              if (v35)
              {
                v69 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v35, 8);
                v70 = (uint64_t *)(v69 + 8 * v66);
                v35 = v69 + 8 * v35;
                if (v69)
                  *v70 = v33;
              }
              else
              {
                v70 = (uint64_t *)(8 * v66);
              }
              v71 = v70;
              if (v36 == v34)
                goto LABEL_91;
              v72 = (char *)v36 - (char *)v34 - 8;
              if (v72 < 0x138
                || (uint64_t *)((char *)v70 - (v72 & 0xFFFFFFFFFFFFFFF8) - 8) > v70 - 1
                || (uint64_t *)((char *)v36 - (v72 & 0xFFFFFFFFFFFFFFF8) - 8) > v36 - 1
                || (unint64_t)((char *)v36 - (char *)v70) < 0x20)
              {
                v73 = v36;
                v71 = v70;
              }
              else
              {
                v75 = (v72 >> 3) + 1;
                v73 = &v36[-(v75 & 0x3FFFFFFFFFFFFFFCLL)];
                v76 = v70 - 2;
                v77 = v36 - 2;
                v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v79 = *(_OWORD *)v77;
                  *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
                  *(_OWORD *)v76 = v79;
                  v76 -= 4;
                  v77 -= 4;
                  v78 -= 4;
                }
                while (v78);
                v71 = &v70[-(v75 & 0x3FFFFFFFFFFFFFFCLL)];
                if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_91;
              }
              do
              {
                v74 = *--v73;
                *--v71 = v74;
              }
              while (v73 != v34);
LABEL_91:
              v36 = v70 + 1;
              if (v34)
                (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v34, v68);
              v34 = v71;
              goto LABEL_72;
            }
            if (v36)
              *v36 = v33;
            ++v36;
          }
LABEL_72:
          if (++v33 == v38)
            goto LABEL_195;
        }
      }
      v36 = 0;
      v35 = 0;
      v34 = 0;
LABEL_195:
      v128 = v36 - v34;
      v129 = 126 - 2 * __clz(v128);
      *(_QWORD *)&__dst = v25;
      if (v36 == v34)
        v130 = 0;
      else
        v130 = v129;
      std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v34, v36, (uint64_t)&__dst, v130, 1);
      v205[0] = 0;
      {
        v183 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v183, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v205[2] = 0;
      v205[1] = mdm::Allocator::instance(void)::alloc;
      v204 = v205;
      if (v36 == v34)
      {
        std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v204, v205[0]);
        if (!v36)
          goto LABEL_249;
      }
      else
      {
        v186 = v35;
        v132 = 0;
        if (v128 <= 1)
          v133 = 1;
        else
          v133 = v36 - v34;
        v191 = v133;
        do
        {
          v135 = v34[v132];
          v136 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 536) + 32 * v135 + 10);
          v137 = *(_QWORD *)(v25 + 352);
          v138 = v137 + 48 * *(unsigned __int16 *)(*(_QWORD *)(v25 + 536) + 32 * v135 + 10);
          *((_QWORD *)&v200 + 1) = *(_QWORD *)(v138 + 24);
          if (*(char *)(v138 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)v138, *(_QWORD *)(v138 + 8));
          }
          else
          {
            __dst = *(_OWORD *)v138;
            *(_QWORD *)&v200 = *(_QWORD *)(v138 + 16);
          }
          v139 = v137 + 48 * v136;
          v140 = *(_QWORD *)(v139 + 32);
          v201 = v140;
          v141 = *(_BYTE *)(v139 + 44);
          v203 = v141;
          if (geo::codec::vectorTransitLineAlongLink(v193, v135))
          {
            v142 = v25;
            (*(void (**)(const char **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v189 + 168) + 56) + 16))(&v208);
            v143.i32[0] = (int)v208;
            v144 = (int)v208;
            v188 = v143;
            v202 = (int)v208;
            if ((std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(&v204, (void **)&__dst, &__dst) & 1) != 0)
            {
              v145 = v195;
              if ((unint64_t)v195 >= *((_QWORD *)&v195 + 1))
              {
                v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - (_QWORD)v194) >> 4);
                v147 = v146 + 1;
                if (v146 + 1 > 0x555555555555555)
                  abort();
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v195 + 1) - (_QWORD)v194) >> 4) > v147)
                  v147 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v195 + 1) - (_QWORD)v194) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v195 + 1) - (_QWORD)v194) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v148 = 0x555555555555555;
                else
                  v148 = v147;
                v211 = &v196;
                if (v148)
                  v149 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v196 + 16))(v196, 48 * v148, 8);
                else
                  v149 = 0;
                v150 = (char *)&v149[16 * ((uint64_t)(v195 - (_QWORD)v194) >> 4)];
                v208 = v149;
                v209 = v150;
                *(_QWORD *)&v210 = v150;
                *((_QWORD *)&v210 + 1) = &v149[48 * v148];
                if (v149)
                {
                  *((_QWORD *)v150 + 3) = *((_QWORD *)&v200 + 1);
                  v25 = v142;
                  if (SBYTE7(v200) < 0)
                  {
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v150, (void *)__dst, *((unint64_t *)&__dst + 1));
                    v150 = v209;
                    v151 = (char *)v210;
                    v140 = v201;
                    v144 = v202;
                    v141 = v203;
                  }
                  else
                  {
                    *(_OWORD *)v150 = __dst;
                    *((_QWORD *)v150 + 2) = v200;
                    v151 = (char *)&v149[48 * v146];
                  }
                  v152 = (char *)&v149[48 * v146];
                  *((_QWORD *)v152 + 4) = v140;
                  *((_DWORD *)v152 + 10) = v144;
                  v152[44] = v141;
                }
                else
                {
                  v151 = v150;
                  v25 = v142;
                }
                v134 = v151 + 48;
                *(_QWORD *)&v210 = v151 + 48;
                v153 = v194;
                v154 = (char *)v195;
                if ((char *)v195 == v194)
                {
                  v194 = v150;
                  *(_QWORD *)&v195 = v134;
                  v160 = *((_QWORD *)&v195 + 1);
                  *((_QWORD *)&v195 + 1) = *((_QWORD *)&v210 + 1);
                }
                else
                {
                  v155 = 0;
                  do
                  {
                    v156 = &v150[v155];
                    v157 = &v154[v155];
                    v158 = *(_OWORD *)&v154[v155 - 32];
                    *((_OWORD *)v156 - 3) = *(_OWORD *)&v154[v155 - 48];
                    *((_OWORD *)v156 - 2) = v158;
                    *((_QWORD *)v157 - 5) = 0;
                    *((_QWORD *)v157 - 4) = 0;
                    *((_QWORD *)v157 - 6) = 0;
                    *((_QWORD *)v156 - 2) = *(_QWORD *)&v154[v155 - 16];
                    *((_DWORD *)v156 - 2) = *(_DWORD *)&v154[v155 - 8];
                    *(v156 - 4) = v154[v155 - 4];
                    v155 -= 48;
                  }
                  while (&v154[v155] != v153);
                  v154 = v194;
                  v159 = (char *)v195;
                  v194 = &v150[v155];
                  v160 = *((_QWORD *)&v195 + 1);
                  v195 = v210;
                  v134 = (char *)v210;
                  while (v159 != v154)
                  {
                    if (*(v159 - 25) < 0)
                      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v159 - 3) + 40))(*((_QWORD *)v159 - 3), *((_QWORD *)v159 - 6), *((_QWORD *)v159 - 4) & 0x7FFFFFFFFFFFFFFFLL);
                    v159 -= 48;
                  }
                }
                if (v154)
                  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)*v211 + 40))(*v211, v154, v160 - (_QWORD)v154);
              }
              else
              {
                if ((_QWORD)v195)
                {
                  *(_QWORD *)(v195 + 24) = *((_QWORD *)&v200 + 1);
                  if (SBYTE7(v200) < 0)
                  {
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v145, (void *)__dst, *((unint64_t *)&__dst + 1));
                  }
                  else
                  {
                    *(_OWORD *)v145 = __dst;
                    *(_QWORD *)(v145 + 16) = v200;
                  }
                  *(_QWORD *)(v145 + 32) = v140;
                  *(_DWORD *)(v145 + 40) = vmovn_s16((int16x8_t)vmovl_u8(v188)).u32[0];
                  *(_BYTE *)(v145 + 44) = v141;
                }
                v134 = (char *)(v145 + 48);
              }
              *(_QWORD *)&v195 = v134;
            }
          }
          if (SBYTE7(v200) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v200 + 1) + 40))(*((_QWORD *)&v200 + 1), __dst, v200 & 0x7FFFFFFFFFFFFFFFLL);
          ++v132;
        }
        while (v132 != v191);
        std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v204, v205[0]);
        v35 = v186;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v187 + 40))(v187, v34, v35 - (_QWORD)v34);
LABEL_249:
      std::mutex::unlock(v184);
      v28 = v185;
LABEL_250:
      v161 = v207;
      if (v207)
      {
        v162 = (unint64_t *)&v207->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v164 = v194;
      v165 = (char *)v195;
      if (v194 != (char *)v195)
      {
        do
        {
          *((_QWORD *)&v200 + 1) = *((_QWORD *)v164 + 3);
          if (v164[23] < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)v164, *((_QWORD *)v164 + 1));
          }
          else
          {
            v166 = *(_OWORD *)v164;
            *(_QWORD *)&v200 = *((_QWORD *)v164 + 2);
            __dst = v166;
          }
          v201 = *((_QWORD *)v164 + 4);
          v202 = *((_DWORD *)v164 + 10);
          v203 = v164[44];
          if (v201)
          {
            v167 = [VKImageSourceKey alloc];
            if ((SBYTE7(v200) & 0x80u) == 0)
              p_dst = &__dst;
            else
              p_dst = (__int128 *)__dst;
            LODWORD(v204) = v202;
            v169 = -[VKImageSourceKey initWithShieldText:locale:type:color:](v167, "initWithShieldText:locale:type:color:", p_dst, 0, v201, &v204);
            v170 = v169;
            v208 = (const char *)v169;
            v171 = (_QWORD *)*((_QWORD *)this + 9);
            if ((unint64_t)v171 >= *((_QWORD *)this + 10))
            {
              v173 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v208);
            }
            else
            {
              if (v171)
              {
                v172 = v169;
                *v171 = &off_1E42B4C50;
                v171[1] = v172;
              }
              v173 = (uint64_t)(v171 + 3);
            }
            *((_QWORD *)this + 9) = v173;
            v174 = (_QWORD *)*((_QWORD *)this + 17);
            if ((unint64_t)v174 >= *((_QWORD *)this + 18))
            {
              v176 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 16, (id *)&v208);
            }
            else
            {
              if (v174)
              {
                v175 = v170;
                *v174 = &off_1E42B4C50;
                v174[1] = v175;
              }
              v176 = (uint64_t)(v174 + 3);
            }
            *((_QWORD *)this + 17) = v176;

          }
          if (SBYTE7(v200) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v200 + 1) + 40))(*((_QWORD *)&v200 + 1), __dst, v200 & 0x7FFFFFFFFFFFFFFFLL);
          v164 += 48;
        }
        while (v164 != v165);
        v164 = v194;
        v28 = v185;
      }
      if (v164)
      {
        v177 = (char *)v195;
        v178 = v164;
        if ((char *)v195 != v164)
        {
          do
          {
            if (*(v177 - 25) < 0)
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v177 - 3) + 40))(*((_QWORD *)v177 - 3), *((_QWORD *)v177 - 6), *((_QWORD *)v177 - 4) & 0x7FFFFFFFFFFFFFFFLL);
            v177 -= 48;
          }
          while (v177 != v164);
          v178 = v194;
        }
        *(_QWORD *)&v195 = v164;
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v196 + 40))(v196, v178, *((_QWORD *)&v195 + 1) - (_QWORD)v178);
        v28 = v198;
      }
      if (v28)
      {
LABEL_288:
        v179 = (unint64_t *)&v28->__shared_owners_;
        do
          v127 = __ldaxr(v179);
        while (__stlxr(v127 - 1, v179));
LABEL_290:
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          v101 = v28;
LABEL_292:
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      return;
    case 0xB:
      v39 = (geo::codec::VectorTile *)*((_QWORD *)this + 39);
      if (!v39)
        return;
      v40 = geo::codec::VectorTile::transitAccessPointForFeatureID(v39, *((_QWORD *)this + 38));
      if (!v40)
        return;
      v41 = v40;
      if (*(_BYTE *)(v40 + 72))
      {
        *(_QWORD *)&__dst = 0;
        v208 = 0;
        geo::codec::featureGetNativeShield(v40, 0, &__dst, &v208, 0);
        if (v208)
        {
          v42 = [VKImageSourceKey alloc];
          LODWORD(v194) = 0;
          v43 = -[VKImageSourceKey initWithShieldText:locale:type:color:](v42, "initWithShieldText:locale:type:color:", (_QWORD)__dst, 0, v208, &v194);
          v204 = v43;
          objc_msgSend(v43, "shieldText");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "setText:", v44);

          objc_msgSend(v43, "setDataType:", 5);
          v45 = (_QWORD *)*((_QWORD *)this + 13);
          if ((unint64_t)v45 >= *((_QWORD *)this + 14))
          {
            v47 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 12, (id *)&v204);
          }
          else
          {
            if (v45)
            {
              v46 = v43;
              *v45 = &off_1E42B4C50;
              v45[1] = v46;
            }
            v47 = (uint64_t)(v45 + 3);
          }
          *((_QWORD *)this + 13) = v47;

        }
      }
      v102 = *(_QWORD *)(v41 + 224);
      if (!v102)
        goto LABEL_173;
      v103 = geo::codec::VectorTile::transitNodeForFeatureID(*((geo::codec::VectorTile **)this + 39), v102);
      if (!v103)
        goto LABEL_173;
      v208 = 0;
      geo::codec::featureGetLocalizedLabel(v103, 0, (unint64_t *)&v208, 0);
      v104 = v208;
      if (!v208 || !*v208)
        goto LABEL_173;
      {
        v181 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v181, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      *((_QWORD *)&v200 + 1) = mdm::Allocator::instance(void)::alloc;
      v106 = strlen(v104);
      if (v106 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v107 = v106;
      if (v106 >= 0x17)
      {
        v112 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v106 | 7) != 0x17)
          v112 = v106 | 7;
        v113 = v112 + 1;
        v108 = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, v112 + 1, 1);
        *((_QWORD *)&__dst + 1) = v107;
        *(_QWORD *)&v200 = v113 | 0x8000000000000000;
        *(_QWORD *)&__dst = v108;
      }
      else
      {
        BYTE7(v200) = v106;
        v108 = &__dst;
        if (!v106)
          goto LABEL_166;
      }
      memmove(v108, v104, v107);
LABEL_166:
      *((_BYTE *)v108 + v107) = 0;
      v114 = (_OWORD *)*((_QWORD *)this + 21);
      if ((unint64_t)v114 >= *((_QWORD *)this + 22))
      {
        v115 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__push_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((uint64_t *)this + 20, (uint64_t)&__dst);
      }
      else
      {
        if (v114)
        {
          *v114 = __dst;
          v114[1] = v200;
          *(_QWORD *)&v200 = 0;
          __dst = 0uLL;
        }
        v115 = v114 + 2;
      }
      *((_QWORD *)this + 21) = v115;
      if (SBYTE7(v200) < 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v200 + 1) + 40))(*((_QWORD *)&v200 + 1), __dst, v200 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_173:
      v116 = 0;
      if (*(unsigned __int16 *)(v41 + 240) <= 1u)
        v117 = 1;
      else
        v117 = *(_WORD *)(v41 + 240);
      do
      {
        if ((v117 & 1) != 0)
        {
          v120 = -[VKImageSourceKey initWithIconAttributeKey:attributeValue:]([VKImageSourceKey alloc], "initWithIconAttributeKey:attributeValue:", 45, v116);
          *(_QWORD *)&__dst = v120;
          -[VKImageSourceKey setDataType:](v120, "setDataType:", 1);
          -[VKImageSourceKey setDataValue:](v120, "setDataValue:", v116);
          v121 = (_QWORD *)*((_QWORD *)this + 9);
          if ((unint64_t)v121 >= *((_QWORD *)this + 10))
          {
            v118 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&__dst);
          }
          else
          {
            if (v121)
            {
              v122 = v120;
              *v121 = &off_1E42B4C50;
              v121[1] = v122;
            }
            v118 = (uint64_t)(v121 + 3);
          }
          *((_QWORD *)this + 9) = v118;

        }
        v116 = (v116 + 1);
        v119 = v117;
        v117 >>= 1;
      }
      while (v119 > 1);
      return;
    case 0xC:
      v11 = (*(uint64_t (**)(_QWORD, const md::LabelFeatureInfo *))(**(_QWORD **)(*((_QWORD *)this + 36) + 8)
                                                                            + 72))(*(_QWORD *)(*((_QWORD *)this + 36) + 8), a2);
      if (!v11)
        return;
      v12 = *(unsigned __int8 *****)(v11 + 424);
      v190 = v11;
      v192 = *(unsigned __int8 *****)(v11 + 432);
      if (v12 == v192)
        goto LABEL_69;
      while (2)
      {
        v14 = **v12;
        v13 = (*v12)[1];
        while (2)
        {
          if (v14 != v13)
          {
            v16 = **v14;
            if (v16 == 1)
            {
              v17 = 3;
            }
            else
            {
              if (v16 != 2)
              {
LABEL_14:
                v14 += 2;
                continue;
              }
              v17 = 4;
            }
            v18 = -[VKImageSourceKey initWithDataType:]([VKImageSourceKey alloc], "initWithDataType:", v17);
            *(_QWORD *)&__dst = v18;
            v19 = *v14 + 8;
            if ((char)(*v14)[31] < 0)
              v19 = (_QWORD *)*v19;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            -[VKImageSourceKey setText:](v18, "setText:", v20);

            v21 = *v14 + 32;
            if ((char)(*v14)[55] < 0)
              v21 = (_QWORD *)*v21;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            -[VKImageSourceKey setRelatedText:](v18, "setRelatedText:", v22);

            v23 = (_QWORD *)*((_QWORD *)this + 9);
            if ((unint64_t)v23 >= *((_QWORD *)this + 10))
            {
              v15 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&__dst);
            }
            else
            {
              if (v23)
              {
                v24 = v18;
                *v23 = &off_1E42B4C50;
                v23[1] = v24;
              }
              v15 = (uint64_t)(v23 + 3);
            }
            *((_QWORD *)this + 9) = v15;

            goto LABEL_14;
          }
          break;
        }
        v12 += 2;
        if (v12 != v192)
          continue;
        break;
      }
LABEL_69:
      *((_DWORD *)this + 82) = *(_DWORD *)(v190 + 84);
      return;
    case 0xD:
      v61 = (__int128 *)((char *)a2 + 72);
      v62 = *((unsigned __int8 *)a2 + 95);
      if ((v62 & 0x80u) != 0)
        v62 = *((_QWORD *)a2 + 10);
      if (v62)
      {
        v63 = *((_QWORD *)this + 21);
        if (v63 >= *((_QWORD *)this + 22))
        {
          v65 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>((uint64_t *)this + 20, (__int128 *)((char *)a2 + 72));
        }
        else
        {
          if (v63)
          {
            *(_QWORD *)(v63 + 24) = *((_QWORD *)a2 + 12);
            if (*((char *)a2 + 95) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v63, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
            }
            else
            {
              v64 = *v61;
              *(_QWORD *)(v63 + 16) = *((_QWORD *)a2 + 11);
              *(_OWORD *)v63 = v64;
            }
          }
          v65 = v63 + 32;
          *((_QWORD *)this + 21) = v63 + 32;
        }
        *((_QWORD *)this + 21) = v65;
      }
      v109 = *((unsigned __int8 *)a2 + 127);
      if ((v109 & 0x80u) != 0)
        v109 = *((_QWORD *)a2 + 14);
      if (v109)
      {
        v110 = *((_QWORD *)this + 25);
        if (v110 >= *((_QWORD *)this + 26))
        {
          *((_QWORD *)this + 25) = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>((uint64_t *)this + 24, v61);
        }
        else
        {
          if (v110)
          {
            *(_QWORD *)(v110 + 24) = *((_QWORD *)a2 + 12);
            if (*((char *)a2 + 95) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v110, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
            }
            else
            {
              v111 = *v61;
              *(_QWORD *)(v110 + 16) = *((_QWORD *)v61 + 2);
              *(_OWORD *)v110 = v111;
            }
          }
          *((_QWORD *)this + 25) = v110 + 32;
          *((_QWORD *)this + 25) = v110 + 32;
        }
      }
      return;
    default:
      return;
  }
}

void sub_19FB9F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  if (SHIBYTE(a29) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FB9F160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;

  if (SHIBYTE(a29) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
  std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&a34, a35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, v35, a13 - v35);
  std::mutex::unlock(a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v36 - 200);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_19FB9F1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](va1);
  _Unwind_Resume(a1);
}

void sub_19FB9F1C4()
{
  void *v0;

  JUMPOUT(0x19FB9F25CLL);
}

void sub_19FB9F1D4()
{
  void *v0;

  JUMPOUT(0x19FB9F270);
}

void sub_19FB9F1E4()
{
  void *v0;
  uint64_t v1;
  void *v2;

  if (v1)

  else
  JUMPOUT(0x19FB9F25CLL);
}

void sub_19FB9F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  if (SHIBYTE(a29) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_19FB9F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_19FB9F280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::populateRelatedTextFromTransitLines(md::StandardLabelMarker *this)
{
  uint64_t **v2;
  unsigned __int8 v3;
  float *v4;
  uint64_t *v5;
  geo::codec::VectorTile **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  char v22;
  int v23;
  const void *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  char *v35;
  char *v36;
  unsigned __int8 v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  md::StandardLabelMarker *v51;
  geo::codec::VectorTile **v52;
  uint64_t *v53;
  unint64_t v54;
  char *__s;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char v62;

  v2 = &v57;
  v57 = 0;
  v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v48 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v58 = mdm::Allocator::instance(void)::alloc;
  v59 = 0;
  v56 = &v57;
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  v53 = (uint64_t *)*((_QWORD *)this + 5);
  if (v5 == v53)
  {
    v46 = 0;
    return std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&v56, (uint64_t)v46);
  }
  v6 = (geo::codec::VectorTile **)((char *)this + 312);
  v49 = (uint64_t *)((char *)this + 160);
  v51 = this;
  v52 = (geo::codec::VectorTile **)((char *)this + 312);
  while (2)
  {
    v8 = geo::codec::VectorTile::transitSystemInfoForFeatureID(*v6, *v5);
    v54 = 0;
    __s = 0;
    geo::codec::transitSystemInfoGetLocalizedLabel((_QWORD **)v6, v8, 0, (unint64_t *)&__s, &v54);
    if (!__s || !*__s)
    {
      geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)v6, v8, 0, &__s, &v54);
      if (!__s)
        goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, 64, 8);
    v60 = v9;
    v61 = &v58;
    v62 = 0;
    v10 = __s;
    {
      v44 = operator new();
      *((_QWORD *)v4 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v12 = *((_QWORD *)v4 + 299);
    *(_QWORD *)(v9 + 56) = v12;
    v13 = strlen(v10);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v16 + 1, 1);
      *(_QWORD *)(v9 + 40) = v14;
      *(_QWORD *)(v9 + 48) = v17 | 0x8000000000000000;
      *(_QWORD *)(v9 + 32) = v15;
      goto LABEL_18;
    }
    v15 = (void *)(v9 + 32);
    *(_BYTE *)(v9 + 55) = v13;
    if (v13)
LABEL_18:
      memmove(v15, v10, v14);
    *((_BYTE *)v15 + v14) = 0;
    v18 = v60;
    v19 = v57;
    v20 = v2;
    v21 = v2;
    if (!v57)
    {
LABEL_46:
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v2;
      *v20 = (uint64_t *)v18;
      if (*v56)
      {
        v56 = (uint64_t **)*v56;
        v18 = (uint64_t)*v20;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v57, (uint64_t *)v18);
      ++v59;
      v35 = (char *)*((_QWORD *)v51 + 21);
      v2 = v21;
      v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      if ((unint64_t)v35 >= *((_QWORD *)v51 + 22))
      {
        v7 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(v49, (const char **)&__s);
        v6 = v52;
LABEL_5:
        *((_QWORD *)v51 + 21) = v7;
        goto LABEL_6;
      }
      if (!v35)
      {
LABEL_64:
        v7 = v35 + 32;
        *((_QWORD *)v51 + 21) = v35 + 32;
        v6 = v52;
        goto LABEL_5;
      }
      v36 = __s;
      {
        v45 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v38 = mdm::Allocator::instance(void)::alloc;
      *((_QWORD *)v35 + 3) = mdm::Allocator::instance(void)::alloc;
      v39 = strlen(v36);
      if (v39 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v40 = v39;
      if (v39 >= 0x17)
      {
        v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v42 = v39 | 7;
        v43 = v42 + 1;
        v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v42 + 1, 1);
        *((_QWORD *)v35 + 1) = v40;
        *((_QWORD *)v35 + 2) = v43 | 0x8000000000000000;
        *(_QWORD *)v35 = v41;
      }
      else
      {
        v35[23] = v39;
        v41 = v35;
        if (!v39)
          goto LABEL_63;
      }
      memmove(v41, v36, v40);
LABEL_63:
      *((_BYTE *)v41 + v40) = 0;
      goto LABEL_64;
    }
    v22 = *(_BYTE *)(v60 + 55);
    v23 = v22;
    v50 = *(_QWORD *)(v60 + 32);
    if (v22 < 0)
      v24 = *(const void **)(v60 + 32);
    else
      v24 = (const void *)(v60 + 32);
    if (v22 < 0)
      v25 = *(_QWORD *)(v60 + 40);
    else
      v25 = *(unsigned __int8 *)(v60 + 55);
    while (1)
    {
      while (1)
      {
        v2 = (uint64_t **)v19;
        v28 = v19[4];
        v26 = v19 + 4;
        v27 = (uint64_t *)v28;
        v29 = *((char *)v26 + 23);
        v30 = v29 >= 0 ? v26 : v27;
        v31 = v29 >= 0 ? *((unsigned __int8 *)v26 + 23) : v26[1];
        v32 = v31 >= v25 ? v25 : v31;
        v33 = memcmp(v24, v30, v32);
        if (v33)
          break;
        if (v25 >= v31)
          goto LABEL_40;
LABEL_26:
        v19 = *v2;
        v20 = v2;
        if (!*v2)
          goto LABEL_46;
      }
      if (v33 < 0)
        goto LABEL_26;
LABEL_40:
      v34 = memcmp(v30, v24, v32);
      if (!v34)
        break;
      if ((v34 & 0x80000000) == 0)
        goto LABEL_55;
LABEL_44:
      v19 = v2[1];
      if (!v19)
      {
        v20 = v2 + 1;
        goto LABEL_46;
      }
    }
    if (v31 < v25)
      goto LABEL_44;
LABEL_55:
    v2 = v21;
    v4 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v6 = v52;
    if (v18)
    {
      if (v23 < 0)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 56) + 40))(*(_QWORD *)(v18 + 56), v50, *(_QWORD *)(v18 + 48) & 0x7FFFFFFFFFFFFFFFLL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v61 + 40))(*v61, v18, 64);
    }
LABEL_6:
    if (++v5 != v53)
      continue;
    break;
  }
  v46 = v57;
  return std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&v56, (uint64_t)v46);
}

void sub_19FB9F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 + 168) = v20;
  std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(md::StandardLabelMarker *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  unsigned __int8 *v5;
  float *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned __int8 v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  uint64_t *v16;
  float *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  char *__s;

  v1 = (uint64_t *)*((_QWORD *)this + 4);
  v2 = (uint64_t *)*((_QWORD *)this + 5);
  if (v1 != v2)
  {
    v4 = (uint64_t *)((char *)this + 192);
    v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    v22 = (uint64_t *)*((_QWORD *)this + 5);
    while (1)
    {
      v8 = geo::codec::VectorTile::transitLineForFeatureID(*((geo::codec::VectorTile **)this + 39), *v1);
      v23 = 0;
      __s = 0;
      geo::codec::featureGetLocalizedLabel(v8, 0, (unint64_t *)&__s, &v23);
      v9 = __s;
      if (!__s || !*__s)
      {
        geo::codec::featureGetNativeLabel(v8, 0, &__s, &v23);
        v9 = __s;
        if (!__s)
          goto LABEL_5;
      }
      v10 = (char *)*((_QWORD *)this + 25);
      if ((unint64_t)v10 < *((_QWORD *)this + 26))
        break;
      v7 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(v4, (const char **)&__s);
LABEL_4:
      *((_QWORD *)this + 25) = v7;
LABEL_5:
      if (++v1 == v2)
        return;
    }
    if (!v10)
    {
LABEL_21:
      v7 = v10 + 32;
      *((_QWORD *)this + 25) = v10 + 32;
      goto LABEL_4;
    }
    v11 = atomic_load(v5);
    if ((v11 & 1) == 0 && __cxa_guard_acquire((__guard *)v5))
    {
      v21 = operator new();
      *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
      __cxa_guard_release((__guard *)v5);
    }
    v12 = *((_QWORD *)v6 + 299);
    *((_QWORD *)v10 + 3) = v12;
    v13 = strlen(v9);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = v4;
      v17 = v6;
      v18 = v5;
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v19 + 1, 1);
      *((_QWORD *)v10 + 1) = v14;
      *((_QWORD *)v10 + 2) = v20 | 0x8000000000000000;
      *(_QWORD *)v10 = v15;
      v5 = v18;
      v6 = v17;
      v4 = v16;
      v2 = v22;
    }
    else
    {
      v10[23] = v13;
      v15 = v10;
      if (!v13)
        goto LABEL_20;
    }
    memmove(v15, v9, v14);
LABEL_20:
    *((_BYTE *)v15 + v14) = 0;
    goto LABEL_21;
  }
}

void sub_19FB9FA08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

void sub_19FB9FA10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v5 = a1 + 3;
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v3;
  if (v8)
  {
    v10 = 32 * v8;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 32 * v8, 8);
    v12 = v11 + 32 * v2;
    v13 = v11 + v10;
    if (v11)
    {
      *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
      if (*((char *)a2 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v12, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v14 = *a2;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v12 = v14;
      }
    }
  }
  else
  {
    v13 = 0;
    v12 = 32 * v2;
  }
  v15 = v12 + 32;
  v17 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    v19 = a1[1];
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v16 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(v16 - 32);
      *(_OWORD *)(v12 - 16) = v18;
      v12 -= 32;
      *(_QWORD *)(v16 - 24) = 0;
      *(_QWORD *)(v16 - 16) = 0;
      *(_QWORD *)(v16 - 32) = 0;
      v16 -= 32;
    }
    while (v16 != v17);
    v19 = *a1;
    v16 = a1[1];
  }
  *a1 = v12;
  a1[1] = v15;
  v20 = a1[2];
  a1[2] = v13;
  if (v16 != v19)
  {
    v21 = v16 - 32;
    do
    {
      if (*(char *)(v21 + 23) < 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), *(_QWORD *)v21, *(_QWORD *)(v21 + 16) & 0x7FFFFFFFFFFFFFFFLL);
      v22 = v21 == v19;
      v21 -= 32;
    }
    while (!v22);
    v16 = v19;
  }
  if (v16)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v16, v20 - v16);
  return v15;
}

void sub_19FB9FBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(uint64_t *a1, id *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void (**v21)(char *);
  BOOL v22;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v10 = v8 + v7;
    if (v8)
    {
      v11 = v8;
      v12 = *a2;
      *(_QWORD *)v9 = &off_1E42B4C50;
      *(_QWORD *)(v11 + 24 * v3 + 8) = v12;
    }
  }
  else
  {
    v10 = 0;
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v13 = v9 + 24;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v13;
    v18 = (char *)a1[2];
    a1[2] = v10;
    if (!v14)
      return v13;
    goto LABEL_17;
  }
  do
  {
    *(_QWORD *)(v9 - 24) = &off_1E42B4C50;
    v9 -= 24;
    *(_QWORD *)(v9 + 8) = 0;
    objc_storeStrong((id *)(v9 + 8), *((id *)v14 - 2));
    v16 = (void *)*((_QWORD *)v14 - 2);
    *((_QWORD *)v14 - 2) = 0;

    v14 -= 24;
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v13;
  v18 = (char *)a1[2];
  a1[2] = v10;
  if (v17 != v14)
  {
    v19 = v17 - 24;
    v20 = v17 - 24;
    do
    {
      v21 = *(void (***)(char *))v20;
      v20 -= 24;
      (*v21)(v19);
      v22 = v19 == v14;
      v19 = v20;
    }
    while (!v22);
  }
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v14, v18 - v14);
  return v13;
}

_OWORD *std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__push_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7)
  {
    v9 = 32 * v7;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 32 * v7, 8);
    v11 = (_OWORD *)(v10 + 32 * v2);
    v7 = v10 + v9;
    if (v10)
    {
      v12 = *(_OWORD *)(a2 + 16);
      *v11 = *(_OWORD *)a2;
      v11[1] = v12;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
    }
  }
  else
  {
    v11 = (_OWORD *)(32 * v2);
  }
  v13 = v11 + 2;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v13;
    v18 = a1[2];
    a1[2] = v7;
  }
  else
  {
    do
    {
      v16 = *(_OWORD *)(v15 - 16);
      *(v11 - 2) = *(_OWORD *)(v15 - 32);
      *(v11 - 1) = v16;
      v11 -= 2;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 32) = 0;
      v15 -= 32;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v13;
    v18 = a1[2];
    a1[2] = v7;
    while (v17 != v15)
    {
      if (*(char *)(v17 - 9) < 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v17 - 8) + 40))(*(_QWORD *)(v17 - 8), *(_QWORD *)(v17 - 32), *(_QWORD *)(v17 - 16) & 0x7FFFFFFFFFFFFFFFLL);
      v17 -= 32;
    }
  }
  if (v15)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v15, v18 - v15);
  return v13;
}

uint64_t std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 9) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 - 8) + 40))(*(_QWORD *)(v2 - 8), *(_QWORD *)(v2 - 32), *(_QWORD *)(v2 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

char *std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(uint64_t *a1, const char **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v5 = a1[2] - *a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  v34 = a1 + 3;
  if (!v7)
  {
    v11 = (char *)(32 * v2);
    v33 = 0;
    goto LABEL_14;
  }
  v9 = 32 * v7;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 32 * v7, 8);
  v11 = (char *)(v10 + 32 * v2);
  v31 = v11;
  v32 = v11;
  v33 = v10 + v9;
  if (!v10)
  {
LABEL_14:
    v17 = v11;
    goto LABEL_20;
  }
  v12 = *a2;
  {
    v30 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v30, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v11 + 3) = mdm::Allocator::instance(void)::alloc;
  v15 = strlen(v12);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v18 + 1, 1);
    *((_QWORD *)v11 + 1) = v16;
    *((_QWORD *)v11 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)v11 = v20;
    v11 = (char *)v20;
  }
  else
  {
    v11[23] = v15;
    if (!v15)
      goto LABEL_19;
  }
  memmove(v11, v12, v16);
LABEL_19:
  v11[v16] = 0;
  v11 = v31;
  v17 = v32;
LABEL_20:
  v21 = v17 + 32;
  v23 = *a1;
  v22 = a1[1];
  if (v22 == *a1)
  {
    v25 = a1[1];
  }
  else
  {
    do
    {
      v24 = *(_OWORD *)(v22 - 16);
      *((_OWORD *)v11 - 2) = *(_OWORD *)(v22 - 32);
      *((_OWORD *)v11 - 1) = v24;
      v11 -= 32;
      *(_QWORD *)(v22 - 24) = 0;
      *(_QWORD *)(v22 - 16) = 0;
      *(_QWORD *)(v22 - 32) = 0;
      v22 -= 32;
    }
    while (v22 != v23);
    v25 = *a1;
    v22 = a1[1];
  }
  *a1 = (uint64_t)v11;
  a1[1] = (uint64_t)v21;
  v26 = a1[2];
  a1[2] = v33;
  if (v22 != v25)
  {
    v27 = v22 - 32;
    do
    {
      if (*(char *)(v27 + 23) < 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), *(_QWORD *)v27, *(_QWORD *)(v27 + 16) & 0x7FFFFFFFFFFFFFFFLL);
      v28 = v27 == v25;
      v27 -= 32;
    }
    while (!v28);
    v22 = v25;
  }
  if (v22)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v34 + 40))(*v34, v22, v26 - v22);
  return v21;
}

void sub_19FBA01E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 55) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 40))(*(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

uint64_t *std::unique_ptr<std::__tree_node<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 56) + 40))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 64);
  }
  return a1;
}

void karo::AsyncRequestManager::RequestHandle::~RequestHandle(karo::AsyncRequestManager::RequestHandle *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42C2D08;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 128);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42C2D08;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (unsigned int *)(v1 + 128);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManager::RequestHandle::getStatus(karo::AsyncRequestManager::RequestHandle *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t *v10;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 152));
  v3 = *(_DWORD *)(v1 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 152));
  if ((v3 & 2) != 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 88));
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(v4 + 72);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 88));
  if (v5 != v6)
    return 3;
  v8 = *((_QWORD *)this + 1);
  pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
  v9 = *(_DWORD *)(v8 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
  v10 = (unint64_t *)*((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    if ((*(unsigned int (**)(unint64_t *))(*v10 + 40))(v10))
      return 4;
    else
      return 0;
  }
  else if (atomic_load(v10 + 21))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t karo::AsyncRequestManager::destroyRequest(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return 1;
}

uint64_t karo::AsyncRequestManager::RequestHandle::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 128);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (v6)
  {
    v13 = (unsigned int *)(v6 + 128);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  return a1;
}

_QWORD *karo::AsyncRequestManager::AsyncRequestManager(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  pthread_mutex_t *v7;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *a1 = off_1E42C34D0;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a1 = off_1E42C2D30;
  a1[4] = a3;
  a1[5] = 0;
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_settype(&v9, 2);
  v7 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v7, &v9);
  pthread_mutexattr_destroy(&v9);
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = v7;
  return a1;
}

void karo::AsyncRequestManager::~AsyncRequestManager(karo::AsyncRequestManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E42C2D30;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v3 = *(_QWORD *)(v2 + 48);
    if (v3 != v4)
    {
      v5 = 0;
      v6 = (v3 - v4) >> 3;
      if (v6 <= 1)
        v6 = 1;
      while (*(karo::AsyncRequestManager **)(v4 + 8 * v5) != this)
      {
        if (v6 == ++v5)
          goto LABEL_12;
      }
      *(_QWORD *)(v4 + 8 * v5) = *(_QWORD *)(v3 - 8);
      v7 = *(_QWORD *)(v2 + 48);
      if (v7 == *(_QWORD *)(v2 + 40))
      {
        if (*(_QWORD *)(v2 + 56) - v7 != -8)
          abort();
        bzero(*(void **)(v2 + 48), 0xFFFFFFFFFFFFFFF8);
      }
      *(_QWORD *)(v2 + 48) = v7 - 8;
    }
  }
LABEL_12:
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 5));
  v8 = *((_QWORD *)this + 5);
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::GlobeTileComponent::~GlobeTileComponent(altitude::GlobeTileComponent *this)
{
  altitude::GlobeTileComponent::~GlobeTileComponent(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *__p;
  char *v46;
  uint64_t v47;

  *(_QWORD *)this = &off_1E42C5580;
  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2 != v3)
  {
    do
    {
      v4 = *(_QWORD *)(v2 + 8);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v2 += 16;
    }
    while (v2 != v3);
    v2 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 7) = v2;
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    v6 = 0;
    v7 = (char *)this + 240;
    do
    {
      v8 = v7;
      if (v5 >= 2)
        v8 = (_QWORD *)(*((_QWORD *)this + 31) + 8 * v6);
      if (*v8)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 8))(*v8);
        v5 = *((_QWORD *)this + 29);
      }
      ++v6;
      v7 += 8;
    }
    while (v6 < v5);
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 32) = *((_QWORD *)this + 31);
  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 20))
  {
    __p = 0;
    v46 = 0;
    v47 = 0;
    altitude::GlobeTileComponent::setHiresTextures(this, (uint64_t **)&__p);
    v9 = (char *)__p;
    if (__p)
    {
      v10 = v46;
      v11 = __p;
      if (v46 != __p)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = __p;
      }
      v46 = v9;
      operator delete(v11);
    }
  }
  if (*((_QWORD *)this + 17))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                           + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      if (*((_QWORD *)this + 17))
        (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                             + 424)
                                                                               + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
  }
  if (*((_QWORD *)this + 26))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                           + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (*((_QWORD *)this + 26))
        (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                             + 424)
                                                                               + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
    *((_DWORD *)this + 56) = -1;
  }
  altitude::GlobeTileComponent::destroyGeometryElement(this);
  v21 = *((_QWORD *)this + 34);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    *((_QWORD *)this + 34) = 0;
  }
  v22 = (void *)*((_QWORD *)this + 31);
  if (v22)
  {
    *((_QWORD *)this + 32) = v22;
    operator delete(v22);
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v23)
    goto LABEL_51;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_51:
    v26 = (void *)*((_QWORD *)this + 22);
    if (!v26)
      goto LABEL_53;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  v26 = (void *)*((_QWORD *)this + 22);
  if (v26)
  {
LABEL_52:
    *((_QWORD *)this + 23) = v26;
    operator delete(v26);
  }
LABEL_53:
  v27 = *((_QWORD *)this + 19);
  if (v27)
  {
    v28 = *((_QWORD *)this + 20);
    v29 = (void *)*((_QWORD *)this + 19);
    if (v28 != v27)
    {
      do
      {
        v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v27;
    operator delete(v29);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v33)
    goto LABEL_68;
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v36)
      goto LABEL_76;
  }
  else
  {
LABEL_68:
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v36)
      goto LABEL_76;
  }
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_76:
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v39)
    goto LABEL_80;
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_80:
    if ((*((char *)this + 103) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (*((char *)this + 103) < 0)
LABEL_81:
    operator delete(*((void **)this + 10));
LABEL_82:
  *(_QWORD *)this = off_1E42C4248;
  v42 = (_QWORD *)*((_QWORD *)this + 6);
  v43 = (_QWORD *)*((_QWORD *)this + 7);
  if (v42 == v43)
  {
    if (v42)
    {
LABEL_84:
      *((_QWORD *)this + 7) = v42;
      operator delete(v42);
    }
  }
  else
  {
    do
    {
      v44 = v42[1];
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v42 += 2;
    }
    while (v42 != v43);
    v42 = (_QWORD *)*((_QWORD *)this + 6);
    if (v42)
      goto LABEL_84;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
}

unint64_t altitude::GlobeTileComponent::renderStamp(altitude::GlobeTileComponent *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  result = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 56);
    while (1)
    {
      if (v4 == v5)
        return result;
      v6 = *(char **)(*(_QWORD *)v4 + 256);
      v7 = *(char **)(*(_QWORD *)v4 + 264);
      if (v6 != v7)
      {
        v8 = v7 - v6 - 8;
        if (v8 <= 7)
          goto LABEL_17;
        v9 = (v8 >> 3) + 1;
        v10 = v6 + 8;
        v11 = v9 & 0x3FFFFFFFFFFFFFFELL;
        v12 = result;
        do
        {
          if (*(_QWORD *)(*(v10 - 1) + 88) > result)
            result = *(_QWORD *)(*(v10 - 1) + 88);
          if (*(_QWORD *)(*v10 + 88) > v12)
            v12 = *(_QWORD *)(*v10 + 88);
          v10 += 2;
          v11 -= 2;
        }
        while (v11);
        if (result <= v12)
          result = v12;
        if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
          break;
      }
LABEL_3:
      v4 += 8;
    }
    v6 += 8 * (v9 & 0x3FFFFFFFFFFFFFFELL);
    do
    {
LABEL_17:
      v13 = *(_QWORD *)v6;
      v6 += 8;
      v14 = *(_QWORD *)(v13 + 88);
      if (v14 > result)
        result = v14;
    }
    while (v6 != v7);
    goto LABEL_3;
  }
  return result;
}

BOOL altitude::GlobeTileComponent::hasLoadedData(altitude::GlobeTileComponent *this)
{
  return *((_QWORD *)this + 15) != 0;
}

BOOL altitude::GlobeTileComponent::hasLoadedFallbackData(altitude::GlobeTileComponent *this)
{
  return *((_QWORD *)this + 26) != 0;
}

uint64_t altitude::GlobeTileComponent::needsFallbackData(altitude::GlobeTileComponent *this)
{
  return (*(unsigned int (**)(altitude::GlobeTileComponent *))(*(_QWORD *)this + 56))(this) ^ 1;
}

void altitude::GlobeTileComponent::destroyFallback(altitude::GlobeTileComponent *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((_QWORD *)this + 26))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2) + 424)
                                                                           + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      if (*((_QWORD *)this + 26))
        (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)this + 2)
                                                                                             + 424)
                                                                               + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 424), *((_QWORD *)this + 2), this);
    }
    *((_DWORD *)this + 56) = -1;
  }
}

void altitude::GlobeTileComponent::willBeDrawn(altitude::GlobeTileComponent *this, id *a2, altitude::View *a3, karo::graphics::Viewport *a4, uint64_t a5, altitude::StencilManager *a6)
{
  karo::graphics::Viewport *v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  altitude::RenderableGroup *v19;
  altitude::RenderableGroup *v20;
  altitude::RenderableGroup *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _QWORD *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  _DWORD *v67;
  _WORD *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  std::__shared_count v75;
  unsigned __int8 v76;
  std::__shared_weak_count_vtbl *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *shared_owners;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  std::string *v114;
  std::string::size_type size;
  std::string::value_type *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t SolidLineElement;
  unint64_t v121;
  unint64_t shared_weak_owners;
  unint64_t v123;
  uint64_t v124;
  _QWORD **v125;
  _QWORD **i;
  _QWORD *v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  _QWORD *v176;
  unint64_t v177;
  float32x2_t *v178;
  int v179;
  uint64_t v180;
  int v181;
  float v182;
  int v183;
  double v184;
  double v185;
  double *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  karo::graphics::Viewport *v205;
  double v207[16];
  double v208;
  double v209;
  double v210;
  uint64_t v211;
  double v212;
  double v213;
  double v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  uint64_t v223;
  uint64_t v224[3];
  std::string v225;
  uint64_t v226;
  double v227;
  double v228;
  double v229;
  uint64_t v230;
  double v231;
  double v232;
  double v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE __str[1024];
  uint64_t v239;

  v7 = a4;
  v239 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)((char *)this + 232);
  v10 = *((_QWORD *)this + 29);
  if (!v10)
  {
LABEL_8:
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E42C6498;
    *(_QWORD *)(v14 + 8) = a3;
    *(_QWORD *)(v14 + 16) = this;
    *(_QWORD *)(v14 + 24) = 0;
    *(_WORD *)(v14 + 32) = 257;
    *(_QWORD *)__str = v14;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v11, (uint64_t *)__str);
    v15 = *((_QWORD *)this + 29);
    v16 = v15 - 1;
    if (v15 < 2)
      v17 = (uint64_t *)((char *)this + 8 * v16 + 240);
    else
      v17 = (uint64_t *)(*((_QWORD *)this + 31) + 8 * v16);
    v12 = *v17;
    goto LABEL_12;
  }
  if (v10 == 1)
  {
    v12 = *((_QWORD *)this + 30);
    if (*(altitude::View **)(v12 + 8) == a3)
      goto LABEL_12;
    goto LABEL_8;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 31);
  while (1)
  {
    v12 = *v13;
    if (*(altitude::View **)(*v13 + 8) == a3)
      break;
    ++v13;
    if (!--v10)
      goto LABEL_8;
  }
LABEL_12:
  v18 = *(_QWORD **)(v12 + 16);
  v19 = (altitude::RenderableGroup *)v18[15];
  if (v19)
    altitude::RenderableGroup::setDrapesEnabled(v19, *(_BYTE *)(v12 + 33));
  v20 = (altitude::RenderableGroup *)v18[26];
  if (v20)
    altitude::RenderableGroup::setDrapesEnabled(v20, *(_BYTE *)(v12 + 33));
  v21 = (altitude::RenderableGroup *)v18[17];
  if (v21)
    altitude::RenderableGroup::setDrapesEnabled(v21, *(_BYTE *)(v12 + 33));
  v22 = *(_QWORD *)(v12 + 24);
  if (v22)
  {
    (*(void (**)(uint64_t, karo::graphics::Viewport *, uint64_t, karo::graphics::Viewport *, uint64_t, altitude::StencilManager *))(*(_QWORD *)v22 + 24))(v22, v7, a5, a4, a5, a6);
    goto LABEL_20;
  }
  if (!v18[15])
  {
    *(_BYTE *)(v12 + 32) = 1;
    if (!v18[26])
      goto LABEL_56;
LABEL_54:
    if (!v18[15])
      altitude::GlobeTileComponent::setupGlobeElement(a5, *(altitude::View **)(v12 + 8), *(_QWORD *)(*(_QWORD *)(v12 + 16) + 208), 1.0);
    goto LABEL_56;
  }
  altitude::GlobeTileComponent::setupGlobeElement(a5, *(altitude::View **)(v12 + 8), *(_QWORD *)(*(_QWORD *)(v12 + 16) + 120), 1.0);
  if (v18[26])
    goto LABEL_54;
LABEL_56:
  if (v18[17] && *(_BYTE *)(v12 + 32))
    altitude::GlobeTileComponent::setupSurfaceElement(*(altitude::GlobeTileComponent **)(*(_QWORD *)(v12 + 16) + 136), *(altitude::View **)(v12 + 8));
  v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 16) + 336);
  if (v80)
  {
    *(_BYTE *)(v80 + 122) = 1;
    if (*(float *)(v80 + 124) != 1.0)
    {
      v81 = *(_QWORD *)(v80 + 88);
      if (v81)
      {
        *(_DWORD *)(v80 + 124) = 1065353216;
        *(_BYTE *)(v81 + 160) = 0;
      }
    }
  }
LABEL_20:
  v23 = *((_BYTE *)a3 + 1291);
  if (v23)
  {
    v24 = *((_QWORD *)a3 + 4);
    if (*((_QWORD *)this + 34))
    {
      if (*((_BYTE *)this + 280))
        goto LABEL_33;
      v25 = (_QWORD *)*((_QWORD *)this + 2);
      v26 = v25[41];
      if (v26)
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26) ^ 1;
        v28 = v25[42];
        if (!v28)
          goto LABEL_26;
      }
      else
      {
        v27 = 0;
        v28 = v25[42];
        if (!v28)
        {
LABEL_26:
          v29 = v25[43];
          if (v29)
            v27 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29) ^ 1;
          v30 = v25[44];
          if (v30)
            v27 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30) ^ 1;
          v31 = v25[45];
          if (v31)
            v27 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31) ^ 1;
          if (!v27)
            goto LABEL_131;
LABEL_33:
          v32 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
          if (*((_BYTE *)this + 282))
          {
            v33 = 1.0;
            v34 = 0.0;
LABEL_35:
            v35 = 0.0;
LABEL_36:
            v36 = **(_QWORD **)(*((_QWORD *)this + 34) + 48);
            v37 = **(_QWORD ***)(*(_QWORD *)(v36 + 192) + 64);
            v38 = v37[1];
            v39 = v37[9];
            *(float *)v39 = v34;
            *(float *)(v39 + 4) = v35;
            *(float *)(v39 + 8) = v33;
            *(_DWORD *)(v39 + 12) = 1065353216;
            if (v37[8] > v38)
              v38 = v37[8];
            v37[7] = 0;
            v37[8] = v38;
            v40 = v32[4];
            v41 = v32[5];
            v43 = *v32;
            v42 = v32[1];
            v44 = v32[2];
            v45 = v32[3];
            v46 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v36 + 184) + 64) + 64);
            v47 = (_QWORD *)*v46;
            v48 = (std::__shared_weak_count *)v46[1];
            if (v48)
            {
              p_shared_owners = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
            }
            v51 = 8 * v47[1];
            if (v51)
              v52 = v47[9];
            else
              v52 = 0;
            v89 = v45;
            v90 = v40;
            v91 = v41;
            *(float *)v52 = v89;
            *(float *)(v52 + 4) = v90;
            *(float *)(v52 + 8) = v91;
            *(_DWORD *)(v52 + 12) = 1065353216;
            v92 = v43;
            *(float *)(v52 + 16) = v92;
            *(float *)(v52 + 20) = v90;
            *(float *)(v52 + 24) = v91;
            *(_DWORD *)(v52 + 28) = 1065353216;
            v93 = v42;
            *(float *)(v52 + 32) = v89;
            *(float *)(v52 + 36) = v93;
            *(float *)(v52 + 40) = v91;
            *(_DWORD *)(v52 + 44) = 1065353216;
            *(float *)(v52 + 48) = v92;
            *(float *)(v52 + 52) = v93;
            *(float *)(v52 + 56) = v91;
            *(_DWORD *)(v52 + 60) = 1065353216;
            v94 = v44;
            *(float *)(v52 + 64) = v89;
            *(float *)(v52 + 68) = v90;
            *(float *)(v52 + 72) = v94;
            *(_DWORD *)(v52 + 76) = 1065353216;
            *(float *)(v52 + 80) = v92;
            *(float *)(v52 + 84) = v90;
            *(float *)(v52 + 88) = v94;
            *(_DWORD *)(v52 + 92) = 1065353216;
            *(float *)(v52 + 96) = v89;
            *(float *)(v52 + 100) = v93;
            *(float *)(v52 + 104) = v94;
            *(_DWORD *)(v52 + 108) = 1065353216;
            *(float *)(v52 + 112) = v92;
            *(float *)(v52 + 116) = v93;
            *(float *)(v52 + 120) = v94;
            *(_DWORD *)(v52 + 124) = 1065353216;
            if (v52 && v51)
            {
              if (v47[8] > v51)
                v51 = v47[8];
              v47[7] = 0;
              v47[8] = v51;
            }
            if (v48)
            {
              v95 = (unint64_t *)&v48->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
LABEL_131:
            *((_BYTE *)this + 280) = 0;
            goto LABEL_132;
          }
          v82 = *((_QWORD *)this + 2);
          v33 = 0.0;
          if (!*(_BYTE *)(v82 + 432))
          {
            v34 = 1.0;
            goto LABEL_35;
          }
          v83 = *(_QWORD *)(v82 + 328);
          if (v83)
          {
            v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83) ^ 1;
            v85 = *(_QWORD *)(v82 + 336);
            if (!v85)
            {
LABEL_67:
              v86 = *(_QWORD *)(v82 + 344);
              if (v86)
                v84 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 48))(v86) ^ 1;
              v87 = *(_QWORD *)(v82 + 352);
              if (v87)
                v84 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 48))(v87) ^ 1;
              v88 = *(_QWORD *)(v82 + 360);
              if (v88)
                v84 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 48))(v88) ^ 1;
              if (v84)
              {
                v34 = 0.7;
                if ((*(_DWORD *)(v24 + 88) - *(_DWORD *)(*((_QWORD *)this + 2) + 388)) >= 2)
                  v34 = 1.0;
                v35 = v34;
              }
              else
              {
                v35 = 1.0;
                v34 = 0.0;
                if (((*(_DWORD *)(*((_QWORD *)this + 2) + 400)
                     + *(_DWORD *)(*((_QWORD *)this + 2) + 396)
                     + *(_DWORD *)(*((_QWORD *)this + 2) + 404)) & 1) != 0)
                  v34 = 1.0;
                v33 = v34;
              }
              goto LABEL_36;
            }
          }
          else
          {
            v84 = 0;
            v85 = *(_QWORD *)(v82 + 336);
            if (!v85)
              goto LABEL_67;
          }
          v84 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 48))(v85) ^ 1;
          goto LABEL_67;
        }
      }
      v27 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28) ^ 1;
      goto LABEL_26;
    }
    v53 = *((_QWORD *)this + 2);
    v204 = *((_BYTE *)a3 + 1291);
    v203 = *((_QWORD *)a3 + 4);
    if (*((_BYTE *)this + 282))
    {
      v54 = 1.0;
      v55 = 0.0;
LABEL_48:
      v56 = 0.0;
      goto LABEL_49;
    }
    v54 = 0.0;
    if (!*(_BYTE *)(v53 + 432))
    {
      v55 = 1.0;
      goto LABEL_48;
    }
    v97 = *(_QWORD *)(v53 + 328);
    if (v97)
    {
      v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 48))(v97) ^ 1;
      v99 = *(_QWORD *)(v53 + 336);
      if (!v99)
      {
LABEL_92:
        v100 = *(_QWORD *)(v53 + 344);
        if (v100)
          v98 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 48))(v100) ^ 1;
        v101 = *(_QWORD *)(v53 + 352);
        if (v101)
          v98 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 48))(v101) ^ 1;
        v102 = *(_QWORD *)(v53 + 360);
        if (v102)
          v98 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 48))(v102) ^ 1;
        if (v98)
        {
          v55 = 0.7;
          if ((*(_DWORD *)(v24 + 88) - *(_DWORD *)(*((_QWORD *)this + 2) + 388)) >= 2)
            v55 = 1.0;
          v56 = v55;
        }
        else
        {
          v56 = 1.0;
          v55 = 0.0;
          if (((*(_DWORD *)(*((_QWORD *)this + 2) + 400)
               + *(_DWORD *)(*((_QWORD *)this + 2) + 396)
               + *(_DWORD *)(*((_QWORD *)this + 2) + 404)) & 1) != 0)
            v55 = 1.0;
          v54 = v55;
        }
LABEL_49:
        v205 = v7;
        v208 = COERCE_DOUBLE(__PAIR64__(LODWORD(v56), LODWORD(v55)));
        *(_QWORD *)&v209 = LODWORD(v54) | 0x3F80000000000000;
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        v58 = *(_OWORD *)v57;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v57 + 16);
        *(_OWORD *)__str = v58;
        v59 = *(_OWORD *)(v57 + 24);
        *(_QWORD *)&__str[40] = *(_QWORD *)(v57 + 40);
        *(_OWORD *)&__str[24] = v59;
        *(_QWORD *)&__str[48] = *(_QWORD *)(v57 + 48);
        v60 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 56))(v53);
        v62 = *v60;
        v61 = v60[1];
        v63 = v60[2];
        v64 = v60[3];
        v66 = v60[4];
        v65 = v60[5];
        v67 = operator new(4uLL);
        *v67 = 393223;
        v68 = operator new(8uLL);
        v68[2] = 6;
        *(_DWORD *)v68 = *v67;
        operator delete(v67);
        v68[3] = 4;
        v69 = (char *)operator new(0x10uLL);
        *((_WORD *)v69 + 4) = 4;
        *(_QWORD *)v69 = *(_QWORD *)v68;
        operator delete(v68);
        *(_DWORD *)(v69 + 10) = 327685;
        *((_WORD *)v69 + 7) = 7;
        v70 = (char *)operator new(0x20uLL);
        *((_WORD *)v70 + 8) = 3;
        *(_OWORD *)v70 = *(_OWORD *)v69;
        operator delete(v69);
        *(_QWORD *)(v70 + 18) = 131074;
        *(_DWORD *)(v70 + 26) = 65537;
        *((_WORD *)v70 + 15) = 3;
        v71 = (char *)operator new(0x40uLL);
        *((_WORD *)v71 + 16) = 7;
        v72 = *((_OWORD *)v70 + 1);
        *(_OWORD *)v71 = *(_OWORD *)v70;
        *((_OWORD *)v71 + 1) = v72;
        operator delete(v70);
        *(_QWORD *)(v71 + 34) = 0x4000200060003;
        *(_DWORD *)(v71 + 42) = 327680;
        *((_WORD *)v71 + 23) = 1;
        v73 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v73->__shared_owners_ = 0;
        v74 = (unint64_t *)&v73->__shared_owners_;
        v73->__shared_weak_owners_ = 0;
        v73->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF8B0;
        v73[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v73[1].__shared_owners_ = 16;
        LODWORD(v73[1].__shared_weak_owners_) = 6;
        v75 = (std::__shared_count)0;
        v73[2].std::__shared_count = 0u;
        *(_OWORD *)&v73[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v73[3].__shared_owners_ = 0u;
        v73[4].std::__shared_count = 0u;
        v73[4].__shared_weak_owners_ = 0;
        if ((v76 & 1) == 0)
        {
          v75 = (std::__shared_count)0;
          if (v201)
          {
            v202 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v202, "GeoGL", 0xA3D02C1100000005);
            v75 = (std::__shared_count)0;
          }
        }
        v77 = v73[4].__vftable;
        v73[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v73[5].__shared_owners_ = 0;
        *((std::__shared_count *)v73 + 11) = v75;
        v73[8].std::__shared_count = v75;
        v73[8].__shared_weak_owners_ = 0;
        v73[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        v73[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        *((std::__shared_count *)v73 + 10) = v75;
        LODWORD(v73[5].__shared_weak_owners_) = 0;
        v73[9].__shared_weak_owners_ = (uint64_t)"DebugBoundsElement";
        v73[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4Reflection;
        v73[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7520;
        v78 = 8 * v73[1].__shared_owners_;
        v79 = v73[4].__shared_owners_ - (_QWORD)v77;
        v73[9].__shared_owners_ = (uint64_t)&unk_1E42B7540;
        if (v78 != v79)
        {
          if (v78 <= v79)
          {
            if (v78 < v79)
              v73[4].__shared_owners_ = (uint64_t)v77 + v78;
          }
          else
          {
            std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)&v73[4], v78 - v79);
          }
          shared_owners = (std::__shared_weak_count *)v73[2].__shared_owners_;
          v73[2].__vftable = 0;
          v73[2].__shared_owners_ = 0;
          if (shared_owners)
          {
            v104 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
              std::__shared_weak_count::__release_weak(shared_owners);
            }
          }
          v73[6].__vftable = 0;
          LODWORD(v73[5].__shared_weak_owners_) = 0;
          v77 = v73[4].__vftable;
          v106 = (std::__shared_weak_count_vtbl *)(v73[4].__shared_owners_ - (_QWORD)v77);
          v73[2].__shared_weak_owners_ = 0;
          v73[3].__vftable = v106;
          v73[3].__shared_owners_ = 0;
          v73[3].__shared_weak_owners_ = (uint64_t)v106;
          v78 = 8 * v73[1].__shared_owners_;
        }
        if (!v78)
          v77 = 0;
        v107 = v64;
        v108 = v66;
        *(float *)&v77->~__shared_weak_count = v107;
        *((float *)&v77->~__shared_weak_count + 1) = v108;
        v109 = v65;
        *(float *)&v77->~__shared_weak_count_0 = v109;
        HIDWORD(v77->~__shared_weak_count_0) = 1065353216;
        v110 = v62;
        *(float *)&v77->__on_zero_shared = v110;
        *((float *)&v77->__on_zero_shared + 1) = v108;
        *(float *)&v77->__get_deleter = v109;
        HIDWORD(v77->__get_deleter) = 1065353216;
        v111 = v61;
        *(float *)&v77->__on_zero_shared_weak = v107;
        *((float *)&v77->__on_zero_shared_weak + 1) = v111;
        *(float *)&v77[1].~__shared_weak_count = v109;
        HIDWORD(v77[1].~__shared_weak_count) = 1065353216;
        *(float *)&v77[1].~__shared_weak_count_0 = v110;
        *((float *)&v77[1].~__shared_weak_count_0 + 1) = v111;
        *(float *)&v77[1].__on_zero_shared = v109;
        HIDWORD(v77[1].__on_zero_shared) = 1065353216;
        v112 = v63;
        *(float *)&v77[1].__get_deleter = v107;
        *((float *)&v77[1].__get_deleter + 1) = v108;
        *(float *)&v77[1].__on_zero_shared_weak = v112;
        HIDWORD(v77[1].__on_zero_shared_weak) = 1065353216;
        *(float *)&v77[2].~__shared_weak_count = v110;
        *((float *)&v77[2].~__shared_weak_count + 1) = v108;
        *(float *)&v77[2].~__shared_weak_count_0 = v112;
        HIDWORD(v77[2].~__shared_weak_count_0) = 1065353216;
        *(float *)&v77[2].__on_zero_shared = v107;
        *((float *)&v77[2].__on_zero_shared + 1) = v111;
        *(float *)&v77[2].__get_deleter = v112;
        HIDWORD(v77[2].__get_deleter) = 1065353216;
        *(float *)&v77[2].__on_zero_shared_weak = v110;
        *((float *)&v77[2].__on_zero_shared_weak + 1) = v111;
        *(float *)&v77[3].~__shared_weak_count = v112;
        HIDWORD(v77[3].~__shared_weak_count) = 1065353216;
        v113 = operator new();
        *((_BYTE *)&v225.__r_.__value_.__s + 23) = 18;
        strcpy((char *)&v225, "DebugBoundsElement");
        v114 = std::string::append(&v225, "/RenderableGroup", 0x10uLL);
        v116 = (std::string::value_type *)v114->__r_.__value_.__r.__words[0];
        size = v114->__r_.__value_.__l.__size_;
        LODWORD(v224[0]) = v114->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v224 + 3) = *(_DWORD *)((char *)&v114->__r_.__value_.__r.__words[2] + 3);
        v117 = SHIBYTE(v114->__r_.__value_.__r.__words[2]);
        v114->__r_.__value_.__r.__words[0] = 0;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        *(_QWORD *)v113 = off_1E42BE278;
        if (v117 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v113 + 8), v116, size);
        }
        else
        {
          *(_QWORD *)(v113 + 8) = v116;
          *(_QWORD *)(v113 + 16) = size;
          *(_DWORD *)(v113 + 24) = v224[0];
          *(_DWORD *)(v113 + 27) = *(_DWORD *)((char *)v224 + 3);
          *(_BYTE *)(v113 + 31) = v117;
        }
        *(_QWORD *)v113 = &off_1E42C4580;
        *(_QWORD *)(v113 + 32) = 0;
        *(_BYTE *)(v113 + 40) = 1;
        *(_OWORD *)(v113 + 48) = 0u;
        *(_OWORD *)(v113 + 64) = 0u;
        *(_OWORD *)(v113 + 80) = 0u;
        *(_OWORD *)(v113 + 96) = 0u;
        *(_QWORD *)(v113 + 112) = 0;
        *(_BYTE *)(v113 + 120) = 1;
        *(_QWORD *)(v113 + 128) = 0;
        *(_QWORD *)(v113 + 136) = 0;
        if (v117 < 0)
        {
          operator delete(v116);
          if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_117;
        }
        else if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_117:
          *((_BYTE *)&v225.__r_.__value_.__s + 23) = 18;
          strcpy((char *)&v225, "DebugBoundsElement");
          v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53);
          v224[0] = (uint64_t)&v73[1];
          v224[1] = (uint64_t)v73;
          do
            v119 = __ldxr(v74);
          while (__stxr(v119 + 1, v74));
          SolidLineElement = altitude::Renderable::createSolidLineElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 8) + 40) + 8), (const void **)&v225.__r_.__value_.__l.__data_, (uint64_t)__str, v118, v224, v71, 0x18u, (void (__cdecl **)(std::__shared_weak_count *__hidden))&v208);
          do
            v121 = __ldaxr(v74);
          while (__stlxr(v121 - 1, v74));
          if (v121)
          {
            if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_123:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, SolidLineElement);
              if (v78)
              {
                shared_weak_owners = v73[3].__shared_weak_owners_;
                if (shared_weak_owners <= v78)
                  shared_weak_owners = v78;
                v73[3].__shared_owners_ = 0;
                v73[3].__shared_weak_owners_ = shared_weak_owners;
              }
              do
                v123 = __ldaxr(v74);
              while (__stlxr(v123 - 1, v74));
              v7 = v205;
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
              operator delete(v71);
              *((_QWORD *)this + 34) = v113;
              v23 = v204;
              goto LABEL_131;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
            if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_123;
          }
          operator delete(v225.__r_.__value_.__l.__data_);
          goto LABEL_123;
        }
        operator delete(v225.__r_.__value_.__l.__data_);
        goto LABEL_117;
      }
    }
    else
    {
      v98 = 0;
      v99 = *(_QWORD *)(v53 + 336);
      if (!v99)
        goto LABEL_92;
    }
    v98 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 48))(v99) ^ 1;
    goto LABEL_92;
  }
LABEL_132:
  *((_BYTE *)this + 281) = v23;
  v124 = *((_QWORD *)this + 34);
  if (v124 && *((_BYTE *)a3 + 1291))
  {
    v125 = *(_QWORD ***)(v124 + 48);
    for (i = *(_QWORD ***)(v124 + 56); v125 != i; v176[8] = v177)
    {
      v127 = *v125++;
      v128 = *((double *)a3 + 10);
      v129 = *((double *)a3 + 11);
      v130 = *((double *)a3 + 12);
      v132 = *((double *)a3 + 8);
      v131 = *((double *)a3 + 9);
      v134 = *((double *)a3 + 6);
      v133 = *((double *)a3 + 7);
      v135 = v127[24];
      v136 = -(v132 * v128 - v133 * v129) - (v132 * v128 - v133 * v129);
      v137 = -(v134 * v129 - v132 * v131) - (v134 * v129 - v132 * v131);
      v138 = -(v133 * v131 - v134 * v128) - (v133 * v131 - v134 * v128);
      v139 = -(-(v133 - v136 * v129) - v137 * v130);
      v140 = v132 + v136 * v128;
      v141 = v134 + v136 * v130 + v137 * v129;
      v142 = v140 + v138 * v130;
      v143 = -(v129 * (v129 * -2.0));
      v144 = v129 * -2.0 * v130;
      v145 = -(v129 * (v131 * -2.0));
      v146 = v130 * (v128 * -2.0);
      v147 = -(v129 * (v128 * -2.0));
      v148 = v130 * (v131 * -2.0);
      v149 = v131 * -2.0 * v131 + 1.0;
      v208 = 1.0 - (v143 - v128 * (v128 * -2.0));
      v209 = v144 - v128 * (v131 * -2.0);
      v212 = -(v128 * (v131 * -2.0)) - v144;
      v213 = v149 - v143;
      v216 = v146 + v145;
      v217 = v147 - v148;
      v210 = v145 - v146;
      v214 = v148 + v147;
      v218 = v149 - -(v128 * (v128 * -2.0));
      v211 = 0;
      v215 = 0;
      v219 = 0;
      v220 = -(v141 - v138 * v128);
      v221 = -(v139 + v138 * v131);
      v223 = 0x3FF0000000000000;
      v222 = -(v142 - v137 * v131);
      v150 = gm::operator*<double,4,4,4>((double *)v224, (double *)a3 + 47, &v208);
      v151 = (*(uint64_t (**)(_QWORD *, double))(*v127 + 24))(v127, v150);
      memset(&__str[8], 0, 112);
      *(_QWORD *)&__str[120] = 0x3FF0000000000000;
      v152 = v127[30];
      *(_QWORD *)__str = v127[29];
      *(_QWORD *)&__str[40] = v152;
      *(_QWORD *)&__str[80] = v127[31];
      v153 = *(double *)(v151 + 24);
      v154 = *(double *)(v151 + 32);
      v155 = *(double *)(v151 + 40);
      v156 = *(double *)(v151 + 48);
      v157 = v154 + v154;
      v158 = (v154 + v154) * v154;
      v159 = (v155 + v155) * v155;
      v160 = v153 + v153;
      v161 = (v153 + v153) * v154;
      v162 = (v155 + v155) * v156;
      v163 = v155 * (v153 + v153);
      v164 = v156 * v157;
      v165 = v156 * v157 + v163;
      v166 = 1.0 - (v153 + v153) * v153;
      v167 = v157 * v155;
      v168 = v156 * v160;
      *(double *)&v225.__r_.__value_.__l.__data_ = 1.0 - (v158 + v159);
      *(double *)&v225.__r_.__value_.__l.__size_ = v162 + v161;
      v227 = v161 - v162;
      v228 = v166 - v159;
      v231 = v165;
      v232 = v167 - v168;
      *(double *)&v225.__r_.__value_.__r.__words[2] = v163 - v164;
      v229 = v168 + v167;
      v233 = v166 - v158;
      v226 = 0;
      v230 = 0;
      v234 = 0;
      v235 = *(_OWORD *)v151;
      v236 = *(_QWORD *)(v151 + 16);
      v237 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v207, (double *)&v225, (double *)__str);
      gm::operator*<double,4,4,4>((double *)__str, (double *)v224, v207);
      v169 = vcvt_f32_f64(*(float64x2_t *)&__str[16]);
      v170 = vcvt_f32_f64(*(float64x2_t *)&__str[32]);
      v171 = vcvt_f32_f64(*(float64x2_t *)&__str[48]);
      v172 = vcvt_f32_f64(*(float64x2_t *)&__str[64]);
      v173 = vcvt_f32_f64(*(float64x2_t *)&__str[80]);
      v174 = vcvt_f32_f64(*(float64x2_t *)&__str[96]);
      v175 = vcvt_f32_f64(*(float64x2_t *)&__str[112]);
      v176 = *(_QWORD **)(*(_QWORD *)(v135 + 64) + 16);
      v177 = v176[1];
      v178 = (float32x2_t *)v176[9];
      *v178 = vcvt_f32_f64(*(float64x2_t *)__str);
      v178[1] = v169;
      v178[2] = v170;
      v178[3] = v171;
      v178[4] = v172;
      v178[5] = v173;
      v178[6] = v174;
      v178[7] = v175;
      if (v176[8] > v177)
        v177 = v176[8];
      v176[7] = 0;
    }
    v179 = snprintf(__str, 0x400uLL, "(%i %i %i %i)", *(_DWORD *)(*((_QWORD *)this + 2) + 392), *(_DWORD *)(*((_QWORD *)this + 2) + 396), *(_DWORD *)(*((_QWORD *)this + 2) + 400), *(_DWORD *)(*((_QWORD *)this + 2) + 404));
    if (*a2 && (objc_opt_respondsToSelector() & 1) != 0)
      v180 = objc_msgSend(*a2, "debugConsoleForId:", 1);
    else
      v180 = 0;
    if (*((_BYTE *)this + 282))
    {
      LOBYTE(v181) = 0;
      v182 = 0.0;
      LOBYTE(v183) = -1;
LABEL_144:
      *(_BYTE *)(v180 + 96) = (int)(float)(v182 * 255.0);
      *(_BYTE *)(v180 + 97) = v181;
      *(_BYTE *)(v180 + 98) = v183;
      *(_BYTE *)(v180 + 99) = -1;
      v184 = (double)(*((_DWORD *)v7 + 12) - *((_DWORD *)v7 + 10));
      v185 = (double)(*((_DWORD *)v7 + 13) - *((_DWORD *)v7 + 11));
      v186 = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      v187 = v186[1];
      v188 = v186[2];
      v189 = 0.5
           / (*((double *)a3 + 30)
            + *((double *)a3 + 18) * *v186
            + *((double *)a3 + 22) * v187
            + *((double *)a3 + 26) * v188);
      v190 = v189
           * (*((double *)a3 + 27)
            + *v186 * *((double *)a3 + 15)
            + v187 * *((double *)a3 + 19)
            + v188 * *((double *)a3 + 23))
           + 0.5;
      v191 = (0.5
            - v189
            * (*((double *)a3 + 28)
             + *((double *)a3 + 16) * *v186
             + *((double *)a3 + 20) * v187
             + *((double *)a3 + 24) * v188))
           * v185;
      v192 = (float)((float)v179 * (float)(-0.5 * *(float *)(v180 + 24))) + v190 * v184;
      *(float *)&v192 = v192;
      *(float *)&v191 = v191;
      *(_DWORD *)(v180 + 8) = LODWORD(v192);
      *(_DWORD *)(v180 + 12) = LODWORD(v191);
      ggl::DebugConsole::drawString(v180, (int8x16_t *)__str, v179, v191, *(int32x2_t *)&v192);
      return;
    }
    v193 = *((_QWORD *)this + 2);
    LOBYTE(v183) = *(_BYTE *)(v193 + 432);
    if (!(_BYTE)v183)
    {
      LOBYTE(v181) = 0;
      v182 = 1.0;
      goto LABEL_144;
    }
    v194 = *((_QWORD *)a3 + 4);
    v195 = *(_QWORD *)(v193 + 328);
    if (v195)
    {
      v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 48))(v195) ^ 1;
      v197 = *(_QWORD *)(v193 + 336);
      if (!v197)
      {
LABEL_150:
        v198 = *(_QWORD *)(v193 + 344);
        if (v198)
          v196 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v198 + 48))(v198) ^ 1;
        v199 = *(_QWORD *)(v193 + 352);
        if (v199)
          v196 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v199 + 48))(v199) ^ 1;
        v200 = *(_QWORD *)(v193 + 360);
        if (v200)
          v196 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v200 + 48))(v200) ^ 1;
        if (v196)
        {
          LOBYTE(v183) = 0;
          v182 = 0.7;
          if ((*(_DWORD *)(v194 + 88) - *(_DWORD *)(*((_QWORD *)this + 2) + 388)) >= 2)
            v182 = 1.0;
          v181 = (int)(float)(v182 * 255.0);
        }
        else
        {
          v182 = 1.0;
          if (((*(_DWORD *)(*((_QWORD *)this + 2) + 400)
               + *(_DWORD *)(*((_QWORD *)this + 2) + 396)
               + *(_DWORD *)(*((_QWORD *)this + 2) + 404)) & 1) == 0)
            v182 = 0.0;
          v183 = (int)(float)(v182 * 255.0);
          LOBYTE(v181) = -1;
        }
        goto LABEL_144;
      }
    }
    else
    {
      v196 = 0;
      v197 = *(_QWORD *)(v193 + 336);
      if (!v197)
        goto LABEL_150;
    }
    v196 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 48))(v197) ^ 1;
    goto LABEL_150;
  }
}

uint64_t altitude::GlobeTileComponent::collectRenderItems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *i;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v9 = *(_QWORD *)(a1 + 232);
  if (v9)
  {
    if (v9 == 1)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 240) + 8) == a2)
        v10 = *(_QWORD *)(a1 + 240);
      else
        v10 = 0;
    }
    else
    {
      v11 = *(uint64_t **)(a1 + 248);
      while (1)
      {
        v10 = *v11;
        if (*(_QWORD *)(*v11 + 8) == a2)
          break;
        ++v11;
        if (!--v9)
          goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
  }
  result = *(_QWORD *)(v10 + 24);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a3, a6);
  }
  else
  {
    v26 = *(_QWORD *)(v10 + 16);
    v27 = *(_QWORD *)(v26 + 120);
    if (v27)
    {
      v28 = *(uint64_t **)(v27 + 48);
      v29 = *(uint64_t **)(v27 + 56);
      while (v28 != v29)
      {
        v31 = *v28;
        if (*(_BYTE *)(*v28 + 180) && (*(_DWORD *)(v31 + 160) - 1) <= 6)
        {
          v32 = *(_QWORD **)(a3 + 8);
          v34 = v32[3];
          v33 = v32[4];
          v35 = v33 - v34;
          if (v33 == v34)
            goto LABEL_23;
          v36 = 0;
          v37 = *(_QWORD *)(a6 + 8);
          v38 = v35 >> 3;
          while (1)
          {
            v39 = *(unsigned __int8 **)(v34 + 8 * v36);
            if (*v39 == *(unsigned __int8 *)(v37 + 8))
            {
              v40 = *((_QWORD *)v39 + 1);
              v41 = v32[15];
              if (v40 < (v32[16] - v41) >> 3)
                break;
            }
            if (++v36 >= v38)
              goto LABEL_23;
          }
          v42 = *(_QWORD *)(v41 + 8 * v40);
          if (!v42)
LABEL_23:
            v30 = 0;
          else
            v30 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * *(unsigned __int8 *)(v37 + 9));
          result = ggl::CommandBuffer::pushRenderItem(v30, *(ggl::RenderItem **)(v31 + 184));
        }
        ++v28;
      }
    }
    else
    {
      v46 = *(_QWORD *)(v26 + 208);
      if (v46)
      {
        v47 = *(uint64_t **)(v46 + 48);
        v48 = *(uint64_t **)(v46 + 56);
        while (v47 != v48)
        {
          v50 = *v47;
          if (*(_BYTE *)(*v47 + 180) && (*(_DWORD *)(v50 + 160) - 1) <= 6)
          {
            v51 = *(_QWORD **)(a3 + 8);
            v53 = v51[3];
            v52 = v51[4];
            v54 = v52 - v53;
            if (v52 == v53)
              goto LABEL_42;
            v55 = 0;
            v56 = *(_QWORD *)(a6 + 8);
            v57 = v54 >> 3;
            while (1)
            {
              v58 = *(unsigned __int8 **)(v53 + 8 * v55);
              if (*v58 == *(unsigned __int8 *)(v56 + 8))
              {
                v59 = *((_QWORD *)v58 + 1);
                v60 = v51[15];
                if (v59 < (v51[16] - v60) >> 3)
                  break;
              }
              if (++v55 >= v57)
                goto LABEL_42;
            }
            v61 = *(_QWORD *)(v60 + 8 * v59);
            if (!v61)
LABEL_42:
              v49 = 0;
            else
              v49 = *(_QWORD *)(*(_QWORD *)(v61 + 24) + 8 * *(unsigned __int8 *)(v56 + 9));
            result = ggl::CommandBuffer::pushRenderItem(v49, *(ggl::RenderItem **)(v50 + 184));
          }
          ++v47;
        }
      }
    }
    v62 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 136);
    if (v62 && *(_BYTE *)(v10 + 32))
    {
      v63 = *(_QWORD **)(a3 + 8);
      v65 = v63[3];
      v64 = v63[4];
      v66 = v64 - v65;
      if (v64 == v65)
        goto LABEL_64;
      v67 = 0;
      v68 = *(_QWORD *)(a6 + 8);
      v69 = v66 >> 3;
      while (1)
      {
        v70 = *(unsigned __int8 **)(v65 + 8 * v67);
        if (*v70 == *(unsigned __int8 *)(v68 + 6))
        {
          v71 = *((_QWORD *)v70 + 1);
          v72 = v63[15];
          if (v71 < (v63[16] - v72) >> 3)
            break;
        }
        if (++v67 >= v69)
          goto LABEL_64;
      }
      v73 = *(_QWORD *)(v72 + 8 * v71);
      if (!v73)
LABEL_64:
        v74 = 0;
      else
        v74 = *(_QWORD *)(*(_QWORD *)(v73 + 24) + 8 * *(unsigned __int8 *)(v68 + 7));
      v75 = *(_QWORD *)(v62 + 48);
      v76 = *(_QWORD *)(v62 + 56);
      while (v75 != v76)
      {
        if (*(_BYTE *)(*(_QWORD *)v75 + 180))
          result = ggl::CommandBuffer::pushRenderItem(v74, *(ggl::RenderItem **)(*(_QWORD *)v75 + 184));
        v75 += 8;
      }
    }
  }
  if (*(_BYTE *)(a1 + 281))
  {
    v13 = *(_QWORD *)(a1 + 272);
    if (v13)
    {
      v14 = *(_QWORD **)(a3 + 8);
      v16 = v14[3];
      v15 = v14[4];
      v17 = v15 - v16;
      if (v15 == v16)
        goto LABEL_36;
      v18 = 0;
      v19 = *(_QWORD *)(a6 + 8);
      v20 = v17 >> 3;
      while (1)
      {
        v21 = *(unsigned __int8 **)(v16 + 8 * v18);
        if (*v21 == *(unsigned __int8 *)(v19 + 40))
        {
          v22 = *((_QWORD *)v21 + 1);
          v23 = v14[15];
          if (v22 < (v14[16] - v23) >> 3)
            break;
        }
        if (++v18 >= v20)
          goto LABEL_36;
      }
      v24 = *(_QWORD *)(v23 + 8 * v22);
      if (!v24)
LABEL_36:
        v25 = 0;
      else
        v25 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8 * *(unsigned __int8 *)(v19 + 41));
      v43 = *(uint64_t **)(v13 + 48);
      for (i = *(uint64_t **)(v13 + 56);
            v43 != i;
            result = ggl::CommandBuffer::pushRenderItem(v25, *(ggl::RenderItem **)(v45 + 184)))
      {
        v45 = *v43++;
      }
    }
  }
  return result;
}

uint64_t altitude::GlobeTileComponent::prepareTileSetOperation(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(**(_QWORD **)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 288) + 32) + 480);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

uint64_t altitude::GlobeTileComponent::onTileSetOperation(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(**(_QWORD **)(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 288) + 32) + 480);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
}

void karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  if (!*a1)
  {
    v7 = *a2;
    *a1 = 1;
    a1[1] = v7;
    return;
  }
  if (*a1 == 1)
  {
    v5 = (char *)a1[3];
    v4 = a1[4];
    if ((unint64_t)v5 >= v4)
    {
      v8 = (char *)a1[2];
      v9 = (v5 - v8) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        goto LABEL_55;
      v11 = v4 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          goto LABEL_56;
        v13 = operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *v14 = a1[1];
      v6 = (char *)(v14 + 1);
      if (v5 == v8)
      {
        v8 = v5;
      }
      else
      {
        v16 = v5 - v8 - 8;
        if (v16 < 0x58)
          goto LABEL_59;
        if ((unint64_t)(v8 - v13) < 0x20)
          goto LABEL_59;
        v17 = (v16 >> 3) + 1;
        v18 = &v13[8 * v9 - 16];
        v19 = v5 - 16;
        v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          do
          {
            v22 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *--v14 = v22;
          }
          while (v5 != v8);
          v8 = (char *)a1[2];
        }
      }
      a1[2] = v14;
      a1[3] = v6;
      a1[4] = v15;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v5 = a1[1];
      v6 = v5 + 8;
    }
    a1[3] = v6;
  }
  else
  {
    v6 = (char *)a1[3];
  }
  v23 = a1[4];
  if ((unint64_t)v6 >= v23)
  {
    v25 = (char *)a1[2];
    v26 = (v6 - v25) >> 3;
    v27 = v26 + 1;
    if (!((unint64_t)(v26 + 1) >> 61))
    {
      v28 = v23 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (!v29)
      {
        v30 = 0;
LABEL_41:
        v31 = (uint64_t *)&v30[8 * v26];
        *v31 = *a2;
        v24 = v31 + 1;
        if (v6 == v25)
        {
          v25 = v6;
        }
        else
        {
          v32 = v6 - v25 - 8;
          if (v32 < 0x58)
          {
            v33 = v6;
            goto LABEL_50;
          }
          if ((unint64_t)(v25 - v30) < 0x20)
          {
            v33 = v6;
            goto LABEL_50;
          }
          v34 = (v32 >> 3) + 1;
          v33 = &v6[-8 * (v34 & 0x3FFFFFFFFFFFFFFCLL)];
          v35 = &v30[8 * v26 - 16];
          v36 = v6 - 16;
          v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *v35 = v38;
            v35 -= 2;
            v36 -= 32;
            v37 -= 4;
          }
          while (v37);
          v31 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_50:
              v39 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *--v31 = v39;
            }
            while (v33 != v25);
            v25 = (char *)a1[2];
          }
        }
        a1[2] = v31;
        a1[3] = v24;
        a1[4] = &v30[8 * v29];
        if (v25)
          operator delete(v25);
        goto LABEL_54;
      }
      if (!(v29 >> 61))
      {
        v30 = operator new(8 * v29);
        goto LABEL_41;
      }
LABEL_56:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_55:
    abort();
  }
  *(_QWORD *)v6 = *a2;
  v24 = v6 + 8;
LABEL_54:
  a1[3] = v24;
  ++*a1;
}

void altitude::GlobeTileComponent::setHiresTextures(altitude::GlobeTileComponent *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = (uint64_t)a1 + 152;
  if (*((_QWORD *)a1 + 19) != *((_QWORD *)a1 + 20))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 24))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 424), *((_QWORD *)a1 + 2), a1, v4);
    v5 = *((_QWORD *)a1 + 15);
    if (v5)
    {
      if (*((_QWORD *)a1 + 19) != *((_QWORD *)a1 + 20))
      {
        v6 = *((_QWORD *)a1 + 22);
        if (v6 != *((_QWORD *)a1 + 23))
        {
          v7 = *(_QWORD *)(v5 + 48);
          v8 = *(_QWORD *)(v5 + 56);
          if (v7 != v8)
          {
            do
            {
              v9 = *(int *)(*(_QWORD *)v7 + 176);
              if ((_DWORD)v9 != -1)
              {
                altitude::RenderableGroup::dropOwnership(*((_QWORD *)a1 + 15), *(_QWORD *)(*((_QWORD *)a1 + 19) + 16 * v9));
                v10 = *(_DWORD *)(*(_QWORD *)v7 + 160);
                if (v10 == 7 || v10 == 1)
                  **(_QWORD **)(*(_QWORD *)v7 + 256) = *(_QWORD *)(*((_QWORD *)a1 + 22) + 8 * v9);
              }
              v7 += 8;
            }
            while (v7 != v8);
            v6 = *((_QWORD *)a1 + 22);
          }
          *((_QWORD *)a1 + 23) = v6;
        }
      }
    }
  }
  if ((uint64_t **)v4 != a2)
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  if (*((_QWORD *)a1 + 19) != *((_QWORD *)a1 + 20))
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 16))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 424), *((_QWORD *)a1 + 2), a1, v4);
    altitude::GlobeTileComponent::applyHiresTextures(a1);
  }
}

BOOL altitude::GlobeTileComponent::destroyGeometryElement(altitude::GlobeTileComponent *this)
{
  uint64_t v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    __p = 0;
    v11 = 0;
    altitude::GlobeTileComponent::setGeometryElement(this, (uint64_t *)&__p);
    if (*((_QWORD *)this + 19) != *((_QWORD *)this + 20))
    {
      __p = 0;
      v11 = 0;
      v12 = 0;
      altitude::GlobeTileComponent::setHiresTextures(this, (uint64_t **)&__p);
      v3 = (char *)__p;
      if (__p)
      {
        v4 = v11;
        v5 = __p;
        if (v11 != __p)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = __p;
        }
        v11 = v3;
        operator delete(v5);
      }
    }
  }
  return v1 != 0;
}

void altitude::GlobeTileComponent::setGeometryElement(altitude::GlobeTileComponent *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v4 = *((_QWORD *)a1 + 15);
  if (v4)
  {
    if (*((_QWORD *)a1 + 19) != *((_QWORD *)a1 + 20))
    {
      v5 = *((_QWORD *)a1 + 22);
      if (v5 != *((_QWORD *)a1 + 23))
      {
        v6 = *(_QWORD *)(v4 + 48);
        v7 = *(_QWORD *)(v4 + 56);
        if (v6 != v7)
        {
          do
          {
            v8 = *(int *)(*(_QWORD *)v6 + 176);
            if ((_DWORD)v8 != -1)
            {
              altitude::RenderableGroup::dropOwnership(*((_QWORD *)a1 + 15), *(_QWORD *)(*((_QWORD *)a1 + 19) + 16 * v8));
              v9 = *(_DWORD *)(*(_QWORD *)v6 + 160);
              if (v9 == 7 || v9 == 1)
                **(_QWORD **)(*(_QWORD *)v6 + 256) = *(_QWORD *)(*((_QWORD *)a1 + 22) + 8 * v8);
            }
            v6 += 8;
          }
          while (v6 != v7);
          v5 = *((_QWORD *)a1 + 22);
          v4 = *((_QWORD *)a1 + 15);
        }
        *((_QWORD *)a1 + 23) = v5;
      }
    }
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 24))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 424), *((_QWORD *)a1 + 2), a1, v4);
  }
  v11 = *a2;
  v12 = a2[1];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 15) = v11;
  *((_QWORD *)a1 + 16) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v11 = *((_QWORD *)a1 + 15);
  }
  if (v11)
  {
    (*(void (**)(_QWORD, _QWORD, altitude::GlobeTileComponent *))(**(_QWORD **)(*((_QWORD *)a1 + 2) + 424)
                                                                           + 16))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 424), *((_QWORD *)a1 + 2), a1);
    altitude::GlobeTileComponent::applyHiresTextures(a1);
  }
}

void altitude::GlobeTileComponent::applyHiresTextures(altitude::GlobeTileComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    v3 = *((_QWORD *)this + 19);
    v4 = *((_QWORD *)this + 20);
    if (v3 != v4)
    {
      v5 = (v4 - v3) >> 4;
      v7 = *((_QWORD *)this + 22);
      v6 = (char *)this + 176;
      v8 = (*((_QWORD *)this + 23) - v7) >> 3;
      if (v5 <= v8)
      {
        if (v5 < v8)
          *((_QWORD *)this + 23) = v7 + 8 * v5;
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)v6, v5 - v8);
        v1 = *((_QWORD *)this + 15);
      }
      v9 = *(uint64_t **)(v1 + 48);
      v10 = *(uint64_t **)(v1 + 56);
      while (v9 != v10)
      {
        v11 = *(int *)(*v9 + 176);
        if ((_DWORD)v11 != -1)
        {
          altitude::RenderableGroup::takeOwnership(*((_QWORD **)this + 15), (__int128 *)(*((_QWORD *)this + 19) + 16 * v11));
          v12 = *v9;
          v13 = *(_DWORD *)(*v9 + 160);
          if (v13 == 7 || v13 == 1)
          {
            v14 = **(_QWORD **)(v12 + 256);
            if (v14 != *(_QWORD *)(*((_QWORD *)this + 19) + 16 * v11))
            {
              *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v11) = v14;
              **(_QWORD **)(v12 + 256) = *(_QWORD *)(*((_QWORD *)this + 19) + 16 * v11);
            }
          }
        }
        ++v9;
      }
    }
  }
}

altitude::GlobeTileComponent *altitude::GlobeTileComponent::GlobeTileComponent(altitude::GlobeTileComponent *this, altitude::Tile *a2)
{
  char *v3;
  char *v4;
  __int128 v6;
  uint64_t v7;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)this = &off_1E42C5580;
  *((_OWORD *)this + 5) = 0u;
  v3 = (char *)this + 80;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_QWORD *)this + 29) = 0;
  v4 = (char *)this + 232;
  *((_DWORD *)this + 56) = -1;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_DWORD *)((char *)this + 279) = 0;
  *((_QWORD *)this + 36) = 0x3FF0000000000000;
  *((_DWORD *)this + 74) = 0;
  *((_WORD *)this + 150) = 0;
  altitude::Tile::createTileName(&v6, (unsigned int *)a2 + 98, (uint64_t *)(*((_QWORD *)a2 + 36) + 40), (uint64_t *)(*((_QWORD *)a2 + 36) + 136));
  if (*(v4 - 129) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = v6;
  *((_QWORD *)v3 + 2) = v7;
  return this;
}

void altitude::GlobeTileComponent::resetTextures(altitude::GlobeTileComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *((_QWORD *)this + 15);
  if (v1)
  {
    if (*((_QWORD *)this + 19) != *((_QWORD *)this + 20))
    {
      v3 = *((_QWORD *)this + 22);
      if (v3 != *((_QWORD *)this + 23))
      {
        v4 = *(_QWORD *)(v1 + 48);
        v5 = *(_QWORD *)(v1 + 56);
        if (v4 != v5)
        {
          do
          {
            v6 = *(int *)(*(_QWORD *)v4 + 176);
            if ((_DWORD)v6 != -1)
            {
              altitude::RenderableGroup::dropOwnership(*((_QWORD *)this + 15), *(_QWORD *)(*((_QWORD *)this + 19) + 16 * v6));
              v7 = *(_DWORD *)(*(_QWORD *)v4 + 160);
              if (v7 == 7 || v7 == 1)
                **(_QWORD **)(*(_QWORD *)v4 + 256) = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v6);
            }
            v4 += 8;
          }
          while (v4 != v5);
          v3 = *((_QWORD *)this + 22);
        }
        *((_QWORD *)this + 23) = v3;
      }
    }
  }
}

void altitude::GlobeTileComponent::setupGlobeElement(uint64_t a1, altitude::View *a2, uint64_t a3, float a4)
{
  uint64_t v4;
  altitude::FlyoverRenderable **v5;
  altitude::FlyoverRenderable **v6;
  altitude::FlyoverRenderable *v10;
  ggl::PipelineSetup *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  float32x4_t v88;
  float32x4_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103[2];
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112[7];
  float64x2_t v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;

  if (a3)
  {
    v5 = *(altitude::FlyoverRenderable ***)(a3 + 48);
    v6 = *(altitude::FlyoverRenderable ***)(a3 + 56);
    if (v5 != v6)
    {
      while (1)
      {
        v10 = *v5;
        switch(*((_DWORD *)*v5 + 40))
        {
          case 1:
            altitude::FlyoverRenderable::setup(*v5, a2, a1, a4);
            goto LABEL_5;
          case 2:
            altitude::FlyoverNightRenderable::setup(*v5, a2, a1, a4);
            goto LABEL_5;
          case 3:
            altitude::FlyoverBorderRenderable::setup((uint64_t)*v5, (double *)a2, a1, a4);
            goto LABEL_5;
          case 7:
            if (*((_BYTE *)v10 + 312))
            {
              v11 = (ggl::PipelineSetup *)*((_QWORD *)v10 + 24);
              v12 = *((_QWORD *)v10 + 37);
              v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 38);
LABEL_11:
              ggl::Flyover::FlyoverPipelineSetup::setState(v11, v12, v13);
              goto LABEL_12;
            }
            if (a4 < 1.0)
            {
              v11 = (ggl::PipelineSetup *)*((_QWORD *)v10 + 24);
              v12 = *((_QWORD *)v10 + 37);
              if (*((_QWORD *)v11 + 2) != v12)
              {
                v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 38);
                goto LABEL_11;
              }
            }
            if (a4 >= 1.0)
            {
              v11 = (ggl::PipelineSetup *)*((_QWORD *)v10 + 24);
              v12 = *((_QWORD *)v10 + 35);
              if (*((_QWORD *)v11 + 2) != v12)
              {
                v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 36);
                goto LABEL_11;
              }
            }
LABEL_12:
            v14 = *((double *)a2 + 10);
            v15 = *((double *)a2 + 11);
            v16 = *((double *)a2 + 12);
            v18 = *((double *)a2 + 8);
            v17 = *((double *)a2 + 9);
            v20 = *((double *)a2 + 6);
            v19 = *((double *)a2 + 7);
            v21 = -(v18 * v14 - v19 * v15) - (v18 * v14 - v19 * v15);
            v22 = -(v20 * v15 - v18 * v17) - (v20 * v15 - v18 * v17);
            v23 = -(v19 * v17 - v20 * v14) - (v19 * v17 - v20 * v14);
            v24 = -(v23 * v17 - (-(v19 - v21 * v15) - v22 * v16));
            v25 = -(v20 + v21 * v16 + v22 * v15 - v23 * v14);
            v26 = -(v18 + v21 * v14 + v23 * v16 - v22 * v17);
            v27 = v14 * -2.0;
            v28 = -(v14 * (v14 * -2.0));
            v29 = 1.0 - (v28 - v15 * (v15 * -2.0));
            v30 = v17 * -2.0;
            v31 = -(v14 * (v17 * -2.0));
            v32 = v15 * -2.0 * v16;
            v33 = v31 - v32;
            v34 = -(v15 * (v17 * -2.0));
            v35 = v16 * v27 - v15 * (v17 * -2.0);
            v36 = v32 + v31;
            v37 = v17 * -2.0 * v17 + 1.0;
            v38 = v37 - -(v15 * (v15 * -2.0));
            v39 = -(v15 * v27);
            v104.f64[0] = v29;
            v104.f64[1] = v36;
            v106.f64[0] = v33;
            v106.f64[1] = v38;
            v108.f64[0] = v35;
            v108.f64[1] = v39 - v16 * v30;
            v105.f64[0] = v34 - v16 * v27;
            v107 = (float64x2_t)COERCE_UNSIGNED_INT64(v16 * v30 + v39);
            v109.f64[0] = v37 - v28;
            v105.f64[1] = 0.0;
            v109.f64[1] = 0.0;
            v110.f64[0] = v25;
            v110.f64[1] = v24;
            v111.f64[0] = v26;
            v111.f64[1] = 1.0;
            v40 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(_QWORD *)v10 + 24))(v10);
            v135 = 0u;
            v136 = 0u;
            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            v130 = 0u;
            v137 = 0x3FF0000000000000;
            v41 = *((_QWORD *)v10 + 30);
            v129 = *((_QWORD *)v10 + 29);
            *(_QWORD *)&v132 = v41;
            *((_QWORD *)&v134 + 1) = *((_QWORD *)v10 + 31);
            v42 = *(double *)(v40 + 32);
            v43 = *(double *)(v40 + 40);
            v44 = *(double *)(v40 + 48);
            v45 = v42 + v42;
            v46 = (v42 + v42) * v42;
            v47 = (v43 + v43) * v43;
            v49 = *(_QWORD *)(v40 + 16);
            v48 = *(double *)(v40 + 24);
            v50 = v48 + v48;
            v51 = (v48 + v48) * v42;
            v52 = (v43 + v43) * v44;
            v53 = v51 - v52;
            v54 = v43 * (v48 + v48);
            v55 = v44 * v45;
            v56 = v52 + v51;
            v57 = v44 * v45 + v54;
            v58 = 1.0 - (v48 + v48) * v48;
            v59 = v45 * v43;
            v60 = v44 * v50;
            v114 = 1.0 - (v46 + v47);
            v115 = v56;
            v118 = v53;
            v119 = v58 - v47;
            v122 = v57;
            v123 = v59 - v60;
            v116 = v54 - v55;
            v120 = v60 + v59;
            v124 = v58 - v46;
            v117 = 0;
            v121 = 0;
            v125 = 0;
            v126 = *(_OWORD *)v40;
            v127 = v49;
            v128 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>(v103, &v114, (double *)&v129);
            gm::operator*<double,4,4,4>(v112[0].f64, v104.f64, v103);
            if (*((_BYTE *)v10 + 312) || a4 < 1.0)
              *(_QWORD *)(*((_QWORD *)v10 + 23) + 48) = (unint64_t)((v113.f64[0] + *((double *)a2 + 118) * -0.1)
                                                                           * 1.84467441e19
                                                                           / (*((double *)a2 + 118)
                                                                            * 1.6)
                                                                           + 1.84467441e19);
            v61 = v4;
            v62 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v10 + 24) + 64) + 16);
            v63 = v62[1];
            if (v63)
              v64 = (float32x4_t *)v62[9];
            else
              v64 = 0;
            v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[2]), v112[3]);
            *v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[0]), v112[1]);
            v64[1] = v65;
            v66 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[6]), v113);
            v64[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[4]), v112[5]);
            v64[3] = v66;
            v67 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(_QWORD *)v10 + 24))(v10);
            v135 = 0u;
            v136 = 0u;
            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            v130 = 0u;
            v137 = 0x3FF0000000000000;
            v68 = *((_QWORD *)v10 + 30);
            v129 = *((_QWORD *)v10 + 29);
            *(_QWORD *)&v132 = v68;
            *((_QWORD *)&v134 + 1) = *((_QWORD *)v10 + 31);
            v69 = *(double *)(v67 + 32);
            v70 = *(double *)(v67 + 40);
            v71 = *(double *)(v67 + 48);
            v72 = v69 + v69;
            v73 = (v69 + v69) * v69;
            v74 = (v70 + v70) * v70;
            v76 = *(_QWORD *)(v67 + 16);
            v75 = *(double *)(v67 + 24);
            v77 = v75 + v75;
            v78 = (v75 + v75) * v69;
            v79 = (v70 + v70) * v71;
            v80 = v78 - v79;
            v81 = v70 * (v75 + v75);
            v82 = v71 * v72;
            v83 = v79 + v78;
            v84 = v71 * v72 + v81;
            v85 = 1.0 - (v75 + v75) * v75;
            v86 = v72 * v70;
            v87 = v71 * v77;
            v114 = 1.0 - (v73 + v74);
            v115 = v83;
            v118 = v80;
            v119 = v85 - v74;
            v122 = v84;
            v123 = v86 - v87;
            v116 = v81 - v82;
            v120 = v87 + v86;
            v124 = v85 - v73;
            v117 = 0;
            v121 = 0;
            v125 = 0;
            v126 = *(_OWORD *)v67;
            v127 = v76;
            v128 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>(v104.f64, &v114, (double *)&v129);
            v88 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v106), v107);
            v64[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104), v105);
            v64[5] = v88;
            v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v110), v111);
            v64[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v109);
            v64[7] = v89;
            if (v63)
            {
              v90 = v62[8];
              if (v90 <= v63)
                v90 = v63;
              v62[7] = 0;
              v62[8] = v90;
            }
            v91 = *((_QWORD *)v10 + 24);
            v92 = *(_QWORD *)(*(_QWORD *)(v91 + 64) + 48);
            v93 = *(_QWORD *)(v92 + 8);
            **(float **)(v92 + 72) = a4;
            if (*(_QWORD *)(v92 + 64) > v93)
              v93 = *(_QWORD *)(v92 + 64);
            *(_QWORD *)(v92 + 56) = 0;
            *(_QWORD *)(v92 + 64) = v93;
            v94 = (char *)*((_QWORD *)v10 + 32);
            v95 = (char *)*((_QWORD *)v10 + 33);
            v4 = v61;
            if (v94 == v95)
              goto LABEL_34;
            v96 = v95 - v94 - 8;
            v97 = (char *)*((_QWORD *)v10 + 32);
            if (v96 >= 8)
            {
              v98 = (v96 >> 3) + 1;
              v99 = (uint64_t *)(v94 + 8);
              v100 = v98 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v101 = *v99;
                *(_QWORD *)(*(v99 - 1) + 88) = a1;
                *(_QWORD *)(v101 + 88) = a1;
                v99 += 2;
                v100 -= 2;
              }
              while (v100);
              if (v98 == (v98 & 0x3FFFFFFFFFFFFFFELL))
                goto LABEL_34;
              v97 = &v94[8 * (v98 & 0x3FFFFFFFFFFFFFFELL)];
            }
            do
            {
              v102 = *(_QWORD *)v97;
              v97 += 8;
              *(_QWORD *)(v102 + 88) = a1;
            }
            while (v97 != v95);
LABEL_34:
            *(_QWORD *)(*(_QWORD *)(v91 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v94 + 16);
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 24) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 32)
                                                                                                  + 8)
                                                                                      + 16);
LABEL_5:
            if (++v5 == v6)
              return;
            break;
          default:
            goto LABEL_5;
        }
      }
    }
  }
}

void altitude::GlobeTileComponent::setupSurfaceElement(altitude::GlobeTileComponent *this, altitude::View *a2)
{
  _QWORD **v2;
  _QWORD **i;
  _QWORD *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t (*v37)(_QWORD *);
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  _QWORD *v66;
  unint64_t v67;
  float32x2_t *v68;
  double v69[16];
  double v70[16];
  double v71[12];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[128];

  if (this)
  {
    v2 = (_QWORD **)*((_QWORD *)this + 6);
    for (i = (_QWORD **)*((_QWORD *)this + 7); v2 != i; v66[8] = v67)
    {
      v5 = *v2++;
      v6 = *((double *)a2 + 10);
      v7 = *((double *)a2 + 11);
      v8 = *((double *)a2 + 12);
      v10 = *((double *)a2 + 8);
      v9 = *((double *)a2 + 9);
      v11 = v5[24];
      v13 = *((double *)a2 + 6);
      v12 = *((double *)a2 + 7);
      v14 = -(v10 * v6 - v12 * v7) - (v10 * v6 - v12 * v7);
      v15 = -(v13 * v7 - v10 * v9) - (v13 * v7 - v10 * v9);
      v16 = -(v12 * v9 - v13 * v6) - (v12 * v9 - v13 * v6);
      v17 = -(-(v12 - v14 * v7) - v15 * v8);
      v18 = v13 + v14 * v8 + v15 * v7;
      v19 = v10 + v14 * v6;
      v20 = v6 * -2.0;
      v21 = v19 + v16 * v8;
      v22 = -(v6 * (v6 * -2.0));
      v23 = 1.0 - (v22 - v7 * (v7 * -2.0));
      v24 = -(v17 + v16 * v9);
      v25 = -(v6 * (v9 * -2.0));
      v26 = v7 * -2.0 * v8;
      v27 = v25 - v26;
      v28 = -(v7 * (v9 * -2.0));
      v29 = -(v18 - v16 * v6);
      v30 = v8 * v20;
      v31 = v8 * v20 - v7 * (v9 * -2.0);
      v32 = v26 + v25;
      v33 = v9 * -2.0 * v9 + 1.0;
      v34 = v33 - -(v7 * (v7 * -2.0));
      v35 = -(v7 * v20);
      v36 = v8 * (v9 * -2.0);
      v70[0] = v23;
      v70[1] = v32;
      v70[8] = v31;
      v70[9] = v35 - v36;
      v70[4] = v27;
      v70[5] = v34;
      v70[2] = v28 - v30;
      v70[6] = v36 + v35;
      v70[3] = 0.0;
      v70[7] = 0.0;
      v70[11] = 0.0;
      v70[10] = v33 - v22;
      v70[12] = v29;
      v70[13] = v24;
      v70[15] = 1.0;
      v37 = *(uint64_t (**)(_QWORD *))(*v5 + 24);
      v70[14] = -(v21 - v15 * v9);
      v38 = v37(v5);
      memset(&v75[8], 0, 112);
      *(_QWORD *)&v75[120] = 0x3FF0000000000000;
      v39 = v5[30];
      *(_QWORD *)v75 = v5[29];
      *(_QWORD *)&v75[40] = v39;
      *(_QWORD *)&v75[80] = v5[31];
      v40 = *(double *)(v38 + 32);
      v41 = *(double *)(v38 + 40);
      v42 = *(double *)(v38 + 48);
      v43 = v40 + v40;
      v44 = (v40 + v40) * v40;
      v45 = (v41 + v41) * v41;
      v47 = *(_QWORD *)(v38 + 16);
      v46 = *(double *)(v38 + 24);
      v48 = v46 + v46;
      v49 = (v46 + v46) * v40;
      v50 = (v41 + v41) * v42;
      v51 = v49 - v50;
      v52 = v41 * (v46 + v46);
      v53 = v42 * v43;
      v54 = v50 + v49;
      v55 = v42 * v43 + v52;
      v56 = 1.0 - (v46 + v46) * v46;
      v57 = v43 * v41;
      v58 = v42 * v48;
      v71[0] = 1.0 - (v44 + v45);
      v71[1] = v54;
      v71[4] = v51;
      v71[5] = v56 - v45;
      v71[8] = v55;
      v71[9] = v57 - v58;
      v71[2] = v52 - v53;
      v71[6] = v58 + v57;
      v71[10] = v56 - v44;
      v71[3] = 0.0;
      v71[7] = 0.0;
      v71[11] = 0.0;
      v72 = *(_OWORD *)v38;
      v73 = v47;
      v74 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v69, v71, (double *)v75);
      gm::operator*<double,4,4,4>((double *)v75, v70, v69);
      v59 = vcvt_f32_f64(*(float64x2_t *)&v75[16]);
      v60 = vcvt_f32_f64(*(float64x2_t *)&v75[32]);
      v61 = vcvt_f32_f64(*(float64x2_t *)&v75[48]);
      v62 = vcvt_f32_f64(*(float64x2_t *)&v75[64]);
      v63 = vcvt_f32_f64(*(float64x2_t *)&v75[80]);
      v64 = vcvt_f32_f64(*(float64x2_t *)&v75[96]);
      v65 = vcvt_f32_f64(*(float64x2_t *)&v75[112]);
      v66 = **(_QWORD ***)(v11 + 64);
      v67 = v66[1];
      v68 = (float32x2_t *)v66[9];
      *v68 = vcvt_f32_f64(*(float64x2_t *)v75);
      v68[1] = v59;
      v68[2] = v60;
      v68[3] = v61;
      v68[4] = v62;
      v68[5] = v63;
      v68[6] = v64;
      v68[7] = v65;
      if (v66[8] > v67)
        v67 = v66[8];
      v66[7] = 0;
    }
  }
}

void md::RasterOverlayData::~RasterOverlayData(md::RasterOverlayData *this)
{
  CGContext *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (CGContext *)*((_QWORD *)this + 3);
  if (v2)
    CGContextRelease(v2);
  if (*(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::RasterOverlayData::drawContext(md::RasterOverlayData *this)
{
  uint64_t result;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CGColorSpace *v9;
  void *v10;
  CGFloat v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    v3 = (float)(*((float *)this + 9) * (float)*((int *)this + 8));
    v4 = operator new(0x60uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E42DEFB8;
    v5 = ggl::TextureData2D::TextureData2D((uint64_t)(v4 + 3), v3, v3, 1u, 12, 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v4;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    v10 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), 0);
    *((_QWORD *)this + 3) = CGBitmapContextCreate(v10, v3, v3, 8uLL, 4 * v3, v9, 1u);
    CGColorSpaceRelease(v9);
    memset(&v16, 0, sizeof(v16));
    CGContextGetBaseCTM();
    CGContextTranslateCTM(*((CGContextRef *)this + 3), 0.0, (double)v3);
    CGContextScaleCTM(*((CGContextRef *)this + 3), 1.0, -1.0);
    memset(&v14, 0, sizeof(v14));
    CGAffineTransformTranslate(&v15, &v14, 0.0, (double)v3);
    v16 = v15;
    v13 = v15;
    CGAffineTransformScale(&v15, &v13, 1.0, -1.0);
    v16 = v15;
    v12 = v15;
    v11 = *((float *)this + 9);
    CGAffineTransformScale(&v15, &v12, v11, v11);
    v16 = v15;
    CGContextScaleCTM(*((CGContextRef *)this + 3), v11, v11);
    CGContextSetBaseCTM();
    return *((_QWORD *)this + 3);
  }
  return result;
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::CTransitRenderResources::~CTransitRenderResources(md::CTransitRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  md::TransitNodeFeaturePool *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v4 = v2 + 16;
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 8) + 32) = 0;
    if (v3)
      v5 = (_QWORD *)(v3 + 8);
    else
      v5 = 0;
    *v5 = 0;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 43);
  if (v6)
  {
    while (1)
    {
      v14 = (_QWORD *)*v6;
      v15 = (std::__shared_weak_count *)v6[9];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
          break;
      }
      v18 = v6[2];
      if (v18)
        goto LABEL_24;
LABEL_18:
      operator delete(v6);
      v6 = v14;
      if (!v14)
        goto LABEL_7;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = v6[2];
    if (!v18)
      goto LABEL_18;
LABEL_24:
    v6[3] = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v6[5] + 40))(v6[5], v18, v6[4] - v18);
    goto LABEL_18;
  }
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v8)
    goto LABEL_13;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v11)
      goto LABEL_28;
  }
  else
  {
LABEL_13:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v11)
      goto LABEL_28;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_28:

  v19 = (md::TransitNodeFeaturePool *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v19)
  {
    md::TransitNodeFeaturePool::~TransitNodeFeaturePool(v19);
    MEMORY[0x1A1AF4E00]();
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void md::MuninRoadLabelPart::~MuninRoadLabelPart(md::MuninRoadLabelPart *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E4294E48;
  v2 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4294E48;
  v2 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v4 + 24) = "VectorKitLabels";
    *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v4 = &off_1E42B5668;
    *(_QWORD *)(v4 + 8) = "VectorKitLabels";
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_QWORD *)(v4 + 248) = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v4 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v4;
  }
  (*(void (**)(uint64_t, md::MuninRoadLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 672);
}

uint64_t md::MuninRoadLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _DWORD *v14;
  uint64_t v15;

  v6 = **(_QWORD ***)(a1 + 576);
  v15 = 0;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*v6 + 80))(v6, a2, a3, &v15);
  if ((_DWORD)result == 37)
  {
    v8 = (float *)v6[3];
    v9 = v8[20];
    v10 = v8[18];
    if (v9 >= v10 && v8[21] >= v8[19])
    {
      v11 = v9 - v10;
      v12 = v11 * -0.5;
      v13 = v11 * 0.5;
      if (*(_BYTE *)(a1 + 664))
        v13 = 0.0;
      if (*(_BYTE *)(a1 + 664) == 4)
        v13 = v12;
      v15 = LODWORD(v13);
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*v6 + 80))(v6, a2, a3, &v15);
      if ((_DWORD)result == 37)
      {
        v14 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 248))(v6);
        *(_DWORD *)(a1 + 152) = *v14;
        *(_DWORD *)(a1 + 156) = v14[1];
        *(_DWORD *)(a1 + 160) = v14[2];
        *(_DWORD *)(a1 + 164) = v14[3];
        return 37;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

float md::MuninRoadLabelPart::layoutForDisplay(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  float result;
  float *v10;
  float v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v21;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;

  v8 = **(_QWORD ***)(a1 + 576);
  v41 = 0;
  if ((*(unsigned int (**)(_QWORD *, double *, uint64_t, uint64_t, uint64_t *))(*v8 + 120))(v8, a2, a3, a4, &v41) == 37)
  {
    v10 = (float *)v8[3];
    result = v10[80];
    v11 = v10[78];
    if (result >= v11 && v10[81] >= v10[79])
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(double *)(v12 + 32);
      v14 = *(double *)(v12 + 40);
      v15 = *(double *)(v12 + 48);
      v16 = 1.0 / sqrt(v13 * v13 + v14 * v14 + v15 * v15);
      v17 = v16 * v13;
      v18 = v16 * v14;
      _D6 = v16 * v15;
      _Q17 = *(float64x2_t *)(a1 + 640);
      v21 = *(double *)(a1 + 656);
      __asm { FMLA            D5, D6, V17.D[1] }
      v27 = -(_D6 * _Q17.f64[0] - v17 * v21);
      v28 = vmlad_n_f64(-(v17 * _Q17.f64[1]), v18, _Q17.f64[0]);
      if (*(_BYTE *)(a1 + 665) == 2
        || !*(_BYTE *)(a1 + 665)
        && (v29 = a2[73] - v14,
            v30 = a2[72] - v13,
            v31 = a2[74] - v15,
            v32 = 1.0 / sqrt(v29 * v29 + v30 * v30 + v31 * v31),
            v33 = v32 * v31,
            v34 = v32 * v30,
            v35 = v32 * v29,
            -(-(v34 * _D6 - v33 * v17) * _D6 - -(v35 * v17 - v34 * v18) * v18) * _D5
          + -(-(v35 * v17 - v34 * v18) * v17 - -(v33 * v18 - v35 * _D6) * _D6) * v27
          + -(-(v33 * v18 - v35 * _D6) * v18 - -(v34 * _D6 - v33 * v17) * v17) * v28 < 0.0))
      {
        _Q17 = vnegq_f64(_Q17);
        v21 = -v21;
        _D5 = -_D5;
        v27 = -v27;
        v28 = -v28;
      }
      v36 = a2[95] * *(float *)(v12 + 72) * *(float *)(v12 + 68);
      v37 = *(_QWORD *)(a1 + 632);
      *(float64x2_t *)v37 = vmulq_n_f64(_Q17, v36);
      *(double *)(v37 + 16) = v36 * v21;
      *(_QWORD *)(v37 + 24) = 0;
      *(double *)(v37 + 32) = v36 * v17;
      *(double *)(v37 + 40) = v36 * v18;
      *(double *)(v37 + 48) = v36 * _D6;
      *(_QWORD *)(v37 + 56) = 0;
      *(double *)(v37 + 64) = _D5;
      *(double *)(v37 + 72) = v27;
      *(double *)(v37 + 80) = v28;
      *(_QWORD *)(v37 + 88) = 0;
      *(double *)(v37 + 96) = v13;
      *(double *)(v37 + 104) = v14;
      *(double *)(v37 + 112) = v15;
      *(_QWORD *)(v37 + 120) = 0x3FF0000000000000;
      if (*(_BYTE *)(a1 + 664))
      {
        v38 = 0.0;
        if (*(_BYTE *)(a1 + 664) != 4)
          goto LABEL_14;
        v39 = -0.5;
      }
      else
      {
        v39 = 0.5;
      }
      v38 = (float)(result - v11) * v39;
LABEL_14:
      v41 = LODWORD(v38);
      if ((*(unsigned int (**)(_QWORD *, double *, uint64_t, uint64_t, uint64_t *))(*v8 + 120))(v8, a2, a3, a4, &v41) == 37)
      {
        v40 = v8[3];
        *(_DWORD *)(a1 + 392) = *(_DWORD *)(v40 + 392);
        *(_DWORD *)(a1 + 396) = *(_DWORD *)(v40 + 396);
        *(_DWORD *)(a1 + 400) = *(_DWORD *)(v40 + 400);
        result = *(float *)(v40 + 404);
        *(float *)(a1 + 404) = result;
      }
    }
  }
  return result;
}

uint64_t md::MuninRoadLabelPart::modelMatrix(md::MuninRoadLabelPart *this)
{
  return *((_QWORD *)this + 79);
}

uint64_t md::MuninRoadLabelPart::debugCompositeClassName@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  void *__p[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v27[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v6;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v8, v20);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v19 = v3 + 24;
  v27[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v19, (uint64_t)"MuninRoadLabelPart", 18);
  v10 = v19;
  *(_DWORD *)((char *)v20 + *(_QWORD *)(v19 - 24)) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v19 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v20[1] + *(_QWORD *)(v10 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v19, (uint64_t)"\n  padding:", 11);
  std::ostream::operator<<();
  if ((v26 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v12 = v23;
    }
    v13 = (const void **)&v22;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v11 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    v13 = (const void **)v21;
    v12 = v21[2];
  }
  v14 = *v13;
  v11 = v12 - (_QWORD)*v13;
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a1 + 1) = v11;
    *((_QWORD *)a1 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a1 = v17;
    a1 = v17;
    goto LABEL_15;
  }
  a1[23] = v11;
  if (v11)
LABEL_15:
    memmove(a1, v14, v11);
LABEL_16:
  a1[v11] = 0;
  v19 = *v5;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v5[3];
  v20[0] = v9 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v27);
}

void sub_19FBA415C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FBA4184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::MapEngineFrameService::~MapEngineFrameService(md::MapEngineFrameService *this)
{
  md::MapEngineFrameService::~MapEngineFrameService(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t **v27;
  void *v28;
  uint64_t v29;
  ggl::RenderQueue *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;

  *(_QWORD *)this = &off_1E426F218;
  gdc::tf::Executor::~Executor((md::MapEngineFrameService *)((char *)this + 192));
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v36 = 0;
  v37 = 0;
  v35 = &v36;
  v6 = (_QWORD *)*((_QWORD *)this + 7);
  if (v6)
  {
    v7 = 0;
    do
    {
      v8 = &v36;
      v9 = &v36;
      if (v36)
      {
        v10 = v36;
        while (1)
        {
          while (1)
          {
            v9 = (uint64_t **)v10;
            v11 = v10[4];
            if ((unint64_t)v6 >= v11)
              break;
            v10 = *v9;
            v8 = v9;
            if (!*v9)
              goto LABEL_20;
          }
          if (v11 >= (unint64_t)v6)
            break;
          v10 = v9[1];
          if (!v10)
          {
            v8 = v9 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        v12 = (uint64_t *)operator new(0x28uLL);
        v12[4] = (uint64_t)v6;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v9;
        *v8 = v12;
        if (*v35)
        {
          v35 = (uint64_t **)*v35;
          v12 = *v8;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v36, v12);
        v7 = ++v37;
        v6 = (_QWORD *)*((_QWORD *)this + 7);
      }
      v6 = (_QWORD *)*v6;
      *((_QWORD *)this + 7) = v6;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }
  v13 = *((_QWORD *)this + 5);
  v14 = (char *)*((_QWORD *)this + 2);
  v15 = (char *)this + 24;
  v16 = v7 == *((_QWORD *)this + 4) * v13 || v14 == v15;
  if (v16 || v13 == 0)
  {
    if (v14 == v15)
      goto LABEL_59;
    goto LABEL_61;
  }
  v18 = 1;
  do
  {
    if (v18)
    {
      v19 = 0;
      v20 = *((_QWORD *)v14 + 4);
      do
      {
        v21 = (_QWORD *)(v20 + (v19 << 7));
        v22 = v36;
        if (!v36)
          goto LABEL_46;
        v23 = &v36;
        do
        {
          v24 = v22;
          v25 = v23;
          v26 = v22[4];
          v27 = (uint64_t **)(v22 + 1);
          if (v26 >= (unint64_t)v21)
          {
            v27 = (uint64_t **)v24;
            v23 = (uint64_t **)v24;
          }
          v22 = *v27;
        }
        while (v22);
        if (v23 == &v36)
          goto LABEL_46;
        if (v26 < (unint64_t)v21)
          v24 = (uint64_t *)v25;
        if ((unint64_t)v21 < v24[4])
        {
LABEL_46:
          v28 = (void *)v21[12];
          if (v28)
          {
            v21[13] = v28;
            operator delete(v28);
          }
          v29 = v21[11];
          v21[11] = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = (ggl::RenderQueue *)v21[10];
          v21[10] = 0;
          if (v30)
          {
            ggl::RenderQueue::~RenderQueue(v30);
            MEMORY[0x1A1AF4E00]();
          }
        }
        ++v19;
        v18 = *((_QWORD *)this + 5);
      }
      while (v19 < v18);
    }
    v31 = (char *)*((_QWORD *)v14 + 1);
    if (v31)
    {
      do
      {
        v32 = v31;
        v31 = *(char **)v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = (char *)*((_QWORD *)v14 + 2);
        v16 = *(_QWORD *)v32 == (_QWORD)v14;
        v14 = v32;
      }
      while (!v16);
    }
    v14 = v32;
  }
  while (v32 != v15);
  v14 = (char *)*((_QWORD *)this + 2);
  if (v14 != v15)
  {
    do
    {
LABEL_61:
      free(*((void **)v14 + 4));
      v33 = (char *)*((_QWORD *)v14 + 1);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(char **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (char *)*((_QWORD *)v14 + 2);
          v16 = *(_QWORD *)v34 == (_QWORD)v14;
          v14 = v34;
        }
        while (!v16);
      }
      v14 = v34;
    }
    while (v34 != v15);
  }
LABEL_59:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v15;
  *((_QWORD *)this + 7) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v36);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 3));
}

unint64_t md::MapEngineFrameService::requestFrame(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  ggl::RenderQueue *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  char **v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char v95;
  char v96;
  char v97;
  char v98;
  _BYTE v99[32];
  __int128 v100;
  _BYTE v101[40];
  __int128 v102;
  char *v103;
  char *v104;
  uint64_t v105;

  v4 = **(uint64_t ***)(a1 + 8);
  if (v4 != *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8) && *v4 != 0xCFC5133F599B8248)
  {
    v5 = v4 + 5;
    do
    {
      v6 = *v5;
      v5 += 5;
    }
    while (v6 != 0xCFC5133F599B8248);
    v4 = v5 - 5;
  }
  v7 = v4[3];
  v8 = (std::__shared_weak_count *)v4[4];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)v99 = *(_OWORD *)a2;
  *(_OWORD *)&v99[9] = *(_OWORD *)(a2 + 9);
  LODWORD(v100) = *(_DWORD *)(a2 + 4);
  BYTE4(v100) = *(_BYTE *)(a2 + 8);
  *((_QWORD *)&v100 + 1) = 0;
  *(_WORD *)v101 = 0;
  memset(&v101[8], 0, 32);
  *(_QWORD *)&v102 = 0;
  v98 = 0;
  v12 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, &v98);
  v97 = 0;
  v13 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, &v97);
  v96 = 0;
  v14 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, &v96);
  v95 = 0;
  v15 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, &v95);
  *((_QWORD *)&v102 + 1) = 0;
  v103 = 0;
  v104 = 0;
  v16 = operator new(0x40uLL);
  *(_BYTE *)v16 = 3;
  v16[1] = v12;
  *((_BYTE *)v16 + 16) = 1;
  v16[3] = v13;
  *((_BYTE *)v16 + 32) = 0;
  v16[5] = v14;
  *((_BYTE *)v16 + 48) = 2;
  v16[7] = v15;
  *((_QWORD *)&v102 + 1) = v16;
  v103 = (char *)(v16 + 8);
  v104 = (char *)(v16 + 8);
  v105 = 0;
  v17 = *(char **)(a1 + 56);
  if (!v17)
  {
    v18 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 48), 0x160B39uLL);
    v19 = v18;
    v21 = (uint64_t **)(a1 + 24);
    v20 = *(uint64_t **)(a1 + 24);
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          v22 = (uint64_t **)v20;
          v23 = v20[4];
          if ((unint64_t)v18 >= v23)
            break;
          v20 = *v22;
          v21 = v22;
          if (!*v22)
            goto LABEL_20;
        }
        if (v23 >= (unint64_t)v18)
          break;
        v20 = v22[1];
        if (!v20)
        {
          v21 = v22 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v22 = (uint64_t **)(a1 + 24);
LABEL_20:
      v24 = (uint64_t *)operator new(0x28uLL);
      v24[4] = (uint64_t)v19;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = (uint64_t)v22;
      *v21 = v24;
      v25 = **(_QWORD **)(a1 + 16);
      if (v25)
      {
        *(_QWORD *)(a1 + 16) = v25;
        v24 = *v21;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v24);
      ++*(_QWORD *)(a1 + 32);
    }
    v17 = *(char **)(a1 + 56);
    v26 = (*(_QWORD *)(a1 + 40) << 7) - 128;
    if (v26 >= 0)
    {
      v27 = &v19[v26];
      v28 = &v19[v26];
      do
      {
        *(_QWORD *)v28 = v17;
        v28 -= 128;
        v17 = v27;
        v27 = v28;
      }
      while (v28 >= v19);
      v17 = v28 + 128;
    }
    *(_QWORD *)(a1 + 56) = v17;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v17;
  *(_OWORD *)v17 = *(_OWORD *)v99;
  v29 = *(_OWORD *)&v99[16];
  v30 = v100;
  v31 = *(_OWORD *)&v101[16];
  *((_OWORD *)v17 + 3) = *(_OWORD *)v101;
  *((_OWORD *)v17 + 4) = v31;
  *((_OWORD *)v17 + 1) = v29;
  *((_OWORD *)v17 + 2) = v30;
  v32 = *(_QWORD *)&v101[32];
  *(_QWORD *)&v101[32] = 0;
  *((_QWORD *)v17 + 10) = v32;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 14) = 0;
  *((_QWORD *)v17 + 12) = 0;
  v33 = v102;
  *(_QWORD *)&v102 = 0;
  *(_OWORD *)(v17 + 88) = v33;
  v34 = v102;
  *((_QWORD *)v17 + 13) = v103;
  *((_QWORD *)v17 + 14) = v104;
  *((_QWORD *)&v102 + 1) = 0;
  v103 = 0;
  v104 = 0;
  *((_QWORD *)v17 + 15) = v105;
  *(_QWORD *)&v102 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(ggl::RenderQueue **)&v101[32];
  *(_QWORD *)&v101[32] = 0;
  if (v35)
  {
    ggl::RenderQueue::~RenderQueue(v35);
    MEMORY[0x1A1AF4E00]();
  }
  v36 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 64) == v36)
  {
    v39 = ((*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3) | 0x100000000;
    v41 = *(uint64_t **)(a1 + 96);
    v40 = *(_QWORD *)(a1 + 104);
    if ((unint64_t)v41 >= v40)
    {
      v43 = *(uint64_t **)(a1 + 88);
      v44 = v41 - v43;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61)
        goto LABEL_103;
      v46 = v40 - (_QWORD)v43;
      if (v46 >> 2 > v45)
        v45 = v46 >> 2;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 61)
          goto LABEL_104;
        v48 = operator new(8 * v47);
      }
      else
      {
        v48 = 0;
      }
      v49 = (uint64_t *)&v48[8 * v44];
      v50 = &v48[8 * v47];
      *v49 = v39;
      v42 = v49 + 1;
      if (v41 == v43)
      {
        v43 = v41;
      }
      else
      {
        v51 = (char *)v41 - (char *)v43 - 8;
        if (v51 < 0x58)
          goto LABEL_107;
        if ((unint64_t)((char *)v43 - v48) < 0x20)
          goto LABEL_107;
        v52 = (v51 >> 3) + 1;
        v53 = &v48[8 * v44 - 16];
        v54 = v41 - 2;
        v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          *v53 = v56;
          v53 -= 2;
          v54 -= 4;
          v55 -= 4;
        }
        while (v55);
        v49 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
        v41 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_107:
          do
          {
            v57 = *--v41;
            *--v49 = v57;
          }
          while (v41 != v43);
          v43 = *(uint64_t **)(a1 + 88);
        }
      }
      *(_QWORD *)(a1 + 88) = v49;
      *(_QWORD *)(a1 + 96) = v42;
      *(_QWORD *)(a1 + 104) = v50;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *v41 = v39;
      v42 = v41 + 1;
    }
    *(_QWORD *)(a1 + 96) = v42;
    v38 = *(v42 - 1);
  }
  else
  {
    v37 = *(_QWORD *)(v36 - 8);
    *(_QWORD *)(a1 + 72) = v36 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 8 * v37) = (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3;
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 8 * v37 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 88)
                                                                                          + 8 * v37
                                                                                          + 4) << 32)
                                                     + 0x100000000) >> 32;
    v38 = v37 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 88) + 8 * v37 + 4) << 32);
  }
  v59 = *(char **)(a1 + 120);
  v58 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v59 >= v58)
  {
    v61 = *(char **)(a1 + 112);
    v62 = (v59 - v61) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      goto LABEL_103;
    v64 = v58 - (_QWORD)v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 61)
        goto LABEL_104;
      v66 = operator new(8 * v65);
    }
    else
    {
      v66 = 0;
    }
    v67 = (char **)&v66[8 * v62];
    v68 = &v66[8 * v65];
    *v67 = v17;
    v60 = v67 + 1;
    if (v59 == v61)
    {
      v61 = v59;
    }
    else
    {
      v69 = v59 - v61 - 8;
      if (v69 < 0x58)
        goto LABEL_108;
      if ((unint64_t)(v61 - v66) < 0x20)
        goto LABEL_108;
      v70 = (v69 >> 3) + 1;
      v71 = &v66[8 * v62 - 16];
      v72 = v59 - 16;
      v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v74 = *(_OWORD *)v72;
        *(v71 - 1) = *((_OWORD *)v72 - 1);
        *v71 = v74;
        v71 -= 2;
        v72 -= 32;
        v73 -= 4;
      }
      while (v73);
      v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
      v59 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_108:
        do
        {
          v75 = (char *)*((_QWORD *)v59 - 1);
          v59 -= 8;
          *--v67 = v75;
        }
        while (v59 != v61);
        v61 = *(char **)(a1 + 112);
      }
    }
    *(_QWORD *)(a1 + 112) = v67;
    *(_QWORD *)(a1 + 120) = v60;
    *(_QWORD *)(a1 + 128) = v68;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v59 = v17;
    v60 = v59 + 8;
  }
  *(_QWORD *)(a1 + 120) = v60;
  v77 = *(char **)(a1 + 144);
  v76 = *(_QWORD *)(a1 + 152);
  if ((unint64_t)v77 < v76)
  {
    *(_QWORD *)v77 = v38;
    v78 = v77 + 8;
    goto LABEL_102;
  }
  v79 = *(char **)(a1 + 136);
  v80 = (v77 - v79) >> 3;
  v81 = v80 + 1;
  if ((unint64_t)(v80 + 1) >> 61)
LABEL_103:
    abort();
  v82 = v76 - (_QWORD)v79;
  if (v82 >> 2 > v81)
    v81 = v82 >> 2;
  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
    v83 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v83 = v81;
  if (v83)
  {
    if (!(v83 >> 61))
    {
      v84 = operator new(8 * v83);
      goto LABEL_93;
    }
LABEL_104:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v84 = 0;
LABEL_93:
  v85 = &v84[8 * v80];
  v86 = &v84[8 * v83];
  *v85 = v38;
  v78 = v85 + 1;
  if (v77 != v79)
  {
    v87 = v77 - v79 - 8;
    if (v87 < 0x58)
      goto LABEL_109;
    if ((unint64_t)(v79 - v84) < 0x20)
      goto LABEL_109;
    v88 = (v87 >> 3) + 1;
    v89 = &v84[8 * v80 - 16];
    v90 = v77 - 16;
    v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v92 = *(_OWORD *)v90;
      *(v89 - 1) = *((_OWORD *)v90 - 1);
      *v89 = v92;
      v89 -= 2;
      v90 -= 32;
      v91 -= 4;
    }
    while (v91);
    v85 -= v88 & 0x3FFFFFFFFFFFFFFCLL;
    v77 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
    if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        v93 = *((_QWORD *)v77 - 1);
        v77 -= 8;
        *--v85 = v93;
      }
      while (v77 != v79);
    }
  }
  *(_QWORD *)(a1 + 136) = v85;
  *(_QWORD *)(a1 + 144) = v78;
  *(_QWORD *)(a1 + 152) = v86;
  if (v79)
    operator delete(v79);
LABEL_102:
  *(_QWORD *)(a1 + 144) = v78;
  return v38;
}

void sub_19FBA4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  md::MapEngineFrameService::Data::~Data((md::MapEngineFrameService::Data *)va);
  _Unwind_Resume(a1);
}

void sub_19FBA4BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  md::MapEngineFrameService::Data::{unnamed type#2}::~Data(v1 + 80);
  _Unwind_Resume(a1);
}

void md::MapEngineFrameService::dispatchAsync(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  id v24;
  _QWORD v25[3];
  _QWORD v26[6];
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1[11];
  if (a2 >= (unint64_t)((a1[12] - v3) >> 3))
    return;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4 || HIDWORD(a2) != HIDWORD(v4))
    return;
  v6 = a1[14] + 8 * v4;
  if (v6 == a1[15])
    return;
  ++*(_QWORD *)(*(_QWORD *)v6 + 120);
  v7 = a1[21];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN2md21MapEngineFrameService13dispatchAsyncEN3geo6handleIvEENSt3__18functionIFvvEEE_block_invoke;
  v26[3] = &__block_descriptor_80_ea8_48c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  v26[4] = a1;
  v26[5] = a2;
  v8 = v27;
  v9 = (_QWORD *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v27);
    }
    else
    {
      v28 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    v28 = 0;
  }
  v10 = v26;
  v25[0] = &off_1E42B5610;
  v11 = (void *)objc_msgSend(v10, "copy");
  v25[1] = v11;

  geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(&v23, (uint64_t)v25);
  v30 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_1E42D5E88;
  v12[1] = &off_1E42B5610;
  v12[2] = MEMORY[0x1A1AF5730](v24);
  v13 = v24;
  v24 = 0;

  v30 = v12;
  geo::TaskQueue::barrierAsync(&v21, v7, v29);
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
    goto LABEL_17;
  }
  if (v30)
  {
    v15 = 5;
LABEL_17:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v23 = &off_1E42B5610;

  v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (_BYTE *)v10[9];
  if (v19 == v27)
  {
    v20 = 4;
    goto LABEL_27;
  }
  if (v19)
  {
    v20 = 5;
    v8 = (_QWORD *)v10[9];
LABEL_27:
    (*(void (**)(_QWORD *))(*v8 + 8 * v20))(v8);
  }
}

void sub_19FBA4E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v19 = *(_QWORD **)(v17 - 80);
  if (v19 == v16)
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 104);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:

  v21 = (_QWORD *)v14[9];
  if (v21 == v13)
  {
    v22 = 4;
  }
  else
  {
    if (!v21)
      _Unwind_Resume(a1);
    v22 = 5;
    v13 = (_QWORD *)v14[9];
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v22))(v13);
  _Unwind_Resume(a1);
}

uint64_t md::MapEngineFrameService::dispatch(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t prime;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  char *v69;
  char *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *__p[2];
  void *v79[2];
  float v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char *v85;
  uint64_t v86;

  v3 = *(_QWORD *)(result + 88);
  if (a2 >= (unint64_t)((*(_QWORD *)(result + 96) - v3) >> 3))
    return result;
  v5 = *(_QWORD *)(v3 + 8 * a2);
  if (!v5 || HIDWORD(a2) != HIDWORD(v5))
    return result;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(result + 112) + 8 * v5;
  if (v8 == *(_QWORD *)(result + 120))
    return result;
  ++*(_QWORD *)(*(_QWORD *)v8 + 120);
  v10 = gdc::Registry::create(*(gdc::Registry **)(result + 176));
  v11 = (uint64_t *)gdc::Registry::storage<md::ita::FrameHandle>(v7[22]);
  v77 = v10;
  v12 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v11 + 4, (uint64_t)&v77);
  if ((v13 & 1) != 0)
  {
    v19 = (char *)v11[11];
    v18 = v11[12];
    if ((unint64_t)v19 >= v18)
    {
      v21 = (char *)v11[10];
      v22 = (v19 - v21) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_123;
      v24 = v18 - (_QWORD)v21;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v26 = (char *)operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *(_QWORD *)v27 = a2;
      v20 = v27 + 8;
      if (v19 != v21)
      {
        v29 = v19 - v21 - 8;
        if (v29 < 0x58)
          goto LABEL_127;
        if ((unint64_t)(v21 - v26) < 0x20)
          goto LABEL_127;
        v30 = (v29 >> 3) + 1;
        v31 = &v26[8 * v22 - 16];
        v32 = (__int128 *)(v19 - 16);
        v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 32;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v27 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v19 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_127:
          do
          {
            v35 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v27 - 1) = v35;
            v27 -= 8;
          }
          while (v19 != v21);
        }
        v19 = (char *)v11[10];
      }
      v11[10] = (uint64_t)v27;
      v11[11] = (uint64_t)v20;
      v11[12] = (uint64_t)v28;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v19 = a2;
      v20 = v19 + 8;
    }
    v11[11] = (uint64_t)v20;
    v15 = (void *)v11[31];
  }
  else
  {
    v14 = (_QWORD *)((char *)v12 + v11[10] - v11[7]);
    *v14 = a2;
    v15 = (void *)v11[31];
    if (v14 != (_QWORD *)v11[11])
    {
      v16 = (_QWORD *)v11[16];
      if (v16)
      {
        while (1)
        {
          v81 = &v77;
          v82 = 1;
          __p[0] = v15;
          v17 = v16[6];
          if (!v17)
            break;
          (*(void (**)(uint64_t, void **, unint64_t **))(*(_QWORD *)v17 + 48))(v17, __p, &v81);
          v16 = (_QWORD *)*v16;
          if (!v16)
            goto LABEL_40;
        }
LABEL_122:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_123:
        abort();
      }
      goto LABEL_40;
    }
  }
  for (i = (_QWORD *)v11[22]; i; i = (_QWORD *)*i)
  {
    v81 = &v77;
    v82 = 1;
    __p[0] = v15;
    v37 = i[6];
    if (!v37)
      goto LABEL_122;
    (*(void (**)(uint64_t, void **, unint64_t **))(*(_QWORD *)v37 + 48))(v37, __p, &v81);
  }
LABEL_40:
  v38 = v7[22];
  v39 = v7[23];
  v81 = (unint64_t *)v7[1];
  v82 = v38;
  v83 = v39;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v79 = 0u;
  v80 = 1.0;
  v40 = (_QWORD *)operator new();
  v40[2] = "ecs2::Runtime]";
  v40[3] = 13;
  v40[4] = &v81;
  *v40 = &off_1E4270760;
  v40[1] = 0xD60F4F992ECB1F94;
  v41 = (unint64_t)__p[1];
  v76 = v10;
  if (__p[1])
  {
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
    {
      v10 = 0xD60F4F992ECB1F94;
      if (__p[1] <= (void *)0xD60F4F992ECB1F94)
        v10 = 0xD60F4F992ECB1F94 % (unint64_t)__p[1];
    }
    else
    {
      v10 = ((unint64_t)__p[1] - 1) & 0xD60F4F992ECB1F94;
    }
    v43 = (_QWORD *)*((_QWORD *)__p[0] + v10);
    if (v43)
    {
      v44 = (_QWORD *)*v43;
      if (v44)
      {
        if (v42.u32[0] < 2uLL)
        {
          while (1)
          {
            v46 = v44[1];
            if (v46 == 0xD60F4F992ECB1F94)
            {
              if (v44[2] == 0xD60F4F992ECB1F94)
                goto LABEL_99;
            }
            else if ((v46 & ((uint64_t)__p[1] - 1)) != v10)
            {
              goto LABEL_61;
            }
            v44 = (_QWORD *)*v44;
            if (!v44)
              goto LABEL_61;
          }
        }
        do
        {
          v45 = v44[1];
          if (v45 == 0xD60F4F992ECB1F94)
          {
            if (v44[2] == 0xD60F4F992ECB1F94)
              goto LABEL_99;
          }
          else
          {
            if ((void *)v45 >= __p[1])
              v45 %= (unint64_t)__p[1];
            if (v45 != v10)
              break;
          }
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
    }
  }
LABEL_61:
  v47 = (char *)operator new(0x30uLL);
  *(_QWORD *)v47 = 0;
  *(int64x2_t *)(v47 + 8) = vdupq_n_s64(0xD60F4F992ECB1F94);
  *((_QWORD *)v47 + 3) = "ecs2::Runtime]";
  *((_QWORD *)v47 + 4) = 13;
  *((_QWORD *)v47 + 5) = v40;
  v48 = (float)((unint64_t)v79[1] + 1);
  if (!v41 || (float)(v80 * (float)v41) < v48)
  {
    v49 = 1;
    if (v41 >= 3)
      v49 = (v41 & (v41 - 1)) != 0;
    v50 = v49 | (2 * v41);
    v51 = vcvtps_u32_f32(v48 / v80);
    if (v50 <= v51)
      prime = v51;
    else
      prime = v50;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v41 = (unint64_t)__p[1];
    }
    if (prime > v41)
      goto LABEL_83;
    if (prime < v41)
    {
      v53 = vcvtps_u32_f32((float)(unint64_t)v79[1] / v80);
      if (v41 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v41), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (prime <= v53)
        prime = v53;
      if (prime < v41)
LABEL_83:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)__p, prime);
    }
    v41 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
    {
      if (__p[1] <= (void *)0xD60F4F992ECB1F94)
        v10 = 0xD60F4F992ECB1F94 % (unint64_t)__p[1];
      else
        v10 = 0xD60F4F992ECB1F94;
    }
    else
    {
      v10 = ((unint64_t)__p[1] - 1) & 0xD60F4F992ECB1F94;
    }
  }
  v56 = __p[0];
  v57 = (_QWORD *)*((_QWORD *)__p[0] + v10);
  if (v57)
  {
    *(_QWORD *)v47 = *v57;
  }
  else
  {
    *(void **)v47 = v79[0];
    v79[0] = v47;
    v56[v10] = v79;
    if (!*(_QWORD *)v47)
      goto LABEL_98;
    v58 = *(_QWORD *)(*(_QWORD *)v47 + 8);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v58 >= v41)
        v58 %= v41;
    }
    else
    {
      v58 &= v41 - 1;
    }
    v57 = (char *)__p[0] + 8 * v58;
  }
  *v57 = v47;
LABEL_98:
  ++v79[1];
LABEL_99:
  v59 = *(_QWORD *)(v39 + 208);
  v7[42] = __p;
  v60 = (uint64_t *)v7[36];
  v61 = (uint64_t *)v7[37];
  if (v60 == v61)
  {
    gdc::tf::Executor::consumeGraph((uint64_t)(v7 + 24), (uint64_t **)(v59 + 96));
    v65 = v7 + 39;
    v66 = (void *)v7[36];
    v62 = v76;
    if (v66)
    {
      v7[37] = v66;
      operator delete(v66);
    }
    v64 = 0;
    *((_OWORD *)v7 + 18) = *v65;
    v7[38] = v7[41];
    v7[40] = 0;
    v7[41] = 0;
    *(_QWORD *)v65 = 0;
  }
  else
  {
    v62 = v76;
    do
    {
      v63 = *v60++;
      gdc::tf::Executor::invokeNode(v7 + 24, v63);
    }
    while (v60 != v61);
    v64 = v7[39];
  }
  v7[40] = v64;
  v7[42] = 0;
  v67 = v79[0];
  if (v79[0])
  {
    do
    {
      v72 = (_QWORD *)*v67;
      v73 = v67[5];
      v67[5] = 0;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      operator delete(v67);
      v67 = v72;
    }
    while (v72);
  }
  v68 = __p[0];
  __p[0] = 0;
  if (v68)
    operator delete(v68);
  v69 = (char *)v84;
  if (v84)
  {
    v70 = v85;
    v71 = v84;
    if (v85 != v84)
    {
      do
      {
        v74 = v70 - 40;
        v75 = *((unsigned int *)v70 - 2);
        if ((_DWORD)v75 != -1)
          ((void (*)(void **, char *))off_1E42FB340[v75])(__p, v70 - 40);
        *((_DWORD *)v70 - 2) = -1;
        v70 -= 40;
      }
      while (v74 != v69);
      v71 = v84;
    }
    v85 = v69;
    operator delete(v71);
  }
  gdc::Registry::destroy(v7[22], v62);
  result = *(_QWORD *)(a3 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

unint64_t md::MapEngineFrameService::prepareForRender(std::__shared_weak_count *a1, uint64_t a2)
{
  uint64_t shared_weak_owners;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t shared_owners;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  __int128 v49;
  __int128 v50;

  shared_weak_owners = a1[3].__shared_weak_owners_;
  if (a2 >= (unint64_t)(((uint64_t)a1[4].__vftable - shared_weak_owners) >> 3))
    goto LABEL_36;
  v3 = *(_QWORD *)(shared_weak_owners + 8 * a2);
  if (!v3)
    goto LABEL_37;
  if (HIDWORD(a2) != HIDWORD(v3))
    goto LABEL_36;
  v6 = a1[4].__shared_weak_owners_ + 8 * v3;
  if ((std::__shared_weak_count_vtbl *)v6 == a1[5].__vftable)
    goto LABEL_36;
  v7 = *(_QWORD *)v6;
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(*(_QWORD *)v6 + 120) + 1;
  v8 = *(uint64_t **)(a1->__shared_owners_ + 8);
  v9 = *(uint64_t **)a1->__shared_owners_;
  if (*(_BYTE *)v7)
  {
    if (v9 != v8 && *v9 != 0xB05F868A6300FD6ELL)
    {
      v10 = v9 + 5;
      do
      {
        v11 = *v10;
        v10 += 5;
      }
      while (v11 != 0xB05F868A6300FD6ELL);
      v9 = v10 - 5;
    }
    v12 = v9[3];
    v13 = (std::__shared_weak_count *)v9[4];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    if (v17)
      *(_QWORD *)(v7 + 56) = v17;
    goto LABEL_62;
  }
  if (v9 != v8 && *v9 != 0xC5B557B9C9754C35)
  {
    v18 = v9 + 5;
    do
    {
      v19 = *v18;
      v18 += 5;
    }
    while (v19 != 0xC5B557B9C9754C35);
    v9 = v18 - 5;
  }
  v21 = v9[3];
  v20 = (std::__shared_weak_count *)v9[4];
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = (**(uint64_t (***)(uint64_t))v21)(v21);
  if (!v25)
  {
LABEL_36:
    v3 = 0;
LABEL_37:
    v31 = 0;
    return v31 | v3;
  }
  v26 = v25;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 8))(v21, v25);
  shared_owners = a1->__shared_owners_;
  v29 = *(_QWORD **)shared_owners;
  v30 = *(_QWORD **)(shared_owners + 8);
  if (v29 != v30)
  {
    while (*v29 != 0xB05F868A6300FD6ELL)
    {
      v29 += 5;
      if (v29 == v30)
        goto LABEL_46;
    }
  }
  if (v29 == v30)
  {
LABEL_46:
    v33 = 0;
  }
  else
  {
    v33 = v29[3];
    v34 = (std::__shared_weak_count *)v29[4];
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      do
        v37 = __ldaxr(v35);
      while (__stlxr(v37 - 1, v35));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(&v49, v27, 0);
  v50 = v49;
  v49 = 0uLL;
  v38 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 16))(v33, &v50);
  v40 = v39;
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v38)
  {
    *(_QWORD *)(v7 + 40) = v26;
    *(_QWORD *)(v7 + 56) = v38;
    *(_QWORD *)(v7 + 72) = v40;
    goto LABEL_60;
  }
  if (*(_QWORD *)(v7 + 56))
  {
LABEL_60:
    if (*(_BYTE *)(v7 + 24))
      md::MapEngineFrameService::makeDrawableReady(a1, a2);
  }
LABEL_62:
  v47 = *(_QWORD *)(v7 + 56);
  v31 = v47 & 0xFFFFFFFFFFFFFF00;
  v48 = v47 == 0;
  if (v47)
    v3 = *(_QWORD *)(v7 + 56);
  else
    v3 = 0;
  if (v48)
    v31 = 0;
  return v31 | v3;
}

void sub_19FBA598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MapEngineFrameService::prepareForEncode(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t shared_weak_owners;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t shared_owners;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  ggl::Texture *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  ggl::RenderQueue *v30;
  ggl::CommandBuffer *v31;
  uint64_t v32;
  uint64_t v33;
  ggl::RenderQueue *v34;
  uint64_t v35;
  __int16 v36[20];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  shared_weak_owners = a1[3].__shared_weak_owners_;
  if (a2 >= (unint64_t)(((uint64_t)a1[4].__vftable - shared_weak_owners) >> 3)
    || ((v6 = *(_QWORD *)(shared_weak_owners + 8 * a2)) != 0
      ? (v7 = HIDWORD(a2) == HIDWORD(v6))
      : (v7 = 0),
        !v7
     || (v10 = a1[4].__shared_weak_owners_ + 8 * v6,
         (std::__shared_weak_count_vtbl *)v10 == a1[5].__vftable)))
  {
    LOBYTE(v8) = 0;
LABEL_7:
    *a3 = 0;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)v10;
  *(_QWORD *)(v11 + 120) = *(_QWORD *)(*(_QWORD *)v10 + 120) + 1;
  v8 = *(_QWORD *)(v11 + 56);
  if (!v8)
    goto LABEL_7;
  shared_owners = a1->__shared_owners_;
  v13 = *(_QWORD **)shared_owners;
  v14 = *(_QWORD **)(shared_owners + 8);
  if (v13 != v14)
  {
    while (*v13 != 0x6AA8CA9CFB198BBFLL)
    {
      v13 += 5;
      if (v13 == v14)
        goto LABEL_22;
    }
  }
  if (v13 == v14)
  {
LABEL_22:
    v15 = 0;
  }
  else
  {
    v15 = v13[3];
    v16 = (std::__shared_weak_count *)v13[4];
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *(_QWORD *)(v11 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 24))(v15, *(double *)(v11 + 16));
  if (*(_BYTE *)v11)
  {
    v20 = *(_QWORD *)(v11 + 56);
    v21 = *(ggl::Texture **)(v20 + 184);
    if (!v21)
      v21 = *(ggl::Texture **)(v20 + 88);
    ggl::RenderQueue::addTextureToSynchronize(*(_QWORD *)(v11 + 64), v21);
    v22 = a1->__shared_owners_;
    v23 = *(_QWORD **)v22;
    v24 = *(_QWORD **)(v22 + 8);
    if (v23 != v24)
    {
      while (*v23 != 0x15CDDE628588B5E5)
      {
        v23 += 5;
        if (v23 == v24)
          goto LABEL_47;
      }
    }
    if (v23 != v24)
    {
      v25 = v23[3];
      v26 = (std::__shared_weak_count *)v23[4];
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v25)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 16))(v25, *(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 56));
    }
  }
  else
  {
    if (*(_QWORD *)(v11 + 72))
    {
      v30 = (ggl::RenderQueue *)operator new();
      ggl::RenderQueue::RenderQueue(v30, 1);
      v31 = (ggl::CommandBuffer *)operator new();
      ggl::CommandBuffer::CommandBuffer(v31, 0, "");
      ggl::RenderQueue::setBufferForLayer((uint64_t)v30, 0, v31);
      *((_QWORD *)v31 + 22) = *((_QWORD *)v31 + 21);
      v32 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 88);
      v33 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 88);
      v36[0] = 260;
      v37 = 0;
      v38 = 0;
      v39 = v32;
      v40 = v33;
      ggl::CommandBuffer::pushCopyItem((uint64_t)v31, (uint64_t)v36);
      ggl::RenderQueue::attachPass(*(ggl::RenderQueue **)(v11 + 64), *(ggl::RenderTarget **)(v11 + 72), v30);
      v34 = *(ggl::RenderQueue **)(v11 + 80);
      *(_QWORD *)(v11 + 80) = v30;
      if (v34)
      {
        ggl::RenderQueue::~RenderQueue(v34);
        MEMORY[0x1A1AF4E00]();
      }
      v35 = *(_QWORD *)(v11 + 88);
      *(_QWORD *)(v11 + 88) = v31;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    if (*(_QWORD *)(v11 + 40) && !*(_BYTE *)(v11 + 24))
      md::MapEngineFrameService::makeDrawableReady(a1, a2);
  }
LABEL_47:
  *(_OWORD *)a3 = *(_OWORD *)(v11 + 56);
  LOBYTE(v8) = 1;
LABEL_8:
  a3[16] = v8;
}

_QWORD *md::MapEngineFrameService::addTask(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 v22[8];
  uint64_t v23;

  v4 = result[11];
  if (a2 < (unint64_t)((result[12] - v4) >> 3))
  {
    v5 = *(_QWORD *)(v4 + 8 * a2);
    if (v5 && HIDWORD(a2) == HIDWORD(v5))
    {
      v7 = result[14] + 8 * v5;
      if (v7 != result[15])
      {
        v10 = *(_QWORD *)v7;
        ++*(_QWORD *)(*(_QWORD *)v7 + 120);
        v11 = result[1];
        v12 = *(_QWORD **)v11;
        v13 = *(_QWORD **)(v11 + 8);
        if (v12 != v13)
        {
          while (*v12 != 0xCFC5133F599B8248)
          {
            v12 += 5;
            if (v12 == v13)
              goto LABEL_19;
          }
        }
        if (v12 == v13)
        {
LABEL_19:
          v14 = 0;
        }
        else
        {
          v14 = v12[3];
          v15 = (std::__shared_weak_count *)v12[4];
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
            do
              v18 = __ldaxr(p_shared_owners);
            while (__stlxr(v18 - 1, p_shared_owners));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v19 = *(char **)(v10 + 96);
        v20 = *(char **)(v10 + 104);
        v21 = v10 + 96;
        if (v19 != v20)
        {
          while (*v19 != a3)
          {
            v19 += 16;
            if (v19 == v20)
              goto LABEL_25;
          }
        }
        if (v19 == v20)
        {
LABEL_25:
          v22[0] = a3;
          v23 = 0;
          v19 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v21, v22);
        }
        return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 48))(v14, *((_QWORD *)v19 + 1), a4);
      }
    }
  }
  return result;
}

uint64_t md::MapEngineFrameService::callbackGraphHandle(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  char *v7;
  char *v8;
  unsigned __int8 v10[8];
  uint64_t v11;

  v3 = a1[11];
  if (a2 >= (unint64_t)((a1[12] - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
    return 0;
  if (HIDWORD(a2) != HIDWORD(v4))
    return 0;
  v5 = (_QWORD *)(a1[14] + 8 * v4);
  if (v5 == (_QWORD *)a1[15])
    return 0;
  v6 = (char **)(*v5 + 96);
  v7 = *v6;
  ++v6[3];
  v8 = v6[1];
  if (v7 != v8)
  {
    while (*v7 != a3)
    {
      v7 += 16;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10[0] = a3;
    v11 = 0;
    v7 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert((uint64_t)v6, v10);
  }
  return *((_QWORD *)v7 + 1);
}

void md::MapEngineFrameService::cleanup(md::MapEngineFrameService *this)
{
  uint64_t v1;
  uint64_t i;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  ggl::RenderQueue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v1 = *((_QWORD *)this + 14);
  for (i = *((_QWORD *)this + 15); v1 != i; v1 = *((_QWORD *)this + 14) + 8 * v34)
  {
    while (1)
    {
      v4 = *(_QWORD **)v1;
      if (!*(_QWORD *)(*(_QWORD *)v1 + 120))
        break;
      v4[15] = 0;
      v1 += 8;
      if (v1 == i)
        return;
    }
    if (*((_QWORD *)this + 4))
    {
      v5 = (void *)v4[12];
      if (v5)
      {
        v4[13] = v5;
        operator delete(v5);
      }
      v6 = v4[11];
      v4[11] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = (ggl::RenderQueue *)v4[10];
      v4[10] = 0;
      if (v7)
      {
        ggl::RenderQueue::~RenderQueue(v7);
        MEMORY[0x1A1AF4E00]();
      }
      *v4 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v4;
      i = *((_QWORD *)this + 15);
    }
    if (i == v1)
      break;
    v8 = *((_QWORD *)this + 14);
    v9 = v1 - v8;
    v10 = *((_QWORD *)this + 17);
    v11 = *(_QWORD *)(v10 + v1 - v8);
    v12 = *((_QWORD *)this + 11);
    if (v11 >= (*((_QWORD *)this + 12) - v12) >> 3)
      break;
    v13 = *(_QWORD *)(v12 + 8 * v11);
    v15 = v13 == 0;
    v14 = HIDWORD(v13);
    v15 = !v15 && HIDWORD(*(_QWORD *)(v12 + 8 * *(_QWORD *)(v10 + v1 - v8))) == (_DWORD)v14;
    if (!v15)
      break;
    v17 = (unint64_t *)*((_QWORD *)this + 9);
    v16 = *((_QWORD *)this + 10);
    if ((unint64_t)v17 >= v16)
    {
      v19 = (char *)*((_QWORD *)this + 8);
      v20 = ((char *)v17 - v19) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        abort();
      v22 = v16 - (_QWORD)v19;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      v43 = v21;
      v44 = v9;
      if (v21)
      {
        if (v21 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = (char *)operator new(8 * v21);
      }
      else
      {
        v23 = 0;
      }
      v24 = (unint64_t *)&v23[8 * v20];
      *v24 = v11;
      v18 = v24 + 1;
      if (v17 != (unint64_t *)v19)
      {
        v25 = (char *)v17 - v19 - 8;
        if (v25 < 0x58)
          goto LABEL_49;
        if ((unint64_t)(v19 - v23) < 0x20)
          goto LABEL_49;
        v26 = (v25 >> 3) + 1;
        v27 = &v23[8 * v20 - 16];
        v28 = v17 - 2;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v24 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v17 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            v31 = *--v17;
            *--v24 = v31;
          }
          while (v17 != (unint64_t *)v19);
        }
      }
      *((_QWORD *)this + 8) = v24;
      *((_QWORD *)this + 9) = v18;
      *((_QWORD *)this + 10) = &v23[8 * v43];
      if (v19)
      {
        v32 = v19;
        v33 = v18;
        operator delete(v32);
        v18 = v33;
        v12 = *((_QWORD *)this + 11);
        v8 = *((_QWORD *)this + 14);
        i = *((_QWORD *)this + 15);
        v10 = *((_QWORD *)this + 17);
      }
      v9 = v44;
    }
    else
    {
      *v17 = v11;
      v18 = v17 + 1;
    }
    v34 = v9 >> 3;
    *((_QWORD *)this + 9) = v18;
    v35 = *(_QWORD *)(v12 + 8 * v11);
    v36 = *(_QWORD *)(i - v8 + v10 - 8);
    v37 = 8 * v35;
    v38 = *(_QWORD *)(v8 + v37);
    *(_QWORD *)(v8 + v37) = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = v38;
    *(_DWORD *)(*((_QWORD *)this + 11) + 8 * v36) = v35;
    v39 = *((_QWORD *)this + 17);
    v40 = (_QWORD *)*((_QWORD *)this + 18);
    v41 = *(_QWORD *)(v39 + v37);
    v42 = *--v40;
    *(_QWORD *)(v39 + v37) = v42;
    *v40 = v41;
    *((_QWORD *)this + 15) -= 8;
    *((_QWORD *)this + 18) = v40;
    *(_DWORD *)(*((_QWORD *)this + 11) + 8 * v11 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 11)
                                                                                            + 8 * v11
                                                                                            + 4) << 32)
                                                       + 0x100000000) >> 32;
    *(_DWORD *)(*((_QWORD *)this + 11) + 8 * v11) = (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3;
    i = *((_QWORD *)this + 15);
  }
}

void md::MapEngineFrameService::makeDrawableReady(std::__shared_weak_count *a1, uint64_t a2)
{
  uint64_t shared_weak_owners;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t shared_owners;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint8_t buf[8];
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint8_t *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  shared_weak_owners = a1[3].__shared_weak_owners_;
  if (a2 >= (unint64_t)(((uint64_t)a1[4].__vftable - shared_weak_owners) >> 3))
    return;
  v4 = *(_QWORD *)(shared_weak_owners + 8 * a2);
  if (!v4 || HIDWORD(a2) != HIDWORD(v4))
    return;
  v7 = a1[4].__shared_weak_owners_ + 8 * v4;
  if ((std::__shared_weak_count_vtbl *)v7 == a1[5].__vftable)
    return;
  v8 = *(_QWORD *)v7;
  ++*(_QWORD *)(*(_QWORD *)v7 + 120);
  shared_owners = a1->__shared_owners_;
  v10 = *(_QWORD **)shared_owners;
  v11 = *(_QWORD **)(shared_owners + 8);
  if (v10 != v11)
  {
    while (*v10 != 0xC5B557B9C9754C35)
    {
      v10 += 5;
      if (v10 == v11)
        goto LABEL_19;
    }
  }
  if (v10 == v11)
  {
LABEL_19:
    v13 = 0;
  }
  else
  {
    v13 = v10[3];
    v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v17 = a1->__shared_owners_;
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0xCFC5133F599B8248)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_31;
    }
  }
  if (v18 == v19)
  {
LABEL_31:
    v20 = 0;
  }
  else
  {
    v20 = v18[3];
    v21 = (std::__shared_weak_count *)v18[4];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 8))(v13, *(_QWORD *)(v8 + 40));
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  *(_WORD *)(v8 + 48) = v26 | 0x100;
  if ((v26 - 1) >= 2)
  {
    if (v26)
      return;
    v35 = *(char **)(v8 + 96);
    v36 = *(char **)(v8 + 104);
    v37 = v8 + 96;
    if (v35 != v36)
    {
      while (*v35 != 1)
      {
        v35 += 16;
        if (v35 == v36)
          goto LABEL_70;
      }
    }
    if (v35 == v36)
    {
LABEL_70:
      buf[0] = 1;
      v55 = 0;
      v35 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v37, buf);
    }
    v49 = *((_QWORD *)v35 + 1);
    *(_QWORD *)buf = &off_1E427A410;
    v55 = a2;
    v56 = a1;
    v57 = buf;
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v20 + 48))(v20, v49, buf);
    v50 = v57;
    if (v57 == buf)
    {
      v51 = 4;
      v50 = buf;
    }
    else
    {
      if (!v57)
        return;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
    return;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v27 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "Failed to acquire drawable, rendering to temporary texture", buf, 2u);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(&v52, v25, 0);
  v28 = operator new();
  v29 = *(_QWORD *)(v52 + 80);
  v30 = *(_QWORD *)(v52 + 68);
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 56) = 0x200000000;
  *(_DWORD *)(v28 + 64) = 2;
  *(_QWORD *)(v28 + 68) = v30;
  *(_DWORD *)(v28 + 76) = 1;
  *(_QWORD *)(v28 + 88) = 0;
  *(_QWORD *)(v28 + 96) = 0;
  *(_QWORD *)v28 = &off_1E42B6330;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 40) = &unk_1E42B6350;
  *(_QWORD *)(v28 + 48) = "DrawableFailureFallback";
  *(_QWORD *)(v28 + 80) = v29;
  v31 = (std::__shared_weak_count *)operator new();
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A610;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)v28;
  v33 = *(_QWORD *)(v8 + 72);
  if (v33 || (v33 = *(_QWORD *)(v8 + 56), !*(_QWORD *)(v33 + 184)))
  {
    *(_QWORD *)(v33 + 96) = 0;
    *(_QWORD *)(v33 + 104) = 0;
    *(_QWORD *)(v33 + 88) = v28;
    *(_DWORD *)(v33 + 80) = *(_DWORD *)(v28 + 72);
    v34 = *(_QWORD *)(v33 + 72);
    if (v34 <= 1)
      v34 = 1;
    *(_QWORD *)(v33 + 72) = v34;
    *(_DWORD *)(v33 + 56) = *(_DWORD *)(v28 + 68);
  }
  else
  {
    *(_QWORD *)(v33 + 192) = 0;
    *(_QWORD *)(v33 + 200) = 0;
    *(_QWORD *)(v33 + 184) = v28;
  }
  v38 = *(char **)(v8 + 96);
  v39 = *(char **)(v8 + 104);
  v40 = v8 + 96;
  if (v38 != v39)
  {
    while (*v38 != 3)
    {
      v38 += 16;
      if (v38 == v39)
        goto LABEL_53;
    }
  }
  if (v38 == v39)
  {
LABEL_53:
    buf[0] = 3;
    v55 = 0;
    v38 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v40, buf);
  }
  v41 = *((_QWORD *)v38 + 1);
  do
    v42 = __ldxr(v32);
  while (__stxr(v42 + 1, v32));
  *(_QWORD *)buf = &off_1E427A458;
  v55 = v28;
  v56 = v31;
  v57 = buf;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v20 + 48))(v20, v41, buf);
  v43 = v57;
  if (v57 == buf)
  {
    v44 = 4;
    v43 = buf;
    goto LABEL_60;
  }
  if (v57)
  {
    v44 = 5;
LABEL_60:
    (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
    goto LABEL_61;
  }
  do
LABEL_61:
    v45 = __ldaxr(v32);
  while (__stlxr(v45 - 1, v32));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  v46 = v53;
  if (v53)
  {
    v47 = (unint64_t *)&v53->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19FBA6774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      _Unwind_Resume(exception_object);
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E427A458;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E427A458;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E427A458;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E427A458;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427A410;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427A410;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  os_signpost_id_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  dispatch_block_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v46;
  dispatch_time_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _BYTE *v53;
  _QWORD *v54;
  _BYTE *v55;
  std::promise<void> *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  char *v74;
  char *v75;
  void *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  void *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int64_t v101;
  unint64_t v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  int64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  char *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 *v143;
  _OWORD *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  _OWORD *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  int64_t v192;
  unint64_t v193;
  int64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 *v201;
  _OWORD *v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  void (***v206)(_QWORD, _QWORD, const char *);
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD block[5];
  dispatch_semaphore_t dsema;
  unsigned __int8 v221;
  std::future<void> v222;
  std::promise<void> v223;
  _QWORD v224[3];
  _QWORD *v225;
  uint8_t buf[16];
  _QWORD v227[3];
  _QWORD *v228;
  _QWORD v229[3];
  _QWORD *v230;
  _QWORD v231[3];
  _QWORD *v232;
  _QWORD v233[3];
  _QWORD *v234;
  _QWORD v235[3];
  _QWORD *v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t);
  _QWORD *(*v241)(uint64_t);
  const char *v242;
  unsigned __int8 *v243;
  dispatch_semaphore_t *p_dsema;
  _BYTE v245[24];
  _BYTE *v246;
  std::promise<void> *v247;
  _QWORD v248[3];
  _QWORD *v249;
  _BYTE v250[24];
  _BYTE *v251;
  uint8_t v252[8];
  _BYTE v253[10];
  __int16 v254;
  const char *v255;
  __int16 v256;
  _BYTE v257[10];
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  v1 = result[2];
  v2 = result[1];
  v3 = *(_QWORD *)(v1 + 88);
  if (v2 >= (*(_QWORD *)(v1 + 96) - v3) >> 3)
    return result;
  v4 = *(_QWORD *)(v3 + 8 * v2);
  v5 = v4 && HIDWORD(result[1]) == HIDWORD(v4);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v1 + 112) + 8 * v4;
  if (v6 == *(_QWORD *)(v1 + 120))
    return result;
  v7 = *(_QWORD *)v6;
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(*(_QWORD *)v6 + 120) + 1;
  if (!*(_BYTE *)(v7 + 49) || *(_BYTE *)(v7 + 48))
    return result;
  v8 = **(uint64_t ***)(v1 + 8);
  if (v8 != *(uint64_t **)(*(_QWORD *)(v1 + 8) + 8) && *v8 != 0xC5B557B9C9754C35)
  {
    v9 = v8 + 5;
    do
    {
      v10 = *v9;
      v9 += 5;
    }
    while (v10 != 0xC5B557B9C9754C35);
    v8 = v9 - 5;
  }
  v11 = v8[3];
  v12 = (std::__shared_weak_count *)v8[4];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 8))(v11, *(_QWORD *)(v7 + 40));
  v218 = result;
  if (!result)
    return result;
  v217 = 0;
  v16 = *(_QWORD *)(v1 + 8);
  v17 = *(_QWORD **)v16;
  v18 = *(_QWORD **)(v16 + 8);
  if (v17 != v18)
  {
    while (*v17 != 0xCFC5133F599B8248)
    {
      v17 += 5;
      if (v17 == v18)
        goto LABEL_33;
    }
  }
  if (v17 == v18)
  {
LABEL_33:
    v19 = 0;
  }
  else
  {
    v19 = v17[3];
    v20 = (std::__shared_weak_count *)v17[4];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v217 = v19;
  if (!*(_BYTE *)(v7 + 36) || (v24 = *(unsigned __int8 **)(v1 + 160)) == 0)
  {
    (*(void (**)(_QWORD *))(*v218 + 32))(v218);
    v26 = *(char **)(v7 + 96);
    v27 = *(char **)(v7 + 104);
    v28 = v7 + 96;
    if (v26 != v27)
    {
      while (*v26 != 2)
      {
        v26 += 16;
        if (v26 == v27)
          goto LABEL_44;
      }
    }
    if (v26 == v27)
    {
LABEL_44:
      LOBYTE(v237) = 2;
      v238 = 0;
      v26 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v28, (unsigned __int8 *)&v237);
    }
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 56))(v19, *((_QWORD *)v26 + 1));
  }
  v25 = operator new(0x20uLL);
  *v25 = &off_1E427A3C8;
  v25[1] = &v218;
  v25[2] = &v217;
  v25[3] = v7;
  v225 = v25;
  v221 = 0;
  dsema = dispatch_semaphore_create(0);
  v237 = 0;
  v238 = &v237;
  v239 = 0x6012000000;
  v240 = __Block_byref_object_copy__13186;
  v241 = __Block_byref_object_dispose__13187;
  v242 = "";
  v243 = &v221;
  p_dsema = &dsema;
  if (v225)
  {
    if (v225 == v224)
    {
      v246 = v245;
      (*(void (**)(_QWORD *, _BYTE *))(v224[0] + 24))(v224, v245);
    }
    else
    {
      v246 = v225;
      v225 = 0;
    }
  }
  else
  {
    v246 = 0;
  }
  v233[0] = &off_1E42CEDF8;
  v233[1] = v24;
  v234 = v233;
  v235[0] = &unk_1E42CEE40;
  v231[0] = &unk_1E42CEE40;
  v231[1] = v24;
  v232 = v231;
  v236 = v235;
  v235[1] = v24;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v29 = (id)GEOGetVectorKitPerformanceLog_log;
  v30 = v29;
  v31 = *((_QWORD *)v24 + 37);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v30, OS_SIGNPOST_INTERVAL_BEGIN, v31, "SyncWait", (const char *)&unk_1A0189141, buf, 2u);
  }

  v32 = v232;
  if (v232 == v231)
  {
    v33 = 4;
    v32 = v231;
  }
  else
  {
    if (!v232)
      goto LABEL_58;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_58:
  v34 = v234;
  if (v234 == v233)
  {
    v35 = 4;
    v34 = v233;
  }
  else
  {
    if (!v234)
      goto LABEL_63;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_63:
  if (!atomic_load(&v221))
  {
    v37 = 0;
    while (1)
    {
      std::mutex::lock((std::mutex *)(v24 + 8));
      v46 = *v24;
      std::mutex::unlock((std::mutex *)(v24 + 8));
      if (v46)
      {
        if (!v37)
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ___ZN2md18HomeQueueScheduler8syncWaitEjNSt3__18functionIFvvEEE_block_invoke;
          block[3] = &unk_1E42F36F8;
          block[4] = &v237;
          v37 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
          dispatch_async(*((dispatch_queue_t *)v24 + 21), v37);
        }
        while (1)
        {
          v47 = dispatch_time(0, 10000);
          if (!dispatch_block_wait(v37, v47))
            break;
          std::mutex::lock((std::mutex *)(v24 + 8));
          v48 = *v24;
          std::mutex::unlock((std::mutex *)(v24 + 8));
          if (!v48)
          {
            if (GEOGetVectorKitPerformanceLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
            v49 = (id)GEOGetVectorKitPerformanceLog_log;
            if (os_signpost_enabled(v49))
            {
              *(_WORD *)v252 = 0;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v49, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RunLoopRedirect", (const char *)&unk_1A0189141, v252, 2u);
            }

            dispatch_block_cancel(v37);
            break;
          }
        }
        if (!dispatch_block_testcancel(v37))
          dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
        goto LABEL_77;
      }
      *(_OWORD *)buf = *((_OWORD *)v238 + 3);
      v50 = v238[11];
      if (!v50)
        goto LABEL_93;
      if ((uint64_t *)v50 != v238 + 8)
        break;
      v228 = v227;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v50 + 24))(v50, v227);
LABEL_95:
      v230 = 0;
      v51 = (char *)operator new(0x38uLL);
      v52 = v51;
      *(_QWORD *)v51 = &off_1E42CEDB0;
      *(_OWORD *)(v51 + 8) = *(_OWORD *)buf;
      if (v228)
      {
        if (v228 == v227)
        {
          *((_QWORD *)v51 + 6) = v51 + 24;
          (*(void (**)(_QWORD *))(v227[0] + 24))(v227);
        }
        else
        {
          *((_QWORD *)v51 + 6) = v228;
          v228 = 0;
        }
      }
      else
      {
        *((_QWORD *)v51 + 6) = 0;
      }
      v230 = v52;
      std::mutex::lock((std::mutex *)(v24 + 8));
      std::mutex::unlock((std::mutex *)(v24 + 8));
      std::promise<void>::promise(&v223);
      std::promise<void>::get_future(&v223);
      *(_QWORD *)v252 = &v223;
      v53 = v230;
      if (!v230)
      {
        *(_QWORD *)&v257[2] = 0;
        v247 = &v223;
LABEL_108:
        v249 = v53;
        goto LABEL_109;
      }
      if (v230 == v229)
      {
        *(_QWORD *)&v257[2] = v253;
        (*(void (**)(_QWORD *, _BYTE *))(v229[0] + 24))(v229, v253);
        v53 = *(_BYTE **)&v257[2];
      }
      else
      {
        v53 = (_BYTE *)(*(uint64_t (**)(void))(*v230 + 16))();
        *(_QWORD *)&v257[2] = v53;
      }
      v247 = *(std::promise<void> **)v252;
      if (!v53)
        goto LABEL_108;
      if (v53 != v253)
      {
        v53 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v53 + 16))(v53);
        goto LABEL_108;
      }
      v249 = v248;
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v253 + 24))(v253, v248);
LABEL_109:
      v251 = 0;
      v54 = operator new(0x30uLL);
      v55 = v54;
      v56 = v247;
      v57 = v249;
      *v54 = &off_1E42CBC78;
      v54[1] = v56;
      if (v57)
      {
        if (v57 == v248)
        {
          v54[5] = v54 + 2;
          (*(void (**)(_QWORD *))(v248[0] + 24))(v248);
        }
        else
        {
          v54[5] = v57;
          v249 = 0;
        }
      }
      else
      {
        v54[5] = 0;
      }
      v251 = v55;
      std::mutex::lock((std::mutex *)(v24 + 8));
      v216 = *v24;
      if (*v24)
      {
        std::mutex::unlock((std::mutex *)(v24 + 8));
        goto LABEL_250;
      }
      v58 = (char *)*((_QWORD *)v24 + 16);
      v59 = (char *)*((_QWORD *)v24 + 17);
      v60 = v59 - v58;
      if (v59 == v58)
        v61 = 0;
      else
        v61 = 16 * (v59 - v58) - 1;
      v62 = *((_QWORD *)v24 + 19);
      if (v61 == *((_QWORD *)v24 + 20) + v62)
      {
        v63 = v62 >= 0x80;
        v64 = v62 - 128;
        if (v63)
        {
          *((_QWORD *)v24 + 19) = v64;
          v66 = v58 + 8;
          v65 = *(_QWORD *)v58;
          *((_QWORD *)v24 + 16) = v58 + 8;
          if (v59 != *((char **)v24 + 18))
            goto LABEL_238;
          v67 = (char *)*((_QWORD *)v24 + 15);
          if (v66 > v67)
          {
            v68 = (v66 - v67) >> 3;
            if (v68 >= -1)
              v69 = v68 + 1;
            else
              v69 = v68 + 2;
            v70 = v69 >> 1;
            v71 = &v66[-8 * (v69 >> 1)];
            v72 = v59 - v66;
            if (v59 != v66)
            {
              memmove(&v66[-8 * (v69 >> 1)], v66, v59 - v66);
              v59 = (char *)*((_QWORD *)v24 + 16);
            }
            v73 = &v59[-8 * v70];
            v59 = &v71[v72];
            goto LABEL_130;
          }
          if (v59 == v67)
            v85 = 1;
          else
            v85 = (v59 - v67) >> 2;
          if (v85 >> 61)
            goto LABEL_321;
          v86 = operator new(8 * v85);
          v87 = v85 >> 2;
          v88 = &v86[8 * (v85 >> 2)];
          v89 = v59 - v66;
          v5 = v59 == v66;
          v59 = v88;
          if (!v5)
          {
            v59 = &v88[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = v89 - 8;
            if (v90 >= 0x38)
            {
              v139 = 8 * v87;
              v140 = &v86[8 * v87] - v66;
              v91 = &v86[8 * (v85 >> 2)];
              if (v140 >= 0x20)
              {
                v141 = (v90 >> 3) + 1;
                v142 = 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
                v91 = &v88[v142];
                v143 = (__int128 *)(v58 + 24);
                v144 = &v86[v139 + 16];
                v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v146 = *v143;
                  *(v144 - 1) = *(v143 - 1);
                  *v144 = v146;
                  v143 += 2;
                  v144 += 2;
                  v145 -= 4;
                }
                while (v145);
                if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_212;
                v66 += v142;
              }
            }
            else
            {
              v91 = &v86[8 * (v85 >> 2)];
            }
            do
            {
              v147 = *(_QWORD *)v66;
              v66 += 8;
              *(_QWORD *)v91 = v147;
              v91 += 8;
            }
            while (v91 != v59);
          }
LABEL_212:
          *((_QWORD *)v24 + 15) = v86;
          *((_QWORD *)v24 + 16) = v88;
          *((_QWORD *)v24 + 17) = v59;
          *((_QWORD *)v24 + 18) = &v86[8 * v85];
          if (v67)
          {
            operator delete(v67);
            v59 = (char *)*((_QWORD *)v24 + 17);
          }
          goto LABEL_238;
        }
        v74 = (char *)*((_QWORD *)v24 + 18);
        v75 = (char *)*((_QWORD *)v24 + 15);
        if (v60 >> 3 < (unint64_t)((v74 - v75) >> 3))
        {
          if (v74 != v59)
          {
            v76 = operator new(0x1000uLL);
            v77 = (char *)*((_QWORD *)v24 + 17);
            if (v77 != *((char **)v24 + 18))
              goto LABEL_135;
            v95 = (char *)*((_QWORD *)v24 + 15);
            v96 = (char *)*((_QWORD *)v24 + 16);
            if (v96 > v95)
            {
              v97 = (v96 - v95) >> 3;
              if (v97 >= -1)
                v98 = v97 + 1;
              else
                v98 = v97 + 2;
              v99 = v98 >> 1;
              v100 = &v96[-8 * (v98 >> 1)];
              v101 = v77 - v96;
              if (v77 != v96)
              {
                memmove(&v96[-8 * (v98 >> 1)], *((const void **)v24 + 16), v77 - v96);
                v77 = (char *)*((_QWORD *)v24 + 16);
              }
              *((_QWORD *)v24 + 16) = &v77[-8 * v99];
              *((_QWORD *)v24 + 17) = &v100[v101];
              *(_QWORD *)&v100[v101] = v76;
              goto LABEL_239;
            }
            if (v77 == v95)
              v132 = 1;
            else
              v132 = (v77 - v95) >> 2;
            if (!(v132 >> 61))
            {
              v133 = operator new(8 * v132);
              v134 = v132 >> 2;
              v135 = &v133[8 * (v132 >> 2)];
              v136 = v77 - v96;
              v5 = v77 == v96;
              v77 = v135;
              if (!v5)
              {
                v77 = &v135[v136 & 0xFFFFFFFFFFFFFFF8];
                v137 = v136 - 8;
                if (v137 >= 0x38)
                {
                  v166 = 8 * v134;
                  v167 = &v133[8 * v134] - v96;
                  v138 = &v133[8 * (v132 >> 2)];
                  if (v167 < 0x20)
                    goto LABEL_230;
                  v168 = (v137 >> 3) + 1;
                  v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
                  v138 = &v135[v169];
                  v170 = (__int128 *)(v96 + 16);
                  v171 = &v133[v166 + 16];
                  v172 = v168 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v173 = *v170;
                    *(v171 - 1) = *(v170 - 1);
                    *v171 = v173;
                    v170 += 2;
                    v171 += 2;
                    v172 -= 4;
                  }
                  while (v172);
                  if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v96 += v169;
                    goto LABEL_230;
                  }
                }
                else
                {
                  v138 = &v133[8 * (v132 >> 2)];
                  do
                  {
LABEL_230:
                    v174 = *(_QWORD *)v96;
                    v96 += 8;
                    *(_QWORD *)v138 = v174;
                    v138 += 8;
                  }
                  while (v138 != v77);
                }
              }
              *((_QWORD *)v24 + 15) = v133;
              *((_QWORD *)v24 + 16) = v135;
              *((_QWORD *)v24 + 17) = v77;
              *((_QWORD *)v24 + 18) = &v133[8 * v132];
              if (v95)
              {
                operator delete(v95);
                v77 = (char *)*((_QWORD *)v24 + 17);
              }
LABEL_135:
              *(_QWORD *)v77 = v76;
LABEL_239:
              v59 = (char *)(*((_QWORD *)v24 + 17) + 8);
              *((_QWORD *)v24 + 17) = v59;
LABEL_240:
              v58 = (char *)*((_QWORD *)v24 + 16);
              goto LABEL_241;
            }
LABEL_321:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v92 = operator new(0x1000uLL);
          v93 = (char *)*((_QWORD *)v24 + 16);
          if (v93 != *((char **)v24 + 15))
          {
            v94 = (char *)*((_QWORD *)v24 + 16);
            goto LABEL_237;
          }
          v127 = (_BYTE *)*((_QWORD *)v24 + 17);
          v126 = *((_QWORD *)v24 + 18);
          if ((unint64_t)v127 < v126)
          {
            v128 = (uint64_t)(v126 - (_QWORD)v127) >> 3;
            if (v128 >= -1)
              v129 = v128 + 1;
            else
              v129 = v128 + 2;
            v130 = v129 >> 1;
            v131 = &v127[8 * (v129 >> 1)];
            v94 = &v131[-(v127 - v93)];
            if (v127 != v93)
            {
              memmove(&v131[-(v127 - v93)], *((const void **)v24 + 16), v127 - v93);
              v93 = (char *)*((_QWORD *)v24 + 17);
            }
            *((_QWORD *)v24 + 16) = v94;
            *((_QWORD *)v24 + 17) = &v93[8 * v130];
LABEL_237:
            *((_QWORD *)v94 - 1) = v92;
            v176 = (char *)*((_QWORD *)v24 + 16);
            v59 = (char *)*((_QWORD *)v24 + 17);
            *((_QWORD *)v24 + 16) = v176 - 8;
            v65 = *((_QWORD *)v176 - 1);
            *((_QWORD *)v24 + 16) = v176;
            if (v59 != *((char **)v24 + 18))
            {
LABEL_238:
              *(_QWORD *)v59 = v65;
              goto LABEL_239;
            }
            v67 = (char *)*((_QWORD *)v24 + 15);
            if (v176 > v67)
            {
              v188 = (v176 - v67) >> 3;
              if (v188 >= -1)
                v189 = v188 + 1;
              else
                v189 = v188 + 2;
              v190 = v189 >> 1;
              v191 = &v176[-8 * (v189 >> 1)];
              v192 = v59 - v176;
              if (v59 != v176)
              {
                memmove(&v176[-8 * (v189 >> 1)], v176, v59 - v176);
                v176 = (char *)*((_QWORD *)v24 + 16);
              }
              v59 = &v191[v192];
              v73 = &v176[-8 * v190];
LABEL_130:
              *((_QWORD *)v24 + 16) = v73;
              *((_QWORD *)v24 + 17) = v59;
              goto LABEL_238;
            }
            if (v59 == v67)
              v85 = 1;
            else
              v85 = (v59 - v67) >> 2;
            if (v85 >> 61)
              goto LABEL_321;
            v86 = operator new(8 * v85);
            v193 = v85 >> 2;
            v88 = &v86[8 * (v85 >> 2)];
            v194 = v59 - v176;
            v5 = v59 == v176;
            v59 = v88;
            if (!v5)
            {
              v59 = &v88[v194 & 0xFFFFFFFFFFFFFFF8];
              v195 = v194 - 8;
              if (v195 >= 0x38)
              {
                v197 = 8 * v193;
                v198 = &v86[8 * v193] - v176;
                v196 = &v86[8 * (v85 >> 2)];
                if (v198 < 0x20)
                  goto LABEL_294;
                v199 = (v195 >> 3) + 1;
                v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
                v196 = &v88[v200];
                v201 = (__int128 *)(v176 + 16);
                v202 = &v86[v197 + 16];
                v203 = v199 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v204 = *v201;
                  *(v202 - 1) = *(v201 - 1);
                  *v202 = v204;
                  v201 += 2;
                  v202 += 2;
                  v203 -= 4;
                }
                while (v203);
                if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v176 += v200;
                  goto LABEL_294;
                }
              }
              else
              {
                v196 = &v86[8 * (v85 >> 2)];
                do
                {
LABEL_294:
                  v205 = *(_QWORD *)v176;
                  v176 += 8;
                  *(_QWORD *)v196 = v205;
                  v196 += 8;
                }
                while (v196 != v59);
              }
            }
            goto LABEL_212;
          }
          v148 = v126 - (_QWORD)v93;
          v5 = v148 == 0;
          v149 = v148 >> 2;
          if (v5)
            v150 = 1;
          else
            v150 = v149;
          if (v150 >> 61)
            goto LABEL_321;
          v151 = (char *)operator new(8 * v150);
          v152 = (v150 + 3) >> 2;
          v94 = &v151[8 * v152];
          v153 = &v151[8 * v150];
          v154 = v94;
          v155 = v127 - v93;
          if (v127 != v93)
          {
            v154 = &v94[v155 & 0xFFFFFFFFFFFFFFF8];
            v156 = v155 - 8;
            v157 = &v151[8 * v152];
            v158 = v93;
            if (v156 > 0x37)
            {
              v159 = 8 * v152;
              v157 = &v151[8 * v152];
              v158 = v93;
              if ((unint64_t)(v157 - v93) >= 0x20)
              {
                v160 = (v156 >> 3) + 1;
                v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
                v157 = &v94[v161];
                v162 = (__int128 *)(v93 + 16);
                v163 = &v151[v159 + 16];
                v164 = v160 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v165 = *v162;
                  *((_OWORD *)v163 - 1) = *(v162 - 1);
                  *(_OWORD *)v163 = v165;
                  v162 += 2;
                  v163 += 32;
                  v164 -= 4;
                }
                while (v164);
                if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  *((_QWORD *)v24 + 15) = v151;
                  *((_QWORD *)v24 + 16) = v94;
                  *((_QWORD *)v24 + 17) = v154;
                  *((_QWORD *)v24 + 18) = v153;
LABEL_236:
                  operator delete(v93);
                  v94 = (char *)*((_QWORD *)v24 + 16);
                  goto LABEL_237;
                }
                v158 = &v93[v161];
              }
            }
            do
            {
              v175 = *(_QWORD *)v158;
              v158 += 8;
              *(_QWORD *)v157 = v175;
              v157 += 8;
            }
            while (v157 != v154);
          }
          *((_QWORD *)v24 + 15) = v151;
          *((_QWORD *)v24 + 16) = v94;
          *((_QWORD *)v24 + 17) = v154;
          *((_QWORD *)v24 + 18) = v153;
          if (!v93)
            goto LABEL_237;
          goto LABEL_236;
        }
        if (v74 == v75)
          v78 = 1;
        else
          v78 = (v74 - v75) >> 2;
        if (v78 >> 61)
          goto LABEL_321;
        v79 = (char *)operator new(8 * v78);
        v80 = operator new(0x1000uLL);
        v81 = &v79[8 * (v60 >> 3)];
        v82 = v60 >> 3;
        v83 = &v79[8 * v78];
        if (v60 >> 3 == v78)
        {
          if (v60 < 1)
          {
            if (v59 == v58)
              v102 = 1;
            else
              v102 = v60 >> 2;
            if (v102 >> 61)
              goto LABEL_321;
            v103 = v80;
            v81 = (char *)operator new(8 * v102);
            v83 = &v81[8 * v102];
            operator delete(v79);
            v58 = (char *)*((_QWORD *)v24 + 16);
            v59 = (char *)*((_QWORD *)v24 + 17);
            v79 = v81;
            v80 = v103;
          }
          else
          {
            v84 = v82 + 2;
            if (v82 >= -1)
              v84 = v82 + 1;
            v81 -= 8 * (v84 >> 1);
          }
        }
        *(_QWORD *)v81 = v80;
        v104 = v81 + 8;
        if (v59 == v58)
        {
LABEL_167:
          v105 = (void *)*((_QWORD *)v24 + 15);
          *((_QWORD *)v24 + 15) = v79;
          *((_QWORD *)v24 + 16) = v81;
          v59 = v104;
          *((_QWORD *)v24 + 17) = v104;
          *((_QWORD *)v24 + 18) = v83;
          if (v105)
          {
            operator delete(v105);
            v59 = (char *)*((_QWORD *)v24 + 17);
          }
          goto LABEL_240;
        }
        while (2)
        {
          if (v81 != v79)
          {
            v106 = v81;
            v107 = v104;
            goto LABEL_170;
          }
          if (v104 < v83)
          {
            v109 = (v83 - v104) >> 3;
            if (v109 >= -1)
              v110 = v109 + 1;
            else
              v110 = v109 + 2;
            v107 = &v104[8 * (v110 >> 1)];
            v106 = &v81[8 * (v110 >> 1)];
            if (v104 == v81)
            {
              v79 = v104;
            }
            else
            {
              memmove(&v81[8 * (v110 >> 1)], v81, v104 - v81);
              v79 = v81;
            }
LABEL_170:
            v108 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v106 - 1) = v108;
            v81 = v106 - 8;
            v104 = v107;
            if (v59 == *((char **)v24 + 16))
              goto LABEL_167;
            continue;
          }
          break;
        }
        if (v83 == v81)
          v111 = 1;
        else
          v111 = (v83 - v81) >> 2;
        if (v111 >> 61)
          goto LABEL_321;
        v112 = (char *)operator new(8 * v111);
        v79 = v112;
        v113 = (v111 + 3) >> 2;
        v106 = &v112[8 * v113];
        v107 = v106;
        v114 = v104 - v81;
        if (v104 != v81)
        {
          v107 = &v106[v114 & 0xFFFFFFFFFFFFFFF8];
          v115 = v114 - 8;
          v116 = &v112[8 * v113];
          v117 = v81;
          if (v115 < 0x38
            || (v118 = 8 * v113, v116 = &v112[8 * v113], v117 = v81, (unint64_t)(v116 - v81) < 0x20))
          {
            do
            {
LABEL_189:
              v125 = *(_QWORD *)v117;
              v117 += 8;
              *(_QWORD *)v116 = v125;
              v116 += 8;
            }
            while (v116 != v107);
          }
          else
          {
            v119 = (v115 >> 3) + 1;
            v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
            v116 = &v106[v120];
            v121 = (__int128 *)(v81 + 16);
            v122 = &v112[v118 + 16];
            v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v124 = *v121;
              *((_OWORD *)v122 - 1) = *(v121 - 1);
              *(_OWORD *)v122 = v124;
              v121 += 2;
              v122 += 32;
              v123 -= 4;
            }
            while (v123);
            if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v117 = &v81[v120];
              goto LABEL_189;
            }
          }
        }
        v83 = &v112[8 * v111];
        operator delete(v81);
        goto LABEL_170;
      }
LABEL_241:
      if (v59 == v58)
      {
        v178 = 0;
      }
      else
      {
        v177 = *((_QWORD *)v24 + 20) + *((_QWORD *)v24 + 19);
        v178 = *(_QWORD *)&v58[(v177 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v177 & 0x7F);
      }
      v179 = (uint64_t)v251;
      if (v251)
      {
        if (v251 == v250)
        {
          *(_QWORD *)(v178 + 24) = v178;
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v251 + 24))(v251, v178);
          goto LABEL_249;
        }
        v179 = (*(uint64_t (**)(void))(*(_QWORD *)v251 + 16))();
      }
      *(_QWORD *)(v178 + 24) = v179;
LABEL_249:
      ++*((_QWORD *)v24 + 20);
      std::mutex::unlock((std::mutex *)(v24 + 8));
      std::condition_variable::notify_one((std::condition_variable *)(v24 + 72));
LABEL_250:
      v180 = v251;
      if (v251 == v250)
      {
        v180 = v250;
        v181 = 4;
      }
      else
      {
        if (!v251)
          goto LABEL_255;
        v181 = 5;
      }
      (*(void (**)(void))(*v180 + 8 * v181))();
LABEL_255:
      v182 = v249;
      if (v249 == v248)
      {
        v182 = v248;
        v183 = 4;
      }
      else
      {
        if (!v249)
          goto LABEL_260;
        v183 = 5;
      }
      (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_260:
      if (!v216)
        std::__assoc_sub_state::wait(v222.__state_);
      v184 = *(_QWORD **)&v257[2];
      if (*(_BYTE **)&v257[2] == v253)
      {
        v184 = v253;
        v185 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v257[2])
          goto LABEL_267;
        v185 = 5;
      }
      (*(void (**)(void))(*v184 + 8 * v185))();
LABEL_267:
      std::future<void>::~future(&v222);
      MEMORY[0x1A1AF4CB0](&v223);
      v186 = v230;
      if (v230 == v229)
      {
        v186 = v229;
        v187 = 4;
      }
      else
      {
        if (!v230)
          goto LABEL_272;
        v187 = 5;
      }
      (*(void (**)(void))(*v186 + 8 * v187))();
LABEL_272:
      v43 = v228;
      if (v228 == v227)
      {
        v43 = v227;
        v44 = 4;
      }
      else
      {
        if (!v228)
          goto LABEL_77;
        v44 = 5;
      }
      (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_77:
      if (atomic_load(&v221))
        goto LABEL_65;
    }
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
LABEL_93:
    v228 = (_QWORD *)v50;
    goto LABEL_95;
  }
  v37 = 0;
LABEL_65:
  v38 = atomic_load(&v221);
  if (v38 != 1)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v39 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v252 = 67109890;
      *(_DWORD *)&v252[4] = v38;
      *(_WORD *)v253 = 2080;
      *(_QWORD *)&v253[2] = "false";
      v254 = 2080;
      v255 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/HomeQueueScheduler.mm";
      v256 = 1024;
      *(_DWORD *)v257 = 160;
      _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_FAULT, "Failed to correctly run task (counter:%d): Assertion with expression - %s : Failed in file - %s line - %i", v252, 0x22u);
    }

    v40 = *((_QWORD *)v24 + 38);
    v41 = *(_QWORD **)v40;
    v42 = *(_QWORD **)(v40 + 8);
    if (v41 != v42)
    {
      while (*v41 != 0x4BCD00F88A8100BELL)
      {
        v41 += 5;
        if (v41 == v42)
          goto LABEL_305;
      }
    }
    if (v41 != v42)
    {
      v206 = (void (***)(_QWORD, _QWORD, const char *))v41[3];
      v207 = (std::__shared_weak_count *)v41[4];
      if (v207)
      {
        v208 = (unint64_t *)&v207->__shared_owners_;
        do
          v209 = __ldxr(v208);
        while (__stxr(v209 + 1, v208));
        do
          v210 = __ldaxr(v208);
        while (__stlxr(v210 - 1, v208));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      if (v206)
        (**v206)(v206, 0, "");
    }
  }
LABEL_305:
  if (!v236)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19FBA8048);
  }
  (*(void (**)(_QWORD *))(*v236 + 48))(v236);
  v211 = v245;
  v212 = v236;
  if (v236 == v235)
  {
    v213 = 4;
    v212 = v235;
  }
  else
  {
    if (!v236)
      goto LABEL_311;
    v213 = 5;
  }
  (*(void (**)(void))(*v212 + 8 * v213))();
LABEL_311:
  _Block_object_dispose(&v237, 8);
  if (v246 == v245)
  {
    v214 = 4;
    goto LABEL_315;
  }
  if (v246)
  {
    v214 = 5;
    v211 = v246;
LABEL_315:
    (*(void (**)(_QWORD *))(*v211 + 8 * v214))(v211);
  }

  result = v225;
  if (v225 == v224)
  {
    v215 = 4;
    result = v224;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v215))();
  }
  if (v225)
  {
    v215 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v215))();
  }
  return result;
}

void sub_19FBA80EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FBA80F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char *a53)
{
  char *v54;
  uint64_t v55;

  v54 = a53;
  if (a53 == &a50)
  {
    v55 = 4;
    v54 = &a50;
  }
  else
  {
    if (!a53)
      goto LABEL_6;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427A3C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427A3C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unsigned __int8 v8[8];
  uint64_t v9;

  (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 24);
  v3 = **(_QWORD **)(a1 + 16);
  v5 = *(char **)(v2 + 96);
  v6 = *(char **)(v2 + 104);
  v4 = v2 + 96;
  if (v5 != v6)
  {
    while (*v5 != 2)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_6;
    }
  }
  if (v5 == v6)
  {
LABEL_6:
    v8[0] = 2;
    v9 = 0;
    v5 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v4, v8);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 56))(v3, *((_QWORD *)v5 + 1));
}

void sub_19FBA8338(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FBA8344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E42B5610;
  a1[1] = 0;
  v3 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a2 + 8));
  if (v3)
  {
    v4 = v3;
    v5 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v5 = 0;
  }
  v6 = MEMORY[0x1A1AF5730](v5);
  v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

void sub_19FBA83F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D5E88;
  *(_QWORD *)(a1 + 8) = &off_1E42B5610;

  return a1;
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42D5E88;
  *(_QWORD *)(a1 + 8) = &off_1E42B5610;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_1E42D5E88;
  geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v2 + 1, v1);
  return v2;
}

void sub_19FBA84D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D5E88;
  return geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(a2 + 1, a1 + 8);
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B5610;

}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B5610;

  operator delete((void *)a1);
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 16));
  v1[2]();

}

void sub_19FBA8584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5610;

  return a1;
}

void geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5610;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t __copy_helper_block_ea8_48c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 72);
  if (result)
  {
    if (result == a2 + 48)
    {
      *(_QWORD *)(a1 + 72) = a1 + 48;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), a1 + 48);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 72) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  return result;
}

_QWORD *__destroy_helper_block_ea8_48c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 48);
  result = *(_QWORD **)(a1 + 72);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void md::MapEngineFrameService::Data::~Data(md::MapEngineFrameService::Data *this)
{
  void *v2;
  uint64_t v3;
  ggl::RenderQueue *v4;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (ggl::RenderQueue *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    ggl::RenderQueue::~RenderQueue(v4);
    MEMORY[0x1A1AF4E00]();
  }
}

uint64_t md::MapEngineFrameService::Data::{unnamed type#2}::~Data(uint64_t a1)
{
  uint64_t v2;
  ggl::RenderQueue *v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(ggl::RenderQueue **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void sub_19FBA8A70(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 24));
  _Unwind_Resume(a1);
}

void gdc::tf::Executor::~Executor(gdc::tf::Executor *this)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v10 = (_QWORD *)*v4;
      v8 = (_QWORD *)v4[6];
      if (v8 == v4 + 3)
      {
        v8 = v4 + 3;
        v9 = 4;
      }
      else
      {
        if (!v8)
          goto LABEL_14;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_14:
      operator delete(v4);
      v4 = v10;
    }
    while (v10);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  if (v6)
  {
    do
    {
      v13 = (_QWORD *)*v6;
      v11 = (_QWORD *)v6[6];
      if (v11 == v6 + 3)
      {
        v11 = v6 + 3;
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_20;
        v12 = 5;
      }
      (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_20:
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    operator delete(v7);
}

void md::MapEngineCompatabilityServiceImpl::~MapEngineCompatabilityServiceImpl(md::MapEngineCompatabilityServiceImpl *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::MapEngineCompatabilityServiceImpl::produceRenderQueue(md::MapEngineCompatabilityServiceImpl *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  const char *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  __int128 *p_dst;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  __int128 *v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint8_t *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  __int128 __dst;
  int64_t v83;
  uint8_t buf[8];
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  v78 = *(_QWORD *)(v1 + 1144);
  v2 = *(std::__shared_weak_count **)(v1 + 1152);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  v5 = *(_QWORD *)(v1 + 1224);
  v6 = *(std::__shared_weak_count **)(v1 + 1232);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(v1 + 1376);
  v10 = *(std::__shared_weak_count **)(v1 + 1384);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(v1 + 1192);
  v79 = v2;
  v80 = v6;
  v81 = v10;
  v76 = v9;
  v77 = v5;
  if (v13)
    v14 = *(unsigned __int8 *)(v13 + 48);
  else
    v14 = -1;
  v15 = *(_QWORD *)(v1 + 1360);
  *(_DWORD *)(v15 + 4) = v14;
  *(_DWORD *)(v15 + 8) = *(_QWORD *)(v1 + 1200);
  v16 = *(std::__shared_weak_count **)(v1 + 1368);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v19 = (id)GEOGetVectorKitPerformanceLog_log;
  v20 = v19;
  v21 = *(_QWORD *)(v1 + 1216);
  if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v21, "RenderLayout", (const char *)&unk_1A0189141, buf, 2u);
  }

  v22 = *(_QWORD *)(*(_QWORD *)(v1 + 872) + 24);
  v23 = *(_QWORD **)(v22 + 8);
  *(_QWORD *)buf = &off_1E42D46D8;
  v85 = v22;
  v86 = buf;
  md::FrameGraph::visitPasses(v23, (uint64_t)buf);
  v24 = v86;
  if (v86 == buf)
  {
    v25 = 4;
    v24 = buf;
  }
  else
  {
    if (!v86)
      goto LABEL_26;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_26:
  v26 = *(_QWORD *)(v22 + 16);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(v26 + 280) = objc_msgSend(v27, "debugCaptureNextGPUFrame");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "debugGPUFrameCaptureURL");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "debugGPUFrameCaptureURL");
    v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v32 = (const char *)objc_msgSend(v31, "UTF8String");

  }
  else
  {
    v32 = "";
  }

  v33 = *(_QWORD *)(v22 + 16);
  v34 = strlen(v32);
  if (v34 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    p_dst = (__int128 *)operator new(v37 + 1);
    *((_QWORD *)&__dst + 1) = v35;
    v83 = v38 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_36;
  }
  HIBYTE(v83) = v34;
  p_dst = &__dst;
  if (v34)
LABEL_36:
    memmove(p_dst, v32, v35);
  *((_BYTE *)p_dst + v35) = 0;
  v39 = (void **)(v33 + 288);
  v40 = HIBYTE(v83);
  if ((*(char *)(v33 + 311) & 0x80000000) == 0)
  {
    if ((v83 & 0x8000000000000000) == 0)
    {
      *(_OWORD *)v39 = __dst;
      *(_QWORD *)(v33 + 304) = v83;
      goto LABEL_50;
    }
    std::string::__assign_no_alias<true>(v39, (void *)__dst, *((size_t *)&__dst + 1));
    goto LABEL_49;
  }
  if (v83 >= 0)
    v41 = &__dst;
  else
    v41 = (__int128 *)__dst;
  if (v83 >= 0)
    v42 = HIBYTE(v83);
  else
    v42 = *((_QWORD *)&__dst + 1);
  std::string::__assign_no_alias<false>(v39, v41, v42);
  if (v40 < 0)
LABEL_49:
    operator delete((void *)__dst);
LABEL_50:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setDebugCaptureNextGPUFrame:", 0);

  v44 = *(_QWORD *)(v22 + 16);
  md::LayoutContext::frameState(*(md::LayoutContext **)(v1 + 1088));
  v46 = *(_QWORD *)(v45 + 624);
  v47 = *(_QWORD *)(v44 + 136);
  if (v16)
  {
    v48 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  if (v79)
  {
    v50 = (unint64_t *)&v79->__shared_weak_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if (v80)
  {
    v52 = (unint64_t *)&v80->__shared_weak_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  if (v81)
  {
    v54 = (unint64_t *)&v81->__shared_weak_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = operator new(0x50uLL);
  *v56 = &off_1E42D4BE8;
  v56[1] = v15;
  v56[2] = v16;
  v56[3] = v78;
  v56[4] = v79;
  v56[5] = v77;
  v56[6] = v80;
  v56[7] = v76;
  v56[8] = v81;
  v56[9] = v46;
  v57 = (uint8_t *)operator new(0x50uLL);
  v58 = v57;
  *(_QWORD *)v57 = &off_1E42D4BE8;
  *((_QWORD *)v57 + 1) = v15;
  v59 = v79;
  *((_QWORD *)v57 + 2) = v16;
  if (v16)
  {
    v60 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    v78 = v56[3];
    v59 = (std::__shared_weak_count *)v56[4];
  }
  *((_QWORD *)v57 + 3) = v78;
  *((_QWORD *)v57 + 4) = v59;
  if (v59)
  {
    v62 = (unint64_t *)&v59->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = v56[6];
  *((_QWORD *)v57 + 5) = v56[5];
  *((_QWORD *)v57 + 6) = v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 16);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = v56[8];
  *((_QWORD *)v57 + 7) = v56[7];
  *((_QWORD *)v57 + 8) = v67;
  if (v67)
  {
    v68 = (unint64_t *)(v67 + 16);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  *((_QWORD *)v57 + 9) = v56[9];
  v86 = v57;
  if ((uint8_t *)(v47 + 32) == buf)
  {
    v71 = 5;
    goto LABEL_83;
  }
  v70 = *(uint8_t **)(v47 + 56);
  if (v70 == (uint8_t *)(v47 + 32))
  {
    v58 = buf;
    (*(void (**)(void))(*(_QWORD *)(v47 + 32) + 24))();
    (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 56) + 32))(*(_QWORD *)(v47 + 56));
    *(_QWORD *)(v47 + 56) = v86;
    v86 = buf;
    goto LABEL_82;
  }
  v86 = *(uint8_t **)(v47 + 56);
  *(_QWORD *)(v47 + 56) = v57;
  v58 = buf;
  if (v70 == buf)
  {
LABEL_82:
    v71 = 4;
    goto LABEL_83;
  }
  if (!v70)
    goto LABEL_84;
  v71 = 5;
  v58 = v70;
LABEL_83:
  (*(void (**)(uint8_t *))(*(_QWORD *)v58 + 8 * v71))(v58);
LABEL_84:
  (*(void (**)(_QWORD *))(*v56 + 40))(v56);
  v72 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
  *(_QWORD *)buf = &off_1E42D4C30;
  v85 = v1;
  v86 = buf;
  geo::TaskQueue::barrierSync(v72, buf);
  v73 = v86;
  if (v86 == buf)
  {
    v74 = 4;
    v73 = buf;
  }
  else
  {
    if (!v86)
      goto LABEL_89;
    v74 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_89:
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (v81)
    std::__shared_weak_count::__release_weak(v81);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  if (v79)
    std::__shared_weak_count::__release_weak(v79);
  return v44;
}

void sub_19FBA91B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (v22)
  {
    std::__shared_weak_count::__release_weak(v22);
    if (!a15)
    {
LABEL_3:
      if (!a14)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!a15)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(a15);
  if (!a14)
  {
LABEL_4:
    if (!a13)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(a14);
  if (!a13)
    goto LABEL_10;
  goto LABEL_9;
}

void md::MapEngineCompatabilityServiceImpl::postRender(id **this, double a2)
{
  md::MapEngine::_postRender(this[1], a2);
}

void md::MapEngineCallbackGraphService::~MapEngineCallbackGraphService(md::MapEngineCallbackGraphService *this)
{
  md::MapEngineCallbackGraphService::~MapEngineCallbackGraphService(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t v45;

  *(_QWORD *)this = &off_1E426FAB8;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 34);
  if (v3)
  {
    v4 = *((_QWORD *)this + 35);
    v5 = (void *)*((_QWORD *)this + 34);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 34);
    }
    *((_QWORD *)this + 35) = v3;
    operator delete(v5);
  }
  v9 = (void *)*((_QWORD *)this + 31);
  if (v9)
  {
    *((_QWORD *)this + 32) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 28);
  if (v10)
  {
    *((_QWORD *)this + 29) = v10;
    operator delete(v10);
  }
  v44 = 0;
  v45 = 0;
  v43 = &v44;
  v11 = (_QWORD *)*((_QWORD *)this + 27);
  if (v11)
  {
    v12 = 0;
    do
    {
      v13 = &v44;
      v14 = &v44;
      if (v44)
      {
        v15 = v44;
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v15;
            v16 = v15[4];
            if ((unint64_t)v11 >= v16)
              break;
            v15 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_29;
          }
          if (v16 >= (unint64_t)v11)
            break;
          v15 = v14[1];
          if (!v15)
          {
            v13 = v14 + 1;
            goto LABEL_29;
          }
        }
      }
      else
      {
LABEL_29:
        v17 = (uint64_t *)operator new(0x28uLL);
        v17[4] = (uint64_t)v11;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v14;
        *v13 = v17;
        if (*v43)
        {
          v43 = (uint64_t **)*v43;
          v17 = *v13;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v44, v17);
        v12 = ++v45;
        v11 = (_QWORD *)*((_QWORD *)this + 27);
      }
      v11 = (_QWORD *)*v11;
      *((_QWORD *)this + 27) = v11;
    }
    while (v11);
  }
  else
  {
    v12 = 0;
  }
  v18 = *((_QWORD *)this + 25);
  v19 = (char *)*((_QWORD *)this + 22);
  v20 = (char *)this + 184;
  v21 = v12 == *((_QWORD *)this + 24) * v18 || v19 == v20;
  if (v21 || v18 == 0)
  {
    if (v19 == v20)
      goto LABEL_41;
    goto LABEL_74;
  }
  v23 = 1;
  do
  {
    if (v23)
    {
      v24 = 0;
      v25 = *((_QWORD *)v19 + 4);
      do
      {
        v26 = (_QWORD *)(v25 + 88 * v24);
        v27 = v44;
        if (!v44)
          goto LABEL_55;
        v28 = &v44;
        do
        {
          v29 = v27;
          v30 = v28;
          v31 = v27[4];
          v32 = (uint64_t **)(v27 + 1);
          if (v31 >= (unint64_t)v26)
          {
            v32 = (uint64_t **)v29;
            v28 = (uint64_t **)v29;
          }
          v27 = *v32;
        }
        while (v27);
        if (v28 == &v44)
          goto LABEL_55;
        if (v31 < (unint64_t)v26)
          v29 = (uint64_t *)v30;
        if ((unint64_t)v26 < v29[4])
        {
LABEL_55:
          v33 = v26[10];
          v26[10] = 0;
          if (v33)
          {
            geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(v33);
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v33 + 8));
            MEMORY[0x1A1AF4E00](v33, 0x1020C407A7143E5);
          }
          v34 = (void *)v26[7];
          if (v34)
          {
            v26[8] = v34;
            operator delete(v34);
          }
          v35 = (_QWORD *)v26[4];
          if (v35)
          {
            do
            {
              v37 = (_QWORD *)*v35;
              v38 = v35[5];
              v35[5] = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              operator delete(v35);
              v35 = v37;
            }
            while (v37);
          }
          v36 = (void *)v26[2];
          v26[2] = 0;
          if (v36)
            operator delete(v36);
        }
        ++v24;
        v23 = *((_QWORD *)this + 25);
      }
      while (v24 < v23);
    }
    v39 = (char *)*((_QWORD *)v19 + 1);
    if (v39)
    {
      do
      {
        v40 = v39;
        v39 = *(char **)v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        v40 = (char *)*((_QWORD *)v19 + 2);
        v21 = *(_QWORD *)v40 == (_QWORD)v19;
        v19 = v40;
      }
      while (!v21);
    }
    v19 = v40;
  }
  while (v40 != v20);
  v19 = (char *)*((_QWORD *)this + 22);
  if (v19 != v20)
  {
    do
    {
LABEL_74:
      free(*((void **)v19 + 4));
      v41 = (char *)*((_QWORD *)v19 + 1);
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = *(char **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (char *)*((_QWORD *)v19 + 2);
          v21 = *(_QWORD *)v42 == (_QWORD)v19;
          v19 = v42;
        }
        while (!v21);
      }
      v19 = v42;
    }
    while (v42 != v20);
  }
LABEL_41:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 23));
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = v20;
  *((_QWORD *)this + 27) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v44);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

unint64_t md::MapEngineCallbackGraphService::create(uint64_t a1)
{
  std::__shared_mutex_base *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v77;
  __int128 v78;

  v2 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  v3 = *(char **)(a1 + 216);
  if (!v3)
  {
    v4 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 208), 0x160B39uLL);
    v5 = v4;
    v7 = (uint64_t **)(a1 + 184);
    v6 = *(uint64_t **)(a1 + 184);
    if (v6)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v6;
          v9 = v6[4];
          if ((unint64_t)v4 >= v9)
            break;
          v6 = *v8;
          v7 = v8;
          if (!*v8)
            goto LABEL_9;
        }
        if (v9 >= (unint64_t)v4)
          break;
        v6 = v8[1];
        if (!v6)
        {
          v7 = v8 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v8 = (uint64_t **)(a1 + 184);
LABEL_9:
      v10 = (uint64_t *)operator new(0x28uLL);
      v10[4] = (uint64_t)v5;
      *v10 = 0;
      v10[1] = 0;
      v10[2] = (uint64_t)v8;
      *v7 = v10;
      v11 = **(_QWORD **)(a1 + 176);
      if (v11)
      {
        *(_QWORD *)(a1 + 176) = v11;
        v10 = *v7;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v10);
      ++*(_QWORD *)(a1 + 192);
    }
    v3 = *(char **)(a1 + 216);
    v12 = 88 * *(_QWORD *)(a1 + 200) - 88;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v13 = &v5[v12];
      v14 = &v5[v12];
      do
      {
        *(_QWORD *)v14 = v3;
        v14 -= 88;
        v3 = v13;
        v13 = v14;
      }
      while (v14 >= v5);
      v3 = v14 + 88;
    }
    *(_QWORD *)(a1 + 216) = v3;
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 7) = 0;
  *(_QWORD *)v3 = v3 + 16;
  *((_QWORD *)v3 + 1) = v3 + 56;
  *((_OWORD *)v3 + 2) = 0u;
  *((_DWORD *)v3 + 12) = 1065353216;
  *((_QWORD *)v3 + 8) = 0;
  *((_QWORD *)v3 + 9) = 0;
  v15 = operator new();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)v15 = v15 + 8;
  *(_OWORD *)(v15 + 24) = xmmword_19FFB5120;
  *(_QWORD *)(v15 + 40) = 0;
  *((_QWORD *)v3 + 10) = v15;
  v16 = (_QWORD *)operator new();
  *v16 = v3;
  v16[1] = 1;
  *(_QWORD *)&v77 = v16;
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E428A450;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v16;
  *((_QWORD *)&v77 + 1) = v17;
  v18 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 224) == v18)
  {
    v21 = ((*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 4) | 0x100000000;
    v23 = *(uint64_t **)(a1 + 256);
    v22 = *(_QWORD *)(a1 + 264);
    if ((unint64_t)v23 >= v22)
    {
      v25 = *(uint64_t **)(a1 + 248);
      v26 = v23 - v25;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_95;
      v28 = v22 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          goto LABEL_96;
        v30 = operator new(8 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = (uint64_t *)&v30[8 * v26];
      v32 = &v30[8 * v29];
      *v31 = v21;
      v24 = v31 + 1;
      if (v23 == v25)
      {
        v25 = v23;
      }
      else
      {
        v33 = (char *)v23 - (char *)v25 - 8;
        if (v33 < 0x58)
          goto LABEL_99;
        if ((unint64_t)((char *)v25 - v30) < 0x20)
          goto LABEL_99;
        v34 = (v33 >> 3) + 1;
        v35 = &v30[8 * v26 - 16];
        v36 = v23 - 2;
        v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 4;
          v37 -= 4;
        }
        while (v37);
        v31 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
        v23 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
        if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          do
          {
            v39 = *--v23;
            *--v31 = v39;
          }
          while (v23 != v25);
          v25 = *(uint64_t **)(a1 + 248);
        }
      }
      *(_QWORD *)(a1 + 248) = v31;
      *(_QWORD *)(a1 + 256) = v24;
      *(_QWORD *)(a1 + 264) = v32;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v23 = v21;
      v24 = v23 + 1;
    }
    *(_QWORD *)(a1 + 256) = v24;
    v20 = *(v24 - 1);
  }
  else
  {
    v19 = *(_QWORD *)(v18 - 8);
    *(_QWORD *)(a1 + 232) = v18 - 8;
    *(_DWORD *)(*(_QWORD *)(a1 + 248) + 8 * v19) = (*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 4;
    *(_DWORD *)(*(_QWORD *)(a1 + 248) + 8 * v19 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 248)
                                                                                           + 8 * v19
                                                                                           + 4) << 32)
                                                      + 0x100000000) >> 32;
    v20 = v19 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 248) + 8 * v19 + 4) << 32);
  }
  v41 = *(char **)(a1 + 280);
  v40 = *(_QWORD *)(a1 + 288);
  if ((unint64_t)v41 >= v40)
  {
    v43 = *(char **)(a1 + 272);
    v44 = (v41 - v43) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      goto LABEL_95;
    v46 = v40 - (_QWORD)v43;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 60)
        goto LABEL_96;
      v48 = (char *)operator new(16 * v47);
    }
    else
    {
      v48 = 0;
    }
    v49 = &v48[16 * v44];
    *(_OWORD *)v49 = v77;
    v42 = v49 + 16;
    v50 = &v48[16 * v47];
    v78 = 0uLL;
    if (v41 == v43)
    {
      *(_QWORD *)(a1 + 272) = v49;
      *(_QWORD *)(a1 + 280) = v42;
      *(_QWORD *)(a1 + 288) = v50;
    }
    else
    {
      do
      {
        v51 = *((_OWORD *)v41 - 1);
        v41 -= 16;
        *((_OWORD *)v49 - 1) = v51;
        v49 -= 16;
        *(_QWORD *)v41 = 0;
        *((_QWORD *)v41 + 1) = 0;
      }
      while (v41 != v43);
      v41 = *(char **)(a1 + 272);
      v52 = *(char **)(a1 + 280);
      *(_QWORD *)(a1 + 272) = v49;
      *(_QWORD *)(a1 + 280) = v42;
      *(_QWORD *)(a1 + 288) = v50;
      while (v52 != v41)
      {
        v53 = (std::__shared_weak_count *)*((_QWORD *)v52 - 1);
        if (v53)
        {
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v52 -= 16;
      }
    }
    if (v41)
      operator delete(v41);
  }
  else
  {
    *(_OWORD *)v41 = v77;
    v78 = 0uLL;
    v42 = v41 + 16;
  }
  *(_QWORD *)(a1 + 280) = v42;
  v57 = *(char **)(a1 + 304);
  v56 = *(_QWORD *)(a1 + 312);
  if ((unint64_t)v57 < v56)
  {
    *(_QWORD *)v57 = v20;
    v58 = v57 + 8;
    goto LABEL_89;
  }
  v59 = *(char **)(a1 + 296);
  v60 = (v57 - v59) >> 3;
  v61 = v60 + 1;
  if ((unint64_t)(v60 + 1) >> 61)
LABEL_95:
    abort();
  v62 = v56 - (_QWORD)v59;
  if (v62 >> 2 > v61)
    v61 = v62 >> 2;
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
    v63 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v63 = v61;
  if (v63)
  {
    if (!(v63 >> 61))
    {
      v64 = operator new(8 * v63);
      goto LABEL_80;
    }
LABEL_96:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v64 = 0;
LABEL_80:
  v65 = &v64[8 * v60];
  v66 = &v64[8 * v63];
  *v65 = v20;
  v58 = v65 + 1;
  if (v57 != v59)
  {
    v67 = v57 - v59 - 8;
    if (v67 < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v59 - v64) < 0x20)
      goto LABEL_100;
    v68 = (v67 >> 3) + 1;
    v69 = &v64[8 * v60 - 16];
    v70 = v57 - 16;
    v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v72 = *(_OWORD *)v70;
      *(v69 - 1) = *((_OWORD *)v70 - 1);
      *v69 = v72;
      v69 -= 2;
      v70 -= 32;
      v71 -= 4;
    }
    while (v71);
    v65 -= v68 & 0x3FFFFFFFFFFFFFFCLL;
    v57 -= 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v73 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *--v65 = v73;
      }
      while (v57 != v59);
    }
  }
  *(_QWORD *)(a1 + 296) = v65;
  *(_QWORD *)(a1 + 304) = v58;
  *(_QWORD *)(a1 + 312) = v66;
  if (v59)
    operator delete(v59);
LABEL_89:
  *(_QWORD *)(a1 + 304) = v58;
  if (*((_QWORD *)&v78 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v78 + 1) + 16))(*((_QWORD *)&v78 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v78 + 1));
    }
  }
  std::__shared_mutex_base::unlock(v2);
  return v20;
}

void sub_19FBA99A0(_Unwind_Exception *a1)
{
  std::__shared_mutex_base *v1;
  uint64_t v2;

  MEMORY[0x1A1AF4E00](v2, 0x1020C40EDED9539);
  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::MapEngineCallbackGraphService::get(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t **v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 248);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 256) - v5) >> 3)
    || ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (v10 = (uint64_t **)(*(_QWORD *)(a1 + 272) + 16 * v6), v10 == *(uint64_t ***)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
    return 0;
  }
  else
  {
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    std::__shared_mutex_base::unlock_shared(v4);
    v8 = *v12;
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return v8;
}

void sub_19FBA9AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MapEngineCallbackGraphService::release(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 248);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 256) - v5) >> 3)
    || ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (v8 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    v10 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v17 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    v13 = (unsigned int *)(v10 + 12);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (v17)
    {
      v15 = (unint64_t *)&v17->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_19FBA9C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MapEngineCallbackGraphService::retain(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 248);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 256) - v5) >> 3)
    || ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (v8 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    v10 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v17 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    v13 = (unsigned int *)(v10 + 12);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    if (v17)
    {
      v15 = (unint64_t *)&v17->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_19FBA9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MapEngineCallbackGraphService::addTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int **v10;
  std::__shared_weak_count *v11;
  unsigned int *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;

  v6 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v7 = *(_QWORD *)(a1 + 248);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 256) - v7) >> 3)
    || ((v8 = *(_QWORD *)(v7 + 8 * a2)) != 0 ? (v9 = HIDWORD(a2) == HIDWORD(v8)) : (v9 = 0),
        !v9
     || (v10 = (unsigned int **)(*(_QWORD *)(a1 + 272) + 16 * v8), v10 == *(unsigned int ***)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v6);
  }
  else
  {
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v45 = v11;
    std::__shared_mutex_base::unlock_shared(v6);
    v15 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    v16 = *(_QWORD *)(v15 + 24);
    v18 = *(_BYTE **)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v19 = *(_QWORD *)(v16 + 40);
    if (!v19)
    {
      geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::allocateSlab(*(uint64_t ***)(v15 + 24));
      v19 = *(_QWORD *)(v16 + 40);
    }
    v20 = (v17 - (uint64_t)v18) >> 3;
    *(_QWORD *)(v16 + 40) = *(_QWORD *)v19;
    v21 = *(_QWORD *)(a3 + 24);
    if (v21)
    {
      if (v21 == a3)
      {
        *(_QWORD *)(v19 + 24) = v19;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v19);
      }
      else
      {
        *(_QWORD *)(v19 + 24) = v21;
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v19 + 24) = 0;
    }
    *(_DWORD *)(v19 + 64) = 1;
    *(_BYTE *)(v19 + 95) = 0;
    *(_BYTE *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 96) = v20;
    *(_OWORD *)(v19 + 104) = 0u;
    *(_OWORD *)(v19 + 120) = 0u;
    *(_OWORD *)(v19 + 136) = 0u;
    v23 = *(_QWORD **)(v15 + 8);
    v22 = *(_QWORD *)(v15 + 16);
    if ((unint64_t)v23 >= v22)
    {
      v25 = *(_BYTE **)v15;
      v26 = (uint64_t)v23 - *(_QWORD *)v15;
      v27 = v26 >> 3;
      v28 = (v26 >> 3) + 1;
      if (v28 >> 61)
        abort();
      v29 = v22 - (_QWORD)v25;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[8 * v27];
      v33 = &v31[8 * v30];
      *v32 = v19;
      v24 = v32 + 1;
      if (v23 == (_QWORD *)v25)
      {
        v25 = v23;
      }
      else
      {
        v34 = (char *)v23 - v25 - 8;
        if (v34 < 0x58)
          goto LABEL_53;
        if ((unint64_t)((char *)v23 - v31 - v26) < 0x20)
          goto LABEL_53;
        v35 = (v34 >> 3) + 1;
        v36 = &v31[8 * v27 - 16];
        v37 = (__int128 *)(v23 - 2);
        v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *v36 = v39;
          v36 -= 2;
          v37 -= 2;
          v38 -= 4;
        }
        while (v38);
        v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        v23 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          do
          {
            v40 = *--v23;
            *--v32 = v40;
          }
          while (v23 != (_QWORD *)v25);
          v25 = *(_BYTE **)v15;
        }
      }
      *(_QWORD *)v15 = v32;
      *(_QWORD *)(v15 + 8) = v24;
      *(_QWORD *)(v15 + 16) = v33;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v23 = v19;
      v24 = v23 + 1;
    }
    *(_QWORD *)(v15 + 8) = v24;
    v41 = v12 + 2;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
    if (v45)
    {
      v43 = (unint64_t *)&v45->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_19FBAA040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MapEngineCallbackGraphService::execute(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  _OWORD v30[2];
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 248);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 256) - v5) >> 3)
    || ((v6 = *(_QWORD *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (v8 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 16 * v6), v8 == *(uint64_t **)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
  }
  else
  {
    v10 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v35 = (uint64_t *)v10;
    v36 = v9;
    std::__shared_mutex_base::unlock_shared(v4);
    v13 = (unsigned int *)(v10 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v32 = 0u;
    v33 = 0u;
    v34 = 1065353216;
    v26 = 0u;
    memset(v23, 0, sizeof(v23));
    v24 = 0u;
    v25 = 0u;
    DWORD2(v24) = 1065353216;
    v27 = 0;
    v28 = 1065353216;
    *(_OWORD *)__p = 0u;
    memset(v30, 0, sizeof(v30));
    v15 = *v35;
    v31 = &v32;
    gdc::tf::Executor::consumeGraph((uint64_t)v23, (uint64_t **)(v15 + 56));
    if (__p[0])
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)((char *)v30 + 8);
    v30[0] = *((unint64_t *)&v30[1] + 1);
    v30[1] = 0uLL;
    v31 = 0;
    gdc::tf::Executor::~Executor((gdc::tf::Executor *)v23);
    v16 = (_QWORD *)v33;
    if ((_QWORD)v33)
    {
      do
      {
        v21 = (_QWORD *)*v16;
        v22 = v16[5];
        v16[5] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        operator delete(v16);
        v16 = v21;
      }
      while (v21);
    }
    v17 = (void *)v32;
    *(_QWORD *)&v32 = 0;
    if (v17)
      operator delete(v17);
    v18 = v36;
    if (v36)
    {
      v19 = (unint64_t *)&v36->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_19FBAA22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void md::MapEngineCallbackGraphService::cleanup(md::MapEngineCallbackGraphService *this)
{
  std::__shared_mutex_base *v2;
  gdc::tf::Taskflow ***v3;
  gdc::tf::Taskflow **v4;
  int v5;
  unsigned int v6;
  gdc::tf::Taskflow *v7;
  _QWORD *v8;
  gdc::tf::Taskflow ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  unint64_t *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  std::__shared_mutex_base *v57;

  v2 = (std::__shared_mutex_base *)((char *)this + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 8));
  v3 = (gdc::tf::Taskflow ***)*((_QWORD *)this + 34);
  while (v3 != *((gdc::tf::Taskflow ****)this + 35))
  {
    v5 = atomic_load((unsigned int *)*v3 + 3);
    if (v5 > 0 || (v6 = atomic_load((unsigned int *)*v3 + 2)) != 0)
    {
      v4 = *v3;
      v3 += 2;
      atomic_store(0, (unsigned int *)v4 + 2);
    }
    else
    {
      v7 = **v3;
      if (v7 && *((_QWORD *)this + 24))
      {
        gdc::tf::Taskflow::~Taskflow(v7);
        *v8 = *((_QWORD *)this + 27);
        *((_QWORD *)this + 27) = v8;
      }
      v9 = (gdc::tf::Taskflow ***)*((_QWORD *)this + 35);
      if (v9 != v3)
      {
        v10 = *((_QWORD *)this + 34);
        v11 = (uint64_t)v3 - v10;
        v12 = *((_QWORD *)this + 37);
        v13 = *(_QWORD *)(v12 + (((uint64_t)v3 - v10) >> 1));
        v14 = *((_QWORD *)this + 31);
        if (v13 >= (*((_QWORD *)this + 32) - v14) >> 3)
        {
          v3 = (gdc::tf::Taskflow ***)*((_QWORD *)this + 35);
        }
        else
        {
          v15 = *(_QWORD *)(v14 + 8 * v13);
          v17 = v15 == 0;
          v16 = HIDWORD(v15);
          v17 = !v17 && HIDWORD(*(_QWORD *)(v14 + 8 * *(_QWORD *)(v12 + (((uint64_t)v3 - v10) >> 1)))) == (_DWORD)v16;
          if (v17)
          {
            v57 = v2;
            v19 = (unint64_t *)*((_QWORD *)this + 29);
            v18 = *((_QWORD *)this + 30);
            if ((unint64_t)v19 >= v18)
            {
              v21 = (unint64_t *)*((_QWORD *)this + 28);
              v22 = (char *)v19 - (char *)v21;
              v23 = v19 - v21;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61)
                abort();
              v25 = v18 - (_QWORD)v21;
              if (v25 >> 2 > v24)
                v24 = v25 >> 2;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v24;
              if (v26)
              {
                if (v26 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v27 = v26;
                v28 = operator new(8 * v26);
                v26 = v27;
                v22 = (char *)v19 - (char *)v21;
                v23 = v19 - v21;
              }
              else
              {
                v28 = 0;
              }
              v29 = (unint64_t *)&v28[8 * v23];
              *v29 = v13;
              v20 = v29 + 1;
              if (v19 != v21)
              {
                v30 = (char *)v19 - (char *)v21 - 8;
                if (v30 < 0x58)
                  goto LABEL_59;
                if ((unint64_t)((char *)v19 - v28 - v22) < 0x20)
                  goto LABEL_59;
                v31 = (v30 >> 3) + 1;
                v32 = &v28[8 * v23 - 16];
                v33 = v19 - 2;
                v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v35 = *(_OWORD *)v33;
                  *(v32 - 1) = *((_OWORD *)v33 - 1);
                  *v32 = v35;
                  v32 -= 2;
                  v33 -= 4;
                  v34 -= 4;
                }
                while (v34);
                v29 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
                v19 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
                if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_59:
                  do
                  {
                    v36 = *--v19;
                    *--v29 = v36;
                  }
                  while (v19 != v21);
                }
              }
              *((_QWORD *)this + 28) = v29;
              *((_QWORD *)this + 29) = v20;
              *((_QWORD *)this + 30) = &v28[8 * v26];
              if (v21)
              {
                v37 = v20;
                operator delete(v21);
                v20 = v37;
                v14 = *((_QWORD *)this + 31);
                v10 = *((_QWORD *)this + 34);
                v9 = (gdc::tf::Taskflow ***)*((_QWORD *)this + 35);
                v12 = *((_QWORD *)this + 37);
              }
            }
            else
            {
              *v19 = v13;
              v20 = v19 + 1;
            }
            *((_QWORD *)this + 29) = v20;
            v38 = *(unsigned int *)(v14 + 8 * v13);
            v39 = *(_QWORD *)(v12 + (((uint64_t)v9 - v10) >> 1) - 8);
            v40 = (__int128 *)(v10 + 16 * v38);
            v41 = *v40;
            *(_QWORD *)v40 = 0;
            *((_QWORD *)v40 + 1) = 0;
            v42 = *((_OWORD *)v9 - 1);
            *(v9 - 2) = 0;
            *(v9 - 1) = 0;
            v43 = (std::__shared_weak_count *)*((_QWORD *)v40 + 1);
            *v40 = v42;
            if (v43)
            {
              p_shared_owners = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(p_shared_owners);
              while (__stlxr(v45 - 1, p_shared_owners));
              if (!v45)
              {
                v56 = v41;
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
                v41 = v56;
              }
            }
            v46 = (std::__shared_weak_count *)*(v9 - 1);
            *((_OWORD *)v9 - 1) = v41;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            *(_DWORD *)(*((_QWORD *)this + 31) + 8 * v39) = v38;
            v49 = *((_QWORD *)this + 37);
            v50 = *((_QWORD *)this + 38);
            v51 = *(_QWORD *)(v49 + 8 * v38);
            *(_QWORD *)(v49 + 8 * v38) = *(_QWORD *)(v50 - 8);
            *(_QWORD *)(v50 - 8) = v51;
            v52 = *((_QWORD *)this + 35);
            v53 = *(std::__shared_weak_count **)(v52 - 8);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            *((_QWORD *)this + 35) = v52 - 16;
            *((_QWORD *)this + 38) -= 8;
            *(_DWORD *)(*((_QWORD *)this + 31) + 8 * v13 + 4) = (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 31) + 8 * v13 + 4) << 32)
                                                               + 0x100000000) >> 32;
            *(_DWORD *)(*((_QWORD *)this + 31) + 8 * v13) = (*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3;
            v3 = (gdc::tf::Taskflow ***)(*((_QWORD *)this + 34) + 16 * (v11 >> 4));
            v2 = v57;
          }
          else
          {
            v3 = (gdc::tf::Taskflow ***)*((_QWORD *)this + 35);
          }
        }
      }
    }
  }
  std::__shared_mutex_base::unlock(v2);
}

void sub_19FBAA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_mutex_base *a14)
{
  std::__shared_mutex_base::unlock(a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource *,std::shared_ptr<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>::__shared_ptr_default_delete<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource,md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>,std::allocator<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource *,std::shared_ptr<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>::__shared_ptr_default_delete<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource,md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>,std::allocator<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void sub_19FBAAA24(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 184));
  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::~OverlayLayerDataSource(md::OverlayLayerDataSource *this)
{
  md::OverlayLayerDataSource::~OverlayLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  md::OverlayLayerDataSource *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E429D718;
  v2 = *(_QWORD *)(*((_QWORD *)this + 73) + 56);
  v27[0] = &off_1E42D0FB8;
  v28 = v27;
  geo::TaskQueue::barrierSync(v2, v27);
  v3 = v28;
  if (v28 == v27)
  {
    v4 = 4;
    v3 = v27;
    goto LABEL_5;
  }
  if (v28)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *((_QWORD *)this + 99);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 8));
  *(_QWORD *)v5 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 8));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  *(_OWORD *)((char *)this + 792) = 0u;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (void *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;

  *((_QWORD *)this + 112) = &off_1E42B52D0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 111);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  v11 = (md::OverlayLayerDataSource *)*((_QWORD *)this + 109);
  if (v11 == (md::OverlayLayerDataSource *)((char *)this + 848))
  {
    v12 = 4;
    v11 = (md::OverlayLayerDataSource *)((char *)this + 848);
    goto LABEL_17;
  }
  if (v11)
  {
    v12 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 105);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void *)*((_QWORD *)this + 96);
  if (v22)
  {
    *((_QWORD *)this + 97) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 93);
  if (v23)
  {
    *((_QWORD *)this + 94) = v23;
    operator delete(v23);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 88));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 84));
  if (*((_BYTE *)this + 640))
    *((_BYTE *)this + 640) = 0;
  *((_QWORD *)this + 75) = &off_1E42B4D50;

  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

void md::OverlayLayerDataSource::didActivate(md::OverlayLayerDataSource *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  md::OverlayLayerDataSource *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 109);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v11);
    v3 = v11;
    v4 = v12;
    if (v12)
    {
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    *((_QWORD *)this + 110) = v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 111);
    *((_QWORD *)this + 111) = v4;
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      v4 = v12;
    }
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::OverlayLayerDataSource::didDeactivate(v10);
  }
}

void md::OverlayLayerDataSource::didDeactivate(md::OverlayLayerDataSource *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 111);
  *((_OWORD *)this + 55) = 0u;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void md::OverlayLayerDataSource::addFallbackData(md::OverlayLayerDataSource *this, const gdc::SelectionContext *a2)
{
  unint64_t *v3;
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  __int16 v23;
  const gdc::LayerDataRequestKey *v24;
  _QWORD *v25;
  uint64_t v26;
  const QuadTile *v27;
  char *v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int64x2_t v32;
  unsigned __int128 v33;
  unsigned __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int64x2_t v37;
  __int16 *v38;
  __int16 *v39;
  __int16 *v40;
  __int16 *v41;
  char v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50[8];
  void *v51;
  void *v52;
  unsigned __int16 v53;
  char *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  __int16 v63;
  uint64_t v64;
  char v65[4];
  int v66;
  int v67;
  __int16 *v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[3];
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)*((_QWORD *)a2 + 1);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v47 = (uint64_t)v3;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v53, v3, *((unsigned __int16 *)this + 16));
  v4 = v53;
  v6 = v54;
  v5 = (char *)v55;
  v7 = v56;
  v8 = (char *)this + 640;
  v9 = (unsigned __int16)v57;
  v49 = v58;
  v48 = v59;
LABEL_3:
  while (v4 != v9 || v6 != v49 || v7 != v48)
  {
    v10 = v6[113];
    v11 = *(_QWORD *)(v6 + 116);
    v12 = v6[112];
    v13 = (_DWORD *)*((_QWORD *)v6 + 2);
    v14 = v13[2];
    v15 = v13[3];
    v16 = v14;
    LODWORD(v13) = *v13;
    v17 = 1 << v14;
    v18 = (*(_DWORD *)(*((_QWORD *)v6 + 2) + 4) % v17 + v17) % v17;
    v65[0] = v15;
    v65[1] = v14;
    v19 = ((int)v13 % v17 + v17) % v17;
    v66 = v18;
    v67 = v19;
    if (v16 > 0x1E
      || ((v20 = vcvtmd_s64_f64((double)v19 / (double)v17), v20 >= 0) ? (v21 = v20) : (v21 = -v20), v21 > 0x7F))
    {
      LOBYTE(v20) = 0;
      LOBYTE(v16) = 0;
      v22 = 0;
      if (*v8)
        goto LABEL_13;
LABEL_12:
      *v8 = 1;
      goto LABEL_13;
    }
    v30.i64[0] = ((v19 + v17) % v17) | ((unint64_t)((v19 + v17) % v17) << 16);
    v30.i64[1] = ((v18 + v17) % v17) | ((unint64_t)((v18 + v17) % v17) << 16);
    v31.i64[0] = 0xFFFF0000FFFFLL;
    v31.i64[1] = 0xFFFF0000FFFFLL;
    v32 = (int64x2_t)vandq_s8(v30, v31);
    v33 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v32, 8uLL), (int8x16_t)v32) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v34 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v33, 4uLL), (int8x16_t)v33) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
    v31.i64[0] = 0x3333333333333333;
    v31.i64[1] = 0x3333333333333333;
    v35 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v34, 2uLL), (int8x16_t)v34), v31);
    v36 = (int8x16_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)xmmword_19FFB2DB0);
    v35.i64[1] *= 2;
    v37 = (int64x2_t)vandq_s8(vorrq_s8(v36, v35), (int8x16_t)xmmword_19FFB2DC0);
    v22 = vorrq_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64(v37, 1)).u64[0];
    if (!*v8)
      goto LABEL_12;
LABEL_13:
    *((_QWORD *)this + 81) = v22;
    *((_BYTE *)this + 656) = v16;
    *((_BYTE *)this + 657) = v20;
    v23 = *((_WORD *)this + 16);
    v24 = (const gdc::LayerDataRequestKey *)*((_QWORD *)this + 2);
    v71[0] = &off_1E42C6F00;
    v71[1] = md::TileAdjustmentHelpers::dataKeyForTile;
    v72 = v71;
    md::TileAdjustmentHelpers::getFallbackDataForTile((int64x2_t *)((char *)this + 744), v23, v65, v24, (uint64_t)v71, (uint64_t)this + 640);
    v25 = v72;
    if (v72 == v71)
    {
      v25 = v71;
      v26 = 4;
      goto LABEL_17;
    }
    if (v72)
    {
      v26 = 5;
LABEL_17:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
    LOBYTE(v63) = v12;
    HIBYTE(v63) = v10;
    v64 = v11;
    gdc::FallbackCollector::collectFallbackData((uint64_t)this + 640, (void **)&v68, 1, 0, &v63);
    gdc::FallbackCollector::end((md::OverlayLayerDataSource *)((char *)this + 640), v27);
    v28 = v6 + 144;
    v6 = v5;
    if (v28 != v5)
    {
      v6 = v28;
      while (1)
      {
        if (*((unsigned __int16 *)v6 + 4) == v4)
        {
          v29 = *((_QWORD *)v6 + 17);
          if (!*(_QWORD *)(v7 + 144 * v29 + 112) || *(_BYTE *)(v7 + 144 * v29 + 136))
            break;
        }
        v6 += 144;
        if (v6 == v5)
        {
          v6 = v5;
          goto LABEL_3;
        }
      }
    }
  }
  v38 = v68;
  v39 = (__int16 *)v69;
  if (v68 == (__int16 *)v69)
  {
    if (v68)
      goto LABEL_50;
  }
  else
  {
    v40 = v68 + 56;
    do
    {
      v42 = *(_BYTE *)(*(_QWORD *)v40 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v50, (uint64_t)(v40 - 44));
      LOBYTE(v53) = v42;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v54, (uint64_t)v50);
      v61 = 0;
      v62 = (v60
           - 0x61C8864680B583EBLL
           + ((v53 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v53 - 0x61C8864680B583EBLL) >> 2)) ^ (v53
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v47, (uint64_t)&v53, v40 - 56, v40);
      if (v61)
        v61 = 0;
      if (v55 != v57)
        free(v55);
      if (v51 != v52)
        free(v51);
      v41 = v40 + 8;
      v40 += 64;
    }
    while (v41 != v39);
    if (v38)
    {
      if (v38 != v39)
      {
        do
        {
          v43 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = (void *)*((_QWORD *)v39 - 12);
          if (v46 != *((void **)v39 - 10))
            free(v46);
          v39 -= 64;
        }
        while (v39 != v38);
        v38 = v68;
      }
LABEL_50:
      operator delete(v38);
    }
  }
}

void sub_19FBAB03C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  _BYTE v5[16];
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11[2];
  char v12;

  gdc::LayerDataSource::createDebugNode((_QWORD *)a1, a2);
  v12 = 13;
  strcpy((char *)v11, "Content Scale");
  v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 624)));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 2;
  v6 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v11, (uint64_t)v5);
  if (v12 < 0)
    operator delete(v11[0]);
}

void md::OverlayLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int32x2_t *v5;
  __int32 v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  id *v10;
  id *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  id v48;
  void *v49;
  uint64_t v50;
  int v51;
  id v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  _BYTE *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id *v85;
  id *v86;
  id *v87;
  void (**v88)(id *);
  uint64_t *v89;
  id *v90;
  uint64_t *v92;
  void *v93;
  unsigned int v94;
  id *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  _BOOL4 v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  id v107;
  unsigned int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[4];
  int32x2_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  id *v117;
  id *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  char v123[32];
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  char v130[8];

  v89 = a3;
  if (a2 != a3)
  {
    v3 = a2;
    v4 = a1;
LABEL_5:
    v5 = *(int32x2_t **)(*v3 + 16);
    v6 = v5[1].i32[0];
    v112[0] = v5[1].i32[1];
    v112[1] = v6;
    v113 = vrev64_s32(*v5);
    v7 = *(unsigned __int16 *)(v4 + 32);
    v8 = v7 == 71 || v7 == 11;
    v9 = *(_QWORD *)(v4 + 632);
    if (v8)
    {
      std::mutex::lock((std::mutex *)(v9 + 232));
      v117 = 0;
      v118 = 0;
      v119 = 0;
      std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v117, *(_QWORD *)(v9 + 160), *(_QWORD *)(v9 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 160)) >> 3));
    }
    else
    {
      std::mutex::lock((std::mutex *)(v9 + 232));
      v117 = 0;
      v118 = 0;
      v119 = 0;
      std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v117, *(_QWORD *)(v9 + 184), *(_QWORD *)(v9 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 192) - *(_QWORD *)(v9 + 184)) >> 3));
    }
    std::mutex::unlock((std::mutex *)(v9 + 232));
    v11 = v117;
    v10 = v118;
    if (v117 == v118)
      goto LABEL_127;
    v94 = *(unsigned __int16 *)(v4 + 32) - 71;
    v92 = v3;
    v90 = v118;
    while (1)
    {
      v12 = v11[1];
      v96 = objc_msgSend(v12, "areResourcesRequired");

      if ((((v94 < 2) ^ v96) & 1) != 0)
        goto LABEL_16;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v13 = v11[1];
      objc_msgSend(v13, "customTileProvider");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      v109 = v14;
      v95 = v11;
      if (v14)
      {
        v15 = *v3;
        if (*(_BYTE *)(*v3 + 96))
          v16 = *(_DWORD *)(v15 + 100);
        else
          v16 = 2147483646;
        v103 = v16;
        v101 = *(_QWORD *)(v15 + 112);
        v18 = v14;
        v105 = objc_msgSend(v18, "tileSize");
        v19 = objc_msgSend(v18, "minimumZ");
        v107 = v18;
        v20 = objc_msgSend(v18, "maximumZ");
        v126 = 0;
        v127 = 0;
        v128 = 0;
        md::TileAdjustmentHelpers::adjustTileForSize(0x200u, v105, (uint64_t)v112, &v126);
        v22 = v126;
        v21 = v127;
        if (v126 != v127)
        {
          v17 = 0;
          v23 = v18;
          v99 = v127;
          while (1)
          {
            v24 = *(unsigned __int8 *)(v22 + 1);
            if (v19 <= v24 && v20 >= v24)
              break;
LABEL_26:
            v22 += 24;
            if (v22 == v21)
            {
              v22 = v126;
              if (v126)
                goto LABEL_62;
              goto LABEL_63;
            }
          }
          v26 = v19;
          v110 = *(_QWORD *)(v22 + 4);
          v27 = objc_msgSend(v23, "providerID");
          LOBYTE(v120) = 0;
          WORD1(v120) = 41;
          HIDWORD(v120) = v103;
          *(_QWORD *)&v121 = v123;
          *((_QWORD *)&v121 + 1) = v123;
          *(_QWORD *)&v122 = v123;
          *((_QWORD *)&v122 + 1) = 32;
          v124 = 0;
          v129 = HIDWORD(v110);
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, v123, (char *)&v129, v130);
          v129 = v110;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          v129 = v24;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          v129 = v27;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          v129 = v105;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          v28 = (unsigned __int8 *)v121;
          v29 = *((_QWORD *)&v121 + 1) - v121;
          if (*((_QWORD *)&v121 + 1) == (_QWORD)v121)
          {
            v30 = 0;
            v19 = v26;
          }
          else
          {
            v30 = 0;
            if (v29 <= 1)
              v29 = 1;
            v19 = v26;
            do
            {
              v31 = *v28++;
              v30 ^= (v30 << 6) - 0x61C8864680B583EBLL + (v30 >> 2) + v31;
              --v29;
            }
            while (v29);
          }
          v124 = v30;
          *((_QWORD *)&v125 + 1) = v101;
          if ((unint64_t)v17 < v116)
          {
            v32 = v17 + 5;
            *v17 = v120;
            v17[1] = v17 + 5;
            v17[2] = v17 + 5;
            v17[3] = v17 + 5;
            v33 = v122;
            v17[4] = *((_QWORD *)&v122 + 1);
            v34 = (char *)v121;
            if ((_QWORD)v121 != v33)
            {
              *(_OWORD *)(v17 + 1) = v121;
              v121 = 0u;
              v122 = 0u;
              goto LABEL_58;
            }
            v17[2] = &v32[*((_QWORD *)&v121 + 1) - v121];
            v35 = (char *)*((_QWORD *)&v121 + 1);
            if (v34 == *((char **)&v121 + 1))
              goto LABEL_58;
            v36 = *((_QWORD *)&v121 + 1) - (_QWORD)v34;
            if (*((_QWORD *)&v121 + 1) - (_QWORD)v34 >= 8uLL && (unint64_t)((char *)v17 - v34 + 40) >= 0x20)
            {
              if (v36 < 0x20)
              {
                v37 = 0;
LABEL_52:
                v42 = v36 & 0xFFFFFFFFFFFFFFF8;
                v32 += v36 & 0xFFFFFFFFFFFFFFF8;
                v43 = v37 - (v36 & 0xFFFFFFFFFFFFFFF8);
                v44 = (uint64_t *)&v34[v37];
                v45 = (_QWORD *)((char *)v17 + v37 + 40);
                do
                {
                  v46 = *v44++;
                  *v45++ = v46;
                  v43 += 8;
                }
                while (v43);
                if (v36 != v42)
                {
                  v34 += v42;
                  goto LABEL_57;
                }
LABEL_58:
                v17[9] = v124;
                *((_OWORD *)v17 + 5) = v125;
                v17 += 12;
LABEL_59:
                v115 = v17;
                if ((_QWORD)v121 != (_QWORD)v122)
                  free((void *)v121);
                v23 = v107;
                v21 = v99;
                goto LABEL_26;
              }
              v37 = v36 & 0xFFFFFFFFFFFFFFE0;
              v38 = (__int128 *)(v34 + 16);
              v39 = v17 + 7;
              v40 = v36 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v41 = *v38;
                *(v39 - 1) = *(v38 - 1);
                *v39 = v41;
                v38 += 2;
                v39 += 2;
                v40 -= 32;
              }
              while (v40);
              if (v36 == v37)
                goto LABEL_58;
              if ((v36 & 0x18) != 0)
                goto LABEL_52;
              v34 += v37;
              v32 += v37;
            }
            do
            {
LABEL_57:
              v47 = *v34++;
              *v32++ = v47;
            }
            while (v34 != v35);
            goto LABEL_58;
          }
          v17 = std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(&v114, (uint64_t)&v120);
          goto LABEL_59;
        }
        v17 = 0;
        v23 = v18;
        if (v126)
        {
LABEL_62:
          operator delete((void *)v22);
          v23 = v107;
        }
LABEL_63:

        v4 = a1;
        v3 = v92;
        v11 = v95;
      }
      else
      {
        v17 = 0;
      }
      v48 = v11[1];
      objc_msgSend(v48, "rasterTileProvider");
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      v93 = v49;
      if (v49)
      {
        v50 = *v3;
        if (*(_BYTE *)(*v3 + 96))
          v51 = *(_DWORD *)(v50 + 100);
        else
          v51 = 2147483646;
        v106 = v51;
        v104 = *(_QWORD *)(v50 + 112);
        v52 = v49;
        v108 = objc_msgSend(v52, "tileSize");
        v53 = objc_msgSend(v52, "minimumZ");
        v100 = objc_msgSend(v52, "maximumZ");
        v54 = objc_msgSend(v52, "colorMap");
        v126 = 0;
        v127 = 0;
        v128 = 0;
        md::TileAdjustmentHelpers::adjustTileForSize(0x200u, v108, (uint64_t)v112, &v126);
        v55 = v126;
        v98 = v127;
        if (v126 != v127)
        {
          v102 = v54 != 0;
          v97 = v53;
          while (1)
          {
            v56 = *(unsigned __int8 *)(v55 + 1);
            if (v53 <= v56 && v100 >= v56)
              break;
LABEL_73:
            v55 += 24;
            if (v55 == v98)
            {
              v55 = v126;
              goto LABEL_111;
            }
          }
          v58 = 0;
          while (2)
          {
            if (v58 >= objc_msgSend(v52, "keyframesCount", v89))
            {
              v53 = v97;
              goto LABEL_73;
            }
            v111 = *(_QWORD *)(v55 + 4);
            v59 = *(unsigned __int8 *)(v55 + 1);
            v60 = objc_msgSend(v52, "providerID");
            LOBYTE(v120) = 0;
            WORD1(v120) = 35;
            HIDWORD(v120) = v106;
            *(_QWORD *)&v121 = v123;
            *((_QWORD *)&v121 + 1) = v123;
            *(_QWORD *)&v122 = v123;
            *((_QWORD *)&v122 + 1) = 32;
            v124 = 0;
            v129 = HIDWORD(v111);
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, v123, (char *)&v129, v130);
            v129 = v111;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v129 = v59;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v129 = v60;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v129 = v108;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v129 = v58;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v129 = v102;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            v61 = (unsigned __int8 *)v121;
            v62 = *((_QWORD *)&v121 + 1) - v121;
            if (*((_QWORD *)&v121 + 1) == (_QWORD)v121)
            {
              v63 = 0;
            }
            else
            {
              v63 = 0;
              if (v62 <= 1)
                v62 = 1;
              do
              {
                v64 = *v61++;
                v63 ^= (v63 << 6) - 0x61C8864680B583EBLL + (v63 >> 2) + v64;
                --v62;
              }
              while (v62);
            }
            v124 = v63;
            *((_QWORD *)&v125 + 1) = v104;
            if ((unint64_t)v17 < v116)
            {
              v65 = v17 + 5;
              *v17 = v120;
              v17[1] = v17 + 5;
              v17[2] = v17 + 5;
              v17[3] = v17 + 5;
              v66 = v122;
              v17[4] = *((_QWORD *)&v122 + 1);
              v67 = (char *)v121;
              if ((_QWORD)v121 != v66)
              {
                *(_OWORD *)(v17 + 1) = v121;
                v121 = 0u;
                v122 = 0u;
                goto LABEL_107;
              }
              v17[2] = &v65[*((_QWORD *)&v121 + 1) - v121];
              v68 = (char *)*((_QWORD *)&v121 + 1);
              if (v67 == *((char **)&v121 + 1))
                goto LABEL_107;
              v69 = *((_QWORD *)&v121 + 1) - (_QWORD)v67;
              if (*((_QWORD *)&v121 + 1) - (_QWORD)v67 >= 8uLL && (unint64_t)((char *)v17 - v67 + 40) >= 0x20)
              {
                if (v69 < 0x20)
                {
                  v70 = 0;
LABEL_101:
                  v75 = v69 & 0xFFFFFFFFFFFFFFF8;
                  v65 += v69 & 0xFFFFFFFFFFFFFFF8;
                  v76 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
                  v77 = (uint64_t *)&v67[v70];
                  v78 = (_QWORD *)((char *)v17 + v70 + 40);
                  do
                  {
                    v79 = *v77++;
                    *v78++ = v79;
                    v76 += 8;
                  }
                  while (v76);
                  if (v69 != v75)
                  {
                    v67 += v75;
                    goto LABEL_106;
                  }
LABEL_107:
                  v17[9] = v124;
                  *((_OWORD *)v17 + 5) = v125;
                  v17 += 12;
LABEL_108:
                  v115 = v17;
                  if ((_QWORD)v121 != (_QWORD)v122)
                    free((void *)v121);
                  ++v58;
                  continue;
                }
                v70 = v69 & 0xFFFFFFFFFFFFFFE0;
                v71 = (__int128 *)(v67 + 16);
                v72 = v17 + 7;
                v73 = v69 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v74 = *v71;
                  *(v72 - 1) = *(v71 - 1);
                  *v72 = v74;
                  v71 += 2;
                  v72 += 2;
                  v73 -= 32;
                }
                while (v73);
                if (v69 == v70)
                  goto LABEL_107;
                if ((v69 & 0x18) != 0)
                  goto LABEL_101;
                v67 += v70;
                v65 += v70;
              }
              do
              {
LABEL_106:
                v80 = *v67++;
                *v65++ = v80;
              }
              while (v67 != v68);
              goto LABEL_107;
            }
            break;
          }
          v17 = std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(&v114, (uint64_t)&v120);
          goto LABEL_108;
        }
LABEL_111:
        if (v55)
          operator delete((void *)v55);

        v4 = a1;
        v3 = v92;
        v11 = v95;
      }
      v81 = v114;
      if (v114 != v17)
        break;

      if (v81)
        goto LABEL_14;
LABEL_15:
      v10 = v90;
LABEL_16:
      v11 += 3;
      if (v11 == v10)
      {
        v11 = v117;
LABEL_127:
        if (v11)
        {
          v85 = v11;
          if (v118 != v11)
          {
            v86 = v118 - 3;
            v87 = v118 - 3;
            do
            {
              v88 = (void (**)(id *))*v87;
              v87 -= 3;
              (*v88)(v86);
              v8 = v86 == v11;
              v86 = v87;
            }
            while (!v8);
            v85 = v117;
          }
          v118 = v11;
          operator delete(v85);
        }
        v3 += 2;
        if (v3 == v89)
          return;
        goto LABEL_5;
      }
    }
    v82 = (uint64_t)v114;
    if ((v96 & 1) != 0)
    {
      v83 = (uint64_t)v114;
      do
      {
        gdc::LayerDataRequest::request(*v3, v83, 0);
        v83 += 96;
      }
      while ((_QWORD *)v83 != v17);
    }
    else
    {
      do
      {
        gdc::LayerDataRequest::request(*v3, v82, *(_BYTE *)(v4 + 628) == 0);
        v82 += 96;
      }
      while ((_QWORD *)v82 != v17);
    }

    if (!v81)
      goto LABEL_15;
    for (; v17 != v81; v17 -= 12)
    {
      v84 = (void *)*(v17 - 11);
      if (v84 != (void *)*(v17 - 9))
        free(v84);
    }
LABEL_14:
    operator delete(v81);
    goto LABEL_15;
  }
}

void sub_19FBABB20(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FBABB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *__p,char *a31,uint64_t a32,char *a33,char *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;
  uint64_t v41;
  void *v43;
  char *v44;
  void *v46;
  char *v47;
  char *v48;
  void (**v49)(char *);
  BOOL v50;

  v43 = *(void **)(v41 - 120);
  if (v43)
    operator delete(v43);

  if (__p)
  {
    while (a31 != __p)
    {
      v46 = (void *)*((_QWORD *)a31 - 11);
      if (v46 != *((void **)a31 - 9))
        free(v46);
      a31 -= 96;
    }
    operator delete(__p);
    v44 = a33;
    if (!a33)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v44 = a33;
    if (!a33)
      goto LABEL_5;
  }
  if (a34 != v44)
  {
    v47 = a34 - 24;
    v48 = a34 - 24;
    do
    {
      v49 = *(void (***)(char *))v48;
      v48 -= 24;
      (*v49)(v47);
      v50 = v47 == v44;
      v47 = v48;
    }
    while (!v50);
    v44 = a33;
  }
  operator delete(v44);
  _Unwind_Resume(a1);
}

uint64_t md::OverlayLayerDataSource::fallbackSettings(md::OverlayLayerDataSource *this)
{
  return 65537;
}

uint64_t md::OverlayLayerDataSource::createLayerData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int32x2_t *v8;
  __int32 v9;
  id v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  id v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void (***v28)(char *);
  void (**v29)(char *);
  BOOL v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unsigned __int8 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  void (***v39)(char *);
  void (**v40)(char *);
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  char *v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void *__p;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  _WORD v125[2];
  int32x2_t v126;

  v8 = *(int32x2_t **)(a2 + 16);
  v9 = v8[1].i32[0];
  LOBYTE(v125[0]) = v8[1].i32[1];
  HIBYTE(v125[0]) = v9;
  v126 = vrev64_s32(*v8);
  v10 = *(id *)(a1 + 608);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v10, "gglDevice") + 24))(&v124);

  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v12 = ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v122 = v12;
  v123 = v11;
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v120);
  v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 624)));
  if (v13 <= 1.9)
    v14 = v13;
  else
    v14 = 1.0;
  v118 = 0uLL;
  v119 = 0;
  v115 = (uint64_t)&v115;
  v116 = &v115;
  v117 = 0;
  objc_msgSend(*(id *)(a1 + 904), "size");
  *(_QWORD *)&v114 = v15;
  *((_QWORD *)&v114 + 1) = v16;
  v17 = *(unsigned __int16 *)(a2 + 8);
  if (v17 > 0x46)
  {
    if (v17 != 81 && v17 != 72)
    {
      if (v17 != 71)
        goto LABEL_41;
      goto LABEL_25;
    }
    goto LABEL_11;
  }
  if (v17 == 11)
  {
LABEL_25:
    v18 = *(id *)(a1 + 608);
    v31 = *(_QWORD *)(a1 + 632);
    std::mutex::lock((std::mutex *)(v31 + 232));
    __p = 0;
    v112 = 0;
    v113 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(_QWORD *)(v31 + 160), *(_QWORD *)(v31 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v31 + 168) - *(_QWORD *)(v31 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v31 + 232));
    v109 = v122;
    v110 = v123;
    if (v123)
    {
      p_shared_owners = (unint64_t *)&v123->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v34 = *(unsigned __int16 *)(a1 + 32) - 71 < 2;
    v106 = 0u;
    v107 = 0u;
    v108 = 1065353216;
    _processOverlays((uint64_t)v125, &v114, v18, &v124, (uint64_t *)&__p, &v115, a3, &v109, v14, &v120, (void (*)(uint64_t))(a1 + 832), 0, v34, &v106);
    v35 = v110;
    if (v110)
    {
      v36 = (unint64_t *)&v110->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v26 = (char *)__p;
    if (!__p)
      goto LABEL_40;
    if (v112 == __p)
    {
LABEL_39:
      operator delete(v26);
LABEL_40:

      goto LABEL_41;
    }
    v38 = v112 - 24;
    v39 = (void (***)(char *))(v112 - 24);
    do
    {
      v40 = *v39;
      v39 -= 3;
      (*v40)(v38);
      v30 = v38 == v26;
      v38 = (char *)v39;
    }
    while (!v30);
LABEL_38:
    v26 = (char *)__p;
    goto LABEL_39;
  }
  if (v17 == 12)
  {
LABEL_11:
    v18 = *(id *)(a1 + 608);
    v19 = *(_QWORD *)(a1 + 632);
    std::mutex::lock((std::mutex *)(v19 + 232));
    __p = 0;
    v112 = 0;
    v113 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(_QWORD *)(v19 + 184), *(_QWORD *)(v19 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v19 + 192) - *(_QWORD *)(v19 + 184)) >> 3));
    std::mutex::unlock((std::mutex *)(v19 + 232));
    v104 = v122;
    v105 = v123;
    if (v123)
    {
      v20 = (unint64_t *)&v123->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(unsigned __int16 *)(a1 + 32) - 71 < 2;
    v106 = 0u;
    v107 = 0u;
    v108 = 1065353216;
    _processOverlays((uint64_t)v125, &v114, v18, &v124, (uint64_t *)&__p, &v115, a3, &v104, v14, &v120, (void (*)(uint64_t))(a1 + 832), (void **)&v118, v22, &v106);
    v23 = v105;
    if (v105)
    {
      v24 = (unint64_t *)&v105->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (char *)__p;
    if (!__p)
      goto LABEL_40;
    if (v112 == __p)
      goto LABEL_39;
    v27 = v112 - 24;
    v28 = (void (***)(char *))(v112 - 24);
    do
    {
      v29 = *v28;
      v28 -= 3;
      (*v29)(v27);
      v30 = v27 == v26;
      v27 = (char *)v28;
    }
    while (!v30);
    goto LABEL_38;
  }
LABEL_41:
  v102 = 0;
  v103 = 0;
  if ((_QWORD)v118 == *((_QWORD *)&v118 + 1))
    goto LABEL_62;
  *(_QWORD *)&v106 = 0;
  v41 = *(std::__shared_weak_count **)(a1 + 888);
  if (!v41)
    goto LABEL_62;
  v42 = std::__shared_weak_count::lock(v41);
  *((_QWORD *)&v106 + 1) = v42;
  if (!v42)
    goto LABEL_62;
  *(_QWORD *)&v106 = *(_QWORD *)(a1 + 880);
  if (!(_QWORD)v106)
  {
    v56 = v42;
LABEL_58:
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    goto LABEL_62;
  }
  v43 = (char *)operator new(0x48uLL);
  v44 = (std::__shared_weak_count *)v43;
  *((_QWORD *)v43 + 1) = 0;
  v45 = (unint64_t *)(v43 + 8);
  *((_QWORD *)v43 + 2) = 0;
  *(_QWORD *)v43 = &off_1E42DB3C8;
  *((_WORD *)v43 + 12) = v125[0];
  v46 = v43 + 24;
  *(int32x2_t *)(v43 + 28) = v126;
  __p = v43 + 24;
  v112 = v43;
  v47 = v118;
  *((_OWORD *)v43 + 3) = v118;
  *((_QWORD *)v43 + 8) = v119;
  v118 = 0uLL;
  v119 = 0;
  v48 = (_QWORD *)*((_QWORD *)&v47 + 1);
  v49 = (_QWORD *)v47;
  if ((_QWORD)v47 != *((_QWORD *)&v47 + 1))
  {
    v50 = (unint64_t *)(v43 + 16);
    do
    {
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      v52 = (std::__shared_weak_count *)v49[1];
      *v49 = v46;
      v49[1] = v44;
      if (v52)
        std::__shared_weak_count::__release_weak(v52);
      v49 += 7;
    }
    while (v49 != v48);
  }
  v53 = (std::__shared_weak_count *)operator new(0x170uLL);
  v53->__shared_owners_ = 0;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF88;
  md::LabelTile::LabelTile((uint64_t)&v53[1], (uint64_t)v125, (unint64_t *)&__p, &v106);
  v102 = v54;
  v103 = v53;
  do
    v55 = __ldaxr(v45);
  while (__stlxr(v55 - 1, v45));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
    goto LABEL_58;
LABEL_62:
  v59 = (char *)operator new(0x448uLL);
  *((_QWORD *)v59 + 1) = 0;
  *((_QWORD *)v59 + 2) = 0;
  *(_QWORD *)v59 = &off_1E42DB470;
  v60 = *(_QWORD *)(a1 + 824);
  v106 = 0uLL;
  *(_QWORD *)&v107 = 0;
  __p = 0;
  v112 = 0;
  md::MapTileData::MapTileData((uint64_t)(v59 + 24), a2, (uint64_t)&v106, (uint64_t)&__p, 1);
  *((_QWORD *)v59 + 3) = &off_1E4290958;
  *((_QWORD *)v59 + 82) = &unk_1E4290998;
  v61 = v123;
  *((_QWORD *)v59 + 93) = v122;
  *((_QWORD *)v59 + 94) = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = v121;
  *((_QWORD *)v59 + 95) = v120;
  *((_QWORD *)v59 + 96) = v64;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  *((_QWORD *)v59 + 97) = v59 + 776;
  *((_QWORD *)v59 + 98) = v59 + 776;
  *((_QWORD *)v59 + 99) = 0;
  v67 = v117;
  if (v117)
  {
    v69 = v115;
    v68 = v116;
    v70 = *v116;
    *(_QWORD *)(v70 + 8) = *(_QWORD *)(v115 + 8);
    **(_QWORD **)(v69 + 8) = v70;
    v71 = *((_QWORD *)v59 + 97);
    *(_QWORD *)(v71 + 8) = v68;
    *v68 = v71;
    *((_QWORD *)v59 + 97) = v69;
    *(_QWORD *)(v69 + 8) = v59 + 776;
    *((_QWORD *)v59 + 99) = v67;
    v117 = 0;
  }
  *((_QWORD *)v59 + 100) = v59 + 800;
  *((_QWORD *)v59 + 101) = v59 + 800;
  *((_QWORD *)v59 + 102) = 0;
  *((_QWORD *)v59 + 103) = v59 + 824;
  *((_QWORD *)v59 + 104) = v59 + 824;
  *((_QWORD *)v59 + 105) = 0;
  *((_QWORD *)v59 + 106) = v102;
  *((_QWORD *)v59 + 107) = v103;
  if (v103)
  {
    v72 = (unint64_t *)&v103->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  *((_QWORD *)v59 + 108) = v60;
  *(_OWORD *)(v59 + 872) = 0u;
  *(_OWORD *)(v59 + 888) = 0u;
  *(_OWORD *)(v59 + 904) = 0u;
  *(_OWORD *)(v59 + 920) = 0u;
  *(_OWORD *)(v59 + 936) = 0u;
  *(_OWORD *)(v59 + 952) = 0u;
  *(_OWORD *)(v59 + 968) = 0u;
  *(_OWORD *)(v59 + 984) = 0u;
  *(_OWORD *)(v59 + 1000) = 0u;
  *(_OWORD *)(v59 + 1016) = 0u;
  *(_OWORD *)(v59 + 1032) = 0u;
  *(_OWORD *)(v59 + 1048) = 0u;
  *(_OWORD *)(v59 + 1064) = 0u;
  *(_OWORD *)(v59 + 1080) = 0u;
  v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v59 + 896), 0);
  if ((_DWORD)v74)
    geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
  *a4 = v59 + 24;
  a4[1] = v59;
  if (v103)
  {
    v76 = (unint64_t *)&v103->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v117)
  {
    v78 = v115;
    v79 = v116;
    v80 = *v116;
    *(_QWORD *)(v80 + 8) = *(_QWORD *)(v115 + 8);
    **(_QWORD **)(v78 + 8) = v80;
    v117 = 0;
    if (v79 != &v115)
    {
      do
      {
        v81 = (uint64_t *)v79[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v79 + 2));
        operator delete(v79);
        v79 = v81;
      }
      while (v81 != &v115);
    }
  }
  v82 = v118;
  if ((_QWORD)v118)
  {
    v83 = *((_QWORD *)&v118 + 1);
    v84 = (void *)v118;
    if (*((_QWORD *)&v118 + 1) != (_QWORD)v118)
    {
      do
      {
        v85 = *(_QWORD *)(v83 - 24);
        if (v85)
        {
          v86 = *(_QWORD *)(v83 - 16);
          v87 = *(void **)(v83 - 24);
          if (v86 != v85)
          {
            v88 = *(_QWORD *)(v83 - 16);
            do
            {
              v90 = *(void **)(v88 - 24);
              v88 -= 24;
              v89 = v90;
              if (v90)
              {
                *(_QWORD *)(v86 - 16) = v89;
                operator delete(v89);
              }
              v86 = v88;
            }
            while (v88 != v85);
            v87 = *(void **)(v83 - 24);
          }
          *(_QWORD *)(v83 - 16) = v85;
          operator delete(v87);
        }
        v91 = *(std::__shared_weak_count **)(v83 - 48);
        if (v91)
          std::__shared_weak_count::__release_weak(v91);
        v83 -= 56;
      }
      while (v83 != v82);
      v84 = (void *)v118;
    }
    *((_QWORD *)&v118 + 1) = v82;
    operator delete(v84);
  }
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v123;
  if (v123)
  {
    v96 = (unint64_t *)&v123->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  result = v124;
  if (v124)
  {
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124);
    v100 = v124;
    v124 = 0;
    *(_QWORD *)&v106 = v100;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v99 + 48))(v99, &v106);
    v101 = v106;
    *(_QWORD *)&v106 = 0;
    if (v101)
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    result = v124;
    v124 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19FBAC5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  void *v35;

  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::list<md::OverlayTileData::OverlayTileResource>::~list(&a32);
  std::vector<md::LabelClientTileOverlay>::~vector[abi:nn180100]((void **)(v33 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 144);
  ggl::Loader::~Loader((ggl::Loader *)(v33 - 128));
  _Unwind_Resume(a1);
}

void sub_19FBAC850()
{
  JUMPOUT(0x19FBAC838);
}

void sub_19FBAC858()
{
  JUMPOUT(0x19FBAC840);
}

void sub_19FBAC860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _processOverlays(uint64_t a1, __int128 *a2, void *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, float a9, uint64_t *a10, void (*a11)(uint64_t a1), void **a12, unsigned __int8 a13, _QWORD *a14)
{
  md::PolygonOverlayRenderable *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  uint64_t (**v20)();
  id v21;
  id v22;
  void *v23;
  _BOOL4 v24;
  void *v25;
  _BOOL4 v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  unsigned __int8 *v37;
  void (***v38)(_QWORD);
  void (***v39)(_QWORD);
  void *v40;
  uint64_t (**v41)();
  void (***v42)(_QWORD);
  void (***v43)(_QWORD);
  void (**v44)(_QWORD);
  void *v46;
  unint64_t v47;
  id v48;
  void *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  id v58;
  void *v59;
  char *v60;
  md::PolygonOverlayRenderable *v61;
  void **v62;
  void *v63;
  void *v64;
  md::PolygonOverlayRenderable *v65;
  md::PolygonOverlayRenderable *v66;
  md::PolygonOverlayRenderable *v67;
  void (**v68)(md::PolygonOverlayRenderable *);
  char *v69;
  unsigned __int8 *v70;
  int v71;
  double v72;
  unsigned __int8 *v73;
  int8x8_t v74;
  unint64_t v75;
  uint8x8_t v76;
  unint64_t v77;
  uint64_t ***v78;
  uint64_t **v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  id v98;
  void *v99;
  void *v100;
  md::PolygonOverlayRenderable **v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  unsigned int v113;
  double v114;
  BOOL v115;
  int32x2_t *v116;
  __int32 v117;
  _QWORD *v118;
  _QWORD *v119;
  int v120;
  int32x2_t *v121;
  __int32 v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  char *v129;
  char *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 *v146;
  uint64_t v147;
  _QWORD *v148;
  void *v149;
  CGImage *v150;
  unint64_t Width;
  _QWORD *v152;
  void *v153;
  CGColorSpace *v154;
  CGContext *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  md::PolygonOverlayRenderable *v175;
  md::PolygonOverlayRenderable *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  __int128 v180;
  int v181;
  md::PolygonOverlayRenderable *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  int v198;
  _OWORD *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  void *v206;
  md::PolygonOverlayRenderable *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  md::MaskingOverlayRenderable *v228;
  md::MaskingOverlayRenderable *v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  _QWORD *v246;
  int v247;
  int32x2_t *v248;
  __int32 v249;
  md::PolygonOverlayRenderable *v250;
  id *v251;
  unint64_t *v252;
  unint64_t v253;
  id v254;
  uint64_t v255;
  md::PolygonOverlayRenderable *v256;
  md::PolygonOverlayRenderable *v257;
  md::MaskingOverlayRenderable *v258;
  id v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  id *v270;
  void *v271;
  void **v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  int v299;
  _OWORD *v300;
  uint64_t v301;
  id *v302;
  id v303;
  void *v304;
  id v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  void *v309;
  int v310;
  double **v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  unint64_t *v315;
  unint64_t v316;
  char v317;
  int v318;
  int v319;
  void **v320;
  void **v321;
  double *v322;
  double *v323;
  double v324;
  double *v325;
  double v326;
  double v327;
  uint64_t v328;
  double v329;
  unint64_t v330;
  uint64_t v331;
  float64x2_t v332;
  int8x16_t v333;
  float64x2_t v334;
  int64x2_t v335;
  uint64_t v336;
  float64x2_t v337;
  uint64_t v338;
  float64x2_t v339;
  const double *v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  char *v353;
  float *v354;
  unint64_t v355;
  float *v356;
  unsigned int v357;
  int v358;
  int v359;
  double v360;
  int v361;
  double v362;
  double v363;
  double v364;
  double *v365;
  double v366;
  double v367;
  double v368;
  double v369;
  int v373;
  double v374;
  float v375;
  float v376;
  _BOOL4 v377;
  _BOOL4 v378;
  int v379;
  int v380;
  double v381;
  double v382;
  char v383;
  double v384;
  float v385;
  float v386;
  double v387;
  double v388;
  uint64_t v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  _BYTE *v399;
  double v400;
  double v401;
  double v402;
  float *v403;
  unint64_t v404;
  float *v405;
  float *v406;
  uint64_t v407;
  float v408;
  float v409;
  char *v410;
  void *v411;
  char *v412;
  int64_t v413;
  int64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  _BYTE *v418;
  float *v419;
  unint64_t v420;
  double v421;
  double v422;
  BOOL v423;
  double v424;
  uint64_t v425;
  _OWORD *v426;
  float *v427;
  uint64_t v428;
  __int128 v429;
  unint64_t v430;
  uint64_t v431;
  _OWORD *v432;
  char *v433;
  uint64_t v434;
  __int128 v435;
  int v436;
  int v437;
  double v438;
  float v439;
  float v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  char *v444;
  float *v445;
  unint64_t v446;
  float *v447;
  float *v448;
  uint64_t v449;
  double v450;
  double v451;
  char *v452;
  float v453;
  void *v454;
  char *v455;
  int64_t v456;
  int64_t v457;
  unint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  _BYTE *v462;
  float *v463;
  float v464;
  unint64_t v465;
  uint64_t v466;
  _OWORD *v467;
  char *v468;
  uint64_t v469;
  __int128 v470;
  int v471;
  char *v472;
  void *v473;
  int v474;
  double v475;
  float v476;
  float v477;
  char *v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  double v482;
  char *v483;
  float *v484;
  unint64_t v485;
  float *v486;
  float *v487;
  uint64_t v488;
  double v489;
  double v490;
  double v491;
  double v492;
  char *v493;
  float v494;
  void *v495;
  char v496;
  double v497;
  char *v498;
  int64_t v499;
  int64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  _BYTE *v505;
  float *v506;
  float v507;
  unint64_t v508;
  uint64_t v509;
  _OWORD *v510;
  char *v511;
  uint64_t v512;
  __int128 v513;
  int v514;
  uint64_t v515;
  char *v516;
  float *v517;
  uint64_t v518;
  __int128 v519;
  uint64_t v520;
  char *v521;
  float *v522;
  uint64_t v523;
  __int128 v524;
  void *v525;
  unint64_t *v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  double v530;
  double v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  void *v538;
  void *v539;
  char v540;
  id v541;
  int v542;
  int v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v556;
  double v557;
  double v558;
  double v559;
  double v560;
  double v561;
  int v562;
  int v563;
  double v564;
  double v565;
  BOOL v566;
  double v567;
  double v568;
  double v569;
  _BYTE *v573;
  int v574;
  uint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  int v581;
  _DWORD *v582;
  id v583;
  id v584;
  id v585;
  uint64_t v586;
  uint64_t i;
  void *v588;
  __int16 v589;
  _QWORD *v590;
  char *v591;
  unint64_t *v592;
  unint64_t v593;
  std::__shared_weak_count *v594;
  md::PolygonOverlayRenderable *v595;
  unint64_t *v596;
  unint64_t v597;
  md::PolygonOverlayRenderable *v598;
  md::PolygonOverlayRenderable *v599;
  uint64_t v600;
  __int128 v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  double v608;
  double v609;
  uint64_t v610;
  __int128 v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  float v617;
  char *v618;
  md::PolygonOverlayRenderable **v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  _QWORD *v623;
  os_unfair_lock_s *v624;
  uint64_t v625;
  uint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  std::__shared_weak_count *v631;
  void *v632;
  char *v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  unint64_t v636;
  md::MaskingOverlayRenderable **v637;
  uint64_t v638;
  void *v639;
  char *v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  md::MaskingOverlayRenderable **v644;
  uint64_t v645;
  md::PolygonOverlayRenderable *v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  __int16 v651;
  void **v652;
  unint64_t *v653;
  unint64_t *v654;
  unint64_t v655;
  std::__shared_weak_count *v656;
  _QWORD *v657;
  unint64_t *v658;
  unint64_t v659;
  void **v660;
  unsigned int v661;
  void *v662;
  float v663;
  float v664;
  void *v665;
  float v666;
  float v667;
  double v668;
  float64x2_t **v669;
  float64x2_t *v670;
  uint64_t v671;
  unint64_t v672;
  double *v673;
  double *v674;
  char *v675;
  double v676;
  unint64_t v677;
  int v678;
  float64x2_t *v681;
  double v685;
  double v688;
  double v689;
  double v690;
  double *v691;
  double v692;
  double v693;
  double v694;
  double v695;
  double v696;
  int v697;
  __double2 v698;
  double v699;
  double v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  char *v704;
  double *v705;
  char *v706;
  char *v707;
  double *v708;
  uint64_t v709;
  unint64_t v710;
  unint64_t v711;
  char *v712;
  double *v713;
  _QWORD *v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  uint64_t v718;
  unint64_t *v719;
  unint64_t v720;
  _QWORD *v721;
  char *v722;
  unint64_t *v723;
  unint64_t v724;
  os_unfair_lock_s *v725;
  uint64_t v726;
  os_unfair_lock_s *v727;
  os_unfair_lock_s *v728;
  char **v729;
  char *v730;
  char *v731;
  unint64_t v732;
  double v733;
  double v734;
  double v735;
  double v736;
  uint64_t v737;
  float64x2_t v738;
  float64x2_t v739;
  const double *v740;
  uint64_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  const double *v748;
  double v749;
  double v750;
  md::PolygonOverlayRenderable *v751;
  void *v752;
  _QWORD *v753;
  _QWORD **v754;
  uint64_t v755;
  uint64_t v756;
  __int128 v757;
  std::__shared_weak_count *v758;
  md::PolygonOverlayRenderable *v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  char *v763;
  char *v764;
  void *v765;
  _QWORD *v766;
  _QWORD **v767;
  uint64_t v768;
  uint64_t v769;
  char *v770;
  __int128 v771;
  __int128 v772;
  CGContext *v773;
  __int128 v774;
  CGContext *v775;
  uint64_t v776;
  __int128 v777;
  char *v778;
  uint64_t *v779;
  char *v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  CGContextRef v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  unint64_t *v790;
  unint64_t v791;
  void **v792;
  _QWORD **v793;
  uint64_t v794;
  void **v795;
  std::__shared_weak_count *v796;
  unint64_t *v797;
  unint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  _BYTE *v802;
  uint64_t v803;
  unint64_t *v804;
  unint64_t v805;
  unint64_t *p_shared_owners;
  unint64_t v807;
  void **v808;
  _QWORD **v809;
  uint64_t v810;
  uint64_t v811;
  unint64_t *v812;
  unint64_t v813;
  md::PolygonOverlayRenderable *v814;
  uint64_t v815;
  _QWORD *v816;
  _QWORD *v817;
  _QWORD *v818;
  uint64_t v819;
  gss::Allocator *v820;
  uint64_t v821;
  void *v822;
  void *v823;
  void *v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  unint64_t v828;
  unint64_t v829;
  void **v830;
  std::__shared_weak_count *v831;
  unint64_t *v832;
  unint64_t v833;
  char *v834;
  md::MaskingOverlayRenderable *v835;
  md::MaskingOverlayRenderable *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t *v840;
  unint64_t v841;
  char *v842;
  _QWORD *v843;
  uint64_t v844;
  void *v845;
  md::PolygonOverlayRenderable *v846;
  md::PolygonOverlayRenderable *v847;
  md::PolygonOverlayRenderable *v848;
  void *v849;
  void *v850;
  _QWORD *v851;
  md::PolygonOverlayRenderable *v852;
  std::__shared_weak_count *v853;
  unint64_t *v854;
  unint64_t v855;
  std::__shared_weak_count *v856;
  unint64_t *v857;
  unint64_t v858;
  _OWORD *v859;
  uint64_t v860;
  md::PolygonOverlayRenderable *v861;
  md::PolygonOverlayRenderable *v862;
  void *v863;
  void *v864;
  md::MaskingOverlayRenderable *v865;
  md::MaskingOverlayRenderable *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t *v870;
  unint64_t v871;
  __int128 v872;
  uint64_t v873;
  void **v874;
  uint64_t v875;
  uint64_t *v876;
  uint64_t v877;
  _QWORD *v878;
  void **v879;
  char *v880;
  char *v881;
  md::MaskingOverlayRenderable *v882;
  uint64_t v883;
  unint64_t *v884;
  unint64_t v885;
  char *v886;
  unint64_t v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  char *v891;
  char *v892;
  md::MaskingOverlayRenderable *v893;
  uint64_t v894;
  unint64_t *v895;
  unint64_t v896;
  char *v897;
  char *v898;
  char *v899;
  uint64_t v900;
  char *v901;
  char *v902;
  __int128 v903;
  char *v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  uint64_t v908;
  std::__shared_weak_count *v909;
  unint64_t *v910;
  unint64_t v911;
  _QWORD *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  void *v916;
  std::__shared_weak_count *v917;
  unint64_t *v918;
  unint64_t v919;
  char *v920;
  char *v921;
  uint64_t v922;
  std::__shared_weak_count *v923;
  unint64_t *v924;
  unint64_t v925;
  unint64_t *v926;
  unint64_t v927;
  uint64_t v928;
  unint64_t *v929;
  unint64_t v930;
  char *v931;
  unint64_t *v932;
  unint64_t v933;
  unint64_t *v934;
  unint64_t v935;
  std::__shared_weak_count *v936;
  uint64_t v937;
  unint64_t *v938;
  unint64_t v939;
  std::__shared_weak_count *v940;
  unint64_t *v941;
  unint64_t v942;
  md::PolygonOverlayRenderable *v943;
  CGContextRef v944;
  uint64_t *v945;
  uint64_t v946;
  unint64_t *v947;
  unint64_t v948;
  __int128 v949;
  char *v950;
  _QWORD *v951;
  md::PolygonOverlayRenderable *v952;
  std::__shared_weak_count *v953;
  unint64_t *v954;
  unint64_t v955;
  uint64_t *v956;
  char *v957;
  char *v958;
  char *v959;
  unint64_t *v960;
  unint64_t v961;
  unsigned __int8 v962;
  char *v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  int32x2_t v967;
  char v968;
  unsigned __int8 v969;
  unint64_t v970;
  char *v971;
  uint64_t v972;
  char *v973;
  unint64_t v974;
  char *v975;
  char *v976;
  char *v977;
  _QWORD *v978;
  __int128 v979;
  char *v980;
  void *v981;
  void *v982;
  __int128 v983;
  unint64_t v984;
  uint64_t *v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  unint64_t v991;
  unint64_t v992;
  uint64_t v993;
  unint64_t v994;
  uint64_t v995;
  unint64_t v996;
  unsigned __int8 v997;
  unint64_t *v998;
  unint64_t v999;
  _BYTE *v1000;
  char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  unsigned __int8 v1013;
  unint64_t *v1014;
  unint64_t v1015;
  _BYTE *v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  uint64_t *v1022;
  char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  _OWORD *v1026;
  __int128 *v1027;
  uint64_t v1028;
  __int128 v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  unint64_t v1034;
  uint64_t *v1035;
  char *v1036;
  unint64_t v1037;
  uint64_t v1038;
  _OWORD *v1039;
  __int128 *v1040;
  uint64_t v1041;
  __int128 v1042;
  uint64_t v1043;
  char *v1044;
  uint64_t v1045;
  char *v1046;
  char *v1047;
  unint64_t v1048;
  unint64_t v1049;
  unint64_t v1050;
  char *v1051;
  uint64_t v1052;
  uint64_t v1053;
  _OWORD *v1054;
  __int128 *v1055;
  uint64_t v1056;
  __int128 v1057;
  uint64_t v1058;
  unint64_t v1059;
  char *v1060;
  char *v1061;
  int v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1067;
  uint64_t v1068;
  __int128 *v1069;
  _OWORD *v1070;
  uint64_t v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  char *v1076;
  uint64_t v1077;
  char *v1078;
  char *v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  char *v1083;
  uint64_t v1084;
  uint64_t v1085;
  _OWORD *v1086;
  __int128 *v1087;
  uint64_t v1088;
  __int128 v1089;
  uint64_t v1090;
  unint64_t v1091;
  char *v1092;
  char *v1093;
  int v1094;
  uint64_t v1095;
  unint64_t v1096;
  _QWORD *v1097;
  unint64_t v1098;
  uint64_t v1099;
  __int128 *v1100;
  _OWORD *v1101;
  uint64_t v1102;
  __int128 v1103;
  uint64_t v1104;
  unint64_t v1105;
  char *v1106;
  uint64_t v1107;
  unsigned __int8 v1108;
  unint64_t *v1109;
  char *v1110;
  unint64_t v1111;
  char *v1112;
  char *v1113;
  unint64_t v1114;
  uint64_t v1115;
  __int128 *v1116;
  _OWORD *v1117;
  uint64_t v1118;
  __int128 v1119;
  uint64_t v1120;
  unint64_t v1121;
  char *v1122;
  uint64_t v1123;
  char *v1124;
  unint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  _OWORD *v1128;
  __int128 *v1129;
  uint64_t v1130;
  __int128 v1131;
  uint64_t v1132;
  unint64_t v1133;
  unint64_t v1134;
  unint64_t v1135;
  uint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  unsigned __int8 v1143;
  unint64_t *v1144;
  unint64_t v1145;
  _BYTE *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t *v1149;
  unint64_t v1150;
  uint64_t *v1151;
  char *v1152;
  uint64_t v1153;
  uint64_t v1154;
  _OWORD *v1155;
  __int128 *v1156;
  uint64_t v1157;
  __int128 v1158;
  uint64_t v1159;
  char *v1160;
  uint64_t v1161;
  char *v1162;
  char *v1163;
  unint64_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  char *v1167;
  uint64_t v1168;
  uint64_t v1169;
  _OWORD *v1170;
  __int128 *v1171;
  uint64_t v1172;
  __int128 v1173;
  uint64_t v1174;
  unint64_t v1175;
  char *v1176;
  char *v1177;
  int v1178;
  unint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  __int128 *v1182;
  _OWORD *v1183;
  uint64_t v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  _OWORD *v1193;
  __int128 v1194;
  uint64_t v1195;
  char *v1196;
  uint64_t v1197;
  uint64_t v1198;
  __int128 *v1199;
  _OWORD *v1200;
  uint64_t v1201;
  __int128 v1202;
  uint64_t v1203;
  unint64_t v1204;
  char *v1205;
  uint64_t v1206;
  char *v1207;
  unint64_t v1208;
  unint64_t v1209;
  char *v1210;
  unint64_t v1211;
  char *v1212;
  unint64_t v1213;
  uint64_t v1214;
  char *v1215;
  char *v1216;
  unint64_t v1217;
  unint64_t v1218;
  BOOL v1219;
  BOOL v1220;
  BOOL v1221;
  BOOL v1222;
  BOOL v1223;
  BOOL v1224;
  BOOL v1225;
  BOOL v1226;
  BOOL v1227;
  unint64_t v1228;
  uint64_t v1229;
  const float *v1230;
  float *v1231;
  uint64_t v1232;
  unint64_t v1233;
  char *v1234;
  unint64_t v1235;
  char *v1236;
  unint64_t v1237;
  uint64_t v1238;
  char *v1239;
  char *v1240;
  unint64_t v1241;
  unint64_t v1242;
  BOOL v1244;
  BOOL v1246;
  BOOL v1248;
  BOOL v1250;
  unint64_t v1252;
  uint64_t v1253;
  const float *v1254;
  float *v1255;
  uint64_t v1256;
  uint64_t v1257;
  BOOL v1258;
  uint64_t v1259;
  uint64_t v1260;
  __int128 *v1261;
  _OWORD *v1262;
  uint64_t v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  uint64_t v1268;
  __int128 *v1269;
  _OWORD *v1270;
  uint64_t v1271;
  __int128 v1272;
  uint64_t v1273;
  __int128 *v1274;
  _OWORD *v1275;
  uint64_t v1276;
  __int128 v1277;
  char *v1278;
  uint64_t v1279;
  uint64_t v1280;
  char *v1281;
  uint64_t v1282;
  uint64_t v1283;
  char *v1284;
  __int128 v1285;
  uint64_t v1286;
  unint64_t *v1287;
  unsigned __int8 v1288;
  unint64_t v1289;
  char *v1290;
  unint64_t v1291;
  char *v1292;
  unint64_t v1293;
  uint64_t v1294;
  char *v1295;
  char *v1296;
  unint64_t v1297;
  unint64_t v1298;
  BOOL v1299;
  BOOL v1300;
  BOOL v1301;
  BOOL v1302;
  BOOL v1303;
  BOOL v1304;
  BOOL v1305;
  BOOL v1306;
  BOOL v1307;
  unint64_t v1308;
  uint64_t v1309;
  const float *v1310;
  float *v1311;
  uint64_t v1312;
  uint64_t v1313;
  __int128 *v1314;
  _OWORD *v1315;
  uint64_t v1316;
  __int128 v1317;
  _QWORD *v1318;
  uint64_t v1319;
  __int128 v1320;
  char *v1321;
  unint64_t v1322;
  char *v1323;
  char *v1324;
  char *v1325;
  _QWORD *v1326;
  __int128 v1327;
  char *v1328;
  void *v1329;
  void *v1330;
  uint64_t v1331;
  unint64_t v1332;
  _QWORD *v1333;
  _QWORD *v1334;
  uint64_t v1335;
  unint64_t v1336;
  unint64_t v1337;
  char *v1338;
  char *v1339;
  char *v1340;
  uint64_t v1341;
  char *v1342;
  char *v1343;
  uint64_t v1344;
  _QWORD *v1345;
  uint64_t v1346;
  unint64_t v1347;
  void *v1348;
  void *v1349;
  void *v1350;
  std::__shared_weak_count *v1351;
  _QWORD *v1352;
  _QWORD *v1353;
  void *v1354;
  void *v1355;
  uint64_t *v1356;
  void *v1357;
  void *v1358;
  char **v1359;
  int64_t v1360;
  char *v1361;
  uint64_t *v1362;
  std::__shared_weak_count *v1363;
  unint64_t *v1364;
  unint64_t v1365;
  void *v1366;
  unint64_t *v1367;
  unint64_t v1368;
  unint64_t *v1369;
  unint64_t v1370;
  uint64_t v1371;
  std::__shared_weak_count *v1372;
  unint64_t *v1373;
  unint64_t v1374;
  md::PolygonOverlayRenderable *v1375;
  CGContextRef v1376;
  md::PolygonOverlayRenderable *v1377;
  md::PolygonOverlayRenderable *v1378;
  md::PolygonOverlayRenderable *v1379;
  std::__shared_weak_count *v1380;
  unint64_t *v1381;
  unint64_t v1382;
  int v1383;
  _QWORD *v1384;
  void *v1385;
  uint64_t v1386;
  _DWORD *v1387;
  _OWORD *v1388;
  void **v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  md::PolygonOverlayRenderable *v1393;
  _DWORD *v1394;
  _BYTE *v1395;
  id v1396;
  CGContext *v1397;
  int v1398;
  int v1399;
  _DWORD *v1400;
  uint64_t v1401;
  unint64_t v1402;
  unint64_t v1403;
  _BYTE *v1404;
  _DWORD *v1405;
  unint64_t v1406;
  _DWORD *v1407;
  int v1408;
  uint64_t v1409;
  _OWORD *v1410;
  __int128 *v1411;
  uint64_t v1412;
  __int128 v1413;
  id v1414;
  void *v1415;
  unint64_t *v1416;
  unint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  unint64_t *v1420;
  unint64_t v1421;
  char *v1422;
  unint64_t *v1423;
  unint64_t v1424;
  _QWORD *v1425;
  int v1426;
  uint64_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  char *v1430;
  uint64_t v1431;
  std::__shared_weak_count *v1432;
  unint64_t *v1433;
  unint64_t v1434;
  std::__shared_weak_count *v1435;
  unint64_t *v1436;
  unint64_t v1437;
  std::__shared_weak_count *v1438;
  unint64_t *v1439;
  unint64_t v1440;
  void (***v1441)(_QWORD);
  void (***v1442)(_QWORD);
  void *v1443;
  unsigned __int8 *v1444;
  void (***v1445)(_QWORD);
  void (***v1446)(_QWORD);
  void (**v1447)(_QWORD);
  int v1449;
  const __CFString *name;
  id v1452;
  double v1454;
  double v1455;
  double v1456;
  id *v1457;
  double v1460;
  id v1461;
  unsigned __int8 *v1463;
  unsigned __int8 *v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  void *v1468;
  id *v1469;
  uint64_t v1470;
  char *__p;
  float v1472;
  int64_t v1473;
  void *v1474;
  void *v1475;
  double v1476;
  int v1477;
  id *v1478;
  md::PolygonOverlayRenderable *v1479;
  double v1480;
  double v1481;
  double v1482;
  char *v1483;
  double v1484;
  double v1485;
  double v1486;
  uint64_t v1488;
  char **v1489;
  _QWORD *v1490;
  id v1491;
  double **v1492;
  double v1493;
  double v1494;
  double v1495;
  md::PolygonOverlayRenderable *v1496;
  double v1497;
  _DWORD *v1498;
  BOOL v1499;
  void *v1500;
  double v1501;
  CGContextRef v1502;
  double v1503;
  double v1504;
  unsigned int v1505;
  char *v1506;
  float v1507;
  float v1508;
  md::PolygonOverlayRenderable *v1509;
  double v1510;
  char v1511;
  double v1512;
  double v1513;
  uint64_t *v1514;
  id v1515;
  double v1516;
  float64x2_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  char v1520;
  void **v1521;
  unint64_t *v1522;
  uint64_t v1523;
  uint64_t v1524;
  unsigned int v1525;
  int v1526;
  int v1527;
  void *v1528[2];
  unsigned __int8 v1529;
  char *v1530;
  unint64_t v1531;
  unint64_t v1532;
  unint64_t v1533;
  char v1534;
  uint64_t v1535;
  int v1536;
  int v1537;
  double v1538;
  char *v1539;
  md::PolygonOverlayRenderable *v1540;
  __int16 v1541;
  uint64_t v1542;
  double v1543;
  uint64_t *v1544;
  char *v1545;
  unint64_t v1546;
  uint64_t v1547;
  char v1548;
  double v1549;
  double v1550;
  unint64_t *v1551;
  char v1552;
  uint64_t v1553;
  void *v1554;
  double v1555;
  double v1556;
  __int128 v1557;
  __int128 v1558;
  uint64_t v1559;
  __int128 v1560;
  int v1561;
  uint64_t v1562;
  std::__shared_weak_count *v1563;
  __int128 v1564;
  int v1565;
  _DWORD v1566[2];
  uint64_t v1567;
  void **v1568;
  std::__shared_weak_count *v1569;
  void *v1570;
  void *v1571;
  unint64_t v1572;
  uint64_t (*v1573)(uint64_t, uint64_t);
  uint64_t (*v1574)(uint64_t);
  uint64_t v1575;
  uint64_t v1576;
  void *v1577;
  std::__shared_weak_count *v1578;
  uint64_t v1579;
  void *v1580[2];
  uint64_t v1581;
  void *v1582[2];
  void *v1583;
  md::PolygonOverlayRenderable *v1584[2];
  CGContextRef c[2];
  void (*v1586)(uint64_t);
  __int128 v1587;
  __int128 v1588;
  uint64_t v1589;
  int v1590;
  void *v1591[2];
  void *v1592[2];
  __int128 v1593;
  __int128 v1594;
  __int128 v1595;
  __int128 v1596;
  md::PolygonOverlayRenderable *v1597[2];
  __int128 v1598;
  __int128 v1599;
  __int128 v1600;
  md::MaskingOverlayRenderable *v1601;
  uint64_t v1602;
  __int16 v1603;
  md::MaskingOverlayRenderable **v1604;
  __int128 v1605;
  __int128 v1606;
  __int128 v1607;
  uint64_t v1608;
  float32x4x2_t v1609;
  float32x4x2_t v1610;
  float32x4x2_t v1611;
  float64x2x2_t v1612;
  float64x2x2_t v1613;
  float64x2x2_t v1614;
  CGRect v1615;

  v15 = (md::PolygonOverlayRenderable *)a1;
  v1608 = *MEMORY[0x1E0C80C00];
  v1452 = a3;
  v16 = *((unsigned __int8 *)v15 + 1) | 0x200000000;
  v1566[0] = *((_DWORD *)v15 + 2);
  v1566[1] = *((_DWORD *)v15 + 1);
  v1567 = v16;
  v17 = *a5;
  j = a5[1];
  if (*a5 == j)
  {
    v70 = 0;
    v69 = 0;
LABEL_1754:
    if (v70)
      goto LABEL_1755;
    goto LABEL_1757;
  }
  v19 = 0;
  __p = 0;
  v1464 = 0;
  v1545 = 0;
  v20 = &off_1E42B54F0;
  v1533 = j;
  do
  {
    v21 = *(id *)(v17 + 8);
    if (objc_msgSend(v21, "areResourcesRequired") != a13)
      goto LABEL_69;
    v22 = v21;
    if ((objc_msgSend(v22, "canProvideVectorData") & 1) != 0)
    {
      LODWORD(v15) = 2;
    }
    else
    {
      objc_msgSend(v22, "rasterTileProvider");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23 == 0;

      if (v24)
      {
        objc_msgSend(v22, "customTileProvider");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v25 == 0;

        if (v26)
          LODWORD(v15) = 1;
        else
          LODWORD(v15) = 4;
      }
      else
      {
        LODWORD(v15) = 3;
      }
    }

    v27 = v1464;
    if (__p == (char *)v1464
      || *(v1464 - 32) != (_DWORD)v15
      || (v28 = objc_msgSend(v22, "blendMode"), v27 = v1464, v28 != v19))
    {
      if (v27 >= (unsigned __int8 *)v1545)
      {
        v29 = (v27 - (unsigned __int8 *)__p) >> 5;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        if ((v1545 - __p) >> 4 > v30)
          v30 = (v1545 - __p) >> 4;
        if ((unint64_t)(v1545 - __p) >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v1546 = v31;
        if (v31)
        {
          if (v31 >> 59)
            goto LABEL_1767;
          v32 = (char *)operator new(32 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[32 * v29];
        *v33 = (char)v15;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *((_QWORD *)v33 + 1) = 0;
        if (__p == (char *)v1464)
        {
          v15 = (md::PolygonOverlayRenderable *)&v32[32 * v29];
        }
        else
        {
          v34 = 0;
          v35 = v1464;
          do
          {
            v36 = &v33[v34];
            v37 = &v1464[v34];
            *(v36 - 32) = v1464[v34 - 32];
            *((_QWORD *)v36 - 2) = 0;
            *((_QWORD *)v36 - 1) = 0;
            *(_OWORD *)(v36 - 24) = *(_OWORD *)&v1464[v34 - 24];
            *((_QWORD *)v36 - 1) = *(_QWORD *)&v1464[v34 - 8];
            *((_QWORD *)v37 - 3) = 0;
            *((_QWORD *)v37 - 2) = 0;
            *((_QWORD *)v37 - 1) = 0;
            v34 -= 32;
          }
          while (&v1464[v34] != (unsigned __int8 *)__p);
          v1540 = (md::PolygonOverlayRenderable *)&v33[v34];
          do
          {
            v38 = (void (***)(_QWORD))*((_QWORD *)v35 - 3);
            if (v38)
            {
              v39 = (void (***)(_QWORD))*((_QWORD *)v35 - 2);
              v40 = (void *)*((_QWORD *)v35 - 3);
              if (v39 != v38)
              {
                v41 = v20;
                v42 = v39 - 3;
                v43 = v39 - 3;
                do
                {
                  v44 = *v43;
                  v43 -= 3;
                  (*v44)(v42);
                  _ZF = v42 == v38;
                  v42 = v43;
                }
                while (!_ZF);
                v40 = (void *)*((_QWORD *)v35 - 3);
                v20 = v41;
              }
              *((_QWORD *)v35 - 2) = v38;
              operator delete(v40);
            }
            v35 -= 32;
          }
          while (v35 != (unsigned __int8 *)__p);
          j = v1533;
          v15 = v1540;
        }
        v1545 = &v32[32 * v1546];
        v1464 = (unsigned __int8 *)(v33 + 32);
        if (__p)
          operator delete(__p);
        __p = (char *)v15;
      }
      else
      {
        *v27 = v15;
        *((_QWORD *)v27 + 2) = 0;
        *((_QWORD *)v27 + 3) = 0;
        *((_QWORD *)v27 + 1) = 0;
        v1464 = v27 + 32;
      }
    }
    v19 = objc_msgSend(v22, "blendMode");
    if ((objc_msgSend(v22, "canProvideVectorData") & 1) == 0)
    {
      objc_msgSend(v22, "rasterTileProvider");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if (v46)
      {

      }
      else if (!objc_msgSend(v22, "canDrawKey:", v1566))
      {
        goto LABEL_69;
      }
    }
    v15 = (md::PolygonOverlayRenderable *)*((_QWORD *)v1464 - 2);
    v47 = *((_QWORD *)v1464 - 1);
    if ((unint64_t)v15 >= v47)
    {
      v51 = *((_QWORD *)v1464 - 3);
      v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v51) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v51) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      if (v55)
      {
        if (v55 > 0xAAAAAAAAAAAAAAALL)
LABEL_1767:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v56 = (char *)operator new(24 * v55);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[24 * v52];
      *(_QWORD *)v57 = v20;
      *((_QWORD *)v57 + 1) = 0;
      v58 = *(id *)(v17 + 8);
      v59 = (void *)*((_QWORD *)v57 + 1);
      *((_QWORD *)v57 + 1) = v58;

      v60 = &v56[24 * v55];
      v50 = v57 + 24;
      v61 = (md::PolygonOverlayRenderable *)*((_QWORD *)v1464 - 3);
      v15 = (md::PolygonOverlayRenderable *)*((_QWORD *)v1464 - 2);
      if (v15 == v61)
      {
        *((_QWORD *)v1464 - 3) = v57;
        *((_QWORD *)v1464 - 2) = v50;
        *((_QWORD *)v1464 - 1) = v60;
        if (!v15)
          goto LABEL_68;
      }
      else
      {
        do
        {
          *((_QWORD *)v57 - 3) = v20;
          v57 -= 24;
          *((_QWORD *)v57 + 1) = 0;
          v63 = (void *)*((_QWORD *)v15 - 2);
          v62 = (void **)((char *)v15 - 16);
          objc_storeStrong((id *)v57 + 1, v63);
          v64 = *v62;
          *v62 = 0;

          v15 = (md::PolygonOverlayRenderable *)(v62 - 1);
        }
        while (v15 != v61);
        v15 = (md::PolygonOverlayRenderable *)*((_QWORD *)v1464 - 3);
        v65 = (md::PolygonOverlayRenderable *)*((_QWORD *)v1464 - 2);
        *((_QWORD *)v1464 - 3) = v57;
        *((_QWORD *)v1464 - 2) = v50;
        *((_QWORD *)v1464 - 1) = v60;
        if (v65 != v15)
        {
          v66 = (md::PolygonOverlayRenderable *)((char *)v65 - 24);
          v67 = (md::PolygonOverlayRenderable *)((char *)v65 - 24);
          do
          {
            v68 = *(void (***)(md::PolygonOverlayRenderable *))v67;
            v67 = (md::PolygonOverlayRenderable *)((char *)v67 - 24);
            (*v68)(v66);
            _ZF = v66 == v15;
            v66 = v67;
          }
          while (!_ZF);
          j = v1533;
        }
        if (!v15)
          goto LABEL_68;
      }
      operator delete(v15);
    }
    else
    {
      *(_QWORD *)v15 = v20;
      *((_QWORD *)v15 + 1) = 0;
      v48 = *(id *)(v17 + 8);
      v49 = (void *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v48;

      v50 = (char *)v15 + 24;
    }
LABEL_68:
    *((_QWORD *)v1464 - 2) = v50;
LABEL_69:

    v17 += 24;
  }
  while (v17 != j);
  v69 = __p;
  v70 = v1464;
  if (__p == (char *)v1464)
    goto LABEL_1754;
  v1465 = 0;
  v71 = 1 << *(_BYTE *)(a1 + 1);
  v72 = 1.0 / (double)v71;
  v1460 = v72 * (double)*(int *)(a1 + 8);
  v1455 = v72 * (double)(v71 + ~*(_DWORD *)(a1 + 4));
  v1456 = v1460 + v72;
  v1454 = v1455 + v72;
  name = (const __CFString *)*MEMORY[0x1E0C9DA10];
  v1463 = (unsigned __int8 *)__p;
  do
  {
    if (!a14[3])
    {
LABEL_98:
      switch(*v1463)
      {
        case 1u:
          v84 = *((_QWORD *)v1463 + 1);
          v83 = *((_QWORD *)v1463 + 2);
          if (v83 == v84)
            goto LABEL_75;
          while (1)
          {
            v15 = (md::PolygonOverlayRenderable *)*(id *)(v84 + 8);
            -[md::PolygonOverlayRenderable replaceMapContentInRect](v15, "replaceMapContentInRect");
            v86 = v85;
            v88 = v87;
            v90 = v89;
            v92 = v91;
            if ((GEOMapRectIsNull() & 1) == 0)
            {
              v93 = *(double *)(MEMORY[0x1E0D266E8] + 16);
              if (v1460 >= v86 / v93 && v1456 <= (v90 + v86) / v93)
              {
                v94 = *(double *)(MEMORY[0x1E0D266E8] + 24);
                v95 = v1455 >= 1.0 - (v92 + v88) / v94 && v1454 <= 1.0 - v88 / v94;
                if (v95)
                  break;
              }
            }

            v84 += 24;
            if (v84 == v83)
            {
              v96 = 0;
              goto LABEL_1674;
            }
          }

          v96 = 1;
LABEL_1674:
          *(_OWORD *)v1584 = 0u;
          *(_OWORD *)c = 0u;
          LODWORD(v1586) = 512;
          *((float *)&v1586 + 1) = a9;
          LODWORD(v1587) = 0;
          v1392 = *((_QWORD *)v1463 + 1);
          v1391 = *((_QWORD *)v1463 + 2);
          v1393 = (md::PolygonOverlayRenderable *)(*(unsigned __int8 *)(a1 + 1) | 0x200000000);
          LODWORD(v1597[0]) = *(_DWORD *)(a1 + 8);
          HIDWORD(v1597[0]) = *(_DWORD *)(a1 + 4);
          v1597[1] = v1393;
          if (v1392 == v1391)
            goto LABEL_75;
          v1552 = v96;
          j = 0;
          v1394 = 0;
          v1395 = 0;
          v1559 = v1391;
          while (1)
          {
            v1396 = *(id *)(v1392 + 8);
            if (objc_msgSend(v1396, "canDrawKey:", v1597))
              break;
LABEL_1697:

            v1392 += 24;
            if (v1392 == v1391)
            {
              if (v1394 == (_DWORD *)v1395)
              {
                if (c[1])
                  CGContextRelease(c[1]);
                if (v1584[0])
                  (*(void (**)(md::PolygonOverlayRenderable *))(*(_QWORD *)v1584[0] + 8))(v1584[0]);
                v15 = c[0];
                if (c[0])
                {
                  v1416 = (unint64_t *)((char *)c[0] + 8);
                  do
                    v1417 = __ldaxr(v1416);
                  while (__stlxr(v1417 - 1, v1416));
                  if (!v1417)
                  {
                    (*(void (**)(md::PolygonOverlayRenderable *))(*(_QWORD *)v15 + 16))(v15);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
                  }
                }
                if (v1394)
                  operator delete(v1394);
              }
              else
              {
                generateTexture(&v1605, (uint64_t *)&v1584[1], v1452);
                v1414 = *(id *)(*((_QWORD *)v1463 + 1) + 8);
                v1415 = v1414;
                if (v1414)
                {
                  objc_msgSend(v1414, "rasterStyle");
                }
                else
                {
                  v1591[1] = 0;
                  v1591[0] = 0;
                }

                v1418 = operator new();
                v15 = (md::PolygonOverlayRenderable *)v1418;
                *(_WORD *)v1418 = *(_WORD *)a1;
                *(_QWORD *)(v1418 + 4) = *(_QWORD *)(a1 + 4);
                v1419 = *((_QWORD *)&v1605 + 1);
                *(_QWORD *)(v1418 + 24) = v1605;
                *(_QWORD *)(v1418 + 32) = v1419;
                if (v1419)
                {
                  v1420 = (unint64_t *)(v1419 + 8);
                  do
                    v1421 = __ldxr(v1420);
                  while (__stxr(v1421 + 1, v1420));
                }
                v1422 = (char *)v1591[1];
                *(void **)(v1418 + 40) = v1591[0];
                *(_QWORD *)(v1418 + 48) = v1422;
                if (v1422)
                {
                  v1423 = (unint64_t *)(v1422 + 8);
                  do
                    v1424 = __ldxr(v1423);
                  while (__stxr(v1424 + 1, v1423));
                }
                v1425 = operator new(0xE8uLL);
                v1425[1] = 0;
                v1425[2] = 0;
                *v1425 = &off_1E42E2B00;
                v1426 = 1;
                v1427 = ggl::BufferData::BufferData((uint64_t)(v1425 + 3), qword_1EE574B50, 2, 1, 6, 1);
                v1425[28] = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
                v1425[3] = &off_1E42B9DF0;
                *((_QWORD *)v15 + 7) = v1427;
                *((_QWORD *)v15 + 8) = v1425;
                *((_BYTE *)v15 + 72) = v1552;
                v1428 = *(unsigned int *)(v1605 + 68);
                if (v1428 <= 0x3A)
                  v1426 = dword_1A007BEAC[v1428];
                v1429 = v1425[4];
                *(_DWORD *)(v1425[12] + 8) = v1426;
                if (v1425[11] > v1429)
                  v1429 = v1425[11];
                v1425[10] = 0;
                v1425[11] = v1429;
                v1430 = (char *)operator new(0xA8uLL);
                *(_OWORD *)(v1430 + 24) = 0u;
                *(_OWORD *)(v1430 + 40) = 0u;
                *(_OWORD *)(v1430 + 56) = 0u;
                *(_OWORD *)(v1430 + 72) = 0u;
                *(_OWORD *)(v1430 + 88) = 0u;
                *(_OWORD *)(v1430 + 104) = 0u;
                *((_QWORD *)v1430 + 15) = 0;
                *((_QWORD *)v1430 + 16) = v1395;
                *((_QWORD *)v1430 + 17) = v1394;
                *((_QWORD *)v1430 + 18) = j;
                *((_WORD *)v1430 + 76) = 1;
                *((_QWORD *)v1430 + 20) = 0;
                v1431 = *a6;
                *((_QWORD *)v1430 + 1) = a6;
                *((_QWORD *)v1430 + 2) = v15;
                *(_QWORD *)v1430 = v1431;
                *(_QWORD *)(v1431 + 8) = v1430;
                *a6 = (uint64_t)v1430;
                ++a6[2];
                v1432 = (std::__shared_weak_count *)v1591[1];
                if (v1591[1])
                {
                  v1433 = (unint64_t *)((char *)v1591[1] + 8);
                  do
                    v1434 = __ldaxr(v1433);
                  while (__stlxr(v1434 - 1, v1433));
                  if (!v1434)
                  {
                    ((void (*)(std::__shared_weak_count *))v1432->__on_zero_shared)(v1432);
                    std::__shared_weak_count::__release_weak(v1432);
                  }
                }
                v1435 = (std::__shared_weak_count *)*((_QWORD *)&v1605 + 1);
                if (*((_QWORD *)&v1605 + 1))
                {
                  v1436 = (unint64_t *)(*((_QWORD *)&v1605 + 1) + 8);
                  do
                    v1437 = __ldaxr(v1436);
                  while (__stlxr(v1437 - 1, v1436));
                  if (!v1437)
                  {
                    ((void (*)(std::__shared_weak_count *))v1435->__on_zero_shared)(v1435);
                    std::__shared_weak_count::__release_weak(v1435);
                  }
                }
                if (c[1])
                  CGContextRelease(c[1]);
                if (v1584[0])
                  (*(void (**)(md::PolygonOverlayRenderable *))(*(_QWORD *)v1584[0] + 8))(v1584[0]);
                v1438 = (std::__shared_weak_count *)c[0];
                if (c[0])
                {
                  v1439 = (unint64_t *)((char *)c[0] + 8);
                  do
                    v1440 = __ldaxr(v1439);
                  while (__stlxr(v1440 - 1, v1439));
                  if (!v1440)
                  {
                    ((void (*)(std::__shared_weak_count *))v1438->__on_zero_shared)(v1438);
                    std::__shared_weak_count::__release_weak(v1438);
                  }
                }
              }
              goto LABEL_75;
            }
          }
          v1397 = (CGContext *)md::RasterOverlayData::drawContext((md::RasterOverlayData *)v1584);
          v1607 = 0u;
          v1606 = 0u;
          v1605 = 0u;
          CGContextGetBaseCTM();
          CGContextSaveGState(v1397);
          objc_msgSend(v1396, "drawKey:inContext:", v1597, v1397);
          CGContextRestoreGState(v1397);
          *(_OWORD *)v1591 = v1605;
          *(_OWORD *)v1592 = v1606;
          v1593 = v1607;
          CGContextSetBaseCTM();
          v1398 = objc_msgSend(v1396, "identifier");
          v1399 = v1398;
          if ((unint64_t)v1394 < j)
          {
            *v1394 = v1398;
            v1400 = v1394 + 1;
LABEL_1696:
            v1394 = v1400;
            goto LABEL_1697;
          }
          v1401 = ((char *)v1394 - v1395) >> 2;
          v1402 = v1401 + 1;
          if ((unint64_t)(v1401 + 1) >> 62)
            abort();
          if ((uint64_t)(j - (_QWORD)v1395) >> 1 > v1402)
            v1402 = (uint64_t)(j - (_QWORD)v1395) >> 1;
          if (j - (unint64_t)v1395 >= 0x7FFFFFFFFFFFFFFCLL)
            v1403 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1403 = v1402;
          if (v1403)
          {
            if (v1403 >> 62)
              goto LABEL_1767;
            v1404 = operator new(4 * v1403);
          }
          else
          {
            v1404 = 0;
          }
          v1405 = &v1404[4 * v1401];
          *v1405 = v1399;
          v1400 = v1405 + 1;
          if (v1394 == (_DWORD *)v1395)
            goto LABEL_1693;
          v1406 = (char *)(v1394 - 1) - v1395;
          if (v1406 >= 0xBC)
          {
            if (&v1404[(char *)v1394 - v1395 - 4 - (v1406 & 0xFFFFFFFFFFFFFFFCLL)] > &v1404[(char *)v1394 - v1395 - 4])
            {
              v1407 = v1394;
            }
            else if ((_DWORD *)((char *)v1394 - (v1406 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v1394 - 1)
            {
              v1407 = v1394;
            }
            else if ((unint64_t)(v1395 - v1404) >= 0x20)
            {
              v1409 = (v1406 >> 2) + 1;
              v1407 = &v1394[-(v1409 & 0x7FFFFFFFFFFFFFF8)];
              v1410 = &v1404[4 * v1401 - 16];
              v1411 = (__int128 *)(v1394 - 4);
              v1412 = v1409 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v1413 = *v1411;
                *(v1410 - 1) = *(v1411 - 1);
                *v1410 = v1413;
                v1410 -= 2;
                v1411 -= 2;
                v1412 -= 8;
              }
              while (v1412);
              v1405 -= v1409 & 0x7FFFFFFFFFFFFFF8;
              if (v1409 == (v1409 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_1693;
            }
            else
            {
              v1407 = v1394;
            }
          }
          else
          {
            v1407 = v1394;
          }
          do
          {
            v1408 = *--v1407;
            *--v1405 = v1408;
          }
          while (v1407 != (_DWORD *)v1395);
LABEL_1693:
          j = (unint64_t)&v1404[4 * v1403];
          if (v1395)
            operator delete(v1395);
          v1395 = v1405;
          v1391 = v1559;
          goto LABEL_1696;
        case 2u:
          v302 = (id *)*((_QWORD *)v1463 + 1);
          v1457 = (id *)*((_QWORD *)v1463 + 2);
          if (v302 == v1457)
            goto LABEL_75;
          while (1)
          {
            v303 = v302[1];
            objc_msgSend(v303, "vectorData");
            v304 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v304 || (objc_msgSend(v303, "canDrawKey:", v1566) & 1) == 0)
              goto LABEL_1667;
            objc_opt_class();
            v1491 = v303;
            v1468 = v304;
            v1469 = v302;
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v541 = v304;
                LOBYTE(v15) = *(_BYTE *)(a1 + 1);
                v542 = *(_DWORD *)(a1 + 8);
                v543 = *(_DWORD *)(a1 + 4);
                objc_msgSend(v541, "_bounds");
                v547 = 1.0 / (double)(1 << (char)v15);
                v548 = v547 * (double)v542;
                v549 = v547 * (double)((1 << (char)v15) + ~v543);
                v550 = v548 + v547;
                v551 = v549 + v547;
                if (v548 + v547 > v552 && v548 < v545 && v551 > v544 && v549 < v546)
                {
                  v1591[0] = 0;
                  v802 = (_BYTE *)operator new();
                  objc_msgSend(v541, "_renderable");
                  v803 = *((_QWORD *)&v1605 + 1);
                  *(_QWORD *)v802 = v1605;
                  *((_QWORD *)v802 + 1) = v803;
                  if (v803)
                  {
                    v804 = (unint64_t *)(v803 + 8);
                    do
                      v805 = __ldxr(v804);
                    while (__stxr(v805 + 1, v804));
                    v578 = (std::__shared_weak_count *)*((_QWORD *)&v1605 + 1);
                    v802[16] = 0;
                    v1591[0] = v802;
                    if (v578)
                    {
                      p_shared_owners = (unint64_t *)&v578->__shared_owners_;
                      do
                        v807 = __ldaxr(p_shared_owners);
                      while (__stlxr(v807 - 1, p_shared_owners));
                      if (!v807)
                      {
LABEL_699:
                        ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
                        std::__shared_weak_count::__release_weak(v578);
                      }
                    }
                  }
                  else
                  {
                    v802[16] = 0;
                    v1591[0] = v802;
                  }
                }
                else
                {
                  objc_msgSend(v541, "_bounds");
                  v557 = v556;
                  objc_msgSend(v541, "_bounds");
                  v562 = vcvtmd_s64_f64(v557);
                  if (v562 >= 0)
                    v563 = -1;
                  else
                    v563 = 1;
                  v564 = v558 - (double)v563;
                  v565 = v560 - (double)v563;
                  if (v561 < v559)
                  {
                    v561 = -1.79769313e308;
                    v565 = -1.79769313e308;
                    v559 = 1.79769313e308;
                    v564 = 1.79769313e308;
                  }
                  v566 = v560 < v558;
                  if (v560 >= v558)
                    v567 = v561;
                  else
                    v567 = -1.79769313e308;
                  if (v566)
                    v568 = -1.79769313e308;
                  else
                    v568 = v565;
                  if (v566)
                  {
                    v559 = 1.79769313e308;
                    v569 = 1.79769313e308;
                  }
                  else
                  {
                    v569 = v564;
                  }
                  if (v550 <= v569 || v548 >= v568 || v551 <= v559 || v549 >= v567)
                    goto LABEL_1666;
                  v1591[0] = 0;
                  v573 = (_BYTE *)operator new();
                  objc_msgSend(v541, "_renderable");
                  v574 = -v562;
                  v575 = *((_QWORD *)&v1605 + 1);
                  *(_QWORD *)v573 = v1605;
                  *((_QWORD *)v573 + 1) = v575;
                  if (v575)
                  {
                    v576 = (unint64_t *)(v575 + 8);
                    do
                      v577 = __ldxr(v576);
                    while (__stxr(v577 + 1, v576));
                    v578 = (std::__shared_weak_count *)*((_QWORD *)&v1605 + 1);
                    v573[16] = v574;
                    v1591[0] = v573;
                    if (v578)
                    {
                      v579 = (unint64_t *)&v578->__shared_owners_;
                      do
                        v580 = __ldaxr(v579);
                      while (__stlxr(v580 - 1, v579));
                      if (!v580)
                        goto LABEL_699;
                    }
                  }
                  else
                  {
                    v573[16] = v574;
                    v1591[0] = v573;
                  }
                }
                v1383 = objc_msgSend(v303, "identifier");
                v15 = (md::PolygonOverlayRenderable *)operator new(4uLL);
                *(_DWORD *)v15 = v1383;
                v1384 = operator new(0xA8uLL);
                v1385 = v1591[0];
                v1384[2] = 0;
                v1384[3] = 0;
                v1384[4] = 0;
                v1384[5] = v1385;
                *((_OWORD *)v1384 + 6) = 0u;
                *((_OWORD *)v1384 + 7) = 0u;
                *((_OWORD *)v1384 + 4) = 0u;
                *((_OWORD *)v1384 + 5) = 0u;
                *((_OWORD *)v1384 + 3) = 0u;
                v1384[16] = v15;
                v1384[17] = (char *)v15 + 4;
                v1384[18] = (char *)v15 + 4;
                *((_WORD *)v1384 + 76) = 2;
                v1384[20] = 0;
                v1386 = *a6;
                *v1384 = *a6;
                v1384[1] = a6;
                *(_QWORD *)(v1386 + 8) = v1384;
                *a6 = (uint64_t)v1384;
                ++a6[2];
LABEL_1666:

                goto LABEL_1667;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_1667;
              }
              v1580[1] = 0;
              v1580[0] = 0;
              v1505 = objc_msgSend(v303, "identifier");
              v1582[1] = 0;
              v1582[0] = 0;
              v1583 = 0;
              LOBYTE(v15) = a1;
              v581 = objc_msgSend(v303, "identifier");
              v582 = operator new(4uLL);
              *v582 = v581;
              v1498 = v582 + 1;
              v1500 = v582;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v1597[1] = 0;
                v1597[0] = 0;
                *(_QWORD *)&v1598 = 0;
                v583 = v304;
                objc_msgSend(v583, "polygons");
                v584 = (id)objc_claimAutoreleasedReturnValue();
                v1584[0] = (md::PolygonOverlayRenderable *)v1584;
                v1584[1] = (md::PolygonOverlayRenderable *)v1584;
                c[0] = 0;
                *(_OWORD *)v1591 = 0u;
                *(_OWORD *)v1592 = 0u;
                v1593 = 0u;
                v1594 = 0u;
                v585 = v584;
                v586 = objc_msgSend(v585, "countByEnumeratingWithState:objects:count:", v1591, &v1605, 16);
                if (v586)
                {
                  j = *(_QWORD *)v1592[0];
                  do
                  {
                    for (i = 0; i != v586; ++i)
                    {
                      if (*(_QWORD *)v1592[0] != j)
                        objc_enumerationMutation(v585);
                      v588 = (void *)*((_QWORD *)v1591[1] + i);
                      if (v588)
                      {
                        objc_msgSend(*((id *)v1591[1] + i), "simplifiedGeometryAtZoomLevel:", *(unsigned __int8 *)(a1 + 1));
                      }
                      else
                      {
                        v1571 = 0;
                        v1570 = 0;
                      }
                      v589 = objc_msgSend(v588, "worldIndexes");
                      v590 = operator new(0x28uLL);
                      v591 = (char *)v1571;
                      v590[2] = v1570;
                      v590[3] = v591;
                      if (v591)
                      {
                        v592 = (unint64_t *)(v591 + 8);
                        do
                          v593 = __ldxr(v592);
                        while (__stxr(v593 + 1, v592));
                        v594 = (std::__shared_weak_count *)v1571;
                      }
                      else
                      {
                        v594 = 0;
                      }
                      *((_WORD *)v590 + 16) = v589;
                      v595 = v1584[0];
                      *v590 = v1584[0];
                      v590[1] = v1584;
                      *((_QWORD *)v595 + 1) = v590;
                      v1584[0] = (md::PolygonOverlayRenderable *)v590;
                      ++c[0];
                      if (v594)
                      {
                        v596 = (unint64_t *)&v594->__shared_owners_;
                        do
                          v597 = __ldaxr(v596);
                        while (__stlxr(v597 - 1, v596));
                        if (!v597)
                        {
                          ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
                          std::__shared_weak_count::__release_weak(v594);
                        }
                      }
                    }
                    v586 = objc_msgSend(v585, "countByEnumeratingWithState:objects:count:", v1591, &v1605, 16);
                  }
                  while (v586);
                }

                v304 = v1468;
                md::PolygonOverlayMeshBuilder::buildMesh((char **)v1597, a1, (uint64_t)v1584, v1505);
                if (c[0])
                {
                  v598 = v1584[1];
                  v599 = v1584[0];
                  v600 = *(_QWORD *)v1584[1];
                  *(_QWORD *)(v600 + 8) = *((_QWORD *)v1584[0] + 1);
                  **((_QWORD **)v599 + 1) = v600;
                  c[0] = 0;
                  if (v598 != (md::PolygonOverlayRenderable *)v1584)
                  {
                    do
                    {
                      v619 = (md::PolygonOverlayRenderable **)*((_QWORD *)v598 + 1);
                      v620 = (std::__shared_weak_count *)*((_QWORD *)v598 + 3);
                      if (v620)
                      {
                        v621 = (unint64_t *)&v620->__shared_owners_;
                        do
                          v622 = __ldaxr(v621);
                        while (__stlxr(v622 - 1, v621));
                        if (!v622)
                        {
                          ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
                          std::__shared_weak_count::__release_weak(v620);
                        }
                      }
                      operator delete(v598);
                      v598 = (md::PolygonOverlayRenderable *)v619;
                    }
                    while (v619 != v1584);
                  }
                }

                v302 = v1469;
                objc_msgSend(v583, "_style");
                v601 = v1605;
                v1605 = 0uLL;
                v602 = (std::__shared_weak_count *)v1580[1];
                *(_OWORD *)v1580 = v601;
                if (v602)
                {
                  v603 = (unint64_t *)&v602->__shared_owners_;
                  do
                    v604 = __ldaxr(v603);
                  while (__stlxr(v604 - 1, v603));
                  if (!v604)
                  {
                    ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                    std::__shared_weak_count::__release_weak(v602);
                  }
                }
                v605 = (std::__shared_weak_count *)*((_QWORD *)&v1605 + 1);
                if (*((_QWORD *)&v1605 + 1))
                {
                  v606 = (unint64_t *)(*((_QWORD *)&v1605 + 1) + 8);
                  do
                    v607 = __ldaxr(v606);
                  while (__stlxr(v607 - 1, v606));
                  if (!v607)
                  {
                    ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
                    std::__shared_weak_count::__release_weak(v605);
                  }
                }
                objc_msgSend(v583, "miterLimit");
                v609 = v608;
                v610 = objc_msgSend(v583, "lineJoin");
                objc_msgSend(v583, "_style");
                v611 = v1605;
                v1605 = 0uLL;
                v612 = (std::__shared_weak_count *)v1580[1];
                *(_OWORD *)v1580 = v611;
                if (v612)
                {
                  v613 = (unint64_t *)&v612->__shared_owners_;
                  do
                    v614 = __ldaxr(v613);
                  while (__stlxr(v614 - 1, v613));
                  if (!v614)
                  {
                    ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                    std::__shared_weak_count::__release_weak(v612);
                  }
                }
                v15 = (md::PolygonOverlayRenderable *)*((_QWORD *)&v1605 + 1);
                if (*((_QWORD *)&v1605 + 1))
                {
                  v615 = (unint64_t *)(*((_QWORD *)&v1605 + 1) + 8);
                  do
                    v616 = __ldaxr(v615);
                  while (__stlxr(v616 - 1, v615));
                  if (!v616)
                  {
                    (*(void (**)(md::PolygonOverlayRenderable *))(*(_QWORD *)v15 + 16))(v15);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
                  }
                }
                if (v1597[0] == v1597[1])
                {

                  v847 = v1597[0];
                  v845 = v1500;
                  if (!v1597[0])
                    goto LABEL_1649;
                  v15 = v1597[1];
                  v848 = v1597[0];
                  if (v1597[1] != v1597[0])
                  {
                    do
                    {
                      v849 = (void *)*((_QWORD *)v15 - 8);
                      if (v849)
                      {
                        *((_QWORD *)v15 - 7) = v849;
                        operator delete(v849);
                      }
                      v850 = (void *)*((_QWORD *)v15 - 11);
                      if (v850)
                      {
                        *((_QWORD *)v15 - 10) = v850;
                        operator delete(v850);
                      }
                      v15 = (md::PolygonOverlayRenderable *)((char *)v15 - 88);
                    }
                    while (v15 != v847);
                    v848 = v1597[0];
                  }
                  v1597[1] = v847;
                  operator delete(v848);
                  v846 = (md::PolygonOverlayRenderable *)v1582[0];
                  if (v1582[0])
                    goto LABEL_1650;
                }
                else
                {
                  v1565 = 1043511491;
                  v617 = v609;
                  v1591[1] = 0;
                  v1591[0] = 0;
                  v1564 = 0uLL;
                  LOBYTE(v1605) = 0;
                  LOBYTE(v1607) = 0;
                  md::PolygonOverlayMeshBuilder::buildOverlayRenderableFromMeshInfos((uint64_t *)v1584, a1, (uint64_t **)v1597, a4, a8, a10, (uint64_t *)v1580, v610, v617, &v1565, (uint64_t *)v1591, &v1564, &v1605);
                  v618 = (char *)v1582[1];
                  if (v1582[1] >= v1583)
                  {
                    v851 = std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::__emplace_back_slow_path<std::unique_ptr<md::PolygonOverlayRenderable>>(v1582, (uint64_t *)v1584);
                    v852 = v1584[0];
                    v1582[1] = v851;
                    v1584[0] = 0;
                    if (v852)
                    {
                      md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v852);
                      MEMORY[0x1A1AF4E00]();
                    }
                  }
                  else
                  {
                    *(_QWORD *)v1582[1] = v1584[0];
                    v1582[1] = v618 + 8;
                    v1584[0] = 0;
                  }
                  v853 = (std::__shared_weak_count *)*((_QWORD *)&v1564 + 1);
                  if (*((_QWORD *)&v1564 + 1))
                  {
                    v854 = (unint64_t *)(*((_QWORD *)&v1564 + 1) + 8);
                    do
                      v855 = __ldaxr(v854);
                    while (__stlxr(v855 - 1, v854));
                    if (!v855)
                    {
                      ((void (*)(std::__shared_weak_count *))v853->__on_zero_shared)(v853);
                      std::__shared_weak_count::__release_weak(v853);
                    }
                  }
                  v856 = (std::__shared_weak_count *)v1591[1];
                  if (v1591[1])
                  {
                    v857 = (unint64_t *)((char *)v1591[1] + 8);
                    do
                      v858 = __ldaxr(v857);
                    while (__stlxr(v858 - 1, v857));
                    if (!v858)
                    {
                      ((void (*)(std::__shared_weak_count *))v856->__on_zero_shared)(v856);
                      std::__shared_weak_count::__release_weak(v856);
                    }
                  }
                  v859 = operator new(0xA8uLL);
                  v859[1] = 0u;
                  v859[2] = 0u;
                  v859[3] = *(_OWORD *)v1582;
                  *((_QWORD *)v859 + 8) = v1583;
                  v1582[0] = 0;
                  v1582[1] = 0;
                  v1583 = 0;
                  *(_OWORD *)((char *)v859 + 72) = 0u;
                  *(_OWORD *)((char *)v859 + 88) = 0u;
                  *(_OWORD *)((char *)v859 + 104) = 0u;
                  *((_QWORD *)v859 + 15) = 0;
                  *((_QWORD *)v859 + 16) = v1500;
                  *((_QWORD *)v859 + 17) = v1498;
                  *((_QWORD *)v859 + 18) = v1498;
                  *((_WORD *)v859 + 76) = 2;
                  *((_QWORD *)v859 + 20) = 0;
                  v860 = *a6;
                  *(_QWORD *)v859 = *a6;
                  *((_QWORD *)v859 + 1) = a6;
                  *(_QWORD *)(v860 + 8) = v859;
                  *a6 = (uint64_t)v859;
                  ++a6[2];

                  v861 = v1597[0];
                  if (v1597[0])
                  {
                    v15 = v1597[1];
                    v862 = v1597[0];
                    if (v1597[1] != v1597[0])
                    {
                      do
                      {
                        v863 = (void *)*((_QWORD *)v15 - 8);
                        if (v863)
                        {
                          *((_QWORD *)v15 - 7) = v863;
                          operator delete(v863);
                        }
                        v864 = (void *)*((_QWORD *)v15 - 11);
                        if (v864)
                        {
                          *((_QWORD *)v15 - 10) = v864;
                          operator delete(v864);
                        }
                        v15 = (md::PolygonOverlayRenderable *)((char *)v15 - 88);
                      }
                      while (v15 != v861);
                      v862 = v1597[0];
                    }
                    v1597[1] = v861;
                    operator delete(v862);
                  }
                  v845 = 0;
                  v846 = (md::PolygonOverlayRenderable *)v1582[0];
                  if (v1582[0])
                    goto LABEL_1650;
                }
                goto LABEL_1657;
              }
              v646 = v304;
              c[0] = 0;
              c[1] = 0;
              v1584[1] = 0;
              v1584[0] = v646;
              v1586 = a11;
              v1587 = *a2;
              LOWORD(v1588) = *(_WORD *)a1;
              *(_QWORD *)((char *)&v1588 + 4) = *(_QWORD *)(a1 + 4);
              v1496 = v646;
              if (!-[md::PolygonOverlayRenderable style](v646, "style"))
              {

                v845 = v1500;
                v846 = (md::PolygonOverlayRenderable *)v1582[0];
                if (v1582[0])
                  goto LABEL_1650;
                goto LABEL_1657;
              }
              c[0] = 0;
              v1570 = &v1570;
              v1571 = &v1570;
              v1572 = 0;
              *(_OWORD *)v1597 = 0u;
              v1598 = 0u;
              v1599 = 0u;
              v1600 = 0u;
              -[md::PolygonOverlayRenderable polygons](v1496, "polygons");
              v647 = (void *)objc_claimAutoreleasedReturnValue();
              v648 = objc_msgSend(v647, "countByEnumeratingWithState:objects:count:", v1597, &v1605, 16);
              if (v648)
              {
                v649 = *(_QWORD *)v1598;
                do
                {
                  for (j = 0; j != v648; ++j)
                  {
                    if (*(_QWORD *)v1598 != v649)
                      objc_enumerationMutation(v647);
                    v650 = (void *)*((_QWORD *)v1597[1] + j);
                    if (v650)
                    {
                      objc_msgSend(*((id *)v1597[1] + j), "simplifiedGeometryAtZoomLevel:", BYTE1(v1588));
                    }
                    else
                    {
                      v1591[1] = 0;
                      v1591[0] = 0;
                    }
                    v651 = objc_msgSend(v650, "worldIndexes");
                    v652 = (void **)operator new(0x28uLL);
                    v653 = (unint64_t *)v1591[1];
                    v652[2] = v1591[0];
                    v652[3] = v653;
                    if (v653)
                    {
                      v654 = v653 + 1;
                      do
                        v655 = __ldxr(v654);
                      while (__stxr(v655 + 1, v654));
                      v656 = (std::__shared_weak_count *)v1591[1];
                    }
                    else
                    {
                      v656 = 0;
                    }
                    *((_WORD *)v652 + 16) = v651;
                    v657 = v1570;
                    *v652 = v1570;
                    v652[1] = &v1570;
                    v657[1] = v652;
                    v1570 = v652;
                    ++v1572;
                    if (v656)
                    {
                      v658 = (unint64_t *)&v656->__shared_owners_;
                      do
                        v659 = __ldaxr(v658);
                      while (__stlxr(v659 - 1, v658));
                      if (!v659)
                      {
                        ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
                        std::__shared_weak_count::__release_weak(v656);
                      }
                    }
                  }
                  v648 = objc_msgSend(v647, "countByEnumeratingWithState:objects:count:", v1597, &v1605, 16);
                }
                while (v648);
              }

              md::MaskingOverlayMeshProcessor::_unionPolygons((uint64_t)v1584, (uint64_t *)&v1570);
              v660 = (void **)v1571;
              while (2)
              {
                v1521 = v660;
                if (v660 == &v1570)
                {
                  if (v1572)
                  {
                    v808 = (void **)v1571;
                    v809 = (_QWORD **)v1570;
                    v810 = *(_QWORD *)v1571;
                    *(_QWORD *)(v810 + 8) = *((_QWORD *)v1570 + 1);
                    *v809[1] = v810;
                    v1572 = 0;
                    if (v808 != &v1570)
                    {
                      do
                      {
                        v830 = (void **)v808[1];
                        v831 = (std::__shared_weak_count *)v808[3];
                        if (v831)
                        {
                          v832 = (unint64_t *)&v831->__shared_owners_;
                          do
                            v833 = __ldaxr(v832);
                          while (__stlxr(v833 - 1, v832));
                          if (!v833)
                          {
                            ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
                            std::__shared_weak_count::__release_weak(v831);
                          }
                        }
                        operator delete(v808);
                        v808 = v830;
                      }
                      while (v830 != &v1570);
                    }
                  }
                  v811 = a8[1];
                  v1562 = *a8;
                  v1563 = (std::__shared_weak_count *)v811;
                  if (v811)
                  {
                    v812 = (unint64_t *)(v811 + 8);
                    do
                      v813 = __ldxr(v812);
                    while (__stxr(v813 + 1, v812));
                  }
                  v814 = v1584[0];
                  v815 = gss::Allocator::instance((gss::Allocator *)-[md::PolygonOverlayRenderable style](v1584[0], "style"));
                  v816 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v815 + 16))(v815, 16, 4);
                  v817 = v816;
                  if (v816)
                    *v816 = 0x1700000005;
                  v816[1] = 181;
                  v1605 = 0uLL;
                  *(_QWORD *)&v1606 = 0;
                  *((_QWORD *)&v1606 + 1) = v815;
                  v818 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v815 + 16))(v815, 16, 4);
                  *(_QWORD *)&v1605 = v818;
                  *(_QWORD *)&v1606 = v818 + 2;
                  if (v818)
                    *v818 = *v817;
                  v818[1] = v817[1];
                  *((_QWORD *)&v1605 + 1) = v818 + 2;
                  gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v1605);
                  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v815 + 40))(v815, v817, 16);
                  v819 = *(_QWORD *)v1586;
                  *(md::PolygonOverlayRenderable **)((char *)v1597 + 7) = 0;
                  v1597[0] = 0;
                  HIBYTE(v1597[1]) = 1;
                  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v1570, v819, (gss::FeatureAttributeSet *)&v1605, (gss::QueryOverrides *)v1597);
                  if (!BYTE6(v1597[1]) && v1597[0])
                  {
                    v821 = gss::Allocator::instance(v820);
                    (*(void (**)(uint64_t, md::PolygonOverlayRenderable *, _QWORD))(*(_QWORD *)v821 + 40))(v821, v1597[0], WORD2(v1597[1]));
                  }
                  v822 = (void *)-[md::PolygonOverlayRenderable fillMode](v814, "fillMode");
                  v823 = (void *)-[md::PolygonOverlayRenderable style](v814, "style");
                  v824 = v1570;
                  v825 = (std::__shared_weak_count *)v1571;
                  if (v1571)
                  {
                    v826 = (unint64_t *)((char *)v1571 + 8);
                    do
                      v827 = __ldxr(v826);
                    while (__stxr(v827 + 1, v826));
                    v1591[0] = v822;
                    v1591[1] = v823;
                    v1592[0] = v824;
                    v1592[1] = v825;
                    do
                      v828 = __ldxr(v826);
                    while (__stxr(v828 + 1, v826));
                    do
                      v829 = __ldaxr(v826);
                    while (__stlxr(v829 - 1, v826));
                    if (!v829)
                    {
                      ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
                      std::__shared_weak_count::__release_weak(v825);
                    }
                  }
                  else
                  {
                    v1591[0] = v822;
                    v1591[1] = v823;
                    v1592[0] = v1570;
                    v1592[1] = 0;
                  }
                  v917 = (std::__shared_weak_count *)v1571;
                  if (v1571)
                  {
                    v918 = (unint64_t *)((char *)v1571 + 8);
                    do
                      v919 = __ldaxr(v918);
                    while (__stlxr(v919 - 1, v918));
                    if (!v919)
                    {
                      ((void (*)(std::__shared_weak_count *))v917->__on_zero_shared)(v917);
                      std::__shared_weak_count::__release_weak(v917);
                    }
                  }
                  if ((_QWORD)v1605)
                  {
                    *((_QWORD *)&v1605 + 1) = v1605;
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v1606 + 1) + 40))(*((_QWORD *)&v1606 + 1), v1605, v1606 - v1605);
                  }
                  v920 = (char *)operator new(0xC8uLL);
                  v921 = v920;
                  *((_QWORD *)v920 + 1) = 0;
                  *((_QWORD *)v920 + 2) = 0;
                  *(_QWORD *)v920 = &off_1E42DD070;
                  v922 = v1562;
                  v923 = v1563;
                  if (v1563)
                  {
                    v924 = (unint64_t *)&v1563->__shared_owners_;
                    do
                      v925 = __ldxr(v924);
                    while (__stxr(v925 + 1, v924));
                  }
                  *((_WORD *)v920 + 12) = *(_WORD *)a1;
                  *(_QWORD *)(v920 + 28) = *(_QWORD *)(a1 + 4);
                  *((_QWORD *)v920 + 6) = 0;
                  *((_QWORD *)v920 + 7) = v922;
                  *((_QWORD *)v920 + 8) = v923;
                  if (v923)
                  {
                    v926 = (unint64_t *)&v923->__shared_owners_;
                    do
                      v927 = __ldxr(v926);
                    while (__stxr(v927 + 1, v926));
                  }
                  v928 = a10[1];
                  *((_QWORD *)v920 + 9) = *a10;
                  *((_QWORD *)v920 + 10) = v928;
                  if (v928)
                  {
                    v929 = (unint64_t *)(v928 + 8);
                    do
                      v930 = __ldxr(v929);
                    while (__stxr(v930 + 1, v929));
                  }
                  *(_OWORD *)(v920 + 88) = 0u;
                  *(_OWORD *)(v920 + 104) = 0u;
                  *(_OWORD *)(v920 + 120) = 0u;
                  *(_OWORD *)(v920 + 136) = *(_OWORD *)v1591;
                  v931 = (char *)v1592[1];
                  *((void **)v920 + 19) = v1592[0];
                  *((_QWORD *)v920 + 20) = v931;
                  if (v931)
                  {
                    v932 = (unint64_t *)(v931 + 8);
                    do
                      v933 = __ldxr(v932);
                    while (__stxr(v933 + 1, v932));
                  }
                  *(_OWORD *)(v920 + 184) = 0u;
                  *(_OWORD *)(v920 + 168) = 0u;
                  md::MaskingOverlayRenderable::buildRenderItems((char **)v920 + 3);
                  v302 = v1469;
                  if (v923)
                  {
                    v934 = (unint64_t *)&v923->__shared_owners_;
                    do
                      v935 = __ldaxr(v934);
                    while (__stlxr(v935 - 1, v934));
                    if (!v935)
                    {
                      ((void (*)(std::__shared_weak_count *))v923->__on_zero_shared)(v923);
                      std::__shared_weak_count::__release_weak(v923);
                    }
                  }
                  v1601 = (md::MaskingOverlayRenderable *)(v921 + 24);
                  v1602 = (uint64_t)v921;
                  v936 = (std::__shared_weak_count *)v1592[1];
                  v937 = a1;
                  if (v1592[1])
                  {
                    v938 = (unint64_t *)((char *)v1592[1] + 8);
                    do
                      v939 = __ldaxr(v938);
                    while (__stlxr(v939 - 1, v938));
                    if (!v939)
                    {
                      ((void (*)(std::__shared_weak_count *))v936->__on_zero_shared)(v936);
                      std::__shared_weak_count::__release_weak(v936);
                    }
                  }
                  v940 = v1563;
                  if (v1563)
                  {
                    v941 = (unint64_t *)&v1563->__shared_owners_;
                    do
                      v942 = __ldaxr(v941);
                    while (__stlxr(v942 - 1, v941));
                    if (!v942)
                    {
                      ((void (*)(std::__shared_weak_count *))v940->__on_zero_shared)(v940);
                      std::__shared_weak_count::__release_weak(v940);
                    }
                  }
                  v943 = v1584[1];
                  v944 = c[0];
                  v1502 = c[0];
                  while (2)
                  {
                    if (v943 != v944)
                    {
                      v1591[1] = 0;
                      v1591[0] = 0;
                      v1592[0] = 0;
                      md::PolygonOverlayMeshBuilder::buildMesh((char **)v1591, v937, (uint64_t)v943, v1505);
                      v1561 = 1043511491;
                      v946 = *((_QWORD *)v943 + 7);
                      *(_QWORD *)&v1560 = *((_QWORD *)v943 + 6);
                      *((_QWORD *)&v1560 + 1) = v946;
                      if (v946)
                      {
                        v947 = (unint64_t *)(v946 + 8);
                        do
                          v948 = __ldxr(v947);
                        while (__stxr(v948 + 1, v947));
                      }
                      v949 = *((_OWORD *)v943 + 5);
                      v1605 = *((_OWORD *)v943 + 4);
                      v1606 = v949;
                      LOBYTE(v1607) = 1;
                      md::PolygonOverlayMeshBuilder::buildOverlayRenderableFromMeshInfos((uint64_t *)v1597, v937, (uint64_t **)v1591, a4, a8, a10, (uint64_t *)v943 + 4, 0, 0.0, &v1561, (uint64_t *)&v1601, &v1560, &v1605);
                      v950 = (char *)v1582[1];
                      if (v1582[1] >= v1583)
                      {
                        v951 = std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::__emplace_back_slow_path<std::unique_ptr<md::PolygonOverlayRenderable>>(v1582, (uint64_t *)v1597);
                        v952 = v1597[0];
                        v1582[1] = v951;
                        v1597[0] = 0;
                        if (v952)
                        {
                          md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v952);
                          MEMORY[0x1A1AF4E00]();
                        }
                      }
                      else
                      {
                        *(_QWORD *)v1582[1] = v1597[0];
                        v1582[1] = v950 + 8;
                        v1597[0] = 0;
                      }
                      v1509 = v943;
                      v953 = (std::__shared_weak_count *)*((_QWORD *)&v1560 + 1);
                      if (!*((_QWORD *)&v1560 + 1))
                        goto LABEL_1133;
                      v954 = (unint64_t *)(*((_QWORD *)&v1560 + 1) + 8);
                      do
                        v955 = __ldaxr(v954);
                      while (__stlxr(v955 - 1, v954));
                      if (!v955)
                      {
                        ((void (*)(std::__shared_weak_count *))v953->__on_zero_shared)(v953);
                        std::__shared_weak_count::__release_weak(v953);
                        if (!a12)
                          goto LABEL_1613;
                      }
                      else
                      {
LABEL_1133:
                        if (!a12)
                          goto LABEL_1613;
                      }
                      v956 = (uint64_t *)v1591[0];
                      v1514 = (uint64_t *)v1591[1];
                      if (v1591[0] == v1591[1])
                      {
LABEL_1614:
                        v937 = a1;
                        if (v956)
                        {
                          v1356 = (uint64_t *)v1591[1];
                          v945 = v956;
                          if (v1591[1] != v956)
                          {
                            do
                            {
                              v1357 = (void *)*(v1356 - 8);
                              if (v1357)
                              {
                                *(v1356 - 7) = (uint64_t)v1357;
                                operator delete(v1357);
                              }
                              v1358 = (void *)*(v1356 - 11);
                              if (v1358)
                              {
                                *(v1356 - 10) = (uint64_t)v1358;
                                operator delete(v1358);
                              }
                              v1356 -= 11;
                            }
                            while (v1356 != v956);
                            v945 = (uint64_t *)v1591[0];
                          }
                          v1591[1] = v956;
                          operator delete(v945);
                        }
                        v943 = (md::PolygonOverlayRenderable *)((char *)v1509 + 96);
                        v944 = v1502;
                        continue;
                      }
                      v957 = 0;
                      v958 = 0;
                      v1511 = *((_BYTE *)v1509 + 24);
                      while (2)
                      {
                        v960 = (unint64_t *)v956[3];
                        v1551 = (unint64_t *)v956[4];
                        if (v960 == v1551)
                        {
                          v1539 = 0;
                          v1318 = 0;
                          v1320 = 0uLL;
                          goto LABEL_1573;
                        }
                        v1539 = 0;
                        v961 = -1;
                        v962 = 4;
                        v1557 = 0u;
                        v963 = v958;
                        v1544 = v956;
LABEL_1143:
                        v964 = *v956;
                        v966 = *v960;
                        v965 = v960[1];
                        v967 = vcgt_f32((float32x2_t)vdup_n_s32(0x33D6BF95u), vabd_f32(*(float32x2_t *)(*v956 + 8 * *v960), *(float32x2_t *)(*v956 + 8 * v965)));
                        if ((v967.i8[4] & 1) != 0)
                          v968 = 2;
                        else
                          v968 = 0;
                        v969 = v968 - v967.i8[0];
                        if (v966 == v961 && (v968 - v967.i8[0]) == v962)
                        {
                          v966 = v961 + 1;
                          v970 = (unint64_t)v958;
                        }
                        else if (v958 == v963)
                        {
                          v970 = (unint64_t)v963;
                          v961 = *v960;
                        }
                        else
                        {
                          v971 = (char *)*((_QWORD *)&v1557 + 1);
                          if (*((_QWORD *)&v1557 + 1) >= (unint64_t)v1539)
                          {
                            v973 = (char *)v1557;
                            v974 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3) + 1;
                            if (v974 > 0xAAAAAAAAAAAAAAALL)
                              abort();
                            v1529 = v968 - v967.i8[0];
                            v1522 = v960;
                            if (0x5555555555555556 * ((uint64_t)&v1539[-v1557] >> 3) > v974)
                              v974 = 0x5555555555555556 * ((uint64_t)&v1539[-v1557] >> 3);
                            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1539[-v1557] >> 3) >= 0x555555555555555)
                              j = 0xAAAAAAAAAAAAAAALL;
                            else
                              j = v974;
                            if (j > 0xAAAAAAAAAAAAAAALL)
                              goto LABEL_1767;
                            v975 = (char *)operator new(24 * j);
                            v976 = v975;
                            v977 = &v975[8 * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3)];
                            *(_QWORD *)v977 = v958;
                            *((_QWORD *)v977 + 1) = v963;
                            *((_QWORD *)v977 + 2) = v957;
                            v972 = (uint64_t)(v977 + 24);
                            v978 = (_QWORD *)*((_QWORD *)&v1557 + 1);
                            if (*((_QWORD *)&v1557 + 1) == (_QWORD)v1557)
                            {
                              *(_QWORD *)&v1557 = &v975[8 * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3)];
                            }
                            else
                            {
                              do
                              {
                                v979 = *(_OWORD *)(v978 - 3);
                                v978 -= 3;
                                *(_OWORD *)(v977 - 24) = v979;
                                v977 -= 24;
                                *((_QWORD *)v977 + 2) = v978[2];
                                *v978 = 0;
                                v978[1] = 0;
                                v978[2] = 0;
                              }
                              while (v978 != (_QWORD *)v1557);
                              *(_QWORD *)&v1557 = v977;
                              v980 = (char *)*((_QWORD *)&v1557 + 1);
                              do
                              {
                                v982 = (void *)*((_QWORD *)v980 - 3);
                                v980 -= 24;
                                v981 = v982;
                                if (v982)
                                {
                                  *((_QWORD *)v971 - 2) = v981;
                                  operator delete(v981);
                                }
                                v971 = v980;
                              }
                              while (v980 != v973);
                              v971 = v973;
                            }
                            v1539 = &v976[24 * j];
                            v302 = v1469;
                            if (v971)
                              operator delete(v971);
                            v960 = v1522;
                            v969 = v1529;
                            v956 = v1544;
                          }
                          else
                          {
                            **((_QWORD **)&v1557 + 1) = v958;
                            *(_QWORD *)(*((_QWORD *)&v1557 + 1) + 8) = v963;
                            v972 = *((_QWORD *)&v1557 + 1) + 24;
                            *(_QWORD *)(*((_QWORD *)&v1557 + 1) + 16) = v957;
                          }
                          v957 = 0;
                          v963 = 0;
                          v970 = 0;
                          *(_QWORD *)&v983 = v1557;
                          *((_QWORD *)&v983 + 1) = v972;
                          v1557 = v983;
                          v961 = *v960;
                          v965 = v960[1];
                          v964 = *v956;
                        }
                        v984 = v964 + 8 * v966;
                        if (v965 < v961)
                        {
                          v985 = (uint64_t *)v956[1];
                          v986 = (uint64_t)v985 - v984;
                          if ((uint64_t)((uint64_t)v985 - v984) < 1)
                          {
                            v302 = v1469;
                            goto LABEL_1305;
                          }
                          v987 = v986 >> 3;
                          v988 = (unint64_t)&v963[-v970];
                          v989 = (uint64_t)&v963[-v970] >> 3;
                          v990 = v970 + ((unint64_t)&v963[-v970] & 0xFFFFFFFFFFFFFFF8);
                          if (v986 >> 3 > (v957 - v963) >> 3)
                          {
                            v991 = v987 + v989;
                            if ((unint64_t)(v987 + v989) >> 61)
                              abort();
                            if ((uint64_t)&v957[-v970] >> 2 > v991)
                              v991 = (uint64_t)&v957[-v970] >> 2;
                            if ((unint64_t)&v957[-v970] >= 0x7FFFFFFFFFFFFFF8)
                              v992 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v992 = v991;
                            if (v992)
                            {
                              v1523 = (uint64_t)v985 - v984;
                              v1530 = (char *)v970;
                              v1518 = v986 >> 3;
                              if (v992 >> 61)
                                goto LABEL_1767;
                              v993 = v964;
                              v994 = (unint64_t)&v963[-v970];
                              v995 = (uint64_t)&v963[-v970] >> 3;
                              v996 = v966;
                              v997 = v969;
                              v998 = v960;
                              v999 = v992;
                              v1000 = operator new(8 * v992);
                              v960 = v998;
                              v969 = v997;
                              v966 = v996;
                              v989 = v995;
                              v988 = v994;
                              v964 = v993;
                              v987 = v1518;
                              v1001 = v1530;
                              v986 = v1523;
                              v992 = v999;
                            }
                            else
                            {
                              v1001 = (char *)v970;
                              v1000 = 0;
                            }
                            v970 = (unint64_t)&v1000[8 * v989];
                            j = v970 + 8 * v987;
                            if ((unint64_t)(v986 - 8) >= 0x38)
                            {
                              v1097 = &v1000[8 * v989];
                              if ((unint64_t)&v1000[(v988 & 0xFFFFFFFFFFFFFFF8) - v984] < 0x20)
                                goto LABEL_1271;
                              v1098 = ((unint64_t)(v986 - 8) >> 3) + 1;
                              v1099 = 8 * (v1098 & 0x3FFFFFFFFFFFFFFCLL);
                              v1097 = (_QWORD *)(v970 + v1099);
                              v1100 = (__int128 *)(v964 + 8 * v966 + 16);
                              v1101 = &v1000[8 * v989 + 16];
                              v1102 = v1098 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1103 = *v1100;
                                *(v1101 - 1) = *(v1100 - 1);
                                *v1101 = v1103;
                                v1100 += 2;
                                v1101 += 2;
                                v1102 -= 4;
                              }
                              while (v1102);
                              if (v1098 != (v1098 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                v984 += v1099;
                                goto LABEL_1271;
                              }
                            }
                            else
                            {
                              v1097 = &v1000[8 * v989];
                              do
                              {
LABEL_1271:
                                v1104 = *(_QWORD *)v984;
                                v984 += 8;
                                *v1097++ = v1104;
                              }
                              while (v1097 != (_QWORD *)j);
                            }
                            v1105 = v988 - 8;
                            if (v988 >= 8)
                            {
                              if (v1105 < 0x168)
                              {
                                v1106 = (char *)v990;
                                goto LABEL_1275;
                              }
                              if (&v1000[(v988 & 0xFFFFFFFFFFFFFFF8) - 8 - (v1105 & 0xFFFFFFFFFFFFFFF8)] > &v1000[(v988 & 0xFFFFFFFFFFFFFFF8) - 8])
                              {
                                v1106 = (char *)v990;
                                goto LABEL_1275;
                              }
                              if (&v1001[(v988 & 0xFFFFFFFFFFFFFFF8) - 8 - (v1105 & 0xFFFFFFFFFFFFFFF8)] > &v1001[(v988 & 0xFFFFFFFFFFFFFFF8) - 8])
                              {
                                v1106 = (char *)v990;
                                goto LABEL_1275;
                              }
                              v1106 = (char *)v990;
                              if ((unint64_t)(v1001 - v1000) < 0x20)
                                goto LABEL_1790;
                              v1268 = (v1105 >> 3) + 1;
                              v1106 = (char *)(v990 - 8 * (v1268 & 0x3FFFFFFFFFFFFFFCLL));
                              v1269 = (__int128 *)&v1001[8 * v989 - 16];
                              v1270 = &v1000[8 * v989 - 16];
                              v1271 = v1268 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1272 = *v1269;
                                *(v1270 - 1) = *(v1269 - 1);
                                *v1270 = v1272;
                                v1269 -= 2;
                                v1270 -= 2;
                                v1271 -= 4;
                              }
                              while (v1271);
                              v970 -= 8 * (v1268 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v1268 != (v1268 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1790:
                                do
                                {
LABEL_1275:
                                  v1107 = *((_QWORD *)v1106 - 1);
                                  v1106 -= 8;
                                  *(_QWORD *)(v970 - 8) = v1107;
                                  v970 -= 8;
                                }
                                while (v1106 != v1001);
                              }
                            }
                            v957 = &v1000[8 * v992];
                            v1108 = v969;
                            v1109 = v960;
                            if (v963 == (char *)v990)
                            {
                              v302 = v1469;
                              goto LABEL_1302;
                            }
                            v1110 = &v1001[v988 & 0xFFFFFFFFFFFFFFF8];
                            v1111 = v963 - v1110 - 8;
                            if (v1111 < 0x68)
                            {
                              v302 = v1469;
                              goto LABEL_1301;
                            }
                            v302 = v1469;
                            if ((unint64_t)(&v1000[(v988 & 0xFFFFFFFFFFFFFFF8) + (v986 & 0xFFFFFFFFFFFFFFF8)]
                                                  - v1110) < 0x20)
                              goto LABEL_1791;
                            v1126 = (v1111 >> 3) + 1;
                            v1127 = 8 * (v1126 & 0x3FFFFFFFFFFFFFFCLL);
                            v990 += v1127;
                            v1128 = &v1000[8 * v989 + 16 + 8 * v987];
                            v1129 = (__int128 *)&v1001[8 * v989 + 16];
                            v1130 = v1126 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v1131 = *v1129;
                              *(v1128 - 1) = *(v1129 - 1);
                              *v1128 = v1131;
                              v1128 += 2;
                              v1129 += 2;
                              v1130 -= 4;
                            }
                            while (v1130);
                            j += v1127;
                            if (v1126 == (v1126 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_1303:
                              operator delete(v1001);
                            }
                            else
                            {
LABEL_1791:
                              do
                              {
LABEL_1301:
                                v1132 = *(_QWORD *)v990;
                                v990 += 8;
                                *(_QWORD *)j = v1132;
                                j += 8;
                              }
                              while ((char *)v990 != v963);
LABEL_1302:
                              if (v1001)
                                goto LABEL_1303;
                            }
                            v963 = (char *)j;
                            v956 = v1544;
                            v960 = v1109;
                            v969 = v1108;
LABEL_1305:
                            v1133 = v960[1];
                            if (v1133 > 0x7FFFFFFFFFFFFFFELL)
                            {
                              v958 = (char *)v970;
                              v304 = v1468;
                              goto LABEL_1142;
                            }
                            v1134 = *v956;
                            j = v1133 + 1;
                            v1135 = (unint64_t)&v963[-v970];
                            v1136 = (uint64_t)&v963[-v970] >> 3;
                            v1137 = v970 + ((unint64_t)&v963[-v970] & 0xFFFFFFFFFFFFFFF8);
                            if ((uint64_t)(v1133 + 1) > (v957 - v963) >> 3)
                            {
                              v1138 = v1136 + j;
                              if ((v1136 + j) >> 61)
                                abort();
                              if ((uint64_t)&v957[-v970] >> 2 > v1138)
                                v1138 = (uint64_t)&v957[-v970] >> 2;
                              if ((unint64_t)&v957[-v970] >= 0x7FFFFFFFFFFFFFF8)
                                v1139 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v1139 = v1138;
                              if (v1139)
                              {
                                v1532 = v970;
                                if (v1139 >> 61)
                                  goto LABEL_1767;
                                v1140 = v960[1];
                                v1141 = (unint64_t)&v963[-v970];
                                v1142 = (uint64_t)&v963[-v970] >> 3;
                                v1143 = v969;
                                v1144 = v960;
                                v1145 = v1139;
                                v1146 = operator new(8 * v1139);
                                v960 = v1144;
                                v969 = v1143;
                                v1136 = v1142;
                                v1135 = v1141;
                                v1139 = v1145;
                                v970 = v1532;
                                v1133 = v1140;
                              }
                              else
                              {
                                v1146 = 0;
                              }
                              v958 = &v1146[8 * v1136];
                              v1112 = &v958[8 * j];
                              if ((v1133 & 0x1FFFFFFFFFFFFFFFLL) >= 7)
                              {
                                v1196 = &v1146[8 * v1136];
                                if ((unint64_t)&v1146[(v1135 & 0xFFFFFFFFFFFFFFF8) - v1134] < 0x20)
                                  goto LABEL_1367;
                                v1197 = (v1133 & 0x1FFFFFFFFFFFFFFFLL) + 1;
                                v1198 = 8 * (v1197 & 0x3FFFFFFFFFFFFFFCLL);
                                v1196 = &v958[v1198];
                                v1199 = (__int128 *)(v1134 + 16);
                                v1200 = &v1146[8 * v1136 + 16];
                                v1201 = v1197 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v1202 = *v1199;
                                  *(v1200 - 1) = *(v1199 - 1);
                                  *v1200 = v1202;
                                  v1199 += 2;
                                  v1200 += 2;
                                  v1201 -= 4;
                                }
                                while (v1201);
                                if (v1197 != (v1197 & 0x3FFFFFFFFFFFFFFCLL))
                                {
                                  v1134 += v1198;
                                  goto LABEL_1367;
                                }
                              }
                              else
                              {
                                v1196 = &v1146[8 * v1136];
                                do
                                {
LABEL_1367:
                                  v1203 = *(_QWORD *)v1134;
                                  v1134 += 8;
                                  *(_QWORD *)v1196 = v1203;
                                  v1196 += 8;
                                }
                                while (v1196 != v1112);
                              }
                              v1204 = v1135 - 8;
                              if (v1135 < 8)
                              {
                                v304 = v1468;
                                goto LABEL_1373;
                              }
                              v304 = v1468;
                              if (v1204 < 0x168)
                              {
                                v1205 = (char *)v1137;
                                goto LABEL_1372;
                              }
                              if (&v1146[(v1135 & 0xFFFFFFFFFFFFFFF8) - 8 - (v1204 & 0xFFFFFFFFFFFFFFF8)] > &v1146[(v1135 & 0xFFFFFFFFFFFFFFF8) - 8])
                              {
                                v1205 = (char *)v1137;
                                goto LABEL_1372;
                              }
                              if (v970 + (v1135 & 0xFFFFFFFFFFFFFFF8) - 8 - (v1204 & 0xFFFFFFFFFFFFFFF8) > v970 + (v1135 & 0xFFFFFFFFFFFFFFF8) - 8)
                              {
                                v1205 = (char *)v1137;
                                goto LABEL_1372;
                              }
                              v1205 = (char *)v1137;
                              if (v970 - (unint64_t)v1146 < 0x20)
                                goto LABEL_1792;
                              v1313 = (v1204 >> 3) + 1;
                              v1205 = (char *)(v1137 - 8 * (v1313 & 0x3FFFFFFFFFFFFFFCLL));
                              v1314 = (__int128 *)(v970 + 8 * v1136 - 16);
                              v1315 = &v1146[8 * v1136 - 16];
                              v1316 = v1313 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1317 = *v1314;
                                *(v1315 - 1) = *(v1314 - 1);
                                *v1315 = v1317;
                                v1314 -= 2;
                                v1315 -= 2;
                                v1316 -= 4;
                              }
                              while (v1316);
                              v958 -= 8 * (v1313 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v1313 != (v1313 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1792:
                                do
                                {
LABEL_1372:
                                  v1206 = *((_QWORD *)v1205 - 1);
                                  v1205 -= 8;
                                  *((_QWORD *)v958 - 1) = v1206;
                                  v958 -= 8;
                                }
                                while (v1205 != (char *)v970);
                              }
LABEL_1373:
                              v957 = &v1146[8 * v1139];
                              if (v963 == (char *)v1137)
                              {
                                v302 = v1469;
                                v956 = v1544;
                                goto LABEL_1489;
                              }
                              v1207 = (char *)((v1135 & 0xFFFFFFFFFFFFFFF8) + v970);
                              v1208 = v963 - v1207 - 8;
                              v956 = v1544;
                              if (v1208 < 0x78)
                              {
                                v302 = v1469;
                                goto LABEL_1488;
                              }
                              v1278 = &v1146[8 * v1133];
                              v302 = v1469;
                              if ((unint64_t)(&v1278[v1135 & 0xFFFFFFFFFFFFFFF8] - v1207 + 8) < 0x20)
                                goto LABEL_1793;
                              v1279 = (v1208 >> 3) + 1;
                              v1280 = 8 * (v1279 & 0x3FFFFFFFFFFFFFFCLL);
                              v1137 += v1280;
                              v1281 = v1278 + 24;
                              v1282 = 8 * v1136;
                              v1283 = v1279 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1284 = &v1281[v1282];
                                v1285 = *(_OWORD *)(v970 + v1282 + 16);
                                *((_OWORD *)v1284 - 1) = *(_OWORD *)(v970 + v1282);
                                *(_OWORD *)v1284 = v1285;
                                v1282 += 32;
                                v1283 -= 4;
                              }
                              while (v1283);
                              v1112 += v1280;
                              if (v1279 != (v1279 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1793:
                                do
                                {
LABEL_1488:
                                  v1286 = *(_QWORD *)v1137;
                                  v1137 += 8;
                                  *(_QWORD *)v1112 = v1286;
                                  v1112 += 8;
                                }
                                while ((char *)v1137 != v963);
LABEL_1489:
                                v963 = v1112;
                                if (v970)
                                  goto LABEL_1490;
LABEL_1142:
                                v961 = v960[1];
                                v960 += 2;
                                v962 = v969;
                                v303 = v1491;
                                if (v960 == v1551)
                                {
                                  v1318 = (_QWORD *)*((_QWORD *)&v1557 + 1);
                                  if (v958 == v963)
                                  {
                                    v958 = v963;
                                    v1320 = v1557;
                                    goto LABEL_1573;
                                  }
                                  if (*((_QWORD *)&v1557 + 1) < (unint64_t)v1539)
                                  {
                                    **((_QWORD **)&v1557 + 1) = v958;
                                    *(_QWORD *)(*((_QWORD *)&v1557 + 1) + 8) = v963;
                                    v1319 = *((_QWORD *)&v1557 + 1) + 24;
                                    *(_QWORD *)(*((_QWORD *)&v1557 + 1) + 16) = v957;
                                    goto LABEL_1572;
                                  }
                                  v1321 = (char *)v1557;
                                  v1322 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3) + 1;
                                  if (v1322 > 0xAAAAAAAAAAAAAAALL)
                                    abort();
                                  if (0x5555555555555556 * ((uint64_t)&v1539[-v1557] >> 3) > v1322)
                                    v1322 = 0x5555555555555556 * ((uint64_t)&v1539[-v1557] >> 3);
                                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1539[-v1557] >> 3) >= 0x555555555555555)
                                    j = 0xAAAAAAAAAAAAAAALL;
                                  else
                                    j = v1322;
                                  if (j > 0xAAAAAAAAAAAAAAALL)
                                    goto LABEL_1767;
                                  v1323 = (char *)operator new(24 * j);
                                  v1324 = v1323;
                                  v1325 = &v1323[8 * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3)];
                                  *(_QWORD *)v1325 = v958;
                                  *((_QWORD *)v1325 + 1) = v963;
                                  *((_QWORD *)v1325 + 2) = v957;
                                  v1319 = (uint64_t)(v1325 + 24);
                                  v1326 = (_QWORD *)*((_QWORD *)&v1557 + 1);
                                  if (*((_QWORD *)&v1557 + 1) == (_QWORD)v1557)
                                  {
                                    *(_QWORD *)&v1557 = &v1323[8 * ((uint64_t)(*((_QWORD *)&v1557 + 1) - v1557) >> 3)];
                                    v304 = v1468;
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v1327 = *(_OWORD *)(v1326 - 3);
                                      v1326 -= 3;
                                      *(_OWORD *)(v1325 - 24) = v1327;
                                      v1325 -= 24;
                                      *((_QWORD *)v1325 + 2) = v1326[2];
                                      *v1326 = 0;
                                      v1326[1] = 0;
                                      v1326[2] = 0;
                                    }
                                    while (v1326 != (_QWORD *)v1557);
                                    *(_QWORD *)&v1557 = v1325;
                                    v1328 = (char *)*((_QWORD *)&v1557 + 1);
                                    v304 = v1468;
                                    do
                                    {
                                      v1330 = (void *)*((_QWORD *)v1328 - 3);
                                      v1328 -= 24;
                                      v1329 = v1330;
                                      if (v1330)
                                      {
                                        *(v1318 - 2) = v1329;
                                        operator delete(v1329);
                                      }
                                      v1318 = v1328;
                                    }
                                    while (v1328 != v1321);
                                    v1318 = v1321;
                                  }
                                  v1539 = &v1324[24 * j];
                                  v302 = v1469;
                                  if (v1318)
                                    operator delete(v1318);
LABEL_1572:
                                  v957 = 0;
                                  v958 = 0;
                                  *(_QWORD *)&v1320 = v1557;
                                  *((_QWORD *)&v1320 + 1) = v1319;
                                  v1318 = (_QWORD *)v1319;
LABEL_1573:
                                  v1558 = v1320;
                                  if ((_QWORD *)v1320 == v1318)
                                  {
                                    if (v1318)
                                    {
                                      v1352 = (_QWORD *)*((_QWORD *)&v1320 + 1);
                                      if (*((_QWORD **)&v1320 + 1) != v1318)
                                      {
                                        v1353 = (_QWORD *)*((_QWORD *)&v1320 + 1);
                                        do
                                        {
                                          v1355 = (void *)*(v1353 - 3);
                                          v1353 -= 3;
                                          v1354 = v1355;
                                          if (v1355)
                                          {
                                            *(v1352 - 2) = v1354;
                                            operator delete(v1354);
                                          }
                                          v1352 = v1353;
                                        }
                                        while (v1353 != v1318);
                                        v1318 = (_QWORD *)v1558;
                                      }
                                      operator delete(v1318);
                                    }
                                    goto LABEL_1138;
                                  }
                                  v1331 = v956[6];
                                  v1333 = a12[1];
                                  v1332 = (unint64_t)a12[2];
                                  if ((unint64_t)v1333 < v1332)
                                  {
                                    *v1333 = 0;
                                    v1333[1] = 0;
                                    v1333[2] = v1331;
                                    *((_BYTE *)v1333 + 24) = v1511;
                                    *((_OWORD *)v1333 + 2) = v1320;
                                    v959 = (char *)(v1333 + 7);
                                    v1333[6] = v1539;
                                    goto LABEL_1137;
                                  }
                                  v1334 = *a12;
                                  v1335 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1333 - (_BYTE *)*a12) >> 3);
                                  v1336 = v1335 + 1;
                                  if ((unint64_t)(v1335 + 1) > 0x492492492492492)
                                    abort();
                                  v1337 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1332 - (_QWORD)v1334) >> 3);
                                  if (2 * v1337 > v1336)
                                    v1336 = 2 * v1337;
                                  j = v1337 >= 0x249249249249249 ? 0x492492492492492 : v1336;
                                  if (j > 0x492492492492492)
                                    goto LABEL_1767;
                                  v1338 = (char *)operator new(56 * j);
                                  v1339 = &v1338[56 * v1335];
                                  *(_QWORD *)v1339 = 0;
                                  *((_QWORD *)v1339 + 1) = 0;
                                  *((_QWORD *)v1339 + 2) = v1331;
                                  v1339[24] = v1511;
                                  v1340 = &v1338[56 * j];
                                  *((_OWORD *)v1339 + 2) = v1558;
                                  *((_QWORD *)v1339 + 6) = v1539;
                                  v959 = v1339 + 56;
                                  if (v1333 == v1334)
                                  {
                                    *a12 = v1339;
                                    a12[1] = v959;
                                    a12[2] = v1340;
                                    v304 = v1468;
                                  }
                                  else
                                  {
                                    v1341 = 0;
                                    v304 = v1468;
                                    do
                                    {
                                      v1342 = &v1339[v1341 * 8];
                                      v1343 = (char *)&v1333[v1341];
                                      *(_OWORD *)(v1342 - 56) = *(_OWORD *)&v1333[v1341 - 7];
                                      *((_QWORD *)v1343 - 7) = 0;
                                      *((_QWORD *)v1343 - 6) = 0;
                                      v1344 = v1333[v1341 - 5];
                                      *(v1342 - 32) = v1333[v1341 - 4];
                                      *((_QWORD *)v1342 - 5) = v1344;
                                      *(_OWORD *)(v1342 - 24) = *(_OWORD *)&v1333[v1341 - 3];
                                      *((_QWORD *)v1342 - 1) = v1333[v1341 - 1];
                                      *((_QWORD *)v1343 - 3) = 0;
                                      *((_QWORD *)v1343 - 2) = 0;
                                      *((_QWORD *)v1343 - 1) = 0;
                                      v1341 -= 7;
                                    }
                                    while (&v1333[v1341] != v1334);
                                    v1333 = *a12;
                                    v1345 = a12[1];
                                    *a12 = &v1339[v1341 * 8];
                                    a12[1] = v959;
                                    a12[2] = v1340;
                                    while (v1345 != v1333)
                                    {
                                      v1346 = *(v1345 - 3);
                                      if (v1346)
                                      {
                                        v1347 = *(v1345 - 2);
                                        v1348 = (void *)*(v1345 - 3);
                                        if (v1347 != v1346)
                                        {
                                          j = *(v1345 - 2);
                                          do
                                          {
                                            v1350 = *(void **)(j - 24);
                                            j -= 24;
                                            v1349 = v1350;
                                            if (v1350)
                                            {
                                              *(_QWORD *)(v1347 - 16) = v1349;
                                              operator delete(v1349);
                                            }
                                            v1347 = j;
                                          }
                                          while (j != v1346);
                                          v1348 = (void *)*(v1345 - 3);
                                        }
                                        *(v1345 - 2) = v1346;
                                        operator delete(v1348);
                                      }
                                      v1351 = (std::__shared_weak_count *)*(v1345 - 6);
                                      if (v1351)
                                        std::__shared_weak_count::__release_weak(v1351);
                                      v1345 -= 7;
                                    }
                                  }
                                  v302 = v1469;
                                  if (v1333)
                                    operator delete(v1333);
LABEL_1137:
                                  a12[1] = v959;
LABEL_1138:
                                  v956 += 11;
                                  if (v956 == v1514)
                                  {
                                    if (v958)
                                      operator delete(v958);
LABEL_1613:
                                    v956 = (uint64_t *)v1591[0];
                                    goto LABEL_1614;
                                  }
                                  continue;
                                }
                                goto LABEL_1143;
                              }
LABEL_1490:
                              v1287 = v960;
                              v1288 = v969;
                              operator delete((void *)v970);
                              v969 = v1288;
                              v960 = v1287;
                              v963 = v1112;
                              goto LABEL_1142;
                            }
                            v1147 = (uint64_t)&v963[-v1137];
                            v1148 = (uint64_t)&v963[-v1137] >> 3;
                            if (v1148 >= (uint64_t)j)
                            {
                              v1152 = v963;
                              v1149 = (uint64_t *)(v1134 + 8 * j);
                            }
                            else
                            {
                              v1149 = (uint64_t *)(v1134 + 8 * v1148);
                              v1150 = 8 * v1133 - v1147;
                              v1151 = v1149;
                              v1152 = v963;
                              if (v1150 < 0x38)
                                goto LABEL_1794;
                              v1151 = (uint64_t *)(v1134 + 8 * v1148);
                              v1152 = v963;
                              if (v1137 - v1134 < 0x20)
                                goto LABEL_1794;
                              v1153 = (v1150 >> 3) + 1;
                              v1154 = v1153 & 0x3FFFFFFFFFFFFFFCLL;
                              v1151 = &v1149[v1154];
                              v1155 = v963 + 16;
                              v1156 = (__int128 *)(v1134 + 8 * v1148 + 16);
                              v1157 = v1153 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1158 = *v1156;
                                *(v1155 - 1) = *(v1156 - 1);
                                *v1155 = v1158;
                                v1155 += 2;
                                v1156 += 2;
                                v1157 -= 4;
                              }
                              while (v1157);
                              v1152 = &v963[v1154 * 8];
                              if (v1153 != (v1153 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1794:
                                do
                                {
                                  v1159 = *v1151++;
                                  *(_QWORD *)v1152 = v1159;
                                  v1152 += 8;
                                }
                                while (v1151 != (uint64_t *)(v1134 + 8 * j));
                              }
                              if (v1147 < 1)
                              {
                                v963 = v1152;
LABEL_1543:
                                v958 = (char *)v970;
                                v304 = v1468;
                                v302 = v1469;
                                goto LABEL_1142;
                              }
                            }
                            v1160 = (char *)(v1137 + 8 * j);
                            v1161 = v1152 - v1160;
                            v1162 = &v1152[-8 * j];
                            v1163 = v1152;
                            if (v1162 < v963)
                            {
                              v1164 = (v1135 & 0xFFFFFFFFFFFFFFF8) + v1161;
                              v1165 = v970 + v1164 + 8;
                              if ((unint64_t)v963 > v1165)
                                v1165 = (unint64_t)v963;
                              v1166 = v1165 + ~v970 - v1164;
                              v1167 = &v1152[-8 * j];
                              v1163 = v1152;
                              if (v1166 <= 0x57)
                                goto LABEL_1795;
                              v1167 = &v1152[-8 * j];
                              v1163 = v1152;
                              if ((unint64_t)&v1160[-(v1135 & 0xFFFFFFFFFFFFFFF8) - v970] < 0x20)
                                goto LABEL_1795;
                              v1168 = (v1166 >> 3) + 1;
                              v1169 = 8 * (v1168 & 0x3FFFFFFFFFFFFFFCLL);
                              v1167 = &v1162[v1169];
                              v1170 = v1152 + 16;
                              v1171 = (__int128 *)(v970 + 8 * (v1161 >> 3) + 8 * v1136 + 16);
                              v1172 = v1168 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1173 = *v1171;
                                *(v1170 - 1) = *(v1171 - 1);
                                *v1170 = v1173;
                                v1170 += 2;
                                v1171 += 2;
                                v1172 -= 4;
                              }
                              while (v1172);
                              v1163 = &v1152[v1169];
                              if (v1168 != (v1168 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1795:
                                do
                                {
                                  v1174 = *(_QWORD *)v1167;
                                  v1167 += 8;
                                  *(_QWORD *)v1163 = v1174;
                                  v1163 += 8;
                                }
                                while (v1167 < v963);
                              }
                            }
                            if (v1152 != v1160)
                            {
                              v1175 = v1161 - 8;
                              if ((unint64_t)(v1161 - 8) < 0x218)
                                goto LABEL_1337;
                              v1289 = v1175 & 0xFFFFFFFFFFFFFFF8;
                              if (&v1152[-(v1175 & 0xFFFFFFFFFFFFFFF8) - 8] > v1152 - 8)
                                goto LABEL_1337;
                              v1290 = v1152 - 4;
                              if (&v1152[-v1289 - 4] > v1152 - 4)
                                goto LABEL_1337;
                              v1291 = v1161 + (v1135 & 0xFFFFFFFFFFFFFFF8);
                              if (v970 - 8 + v1291 - v1289 > v970 - 8 + v1291)
                                goto LABEL_1337;
                              v1292 = (char *)(v970 - 4 + v1291);
                              if (&v1292[-v1289] > v1292)
                                goto LABEL_1337;
                              v1293 = v1175 >> 3;
                              v1294 = 8 * (v1175 >> 3);
                              v1295 = &v1152[-v1294 - 8];
                              v1296 = &v1290[-v1294];
                              v1297 = v970 - 8 + v1291 - v1289;
                              v1298 = v970 - 4 + v1291 - v1289;
                              v1299 = v1295 >= v1292 || v1297 >= (unint64_t)v1290;
                              v1300 = !v1299;
                              v1301 = v1295 >= v1162 || v1298 >= (unint64_t)v1290;
                              v1302 = !v1301;
                              v1303 = v1296 >= v1292 || v1297 >= (unint64_t)v1152;
                              v1304 = !v1303;
                              v1305 = v1296 >= v1162 || v1298 >= (unint64_t)v1152;
                              v1306 = !v1305;
                              v1307 = v1296 >= v1290 || v1295 >= v1152;
                              if (!v1307 || v1300 || v1302 || v1304 || v1306)
                              {
LABEL_1337:
                                v1176 = v1152;
LABEL_1338:
                                v1177 = v1176 - 4;
                                do
                                {
                                  v1178 = *((_DWORD *)v1162 - 2);
                                  v1162 -= 8;
                                  *((_DWORD *)v1177 - 1) = v1178;
                                  *(_DWORD *)v1177 = *((_DWORD *)v1162 + 1);
                                  v1177 -= 8;
                                }
                                while (v1162 != (char *)v1137);
                              }
                              else
                              {
                                v1308 = v1293 + 1;
                                v1309 = (v1293 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                                v1176 = &v1152[-8 * v1309];
                                v1310 = (const float *)(v1162 - 32);
                                v1311 = (float *)(v1152 - 32);
                                v1312 = v1309;
                                do
                                {
                                  v1611 = vld2q_f32(v1310);
                                  v1310 -= 8;
                                  vst2q_f32(v1311, v1611);
                                  v1311 -= 8;
                                  v1312 -= 4;
                                }
                                while (v1312);
                                if (v1308 != v1309)
                                {
                                  v1162 -= 8 * v1309;
                                  goto LABEL_1338;
                                }
                              }
                            }
                            if (v1149 != (uint64_t *)v1134)
                            {
                              v1179 = (unint64_t)v1149 - v1134 - 8;
                              if (v1179 < 0x58
                                || v1137 < v1134 + (v1179 & 0xFFFFFFFFFFFFFFF8) + 8
                                && v1134 < v970 + (v1135 & 0xFFFFFFFFFFFFFFF8) + (v1179 & 0xFFFFFFFFFFFFFFF8) + 8)
                              {
                                do
                                {
LABEL_1348:
                                  *(_DWORD *)v1137 = *(_DWORD *)v1134;
                                  *(_DWORD *)(v1137 + 4) = *(_DWORD *)(v1134 + 4);
                                  v1134 += 8;
                                  v1137 += 8;
                                }
                                while ((uint64_t *)v1134 != v1149);
                              }
                              else
                              {
                                v1180 = (v1179 >> 3) + 1;
                                v1181 = 8 * (v1180 & 0x3FFFFFFFFFFFFFF8);
                                v1137 += v1181;
                                v1182 = (__int128 *)(v1134 + 32);
                                v1183 = (_OWORD *)(v970 + 8 * v1136 + 32);
                                v1184 = v1180 & 0x3FFFFFFFFFFFFFF8;
                                do
                                {
                                  v1186 = *(v1182 - 2);
                                  v1185 = *(v1182 - 1);
                                  v1188 = *v1182;
                                  v1187 = v1182[1];
                                  v1182 += 4;
                                  *(v1183 - 2) = v1186;
                                  *(v1183 - 1) = v1185;
                                  *v1183 = v1188;
                                  v1183[1] = v1187;
                                  v1183 += 4;
                                  v1184 -= 8;
                                }
                                while (v1184);
                                if (v1180 != (v1180 & 0x3FFFFFFFFFFFFFF8))
                                {
                                  v1134 += v1181;
                                  goto LABEL_1348;
                                }
                              }
                            }
                            v963 = v1163;
                            goto LABEL_1543;
                          }
                          v1017 = (uint64_t)&v963[-v990];
                          v1018 = (uint64_t)&v963[-v990] >> 3;
                          if (v1018 >= v987)
                          {
                            v1019 = v984 + 8 * v987;
                            v1023 = v963;
                            v302 = v1469;
                          }
                          else
                          {
                            v1019 = v984 + 8 * v1018;
                            v302 = v1469;
                            if ((uint64_t *)v1019 == v985)
                            {
                              v1023 = v963;
                              if (v1017 < 1)
                              {
LABEL_1540:
                                v963 = v1023;
                                goto LABEL_1305;
                              }
                            }
                            else
                            {
                              v1020 = 8 * v966 + v964 + v1017;
                              v1021 = (unint64_t)v985 - v1020 - 8;
                              v1022 = (uint64_t *)(v984 + 8 * v1018);
                              v1023 = v963;
                              if (v1021 < 0x58)
                                goto LABEL_1796;
                              v1022 = (uint64_t *)(v984 + 8 * v1018);
                              v1023 = v963;
                              if ((unint64_t)&v963[-v1020] < 0x20)
                                goto LABEL_1796;
                              v1024 = (v1021 >> 3) + 1;
                              v1025 = 8 * (v1024 & 0x3FFFFFFFFFFFFFFCLL);
                              v1022 = (uint64_t *)(v1019 + v1025);
                              v1026 = v963 + 16;
                              v1027 = (__int128 *)(v964 + 8 * v966 + 8 * v1018 + 16);
                              v1028 = v1024 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1029 = *v1027;
                                *(v1026 - 1) = *(v1027 - 1);
                                *v1026 = v1029;
                                v1026 += 2;
                                v1027 += 2;
                                v1028 -= 4;
                              }
                              while (v1028);
                              v1023 = &v963[v1025];
                              if (v1024 != (v1024 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1796:
                                do
                                {
                                  v1030 = *v1022++;
                                  *(_QWORD *)v1023 = v1030;
                                  v1023 += 8;
                                }
                                while (v1022 != v985);
                              }
                              if (v1017 < 1)
                                goto LABEL_1540;
                            }
                          }
                          v1044 = (char *)(v990 + 8 * v987);
                          v1045 = v1023 - v1044;
                          v1046 = &v1023[-8 * v987];
                          v1047 = v1023;
                          if (v1046 < v963)
                          {
                            v1048 = (v988 & 0xFFFFFFFFFFFFFFF8) + v1045;
                            v1049 = v970 + v1048 + 8;
                            if ((unint64_t)v963 > v1049)
                              v1049 = (unint64_t)v963;
                            v1050 = v1049 + ~v970 - v1048;
                            v1051 = &v1023[-8 * v987];
                            v1047 = v1023;
                            if (v1050 <= 0x57)
                              goto LABEL_1797;
                            v1051 = &v1023[-8 * v987];
                            v1047 = v1023;
                            if ((unint64_t)&v1044[-(v988 & 0xFFFFFFFFFFFFFFF8) - v970] < 0x20)
                              goto LABEL_1797;
                            v1052 = (v1050 >> 3) + 1;
                            v1053 = 8 * (v1052 & 0x3FFFFFFFFFFFFFFCLL);
                            v1051 = &v1046[v1053];
                            v1054 = v1023 + 16;
                            v1055 = (__int128 *)(v970 + 8 * (v1045 >> 3) + 8 * v989 + 16);
                            v1056 = v1052 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v1057 = *v1055;
                              *(v1054 - 1) = *(v1055 - 1);
                              *v1054 = v1057;
                              v1054 += 2;
                              v1055 += 2;
                              v1056 -= 4;
                            }
                            while (v1056);
                            v1047 = &v1023[v1053];
                            if (v1052 != (v1052 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_1797:
                              do
                              {
                                v1058 = *(_QWORD *)v1051;
                                v1051 += 8;
                                *(_QWORD *)v1047 = v1058;
                                v1047 += 8;
                              }
                              while (v1051 < v963);
                            }
                          }
                          if (v1023 != v1044)
                          {
                            v1059 = v1045 - 8;
                            if ((unint64_t)(v1045 - 8) < 0x218)
                              goto LABEL_1229;
                            v1209 = v1059 & 0xFFFFFFFFFFFFFFF8;
                            if (&v1023[-(v1059 & 0xFFFFFFFFFFFFFFF8) - 8] > v1023 - 8)
                              goto LABEL_1229;
                            v1210 = v1023 - 4;
                            if (&v1023[-v1209 - 4] > v1023 - 4)
                              goto LABEL_1229;
                            v1211 = v1045 + (v988 & 0xFFFFFFFFFFFFFFF8);
                            if (v970 - 8 + v1211 - v1209 > v970 - 8 + v1211)
                              goto LABEL_1229;
                            v1212 = (char *)(v970 - 4 + v1211);
                            if (&v1212[-v1209] > v1212)
                              goto LABEL_1229;
                            v1213 = v1059 >> 3;
                            v1214 = 8 * (v1059 >> 3);
                            v1215 = &v1023[-v1214 - 8];
                            v1216 = &v1210[-v1214];
                            v1217 = v970 - 8 + v1211 - v1209;
                            v1218 = v970 - 4 + v1211 - v1209;
                            v1219 = v1215 >= v1212 || v1217 >= (unint64_t)v1210;
                            v1220 = !v1219;
                            v1221 = v1215 >= v1046 || v1218 >= (unint64_t)v1210;
                            v1222 = !v1221;
                            v1223 = v1216 >= v1212 || v1217 >= (unint64_t)v1023;
                            v1224 = !v1223;
                            v1225 = v1216 >= v1046 || v1218 >= (unint64_t)v1023;
                            v1226 = !v1225;
                            v1227 = v1216 >= v1210 || v1215 >= v1023;
                            if (!v1227 || v1220 || v1222 || v1224 || v1226)
                            {
LABEL_1229:
                              v1060 = v1023;
LABEL_1230:
                              v1061 = v1060 - 4;
                              do
                              {
                                v1062 = *((_DWORD *)v1046 - 2);
                                v1046 -= 8;
                                *((_DWORD *)v1061 - 1) = v1062;
                                *(_DWORD *)v1061 = *((_DWORD *)v1046 + 1);
                                v1061 -= 8;
                              }
                              while (v1046 != (char *)v990);
                            }
                            else
                            {
                              v1228 = v1213 + 1;
                              v1229 = (v1213 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                              v1060 = &v1023[-8 * v1229];
                              v1230 = (const float *)(v1046 - 32);
                              v1231 = (float *)(v1023 - 32);
                              v1232 = v1229;
                              do
                              {
                                v1609 = vld2q_f32(v1230);
                                v1230 -= 8;
                                vst2q_f32(v1231, v1609);
                                v1231 -= 8;
                                v1232 -= 4;
                              }
                              while (v1232);
                              if (v1228 != v1229)
                              {
                                v1046 -= 8 * v1229;
                                goto LABEL_1230;
                              }
                            }
                          }
                          if (v1019 != v984)
                          {
                            v1063 = 8 * v966;
                            v1064 = v1019 - v964 - 8 * v966 - 8;
                            if (v1064 >= 0x78
                              && ((v1065 = v964 + v1063, v990 < v964 + v1063 + (v1064 & 0xFFFFFFFFFFFFFFF8) + 8)
                                ? (_CF = v984 >= v970
                                               + (v988 & 0xFFFFFFFFFFFFFFF8)
                                               + (v1064 & 0xFFFFFFFFFFFFFFF8)
                                               + 8)
                                : (_CF = 1),
                                  _CF))
                            {
                              v1067 = (v1064 >> 3) + 1;
                              v1068 = 8 * (v1067 & 0x3FFFFFFFFFFFFFF8);
                              v990 += v1068;
                              v1069 = (__int128 *)(v1065 + 32);
                              v1070 = (_OWORD *)(v970 + 8 * v989 + 32);
                              v1071 = v1067 & 0x3FFFFFFFFFFFFFF8;
                              do
                              {
                                v1073 = *(v1069 - 2);
                                v1072 = *(v1069 - 1);
                                v1075 = *v1069;
                                v1074 = v1069[1];
                                v1069 += 4;
                                *(v1070 - 2) = v1073;
                                *(v1070 - 1) = v1072;
                                *v1070 = v1075;
                                v1070[1] = v1074;
                                v1070 += 4;
                                v1071 -= 8;
                              }
                              while (v1071);
                              if (v1067 != (v1067 & 0x3FFFFFFFFFFFFFF8))
                              {
                                v984 += v1068;
                                goto LABEL_1243;
                              }
                            }
                            else
                            {
                              do
                              {
LABEL_1243:
                                *(_DWORD *)v990 = *(_DWORD *)v984;
                                *(_DWORD *)(v990 + 4) = *(_DWORD *)(v984 + 4);
                                v984 += 8;
                                v990 += 8;
                              }
                              while (v984 != v1019);
                            }
                          }
                          v963 = v1047;
                          goto LABEL_1305;
                        }
                        break;
                      }
                      v1002 = v964 + 8 * v965 + 8;
                      v1003 = v1002 - v984;
                      if ((uint64_t)(v1002 - v984) < 1)
                      {
                        v958 = (char *)v970;
                        v304 = v1468;
                        v956 = v1544;
                        goto LABEL_1142;
                      }
                      v1004 = v1003 >> 3;
                      j = (unint64_t)&v963[-v970];
                      v1005 = (uint64_t)&v963[-v970] >> 3;
                      v1006 = v970 + ((unint64_t)&v963[-v970] & 0xFFFFFFFFFFFFFFF8);
                      if (v1003 >> 3 > (v957 - v963) >> 3)
                      {
                        v1007 = v1004 + v1005;
                        if ((unint64_t)(v1004 + v1005) >> 61)
                          abort();
                        if ((uint64_t)&v957[-v970] >> 2 > v1007)
                          v1007 = (uint64_t)&v957[-v970] >> 2;
                        if ((unint64_t)&v957[-v970] >= 0x7FFFFFFFFFFFFFF8)
                          v1008 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v1008 = v1007;
                        if (v1008)
                        {
                          v1524 = v1002 - v984;
                          v1519 = v1003 >> 3;
                          v1531 = v970;
                          if (v1008 >> 61)
                            goto LABEL_1767;
                          v1009 = v964;
                          v1010 = j;
                          v1011 = v1005;
                          v1012 = v966;
                          v1013 = v969;
                          v1014 = v960;
                          v1015 = v1008;
                          v1016 = operator new(8 * v1008);
                          v960 = v1014;
                          v969 = v1013;
                          v966 = v1012;
                          v1005 = v1011;
                          j = v1010;
                          v964 = v1009;
                          v970 = v1531;
                          v1004 = v1519;
                          v1003 = v1524;
                          v1008 = v1015;
                        }
                        else
                        {
                          v1016 = 0;
                        }
                        v958 = &v1016[8 * v1005];
                        v1112 = &v958[8 * v1004];
                        if ((unint64_t)(v1003 - 8) >= 0x38)
                        {
                          v1113 = &v1016[8 * v1005];
                          if ((unint64_t)&v1016[(j & 0xFFFFFFFFFFFFFFF8) - v984] < 0x20)
                            goto LABEL_1287;
                          v1114 = ((unint64_t)(v1003 - 8) >> 3) + 1;
                          v1115 = 8 * (v1114 & 0x3FFFFFFFFFFFFFFCLL);
                          v1113 = &v958[v1115];
                          v1116 = (__int128 *)(v964 + 8 * v966 + 16);
                          v1117 = &v1016[8 * v1005 + 16];
                          v1118 = v1114 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v1119 = *v1116;
                            *(v1117 - 1) = *(v1116 - 1);
                            *v1117 = v1119;
                            v1116 += 2;
                            v1117 += 2;
                            v1118 -= 4;
                          }
                          while (v1118);
                          if (v1114 != (v1114 & 0x3FFFFFFFFFFFFFFCLL))
                          {
                            v984 += v1115;
                            goto LABEL_1287;
                          }
                        }
                        else
                        {
                          v1113 = &v1016[8 * v1005];
                          do
                          {
LABEL_1287:
                            v1120 = *(_QWORD *)v984;
                            v984 += 8;
                            *(_QWORD *)v1113 = v1120;
                            v1113 += 8;
                          }
                          while (v1113 != v1112);
                        }
                        v1121 = j - 8;
                        v304 = v1468;
                        if (j >= 8)
                        {
                          if (v1121 < 0x168)
                          {
                            v1122 = (char *)v1006;
                            goto LABEL_1291;
                          }
                          if (&v1016[(j & 0xFFFFFFFFFFFFFFF8) - 8 - (v1121 & 0xFFFFFFFFFFFFFFF8)] > &v1016[(j & 0xFFFFFFFFFFFFFFF8) - 8])
                          {
                            v1122 = (char *)v1006;
                            goto LABEL_1291;
                          }
                          if (v970 + (j & 0xFFFFFFFFFFFFFFF8) - 8 - (v1121 & 0xFFFFFFFFFFFFFFF8) > v970 + (j & 0xFFFFFFFFFFFFFFF8) - 8)
                          {
                            v1122 = (char *)v1006;
                            goto LABEL_1291;
                          }
                          v1122 = (char *)v1006;
                          if (v970 - (unint64_t)v1016 < 0x20)
                            goto LABEL_1798;
                          v1273 = (v1121 >> 3) + 1;
                          v1122 = (char *)(v1006 - 8 * (v1273 & 0x3FFFFFFFFFFFFFFCLL));
                          v1274 = (__int128 *)(v970 + 8 * v1005 - 16);
                          v1275 = &v1016[8 * v1005 - 16];
                          v1276 = v1273 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v1277 = *v1274;
                            *(v1275 - 1) = *(v1274 - 1);
                            *v1275 = v1277;
                            v1274 -= 2;
                            v1275 -= 2;
                            v1276 -= 4;
                          }
                          while (v1276);
                          v958 -= 8 * (v1273 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v1273 != (v1273 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_1798:
                            do
                            {
LABEL_1291:
                              v1123 = *((_QWORD *)v1122 - 1);
                              v1122 -= 8;
                              *((_QWORD *)v958 - 1) = v1123;
                              v958 -= 8;
                            }
                            while (v1122 != (char *)v970);
                          }
                        }
                        v957 = &v1016[8 * v1008];
                        if (v963 == (char *)v1006)
                        {
                          v956 = v1544;
                        }
                        else
                        {
                          v1124 = (char *)((j & 0xFFFFFFFFFFFFFFF8) + v970);
                          v1125 = v963 - v1124 - 8;
                          if (v1125 >= 0x68)
                          {
                            v956 = v1544;
                            if ((unint64_t)(&v1016[(j & 0xFFFFFFFFFFFFFFF8) + (v1003 & 0xFFFFFFFFFFFFFFF8)]
                                                  - v1124) >= 0x20)
                            {
                              v1189 = (v1125 >> 3) + 1;
                              v1190 = 8 * (v1189 & 0x3FFFFFFFFFFFFFFCLL);
                              v1006 += v1190;
                              v1191 = 8 * v1005;
                              v1192 = v1189 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v1193 = &v1016[8 * v1004 + v1191];
                                v1194 = *(_OWORD *)(v970 + v1191 + 16);
                                *v1193 = *(_OWORD *)(v970 + v1191);
                                v1193[1] = v1194;
                                v1191 += 32;
                                v1192 -= 4;
                              }
                              while (v1192);
                              v1112 += v1190;
                              if (v1189 == (v1189 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                v302 = v1469;
                                goto LABEL_1490;
                              }
                            }
                          }
                          else
                          {
                            v956 = v1544;
                          }
                          do
                          {
                            v1195 = *(_QWORD *)v1006;
                            v1006 += 8;
                            *(_QWORD *)v1112 = v1195;
                            v1112 += 8;
                          }
                          while ((char *)v1006 != v963);
                        }
                        v963 = v1112;
                        v302 = v1469;
                        if (!v970)
                          goto LABEL_1142;
                        goto LABEL_1490;
                      }
                      v1031 = (uint64_t)&v963[-v1006];
                      v1032 = (uint64_t)&v963[-v1006] >> 3;
                      if (v1032 < v1004)
                      {
                        v1033 = v984 + 8 * v1032;
                        v956 = v1544;
                        if (v1033 == v1002)
                        {
                          v1036 = v963;
                          if (v1031 >= 1)
                            goto LABEL_1216;
                        }
                        else
                        {
                          v1034 = (v965 - (v966 + v1032)) & 0x1FFFFFFFFFFFFFFFLL;
                          v1035 = (uint64_t *)(v984 + 8 * v1032);
                          v1036 = v963;
                          if (v1034 < 0xB)
                            goto LABEL_1799;
                          v1035 = (uint64_t *)(v984 + 8 * v1032);
                          v1036 = v963;
                          if (v1006 - (8 * v966 + v964) < 0x20)
                            goto LABEL_1799;
                          v1037 = v1034 + 1;
                          v1038 = 8 * (v1037 & 0x3FFFFFFFFFFFFFFCLL);
                          v1035 = (uint64_t *)(v1033 + v1038);
                          v1039 = v963 + 16;
                          v1040 = (__int128 *)(v964 + 8 * v966 + 8 * v1032 + 16);
                          v1041 = v1037 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v1042 = *v1040;
                            *(v1039 - 1) = *(v1040 - 1);
                            *v1039 = v1042;
                            v1039 += 2;
                            v1040 += 2;
                            v1041 -= 4;
                          }
                          while (v1041);
                          v1036 = &v963[v1038];
                          if (v1037 != (v1037 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_1799:
                            do
                            {
                              v1043 = *v1035++;
                              *(_QWORD *)v1036 = v1043;
                              v1036 += 8;
                            }
                            while (v1035 != (uint64_t *)v1002);
                          }
                          if (v1031 >= 1)
                          {
LABEL_1216:
                            v1002 = v1033;
                            goto LABEL_1246;
                          }
                        }
                        v963 = v1036;
                        goto LABEL_1543;
                      }
                      v1036 = v963;
                      v1033 = v964 + 8 * v965 + 8;
                      v956 = v1544;
LABEL_1246:
                      v1076 = (char *)(v1006 + 8 * v1004);
                      v1077 = v1036 - v1076;
                      v1078 = &v1036[-8 * v1004];
                      v1079 = v1036;
                      if (v1078 < v963)
                      {
                        v1080 = (j & 0xFFFFFFFFFFFFFFF8) + v1077;
                        v1081 = v970 + v1080 + 8;
                        if ((unint64_t)v963 > v1081)
                          v1081 = (unint64_t)v963;
                        v1082 = v1081 + ~v970 - v1080;
                        v1083 = &v1036[-8 * v1004];
                        v1079 = v1036;
                        if (v1082 <= 0x57)
                          goto LABEL_1800;
                        v1083 = &v1036[-8 * v1004];
                        v1079 = v1036;
                        if ((unint64_t)&v1076[-(j & 0xFFFFFFFFFFFFFFF8) - v970] < 0x20)
                          goto LABEL_1800;
                        v1084 = (v1082 >> 3) + 1;
                        v1085 = 8 * (v1084 & 0x3FFFFFFFFFFFFFFCLL);
                        v1083 = &v1078[v1085];
                        v1086 = v1036 + 16;
                        v1087 = (__int128 *)(v970 + 8 * (v1077 >> 3) + 8 * v1005 + 16);
                        v1088 = v1084 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v1089 = *v1087;
                          *(v1086 - 1) = *(v1087 - 1);
                          *v1086 = v1089;
                          v1086 += 2;
                          v1087 += 2;
                          v1088 -= 4;
                        }
                        while (v1088);
                        v1079 = &v1036[v1085];
                        if (v1084 != (v1084 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_1800:
                          do
                          {
                            v1090 = *(_QWORD *)v1083;
                            v1083 += 8;
                            *(_QWORD *)v1079 = v1090;
                            v1079 += 8;
                          }
                          while (v1083 < v963);
                        }
                      }
                      if (v1036 != v1076)
                      {
                        v1091 = v1077 - 8;
                        if ((unint64_t)(v1077 - 8) < 0x218)
                          goto LABEL_1257;
                        v1233 = v1091 & 0xFFFFFFFFFFFFFFF8;
                        if (&v1036[-(v1091 & 0xFFFFFFFFFFFFFFF8) - 8] > v1036 - 8)
                          goto LABEL_1257;
                        v1234 = v1036 - 4;
                        if (&v1036[-v1233 - 4] > v1036 - 4)
                          goto LABEL_1257;
                        v1235 = v1077 + (j & 0xFFFFFFFFFFFFFFF8);
                        if (v970 - 8 + v1235 - v1233 > v970 - 8 + v1235)
                          goto LABEL_1257;
                        v1236 = (char *)(v970 - 4 + v1235);
                        if (&v1236[-v1233] > v1236)
                          goto LABEL_1257;
                        v1237 = v1091 >> 3;
                        v1238 = 8 * (v1091 >> 3);
                        v1239 = &v1036[-v1238 - 8];
                        v1240 = &v1234[-v1238];
                        v1241 = v970 - 8 + v1235 - v1233;
                        v1242 = v970 - 4 + v1235 - v1233;
                        v1244 = v1239 < v1236 && v1241 < (unint64_t)v1234;
                        v1246 = v1239 < v1078 && v1242 < (unint64_t)v1234;
                        v1248 = v1240 < v1236 && v1241 < (unint64_t)v1036;
                        v1250 = v1240 < v1078 && v1242 < (unint64_t)v1036;
                        if (v1240 < v1234 && v1239 < v1036)
                        {
                          v1092 = v1036;
                          v1005 = (uint64_t)&v963[-v970] >> 3;
                          goto LABEL_1258;
                        }
                        v1005 = (uint64_t)&v963[-v970] >> 3;
                        if (v1244 || v1246 || v1248 || v1250)
                        {
LABEL_1257:
                          v1092 = v1036;
LABEL_1258:
                          v1093 = v1092 - 4;
                          do
                          {
                            v1094 = *((_DWORD *)v1078 - 2);
                            v1078 -= 8;
                            *((_DWORD *)v1093 - 1) = v1094;
                            *(_DWORD *)v1093 = *((_DWORD *)v1078 + 1);
                            v1093 -= 8;
                          }
                          while (v1078 != (char *)v1006);
                        }
                        else
                        {
                          v1252 = v1237 + 1;
                          v1253 = (v1237 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                          v1092 = &v1036[-8 * v1253];
                          v1254 = (const float *)(v1078 - 32);
                          v1255 = (float *)(v1036 - 32);
                          v1256 = v1253;
                          do
                          {
                            v1610 = vld2q_f32(v1254);
                            v1254 -= 8;
                            vst2q_f32(v1255, v1610);
                            v1255 -= 8;
                            v1256 -= 4;
                          }
                          while (v1256);
                          if (v1252 != v1253)
                          {
                            v1078 -= 8 * v1253;
                            goto LABEL_1258;
                          }
                        }
                      }
                      if (v1033 == v984)
                      {
                        v963 = v1079;
                        goto LABEL_1543;
                      }
                      v1095 = 8 * v966;
                      v1096 = v1002 - v964 - 8 * v966 - 8;
                      if (v1096 < 0x78)
                      {
                        v304 = v1468;
                        goto LABEL_1468;
                      }
                      v1257 = v964 + v1095;
                      v1258 = v1006 >= v964 + v1095 + (v1096 & 0xFFFFFFFFFFFFFFF8) + 8
                           || v984 >= v970 + (j & 0xFFFFFFFFFFFFFFF8) + (v1096 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v304 = v1468;
                      if (v1258)
                      {
                        v1259 = (v1096 >> 3) + 1;
                        v1260 = 8 * (v1259 & 0x3FFFFFFFFFFFFFF8);
                        v1006 += v1260;
                        v1261 = (__int128 *)(v1257 + 32);
                        v1262 = (_OWORD *)(v970 + 8 * v1005 + 32);
                        v1263 = v1259 & 0x3FFFFFFFFFFFFFF8;
                        do
                        {
                          v1265 = *(v1261 - 2);
                          v1264 = *(v1261 - 1);
                          v1267 = *v1261;
                          v1266 = v1261[1];
                          v1261 += 4;
                          *(v1262 - 2) = v1265;
                          *(v1262 - 1) = v1264;
                          *v1262 = v1267;
                          v1262[1] = v1266;
                          v1262 += 4;
                          v1263 -= 8;
                        }
                        while (v1263);
                        if (v1259 != (v1259 & 0x3FFFFFFFFFFFFFF8))
                        {
                          v984 += v1260;
                          goto LABEL_1468;
                        }
                      }
                      else
                      {
                        do
                        {
LABEL_1468:
                          *(_DWORD *)v1006 = *(_DWORD *)v984;
                          *(_DWORD *)(v1006 + 4) = *(_DWORD *)(v984 + 4);
                          v984 += 8;
                          v1006 += 8;
                        }
                        while (v984 != v1033);
                      }
                      v963 = v1079;
                      v958 = (char *)v970;
                      v302 = v1469;
                      goto LABEL_1142;
                    }
                    break;
                  }
                  if (v1582[0] == v1582[1])
                  {
                    v15 = (md::PolygonOverlayRenderable *)v1500;
                    v1372 = (std::__shared_weak_count *)v1602;
                    if (!v1602)
                      goto LABEL_1643;
                  }
                  else
                  {
                    v1359 = (char **)v1601;
                    v1360 = ((char *)v1582[1] - (char *)v1582[0]) >> 3;
                    if (*((_QWORD *)v1601 + 20) != v1360)
                    {
                      *((_QWORD *)v1601 + 20) = v1360;
                      md::MaskingOverlayRenderable::buildRenderItems(v1359);
                    }
                    v1361 = (char *)operator new(0xA8uLL);
                    v1362 = (uint64_t *)v1361;
                    *(_QWORD *)v1361 = 0;
                    *((_QWORD *)v1361 + 1) = 0;
                    v1363 = (std::__shared_weak_count *)v1602;
                    if (v1602)
                    {
                      v1364 = (unint64_t *)(v1602 + 8);
                      do
                        v1365 = __ldxr(v1364);
                      while (__stxr(v1365 + 1, v1364));
                    }
                    *((_OWORD *)v1361 + 1) = 0u;
                    *((_OWORD *)v1361 + 2) = 0u;
                    *((_OWORD *)v1361 + 3) = *(_OWORD *)v1582;
                    v1366 = v1583;
                    v1582[0] = 0;
                    v1582[1] = 0;
                    v1583 = 0;
                    *((_QWORD *)v1361 + 8) = v1366;
                    *((_QWORD *)v1361 + 9) = v1359;
                    *((_QWORD *)v1361 + 10) = v1363;
                    if (v1363)
                    {
                      v1367 = (unint64_t *)&v1363->__shared_owners_;
                      do
                        v1368 = __ldxr(v1367);
                      while (__stxr(v1368 + 1, v1367));
                    }
                    *(_OWORD *)(v1361 + 104) = 0u;
                    *(_OWORD *)(v1361 + 88) = 0u;
                    *((_QWORD *)v1361 + 15) = 0;
                    *((_QWORD *)v1361 + 16) = v1500;
                    *((_QWORD *)v1361 + 17) = v1498;
                    *((_QWORD *)v1361 + 18) = v1498;
                    *((_WORD *)v1361 + 76) = 2;
                    *((_QWORD *)v1361 + 20) = 0;
                    if (v1363)
                    {
                      v1369 = (unint64_t *)&v1363->__shared_owners_;
                      do
                        v1370 = __ldaxr(v1369);
                      while (__stlxr(v1370 - 1, v1369));
                      if (!v1370)
                      {
                        ((void (*)(std::__shared_weak_count *))v1363->__on_zero_shared)(v1363);
                        std::__shared_weak_count::__release_weak(v1363);
                      }
                    }
                    v15 = 0;
                    v1371 = *a6;
                    *v1362 = *a6;
                    v1362[1] = (uint64_t)a6;
                    *(_QWORD *)(v1371 + 8) = v1362;
                    *a6 = (uint64_t)v1362;
                    ++a6[2];
                    v1372 = (std::__shared_weak_count *)v1602;
                    if (!v1602)
                    {
LABEL_1643:
                      v1375 = v1584[1];
                      if (v1584[1])
                      {
                        v1376 = c[0];
                        if (c[0] != v1584[1])
                        {
                          do
                            md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((CGContextRef)((char *)v1376 - 96));
                          while (v1376 != v1375);
                          v1375 = v1584[1];
                        }
                        operator delete(v1375);
                      }

                      v845 = v15;
LABEL_1649:
                      v846 = (md::PolygonOverlayRenderable *)v1582[0];
                      if (v1582[0])
                      {
LABEL_1650:
                        v15 = (md::PolygonOverlayRenderable *)v1582[1];
                        v1377 = v846;
                        if (v1582[1] != v846)
                        {
                          do
                          {
                            v1379 = (md::PolygonOverlayRenderable *)*((_QWORD *)v15 - 1);
                            v15 = (md::PolygonOverlayRenderable *)((char *)v15 - 8);
                            v1378 = v1379;
                            *(_QWORD *)v15 = 0;
                            if (v1379)
                            {
                              md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v1378);
                              MEMORY[0x1A1AF4E00]();
                            }
                          }
                          while (v15 != v846);
                          v1377 = (md::PolygonOverlayRenderable *)v1582[0];
                        }
                        v1582[1] = v846;
                        operator delete(v1377);
                      }
LABEL_1657:
                      if (v845)
                        operator delete(v845);
                      v1380 = (std::__shared_weak_count *)v1580[1];
                      if (v1580[1])
                      {
                        v1381 = (unint64_t *)((char *)v1580[1] + 8);
                        do
                          v1382 = __ldaxr(v1381);
                        while (__stlxr(v1382 - 1, v1381));
                        if (!v1382)
                        {
                          ((void (*)(std::__shared_weak_count *))v1380->__on_zero_shared)(v1380);
                          std::__shared_weak_count::__release_weak(v1380);
                        }
                      }
                      goto LABEL_1667;
                    }
                  }
                  v1373 = (unint64_t *)&v1372->__shared_owners_;
                  do
                    v1374 = __ldaxr(v1373);
                  while (__stlxr(v1374 - 1, v1373));
                  if (!v1374)
                  {
                    ((void (*)(std::__shared_weak_count *))v1372->__on_zero_shared)(v1372);
                    std::__shared_weak_count::__release_weak(v1372);
                  }
                  goto LABEL_1643;
                }
                if (-[md::PolygonOverlayRenderable style](v1584[0], "style"))
                {
                  v661 = BYTE1(v1588);
                  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                  v662 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v662, "maskingOverlayRadiusEdgeRatio");
                  v664 = v663;

                  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                  v665 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v665, "maskingOverlayRadiusZoomCorrectionStep");
                  v667 = v666;

                  v668 = 1.0;
                  if (v661 >= 8)
                    v668 = fmax(-(v667 * (double)(int)(v661 - 8) + -1.0), 0.01);
                  v669 = (float64x2_t **)v1521[2];
                  v670 = *v669;
                  v671 = v669[1] - *v669;
                  j = v671 - 1;
                  if (v671 == 1)
                  {
                    v673 = 0;
                    v674 = 0;
                    v675 = 0;
                  }
                  else
                  {
                    v672 = 0;
                    v673 = 0;
                    v674 = 0;
                    v675 = 0;
                    v676 = (double)(int)(4 * v661);
                    v1513 = v668 * v664;
                    v677 = v671 - 2;
                    v678 = 2 * v661;
                    _Q5 = vsubq_f64(*v670, v670[v671 - 2]);
                    _Q4 = vsubq_f64(v670[1], *v670);
                    v1538 = 1.0 / v676;
                    do
                    {
                      while (1)
                      {
                        _D1 = _Q5.f64[1];
                        __asm { FMLA            D0, D1, V5.D[1] }
                        v685 = sqrt(_D0);
                        _D2 = _Q4.f64[1];
                        __asm { FMLA            D1, D2, V4.D[1] }
                        v688 = sqrt(_D1);
                        v689 = v1513 * fmin(v688, v685);
                        v690 = 1.0 / v685;
                        v1517 = _Q5;
                        *(float64x2_t *)v1528 = _Q4;
                        v691 = (double *)(*(_QWORD *)v1521[2] + 16 * v672);
                        v1556 = v690 * _Q5.f64[0];
                        v692 = 1.0 / v688 * _Q4.f64[0];
                        v1550 = v692 - v690 * _Q5.f64[0];
                        v693 = vmuld_lane_f64(v690, _Q5, 1);
                        v694 = vmuld_lane_f64(1.0 / v688, _Q4, 1);
                        v695 = *v691;
                        v696 = v691[1];
                        v697 = v678;
                        do
                        {
                          v698 = __sincos_stret((double)v697 * 3.14159265 * v1538);
                          v699 = v695 + (v1550 - (v698.__sinval * v692 - v698.__cosval * v1556)) * v689;
                          v700 = v696 + (v694 - v693 - (v698.__sinval * v694 - v698.__cosval * v693)) * v689;
                          if (v674 < (double *)v675)
                          {
                            *v674 = v699;
                            v674[1] = v700;
                            v674 += 2;
                          }
                          else
                          {
                            v701 = ((char *)v674 - (char *)v673) >> 4;
                            v702 = v701 + 1;
                            if ((unint64_t)(v701 + 1) >> 60)
                              abort();
                            if ((v675 - (char *)v673) >> 3 > v702)
                              v702 = (v675 - (char *)v673) >> 3;
                            if ((unint64_t)(v675 - (char *)v673) >= 0x7FFFFFFFFFFFFFF0)
                              v703 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v703 = v702;
                            if (v703)
                            {
                              if (v703 >> 60)
                                goto LABEL_1767;
                              v704 = (char *)operator new(16 * v703);
                            }
                            else
                            {
                              v704 = 0;
                            }
                            v705 = (double *)&v704[16 * v701];
                            *v705 = v699;
                            v705[1] = v700;
                            if (v674 == v673)
                            {
                              v707 = &v704[16 * v701];
                            }
                            else
                            {
                              v706 = &v704[16 * v701];
                              do
                              {
                                v707 = v706 - 16;
                                *((_OWORD *)v706 - 1) = *((_OWORD *)v674 - 1);
                                v674 -= 2;
                                v706 -= 16;
                              }
                              while (v674 != v673);
                            }
                            v675 = &v704[16 * v703];
                            v674 = v705 + 2;
                            if (v673)
                              operator delete(v673);
                            v673 = (double *)v707;
                          }
                          v95 = v697-- <= 0;
                        }
                        while (!v95);
                        if (v672 >= v677)
                          break;
                        v681 = &(*v669)[v672++];
                        _Q5 = *(float64x2_t *)v1528;
                        _Q4 = vsubq_f64(v681[2], (*v669)[v672]);
                        if (v672 == j)
                          goto LABEL_849;
                      }
                      ++v672;
                      _Q4 = *(float64x2_t *)v1528;
                      _Q5 = v1517;
                    }
                    while (v672 != j);
LABEL_849:
                    if (v674 < (double *)v675)
                    {
                      *(_OWORD *)v674 = *(_OWORD *)v673;
                      v708 = v674 + 2;
                      v303 = v1491;
                      v304 = v1468;
                      goto LABEL_868;
                    }
                    v303 = v1491;
                    v304 = v1468;
                  }
                  v709 = ((char *)v674 - (char *)v673) >> 4;
                  v710 = v709 + 1;
                  if ((unint64_t)(v709 + 1) >> 60)
                    abort();
                  if ((v675 - (char *)v673) >> 3 > v710)
                    v710 = (v675 - (char *)v673) >> 3;
                  if ((unint64_t)(v675 - (char *)v673) >= 0x7FFFFFFFFFFFFFF0)
                    v711 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v711 = v710;
                  if (v711)
                  {
                    if (v711 >> 60)
                      goto LABEL_1767;
                    v712 = (char *)operator new(16 * v711);
                  }
                  else
                  {
                    v712 = 0;
                  }
                  v713 = (double *)&v712[16 * v709];
                  v675 = &v712[16 * v711];
                  *(_OWORD *)v713 = *(_OWORD *)v673;
                  v708 = v713 + 2;
                  if (v674 == v673)
                    goto LABEL_866;
                  do
                  {
                    *((_OWORD *)v713 - 1) = *((_OWORD *)v674 - 1);
                    v713 -= 2;
                    v674 -= 2;
                  }
                  while (v674 != v673);
                  if (v673)
LABEL_866:
                    operator delete(v673);
                  v673 = v713;
LABEL_868:
                  v714 = operator new(0x30uLL);
                  v714[1] = 0;
                  v714[2] = 0;
                  v714[3] = v673;
                  *v714 = &off_1E42DE458;
                  v714[4] = v708;
                  v714[5] = v675;
                  v715 = (std::__shared_weak_count *)v1521[3];
                  v1521[2] = v714 + 3;
                  v1521[3] = v714;
                  if (v715)
                  {
                    v716 = (unint64_t *)&v715->__shared_owners_;
                    do
                      v717 = __ldaxr(v716);
                    while (__stlxr(v717 - 1, v716));
                    if (!v717)
                    {
                      ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
                      std::__shared_weak_count::__release_weak(v715);
                    }
                  }
                }
                v718 = (uint64_t)v1521[3];
                v1601 = (md::MaskingOverlayRenderable *)v1521[2];
                v1602 = v718;
                if (v718)
                {
                  v719 = (unint64_t *)(v718 + 8);
                  do
                    v720 = __ldxr(v719);
                  while (__stxr(v720 + 1, v719));
                }
                v1603 = *((_WORD *)v1521 + 16);
                v1591[0] = v1591;
                v1591[1] = v1591;
                v1592[0] = 0;
                v721 = operator new(0x28uLL);
                v722 = (char *)v1602;
                v721[2] = v1601;
                v721[3] = v722;
                if (v722)
                {
                  v723 = (unint64_t *)(v722 + 8);
                  do
                    v724 = __ldxr(v723);
                  while (__stxr(v724 + 1, v723));
                  v722 = (char *)v1592[0];
                }
                *((_WORD *)v721 + 16) = v1603;
                *v721 = v1591;
                v721[1] = v1591;
                v1591[1] = v721;
                v1591[0] = v721;
                v1592[0] = v722 + 1;
                LOBYTE(v1592[1]) = -[md::PolygonOverlayRenderable style](v1584[0], "style") == 1;
                _ZNSt3__115allocate_sharedB8nn180100IN2md24PolygonOverlayRenderable5StyleENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v1593);
                v725 = *(os_unfair_lock_s **)(v1593 + 32);
                os_unfair_lock_lock(v725 + 49);
                v725[33]._os_unfair_lock_opaque = 0;
                os_unfair_lock_unlock(v725 + 49);
                v726 = v1593;
                v727 = (os_unfair_lock_s *)(v1593 + 24);
                os_unfair_lock_lock((os_unfair_lock_t)(v1593 + 24));
                *(_DWORD *)(v726 + 16) = 0;
                v728 = *(os_unfair_lock_s **)(v726 + 32);
                os_unfair_lock_lock(v728 + 49);
                v728[40]._os_unfair_lock_opaque = 0;
                os_unfair_lock_unlock(v728 + 49);
                os_unfair_lock_unlock(v727);
                md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle((md::MaskingOverlayMeshProcessor *)&v1594, (uint64_t)v1584);
                v729 = (char **)v1521[2];
                v730 = *v729;
                v731 = v729[1];
                if (v730 == v731)
                {
                  v735 = 1.79769313e308;
                  v736 = -1.79769313e308;
                  v733 = 1.79769313e308;
                  v734 = -1.79769313e308;
                }
                else
                {
                  v732 = v731 - v730 - 16;
                  if (v732 >= 0x30)
                  {
                    v737 = (v732 >> 4) + 1;
                    v738 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                    v739 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
                    v740 = (const double *)(v730 + 32);
                    v741 = v737 & 0x1FFFFFFFFFFFFFFCLL;
                    v742 = v739;
                    v743 = v738;
                    v744 = v738;
                    v745 = v738;
                    v746 = v739;
                    v747 = v739;
                    do
                    {
                      v748 = v740 - 4;
                      v1613 = vld2q_f64(v748);
                      v1614 = vld2q_f64(v740);
                      v738 = vminnmq_f64(v1613.val[0], v738);
                      v743 = vminnmq_f64(v1614.val[0], v743);
                      v746 = vmaxnmq_f64(v746, v1613.val[0]);
                      v747 = vmaxnmq_f64(v747, v1614.val[0]);
                      v744 = vminnmq_f64(v1613.val[1], v744);
                      v745 = vminnmq_f64(v1614.val[1], v745);
                      v739 = vmaxnmq_f64(v739, v1613.val[1]);
                      v742 = vmaxnmq_f64(v742, v1614.val[1]);
                      v740 += 8;
                      v741 -= 4;
                    }
                    while (v741);
                    v736 = vmaxnmvq_f64(vmaxnmq_f64(v746, v747));
                    v735 = vminnmvq_f64(vminnmq_f64(v744, v745));
                    v733 = vminnmvq_f64(vminnmq_f64(v738, v743));
                    v734 = vmaxnmvq_f64(vmaxnmq_f64(v739, v742));
                    if (v737 != (v737 & 0x1FFFFFFFFFFFFFFCLL))
                    {
                      v730 += 16 * (v737 & 0x1FFFFFFFFFFFFFFCLL);
                      goto LABEL_888;
                    }
                  }
                  else
                  {
                    v733 = 1.79769313e308;
                    v734 = -1.79769313e308;
                    v735 = 1.79769313e308;
                    v736 = -1.79769313e308;
                    do
                    {
LABEL_888:
                      v749 = *(double *)v730;
                      v750 = *((double *)v730 + 1);
                      v730 += 16;
                      v733 = fmin(v749, v733);
                      v736 = fmax(v736, v749);
                      v735 = fmin(v750, v735);
                      v734 = fmax(v734, v750);
                    }
                    while (v730 != v731);
                  }
                }
                *(double *)&v1595 = v733;
                *((double *)&v1595 + 1) = v735;
                *(double *)&v1596 = v736;
                *((double *)&v1596 + 1) = v734;
                v751 = c[0];
                if (c[0] < c[1])
                {
                  *(_QWORD *)c[0] = c[0];
                  *((_QWORD *)v751 + 1) = v751;
                  *((_QWORD *)v751 + 2) = 0;
                  v752 = v1592[0];
                  if (v1592[0])
                  {
                    v753 = v1591[1];
                    v754 = (_QWORD **)v1591[0];
                    v755 = *(_QWORD *)v1591[1];
                    *(_QWORD *)(v755 + 8) = *((_QWORD *)v1591[0] + 1);
                    *v754[1] = v755;
                    v756 = *(_QWORD *)v751;
                    *(_QWORD *)(v756 + 8) = v753;
                    *v753 = v756;
                    *(_QWORD *)v751 = v754;
                    v754[1] = v751;
                    *((_QWORD *)v751 + 2) = v752;
                    v1592[0] = 0;
                  }
                  *((_BYTE *)v751 + 24) = v1592[1];
                  *((_OWORD *)v751 + 2) = v1593;
                  v1593 = 0uLL;
                  *((_OWORD *)v751 + 3) = v1594;
                  v1594 = 0uLL;
                  v757 = v1596;
                  *((_OWORD *)v751 + 4) = v1595;
                  *((_OWORD *)v751 + 5) = v757;
                  c[0] = (md::PolygonOverlayRenderable *)((char *)v751 + 96);
                  v758 = (std::__shared_weak_count *)*((_QWORD *)&v1593 + 1);
                  if (!*((_QWORD *)&v1593 + 1))
                  {
LABEL_923:
                    if (v1592[0])
                      goto LABEL_924;
                    goto LABEL_933;
                  }
LABEL_920:
                  v790 = (unint64_t *)&v758->__shared_owners_;
                  do
                    v791 = __ldaxr(v790);
                  while (__stlxr(v791 - 1, v790));
                  if (v791)
                    goto LABEL_923;
                  ((void (*)(std::__shared_weak_count *))v758->__on_zero_shared)(v758);
                  std::__shared_weak_count::__release_weak(v758);
                  if (v1592[0])
                  {
LABEL_924:
                    v792 = (void **)v1591[1];
                    v793 = (_QWORD **)v1591[0];
                    v794 = *(_QWORD *)v1591[1];
                    *(_QWORD *)(v794 + 8) = *((_QWORD *)v1591[0] + 1);
                    *v793[1] = v794;
                    v1592[0] = 0;
                    if (v792 != v1591)
                    {
                      do
                      {
                        v795 = (void **)v792[1];
                        v796 = (std::__shared_weak_count *)v792[3];
                        if (v796)
                        {
                          v797 = (unint64_t *)&v796->__shared_owners_;
                          do
                            v798 = __ldaxr(v797);
                          while (__stlxr(v798 - 1, v797));
                          if (!v798)
                          {
                            ((void (*)(std::__shared_weak_count *))v796->__on_zero_shared)(v796);
                            std::__shared_weak_count::__release_weak(v796);
                          }
                        }
                        operator delete(v792);
                        v792 = v795;
                      }
                      while (v795 != v1591);
                    }
                  }
LABEL_933:
                  v799 = (std::__shared_weak_count *)v1602;
                  if (v1602)
                  {
                    v800 = (unint64_t *)(v1602 + 8);
                    do
                      v801 = __ldaxr(v800);
                    while (__stlxr(v801 - 1, v800));
                    if (!v801)
                    {
                      ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
                      std::__shared_weak_count::__release_weak(v799);
                    }
                  }
                  v660 = (void **)v1521[1];
                  continue;
                }
                break;
              }
              v759 = v1584[1];
              v760 = 0xAAAAAAAAAAAAAAABLL * ((c[0] - v1584[1]) >> 5);
              v761 = v760 + 1;
              if (v760 + 1 > 0x2AAAAAAAAAAAAAALL)
                abort();
              if (0x5555555555555556 * ((c[1] - v1584[1]) >> 5) > v761)
                v761 = 0x5555555555555556 * ((c[1] - v1584[1]) >> 5);
              if (0xAAAAAAAAAAAAAAABLL * ((c[1] - v1584[1]) >> 5) >= 0x155555555555555)
                v762 = 0x2AAAAAAAAAAAAAALL;
              else
                v762 = v761;
              if (v762)
              {
                if (v762 > 0x2AAAAAAAAAAAAAALL)
                  goto LABEL_1767;
                v763 = (char *)operator new(96 * v762);
              }
              else
              {
                v763 = 0;
              }
              v764 = &v763[96 * v760];
              *(_QWORD *)v764 = v764;
              *((_QWORD *)v764 + 1) = v764;
              *((_QWORD *)v764 + 2) = 0;
              v765 = v1592[0];
              if (v1592[0])
              {
                v766 = v1591[1];
                v767 = (_QWORD **)v1591[0];
                v768 = *(_QWORD *)v1591[1];
                *(_QWORD *)(v768 + 8) = *((_QWORD *)v1591[0] + 1);
                *v767[1] = v768;
                v769 = *(_QWORD *)v764;
                *(_QWORD *)(v769 + 8) = v766;
                *v766 = v769;
                *(_QWORD *)v764 = v767;
                v767[1] = v764;
                *((_QWORD *)v764 + 2) = v765;
                v1592[0] = 0;
              }
              v770 = &v763[96 * v760];
              v770[24] = (char)v1592[1];
              v771 = v1593;
              v772 = v1594;
              v773 = (CGContext *)&v763[96 * v762];
              v1593 = 0uLL;
              *((_OWORD *)v770 + 2) = v771;
              *((_OWORD *)v770 + 3) = v772;
              v1594 = 0uLL;
              v774 = v1596;
              v775 = (CGContext *)(v764 + 96);
              *((_OWORD *)v770 + 4) = v1595;
              *((_OWORD *)v770 + 5) = v774;
              if (v751 == v759)
              {
                v1584[1] = (md::PolygonOverlayRenderable *)v764;
                c[1] = (CGContextRef)&v763[96 * v762];
                if (v751)
                  goto LABEL_914;
              }
              else
              {
                v776 = 0;
                do
                {
                  v778 = &v764[v776];
                  v779 = (uint64_t *)(v778 - 96);
                  v780 = (char *)v751 + v776;
                  *((_QWORD *)v778 - 12) = v778 - 96;
                  *((_QWORD *)v778 - 11) = v778 - 96;
                  *((_QWORD *)v778 - 10) = 0;
                  v781 = *(_QWORD *)((char *)v751 + v776 - 80);
                  if (v781)
                  {
                    v783 = *((_QWORD *)v780 - 12);
                    v782 = (uint64_t *)*((_QWORD *)v780 - 11);
                    v784 = *v782;
                    *(_QWORD *)(v784 + 8) = *(_QWORD *)(v783 + 8);
                    **(_QWORD **)(v783 + 8) = v784;
                    v785 = *v779;
                    *(_QWORD *)(v785 + 8) = v782;
                    *v782 = v785;
                    *v779 = v783;
                    *(_QWORD *)(v783 + 8) = v779;
                    *((_QWORD *)v778 - 10) = v781;
                    *((_QWORD *)v780 - 10) = 0;
                  }
                  *(v778 - 72) = *(v780 - 72);
                  *((_OWORD *)v778 - 4) = *((_OWORD *)v780 - 4);
                  *((_QWORD *)v780 - 8) = 0;
                  *((_QWORD *)v780 - 7) = 0;
                  *((_OWORD *)v778 - 3) = *((_OWORD *)v780 - 3);
                  *((_QWORD *)v780 - 6) = 0;
                  *((_QWORD *)v780 - 5) = 0;
                  v777 = *((_OWORD *)v780 - 1);
                  *((_OWORD *)v778 - 2) = *((_OWORD *)v780 - 2);
                  *((_OWORD *)v778 - 1) = v777;
                  v776 -= 96;
                }
                while ((md::PolygonOverlayRenderable *)((char *)v751 + v776) != v759);
                v751 = v1584[1];
                v786 = c[0];
                v1584[1] = (md::PolygonOverlayRenderable *)&v764[v776];
                c[0] = (CGContextRef)(v764 + 96);
                c[1] = v773;
                while (v786 != v751)
                  md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((CGContextRef)((char *)v786 - 96));
                if (v751)
LABEL_914:
                  operator delete(v751);
              }
              v787 = (std::__shared_weak_count *)*((_QWORD *)&v1594 + 1);
              c[0] = v775;
              if (!*((_QWORD *)&v1594 + 1))
                goto LABEL_919;
              v788 = (unint64_t *)(*((_QWORD *)&v1594 + 1) + 8);
              do
                v789 = __ldaxr(v788);
              while (__stlxr(v789 - 1, v788));
              if (!v789)
              {
                ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
                std::__shared_weak_count::__release_weak(v787);
                v758 = (std::__shared_weak_count *)*((_QWORD *)&v1593 + 1);
                if (!*((_QWORD *)&v1593 + 1))
                  goto LABEL_923;
              }
              else
              {
LABEL_919:
                v758 = (std::__shared_weak_count *)*((_QWORD *)&v1593 + 1);
                if (!*((_QWORD *)&v1593 + 1))
                  goto LABEL_923;
              }
              goto LABEL_920;
            }
            v305 = v304;
            v1449 = objc_msgSend(v303, "identifier");
            v1461 = v305;
            v1584[0] = 0;
            v1584[1] = (md::PolygonOverlayRenderable *)v1584;
            c[0] = (CGContextRef)0x5812000000;
            c[1] = (CGContextRef)__Block_byref_object_copy__23295;
            v1586 = __Block_byref_object_dispose__23296;
            v1587 = 0u;
            v1588 = 0u;
            v1589 = 0;
            v1590 = 1065353216;
            v1582[1] = 0;
            v1582[0] = 0;
            v1583 = 0;
            v1580[1] = 0;
            v1580[0] = 0;
            v1581 = 0;
            v1578 = 0;
            v1577 = 0;
            v1579 = 0;
            v1600 = 0u;
            v1599 = 0u;
            v1598 = 0u;
            *(_OWORD *)v1597 = 0u;
            objc_msgSend(v1461, "polylines");
            v306 = a1;
            v307 = (void *)objc_claimAutoreleasedReturnValue();
            v308 = objc_msgSend(v307, "countByEnumeratingWithState:objects:count:", v1597, &v1605, 16);
            if (!v308)
              goto LABEL_654;
            v1466 = *(_QWORD *)v1598;
            v1474 = v307;
            do
            {
              v1470 = 0;
              v1467 = v308;
              do
              {
                if (*(_QWORD *)v1598 != v1466)
                  objc_enumerationMutation(v307);
                v309 = (void *)*((_QWORD *)v1597[1] + v1470);
                if (v309)
                {
                  objc_msgSend(*((id *)v1597[1] + v1470), "simplifiedGeometryAtZoomLevel:", *(unsigned __int8 *)(v306 + 1));
                }
                else
                {
                  *(_OWORD *)v1591 = 0u;
                  *(_OWORD *)v1592 = 0u;
                }
                v310 = objc_msgSend(v309, "worldIndexes");
                v1475 = v309;
                while ((char)v310 < (char)((unsigned __int16)objc_msgSend(v309, "worldIndexes") >> 8))
                {
                  v311 = (double **)v1591[0];
                  v15 = (md::PolygonOverlayRenderable *)v1591[1];
                  if (v1591[1])
                  {
                    v312 = (unint64_t *)((char *)v1591[1] + 8);
                    do
                      v313 = __ldxr(v312);
                    while (__stxr(v313 + 1, v312));
                  }
                  v314 = v1592[0];
                  v302 = (id *)v1592[1];
                  if (v1592[1])
                  {
                    v315 = (unint64_t *)((char *)v1592[1] + 8);
                    do
                      v316 = __ldxr(v315);
                    while (__stxr(v316 + 1, v315));
                  }
                  v317 = *(_BYTE *)(v306 + 1);
                  v318 = *(_DWORD *)(v306 + 8);
                  v319 = *(_DWORD *)(v306 + 4);
                  v1571 = 0;
                  v1570 = 0;
                  v1572 = 0;
                  if (v314)
                  {
                    v1499 = v314[1] != *v314;
                    if (v314[1] == *v314)
                      v320 = 0;
                    else
                      v320 = &v1570;
                    v321 = v1580;
                    if (v314[1] == *v314)
                      v321 = 0;
                    v1488 = (uint64_t)v321;
                    v1489 = (char **)v320;
                  }
                  else
                  {
                    v1488 = 0;
                    v1489 = 0;
                    v1499 = 0;
                  }
                  v323 = *v311;
                  v322 = v311[1];
                  if (*v311 == v322)
                  {
                    j = 0;
                    goto LABEL_622;
                  }
                  v324 = (double)(char)v310;
                  v325 = v323 + 2;
                  v326 = 0.0;
                  v327 = 0.0;
                  if (v323 + 2 == v322)
                    goto LABEL_408;
                  v328 = *((uint64_t *)v323 + 1);
                  v329 = *v323 - v324;
                  v330 = (char *)v322 - (char *)v323 - 32;
                  if (v330 <= 0x2F)
                    goto LABEL_640;
                  v331 = (v330 >> 4) + 1;
                  v332 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v329, 0);
                  v333 = (int8x16_t)vdupq_lane_s64(v328, 0);
                  v334 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v324, 0);
                  v335 = vdupq_n_s64((unint64_t)v323);
                  v336 = (uint64_t)(v323 + 4);
                  v337 = 0uLL;
                  v338 = v331 & 0x1FFFFFFFFFFFFFFCLL;
                  v339 = 0uLL;
                  do
                  {
                    v340 = (const double *)(v336 - 16);
                    v1612 = vld2q_f64(v340);
                    v341.i64[0] = v336 - 16;
                    v342 = *(int64x2_t *)(v336 + 16);
                    v341.i64[1] = v336;
                    v343.i64[0] = v336 + 16;
                    v344 = *(int64x2_t *)(v336 + 32);
                    v343.i64[1] = v336 + 32;
                    v345 = (float64x2_t)vzip1q_s64(v342, v344);
                    v346 = (float64x2_t)vzip2q_s64(v342, v344);
                    v347 = vsubq_f64(v1612.val[0], v334);
                    v348 = (float64x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v347, 8uLL);
                    v332 = vsubq_f64(v345, v334);
                    v349 = (float64x2_t)vextq_s8((int8x16_t)v347, (int8x16_t)v332, 8uLL);
                    v350 = vsubq_f64(v347, v348);
                    v351 = vsubq_f64(v332, v349);
                    v352 = vsubq_f64(v1612.val[1], (float64x2_t)vextq_s8(v333, (int8x16_t)v1612.val[1], 8uLL));
                    v1612.val[0] = vsubq_f64(v346, (float64x2_t)vextq_s8((int8x16_t)v1612.val[1], (int8x16_t)v346, 8uLL));
                    v1612.val[1] = (float64x2_t)vdupq_n_s64(0x8000000000000000);
                    v337 = vaddq_f64(v337, (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v341, v335), (int8x16_t)v1612.val[1], (int8x16_t)vsqrtq_f64(vmlaq_f64(vmulq_f64(v350, v350), v352, v352))));
                    v339 = vaddq_f64(v339, (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v343, v335), (int8x16_t)v1612.val[1], (int8x16_t)vsqrtq_f64(vmlaq_f64(vmulq_f64(v351, v351), v1612.val[0], v1612.val[0]))));
                    v336 += 64;
                    v333 = (int8x16_t)v346;
                    v338 -= 4;
                  }
                  while (v338);
                  v327 = vaddvq_f64(vaddq_f64(v339, v337));
                  if (v331 != (v331 & 0x1FFFFFFFFFFFFFFCLL))
                  {
                    v325 += 2 * (v331 & 0x1FFFFFFFFFFFFFFCLL);
                    v329 = v332.f64[1];
                    v328 = v344.i64[1];
                    do
                    {
LABEL_640:
                      v530 = v325[1];
                      v531 = *v325 - v324;
                      if (v325 != v323)
                        v327 = sqrt((v531 - v329) * (v531 - v329) + (v530 - *(double *)&v328)
                                                                  * (v530 - *(double *)&v328))
                             + v327;
                      v325 += 2;
                      v329 = v531;
                      *(double *)&v328 = v530;
                    }
                    while (v325 != v322);
                  }
LABEL_408:
                  v1490 = v314;
                  v1477 = v310;
                  v1478 = v302;
                  v1479 = v15;
                  v1506 = 0;
                  v353 = 0;
                  j = 0;
                  v354 = 0;
                  v355 = 0;
                  v356 = 0;
                  v357 = 0;
                  v358 = 0;
                  v1520 = 0;
                  v359 = 1 << v317;
                  v360 = 1.0 / (double)v359;
                  v1516 = v360 * (double)v318;
                  v1512 = v1516 + v360;
                  v1476 = v327;
                  v1486 = 1.0 / v327;
                  v1510 = v360 * (double)(v359 + ~v319);
                  v1549 = 0.0;
                  v361 = 1;
                  v1555 = 0.0;
                  v1543 = 0.0;
                  v362 = 0.0;
                  v363 = 0.0;
                  v1501 = v1510 + v360;
                  v1503 = 0.0;
                  v364 = 0.0;
                  v365 = *v311;
                  v1492 = v311;
                  v1497 = v324;
                  do
                  {
                    v366 = *v365;
                    v367 = v365[1];
                    v368 = 0.0;
                    if (v1499)
                    {
                      if (v357 >= (unint64_t)((uint64_t)(v1490[1] - *v1490) >> 3))
                        abort();
                      v368 = *(double *)(*v1490 + 8 * v357);
                    }
                    v369 = v366 - v324;
                    if (v366 - v324 >= v1516 && v369 < v1512 && v367 >= v1510 && v367 < v1501)
                    {
                      v379 = 1;
                      if (v365 == v323)
                        goto LABEL_437;
                    }
                    else
                    {
                      v373 = 1 << *(_BYTE *)(v306 + 1);
                      v374 = -1.0 / (double)v373;
                      v375 = (v369 + v374 * (double)*(int *)(v306 + 8)) * (double)v373;
                      v376 = (v367 + v374 * (double)(v373 + ~*(_DWORD *)(v306 + 4))) * (double)v373;
                      v377 = fabsf(v375 + -1.0) <= 0.00000011921;
                      if (v376 <= 0.0)
                        v377 = 0;
                      if (v376 > 1.0)
                        v377 = 0;
                      v378 = fabsf(v376 + -1.0) <= 0.00000011921;
                      if (v375 <= 0.0)
                        v378 = 0;
                      if (v375 > 1.0)
                        v378 = 0;
                      v379 = v377 || v378;
                      if (v365 == v323)
                        goto LABEL_437;
                    }
                    if ((v358 & v379 & 1) != 0)
                      goto LABEL_437;
                    v393 = v369 - v362;
                    if (fabs(v369 - v362) >= 1.0e-10)
                    {
                      v400 = 1.0 / v393 * (v1516 - v362);
                      v401 = 1.0 / v393 * (v1512 - v362);
                      v394 = fmax(fmin(v400, v401), 0.0);
                      v395 = fmin(fmax(v400, v401), 1.0);
                      if (v394 > v395)
                        goto LABEL_437;
                    }
                    else
                    {
                      if (v362 < v1516 || v362 > v1512)
                        goto LABEL_437;
                      v394 = 0.0;
                      v395 = 1.0;
                    }
                    v402 = v367 - v363;
                    if (fabs(v367 - v363) >= 1.0e-10)
                    {
                      v421 = 1.0 / v402 * (v1510 - v363);
                      v422 = 1.0 / v402 * (v1501 - v363);
                      v394 = fmax(v394, fmin(v421, v422));
                      v395 = fmin(fmax(v421, v422), v395);
                      if (v394 > v395)
                        goto LABEL_437;
                    }
                    else if (v363 < v1510 || v363 > v1501)
                    {
                      goto LABEL_437;
                    }
                    v423 = v394 > 0.0 && v394 < 1.0;
                    v1537 = v361;
                    v1527 = v379;
                    if (!v423)
                    {
                      v424 = v1503;
                      if (v395 <= 0.0)
                        goto LABEL_564;
                      goto LABEL_561;
                    }
                    v1504 = v394 * v393;
                    v1480 = v394 * v402;
                    v437 = 1 << *(_BYTE *)(v306 + 1);
                    v438 = -1.0 / (double)v437;
                    v1494 = v394 * v393 + v362;
                    v439 = (v1494 + v438 * (double)*(int *)(v306 + 8)) * (double)v437;
                    v1482 = v395;
                    v1484 = v394 * v402 + v363;
                    v440 = (v1484 + v438 * (double)(v437 + ~*(_DWORD *)(v306 + 4))) * (double)v437;
                    if (v356 < (float *)v1506)
                    {
                      *v356 = v439;
                      v356[1] = v440;
                      v353 = (char *)(v356 + 2);
                      goto LABEL_538;
                    }
                    v441 = (uint64_t)((uint64_t)v356 - j) >> 3;
                    v442 = v441 + 1;
                    if ((unint64_t)(v441 + 1) >> 61)
                      abort();
                    if ((uint64_t)&v1506[-j] >> 2 > v442)
                      v442 = (uint64_t)&v1506[-j] >> 2;
                    if ((unint64_t)&v1506[-j] >= 0x7FFFFFFFFFFFFFF8)
                      v443 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v443 = v442;
                    if (v443)
                    {
                      if (v443 >> 61)
                        goto LABEL_1767;
                      v1472 = v440;
                      v1507 = v439;
                      v444 = (char *)operator new(8 * v443);
                      v439 = v1507;
                      v440 = v1472;
                    }
                    else
                    {
                      v444 = 0;
                    }
                    v445 = (float *)&v444[8 * v441];
                    *v445 = v439;
                    v445[1] = v440;
                    if (v356 == (float *)j)
                    {
                      v448 = (float *)&v444[8 * v441];
                      v311 = v1492;
                    }
                    else
                    {
                      v446 = (unint64_t)v356 - j - 8;
                      if (v446 < 0x168
                        || (char *)v356 + (_QWORD)v444 - j - (v446 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v356
                                                                                               + (_QWORD)v444
                                                                                               - j
                                                                                               - 8
                        || (float *)((char *)v356 - (v446 & 0xFFFFFFFFFFFFFFF8) - 8) > v356 - 2
                        || j - (unint64_t)v444 < 0x20)
                      {
                        v447 = v356;
                        v448 = (float *)&v444[8 * v441];
                        v311 = v1492;
                      }
                      else
                      {
                        v515 = (v446 >> 3) + 1;
                        v447 = &v356[-2 * (v515 & 0x3FFFFFFFFFFFFFFCLL)];
                        v516 = &v444[8 * v441 - 16];
                        v517 = v356 - 4;
                        v518 = v515 & 0x3FFFFFFFFFFFFFFCLL;
                        v311 = v1492;
                        do
                        {
                          v519 = *(_OWORD *)v517;
                          *((_OWORD *)v516 - 1) = *((_OWORD *)v517 - 1);
                          *(_OWORD *)v516 = v519;
                          v516 -= 32;
                          v517 -= 8;
                          v518 -= 4;
                        }
                        while (v518);
                        v448 = &v445[-2 * (v515 & 0x3FFFFFFFFFFFFFFCLL)];
                        if (v515 == (v515 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_535;
                      }
                      do
                      {
                        v449 = *((_QWORD *)v447 - 1);
                        v447 -= 2;
                        *((_QWORD *)v448 - 1) = v449;
                        v448 -= 2;
                      }
                      while (v447 != (float *)j);
                    }
LABEL_535:
                    v1506 = &v444[8 * v443];
                    v353 = (char *)(v445 + 2);
                    if (j)
                      operator delete((void *)j);
                    j = (unint64_t)v448;
LABEL_538:
                    __powidf2();
                    *(float *)&v450 = v450 * 0.0000000249532021;
                    v451 = (v326 + v394 * (v368 - v326)) * *(float *)&v450;
                    v452 = (char *)v1571;
                    if ((unint64_t)v1571 >= v1572)
                    {
                      v455 = (char *)v1570;
                      v456 = (_BYTE *)v1571 - (_BYTE *)v1570;
                      v457 = ((_BYTE *)v1571 - (_BYTE *)v1570) >> 2;
                      v458 = v457 + 1;
                      if ((unint64_t)(v457 + 1) >> 62)
                        abort();
                      v459 = v1572 - (_QWORD)v1570;
                      if ((uint64_t)(v1572 - (_QWORD)v1570) >> 1 > v458)
                        v458 = v459 >> 1;
                      if ((unint64_t)v459 >= 0x7FFFFFFFFFFFFFFCLL)
                        v460 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v460 = v458;
                      if (v460)
                      {
                        if (v460 >> 62)
                          goto LABEL_1767;
                        v1473 = (_BYTE *)v1571 - (_BYTE *)v1570;
                        v461 = v460;
                        v462 = operator new(4 * v460);
                        v460 = v461;
                        v456 = v1473;
                      }
                      else
                      {
                        v462 = 0;
                      }
                      v463 = (float *)&v462[4 * v457];
                      v464 = v451;
                      *v463 = v464;
                      v454 = v463 + 1;
                      if (v452 != v455)
                      {
                        v465 = v452 - 4 - v455;
                        if (v465 < 0x2C)
                          goto LABEL_1801;
                        if ((unint64_t)(v452 - &v462[v456]) < 0x20)
                          goto LABEL_1801;
                        v466 = (v465 >> 2) + 1;
                        v467 = &v462[4 * v457 - 16];
                        v468 = v452 - 16;
                        v469 = v466 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v470 = *(_OWORD *)v468;
                          *(v467 - 1) = *((_OWORD *)v468 - 1);
                          *v467 = v470;
                          v467 -= 2;
                          v468 -= 32;
                          v469 -= 8;
                        }
                        while (v469);
                        v463 -= v466 & 0x7FFFFFFFFFFFFFF8;
                        v452 -= 4 * (v466 & 0x7FFFFFFFFFFFFFF8);
                        if (v466 != (v466 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_1801:
                          do
                          {
                            v471 = *((_DWORD *)v452 - 1);
                            v452 -= 4;
                            *((_DWORD *)v463-- - 1) = v471;
                          }
                          while (v452 != v455);
                        }
                      }
                      v1570 = v463;
                      v1572 = (unint64_t)&v462[4 * v460];
                      if (v455)
                      {
                        v472 = v455;
                        v473 = v454;
                        operator delete(v472);
                        v454 = v473;
                      }
                      v311 = v1492;
                    }
                    else
                    {
                      v453 = v451;
                      *(float *)v1571 = v453;
                      v454 = v452 + 4;
                    }
                    v361 = v1537;
                    v379 = v1527;
                    v424 = v1494;
                    v395 = v1482;
                    v393 = v369 - v362;
                    v402 = v367 - v363;
                    v1571 = v454;
                    v1543 = sqrt(v1504 * v1504 + v1480 * v1480) + v1555;
                    v1549 = 0.0;
                    v354 = (float *)v353;
                    v355 = (unint64_t)v353;
                    v356 = (float *)v353;
                    v364 = v1484;
                    if (v1482 <= 0.0)
                    {
LABEL_564:
                      v1503 = v424;
                      goto LABEL_437;
                    }
LABEL_561:
                    if (v395 >= 1.0)
                      goto LABEL_564;
                    v1485 = v364;
                    v1495 = v424;
                    v474 = 1 << *(_BYTE *)(v306 + 1);
                    v475 = -1.0 / (double)v474;
                    v1503 = v362 + v395 * v393;
                    v476 = (v1503 + v475 * (double)*(int *)(v306 + 8)) * (double)v474;
                    v1481 = v363 + v395 * v402;
                    v477 = (v1481 + v475 * (double)(v474 + ~*(_DWORD *)(v306 + 4))) * (double)v474;
                    if (v356 >= (float *)v1506)
                    {
                      v479 = (uint64_t)((uint64_t)v356 - j) >> 3;
                      v480 = v479 + 1;
                      if ((unint64_t)(v479 + 1) >> 61)
                        abort();
                      if ((uint64_t)&v1506[-j] >> 2 > v480)
                        v480 = (uint64_t)&v1506[-j] >> 2;
                      if ((unint64_t)&v1506[-j] >= 0x7FFFFFFFFFFFFFF8)
                        v481 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v481 = v480;
                      if (v481)
                      {
                        if (v481 >> 61)
                          goto LABEL_1767;
                        v1508 = v477;
                        v482 = v395;
                        v483 = (char *)operator new(8 * v481);
                        v395 = v482;
                        v477 = v1508;
                      }
                      else
                      {
                        v483 = 0;
                      }
                      v484 = (float *)&v483[8 * v479];
                      *v484 = v476;
                      v484[1] = v477;
                      if (v356 == (float *)j)
                      {
                        v487 = (float *)&v483[8 * v479];
                        v364 = v1481;
                      }
                      else
                      {
                        v485 = (unint64_t)v356 - j - 8;
                        v364 = v1481;
                        if (v485 < 0x58 || j - (unint64_t)v483 < 0x20)
                        {
                          v486 = v356;
                          v487 = (float *)&v483[8 * v479];
                          goto LABEL_579;
                        }
                        v520 = (v485 >> 3) + 1;
                        v486 = &v356[-2 * (v520 & 0x3FFFFFFFFFFFFFFCLL)];
                        v521 = &v483[8 * v479 - 16];
                        v522 = v356 - 4;
                        v523 = v520 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v524 = *(_OWORD *)v522;
                          *((_OWORD *)v521 - 1) = *((_OWORD *)v522 - 1);
                          *(_OWORD *)v521 = v524;
                          v521 -= 32;
                          v522 -= 8;
                          v523 -= 4;
                        }
                        while (v523);
                        v487 = &v484[-2 * (v520 & 0x3FFFFFFFFFFFFFFCLL)];
                        if (v520 != (v520 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          do
                          {
LABEL_579:
                            v488 = *((_QWORD *)v486 - 1);
                            v486 -= 2;
                            *((_QWORD *)v487 - 1) = v488;
                            v487 -= 2;
                          }
                          while (v486 != (float *)j);
                        }
                      }
                      v1506 = &v483[8 * v481];
                      v478 = (char *)(v484 + 2);
                      if (j)
                      {
                        v489 = v395;
                        operator delete((void *)j);
                        v395 = v489;
                      }
                      j = (unint64_t)v487;
                      goto LABEL_585;
                    }
                    *v356 = v476;
                    v356[1] = v477;
                    v478 = (char *)(v356 + 2);
                    v364 = v363 + v395 * v402;
LABEL_585:
                    v490 = v326 + v395 * (v368 - v326);
                    __powidf2();
                    *(float *)&v491 = v491 * 0.0000000249532021;
                    v492 = v490 * *(float *)&v491;
                    v493 = (char *)v1571;
                    if ((unint64_t)v1571 >= v1572)
                    {
                      v1483 = v478;
                      v498 = (char *)v1570;
                      v499 = (_BYTE *)v1571 - (_BYTE *)v1570;
                      v500 = ((_BYTE *)v1571 - (_BYTE *)v1570) >> 2;
                      v501 = v500 + 1;
                      if ((unint64_t)(v500 + 1) >> 62)
                        abort();
                      v502 = v1572 - (_QWORD)v1570;
                      if ((uint64_t)(v1572 - (_QWORD)v1570) >> 1 > v501)
                        v501 = v502 >> 1;
                      if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                        v503 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v503 = v501;
                      if (v503)
                      {
                        if (v503 >> 62)
                          goto LABEL_1767;
                        v504 = v503;
                        v505 = operator new(4 * v503);
                        v503 = v504;
                      }
                      else
                      {
                        v505 = 0;
                      }
                      v506 = (float *)&v505[4 * v500];
                      v507 = v492;
                      *v506 = v507;
                      v495 = v506 + 1;
                      if (v493 != v498)
                      {
                        v508 = v493 - 4 - v498;
                        if (v508 < 0x2C)
                          goto LABEL_1802;
                        if ((unint64_t)(v493 - &v505[v499]) < 0x20)
                          goto LABEL_1802;
                        v509 = (v508 >> 2) + 1;
                        v510 = &v505[4 * v500 - 16];
                        v511 = v493 - 16;
                        v512 = v509 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v513 = *(_OWORD *)v511;
                          *(v510 - 1) = *((_OWORD *)v511 - 1);
                          *v510 = v513;
                          v510 -= 2;
                          v511 -= 32;
                          v512 -= 8;
                        }
                        while (v512);
                        v506 -= v509 & 0x7FFFFFFFFFFFFFF8;
                        v493 -= 4 * (v509 & 0x7FFFFFFFFFFFFFF8);
                        if (v509 != (v509 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_1802:
                          do
                          {
                            v514 = *((_DWORD *)v493 - 1);
                            v493 -= 4;
                            *((_DWORD *)v506-- - 1) = v514;
                          }
                          while (v493 != v498);
                        }
                      }
                      v1570 = v506;
                      v1572 = (unint64_t)&v505[4 * v503];
                      if (v498)
                        operator delete(v498);
                      v496 = v1537;
                      v497 = v1495;
                      v478 = v1483;
                    }
                    else
                    {
                      v494 = v492;
                      *(float *)v1571 = v494;
                      v495 = v493 + 4;
                      v496 = v1537;
                      v497 = v1495;
                    }
                    v1571 = v495;
                    PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)j, v478, v1489, v1582, v1488, (char **)&v1577, v496 & 1, v1520 & 1, v1543 * v1486, (sqrt((v364 - v1485) * (v364 - v1485) + (v1503 - v497) * (v1503 - v497)) + v1549) * v1486);
                    v361 = 0;
                    v1571 = v1570;
                    v1549 = 0.0;
                    v353 = (char *)j;
                    v354 = (float *)j;
                    v355 = j;
                    v356 = (float *)j;
                    v311 = v1492;
                    v379 = v1527;
LABEL_437:
                    if (v379 & 1 | ((v358 & 1) == 0))
                      goto LABEL_440;
                    if (v355 != j)
                    {
                      v380 = v379;
                      PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)j, v353, v1489, v1582, v1488, (char **)&v1577, v361 & 1, v1520 & 1, v1543 * v1486, v1549 * v1486);
                      v361 = 0;
                      v1571 = v1570;
                      v1549 = 0.0;
                      v353 = (char *)j;
                      v354 = (float *)j;
                      v355 = j;
                      v356 = (float *)j;
                      v379 = v380;
LABEL_440:
                      if (!v379)
                        goto LABEL_409;
                      goto LABEL_441;
                    }
                    v355 = j;
                    v356 = (float *)j;
                    if (!v379)
                    {
LABEL_409:
                      v323 = *v311;
                      v361 = (v365 != *v311) & v361;
                      if (v365 == *v311)
                        goto LABEL_411;
LABEL_410:
                      v1555 = sqrt((v369 - v362) * (v369 - v362) + (v367 - v363) * (v367 - v363)) + v1555;
                      goto LABEL_411;
                    }
LABEL_441:
                    v1493 = v362;
                    v381 = v363;
                    v382 = v368;
                    v1526 = v379;
                    v1536 = v361;
                    v383 = *(_BYTE *)(v306 + 1);
                    v384 = (double)(1 << v383);
                    v385 = (v369 + -1.0 / v384 * (double)*(int *)(v306 + 8)) * v384;
                    v386 = (v367 + -1.0 / v384 * (double)((1 << v383) + ~*(_DWORD *)(v306 + 4))) * v384;
                    __powidf2();
                    v388 = v387;
                    v389 = (uint64_t)v354 - j;
                    v390 = v1549;
                    v391 = v1549 + sqrt((v367 - v364) * (v367 - v364) + (v369 - v1503) * (v369 - v1503));
                    v392 = v1543;
                    if (v354 == (float *)j)
                      v392 = v1555;
                    v1543 = v392;
                    if (v354 != (float *)j)
                      v390 = v391;
                    v1549 = v390;
                    if (v354 < (float *)v1506)
                    {
                      *v354 = v385;
                      v354[1] = v386;
                      v353 = (char *)(v354 + 2);
                      v379 = v1526;
                      v368 = v382;
                      goto LABEL_477;
                    }
                    v396 = v389 >> 3;
                    v397 = (v389 >> 3) + 1;
                    if (v397 >> 61)
                      goto LABEL_1768;
                    if ((uint64_t)&v1506[-j] >> 2 > v397)
                      v397 = (uint64_t)&v1506[-j] >> 2;
                    if ((unint64_t)&v1506[-j] >= 0x7FFFFFFFFFFFFFF8)
                      v398 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v398 = v397;
                    if (v398)
                    {
                      if (v398 >> 61)
                        goto LABEL_1767;
                      v399 = operator new(8 * v398);
                      v306 = a1;
                    }
                    else
                    {
                      v399 = 0;
                    }
                    v403 = (float *)&v399[8 * v396];
                    *v403 = v385;
                    v403[1] = v386;
                    if (v354 == (float *)j)
                    {
                      v406 = (float *)&v399[8 * v396];
                      v368 = v382;
                    }
                    else
                    {
                      v404 = (unint64_t)v354 - j - 8;
                      v368 = v382;
                      if (v404 < 0x168
                        || &v399[(v389 & 0xFFFFFFFFFFFFFFF8) - 8 - (v404 & 0xFFFFFFFFFFFFFFF8)] > &v399[(v389 & 0xFFFFFFFFFFFFFFF8) - 8]
                        || (float *)((char *)v354 - (v404 & 0xFFFFFFFFFFFFFFF8) - 8) > v354 - 2
                        || (char *)v354 - v399 - (v389 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                      {
                        v405 = v354;
                        v406 = (float *)&v399[8 * v396];
                      }
                      else
                      {
                        v425 = (v404 >> 3) + 1;
                        v405 = &v354[-2 * (v425 & 0x3FFFFFFFFFFFFFFCLL)];
                        v426 = &v399[8 * v396 - 16];
                        v427 = v354 - 4;
                        v428 = v425 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v429 = *(_OWORD *)v427;
                          *(v426 - 1) = *((_OWORD *)v427 - 1);
                          *v426 = v429;
                          v426 -= 2;
                          v427 -= 8;
                          v428 -= 4;
                        }
                        while (v428);
                        v406 = &v403[-2 * (v425 & 0x3FFFFFFFFFFFFFFCLL)];
                        if (v425 == (v425 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_474;
                      }
                      do
                      {
                        v407 = *((_QWORD *)v405 - 1);
                        v405 -= 2;
                        *((_QWORD *)v406 - 1) = v407;
                        v406 -= 2;
                      }
                      while (v405 != (float *)j);
                    }
LABEL_474:
                    v1506 = &v399[8 * v398];
                    v353 = (char *)(v403 + 2);
                    if (j)
                      operator delete((void *)j);
                    j = (unint64_t)v406;
                    v379 = v1526;
LABEL_477:
                    v408 = v388 * 0.0000000249532021;
                    v409 = v368 * v408;
                    v410 = (char *)v1571;
                    v361 = v1536;
                    if ((unint64_t)v1571 < v1572)
                    {
                      *(float *)v1571 = v409;
                      v411 = v410 + 4;
                      v363 = v381;
                      v362 = v1493;
                      goto LABEL_515;
                    }
                    v412 = (char *)v1570;
                    v413 = (_BYTE *)v1571 - (_BYTE *)v1570;
                    v414 = ((_BYTE *)v1571 - (_BYTE *)v1570) >> 2;
                    v415 = v414 + 1;
                    if ((unint64_t)(v414 + 1) >> 62)
LABEL_1768:
                      abort();
                    v416 = v1572 - (_QWORD)v1570;
                    if ((uint64_t)(v1572 - (_QWORD)v1570) >> 1 > v415)
                      v415 = v416 >> 1;
                    if ((unint64_t)v416 >= 0x7FFFFFFFFFFFFFFCLL)
                      v417 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v417 = v415;
                    if (v417)
                    {
                      if (v417 >> 62)
                        goto LABEL_1767;
                      v418 = operator new(4 * v417);
                      v368 = v382;
                    }
                    else
                    {
                      v418 = 0;
                    }
                    v419 = (float *)&v418[4 * v414];
                    *v419 = v409;
                    v411 = v419 + 1;
                    v363 = v381;
                    if (v410 == v412)
                    {
                      v306 = a1;
                      v362 = v1493;
                    }
                    else
                    {
                      v420 = v410 - 4 - v412;
                      v362 = v1493;
                      if (v420 >= 0x2C)
                      {
                        v430 = v410 - &v418[v413];
                        v306 = a1;
                        if (v430 >= 0x20)
                        {
                          v431 = (v420 >> 2) + 1;
                          v432 = &v418[4 * v414 - 16];
                          v433 = v410 - 16;
                          v434 = v431 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v435 = *(_OWORD *)v433;
                            *(v432 - 1) = *((_OWORD *)v433 - 1);
                            *v432 = v435;
                            v432 -= 2;
                            v433 -= 32;
                            v434 -= 8;
                          }
                          while (v434);
                          v419 -= v431 & 0x7FFFFFFFFFFFFFF8;
                          v410 -= 4 * (v431 & 0x7FFFFFFFFFFFFFF8);
                          if (v431 == (v431 & 0x7FFFFFFFFFFFFFF8))
                            goto LABEL_512;
                        }
                      }
                      else
                      {
                        v306 = a1;
                      }
                      do
                      {
                        v436 = *((_DWORD *)v410 - 1);
                        v410 -= 4;
                        *((_DWORD *)v419-- - 1) = v436;
                      }
                      while (v410 != v412);
                    }
LABEL_512:
                    v1570 = v419;
                    v1572 = (unint64_t)&v418[4 * v417];
                    if (v412)
                      operator delete(v412);
                    v361 = v1536;
                    v379 = v1526;
LABEL_515:
                    v1571 = v411;
                    v311 = v1492;
                    v323 = *v1492;
                    v1520 |= v365 == v1492[1] - 2;
                    v354 = (float *)v353;
                    v355 = (unint64_t)v353;
                    v356 = (float *)v353;
                    v364 = v367;
                    v1503 = v369;
                    if (v365 != *v1492)
                      goto LABEL_410;
LABEL_411:
                    v365 += 2;
                    ++v357;
                    v326 = v368;
                    v358 = v379;
                    v362 = v369;
                    v363 = v367;
                    v324 = v1497;
                  }
                  while (v365 != v311[1]);
                  if (v354 == (float *)j)
                  {
                    v307 = v1474;
                    v309 = v1475;
                    v302 = v1478;
                    v15 = v1479;
                    v310 = v1477;
                    v525 = v1570;
                    if (v1570)
LABEL_621:
                      operator delete(v525);
                  }
                  else
                  {
                    v307 = v1474;
                    v302 = v1478;
                    v15 = v1479;
                    PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)j, v353, v1489, v1582, v1488, (char **)&v1577, v361 & 1, v1520 & 1, v1543 / v1476, v1549 / v1476);
                    v310 = v1477;
                    v309 = v1475;
                    v525 = v1570;
                    if (v1570)
                      goto LABEL_621;
                  }
LABEL_622:
                  if (j)
                    operator delete((void *)j);
                  if (!v302)
                    goto LABEL_628;
                  v526 = (unint64_t *)(v302 + 1);
                  do
                    v527 = __ldaxr(v526);
                  while (__stlxr(v527 - 1, v526));
                  if (!v527)
                  {
                    (*((void (**)(id *))*v302 + 2))(v302);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v302);
                    if (v15)
                    {
LABEL_629:
                      v528 = (unint64_t *)((char *)v15 + 8);
                      do
                        v529 = __ldaxr(v528);
                      while (__stlxr(v529 - 1, v528));
                      if (!v529)
                      {
                        (*(void (**)(md::PolygonOverlayRenderable *))(*(_QWORD *)v15 + 16))(v15);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
                      }
                    }
                  }
                  else
                  {
LABEL_628:
                    if (v15)
                      goto LABEL_629;
                  }
                  ++v310;
                }
                v532 = (std::__shared_weak_count *)v1592[1];
                if (!v1592[1])
                  goto LABEL_646;
                v533 = (unint64_t *)((char *)v1592[1] + 8);
                do
                  v534 = __ldaxr(v533);
                while (__stlxr(v534 - 1, v533));
                if (!v534)
                {
                  ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                  std::__shared_weak_count::__release_weak(v532);
                  v535 = (std::__shared_weak_count *)v1591[1];
                  if (v1591[1])
                  {
LABEL_647:
                    v536 = (unint64_t *)&v535->__shared_owners_;
                    do
                      v537 = __ldaxr(v536);
                    while (__stlxr(v537 - 1, v536));
                    if (!v537)
                    {
                      ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
                      std::__shared_weak_count::__release_weak(v535);
                    }
                  }
                }
                else
                {
LABEL_646:
                  v535 = (std::__shared_weak_count *)v1591[1];
                  if (v1591[1])
                    goto LABEL_647;
                }
                ++v1470;
              }
              while (v1470 != v1467);
              v308 = objc_msgSend(v307, "countByEnumeratingWithState:objects:count:", v1597, &v1605, 16);
            }
            while (v308);
LABEL_654:

            v538 = v1580[1];
            v539 = v1580[0];
            if (v1580[1] == v1580[0])
            {
              v540 = 0;
            }
            else
            {
              LOBYTE(v15) = *(_BYTE *)(a1 + 1);
              LODWORD(v302) = *(_DWORD *)(a1 + 4);
              LODWORD(j) = *(_DWORD *)(a1 + 8);
              v540 = *(_BYTE *)a1;
            }
            objc_msgSend(v1461, "style");
            v623 = v1591[0];
            v624 = (os_unfair_lock_s *)((char *)v1591[0] + 196);
            os_unfair_lock_lock((os_unfair_lock_t)v1591[0] + 49);
            os_unfair_lock_unlock(v624);
            v626 = v623[21];
            v625 = v623[22];
            v627 = (std::__shared_weak_count *)v1591[1];
            if (v1591[1])
            {
              v628 = (unint64_t *)((char *)v1591[1] + 8);
              do
                v629 = __ldaxr(v628);
              while (__stlxr(v629 - 1, v628));
              if (!v629)
              {
                ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
                std::__shared_weak_count::__release_weak(v627);
              }
            }
            v630 = (std::__shared_weak_count *)v1577;
            v631 = v1578;
            if (v625 == v626)
            {
              v303 = v1491;
              if (v1577 != v1578)
              {
                v639 = v1582[0];
                do
                {
                  if (v1580[1] == v1580[0])
                    v640 = 0;
                  else
                    v640 = (char *)v1580[0] + 4 * (uint64_t)v630->__vftable;
                  PolylineOverlayRibbonBuilder::addPolylineRibbonTo((uint64_t *)v1584[1] + 6, v630[1].__shared_weak_owners_, v1461, v630->__shared_owners_, (uint64_t)v639 + 8 * (uint64_t)v630->__vftable, (uint64_t)v640, v630->__shared_weak_owners_, BYTE1(v630->__shared_weak_owners_), *(double *)&v630[1].__vftable, *(double *)&v630[1].__shared_owners_);
                  v630 += 2;
                }
                while (v630 != v631);
              }
              if (!*((_QWORD *)v1584[1] + 9))
                goto LABEL_1067;
              v1570 = 0;
              v1571 = &v1570;
              v1572 = 0x3812000000;
              v1573 = __Block_byref_object_copy__69;
              v1574 = __Block_byref_object_dispose__70;
              v1575 = 0;
              v1576 = 0;
              v1591[0] = (void *)MEMORY[0x1E0C809B0];
              v1591[1] = (void *)3321888768;
              v1592[0] = ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke_71;
              v1592[1] = &unk_1E42F4148;
              *(_QWORD *)&v1593 = &v1570;
              *((_QWORD *)&v1593 + 1) = v1584;
              *(_QWORD *)&v1594 = a8;
              *((_QWORD *)&v1594 + 1) = a10;
              LOBYTE(v1595) = 0;
              BYTE8(v1596) = 0;
              if (v538 != v539)
              {
                LOBYTE(v1595) = v540;
                BYTE1(v1595) = (_BYTE)v15;
                *(_QWORD *)((char *)&v1595 + 4) = __PAIR64__(j, v302);
                BYTE8(v1596) = 1;
              }
              v1604 = 0;
              v1601 = (md::MaskingOverlayRenderable *)&off_1E42C7118;
              v1602 = MEMORY[0x1A1AF5730](v1591);
              v1604 = &v1601;
              v1569 = 0;
              v1568 = 0;
              (*(void (**)(_QWORD, md::MaskingOverlayRenderable **, void ***))(*(_QWORD *)*a4 + 16))(*a4, &v1601, &v1568);
              v641 = v1569;
              if (v1569)
              {
                v642 = (unint64_t *)&v1569->__shared_owners_;
                do
                  v643 = __ldaxr(v642);
                while (__stlxr(v643 - 1, v642));
                if (!v643)
                {
                  ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
                  std::__shared_weak_count::__release_weak(v641);
                }
              }
              v644 = v1604;
              if (v1604 == &v1601)
              {
                v644 = &v1601;
                v645 = 4;
LABEL_1015:
                (*((void (**)(void))*v644 + v645))();
              }
              else if (v1604)
              {
                v645 = 5;
                goto LABEL_1015;
              }
              if (v538 == v539)
              {
                v873 = *((_QWORD *)v1571 + 6);
                if (v873)
                {
                  if (*(_QWORD *)(v873 + 40) != *(_QWORD *)(v873 + 32))
                  {
                    v1568 = 0;
                    v874 = (void **)operator new();
                    *v874 = 0;
                    v874[1] = 0;
                    v874[2] = 0;
                    v1568 = v874;
                    v875 = *((_QWORD *)v1571 + 6);
                    v876 = *(uint64_t **)(v875 + 32);
                    j = *(_QWORD *)(v875 + 40);
                    while (v876 != (uint64_t *)j)
                    {
                      v877 = *v876;
                      v878 = (_QWORD *)operator new();
                      ggl::Mesh::Mesh((uint64_t)v878, v877);
                      *v878 = &off_1E42BAF50;
                      v878[2] = &unk_1E42BAF70;
                      v879 = v1568;
                      objc_msgSend(v1461, "style");
                      v880 = (char *)v879[1];
                      v881 = (char *)v879[2];
                      if (v880 >= v881)
                      {
                        v887 = 0xAAAAAAAAAAAAAAABLL * ((v880 - (_BYTE *)*v879) >> 4);
                        v888 = v887 + 1;
                        if (v887 + 1 > 0x555555555555555)
                          abort();
                        v889 = 0xAAAAAAAAAAAAAAABLL * ((v881 - (_BYTE *)*v879) >> 4);
                        if (2 * v889 > v888)
                          v888 = 2 * v889;
                        if (v889 >= 0x2AAAAAAAAAAAAAALL)
                          v890 = 0x555555555555555;
                        else
                          v890 = v888;
                        if (v890 > 0x555555555555555)
                          goto LABEL_1767;
                        v891 = (char *)operator new(48 * v890);
                        v892 = &v891[48 * v887];
                        *(_WORD *)v892 = *(_WORD *)a1;
                        *(_QWORD *)(v892 + 4) = *(_QWORD *)(a1 + 4);
                        v893 = v1601;
                        v894 = v1602;
                        *((_QWORD *)v892 + 3) = v878;
                        *((_QWORD *)v892 + 4) = v893;
                        *((_QWORD *)v892 + 5) = v894;
                        if (v894)
                        {
                          v895 = (unint64_t *)(v894 + 8);
                          do
                            v896 = __ldxr(v895);
                          while (__stxr(v896 + 1, v895));
                        }
                        v897 = &v891[48 * v890];
                        v886 = v892 + 48;
                        v898 = (char *)*v879;
                        v899 = (char *)v879[1];
                        if (v899 == *v879)
                        {
                          *v879 = v892;
                          v879[1] = v886;
                          v879[2] = v897;
                        }
                        else
                        {
                          v900 = 0;
                          do
                          {
                            v901 = &v892[v900];
                            v902 = &v899[v900];
                            *((_WORD *)v901 - 24) = *(_WORD *)&v899[v900 - 48];
                            *(_QWORD *)(v901 - 44) = *(_QWORD *)&v899[v900 - 44];
                            v903 = *(_OWORD *)&v899[v900 - 24];
                            *((_QWORD *)v902 - 3) = 0;
                            *(_OWORD *)(v901 - 24) = v903;
                            *((_QWORD *)v901 - 1) = *(_QWORD *)&v899[v900 - 8];
                            *((_QWORD *)v902 - 2) = 0;
                            *((_QWORD *)v902 - 1) = 0;
                            v900 -= 48;
                          }
                          while (&v899[v900] != v898);
                          v899 = (char *)*v879;
                          v904 = (char *)v879[1];
                          *v879 = &v892[v900];
                          v879[1] = v886;
                          v879[2] = v897;
                          while (v904 != v899)
                          {
                            v905 = (std::__shared_weak_count *)*((_QWORD *)v904 - 1);
                            if (v905)
                            {
                              v906 = (unint64_t *)&v905->__shared_owners_;
                              do
                                v907 = __ldaxr(v906);
                              while (__stlxr(v907 - 1, v906));
                              if (!v907)
                              {
                                ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
                                std::__shared_weak_count::__release_weak(v905);
                              }
                            }
                            v908 = *((_QWORD *)v904 - 3);
                            *((_QWORD *)v904 - 3) = 0;
                            if (v908)
                              (*(void (**)(uint64_t))(*(_QWORD *)v908 + 8))(v908);
                            v904 -= 48;
                          }
                        }
                        if (v899)
                          operator delete(v899);
                      }
                      else
                      {
                        *(_WORD *)v880 = *(_WORD *)a1;
                        *(_QWORD *)(v880 + 4) = *(_QWORD *)(a1 + 4);
                        v882 = v1601;
                        v883 = v1602;
                        *((_QWORD *)v880 + 3) = v878;
                        *((_QWORD *)v880 + 4) = v882;
                        *((_QWORD *)v880 + 5) = v883;
                        if (v883)
                        {
                          v884 = (unint64_t *)(v883 + 8);
                          do
                            v885 = __ldxr(v884);
                          while (__stxr(v885 + 1, v884));
                        }
                        v886 = v880 + 48;
                      }
                      v879[1] = v886;
                      v909 = (std::__shared_weak_count *)v1602;
                      if (v1602)
                      {
                        v910 = (unint64_t *)(v1602 + 8);
                        do
                          v911 = __ldaxr(v910);
                        while (__stlxr(v911 - 1, v910));
                        if (!v911)
                        {
                          ((void (*)(std::__shared_weak_count *))v909->__on_zero_shared)(v909);
                          std::__shared_weak_count::__release_weak(v909);
                        }
                      }
                      ++v876;
                    }
                    v1387 = operator new(4uLL);
                    *v1387 = v1449;
                    v1388 = operator new(0xA8uLL);
                    v1389 = v1568;
                    v1388[1] = 0u;
                    v1388[2] = 0u;
                    v1388[3] = 0u;
                    v1388[4] = 0u;
                    v1388[5] = 0u;
                    v1388[6] = 0u;
                    *((_QWORD *)v1388 + 14) = 0;
                    *((_QWORD *)v1388 + 15) = v1389;
                    *((_QWORD *)v1388 + 16) = v1387;
                    *((_QWORD *)v1388 + 17) = v1387 + 1;
                    *((_QWORD *)v1388 + 18) = v1387 + 1;
                    *((_WORD *)v1388 + 76) = 2;
                    *((_QWORD *)v1388 + 20) = 0;
                    v1390 = *a6;
                    *(_QWORD *)v1388 = *a6;
                    *((_QWORD *)v1388 + 1) = a6;
                    *(_QWORD *)(v1390 + 8) = v1388;
                    *a6 = (uint64_t)v1388;
                    ++a6[2];
                  }
                }
              }
              v15 = (md::PolygonOverlayRenderable *)operator new(4uLL);
              *(_DWORD *)v15 = v1449;
              v834 = (char *)v15 + 4;
              if (v538 == v539)
              {
                v912 = v1571;
                v842 = (char *)operator new(0xA8uLL);
                v913 = v912[6];
                v912[6] = 0;
                *((_QWORD *)v842 + 2) = 0;
                *((_QWORD *)v842 + 3) = v913;
                v872 = 0uLL;
                *((_OWORD *)v842 + 2) = 0u;
                *((_OWORD *)v842 + 3) = 0u;
                *((_OWORD *)v842 + 4) = 0u;
                *((_OWORD *)v842 + 5) = 0u;
              }
              else
              {
                v1601 = 0;
                v865 = (md::MaskingOverlayRenderable *)operator new();
                v866 = v865;
                v867 = *((_QWORD *)v1571 + 6);
                *((_QWORD *)v1571 + 6) = 0;
                v869 = *a10;
                v868 = a10[1];
                *(_QWORD *)v865 = v867;
                *((_QWORD *)v865 + 1) = v869;
                *((_QWORD *)v865 + 2) = v868;
                if (v868)
                {
                  v870 = (unint64_t *)(v868 + 8);
                  do
                    v871 = __ldxr(v870);
                  while (__stxr(v871 + 1, v870));
                }
                v1601 = v865;
                v842 = (char *)operator new(0xA8uLL);
                v872 = 0uLL;
                *((_OWORD *)v842 + 3) = 0u;
                *((_OWORD *)v842 + 4) = 0u;
                *((_OWORD *)v842 + 1) = 0u;
                *((_OWORD *)v842 + 2) = 0u;
                *((_QWORD *)v842 + 10) = 0;
                *((_QWORD *)v842 + 11) = v866;
              }
              *((_OWORD *)v842 + 6) = v872;
              *((_OWORD *)v842 + 7) = v872;
              goto LABEL_1065;
            }
            v303 = v1491;
            if (v1577 != v1578)
            {
              v632 = v1582[0];
              do
              {
                if (v1580[1] == v1580[0])
                  v633 = 0;
                else
                  v633 = (char *)v1580[0] + 4 * (uint64_t)v630->__vftable;
                PolylineOverlayRibbonBuilder::addPolylineRibbonTo((uint64_t *)v1584[1] + 6, v630[1].__shared_weak_owners_, v1461, v630->__shared_owners_, (uint64_t)v632 + 8 * (uint64_t)v630->__vftable, (uint64_t)v633, v630->__shared_weak_owners_, BYTE1(v630->__shared_weak_owners_), *(double *)&v630[1].__vftable, *(double *)&v630[1].__shared_owners_);
                v630 += 2;
              }
              while (v630 != v631);
            }
            if (*((_QWORD *)v1584[1] + 9))
            {
              v1570 = 0;
              v1571 = &v1570;
              v1572 = 0x3812000000;
              v1573 = __Block_byref_object_copy__66;
              v1574 = __Block_byref_object_dispose__67;
              v1575 = 0;
              v1576 = 0;
              v1591[0] = (void *)MEMORY[0x1E0C809B0];
              v1591[1] = (void *)3321888768;
              v1592[0] = ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke;
              v1592[1] = &unk_1E42F4148;
              *(_QWORD *)&v1593 = &v1570;
              *((_QWORD *)&v1593 + 1) = v1584;
              *(_QWORD *)&v1594 = a8;
              *((_QWORD *)&v1594 + 1) = a10;
              LOBYTE(v1595) = 0;
              BYTE8(v1596) = 0;
              if (v538 != v539)
              {
                LOBYTE(v1595) = v540;
                BYTE1(v1595) = (_BYTE)v15;
                *(_QWORD *)((char *)&v1595 + 4) = __PAIR64__(j, v302);
                BYTE8(v1596) = 1;
              }
              v1604 = 0;
              v1601 = (md::MaskingOverlayRenderable *)&off_1E42C7118;
              v1602 = MEMORY[0x1A1AF5730](v1591);
              v1604 = &v1601;
              v1569 = 0;
              v1568 = 0;
              (*(void (**)(_QWORD, md::MaskingOverlayRenderable **, void ***))(*(_QWORD *)*a4 + 16))(*a4, &v1601, &v1568);
              v634 = v1569;
              if (v1569)
              {
                v635 = (unint64_t *)&v1569->__shared_owners_;
                do
                  v636 = __ldaxr(v635);
                while (__stlxr(v636 - 1, v635));
                if (!v636)
                {
                  ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
                  std::__shared_weak_count::__release_weak(v634);
                }
              }
              v637 = v1604;
              if (v1604 == &v1601)
              {
                v637 = &v1601;
                v638 = 4;
LABEL_977:
                (*((void (**)(void))*v637 + v638))();
              }
              else if (v1604)
              {
                v638 = 5;
                goto LABEL_977;
              }
              v15 = (md::PolygonOverlayRenderable *)operator new(4uLL);
              *(_DWORD *)v15 = v1449;
              v834 = (char *)v15 + 4;
              if (v538 == v539)
              {
                v843 = v1571;
                v842 = (char *)operator new(0xA8uLL);
                v844 = v843[6];
                v843[6] = 0;
                *((_QWORD *)v842 + 2) = 0;
                *((_QWORD *)v842 + 3) = 0;
                *((_QWORD *)v842 + 4) = v844;
                *(_OWORD *)(v842 + 40) = 0u;
                *(_OWORD *)(v842 + 56) = 0u;
                *(_OWORD *)(v842 + 72) = 0u;
                *(_OWORD *)(v842 + 88) = 0u;
                *(_OWORD *)(v842 + 104) = 0u;
                *((_QWORD *)v842 + 15) = 0;
              }
              else
              {
                v1601 = 0;
                v835 = (md::MaskingOverlayRenderable *)operator new();
                v836 = v835;
                v837 = *((_QWORD *)v1571 + 6);
                *((_QWORD *)v1571 + 6) = 0;
                v839 = *a10;
                v838 = a10[1];
                *(_QWORD *)v835 = v837;
                *((_QWORD *)v835 + 1) = v839;
                *((_QWORD *)v835 + 2) = v838;
                if (v838)
                {
                  v840 = (unint64_t *)(v838 + 8);
                  do
                    v841 = __ldxr(v840);
                  while (__stxr(v841 + 1, v840));
                }
                v1601 = v835;
                v842 = (char *)operator new(0xA8uLL);
                *((_OWORD *)v842 + 4) = 0u;
                *((_OWORD *)v842 + 5) = 0u;
                *((_OWORD *)v842 + 2) = 0u;
                *((_OWORD *)v842 + 3) = 0u;
                *((_OWORD *)v842 + 1) = 0u;
                *((_QWORD *)v842 + 12) = v836;
                *((_QWORD *)v842 + 13) = 0;
                *((_QWORD *)v842 + 14) = 0;
                *((_QWORD *)v842 + 15) = 0;
              }
LABEL_1065:
              *((_QWORD *)v842 + 16) = v15;
              *((_QWORD *)v842 + 17) = v834;
              *((_QWORD *)v842 + 18) = v834;
              *((_WORD *)v842 + 76) = 2;
              *((_QWORD *)v842 + 20) = 0;
              v914 = *a6;
              *(_QWORD *)v842 = *a6;
              *((_QWORD *)v842 + 1) = a6;
              *(_QWORD *)(v914 + 8) = v842;
              *a6 = (uint64_t)v842;
              ++a6[2];
              _Block_object_dispose(&v1570, 8);
              v915 = v1576;
              v1576 = 0;
              if (v915)
                (*(void (**)(uint64_t))(*(_QWORD *)v915 + 8))(v915);
            }
LABEL_1067:
            if (v1577)
              operator delete(v1577);
            v304 = v1468;
            v302 = v1469;
            if (v1580[0])
            {
              v1580[1] = v1580[0];
              operator delete(v1580[0]);
            }
            if (v1582[0])
              operator delete(v1582[0]);
            _Block_object_dispose(v1584, 8);
            std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v1588 + 1));
            v916 = (void *)*((_QWORD *)&v1587 + 1);
            *((_QWORD *)&v1587 + 1) = 0;
            if (v916)
              operator delete(v916);

LABEL_1667:
            v302 += 3;
            if (v302 == v1457)
              goto LABEL_75;
          }
        case 3u:
          v97 = *((_QWORD *)v1463 + 1);
          v1547 = *((_QWORD *)v1463 + 2);
          if (v97 == v1547)
            goto LABEL_75;
          while (1)
          {
            v98 = *(id *)(v97 + 8);
            objc_msgSend(v98, "rasterTileProvider");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            v100 = v99;
            if (v99)
              break;
LABEL_278:

            v97 += 24;
            if (v97 == v1547)
              goto LABEL_75;
          }
          LODWORD(v15) = objc_msgSend(v99, "keyframesCount");
          v101 = (md::PolygonOverlayRenderable **)operator new();
          *v101 = 0;
          v101[1] = 0;
          v101[2] = 0;
          v103 = *a7;
          v102 = a7[1];
          if (*a7 != v102)
          {
            while (*(_WORD *)v103 != 35)
            {
              v103 += 48;
              if (v103 == v102)
                goto LABEL_277;
            }
          }
          if (v103 == v102)
            goto LABEL_277;
          objc_msgSend(v98, "replaceMapContentInRect");
          v105 = v104;
          v107 = v106;
          v109 = v108;
          v111 = v110;
          if ((GEOMapRectIsNull() & 1) != 0 || (v112 = *(double *)(MEMORY[0x1E0D266E8] + 16), v1460 < v105 / v112))
          {
            v113 = v15;
            v1534 = 0;
          }
          else
          {
            v113 = v15;
            v114 = *(double *)(MEMORY[0x1E0D266E8] + 24);
            v115 = v1456 <= (v109 + v105) / v112;
            if (v1455 < 1.0 - (v111 + v107) / v114)
              v115 = 0;
            if (v1454 > 1.0 - v107 / v114)
              v115 = 0;
            v1534 = v115;
          }
          *(_OWORD *)v1591 = 0u;
          *(_OWORD *)v1592 = 0u;
          LODWORD(v1593) = 1065353216;
          v15 = *(md::PolygonOverlayRenderable **)(v103 + 24);
          if (v15)
          {
            v1553 = v113;
            do
            {
              LODWORD(j) = *(_DWORD *)(*((_QWORD *)v15 + 3) + 12);
              if ((_DWORD)j == objc_msgSend(v100, "providerID"))
              {
                v116 = (int32x2_t *)*((_QWORD *)v15 + 3);
                v117 = v116[1].i32[0];
                LOBYTE(v1605) = -1;
                BYTE1(v1605) = v117;
                *(int32x2_t *)((char *)&v1605 + 4) = vrev64_s32(*v116);
                v118 = std::__hash_table<std::__hash_value_type<geo::QuadTile,unsigned long>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,unsigned long>>>::__emplace_unique_key_args<geo::QuadTile,std::piecewise_construct_t const&,std::tuple<geo::QuadTile const&>,std::tuple<>>((float *)v1591, (unsigned __int8 *)&v1605, (uint64_t)&v1605);
                ++v118[5];
              }
              v15 = *(md::PolygonOverlayRenderable **)v15;
            }
            while (v15);
            v119 = *(_QWORD **)(v103 + 24);
            v1597[1] = 0;
            v1597[0] = 0;
            if (v119)
            {
              LODWORD(v15) = v113;
              v1525 = v113;
              while (1)
              {
                v120 = *(_DWORD *)(v119[3] + 12);
                if (v120 == objc_msgSend(v100, "providerID"))
                {
                  v121 = (int32x2_t *)v119[3];
                  v122 = v121[1].i32[0];
                  LOBYTE(v1584[0]) = -1;
                  BYTE1(v1584[0]) = v122;
                  *(int32x2_t *)((char *)v1584 + 4) = vrev64_s32(*v121);
                  if (std::__hash_table<std::__hash_value_type<geo::QuadTile,unsigned long>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,unsigned long>>>::__emplace_unique_key_args<geo::QuadTile,std::piecewise_construct_t const&,std::tuple<geo::QuadTile const&>,std::tuple<>>((float *)v1591, (unsigned __int8 *)v1584, (uint64_t)v1584)[5] == v1553&& *(unsigned __int16 *)(v119[3] + 20) < v15)
                  {
                    break;
                  }
                }
LABEL_131:
                v119 = (_QWORD *)*v119;
                if (!v119)
                  goto LABEL_229;
              }
              v1541 = *(_WORD *)(v119[3] + 20);
              j = v119[14];
              v123 = (unint64_t *)v119[15];
              v1570 = (void *)j;
              v1571 = v123;
              if (v123)
              {
                v124 = v123 + 1;
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
              }
              v126 = (char *)operator new(0x58uLL);
              *((_QWORD *)v126 + 1) = 0;
              *((_QWORD *)v126 + 2) = 0;
              *(_QWORD *)v126 = &off_1E42DED18;
              *((_QWORD *)v126 + 3) = &off_1E42B63B0;
              v127 = v126 + 24;
              *((_QWORD *)v126 + 5) = 0;
              *((_QWORD *)v126 + 6) = 0;
              *((_QWORD *)v126 + 4) = 0;
              *((_DWORD *)v126 + 14) = 0;
              *(_QWORD *)&v128 = 0x100000001;
              *((_QWORD *)&v128 + 1) = 0x100000001;
              *(_OWORD *)(v126 + 60) = v128;
              *(_QWORD *)(v126 + 76) = 0x100000001;
              *((_DWORD *)v126 + 21) = 0;
              v1601 = (md::MaskingOverlayRenderable *)(v126 + 24);
              v1602 = (uint64_t)v126;
              v129 = (char *)operator new(0xB0uLL);
              v130 = v129;
              *((_QWORD *)v129 + 1) = 0;
              *((_QWORD *)v129 + 2) = 0;
              *(_QWORD *)v129 = &off_1E42E53B0;
              v131 = *(_QWORD *)(j + 144);
              v132 = *(std::__shared_weak_count **)(j + 152);
              if (v132)
              {
                v133 = (unint64_t *)&v132->__shared_owners_;
                do
                  v134 = __ldxr(v133);
                while (__stxr(v134 + 1, v133));
              }
              v135 = *(_DWORD *)(v131 + 12);
              *((_QWORD *)v129 + 13) = 0;
              *((_DWORD *)v129 + 14) = 0;
              *((_QWORD *)v129 + 5) = 0;
              *((_QWORD *)v129 + 6) = 0;
              *((_QWORD *)v129 + 10) = 0x100000001;
              *((_DWORD *)v129 + 22) = 0;
              *((_DWORD *)v129 + 23) = v135;
              *((_QWORD *)v129 + 12) = 0x100000001;
              *((_QWORD *)v129 + 14) = 0;
              *((_QWORD *)v129 + 15) = 0;
              *((_QWORD *)v129 + 3) = &off_1E42BE438;
              *((_QWORD *)v129 + 4) = 0;
              *((_QWORD *)v129 + 8) = &unk_1E42BE458;
              *((_QWORD *)v129 + 9) = "";
              *((_DWORD *)v129 + 32) = *(_DWORD *)(v131 + 8);
              *((_QWORD *)v129 + 17) = v131;
              *((_QWORD *)v129 + 18) = v132;
              if (v132)
              {
                v136 = (unint64_t *)&v132->__shared_owners_;
                do
                  v137 = __ldxr(v136);
                while (__stxr(v137 + 1, v136));
              }
              *((_WORD *)v129 + 76) = 0;
              v129[154] = 1;
              v138 = v1602;
              *((_QWORD *)v129 + 20) = v127;
              *((_QWORD *)v129 + 21) = v138;
              if (v138)
              {
                v139 = (unint64_t *)(v138 + 8);
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
              }
              *((_QWORD *)v129 + 13) = *(_QWORD *)(v131 + 16);
              if (v132)
              {
                v141 = (unint64_t *)&v132->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              v1582[0] = v130 + 24;
              v1582[1] = v130;
              *(_QWORD *)&v1605 = &off_1E42C81F8;
              *((_QWORD *)&v1605 + 1) = v1582;
              *((_QWORD *)&v1606 + 1) = &v1605;
              v1580[1] = 0;
              v1580[0] = 0;
              (*(void (**)(_QWORD, __int128 *, void **))(*(_QWORD *)*a4 + 16))(*a4, &v1605, v1580);
              v143 = (std::__shared_weak_count *)v1580[1];
              if (v1580[1])
              {
                v144 = (unint64_t *)((char *)v1580[1] + 8);
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              v146 = (__int128 *)*((_QWORD *)&v1606 + 1);
              if (*((__int128 **)&v1606 + 1) == &v1605)
              {
                v146 = &v1605;
                v147 = 4;
              }
              else
              {
                if (!*((_QWORD *)&v1606 + 1))
                {
LABEL_162:
                  if (!v1597[0] && objc_msgSend(v100, "colorMap"))
                  {
                    v150 = (CGImage *)objc_msgSend(v100, "colorMap");
                    v1515 = v1452;
                    Width = CGImageGetWidth(v150);
                    j = CGImageGetHeight(v150);
                    v152 = operator new(0x60uLL);
                    v152[2] = 0;
                    *v152 = &off_1E42DEFB8;
                    v152[1] = 0;
                    *(_QWORD *)&v1605 = ggl::TextureData2D::TextureData2D((uint64_t)(v152 + 3), Width, j, 1u, 12, 0);
                    *((_QWORD *)&v1605 + 1) = v152;
                    v153 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(v152[3] + 16))(v1605, 0);
                    v154 = CGColorSpaceCreateWithName(name);
                    v155 = CGBitmapContextCreate(v153, Width, j, 8uLL, 4 * Width, v154, 1u);
                    CGContextSetBlendMode(v155, kCGBlendModeCopy);
                    CGContextSetAlpha(v155, 1.0);
                    v1615.size.width = (double)Width;
                    v1615.size.height = (double)j;
                    v1615.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
                    v1615.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
                    CGContextDrawImage(v155, v1615, v150);
                    CGContextRelease(v155);
                    CGColorSpaceRelease(v154);
                    generateTexture(v1580, (uint64_t *)&v1605, v1515);
                    v156 = (std::__shared_weak_count *)*((_QWORD *)&v1605 + 1);
                    if (*((_QWORD *)&v1605 + 1))
                    {
                      v157 = (unint64_t *)(*((_QWORD *)&v1605 + 1) + 8);
                      do
                        v158 = __ldaxr(v157);
                      while (__stlxr(v158 - 1, v157));
                      if (!v158)
                      {
                        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                        std::__shared_weak_count::__release_weak(v156);
                      }
                    }

                    v159 = *(_OWORD *)v1580;
                    v1580[1] = 0;
                    v1580[0] = 0;
                    v160 = (std::__shared_weak_count *)v1597[1];
                    *(_OWORD *)v1597 = v159;
                    if (v160)
                    {
                      v161 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    v163 = (std::__shared_weak_count *)v1580[1];
                    if (v1580[1])
                    {
                      v164 = (unint64_t *)((char *)v1580[1] + 8);
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                  }
                  v148 = operator new(0xE8uLL);
                  v148[1] = 0;
                  v148[2] = 0;
                  *v148 = &off_1E42E2278;
                  v149 = (void *)ggl::BufferData::BufferData((uint64_t)(v148 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
                  v148[28] = ggl::Tile::View::reflection(void)::reflection;
                  v148[3] = &off_1E42B97B0;
                  v1580[0] = v149;
                  v1580[1] = v148;
                  if (v98)
                  {
                    objc_msgSend(v98, "rasterStyle");
                  }
                  else
                  {
                    v1578 = 0;
                    v1577 = 0;
                  }
                  v167 = (unint64_t)v101[1];
                  v166 = (unint64_t)v101[2];
                  if (v167 < v166)
                  {
                    md::OverlayTileData::OverlayTileResource::RasterTile::RasterTile(v167, (__int16 *)v1584, v1582, v1541, v1580, a10, &v1577, (uint64_t)v1597[0], (uint64_t)v1597[1], v1534);
                    v168 = v167 + 136;
                    v101[1] = (md::PolygonOverlayRenderable *)(v167 + 136);
                    goto LABEL_201;
                  }
                  v169 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v167 - (_QWORD)*v101) >> 3);
                  v170 = v169 + 1;
                  if (v169 + 1 > 0x1E1E1E1E1E1E1E1)
                    abort();
                  v171 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v166 - (_QWORD)*v101) >> 3);
                  if (2 * v171 > v170)
                    v170 = 2 * v171;
                  if (v171 >= 0xF0F0F0F0F0F0F0)
                    v172 = 0x1E1E1E1E1E1E1E1;
                  else
                    v172 = v170;
                  *(_QWORD *)&v1607 = v101 + 2;
                  if (v172)
                  {
                    if (v172 > 0x1E1E1E1E1E1E1E1)
                      goto LABEL_1767;
                    v173 = (char *)operator new(136 * v172);
                  }
                  else
                  {
                    v173 = 0;
                  }
                  *(_QWORD *)&v1605 = v173;
                  *((_QWORD *)&v1605 + 1) = &v173[136 * v169];
                  *(_QWORD *)&v1606 = *((_QWORD *)&v1605 + 1);
                  *((_QWORD *)&v1606 + 1) = &v173[136 * v172];
                  md::OverlayTileData::OverlayTileResource::RasterTile::RasterTile(*((uint64_t *)&v1605 + 1), (__int16 *)v1584, v1582, v1541, v1580, a10, &v1577, (uint64_t)v1597[0], (uint64_t)v1597[1], v1534);
                  v174 = *((_QWORD *)&v1605 + 1);
                  v168 = v1606 + 136;
                  v175 = *v101;
                  v176 = v101[1];
                  if (v176 == *v101)
                  {
                    *v101 = (md::PolygonOverlayRenderable *)*((_QWORD *)&v1605 + 1);
                    v101[1] = (md::PolygonOverlayRenderable *)v168;
                    v101[2] = (md::PolygonOverlayRenderable *)*((_QWORD *)&v1606 + 1);
                    if (!v176)
                      goto LABEL_201;
                  }
                  else
                  {
                    v177 = 0;
                    do
                    {
                      v178 = (char *)v176 + v177;
                      v179 = v174 + v177;
                      *(_OWORD *)(v179 - 136) = *(_OWORD *)((char *)v176 + v177 - 136);
                      *((_QWORD *)v178 - 17) = 0;
                      *((_QWORD *)v178 - 16) = 0;
                      *(_OWORD *)(v179 - 120) = *(_OWORD *)((char *)v176 + v177 - 120);
                      *((_QWORD *)v178 - 15) = 0;
                      *((_QWORD *)v178 - 14) = 0;
                      *(_WORD *)(v179 - 104) = *(_WORD *)((char *)v176 + v177 - 104);
                      *(_QWORD *)(v179 - 100) = *(_QWORD *)((char *)v176 + v177 - 100);
                      *(_WORD *)(v179 - 80) = *(_WORD *)((char *)v176 + v177 - 80);
                      *(_OWORD *)(v179 - 72) = *(_OWORD *)((char *)v176 + v177 - 72);
                      v180 = *(_OWORD *)((char *)v176 + v177 - 56);
                      *((_QWORD *)v178 - 9) = 0;
                      *((_QWORD *)v178 - 8) = 0;
                      *(_OWORD *)(v179 - 56) = v180;
                      *((_QWORD *)v178 - 7) = 0;
                      *((_QWORD *)v178 - 6) = 0;
                      *(_OWORD *)(v179 - 40) = *(_OWORD *)((char *)v176 + v177 - 40);
                      *((_QWORD *)v178 - 5) = 0;
                      *((_QWORD *)v178 - 4) = 0;
                      *(_OWORD *)(v179 - 24) = *(_OWORD *)((char *)v176 + v177 - 24);
                      *((_QWORD *)v178 - 3) = 0;
                      *((_QWORD *)v178 - 2) = 0;
                      v181 = *(_DWORD *)((char *)v176 + v177 - 8);
                      *(_BYTE *)(v179 - 4) = *((_BYTE *)v176 + v177 - 4);
                      *(_DWORD *)(v179 - 8) = v181;
                      v177 -= 136;
                    }
                    while ((md::PolygonOverlayRenderable *)((char *)v176 + v177) != v175);
                    v176 = *v101;
                    v182 = v101[1];
                    *v101 = (md::PolygonOverlayRenderable *)(v174 + v177);
                    v101[1] = (md::PolygonOverlayRenderable *)v168;
                    v101[2] = (md::PolygonOverlayRenderable *)*((_QWORD *)&v1606 + 1);
                    while (v182 != v176)
                      md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::PolygonOverlayRenderable *)((char *)v182 - 136));
                    if (!v176)
                    {
LABEL_201:
                      v101[1] = (md::PolygonOverlayRenderable *)v168;
                      v183 = v1578;
                      LODWORD(v15) = v1525;
                      if (!v1578)
                        goto LABEL_205;
                      v184 = (unint64_t *)&v1578->__shared_owners_;
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                        v186 = (std::__shared_weak_count *)v1580[1];
                        if (!v1580[1])
                          goto LABEL_211;
                      }
                      else
                      {
LABEL_205:
                        v186 = (std::__shared_weak_count *)v1580[1];
                        if (!v1580[1])
                          goto LABEL_211;
                      }
                      v187 = (unint64_t *)&v186->__shared_owners_;
                      do
                        v188 = __ldaxr(v187);
                      while (__stlxr(v188 - 1, v187));
                      if (!v188)
                      {
                        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                        std::__shared_weak_count::__release_weak(v186);
                      }
LABEL_211:
                      v189 = (std::__shared_weak_count *)v1582[1];
                      if (!v1582[1])
                        goto LABEL_215;
                      v190 = (unint64_t *)((char *)v1582[1] + 8);
                      do
                        v191 = __ldaxr(v190);
                      while (__stlxr(v191 - 1, v190));
                      if (!v191)
                      {
                        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                        std::__shared_weak_count::__release_weak(v189);
                        v192 = (std::__shared_weak_count *)v1602;
                        if (v1602)
                          goto LABEL_216;
                      }
                      else
                      {
LABEL_215:
                        v192 = (std::__shared_weak_count *)v1602;
                        if (v1602)
                        {
LABEL_216:
                          v193 = (unint64_t *)&v192->__shared_owners_;
                          do
                            v194 = __ldaxr(v193);
                          while (__stlxr(v194 - 1, v193));
                          if (!v194)
                          {
                            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                            std::__shared_weak_count::__release_weak(v192);
                          }
                        }
                      }
                      v195 = (std::__shared_weak_count *)v1571;
                      if (v1571)
                      {
                        v196 = (unint64_t *)((char *)v1571 + 8);
                        do
                          v197 = __ldaxr(v196);
                        while (__stlxr(v197 - 1, v196));
                        if (!v197)
                        {
                          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                          std::__shared_weak_count::__release_weak(v195);
                        }
                      }
                      goto LABEL_131;
                    }
                  }
                  operator delete(v176);
                  goto LABEL_201;
                }
                v147 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v146 + 8 * v147))();
              goto LABEL_162;
            }
          }
          else
          {
            v1597[1] = 0;
            v1597[0] = 0;
          }
LABEL_229:
          if (v101[1] != *v101)
          {
            v198 = objc_msgSend(v98, "identifier");
            v15 = (md::PolygonOverlayRenderable *)operator new(4uLL);
            *(_DWORD *)v15 = v198;
            v199 = operator new(0xA8uLL);
            v199[4] = 0u;
            v199[5] = 0u;
            v199[2] = 0u;
            v199[3] = 0u;
            v199[1] = 0u;
            *((_QWORD *)v199 + 12) = 0;
            *((_QWORD *)v199 + 13) = v101;
            *((_QWORD *)v199 + 14) = 0;
            *((_QWORD *)v199 + 15) = 0;
            *((_QWORD *)v199 + 16) = v15;
            *((_QWORD *)v199 + 17) = (char *)v15 + 4;
            *((_QWORD *)v199 + 18) = (char *)v15 + 4;
            *((_WORD *)v199 + 76) = 3;
            *((_QWORD *)v199 + 20) = 0;
            v200 = *a6;
            *(_QWORD *)v199 = *a6;
            *((_QWORD *)v199 + 1) = a6;
            *(_QWORD *)(v200 + 8) = v199;
            *a6 = (uint64_t)v199;
            ++a6[2];
            v101 = 0;
          }
          v201 = (std::__shared_weak_count *)v1597[1];
          if (!v1597[1])
            goto LABEL_235;
          v202 = (unint64_t *)((char *)v1597[1] + 8);
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
            v204 = v1592[0];
            if (v1592[0])
            {
              do
              {
LABEL_236:
                v205 = (_QWORD *)*v204;
                operator delete(v204);
                v204 = v205;
              }
              while (v205);
            }
          }
          else
          {
LABEL_235:
            v204 = v1592[0];
            if (v1592[0])
              goto LABEL_236;
          }
          v206 = v1591[0];
          v1591[0] = 0;
          if (v206)
            operator delete(v206);
          if (!v101)
            goto LABEL_278;
          v15 = *v101;
          if (!*v101)
            goto LABEL_277;
          j = (unint64_t)v101[1];
          v207 = *v101;
          if ((md::PolygonOverlayRenderable *)j == v15)
          {
LABEL_276:
            v101[1] = v15;
            operator delete(v207);
LABEL_277:
            MEMORY[0x1A1AF4E00](v101, 0x20C40960023A9);
            goto LABEL_278;
          }
          while (1)
          {
            v208 = *(std::__shared_weak_count **)(j - 16);
            if (!v208)
              goto LABEL_248;
            v209 = (unint64_t *)&v208->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
              v211 = *(std::__shared_weak_count **)(j - 32);
              if (!v211)
                goto LABEL_254;
            }
            else
            {
LABEL_248:
              v211 = *(std::__shared_weak_count **)(j - 32);
              if (!v211)
                goto LABEL_254;
            }
            v212 = (unint64_t *)&v211->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
LABEL_254:
            v214 = *(std::__shared_weak_count **)(j - 48);
            if (!v214)
              goto LABEL_258;
            v215 = (unint64_t *)&v214->__shared_owners_;
            do
              v216 = __ldaxr(v215);
            while (__stlxr(v216 - 1, v215));
            if (!v216)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
              v217 = *(std::__shared_weak_count **)(j - 64);
              if (!v217)
                goto LABEL_264;
            }
            else
            {
LABEL_258:
              v217 = *(std::__shared_weak_count **)(j - 64);
              if (!v217)
                goto LABEL_264;
            }
            v218 = (unint64_t *)&v217->__shared_owners_;
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
LABEL_264:
            v220 = *(std::__shared_weak_count **)(j - 112);
            if (!v220)
              goto LABEL_268;
            v221 = (unint64_t *)&v220->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
              v223 = *(std::__shared_weak_count **)(j - 128);
              if (v223)
              {
LABEL_269:
                v224 = (unint64_t *)&v223->__shared_owners_;
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
            }
            else
            {
LABEL_268:
              v223 = *(std::__shared_weak_count **)(j - 128);
              if (v223)
                goto LABEL_269;
            }
            j -= 136;
            if ((md::PolygonOverlayRenderable *)j == v15)
            {
              v207 = *v101;
              goto LABEL_276;
            }
          }
        case 4u:
          v226 = *((_QWORD *)v1463 + 1);
          v1535 = *((_QWORD *)v1463 + 2);
          if (v226 == v1535)
            goto LABEL_75;
          break;
        default:
          goto LABEL_75;
      }
LABEL_283:
      v15 = (md::PolygonOverlayRenderable *)*(id *)(v226 + 8);
      v1554 = v15;
      -[md::PolygonOverlayRenderable customTileProvider](v15, "customTileProvider");
      v227 = (void *)objc_claimAutoreleasedReturnValue();
      v1542 = v226;
      if (!v227)
        goto LABEL_370;
      v228 = (md::MaskingOverlayRenderable *)operator new();
      v229 = v228;
      *(_QWORD *)v228 = 0;
      *((_QWORD *)v228 + 1) = 0;
      *((_QWORD *)v228 + 2) = 0;
      v1601 = v228;
      v231 = *a7;
      v230 = a7[1];
      if (*a7 != v230)
      {
        while (*(_WORD *)v231 != 41)
        {
          v231 += 48;
          if (v231 == v230)
            goto LABEL_299;
        }
      }
      if (v231 == v230)
      {
LABEL_299:
        v1601 = 0;
        MEMORY[0x1A1AF4E00](v228, 0x20C40960023A9);
        goto LABEL_370;
      }
      -[md::PolygonOverlayRenderable replaceMapContentInRect](v15, "replaceMapContentInRect");
      v233 = v232;
      v235 = v234;
      v237 = v236;
      v239 = v238;
      if ((GEOMapRectIsNull() & 1) == 0)
      {
        v240 = *(double *)(MEMORY[0x1E0D266E8] + 16);
        v241 = v233 / v240;
        v242 = v1460;
        if (v1460 >= v233 / v240)
        {
          v240 = (v237 + v233) / v240;
          v241 = v1456;
          if (v1456 <= v240)
          {
            v243 = *(double *)(MEMORY[0x1E0D266E8] + 24);
            v241 = 1.0 - v235 / v243;
            v242 = v1455;
            _NF = v1455 < 1.0 - (v239 + v235) / v243;
            v240 = v1454;
            if (!_NF && v1454 <= v241)
            {
              v1548 = 1;
              v246 = *(_QWORD **)(v231 + 24);
              if (v246)
                goto LABEL_304;
LABEL_369:
              v299 = -[md::PolygonOverlayRenderable identifier](v15, "identifier", v240, v241, v242);
              v15 = (md::PolygonOverlayRenderable *)operator new(4uLL);
              *(_DWORD *)v15 = v299;
              v300 = operator new(0xA8uLL);
              v300[5] = 0u;
              v300[6] = 0u;
              v300[3] = 0u;
              v300[4] = 0u;
              v300[1] = 0u;
              v300[2] = 0u;
              *((_QWORD *)v300 + 14) = v229;
              *((_QWORD *)v300 + 15) = 0;
              *((_QWORD *)v300 + 16) = v15;
              *((_QWORD *)v300 + 17) = (char *)v15 + 4;
              *((_QWORD *)v300 + 18) = (char *)v15 + 4;
              *((_WORD *)v300 + 76) = 4;
              *((_QWORD *)v300 + 20) = 0;
              v301 = *a6;
              *(_QWORD *)v300 = *a6;
              *((_QWORD *)v300 + 1) = a6;
              *(_QWORD *)(v301 + 8) = v300;
              *a6 = (uint64_t)v300;
              ++a6[2];
              goto LABEL_370;
            }
          }
        }
      }
      v1548 = 0;
      v246 = *(_QWORD **)(v231 + 24);
      if (!v246)
        goto LABEL_369;
LABEL_304:
      while (1)
      {
        v247 = *(_DWORD *)(v246[3] + 12);
        if (v247 == objc_msgSend(v227, "providerID", v240, v241, v242))
          break;
LABEL_303:
        v246 = (_QWORD *)*v246;
        if (!v246)
        {
          v229 = v1601;
          if (v1601)
            goto LABEL_369;
LABEL_370:

          v226 = v1542 + 24;
          if (v1542 + 24 == v1535)
            goto LABEL_75;
          goto LABEL_283;
        }
      }
      v248 = (int32x2_t *)v246[3];
      v249 = v248[1].i32[0];
      LOBYTE(v1591[0]) = -1;
      BYTE1(v1591[0]) = v249;
      *(int32x2_t *)((char *)v1591 + 4) = vrev64_s32(*v248);
      v251 = (id *)v246[14];
      v250 = (md::PolygonOverlayRenderable *)v246[15];
      v1584[0] = (md::PolygonOverlayRenderable *)v251;
      v1584[1] = v250;
      if (v250)
      {
        v252 = (unint64_t *)((char *)v250 + 8);
        do
          v253 = __ldxr(v252);
        while (__stxr(v253 + 1, v252));
      }
      v254 = v251[19];
      v255 = -[md::PolygonOverlayRenderable estimatedCostForCustomTileData:](v15, "estimatedCostForCustomTileData:", v254);

      v256 = (md::PolygonOverlayRenderable *)operator new(0xE8uLL);
      *((_QWORD *)v256 + 1) = 0;
      *((_QWORD *)v256 + 2) = 0;
      *(_QWORD *)v256 = &off_1E42E2278;
      v257 = (md::PolygonOverlayRenderable *)ggl::BufferData::BufferData((uint64_t)v256 + 24, qword_1EE54ADE0, 2, 1, 6, 1);
      *((_QWORD *)v256 + 28) = ggl::Tile::View::reflection(void)::reflection;
      *((_QWORD *)v256 + 3) = &off_1E42B97B0;
      v1597[0] = v257;
      v1597[1] = v256;
      v258 = v1601;
      v259 = v251[19];
      if (v1554)
      {
        objc_msgSend(v1554, "customStyle");
      }
      else
      {
        v1571 = 0;
        v1570 = 0;
      }
      v260 = *((_QWORD *)v258 + 2);
      j = *((_QWORD *)v258 + 1);
      if (j < v260)
      {
        md::OverlayTileData::OverlayTileResource::CustomTile::CustomTile(j, (uint64_t)v1591, v259, v1597, a10, &v1570, v1465, v1548, v255);
        v261 = j + 136;
        *((_QWORD *)v258 + 1) = j + 136;
LABEL_350:
        *((_QWORD *)v258 + 1) = v261;
        v290 = (std::__shared_weak_count *)v1571;
        if (v1571)
        {
          v291 = (unint64_t *)((char *)v1571 + 8);
          do
            v292 = __ldaxr(v291);
          while (__stlxr(v292 - 1, v291));
          if (!v292)
          {
            ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
            std::__shared_weak_count::__release_weak(v290);
          }
        }

        v293 = (std::__shared_weak_count *)v1597[1];
        if (!v1597[1])
          goto LABEL_359;
        v294 = (unint64_t *)((char *)v1597[1] + 8);
        do
          v295 = __ldaxr(v294);
        while (__stlxr(v295 - 1, v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
          v296 = (std::__shared_weak_count *)v1584[1];
          if (v1584[1])
            goto LABEL_360;
        }
        else
        {
LABEL_359:
          v296 = (std::__shared_weak_count *)v1584[1];
          if (v1584[1])
          {
LABEL_360:
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
        }
        ++v1465;
        v15 = (md::PolygonOverlayRenderable *)v1554;
        goto LABEL_303;
      }
      v262 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(j - *(_QWORD *)v258) >> 3);
      v263 = v262 + 1;
      if (v262 + 1 > 0x1E1E1E1E1E1E1E1)
        abort();
      v264 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v260 - *(_QWORD *)v258) >> 3);
      if (2 * v264 > v263)
        v263 = 2 * v264;
      if (v264 >= 0xF0F0F0F0F0F0F0)
        v265 = 0x1E1E1E1E1E1E1E1;
      else
        v265 = v263;
      *(_QWORD *)&v1607 = (char *)v258 + 16;
      if (v265)
      {
        if (v265 > 0x1E1E1E1E1E1E1E1)
          goto LABEL_1767;
        v266 = (char *)operator new(136 * v265);
      }
      else
      {
        v266 = 0;
      }
      *(_QWORD *)&v1605 = v266;
      *((_QWORD *)&v1605 + 1) = &v266[136 * v262];
      *(_QWORD *)&v1606 = *((_QWORD *)&v1605 + 1);
      *((_QWORD *)&v1606 + 1) = &v266[136 * v265];
      md::OverlayTileData::OverlayTileResource::CustomTile::CustomTile(*((uint64_t *)&v1605 + 1), (uint64_t)v1591, v259, v1597, a10, &v1570, v1465, v1548, v255);
      v267 = *((_QWORD *)&v1605 + 1);
      v261 = v1606 + 136;
      *(_QWORD *)&v1606 = v1606 + 136;
      v268 = *(_QWORD *)v258;
      j = *((_QWORD *)v258 + 1);
      if (j == *(_QWORD *)v258)
      {
        *(_QWORD *)v258 = *((_QWORD *)&v1605 + 1);
        *((_QWORD *)v258 + 1) = v261;
        *((_QWORD *)v258 + 2) = *((_QWORD *)&v1606 + 1);
        if (!j)
          goto LABEL_350;
      }
      else
      {
        v269 = 0;
        do
        {
          *(_QWORD *)(v267 + v269 - 96) = 0;
          v270 = (id *)(v267 + v269 - 96);
          v272 = (void **)(j + v269 - 96);
          v271 = *v272;
          *((_WORD *)v270 - 20) = *(_WORD *)(j + v269 - 136);
          *(id *)((char *)v270 - 36) = *(id *)(j + v269 - 132);
          *(v270 - 2) = *(id *)(j + v269 - 112);
          *(v270 - 1) = &off_1E42B4A70;
          objc_storeStrong(v270, v271);
          v273 = *v272;
          *v272 = 0;

          v274 = v267 + v269;
          v275 = j + v269;
          *(_OWORD *)(v274 - 80) = *(_OWORD *)(j + v269 - 80);
          *(_QWORD *)(v275 - 80) = 0;
          *(_QWORD *)(v275 - 72) = 0;
          *(_OWORD *)(v274 - 64) = *(_OWORD *)(j + v269 - 64);
          *(_QWORD *)(v275 - 64) = 0;
          *(_QWORD *)(v275 - 56) = 0;
          *(_OWORD *)(v274 - 48) = *(_OWORD *)(j + v269 - 48);
          *(_QWORD *)(v275 - 48) = 0;
          *(_QWORD *)(v275 - 40) = 0;
          *(_OWORD *)(v274 - 32) = *(_OWORD *)(j + v269 - 32);
          *(_QWORD *)(v275 - 32) = 0;
          *(_QWORD *)(v275 - 24) = 0;
          *(_OWORD *)(v274 - 16) = *(_OWORD *)(j + v269 - 16);
          v269 -= 136;
        }
        while (j + v269 != v268);
        v276 = v267 + v269;
        j = *(_QWORD *)v258;
        v277 = *((_QWORD *)v258 + 1);
        *(_QWORD *)v258 = v276;
        *((_QWORD *)v258 + 1) = v261;
        for (*((_QWORD *)v258 + 2) = *((_QWORD *)&v1606 + 1); v277 != j; v277 -= 136)
        {
          v278 = *(std::__shared_weak_count **)(v277 - 24);
          if (!v278)
            goto LABEL_331;
          v279 = (unint64_t *)&v278->__shared_owners_;
          do
            v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
            v281 = *(std::__shared_weak_count **)(v277 - 40);
            if (!v281)
              goto LABEL_337;
          }
          else
          {
LABEL_331:
            v281 = *(std::__shared_weak_count **)(v277 - 40);
            if (!v281)
              goto LABEL_337;
          }
          v282 = (unint64_t *)&v281->__shared_owners_;
          do
            v283 = __ldaxr(v282);
          while (__stlxr(v283 - 1, v282));
          if (!v283)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
LABEL_337:
          v284 = *(std::__shared_weak_count **)(v277 - 56);
          if (!v284)
            goto LABEL_341;
          v285 = (unint64_t *)&v284->__shared_owners_;
          do
            v286 = __ldaxr(v285);
          while (__stlxr(v286 - 1, v285));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
            std::__shared_weak_count::__release_weak(v284);
            v287 = *(std::__shared_weak_count **)(v277 - 72);
            if (v287)
            {
LABEL_342:
              v288 = (unint64_t *)&v287->__shared_owners_;
              do
                v289 = __ldaxr(v288);
              while (__stlxr(v289 - 1, v288));
              if (!v289)
              {
                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                std::__shared_weak_count::__release_weak(v287);
              }
            }
          }
          else
          {
LABEL_341:
            v287 = *(std::__shared_weak_count **)(v277 - 72);
            if (v287)
              goto LABEL_342;
          }
          *(_QWORD *)(v277 - 104) = &off_1E42B4A70;

        }
        if (!j)
          goto LABEL_350;
      }
      operator delete((void *)j);
      goto LABEL_350;
    }
    v74 = (int8x8_t)a14[1];
    if (v74)
    {
      v75 = *v1463;
      v76 = (uint8x8_t)vcnt_s8(v74);
      v76.i16[0] = vaddlv_u8(v76);
      if (v76.u32[0] > 1uLL)
      {
        v77 = *v1463;
        if (*(_QWORD *)&v74 <= v75)
          v77 = v75 % *(_QWORD *)&v74;
      }
      else
      {
        v77 = (v74.i32[0] - 1) & v75;
      }
      v78 = *(uint64_t ****)(*a14 + 8 * v77);
      if (v78)
      {
        v79 = *v78;
        if (v79)
        {
          if (v76.u32[0] < 2uLL)
          {
            v80 = *(_QWORD *)&v74 - 1;
            while (1)
            {
              v82 = v79[1];
              if (v82 == (uint64_t *)v75)
              {
                if (*((unsigned __int8 *)v79 + 16) == (_DWORD)v75)
                  goto LABEL_98;
              }
              else if (((unint64_t)v82 & v80) != v77)
              {
                goto LABEL_75;
              }
              v79 = (uint64_t **)*v79;
              if (!v79)
                goto LABEL_75;
            }
          }
          do
          {
            v81 = (unint64_t)v79[1];
            if (v81 == v75)
            {
              if (*((unsigned __int8 *)v79 + 16) == (_DWORD)v75)
                goto LABEL_98;
            }
            else
            {
              if (v81 >= *(_QWORD *)&v74)
                v81 %= *(_QWORD *)&v74;
              if (v81 != v77)
                break;
            }
            v79 = (uint64_t **)*v79;
          }
          while (v79);
        }
      }
    }
LABEL_75:
    v73 = v1464;
    v1463 += 32;
    v69 = __p;
  }
  while (v1463 != v1464);
  if (!__p)
    goto LABEL_1757;
  do
  {
    v1441 = (void (***)(_QWORD))*((_QWORD *)v73 - 3);
    if (v1441)
    {
      v1442 = (void (***)(_QWORD))*((_QWORD *)v73 - 2);
      v1443 = (void *)*((_QWORD *)v73 - 3);
      if (v1442 != v1441)
      {
        v1444 = v73;
        v1445 = v1442 - 3;
        v1446 = v1442 - 3;
        do
        {
          v1447 = *v1446;
          v1446 -= 3;
          (*v1447)(v1445);
          _ZF = v1445 == v1441;
          v1445 = v1446;
        }
        while (!_ZF);
        v73 = v1444;
        v1443 = (void *)*((_QWORD *)v1444 - 3);
        v69 = __p;
      }
      *((_QWORD *)v73 - 2) = v1441;
      operator delete(v1443);
    }
    v73 -= 32;
  }
  while (v73 != (unsigned __int8 *)v69);
LABEL_1755:
  operator delete(v69);
LABEL_1757:

}

void sub_19FBB4140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  void *v66;
  unint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void (***v73)(_QWORD);
  void (***v74)(_QWORD);
  void *v75;
  uint64_t v76;
  void (***v77)(_QWORD);
  void (***v78)(_QWORD);
  void (**v79)(_QWORD);
  BOOL v80;

  operator delete(v66);
  std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::~unique_ptr[abi:nn180100]((void ***)&STACK[0x2D0]);
  _Block_object_dispose(&STACK[0x2E0], 8);
  v68 = STACK[0x310];
  STACK[0x310] = 0;
  if (v68)
    (*(void (**)(unint64_t))(*(_QWORD *)v68 + 8))(v68);
  if (STACK[0x318])
    operator delete((void *)STACK[0x318]);
  v69 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v69;
    operator delete(v69);
  }
  if (STACK[0x350])
    operator delete((void *)STACK[0x350]);
  _Block_object_dispose(&STACK[0x370], 8);
  std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node((_QWORD *)STACK[0x3B0]);
  v70 = (void *)STACK[0x3A0];
  STACK[0x3A0] = 0;
  if (v70)
    operator delete(v70);

  v71 = a50;
  if (a50)
  {
    while ((void *)a43 != v71)
    {
      v73 = *(void (****)(_QWORD))(a43 - 24);
      if (v73)
      {
        v74 = *(void (****)(_QWORD))(a43 - 16);
        v75 = *(void **)(a43 - 24);
        if (v74 != v73)
        {
          v76 = a43;
          v77 = v74 - 3;
          v78 = v74 - 3;
          do
          {
            v79 = *v78;
            v78 -= 3;
            (*v79)(v77);
            v80 = v77 == v73;
            v77 = v78;
          }
          while (!v80);
          a43 = v76;
          v75 = *(void **)(v76 - 24);
        }
        *(_QWORD *)(a43 - 16) = v73;
        operator delete(v75);
      }
      a43 -= 32;
      v71 = a50;
    }
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

void **std::vector<md::LabelClientTileOverlay>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            v8 = *((_QWORD *)v3 - 2);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v6 - 16) = v9;
                operator delete(v9);
              }
              v6 = v8;
            }
            while (v8 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v11 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v11)
          std::__shared_weak_count::__release_weak(v11);
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::OverlayTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::OverlayTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::OverlayTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::LabelClientTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelClientTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelClientTile>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v3 - 16);
          v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            v8 = *(_QWORD *)(v3 - 16);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v6 - 16) = v9;
                operator delete(v9);
              }
              v6 = v8;
            }
            while (v8 != v5);
            v7 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v7);
        }
        v11 = *(std::__shared_weak_count **)(v3 - 48);
        if (v11)
          std::__shared_weak_count::__release_weak(v11);
        v3 -= 56;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void generateTexture(_QWORD *a1, uint64_t *a2, void *a3)
{
  id v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  std::__shared_weak_count *v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  *a1 = 0;
  a1[1] = 0;
  v6 = *a2;
  if (!*a2)
    goto LABEL_40;
  v7 = (char *)operator new(0x58uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = &off_1E42B63B0;
  *(_QWORD *)v7 = &off_1E42DED18;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 4) = 0;
  *((_DWORD *)v7 + 14) = 0;
  *(_QWORD *)&v9 = 0x100000001;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)(v7 + 60) = v9;
  *(_QWORD *)(v7 + 76) = 0x100000001;
  *((_DWORD *)v7 + 21) = 0;
  v38[1] = v7 + 24;
  v39 = (std::__shared_weak_count *)v7;
  v10 = operator new(0xB0uLL);
  v11 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E42E53B0;
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *(_DWORD *)(v6 + 12);
  v10[13] = 0;
  *((_DWORD *)v10 + 14) = 0;
  v10[5] = 0;
  v10[6] = 0;
  v10[10] = 0x100000001;
  *((_DWORD *)v10 + 22) = 0;
  *((_DWORD *)v10 + 23) = v15;
  v10[12] = 0x100000001;
  v10[14] = 0;
  v10[15] = 0;
  v10[3] = &off_1E42BE438;
  v10[4] = 0;
  v10[8] = &unk_1E42BE458;
  v10[9] = "";
  *((_DWORD *)v10 + 32) = *(_DWORD *)(v6 + 8);
  v10[17] = v6;
  v10[18] = v12;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_WORD *)v10 + 76) = 0;
  *((_BYTE *)v10 + 154) = 1;
  v10[20] = v7 + 24;
  v10[21] = v7;
  do
    v18 = __ldxr(v8);
  while (__stxr(v18 + 1, v8));
  v10[13] = *(_QWORD *)(v6 + 16);
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = (std::__shared_weak_count *)a1[1];
  *a1 = v11 + 3;
  a1[1] = v11;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)objc_msgSend(v5, "gglDevice") + 24))(v38);
  v40[0] = &off_1E42C81B0;
  v40[1] = a1;
  v41 = v40;
  v36 = 0;
  v37 = 0;
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)v38[0] + 16))(v38[0], v40, &v36);
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v41;
  if (v41 == v40)
  {
    v28 = 4;
    v27 = v40;
    goto LABEL_29;
  }
  if (v41)
  {
    v28 = 5;
LABEL_29:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  if (v38[0])
  {
    v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38[0] + 24))(v38[0]);
    v30 = v38[0];
    v38[0] = 0;
    v40[0] = v30;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v40);
    v31 = v40[0];
    v40[0] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v38[0];
    v38[0] = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  v33 = v39;
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_40:

}

void sub_19FBB528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::__emplace_back_slow_path<std::unique_ptr<md::PolygonOverlayRenderable>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  md::PolygonOverlayRenderable *v25;
  md::PolygonOverlayRenderable *v26;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 <= 0x77
      || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    {
      goto LABEL_31;
    }
    v17 = (v16 >> 3) + 1;
    v18 = &v9[8 * v3 - 16];
    v19 = v15 - 32;
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v19 = 0uLL;
      *((_OWORD *)v19 + 1) = 0uLL;
      v19 -= 32;
      *((_OWORD *)v18 - 1) = v22;
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v20 -= 4;
    }
    while (v20);
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v23 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v23;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v24 != v15)
    {
      v26 = (md::PolygonOverlayRenderable *)*((_QWORD *)v24 - 1);
      v24 -= 8;
      v25 = v26;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v25);
        MEMORY[0x1A1AF4E00]();
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

md::PolygonOverlayRenderable **std::unique_ptr<md::PolygonOverlayRenderable>::~unique_ptr[abi:nn180100](md::PolygonOverlayRenderable **a1)
{
  md::PolygonOverlayRenderable *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData(md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *v9;
  uint64_t v10;
  md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*((_QWORD *)this + 2))
  {
    v8 = *(_QWORD *)this;
    v9 = (md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)*((_QWORD *)this + 1);
    v10 = *(_QWORD *)v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v8 + 8) = v10;
    *((_QWORD *)this + 2) = 0;
    if (v9 != this)
    {
      do
      {
        v11 = (md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)*((_QWORD *)v9 + 1);
        v12 = (std::__shared_weak_count *)*((_QWORD *)v9 + 3);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        v9 = v11;
      }
      while (v11 != this);
    }
  }
}

void md::MaskingOverlayMeshProcessor::~MaskingOverlayMeshProcessor(md::MaskingOverlayMeshProcessor *this)
{
  char *v2;
  char *v3;
  char *v4;

  v2 = (char *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 2);
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)(v3 - 96));
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }

}

uint64_t md::OverlayTileData::OverlayTileResource::CustomTile::CustomTile(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, char a8, uint64_t a9)
{
  id v16;
  id v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v16 = a3;
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = a7;
  v17 = v16;
  v18 = a4[1];
  *(_QWORD *)(a1 + 56) = *a4;
  *(_QWORD *)(a1 + 32) = &off_1E42B4A70;
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 64) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a5[1];
  *(_QWORD *)(a1 + 72) = *a5;
  *(_QWORD *)(a1 + 80) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = a6[1];
  *(_QWORD *)(a1 + 88) = *a6;
  *(_QWORD *)(a1 + 96) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = operator new(0xE8uLL);
  v27[1] = 0;
  v27[2] = 0;
  *v27 = &off_1E42E2B00;
  v28 = ggl::BufferData::BufferData((uint64_t)(v27 + 3), qword_1EE574B50, 2, 1, 6, 1);
  v27[28] = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
  v27[3] = &off_1E42B9DF0;
  *(_QWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 112) = v27;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_BYTE *)(a1 + 124) = a8;
  *(_QWORD *)(a1 + 128) = a9;
  v29 = v27[4];
  v30 = v27[11];
  *(_DWORD *)(v27[12] + 8) = 4;
  if (v30 > v29)
    v29 = v30;
  v27[10] = 0;
  v27[11] = v29;

  return a1;
}

void sub_19FBB579C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)(v1 + 32) = v6;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::OverlayTileData::OverlayTileResource::CustomTile>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(i - 136));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::QuadTile,unsigned long>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,unsigned long>>>::__emplace_unique_key_args<geo::QuadTile,std::piecewise_construct_t const&,std::tuple<geo::QuadTile const&>,std::tuple<>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v46;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  v13 = *((_QWORD *)a1 + 1);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13)
        v3 = v12 % v13;
    }
    else
    {
      v3 = v12 & (v13 - 1);
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(_QWORD *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return v16;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_25;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(_QWORD *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return v16;
            }
          }
          else
          {
            if (v17 >= v13)
              v17 %= v13;
            if (v17 != v3)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  v16 = operator new(0x30uLL);
  *v16 = 0;
  v16[1] = v12;
  *((_WORD *)v16 + 8) = *(_WORD *)a3;
  *(_QWORD *)((char *)v16 + 20) = *(_QWORD *)(a3 + 4);
  v16[5] = 0;
  v19 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v20 = a1[8];
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v13 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v13)
    {
      if (prime >= v13)
        goto LABEL_62;
      v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v13 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime >= v13)
      {
        v13 = *((_QWORD *)a1 + 1);
LABEL_62:
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13)
            v3 = v12 % v13;
          else
            v3 = v12;
        }
        else
        {
          v3 = (v13 - 1) & v12;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v46 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v46)
          operator delete(v46);
        v13 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v25 = operator new(8 * prime);
    v26 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v25;
    if (v26)
      operator delete(v26);
    v27 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
    while (prime != v27);
    v29 = (uint64_t *)(a1 + 4);
    v28 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v28)
    {
LABEL_61:
      v13 = prime;
      goto LABEL_62;
    }
    v30 = v28[1];
    v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v32 = v30 & v31;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v29;
      for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
      {
        v34 = i[1] & v31;
        if (v34 == v32)
        {
          v28 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
        {
          *v28 = *i;
          v35 = 8 * v34;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v35);
          **(_QWORD **)(*(_QWORD *)a1 + v35) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v28;
          v28 = i;
          v32 = v34;
        }
      }
      goto LABEL_61;
    }
    if (v30 >= prime)
      v30 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v29;
    v39 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_61;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= prime)
        v41 %= prime;
      if (v41 != v30)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v28;
          goto LABEL_66;
        }
        *v28 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
        **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
        v39 = v28;
      }
      v41 = v30;
LABEL_66:
      v28 = v39;
      v39 = (_QWORD *)*v39;
      v30 = v41;
      if (!v39)
        goto LABEL_61;
    }
  }
LABEL_75:
  v42 = *(_QWORD **)a1;
  v43 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v43)
  {
    *v16 = *v43;
LABEL_83:
    *v43 = v16;
    goto LABEL_84;
  }
  *v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v42[v3] = a1 + 4;
  if (*v16)
  {
    v44 = *(_QWORD *)(*v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v44 >= v13)
        v44 %= v13;
    }
    else
    {
      v44 &= v13 - 1;
    }
    v43 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_83;
  }
LABEL_84:
  ++*((_QWORD *)a1 + 3);
  return v16;
}

void sub_19FBB5D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::OverlayTileData::OverlayTileResource::RasterTile::RasterTile(uint64_t a1, __int16 *a2, _QWORD *a3, __int16 a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, char a10)
{
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  *(_QWORD *)a1 = a8;
  *(_QWORD *)(a1 + 8) = a9;
  if (a9)
  {
    v12 = (unint64_t *)(a9 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a2;
  *(_QWORD *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 2);
  *(_WORD *)(a1 + 56) = a4;
  v18 = a5[1];
  *(_QWORD *)(a1 + 72) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a6[1];
  *(_QWORD *)(a1 + 80) = *a6;
  *(_QWORD *)(a1 + 88) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = a7[1];
  *(_QWORD *)(a1 + 96) = *a7;
  *(_QWORD *)(a1 + 104) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = operator new(0xE8uLL);
  v27[1] = 0;
  v27[2] = 0;
  *v27 = &off_1E42E2B00;
  v28 = 1;
  v29 = ggl::BufferData::BufferData((uint64_t)(v27 + 3), qword_1EE574B50, 2, 1, 6, 1);
  v27[28] = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
  v27[3] = &off_1E42B9DF0;
  *(_QWORD *)(a1 + 112) = v29;
  *(_QWORD *)(a1 + 120) = v27;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_BYTE *)(a1 + 132) = a10;
  v30 = *(unsigned int *)(*a3 + 68);
  if (v30 <= 0x3A)
    v28 = dword_1A007BEAC[v30];
  v31 = v27[4];
  v32 = v27[11];
  *(_DWORD *)(v27[12] + 8) = v28;
  if (v32 > v31)
    v31 = v32;
  v27[10] = 0;
  v27[11] = v31;
  return a1;
}

void sub_19FBB5EC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::OverlayTileData::OverlayTileResource::RasterTile>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(i - 136));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C81F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C81F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19FBB6244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__23295(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__23296(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

void PolylineOverlayRibbonBuilder::addPolylineRibbonTo(uint64_t *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, double a9, double a10)
{
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  char v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  void (***v39)(_QWORD);
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  unsigned int v47;
  __int128 v48;
  BOOL v49;
  void (***v50)(_QWORD);

  v19 = a3;
  v20 = objc_msgSend(v19, "lineCap");
  v21 = objc_msgSend(v19, "lineJoin");
  v44 = a1;
  v45 = a5;
  if (v21 == 2)
    v22 = 2;
  else
    v22 = v21 == 1;
  v23 = (unint64_t)(objc_msgSend(v19, "lineCap") - 1) < 2;
  objc_msgSend(v19, "miterLimit");
  v25 = v24;
  v27 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v26 & 1) == 0)
  {
    v27 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v41)
    {
      v42 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v27 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 299) + 16))(*((_QWORD *)v27 + 299), 136, 8);
  v29 = v28;
  *(_OWORD *)(v28 + 49) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 8) = 0u;
  v30 = v25;
  *(_QWORD *)v28 = off_1E429B958;
  *(double *)(v28 + 104) = a9;
  *(double *)(v28 + 112) = a10;
  *(_BYTE *)(v28 + 120) = v23;
  *(_BYTE *)(v28 + 121) = v22;
  *(float *)(v28 + 124) = v30;
  *(_DWORD *)(v28 + 128) = 1043511491;
  v50 = (void (***)(_QWORD))v28;
  if (v20 == 1)
    v31 = 0;
  else
    v31 = a7;
  *(_BYTE *)(v28 + 96) = v31;
  if (v20 == 1)
    v32 = 0;
  else
    v32 = a8;
  *(_BYTE *)(v28 + 97) = v32;
  *(_QWORD *)(v28 + 80) = a6;
  *(_QWORD *)(v28 + 88) = a4;
  *(_QWORD *)(v28 + 72) = v45;
  v48 = 0uLL;
  v49 = 0;
  v47 = a2;
  objc_msgSend(v19, "style");
  v48 = v46;
  v49 = a6 != 0;
  v33 = std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PolylineOverlayBatchKey,std::piecewise_construct_t const&,std::tuple<md::PolylineOverlayBatchKey const&>,std::tuple<>>(v44, a2, a6 != 0, (uint64_t)&v47);
  v34 = v33;
  v35 = (uint64_t *)v33[7];
  if ((unint64_t)v35 >= v33[8])
  {
    v36 = std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>>((uint64_t)(v33 + 6), (uint64_t *)&v50);
  }
  else
  {
    if (v35)
    {
      v50 = 0;
      *v35 = v29;
    }
    v36 = v35 + 1;
  }
  v34[7] = v36;
  if (*((_QWORD *)&v46 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)())(**((_QWORD **)&v46 + 1) + 16))();
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  v39 = v50;
  v50 = 0;
  if (v39)
  {
    (**v39)(v39);
    {
      v43 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v39, 136);
  }

}

void sub_19FBB6638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va);
  std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))va1);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__67(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  char v18[4];
  uint64_t v19;
  char v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = *(_QWORD **)(a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (std::__shared_weak_count *)v7[1];
  v17[0] = *v7;
  v17[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD **)(a1 + 56);
  if (*(_BYTE *)(a1 + 88))
  {
    v13 = *(_QWORD *)(a1 + 68);
    *(_WORD *)v18 = *(_WORD *)(a1 + 64);
    v19 = v13;
    v20 = 1;
  }
  else
  {
    v18[0] = 0;
    v20 = 0;
  }
  md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::RibbonLayer(v5, a2, *(uint64_t **)(v8 + 64), (uint64_t)v17, v12, v18);
  *v6 = &off_1E429A408;
  v6[28] = 0;
  v14 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v6;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19FBB67DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10A1C4043A4375DLL);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__70(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke_71(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  char v18[4];
  uint64_t v19;
  char v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = *(_QWORD **)(a1 + 48);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (std::__shared_weak_count *)v7[1];
  v17[0] = *v7;
  v17[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(_QWORD **)(a1 + 56);
  if (*(_BYTE *)(a1 + 88))
  {
    v13 = *(_QWORD *)(a1 + 68);
    *(_WORD *)v18 = *(_WORD *)(a1 + 64);
    v19 = v13;
    v20 = 1;
  }
  else
  {
    v18[0] = 0;
    v20 = 0;
  }
  md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::RibbonLayer(v5, a2, *(uint64_t **)(v8 + 64), (uint64_t)v17, v12, v18);
  *v6 = &off_1E429A3E8;
  v6[28] = 0;
  v14 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = v6;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19FBB6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10A1C4043A4375DLL);
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c38_ZTSNSt3__18optionalIN3geo8QuadTileEEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    result = *(double *)(a2 + 68);
    *(double *)(a1 + 68) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void PolylineOverlayRibbonBuilder::finalizePolylineBatch(char *a1, char *a2, char **a3, _QWORD *a4, uint64_t a5, char **a6, char a7, char a8, double a9, double a10)
{
  _QWORD *v11;
  char **v12;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char **v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  void *v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  _DWORD *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  BOOL v122;
  unint64_t v123;
  unint64_t v124;
  char **v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  size_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  __int128 *v148;
  uint64_t v149;
  __int128 v150;
  int v151;
  char *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  __int128 *v159;
  _OWORD *v160;
  uint64_t v161;
  __int128 v162;
  int v163;
  char **v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  __int128 *v168;
  _OWORD *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  char *v173;
  size_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  __int128 v189;
  __int128 v190;
  char *v191;
  unint64_t v192;
  const float *v193;
  float *v194;
  uint64_t v195;
  char *v196;
  _QWORD *v197;
  char **v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v203;
  float32x4x2_t v204;

  v11 = a4;
  v12 = a3;
  v15 = (char *)*a4;
  v16 = a4[1];
  v17 = v16 - *a4;
  v18 = v17 >> 3;
  v19 = a2 - a1;
  v203 = v17 >> 3;
  if (a2 - a1 < 1)
    goto LABEL_82;
  v20 = a1;
  v21 = v19 >> 3;
  v22 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
  v23 = v11[2];
  if (v19 >> 3 <= (uint64_t)(v23 - v16) >> 3)
  {
    v32 = v16 - (_QWORD)v22;
    v33 = (uint64_t)(v16 - (_QWORD)v22) >> 3;
    if (v33 >= v21)
    {
      v34 = &a1[8 * v21];
      v37 = (_QWORD *)v16;
      goto LABEL_54;
    }
    v34 = &a1[8 * v33];
    if (v34 == a2)
    {
      v37 = (_QWORD *)v16;
      goto LABEL_53;
    }
    v35 = a2 - &a1[v32] - 8;
    if (v35 < 0x38)
    {
      v36 = &a1[8 * v33];
      v37 = (_QWORD *)v16;
    }
    else
    {
      v36 = &a1[8 * v33];
      v37 = (_QWORD *)v16;
      if ((unint64_t)(v22 - a1) >= 0x20)
      {
        v38 = (v35 >> 3) + 1;
        v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        v36 = &v34[v39];
        v40 = (_OWORD *)(v16 + 16);
        v41 = &a1[8 * v33 + 16];
        v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *v40 = v43;
          v40 += 2;
          v41 += 32;
          v42 -= 4;
        }
        while (v42);
        v37 = (_QWORD *)(v16 + v39);
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          v11[1] = v37;
          if (v32 < 1)
            goto LABEL_82;
LABEL_54:
          v80 = &v22[8 * v21];
          v81 = (char *)v37 - v80;
          v82 = (char *)&v37[-v21];
          v83 = v37;
          if ((unint64_t)v82 < v16)
          {
            v84 = (v17 & 0xFFFFFFFFFFFFFFF8) + v81;
            v85 = (unint64_t)&v15[v84 + 8];
            if (v16 > v85)
              v85 = v16;
            v86 = v85 + ~(unint64_t)v15 - v84;
            v87 = (char *)v37 - &v15[v84];
            v88 = v86 >= 0x58 && v87 > 0x1F;
            v89 = &v37[-v21];
            v83 = v37;
            if (!v88)
              goto LABEL_162;
            v90 = (v86 >> 3) + 1;
            v91 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            v89 = (uint64_t *)&v82[v91 * 8];
            v92 = v37 + 2;
            v93 = (__int128 *)&v15[8 * (v81 >> 3) + 16 + 8 * v18];
            v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *v93;
              *(v92 - 1) = *(v93 - 1);
              *v92 = v95;
              v92 += 2;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            v83 = &v37[v91];
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_162:
              do
              {
                v96 = *v89++;
                *v83++ = v96;
              }
              while ((unint64_t)v89 < v16);
            }
          }
          v11[1] = v83;
          if (v37 != (_QWORD *)v80)
          {
            if ((unint64_t)(v81 - 8) < 0x78
              || (char *)v37 - (v81 & 0xFFFFFFFFFFFFFFF8) < v82
              && &v15[v81 + (v17 & 0xFFFFFFFFFFFFFFF8) - (v81 & 0xFFFFFFFFFFFFFFF8)] < (char *)v37)
            {
              v97 = v37;
              goto LABEL_71;
            }
            v192 = ((unint64_t)(v81 - 8) >> 3) + 1;
            v97 = &v37[-(v192 & 0x3FFFFFFFFFFFFFFCLL)];
            v193 = (const float *)(v82 - 32);
            v194 = (float *)(v37 - 4);
            v195 = v192 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v204 = vld2q_f32(v193);
              v193 -= 8;
              vst2q_f32(v194, v204);
              v194 -= 8;
              v195 -= 4;
            }
            while (v195);
            if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v82 -= 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_71:
              v98 = (_DWORD *)v97 - 1;
              do
              {
                v99 = *((_DWORD *)v82 - 2);
                v82 -= 8;
                *(v98 - 1) = v99;
                *v98 = *((_DWORD *)v82 + 1);
                v98 -= 2;
              }
              while (v82 != v22);
            }
          }
          if (v34 == v20)
            goto LABEL_82;
          v100 = v34 - v20 - 8;
          if (v100 >= 0x78
            && (v22 >= &v20[(v100 & 0xFFFFFFFFFFFFFFF8) + 8]
             || &v15[(v17 & 0xFFFFFFFFFFFFFFF8) + 8 + (v100 & 0xFFFFFFFFFFFFFFF8)] <= v20))
          {
            v101 = (v100 >> 3) + 1;
            v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFF8);
            v22 += v102;
            v103 = (__int128 *)(v20 + 32);
            v104 = &v15[8 * v18 + 32];
            v105 = v101 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              v107 = *(v103 - 2);
              v106 = *(v103 - 1);
              v109 = *v103;
              v108 = v103[1];
              v103 += 4;
              *((_OWORD *)v104 - 2) = v107;
              *((_OWORD *)v104 - 1) = v106;
              *(_OWORD *)v104 = v109;
              *((_OWORD *)v104 + 1) = v108;
              v104 += 64;
              v105 -= 8;
            }
            while (v105);
            if (v101 == (v101 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_82;
            v20 += v102;
          }
          do
          {
            *(_DWORD *)v22 = *(_DWORD *)v20;
            *((_DWORD *)v22 + 1) = *((_DWORD *)v20 + 1);
            v20 += 8;
            v22 += 8;
          }
          while (v20 != v34);
          goto LABEL_82;
        }
      }
    }
    do
    {
      v79 = *(_QWORD *)v36;
      v36 += 8;
      *v37++ = v79;
    }
    while (v36 != a2);
    goto LABEL_53;
  }
  v24 = v18 + v21;
  if ((unint64_t)(v18 + v21) >> 61)
    goto LABEL_158;
  v25 = v23 - (_QWORD)v15;
  if (v25 >> 2 > v24)
    v24 = v25 >> 2;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
  {
    v197 = v11;
    if (v26 >> 61)
      goto LABEL_159;
    v27 = v15;
    v29 = a6;
    v30 = a5;
    v31 = operator new(8 * v26);
    v18 = v17 >> 3;
    a5 = v30;
    a6 = v29;
    v12 = a3;
    v15 = v27;
    v11 = v197;
    v21 = v19 >> 3;
  }
  else
  {
    v31 = 0;
  }
  v44 = &v31[8 * v18];
  v45 = &v44[8 * v21];
  v46 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v46 >= 7)
  {
    if ((unint64_t)(&v31[v17 & 0xFFFFFFFFFFFFFFF8] - v20) >= 0x20)
    {
      v48 = v15;
      v49 = v46 + 1;
      v50 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v47 = &v44[8 * v50];
      v51 = (__int128 *)(v20 + 16);
      v52 = &v31[8 * v18 + 16];
      v53 = v50;
      do
      {
        v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v49 == v50)
        goto LABEL_32;
      v20 += 8 * v50;
    }
    else
    {
      v47 = &v31[8 * v18];
    }
  }
  else
  {
    v47 = &v31[8 * v18];
  }
  do
  {
    v55 = *(_QWORD *)v20;
    v20 += 8;
    *(_QWORD *)v47 = v55;
    v47 += 8;
  }
  while (v47 != v45);
  v48 = (char *)*v11;
LABEL_32:
  if (v48 != v22)
  {
    v56 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
    v57 = v56 - v48 - 8;
    if (v57 < 0x68)
    {
      v58 = v22;
      goto LABEL_39;
    }
    v58 = v22;
    if ((unint64_t)(v56 - &v31[v17 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_163;
    v59 = (v57 >> 3) + 1;
    v58 = &v22[-8 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
    v60 = 8 * v18 - 16;
    v61 = (__int128 *)&v15[v60];
    v62 = &v31[v60];
    v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *v61;
      *(v62 - 1) = *(v61 - 1);
      *v62 = v64;
      v61 -= 2;
      v62 -= 2;
      v63 -= 4;
    }
    while (v63);
    v44 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_163:
      do
      {
LABEL_39:
        v65 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *((_QWORD *)v44 - 1) = v65;
        v44 -= 8;
      }
      while (v58 != v48);
      v16 = v11[1];
    }
  }
  v66 = &v31[8 * v26];
  if ((char *)v16 != v22)
  {
    v67 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
    v68 = v16 - (_QWORD)v67 - 8;
    if (v68 < 0x68)
      goto LABEL_164;
    if ((unint64_t)(&v31[(v17 & 0xFFFFFFFFFFFFFFF8) + v19] - v67) < 0x20)
      goto LABEL_164;
    v69 = (v68 >> 3) + 1;
    v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v22 += v70;
    v71 = &v31[8 * v18 + 16 + 8 * v21];
    v72 = (__int128 *)&v15[8 * v18 + 16];
    v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v74 = *v72;
      *(v71 - 1) = *(v72 - 1);
      *v71 = v74;
      v71 += 2;
      v72 += 2;
      v73 -= 4;
    }
    while (v73);
    v45 += v70;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_164:
      do
      {
        v75 = *(_QWORD *)v22;
        v22 += 8;
        *(_QWORD *)v45 = v75;
        v45 += 8;
      }
      while (v22 != (char *)v16);
    }
  }
  v76 = (void *)*v11;
  *v11 = v44;
  v11[1] = v45;
  v11[2] = v66;
  if (v76)
  {
    v77 = a6;
    v78 = a5;
    operator delete(v76);
    a5 = v78;
    a6 = v77;
    v18 = v17 >> 3;
  }
LABEL_82:
  if (!a5)
    goto LABEL_138;
  v111 = *v12;
  v110 = v12[1];
  v112 = v110 - *v12;
  if (v112 < 1)
    goto LABEL_138;
  v113 = v112 >> 2;
  v115 = *(_QWORD *)a5;
  v114 = *(char **)(a5 + 8);
  v116 = (uint64_t)&v114[-*(_QWORD *)a5];
  v117 = v116 >> 2;
  v118 = (char *)(*(_QWORD *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL));
  v119 = *(_QWORD *)(a5 + 16);
  if (v113 > (v119 - (uint64_t)v114) >> 2)
  {
    v120 = v117 + v113;
    if ((unint64_t)(v117 + v113) >> 62)
      goto LABEL_158;
    v121 = v119 - v115;
    if (v121 >> 1 > v120)
      v120 = v121 >> 1;
    v122 = (unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL;
    v123 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v122)
      v123 = v120;
    v199 = v123;
    if (v123)
    {
      if (v123 >> 62)
        goto LABEL_159;
      v124 = *(_QWORD *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL);
      v125 = a6;
      v126 = a5;
      v127 = operator new(4 * v123);
      a5 = v126;
      a6 = v125;
      v118 = (char *)v124;
      v117 = v116 >> 2;
    }
    else
    {
      v127 = 0;
    }
    v153 = &v127[4 * v117];
    v154 = &v153[4 * v113];
    v155 = (v113 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v155 >= 7)
    {
      v156 = &v127[4 * v117];
      if ((unint64_t)(&v127[v116 & 0xFFFFFFFFFFFFFFFCLL] - v111) >= 0x20)
      {
        v157 = v155 + 1;
        v158 = 4 * (v157 & 0x7FFFFFFFFFFFFFF8);
        v156 = &v153[v158];
        v159 = (__int128 *)(v111 + 16);
        v160 = &v127[4 * v117 + 16];
        v161 = v157 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v162 = *v159;
          *(v160 - 1) = *(v159 - 1);
          *v160 = v162;
          v159 += 2;
          v160 += 2;
          v161 -= 8;
        }
        while (v161);
        if (v157 == (v157 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          if ((char *)v115 == v114)
          {
            v164 = a6;
            goto LABEL_133;
          }
          v164 = a6;
          if ((unint64_t)(v116 - 4) >= 0x3C)
          {
            v165 = v118;
            if ((v116 & 0xFFFFFFFFFFFFFFFCLL) + v115 - (unint64_t)&v127[v116 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
            {
              v166 = ((unint64_t)(v116 - 4) >> 2) + 1;
              v165 = &v118[-4 * (v166 & 0x7FFFFFFFFFFFFFF8)];
              v167 = 4 * v117 - 16;
              v168 = (__int128 *)(v115 + v167);
              v169 = &v127[v167];
              v170 = v166 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v171 = *v168;
                *(v169 - 1) = *(v168 - 1);
                *v169 = v171;
                v168 -= 2;
                v169 -= 2;
                v170 -= 8;
              }
              while (v170);
              v153 -= 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
              if (v166 == (v166 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_133:
                v173 = &v127[4 * v199];
                v174 = v114 - v118;
                if (v174)
                {
                  v175 = a5;
                  memmove(v154, v118, v174);
                  a5 = v175;
                }
                *(_QWORD *)a5 = v153;
                *(_QWORD *)(a5 + 8) = &v154[v174];
                *(_QWORD *)(a5 + 16) = v173;
                v18 = v203;
                a6 = v164;
                if (v115)
                {
                  operator delete((void *)v115);
                  goto LABEL_137;
                }
                goto LABEL_138;
              }
            }
          }
          else
          {
            v165 = v118;
          }
          do
          {
            v172 = *((_DWORD *)v165 - 1);
            v165 -= 4;
            *((_DWORD *)v153 - 1) = v172;
            v153 -= 4;
          }
          while (v165 != (char *)v115);
          goto LABEL_133;
        }
        v111 += v158;
      }
    }
    else
    {
      v156 = &v127[4 * v117];
    }
    do
    {
      v163 = *(_DWORD *)v111;
      v111 += 4;
      *(_DWORD *)v156 = v163;
      v156 += 4;
    }
    while (v156 != v154);
    goto LABEL_124;
  }
  v128 = v114 - v118;
  v129 = (v114 - v118) >> 2;
  if (v129 >= v113)
  {
    v130 = &v111[4 * v113];
    v133 = *(char **)(a5 + 8);
  }
  else
  {
    v130 = &v111[4 * v129];
    v131 = v110 - v130;
    if (v110 != v130)
    {
      v198 = a6;
      v200 = *(_QWORD *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL);
      v132 = a5;
      v196 = &v111[4 * v129];
      memmove(*(void **)(a5 + 8), v196, v110 - v130);
      v117 = v116 >> 2;
      v118 = (char *)v200;
      a5 = v132;
      v130 = v196;
      a6 = v198;
      v18 = v203;
    }
    v133 = &v114[v131];
    *(_QWORD *)(a5 + 8) = &v114[v131];
    if (v128 < 1)
      goto LABEL_138;
  }
  v134 = &v118[4 * v113];
  v135 = v133 - v134;
  v136 = (v133 - v134) >> 2;
  v137 = &v133[-4 * v113];
  v138 = v133;
  if (v137 < v114)
  {
    v139 = (v116 & 0xFFFFFFFFFFFFFFFCLL) + v135;
    v140 = (char *)(v139 + v115);
    v141 = v139 + v115 + 4;
    if ((unint64_t)v114 > v141)
      v141 = (unint64_t)v114;
    v142 = v141 + ~v115 - v139;
    v143 = v133 - v140;
    v144 = v142 >= 0x2C && v143 > 0x1F;
    v138 = v133;
    if (!v144)
      goto LABEL_165;
    v145 = (v142 >> 2) + 1;
    v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
    v137 += v146;
    v147 = v133 + 16;
    v148 = (__int128 *)(4 * v136 + 4 * v117 + v115 + 16);
    v149 = v145 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v150 = *v148;
      *(v147 - 1) = *(v148 - 1);
      *v147 = v150;
      v147 += 2;
      v148 += 2;
      v149 -= 8;
    }
    while (v149);
    v138 = &v133[v146];
    if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_165:
      do
      {
        v151 = *(_DWORD *)v137;
        v137 += 4;
        *(_DWORD *)v138 = v151;
        v138 += 4;
      }
      while (v137 < v114);
    }
  }
  *(_QWORD *)(a5 + 8) = v138;
  if (v133 != v134)
  {
    v152 = v118;
    memmove(&v133[-4 * v136], v118, v135);
    v118 = v152;
  }
  v18 = v203;
  if (v130 != v111)
  {
    memmove(v118, v111, v130 - v111);
LABEL_137:
    v18 = v203;
  }
LABEL_138:
  v176 = ((uint64_t)(v11[1] - *v11) >> 3) - v18;
  v178 = a6[1];
  v177 = (unint64_t)a6[2];
  if ((unint64_t)v178 < v177)
  {
    *(_QWORD *)v178 = v18;
    *((_QWORD *)v178 + 1) = v176;
    v178[16] = a7;
    v178[17] = a8;
    *((double *)v178 + 3) = a9;
    *((double *)v178 + 4) = a10;
    v179 = v178 + 48;
    *((_DWORD *)v178 + 10) = 0;
    goto LABEL_153;
  }
  v180 = *a6;
  v181 = 0xAAAAAAAAAAAAAAABLL * ((v178 - *a6) >> 4);
  v182 = v181 + 1;
  if (v181 + 1 > 0x555555555555555)
LABEL_158:
    abort();
  v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - (_QWORD)v180) >> 4);
  if (2 * v183 > v182)
    v182 = 2 * v183;
  if (v183 >= 0x2AAAAAAAAAAAAAALL)
    v184 = 0x555555555555555;
  else
    v184 = v182;
  if (v184 > 0x555555555555555)
LABEL_159:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v185 = 48 * v184;
  v186 = (char *)operator new(48 * v184);
  v187 = &v186[48 * v181];
  *(_QWORD *)v187 = v203;
  *((_QWORD *)v187 + 1) = v176;
  v188 = &v186[v185];
  v187[16] = a7;
  v187[17] = a8;
  *((double *)v187 + 3) = a9;
  *((double *)v187 + 4) = a10;
  *((_DWORD *)v187 + 10) = 0;
  v179 = v187 + 48;
  if (v178 == v180)
  {
    v191 = &v186[48 * v181];
  }
  else
  {
    do
    {
      v189 = *((_OWORD *)v178 - 3);
      v190 = *((_OWORD *)v178 - 2);
      v191 = v187 - 48;
      *(_OWORD *)(v187 - 20) = *(_OWORD *)(v178 - 20);
      *((_OWORD *)v187 - 3) = v189;
      *((_OWORD *)v187 - 2) = v190;
      v178 -= 48;
      v187 -= 48;
    }
    while (v178 != v180);
  }
  *a6 = v191;
  a6[1] = v179;
  a6[2] = v188;
  if (v180)
    operator delete(v180);
LABEL_153:
  a6[1] = v179;
}

void std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C81B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C81B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19FBB75F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  __int128 v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  void *v50;

  v2 = (_QWORD *)a1[1];
  v3 = (uint64_t)v2 - *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 5) + 1;
  if (v4 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v7 = 0x2AAAAAAAAAAAAAALL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v8 = operator new(96 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * (v3 >> 5)];
  *v9 = *(_QWORD *)a2;
  v10 = v9 + 5;
  v9[1] = v9 + 5;
  v11 = *(char **)(a2 + 8);
  v13 = *(char **)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v9[3] = v9 + 5;
  v9[4] = v12;
  v14 = v9 + 2;
  if (v11 == v13)
  {
    v15 = *(char **)(a2 + 16);
    v16 = v15 - v11;
    *v14 = &v10[v15 - v11];
    if (v15 == v11)
      goto LABEL_28;
    if (v16 >= 8 && (unint64_t)(&v8[v3] - v11 + 40) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v17 = 0;
LABEL_22:
        v22 = v16 & 0xFFFFFFFFFFFFFFF8;
        v10 += v16 & 0xFFFFFFFFFFFFFFF8;
        v23 = v17 - (v16 & 0xFFFFFFFFFFFFFFF8);
        v24 = (uint64_t *)&v11[v17];
        v25 = &v8[32 * (v3 >> 5) + 40 + v17];
        do
        {
          v26 = *v24++;
          *v25++ = v26;
          v23 += 8;
        }
        while (v23);
        if (v16 == v22)
          goto LABEL_28;
        v11 += v22;
        goto LABEL_27;
      }
      v17 = v16 & 0xFFFFFFFFFFFFFFE0;
      v18 = (__int128 *)(v11 + 16);
      v19 = &v8[32 * (v3 >> 5) + 56];
      v20 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v16 == v17)
        goto LABEL_28;
      if ((v16 & 0x18) != 0)
        goto LABEL_22;
      v11 += v17;
      v10 += v17;
    }
    do
    {
LABEL_27:
      v27 = *v11++;
      *v10++ = v27;
    }
    while (v11 != v15);
    goto LABEL_28;
  }
  v9[1] = v11;
  *v14 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v2 = (_QWORD *)a1[1];
LABEL_28:
  v28 = &v8[96 * v7];
  v29 = &v8[32 * (v3 >> 5)];
  *((_QWORD *)v29 + 9) = *(_QWORD *)(a2 + 72);
  *((_OWORD *)v29 + 5) = *(_OWORD *)(a2 + 80);
  v30 = v9 + 12;
  v31 = (_QWORD *)*a1;
  if (v2 == (_QWORD *)*a1)
  {
    *a1 = v9;
    a1[1] = v30;
    a1[2] = v28;
    goto LABEL_55;
  }
  v32 = 0;
  v33 = (uint64_t)&v8[v3 - 56];
  v34 = v2;
  do
  {
    v36 = v9;
    v37 = *(v34 - 12);
    v34 -= 12;
    *(v9 - 12) = v37;
    v9 -= 12;
    v38 = v9 + 5;
    v9[1] = v9 + 5;
    v39 = (char *)*(v2 - 11);
    v9[2] = v9 + 5;
    v9[3] = v9 + 5;
    v40 = (char *)*(v2 - 9);
    v9[4] = *(v2 - 8);
    if (v39 != v40)
    {
      v35 = *(v2 - 10);
      *(v36 - 11) = v39;
      *(v36 - 10) = v35;
      *(_OWORD *)(v2 - 11) = 0uLL;
      *(_OWORD *)(v2 - 9) = 0uLL;
      goto LABEL_31;
    }
    *(v36 - 10) = &v38[*(v2 - 10) - (_QWORD)v39];
    v41 = (char *)*(v2 - 10);
    if (v39 != v41)
    {
      v42 = v41 - v39;
      if ((unint64_t)(v41 - v39) < 8 || (unint64_t)(v33 - 96 * v32 - (_QWORD)v39) < 0x20)
        goto LABEL_47;
      if (v42 >= 0x20)
      {
        v44 = 0;
        v43 = v42 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v45 = &v36[v44 / 8];
          v46 = *(_OWORD *)&v39[v44 + 16];
          *(_OWORD *)(v45 - 7) = *(_OWORD *)&v39[v44];
          *(_OWORD *)(v45 - 5) = v46;
          v44 += 32;
        }
        while (v43 != v44);
        if (v42 == v43)
          goto LABEL_31;
        if ((v42 & 0x18) == 0)
        {
          v39 += v43;
          v38 += v43;
          do
          {
LABEL_47:
            v48 = *v39++;
            *v38++ = v48;
          }
          while (v39 != v41);
          goto LABEL_31;
        }
      }
      else
      {
        v43 = 0;
      }
      v47 = v42 & 0xFFFFFFFFFFFFFFF8;
      v38 += v42 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(_QWORD *)((char *)v36 + v43 - 56) = *(_QWORD *)&v39[v43];
        v43 += 8;
      }
      while (v47 != v43);
      if (v42 != v47)
      {
        v39 += v47;
        goto LABEL_47;
      }
    }
LABEL_31:
    *(v36 - 3) = *(v2 - 3);
    *((_OWORD *)v36 - 1) = *((_OWORD *)v2 - 1);
    ++v32;
    v2 = v34;
  }
  while (v34 != v31);
  v2 = (_QWORD *)*a1;
  v49 = (_QWORD *)a1[1];
  *a1 = v9;
  a1[1] = v30;
  a1[2] = v28;
  while (v49 != v2)
  {
    v50 = (void *)*(v49 - 11);
    if (v50 != (void *)*(v49 - 9))
      free(v50);
    v49 -= 12;
  }
LABEL_55:
  if (v2)
    operator delete(v2);
  return v30;
}

void sub_19FBB7C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 704));
  _Unwind_Resume(a1);
}

void sub_19FBB7CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  uint64_t v20;

  v16 = a13;
  if (a13 == &a10)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  *(_QWORD *)(v13 + 896) = &off_1E42B52D0;

  v18 = *(std::__shared_weak_count **)(v13 + 888);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  v19 = *(_QWORD **)(v13 + 872);
  if (v19 == (_QWORD *)(v13 + 848))
  {
    v20 = 4;
    v19 = (_QWORD *)(v13 + 848);
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_13:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 + 832);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 + 808);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 + 792);
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)(v13 + 744));
  gdc::FallbackCollector::~FallbackCollector((gdc::FallbackCollector *)(v13 + 640));
  *(_QWORD *)(v13 + 600) = &off_1E42B4D50;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v14);
  gdc::LayerDataSource::~LayerDataSource((gdc::LayerDataSource *)v13);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<OverlayLayerDataSourceRenderTargetSizeObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52D0;

  return a1;
}

void geo::_retain_ptr<OverlayLayerDataSourceRenderTargetSizeObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B52D0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D0FB8;
  return result;
}

void std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0FB8;
}

void std::__shared_ptr_pointer<md::RasterTileOverlayStyle *,std::shared_ptr<md::RasterTileOverlayStyle>::__shared_ptr_default_delete<md::RasterTileOverlayStyle,md::RasterTileOverlayStyle>,std::allocator<md::RasterTileOverlayStyle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RasterTileOverlayStyle *,std::shared_ptr<md::RasterTileOverlayStyle>::__shared_ptr_default_delete<md::RasterTileOverlayStyle,md::RasterTileOverlayStyle>,std::allocator<md::RasterTileOverlayStyle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

void std::__shared_ptr_pointer<md::CallbackHolder<md::OverlayLayerDataSource> *,std::shared_ptr<md::CallbackHolder<md::OverlayLayerDataSource>>::__shared_ptr_default_delete<md::CallbackHolder<md::OverlayLayerDataSource>,md::CallbackHolder<md::OverlayLayerDataSource>>,std::allocator<md::CallbackHolder<md::OverlayLayerDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_pointer<md::CallbackHolder<md::OverlayLayerDataSource> *,std::shared_ptr<md::CallbackHolder<md::OverlayLayerDataSource>>::__shared_ptr_default_delete<md::CallbackHolder<md::OverlayLayerDataSource>,md::CallbackHolder<md::OverlayLayerDataSource>>,std::allocator<md::CallbackHolder<md::OverlayLayerDataSource>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    *result = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t md::OverlayLayerDataSource::OverlayLayerDataSource(uint64_t a1, void *a2, __int16 a3, uint64_t a4, void *a5, uint64_t a6, _QWORD *a7, uint64_t a8, float a9, char a10)
{
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  OverlayLayerDataSourceRenderTargetSizeObserver *v32;
  id v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v34 = a5;
  v19 = *(_QWORD *)(*a7 + 40);
  v20 = operator new();
  *(_QWORD *)v20 = &off_1E42B46F8;
  *(_QWORD *)(v20 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(v20 + 16) = 850045863;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 81) = 0u;
  *(_QWORD *)(v20 + 80) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  *(_QWORD *)a1 = off_1E42B0758;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a8;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 850045863;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = v20;
  *(_QWORD *)(a1 + 376) = 850045863;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 480) = 850045863;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  v35[0] = &off_1E42D5848;
  v35[1] = a1;
  v36 = v35;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 16))(v20, v35);
  v21 = v36;
  if (v36 == v35)
  {
    v22 = 4;
    v21 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_6:
  v24 = *a7;
  v23 = a7[1];
  *(_QWORD *)a1 = &off_1E429D718;
  *(_QWORD *)(a1 + 584) = v24;
  *(_QWORD *)(a1 + 592) = v23;
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v34;
  *(_QWORD *)(a1 + 600) = &off_1E42B4D50;
  *(_QWORD *)(a1 + 608) = v27;
  *(float *)(a1 + 624) = a9;
  *(_BYTE *)(a1 + 628) = a10;
  *(_QWORD *)(a1 + 632) = a6;
  *(_BYTE *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = a1 + 672;
  *(_WORD *)(a1 + 688) = a3;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = a1 + 704;
  *(_OWORD *)(a1 + 720) = xmmword_19FFB3820;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0;
  v28 = operator new();
  *(_DWORD *)(v28 + 8) = 0;
  *(_QWORD *)v28 = a1;
  *(_QWORD *)(a1 + 792) = v28;
  v29 = (_QWORD *)operator new();
  *v29 = &off_1E42E6CA0;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v28;
  *(_QWORD *)(a1 + 800) = v29;
  v30 = (_QWORD *)operator new();
  *v30 = 1065353216;
  *(_QWORD *)(a1 + 808) = v30;
  v31 = (_QWORD *)operator new();
  *v31 = &off_1E42E7090;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = v30;
  *(_QWORD *)(a1 + 816) = v31;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  v32 = objc_alloc_init(OverlayLayerDataSourceRenderTargetSizeObserver);
  *(_QWORD *)(a1 + 896) = &off_1E42B52D0;
  *(_QWORD *)(a1 + 904) = v32;
  NSSelectorFromString((NSString *)CFSTR("addSizeObserver:"));
  if (v18 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v18, "addSizeObserver:", *(_QWORD *)(a1 + 904));
  *(_BYTE *)(a1 + 296) = 1;

  return a1;
}

void sub_19FBB82BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  *(_QWORD *)(v10 + 896) = v11;

  v14 = (_QWORD **)(v10 + 872);
  v15 = *(std::__shared_weak_count **)(v10 + 888);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v16 = *v14;
  if (*v14 == (_QWORD *)(v10 + 848))
  {
    v17 = 4;
    v16 = (_QWORD *)(v10 + 848);
  }
  else
  {
    if (!v16)
    {
LABEL_8:
      v18 = *(std::__shared_weak_count **)(v10 + 840);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v10 + 816);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = *(std::__shared_weak_count **)(v10 + 800);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = *(void **)(v10 + 768);
      if (v27)
      {
        *(_QWORD *)(v10 + 776) = v27;
        operator delete(v27);
      }
      v28 = *(void **)(v10 + 744);
      if (v28)
      {
        *(_QWORD *)(v10 + 752) = v28;
        operator delete(v28);
      }
      geo::Pool<gdc::FallbackNode>::disposeElements(v10 + 696);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v10 + 704));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v10 + 672));
      if (*(_BYTE *)(v10 + 640))
        *(_BYTE *)(v10 + 640) = 0;
      *(_QWORD *)(v10 + 600) = v12;

      v29 = *(std::__shared_weak_count **)(v10 + 592);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      gdc::LayerDataSource::~LayerDataSource((gdc::LayerDataSource *)v10);

      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
  goto LABEL_8;
}

void md::OverlayLayerDataSource::conditionalInvalidate(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, uint64_t a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  void *v32;
  void *__p;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 792);
  v11 = *(std::__shared_weak_count **)(a1 + 800);
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = **(id **)(a1 + 584);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke;
  v26[3] = &__block_descriptor_161_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE_e5_v8__0l;
  v26[4] = a1;
  v26[5] = v10;
  v27 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v28;
  v18 = a2[3];
  if (!v18)
    goto LABEL_10;
  if ((_QWORD *)v18 != a2)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_10:
    v29 = (_BYTE *)v18;
    goto LABEL_12;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v28);
LABEL_12:
  v19 = v30;
  v20 = a3[3];
  if (!v20)
  {
LABEL_15:
    v31 = (_BYTE *)v20;
    goto LABEL_17;
  }
  if ((_QWORD *)v20 != a3)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    goto LABEL_15;
  }
  v31 = v30;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v30);
LABEL_17:
  v34 = a4;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v32, a5);
  dispatch_async(v14, v26);

  v21 = __p;
  if (__p)
  {
    do
    {
      v22 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = v32;
  v32 = 0;
  if (v23)
    operator delete(v23);
  if (v31 == v30)
  {
    v24 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_26;
    v24 = 5;
    v19 = v31;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v24))(v19);
LABEL_26:
  if (v29 == v28)
  {
    v25 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_31;
    v25 = 5;
    v17 = v29;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v25))(v17);
LABEL_31:
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_19FBB8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__shared_weak_count *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v27;

  if (a19 == v24)
  {
    v27 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v27 = 5;
    v24 = a19;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_6:
  if (a15)
    std::__shared_weak_count::__release_weak(a15);

  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  char v35;
  void *v36[2];
  void *__p;
  _BYTE v38[24];
  _BYTE *v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(os_unfair_lock_s **)(a1 + 40);
      if (!v6)
        goto LABEL_50;
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 584) + 8);
      v40[0] = &off_1E42D9F80;
      v41 = v40;
      geo::TaskQueue::barrierSync(v7, v40);
      v9 = v41;
      if (v41 == v40)
      {
        v10 = 4;
        v9 = v40;
      }
      else
      {
        if (!v41)
          goto LABEL_9;
        v10 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v9 + 8 * v10))(v9, v8);
LABEL_9:
      v11 = *(_QWORD *)(a1 + 80);
      if (v11)
      {
        if (v11 == a1 + 56)
        {
          v32 = v31;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, v31);
LABEL_14:
          v12 = v33;
          v13 = *(_QWORD *)(a1 + 112);
          if (v13)
          {
            if (v13 == a1 + 88)
            {
              v34 = v33;
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 24))(v13, v33);
LABEL_19:
              v35 = *(_BYTE *)(a1 + 160);
              std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v36, a1 + 120);
              v39 = 0;
              v15 = operator new(0x78uLL);
              *v15 = &off_1E42D9FC8;
              v16 = (char *)(v15 + 1);
              v17 = (uint64_t)v32;
              if (v32)
              {
                if (v32 == v31)
                {
                  v15[4] = v16;
                  (*(void (**)(_QWORD *, char *))(v31[0] + 24))(v31, v16);
LABEL_24:
                  v18 = (uint64_t)v34;
                  if (v34)
                  {
                    if (v34 == v33)
                    {
                      v15[8] = v15 + 5;
                      (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v15 + 5);
LABEL_29:
                      *((_BYTE *)v15 + 72) = v35;
                      std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v15 + 10), (uint64_t)v36);
                      v39 = v15;
                      os_unfair_lock_lock(v6 + 2);
                      if (*(_QWORD *)&v6->_os_unfair_lock_opaque)
                      {
                        v30 = *(_QWORD *)&v6->_os_unfair_lock_opaque;
                        (*(void (**)(_QWORD *, uint64_t *))(*v15 + 48))(v15, &v30);
                      }
                      os_unfair_lock_unlock(v6 + 2);
                      v20 = v39;
                      if (v39 == v38)
                      {
                        v21 = 4;
                        v20 = v38;
                      }
                      else
                      {
                        if (!v39)
                          goto LABEL_36;
                        v21 = 5;
                      }
                      (*(void (**)(_QWORD *, uint64_t))(*v20 + 8 * v21))(v20, v19);
LABEL_36:
                      v22 = __p;
                      if (__p)
                      {
                        do
                        {
                          v23 = (_QWORD *)*v22;
                          operator delete(v22);
                          v22 = v23;
                        }
                        while (v23);
                      }
                      v24 = v36[0];
                      v36[0] = 0;
                      if (v24)
                        operator delete(v24);
                      if (v34 == v33)
                      {
                        v25 = 4;
                      }
                      else
                      {
                        if (!v34)
                          goto LABEL_45;
                        v25 = 5;
                        v12 = v34;
                      }
                      (*(void (**)(_QWORD *))(*v12 + 8 * v25))(v12);
LABEL_45:
                      v26 = v32;
                      if (v32 == v31)
                      {
                        v27 = 4;
                        v26 = v31;
                      }
                      else
                      {
                        if (!v32)
                          goto LABEL_50;
                        v27 = 5;
                      }
                      (*(void (**)(_QWORD *, uint64_t))(*v26 + 8 * v27))(v26, v19);
LABEL_50:
                      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
                      do
                        v29 = __ldaxr(p_shared_owners);
                      while (__stlxr(v29 - 1, p_shared_owners));
                      if (!v29)
                      {
                        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                        std::__shared_weak_count::__release_weak(v5);
                      }
                      return;
                    }
                    v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v34 + 16))(v34, v14);
                  }
                  v15[8] = v18;
                  goto LABEL_29;
                }
                v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v32 + 16))(v32, v14);
              }
              v15[4] = v17;
              goto LABEL_24;
            }
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          }
          v34 = (_QWORD *)v13;
          goto LABEL_19;
        }
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      }
      v32 = (_QWORD *)v11;
      goto LABEL_14;
    }
  }
}

void sub_19FBB8B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  os_unfair_lock_s *v29;
  char *v31;
  uint64_t v32;

  os_unfair_lock_unlock(v29);
  v31 = a29;
  if (a29 == &a26)
  {
    v32 = 4;
    v31 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _ZZZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb_EN3__2D1Ev(&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 7;
  v8 = a2[10];
  if (!v8)
    goto LABEL_7;
  if ((_QWORD *)v8 != a2 + 7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_7:
    a1[10] = v8;
    goto LABEL_9;
  }
  a1[10] = v7;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[10] + 24))(a2[10], a1 + 7);
LABEL_9:
  v9 = a2[14];
  if (v9)
  {
    if ((_QWORD *)v9 == a2 + 11)
    {
      a1[14] = a1 + 11;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[14] + 24))(a2[14], a1 + 11);
      return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  a1[14] = v9;
  return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
}

void sub_19FBB8D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v4 = *(_QWORD **)(v1 + 80);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
    {
      v6 = *(std::__shared_weak_count **)(v1 + 48);
      if (v6)
        goto LABEL_8;
      goto LABEL_5;
    }
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 80);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
  v6 = *(std::__shared_weak_count **)(v1 + 48);
  if (v6)
  {
LABEL_8:
    std::__shared_weak_count::__release_weak(v6);
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[15];
  a1[15] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[14];
  if (v5 == a1 + 11)
  {
    v6 = 4;
    v5 = a1 + 11;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (_QWORD *)a1[10];
  if (v7 == a1 + 7)
  {
    v8 = 4;
    v7 = a1 + 7;
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v9 = (std::__shared_weak_count *)a1[6];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *_ZZZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb_EN3__2D1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_QWORD *)a1[11];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[9];
  a1[9] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_14;
  }
  if (v7)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E42D9FC8;
  v2 = (_QWORD *)a1[12];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_14;
  }
  if (v7)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EED0Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E42D9FC8;
  v2 = (_QWORD *)a1[12];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x78uLL);
  *v2 = &off_1E42D9FC8;
  _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19FBB913C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9FC8;
  return _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7destroyEv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v2 = (_QWORD *)a1[12];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  result = (_QWORD *)a1[4];
  if (result == a1 + 1)
  {
    v8 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE18destroy_deallocateEv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (_QWORD *)__p[12];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[10];
  __p[10] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)__p[8];
  if (v5 == __p + 5)
  {
    v6 = 4;
    v5 = __p + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (_QWORD *)__p[4];
  if (v7 == __p + 1)
  {
    v8 = 4;
    v7 = __p + 1;
    goto LABEL_14;
  }
  if (v7)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EEclEOSN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  md::OverlayTileData *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  char v14;
  md::OverlayTileData **v15;
  md::OverlayTileData *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  _BYTE *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  md::OverlayTileData **v26;
  md::OverlayTileData **v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  md::OverlayTileData *v35;
  unint64_t *v36;
  unint64_t v37;
  const gdc::LayerDataRequestKey *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *shared_owners;
  md::OverlayTileData **v53;
  md::OverlayTileData **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _BYTE *v58;
  _BYTE *i;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *result;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::__shared_weak_count *v68;
  md::OverlayTileData *v69[2];
  void *__p;
  void *v71;
  md::OverlayTileData **v72;
  unint64_t v73;
  void *v74;
  _BYTE *v75;
  unint64_t v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = a1 + 8;
    if (v4 == a1 + 8)
    {
      v80 = v79;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v79);
    }
    else
    {
      v80 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v80 = 0;
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    goto LABEL_9;
  if (v6 != a1 + 40)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_9:
    v78 = (_BYTE *)v6;
    goto LABEL_11;
  }
  v78 = v77;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v77);
LABEL_11:
  v7 = *(unsigned __int8 *)(a1 + 72);
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v3);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  if (v9 == v8)
    goto LABEL_50;
  do
  {
    v10 = *(md::OverlayTileData **)(v9 + 136);
    v69[0] = *(md::OverlayTileData **)(v9 + 128);
    v69[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)((char *)v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (!v80)
    {
LABEL_129:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_131;
    }
    if (!(*(unsigned int (**)(_BYTE *, md::OverlayTileData **))(*(_QWORD *)v80 + 48))(v80, v69))
      goto LABEL_40;
    gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v3, (const gdc::LayerDataRequestKey *)(v9 + 16));
    if (!v78)
      goto LABEL_129;
    v13 = (*(uint64_t (**)(_BYTE *, md::OverlayTileData **))(*(_QWORD *)v78 + 48))(v78, v69);
    if (v7)
      v14 = v13;
    else
      v14 = 1;
    if ((v14 & 1) != 0 || !md::OverlayTileData::hasTileData(v69[0]))
    {
      if (!v78)
        goto LABEL_129;
      if (!(*(unsigned int (**)(_BYTE *, md::OverlayTileData **))(*(_QWORD *)v78 + 48))(v78, v69))
      {
        *((_QWORD *)v69[0] + 19) = 1;
        v21 = (std::__shared_weak_count *)v69[1];
        if (!v69[1])
          goto LABEL_13;
        goto LABEL_41;
      }
      v20 = v75;
      if ((unint64_t)v75 >= v76)
      {
        v75 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v74, v9 + 16);
LABEL_40:
        v21 = (std::__shared_weak_count *)v69[1];
        if (!v69[1])
          goto LABEL_13;
LABEL_41:
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_13;
      }
      *v75 = *(_BYTE *)(v9 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v20 + 8), v9 + 24);
      v20[96] = 0;
      if (*(_BYTE *)(v9 + 112))
      {
        *((_DWORD *)v20 + 25) = *(_DWORD *)(v9 + 116);
        v20[96] = 1;
      }
      *((_QWORD *)v20 + 13) = *(_QWORD *)(v9 + 120);
      v75 = v20 + 112;
      v21 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
        goto LABEL_41;
    }
    else
    {
      v15 = v72;
      if ((unint64_t)v72 >= v73)
      {
        v19 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v71, *(__n128 *)v69);
      }
      else
      {
        *v72 = v69[0];
        v16 = v69[1];
        v15[1] = v69[1];
        if (v16)
        {
          v17 = (unint64_t *)((char *)v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = (__n128 *)(v15 + 2);
      }
      v72 = (md::OverlayTileData **)v19;
      v21 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
        goto LABEL_41;
    }
LABEL_13:
    v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9 != v8);
  v24 = (unsigned __int8 *)v74;
  v25 = v75;
  if (v74 != v75)
  {
    do
    {
      gdc::LayerDataStore::remove(*(_QWORD **)(v3 + 16), v24);
      v24 += 112;
    }
    while (v24 != v25);
  }
LABEL_50:
  if (v7)
  {
    v26 = (md::OverlayTileData **)v71;
    v27 = v72;
    if (v71 != v72)
    {
      v28 = a1 + 80;
      do
      {
        v30 = (uint64_t)*v26;
        v29 = (std::__shared_weak_count *)v26[1];
        v67 = *v26;
        v68 = v29;
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v69, v28);
        md::OverlayLayerDataSource::_updateNonTileOverlays(v3, v30, v29, (uint64_t)v69);
        v33 = __p;
        if (__p)
        {
          do
          {
            v34 = (_QWORD *)*v33;
            operator delete(v33);
            v33 = v34;
          }
          while (v34);
        }
        v35 = v69[0];
        v69[0] = 0;
        if (v35)
          operator delete(v35);
        if (v29)
        {
          v36 = (unint64_t *)&v29->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v26 += 2;
      }
      while (v26 != v27);
    }
  }
  gdc::LayerDataStore::pending((gdc::LayerDataStore *)&v67, *(_QWORD *)(v3 + 16));
  v38 = (const gdc::LayerDataRequestKey *)v67;
  v39 = v68;
  if (v67 != v68)
  {
    while (1)
    {
      v40 = (std::__shared_weak_count *)*((_QWORD *)v38 + 15);
      v65 = *((_QWORD *)v38 + 14);
      v66 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      if (!v80)
        break;
      if ((*(unsigned int (**)(_BYTE *, uint64_t *))(*(_QWORD *)v80 + 48))(v80, &v65))
      {
        gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v3, v38);
        *(_QWORD *)(v65 + 152) = 1;
      }
      v43 = v66;
      if (v66)
      {
        v44 = (unint64_t *)&v66->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v38 = (const gdc::LayerDataRequestKey *)((char *)v38 + 128);
      if (v38 == (const gdc::LayerDataRequestKey *)v39)
        goto LABEL_80;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_131:
    __break(1u);
  }
LABEL_80:
  std::mutex::lock((std::mutex *)(v3 + 376));
  v46 = *(_QWORD *)(v3 + 464);
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 48))(v46);
  std::mutex::unlock((std::mutex *)(v3 + 376));
  v47 = (std::__shared_weak_count *)v67;
  if (v67)
  {
    v48 = v68;
    if (v68 == v67)
    {
LABEL_97:
      operator delete(v47);
      goto LABEL_98;
    }
    while (2)
    {
      shared_weak_owners = (std::__shared_weak_count *)v48[-1].__shared_weak_owners_;
      if (!shared_weak_owners)
        goto LABEL_134;
      v50 = (unint64_t *)&shared_weak_owners->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
        std::__shared_weak_count::__release_weak(shared_weak_owners);
        if (LOBYTE(v48[-2].__shared_weak_owners_))
LABEL_91:
          LOBYTE(v48[-2].__shared_weak_owners_) = 0;
      }
      else
      {
LABEL_134:
        if (LOBYTE(v48[-2].__shared_weak_owners_))
          goto LABEL_91;
      }
      shared_owners = (std::__shared_weak_count_vtbl *)v48[-5].__shared_owners_;
      if (shared_owners != v48[-4].__vftable)
        free(shared_owners);
      v48 = (std::__shared_weak_count *)((char *)v48 - 128);
      if (v48 == v47)
      {
        v47 = (std::__shared_weak_count *)v67;
        goto LABEL_97;
      }
      continue;
    }
  }
LABEL_98:
  v53 = (md::OverlayTileData **)v71;
  if (v71)
  {
    v54 = v72;
    if (v72 != v71)
    {
      do
      {
        v55 = (std::__shared_weak_count *)*(v54 - 1);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v54 -= 2;
      }
      while (v54 != v53);
      v53 = (md::OverlayTileData **)v71;
    }
    operator delete(v53);
  }
  v58 = v74;
  if (v74)
  {
    for (i = v75; i != v58; i -= 112)
    {
      if (*(i - 16))
        *(i - 16) = 0;
      v60 = (void *)*((_QWORD *)i - 12);
      if (v60 != *((void **)i - 10))
        free(v60);
    }
    v75 = v58;
    operator delete(v58);
  }
  v61 = v78;
  if (v78 == v77)
  {
    v62 = 4;
    v61 = v77;
LABEL_122:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  else if (v78)
  {
    v62 = 5;
    goto LABEL_122;
  }
  result = v80;
  if (v80 == v79)
  {
    v64 = 4;
    result = v79;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v64))();
  }
  else if (v80)
  {
    v64 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v64))();
  }
  return result;
}

void sub_19FBB992C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FBB9938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 96);
  if (v31 == (_QWORD *)(v29 - 120))
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 120);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::OverlayLayerDataSource::_updateNonTileOverlays(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  void *v20[2];
  void *__p;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 56);
    *(_QWORD *)&v18 = a1;
    *((_QWORD *)&v18 + 1) = a2;
    v19 = a3;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 56);
    *(_QWORD *)&v18 = a1;
    *((_QWORD *)&v18 + 1) = a2;
    v19 = 0;
  }
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v20, a4);
  v25 = 0;
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &off_1E42D0F70;
  *(_OWORD *)(v9 + 8) = v18;
  *((_QWORD *)v9 + 3) = v19;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v9 + 32), (uint64_t)v20);
  v25 = v9;
  geo::TaskQueue::async(&v22, v7, v24);
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v25;
  if (v25 == v24)
  {
    v14 = 4;
    v13 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_18:
  v15 = __p;
  if (__p)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = v20[0];
  v20[0] = 0;
  if (v17)
    operator delete(v17);
  if (a3)
    std::__shared_weak_count::__release_weak(a3);
}

void sub_19FBB9BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  std::__shared_weak_count *v23;
  char *v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v24)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0::~$_0(&a10);
  if (!v23)
    _Unwind_Resume(a1);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_19FBB9C44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  JUMPOUT(0x19FBB9C28);
}

void **std::vector<std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_16:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      if (*(v3 - 32))
        goto LABEL_10;
LABEL_11:
      v8 = (void *)*((_QWORD *)v3 - 14);
      if (v8 != *((void **)v3 - 12))
        free(v8);
      v3 -= 128;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_16;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!*(v3 - 32))
      goto LABEL_11;
LABEL_10:
    *(v3 - 32) = 0;
    goto LABEL_11;
  }
  return a1;
}

_QWORD *md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E42D0F70;
  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E42D0F70;
  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)operator new(0x48uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E42D0F70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v2 + 32), a1 + 32);
  return v3;
}

void sub_19FBB9EAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42D0F70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::unordered_set<md::OverlayTileDataType>::unordered_set(a2 + 32, a1 + 32);
}

void sub_19FBB9F2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)__p[6];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[4];
  __p[4] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)__p[3];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  void (***v21)(char *);
  void (**v22)(char *);
  BOOL v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  void (***v32)(char *);
  void (**v33)(char *);
  geo::read_write_lock *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t ***v42;
  uint64_t **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  geo::read_write_lock *v47;
  const char *v48;
  geo::read_write_lock *v49;
  const char *v50;
  uint64_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint8x8_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t *i;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  geo::read_write_lock *v120;
  const char *v121;
  char *v122;
  char *v123;
  _QWORD *v124;
  void *v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void *__p;
  char *v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD v153[2];

  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return;
  v3 = a1[1];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  v6 = a1[2];
  if (!v6)
    goto LABEL_223;
  v7 = *(id *)(v3 + 608);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)objc_msgSend(v7, "gglDevice") + 24))(v153);

  v150 = (uint64_t)&v150;
  v151 = &v150;
  v152 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  objc_msgSend(*(id *)(v3 + 904), "size");
  *(_QWORD *)&v146 = v8;
  *((_QWORD *)&v146 + 1) = v9;
  v10 = *(unsigned __int16 *)(v6 + 24);
  if (v10 > 0x46)
  {
    if (v10 == 72)
      goto LABEL_24;
    if (v10 != 71)
      goto LABEL_40;
LABEL_10:
    v11 = *(id *)(v3 + 608);
    v12 = *(_QWORD *)(v3 + 632);
    std::mutex::lock((std::mutex *)(v12 + 232));
    __p = 0;
    v144 = 0;
    v145 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(_QWORD *)(v12 + 160), *(_QWORD *)(v12 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 168) - *(_QWORD *)(v12 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v12 + 232));
    v13 = *(std::__shared_weak_count **)(v6 + 728);
    v141 = *(_QWORD *)(v6 + 720);
    v142 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    _processOverlays(v6 + 168, &v146, v11, v153, (uint64_t *)&__p, &v150, (uint64_t *)&v147, &v141, 1.0, (uint64_t *)(v6 + 736), (void (*)(uint64_t))(v3 + 832), 0, *(unsigned __int16 *)(v3 + 32) - 71 < 2, a1 + 4);
    v16 = v142;
    if (v142)
    {
      v17 = (unint64_t *)&v142->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (char *)__p;
    if (!__p)
      goto LABEL_39;
    if (v144 == __p)
      goto LABEL_38;
    v20 = v144 - 24;
    v21 = (void (***)(char *))(v144 - 24);
    do
    {
      v22 = *v21;
      v21 -= 3;
      (*v22)(v20);
      v23 = v20 == v19;
      v20 = (char *)v21;
    }
    while (!v23);
    goto LABEL_37;
  }
  if (v10 == 11)
    goto LABEL_10;
  if (v10 == 12)
  {
LABEL_24:
    v11 = *(id *)(v3 + 608);
    v24 = *(_QWORD *)(v3 + 632);
    std::mutex::lock((std::mutex *)(v24 + 232));
    __p = 0;
    v144 = 0;
    v145 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(_QWORD *)(v24 + 184), *(_QWORD *)(v24 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v24 + 192) - *(_QWORD *)(v24 + 184)) >> 3));
    std::mutex::unlock((std::mutex *)(v24 + 232));
    v25 = *(std::__shared_weak_count **)(v6 + 728);
    v141 = *(_QWORD *)(v6 + 720);
    v142 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    _processOverlays(v6 + 168, &v146, v11, v153, (uint64_t *)&__p, &v150, (uint64_t *)&v147, &v141, 1.0, (uint64_t *)(v6 + 736), (void (*)(uint64_t))(v3 + 832), 0, *(unsigned __int16 *)(v3 + 32) - 71 < 2, a1 + 4);
    v28 = v142;
    if (v142)
    {
      v29 = (unint64_t *)&v142->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v19 = (char *)__p;
    if (!__p)
      goto LABEL_39;
    if (v144 == __p)
    {
LABEL_38:
      operator delete(v19);
LABEL_39:

      goto LABEL_40;
    }
    v31 = v144 - 24;
    v32 = (void (***)(char *))(v144 - 24);
    do
    {
      v33 = *v32;
      v32 -= 3;
      (*v33)(v31);
      v23 = v31 == v19;
      v31 = (char *)v32;
    }
    while (!v23);
LABEL_37:
    v19 = (char *)__p;
    goto LABEL_38;
  }
LABEL_40:
  v34 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 872));
  if ((_DWORD)v34)
    geo::read_write_lock::logFailure(v34, (uint64_t)"write lock", v35);
  v36 = v6 + 752;
  v37 = *(_QWORD *)(v6 + 760);
  if (v37 != v6 + 752)
  {
    v38 = (int8x8_t)a1[5];
    if (v38)
    {
LABEL_46:
      v39 = *(unsigned __int8 *)(v37 + 152);
      v40 = (uint8x8_t)vcnt_s8(v38);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = *(unsigned __int8 *)(v37 + 152);
        if (*(_QWORD *)&v38 <= v39)
          v41 = v39 % *(_QWORD *)&v38;
      }
      else
      {
        v41 = (v38.i32[0] - 1) & v39;
      }
      v42 = *(uint64_t ****)(a1[4] + 8 * v41);
      if (v42)
      {
        v43 = *v42;
        if (v43)
        {
          if (v40.u32[0] < 2uLL)
          {
            v44 = *(_QWORD *)&v38 - 1;
            while (1)
            {
              v46 = v43[1];
              if (v46 == (uint64_t *)v39)
              {
                if (*((unsigned __int8 *)v43 + 16) == (_DWORD)v39)
                  goto LABEL_66;
              }
              else if (((unint64_t)v46 & v44) != v41)
              {
                goto LABEL_67;
              }
              v43 = (uint64_t **)*v43;
              if (!v43)
                goto LABEL_67;
            }
          }
          do
          {
            v45 = (unint64_t)v43[1];
            if (v45 == v39)
            {
              if (*((unsigned __int8 *)v43 + 16) == (_DWORD)v39)
              {
LABEL_66:
                atomic_store(1u, (unsigned __int8 *)(v37 + 153));
                break;
              }
            }
            else
            {
              if (v45 >= *(_QWORD *)&v38)
                v45 %= *(_QWORD *)&v38;
              if (v45 != v41)
                break;
            }
            v43 = (uint64_t **)*v43;
          }
          while (v43);
        }
      }
LABEL_67:
      while (1)
      {
        v37 = *(_QWORD *)(v37 + 8);
        if (v37 == v36)
          break;
        v38 = (int8x8_t)a1[5];
        if (v38)
          goto LABEL_46;
      }
    }
    else
    {
      do
        v37 = *(_QWORD *)(v37 + 8);
      while (v37 != v36);
    }
  }
  v47 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 872));
  if ((_DWORD)v47)
    geo::read_write_lock::logFailure(v47, (uint64_t)"unlock", v48);
  if (!a1[7])
    goto LABEL_198;
  __p = (void *)(v6 + 872);
  v49 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 872));
  if ((_DWORD)v49)
    geo::read_write_lock::logFailure(v49, (uint64_t)"write lock", v50);
  v51 = a1[7];
  if (v51 == 2)
  {
    v55 = (uint64_t *)(v6 + 776);
    if (*(_QWORD *)(v6 + 792))
    {
      v56 = *(uint64_t **)(v6 + 784);
      v57 = *(_QWORD *)(v6 + 776);
      v58 = *v56;
      *(_QWORD *)(v58 + 8) = *(_QWORD *)(v57 + 8);
      **(_QWORD **)(v57 + 8) = v58;
      *(_QWORD *)(v6 + 792) = 0;
      if (v56 != v55)
      {
        do
        {
          v59 = (uint64_t *)v56[1];
          md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v56 + 2));
          operator delete(v56);
          v56 = v59;
        }
        while (v59 != v55);
      }
    }
    v60 = (uint64_t *)(v6 + 800);
    if (*(_QWORD *)(v6 + 816))
    {
      v61 = *(uint64_t **)(v6 + 808);
      v62 = *(_QWORD *)(v6 + 800);
      v63 = *v61;
      *(_QWORD *)(v63 + 8) = *(_QWORD *)(v62 + 8);
      **(_QWORD **)(v62 + 8) = v63;
      *(_QWORD *)(v6 + 816) = 0;
      if (v61 != v60)
      {
        do
        {
          v64 = (uint64_t *)v61[1];
          md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v61 + 2));
          operator delete(v61);
          v61 = v64;
        }
        while (v64 != v60);
      }
    }
    v65 = (int8x8_t)a1[5];
    if (!*(_QWORD *)&v65)
      goto LABEL_196;
    v66 = (uint8x8_t)vcnt_s8(v65);
    v66.i16[0] = vaddlv_u8(v66);
    v67 = v66.u32[0];
    if (v66.u32[0] > 1uLL)
    {
      v68 = 2;
      if (*(_QWORD *)&v65 <= 2uLL)
        v68 = 2u % a1[5];
    }
    else
    {
      v68 = (v65.i8[0] - 1) & 2;
    }
    v80 = a1[4];
    v81 = *(uint64_t ***)(v80 + 8 * v68);
    if (!v81 || (v82 = *v81) == 0)
    {
LABEL_173:
      v110 = (v65.i8[0] & 1) == 0;
      v111 = *(_QWORD *)&v65 - 1;
      if (v67 >= 2)
        v110 = *(_QWORD *)&v65 != 1;
      v112 = *(uint64_t ***)(v80 + 8 * v110);
      if (!v112)
        goto LABEL_196;
      v113 = *v112;
      if (!v113)
        goto LABEL_196;
      if (v67 < 2)
      {
        while (1)
        {
          v114 = v113[1];
          if (v114 == 1)
          {
            if (*((_BYTE *)v113 + 16) == 1)
              goto LABEL_191;
          }
          else if ((v114 & v111) != v110)
          {
            goto LABEL_196;
          }
          v113 = (uint64_t *)*v113;
          if (!v113)
            goto LABEL_196;
        }
      }
      while (1)
      {
        v115 = v113[1];
        if (v115 == 1)
        {
          if (*((_BYTE *)v113 + 16) == 1)
          {
LABEL_191:
            for (i = v151; i != &v150; i = (uint64_t *)i[1])
            {
              if (i[2])
              {
                v119 = (char *)operator new(0xA8uLL);
                v117 = i[2];
                i[2] = 0;
                *((_QWORD *)v119 + 2) = v117;
                *(_OWORD *)(v119 + 24) = 0u;
                *(_OWORD *)(v119 + 40) = 0u;
                *(_OWORD *)(v119 + 56) = 0u;
                *(_OWORD *)(v119 + 72) = 0u;
                *(_OWORD *)(v119 + 88) = 0u;
                *(_OWORD *)(v119 + 104) = 0u;
                *((_QWORD *)v119 + 15) = 0;
                *((_OWORD *)v119 + 8) = *((_OWORD *)i + 8);
                *((_QWORD *)v119 + 18) = i[18];
                i[16] = 0;
                i[17] = 0;
                i[18] = 0;
                *((_WORD *)v119 + 76) = 1;
                *((_QWORD *)v119 + 20) = 0;
                *((_QWORD *)v119 + 1) = v60;
                v118 = *(_QWORD *)(v6 + 800);
                *(_QWORD *)v119 = v118;
                *(_QWORD *)(v118 + 8) = v119;
                *(_QWORD *)(v6 + 800) = v119;
                ++*(_QWORD *)(v6 + 816);
              }
            }
            goto LABEL_196;
          }
        }
        else
        {
          if (v115 >= *(_QWORD *)&v65)
            v115 %= *(_QWORD *)&v65;
          if (v115 != v110)
            goto LABEL_196;
        }
        v113 = (uint64_t *)*v113;
        if (!v113)
          goto LABEL_196;
      }
    }
    if (v66.u32[0] < 2uLL)
    {
      while (1)
      {
        v84 = v82[1];
        if (v84 == 2)
        {
          if (*((_BYTE *)v82 + 16) == 2)
            goto LABEL_147;
        }
        else if ((v84 & (*(_QWORD *)&v65 - 1)) != v68)
        {
          goto LABEL_171;
        }
        v82 = (uint64_t *)*v82;
        if (!v82)
          goto LABEL_171;
      }
    }
    while (1)
    {
      v83 = v82[1];
      if (v83 == 2)
        break;
      if (v83 >= *(_QWORD *)&v65)
        v83 %= *(_QWORD *)&v65;
      if (v83 != v68)
      {
LABEL_171:
        if (!*(_QWORD *)&v65)
          goto LABEL_196;
        v80 = a1[4];
        v109 = (uint8x8_t)vcnt_s8(v65);
        v109.i16[0] = vaddlv_u8(v109);
        v67 = v109.u32[0];
        goto LABEL_173;
      }
LABEL_131:
      v82 = (uint64_t *)*v82;
      if (!v82)
        goto LABEL_171;
    }
    if (*((_BYTE *)v82 + 16) != 2)
      goto LABEL_131;
LABEL_147:
    v92 = v151;
    if (v151 == &v150)
      goto LABEL_171;
    while (1)
    {
      if (v92[3])
      {
        v93 = (char *)operator new(0xA8uLL);
        v94 = v92[3];
        v92[3] = 0;
        *((_QWORD *)v93 + 2) = 0;
        *((_QWORD *)v93 + 3) = v94;
        v95 = 0uLL;
        *((_OWORD *)v93 + 2) = 0u;
        goto LABEL_150;
      }
      if (v92[4])
      {
        v93 = (char *)operator new(0xA8uLL);
        v96 = v92[4];
        v92[4] = 0;
        *((_QWORD *)v93 + 2) = 0;
        *((_QWORD *)v93 + 3) = 0;
        *((_QWORD *)v93 + 4) = v96;
        *(_OWORD *)(v93 + 40) = 0u;
        *(_OWORD *)(v93 + 56) = 0u;
        *(_OWORD *)(v93 + 72) = 0u;
        *(_OWORD *)(v93 + 88) = 0u;
        *(_OWORD *)(v93 + 104) = 0u;
        *((_QWORD *)v93 + 15) = 0;
        goto LABEL_154;
      }
      if (v92[5])
        break;
      if (v92[6] != v92[7])
      {
        v93 = (char *)operator new(0xA8uLL);
        *((_OWORD *)v93 + 1) = 0u;
        *((_OWORD *)v93 + 2) = 0u;
        *((_OWORD *)v93 + 3) = *((_OWORD *)v92 + 3);
        *((_QWORD *)v93 + 8) = v92[8];
        v92[6] = 0;
        v92[7] = 0;
        v92[8] = 0;
        *((_QWORD *)v93 + 15) = 0;
        *(_OWORD *)(v93 + 104) = 0u;
        *(_OWORD *)(v93 + 88) = 0u;
        *(_OWORD *)(v93 + 72) = 0u;
        goto LABEL_154;
      }
      if (v92[11])
      {
        v93 = (char *)operator new(0xA8uLL);
        v99 = v92[11];
        v92[11] = 0;
        v95 = 0uLL;
        *((_OWORD *)v93 + 3) = 0u;
        *((_OWORD *)v93 + 4) = 0u;
        *((_OWORD *)v93 + 1) = 0u;
        *((_OWORD *)v93 + 2) = 0u;
        *((_QWORD *)v93 + 10) = 0;
        *((_QWORD *)v93 + 11) = v99;
        goto LABEL_151;
      }
      if (!v92[12])
        goto LABEL_155;
      v93 = (char *)operator new(0xA8uLL);
      v100 = v92[12];
      v92[12] = 0;
      *((_OWORD *)v93 + 4) = 0u;
      *((_OWORD *)v93 + 5) = 0u;
      *((_OWORD *)v93 + 2) = 0u;
      *((_OWORD *)v93 + 3) = 0u;
      *((_OWORD *)v93 + 1) = 0u;
      *((_QWORD *)v93 + 12) = v100;
      *((_QWORD *)v93 + 13) = 0;
      *((_QWORD *)v93 + 14) = 0;
      *((_QWORD *)v93 + 15) = 0;
LABEL_154:
      *((_OWORD *)v93 + 8) = *((_OWORD *)v92 + 8);
      *((_QWORD *)v93 + 18) = v92[18];
      v92[16] = 0;
      v92[17] = 0;
      v92[18] = 0;
      *((_WORD *)v93 + 76) = 2;
      *((_QWORD *)v93 + 20) = 0;
      *((_QWORD *)v93 + 1) = v55;
      v97 = *v55;
      *(_QWORD *)v93 = *v55;
      *(_QWORD *)(v97 + 8) = v93;
      *(_QWORD *)(v6 + 776) = v93;
      ++*(_QWORD *)(v6 + 792);
LABEL_155:
      v92 = (uint64_t *)v92[1];
      if (v92 == &v150)
      {
        v65 = (int8x8_t)a1[5];
        goto LABEL_171;
      }
    }
    v93 = (char *)operator new(0xA8uLL);
    v98 = v92[5];
    v92[5] = 0;
    *((_QWORD *)v93 + 2) = 0;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 5) = v98;
    v95 = 0uLL;
LABEL_150:
    *((_OWORD *)v93 + 3) = v95;
    *((_OWORD *)v93 + 4) = v95;
    *((_OWORD *)v93 + 5) = v95;
LABEL_151:
    *((_OWORD *)v93 + 6) = v95;
    *((_OWORD *)v93 + 7) = v95;
    goto LABEL_154;
  }
  if (v51 != 1)
    goto LABEL_196;
  v52 = (int8x8_t)a1[5];
  if (!*(_QWORD *)&v52)
    goto LABEL_196;
  v53 = (uint8x8_t)vcnt_s8(v52);
  v53.i16[0] = vaddlv_u8(v53);
  if (v53.u32[0] > 1uLL)
  {
    v54 = 2;
    if (*(_QWORD *)&v52 <= 2uLL)
      v54 = 2u % a1[5];
  }
  else
  {
    v54 = (v52.i8[0] - 1) & 2;
  }
  v69 = a1[4];
  v70 = *(uint64_t ***)(v69 + 8 * v54);
  if (!v70 || (v71 = *v70) == 0)
  {
LABEL_106:
    v74 = (v52.i8[0] & 1) == 0;
    v75 = *(_QWORD *)&v52 - 1;
    if (v53.u32[0] >= 2uLL)
      v74 = *(_QWORD *)&v52 > 1uLL;
    v76 = *(uint64_t ***)(v69 + 8 * v74);
    if (!v76)
      goto LABEL_196;
    v77 = *v76;
    if (!v77)
      goto LABEL_196;
    if (v53.u32[0] < 2uLL)
    {
      while (1)
      {
        v78 = v77[1];
        if (v78 == 1)
        {
          if (*((_BYTE *)v77 + 16) == 1)
            goto LABEL_165;
        }
        else if ((v78 & v75) != v74)
        {
          goto LABEL_196;
        }
        v77 = (uint64_t *)*v77;
        if (!v77)
          goto LABEL_196;
      }
    }
    while (1)
    {
      v79 = v77[1];
      if (v79 == 1)
      {
        if (*((_BYTE *)v77 + 16) == 1)
        {
LABEL_165:
          v85 = (uint64_t *)(v6 + 800);
          if (*(_QWORD *)(v6 + 816))
          {
            v101 = *(uint64_t **)(v6 + 808);
            v102 = *(_QWORD *)(v6 + 800);
            v103 = *v101;
            *(_QWORD *)(v103 + 8) = *(_QWORD *)(v102 + 8);
            **(_QWORD **)(v102 + 8) = v103;
            *(_QWORD *)(v6 + 816) = 0;
            if (v101 != v85)
            {
              do
              {
                v104 = (uint64_t *)v101[1];
                md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v101 + 2));
                operator delete(v101);
                v101 = v104;
              }
              while (v104 != v85);
            }
          }
          v90 = v152;
          if (v152)
          {
            v91 = (_QWORD *)(v6 + 816);
LABEL_170:
            v106 = v150;
            v105 = v151;
            v107 = *v151;
            *(_QWORD *)(v107 + 8) = *(_QWORD *)(v150 + 8);
            **(_QWORD **)(v106 + 8) = v107;
            v108 = *v85;
            *(_QWORD *)(v108 + 8) = v105;
            *v105 = v108;
            *v85 = v106;
            *(_QWORD *)(v106 + 8) = v85;
            *v91 += v90;
            v152 = 0;
          }
          goto LABEL_196;
        }
      }
      else
      {
        if (v79 >= *(_QWORD *)&v52)
          v79 %= *(_QWORD *)&v52;
        if (v79 != v74)
          goto LABEL_196;
      }
      v77 = (uint64_t *)*v77;
      if (!v77)
        goto LABEL_196;
    }
  }
  if (v53.u32[0] < 2uLL)
  {
    while (1)
    {
      v73 = v71[1];
      if (v73 == 2)
      {
        if (*((_BYTE *)v71 + 16) == 2)
          goto LABEL_142;
      }
      else if ((v73 & (*(_QWORD *)&v52 - 1)) != v54)
      {
        goto LABEL_106;
      }
      v71 = (uint64_t *)*v71;
      if (!v71)
        goto LABEL_106;
    }
  }
  while (1)
  {
    v72 = v71[1];
    if (v72 == 2)
      break;
    if (v72 >= *(_QWORD *)&v52)
      v72 %= *(_QWORD *)&v52;
    if (v72 != v54)
      goto LABEL_106;
LABEL_96:
    v71 = (uint64_t *)*v71;
    if (!v71)
      goto LABEL_106;
  }
  if (*((_BYTE *)v71 + 16) != 2)
    goto LABEL_96;
LABEL_142:
  v85 = (uint64_t *)(v6 + 776);
  if (*(_QWORD *)(v6 + 792))
  {
    v86 = *(uint64_t **)(v6 + 784);
    v87 = *(_QWORD *)(v6 + 776);
    v88 = *v86;
    *(_QWORD *)(v88 + 8) = *(_QWORD *)(v87 + 8);
    **(_QWORD **)(v87 + 8) = v88;
    *(_QWORD *)(v6 + 792) = 0;
    if (v86 != v85)
    {
      do
      {
        v89 = (uint64_t *)v86[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v86 + 2));
        operator delete(v86);
        v86 = v89;
      }
      while (v89 != v85);
    }
  }
  v90 = v152;
  if (v152)
  {
    v91 = (_QWORD *)(v6 + 792);
    goto LABEL_170;
  }
LABEL_196:
  v120 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 872));
  if ((_DWORD)v120)
    geo::read_write_lock::logFailure(v120, (uint64_t)"unlock", v121);
LABEL_198:
  v122 = (char *)v147;
  if (v147)
  {
    v123 = v148;
    if (v148 != v147)
    {
      do
      {
        v124 = (_QWORD *)*((_QWORD *)v123 - 3);
        if (v124)
        {
          do
          {
            v126 = (_QWORD *)*v124;
            v127 = (std::__shared_weak_count *)v124[15];
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            v130 = (void *)v124[3];
            if (v130 != (void *)v124[5])
              free(v130);
            operator delete(v124);
            v124 = v126;
          }
          while (v126);
        }
        v125 = (void *)*((_QWORD *)v123 - 5);
        *((_QWORD *)v123 - 5) = 0;
        if (v125)
          operator delete(v125);
        v123 -= 48;
      }
      while (v123 != v122);
      v122 = (char *)v147;
    }
    operator delete(v122);
  }
  if (v152)
  {
    v131 = v150;
    v132 = v151;
    v133 = *v151;
    *(_QWORD *)(v133 + 8) = *(_QWORD *)(v150 + 8);
    **(_QWORD **)(v131 + 8) = v133;
    v152 = 0;
    if (v132 != &v150)
    {
      do
      {
        v134 = (uint64_t *)v132[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v132 + 2));
        operator delete(v132);
        v132 = v134;
      }
      while (v134 != &v150);
    }
  }
  if (v153[0])
  {
    v135 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v153[0] + 24))(v153[0]);
    v136 = v153[0];
    v153[0] = 0;
    v150 = v136;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v135 + 48))(v135, &v150);
    v137 = v150;
    v150 = 0;
    if (v137)
      (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
    v138 = v153[0];
    v153[0] = 0;
    if (v138)
      (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  }
LABEL_223:
  v139 = (unint64_t *)&v5->__shared_owners_;
  do
    v140 = __ldaxr(v139);
  while (__stlxr(v140 - 1, v139));
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19FBBAD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,char *a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;
  char *v29;
  char *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;

  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)&a16);
  v29 = __p;
  if (__p)
  {
    v30 = a22;
    if (a22 != __p)
    {
      do
      {
        v31 = (_QWORD *)*((_QWORD *)v30 - 3);
        if (v31)
        {
          do
          {
            v33 = (_QWORD *)*v31;
            v34 = (std::__shared_weak_count *)v31[15];
            if (v34)
            {
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v37 = (void *)v31[3];
            if (v37 != (void *)v31[5])
              free(v37);
            operator delete(v31);
            v31 = v33;
          }
          while (v33);
        }
        v32 = (void *)*((_QWORD *)v30 - 5);
        *((_QWORD *)v30 - 5) = 0;
        if (v32)
          operator delete(v32);
        v30 -= 48;
      }
      while (v30 != v29);
      v29 = __p;
    }
    operator delete(v29);
  }
  if (a26)
  {
    v38 = a24;
    v39 = a25;
    v40 = *a25;
    *(_QWORD *)(v40 + 8) = *(_QWORD *)(a24 + 8);
    **(_QWORD **)(v38 + 8) = v40;
    a26 = 0;
    if (v39 != &a24)
    {
      do
      {
        v41 = (uint64_t *)v39[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v39 + 2));
        operator delete(v39);
        v39 = v41;
      }
      while (v41 != &a24);
    }
  }
  ggl::Loader::~Loader((ggl::Loader *)(v27 - 96));
  v42 = (unint64_t *)&v26->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a2 + 56);
  if (v5)
  {
    if (v5 == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
      goto LABEL_11;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *(_QWORD *)(a1 + 56) = v5;
LABEL_11:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  std::unordered_set<md::OverlayTileDataType>::unordered_set(a1 + 72, a2 + 72);
  return a1;
}

void sub_19FBBB0C8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9F80;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9F80;
}

void md::OverlayLayerDataSource::invalidateRect(uint64_t a1, __int128 *a2, _BYTE *a3, _QWORD *a4, char a5, uint64_t a6)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD block[5];
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  _BYTE *v30;
  void *v31;
  void *__p;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v23 = *a2;
  v24 = a2[1];
  v10 = *(_QWORD *)(a1 + 792);
  v11 = *(std::__shared_weak_count **)(a1 + 800);
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = **(id **)(a1 + 584);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEE_block_invoke;
  block[3] = &__block_descriptor_155_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE_e5_v8__0l;
  block[4] = v10;
  v26 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v27 = v23;
  v28 = v24;
  v33 = 0;
  if (*a3)
  {
    v34 = a3[1];
    v33 = 1;
  }
  v17 = v29;
  v18 = a4[3];
  if (!v18)
    goto LABEL_12;
  if ((_QWORD *)v18 != a4)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_12:
    v30 = (_BYTE *)v18;
    goto LABEL_14;
  }
  v30 = v29;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v29);
LABEL_14:
  v35 = a5;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v31, a6);
  dispatch_async(v14, block);

  v19 = __p;
  if (__p)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = v31;
  v31 = 0;
  if (v21)
    operator delete(v21);
  if (v30 == v29)
  {
    v22 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_23;
    v22 = 5;
    v17 = v30;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v22))(v17);
LABEL_23:
  if (v33)
    v33 = 0;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_19FBBB394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__shared_weak_count *v33;
  void *v34;
  std::__shared_weak_count *v36;

  if (a33)
  {
    v36 = a19;
    if (!a19)
    {
LABEL_4:

      if (v33)
      {
        std::__shared_weak_count::__release_weak(v33);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = a19;
    if (!a19)
      goto LABEL_4;
  }
  std::__shared_weak_count::__release_weak(v36);
  goto LABEL_4;
}

void ___ZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  os_unfair_lock_s *v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  _QWORD v27[3];
  _QWORD *v28;
  char v29;
  void *v30[2];
  void *__p;
  _BYTE v32[24];
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5)
      {
LABEL_36:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = *(_OWORD *)(a1 + 64);
      v23 = *(_OWORD *)(a1 + 48);
      v24 = v6;
      v25 = 0;
      if (*(_BYTE *)(a1 + 152))
      {
        v26 = *(_BYTE *)(a1 + 153);
        v25 = 1;
      }
      v7 = v27;
      v8 = *(_QWORD *)(a1 + 104);
      if (v8)
      {
        if (v8 == a1 + 80)
        {
          v28 = v27;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(v8, v27);
LABEL_11:
          v29 = *(_BYTE *)(a1 + 154);
          std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v30, a1 + 112);
          v33 = 0;
          v9 = (char *)operator new(0x80uLL);
          v10 = v9;
          *(_QWORD *)v9 = &off_1E42D9F38;
          v11 = v24;
          *(_OWORD *)(v9 + 8) = v23;
          *(_OWORD *)(v9 + 24) = v11;
          v9[40] = 0;
          if (v25)
          {
            v9[41] = v26;
            v9[40] = 1;
          }
          v12 = v9 + 48;
          v13 = (uint64_t)v28;
          if (v28)
          {
            if (v28 == v27)
            {
              *((_QWORD *)v10 + 9) = v12;
              (*(void (**)(_QWORD *, char *))(v27[0] + 24))(v27, v10 + 48);
LABEL_18:
              v10[80] = v29;
              std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v10 + 88), (uint64_t)v30);
              v33 = v10;
              os_unfair_lock_lock(v5 + 2);
              if (*(_QWORD *)&v5->_os_unfair_lock_opaque)
              {
                v22 = *(_QWORD *)&v5->_os_unfair_lock_opaque;
                (*(void (**)(char *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v22);
              }
              os_unfair_lock_unlock(v5 + 2);
              v14 = v33;
              if (v33 == v32)
              {
                v15 = 4;
                v14 = v32;
              }
              else
              {
                if (!v33)
                  goto LABEL_25;
                v15 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_25:
              v16 = __p;
              if (__p)
              {
                do
                {
                  v17 = (_QWORD *)*v16;
                  operator delete(v16);
                  v16 = v17;
                }
                while (v17);
              }
              v18 = v30[0];
              v30[0] = 0;
              if (v18)
                operator delete(v18);
              if (v28 == v27)
              {
                v19 = 4;
              }
              else
              {
                if (!v28)
                  goto LABEL_34;
                v19 = 5;
                v7 = v28;
              }
              (*(void (**)(_QWORD *))(*v7 + 8 * v19))(v7);
LABEL_34:
              if (v25)
                v25 = 0;
              goto LABEL_36;
            }
            v13 = (*(uint64_t (**)(void))(*v28 + 16))();
          }
          *((_QWORD *)v10 + 9) = v13;
          goto LABEL_18;
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      }
      v28 = (_QWORD *)v8;
      goto LABEL_11;
    }
  }
}

void sub_19FBBB6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_s *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  os_unfair_lock_unlock(v17);
  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == (_QWORD *)(v18 - 104))
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  _ZZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEEEUb0_EN3__4D1Ev((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19FBBB794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v22;

  if (a21 == v21)
  {
    v22 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v22 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
LABEL_6:
  JUMPOUT(0x19FBBB784);
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 80;
  v8 = *(_QWORD *)(a2 + 104);
  if (!v8)
    goto LABEL_7;
  if (v8 != a2 + 80)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_7:
    *(_QWORD *)(a1 + 104) = v8;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 104) = v7;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 104) + 24))(*(_QWORD *)(a2 + 104), a1 + 80);
LABEL_9:
  result = std::unordered_set<md::OverlayTileDataType>::unordered_set(a1 + 112, a2 + 112);
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 152) = 1;
  }
  return result;
}

void sub_19FBBB88C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (!v3)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (*(_BYTE *)(a1 + 152))
    *(_BYTE *)(a1 + 152) = 0;
  v2 = *(_QWORD **)(a1 + 128);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 104);
  if (v5 == (_QWORD *)(a1 + 80))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t _ZZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEEEUb0_EN3__4D1Ev(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 64);
  if (v5 == (_QWORD *)(a1 + 40))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  if (*(_BYTE *)(a1 + 32))
    *(_BYTE *)(a1 + 32) = 0;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EED1Ev(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E42D9F38;
  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 72);
  if (v5 == (_QWORD *)(a1 + 48))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EED0Ev(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E42D9F38;
  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 72);
  if (v5 == (_QWORD *)(a1 + 48))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  JUMPOUT(0x1A1AF4E00);
}

char *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v2 = (char *)operator new(0x80uLL);
  v3 = v2;
  *(_QWORD *)v2 = &off_1E42D9F38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  v2[40] = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    v2[41] = *(_BYTE *)(a1 + 41);
    v2[40] = 1;
  }
  v4 = v2 + 48;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    if (v5 == a1 + 48)
    {
      *((_QWORD *)v3 + 9) = v4;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 24))(v5, v3 + 48);
      goto LABEL_8;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *((_QWORD *)v3 + 9) = v5;
LABEL_8:
  v3[80] = *(_BYTE *)(a1 + 80);
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v3 + 88), a1 + 88);
  return v3;
}

void sub_19FBBBBFC(_Unwind_Exception *a1)
{
  _BYTE *v1;

  if (v1[40])
    v1[40] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a2 = &off_1E42D9F38;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(a2 + 41) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a2 + 40) = 1;
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    if (v5 == a1 + 48)
    {
      *(_QWORD *)(a2 + 72) = a2 + 48;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a2 + 48);
      goto LABEL_8;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *(_QWORD *)(a2 + 72) = v5;
LABEL_8:
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a1 + 80);
  return std::unordered_set<md::OverlayTileDataType>::unordered_set(a2 + 88, a1 + 88);
}

void sub_19FBBBD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (!*(_BYTE *)(v1 + 40))
    _Unwind_Resume(exception_object);
  *(_BYTE *)(v1 + 40) = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7destroyEv(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *result;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    operator delete(v4);
  result = *(_QWORD **)(a1 + 72);
  if (result == (_QWORD *)(a1 + 48))
  {
    v6 = 4;
    result = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!result)
      goto LABEL_10;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_10:
  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE18destroy_deallocateEv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)__p[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[11];
  __p[11] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)__p[9];
  if (v5 == __p + 6)
  {
    v6 = 4;
    v5 = __p + 6;
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EEclEOSV_(uint64_t a1, gdc::LayerDataSource **a2)
{
  int v3;
  int v4;
  gdc::LayerDataSource *v5;
  uint64_t v6;
  uint64_t *v7;
  gdc::LayerDataRequestKey *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _BYTE *v24;
  gdc::LayerDataRequestKey *v25;
  gdc::LayerDataRequestKey *v26;
  gdc::LayerDataRequestKey *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  gdc::LayerDataRequestKey *v31;
  void *v32;
  gdc::LayerDataRequestKey *i;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  _QWORD *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *j;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  _QWORD *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v79;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  void **v86;
  char *v87;
  unint64_t *v88;
  unint64_t v89;
  __n128 *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count **v94;
  void **v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  const gdc::LayerDataRequestKey *v101;
  const gdc::LayerDataRequestKey *v102;
  const gdc::LayerDataRequestKey *v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  double v108;
  double v109;
  double v110;
  double v111;
  BOOL v112;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void **v120;
  void **v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE *k;
  void *v127;
  gdc::LayerDataRequestKey *v128;
  gdc::LayerDataRequestKey *m;
  void *v130;
  _QWORD *result;
  uint64_t v132;
  int v133;
  gdc::LayerDataRequestKey *v134;
  gdc::LayerDataSource *v135;
  const gdc::LayerDataRequestKey *v136;
  const gdc::LayerDataRequestKey *v137;
  void *__p[2];
  void *v139;
  void *v140;
  void **v141;
  unint64_t v142;
  void *v143;
  _BYTE *v144;
  unint64_t v145;
  gdc::LayerDataRequestKey *v146;
  gdc::LayerDataRequestKey *v147;
  gdc::LayerDataRequestKey *v148;
  _BYTE v149[24];
  _BYTE *v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
    v4 = *(unsigned __int8 *)(a1 + 41);
  else
    v4 = 0;
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
  {
    if (v6 == a1 + 48)
    {
      v150 = v149;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v149);
      goto LABEL_9;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  v150 = (_BYTE *)v6;
LABEL_9:
  v133 = *(unsigned __int8 *)(a1 + 80);
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v7 = (uint64_t *)*((_QWORD *)v5 + 7);
  v135 = v5;
  if (!v7)
    goto LABEL_61;
  v8 = 0;
  do
  {
    v9 = v7[4];
    v10 = *(unsigned __int8 *)(v9 + 8);
    v11 = *(_DWORD *)v9;
    if (!v3 || (v12 = v4 == v10, LOBYTE(v10) = v4, v12))
    {
      v13 = 1 << v10;
      v14 = 1.0 / (double)v13;
      v15 = v14 * (double)v11;
      if (v15 + v14 > *(double *)(a1 + 8))
      {
        v16 = v14 * (double)(v13 + ~*(_DWORD *)(v7[4] + 4));
        v17 = v16 + v14;
        v18 = v15 >= *(double *)(a1 + 24) || v17 <= *(double *)(a1 + 16);
        if (!v18 && v16 < *(double *)(a1 + 32))
        {
          if (v8 < v148)
          {
            *(_BYTE *)v8 = *((_BYTE *)v7 + 16);
            gdc::LayerDataKey::LayerDataKey((uint64_t)v8 + 8, (uint64_t)(v7 + 3));
            *((_BYTE *)v8 + 96) = 0;
            if (*((_BYTE *)v7 + 112))
            {
              *((_DWORD *)v8 + 25) = *((_DWORD *)v7 + 29);
              *((_BYTE *)v8 + 96) = 1;
            }
            *((_QWORD *)v8 + 13) = v7[15];
            goto LABEL_12;
          }
          v20 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v146) >> 4);
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) > 0x249249249249249)
            abort();
          if (0xDB6DB6DB6DB6DB6ELL * ((v148 - v146) >> 4) > v21)
            v21 = 0xDB6DB6DB6DB6DB6ELL * ((v148 - v146) >> 4);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v148 - v146) >> 4)) >= 0x124924924924924)
            v22 = 0x249249249249249;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 > 0x249249249249249)
              goto LABEL_239;
            v23 = operator new(112 * v22);
          }
          else
          {
            v23 = 0;
          }
          v8 = (gdc::LayerDataRequestKey *)&v23[4 * ((v8 - v146) >> 4)];
          v24 = &v23[28 * v20];
          *v24 = *((_BYTE *)v7 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v24 + 8), (uint64_t)(v7 + 3));
          *((_BYTE *)v8 + 96) = 0;
          if (*((_BYTE *)v7 + 112))
          {
            v23[28 * v20 + 25] = *((_DWORD *)v7 + 29);
            *((_BYTE *)v8 + 96) = 1;
          }
          v25 = (gdc::LayerDataRequestKey *)&v23[28 * v22];
          *(_QWORD *)&v23[28 * v20 + 26] = v7[15];
          v27 = v146;
          v26 = v147;
          if (v147 == v146)
          {
            v146 = v8;
            v148 = v25;
          }
          else
          {
            v134 = v25;
            v28 = 0;
            do
            {
              v29 = (char *)v8 + v28;
              v30 = (char *)v26 + v28;
              *((_BYTE *)v8 + v28 - 112) = *((_BYTE *)v26 + v28 - 112);
              gdc::LayerDataKey::LayerDataKey((uint64_t)v8 + v28 - 104, (uint64_t)v26 + v28 - 104);
              *((_BYTE *)v8 + v28 - 16) = 0;
              if (*((_BYTE *)v26 + v28 - 16))
              {
                *((_DWORD *)v29 - 3) = *((_DWORD *)v30 - 3);
                *(v29 - 16) = 1;
              }
              *((_QWORD *)v29 - 1) = *((_QWORD *)v30 - 1);
              v28 -= 112;
            }
            while ((gdc::LayerDataRequestKey *)((char *)v26 + v28) != v27);
            v26 = v146;
            v31 = v147;
            v146 = (gdc::LayerDataRequestKey *)((char *)v8 + v28);
            v148 = v134;
            if (v147 == v26)
            {
              v5 = v135;
              if (!v26)
                goto LABEL_12;
              goto LABEL_55;
            }
            v5 = v135;
            do
            {
              if (*((_BYTE *)v31 - 16))
                *((_BYTE *)v31 - 16) = 0;
              v32 = (void *)*((_QWORD *)v31 - 12);
              if (v32 != *((void **)v31 - 10))
                free(v32);
              v31 = (gdc::LayerDataRequestKey *)((char *)v31 - 112);
            }
            while (v31 != v26);
          }
          if (!v26)
          {
LABEL_12:
            v8 = (gdc::LayerDataRequestKey *)((char *)v8 + 112);
            v147 = v8;
            goto LABEL_13;
          }
LABEL_55:
          operator delete(v26);
          goto LABEL_12;
        }
      }
    }
LABEL_13:
    v7 = (uint64_t *)*v7;
  }
  while (v7);
  for (i = v146; i != v8; i = (gdc::LayerDataRequestKey *)((char *)i + 112))
    gdc::LayerDataSource::cancelLayerDataRequest(v5, i);
LABEL_61:
  v34 = (_QWORD *)*((_QWORD *)v5 + 12);
  if (v34)
  {
    do
    {
      while (1)
      {
        v35 = v34[4];
        v36 = *(unsigned __int8 *)(v35 + 8);
        v37 = *(_DWORD *)v35;
        if (!v3 || (v12 = v4 == v36, LOBYTE(v36) = v4, v12))
        {
          v38 = 1 << v36;
          v39 = 1.0 / (double)v38;
          v40 = v39 * (double)v37;
          if (v40 + v39 > *(double *)(a1 + 8))
          {
            v41 = v39 * (double)(v38 + ~*(_DWORD *)(v34[4] + 4));
            v42 = v41 + v39;
            v43 = v40 >= *(double *)(a1 + 24) || v42 <= *(double *)(a1 + 16);
            if (!v43 && v41 < *(double *)(a1 + 32))
              break;
          }
        }
        v34 = (_QWORD *)*v34;
        if (!v34)
          goto LABEL_89;
      }
      v45 = (_QWORD *)*v34;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)v135 + 10, v34);
      v46 = __p[0];
      __p[0] = 0;
      if (v46)
      {
        if ((_BYTE)v139)
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v46 + 17);
          if (v47)
          {
            p_shared_owners = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          if (*((_BYTE *)v46 + 112))
            *((_BYTE *)v46 + 112) = 0;
          v50 = (void *)*((_QWORD *)v46 + 4);
          if (v50 != *((void **)v46 + 6))
            free(v50);
        }
        operator delete(v46);
      }
      v34 = v45;
    }
    while (v45);
  }
LABEL_89:
  v51 = (uint64_t)v135;
  for (j = (_QWORD *)*((_QWORD *)v135 + 17); j; v51 = (uint64_t)v135)
  {
    while (1)
    {
      v53 = j[4];
      v54 = *(unsigned __int8 *)(v53 + 8);
      v55 = *(_DWORD *)v53;
      if (!v3 || (v12 = v4 == v54, LOBYTE(v54) = v4, v12))
      {
        v56 = 1 << v54;
        v57 = 1.0 / (double)v56;
        v58 = v57 * (double)v55;
        if (v58 + v57 > *(double *)(a1 + 8))
        {
          v59 = v57 * (double)(v56 + ~*(_DWORD *)(j[4] + 4));
          v60 = v59 + v57;
          v61 = v58 >= *(double *)(a1 + 24) || v60 <= *(double *)(a1 + 16);
          if (!v61 && v59 < *(double *)(a1 + 32))
            break;
        }
      }
      j = (_QWORD *)*j;
      if (!j)
        goto LABEL_117;
    }
    v63 = (_QWORD *)*j;
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)v135 + 15, j);
    v64 = __p[0];
    __p[0] = 0;
    if (v64)
    {
      if ((_BYTE)v139)
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)v64 + 17);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        if (*((_BYTE *)v64 + 112))
          *((_BYTE *)v64 + 112) = 0;
        v68 = (void *)*((_QWORD *)v64 + 4);
        if (v68 != *((void **)v64 + 6))
          free(v68);
      }
      operator delete(v64);
    }
    j = v63;
  }
LABEL_117:
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v69 = *(_QWORD *)(v51 + 16);
  v70 = *(_QWORD *)(v69 + 8);
  if (v70 != v69)
  {
    while (2)
    {
      v71 = *(_QWORD *)(v70 + 32);
      v72 = *(unsigned __int8 *)(v71 + 8);
      v73 = *(_DWORD *)v71;
      if (v3)
      {
        v12 = v4 == v72;
        LOBYTE(v72) = v4;
        if (!v12)
          goto LABEL_119;
      }
      v74 = 1 << v72;
      v75 = 1.0 / (double)v74;
      v76 = v75 * (double)v73;
      if (v76 + v75 <= *(double *)(a1 + 8))
        goto LABEL_119;
      v77 = v75 * (double)(v74 + ~*(_DWORD *)(*(_QWORD *)(v70 + 32) + 4));
      v78 = v77 + v75;
      v79 = v76 >= *(double *)(a1 + 24) || v78 <= *(double *)(a1 + 16);
      if (v79 || v77 >= *(double *)(a1 + 32))
        goto LABEL_119;
      v81 = *(unint64_t **)(v70 + 136);
      __p[0] = *(void **)(v70 + 128);
      __p[1] = v81;
      if (v81)
      {
        v82 = v81 + 1;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v51, (const gdc::LayerDataRequestKey *)(v70 + 16));
      if (!v150)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_239:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      if ((*(unsigned int (**)(_BYTE *, void **))(*(_QWORD *)v150 + 48))(v150, __p))
      {
        v84 = v144;
        if ((unint64_t)v144 >= v145)
        {
          v85 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v143, v70 + 16);
          v51 = (uint64_t)v135;
        }
        else
        {
          *v144 = *(_BYTE *)(v70 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v84 + 8), v70 + 24);
          v84[96] = 0;
          if (*(_BYTE *)(v70 + 112))
          {
            *((_DWORD *)v84 + 25) = *(_DWORD *)(v70 + 116);
            v84[96] = 1;
          }
          *((_QWORD *)v84 + 13) = *(_QWORD *)(v70 + 120);
          v85 = v84 + 112;
          v51 = (uint64_t)v135;
        }
        v144 = v85;
        v91 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_119;
      }
      else if (v133)
      {
        v86 = v141;
        if ((unint64_t)v141 >= v142)
        {
          v90 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v140, *(__n128 *)__p);
        }
        else
        {
          *v141 = __p[0];
          v87 = (char *)__p[1];
          v86[1] = __p[1];
          if (v87)
          {
            v88 = (unint64_t *)(v87 + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = (__n128 *)(v86 + 2);
        }
        v141 = (void **)v90;
        v91 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
        {
LABEL_119:
          v70 = *(_QWORD *)(v70 + 8);
          if (v70 == v69)
            goto LABEL_158;
          continue;
        }
      }
      else
      {
        *((_QWORD *)__p[0] + 19) = 1;
        v91 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_119;
      }
      break;
    }
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
    goto LABEL_119;
  }
LABEL_158:
  if (v133)
  {
    v94 = (std::__shared_weak_count **)v140;
    v95 = v141;
    if (v140 != v141)
    {
      do
      {
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)__p, a1 + 88);
        md::OverlayLayerDataSource::_updateNonTileOverlays(v51, (uint64_t)*v94, v94[1], (uint64_t)__p);
        v96 = v139;
        if (v139)
        {
          do
          {
            v97 = (_QWORD *)*v96;
            operator delete(v96);
            v96 = v97;
          }
          while (v97);
        }
        v98 = __p[0];
        __p[0] = 0;
        if (v98)
          operator delete(v98);
        v94 += 2;
      }
      while (v94 != (std::__shared_weak_count **)v95);
    }
  }
  v100 = (unsigned __int8 *)v143;
  v99 = v144;
  if (v143 != v144)
  {
    do
    {
      gdc::LayerDataStore::remove(*(_QWORD **)(v51 + 16), v100);
      v100 += 112;
    }
    while (v100 != v99);
  }
  gdc::LayerDataStore::pending((gdc::LayerDataStore *)&v136, *(_QWORD *)(v51 + 16));
  v101 = v136;
  v102 = v137;
  if (v136 != v137)
  {
    v103 = v136;
    do
    {
      v104 = *((_QWORD *)v103 + 2);
      v105 = *(unsigned __int8 *)(v104 + 8);
      v106 = *(_DWORD *)v104;
      if (!v3 || (v12 = v4 == v105, LOBYTE(v105) = v4, v12))
      {
        v107 = 1 << v105;
        v108 = 1.0 / (double)v107;
        v109 = v108 * (double)v106;
        if (v109 + v108 > *(double *)(a1 + 8))
        {
          v110 = v108 * (double)(v107 + ~*(_DWORD *)(*((_QWORD *)v103 + 2) + 4));
          v111 = v110 + v108;
          v112 = v109 >= *(double *)(a1 + 24) || v111 <= *(double *)(a1 + 16);
          if (!v112 && v110 < *(double *)(a1 + 32))
          {
            v114 = *((_QWORD *)v103 + 14);
            gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v51, v103);
            *(_QWORD *)(v114 + 152) = 1;
          }
        }
      }
      v103 = (const gdc::LayerDataRequestKey *)((char *)v103 + 128);
    }
    while (v103 != v102);
  }
  std::mutex::lock((std::mutex *)(v51 + 376));
  v115 = *(_QWORD *)(v51 + 464);
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 48))(v115);
  std::mutex::unlock((std::mutex *)(v51 + 376));
  if (v101)
  {
    if (v101 == v102)
    {
LABEL_201:
      operator delete(v101);
      goto LABEL_202;
    }
    while (2)
    {
      v116 = (std::__shared_weak_count *)*((_QWORD *)v102 - 1);
      if (!v116)
        goto LABEL_242;
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
        if (*((_BYTE *)v102 - 32))
LABEL_195:
          *((_BYTE *)v102 - 32) = 0;
      }
      else
      {
LABEL_242:
        if (*((_BYTE *)v102 - 32))
          goto LABEL_195;
      }
      v119 = (void *)*((_QWORD *)v102 - 14);
      if (v119 != *((void **)v102 - 12))
        free(v119);
      v102 = (const gdc::LayerDataRequestKey *)((char *)v102 - 128);
      if (v102 == v101)
      {
        v101 = v136;
        goto LABEL_201;
      }
      continue;
    }
  }
LABEL_202:
  v120 = (void **)v140;
  if (v140)
  {
    v121 = v141;
    if (v141 != v140)
    {
      do
      {
        v122 = (std::__shared_weak_count *)*(v121 - 1);
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v121 -= 2;
      }
      while (v121 != v120);
      v120 = (void **)v140;
    }
    operator delete(v120);
  }
  v125 = v143;
  if (v143)
  {
    for (k = v144; k != v125; k -= 112)
    {
      if (*(k - 16))
        *(k - 16) = 0;
      v127 = (void *)*((_QWORD *)k - 12);
      if (v127 != *((void **)k - 10))
        free(v127);
    }
    operator delete(v125);
  }
  v128 = v146;
  if (v146)
  {
    for (m = v147; m != v128; m = (gdc::LayerDataRequestKey *)((char *)m - 112))
    {
      if (*((_BYTE *)m - 16))
        *((_BYTE *)m - 16) = 0;
      v130 = (void *)*((_QWORD *)m - 12);
      if (v130 != *((void **)m - 10))
        free(v130);
    }
    v147 = v128;
    operator delete(v128);
  }
  result = v150;
  if (v150 == v149)
  {
    v132 = 4;
    result = v149;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v132))();
  }
  else if (v150)
  {
    v132 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v132))();
  }
  return result;
}

void sub_19FBBC9D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FBBC9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](&a26);
  v28 = *(_QWORD **)(v26 - 120);
  if (v28 == (_QWORD *)(v26 - 144))
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 144);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::invalidate(uint64_t a1, _QWORD *a2, char a3, uint64_t a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD block[5];
  std::__shared_weak_count *v21;
  _BYTE v22[24];
  _BYTE *v23;
  void *v24;
  void *__p;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 792);
  v8 = *(std::__shared_weak_count **)(a1 + 800);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = **(id **)(a1 + 584);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke;
  block[3] = &__block_descriptor_121_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE_e5_v8__0l;
  block[4] = v7;
  v21 = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v22;
  v15 = a2[3];
  if (!v15)
    goto LABEL_10;
  if ((_QWORD *)v15 != a2)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_10:
    v23 = (_BYTE *)v15;
    goto LABEL_12;
  }
  v23 = v22;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v22);
LABEL_12:
  v26 = a3;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v24, a4);
  dispatch_async(v11, block);

  v16 = __p;
  if (__p)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
    operator delete(v18);
  if (v23 == v22)
  {
    v19 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_21;
    v19 = 5;
    v14 = v23;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v19))(v14);
LABEL_21:
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_19FBBCC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__shared_weak_count *v19;
  void *v20;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);

  if (v19)
  {
    std::__shared_weak_count::__release_weak(v19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  char v24;
  void *v25[2];
  void *__p;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5)
        goto LABEL_30;
      v6 = *(_QWORD *)(a1 + 72);
      if (v6)
      {
        if (v6 == a1 + 48)
        {
          v23 = v22;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v22);
LABEL_9:
          v24 = *(_BYTE *)(a1 + 120);
          std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v25, a1 + 80);
          v28 = 0;
          v8 = operator new(0x58uLL);
          *v8 = &off_1E42D9EF0;
          v9 = (char *)(v8 + 1);
          v10 = (uint64_t)v23;
          if (v23)
          {
            if (v23 == v22)
            {
              v8[4] = v9;
              (*(void (**)(_QWORD *, char *))(v22[0] + 24))(v22, v9);
LABEL_14:
              *((_BYTE *)v8 + 40) = v24;
              std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v8 + 6), (uint64_t)v25);
              v28 = v8;
              os_unfair_lock_lock(v5 + 2);
              if (*(_QWORD *)&v5->_os_unfair_lock_opaque)
              {
                v21 = *(_QWORD *)&v5->_os_unfair_lock_opaque;
                (*(void (**)(_QWORD *, uint64_t *))(*v8 + 48))(v8, &v21);
              }
              os_unfair_lock_unlock(v5 + 2);
              v12 = v28;
              if (v28 == v27)
              {
                v13 = 4;
                v12 = v27;
              }
              else
              {
                if (!v28)
                  goto LABEL_21;
                v13 = 5;
              }
              (*(void (**)(_QWORD *, uint64_t))(*v12 + 8 * v13))(v12, v11);
LABEL_21:
              v14 = __p;
              if (__p)
              {
                do
                {
                  v15 = (_QWORD *)*v14;
                  operator delete(v14);
                  v14 = v15;
                }
                while (v15);
              }
              v16 = v25[0];
              v25[0] = 0;
              if (v16)
                operator delete(v16);
              v17 = v23;
              if (v23 == v22)
              {
                v18 = 4;
                v17 = v22;
              }
              else
              {
                if (!v23)
                  goto LABEL_30;
                v18 = 5;
              }
              (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v11);
LABEL_30:
              p_shared_owners = (unint64_t *)&v4->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
              return;
            }
            v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v23 + 16))(v23, v7);
          }
          v8[4] = v10;
          goto LABEL_14;
        }
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      v23 = (_QWORD *)v6;
      goto LABEL_9;
    }
  }
}

void sub_19FBBCEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  os_unfair_lock_s *v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v12);
  v15 = *(_QWORD **)(v13 - 64);
  if (v15 == (_QWORD *)(v13 - 88))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 88);
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  _ZZZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb1_EN3__6D1Ev(&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FBBCF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == v15)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  JUMPOUT(0x19FBBCF78);
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 6;
  v8 = a2[9];
  if (v8)
  {
    if ((_QWORD *)v8 == a2 + 6)
    {
      a1[9] = v7;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[9] + 24))(a2[9], a1 + 6);
      return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  a1[9] = v8;
  return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

void sub_19FBBD054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (!v3)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = (_QWORD *)a1[12];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

_QWORD *_ZZZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb1_EN3__6D1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)a1[7];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[5];
  a1[5] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E42D9EF0;
  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EED0Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E42D9EF0;
  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;

  v2 = operator new(0x58uLL);
  *v2 = &off_1E42D9EF0;
  v3 = (char *)(v2 + 1);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 24))(v4, v3);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[4] = v4;
LABEL_6:
  *((_BYTE *)v2 + 40) = *(_BYTE *)(a1 + 40);
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v2 + 6), a1 + 48);
  return v2;
}

void sub_19FBBD364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E42D9EF0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = a2 + 8;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 8);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return std::unordered_set<md::OverlayTileDataType>::unordered_set(a2 + 48, a1 + 48);
}

void sub_19FBBD444(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7destroyEv(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *result;
  uint64_t v6;

  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  result = (_QWORD *)a1[4];
  if (result == a1 + 1)
  {
    v6 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE18destroy_deallocateEv(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)__p[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[6];
  __p[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)__p[4];
  if (v5 == __p + 1)
  {
    v6 = 4;
    v5 = __p + 1;
    goto LABEL_9;
  }
  if (v5)
  {
    v6 = 5;
LABEL_9:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  operator delete(__p);
}

_QWORD *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EEclEOSN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  void **v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count **v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE *i;
  void *v38;
  _QWORD *result;
  uint64_t v40;
  void *v41[2];
  void *__p;
  void *v43;
  void **v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = a1 + 8;
    if (v4 == a1 + 8)
    {
      v50 = v49;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v49);
    }
    else
    {
      v50 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v50 = 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 40);
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v3);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 != v7)
  {
    while (1)
    {
      v9 = *(unint64_t **)(v8 + 136);
      v41[0] = *(void **)(v8 + 128);
      v41[1] = v9;
      if (v9)
      {
        v10 = v9 + 1;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      if (!v50)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      if ((*(unsigned int (**)(_BYTE *, void **))(*(_QWORD *)v50 + 48))(v50, v41))
        break;
      if (v6)
      {
        v14 = v44;
        if ((unint64_t)v44 >= v45)
        {
          v18 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v43, *(__n128 *)v41);
        }
        else
        {
          *v44 = v41[0];
          v15 = (char *)v41[1];
          v14[1] = v41[1];
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = (__n128 *)(v14 + 2);
        }
        v44 = (void **)v18;
        v19 = (std::__shared_weak_count *)v41[1];
        if (!v41[1])
          goto LABEL_8;
LABEL_31:
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        goto LABEL_8;
      }
      *((_QWORD *)v41[0] + 19) = 1;
      v19 = (std::__shared_weak_count *)v41[1];
      if (v41[1])
        goto LABEL_31;
LABEL_8:
      v8 = *(_QWORD *)(v8 + 8);
      if (v8 == v7)
        goto LABEL_35;
    }
    v12 = v47;
    if ((unint64_t)v47 >= v48)
    {
      v13 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v46, v8 + 16);
    }
    else
    {
      *v47 = *(_BYTE *)(v8 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v12 + 8), v8 + 24);
      v12[96] = 0;
      if (*(_BYTE *)(v8 + 112))
      {
        *((_DWORD *)v12 + 25) = *(_DWORD *)(v8 + 116);
        v12[96] = 1;
      }
      *((_QWORD *)v12 + 13) = *(_QWORD *)(v8 + 120);
      v13 = v12 + 112;
    }
    v47 = v13;
    v19 = (std::__shared_weak_count *)v41[1];
    if (!v41[1])
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_35:
  if (v6)
  {
    v22 = (std::__shared_weak_count **)v43;
    v23 = v44;
    if (v43 != v44)
    {
      v24 = a1 + 48;
      do
      {
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v41, v24);
        md::OverlayLayerDataSource::_updateNonTileOverlays(v3, (uint64_t)*v22, v22[1], (uint64_t)v41);
        v25 = __p;
        if (__p)
        {
          do
          {
            v26 = (_QWORD *)*v25;
            operator delete(v25);
            v25 = v26;
          }
          while (v26);
        }
        v27 = v41[0];
        v41[0] = 0;
        if (v27)
          operator delete(v27);
        v22 += 2;
      }
      while (v22 != (std::__shared_weak_count **)v23);
    }
  }
  v28 = v46;
  v29 = v47;
  if (v46 != v47)
  {
    v30 = v46;
    do
    {
      gdc::LayerDataStore::remove(*(_QWORD **)(v3 + 16), v30);
      v30 += 112;
    }
    while (v30 != v29);
  }
  std::mutex::lock((std::mutex *)(v3 + 376));
  v31 = *(_QWORD *)(v3 + 464);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31);
  std::mutex::unlock((std::mutex *)(v3 + 376));
  v32 = (void **)v43;
  if (v43)
  {
    v33 = v44;
    if (v44 != v43)
    {
      do
      {
        v34 = (std::__shared_weak_count *)*(v33 - 1);
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v33 -= 2;
      }
      while (v33 != v32);
      v32 = (void **)v43;
      v28 = v46;
    }
    operator delete(v32);
  }
  if (v28)
  {
    for (i = v47; i != v28; i -= 112)
    {
      if (*(i - 16))
        *(i - 16) = 0;
      v38 = (void *)*((_QWORD *)i - 12);
      if (v38 != *((void **)i - 10))
        free(v38);
    }
    v47 = v28;
    operator delete(v28);
  }
  result = v50;
  if (v50 == v49)
  {
    v40 = 4;
    result = v49;
  }
  else
  {
    if (!v50)
      return result;
    v40 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v40))();
}

void sub_19FBBD958(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FBBD964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a14);
  std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](&a17);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineSegment::LabelLineSegment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 24) = 0;
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)a1 = off_1E4291B50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a3 + 88);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a3 + 8);
  *(_WORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 38) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = *(_DWORD *)(a3 + 4);
  *(_WORD *)(a1 + 46) = *(_DWORD *)(a3 + 60);
  v6 = operator new();
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)v6 = 0u;
  *(int64x2_t *)(v6 + 16) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v6 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_BYTE *)(v6 + 48) = 1;
  v7 = *v5;
  *v5 = v6;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x1A1AF4E00](v7, 0x1020C40457A241BLL);
    v6 = *v5;
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v6 + 8);
  *(_QWORD *)v6 = v12;
  *(_QWORD *)(v6 + 8) = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 24) = 0;
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)a1 = off_1E4291B50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a3 + 88);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a3 + 8);
  *(_WORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 38) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 46) = *(_DWORD *)(a3 + 60);
  v6 = operator new();
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)v6 = 0u;
  *(int64x2_t *)(v6 + 16) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v6 + 32) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_BYTE *)(v6 + 48) = 1;
  v7 = *v5;
  *v5 = v6;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x1A1AF4E00](v7, 0x1020C40457A241BLL);
    v6 = *v5;
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v6 + 8);
  *(_QWORD *)v6 = v12;
  *(_QWORD *)(v6 + 8) = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_19FBBDB4C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

void sub_19FBBDD58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::LabelLineSegment::createLists(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  char *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  float v22;
  float v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  double *v29;
  _WORD *v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double *v35;
  char *v36;
  _BYTE *v37;
  char v38;
  double v39;
  unsigned int v40;
  char v41;
  double v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a3);
    v6 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 64))(a1);
    v7 = v6;
    v8 = a1[23];
    if (v8 > 0x2000)
    {
      v12 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v12)
        return;
      v10 = v12;
      v11 = a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v6);
      v10 = (char *)&v43 - v9;
      bzero((char *)&v43 - v9, v8);
      v11 = v8;
    }
    v13 = (char *)memset(v10, 127, v11);
    v14 = a1[23];
    if (!a2)
    {
LABEL_28:
      v25 = *(_QWORD *)(a3 + 32);
      v26 = *(unsigned int *)(a3 + 56);
      v27 = 8 * v14;
      if (v14 > 0x400)
      {
        v29 = (double *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
        if (!v29)
        {
LABEL_35:
          free(v29);
LABEL_36:
          if (v8 > 0x2000)
            free(v10);
          return;
        }
        v27 = 8 * a1[23];
      }
      else
      {
        MEMORY[0x1E0C80A78](v13);
        v29 = (double *)((char *)&v43 - v28);
        bzero((char *)&v43 - v28, 8 * v14);
      }
      bzero(v29, v27);
      v31 = a1[23];
      v30 = a1 + 23;
      md::LabelLineSegment::computeRadiusOfCurvature((float *)(v25 + 8 * v26), v31, *(double **)(a3 + 16), (uint64_t)v29);
      v32 = (unsigned __int16)*v30;
      if (*v30)
      {
        v33 = *v10;
        *(_BYTE *)v7 = *v10;
        *(_BYTE *)(v7 + 1) = v33;
        *(_WORD *)(v7 + 2) = 0;
        if ((_DWORD)v32 != 1)
        {
          v34 = v32 - 1;
          v35 = v29 + 1;
          v36 = v10 + 1;
          v37 = (_BYTE *)(v7 + 7);
          do
          {
            v42 = 1.0;
            if (v34 != 1)
              v42 = *v35;
            v38 = *v36++;
            *(v37 - 3) = v38;
            *(v37 - 2) = v38;
            *v37 = 0;
            v39 = 0.05078125 / v42;
            v40 = 31 - __clz(v39);
            if (v39)
              v41 = v40;
            else
              v41 = 0;
            *(v37 - 1) = v41;
            ++v35;
            v37 += 4;
            --v34;
          }
          while (v34);
        }
      }
      if (v14 < 0x401)
        goto LABEL_36;
      goto LABEL_35;
    }
    v15 = *(unsigned int *)(a3 + 4);
    v44 = 0;
    v45 = 0;
    v16 = *(std::__shared_weak_count **)(a2 + 8);
    if (v16)
    {
      v16 = std::__shared_weak_count::lock(v16);
      v17 = v16;
      v45 = v16;
      if (v16)
      {
        v16 = *(std::__shared_weak_count **)a2;
        v44 = *(std::__shared_weak_count **)a2;
      }
    }
    else
    {
      v17 = 0;
    }
    v13 = (char *)geo::codec::VectorTile::transitLinkSections((geo::codec::VectorTile *)v16);
    v18 = v13;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (!v18)
      goto LABEL_27;
    v21 = &v18[8 * *(unsigned int *)(a2 + 16)];
    if ((_DWORD)v15)
    {
      if (*(_DWORD *)(a2 + 20) - 1 != (_DWORD)v15)
        goto LABEL_27;
      v22 = *(float *)&v21[8 * v15 + 4];
    }
    else
    {
      v23 = *(float *)&v21[8 * v15];
      if (*(_DWORD *)(a2 + 20) != 1)
      {
        v24 = v10;
        if (v23 == 0.0)
          goto LABEL_26;
        goto LABEL_27;
      }
      v22 = *(float *)&v21[8 * v15 + 4];
      if (v23 == 0.0)
        *v10 = 1;
    }
    if (v22 == 1.0)
    {
      v24 = &v10[(v14 - 1)];
LABEL_26:
      *v24 = 1;
    }
LABEL_27:
    v14 = a1[23];
    goto LABEL_28;
  }
}

{
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  __int16 *v10;
  __int16 *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  __int16 v20;
  __int16 *v21;
  char v22;
  int v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  geo::codec::VectorTile *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  float v47;
  int v48;
  unsigned int v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  double v55;
  uint64_t v56;
  char *v57;
  char v58;
  float v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  uint64_t v64;
  float v65;
  char *v66;
  double *v67;
  char *v68;
  _BYTE *v69;
  char v70;
  double v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  int v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  double *v80;
  _BYTE v81[80];
  void *v82;
  __int16 *v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE v86[32];

  if (a1[23] < 2u)
    return;
  md::LabelLineSegment::createPointList((uint64_t)a1, a3);
  v78 = (_BYTE *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 64))(a1);
  v6 = a1[23];
  v7 = v86;
  v82 = v86;
  v83 = (__int16 *)v86;
  v84 = v86;
  v85 = 10;
  if (v6 >= 0xB)
  {
    if (v6 <= 0x10)
      v8 = 16;
    else
      v8 = v6;
    v9 = (char *)malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
    v7 = v9;
    v10 = (__int16 *)v82;
    v11 = v83;
    if (v82 == v83)
      goto LABEL_15;
    v12 = (char *)v83 - (_BYTE *)v82 - 2;
    if (v12 < 0x1E)
    {
      v13 = v9;
    }
    else
    {
      v13 = v9;
      if ((unint64_t)(v9 - (_BYTE *)v82) >= 0x20)
      {
        v14 = (v12 >> 1) + 1;
        v15 = 2 * (v14 & 0xFFFFFFFFFFFFFFF0);
        v13 = &v9[v15];
        v16 = (__int128 *)((char *)v82 + 16);
        v17 = v9 + 16;
        v18 = v14 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 16;
        }
        while (v18);
        if (v14 == (v14 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_15;
        v10 = (__int16 *)((char *)v10 + v15);
      }
    }
    do
    {
      v20 = *v10++;
      *(_WORD *)v13 = v20;
      v13 += 2;
    }
    while (v10 != v11);
LABEL_15:
    v82 = v9;
    v85 = v8;
  }
  if ((_DWORD)v6)
  {
    memset_pattern16(v7, &unk_19FFB6360, 2 * v6);
    v21 = (__int16 *)&v7[2 * v6];
    v7 = v82;
  }
  else
  {
    v21 = (__int16 *)v7;
  }
  v83 = v21;
  v22 = *(_BYTE *)(a2 + 151);
  v23 = *(_DWORD *)(a3 + 4);
  v24 = *(_DWORD *)(a3 + 56);
  v76 = a1[23];
  v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25)
  {
    v26 = std::__shared_weak_count::lock(v25);
    if (v26)
    {
      v27 = *(geo::codec::VectorTile **)a2;
      goto LABEL_24;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = 0;
LABEL_24:
  if (!geo::codec::VectorTile::lineCrossingsCount(v27))
  {
    v77 = geo::codec::VectorTile::pointsOnRoad(v27);
    v79 = geo::codec::VectorTile::junctions(v27);
    v35 = geo::codec::VectorTile::lines(v27);
    v36 = geo::codec::VectorTile::sortedPointsOnRoad(v27);
    v37 = *(unsigned __int16 *)(a2 + 144);
    if (*(_WORD *)(a2 + 144))
    {
      v38 = 0;
      v39 = v36 + 8 * *(unsigned int *)(a2 + 132);
      do
      {
        v40 = *(unsigned int **)(v39 + 8 * v38);
        if (v40[2] == v23)
        {
          v41 = v40[3];
          v42 = v41 - v24;
          if (v41 >= v24 && v41 < v24 + v76)
          {
            v44 = (unsigned int *)(v79 + 32 * *v40);
            v45 = *v44;
            if ((_DWORD)v45)
            {
              v46 = (unsigned int *)(v77 + 16 * v44[1]);
              v47 = 0.0;
              v48 = 0x7FFFFFFF;
              do
              {
                if (v46 != v40)
                {
                  v51 = v46[1];
                  v52 = *(unsigned __int8 *)(v35 + 168 * v51 + 151);
                  if (v52 < 7 || *(_BYTE *)(v35 + 168 * v51 + 73))
                  {
                    v49 = *(unsigned __int16 *)(v35 + 168 * v51 + 148);
                    if (v49)
                    {
                      v50 = (float)v49 * 0.01;
                    }
                    else if (v52 > 8)
                    {
                      v50 = 14.8;
                    }
                    else
                    {
                      v50 = flt_1A001A800[v52];
                    }
                    if (v48 >= (int)v52)
                      v48 = v52;
                    v47 = fmaxf(v47, v50);
                  }
                }
                v46 += 4;
                --v45;
              }
              while (v45);
              if (v48 != 0x7FFFFFFF)
              {
                v53 = &v7[2 * v42];
                *v53 = v48;
                v53[1] = (int)(float)(v47 * 5.0);
              }
            }
          }
        }
        ++v38;
      }
      while (v38 != v37);
    }
  }
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v30 = *(_QWORD *)(a3 + 32);
  v31 = *(unsigned int *)(a3 + 56);
  v32 = a1[23];
  v33 = (double *)v81;
  v80 = (double *)v81;
  if (v32 >= 0xB)
  {
    if (v32 <= 0x10)
      v34 = 16;
    else
      v34 = a1[23];
    v33 = (double *)malloc_type_malloc(8 * v34, 0x100004000313F17uLL);
    v80 = v33;
  }
  if ((_DWORD)v32)
    bzero(v33, 8 * v32);
  md::LabelLineSegment::computeRadiusOfCurvature((float *)(v30 + 8 * v31), a1[23], *(double **)(a3 + 16), (uint64_t)v33);
  v54 = *(unsigned __int8 *)(a3 + 1);
  v55 = 26.0;
  if (v54 == 2)
    v55 = 15.0;
  if (v54 == 3)
    v55 = 0.0;
  v56 = a1[23];
  if (a1[23])
  {
    v57 = (char *)v82;
    v58 = fabsf(*(float *)(a3 + 64)) <= 0.00000011921 ? *(_BYTE *)v82 : 127;
    v59 = *(float *)(a3 + 68);
    v60 = *((_BYTE *)v82 + 1);
    *v78 = v22;
    v78[1] = v58;
    v78[3] = v60;
    v61 = (v55 * 0.001953125);
    v62 = 31 - __clz(v61);
    v63 = v61 ? v62 : 0;
    v78[2] = v63;
    if ((_DWORD)v56 != 1)
    {
      v64 = v56 - 1;
      v65 = fabsf(v59);
      v66 = &v57[2 * v64];
      v67 = v80 + 1;
      v68 = v57 + 3;
      v69 = v78 + 7;
      do
      {
        if (v64 == 1)
        {
          v71 = 1.0;
          if (v65 <= 0.00000011921)
            v70 = *v66;
          else
            v70 = 127;
        }
        else
        {
          v70 = *(v68 - 1);
          v71 = *v67;
        }
        v72 = *v68;
        v68 += 2;
        *(v69 - 3) = v22;
        *(v69 - 2) = v70;
        *v69 = v72;
        v73 = (v55 / (v71 * 512.0));
        v74 = 31 - __clz(v73);
        if (v73)
          v75 = v74;
        else
          v75 = 0;
        *(v69 - 1) = v75;
        ++v67;
        v69 += 4;
        --v64;
      }
      while (v64);
    }
  }
  if (v80 != (double *)v81)
    free(v80);
  if (v82 != v84)
    free(v82);
}

void sub_19FBBE0C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void md::LabelLineSegment::createLists(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  _BYTE *v20;
  double v21;
  unsigned int v22;
  char v23;
  double v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    v4 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 64))(a1);
    v5 = (_DWORD *)v4;
    v6 = a1[23];
    if (v6 > 0x2000)
    {
      v9 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v9)
        return;
      v8 = v9;
      v10 = a1[23];
      v11 = a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v8 = (char *)v25 - v7;
      bzero((char *)v25 - v7, v6);
      v10 = v6;
      v11 = v6;
    }
    v12 = *(_QWORD *)(a2 + 32);
    v13 = *(unsigned int *)(a2 + 56);
    v14 = 8 * v10;
    if (v11 > 0x400)
    {
      v16 = (double *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
      if (!v16)
      {
LABEL_13:
        free(v16);
LABEL_14:
        if (v6 > 0x2000)
          free(v8);
        return;
      }
      v14 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v9);
      v16 = (double *)((char *)v25 - v15);
      bzero((char *)v25 - v15, v14);
    }
    bzero(v16, v14);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v16);
    v17 = a1[23];
    if (a1[23])
    {
      *v5 = 32512;
      if ((_DWORD)v17 != 1)
      {
        v18 = v17 - 1;
        v19 = v16 + 1;
        v20 = (char *)v5 + 7;
        do
        {
          v24 = 1.0;
          if (v18 != 1)
            v24 = *v19;
          *(_WORD *)(v20 - 3) = 32512;
          *v20 = 0;
          v21 = 0.05078125 / v24;
          v22 = 31 - __clz(v21);
          if (v21)
            v23 = v22;
          else
            v23 = 0;
          *(v20 - 1) = v23;
          ++v19;
          v20 += 4;
          --v18;
        }
        while (v18);
      }
    }
    if (v11 < 0x401)
      goto LABEL_14;
    goto LABEL_13;
  }
}

{
  uint64_t v4;
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  _BYTE *v20;
  double v21;
  unsigned int v22;
  char v23;
  double v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    v4 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 64))(a1);
    v5 = (_DWORD *)v4;
    v6 = a1[23];
    if (v6 > 0x2000)
    {
      v9 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v9)
        return;
      v8 = v9;
      v10 = a1[23];
      v11 = a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v8 = (char *)v25 - v7;
      bzero((char *)v25 - v7, v6);
      v10 = v6;
      v11 = v6;
    }
    v12 = *(_QWORD *)(a2 + 32);
    v13 = *(unsigned int *)(a2 + 56);
    v14 = 8 * v10;
    if (v11 > 0x400)
    {
      v16 = (double *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
      if (!v16)
      {
LABEL_13:
        free(v16);
LABEL_14:
        if (v6 > 0x2000)
          free(v8);
        return;
      }
      v14 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v9);
      v16 = (double *)((char *)v25 - v15);
      bzero((char *)v25 - v15, v14);
    }
    bzero(v16, v14);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v16);
    v17 = a1[23];
    if (a1[23])
    {
      *v5 = 32512;
      if ((_DWORD)v17 != 1)
      {
        v18 = v17 - 1;
        v19 = v16 + 1;
        v20 = (char *)v5 + 7;
        do
        {
          v24 = 1.0;
          if (v18 != 1)
            v24 = *v19;
          *(_WORD *)(v20 - 3) = 32512;
          *v20 = 0;
          v21 = 1.953125 / v24;
          v22 = 31 - __clz(v21);
          if (v21)
            v23 = v22;
          else
            v23 = 0;
          *(v20 - 1) = v23;
          ++v19;
          v20 += 4;
          --v18;
        }
        while (v18);
      }
    }
    if (v11 < 0x401)
      goto LABEL_14;
    goto LABEL_13;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double *v21;
  char *v22;
  _BYTE *v23;
  char v24;
  double v25;
  unsigned int v26;
  char v27;
  double v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    v4 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 64))(a1);
    v5 = v4;
    v6 = a1[23];
    if (v6 > 0x2000)
    {
      v10 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v10)
        return;
      v8 = v10;
      v9 = a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v4);
      v8 = (char *)v29 - v7;
      bzero((char *)v29 - v7, v6);
      v9 = v6;
    }
    v11 = memset(v8, 127, v9);
    v8[a1[23] - 1] = 1;
    *v8 = 1;
    v12 = *(_QWORD *)(a2 + 32);
    v13 = *(unsigned int *)(a2 + 56);
    v14 = a1[23];
    v15 = 8 * v14;
    if (v14 > 0x400)
    {
      v17 = (double *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
      if (!v17)
      {
LABEL_13:
        free(v17);
LABEL_14:
        if (v6 > 0x2000)
          free(v8);
        return;
      }
      v15 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1E0C80A78](v11);
      v17 = (double *)((char *)v29 - v16);
      bzero((char *)v29 - v16, 8 * v14);
    }
    bzero(v17, v15);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v17);
    v18 = a1[23];
    if (a1[23])
    {
      v19 = *v8;
      *(_BYTE *)v5 = *v8;
      *(_BYTE *)(v5 + 1) = v19;
      *(_WORD *)(v5 + 2) = 0;
      if ((_DWORD)v18 != 1)
      {
        v20 = v18 - 1;
        v21 = v17 + 1;
        v22 = v8 + 1;
        v23 = (_BYTE *)(v5 + 7);
        do
        {
          v28 = 1.0;
          if (v20 != 1)
            v28 = *v21;
          v24 = *v22++;
          *(v23 - 3) = v24;
          *(v23 - 2) = v24;
          *v23 = 0;
          v25 = 0.05078125 / v28;
          v26 = 31 - __clz(v25);
          if (v25)
            v27 = v26;
          else
            v27 = 0;
          *(v23 - 1) = v27;
          ++v21;
          v23 += 4;
          --v20;
        }
        while (v20);
      }
    }
    if (v14 < 0x401)
      goto LABEL_14;
    goto LABEL_13;
  }
}

void sub_19FBBEB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a27 != a29)
    free(a27);
  _Unwind_Resume(a1);
}

unint64_t md::LabelCoreStyleGroup::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, float a6, float a7)
{
  unsigned int v14;
  float v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  unint64_t v21;
  unsigned int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  unint64_t v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  unsigned int v39;
  float v40;
  float v41;
  unint64_t result;
  float v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  float v142;
  int v143;
  float v144;
  uint64_t v145;
  unsigned int v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  unsigned int v152;
  float v153;
  int v154;
  float v155;
  uint64_t v156;
  unsigned int v157;
  float v158;
  int v159;
  float v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  int16x8_t v170;
  uint64_t v171;
  char v172;
  unsigned __int8 v173;
  uint16x4_t v174;

  if ((int)a6 >= 0x17)
    v14 = 23;
  else
    v14 = (int)a6;
  if (a5)
  {
    *(_OWORD *)(a1 + 107) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  v15 = *(float *)(a3 + 20 * a4);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v17 = *(unsigned __int8 *)(v16 + 12);
  if (v17 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v18 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v16, 0xC1u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v16, 0xC1u, v14, 1u, &v174);
  }
  else
  {
    v18 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xC1u, v14, v17, 0);
  }
  v19 = v15 * a7;
  v20 = v19 * v18;
  *(float *)(a1 + 32) = v20;
  v21 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v22 = *(unsigned __int8 *)(v21 + 12);
  if (v22 != 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v21, 0x172u, v14, *(unsigned __int8 *)(v21 + 12)) & 1) == 0)
    {
      *(float *)(a1 + 36) = v20;
      v24 = fminf(fmaxf(a6, 0.0), 23.0);
      goto LABEL_19;
    }
    v23 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v21, 0x172u, v14, v22, 0);
    goto LABEL_15;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v21, 0x172u, v14, 0) & 1) != 0
    || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v21, 0x172u, v14, 1u) & 1) != 0)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v23 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v21, 0x172u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v21, 0x172u, v14, 1u, &v174);
LABEL_15:
    v20 = fminf(v19 * v23, *(float *)(a1 + 32));
    v21 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v22 = *(unsigned __int8 *)(v21 + 12);
  }
  *(float *)(a1 + 36) = v20;
  v24 = fminf(fmaxf(a6, 0.0), 23.0);
  if (v22 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v21, 0x5Eu, 0, (BOOL *)&v171, v24);
    v26 = v25;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v21, 0x5Eu, 1u, (BOOL *)&v174, v24);
    goto LABEL_20;
  }
LABEL_19:
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v21, 0x5Eu, v22, 0, v24);
  v26 = v27;
LABEL_20:
  *(_DWORD *)(a1 + 12) = v26;
  v28 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v29 = *(unsigned __int8 *)(v28 + 12);
  if (v29 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v28, 0xEAu, 0, (BOOL *)&v171, v24);
    v31 = v30;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v28, 0xEAu, 1u, (BOOL *)&v174, v24);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xEAu, v29, 0, v24);
    v31 = v32;
  }
  *(float *)(a1 + 8) = v31 * a7;
  v33 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v34 = *(unsigned __int8 *)(v33 + 12);
  if (v34 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v33, 0x149u, 0, (BOOL *)&v171, v24);
    v36 = v35;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v33, 0x149u, 1u, (BOOL *)&v174, v24);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x149u, v34, 0, v24);
    v36 = v37;
  }
  *(float *)(a1 + 60) = v36 * a7;
  v38 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v39 = *(unsigned __int8 *)(v38 + 12);
  if (v39 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v38, 0x159u, 0, (BOOL *)&v171, v24);
    v41 = v40;
    result = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v38, 0x159u, 1u, (BOOL *)&v174, v24);
  }
  else
  {
    result = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x159u, v39, 0, v24);
    v41 = v43;
  }
  *(float *)(a1 + 56) = fmaxf(v41, 0.01);
  if (!a5)
    return result;
  v44 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v45 = *(unsigned __int8 *)(v44 + 12);
  if (v45 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v46 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v44, 0x5Bu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v44, 0x5Bu, v14, 1, &v174);
  }
  else
  {
    v46 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x5Bu, v14, v45, 0);
  }
  *(_BYTE *)a1 = v46;
  v47 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v48 = *(unsigned __int8 *)(v47 + 12);
  if (v48 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v49 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v47, 0x7Bu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v47, 0x7Bu, v14, 1u, &v174);
  }
  else
  {
    v49 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x7Bu, v14, v48, 0);
  }
  *(_BYTE *)(a1 + 101) = v49;
  v50 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v51 = *(unsigned __int8 *)(v50 + 12);
  if (v51 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v52 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v50, 0x13Au, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v50, 0x13Au, v14, 1, &v174);
  }
  else
  {
    v52 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x13Au, v14, v51, 0);
  }
  *(_BYTE *)(a1 + 1) = v52;
  v53 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v54 = *(unsigned __int8 *)(v53 + 12);
  if (v54 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v55 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v53, 0x68u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v53, 0x68u, v14, 1u, &v174);
  }
  else
  {
    v55 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x68u, v14, v54, 0);
  }
  *(_DWORD *)(a1 + 16) = v55;
  v56 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v57 = *(unsigned __int8 *)(v56 + 12);
  if (v57 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v58 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v56, 0x84u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v56, 0x84u, v14, 1u, &v174);
  }
  else
  {
    v58 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x84u, v14, v57, 0);
  }
  v59 = (char)v58;
  if ((char)v58 <= -3)
    v59 = -3;
  if (v59 >= 7)
    LOBYTE(v59) = 7;
  if ((v58 - 8) >= 0xF5u)
    LOBYTE(v59) = v58;
  *(_BYTE *)(a1 + 100) = v59;
  v60 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v61 = *(unsigned __int8 *)(v60 + 12);
  if (v61 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v60, 0xD6u, v14, 0) & 1) != 0
      || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v60, 0xD6u, v14, 1u) & 1) != 0)
    {
      LOBYTE(v171) = 1;
      v174.i8[0] = 1;
      v62 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v60, 0xD6u, v14, 0, &v171);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v60, 0xD6u, v14, 1, &v174);
LABEL_57:
      LOBYTE(v63) = v62 != 0;
      goto LABEL_63;
    }
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v64 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v60, 0xAAu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v60, 0xAAu, v14, 1u, &v174);
  }
  else
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v60, 0xD6u, v14, *(unsigned __int8 *)(v60 + 12)))
    {
      v62 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v60, 0xD6u, v14, v61, 0);
      goto LABEL_57;
    }
    v64 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v60, 0xAAu, v14, v61, 0);
  }
  if (v64 > 0xBu)
    LOBYTE(v63) = 0;
  else
    v63 = (0xFFEu >> v64) & 1;
LABEL_63:
  *(_BYTE *)(a1 + 2) = v63;
  v65 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v66 = *(unsigned __int8 *)(v65 + 12);
  if (v66 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v67 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x15Bu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v65, 0x15Bu, v14, 1u, &v174);
  }
  else
  {
    v67 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Bu, v14, v66, 0);
  }
  *(_DWORD *)(a1 + 64) = v67;
  v68 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v69 = *(unsigned __int8 *)(v68 + 12);
  if (v69 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v70 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x15Cu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x15Cu, v14, 1u, &v174);
  }
  else
  {
    v70 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Cu, v14, v69, 0);
  }
  *(_DWORD *)(a1 + 68) = v70;
  v71 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v72 = *(unsigned __int8 *)(v71 + 12);
  if (v72 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v73 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v71, 0xEBu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v71, 0xEBu, v14, 1u, &v174);
  }
  else
  {
    v73 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xEBu, v14, v72, 0);
  }
  *(_DWORD *)(a1 + 20) = v73;
  v74 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v75 = *(unsigned __int8 *)(v74 + 12);
  if (v75 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v74, 0xEDu, v14, 0) & 1) != 0
      || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v74, 0xEDu, v14, 1u) & 1) != 0)
    {
      LOBYTE(v171) = 1;
      v174.i8[0] = 1;
      v76 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v74, 0xEDu, v14, 0, &v171);
      v77 = v74;
      v78 = 237;
    }
    else
    {
      LOBYTE(v171) = 1;
      v174.i8[0] = 1;
      v76 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v74, 0x84u, v14, 0, &v171);
      v77 = v74;
      v78 = 132;
    }
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v77, v78, v14, 1u, &v174);
  }
  else
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v74, 0xEDu, v14, *(unsigned __int8 *)(v74 + 12)))
    {
      v79 = v74;
      v80 = 237;
    }
    else
    {
      v79 = v74;
      v80 = 132;
    }
    v76 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<int>(v79, v80, v14, v75, 0);
  }
  v81 = (char)v76;
  if ((char)v76 <= -3)
    v81 = -3;
  if (v81 >= 7)
    LOBYTE(v81) = 7;
  if ((v76 - 8) >= 0xF5u)
    LOBYTE(v81) = v76;
  *(_BYTE *)(a1 + 120) = v81;
  v82 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v83 = *(unsigned __int8 *)(v82 + 12);
  if (v83 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v84 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v82, 0xECu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v82, 0xECu, v14, 1u, &v174);
  }
  else
  {
    v84 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xECu, v14, v83, 0);
  }
  *(_BYTE *)(a1 + 121) = v84;
  v85 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v86 = *(unsigned __int8 *)(v85 + 12);
  if (v86 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v87 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v85, 0x1D5u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v85, 0x1D5u, v14, 1, &v174);
  }
  else
  {
    v87 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x1D5u, v14, v86, 0);
  }
  if (v87 >= 0x1F)
    v88 = 31;
  else
    v88 = v87;
  *(_BYTE *)(a1 + 122) = v88;
  v89 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v90 = *(unsigned __int8 *)(v89 + 12);
  if (v90 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v91 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x1D6u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v89, 0x1D6u, v14, 1u, &v174);
  }
  else
  {
    v91 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1D6u, v14, v90, 0);
  }
  *(_DWORD *)(a1 + 116) = v91;
  v92 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v93 = *(unsigned __int8 *)(v92 + 12);
  if (v93 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x9Du, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x9Du, v14, 1u, &v174);
  }
  else
  {
    v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x9Du, v14, v93, 0);
  }
  *(_DWORD *)(a1 + 40) = v94;
  v95 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v96 = *(unsigned __int8 *)(v95 + 12);
  if (v96 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v95, 0x9Eu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v95, 0x9Eu, v14, 1u, &v174);
  }
  else
  {
    v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x9Eu, v14, v96, 0);
  }
  *(_DWORD *)(a1 + 44) = v97;
  v98 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v99 = *(unsigned __int8 *)(v98 + 12);
  if (v99 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98, 0x1B3u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98, 0x1B3u, v14, 1u, &v174);
  }
  else
  {
    v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1B3u, v14, v99, 0);
  }
  *(_DWORD *)(a1 + 48) = v100;
  v101 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v102 = *(unsigned __int8 *)(v101 + 12);
  if (v102 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v101, 0x1BFu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v101, 0x1BFu, v14, 1u, &v174);
  }
  else
  {
    v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1BFu, v14, v102, 0);
  }
  *(_DWORD *)(a1 + 52) = v103;
  v104 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v105 = *(unsigned __int8 *)(v104 + 12);
  if (v105 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v106 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v104, 0xA9u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v104, 0xA9u, v14, 1u, &v174);
  }
  else
  {
    v106 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xA9u, v14, v105, 0);
  }
  *(_BYTE *)(a1 + 110) = v106;
  v107 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v108 = *(unsigned __int8 *)(v107 + 12);
  if (v108 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v109 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v107, 0xDFu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v107, 0xDFu, v14, 1u, &v174);
  }
  else
  {
    v109 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xDFu, v14, v108, 0);
  }
  *(_BYTE *)(a1 + 111) = v109;
  v110 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v111 = *(unsigned __int8 *)(v110 + 12);
  if (v111 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v112 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v110, 0x13Bu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v110, 0x13Bu, v14, 1u, &v174);
  }
  else
  {
    v112 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x13Bu, v14, v111, 0);
  }
  *(_BYTE *)(a1 + 102) = v112;
  v113 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v114 = *(unsigned __int8 *)(v113 + 12);
  if (v114 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v115 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v113, 0xE0u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v113, 0xE0u, v14, 1u, &v174);
  }
  else
  {
    v115 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xE0u, v14, v114, 0);
  }
  *(_BYTE *)(a1 + 104) = gss::MaskToLabelPosition((unsigned __int16)v115);
  v116 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v117 = *(unsigned __int8 *)(v116 + 12);
  if (v117 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v118 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v116, 0xE1u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v116, 0xE1u, v14, 1u, &v174);
  }
  else
  {
    v118 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xE1u, v14, v117, 0);
  }
  *(_WORD *)(a1 + 106) = v118;
  v119 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v120 = *(unsigned __int8 *)(v119 + 12);
  if (v120 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v121 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v119, 0xA7u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v119, 0xA7u, v14, 1u, &v174);
  }
  else
  {
    v121 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xA7u, v14, v120, 0);
  }
  *(_BYTE *)(a1 + 108) = v121;
  v122 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v123 = *(unsigned __int8 *)(v122 + 12);
  if (v123 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v124 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v122, 0xA8u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v122, 0xA8u, v14, 1u, &v174);
  }
  else
  {
    v124 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xA8u, v14, v123, 0);
  }
  *(_BYTE *)(a1 + 109) = v124;
  v125 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v126 = *(unsigned __int8 *)(v125 + 12);
  if (v126 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v127 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v125, 0x110u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v125, 0x110u, v14, 1, &v174);
  }
  else
  {
    v127 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x110u, v14, v126, 0);
  }
  *(_BYTE *)(a1 + 3) = v127;
  v128 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v129 = *(unsigned __int8 *)(v128 + 12);
  if (v129 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v130 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v128, 0x14Eu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v128, 0x14Eu, v14, 1u, &v174);
  }
  else
  {
    v130 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x14Eu, v14, v129, 0);
  }
  *(_BYTE *)(a1 + 112) = v130;
  v131 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v132 = *(unsigned __int8 *)(v131 + 12);
  if (v132 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v133 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v131, 0x157u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v131, 0x157u, v14, 1u, &v174);
  }
  else
  {
    v133 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x157u, v14, v132, 0);
  }
  *(_BYTE *)(a1 + 113) = v133;
  v134 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v135 = *(unsigned __int8 *)(v134 + 12);
  if (v135 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v136 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v134, 0x161u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v134, 0x161u, v14, 1u, &v174);
  }
  else
  {
    v136 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x161u, v14, v135, 0);
  }
  *(_BYTE *)(a1 + 103) = v136;
  v137 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v138 = *(unsigned __int8 *)(v137 + 12);
  if (v138 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v139 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v137, 0x163u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v137, 0x163u, v14, 1u, &v174);
  }
  else
  {
    v139 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x163u, v14, v138, 0);
  }
  *(_DWORD *)(a1 + 72) = v139;
  v173 = 1;
  v140 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v141 = *(unsigned __int8 *)(v140 + 12);
  if (v141 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v142 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v140, 0x165u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v140, 0x165u, v14, 1u, &v174);
    v143 = (v171 | v174.u8[0]) != 0;
  }
  else
  {
    v142 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x165u, v14, v141, &v173);
    v143 = v173;
  }
  v144 = 3.4028e38;
  if (v143)
    v144 = v142;
  *(float *)(a1 + 76) = v144;
  v145 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v146 = *(unsigned __int8 *)(v145 + 12);
  if (v146 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v147 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v145, 0x1B4u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v145, 0x1B4u, v14, 1u, &v174);
  }
  else
  {
    v147 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1B4u, v14, v146, 0);
  }
  *(_DWORD *)(a1 + 80) = v147;
  v148 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v149 = *(unsigned __int8 *)(v148 + 12);
  if (v149 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v150 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v148, 0x1BEu, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v148, 0x1BEu, v14, 1u, &v174);
  }
  else
  {
    v150 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1BEu, v14, v149, 0);
  }
  *(_DWORD *)(a1 + 84) = v150;
  v173 = 1;
  v151 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v152 = *(unsigned __int8 *)(v151 + 12);
  if (v152 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v153 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v151, 0x1C1u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v151, 0x1C1u, v14, 1u, &v174);
    v154 = (v171 | v174.u8[0]) != 0;
  }
  else
  {
    v153 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1C1u, v14, v152, &v173);
    v154 = v173;
  }
  v155 = 0.0;
  if (v154)
    v155 = v153;
  *(float *)(a1 + 88) = v155;
  v173 = 1;
  v156 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v157 = *(unsigned __int8 *)(v156 + 12);
  if (v157 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v158 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v156, 0x1C2u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v156, 0x1C2u, v14, 1u, &v174);
    v159 = (v171 | v174.u8[0]) != 0;
  }
  else
  {
    v158 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1C2u, v14, v157, &v173);
    v159 = v173;
  }
  v160 = 180.0;
  if (v159)
    v160 = v158;
  *(float *)(a1 + 92) = v160;
  v161 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v162 = *(unsigned __int8 *)(v161 + 12);
  if (v162 == 2)
  {
    LOBYTE(v171) = 1;
    v174.i8[0] = 1;
    v163 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v161, 0xD2u, v14, 0, &v171);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v161, 0xD2u, v14, 1u, &v174);
  }
  else
  {
    v163 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xD2u, v14, v162, 0);
  }
  *(_BYTE *)(a1 + 4) = v163;
  v172 = 0;
  v171 = 0;
  md::FontSizeInfo::update((uint64_t)&v171, a2, a3, a4, 0, a6);
  *(_DWORD *)(a1 + 96) = HIDWORD(v171);
  v164 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v165 = *(unsigned __int8 *)(v164 + 12);
  if (v165 == 2)
  {
    v174.i8[0] = 1;
    v173 = 1;
    v166 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v164, 0x15Eu, v14, 0, &v174);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v164, 0x15Eu, v14, 1u, &v173);
  }
  else
  {
    v166 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Eu, v14, v165, 0);
  }
  *(_DWORD *)(a1 + 24) = v166;
  v167 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v168 = *(unsigned __int8 *)(v167 + 12);
  if (v168 == 2)
  {
    v174.i8[0] = 1;
    v173 = 1;
    v169 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v167, 0xD2u, v14, 0, &v174);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v167, 0xD2u, v14, 1u, &v173);
  }
  else
  {
    v169 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xD2u, v14, v168, 0);
  }
  *(_BYTE *)(a1 + 4) = v169;
  result = (unint64_t)gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v174, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x1B6u, v14, 1u, 0);
  v170 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v174)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
  *(int16x4_t *)v170.i8 = vmovn_s32((int32x4_t)v170);
  *(_DWORD *)(a1 + 28) = vmovn_s16(v170).u32[0];
  return result;
}

void md::LabelTextStyleGroup::~LabelTextStyleGroup(void **this)
{
  *this = off_1E42973A8;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
}

{
  *this = off_1E42973A8;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t *md::LabelTextStyleGroup::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, float a6, float a7)
{
  unsigned int v13;
  void **v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  void **v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  unint64_t v35;
  float v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t *result;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  float v48;
  int16x8_t v49;
  int16x8_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int16x8_t v57;
  int16x8_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int16x8_t v69;
  uint64_t v70;
  unsigned int v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x2_t v79;
  __int16 v80;
  char v81;
  std::string v82;
  char v83;

  if ((int)a6 >= 0x17)
    v13 = 23;
  else
    v13 = (int)a6;
  if (a5)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    v14 = (void **)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      operator delete(*v14);
    *v14 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 100) = 1099956224;
    *(_QWORD *)(a1 + 104) = 0;
    *(_WORD *)(a1 + 112) = 0;
  }
  v79 = 0;
  v80 = 256;
  v81 = 0;
  md::FontSizeInfo::update((uint64_t)&v79, a2, a3, a4, *(unsigned __int8 *)(a1 + 64), a6);
  *(_BYTE *)(a1 + 113) = v81;
  *(float32x2_t *)(a1 + 96) = vmul_n_f32(v79, a7);
  if (a5)
  {
    v15 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v16 = *(unsigned __int8 *)(v15 + 12);
    if (v16 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v17 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x6Fu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v15, 0x6Fu, v13, 1, &v83);
    }
    else
    {
      v17 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x6Fu, v13, v16, 0);
    }
    *(_BYTE *)(a1 + 109) = v17;
    v18 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v19 = *(unsigned __int8 *)(v18 + 12);
    if (v19 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v20 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v18, 0x18Du, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v18, 0x18Du, v13, 1, &v83);
    }
    else
    {
      v20 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x18Du, v13, v19, 0);
    }
    *(_BYTE *)(a1 + 110) = v20;
    v21 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v22 = *(unsigned __int8 *)(v21 + 12);
    if (v22 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x18Eu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v21, 0x18Eu, v13, 1, &v83);
    }
    else
    {
      v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x18Eu, v13, v22, 0);
    }
    *(_BYTE *)(a1 + 111) = v23;
    v24 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v25 = *(unsigned __int8 *)(v24 + 12);
    if (v25 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v26 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v24, 0x6Eu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v24, 0x6Eu, v13, 1, &v83);
    }
    else
    {
      v26 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x6Eu, v13, v25, 0);
    }
    *(_BYTE *)(a1 + 108) = v26;
    v27 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v28 = *(unsigned __int8 *)(v27 + 12);
    if (v28 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v29 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x75u, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v27, 0x75u, v13, 1, &v83);
    }
    else
    {
      v29 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x75u, v13, v28, 0);
    }
    v30 = (void **)(a1 + 72);
    *(_BYTE *)(a1 + 112) = v29;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x72u, v13, 1);
    if (*(char *)(a1 + 95) < 0)
      operator delete(*v30);
    *(_OWORD *)v30 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
    v31 = HIBYTE(v80);
    v32 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v33 = *(unsigned __int8 *)(v32 + 12);
    if (v33 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x6Du, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v32, 0x6Du, v13, 1u, &v83);
    }
    else
    {
      v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x6Du, v13, v33, 0);
    }
    *(float *)(a1 + 104) = v34 * (float)(a7 * *(float *)(a3 + 20 * v31 + 4));
  }
  v35 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v36 = fminf(fmaxf(a6, 0.0), 23.0);
  v37 = *(unsigned __int8 *)(v35 + 12);
  if (v37 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v35, 0x144u, 0, (BOOL *)&v82, v36);
    v39 = v38;
    result = (uint64_t *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v35, 0x144u, 1u, (BOOL *)&v83, v36);
    *(_DWORD *)(a1 + 44) = v39;
    if (!a5)
      return result;
  }
  else
  {
    result = (uint64_t *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x144u, v37, 0, v36);
    *(_DWORD *)(a1 + 44) = v41;
    if (!a5)
      return result;
  }
  v42 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0xD5u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0xD5u, v13, 1u, &v83);
  }
  else
  {
    v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xD5u, v13, v43, 0);
  }
  *(_BYTE *)(a1 + 60) = v44;
  if (*(_BYTE *)(a1 + 64))
  {
    v45 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v46 = *(unsigned __int8 *)(v45 + 12);
    if (v46 == 2)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x11Fu, v13, 0, &v82);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x11Fu, v13, 1u, &v83);
      if (!(_BYTE)v47)
        goto LABEL_43;
      goto LABEL_42;
    }
    v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x11Fu, v13, v46, 0);
    if ((_BYTE)v47)
LABEL_42:
      *(_BYTE *)(a1 + 60) = v47;
  }
LABEL_43:
  v48 = fminf((float)v13, 23.0);
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x73u, 1u, v48);
  v76 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  v49 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v76));
  *(int16x4_t *)v49.i8 = vmovn_s32((int32x4_t)v49);
  *(_DWORD *)(a1 + 8) = vmovn_s16(v49).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x74u, 1u, v48);
  v50 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v76));
  *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
  *(_DWORD *)(a1 + 12) = vmovn_s16(v50).u32[0];
  v51 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v52 = *(unsigned __int8 *)(v51 + 12);
  if (v52 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0x1B7u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0x1B7u, v13, 1u, &v83);
  }
  else
  {
    v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1B7u, v13, v52, 0);
  }
  *(_DWORD *)(a1 + 28) = v53;
  v54 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v55 = *(unsigned __int8 *)(v54 + 12);
  if (v55 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0x15Eu, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0x15Eu, v13, 1u, &v83);
  }
  else
  {
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Eu, v13, v55, 0);
  }
  *(_DWORD *)(a1 + 32) = v56;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Du, v13, 1u, 0);
  v77 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  v57 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v77));
  *(int16x4_t *)v57.i8 = vmovn_s32((int32x4_t)v57);
  *(_DWORD *)(a1 + 16) = vmovn_s16(v57).u32[0];
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x15Fu, v13, 1u, 0);
  v58 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), v77));
  *(int16x4_t *)v58.i8 = vmovn_s32((int32x4_t)v58);
  *(_DWORD *)(a1 + 20) = vmovn_s16(v58).u32[0];
  v59 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v60 = *(unsigned __int8 *)(v59 + 12);
  if (v60 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, 0) & 1) != 0
      || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, 1u) & 1) != 0)
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0x1B8u, v13, 0, &v82);
      v62 = v59;
      v63 = 440;
    }
    else
    {
      v82.__r_.__value_.__s.__data_[0] = 1;
      v83 = 1;
      v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v59, 0x160u, v13, 0, &v82);
      v62 = v59;
      v63 = 352;
    }
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v62, v63, v13, 1u, &v83);
  }
  else
  {
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v59, 0x1B8u, v13, *(unsigned __int8 *)(v59 + 12)))
    {
      v64 = v59;
      v65 = 440;
    }
    else
    {
      v64 = v59;
      v65 = 352;
    }
    v61 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, v65, v13, v60, 0);
  }
  *(_DWORD *)(a1 + 36) = v61;
  v66 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v67 = *(unsigned __int8 *)(v66 + 12);
  if (v67 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x16Bu, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x16Bu, v13, 1u, &v83);
  }
  else
  {
    v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x16Bu, v13, v67, 0);
  }
  *(_DWORD *)(a1 + 40) = v68;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v82, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x93u, v13, 1u, 0);
  v69 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v82.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x3B7F00FFu)));
  *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)v69);
  *(_DWORD *)(a1 + 24) = vmovn_s16(v69).u32[0];
  v70 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v71 = *(unsigned __int8 *)(v70 + 12);
  if (v71 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x133u, v13, 0, &v82);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v70, 0x133u, v13, 1u, &v83);
  }
  else
  {
    v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x133u, v13, v71, 0);
  }
  *(float *)(a1 + 48) = v72 * a7;
  v73 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v74 = *(unsigned __int8 *)(v73 + 12);
  if (v74 == 2)
  {
    v82.__r_.__value_.__s.__data_[0] = 1;
    v83 = 1;
    v75 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, 0, &v82);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, 1u, &v83);
  }
  else
  {
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v73, v13, v74, 0);
    v75 = *result;
  }
  *(float32x2_t *)(a1 + 52) = vmul_n_f32((float32x2_t)v75, a7);
  return result;
}

void md::LabelIconStyleGroup::~LabelIconStyleGroup(md::LabelIconStyleGroup *this)
{
  *(_QWORD *)this = &off_1E4297368;
  if (*((_BYTE *)this + 100))
    *((_BYTE *)this + 100) = 0;
}

{
  *(_QWORD *)this = &off_1E4297368;
  if (*((_BYTE *)this + 100))
    *((_BYTE *)this + 100) = 0;
  JUMPOUT(0x1A1AF4E00);
}

int *md::LabelIconStyleGroup::update(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5, float a6)
{
  unsigned int v11;
  float *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  float v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  float v81;
  uint64_t v82;
  float *v83;
  float v84;
  uint64_t v85;
  unsigned int v86;
  float v87;
  float v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int *result;
  float32x4_t v105;
  uint16x4_t v106;
  char v107;
  unsigned __int8 v108;

  if ((int)a5 >= 0x17)
    v11 = 23;
  else
    v11 = (int)a5;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (float *)(a1 + 8);
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(_BYTE *)(a1 + 100))
    *(_BYTE *)(a1 + 100) = 0;
  v13 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v14 = *(unsigned __int8 *)(v13 + 12);
  if (v14 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v15 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v13, 0xAAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v13, 0xAAu, v11, 1u, &v108);
  }
  else
  {
    v15 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xAAu, v11, v14, 0);
  }
  *(_BYTE *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v17 = *(unsigned __int8 *)(v16 + 12);
  if (v17 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v18 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v16, 0xBAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v16, 0xBAu, v11, 1u, &v108);
  }
  else
  {
    v18 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xBAu, v11, v17, 0);
  }
  *(_DWORD *)(a1 + 64) = v18;
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v20 = *(unsigned __int8 *)(v19 + 12);
  if (v20 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0xBEu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v19, 0xBEu, v11, 1u, &v108);
  }
  else
  {
    v21 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xBEu, v11, v20, 0);
  }
  *(_DWORD *)(a1 + 68) = v21;
  v22 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v23 = *(unsigned __int8 *)(v22 + 12);
  if (v23 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0xC0u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0xC0u, v11, 1u, &v108);
  }
  else
  {
    v24 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xC0u, v11, v23, 0);
  }
  *(_BYTE *)(a1 + 93) = v24;
  v25 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v26 = *(unsigned __int8 *)(v25 + 12);
  if (v26 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xBDu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v25, 0xBDu, v11, 1u, &v108);
  }
  else
  {
    v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xBDu, v11, v26, 0);
  }
  *(_BYTE *)(a1 + 92) = v27;
  v28 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v29 = *(unsigned __int8 *)(v28 + 12);
  if (v29 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0xD4u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v28, 0xD4u, v11, 1u, &v108);
  }
  else
  {
    v30 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xD4u, v11, v29, 0);
  }
  *(_BYTE *)(a1 + 89) = v30;
  v31 = fminf((float)v11, 23.0);
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(_QWORD *)(*(_QWORD *)a2 + 24), 0xD3u, 1u, v31);
  v105 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  v32 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
  *(_DWORD *)(a1 + 72) = vmovn_s16(v32).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(_QWORD *)(*(_QWORD *)a2 + 24), 0xACu, 1u, v31);
  v33 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v33.i8 = vmovn_s32((int32x4_t)v33);
  *(_DWORD *)(a1 + 76) = vmovn_s16(v33).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x5Du, 1u, v31);
  v34 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v34.i8 = vmovn_s32((int32x4_t)v34);
  *(_DWORD *)(a1 + 80) = vmovn_s16(v34).u32[0];
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v106, *(_QWORD *)(*(_QWORD *)a2 + 24), 0x193u, 1u, v31);
  v35 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v106)), v105));
  *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
  *(_DWORD *)(a1 + 84) = vmovn_s16(v35).u32[0];
  v36 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v37 = *(unsigned __int8 *)(v36 + 12);
  if (v37 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v38 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x5Eu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x5Eu, v11, 1u, &v108);
  }
  else
  {
    v38 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x5Eu, v11, v37, 0);
  }
  *(float *)(a1 + 44) = v38 * a6;
  v39 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v40 = *(unsigned __int8 *)(v39 + 12);
  if (v40 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v41 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x61u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x61u, v11, 1u, &v108);
  }
  else
  {
    v41 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x61u, v11, v40, 0);
  }
  *(float *)(a1 + 48) = v41 * a6;
  v42 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x194u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v42, 0x194u, v11, 1u, &v108);
  }
  else
  {
    v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x194u, v11, v43, 0);
  }
  *(float *)(a1 + 52) = v44 * a6;
  v45 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v46 = *(unsigned __int8 *)(v45 + 12);
  if (v46 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0xD1u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0xD1u, v11, 1u, &v108);
  }
  else
  {
    v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xD1u, v11, v46, 0);
  }
  *(_BYTE *)(a1 + 90) = v47;
  v48 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v49 = *(unsigned __int8 *)(v48 + 12);
  if (v49 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0xCFu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v48, 0xCFu, v11, 1u, &v108);
  }
  else
  {
    v50 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xCFu, v11, v49, 0);
  }
  *(_BYTE *)(a1 + 91) = v50;
  v51 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v52 = *(unsigned __int8 *)(v51 + 12);
  if (v52 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0xDAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v51, 0xDAu, v11, 1u, &v108);
  }
  else
  {
    v53 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xDAu, v11, v52, 0);
  }
  *(_DWORD *)(a1 + 16) = v53;
  v54 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v55 = *(unsigned __int8 *)(v54 + 12);
  if (v55 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0xBBu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v54, 0xBBu, v11, 1u, &v108);
  }
  else
  {
    v56 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xBBu, v11, v55, 0);
  }
  *(_DWORD *)(a1 + 20) = v56;
  v57 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v58 = *(unsigned __int8 *)(v57 + 12);
  if (v58 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v57, 0x112u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v57, 0x112u, v11, 1u, &v108);
  }
  else
  {
    v59 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x112u, v11, v58, 0);
  }
  *(_DWORD *)(a1 + 28) = v59;
  v60 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v61 = *(unsigned __int8 *)(v60 + 12);
  if (v61 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0xA6u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v60, 0xA6u, v11, 1u, &v108);
  }
  else
  {
    v62 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0xA6u, v11, v61, 0);
  }
  *(_DWORD *)(a1 + 24) = v62;
  v63 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v64 = *(unsigned __int8 *)(v63 + 12);
  if (v64 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v65 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x182u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x182u, v11, 1, &v108);
  }
  else
  {
    v65 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x182u, v11, v64, 0);
  }
  *(_BYTE *)(a1 + 96) = v65;
  v66 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v67 = *(unsigned __int8 *)(v66 + 12);
  if (v67 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x1B1u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v66, 0x1B1u, v11, 1u, &v108);
  }
  else
  {
    v68 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1B1u, v11, v67, 0);
  }
  *(_DWORD *)(a1 + 32) = v68;
  v69 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v70 = *(unsigned __int8 *)(v69 + 12);
  if (v70 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v71 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v69, 0x1DAu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>((unsigned __int16 *)v69, 0x1DAu, v11, 1, &v108);
  }
  else
  {
    v71 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned char>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x1DAu, v11, v70, 0);
  }
  *(_BYTE *)(a1 + 97) = v71;
  v72 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v73 = *(unsigned __int8 *)(v72 + 12);
  if (v73 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x1DFu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v72, 0x1DFu, v11, 1u, &v108);
  }
  else
  {
    v74 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1DFu, v11, v73, 0);
  }
  *(_DWORD *)(a1 + 40) = v74;
  v75 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v76 = *(unsigned __int8 *)(v75 + 12);
  if (v76 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x1DBu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x1DBu, v11, 1u, &v108);
  }
  else
  {
    v77 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x1DBu, v11, v76, 0);
  }
  *(_DWORD *)(a1 + 36) = v77;
  v78 = a4;
  v79 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v80 = *(unsigned __int8 *)(v79 + 12);
  if (v80 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v81 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x111u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v79, 0x111u, v11, 1u, &v108);
  }
  else
  {
    v81 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x111u, v11, v80, 0);
  }
  v82 = a3 + 20 * v78;
  v84 = *(float *)(v82 + 12);
  v83 = (float *)(v82 + 12);
  *v12 = v81 * (float)(a6 * v84);
  v107 = 1;
  v85 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v86 = *(unsigned __int8 *)(v85 + 12);
  if (v86 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x172u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x172u, v11, 1u, &v108);
    if (v106.u8[0] | v108)
    {
LABEL_71:
      v88 = fminf((float)(v87 * a6) * *v83, *v12);
      goto LABEL_74;
    }
  }
  else
  {
    v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x172u, v11, v86, &v107);
    if (v107)
      goto LABEL_71;
  }
  v88 = *v12;
LABEL_74:
  *(float *)(a1 + 12) = v88;
  v89 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v90 = *(unsigned __int8 *)(v89 + 12);
  if (v90 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v91 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v89, 0x173u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v89, 0x173u, v11, 1, &v108);
  }
  else
  {
    v91 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a2 + 24), 0x173u, v11, v90, 0);
  }
  *(_BYTE *)(a1 + 95) = v91;
  v92 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v93 = *(unsigned __int8 *)(v92 + 12);
  if (v93 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x113u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v92, 0x113u, v11, 1u, &v108);
  }
  else
  {
    v94 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x113u, v11, v93, 0);
  }
  *(_BYTE *)(a1 + 94) = v94;
  v95 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v96 = *(unsigned __int8 *)(v95 + 12);
  if (v96 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v95, 0x16Cu, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v95, 0x16Cu, v11, 1u, &v108);
  }
  else
  {
    v97 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x16Cu, v11, v96, 0);
  }
  *(_DWORD *)(a1 + 56) = v97;
  v98 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v99 = *(unsigned __int8 *)(v98 + 12);
  if (v99 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x174u, v11, 0, &v106);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v98, 0x174u, v11, 1u, &v108);
  }
  else
  {
    v100 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)a2 + 24), 0x174u, v11, v99, 0);
  }
  *(_DWORD *)(a1 + 60) = v100;
  v107 = 1;
  v101 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v102 = *(unsigned __int8 *)(v101 + 12);
  if (v102 == 2)
  {
    v106.i8[0] = 1;
    v108 = 1;
    v103 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, 0, &v106);
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, 1u, &v108);
    if (!(v106.u8[0] | v108))
      return result;
  }
  else
  {
    result = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v101, 0x162u, v11, v102, &v107);
    v103 = *result;
    if (!v107)
      return result;
  }
  if (!*(_BYTE *)(a1 + 100))
    *(_BYTE *)(a1 + 100) = 1;
  *(_BYTE *)(a1 + 101) = v103;
  return result;
}

void md::LabelLineStyleGroup::~LabelLineStyleGroup(md::LabelLineStyleGroup *this)
{
  *(_QWORD *)this = off_1E4297388;
  if (*((char *)this + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), *((_QWORD *)this + 9), *((_QWORD *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
}

{
  *(_QWORD *)this = off_1E4297388;
  if (*((char *)this + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), *((_QWORD *)this + 9), *((_QWORD *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelPointStyleGroup::~LabelPointStyleGroup(md::LabelPointStyleGroup *this)
{
  md::LabelPointStyleGroup::~LabelPointStyleGroup(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  *(_QWORD *)this = &off_1E42991B0;
  if (*((char *)this + 263) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 33) + 40))(*((_QWORD *)this + 33), *((_QWORD *)this + 30), *((_QWORD *)this + 32) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*((char *)this + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 199) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29), *((_QWORD *)this + 26), *((_QWORD *)this + 28) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 167) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), *((_QWORD *)this + 22), *((_QWORD *)this + 24) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 135) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), *((_QWORD *)this + 18), *((_QWORD *)this + 20) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 135) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 103) & 0x80000000) == 0)
      return;
LABEL_13:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), *((_QWORD *)this + 10), *((_QWORD *)this + 12) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
LABEL_12:
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 17) + 40))(*((_QWORD *)this + 17), *((_QWORD *)this + 14), *((_QWORD *)this + 16) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 103) < 0)
    goto LABEL_13;
}

void md::LabelComponentStyleGroup::~LabelComponentStyleGroup(md::LabelComponentStyleGroup *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelAnnotationStyleGroup::~LabelAnnotationStyleGroup(md::LabelAnnotationStyleGroup *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::LabelAnimationStyleGroup::~LabelAnimationStyleGroup(md::LabelAnimationStyleGroup *this)
{
  JUMPOUT(0x1A1AF4E00);
}

float md::LabelDisplayCoreStyleGroup::setZoom(md::LabelDisplayCoreStyleGroup *this, float a2)
{
  float v2;
  unsigned int v3;
  unsigned int v4;
  float v5;
  float v6;
  float v7;
  float result;

  v2 = fminf(fmaxf(a2, 0.0), 23.0);
  v3 = (int)v2;
  if ((int)v2 >= 0x17)
    v4 = 23;
  else
    v4 = (int)v2;
  v5 = *((float *)this + v4);
  if (((*((_QWORD *)this + 12) >> v4) & 1) != 0)
  {
    if (v3 >= 0x16)
      v3 = 22;
    v6 = *((float *)this + v3 + 1);
    if (*((_BYTE *)this + 104) || (v7 = 0.0, v5 != 0.0) && v6 != 0.0)
      v7 = v5 + (float)((float)(v6 - v5) * (float)(v2 - (float)v4));
  }
  else
  {
    v7 = *((float *)this + v4);
  }
  result = fmaxf(v7, 0.01);
  *((float *)this + 28) = result;
  return result;
}

void altitude::TileSetNode::~TileSetNode(altitude::TileSetNode *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E42C3D90;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E42C3D90;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

void altitude::RefineTileSet::~RefineTileSet(altitude::RefineTileSet *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42C4158;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C4158;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

void altitude::TileSetNode::collectSubTreeInSet(altitude::TileSetNode *a1, uint64_t a2, altitude::CoarsenTileSet *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  altitude::Tile *v32;

  v7 = (_QWORD *)*((_QWORD *)a1 + 5);
  v6 = (_QWORD *)*((_QWORD *)a1 + 6);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        v7 = (_QWORD *)*((_QWORD *)a1 + 6);
        goto LABEL_5;
      }
    }
  }
  if (v7 != v6)
    goto LABEL_11;
LABEL_5:
  v9 = (_QWORD *)*((_QWORD *)a1 + 8);
  v8 = (_QWORD *)*((_QWORD *)a1 + 9);
  if (v9 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        v9 = (_QWORD *)*((_QWORD *)a1 + 9);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    v29 = *(_QWORD *)(a2 + 304);
    v28 = *(_QWORD *)(a2 + 312);
    if (v28 != v29)
    {
      v30 = 0;
      v31 = 1;
      do
      {
        v32 = *(altitude::Tile **)(v29 + 32 * v30);
        if (v32)
        {
          altitude::TileSetNode::collectSubTreeInSet(a1, v32, a3);
          v29 = *(_QWORD *)(a2 + 304);
          v28 = *(_QWORD *)(a2 + 312);
        }
        v30 = v31++;
      }
      while (v30 < (v28 - v29) >> 5);
    }
  }
  else
  {
LABEL_11:
    v11 = (char *)*((_QWORD *)a3 + 3);
    v10 = *((_QWORD *)a3 + 4);
    if ((unint64_t)v11 >= v10)
    {
      v12 = (char *)*((_QWORD *)a3 + 2);
      v13 = (v11 - v12) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v15 = v10 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = a2;
      v20 = v18 + 1;
      if (v11 == v12)
      {
        v12 = v11;
      }
      else
      {
        v21 = v11 - v12 - 8;
        if (v21 < 0x58)
          goto LABEL_45;
        if ((unint64_t)(v12 - v17) < 0x20)
          goto LABEL_45;
        v22 = (v21 >> 3) + 1;
        v23 = &v17[8 * v13 - 16];
        v24 = v11 - 16;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v18 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            v27 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v18 = v27;
          }
          while (v11 != v12);
          v12 = (char *)*((_QWORD *)a3 + 2);
        }
      }
      *((_QWORD *)a3 + 2) = v18;
      *((_QWORD *)a3 + 3) = v20;
      *((_QWORD *)a3 + 4) = v19;
      if (v12)
        operator delete(v12);
      *((_QWORD *)a3 + 3) = v20;
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *((_QWORD *)a3 + 3) = v11 + 8;
    }
  }
}

void altitude::CoarsenTileSet::~CoarsenTileSet(altitude::CoarsenTileSet *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42C42D8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E42C42D8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

void altitude::QuickSurfaceManager::~QuickSurfaceManager(void **this)
{
  altitude::QuickSurfaceManager::~QuickSurfaceManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  void (**v16)(char *);
  BOOL v17;

  *this = &off_1E42C57A8;
  altitude::QuickSurfaceManager::clear((altitude::QuickSurfaceManager *)this);
  v2 = (char *)this[13];
  if (v2)
  {
    v3 = (char *)this[14];
    v4 = this[13];
    if (v3 == v2)
    {
LABEL_17:
      this[14] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = this[13];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (char *)this[10];
  if (v11)
  {
    v12 = (char *)this[11];
    v13 = this[10];
    if (v12 != v11)
    {
      v14 = v12 - 24;
      v15 = v12 - 24;
      do
      {
        v16 = *(void (***)(char *))v15;
        v15 -= 24;
        (*v16)(v14);
        v17 = v14 == v11;
        v14 = v15;
      }
      while (!v17);
      v13 = this[10];
    }
    this[11] = v11;
    operator delete(v13);
  }
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void altitude::QuickSurfaceManager::clear(altitude::QuickSurfaceManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void (***v38)(_QWORD);
  void (***v39)(_QWORD);
  void (**v40)(_QWORD);
  BOOL v41;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 40) + 8);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 13);
    v4 = (uint64_t *)*((_QWORD *)this + 14);
    while (v3 != v4)
    {
      v5 = *v3;
      v6 = (std::__shared_weak_count *)v3[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (std::__shared_weak_count *)v3[3];
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = *(_QWORD **)(v5 + 48);
      v13 = *(_QWORD **)(v5 + 56);
      if (v12 != v13)
      {
        v14 = *(char **)(v2 + 224);
        v15 = *(char **)(v2 + 232);
        do
        {
          v18 = v14;
          if (v15 != v14)
          {
            v20 = 0;
            v21 = (v15 - v14) >> 4;
            if (v21 <= 1)
              v22 = 1;
            else
              v22 = (v15 - v14) >> 4;
            v23 = v14;
            do
            {
              if (*(_QWORD *)v23 == *v12)
              {
                v16 = &v14[16 * v20];
                v17 = &v14[16 * v21];
                v19 = *((_QWORD *)v17 - 2);
                v18 = v17 - 16;
                *(_QWORD *)v16 = v19;
                v16[8] = v18[8];
                *(_QWORD *)(v2 + 232) = v18;
                goto LABEL_14;
              }
              ++v20;
              v23 += 16;
            }
            while (v22 != v20);
            v18 = v15;
          }
LABEL_14:
          ++v12;
          v15 = v18;
        }
        while (v12 != v13);
      }
      if (!v9)
        goto LABEL_27;
      v24 = (unint64_t *)&v9->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!v6)
          goto LABEL_3;
      }
      else
      {
LABEL_27:
        if (!v6)
          goto LABEL_3;
      }
      v26 = (unint64_t *)&v6->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
LABEL_3:
      v3 += 4;
    }
  }
  v28 = *((_QWORD *)this + 13);
  for (i = *((_QWORD *)this + 14); i != v28; i -= 32)
  {
    v30 = *(std::__shared_weak_count **)(i - 8);
    if (!v30)
      goto LABEL_41;
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = *(std::__shared_weak_count **)(i - 24);
      if (!v33)
        continue;
    }
    else
    {
LABEL_41:
      v33 = *(std::__shared_weak_count **)(i - 24);
      if (!v33)
        continue;
    }
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *((_QWORD *)this + 14) = v28;
  v37 = (void (***)(_QWORD))*((_QWORD *)this + 10);
  v36 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  if (v36 != v37)
  {
    v38 = v36 - 3;
    v39 = v36 - 3;
    do
    {
      v40 = *v39;
      v39 -= 3;
      (*v40)(v38);
      v41 = v38 == v37;
      v38 = v39;
    }
    while (!v41);
  }
  *((_QWORD *)this + 11) = v37;
}

void altitude::QuickSurfaceManager::update(altitude::QuickSurfaceManager *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  void (***v73)(_QWORD);
  void (***v74)(_QWORD);
  void (**v75)(_QWORD);
  BOOL v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  double v83;
  long double v84;
  long double v85;
  long double v86;
  long double v87;
  double v88;
  long double v89;
  long double v90;
  unsigned int v91;
  double v92;
  long double v93;
  double v94;
  long double v95;
  double v96;
  long double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  long double v102;
  double v103;
  double v104;
  double v105;
  long double v106;
  long double v107;
  double v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  _QWORD *j;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void (***v153)(char *);
  void (**v154)(char *);
  unsigned int *v155;
  unsigned int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unsigned int v160;
  __int128 v161;
  unsigned int v162;
  __int128 v163;
  unsigned int v164;
  __int128 v165;
  uint64_t v166;
  __int16 v167;
  char v168;
  int v169;
  void (**v170)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v171;
  std::__shared_weak_count *v172;

  if (!*((_BYTE *)this + 64))
  {
    altitude::QuickSurfaceManager::clear(this);
    return;
  }
  v5 = **((_QWORD **)this + 4);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(double *)(v6 + 32);
  v8 = cos(3.14159265 - *(double *)(v6 + 40));
  v9 = *((_QWORD *)this + 10);
  v10 = *((_QWORD *)this + 11);
  if (v9 != v10)
    goto LABEL_3;
  if (*((_QWORD *)this + 13) != *((_QWORD *)this + 14))
    return;
  v77 = sqrt((v7 + v8 * -12756274.0) * v7 + 4.06806316e13);
  v78 = sqrt((v77 + 6378137.0) * (v77 + -6378137.0));
  v79 = *(_QWORD *)(v6 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(v6 + 8);
  *((_QWORD *)this + 7) = v79;
  for (i = *(_QWORD *)(*(_QWORD *)(v5 + 688) + 96); ; i += 8)
  {
    if (*(_BYTE *)(*(_QWORD *)i + 164))
    {
      v81 = *(_QWORD *)(*(_QWORD *)i + 32);
      if (v81)
        break;
    }
  }
  v82 = *(_QWORD *)(v81 + 288);
  v83 = *((double *)this + 5);
  v84 = cos(v83 + v83) * -559.82 + 111132.92;
  v85 = v84 + cos(v83 * 4.0) * 1.175;
  v86 = v85 + cos(v83 * 6.0) * -0.0023;
  v87 = tan(v83 * 0.5 + 0.78103484);
  v88 = log(v87);
  v89 = tan(v83 * 0.5 + 0.789761487);
  v90 = fabs((log(v89) - v88) * 0.159154943) * v78 / v86;
  v91 = log2(trunc(31.4159265 / v90));
  *((_DWORD *)this + 32) = v91;
  v92 = *((double *)this + 6) + 3.14159265;
  v93 = fmod(v92 + v90, 6.28318531);
  v94 = fmod(v93 + 6.28318531, 6.28318531) + -3.14159265;
  v95 = fmod(v92 - v90, 6.28318531);
  v96 = fmod(v95 + 6.28318531, 6.28318531) + -3.14159265;
  v97 = v90 + v83;
  v98 = fmax(v94, v96);
  v99 = v83 - v90;
  v100 = fmin(v96, v94);
  v101 = v97 * 0.5 + 0.785398163;
  if (v97 > 1.57079633)
    v101 = 1.57079633;
  v102 = tan(v101);
  v103 = v98 * 0.159154943 + 0.5;
  v104 = log(v102) * 0.159154943 + 0.5;
  v105 = v99 * 0.5 + 0.785398163;
  if (v99 < -1.57079633)
    v105 = 0.0;
  v106 = tan(v105);
  v107 = log(v106);
  v108 = (double)(1 << v91);
  LODWORD(v2) = vcvtmd_s64_f64(v103 * v108);
  v109 = ~(-1 << v91) - (1 << v91);
  v110 = vcvtmd_s64_f64((v100 * 0.159154943 + 0.5) * v108);
  v111 = vcvtmd_s64_f64(v104 * v108) + v109 + 1;
  v112 = vcvtmd_s64_f64((v107 * 0.159154943 + 0.5) * v108) + v109 + 1;
  if (v112 > v111 || v110 > v2)
  {
LABEL_93:
    altitude::QuickSurfaceManager::clear(this);
    *((_BYTE *)this + 64) = 0;
    return;
  }
  v160 = v111;
  v162 = v110;
  while (2)
  {
    v164 = v112;
    do
    {
      v115 = *((_QWORD *)this + 9);
      LODWORD(v165) = *((_DWORD *)this + 32);
      DWORD1(v165) = v112;
      *((_QWORD *)&v165 + 1) = v110;
      v166 = v82;
      v167 = 256;
      v168 = 1;
      v169 = -1007026176;
      (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v115 + 104))(&v170, v115, &v165, a2, 900000, 0xFFFFFFFFLL, 0);
      v116 = (_QWORD *)*((_QWORD *)this + 11);
      v117 = *((_QWORD *)this + 12);
      if ((unint64_t)v116 >= v117)
      {
        v125 = *((_QWORD *)this + 10);
        v126 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v116 - v125) >> 3);
        v127 = v126 + 1;
        if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_153;
        v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - v125) >> 3);
        if (2 * v128 > v127)
          v127 = 2 * v128;
        if (v128 >= 0x555555555555555)
          v127 = 0xAAAAAAAAAAAAAAALL;
        if (v127 > 0xAAAAAAAAAAAAAAALL)
LABEL_154:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v129 = 24 * v127;
        v130 = (char *)operator new(24 * v127);
        v131 = &v130[24 * v126];
        *(_QWORD *)v131 = &off_1E42C2D08;
        v132 = v171;
        v133 = v172;
        *((_QWORD *)v131 + 1) = v171;
        *((_QWORD *)v131 + 2) = v133;
        if (v133)
        {
          p_shared_owners = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldxr(p_shared_owners);
          while (__stxr(v135 + 1, p_shared_owners));
          v132 = *((_QWORD *)v131 + 1);
        }
        if (v132)
        {
          v136 = (unsigned int *)(v132 + 128);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 + 1, v136));
        }
        v138 = &v130[v129];
        v124 = v131 + 24;
        v139 = (char *)*((_QWORD *)this + 10);
        v140 = (char *)*((_QWORD *)this + 11);
        if (v140 == v139)
        {
          *((_QWORD *)this + 10) = v131;
          *((_QWORD *)this + 11) = v124;
          *((_QWORD *)this + 12) = v138;
          if (v140)
            goto LABEL_140;
        }
        else
        {
          v141 = v131;
          do
          {
            *((_QWORD *)v141 - 3) = &off_1E42C2D08;
            v141 -= 24;
            v142 = *((_QWORD *)v140 - 2);
            *((_QWORD *)v141 + 1) = v142;
            v143 = *((_QWORD *)v140 - 1);
            *((_QWORD *)v141 + 2) = v143;
            if (v143)
            {
              v144 = (unint64_t *)(v143 + 8);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
              v142 = *((_QWORD *)v131 - 2);
            }
            if (v142)
            {
              v146 = (unsigned int *)(v142 + 128);
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 + 1, v146));
            }
            v140 -= 24;
            v131 = v141;
          }
          while (v140 != v139);
          v140 = (char *)*((_QWORD *)this + 10);
          v148 = (char *)*((_QWORD *)this + 11);
          *((_QWORD *)this + 10) = v141;
          *((_QWORD *)this + 11) = v124;
          *((_QWORD *)this + 12) = v138;
          if (v148 != v140)
          {
            v149 = v2;
            v150 = v82;
            v151 = a2;
            v152 = v148 - 24;
            v153 = (void (***)(char *))(v148 - 24);
            do
            {
              v154 = *v153;
              v153 -= 3;
              (*v154)(v152);
              v76 = v152 == v140;
              v152 = (char *)v153;
            }
            while (!v76);
            a2 = v151;
            v82 = v150;
            v2 = v149;
            v112 = v164;
          }
          if (v140)
LABEL_140:
            operator delete(v140);
        }
      }
      else
      {
        *v116 = &off_1E42C2D08;
        v118 = v171;
        v116[1] = v171;
        v119 = v172;
        v116[2] = v172;
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
          v118 = v116[1];
        }
        if (v118)
        {
          v122 = (unsigned int *)(v118 + 128);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 + 1, v122));
        }
        v124 = v116 + 3;
      }
      *((_QWORD *)this + 11) = v124;
      v170 = &off_1E42C2D08;
      if (v171)
      {
        v155 = (unsigned int *)(v171 + 128);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
      }
      v157 = v172;
      if (v172)
      {
        v158 = (unint64_t *)&v172->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      ++v110;
    }
    while (v110 <= v2);
    ++v112;
    v110 = v162;
    if (v112 <= v160)
      continue;
    break;
  }
  v9 = *((_QWORD *)this + 10);
  v10 = *((_QWORD *)this + 11);
  if (v9 == v10)
    goto LABEL_93;
LABEL_3:
  if (v10 != v9)
  {
    v11 = 0;
    do
    {
      v13 = *(_QWORD *)(v9 + 24 * v11 + 8);
      pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152));
      v14 = *(_DWORD *)(v13 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152));
      if ((v14 & 1) != 0)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13))
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v13 + 48))(&v165, v13);
          v15 = *(_QWORD *)(v13 + 280);
          v16 = *(std::__shared_weak_count **)(v13 + 288);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = v165;
          if (*((_QWORD *)&v165 + 1))
          {
            v20 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          if (v16)
          {
            v22 = (unint64_t *)&v16->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_QWORD *)&v24 = v15;
          *((_QWORD *)&v24 + 1) = v16;
          v26 = (char *)*((_QWORD *)this + 14);
          v25 = *((_QWORD *)this + 15);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*((_QWORD *)this + 13);
            v29 = (v26 - v28) >> 5;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 59)
              goto LABEL_153;
            v161 = v24;
            v163 = v19;
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 4 > v30)
              v30 = v31 >> 4;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
              v32 = 0x7FFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32 >> 59)
              goto LABEL_154;
            v33 = 32 * v32;
            v34 = (char *)operator new(32 * v32);
            v35 = &v34[32 * v29];
            v36 = &v34[v33];
            *(_OWORD *)v35 = v163;
            *((_OWORD *)v35 + 1) = v161;
            v27 = v35 + 32;
            if (v26 != v28)
            {
              do
              {
                v37 = *((_OWORD *)v26 - 2);
                v26 -= 32;
                *((_OWORD *)v35 - 2) = v37;
                v35 -= 32;
                *(_QWORD *)v26 = 0;
                *((_QWORD *)v26 + 1) = 0;
                *((_OWORD *)v35 + 1) = *((_OWORD *)v26 + 1);
                *((_QWORD *)v26 + 2) = 0;
                *((_QWORD *)v26 + 3) = 0;
              }
              while (v26 != v28);
              v26 = (char *)*((_QWORD *)this + 13);
              v38 = (char *)*((_QWORD *)this + 14);
              *((_QWORD *)this + 13) = v35;
              *((_QWORD *)this + 14) = v27;
              *((_QWORD *)this + 15) = v36;
              while (2)
              {
                if (v38 == v26)
                  goto LABEL_44;
                v39 = (std::__shared_weak_count *)*((_QWORD *)v38 - 1);
                if (!v39)
                  goto LABEL_36;
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                  v42 = (std::__shared_weak_count *)*((_QWORD *)v38 - 3);
                  if (v42)
                  {
LABEL_37:
                    v43 = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 - 1, v43));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                }
                else
                {
LABEL_36:
                  v42 = (std::__shared_weak_count *)*((_QWORD *)v38 - 3);
                  if (v42)
                    goto LABEL_37;
                }
                v38 -= 32;
                continue;
              }
            }
            *((_QWORD *)this + 13) = v35;
            *((_QWORD *)this + 14) = v27;
            *((_QWORD *)this + 15) = v36;
LABEL_44:
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v26 = v19;
            *((_OWORD *)v26 + 1) = v24;
            v27 = v26 + 32;
          }
          *((_QWORD *)this + 14) = v27;
          v45 = *(uint64_t **)(v165 + 48);
          v46 = *(uint64_t **)(v165 + 56);
          while (v45 != v46)
          {
            v47 = *v45++;
            md::realistic::GlobeRenderLayer::registerNoCullingRenderable(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 40) + 8), v47, 3);
          }
          if (v16)
          {
            v48 = (unint64_t *)&v16->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        v53 = *((_QWORD *)this + 10);
        v54 = *((_QWORD *)this + 11);
        v55 = v53 + 24 * v11;
        v58 = *(_QWORD *)(v55 + 8);
        v57 = (uint64_t *)(v55 + 8);
        v56 = v58;
        if (v58)
        {
          v59 = (unsigned int *)(v56 + 128);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
        }
        v61 = v53 + 24 * (0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 3) - 1);
        v62 = *(_QWORD *)(v61 + 8);
        v63 = *(_QWORD *)(v61 + 16);
        if (v63)
        {
          v64 = (unint64_t *)(v63 + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        *v57 = v62;
        v66 = v53 + 24 * v11;
        v67 = *(std::__shared_weak_count **)(v66 + 16);
        *(_QWORD *)(v66 + 16) = v63;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          v62 = *v57;
        }
        if (v62)
        {
          v70 = (unsigned int *)(v62 + 128);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 + 1, v70));
        }
        v72 = *((_QWORD *)this + 11);
        if (v72 == *((_QWORD *)this + 10))
        {
          if (*((_QWORD *)this + 12) - v72 == -24)
          {
            for (j = (_QWORD *)(v72 + 8); ; j += 3)
            {
              *(j - 1) = &off_1E42C2D08;
              *j = 0;
              j[1] = 0;
            }
          }
LABEL_153:
          abort();
        }
        v12 = (void (***)(_QWORD))(v72 - 24);
        v73 = (void (***)(_QWORD))(v72 - 24);
        v74 = (void (***)(_QWORD))(v72 - 24);
        do
        {
          v75 = *v74;
          v74 -= 3;
          (*v75)(v73);
          v76 = v73 == v12;
          v73 = v74;
        }
        while (!v76);
        *((_QWORD *)this + 11) = v12;
      }
      else
      {
        ++v11;
        v12 = (void (***)(_QWORD))*((_QWORD *)this + 11);
      }
      v9 = *((_QWORD *)this + 10);
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v9) >> 3));
  }
}

void md::StandardCommandBufferSelector::~StandardCommandBufferSelector(md::StandardCommandBufferSelector *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E429A8C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void altitude::LabelDataManagerPrivate::~LabelDataManagerPrivate(altitude::LabelDataManagerPrivate *this)
{
  char *v2;
  uint64_t v3;
  altitude::LabelDataManagerPrivate *v4;
  uint64_t v5;
  altitude::LabelDataManagerPrivate *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E42C61B0;
  *((_QWORD *)this + 1) = &unk_1E42C61F0;
  v2 = (char *)this + 8;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 688);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  v4 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 10);
  if (v4 == (altitude::LabelDataManagerPrivate *)((char *)this + 56))
  {
    v5 = 4;
    v4 = (altitude::LabelDataManagerPrivate *)((char *)this + 56);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 6);
  if (v6 == (altitude::LabelDataManagerPrivate *)((char *)this + 24))
  {
    v7 = 4;
    v6 = (altitude::LabelDataManagerPrivate *)((char *)this + 24);
  }
  else
  {
    if (!v6)
      return;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
}

{
  char *v2;
  uint64_t v3;
  altitude::LabelDataManagerPrivate *v4;
  uint64_t v5;
  altitude::LabelDataManagerPrivate *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E42C61B0;
  *((_QWORD *)this + 1) = &unk_1E42C61F0;
  v2 = (char *)this + 8;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 688);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  v4 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 10);
  if (v4 == (altitude::LabelDataManagerPrivate *)((char *)this + 56))
  {
    v5 = 4;
    v4 = (altitude::LabelDataManagerPrivate *)((char *)this + 56);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 6);
  if (v6 == (altitude::LabelDataManagerPrivate *)((char *)this + 24))
  {
    v7 = 4;
    v6 = (altitude::LabelDataManagerPrivate *)((char *)this + 24);
  }
  else
  {
    if (!v6)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_13:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::LabelDataManagerPrivate::setCreateLabelTileCallback(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 3;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v44 = v43;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v43);
    }
    else
    {
      v44 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v44 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v43, v3);
  result = v44;
  if (v44 == v43)
  {
    v6 = 4;
    result = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_11;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 856) + 136) + 8) + 40)
                              + 40)
                  + 56);
  if (!v7)
    return result;
  v8 = (_QWORD *)a1[6];
  if (!v8)
  {
    v36 = 0;
    v10 = v7 + 18;
    v44 = 0;
    goto LABEL_21;
  }
  if (v8 != v3)
  {
    v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    v36 = v9;
    v10 = v7 + 18;
    if (v9)
      goto LABEL_15;
LABEL_19:
    v44 = 0;
    goto LABEL_21;
  }
  v36 = v35;
  (*(void (**)(_QWORD *, _QWORD *))(*v3 + 24))(v3, v35);
  v9 = v36;
  v10 = v7 + 18;
  if (!v36)
    goto LABEL_19;
LABEL_15:
  if (v9 == v35)
  {
    v44 = v43;
    (*(void (**)(_QWORD *, _QWORD *))(v35[0] + 24))(v35, v43);
  }
  else
  {
    v44 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
  }
LABEL_21:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v43, v10);
  v11 = v44;
  if (v44 == v43)
  {
    v12 = 4;
    v11 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = v7[13];
  v14 = (_QWORD *)v7[21];
  if (!v14)
  {
    v42 = 0;
    v15 = (_QWORD *)(v13 + 192);
    goto LABEL_34;
  }
  if (v14 == v10)
  {
    v42 = v41;
    (*(void (**)(_QWORD *, _QWORD *))(*v10 + 24))(v10, v41);
    v14 = v42;
    v15 = (_QWORD *)(v13 + 192);
    if (v42)
      goto LABEL_32;
LABEL_34:
    v44 = v14;
    goto LABEL_35;
  }
  v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
  v42 = v14;
  v15 = (_QWORD *)(v13 + 192);
  if (!v14)
    goto LABEL_34;
LABEL_32:
  if (v14 != v41)
  {
    v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    goto LABEL_34;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v43);
LABEL_35:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v43, v15);
  v16 = v44;
  if (v44 == v43)
  {
    v17 = 4;
    v16 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_40;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_40:
  v18 = v42;
  if (v42 == v41)
  {
    v19 = 4;
    v18 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_45;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_45:
  v20 = v7[14];
  v21 = (_QWORD *)v7[21];
  if (!v21)
  {
    v40 = 0;
    v22 = (_QWORD *)(v20 + 192);
    goto LABEL_53;
  }
  if (v21 == v10)
  {
    v40 = v39;
    (*(void (**)(_QWORD *, _QWORD *))(*v10 + 24))(v10, v39);
    v21 = v40;
    v22 = (_QWORD *)(v20 + 192);
    if (v40)
      goto LABEL_51;
LABEL_53:
    v44 = v21;
    goto LABEL_54;
  }
  v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
  v40 = v21;
  v22 = (_QWORD *)(v20 + 192);
  if (!v21)
    goto LABEL_53;
LABEL_51:
  if (v21 != v39)
  {
    v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
    goto LABEL_53;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v39[0] + 24))(v39, v43);
LABEL_54:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v43, v22);
  v23 = v44;
  if (v44 == v43)
  {
    v24 = 4;
    v23 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_59;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_59:
  v25 = v40;
  if (v40 == v39)
  {
    v26 = 4;
    v25 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_64;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_64:
  v27 = v7[15];
  v28 = (_QWORD *)v7[21];
  if (!v28)
  {
    v38 = 0;
    v29 = (_QWORD *)(v27 + 192);
    goto LABEL_72;
  }
  if (v28 == v10)
  {
    v38 = v37;
    (*(void (**)(_QWORD *, _QWORD *))(*v10 + 24))(v10, v37);
    v28 = v38;
    v29 = (_QWORD *)(v27 + 192);
    if (v38)
      goto LABEL_70;
LABEL_72:
    v44 = v28;
    goto LABEL_73;
  }
  v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
  v38 = v28;
  v29 = (_QWORD *)(v27 + 192);
  if (!v28)
    goto LABEL_72;
LABEL_70:
  if (v28 != v37)
  {
    v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
    goto LABEL_72;
  }
  v44 = v43;
  (*(void (**)(_QWORD *, _QWORD *))(v37[0] + 24))(v37, v43);
LABEL_73:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v43, v29);
  v30 = v44;
  if (v44 == v43)
  {
    v31 = 4;
    v30 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_78;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_78:
  v32 = v38;
  if (v38 == v37)
  {
    v33 = 4;
    v32 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_83;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_83:
  result = v36;
  if (v36 == v35)
  {
    v34 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
}

